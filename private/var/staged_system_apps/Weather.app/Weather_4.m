unint64_t sub_1001F9170()
{
  unint64_t result;

  result = qword_100BCA908;
  if (!qword_100BCA908)
  {
    result = swift_getWitnessTable(&unk_1009884C0, &type metadata for LocationElevatedAqiSevereConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCA908);
  }
  return result;
}

unint64_t sub_1001F91AC()
{
  unint64_t result;

  result = qword_100BCA920;
  if (!qword_100BCA920)
  {
    result = swift_getWitnessTable(&unk_100988470, &type metadata for LocationElevatedAqiSevereNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCA920);
  }
  return result;
}

unint64_t sub_1001F91E8()
{
  unint64_t result;

  result = qword_100BCA938;
  if (!qword_100BCA938)
  {
    result = swift_getWitnessTable(&unk_100988420, &type metadata for LocationMinorAlertConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCA938);
  }
  return result;
}

unint64_t sub_1001F9224()
{
  unint64_t result;

  result = qword_100BCA950;
  if (!qword_100BCA950)
  {
    result = swift_getWitnessTable(&unk_1009883D0, &type metadata for LocationNhpConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCA950);
  }
  return result;
}

unint64_t sub_1001F9260()
{
  unint64_t result;

  result = qword_100BCA968;
  if (!qword_100BCA968)
  {
    result = swift_getWitnessTable(&unk_100988380, &type metadata for LocationNhpMinorAlertConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCA968);
  }
  return result;
}

unint64_t sub_1001F929C()
{
  unint64_t result;

  result = qword_100BCA980;
  if (!qword_100BCA980)
  {
    result = swift_getWitnessTable(&unk_100988330, &type metadata for LocationNhpNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCA980);
  }
  return result;
}

unint64_t sub_1001F92D8()
{
  unint64_t result;

  result = qword_100BCA998;
  if (!qword_100BCA998)
  {
    result = swift_getWitnessTable(&unk_1009882E0, &type metadata for LocationNoAqiConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCA998);
  }
  return result;
}

unint64_t sub_1001F9314()
{
  unint64_t result;

  result = qword_100BCA9B0;
  if (!qword_100BCA9B0)
  {
    result = swift_getWitnessTable(&unk_100988290, &type metadata for LocationNoAqiNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCA9B0);
  }
  return result;
}

unint64_t sub_1001F9350()
{
  unint64_t result;

  result = qword_100BCA9C8;
  if (!qword_100BCA9C8)
  {
    result = swift_getWitnessTable(&unk_100988240, &type metadata for LocationNoAqiNhpConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCA9C8);
  }
  return result;
}

unint64_t sub_1001F938C()
{
  unint64_t result;

  result = qword_100BCA9E0;
  if (!qword_100BCA9E0)
  {
    result = swift_getWitnessTable(&unk_1009881F0, &type metadata for LocationNoAqiNhpNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCA9E0);
  }
  return result;
}

unint64_t sub_1001F93C8()
{
  unint64_t result;

  result = qword_100BCA9F8;
  if (!qword_100BCA9F8)
  {
    result = swift_getWitnessTable(&unk_1009881A0, &type metadata for LocationNoAqiSevereConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCA9F8);
  }
  return result;
}

unint64_t sub_1001F9404()
{
  unint64_t result;

  result = qword_100BCAA10;
  if (!qword_100BCAA10)
  {
    result = swift_getWitnessTable(&unk_100988150, &type metadata for LocationNoAqiSevereNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAA10);
  }
  return result;
}

unint64_t sub_1001F9440()
{
  unint64_t result;

  result = qword_100BCAA28;
  if (!qword_100BCAA28)
  {
    result = swift_getWitnessTable(&unk_100988100, &type metadata for LocationNoAqiSevereNhpConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAA28);
  }
  return result;
}

unint64_t sub_1001F947C()
{
  unint64_t result;

  result = qword_100BCAA40;
  if (!qword_100BCAA40)
  {
    result = swift_getWitnessTable(&unk_1009880B0, &type metadata for LocationNoAqiSevereNhpNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAA40);
  }
  return result;
}

unint64_t sub_1001F94B8()
{
  unint64_t result;

  result = qword_100BCAA58;
  if (!qword_100BCAA58)
  {
    result = swift_getWitnessTable(&unk_100988060, &type metadata for LocationSevereConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAA58);
  }
  return result;
}

unint64_t sub_1001F94F4()
{
  unint64_t result;

  result = qword_100BCAA70;
  if (!qword_100BCAA70)
  {
    result = swift_getWitnessTable(&unk_100988010, &type metadata for LocationSevereNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAA70);
  }
  return result;
}

unint64_t sub_1001F9530()
{
  unint64_t result;

  result = qword_100BCAA88;
  if (!qword_100BCAA88)
  {
    result = swift_getWitnessTable(&unk_100987FC0, &type metadata for LocationSevereNhpAqiConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAA88);
  }
  return result;
}

unint64_t sub_1001F956C()
{
  unint64_t result;

  result = qword_100BCAAA0;
  if (!qword_100BCAAA0)
  {
    result = swift_getWitnessTable(&unk_100987F70, &type metadata for LocationSevereNhpConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAAA0);
  }
  return result;
}

unint64_t sub_1001F95A8()
{
  unint64_t result;

  result = qword_100BCAAB8;
  if (!qword_100BCAAB8)
  {
    result = swift_getWitnessTable(&unk_100987F20, &type metadata for LocationSevereNhpNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAAB8);
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationSevereNhpNewsConfiguration.CodingKeys()
{
  return &type metadata for LocationSevereNhpNewsConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for LocationSevereNhpConfiguration.CodingKeys()
{
  return &type metadata for LocationSevereNhpConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for LocationSevereNhpAqiConfiguration.CodingKeys()
{
  return &type metadata for LocationSevereNhpAqiConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for LocationSevereNewsConfiguration.CodingKeys()
{
  return &type metadata for LocationSevereNewsConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for LocationSevereConfiguration.CodingKeys()
{
  return &type metadata for LocationSevereConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for LocationNoAqiSevereNhpNewsConfiguration.CodingKeys()
{
  return &type metadata for LocationNoAqiSevereNhpNewsConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for LocationNoAqiSevereNhpConfiguration.CodingKeys()
{
  return &type metadata for LocationNoAqiSevereNhpConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for LocationNoAqiSevereNewsConfiguration.CodingKeys()
{
  return &type metadata for LocationNoAqiSevereNewsConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for LocationNoAqiSevereConfiguration.CodingKeys()
{
  return &type metadata for LocationNoAqiSevereConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for LocationNoAqiNhpNewsConfiguration.CodingKeys()
{
  return &type metadata for LocationNoAqiNhpNewsConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for LocationNoAqiNhpConfiguration.CodingKeys()
{
  return &type metadata for LocationNoAqiNhpConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for LocationNoAqiNewsConfiguration.CodingKeys()
{
  return &type metadata for LocationNoAqiNewsConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for LocationNoAqiConfiguration.CodingKeys()
{
  return &type metadata for LocationNoAqiConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for LocationNhpNewsConfiguration.CodingKeys()
{
  return &type metadata for LocationNhpNewsConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for LocationNhpMinorAlertConfiguration.CodingKeys()
{
  return &type metadata for LocationNhpMinorAlertConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for LocationNhpConfiguration.CodingKeys()
{
  return &type metadata for LocationNhpConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for LocationMinorAlertConfiguration.CodingKeys()
{
  return &type metadata for LocationMinorAlertConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for LocationElevatedAqiSevereNewsConfiguration.CodingKeys()
{
  return &type metadata for LocationElevatedAqiSevereNewsConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for LocationElevatedAqiSevereConfiguration.CodingKeys()
{
  return &type metadata for LocationElevatedAqiSevereConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for LocationElevatedAqiNewsConfiguration.CodingKeys()
{
  return &type metadata for LocationElevatedAqiNewsConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for LocationElevatedAqiMinorAlertConfiguration.CodingKeys()
{
  return &type metadata for LocationElevatedAqiMinorAlertConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for LocationElevatedAqiConfiguration.CodingKeys()
{
  return &type metadata for LocationElevatedAqiConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for LocationDefaultTrendNewsConfiguration.CodingKeys()
{
  return &type metadata for LocationDefaultTrendNewsConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for LocationDefaultNewsConfiguration.CodingKeys()
{
  return &type metadata for LocationDefaultNewsConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for LocationDefaultConfiguration.CodingKeys()
{
  return &type metadata for LocationDefaultConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for NotificationsOptInViewState.CodingKeys()
{
  return &type metadata for NotificationsOptInViewState.CodingKeys;
}

ValueMetadata *type metadata accessor for ReportWeatherViewState.CodingKeys()
{
  return &type metadata for ReportWeatherViewState.CodingKeys;
}

ValueMetadata *type metadata accessor for LocationViewerViewState.CodingKeys()
{
  return &type metadata for LocationViewerViewState.CodingKeys;
}

ValueMetadata *type metadata accessor for ListViewState.CodingKeys()
{
  return &type metadata for ListViewState.CodingKeys;
}

uint64_t getEnumTagSinglePayload for TimeAction(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s7Weather9MainStateV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1001F9844 + 4 * byte_10098190E[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1001F9864 + 4 * byte_100981913[v4]))();
}

_BYTE *sub_1001F9844(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1001F9864(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001F986C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001F9874(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001F987C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001F9884(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ReportWeatherContentViewModel.CodingKeys()
{
  return &type metadata for ReportWeatherContentViewModel.CodingKeys;
}

unint64_t sub_1001F98A4()
{
  unint64_t result;

  result = qword_100BCAAC8;
  if (!qword_100BCAAC8)
  {
    result = swift_getWitnessTable(&unk_100986A20, &type metadata for ReportWeatherContentViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAAC8);
  }
  return result;
}

unint64_t sub_1001F98E4()
{
  unint64_t result;

  result = qword_100BCAAD0;
  if (!qword_100BCAAD0)
  {
    result = swift_getWitnessTable(&unk_100986AD8, &type metadata for ListViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAAD0);
  }
  return result;
}

unint64_t sub_1001F9924()
{
  unint64_t result;

  result = qword_100BCAAD8;
  if (!qword_100BCAAD8)
  {
    result = swift_getWitnessTable(&unk_100986B90, &type metadata for LocationViewerViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAAD8);
  }
  return result;
}

unint64_t sub_1001F9964()
{
  unint64_t result;

  result = qword_100BCAAE0;
  if (!qword_100BCAAE0)
  {
    result = swift_getWitnessTable(&unk_100986C48, &type metadata for ReportWeatherViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAAE0);
  }
  return result;
}

unint64_t sub_1001F99A4()
{
  unint64_t result;

  result = qword_100BCAAE8;
  if (!qword_100BCAAE8)
  {
    result = swift_getWitnessTable(&unk_100986D00, &type metadata for NotificationsOptInViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAAE8);
  }
  return result;
}

unint64_t sub_1001F99E4()
{
  unint64_t result;

  result = qword_100BCAAF0;
  if (!qword_100BCAAF0)
  {
    result = swift_getWitnessTable(&unk_100986DB8, &type metadata for LocationDefaultConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAAF0);
  }
  return result;
}

unint64_t sub_1001F9A24()
{
  unint64_t result;

  result = qword_100BCAAF8;
  if (!qword_100BCAAF8)
  {
    result = swift_getWitnessTable(&unk_100986E70, &type metadata for LocationDefaultNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAAF8);
  }
  return result;
}

unint64_t sub_1001F9A64()
{
  unint64_t result;

  result = qword_100BCAB00;
  if (!qword_100BCAB00)
  {
    result = swift_getWitnessTable(&unk_100986F28, &type metadata for LocationDefaultTrendNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAB00);
  }
  return result;
}

unint64_t sub_1001F9AA4()
{
  unint64_t result;

  result = qword_100BCAB08;
  if (!qword_100BCAB08)
  {
    result = swift_getWitnessTable(&unk_100986FE0, &type metadata for LocationElevatedAqiConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAB08);
  }
  return result;
}

unint64_t sub_1001F9AE4()
{
  unint64_t result;

  result = qword_100BCAB10;
  if (!qword_100BCAB10)
  {
    result = swift_getWitnessTable(&unk_100987098, &type metadata for LocationElevatedAqiMinorAlertConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAB10);
  }
  return result;
}

unint64_t sub_1001F9B24()
{
  unint64_t result;

  result = qword_100BCAB18;
  if (!qword_100BCAB18)
  {
    result = swift_getWitnessTable(&unk_100987150, &type metadata for LocationElevatedAqiNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAB18);
  }
  return result;
}

unint64_t sub_1001F9B64()
{
  unint64_t result;

  result = qword_100BCAB20;
  if (!qword_100BCAB20)
  {
    result = swift_getWitnessTable(&unk_100987208, &type metadata for LocationElevatedAqiSevereConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAB20);
  }
  return result;
}

unint64_t sub_1001F9BA4()
{
  unint64_t result;

  result = qword_100BCAB28;
  if (!qword_100BCAB28)
  {
    result = swift_getWitnessTable(&unk_1009872C0, &type metadata for LocationElevatedAqiSevereNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAB28);
  }
  return result;
}

unint64_t sub_1001F9BE4()
{
  unint64_t result;

  result = qword_100BCAB30;
  if (!qword_100BCAB30)
  {
    result = swift_getWitnessTable(&unk_100987378, &type metadata for LocationMinorAlertConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAB30);
  }
  return result;
}

unint64_t sub_1001F9C24()
{
  unint64_t result;

  result = qword_100BCAB38;
  if (!qword_100BCAB38)
  {
    result = swift_getWitnessTable(&unk_100987430, &type metadata for LocationNhpConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAB38);
  }
  return result;
}

unint64_t sub_1001F9C64()
{
  unint64_t result;

  result = qword_100BCAB40;
  if (!qword_100BCAB40)
  {
    result = swift_getWitnessTable(&unk_1009874E8, &type metadata for LocationNhpMinorAlertConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAB40);
  }
  return result;
}

unint64_t sub_1001F9CA4()
{
  unint64_t result;

  result = qword_100BCAB48;
  if (!qword_100BCAB48)
  {
    result = swift_getWitnessTable(&unk_1009875A0, &type metadata for LocationNhpNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAB48);
  }
  return result;
}

unint64_t sub_1001F9CE4()
{
  unint64_t result;

  result = qword_100BCAB50;
  if (!qword_100BCAB50)
  {
    result = swift_getWitnessTable(&unk_100987658, &type metadata for LocationNoAqiConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAB50);
  }
  return result;
}

unint64_t sub_1001F9D24()
{
  unint64_t result;

  result = qword_100BCAB58;
  if (!qword_100BCAB58)
  {
    result = swift_getWitnessTable(&unk_100987710, &type metadata for LocationNoAqiNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAB58);
  }
  return result;
}

unint64_t sub_1001F9D64()
{
  unint64_t result;

  result = qword_100BCAB60;
  if (!qword_100BCAB60)
  {
    result = swift_getWitnessTable(&unk_1009877C8, &type metadata for LocationNoAqiNhpConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAB60);
  }
  return result;
}

unint64_t sub_1001F9DA4()
{
  unint64_t result;

  result = qword_100BCAB68;
  if (!qword_100BCAB68)
  {
    result = swift_getWitnessTable(&unk_100987880, &type metadata for LocationNoAqiNhpNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAB68);
  }
  return result;
}

unint64_t sub_1001F9DE4()
{
  unint64_t result;

  result = qword_100BCAB70;
  if (!qword_100BCAB70)
  {
    result = swift_getWitnessTable(&unk_100987938, &type metadata for LocationNoAqiSevereConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAB70);
  }
  return result;
}

unint64_t sub_1001F9E24()
{
  unint64_t result;

  result = qword_100BCAB78;
  if (!qword_100BCAB78)
  {
    result = swift_getWitnessTable(&unk_1009879F0, &type metadata for LocationNoAqiSevereNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAB78);
  }
  return result;
}

unint64_t sub_1001F9E64()
{
  unint64_t result;

  result = qword_100BCAB80;
  if (!qword_100BCAB80)
  {
    result = swift_getWitnessTable(&unk_100987AA8, &type metadata for LocationNoAqiSevereNhpConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAB80);
  }
  return result;
}

unint64_t sub_1001F9EA4()
{
  unint64_t result;

  result = qword_100BCAB88;
  if (!qword_100BCAB88)
  {
    result = swift_getWitnessTable(&unk_100987B60, &type metadata for LocationNoAqiSevereNhpNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAB88);
  }
  return result;
}

unint64_t sub_1001F9EE4()
{
  unint64_t result;

  result = qword_100BCAB90;
  if (!qword_100BCAB90)
  {
    result = swift_getWitnessTable(&unk_100987C18, &type metadata for LocationSevereConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAB90);
  }
  return result;
}

unint64_t sub_1001F9F24()
{
  unint64_t result;

  result = qword_100BCAB98;
  if (!qword_100BCAB98)
  {
    result = swift_getWitnessTable(&unk_100987CD0, &type metadata for LocationSevereNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAB98);
  }
  return result;
}

unint64_t sub_1001F9F64()
{
  unint64_t result;

  result = qword_100BCABA0;
  if (!qword_100BCABA0)
  {
    result = swift_getWitnessTable(&unk_100987D88, &type metadata for LocationSevereNhpAqiConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCABA0);
  }
  return result;
}

unint64_t sub_1001F9FA4()
{
  unint64_t result;

  result = qword_100BCABA8;
  if (!qword_100BCABA8)
  {
    result = swift_getWitnessTable(&unk_100987E40, &type metadata for LocationSevereNhpConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCABA8);
  }
  return result;
}

unint64_t sub_1001F9FE4()
{
  unint64_t result;

  result = qword_100BCABB0;
  if (!qword_100BCABB0)
  {
    result = swift_getWitnessTable(&unk_100987EF8, &type metadata for LocationSevereNhpNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCABB0);
  }
  return result;
}

unint64_t sub_1001FA024()
{
  unint64_t result;

  result = qword_100BCABB8;
  if (!qword_100BCABB8)
  {
    result = swift_getWitnessTable(&unk_100987E68, &type metadata for LocationSevereNhpNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCABB8);
  }
  return result;
}

unint64_t sub_1001FA064()
{
  unint64_t result;

  result = qword_100BCABC0;
  if (!qword_100BCABC0)
  {
    result = swift_getWitnessTable(&unk_100987E90, &type metadata for LocationSevereNhpNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCABC0);
  }
  return result;
}

unint64_t sub_1001FA0A4()
{
  unint64_t result;

  result = qword_100BCABC8;
  if (!qword_100BCABC8)
  {
    result = swift_getWitnessTable(&unk_100987DB0, &type metadata for LocationSevereNhpConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCABC8);
  }
  return result;
}

unint64_t sub_1001FA0E4()
{
  unint64_t result;

  result = qword_100BCABD0;
  if (!qword_100BCABD0)
  {
    result = swift_getWitnessTable(&unk_100987DD8, &type metadata for LocationSevereNhpConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCABD0);
  }
  return result;
}

unint64_t sub_1001FA124()
{
  unint64_t result;

  result = qword_100BCABD8;
  if (!qword_100BCABD8)
  {
    result = swift_getWitnessTable(&unk_100987CF8, &type metadata for LocationSevereNhpAqiConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCABD8);
  }
  return result;
}

unint64_t sub_1001FA164()
{
  unint64_t result;

  result = qword_100BCABE0;
  if (!qword_100BCABE0)
  {
    result = swift_getWitnessTable(&unk_100987D20, &type metadata for LocationSevereNhpAqiConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCABE0);
  }
  return result;
}

unint64_t sub_1001FA1A4()
{
  unint64_t result;

  result = qword_100BCABE8;
  if (!qword_100BCABE8)
  {
    result = swift_getWitnessTable(&unk_100987C40, &type metadata for LocationSevereNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCABE8);
  }
  return result;
}

unint64_t sub_1001FA1E4()
{
  unint64_t result;

  result = qword_100BCABF0;
  if (!qword_100BCABF0)
  {
    result = swift_getWitnessTable(&unk_100987C68, &type metadata for LocationSevereNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCABF0);
  }
  return result;
}

unint64_t sub_1001FA224()
{
  unint64_t result;

  result = qword_100BCABF8;
  if (!qword_100BCABF8)
  {
    result = swift_getWitnessTable(&unk_100987B88, &type metadata for LocationSevereConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCABF8);
  }
  return result;
}

unint64_t sub_1001FA264()
{
  unint64_t result;

  result = qword_100BCAC00;
  if (!qword_100BCAC00)
  {
    result = swift_getWitnessTable(&unk_100987BB0, &type metadata for LocationSevereConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAC00);
  }
  return result;
}

unint64_t sub_1001FA2A4()
{
  unint64_t result;

  result = qword_100BCAC08;
  if (!qword_100BCAC08)
  {
    result = swift_getWitnessTable(&unk_100987AD0, &type metadata for LocationNoAqiSevereNhpNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAC08);
  }
  return result;
}

unint64_t sub_1001FA2E4()
{
  unint64_t result;

  result = qword_100BCAC10;
  if (!qword_100BCAC10)
  {
    result = swift_getWitnessTable(&unk_100987AF8, &type metadata for LocationNoAqiSevereNhpNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAC10);
  }
  return result;
}

unint64_t sub_1001FA324()
{
  unint64_t result;

  result = qword_100BCAC18;
  if (!qword_100BCAC18)
  {
    result = swift_getWitnessTable(&unk_100987A18, &type metadata for LocationNoAqiSevereNhpConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAC18);
  }
  return result;
}

unint64_t sub_1001FA364()
{
  unint64_t result;

  result = qword_100BCAC20;
  if (!qword_100BCAC20)
  {
    result = swift_getWitnessTable(&unk_100987A40, &type metadata for LocationNoAqiSevereNhpConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAC20);
  }
  return result;
}

unint64_t sub_1001FA3A4()
{
  unint64_t result;

  result = qword_100BCAC28;
  if (!qword_100BCAC28)
  {
    result = swift_getWitnessTable(&unk_100987960, &type metadata for LocationNoAqiSevereNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAC28);
  }
  return result;
}

unint64_t sub_1001FA3E4()
{
  unint64_t result;

  result = qword_100BCAC30;
  if (!qword_100BCAC30)
  {
    result = swift_getWitnessTable(&unk_100987988, &type metadata for LocationNoAqiSevereNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAC30);
  }
  return result;
}

unint64_t sub_1001FA424()
{
  unint64_t result;

  result = qword_100BCAC38;
  if (!qword_100BCAC38)
  {
    result = swift_getWitnessTable(&unk_1009878A8, &type metadata for LocationNoAqiSevereConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAC38);
  }
  return result;
}

unint64_t sub_1001FA464()
{
  unint64_t result;

  result = qword_100BCAC40;
  if (!qword_100BCAC40)
  {
    result = swift_getWitnessTable(&unk_1009878D0, &type metadata for LocationNoAqiSevereConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAC40);
  }
  return result;
}

unint64_t sub_1001FA4A4()
{
  unint64_t result;

  result = qword_100BCAC48;
  if (!qword_100BCAC48)
  {
    result = swift_getWitnessTable(&unk_1009877F0, &type metadata for LocationNoAqiNhpNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAC48);
  }
  return result;
}

unint64_t sub_1001FA4E4()
{
  unint64_t result;

  result = qword_100BCAC50;
  if (!qword_100BCAC50)
  {
    result = swift_getWitnessTable(&unk_100987818, &type metadata for LocationNoAqiNhpNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAC50);
  }
  return result;
}

unint64_t sub_1001FA524()
{
  unint64_t result;

  result = qword_100BCAC58;
  if (!qword_100BCAC58)
  {
    result = swift_getWitnessTable(&unk_100987738, &type metadata for LocationNoAqiNhpConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAC58);
  }
  return result;
}

unint64_t sub_1001FA564()
{
  unint64_t result;

  result = qword_100BCAC60;
  if (!qword_100BCAC60)
  {
    result = swift_getWitnessTable(&unk_100987760, &type metadata for LocationNoAqiNhpConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAC60);
  }
  return result;
}

unint64_t sub_1001FA5A4()
{
  unint64_t result;

  result = qword_100BCAC68;
  if (!qword_100BCAC68)
  {
    result = swift_getWitnessTable(&unk_100987680, &type metadata for LocationNoAqiNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAC68);
  }
  return result;
}

unint64_t sub_1001FA5E4()
{
  unint64_t result;

  result = qword_100BCAC70;
  if (!qword_100BCAC70)
  {
    result = swift_getWitnessTable(&unk_1009876A8, &type metadata for LocationNoAqiNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAC70);
  }
  return result;
}

unint64_t sub_1001FA624()
{
  unint64_t result;

  result = qword_100BCAC78;
  if (!qword_100BCAC78)
  {
    result = swift_getWitnessTable(&unk_1009875C8, &type metadata for LocationNoAqiConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAC78);
  }
  return result;
}

unint64_t sub_1001FA664()
{
  unint64_t result;

  result = qword_100BCAC80;
  if (!qword_100BCAC80)
  {
    result = swift_getWitnessTable(&unk_1009875F0, &type metadata for LocationNoAqiConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAC80);
  }
  return result;
}

unint64_t sub_1001FA6A4()
{
  unint64_t result;

  result = qword_100BCAC88;
  if (!qword_100BCAC88)
  {
    result = swift_getWitnessTable(&unk_100987510, &type metadata for LocationNhpNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAC88);
  }
  return result;
}

unint64_t sub_1001FA6E4()
{
  unint64_t result;

  result = qword_100BCAC90;
  if (!qword_100BCAC90)
  {
    result = swift_getWitnessTable(&unk_100987538, &type metadata for LocationNhpNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAC90);
  }
  return result;
}

unint64_t sub_1001FA724()
{
  unint64_t result;

  result = qword_100BCAC98;
  if (!qword_100BCAC98)
  {
    result = swift_getWitnessTable(&unk_100987458, &type metadata for LocationNhpMinorAlertConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAC98);
  }
  return result;
}

unint64_t sub_1001FA764()
{
  unint64_t result;

  result = qword_100BCACA0;
  if (!qword_100BCACA0)
  {
    result = swift_getWitnessTable(&unk_100987480, &type metadata for LocationNhpMinorAlertConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCACA0);
  }
  return result;
}

unint64_t sub_1001FA7A4()
{
  unint64_t result;

  result = qword_100BCACA8;
  if (!qword_100BCACA8)
  {
    result = swift_getWitnessTable(&unk_1009873A0, &type metadata for LocationNhpConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCACA8);
  }
  return result;
}

unint64_t sub_1001FA7E4()
{
  unint64_t result;

  result = qword_100BCACB0;
  if (!qword_100BCACB0)
  {
    result = swift_getWitnessTable(&unk_1009873C8, &type metadata for LocationNhpConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCACB0);
  }
  return result;
}

unint64_t sub_1001FA824()
{
  unint64_t result;

  result = qword_100BCACB8;
  if (!qword_100BCACB8)
  {
    result = swift_getWitnessTable(&unk_1009872E8, &type metadata for LocationMinorAlertConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCACB8);
  }
  return result;
}

unint64_t sub_1001FA864()
{
  unint64_t result;

  result = qword_100BCACC0;
  if (!qword_100BCACC0)
  {
    result = swift_getWitnessTable(&unk_100987310, &type metadata for LocationMinorAlertConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCACC0);
  }
  return result;
}

unint64_t sub_1001FA8A4()
{
  unint64_t result;

  result = qword_100BCACC8;
  if (!qword_100BCACC8)
  {
    result = swift_getWitnessTable(&unk_100987230, &type metadata for LocationElevatedAqiSevereNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCACC8);
  }
  return result;
}

unint64_t sub_1001FA8E4()
{
  unint64_t result;

  result = qword_100BCACD0;
  if (!qword_100BCACD0)
  {
    result = swift_getWitnessTable(&unk_100987258, &type metadata for LocationElevatedAqiSevereNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCACD0);
  }
  return result;
}

unint64_t sub_1001FA924()
{
  unint64_t result;

  result = qword_100BCACD8;
  if (!qword_100BCACD8)
  {
    result = swift_getWitnessTable(&unk_100987178, &type metadata for LocationElevatedAqiSevereConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCACD8);
  }
  return result;
}

unint64_t sub_1001FA964()
{
  unint64_t result;

  result = qword_100BCACE0;
  if (!qword_100BCACE0)
  {
    result = swift_getWitnessTable(&unk_1009871A0, &type metadata for LocationElevatedAqiSevereConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCACE0);
  }
  return result;
}

unint64_t sub_1001FA9A4()
{
  unint64_t result;

  result = qword_100BCACE8;
  if (!qword_100BCACE8)
  {
    result = swift_getWitnessTable(&unk_1009870C0, &type metadata for LocationElevatedAqiNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCACE8);
  }
  return result;
}

unint64_t sub_1001FA9E4()
{
  unint64_t result;

  result = qword_100BCACF0;
  if (!qword_100BCACF0)
  {
    result = swift_getWitnessTable(&unk_1009870E8, &type metadata for LocationElevatedAqiNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCACF0);
  }
  return result;
}

unint64_t sub_1001FAA24()
{
  unint64_t result;

  result = qword_100BCACF8;
  if (!qword_100BCACF8)
  {
    result = swift_getWitnessTable(&unk_100987008, &type metadata for LocationElevatedAqiMinorAlertConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCACF8);
  }
  return result;
}

unint64_t sub_1001FAA64()
{
  unint64_t result;

  result = qword_100BCAD00;
  if (!qword_100BCAD00)
  {
    result = swift_getWitnessTable(&unk_100987030, &type metadata for LocationElevatedAqiMinorAlertConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAD00);
  }
  return result;
}

unint64_t sub_1001FAAA4()
{
  unint64_t result;

  result = qword_100BCAD08;
  if (!qword_100BCAD08)
  {
    result = swift_getWitnessTable(&unk_100986F50, &type metadata for LocationElevatedAqiConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAD08);
  }
  return result;
}

unint64_t sub_1001FAAE4()
{
  unint64_t result;

  result = qword_100BCAD10;
  if (!qword_100BCAD10)
  {
    result = swift_getWitnessTable(&unk_100986F78, &type metadata for LocationElevatedAqiConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAD10);
  }
  return result;
}

unint64_t sub_1001FAB24()
{
  unint64_t result;

  result = qword_100BCAD18;
  if (!qword_100BCAD18)
  {
    result = swift_getWitnessTable(&unk_100986E98, &type metadata for LocationDefaultTrendNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAD18);
  }
  return result;
}

unint64_t sub_1001FAB64()
{
  unint64_t result;

  result = qword_100BCAD20;
  if (!qword_100BCAD20)
  {
    result = swift_getWitnessTable(&unk_100986EC0, &type metadata for LocationDefaultTrendNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAD20);
  }
  return result;
}

unint64_t sub_1001FABA4()
{
  unint64_t result;

  result = qword_100BCAD28;
  if (!qword_100BCAD28)
  {
    result = swift_getWitnessTable(&unk_100986DE0, &type metadata for LocationDefaultNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAD28);
  }
  return result;
}

unint64_t sub_1001FABE4()
{
  unint64_t result;

  result = qword_100BCAD30;
  if (!qword_100BCAD30)
  {
    result = swift_getWitnessTable(&unk_100986E08, &type metadata for LocationDefaultNewsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAD30);
  }
  return result;
}

unint64_t sub_1001FAC24()
{
  unint64_t result;

  result = qword_100BCAD38;
  if (!qword_100BCAD38)
  {
    result = swift_getWitnessTable(&unk_100986D28, &type metadata for LocationDefaultConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAD38);
  }
  return result;
}

unint64_t sub_1001FAC64()
{
  unint64_t result;

  result = qword_100BCAD40;
  if (!qword_100BCAD40)
  {
    result = swift_getWitnessTable(&unk_100986D50, &type metadata for LocationDefaultConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAD40);
  }
  return result;
}

unint64_t sub_1001FACA4()
{
  unint64_t result;

  result = qword_100BCAD48;
  if (!qword_100BCAD48)
  {
    result = swift_getWitnessTable(&unk_100986C70, &type metadata for NotificationsOptInViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAD48);
  }
  return result;
}

unint64_t sub_1001FACE4()
{
  unint64_t result;

  result = qword_100BCAD50;
  if (!qword_100BCAD50)
  {
    result = swift_getWitnessTable(&unk_100986C98, &type metadata for NotificationsOptInViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAD50);
  }
  return result;
}

unint64_t sub_1001FAD24()
{
  unint64_t result;

  result = qword_100BCAD58;
  if (!qword_100BCAD58)
  {
    result = swift_getWitnessTable(&unk_100986BB8, &type metadata for ReportWeatherViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAD58);
  }
  return result;
}

unint64_t sub_1001FAD64()
{
  unint64_t result;

  result = qword_100BCAD60;
  if (!qword_100BCAD60)
  {
    result = swift_getWitnessTable(&unk_100986BE0, &type metadata for ReportWeatherViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAD60);
  }
  return result;
}

unint64_t sub_1001FADA4()
{
  unint64_t result;

  result = qword_100BCAD68;
  if (!qword_100BCAD68)
  {
    result = swift_getWitnessTable(&unk_100986B00, &type metadata for LocationViewerViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAD68);
  }
  return result;
}

unint64_t sub_1001FADE4()
{
  unint64_t result;

  result = qword_100BCAD70;
  if (!qword_100BCAD70)
  {
    result = swift_getWitnessTable(&unk_100986B28, &type metadata for LocationViewerViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAD70);
  }
  return result;
}

unint64_t sub_1001FAE24()
{
  unint64_t result;

  result = qword_100BCAD78;
  if (!qword_100BCAD78)
  {
    result = swift_getWitnessTable(&unk_100986A48, &type metadata for ListViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAD78);
  }
  return result;
}

unint64_t sub_1001FAE64()
{
  unint64_t result;

  result = qword_100BCAD80;
  if (!qword_100BCAD80)
  {
    result = swift_getWitnessTable(&unk_100986A70, &type metadata for ListViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAD80);
  }
  return result;
}

unint64_t sub_1001FAEA4()
{
  unint64_t result;

  result = qword_100BCAD88;
  if (!qword_100BCAD88)
  {
    result = swift_getWitnessTable(&unk_100986990, &type metadata for ReportWeatherContentViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAD88);
  }
  return result;
}

unint64_t sub_1001FAEE4()
{
  unint64_t result;

  result = qword_100BCAD90;
  if (!qword_100BCAD90)
  {
    result = swift_getWitnessTable(&unk_1009869B8, &type metadata for ReportWeatherContentViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCAD90);
  }
  return result;
}

void sub_1001FAF68()
{
  sub_1001F12FC();
}

uint64_t sub_1001FAF74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_deallocPartialClassInstance(v2, a2, *(unsigned int *)(*(_QWORD *)v2 + 48), *(unsigned __int16 *)(*(_QWORD *)v2 + 52));
}

uint64_t sub_1001FAF88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v2 + *(int *)(a1 + 48), v3, *(_QWORD *)(v4 - 88));
}

void sub_1001FAFB0()
{
  uint64_t v0;
  uint64_t v1;

  sub_1005C1B30(v1, v0);
}

void sub_1001FAFD8(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
}

void sub_1001FAFF4()
{
  sub_1001E7864();
}

uint64_t sub_1001FB000(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1001FB014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a1);
}

uint64_t sub_1001FB024(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, a1);
}

uint64_t sub_1001FB048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_1001FB054()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1001FB120()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 16));
}

void sub_1001FB128(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100037768(a1, a2, v2);
}

uint64_t sub_1001FB164(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, v1 - 65, *(_QWORD *)(v1 - 144), a1);
}

void sub_1001FB17C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  sub_100080C0C(a1, v1, v2);
}

uint64_t sub_1001FB188@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_1001FB194()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 24) + 8))(v1, *(_QWORD *)(v0 + 32));
}

uint64_t sub_1001FB1A4@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 - 288) = a1;
  return swift_bridgeObjectRetain(v1);
}

unint64_t sub_1001FB1B4()
{
  uint64_t v0;

  return sub_1000991C8(v0);
}

uint64_t sub_1001FB1EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, v5, a4, a5);
}

uint64_t sub_1001FB230()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001FB244@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

void sub_1001FB250()
{
  sub_1001E410C();
}

void sub_1001FB25C()
{
  sub_1001EC6C4();
}

void sub_1001FB268()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = v0;
}

void sub_1001FB27C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = v0;
}

void sub_1001FB290(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
}

void sub_1001FB2A4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10007802C(a1, a2, v2);
}

uint64_t sub_1001FB2C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

void sub_1001FB2E4()
{
  uint64_t v0;

  *(_DWORD *)(v0 - 144) = 0;
}

void sub_1001FB30C()
{
  uint64_t v0;

  *(_DWORD *)(v0 - 144) = 0;
}

void sub_1001FB334()
{
  uint64_t v0;

  *(_DWORD *)(v0 - 144) = 0;
}

void sub_1001FB35C()
{
  uint64_t v0;

  *(_DWORD *)(v0 - 144) = 0;
}

uint64_t sub_1001FB384()
{
  char v0;

  return v0 & 1;
}

uint64_t sub_1001FB3C0()
{
  _QWORD *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_1001FB3D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 288, v3 - 65, v1, v2, a1);
}

uint64_t sub_1001FB3EC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_1001FB404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_1001FB430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 288) = (char *)&a9 - v9;
  return type metadata accessor for MonthlyAveragesChartModel(0);
}

BOOL sub_1001FB44C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100094184(v0, v1);
}

void sub_1001FB458(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_10007802C(a1, v2, v1);
}

void sub_1001FB488()
{
  uint64_t v0;

  *(_DWORD *)(v0 - 120) = 0;
}

void sub_1001FB4AC()
{
  uint64_t v0;

  *(_DWORD *)(v0 - 120) = 0;
}

void sub_1001FB4D0()
{
  uint64_t v0;

  *(_DWORD *)(v0 - 120) = 0;
}

uint64_t sub_1001FB4F4()
{
  return type metadata accessor for LocationViewComponent(0);
}

uint64_t sub_1001FB504()
{
  uint64_t *v0;

  return sub_1000BA294(v0);
}

uint64_t sub_1001FB50C()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1001FB520@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 - 96) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v2 - 96, v1);
}

uint64_t sub_1001FB554@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + 72) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v1 + 72, v2);
}

uint64_t sub_1001FB56C@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + 72) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v1 + 72, v2);
}

uint64_t sub_1001FB584(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  return swift_endAccess(va);
}

uint64_t sub_1001FB5A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v11, a11, a1);
}

uint64_t sub_1001FB5B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v1, v2, v3 - 288, v0);
}

uint64_t sub_1001FB5E4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001FB5F4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001FB610@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 160) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_1001FB630(uint64_t result)
{
  if (!result)
    return 0;
  return result;
}

uint64_t sub_1001FB670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v6 - 144, v6 - 65, v5, a4, a5);
}

uint64_t sub_1001FB6AC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001FB6C8()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1001FB6D0()
{
  return type metadata accessor for PrecipitationAveragesHeroChartViewModel(0);
}

uint64_t sub_1001FB700(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(*(_QWORD *)(v2 - 144), a2, *(_QWORD *)(v2 - 120), *(_QWORD *)(v2 - 144));
}

uint64_t sub_1001FB714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  return swift_updateClassMetadata2(v6, 256, 5, va, a5);
}

uint64_t sub_1001FB728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  return swift_updateClassMetadata2(v6, 256, 3, va, a5);
}

uint64_t sub_1001FB73C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v1, *(_QWORD *)(v2 - 312));
}

uint64_t sub_1001FB750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  return swift_updateClassMetadata2(v9, 256, 4, &a9, a5);
}

uint64_t sub_1001FB764()
{
  return type metadata accessor for LocationComponentContainerViewModel(319);
}

uint64_t sub_1001FB778()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v0, *(_QWORD *)(v1 - 120));
}

void sub_1001FB7D8(uint64_t a1, uint64_t a2)
{
  sub_1001DA36C(a1, a2);
}

uint64_t sub_1001FB7E0(uint64_t a1, uint64_t a2)
{
  return String.hash(into:)(a1, a2, 0xE800000000000000);
}

uint64_t sub_1001FB7E8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001FB7F4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001FB820()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001FB860@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t sub_1001FB888@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return type metadata accessor for DetailComponentContainerViewModel(0);
}

uint64_t sub_1001FB898()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001FB8A4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001FB8B0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001FB8D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v2 - 104), v0);
}

uint64_t sub_1001FB8E8()
{
  return 0;
}

uint64_t sub_1001FB928()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 160) + 8))(*(_QWORD *)(v0 - 112), *(_QWORD *)(v0 - 120));
}

uint64_t sub_1001FB954()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001FB960()
{
  return type metadata accessor for LocationViewComponent(319);
}

uint64_t sub_1001FB970()
{
  uint64_t v0;

  return v0;
}

void sub_1001FB980(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10007802C(a1, a2, v2);
}

uint64_t sub_1001FB994()
{
  return type metadata accessor for LocationCommonConfigurationComponents._Storage(0);
}

uint64_t sub_1001FB99C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *v1 = a1;
  return swift_release(v2);
}

uint64_t sub_1001FB9AC()
{
  uint64_t v0;

  return v0;
}

double sub_1001FB9BC()
{
  double result;

  type metadata accessor for LocationCommonConfigurationComponents._Storage(0);
  *(_QWORD *)&result = swift_retain().n128_u64[0];
  return result;
}

unint64_t sub_1001FB9EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000BFD34(*(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * a1));
}

void sub_1001FB9FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_10007802C(v3, a2, a3);
}

uint64_t sub_1001FBA04()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001FBA10()
{
  uint64_t v0;

  return v0;
}

void sub_1001FBA60(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_1000A3908(a1, a2, v2);
}

uint64_t sub_1001FBAA4()
{
  uint64_t v0;

  return *(unsigned int *)(v0 - 92);
}

void sub_1001FBAC4()
{
  sub_1001EE400();
}

void sub_1001FBACC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = v0;
  *(_QWORD *)(v2 - 88) = v1;
}

uint64_t sub_1001FBAD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

void sub_1001FBAE4()
{
  uint64_t v0;

  *(_DWORD *)(v0 - 92) = 1;
}

uint64_t sub_1001FBAF0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001FBB24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, a4);
}

void sub_1001FBB30(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10007802C(a1, a2, v2);
}

void sub_1001FBB4C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  sub_1000A3908(a1, v3, a3);
}

uint64_t sub_1001FBB54()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

void sub_1001FBB60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 112) = (char *)&a9 - v9;
}

void sub_1001FBB74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 136) = (char *)&a9 - v9;
}

void sub_1001FBBD8()
{
  uint64_t v0;
  uint64_t v1;

  sub_1008B5D2C(v0, v1);
}

void sub_1001FBBE4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  sub_100037768(a1, v2, v1);
}

void sub_1001FBBF0()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 104) = *(_QWORD *)(v0 - 168);
}

void sub_1001FBBFC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_1001345CC(319, a2, a3);
}

void sub_1001FBC18()
{
  sub_1001DBFAC();
}

uint64_t sub_1001FBC24(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, a1);
}

uint64_t sub_1001FBC48(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t sub_1001FBC5C()
{
  return type metadata accessor for LocationsState(0);
}

uint64_t sub_1001FBC68()
{
  return type metadata accessor for ViewState(0);
}

uint64_t sub_1001FBC74()
{
  return type metadata accessor for TimeState(0);
}

double sub_1001FBC94@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(a1).n128_u64[0];
  return result;
}

uint64_t sub_1001FBCD8()
{
  uint64_t *v0;

  return sub_1000BA294(v0);
}

void sub_1001FBCF4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_10007802C(v3, a2, a3);
}

uint64_t sub_1001FBCFC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001FBD10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocPartialClassInstance(a1, a2, a3, 7);
}

uint64_t sub_1001FBD18@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v5[2];

  sub_100043CA8(v1 + 16, (uint64_t)v5);
  swift_retain();
  return sub_100259120(v3, v5, a1);
}

uint64_t sub_1001FBD68()
{
  uint64_t v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for ListMenuModule()
{
  return objc_opt_self(_TtC7Weather14ListMenuModule);
}

uint64_t LocationSearchEntity.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

void LocationSearchEntity.id.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  sub_100079F70();
}

void (__swiftcall *LocationSearchEntity.id.modify())()
{
  return LocationSearchEntityFromStringResolver.init();
}

uint64_t LocationSearchEntity.name.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;

  sub_1000DD7BC(a1, a2, a3, a4, a5, a6, a7, a8, v9);
  return v10;
}

void LocationSearchEntity.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD v2[2];

  v2[0] = a1;
  v2[1] = a2;
  EntityProperty.wrappedValue.setter(v2);
  sub_100089028();
}

void LocationSearchEntity.name.modify()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = sub_1000D111C();
  *v0 = v1;
  v1[4] = EntityProperty.wrappedValue.modify();
  sub_100079F70();
}

uint64_t LocationSearchEntity.$name.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t LocationSearchEntity.placemark.getter()
{
  uint64_t v1;

  EntityProperty.wrappedValue.getter(&v1);
  return v1;
}

void LocationSearchEntity.placemark.setter(void *a1)
{
  id v1;
  void *v2;

  v2 = a1;
  v1 = a1;
  EntityProperty.wrappedValue.setter(&v2);

  sub_100089028();
}

void LocationSearchEntity.placemark.modify()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = sub_1000D111C();
  *v0 = v1;
  v1[4] = EntityProperty.wrappedValue.modify();
  sub_100079F70();
}

void sub_1001FBF68(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t LocationSearchEntity.$placemark.getter()
{
  return EntityProperty.projectedValue.getter();
}

void LocationSearchEntity.init(id:name:placemark:isLocal:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  _QWORD v19[2];

  sub_1000C1C64();
  sub_1000B42B0();
  __chkstk_darwin(v15);
  sub_10004A2E8();
  sub_1000BA294(&qword_100BC28D0);
  LocalizedStringResource.init(stringLiteral:)(1701667150, 0xE400000000000000);
  v16 = EntityProperty<>.init(title:)(v7);
  sub_1000BA294(&qword_100BC28D8);
  sub_1000C6544();
  LocalizedStringResource.init(stringLiteral:)(0x72616D6563616C50, 0xE90000000000006BLL);
  v17 = EntityProperty<>.init(title:)(v7);
  v19[0] = a3;
  v19[1] = a4;
  swift_bridgeObjectRetain_n(a2, 2);
  sub_1000C6544();
  swift_retain();
  EntityProperty.wrappedValue.setter(v19);
  swift_release(v16);
  swift_bridgeObjectRelease();
  v19[0] = a5;
  sub_1000C6544();
  sub_1000878DC();
  swift_retain();
  v18 = a5;
  EntityProperty.wrappedValue.setter(v19);
  swift_release_n(v17, 2);
  swift_release_n(v16, 2);
  sub_1000CD5B4();

  *(_QWORD *)a7 = a1;
  *(_QWORD *)(a7 + 8) = a2;
  *(_QWORD *)(a7 + 16) = v16;
  *(_QWORD *)(a7 + 24) = v17;
  *(_BYTE *)(a7 + 32) = a6;
}

uint64_t sub_1001FC128()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = LocationSearchEntityQuery.init()();
  static LocationSearchEntity.defaultQuery = result;
  *(_QWORD *)algn_100CAE4C8 = v1;
  qword_100CAE4D0 = v2;
  return result;
}

uint64_t *LocationSearchEntity.defaultQuery.unsafeMutableAddressor()
{
  if (qword_100BC1E78 != -1)
    swift_once(&qword_100BC1E78, sub_1001FC128);
  return &static LocationSearchEntity.defaultQuery;
}

uint64_t static LocationSearchEntity.defaultQuery.getter()
{
  uint64_t v0;

  if (qword_100BC1E78 != -1)
    swift_once(&qword_100BC1E78, sub_1001FC128);
  v0 = static LocationSearchEntity.defaultQuery;
  swift_retain();
  swift_retain();
  swift_retain();
  return v0;
}

uint64_t LocationSearchEntity.displayRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v23;

  sub_1000BA294(&qword_100BCAE40);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100098728();
  v5 = v4 - v3;
  sub_1000BA294(&qword_100BC2918);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100079FBC();
  v7 = sub_1000C1C64();
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100098728();
  v11 = v10 - v9;
  type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_10004A2E8();
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v13);
  EntityProperty.wrappedValue.getter(&v23);
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v23);
  sub_10009934C();
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v14);
  LocalizedStringResource.init(stringInterpolation:)(v1);
  sub_1000C135C();
  _s7Weather24LocationCompositionStateOwst_0(v15, v16, v17, v7);
  type metadata accessor for DisplayRepresentation.Image(0);
  sub_1000C135C();
  _s7Weather24LocationCompositionStateOwst_0(v18, v19, v20, v21);
  return DisplayRepresentation.init(title:subtitle:image:)(v11, v0, v5);
}

void static LocationSearchEntity.typeDisplayRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000BA294(&qword_100BC2918);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_1000BCED8();
  v3 = sub_1000C1C64();
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100079FBC();
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000010, 0x80000001009F3800);
  sub_1000C135C();
  _s7Weather24LocationCompositionStateOwst_0(v5, v6, v7, v3);
  TypeDisplayRepresentation.init(name:numericFormat:)(v1, v0);
  sub_100079F70();
}

double static LocationSearchEntity.makeFromLocationEntity(_:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  double v7;
  __int128 v8;
  uint64_t v9;
  double v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  double result;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _OWORD v24[2];
  char v25;

  *(_QWORD *)&v24[0] = LocationEntity.id.getter();
  *((_QWORD *)&v24[0] + 1) = v2;
  v22 = 44;
  v23 = 0xE100000000000000;
  v20 = 58;
  v21 = 0xE100000000000000;
  sub_100114EF8();
  v3 = sub_1000C35D0((uint64_t)&v22, (uint64_t)&v20);
  v5 = v4;
  sub_10009934C();
  *(_QWORD *)&v24[0] = 0x6E6F697461636F4CLL;
  *((_QWORD *)&v24[0] + 1) = 0xEB000000003A4449;
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  sub_100094EDC();
  sub_1000C6584();
  v7 = sub_10009934C();
  v8 = v24[0];
  *(_QWORD *)&v24[0] = LocationEntity.name.getter(v7);
  *((_QWORD *)&v24[0] + 1) = v9;
  v22 = 58;
  v23 = 0xE100000000000000;
  v20 = 0;
  v21 = 0xE000000000000000;
  sub_1000C35D0((uint64_t)&v22, (uint64_t)&v20);
  swift_bridgeObjectRelease();
  v24[0] = v8;
  sub_100094EDC();
  sub_100098980();
  sub_10009934C();
  v10 = sub_100075DF4();
  v11 = v24[0];
  v12 = LocationEntity.name.getter(v10);
  v14 = v13;
  v17 = (void *)LocationEntity.placemark.getter(v12, v13, v15, v16);
  sub_1000BD2E8(v11, *((uint64_t *)&v11 + 1), v12, v14, v17, (uint64_t)v24);
  result = *(double *)v24;
  v19 = v24[1];
  *(_OWORD *)a1 = v24[0];
  *(_OWORD *)(a1 + 16) = v19;
  *(_BYTE *)(a1 + 32) = v25;
  return result;
}

id LocationSearchEntity.urlRepresentationParameter.getter()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  double v4;
  double v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v21;
  id v22;
  unint64_t v23;

  v1 = 0x3D6C61636F4C7369;
  if ((*(_BYTE *)(v0 + 32) & 1) == 0)
  {
    EntityProperty.wrappedValue.getter(&v22);
    v2 = v22;
    v3 = objc_msgSend(v22, "location");

    if (v3)
    {
      sub_1000C0D08();
      Double.description.getter(v4);
      sub_1000C0D08();
      v6 = Double.description.getter(v5);
      v8 = v7;
      v22 = 0;
      v23 = 0xE000000000000000;
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      v22 = (id)1031037292;
      v23 = 0xE400000000000000;
      sub_100098980();
      sub_100075DF4();
      v9._countAndFlagsBits = 0x3D676E6C26;
      v9._object = (void *)0xE500000000000000;
      String.append(_:)(v9);
      v10._countAndFlagsBits = v6;
      v10._object = v8;
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      v11._countAndFlagsBits = 0x3D7974696326;
      v11._object = (void *)0xE600000000000000;
      String.append(_:)(v11);
      sub_1000DD7BC(v12, v13, v14, v15, v16, v17, v18, v19, v21._countAndFlagsBits);
      String.append(_:)(v21);

      swift_bridgeObjectRelease();
      return v22;
    }
  }
  return (id)v1;
}

void static LocationSearchEntity.makeFromIdentifier(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t KeyPath;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;

  sub_1000BA294(&qword_100BCAE48);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100098728();
  v8 = v7 - v6;
  v9 = sub_1000BA294(&qword_100BCAE50);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_100098728();
  v13 = v12 - v11;
  v14 = sub_1000BA294(&qword_100BCAE58);
  __chkstk_darwin(v14);
  sub_10004A2E8();
  v15 = sub_1000BA294(&qword_100BCAE60);
  Regex.init(_regexString:version:)(0xD000000000000026, 0x80000001009F3820, 1, v15);
  Regex.wholeMatch(in:)(a1, a2, v14);
  if (_s7Weather24LocationCompositionStateOwet_0(v8, 1, v9) == 1)
  {
    sub_1000BBCE8();
    sub_1001FCA08(v8);
LABEL_3:
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0uLL;
    goto LABEL_4;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v13, v8, v9);
  KeyPath = swift_getKeyPath(&unk_100988910);
  Regex.Match.subscript.getter(KeyPath, v9);
  sub_100089020();
  sub_1000D1C74();
  v34 = v21;
  v22 = swift_getKeyPath(&unk_100988930);
  sub_1000DF480(v22);
  sub_100089020();
  sub_1000D1C74();
  v24 = v23;
  v25 = swift_getKeyPath(&unk_100988950);
  sub_1000DF480(v25);
  v26 = sub_100089020();
  if (v39)
  {
    v28 = static String._fromSubstring(_:)(v37, v38, *((_QWORD *)&v38 + 1), v39, v27);
    v30 = v29;
    swift_bridgeObjectRelease();
  }
  else
  {
    v28 = 0;
    v30 = 0;
  }
  if (((v34 | v24) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    sub_1000C5B50();
    sub_1000BBCE8();
    goto LABEL_3;
  }
  sub_100079FE8(v26, (unint64_t *)&qword_100BCAE68, CLPlacemark_ptr);
  v31 = sub_1000D9414(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:");
  swift_bridgeObjectRetain();
  v32 = sub_1001FCA48(v31, v28, v30, 0);
  if (v30)
    v33 = v28;
  else
    v33 = 11565;
  if (!v30)
    v30 = 0xE200000000000000;
  sub_100094EDC();
  sub_1000BD2E8(a1, a2, v33, v30, v32, (uint64_t)&v37);
  v16 = v37;
  v35 = v38;
  v17 = v39;
  v18 = v40;
  sub_1000C5B50();
  sub_1000BBCE8();
  v19 = v35;
LABEL_4:
  *(_QWORD *)a3 = v16;
  *(_OWORD *)(a3 + 8) = v19;
  *(_QWORD *)(a3 + 24) = v17;
  *(_BYTE *)(a3 + 32) = v18;
  sub_10009990C();
}

uint64_t sub_1001FCA08(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BCAE48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_1001FCA48(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  NSString v8;
  id v9;

  v5 = v4;
  if (a3)
  {
    v8 = String._bridgeToObjectiveC()();
    sub_100075DF4();
  }
  else
  {
    v8 = 0;
  }
  v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(v5), "placemarkWithLocation:name:postalAddress:", a1, v8, a4);

  return v9;
}

void static LocationSearchEntity.makeFromLocation(_:name:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  Swift::String v37;
  __int128 v38;
  _QWORD v40[2];
  _QWORD v41[2];
  _OWORD v42[2];
  char v43;

  v8 = type metadata accessor for Location.Identifier(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_100098728();
  v12 = v11 - v10;
  v13 = type metadata accessor for Location(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_1000BCED8();
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v4, a1, v13);
  if (a3)
  {
    v16 = a3;
  }
  else
  {
    Location.name.getter(v15);
    a2 = v17;
    v16 = v18;
  }
  v19 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v14 + 8);
  v20 = swift_bridgeObjectRetain(a3);
  v21 = v19(v4, v13, v20);
  v22 = sub_100079FE8(v21, (unint64_t *)&qword_100BCAE68, CLPlacemark_ptr);
  Location.coordinate.getter(v22);
  Location.coordinate.getter(v23);
  v24 = sub_1000D9414(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:");
  sub_1000878DC();
  v25 = sub_1001FCA48(v24, a2, v16, 0);
  v26 = Location.identifier.getter(v25);
  v27 = Location.Identifier.id.getter(v26);
  v29 = v28;
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
  *(_QWORD *)&v42[0] = v27;
  *((_QWORD *)&v42[0] + 1) = v29;
  swift_bridgeObjectRetain(v29);
  sub_1000C6584();
  swift_bridgeObjectRelease();
  v30 = v42[0];
  Location.name.getter(v31);
  *(_QWORD *)&v42[0] = v32;
  *((_QWORD *)&v42[0] + 1) = v33;
  v41[0] = 58;
  v41[1] = 0xE100000000000000;
  v40[0] = 0;
  v40[1] = 0xE000000000000000;
  sub_100114EF8();
  v34 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v41, v40, 0, 0, 0, 1, &type metadata for String, &type metadata for String);
  v36 = v35;
  sub_100075DF4();
  v42[0] = v30;
  sub_100094EDC();
  v37._countAndFlagsBits = v34;
  v37._object = v36;
  String.append(_:)(v37);
  sub_10009934C();
  swift_bridgeObjectRelease();
  sub_1000BD2E8(*(uint64_t *)&v42[0], *((uint64_t *)&v42[0] + 1), a2, v16, v25, (uint64_t)v42);
  v38 = v42[1];
  *(_OWORD *)a4 = v42[0];
  *(_OWORD *)(a4 + 16) = v38;
  *(_BYTE *)(a4 + 32) = v43;
  sub_10009990C();
}

double static LocationSearchEntity.makeCurrentLocation()@<D0>(uint64_t a1@<X8>)
{
  id v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  __int128 v12;
  _OWORD v13[2];
  char v14;
  Swift::String v15;

  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v15._object = (void *)0x80000001009F3850;
  v3._countAndFlagsBits = 0x7461636F4C20794DLL;
  v3._object = (void *)0xEB000000006E6F69;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v15._countAndFlagsBits = 0xD000000000000046;
  v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v15);

  sub_100079FE8(v6, (unint64_t *)&qword_100BCAE68, CLPlacemark_ptr);
  v7 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", 0.0, 0.0);
  sub_1000878DC();
  v8 = sub_1001FCA48(v7, v5._countAndFlagsBits, (uint64_t)v5._object, 0);
  v9 = static Location.currentLocationID.getter(v8);
  LocationSearchEntity.init(id:name:placemark:isLocal:)(v9, v10, v5._countAndFlagsBits, (uint64_t)v5._object, v8, 1, (uint64_t)v13);
  result = *(double *)v13;
  v12 = v13[1];
  *(_OWORD *)a1 = v13[0];
  *(_OWORD *)(a1 + 16) = v12;
  *(_BYTE *)(a1 + 32) = v14;
  return result;
}

double sub_1001FCE68@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  LocationSearchEntity.defaultQuery.unsafeMutableAddressor();
  v2 = *(_QWORD *)algn_100CAE4C8;
  v3 = qword_100CAE4D0;
  *a1 = static LocationSearchEntity.defaultQuery;
  a1[1] = v2;
  a1[2] = v3;
  swift_retain();
  swift_retain();
  *(_QWORD *)&result = swift_retain().n128_u64[0];
  return result;
}

uint64_t sub_1001FCEB8()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = LocationSearchEntity.urlRepresentationParameter.getter();
  return sub_1001FD508(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8), v0, (uint64_t)v1, v2);
}

uint64_t sub_1001FCEFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015C43C();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_1001FCF34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001FD188();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t static LocationSearchEntity.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;

  v10 = *a1;
  v11 = a1[1];
  v12 = *a2;
  v13 = a2[1];
  v14 = v10 == *a2 && v11 == v13;
  if (v14 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12), v15 = 0, (v10 & 1) != 0))
  {
    v16 = sub_1000DD7BC(v10, v11, v12, v13, a5, a6, a7, a8, v45);
    v17 = v46;
    sub_1000DD7BC((uint64_t)v16, v18, v19, v20, v21, v22, v23, v24, v46);
    if (v17 == v47)
    {
      v26 = sub_1000CD5B4();
    }
    else
    {
      v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v50, v47);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v15 = 0;
      if ((v25 & 1) == 0)
        return v15 & 1;
    }
    v27 = sub_100079FE8(v26, (unint64_t *)&qword_100BC4D48, NSObject_ptr);
    v35 = sub_1000DD7BC(v27, v28, v29, v30, v31, v32, v33, v34, v47);
    v36 = (void *)v48;
    sub_1000DD7BC((uint64_t)v35, v37, v38, v39, v40, v41, v42, v43, v48);
    v15 = static NSObject.== infix(_:_:)(v36, v49);

  }
  return v15 & 1;
}

unint64_t sub_1001FD07C()
{
  unint64_t result;

  result = qword_100BCAE70;
  if (!qword_100BCAE70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LocationSearchEntity, &type metadata for LocationSearchEntity);
    atomic_store(result, (unint64_t *)&qword_100BCAE70);
  }
  return result;
}

unint64_t sub_1001FD0BC()
{
  unint64_t result;

  result = qword_100BCAE78;
  if (!qword_100BCAE78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LocationSearchEntity, &type metadata for LocationSearchEntity);
    atomic_store(result, (unint64_t *)&qword_100BCAE78);
  }
  return result;
}

unint64_t sub_1001FD0FC()
{
  unint64_t result;

  result = qword_100BCAE80;
  if (!qword_100BCAE80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LocationSearchEntity, &type metadata for LocationSearchEntity);
    atomic_store(result, (unint64_t *)&qword_100BCAE80);
  }
  return result;
}

unint64_t sub_1001FD13C()
{
  unint64_t result;

  result = qword_100BCAE88;
  if (!qword_100BCAE88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LocationSearchEntityQuery, &type metadata for LocationSearchEntityQuery);
    atomic_store(result, (unint64_t *)&qword_100BCAE88);
  }
  return result;
}

void *sub_1001FD178()
{
  return &protocol witness table for String;
}

unint64_t sub_1001FD188()
{
  unint64_t result;

  result = qword_100BCAE90;
  if (!qword_100BCAE90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LocationSearchEntity, &type metadata for LocationSearchEntity);
    atomic_store(result, (unint64_t *)&qword_100BCAE90);
  }
  return result;
}

unint64_t sub_1001FD1C8()
{
  unint64_t result;

  result = qword_100BCAE98;
  if (!qword_100BCAE98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LocationSearchEntity, &type metadata for LocationSearchEntity);
    atomic_store(result, (unint64_t *)&qword_100BCAE98);
  }
  return result;
}

unint64_t sub_1001FD208()
{
  unint64_t result;

  result = qword_100BCAEA8;
  if (!qword_100BCAEA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LocationSearchEntity, &type metadata for LocationSearchEntity);
    atomic_store(result, (unint64_t *)&qword_100BCAEA8);
  }
  return result;
}

unint64_t sub_1001FD248()
{
  unint64_t result;

  result = qword_100BCAEB0;
  if (!qword_100BCAEB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LocationSearchEntity, &type metadata for LocationSearchEntity);
    atomic_store(result, (unint64_t *)&qword_100BCAEB0);
  }
  return result;
}

unint64_t sub_1001FD288()
{
  unint64_t result;

  result = qword_100BCAEB8;
  if (!qword_100BCAEB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LocationSearchEntity, &type metadata for LocationSearchEntity);
    atomic_store(result, (unint64_t *)&qword_100BCAEB8);
  }
  return result;
}

unint64_t sub_1001FD2C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCAEC0;
  if (!qword_100BCAEC0)
  {
    v1 = sub_100075EB0(&qword_100BCAEC8);
    result = swift_getWitnessTable(&protocol conformance descriptor for EmptyResolverSpecification<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCAEC0);
  }
  return result;
}

uint64_t destroy for LocationSearchEntity(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_release(a1[2]);
  return swift_release(a1[3]);
}

uint64_t initializeWithCopy for LocationSearchEntity(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t assignWithCopy for LocationSearchEntity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_retain(v8);
  swift_release(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for LocationSearchEntity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release(v5);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for MoonComponentViewModel.Row(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 33))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MoonComponentViewModel.Row(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationSearchEntity()
{
  return &type metadata for LocationSearchEntity;
}

uint64_t sub_1001FD508(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3, a4);
}

uint64_t sub_1001FD51C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = type metadata accessor for WeatherMapPurpose(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1 + 2;
  v8 = a1[5];
  v7 = a1[6];
  sub_1000DB418(v6, v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for WeatherMapPurpose.none(_:), v2);
  dispatch thunk of WeatherMapOverlayMetaDataRefresherType.refreshMetadata(purpose:)(v5, v8, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t LocalSearchRequestService.__deallocating_deinit()
{
  uint64_t v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t sub_1001FD5F8()
{
  _QWORD *v0;

  return sub_1001FD51C(v0);
}

_QWORD *sub_1001FD600(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    v7 = type metadata accessor for Location(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_1001FD688(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Location(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1001FD6BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1001FD718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1001FD774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1001FD7D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1001FD82C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001FD838);
}

uint64_t sub_1001FD838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v8;
  int v9;

  v6 = type metadata accessor for Location(0);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return _s7Weather24LocationCompositionStateOwet_0(a1, a2, v6);
  v8 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v8 >= 2)
    v9 = ((v8 + 2147483646) & 0x7FFFFFFF) - 2;
  else
    v9 = -3;
  if (v9 < 0)
    v9 = -1;
  return (v9 + 1);
}

uint64_t sub_1001FD8CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001FD8D8);
}

uint64_t sub_1001FD8D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = type metadata accessor for Location(0);
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return _s7Weather24LocationCompositionStateOwst_0(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 3;
  return result;
}

BOOL sub_1001FD94C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;

  if ((static Location.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v4 = *(int *)(type metadata accessor for NotificationsOptInComponentViewModel(0) + 20);
  v5 = *(unsigned __int8 *)(a1 + v4);
  v6 = *(unsigned __int8 *)(a2 + v4);
  if (v5 == 2)
    return v6 == 2;
  if (v5 != 3)
    return (v6 & 0xFE) != 2 && ((((v5 & 1) == 0) ^ v6) & 1) != 0;
  return v6 == 3;
}

void sub_1001FD9DC(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (**v37)(uint64_t, uint64_t);
  uint64_t v38;
  void (**v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  _QWORD *v82;
  uint64_t v83;
  void (*v84)(char *, char *, uint64_t);
  void (*v85)(char *, char *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  char *v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  uint64_t v100;
  uint64_t ObjectType;
  void *v102;
  void *v103;
  double v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t, uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  __n128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(_QWORD);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __n128 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(uint64_t, char *, uint64_t);
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(uint64_t, uint64_t, uint64_t);
  int *v154;
  uint64_t *v155;
  _QWORD *v156;
  _QWORD *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  _QWORD *v165;
  _QWORD *v166;
  uint64_t v167;
  void *v168;
  void *v169;
  void (**v170)(uint64_t, uint64_t);
  void (*v171)(uint64_t, uint64_t);
  __n128 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  id v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  char v186;
  __int128 v187;
  uint64_t v188;
  void (*v189)(_QWORD, _QWORD, _QWORD);
  uint64_t v190;
  int v191;
  void (*v192)(uint64_t, uint64_t, uint64_t);
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  _QWORD *v197;
  void (*v198)(uint64_t, char *, uint64_t);
  void (*v199)(uint64_t, uint64_t, uint64_t);
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void (*v213)(_QWORD);
  uint64_t v214;
  uint64_t v215;
  void *v216;
  _QWORD *v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD v221[3];
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  void (**v226)(uint64_t, uint64_t);
  void (**v227)(uint64_t, uint64_t);
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  _QWORD *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  char *v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  __int128 v243;
  uint64_t v244;
  void (*v245)(uint64_t, uint64_t);
  uint64_t v246;
  _QWORD v247[2];
  uint64_t v248;
  uint64_t v249;

  v209 = a2;
  type metadata accessor for DetailHeroChartLollipopModel(0);
  sub_10009D98C();
  __chkstk_darwin(v3);
  sub_100088FDC();
  v5 = sub_1000987B4(v4);
  v208 = type metadata accessor for PeakUpperMarkModel(v5);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_1000986FC();
  v229 = v7;
  sub_10009D2A4();
  __chkstk_darwin(v8);
  sub_100079F7C();
  v10 = sub_1000987B4(v9);
  v11 = type metadata accessor for WeatherFormatPlaceholder(v10);
  sub_1000B43A4(v11, (uint64_t)&v249);
  v210 = v12;
  sub_10009D98C();
  __chkstk_darwin(v13);
  sub_100088FDC();
  v223 = v14;
  sub_1000BA294(&qword_100BC3340);
  sub_10009D98C();
  __chkstk_darwin(v15);
  sub_100088FDC();
  v17 = sub_1000987B4(v16);
  v18 = type metadata accessor for WeatherFormatScaling(v17);
  sub_1000B43A4(v18, (uint64_t)&v248);
  v214 = v19;
  sub_10009D98C();
  __chkstk_darwin(v20);
  sub_100088FDC();
  v22 = sub_1000987B4(v21);
  v242 = type metadata accessor for NSUnitLength.BaseWeatherFormatStyle(v22);
  v202 = *(_QWORD *)(v242 - 8);
  sub_10009D98C();
  __chkstk_darwin(v23);
  v237 = (char *)&v188 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v25);
  sub_100079F7C();
  v27 = sub_1000987B4(v26);
  v224 = type metadata accessor for AttributedString.CharacterView(v27);
  sub_10009D98C();
  __chkstk_darwin(v28);
  sub_100088FDC();
  v30 = sub_1000987B4(v29);
  v31 = type metadata accessor for NSUnitLength.WeatherFormatUsage(v30);
  sub_1000B43A4(v31, (uint64_t)v247);
  v215 = v32;
  sub_10009D98C();
  __chkstk_darwin(v33);
  sub_100088FDC();
  v35 = sub_1000987B4(v34);
  v221[2] = type metadata accessor for AveragesComparisonStrings(v35);
  sub_10009D98C();
  __chkstk_darwin(v36);
  sub_1000986FC();
  v227 = v37;
  sub_10009D2A4();
  __chkstk_darwin(v38);
  sub_100079F7C();
  v226 = v39;
  sub_1000BA294(&qword_100BCB0A0);
  sub_10009D98C();
  __chkstk_darwin(v40);
  sub_1000986FC();
  v218 = (_QWORD *)v41;
  sub_10009D2A4();
  __chkstk_darwin(v42);
  sub_100079F7C();
  v217 = (_QWORD *)v43;
  v241 = sub_1000BA294(&qword_100BCB0A8);
  v207 = *(_QWORD *)(v241 - 8);
  sub_10009D98C();
  __chkstk_darwin(v44);
  sub_1000986FC();
  v234 = v45;
  sub_10009D2A4();
  __chkstk_darwin(v46);
  sub_1000860D0();
  v240 = v47;
  sub_10009D2A4();
  __chkstk_darwin(v48);
  sub_1000860D0();
  v236 = v49;
  sub_10009D2A4();
  __chkstk_darwin(v50);
  sub_100079F7C();
  v235 = v51;
  v233 = (char *)type metadata accessor for Calendar.Component(0);
  v52 = *((_QWORD *)v233 - 1);
  __chkstk_darwin(v233);
  sub_100098728();
  v55 = v54 - v53;
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_10009D98C();
  __chkstk_darwin(v56);
  sub_100098728();
  v59 = v58 - v57;
  v60 = type metadata accessor for Calendar(0);
  sub_1000B43A4(v60, (uint64_t)&v236);
  v205 = v61;
  sub_10009D98C();
  __chkstk_darwin(v62);
  sub_100098728();
  v65 = v64 - v63;
  v66 = type metadata accessor for Date(0);
  v67 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  sub_1000986FC();
  v203 = v68;
  sub_10009D2A4();
  v70 = __chkstk_darwin(v69);
  v72 = (char *)&v188 - v71;
  __chkstk_darwin(v70);
  sub_1000860D0();
  v239 = (char *)v73;
  sub_10009D2A4();
  __chkstk_darwin(v74);
  v76 = (char *)&v188 - v75;
  v77 = &a1[*(int *)(type metadata accessor for PrecipitationAveragesHeroChartInput(0) + 28)];
  v238 = a1;
  Date.startOfDay(timeZone:)(v77);
  v78 = v65;
  v79 = v52;
  v80 = v233;
  v81 = v77;
  v82 = v232;
  static Calendar.currentCalendar(with:)(v81);
  (*(void (**)(uint64_t, _QWORD, char *))(v79 + 104))(v55, enum case for Calendar.Component.day(_:), v80);
  v83 = v82[7];
  if (__OFSUB__(0, v83))
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v231 = v78;
  Calendar.date(byAdding:value:to:wrappingComponents:)(v55, -v83, v76, 0);
  (*(void (**)(uint64_t, char *))(v79 + 8))(v55, v80);
  v84 = *(void (**)(char *, char *, uint64_t))(v67 + 16);
  v84(v72, v76, v66);
  if (_s7Weather24LocationCompositionStateOwet_0(v59, 1, v66) == 1)
  {
    v85 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
    v85(v239, v72, v66);
    sub_100021A14(v59, (uint64_t *)&unk_100BD35A0);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v72, v66);
    v85 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
    v86 = ((uint64_t (*)(char *, uint64_t, uint64_t))v85)(v239, v59, v66);
  }
  v87 = v82[7];
  if (__OFSUB__(0, v87))
    goto LABEL_23;
  if (-v87 > 10)
  {
LABEL_24:
    __break(1u);
    return;
  }
  v198 = (void (*)(uint64_t, char *, uint64_t))v84;
  v199 = (void (*)(uint64_t, uint64_t, uint64_t))v85;
  v200 = v66;
  __chkstk_darwin(v86);
  sub_100849F0C();
  v89 = (uint64_t)v88;
  v90 = v238;
  v91 = sub_1001FE8E0(v235, v238, v88, (uint64_t)v76);
  v92 = sub_1001FF9F4(v236, (uint64_t)v90, v89, (uint64_t)v76);
  swift_bridgeObjectRelease(v89);
  v93 = (uint64_t)v217;
  sub_10020CBD0((uint64_t)v91, (uint64_t)v217);
  v94 = type metadata accessor for DetailChartDataElement(0);
  v95 = _s7Weather24LocationCompositionStateOwet_0(v93, 1, v94);
  if ((_DWORD)v95 == 1)
  {
    sub_100021A14(v93, &qword_100BCB0A0);
    v96 = 0.0;
  }
  else
  {
    v96 = DetailChartDataElement.value.getter(v95);
    sub_1000D9420();
  }
  v97 = (uint64_t)v218;
  sub_10020CBD0((uint64_t)v92, (uint64_t)v218);
  v98 = _s7Weather24LocationCompositionStateOwet_0(v97, 1, v94);
  if ((_DWORD)v98 == 1)
  {
    sub_100021A14(v97, &qword_100BCB0A0);
    v99 = 0.0;
  }
  else
  {
    v99 = DetailChartDataElement.value.getter(v98);
    sub_1000D9420();
  }
  if (v96 <= v99)
    v96 = v99;
  v100 = v82[1];
  ObjectType = swift_getObjectType(*v82);
  v102 = (void *)dispatch thunk of UnitManagerType.precipitationRainfall.getter(ObjectType, v100);
  v103 = (void *)sub_100200AFC(v102);
  v105 = v104;
  v216 = v103;

  v218 = v91;
  v217 = v92;
  v233 = v76;
  v197 = sub_100200C60((uint64_t)v238, (uint64_t)v91, (uint64_t)v92);
  sub_1000BD2F0();
  v106 = enum case for NSUnitLength.WeatherFormatUsage.rainfall(_:);
  v107 = v215;
  v108 = *(void (**)(uint64_t, uint64_t, uint64_t))(v215 + 104);
  v109 = v219;
  v110 = v220;
  v108(v219, enum case for NSUnitLength.WeatherFormatUsage.rainfall(_:), v220);
  v111 = (uint64_t *)v226;
  v112 = v236;
  sub_1003EE980((uint64_t)v236, v109, 0, v226);
  v113 = *(_QWORD *)(v107 + 8);
  sub_1000C6590();
  v215 = v113;
  sub_1000BD2F0();
  v108(v109, v106, v110);
  sub_1003EE980((uint64_t)v112, v109, 1, v227);
  sub_1000C6590();
  sub_1000DA494(*v111);
  *((_QWORD *)&v196 + 1) = v114;
  v115 = swift_bridgeObjectRetain(v114);
  v116 = v222;
  AttributedString.characters.getter(v115);
  sub_10000F1C8(&qword_100BCB0B0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.CharacterView);
  v193 = v117;
  v195 = String.init<A>(_:)(v116, v224);
  v194 = v118;
  v119 = v241;
  v120 = v216;
  Measurement<>.converted(to:)(v216, v241);
  v121 = Measurement<>.converted(to:)(v120, v119);
  v122 = static Set<>.unit.getter(v121);
  v191 = v106;
  v192 = v108;
  v108(v109, v106, v110);
  v123 = v214;
  v124 = v221[0];
  v189 = *(void (**)(_QWORD, _QWORD, _QWORD))(v214 + 104);
  v189(v221[0], enum case for WeatherFormatScaling.asProvided(_:), v221[1]);
  v125 = type metadata accessor for Locale(0);
  v126 = v204;
  v190 = v125;
  _s7Weather24LocationCompositionStateOwst_0(v204, 1, 1, v125);
  v127 = v201;
  sub_1000DA8C8(v122, v109, v124);
  swift_bridgeObjectRelease(v122);
  sub_100021A14(v126, &qword_100BC3340);
  sub_1000C1368(*(uint64_t (**)(void))(v123 + 8));
  sub_100095288((uint64_t)&v243);
  v128 = v210;
  v129 = *(void (**)(_QWORD))(v210 + 104);
  v130 = v223;
  LODWORD(v214) = enum case for WeatherFormatPlaceholder.none(_:);
  v131 = v225;
  v213 = v129;
  v129(v223);
  v212 = type metadata accessor for UnitManager(0);
  v132 = static UnitManager.standard.getter(v212);
  sub_10000F1C8((unint64_t *)&qword_100BCB0B8, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitLength.BaseWeatherFormatStyle);
  v211 = v133;
  v134 = Measurement.formatted<A>(_:placeholder:unitManager:)(v127, v130, v132, &protocol witness table for UnitManager, v119, v242, v133);
  v136 = v135;
  swift_release(v132);
  sub_1000C1368(*(uint64_t (**)(void))(v128 + 8));
  sub_1000C1368(*(uint64_t (**)(void))(v202 + 8));
  v137 = String.count.getter(v134, v136);
  v138 = swift_bridgeObjectRelease(v136);
  if (v137 < 5)
  {
    v141 = sub_1000C448C();
    sub_1000CC8D0(v141, enum case for WeatherFormatScaling.asProvidedButRounded(_:));
    v142 = sub_1000C5B60();
    v139 = static Set<>.full.getter(v142);
  }
  else
  {
    v139 = static Set<>.value.getter(v138);
    v140 = sub_1000C448C();
    sub_1000CC8D0(v140, enum case for WeatherFormatScaling.asProvidedButRounded(_:));
    sub_1000C5B60();
  }
  v143 = v237;
  sub_1000DA8C8(v139, v131, v110);
  swift_bridgeObjectRelease(v139);
  sub_100021A14(v126, &qword_100BC3340);
  sub_100095288((uint64_t)v221);
  sub_100095288((uint64_t)&v243);
  v144 = v203;
  v145 = v200;
  v146 = v198;
  v198(v203, v233, v200);
  v147 = v223;
  sub_1000CD5C0(v223, v214);
  v148 = sub_1000C0D14();
  v149 = Measurement.formatted<A>(_:placeholder:unitManager:)(v143, v147, v148, &protocol witness table for UnitManager, v241, v242, v211);
  v151 = v150;
  swift_release(v148);
  sub_100095288((uint64_t)&v240);
  v152 = v228;
  v153 = v199;
  v199(v228, v144, v145);
  v154 = (int *)v208;
  *(double *)(v152 + *(int *)(v208 + 20)) = v96;
  v155 = (uint64_t *)(v152 + v154[6]);
  *v155 = v149;
  v155[1] = v151;
  v156 = (_QWORD *)(v152 + v154[7]);
  *v156 = 0;
  v156[1] = 0;
  v157 = (_QWORD *)(v152 + v154[8]);
  *v157 = 0;
  v157[1] = 0;
  v158 = v239;
  v146(v144, v239, v145);
  sub_1000CD5C0(v147, v214);
  v159 = sub_1000C0D14();
  v160 = Measurement.formatted<A>(_:placeholder:unitManager:)(v237, v147, v159, &protocol witness table for UnitManager, v241, v242, v211);
  v162 = v161;
  swift_release(v159);
  sub_100095288((uint64_t)&v240);
  v163 = v229;
  v153(v229, v144, v145);
  *(double *)(v163 + v154[5]) = v96;
  v164 = (uint64_t *)(v163 + v154[6]);
  *v164 = v160;
  v164[1] = v162;
  v165 = (_QWORD *)(v163 + v154[7]);
  *v165 = 0;
  v165[1] = 0;
  v166 = (_QWORD *)(v163 + v154[8]);
  *v166 = 0;
  v166[1] = 0;
  v167 = swift_getObjectType(*v232);
  v168 = (void *)sub_1000CFBA4(v167);
  v169 = v216;
  sub_1002011B4((uint64_t)v218, (uint64_t)v217, v158, v233, (uint64_t)v238, v168, v216, v230);

  v170 = v227;
  v171 = v227[1];
  sub_1000DA494((uint64_t)*v227);
  v172 = swift_bridgeObjectRetain(v171);
  v173 = v222;
  AttributedString.characters.getter(v172);
  v174 = String.init<A>(_:)(v173, v224);
  v176 = v175;
  v238 = (char *)sub_1000CFBA4(v167);
  v177 = (void *)sub_1000CFBA4(v167);
  LOBYTE(v163) = NSUnitLength.isMetricPrecipitation.getter();

  if ((v163 & 1) != 0)
    v178 = 1;
  else
    v178 = 2;
  v243 = v196;
  v244 = v225;
  v245 = v171;
  v246 = v195;
  v247[0] = v194;
  v247[1] = v174;
  v248 = v176;
  v179 = v169;
  v180 = sub_100201EC8();
  v182 = v181;
  v184 = v183;
  v186 = v185;

  sub_100095288((uint64_t)&v232);
  sub_10009898C(v234);
  sub_10009898C(v240);
  sub_1000215BC((uint64_t)v170, type metadata accessor for AveragesComparisonStrings);
  sub_1000215BC((uint64_t)v226, type metadata accessor for AveragesComparisonStrings);
  sub_10009898C((uint64_t)v236);
  sub_10009898C(v235);
  (*(void (**)(uint64_t, uint64_t))(v205 + 8))(v231, v206);
  *((_QWORD *)&v187 + 1) = v182;
  *(_QWORD *)&v187 = v180;
  sub_10056BF14(&v243, (uint64_t)v218, (uint64_t)v217, (uint64_t)v197, (uint64_t)v169, (uint64_t)v238, v178, 1, v209, v105, v96, v187, v184, v186 & 1, v228, v229, (uint64_t)v230, (uint64_t)v239, (uint64_t)v233);
}

_QWORD *sub_1001FE8E0(uint64_t a1, char *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t ObjectType;
  void *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  unint64_t object;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t (*v69)(char *, unint64_t, uint64_t);
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  char *v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, _QWORD, uint64_t);
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  __n128 v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __n128 v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  _QWORD *v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  _QWORD *v112;
  char *v113;
  _QWORD *v114;
  _QWORD *v115;
  double v116;
  uint64_t v117;
  id v118;
  Swift::String v119;
  Swift::String v120;
  Swift::String v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  __n128 v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __n128 v151;
  uint64_t v152;
  char *v153;
  char *v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  unint64_t v158;
  _QWORD *v160;
  _QWORD *v161;
  uint64_t v162;
  id v163;
  uint64_t v164;
  void (*v165)(_QWORD, _QWORD);
  uint64_t v166;
  char *v167;
  _QWORD *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  char *v172;
  char *v173;
  char *v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  char *v189;
  _QWORD *v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  char *v219;
  char *v220;
  void *v221;
  char *v222;
  char *v223;
  char *v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t countAndFlagsBits;
  uint64_t v228;
  Swift::String v229;
  Swift::String v230;

  v184 = a4;
  v225 = a3;
  v185 = a1;
  v6 = type metadata accessor for DetailChartDataElement.ValueLabel(0);
  v210 = *(_QWORD *)(v6 - 8);
  v211 = v6;
  v7 = __chkstk_darwin(v6);
  v168 = (uint64_t *)((char *)&v162 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v190 = (uint64_t *)((char *)&v162 - v9);
  v209 = type metadata accessor for Date(0);
  v215 = *(_QWORD *)(v209 - 8);
  v10 = __chkstk_darwin(v209);
  v167 = (char *)&v162 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v189 = (char *)&v162 - v12;
  v13 = type metadata accessor for DetailChartDataElement(0);
  v212 = *(char **)(v13 - 8);
  v213 = (char *)v13;
  v14 = __chkstk_darwin(v13);
  v169 = (char *)&v162 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v170 = (char *)&v162 - v17;
  v18 = __chkstk_darwin(v16);
  v224 = (char *)&v162 - v19;
  __chkstk_darwin(v18);
  v223 = (char *)&v162 - v20;
  v208 = type metadata accessor for WeatherFormatPlaceholder(0);
  v207 = *(_QWORD *)(v208 - 8);
  __chkstk_darwin(v208);
  v206 = (char *)&v162 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v202 = type metadata accessor for WeatherFormatScaling(0);
  v201 = *(_QWORD *)(v202 - 8);
  __chkstk_darwin(v202);
  v200 = (char *)&v162 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_1000BA294(&qword_100BC3340);
  __chkstk_darwin(v23);
  v199 = (uint64_t)&v162 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = type metadata accessor for NSUnitLength.WeatherFormatUsage(0);
  v197 = *(_QWORD *)(v198 - 8);
  __chkstk_darwin(v198);
  v196 = (char *)&v162 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v205 = type metadata accessor for NSUnitLength.BaseWeatherFormatStyle(0);
  v204 = *(_QWORD *)(v205 - 8);
  __chkstk_darwin(v205);
  v203 = (char *)&v162 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = type metadata accessor for DayPrecipitationSummary(0);
  v191 = *(_QWORD *)(v188 - 8);
  __chkstk_darwin(v188);
  v187 = (char *)&v162 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_1000BA294(&qword_100BCB128);
  v29 = *(char **)(v28 - 8);
  __chkstk_darwin(v28);
  v31 = (char *)&v162 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v228 = sub_1000BA294(&qword_100BCB0A8);
  v194 = *(_QWORD *)(v228 - 8);
  v32 = __chkstk_darwin(v228);
  v183 = (uint64_t)&v162 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v32);
  v195 = (char *)&v162 - v35;
  v36 = __chkstk_darwin(v34);
  v222 = (char *)&v162 - v37;
  __chkstk_darwin(v36);
  v39 = (char *)&v162 - v38;
  v40 = type metadata accessor for Calendar(0);
  v166 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v42 = (char *)&v162 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  countAndFlagsBits = (uint64_t)v4;
  v43 = v4[1];
  ObjectType = swift_getObjectType(*v4);
  v45 = (void *)dispatch thunk of UnitManagerType.precipitationRainfall.getter(ObjectType, v43);
  v46 = &a2[*(int *)(type metadata accessor for PrecipitationAveragesHeroChartInput(0) + 28)];
  v182 = v42;
  v47 = 0xD000000000000034;
  v214 = v46;
  static Calendar.currentCalendar(with:)(v46);
  v48 = sub_10012085C();
  v49 = v45;
  v226 = (uint64_t)v39;
  v221 = v49;
  v193 = v48;
  v50 = Measurement.init(value:unit:)(v49, v48);
  v165 = (void (*)(_QWORD, _QWORD))a2;
  WeatherStatisticsModel.dailyPrecipitationSummary.getter(v50);
  v51 = DailyWeatherSummary.days.getter(v28);
  (*((void (**)(char *, uint64_t))v29 + 1))(v31, v28);
  v52 = (void *)objc_opt_self(NSBundle);
  v53 = objc_msgSend(v52, "mainBundle");
  v229._countAndFlagsBits = 0xD00000000000003BLL;
  v229._object = (void *)0x80000001009F3B40;
  v54._countAndFlagsBits = 0x6F676120646425;
  v54._object = (void *)0xE700000000000000;
  v55._countAndFlagsBits = 0;
  v55._object = (void *)0xE000000000000000;
  v56 = NSLocalizedString(_:tableName:bundle:value:comment:)(v54, (Swift::String_optional)0, (NSBundle)v53, v55, v229);
  object = (unint64_t)v56._object;

  v58 = sub_1000BA294(&qword_100BC3C38);
  v59 = swift_allocObject(v58, 72, 7);
  *(_OWORD *)(v59 + 16) = xmmword_10097CA50;
  *(_QWORD *)(v59 + 56) = &type metadata for Int;
  *(_QWORD *)(v59 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v59 + 32) = 30;
  v186 = static String.localizedStringWithFormat(_:_:)(v56._countAndFlagsBits, v56._object, v59);
  v192 = v60;
  swift_bridgeObjectRelease(v56._object);
  swift_bridgeObjectRelease(v59);
  v61 = *(_QWORD *)(countAndFlagsBits + 56);
  if (v61 < 0)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    sub_1005FECEC();
    v156 = v160;
    goto LABEL_24;
  }
  v163 = v52;
  v164 = v40;
  if (v61)
  {
    object = *(_QWORD *)(v51 + 16);
    if (object)
    {
      v62 = v225;
      v173 = (char *)v225[2];
      if (v173)
      {
        v180 = type metadata accessor for UnitManager(0);
        v29 = 0;
        a2 = (char *)v62
           + ((*(unsigned __int8 *)(v215 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v215 + 80));
        v179 = v51 + ((*(unsigned __int8 *)(v191 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v191 + 80));
        v171 = *(_QWORD *)(v215 + 72);
        v178 = enum case for NSUnitLength.WeatherFormatUsage.rainfall(_:);
        v177 = enum case for WeatherFormatScaling.automatic(_:);
        v176 = enum case for WeatherFormatPlaceholder.none(_:);
        v175 = enum case for DetailChartDataElement.ValueLabel.text(_:);
        v172 = (char *)(object - 1);
        v63 = _swiftEmptyArrayStorage;
        v174 = (char *)(v61 - 1);
        v181 = v51;
        while (1)
        {
          v64 = Date.formattedShortMonthAndDay(timeZone:)(v214);
          if ((unint64_t)v29 >= *(_QWORD *)(v51 + 16))
            break;
          v66 = v191;
          v67 = *(_QWORD *)(v191 + 72);
          v218 = v65;
          v68 = v179 + v67 * (_QWORD)v29;
          v69 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v191 + 16);
          v70 = v187;
          v217 = v64;
          v71 = v188;
          v72 = v69(v187, v68, v188);
          v225 = v63;
          v73 = v195;
          DayPrecipitationSummary.precipitationAmount.getter(v72);
          (*(void (**)(char *, uint64_t))(v66 + 8))(v70, v71);
          v74 = v222;
          v75 = v228;
          Measurement<>.converted(to:)(v221, v228);
          v76 = v194;
          v77 = *(void (**)(char *, uint64_t))(v194 + 8);
          v77(v73, v75);
          countAndFlagsBits = (uint64_t)v77;
          v78 = v74;
          v79 = v226;
          static Measurement<>.+ infix(_:_:)(v78, v226, v193);
          v77((char *)v79, v75);
          (*(void (**)(uint64_t, char *, uint64_t))(v76 + 32))(v79, v73, v75);
          (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v73, v79, v75);
          v80 = v197;
          v81 = *(void (**)(char *, _QWORD, uint64_t))(v197 + 104);
          v82 = v196;
          v219 = a2;
          v83 = v198;
          v81(v196, v178, v198);
          v84 = type metadata accessor for Locale(0);
          v220 = v29;
          v85 = v199;
          v86 = _s7Weather24LocationCompositionStateOwst_0(v199, 1, 1, v84);
          v87 = static Set<>.full.getter(v86);
          v88 = v201;
          v89 = v200;
          v90 = v202;
          (*(void (**)(char *, _QWORD, uint64_t))(v201 + 104))(v200, v177, v202);
          v91 = v203;
          static WeatherFormatStyle<>.weather(_:usage:scaling:trimLeadingZeroes:locale:)(v87, v82, v89, 2, v85);
          v92 = swift_bridgeObjectRelease(v87);
          (*(void (**)(char *, uint64_t, __n128))(v88 + 8))(v89, v90, v92);
          sub_100021A14(v85, &qword_100BC3340);
          (*(void (**)(char *, uint64_t))(v80 + 8))(v82, v83);
          v93 = v207;
          v94 = v206;
          v95 = v228;
          v96 = v208;
          v97 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v207 + 104))(v206, v176, v208);
          v98 = static UnitManager.standard.getter(v97);
          sub_10000F1C8((unint64_t *)&qword_100BCB0B8, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitLength.BaseWeatherFormatStyle);
          v99 = v205;
          v216 = Measurement.formatted<A>(_:placeholder:unitManager:)(v91, v94, v98, &protocol witness table for UnitManager, v95, v205, v100);
          v101 = swift_release(v98);
          v102 = v95;
          v103 = v219;
          (*(void (**)(char *, uint64_t, __n128))(v93 + 8))(v94, v96, v101);
          v104 = v99;
          v105 = v220;
          (*(void (**)(char *, uint64_t))(v204 + 8))(v91, v104);
          ((void (*)(char *, uint64_t))countAndFlagsBits)(v73, v102);
          v106 = v189;
          (*(void (**)(char *, char *, uint64_t))(v215 + 16))(v189, v103, v209);
          Measurement.value.getter(v102);
          v107 = v190;
          *v190 = 0;
          v107[1] = 0xE000000000000000;
          (*(void (**)(_QWORD *, _QWORD, uint64_t))(v210 + 104))(v107, v175, v211);
          v40 = v217;
          v47 = v218;
          if (v105)
            v108 = v218;
          else
            v108 = v192;
          if (v105)
            v109 = v217;
          else
            v109 = v186;
          swift_bridgeObjectRetain(v108);
          v110 = v223;
          v111 = v106;
          v112 = v107;
          v63 = v225;
          v113 = v212;
          v31 = v213;
          DetailChartDataElement.init(date:value:secondValue:thirdValue:valueLabel:dateLabel:accessibilityDateString:accessibilityValueDescription:color:textColor:)(v111, 0, 1, v112, v109, v108, v40, v47);
          (*((void (**)(char *, char *, char *))v113 + 2))(v224, v110, v31);
          if ((swift_isUniquelyReferenced_nonNull_native(v63) & 1) == 0)
          {
            sub_1005FECEC();
            v63 = v114;
          }
          object = v63[2];
          v51 = v181;
          if (object >= v63[3] >> 1)
          {
            sub_1005FECEC();
            v63 = v115;
          }
          v63[2] = object + 1;
          (*((void (**)(unint64_t, char *, char *))v113 + 4))((unint64_t)v63+ ((v113[80] + 32) & ~(unint64_t)v113[80])+ *((_QWORD *)v113 + 9) * object, v224, v31);
          (*((void (**)(char *, char *))v113 + 1))(v223, v31);
          ((void (*)(char *, uint64_t))countAndFlagsBits)(v222, v228);
          if (v174 != v105 && v172 != v105)
          {
            a2 = &v103[v171];
            v29 = v105 + 1;
            if (v173 != v29)
              continue;
          }
          swift_bridgeObjectRelease(v192);
          *(_QWORD *)&v116 = swift_bridgeObjectRelease(v51).n128_u64[0];
          v117 = (uint64_t)v165;
          v225 = v63;
          goto LABEL_23;
        }
        __break(1u);
        goto LABEL_28;
      }
    }
  }
  swift_bridgeObjectRelease(v192);
  *(_QWORD *)&v116 = swift_bridgeObjectRelease(v51).n128_u64[0];
  v225 = _swiftEmptyArrayStorage;
  v117 = (uint64_t)v165;
LABEL_23:
  v118 = objc_msgSend(v163, "mainBundle", v116);
  v230._countAndFlagsBits = 0xD0000000000000CCLL;
  v230._object = (void *)0x80000001009F3BC0;
  v119._object = (void *)0x80000001009F3B80;
  v119._countAndFlagsBits = 0xD000000000000034;
  v120._countAndFlagsBits = 0x7961646F54;
  v120._object = (void *)0xE500000000000000;
  v121 = NSLocalizedString(_:tableName:bundle:value:comment:)(v119, (Swift::String_optional)0, (NSBundle)v118, v120, v230);
  countAndFlagsBits = v121._countAndFlagsBits;
  v224 = (char *)v121._object;

  v122 = v183;
  sub_1002024D8(v117, (uint64_t)v182, v184, v221, v183);
  v123 = Date.formattedShortMonthAndDay(timeZone:)(v214);
  v222 = v124;
  v223 = (char *)v123;
  v125 = v185;
  v126 = v226;
  static Measurement<>.+ infix(_:_:)(v122, v226, v193);
  v127 = v194;
  v220 = *(char **)(v194 + 8);
  v128 = v126;
  v129 = v228;
  ((void (*)(uint64_t, uint64_t))v220)(v128, v228);
  v130 = v195;
  (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v195, v125, v129);
  v131 = v197;
  v132 = v196;
  v133 = v198;
  (*(void (**)(char *, _QWORD, uint64_t))(v197 + 104))(v196, enum case for NSUnitLength.WeatherFormatUsage.rainfall(_:), v198);
  v134 = type metadata accessor for Locale(0);
  v135 = v199;
  v136 = _s7Weather24LocationCompositionStateOwst_0(v199, 1, 1, v134);
  v137 = static Set<>.full.getter(v136);
  v138 = v201;
  v139 = v200;
  v140 = v202;
  (*(void (**)(char *, _QWORD, uint64_t))(v201 + 104))(v200, enum case for WeatherFormatScaling.automatic(_:), v202);
  v141 = v203;
  static WeatherFormatStyle<>.weather(_:usage:scaling:trimLeadingZeroes:locale:)(v137, v132, v139, 2, v135);
  v142 = swift_bridgeObjectRelease(v137);
  (*(void (**)(char *, uint64_t, __n128))(v138 + 8))(v139, v140, v142);
  sub_100021A14(v135, &qword_100BC3340);
  (*(void (**)(char *, uint64_t))(v131 + 8))(v132, v133);
  v143 = v207;
  v144 = v206;
  v145 = v228;
  v146 = v208;
  (*(void (**)(char *, _QWORD, uint64_t))(v207 + 104))(v206, enum case for WeatherFormatPlaceholder.none(_:), v208);
  v147 = type metadata accessor for UnitManager(0);
  v148 = static UnitManager.standard.getter(v147);
  sub_10000F1C8((unint64_t *)&qword_100BCB0B8, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitLength.BaseWeatherFormatStyle);
  v149 = v205;
  v226 = Measurement.formatted<A>(_:placeholder:unitManager:)(v141, v144, v148, &protocol witness table for UnitManager, v145, v205, v150);
  v151 = swift_release(v148);
  v152 = v146;
  v40 = v145;
  (*(void (**)(char *, uint64_t, __n128))(v143 + 8))(v144, v152, v151);
  v153 = v141;
  a2 = v220;
  (*(void (**)(char *, uint64_t))(v204 + 8))(v153, v149);
  ((void (*)(char *, uint64_t))a2)(v130, v145);
  v154 = v167;
  (*(void (**)(char *, uint64_t, uint64_t))(v215 + 16))(v167, v184, v209);
  Measurement.value.getter(v40);
  v155 = v168;
  *v168 = 0;
  v155[1] = 0xE000000000000000;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v210 + 104))(v155, enum case for DetailChartDataElement.ValueLabel.text(_:), v211);
  v47 = (unint64_t)v170;
  DetailChartDataElement.init(date:value:secondValue:thirdValue:valueLabel:dateLabel:accessibilityDateString:accessibilityValueDescription:color:textColor:)(v154, 0, 1, v155, countAndFlagsBits, v224, v223, v222);
  v31 = v212;
  object = (unint64_t)v213;
  v29 = v169;
  (*((void (**)(char *, unint64_t, char *))v212 + 2))(v169, v47, v213);
  v156 = v225;
  if ((swift_isUniquelyReferenced_nonNull_native(v225) & 1) == 0)
    goto LABEL_29;
LABEL_24:
  v157 = v164;
  v158 = v156[2];
  if (v158 >= v156[3] >> 1)
  {
    sub_1005FECEC();
    v156 = v161;
  }
  v156[2] = v158 + 1;
  (*((void (**)(unint64_t, char *, unint64_t))v31 + 4))((unint64_t)v156+ ((v31[80] + 32) & ~(unint64_t)v31[80])+ *((_QWORD *)v31 + 9) * v158, v29, object);

  (*((void (**)(unint64_t, unint64_t))v31 + 1))(v47, object);
  ((void (*)(uint64_t, uint64_t))a2)(v183, v40);
  (*(void (**)(char *, uint64_t))(v166 + 8))(v182, v157);
  return v156;
}

_QWORD *sub_1001FF9F4(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t ObjectType;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  id v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  double (*v66)(char *, _QWORD, uint64_t);
  char *v67;
  uint64_t v68;
  char *v69;
  double v70;
  int v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  void (*v81)(uint64_t *, _QWORD);
  char *v82;
  char *v83;
  void (*v84)(char *, uint64_t);
  uint64_t (*v85)(char *, char *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  void (*v96)(char *, uint64_t);
  uint64_t v97;
  void (*v98)(char *, char *, uint64_t);
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  __n128 v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __n128 v118;
  void (*v119)(char *, uint64_t, __n128);
  void (*v120)(char *, uint64_t);
  char *v121;
  _QWORD *v122;
  void (*v123)(char *, char *, uint64_t);
  char *v124;
  _QWORD *v125;
  unint64_t v126;
  void (*v127)(char *, uint64_t);
  _QWORD *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  char *v133;
  char v134;
  uint64_t v135;
  char *v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  id v173;
  char *v174;
  uint64_t v175;
  void (*v176)(char *, char *, uint64_t);
  uint64_t v177;
  char *v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  void (*v204)(uint64_t, uint64_t, uint64_t, __n128);
  char *v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  void (*v214)(char *, char *, uint64_t);
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;

  v171 = a4;
  v146 = a3;
  v201 = a2;
  v147 = a1;
  v170 = type metadata accessor for DetailChartDataElement.ValueLabel(0);
  v169 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v168 = (uint64_t *)((char *)&v143 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v197 = type metadata accessor for DetailChartDataElement(0);
  v196 = *(_QWORD *)(v197 - 8);
  v6 = __chkstk_darwin(v197);
  v195 = (char *)&v143 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v194 = (char *)&v143 - v8;
  v167 = type metadata accessor for WeatherFormatPlaceholder(0);
  v166 = *(_QWORD *)(v167 - 8);
  __chkstk_darwin(v167);
  v165 = (char *)&v143 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = type metadata accessor for WeatherFormatScaling(0);
  v163 = *(_QWORD *)(v164 - 8);
  __chkstk_darwin(v164);
  v162 = (char *)&v143 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000BA294(&qword_100BC3340);
  __chkstk_darwin(v11);
  v161 = (uint64_t)&v143 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = type metadata accessor for NSUnitLength.WeatherFormatUsage(0);
  v193 = *(_QWORD *)(v160 - 8);
  __chkstk_darwin(v160);
  v159 = (char *)&v143 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = type metadata accessor for NSUnitLength.BaseWeatherFormatStyle(0);
  v157 = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158);
  v156 = (char *)&v143 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = sub_1000BA294(&qword_100BCB100);
  __chkstk_darwin(v192);
  v16 = (char *)&v143 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v211 = sub_1000BA294(&qword_100BCB108);
  v218 = *(_QWORD *)(v211 - 8);
  v17 = __chkstk_darwin(v211);
  v217 = (char *)&v143 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v207 = (char *)&v143 - v19;
  v20 = sub_1000BA294(&qword_100BCB110);
  __chkstk_darwin(v20);
  v22 = (char *)&v143 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DayPrecipitationStatistics(0);
  v24 = *(_QWORD *)(v23 - 8);
  v212 = v23;
  v213 = v24;
  v25 = __chkstk_darwin(v23);
  v191 = (char *)&v143 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v210 = (char *)&v143 - v28;
  __chkstk_darwin(v27);
  v190 = (char *)&v143 - v29;
  v189 = type metadata accessor for Calendar.Component(0);
  v188 = *(_QWORD *)(v189 - 8);
  v30 = __chkstk_darwin(v189);
  v187 = (char *)&v143 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v186 = (char *)&v143 - v32;
  v33 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v33);
  v205 = (char *)&v143 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = sub_1000BA294(&qword_100BCB0A8);
  v175 = *(_QWORD *)(v172 - 8);
  v35 = __chkstk_darwin(v172);
  v155 = (char *)&v143 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v35);
  v185 = (char *)&v143 - v38;
  __chkstk_darwin(v37);
  v40 = (char *)&v143 - v39;
  v41 = type metadata accessor for Calendar(0);
  v144 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v43 = (char *)&v143 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = type metadata accessor for Date(0);
  v44 = *(_QWORD *)(v199 - 8);
  v45 = __chkstk_darwin(v199);
  v154 = (char *)&v143 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __chkstk_darwin(v45);
  v208 = (char *)&v143 - v48;
  __chkstk_darwin(v47);
  v50 = (char *)&v143 - v49;
  v51 = v4[1];
  ObjectType = swift_getObjectType(*v4);
  v53 = (void *)dispatch thunk of UnitManagerType.precipitationRainfall.getter(ObjectType, v51);
  v184 = type metadata accessor for PrecipitationAveragesHeroChartInput(0);
  v54 = v201 + *(int *)(v184 + 28);
  v174 = v50;
  Date.startOfDay(timeZone:)(v54);
  v200 = v43;
  v153 = v54;
  static Calendar.gregorianCalendar(with:)(v54);
  v55 = sub_10012085C();
  v56 = v53;
  v202 = v40;
  Measurement.init(value:unit:)(v56, v55);
  v173 = v56;
  v152 = v55;
  Measurement.init(value:unit:)(v173, v55);
  v183 = *(_QWORD *)(v146 + 16);
  v145 = v41;
  if (v183)
  {
    v182 = v146 + ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80));
    v181 = *(_QWORD *)(v44 + 72);
    v204 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v44 + 16);
    v180 = enum case for Calendar.Component.day(_:);
    v179 = enum case for Calendar.Component.year(_:);
    v151 = enum case for NSUnitLength.WeatherFormatUsage.rainfall(_:);
    v150 = enum case for WeatherFormatScaling.automatic(_:);
    v149 = enum case for WeatherFormatPlaceholder.none(_:);
    v148 = enum case for DetailChartDataElement.ValueLabel.text(_:);
    v57 = swift_bridgeObjectRetain(v146);
    v58 = 0;
    v198 = _swiftEmptyArrayStorage;
    v216 = v16;
    v59 = v212;
    v60 = v213;
    v61 = (uint64_t)v205;
    v62 = v199;
    v63 = v211;
    v178 = v22;
    v203 = v44;
    while (1)
    {
      v206 = v58;
      v204(v61, v182 + v181 * v58, v62, v57);
      _s7Weather24LocationCompositionStateOwst_0(v61, 0, 1, v62);
      if (_s7Weather24LocationCompositionStateOwet_0(v61, 1, v62) == 1)
        break;
      v64 = v208;
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v208, v61, v62);
      v65 = v188;
      v66 = *(double (**)(char *, _QWORD, uint64_t))(v188 + 104);
      v67 = v186;
      v68 = v189;
      v66(v186, v180, v189);
      v69 = v187;
      v70 = v66(v187, v179, v68);
      v209 = Calendar.ordinality(of:in:for:)(v67, v69, v64, v70);
      LODWORD(v215) = v71;
      v72 = *(void (**)(char *, uint64_t))(v65 + 8);
      v72(v69, v68);
      v73 = ((uint64_t (*)(char *, uint64_t))v72)(v67, v68);
      v74 = v207;
      WeatherStatisticsModel.dailyPrecipitationStatistics.getter(v73);
      v214 = *(void (**)(char *, char *, uint64_t))(v218 + 16);
      v214(v217, v74, v63);
      sub_100204190(&qword_100BCB118);
      dispatch thunk of Sequence.makeIterator()(v63, v75);
      v76 = &v16[*(int *)(v192 + 36)];
      sub_100204190(&qword_100BCB120);
      v78 = v77;
      v79 = *(_QWORD *)v76;
      dispatch thunk of Collection.endIndex.getter(v63, v77);
      v80 = v191;
      if (v79 == v219)
      {
LABEL_8:
        sub_100021A14((uint64_t)v16, &qword_100BCB100);
        v89 = (uint64_t)v178;
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v178, 1, 1, v59);
        v84 = *(void (**)(char *, uint64_t))(v218 + 8);
      }
      else
      {
        while (1)
        {
          v81 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read(&v219, v76, v63, v78);
          v82 = v210;
          (*(void (**)(char *))(v60 + 16))(v210);
          v81(&v219, 0);
          v83 = v217;
          v214(v217, v16, v63);
          dispatch thunk of Collection.formIndex(after:)(v76, v63, v78);
          v84 = *(void (**)(char *, uint64_t))(v218 + 8);
          v84(v83, v63);
          v85 = *(uint64_t (**)(char *, char *, uint64_t))(v60 + 32);
          v86 = v85(v80, v82, v59);
          v87 = DayPrecipitationStatistics.day.getter(v86);
          if ((v215 & 1) == 0 && v87 == v209)
            break;
          v59 = v212;
          v60 = v213;
          (*(void (**)(char *, uint64_t))(v213 + 8))(v80, v212);
          v88 = *(_QWORD *)v76;
          v16 = v216;
          v63 = v211;
          dispatch thunk of Collection.endIndex.getter(v211, v78);
          if (v88 == v219)
            goto LABEL_8;
        }
        sub_100021A14((uint64_t)v216, &qword_100BCB100);
        v89 = (uint64_t)v178;
        v59 = v212;
        v85(v178, v80, v212);
        _s7Weather24LocationCompositionStateOwst_0(v89, 0, 1, v59);
        v60 = v213;
        v63 = v211;
      }
      v61 = (uint64_t)v205;
      v44 = v203;
      v84(v207, v63);
      if (_s7Weather24LocationCompositionStateOwet_0(v89, 1, v59) == 1)
      {
        v62 = v199;
        (*(void (**)(char *, uint64_t))(v44 + 8))(v208, v199);
        sub_100021A14(v89, &qword_100BCB110);
        v16 = v216;
      }
      else
      {
        v90 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v60 + 32))(v190, v89, v59);
        v91 = v155;
        DayPrecipitationStatistics.averagePrecipitationAmount.getter(v90);
        v92 = v185;
        v93 = v172;
        Measurement<>.converted(to:)(v173, v172);
        v94 = v175;
        v95 = *(void (**)(char *, uint64_t))(v175 + 8);
        v95(v91, v93);
        v96 = v95;
        v209 = (uint64_t)v95;
        v97 = Date.formattedShortMonthAndDay(timeZone:)(v153);
        v214 = v98;
        v215 = v97;
        v99 = v202;
        static Measurement<>.+ infix(_:_:)(v92, v202, v152);
        v96(v99, v93);
        (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v99, v91, v93);
        v176 = *(void (**)(char *, char *, uint64_t))(v94 + 16);
        v176(v91, v99, v93);
        v100 = v159;
        v101 = v160;
        (*(void (**)(char *, _QWORD, uint64_t))(v193 + 104))(v159, v151, v160);
        v102 = type metadata accessor for Locale(0);
        v103 = v161;
        v104 = _s7Weather24LocationCompositionStateOwst_0(v161, 1, 1, v102);
        v105 = static Set<>.full.getter(v104);
        v106 = v163;
        v107 = v162;
        v108 = v164;
        (*(void (**)(char *, _QWORD, uint64_t))(v163 + 104))(v162, v150, v164);
        v109 = v156;
        static WeatherFormatStyle<>.weather(_:usage:scaling:trimLeadingZeroes:locale:)(v105, v100, v107, 2, v103);
        v110 = swift_bridgeObjectRelease(v105);
        (*(void (**)(char *, uint64_t, __n128))(v106 + 8))(v107, v108, v110);
        sub_100021A14(v103, &qword_100BC3340);
        (*(void (**)(char *, uint64_t))(v193 + 8))(v100, v101);
        v111 = v166;
        v112 = v165;
        v113 = v167;
        (*(void (**)(char *, _QWORD, uint64_t))(v166 + 104))(v165, v149, v167);
        v114 = type metadata accessor for UnitManager(0);
        v115 = static UnitManager.standard.getter(v114);
        sub_10000F1C8((unint64_t *)&qword_100BCB0B8, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitLength.BaseWeatherFormatStyle);
        v116 = v158;
        v177 = Measurement.formatted<A>(_:placeholder:unitManager:)(v109, v112, v115, &protocol witness table for UnitManager, v93, v158, v117);
        v118 = swift_release(v115);
        v119 = *(void (**)(char *, uint64_t, __n128))(v111 + 8);
        v120 = (void (*)(char *, uint64_t))v209;
        v119(v112, v113, v118);
        (*(void (**)(char *, uint64_t))(v157 + 8))(v109, v116);
        v120(v91, v93);
        v121 = v154;
        v62 = v199;
        ((void (*)(char *, char *, uint64_t))v204)(v154, v208, v199);
        Measurement.value.getter(v93);
        v122 = v168;
        *v168 = 0;
        v122[1] = 0xE000000000000000;
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(v169 + 104))(v122, v148, v170);
        v123 = v214;
        swift_bridgeObjectRetain(v214);
        v124 = v194;
        DetailChartDataElement.init(date:value:secondValue:thirdValue:valueLabel:dateLabel:accessibilityDateString:accessibilityValueDescription:color:textColor:)(v121, 0, 1, v122, v215, v123, v215, v123);
        (*(void (**)(char *, char *, uint64_t))(v196 + 16))(v195, v124, v197);
        v125 = v198;
        if ((swift_isUniquelyReferenced_nonNull_native(v198) & 1) == 0)
        {
          sub_1005FECEC();
          v125 = v137;
        }
        v126 = v125[2];
        v16 = v216;
        v44 = v203;
        v63 = v211;
        v127 = v120;
        if (v126 >= v125[3] >> 1)
        {
          sub_1005FECEC();
          v125 = v138;
        }
        v125[2] = v126 + 1;
        v128 = v125;
        v129 = v196;
        v130 = (*(unsigned __int8 *)(v129 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v129 + 80);
        v198 = v128;
        v131 = (unint64_t)v128 + v130 + *(_QWORD *)(v196 + 72) * v126;
        v132 = v197;
        (*(void (**)(unint64_t, char *, uint64_t))(v196 + 32))(v131, v195, v197);
        v133 = v208;
        v134 = static Date.== infix(_:_:)(v208, v171);
        (*(void (**)(char *, uint64_t))(v129 + 8))(v194, v132);
        v127(v185, v93);
        v135 = v93;
        v59 = v212;
        v60 = v213;
        (*(void (**)(char *, uint64_t))(v213 + 8))(v190, v212);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v133, v62);
        if ((v134 & 1) != 0)
        {
          v136 = v147;
          v127(v147, v135);
          v176(v136, v202, v135);
        }
        v61 = (uint64_t)v205;
      }
      v58 = v206 + 1;
      if (v206 + 1 == v183)
        goto LABEL_22;
    }
  }
  else
  {
    swift_bridgeObjectRetain(v146);
    v198 = _swiftEmptyArrayStorage;
    v61 = (uint64_t)v205;
    v62 = v199;
LABEL_22:
    _s7Weather24LocationCompositionStateOwst_0(v61, 1, 1, v62);
  }
  v139 = v172;
  v140 = v145;
  v141 = v144;
  swift_bridgeObjectRelease(v146);

  (*(void (**)(char *, uint64_t))(v175 + 8))(v202, v139);
  (*(void (**)(char *, uint64_t))(v141 + 8))(v200, v140);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v174, v62);
  return v198;
}

uint64_t sub_100200AFC(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t (*v14)(char *, uint64_t, __n128);
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v2 = sub_1000BA294(&qword_100BCB0A8);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for RoundedPrecipitation(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10012085C();
  Measurement.init(value:unit:)(a1, v10);
  v11 = type metadata accessor for UnitManager(0);
  v12 = static UnitManager.standard.getter(v11);
  Measurement<>.convertAndRoundPrecipitation(unitManager:)(v12, &protocol witness table for UnitManager);
  v13 = swift_release(v12);
  v14 = *(uint64_t (**)(char *, uint64_t, __n128))(v3 + 8);
  v15 = v14(v5, v2, v13);
  RoundedPrecipitation.measurement.getter(v15);
  v16 = Measurement.unit.getter(v2);
  ((void (*)(char *, uint64_t))v14)(v5, v2);
  sub_100202708(v16);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v16;
}

_QWORD *sub_100200C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  int64_t v35;
  BOOL v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  void (*v71)(unint64_t, unint64_t, uint64_t);
  char *v72;
  uint64_t v73;

  v66 = a2;
  v73 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v73 - 8);
  v6 = __chkstk_darwin(v73);
  v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v59 - v10;
  v12 = __chkstk_darwin(v9);
  v71 = (void (*)(unint64_t, unint64_t, uint64_t))((char *)&v59 - v13);
  __chkstk_darwin(v12);
  v67 = (char *)&v59 - v14;
  v15 = type metadata accessor for Calendar(0);
  v64 = *(_QWORD *)(v15 - 8);
  v65 = v15;
  __chkstk_darwin(v15);
  v68 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000BA294(&qword_100BCB0A0);
  __chkstk_darwin(v17);
  v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DetailChartDataElement(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v72 = (char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v25 = (char *)&v59 - v24;
  v26 = *(_QWORD *)(a3 + 16);
  if (!v26)
    return _swiftEmptyArrayStorage;
  v62 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))((char *)&v59 - v24, a3 + v62, v20);
  sub_10020CBD0(a3, (uint64_t)v19);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v19, 1, v20) == 1)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v25, v20);
    sub_100021A14((uint64_t)v19, &qword_100BCB0A0);
    return _swiftEmptyArrayStorage;
  }
  v63 = v25;
  v61 = v8;
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v72, v19, v20);
  v28 = a1 + *(int *)(type metadata accessor for PrecipitationAveragesHeroChartInput(0) + 28);
  v29 = v68;
  static Calendar.currentCalendar(with:)(v28);
  v30 = v67;
  v31 = Date.startOfDay(timeZone:)(v28);
  __chkstk_darwin(v31);
  *(&v59 - 2) = (uint64_t)v29;
  *(&v59 - 1) = (uint64_t)v30;
  v32 = v66;
  v33 = sub_10084AF58(sub_1002034B8, (uint64_t)(&v59 - 4), v66);
  if ((v34 & 1) == 0 && ((v35 = v33, v33 >= 1) ? (v36 = v33 < v26) : (v36 = 0), v36))
  {
    v42 = (unint64_t)v71;
    DetailChartDataElement.date.getter(v33);
    sub_1005FED1C();
    v27 = v43;
    v44 = *(_QWORD *)(v43 + 16);
    v45 = (char *)(v44 + 1);
    if (v44 >= *(_QWORD *)(v43 + 24) >> 1)
      goto LABEL_23;
    while (1)
    {
      *(_QWORD *)(v27 + 16) = v45;
      v70 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      v69 = *(_QWORD *)(v5 + 72);
      v60 = v5;
      v71 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32);
      v71(v27 + v70 + v69 * v44, v42, v73);
      sub_10020286C(v35, 1, -10);
      v35 = *(_QWORD *)(v46 + 16);
      v59 = v46;
      if (!v35)
        break;
      v5 = v46 + 32;
      v44 = v32 + v62;
      v32 = *(_QWORD *)(v32 + 16);
      while (1)
      {
        v47 = *(_QWORD *)v5;
        v5 += 8;
        if (v47 >= v32)
          break;
        DetailChartDataElement.date.getter(v46);
        v42 = *(_QWORD *)(v27 + 16);
        v45 = (char *)(v42 + 1);
        if (v42 >= *(_QWORD *)(v27 + 24) >> 1)
        {
          sub_1005FED1C();
          v27 = v48;
        }
        *(_QWORD *)(v27 + 16) = v45;
        v46 = ((uint64_t (*)(unint64_t, char *, uint64_t))v71)(v27 + v70 + v42 * v69, v11, v73);
        if (!--v35)
          goto LABEL_18;
      }
      __break(1u);
LABEL_23:
      sub_1005FED1C();
      v27 = v57;
    }
LABEL_18:
    swift_bridgeObjectRelease(v59);
    v49 = v61;
    DetailChartDataElement.date.getter(v50);
    v51 = *(_QWORD *)(v27 + 16);
    if (v51 >= *(_QWORD *)(v27 + 24) >> 1)
    {
      sub_1005FED1C();
      v27 = v58;
    }
    v52 = v60;
    v53 = v65;
    *(_QWORD *)(v27 + 16) = v51 + 1;
    v54 = v73;
    v71(v27 + v70 + v51 * v69, (unint64_t)v49, v73);
    v55 = *(void (**)(char *, uint64_t))(v21 + 8);
    v55(v72, v20);
    v55(v63, v20);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v67, v54);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v68, v53);
  }
  else
  {
    v37 = sub_1000BA294(&qword_100BCB0F0);
    v27 = swift_allocObject(v37, ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ 2 * *(_QWORD *)(v5 + 72), *(unsigned __int8 *)(v5 + 80) | 7);
    *(_OWORD *)(v27 + 16) = xmmword_10097DA20;
    v38 = v63;
    v39 = DetailChartDataElement.date.getter(v27);
    v40 = v72;
    DetailChartDataElement.date.getter(v39);
    v41 = *(void (**)(char *, uint64_t))(v21 + 8);
    v41(v40, v20);
    v41(v38, v20);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v30, v73);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v68, v65);
  }
  return (_QWORD *)v27;
}

void sub_1002011B4(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, void *a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  void (*v63)(uint64_t, char *, uint64_t);
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t);
  uint64_t v82;
  id v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  __n128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int *v111;
  uint64_t *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t active;
  void (*v118)(uint64_t, uint64_t);
  uint64_t *v119;
  void (*v120)(uint64_t, char *, uint64_t);
  unint64_t v121;
  id v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t v161;
  __int128 v162;
  char v163[8];
  __int128 v164;
  uint64_t v165[2];
  char v166[8];
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  char v170[8];
  uint64_t v171;
  uint64_t v172;
  char v173[8];
  char v174[8];
  __int128 v175;
  __int128 v176;
  char v177[8];
  __int128 v178;

  v9 = v8;
  v130 = a6;
  v161 = a5;
  v152 = a4;
  v158 = a3;
  v142 = a2;
  v154 = a1;
  v160 = a8;
  v11 = type metadata accessor for AttributeContainer(0);
  __chkstk_darwin(v11);
  v133 = (char *)&v118 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = type metadata accessor for AttributedString(0);
  v135 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136);
  v134 = (char *)&v118 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = type metadata accessor for LollipopDetailViewModel(0);
  __chkstk_darwin(v138);
  v139 = (uint64_t *)((char *)&v118 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v131 = type metadata accessor for LollipopMarkModel(0);
  __chkstk_darwin(v131);
  v137 = (char *)&v118 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = type metadata accessor for DetailChartDataElement(0);
  v126 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v127 = (uint64_t)&v118 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000BA294(&qword_100BCB0C8);
  v18 = __chkstk_darwin(v17);
  v153 = (char *)&v118 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v150 = (char *)&v118 - v20;
  v151 = type metadata accessor for ClosestData(0);
  v21 = __chkstk_darwin(v151);
  v144 = (uint64_t)&v118 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v146 = (uint64_t)&v118 - v23;
  v148 = type metadata accessor for Date(0);
  v147 = *(_QWORD *)(v148 - 8);
  v24 = __chkstk_darwin(v148);
  v149 = (char *)&v118 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v155 = (char *)&v118 - v26;
  v27 = sub_1000BA294(&qword_100BCB0D0);
  __chkstk_darwin(v27);
  v29 = (char *)&v118 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for DetailHeroChartLollipopPosition(0);
  __chkstk_darwin(v30);
  v159 = (void (**)(_QWORD, _QWORD))((char *)&v118 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  v132 = type metadata accessor for DetailHeroChartLollipopModel(0);
  __chkstk_darwin(v132);
  v33 = (uint64_t *)((char *)&v118 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  v34 = sub_1000BA294(&qword_100BCB0A8);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = __chkstk_darwin(v34);
  v125 = (char *)&v118 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __chkstk_darwin(v36);
  v124 = (char *)&v118 - v39;
  v40 = __chkstk_darwin(v38);
  v42 = (char *)&v118 - v41;
  __chkstk_darwin(v40);
  v44 = (char *)&v118 - v43;
  v157 = v9;
  v45 = *(_QWORD *)(v9 + 40);
  v141 = (_QWORD *)(v9 + 16);
  sub_1000DB418((_QWORD *)(v9 + 16), v45);
  v46 = sub_10012085C();
  v47 = a7;
  Measurement.init(value:unit:)(v47, v46);
  v122 = v47;
  v121 = v46;
  Measurement.init(value:unit:)(v122, v46);
  v48 = type metadata accessor for PrecipitationAveragesHeroChartInput(0);
  v49 = v161;
  v140 = v161 + *(int *)(v48 + 32);
  sub_1003EF760((uint64_t)v44, (uint64_t)v42, v140, 0, (uint64_t *)&v162);
  v50 = *(void (**)(char *, uint64_t))(v35 + 8);
  v143 = v42;
  v50(v42, v34);
  v145 = v44;
  v129 = v34;
  v51 = v30;
  v52 = v158;
  v50(v44, v34);
  sub_100202B6C(v49, (uint64_t *)&v162, v33);
  v178 = v162;
  sub_100121AA8((uint64_t)&v178);
  sub_10009E8CC((uint64_t)v163, (uint64_t)v177, &qword_100BC5AA8);
  sub_100121AA8((uint64_t)v177);
  v176 = v164;
  sub_100121AA8((uint64_t)&v176);
  v123 = v48;
  sub_100203470(v49 + *(int *)(v48 + 36), (uint64_t)v29);
  v156 = v51;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v29, 1, v51) == 1)
  {
    sub_100021A14((uint64_t)v29, &qword_100BCB0D0);
    v53 = (uint64_t)v33;
    v54 = (uint64_t)v160;
LABEL_14:
    sub_10007C75C(v53, v54, type metadata accessor for DetailHeroChartLollipopModel);
    return;
  }
  v118 = (void (*)(_QWORD, _QWORD))v50;
  v119 = v33;
  v55 = v159;
  sub_10007C75C((uint64_t)v29, (uint64_t)v159, type metadata accessor for DetailHeroChartLollipopPosition);
  v56 = (char *)v55 + *(int *)(v156 + 20);
  sub_10000F1C8((unint64_t *)&qword_100BCB0E0, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  v58 = v57;
  v59 = v152;
  v60 = v148;
  v61 = dispatch thunk of static Comparable.< infix(_:_:)(v152, v56, v148, v57);
  v62 = v147;
  v63 = *(void (**)(_QWORD, _QWORD, _QWORD))(v147 + 16);
  v120 = (void (*)(uint64_t, char *, uint64_t))v63;
  v64 = v149;
  if ((v61 & 1) != 0)
  {
    v65 = v149;
    v66 = v59;
  }
  else
  {
    v65 = v149;
    v66 = v56;
  }
  v63(v65, v66, v60);
  v67 = v157;
  v68 = (uint64_t)v155;
  v69 = (uint64_t)v153;
  v70 = (uint64_t)v150;
  if ((dispatch thunk of static Comparable.>= infix(_:_:)(v52, v64, v60, v58) & 1) != 0)
  {
    v71 = v68;
    v72 = v52;
  }
  else
  {
    v71 = v68;
    v72 = v64;
  }
  v120(v71, v72, v60);
  v73 = v151;
  v74 = *(void (**)(char *, uint64_t))(v62 + 8);
  v74(v64, v60);
  sub_100202CC4(v68, v154, v70);
  if (_s7Weather24LocationCompositionStateOwet_0(v70, 1, v73) == 1)
  {
    v69 = v70;
LABEL_13:
    v77 = v160;
    v78 = v159;
    v74((char *)v68, v60);
    sub_1000215BC((uint64_t)v78, type metadata accessor for DetailHeroChartLollipopPosition);
    sub_100021A14(v69, &qword_100BCB0C8);
    v53 = (uint64_t)v119;
    v54 = (uint64_t)v77;
    goto LABEL_14;
  }
  v75 = v70;
  v76 = v146;
  sub_10007C75C(v75, v146, type metadata accessor for ClosestData);
  sub_100202CC4(v68, v142, v69);
  if (_s7Weather24LocationCompositionStateOwet_0(v69, 1, v73) == 1)
  {
    sub_1000215BC(v76, type metadata accessor for ClosestData);
    goto LABEL_13;
  }
  sub_10007C75C(v69, v144, type metadata accessor for ClosestData);
  v79 = v127;
  v80 = sub_100202F70(v68, v127);
  DetailChartDataElement.value.getter(v80);
  v81 = *(void (**)(uint64_t, uint64_t))(v126 + 8);
  v158 = (char *)v74;
  v82 = v128;
  v81(v79, v128);
  v83 = v130;
  v84 = v121;
  Measurement.init(value:unit:)(v83, v121);
  v85 = sub_100202F70(v68, v79);
  DetailChartDataElement.value.getter(v85);
  v81(v79, v82);
  Measurement.init(value:unit:)(v83, v84);
  sub_1000DB418(v141, *(_QWORD *)(v67 + 40));
  v86 = (uint64_t)v124;
  v87 = v122;
  v88 = v129;
  Measurement<>.converted(to:)(v122, v129);
  v89 = (uint64_t)v125;
  Measurement<>.converted(to:)(v87, v88);
  sub_1003EF760(v86, v89, v140, 0, v165);
  v90 = v118;
  v118(v89, v88);
  v90(v86, v88);
  sub_1000DB418(v141, *(_QWORD *)(v157 + 40));
  Measurement<>.converted(to:)(v87, v88);
  Measurement<>.converted(to:)(v87, v88);
  sub_1003EF760(v86, v89, v140, 1, &v168);
  v90(v89, v88);
  v90(v86, v88);
  v91 = v165[0];
  v155 = (char *)v165[1];
  v175 = v167;
  sub_10009E8CC((uint64_t)v166, (uint64_t)v174, &qword_100BC5AA8);
  sub_100121AA8((uint64_t)v174);
  v92 = v156;
  v93 = v60;
  v94 = v159;
  v95 = *v159;
  v96 = (uint64_t)v137;
  v120((uint64_t)v137, (char *)v68, v93);
  v97 = v146;
  v98 = sub_1002031A8(v68);
  v99 = *(_QWORD *)((char *)v94 + *(int *)(v92 + 24));
  v100 = *(_QWORD *)((char *)v94 + *(int *)(v92 + 28));
  v101 = v131;
  *(double *)(v96 + *(int *)(v131 + 20)) = v98;
  *(_QWORD *)(v96 + *(int *)(v101 + 24)) = v99;
  *(_QWORD *)(v96 + *(int *)(v101 + 28)) = v100;
  v157 = Date.formattedShortMonthAndDay(timeZone:)(v161 + *(int *)(v123 + 28));
  v156 = v102;
  v103 = v133;
  AttributeContainer.init()(v157);
  v104 = v134;
  AttributedString.init(_:attributes:)(v91, v155, v103);
  v105 = v169;
  v161 = v168;
  v106 = swift_bridgeObjectRetain(v169);
  ((void (*)(char *, uint64_t, __n128))v90)(v143, v88, v106);
  v90((uint64_t)v145, v88);
  sub_1000215BC(v144, type metadata accessor for ClosestData);
  sub_1000215BC(v97, type metadata accessor for ClosestData);
  ((void (*)(uint64_t, uint64_t))v158)(v68, v93);
  sub_1000215BC((uint64_t)v94, type metadata accessor for DetailHeroChartLollipopPosition);
  sub_1000215BC((uint64_t)v119, type metadata accessor for DetailHeroChartLollipopModel);
  v107 = v171;
  v108 = v172;
  swift_bridgeObjectRetain(v172);
  swift_bridgeObjectRelease(v105);
  sub_10009E8CC((uint64_t)v170, (uint64_t)v173, &qword_100BC5AA8);
  sub_100121AA8((uint64_t)v173);
  swift_bridgeObjectRelease(v108);
  v109 = (uint64_t)v139;
  v110 = v156;
  *v139 = v157;
  *(_QWORD *)(v109 + 8) = v110;
  v111 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
  (*(void (**)(uint64_t, char *, uint64_t))(v135 + 32))(v109 + v111[5], v104, v136);
  v112 = (uint64_t *)(v109 + v111[6]);
  *v112 = v161;
  v112[1] = v105;
  v113 = (_QWORD *)(v109 + v111[7]);
  *v113 = 0;
  v113[1] = 0xE000000000000000;
  v114 = (_QWORD *)(v109 + v111[8]);
  *v114 = 0;
  v114[1] = 0;
  *(_OWORD *)(v109 + v111[9]) = v175;
  v115 = (_QWORD *)(v109 + v111[10]);
  *v115 = v107;
  v115[1] = v108;
  *(_BYTE *)(v109 + v111[11]) = 0;
  swift_storeEnumTagMultiPayload(v109, v138, 2);
  v116 = v160;
  *v160 = v95;
  active = type metadata accessor for DetailHeroChartActiveLollipopModel(0);
  sub_10007C75C(v96, (uint64_t)v116 + *(int *)(active + 20), type metadata accessor for LollipopMarkModel);
  sub_10007C75C(v109, (uint64_t)v116 + *(int *)(active + 24), type metadata accessor for LollipopDetailViewModel);
  swift_storeEnumTagMultiPayload(v116, v132, 1);
}

uint64_t sub_100201EC8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  id v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  Swift::String *v32;
  double v33;
  id v34;
  id v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  id v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;

  v0 = type metadata accessor for ConditionDetailLegendForeground(0);
  __chkstk_darwin(v0);
  v2 = (uint64_t *)((char *)&v47 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = (void *)objc_opt_self(UIColor);
  v52 = Color.init(uiColor:)(objc_msgSend(v3, "systemGray3Color"));
  v4 = objc_msgSend(v3, "systemGray3Color");
  v5 = objc_msgSend(v4, "accessibilityName");

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v49 = v7;
  v50 = v6;

  v8 = sub_1000BA294(&qword_100BCB0C0);
  v9 = type metadata accessor for ConditionDetailLegend(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = *(unsigned __int8 *)(v10 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = swift_allocObject(v8, v13 + 2 * v11, v12 | 7);
  v51 = v14;
  *(_OWORD *)(v14 + 16) = xmmword_10097DA20;
  v15 = (uint64_t *)(v14 + v13);
  v48 = (id)objc_opt_self(NSBundle);
  v16 = objc_msgSend(v48, "mainBundle");
  v53._countAndFlagsBits = 0xD000000000000092;
  v53._object = (void *)0x80000001009F3980;
  v17._countAndFlagsBits = 0x206425207473614CLL;
  v17._object = (void *)0xEC00000073796164;
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v17, (Swift::String_optional)0, (NSBundle)v16, v18, v53);

  v20 = sub_1000BA294(&qword_100BC3C38);
  v21 = swift_allocObject(v20, 72, 7);
  *(_OWORD *)(v21 + 16) = xmmword_10097CA50;
  *(_QWORD *)(v21 + 56) = &type metadata for Int;
  *(_QWORD *)(v21 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v21 + 32) = 30;
  v22 = static String.localizedStringWithFormat(_:_:)(v19._countAndFlagsBits, v19._object, v21);
  v24 = v23;
  swift_bridgeObjectRelease(v19._object);
  swift_bridgeObjectRelease(v21);
  *v2 = static Color.cyan.getter(v25);
  v26 = objc_msgSend(v3, "cyanColor", swift_storeEnumTagMultiPayload(v2, v0, 0).n128_f64[0]);
  v27 = objc_msgSend(v26, "accessibilityName");

  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  v30 = v29;

  *v15 = v22;
  v15[1] = v24;
  v15[2] = v22;
  v15[3] = v24;
  sub_10007C75C((uint64_t)v2, (uint64_t)v15 + *(int *)(v9 + 24), type metadata accessor for ConditionDetailLegendForeground);
  v31 = (uint64_t *)((char *)v15 + *(int *)(v9 + 28));
  *v31 = v28;
  v31[1] = v30;
  v32 = (Swift::String *)((char *)v15 + v11);
  *(_QWORD *)&v33 = swift_bridgeObjectRetain(v24).n128_u64[0];
  v34 = v48;
  v35 = objc_msgSend(v48, "mainBundle", v33);
  v36._countAndFlagsBits = 0xD000000000000030;
  v54._countAndFlagsBits = 0xD000000000000065;
  v54._object = (void *)0x80000001009F3A60;
  v36._object = (void *)0x80000001009F3A20;
  v37._countAndFlagsBits = 0x65676172657641;
  v37._object = (void *)0xE700000000000000;
  v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v36, (Swift::String_optional)0, (NSBundle)v35, v37, v54);

  v39 = (uint64_t *)((char *)&v32->_countAndFlagsBits + *(int *)(v9 + 24));
  v40 = v52;
  *v39 = v52;
  swift_storeEnumTagMultiPayload(v39, v0, 0);
  *v32 = v38;
  v32[1] = v38;
  v41 = (uint64_t *)((char *)&v32->_countAndFlagsBits + *(int *)(v9 + 28));
  v42 = v49;
  *v41 = v50;
  v41[1] = v42;
  swift_retain();
  v43 = objc_msgSend(v34, "mainBundle", swift_bridgeObjectRetain(v38._object).n128_f64[0]);
  v55._countAndFlagsBits = 0xD000000000000045;
  v55._object = (void *)0x80000001009F3AF0;
  v44._object = (void *)0x80000001009F3AD0;
  v44._countAndFlagsBits = 0xD00000000000001DLL;
  v45._countAndFlagsBits = 0;
  v45._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v44, (Swift::String_optional)0, (NSBundle)v43, v45, v55);

  swift_release(v40);
  return v51;
}

void sub_1002022F8(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v18 = a2;
  v19 = a4;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Calendar.Component(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v14);
  v16 = (char *)&v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a1;
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for Calendar.Component.day(_:), v10);
  Calendar.date(byAdding:value:to:wrappingComponents:)(v13, v17, a3, 0);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v6) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v19, v9, v6);
    sub_100021A14((uint64_t)v16, (uint64_t *)&unk_100BD35A0);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v19, v16, v6);
  }
}

void sub_1002024BC(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_1002022F8(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1002024D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v29 = a3;
  v30 = a4;
  v31 = a5;
  v7 = sub_1000BA294(&qword_100BCB0A8);
  v27 = *(_QWORD *)(v7 - 8);
  v28 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BCB130);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000BA294(&qword_100BCB138);
  __chkstk_darwin(v14);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DayWeather(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for PrecipitationAveragesHeroChartInput(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1 + *(int *)(v21 + 24), v10);
  v32 = a2;
  v33 = v29;
  sub_1000D8C28();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v17) == 1)
  {
    sub_100021A14((uint64_t)v16, &qword_100BCB138);
    v22 = sub_10012085C();
    return Measurement.init(value:unit:)(v30, v22);
  }
  else
  {
    v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(v20, v16, v17);
    DayWeather.precipitationAmount.getter(v24);
    v25 = v28;
    Measurement<>.converted(to:)(v30, v28);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v25);
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  }
}

double sub_100202708(uint64_t a1)
{
  void *v2;
  id v3;
  char v4;
  double result;
  id v6;
  char v7;

  v2 = (void *)objc_opt_self(NSUnitLength);
  v3 = objc_msgSend(v2, "millimeters");
  sub_10012085C();
  v4 = static NSObject.== infix(_:_:)(v3, a1);

  result = 10.0;
  if ((v4 & 1) == 0)
  {
    v6 = objc_msgSend(v2, "inches", 10.0);
    v7 = static NSObject.== infix(_:_:)(v6, a1);

    result = 1.0;
    if ((v7 & 1) != 0)
      return 0.5;
  }
  return result;
}

uint64_t sub_1002027C0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100098728();
  v10 = v9 - v8;
  a4();
  LOBYTE(a4) = Calendar.isDate(_:inSameDayAs:)(v10, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  return a4 & 1;
}

void sub_10020286C(int64_t a1, int64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_1002034DC(a1, a2, a3);
  v4 = v3;
  v5 = *(_QWORD *)(v3 + 16);
  if (v5 < 2)
    return;
  v6 = 0;
  v7 = v5 >> 1;
  for (i = v5 + 3; ; --i)
  {
    if (v6 == i - 4)
      goto LABEL_9;
    v9 = *(_QWORD *)(v4 + 16);
    if (v6 >= v9)
      break;
    if (i - 4 >= v9)
      goto LABEL_12;
    v10 = *(_QWORD *)(v4 + 8 * v6 + 32);
    v11 = *(_QWORD *)(v4 + 8 * i);
    if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
    {
      sub_100866FF8();
      v4 = v12;
    }
    *(_QWORD *)(v4 + 8 * v6 + 32) = v11;
    *(_QWORD *)(v4 + 8 * i) = v10;
LABEL_9:
    if (v7 == ++v6)
      return;
  }
  __break(1u);
LABEL_12:
  __break(1u);
}

void sub_100202928(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t i;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 < 2)
    return;
  v3 = 0;
  v4 = v2 >> 1;
  for (i = v2 + 7; ; --i)
  {
    if (v3 == i - 8)
      goto LABEL_9;
    v6 = *(_QWORD *)(v1 + 16);
    if (v3 >= v6)
      break;
    if (i - 8 >= v6)
      goto LABEL_12;
    v7 = *(_DWORD *)(v1 + 4 * v3 + 32);
    v8 = *(_DWORD *)(v1 + 4 * i);
    if ((swift_isUniquelyReferenced_nonNull_native(v1) & 1) == 0)
    {
      sub_1008670C0();
      v1 = v9;
    }
    *(_DWORD *)(v1 + 4 * v3 + 32) = v8;
    *(_DWORD *)(v1 + 4 * i) = v7;
LABEL_9:
    if (v4 == ++v3)
      return;
  }
  __break(1u);
LABEL_12:
  __break(1u);
}

void sub_1002029E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v17 = *(_QWORD *)(type metadata accessor for ScrubberHour(0) - 8);
  sub_10009D98C();
  __chkstk_darwin(v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  sub_100079F7C();
  v18 = v6;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7 < 2)
  {
LABEL_2:
    sub_100098640();
    return;
  }
  v8 = 0;
  v9 = v7 >> 1;
  v10 = v7 - 1;
  v16 = v7 >> 1;
  while (1)
  {
    if (v8 == v10)
      goto LABEL_12;
    v11 = *(_QWORD *)(a1 + 16);
    if (v8 >= v11)
      break;
    v12 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    v13 = *(_QWORD *)(v17 + 72);
    sub_100078058(a1 + v12 + v13 * v8, v18, type metadata accessor for ScrubberHour);
    if (v10 >= v11)
      goto LABEL_15;
    sub_100078058(a1 + v12 + v13 * v10, (uint64_t)v4, type metadata accessor for ScrubberHour);
    if ((swift_isUniquelyReferenced_nonNull_native(a1) & 1) == 0)
    {
      sub_1008670D0();
      a1 = v14;
    }
    if (v8 >= *(_QWORD *)(a1 + 16))
      goto LABEL_16;
    sub_10020491C((uint64_t)v4, a1 + v12 + v13 * v8);
    if (v10 >= *(_QWORD *)(a1 + 16))
      goto LABEL_17;
    sub_10020491C(v18, a1 + v12 + v13 * v10);
    v9 = v16;
LABEL_12:
    ++v8;
    --v10;
    if (v9 == v8)
      goto LABEL_2;
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
}

double sub_100202B6C@<D0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  uint64_t v25;

  v6 = type metadata accessor for AttributeContainer(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PrecipitationAveragesHeroChartInput(0);
  v10 = Date.formattedShortMonthAndDay(timeZone:)(a1 + *(int *)(v9 + 28));
  v12 = v11;
  v13 = *a2;
  v14 = a2[1];
  swift_bridgeObjectRetain(v14);
  AttributeContainer.init()(v15);
  v16 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
  AttributedString.init(_:attributes:)(v13, v14, v8);
  v17 = a2[4];
  v18 = a2[5];
  *a3 = v10;
  a3[1] = v12;
  *(_OWORD *)((char *)a3 + v16[6]) = xmmword_100988D00;
  v19 = (uint64_t *)((char *)a3 + v16[7]);
  *v19 = 0;
  v19[1] = 0xE000000000000000;
  v20 = (uint64_t *)((char *)a3 + v16[8]);
  *v20 = 0;
  v20[1] = 0;
  v21 = (uint64_t *)((char *)a3 + v16[9]);
  *v21 = v17;
  v21[1] = v18;
  *(_OWORD *)((char *)a3 + v16[10]) = xmmword_100988D00;
  *((_BYTE *)a3 + v16[11]) = 0;
  v22 = type metadata accessor for LollipopDetailViewModel(0);
  swift_storeEnumTagMultiPayload(a3, v22, 2);
  v23 = type metadata accessor for DetailHeroChartLollipopModel(0);
  swift_storeEnumTagMultiPayload(a3, v23, 0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(v18).n128_u64[0];
  return result;
}

uint64_t sub_100202CC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t, __n128);
  __n128 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  __n128 v28;
  void (*v29)(char *, char *, uint64_t, __n128);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(char *, uint64_t, uint64_t, __n128);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v46 = a1;
  v5 = type metadata accessor for Date(0);
  v44 = *(_QWORD *)(v5 - 8);
  v45 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DetailChartDataElement(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = *(_QWORD *)(a2 + 16);
  if (!v14)
    goto LABEL_14;
  v40 = (char *)&v39 - v13;
  v41 = a2;
  v15 = a2 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  v16 = *(_QWORD *)(v9 + 72);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16);
  v42 = a3;
  v43 = v17;
  v18 = swift_bridgeObjectRetain(a2);
  v19 = v14;
  v20 = v15;
  v39 = v14;
  do
  {
    v21 = v43(v12, v20, v8, v18);
    DetailChartDataElement.date.getter(v21);
    v22 = static Date.== infix(_:_:)(v7, v46);
    v23 = *(void (**)(char *, uint64_t))(v44 + 8);
    v23(v7, v45);
    if ((v22 & 1) != 0)
    {
      v28 = swift_bridgeObjectRelease(v41);
      v29 = *(void (**)(char *, char *, uint64_t, __n128))(v9 + 32);
      v30 = v40;
      v29(v40, v12, v8, v28);
      v31 = v42;
      ((void (*)(uint64_t, char *, uint64_t))v29)(v42, v30, v8);
      v32 = type metadata accessor for ClosestData(0);
      swift_storeEnumTagMultiPayload(v31, v32, 1);
      v33 = v31;
LABEL_13:
      v37 = 0;
      v38 = v32;
      return _s7Weather24LocationCompositionStateOwst_0(v33, v37, 1, v38);
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    v20 += v16;
    --v19;
  }
  while (v19);
  swift_bridgeObjectRelease(v41);
  v25 = 0;
  a3 = v42;
  v26 = v39;
  while (1)
  {
    DetailChartDataElement.date.getter(v24);
    v27 = static Date.> infix(_:_:)(v7, v46);
    v24 = ((uint64_t (*)(char *, uint64_t))v23)(v7, v45);
    if ((v27 & 1) != 0)
      break;
    ++v25;
    v15 += v16;
    if (v26 == v25)
      goto LABEL_14;
  }
  if (v25)
  {
    v34 = *(int *)(sub_1000BA294(&qword_100BCB0E8) + 48);
    v35 = (void (*)(uint64_t, uint64_t, uint64_t))v43;
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v43)(a3, v15 - v16, v8);
    if (v25 < v26)
    {
      v35(a3 + v34, v15, v8);
      v32 = type metadata accessor for ClosestData(0);
      swift_storeEnumTagMultiPayload(a3, v32, 0);
      v33 = a3;
      goto LABEL_13;
    }
    __break(1u);
  }
  else
  {
LABEL_14:
    v38 = type metadata accessor for ClosestData(0);
    v33 = a3;
    v37 = 1;
    return _s7Weather24LocationCompositionStateOwst_0(v33, v37, 1, v38);
  }
  return result;
}

uint64_t sub_100202F70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(_QWORD);
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t (*v24)(char *, uint64_t);
  uint64_t v25;
  double v26;
  double v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = a1;
  v4 = type metadata accessor for Date(0);
  v33 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DetailChartDataElement(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v31 - v12;
  v14 = type metadata accessor for ClosestData(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100078058(v2, (uint64_t)v16, v17);
  if (swift_getEnumCaseMultiPayload(v16) == 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v16, v7);
  v32 = a2;
  v19 = &v16[*(int *)(sub_1000BA294(&qword_100BCB0E8) + 48)];
  v20 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v20(v13, v16, v7);
  v21 = ((uint64_t (*)(char *, char *, uint64_t))v20)(v11, v19, v7);
  DetailChartDataElement.date.getter(v21);
  v22 = v34;
  v23 = Date.distance(to:)(v34);
  v24 = *(uint64_t (**)(char *, uint64_t))(v33 + 8);
  v25 = v24(v6, v4);
  v26 = fabs(v23);
  DetailChartDataElement.date.getter(v25);
  v27 = Date.distance(to:)(v22);
  v24(v6, v4);
  v28 = *(void (**)(char *, uint64_t))(v8 + 8);
  if (v26 >= fabs(v27))
  {
    v28(v13, v7);
    v29 = v32;
    v30 = v11;
  }
  else
  {
    v28(v11, v7);
    v29 = v32;
    v30 = v13;
  }
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v20)(v29, v30, v7);
}

double sub_1002031A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  double v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  double v24;
  uint64_t (*v25)(char *, uint64_t);
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  double v36;
  void (*v37)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;

  v40 = a1;
  v2 = type metadata accessor for Date(0);
  v39 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v39 - v6;
  v8 = type metadata accessor for DetailChartDataElement(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v39 - v13;
  v15 = type metadata accessor for ClosestData(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100078058(v1, (uint64_t)v17, v18);
  if (swift_getEnumCaseMultiPayload(v17) == 1)
  {
    v19 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v14, v17, v8);
    v20 = DetailChartDataElement.value.getter(v19);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  else
  {
    v21 = &v17[*(int *)(sub_1000BA294(&qword_100BCB0E8) + 48)];
    v22 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v22(v14, v17, v8);
    v23 = ((uint64_t (*)(char *, char *, uint64_t))v22)(v12, v21, v8);
    DetailChartDataElement.date.getter(v23);
    v24 = Date.distance(to:)(v40);
    v25 = *(uint64_t (**)(char *, uint64_t))(v39 + 8);
    v26 = v25(v7, v2);
    v27 = fabs(v24);
    v28 = DetailChartDataElement.date.getter(v26);
    DetailChartDataElement.date.getter(v28);
    v29 = Date.distance(to:)(v5);
    v25(v5, v2);
    v30 = v25(v7, v2);
    v31 = fabs(v29);
    v32 = DetailChartDataElement.value.getter(v30);
    v34 = v27 * (v32 - DetailChartDataElement.value.getter(v33)) / v31;
    v36 = DetailChartDataElement.value.getter(v35);
    v37 = *(void (**)(char *, uint64_t))(v9 + 8);
    v37(v12, v8);
    v37(v14, v8);
    return v36 + v34;
  }
  return v20;
}

uint64_t type metadata accessor for ClosestData(uint64_t a1)
{
  uint64_t result;

  result = qword_100BCB1C8;
  if (!qword_100BCB1C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ClosestData);
  return result;
}

uint64_t sub_100203470(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BCB0D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002034B8(uint64_t a1)
{
  uint64_t v1;

  return sub_1002027C0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (void (*)(void))&DetailChartDataElement.date.getter) & 1;
}

void sub_1002034DC(int64_t a1, int64_t a2, uint64_t a3)
{
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t *v9;
  uint64_t v10;
  int64_t *v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v28;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;

  v5 = a1;
  v6 = sub_10021A640(a1, a2, a3);
  v7 = v6;
  if (v6 > 0)
  {
    v8 = sub_1000BA294(&qword_100BCB0F8);
    v9 = (int64_t *)swift_allocObject(v8, 8 * v7 + 32, 7);
    v10 = (uint64_t)(j__malloc_size(v9) - 32) / 8;
    v9[2] = v7;
    v9[3] = 2 * v10;
    v11 = v9 + 4;
    v12 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - v7;
    while (1)
    {
      v13 = v5 <= a2;
      if (a3 > 0)
        v13 = v5 >= a2;
      if (v13)
        break;
      v14 = v5 + a3;
      if (__OFADD__(v5, a3))
        v14 = ((v5 + a3) >> 63) ^ 0x8000000000000000;
      *v11++ = v5;
      v5 = v14;
      if (!--v7)
      {
        v5 = v14;
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v6 < 0)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v9 = _swiftEmptyArrayStorage;
  v12 = _swiftEmptyArrayStorage[3] >> 1;
  v11 = &_swiftEmptyArrayStorage[4];
LABEL_12:
  v15 = v5 <= a2;
  if (a3 > 0)
    v15 = v5 >= a2;
  if (!v15)
  {
    v16 = (a3 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      v17 = v5 + a3;
      if (__OFADD__(v5, a3))
      {
        v17 = v16;
        if (!v12)
          goto LABEL_21;
        v17 = v16;
      }
      else if (!v12)
      {
LABEL_21:
        v18 = v9[3];
        if ((uint64_t)((v18 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_44;
        v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
        if (v19 <= 1)
          v20 = 1;
        else
          v20 = v19;
        v21 = sub_1000BA294(&qword_100BCB0F8);
        v22 = (int64_t *)swift_allocObject(v21, 8 * v20 + 32, 7);
        v23 = (uint64_t)(j__malloc_size(v22) - 32) / 8;
        v22[2] = v20;
        v22[3] = 2 * v23;
        v24 = (unint64_t)(v22 + 4);
        v25 = v9[3];
        v26 = v25 >> 1;
        if (v9[2])
        {
          if (v22 != v9 || v24 >= (unint64_t)&v9[v26 + 4])
            memmove(v22 + 4, v9 + 4, 8 * v26);
          v9[2] = 0;
        }
        v11 = (int64_t *)(v24 + 8 * v26);
        v12 = (v23 & 0x7FFFFFFFFFFFFFFFLL) - (v25 >> 1);
        swift_release(v9);
        v9 = v22;
        v16 = (a3 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
      }
      v28 = __OFSUB__(v12--, 1);
      if (v28)
        goto LABEL_43;
      *v11++ = v5;
      v29 = v17 <= a2;
      if (a3 > 0)
        v29 = v17 >= a2;
      v5 = v17;
    }
    while (!v29);
  }
  v30 = v9[3];
  if (v30 >= 2)
  {
    v31 = v30 >> 1;
    v28 = __OFSUB__(v31, v12);
    v32 = v31 - v12;
    if (v28)
    {
LABEL_46:
      __break(1u);
      return;
    }
    v9[2] = v32;
  }
}

void sub_100203714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  int64_t v46;
  BOOL v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  __int128 v70;
  __int128 v71;
  char v72;
  __int128 v73;
  __int128 v74;

  v68 = type metadata accessor for HourWeather(0);
  v66 = *(_QWORD *)(v68 - 8);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v67 = v7;
  v63 = sub_1000BA294(&qword_100BCB148);
  __chkstk_darwin(v63);
  v62 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v9);
  v11 = (char *)&v57 - v10;
  v64 = v12;
  v13 = *(unsigned __int8 *)(v12 + 80);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  sub_10093CB04(a1, a2, a3);
  v73 = v71;
  v74 = v70;
  if ((v72 & 1) != 0)
  {
    v18 = 0;
    v17 = _swiftEmptyArrayStorage;
    goto LABEL_5;
  }
  v14 = *((_QWORD *)&v74 + 1);
  v15 = v74;
  v16 = *(_QWORD *)(v74 + 16);
  v17 = _swiftEmptyArrayStorage;
  if (*((_QWORD *)&v74 + 1) != v16)
  {
    v18 = 0;
    v58 = v13 | 7;
    v59 = (v13 + 32) & ~v13;
    v23 = (char *)_swiftEmptyArrayStorage + v59;
    v24 = &qword_100BCB148;
    v26 = *((_QWORD *)&v73 + 1);
    v25 = v73;
    v27 = _swiftEmptyArrayStorage;
    v60 = v73;
    v61 = v74;
    while (1)
    {
      if (v14 >= v16)
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        return;
      }
      v69 = v27;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v66 + 16))(v67, v15+ ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))+ *(_QWORD *)(v66 + 72) * v14, v68);
      v28 = *(_QWORD *)(v25 + 16);
      if (v26 == v28)
      {
        (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v67, v68);
        v17 = v69;
        goto LABEL_5;
      }
      if (v26 >= v28)
        goto LABEL_41;
      v29 = type metadata accessor for HourTemperatureStatistics(0);
      v30 = *(_QWORD *)(v29 - 8);
      v31 = v25 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
      v32 = *(_QWORD *)(v30 + 72);
      v65 = v26;
      v33 = v31 + v32 * v26;
      v34 = v24;
      v35 = v11;
      v36 = v62;
      v37 = &v62[*(int *)(v63 + 48)];
      (*(void (**)(char *, uint64_t, uint64_t))(v66 + 32))(v62, v67, v68);
      (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v37, v33, v29);
      v38 = (uint64_t)v36;
      v11 = v35;
      v24 = v34;
      sub_1000C1D08(v38, (uint64_t)v11);
      if (v18)
      {
        v17 = v69;
        v25 = v60;
        v15 = v61;
        goto LABEL_36;
      }
      sub_10011018C();
      if (v39)
        goto LABEL_43;
      sub_100099368();
      if (v39 ^ v21 | v47)
        v41 = 1;
      else
        v41 = v40;
      v42 = sub_1000BA294(&qword_100BCB150);
      v43 = *(_QWORD *)(v64 + 72);
      v44 = v59;
      v17 = (_QWORD *)swift_allocObject(v42, v59 + v43 * v41, v58);
      v45 = j__malloc_size(v17);
      if (!v43)
        goto LABEL_44;
      v46 = v45 - v44;
      v47 = v45 - v44 == 0x8000000000000000 && v43 == -1;
      if (v47)
        goto LABEL_45;
      v48 = v46 / v43;
      v17[2] = v41;
      v17[3] = 2 * (v46 / v43);
      v49 = (char *)v17 + v44;
      v50 = v69;
      v51 = v69[3];
      v52 = v51 >> 1;
      v53 = (v51 >> 1) * v43;
      v25 = v60;
      v15 = v61;
      if (v69[2])
        break;
LABEL_35:
      v23 = &v49[v53];
      v18 = (v48 & 0x7FFFFFFFFFFFFFFFLL) - (v51 >> 1);
      swift_release(v50);
LABEL_36:
      v21 = __OFSUB__(v18--, 1);
      v56 = v65;
      if (v21)
        goto LABEL_42;
      ++v14;
      sub_10009E8CC((uint64_t)v11, (uint64_t)v23, v24);
      v23 += *(_QWORD *)(v64 + 72);
      v16 = *(_QWORD *)(v15 + 16);
      v26 = v56 + 1;
      v27 = v17;
      if (v14 == v16)
        goto LABEL_5;
    }
    v54 = (char *)v69 + v59;
    if (v17 < v69 || v49 >= (char *)v69 + v59 + v53)
    {
      swift_arrayInitWithTakeFrontToBack(v49, v54, v52, v63);
    }
    else
    {
      if (v17 == v69)
      {
LABEL_34:
        v50[2] = 0;
        goto LABEL_35;
      }
      swift_arrayInitWithTakeBackToFront(v49, v54, v52, v63);
    }
    v50 = v69;
    goto LABEL_34;
  }
  v18 = 0;
LABEL_5:
  sub_100158858(&v74);
  sub_100158858(&v73);
  v19 = v17[3];
  if (v19 >= 2)
  {
    v20 = v19 >> 1;
    v21 = __OFSUB__(v20, v18);
    v22 = v20 - v18;
    if (v21)
      goto LABEL_46;
    v17[2] = v22;
  }
  sub_100098640();
}

void sub_100203ACC(double a1, double a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  double v15;
  double v16;
  _BOOL4 v17;
  BOOL v18;
  _BOOL4 v19;
  double v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;

  v6 = sub_1002041EC(a1, a2, a3);
  v7 = v6;
  if (v6 <= 0)
  {
    if ((v6 & 0x8000000000000000) == 0)
    {
      v10 = 0;
      v11 = 0;
      v9 = (double *)_swiftEmptyArrayStorage;
      v14 = _swiftEmptyArrayStorage[3] >> 1;
      v13 = (double *)&_swiftEmptyArrayStorage[4];
      v15 = a1;
      goto LABEL_15;
    }
    goto LABEL_48;
  }
  v8 = sub_1000BA294(&qword_100BCB140);
  v9 = (double *)sub_1000D15D8(v8, 8 * v7);
  v10 = 0;
  v11 = 0;
  v12 = (uint64_t)(j__malloc_size(v9) - 32) / 8;
  *((_QWORD *)v9 + 2) = v7;
  *((_QWORD *)v9 + 3) = 2 * v12;
  v13 = v9 + 4;
  v14 = (v12 & 0x7FFFFFFFFFFFFFFFLL) - v7;
  v15 = a1;
  do
  {
    if (!v7)
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    v16 = v15;
    v17 = v15 <= a2;
    if (a3 > 0.0)
      v17 = v15 >= a2;
    if (v17)
    {
      if (v10 & 1 | (v15 != a2))
        goto LABEL_46;
      v10 = 1;
    }
    else
    {
      v18 = __OFADD__(v11++, 1);
      if (v18)
        goto LABEL_47;
      v15 = a1 + (double)v11 * a3;
    }
    *v13++ = v16;
    --v7;
  }
  while (v7);
  while (1)
  {
LABEL_15:
    v19 = v15 <= a2;
    if (a3 > 0.0)
      v19 = v15 >= a2;
    if (!v19)
    {
      v18 = __OFADD__(v11++, 1);
      if (v18)
        goto LABEL_43;
      v20 = a1 + (double)v11 * a3;
      if (v14)
        goto LABEL_36;
      goto LABEL_23;
    }
    if ((v15 != a2) | v10 & 1)
      break;
    v10 = 1;
    v20 = v15;
    if (v14)
    {
      v20 = v15;
      goto LABEL_36;
    }
LABEL_23:
    sub_10011018C();
    if (v21)
      goto LABEL_44;
    sub_100099368();
    if (v21 ^ v18 | v23)
      v24 = 1;
    else
      v24 = v22;
    v25 = sub_1000BA294(&qword_100BCB140);
    v26 = (double *)sub_1000D15D8(v25, 8 * v24);
    v27 = (uint64_t)(j__malloc_size(v26) - 32) / 8;
    *((_QWORD *)v26 + 2) = v24;
    *((_QWORD *)v26 + 3) = 2 * v27;
    v28 = (unint64_t)(v26 + 4);
    v29 = *((_QWORD *)v9 + 3);
    v30 = v29 >> 1;
    if (*((_QWORD *)v9 + 2))
    {
      if (v26 != v9 || v28 >= (unint64_t)&v9[v30 + 4])
        memmove(v26 + 4, v9 + 4, 8 * v30);
      v9[2] = 0.0;
    }
    v13 = (double *)(v28 + 8 * v30);
    v14 = (v27 & 0x7FFFFFFFFFFFFFFFLL) - (v29 >> 1);
    swift_release(v9);
    v9 = v26;
LABEL_36:
    v18 = __OFSUB__(v14--, 1);
    if (v18)
    {
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    *v13++ = v15;
    v15 = v20;
  }
  v32 = *((_QWORD *)v9 + 3);
  if (v32 < 2)
    return;
  v33 = v32 >> 1;
  v18 = __OFSUB__(v33, v14);
  v34 = v33 - v14;
  if (!v18)
  {
    *((_QWORD *)v9 + 2) = v34;
    return;
  }
LABEL_49:
  __break(1u);
}

void sub_100203D40(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    swift_bridgeObjectRetain();
    v3 = 0;
    v4 = 0;
    v5 = &_swiftEmptyArrayStorage[4];
    v7 = (uint64_t *)(v6 + 48);
    while (1)
    {
      v9 = *(v7 - 2);
      v8 = *(v7 - 1);
      v10 = *v7;
      if (v3)
      {
        sub_1000878DC();
        sub_100099360();
      }
      else
      {
        sub_10011018C();
        if (v11)
          goto LABEL_28;
        sub_100099368();
        v15 = (v11 ^ v14) | v13 ? 1 : v12;
        v16 = sub_1000BA294(&qword_100BCB210);
        v17 = (_QWORD *)sub_1000D15D8(v16, 32 * v15);
        v18 = (uint64_t)(j__malloc_size(v17) - 32) / 32;
        v17[2] = v15;
        v17[3] = 2 * v18;
        v19 = v17 + 4;
        v20 = v2[3] >> 1;
        v5 = &v17[4 * v20 + 4];
        v3 = (v18 & 0x7FFFFFFFFFFFFFFFLL) - v20;
        if (v2[2])
        {
          if (v17 != v2 || v19 >= &v2[4 * v20 + 4])
            memmove(v19, v2 + 4, 32 * v20);
          sub_1000878DC();
          sub_100099360();
          v2[2] = 0;
        }
        else
        {
          sub_1000878DC();
          sub_100099360();
        }
        swift_release();
        v2 = v17;
      }
      v14 = __OFSUB__(v3--, 1);
      if (v14)
        break;
      v7 += 3;
      *v5 = v4;
      v5[1] = v9;
      v5[2] = v8;
      v5[3] = v10;
      v5 += 4;
      if (v1 == ++v4)
      {
        swift_bridgeObjectRelease();
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v3 = 0;
LABEL_23:
  v22 = v2[3];
  if (v22 >= 2)
  {
    v23 = v22 >> 1;
    v14 = __OFSUB__(v23, v3);
    v24 = v23 - v3;
    if (v14)
    {
LABEL_29:
      __break(1u);
      return;
    }
    v2[2] = v24;
  }
}

void sub_100203EC4(uint64_t a1)
{
  sub_100203EE0(a1, &qword_100BCB218, type metadata accessor for SearchLocation, &qword_100BCB220);
}

void sub_100203EE0(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t (*v22)(_QWORD);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  int64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(_QWORD);
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v54 = a4;
  v55 = a2;
  v60 = sub_1000BA294(a2);
  __chkstk_darwin(v60);
  sub_1000986FC();
  v59 = v6;
  sub_10009D2A4();
  __chkstk_darwin(v7);
  sub_1000860D0();
  v58 = v8;
  sub_10009D2A4();
  __chkstk_darwin(v9);
  v11 = (char *)&v50 - v10;
  v61 = v12;
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(a1 + 16);
  sub_100099360();
  v15 = _swiftEmptyArrayStorage;
  v57 = v14;
  v50 = a1;
  if (v14)
  {
    v53 = (v13 + 32) & ~v13;
    v16 = (char *)_swiftEmptyArrayStorage + v53;
    v17 = 0;
    v18 = 0;
    v19 = *(_QWORD *)(a3(0) - 8);
    v20 = a1 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    v56 = *(_QWORD *)(v19 + 72);
    v51 = a3;
    v52 = v13 | 7;
    v21 = _swiftEmptyArrayStorage;
    v22 = a3;
    while (1)
    {
      v23 = v11;
      v24 = v60;
      v25 = v59 + *(int *)(v60 + 48);
      sub_100078058(v20, v25, v22);
      v26 = *(int *)(v24 + 48);
      v11 = v23;
      v27 = (uint64_t)v58;
      v28 = (uint64_t)v58 + v26;
      *v58 = v17;
      sub_10007C75C(v25, v28, v22);
      sub_1000C1D08(v27, (uint64_t)v11);
      if (v18)
      {
        v15 = v21;
      }
      else
      {
        sub_10011018C();
        if (v29)
          goto LABEL_34;
        sub_100099368();
        if (v29 ^ v31 | v38)
          v32 = 1;
        else
          v32 = v30;
        v33 = sub_1000BA294(v54);
        v34 = *(_QWORD *)(v61 + 72);
        v35 = v53;
        v15 = (_QWORD *)swift_allocObject(v33, v53 + v34 * v32, v52);
        v36 = j__malloc_size(v15);
        if (!v34)
          goto LABEL_35;
        v37 = v36 - v35;
        v38 = v36 - v35 == 0x8000000000000000 && v34 == -1;
        if (v38)
          goto LABEL_36;
        v39 = v35;
        v40 = v37 / v34;
        v15[2] = v32;
        v15[3] = 2 * (v37 / v34);
        v41 = (char *)v15 + v39;
        v42 = v21[3];
        v43 = v42 >> 1;
        v44 = (v42 >> 1) * v34;
        if (v21[2])
        {
          v45 = (char *)v21 + v39;
          if (v15 < v21 || v41 >= (char *)v21 + v39 + v44)
          {
            swift_arrayInitWithTakeFrontToBack((char *)v15 + v39, v45, v43, v60);
          }
          else if (v15 != v21)
          {
            swift_arrayInitWithTakeBackToFront((char *)v15 + v39, v45, v43, v60);
          }
          v21[2] = 0;
        }
        v16 = &v41[v44];
        v18 = (v40 & 0x7FFFFFFFFFFFFFFFLL) - (v42 >> 1);
        swift_release(v21);
        v22 = v51;
      }
      v31 = __OFSUB__(v18--, 1);
      if (v31)
        break;
      ++v17;
      sub_1000C1D08((uint64_t)v11, (uint64_t)v16);
      v16 += *(_QWORD *)(v61 + 72);
      v20 += v56;
      v21 = v15;
      if (v57 == v17)
        goto LABEL_29;
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v18 = 0;
LABEL_29:
  swift_bridgeObjectRelease(v50);
  v47 = v15[3];
  if (v47 < 2)
  {
LABEL_32:
    sub_100098640();
    return;
  }
  v48 = v47 >> 1;
  v31 = __OFSUB__(v48, v18);
  v49 = v48 - v18;
  if (!v31)
  {
    v15[2] = v49;
    goto LABEL_32;
  }
LABEL_37:
  __break(1u);
}

void sub_100204190(unint64_t *a1)
{
  uint64_t v2;

  if (!*a1)
  {
    v2 = sub_100075EB0(&qword_100BCB108);
    atomic_store(sub_10003BC38(v2), a1);
  }
  sub_10004A298();
}

uint64_t sub_1002041C8(uint64_t a1)
{
  uint64_t v1;

  return sub_1002027C0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (void (*)(void))&DayWeather.date.getter) & 1;
}

uint64_t sub_1002041EC(double a1, double a2, double a3)
{
  uint64_t result;
  char v4;
  uint64_t v5;
  double v6;
  _BOOL4 v7;
  BOOL v8;

  result = 0;
  v4 = 0;
  v5 = 0;
  v6 = a1;
  while (1)
  {
    v7 = v6 <= a2;
    if (a3 > 0.0)
      v7 = v6 >= a2;
    if (v7)
    {
      if ((v6 != a2) | v4 & 1)
        return result;
      v4 = 1;
      goto LABEL_9;
    }
    v8 = __OFADD__(v5++, 1);
    if (v8)
      break;
    v6 = a1 + (double)v5 * a3;
LABEL_9:
    v8 = __OFADD__(result++, 1);
    if (v8)
    {
      __break(1u);
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t destroy for PrecipitationAveragesHeroChartViewModelFactory(_QWORD *a1)
{
  _QWORD *v1;

  v1 = a1 + 2;
  swift_unknownObjectRelease(*a1);
  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v1);
}

uint64_t initializeWithCopy for PrecipitationAveragesHeroChartViewModelFactory(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  void (*v9)(uint64_t, __int128 *, uint64_t);

  v4 = *a2;
  *(_OWORD *)a1 = *a2;
  v5 = a1 + 16;
  v6 = a2 + 1;
  v7 = *(__int128 *)((char *)a2 + 40);
  *(_OWORD *)(a1 + 40) = v7;
  v8 = v7;
  v9 = **(void (***)(uint64_t, __int128 *, uint64_t))(v7 - 8);
  swift_unknownObjectRetain(v4);
  v9(v5, v6, v8);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  return a1;
}

uint64_t *assignWithCopy for PrecipitationAveragesHeroChartViewModelFactory(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v5 = a2[1];
  v6 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v6);
  a1[1] = v5;
  sub_100094D04(a1 + 2, a2 + 2);
  a1[7] = a2[7];
  return a1;
}

uint64_t *assignWithTake for PrecipitationAveragesHeroChartViewModelFactory(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = *a1;
  *a1 = *a2;
  swift_unknownObjectRelease(v5);
  a1[1] = v4;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1 + 2);
  v6 = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)a1 + 2) = v6;
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  return a1;
}

uint64_t getEnumTagSinglePayload for PrecipitationAveragesHeroChartViewModelFactory(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PrecipitationAveragesHeroChartViewModelFactory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PrecipitationAveragesHeroChartViewModelFactory()
{
  return &type metadata for PrecipitationAveragesHeroChartViewModelFactory;
}

uint64_t *sub_10020444C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    v8 = type metadata accessor for DetailChartDataElement(0);
    v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    v9(a1, a2, v8);
    if (EnumCaseMultiPayload == 1)
    {
      v10 = a1;
      v11 = a3;
      v12 = 1;
    }
    else
    {
      v14 = sub_1000BA294(&qword_100BCB0E8);
      v9((uint64_t *)((char *)a1 + *(int *)(v14 + 48)), (uint64_t *)((char *)a2 + *(int *)(v14 + 48)), v8);
      v10 = a1;
      v11 = a3;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_10020452C(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1);
  v3 = type metadata accessor for DetailChartDataElement(0);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  result = v6(a1, v3);
  if (EnumCaseMultiPayload != 1)
  {
    v5 = a1 + *(int *)(sub_1000BA294(&qword_100BCB0E8) + 48);
    return v6(v5, v3);
  }
  return result;
}

uint64_t sub_1002045BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
  v7 = type metadata accessor for DetailChartDataElement(0);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  v8(a1, a2, v7);
  if (EnumCaseMultiPayload == 1)
  {
    v9 = 1;
  }
  else
  {
    v10 = sub_1000BA294(&qword_100BCB0E8);
    v8(a1 + *(int *)(v10 + 48), a2 + *(int *)(v10 + 48), v7);
    v9 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, a3, v9);
  return a1;
}

uint64_t sub_100204668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_1000215BC(a1, type metadata accessor for ClosestData);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    v7 = type metadata accessor for DetailChartDataElement(0);
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    if (EnumCaseMultiPayload == 1)
    {
      v9 = 1;
    }
    else
    {
      v10 = sub_1000BA294(&qword_100BCB0E8);
      v8(a1 + *(int *)(v10 + 48), a2 + *(int *)(v10 + 48), v7);
      v9 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, a3, v9);
  }
  return a1;
}

uint64_t sub_10020472C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
  v7 = type metadata accessor for DetailChartDataElement(0);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
  v8(a1, a2, v7);
  if (EnumCaseMultiPayload == 1)
  {
    v9 = 1;
  }
  else
  {
    v10 = sub_1000BA294(&qword_100BCB0E8);
    v8(a1 + *(int *)(v10 + 48), a2 + *(int *)(v10 + 48), v7);
    v9 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, a3, v9);
  return a1;
}

uint64_t sub_1002047D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_1000215BC(a1, type metadata accessor for ClosestData);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    v7 = type metadata accessor for DetailChartDataElement(0);
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
    v8(a1, a2, v7);
    if (EnumCaseMultiPayload == 1)
    {
      v9 = 1;
    }
    else
    {
      v10 = sub_1000BA294(&qword_100BCB0E8);
      v8(a1 + *(int *)(v10 + 48), a2 + *(int *)(v10 + 48), v7);
      v9 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, a3, v9);
  }
  return a1;
}

uint64_t sub_10020489C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  _BYTE v5[32];
  _QWORD v6[2];

  result = type metadata accessor for DetailChartDataElement(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout2(v5, v4, v4);
    v6[0] = v5;
    v6[1] = v4;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v6);
    return 0;
  }
  return result;
}

uint64_t sub_10020491C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ScrubberHour(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

double destroy for WindComponentRowViewModel(uint64_t a1)
{
  double result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24)).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for NotificationSettingsLocationViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for NotificationSettingsLocationViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  return a1;
}

__n128 initializeWithTake for NotificationSettingsLocationViewModel(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for NotificationSettingsLocationViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  return a1;
}

uint64_t getEnumTagSinglePayload for NotificationSettingsLocationViewModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 36))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NotificationSettingsLocationViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 36) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 36) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NotificationSettingsLocationRowView()
{
  return &type metadata for NotificationSettingsLocationRowView;
}

uint64_t sub_100204B64(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AACA54, 1);
}

__n128 sub_100204B74@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  __n128 v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  uint64_t v16;

  v4 = static HorizontalAlignment.leading.getter(a1);
  sub_100204BEC(v2, (uint64_t)&v11);
  v5 = v12;
  v6 = v13;
  v7 = v15;
  v8 = v16;
  result = v11;
  v10 = v14;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(__n128 *)(a2 + 24) = result;
  *(_BYTE *)(a2 + 40) = v5;
  *(_QWORD *)(a2 + 48) = v6;
  *(_OWORD *)(a2 + 56) = v10;
  *(_BYTE *)(a2 + 72) = v7;
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

double sub_100204BEC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  double result;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD v51[3];
  int v52;

  v3 = *(_OWORD *)(a1 + 16);
  v51[1] = *(_OWORD *)a1;
  v51[2] = v3;
  v52 = *(_DWORD *)(a1 + 32);
  v4 = *((_QWORD *)&v3 + 1);
  v51[0] = v3;
  v5 = sub_100114EF8();
  swift_bridgeObjectRetain(v4);
  v6 = Text.init<A>(_:)(v51, &type metadata for String, v5);
  v8 = v7;
  v10 = v9;
  v12 = v11 & 1;
  v13 = static Font.body.getter(v6);
  v14 = Text.font(_:)(v13, v6, v8, v12, v10);
  v48 = v15;
  v49 = v14;
  v17 = v16;
  v50 = v18;
  swift_release(v13);
  v47 = v17 & 1;
  sub_1000D31B4(v6, v8, v12);
  swift_bridgeObjectRelease();
  v19 = sub_100845B0C();
  v20 = sub_100204E48((uint64_t)v19);
  v22 = v21;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v51[0] = v20;
  *((_QWORD *)&v51[0] + 1) = v22;
  v23 = Text.init<A>(_:)(v51, &type metadata for String, v5);
  v25 = v24;
  v27 = v26;
  v29 = v28 & 1;
  v30 = static Font.footnote.getter(v23);
  v31 = Text.font(_:)(v30, v23, v25, v29, v27);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  swift_release(v30);
  v38 = v35 & 1;
  sub_1000D31B4(v23, v25, v29);
  v39 = swift_bridgeObjectRelease();
  LODWORD(v51[0]) = static HierarchicalShapeStyle.secondary.getter(v39);
  v40 = Text.foregroundStyle<A>(_:)(v51, v31, v33, v38, v37, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v42 = v41;
  v44 = v43;
  LOBYTE(v29) = v45 & 1;
  sub_1000D31B4(v31, v33, v38);
  swift_bridgeObjectRelease();
  LOBYTE(v51[0]) = v47;
  *(_QWORD *)a2 = v49;
  *(_QWORD *)(a2 + 8) = v48;
  *(_BYTE *)(a2 + 16) = v47;
  *(_QWORD *)(a2 + 24) = v50;
  *(_QWORD *)(a2 + 32) = v40;
  *(_QWORD *)(a2 + 40) = v42;
  *(_BYTE *)(a2 + 48) = v29;
  *(_QWORD *)(a2 + 56) = v44;
  sub_1000D55D4(v49, v48, v47);
  swift_bridgeObjectRetain(v50);
  sub_1000D55D4(v40, v42, v29);
  swift_bridgeObjectRetain(v44);
  sub_1000D31B4(v40, v42, v29);
  swift_bridgeObjectRelease();
  sub_1000D31B4(v49, v48, v51[0]);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_100204E48(uint64_t a1)
{
  id v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t countAndFlagsBits;
  uint64_t v6;
  uint64_t v7;
  Swift::String v9;

  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v9._object = (void *)0x80000001009F3C90;
  v3._countAndFlagsBits = 6710863;
  v3._object = (void *)0xE300000000000000;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v9._countAndFlagsBits = 0xD000000000000043;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v9)._countAndFlagsBits;

  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    v6 = sub_1000BA294(&qword_100BF1280);
    v7 = sub_10005F124((unint64_t *)&qword_100BD35B0, &qword_100BF1280, (uint64_t)&protocol conformance descriptor for [A]);
    return BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v6, v7);
  }
  return countAndFlagsBits;
}

double sub_100204F4C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_100204B74(a1, a2).n128_u64[0];
  return result;
}

uint64_t sub_100204F84()
{
  return sub_10005F124(&qword_100BCB228, &qword_100BCB230, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

uint64_t *sub_100204FB0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  __n128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  int *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  char *v78;
  char *v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  void (*v87)(char *, char *, uint64_t);
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t);
  uint64_t v90;
  void (*v91)(char *, char *);
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t);
  void (*v94)(char *, char *);

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = (int *)type metadata accessor for TemperatureAveragesHeroChartInput(0);
    v9 = v8[5];
    v10 = (char *)v7 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for TimeZone(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v14 = swift_bridgeObjectRetain(v4);
    v89 = v13;
    v90 = v12;
    ((void (*)(char *, char *, uint64_t, __n128))v13)(v10, v11, v12, v14);
    v15 = v8[6];
    v16 = (char *)v7 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for Locale(0);
    v91 = *(void (**)(char *, char *))(*(_QWORD *)(v18 - 8) + 16);
    v92 = v18;
    v91(v16, v17);
    v19 = v8[7];
    v20 = *(uint64_t *)((char *)a2 + v19);
    *(uint64_t *)((char *)v7 + v19) = v20;
    v21 = v8[8];
    v22 = (uint64_t *)((char *)v7 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    v24 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
    swift_bridgeObjectRetain(v20);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v23, 1, (uint64_t)v24))
    {
      v25 = sub_1000BA294(&qword_100BCB0D0);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      *v22 = *v23;
      v26 = v24[5];
      v27 = (char *)v22 + v26;
      v28 = (char *)v23 + v26;
      v29 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
      *(_QWORD *)((char *)v22 + v24[6]) = *(_QWORD *)((char *)v23 + v24[6]);
      *(_QWORD *)((char *)v22 + v24[7]) = *(_QWORD *)((char *)v23 + v24[7]);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v22, 0, 1, (uint64_t)v24);
    }
    v30 = v8[9];
    v31 = (char *)v7 + v30;
    v32 = (char *)a2 + v30;
    v33 = type metadata accessor for Date(0);
    v34 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16);
    v34(v31, v32, v33);
    v34((char *)v7 + v8[10], (char *)a2 + v8[10], v33);
    v35 = v8[11];
    v36 = (char *)v7 + v35;
    v37 = (char *)a2 + v35;
    v38 = sub_1000BA294(&qword_100BCB238);
    v87 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16);
    v87(v36, v37, v38);
    v39 = a3[5];
    v40 = (char *)v7 + v39;
    v41 = (char *)a2 + v39;
    v88 = type metadata accessor for Calendar(0);
    v94 = *(void (**)(char *, char *))(*(_QWORD *)(v88 - 8) + 16);
    v94(v40, v41);
    v42 = (int *)type metadata accessor for MonthlyAveragesChartInput(0);
    v93 = v34;
    v34(&v40[v42[5]], &v41[v42[5]], v33);
    v43 = v42[6];
    v44 = &v40[v43];
    v45 = &v41[v43];
    v46 = type metadata accessor for TemperatureScaleConfiguration(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
    v47 = v42[7];
    v48 = &v40[v47];
    v49 = &v41[v47];
    v50 = sub_1000BA294(&qword_100BC4E70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
    v51 = v42[8];
    v52 = &v40[v51];
    v53 = &v41[v51];
    v54 = sub_1000BA294(&qword_100BCB240);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v53, v54);
    ((void (*)(char *, char *, uint64_t))v91)(&v40[v42[9]], &v41[v42[9]], v92);
    v55 = a3[6];
    v56 = a3[7];
    v57 = *(uint64_t *)((char *)a2 + v55);
    *(uint64_t *)((char *)v7 + v55) = v57;
    v58 = (uint64_t *)((char *)v7 + v56);
    v59 = (uint64_t *)((char *)a2 + v56);
    v60 = type metadata accessor for NewsDataModel(0);
    swift_bridgeObjectRetain(v57);
    if (swift_getEnumCaseMultiPayload(v59) == 1)
    {
      v61 = *v59;
      *v58 = *v59;
      swift_bridgeObjectRetain(v61);
      v62 = 1;
    }
    else
    {
      v63 = type metadata accessor for News(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v58, v59, v63);
      v62 = 0;
    }
    swift_storeEnumTagMultiPayload(v58, v60, v62);
    v64 = a3[8];
    v65 = (char *)v7 + v64;
    v66 = (char *)a2 + v64;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2 + v64, 1, v38))
    {
      v67 = sub_1000BA294(&qword_100BCB248);
      memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    }
    else
    {
      v87(v65, v66, v38);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v65, 0, 1, v38);
    }
    v89((char *)v7 + a3[9], (char *)a2 + a3[9], v90);
    v93((char *)v7 + a3[10], (char *)a2 + a3[10], v33);
    v68 = a3[11];
    v69 = a3[12];
    v70 = (uint64_t *)((char *)v7 + v68);
    v71 = (char *)a2 + v68;
    v72 = *(void **)v71;
    v73 = (void *)*((_QWORD *)v71 + 1);
    *v70 = *(_QWORD *)v71;
    v70[1] = v73;
    v74 = (void *)*((_QWORD *)v71 + 2);
    v75 = (void *)*((_QWORD *)v71 + 3);
    v70[2] = v74;
    v70[3] = v75;
    v76 = (void *)*((_QWORD *)v71 + 4);
    v77 = (void *)*((_QWORD *)v71 + 5);
    v70[4] = v76;
    v70[5] = v77;
    v78 = (char *)v7 + v69;
    v79 = (char *)a2 + v69;
    v80 = v72;
    v81 = v73;
    v82 = v74;
    v83 = v75;
    v84 = v76;
    v85 = v77;
    ((void (*)(char *, char *, uint64_t))v94)(v78, v79, v88);
  }
  return v7;
}

uint64_t sub_100205458(uint64_t a1, int *a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id *v30;
  void (*v32)(uint64_t, uint64_t);
  void (*v33)(uint64_t);
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = (int *)type metadata accessor for TemperatureAveragesHeroChartInput(0);
  v5 = a1 + v4[5];
  v6 = type metadata accessor for TimeZone(0);
  v33 = *(void (**)(uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v34 = v6;
  v33(v5);
  v7 = a1 + v4[6];
  v8 = type metadata accessor for Locale(0);
  v35 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v35(v7, v8);
  swift_bridgeObjectRelease();
  v9 = a1 + v4[8];
  v10 = type metadata accessor for DetailHeroChartLollipopPosition(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v9, 1, v10))
  {
    v11 = v9 + *(int *)(v10 + 20);
    v12 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  }
  v13 = a1 + v4[9];
  v14 = type metadata accessor for Date(0);
  v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
  v15(v13, v14);
  v15(a1 + v4[10], v14);
  v16 = a1 + v4[11];
  v17 = sub_1000BA294(&qword_100BCB238);
  v32 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
  v32(v16, v17);
  v18 = a1 + a2[5];
  v19 = type metadata accessor for Calendar(0);
  v36 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8);
  v36(v18, v19);
  v20 = (int *)type metadata accessor for MonthlyAveragesChartInput(0);
  v15(v18 + v20[5], v14);
  v21 = v18 + v20[6];
  v22 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  v23 = v18 + v20[7];
  v24 = sub_1000BA294(&qword_100BC4E70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  v25 = v18 + v20[8];
  v26 = sub_1000BA294(&qword_100BCB240);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
  v35(v18 + v20[9], v8);
  swift_bridgeObjectRelease();
  v27 = a1 + a2[7];
  type metadata accessor for NewsDataModel(0);
  if (swift_getEnumCaseMultiPayload(v27) == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v28 = type metadata accessor for News(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
  }
  v29 = a1 + a2[8];
  if (!_s7Weather24LocationCompositionStateOwet_0(v29, 1, v17))
    v32(v29, v17);
  ((void (*)(uint64_t, uint64_t))v33)(a1 + a2[9], v34);
  v15(a1 + a2[10], v14);
  v30 = (id *)(a1 + a2[11]);

  return ((uint64_t (*)(uint64_t, uint64_t))v36)(a1 + a2[12], v19);
}

char *sub_100205788(char *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  __n128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  char *v77;
  char *v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  void (*v86)(char *, char *, uint64_t);
  uint64_t v87;
  void (*v88)(char *, char *, uint64_t);
  uint64_t v89;
  void (*v90)(char *, char *);
  uint64_t v91;
  void (*v92)(char *, char *, uint64_t);
  void (*v93)(char *, char *);

  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  v7 = (int *)type metadata accessor for TemperatureAveragesHeroChartInput(0);
  v8 = v7[5];
  v9 = &a1[v8];
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for TimeZone(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v13 = swift_bridgeObjectRetain(v6);
  v88 = v12;
  v89 = v11;
  ((void (*)(char *, char *, uint64_t, __n128))v12)(v9, v10, v11, v13);
  v14 = v7[6];
  v15 = &a1[v14];
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for Locale(0);
  v90 = *(void (**)(char *, char *))(*(_QWORD *)(v17 - 8) + 16);
  v91 = v17;
  v90(v15, v16);
  v18 = v7[7];
  v19 = *(uint64_t *)((char *)a2 + v18);
  *(_QWORD *)&a1[v18] = v19;
  v20 = v7[8];
  v21 = &a1[v20];
  v22 = (uint64_t *)((char *)a2 + v20);
  v23 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
  swift_bridgeObjectRetain(v19);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v22, 1, (uint64_t)v23))
  {
    v24 = sub_1000BA294(&qword_100BCB0D0);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v21 = *v22;
    v25 = v23[5];
    v26 = &v21[v25];
    v27 = (char *)v22 + v25;
    v28 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
    *(_QWORD *)&v21[v23[6]] = *(_QWORD *)((char *)v22 + v23[6]);
    *(_QWORD *)&v21[v23[7]] = *(_QWORD *)((char *)v22 + v23[7]);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v21, 0, 1, (uint64_t)v23);
  }
  v29 = v7[9];
  v30 = &a1[v29];
  v31 = (char *)a2 + v29;
  v32 = type metadata accessor for Date(0);
  v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16);
  v33(v30, v31, v32);
  v33(&a1[v7[10]], (char *)a2 + v7[10], v32);
  v34 = v7[11];
  v35 = &a1[v34];
  v36 = (char *)a2 + v34;
  v37 = sub_1000BA294(&qword_100BCB238);
  v86 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
  v86(v35, v36, v37);
  v38 = a3[5];
  v39 = &a1[v38];
  v40 = (char *)a2 + v38;
  v87 = type metadata accessor for Calendar(0);
  v93 = *(void (**)(char *, char *))(*(_QWORD *)(v87 - 8) + 16);
  v93(v39, v40);
  v41 = (int *)type metadata accessor for MonthlyAveragesChartInput(0);
  v92 = v33;
  v33(&v39[v41[5]], &v40[v41[5]], v32);
  v42 = v41[6];
  v43 = &v39[v42];
  v44 = &v40[v42];
  v45 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v43, v44, v45);
  v46 = v41[7];
  v47 = &v39[v46];
  v48 = &v40[v46];
  v49 = sub_1000BA294(&qword_100BC4E70);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v47, v48, v49);
  v50 = v41[8];
  v51 = &v39[v50];
  v52 = &v40[v50];
  v53 = sub_1000BA294(&qword_100BCB240);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v51, v52, v53);
  ((void (*)(char *, char *, uint64_t))v90)(&v39[v41[9]], &v40[v41[9]], v91);
  v54 = a3[6];
  v55 = a3[7];
  v56 = *(uint64_t *)((char *)a2 + v54);
  *(_QWORD *)&a1[v54] = v56;
  v57 = (uint64_t *)&a1[v55];
  v58 = (uint64_t *)((char *)a2 + v55);
  v59 = type metadata accessor for NewsDataModel(0);
  swift_bridgeObjectRetain(v56);
  if (swift_getEnumCaseMultiPayload(v58) == 1)
  {
    v60 = *v58;
    *v57 = *v58;
    swift_bridgeObjectRetain(v60);
    v61 = 1;
  }
  else
  {
    v62 = type metadata accessor for News(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v57, v58, v62);
    v61 = 0;
  }
  swift_storeEnumTagMultiPayload(v57, v59, v61);
  v63 = a3[8];
  v64 = &a1[v63];
  v65 = (char *)a2 + v63;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2 + v63, 1, v37))
  {
    v66 = sub_1000BA294(&qword_100BCB248);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  else
  {
    v86(v64, v65, v37);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v64, 0, 1, v37);
  }
  v88(&a1[a3[9]], (char *)a2 + a3[9], v89);
  v92(&a1[a3[10]], (char *)a2 + a3[10], v32);
  v67 = a3[11];
  v68 = a3[12];
  v69 = &a1[v67];
  v70 = (char *)a2 + v67;
  v71 = *(void **)v70;
  v72 = (void *)*((_QWORD *)v70 + 1);
  *(_QWORD *)v69 = *(_QWORD *)v70;
  *((_QWORD *)v69 + 1) = v72;
  v73 = (void *)*((_QWORD *)v70 + 2);
  v74 = (void *)*((_QWORD *)v70 + 3);
  *((_QWORD *)v69 + 2) = v73;
  *((_QWORD *)v69 + 3) = v74;
  v75 = (void *)*((_QWORD *)v70 + 4);
  v76 = (void *)*((_QWORD *)v70 + 5);
  *((_QWORD *)v69 + 4) = v75;
  *((_QWORD *)v69 + 5) = v76;
  v77 = &a1[v68];
  v78 = (char *)a2 + v68;
  v79 = v71;
  v80 = v72;
  v81 = v73;
  v82 = v74;
  v83 = v75;
  v84 = v76;
  ((void (*)(char *, char *, uint64_t))v93)(v77, v78, v87);
  return a1;
}

char *sub_100205C08(char *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  int *v21;
  int v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  void *v75;
  void *v76;
  id v77;
  void *v78;
  void *v79;
  id v80;
  void *v81;
  void *v82;
  id v83;
  void *v84;
  void *v85;
  id v86;
  void *v87;
  void *v88;
  id v89;
  void *v90;
  void *v91;
  id v92;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  void (*v98)(char *, char *, uint64_t);
  uint64_t v99;
  void (*v100)(char *, char *);
  uint64_t v101;
  void (*v102)(char *, char *, uint64_t);
  void (*v103)(char *, char *);
  uint64_t v104;
  void (*v105)(char *, char *);
  uint64_t v106;

  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  v7 = (int *)type metadata accessor for TemperatureAveragesHeroChartInput(0);
  v8 = v7[5];
  v9 = &a1[v8];
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for TimeZone(0);
  v105 = *(void (**)(char *, char *))(*(_QWORD *)(v11 - 8) + 24);
  v106 = v11;
  v105(v9, v10);
  v12 = v7[6];
  v13 = &a1[v12];
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Locale(0);
  v100 = *(void (**)(char *, char *))(*(_QWORD *)(v15 - 8) + 24);
  v101 = v15;
  v100(v13, v14);
  v16 = v7[7];
  v17 = *(uint64_t *)((char *)a2 + v16);
  *(_QWORD *)&a1[v16] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease();
  v18 = v7[8];
  v19 = &a1[v18];
  v20 = (uint64_t *)((char *)a2 + v18);
  v21 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
  LODWORD(v13) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v19, 1, (uint64_t)v21);
  v22 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v20, 1, (uint64_t)v21);
  if ((_DWORD)v13)
  {
    if (!v22)
    {
      *(_QWORD *)v19 = *v20;
      v23 = v21[5];
      v24 = &v19[v23];
      v25 = (char *)v20 + v23;
      v26 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
      *(_QWORD *)&v19[v21[6]] = *(_QWORD *)((char *)v20 + v21[6]);
      *(_QWORD *)&v19[v21[7]] = *(_QWORD *)((char *)v20 + v21[7]);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v19, 0, 1, (uint64_t)v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    sub_1000215BC((uint64_t)v19, type metadata accessor for DetailHeroChartLollipopPosition);
LABEL_6:
    v27 = sub_1000BA294(&qword_100BCB0D0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v19 = *v20;
  v94 = v21[5];
  v95 = &v19[v94];
  v96 = (char *)v20 + v94;
  v97 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 24))(v95, v96, v97);
  *(_QWORD *)&v19[v21[6]] = *(_QWORD *)((char *)v20 + v21[6]);
  *(_QWORD *)&v19[v21[7]] = *(_QWORD *)((char *)v20 + v21[7]);
LABEL_7:
  v28 = v7[9];
  v29 = &a1[v28];
  v30 = (char *)a2 + v28;
  v31 = type metadata accessor for Date(0);
  v32 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 24);
  v32(v29, v30, v31);
  v32(&a1[v7[10]], (char *)a2 + v7[10], v31);
  v33 = v7[11];
  v34 = &a1[v33];
  v35 = (char *)a2 + v33;
  v36 = sub_1000BA294(&qword_100BCB238);
  v99 = *(_QWORD *)(v36 - 8);
  v98 = *(void (**)(char *, char *, uint64_t))(v99 + 24);
  v98(v34, v35, v36);
  v37 = a3[5];
  v38 = &a1[v37];
  v39 = (char *)a2 + v37;
  v40 = type metadata accessor for Calendar(0);
  v103 = *(void (**)(char *, char *))(*(_QWORD *)(v40 - 8) + 24);
  v104 = v40;
  v103(v38, v39);
  v41 = (int *)type metadata accessor for MonthlyAveragesChartInput(0);
  v102 = v32;
  v32(&v38[v41[5]], &v39[v41[5]], v31);
  v42 = v41[6];
  v43 = &v38[v42];
  v44 = &v39[v42];
  v45 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 24))(v43, v44, v45);
  v46 = v41[7];
  v47 = &v38[v46];
  v48 = &v39[v46];
  v49 = sub_1000BA294(&qword_100BC4E70);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 24))(v47, v48, v49);
  v50 = v41[8];
  v51 = &v38[v50];
  v52 = &v39[v50];
  v53 = sub_1000BA294(&qword_100BCB240);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 24))(v51, v52, v53);
  v54 = v41[9];
  v55 = &v39[v54];
  v56 = a3;
  ((void (*)(char *, char *, uint64_t))v100)(&v38[v54], v55, v101);
  v57 = a3[6];
  v58 = *(uint64_t *)((char *)a2 + v57);
  *(_QWORD *)&a1[v57] = v58;
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRelease();
  if (a1 != (char *)a2)
  {
    v59 = a3[7];
    v60 = (uint64_t *)&a1[v59];
    v61 = (uint64_t *)((char *)a2 + v59);
    sub_1000215BC((uint64_t)&a1[v59], type metadata accessor for NewsDataModel);
    v62 = type metadata accessor for NewsDataModel(0);
    if (swift_getEnumCaseMultiPayload(v61) == 1)
    {
      v63 = *v61;
      *v60 = *v61;
      swift_bridgeObjectRetain(v63);
      v64 = 1;
    }
    else
    {
      v65 = type metadata accessor for News(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v60, v61, v65);
      v64 = 0;
    }
    swift_storeEnumTagMultiPayload(v60, v62, v64);
  }
  v66 = a3[8];
  v67 = &a1[v66];
  v68 = (char *)a2 + v66;
  v69 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)&a1[v66], 1, v36);
  v70 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v68, 1, v36);
  if (!v69)
  {
    if (!v70)
    {
      v98(v67, v68, v36);
      goto LABEL_18;
    }
    (*(void (**)(char *, uint64_t))(v99 + 8))(v67, v36);
    goto LABEL_17;
  }
  if (v70)
  {
LABEL_17:
    v71 = sub_1000BA294(&qword_100BCB248);
    memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v67, v68, v36);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v67, 0, 1, v36);
LABEL_18:
  ((void (*)(char *, char *, uint64_t))v105)(&a1[a3[9]], (char *)a2 + a3[9], v106);
  v102(&a1[a3[10]], (char *)a2 + a3[10], v31);
  v72 = a3[11];
  v73 = &a1[v72];
  v74 = (uint64_t *)((char *)a2 + v72);
  v75 = *(void **)&a1[v72];
  v76 = *(void **)((char *)a2 + v72);
  *(_QWORD *)v73 = v76;
  v77 = v76;

  v78 = (void *)*((_QWORD *)v73 + 1);
  v79 = (void *)v74[1];
  *((_QWORD *)v73 + 1) = v79;
  v80 = v79;

  v81 = (void *)*((_QWORD *)v73 + 2);
  v82 = (void *)v74[2];
  *((_QWORD *)v73 + 2) = v82;
  v83 = v82;

  v84 = (void *)*((_QWORD *)v73 + 3);
  v85 = (void *)v74[3];
  *((_QWORD *)v73 + 3) = v85;
  v86 = v85;

  v87 = (void *)*((_QWORD *)v73 + 4);
  v88 = (void *)v74[4];
  *((_QWORD *)v73 + 4) = v88;
  v89 = v88;

  v90 = (void *)*((_QWORD *)v73 + 5);
  v91 = (void *)v74[5];
  *((_QWORD *)v73 + 5) = v91;
  v92 = v91;

  ((void (*)(char *, char *, uint64_t))v103)(&a1[v56[12]], (char *)a2 + v56[12], v104);
  return a1;
}

char *sub_1002061BC(char *a1, char *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  __int128 v63;
  void (*v65)(char *, char *, uint64_t);
  void (*v66)(char *, char *);
  uint64_t v67;
  void (*v68)(char *, char *);
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  void (*v71)(char *, char *);
  uint64_t v72;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = (int *)type metadata accessor for TemperatureAveragesHeroChartInput(0);
  v7 = v6[5];
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for TimeZone(0);
  v71 = *(void (**)(char *, char *))(*(_QWORD *)(v10 - 8) + 32);
  v72 = v10;
  v71(v8, v9);
  v11 = v6[6];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = type metadata accessor for Locale(0);
  v66 = *(void (**)(char *, char *))(*(_QWORD *)(v14 - 8) + 32);
  v67 = v14;
  v66(v12, v13);
  *(_QWORD *)&a1[v6[7]] = *(_QWORD *)&a2[v6[7]];
  v15 = v6[8];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v17, 1, (uint64_t)v18))
  {
    v19 = sub_1000BA294(&qword_100BCB0D0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v20 = v18[5];
    v21 = &v16[v20];
    v22 = &v17[v20];
    v23 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
    *(_QWORD *)&v16[v18[6]] = *(_QWORD *)&v17[v18[6]];
    *(_QWORD *)&v16[v18[7]] = *(_QWORD *)&v17[v18[7]];
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v16, 0, 1, (uint64_t)v18);
  }
  v24 = v6[9];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = type metadata accessor for Date(0);
  v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32);
  v28(v25, v26, v27);
  v28(&a1[v6[10]], &a2[v6[10]], v27);
  v29 = v6[11];
  v30 = &a1[v29];
  v31 = &a2[v29];
  v32 = sub_1000BA294(&qword_100BCB238);
  v65 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32);
  v65(v30, v31, v32);
  v33 = a3[5];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v36 = type metadata accessor for Calendar(0);
  v68 = *(void (**)(char *, char *))(*(_QWORD *)(v36 - 8) + 32);
  v69 = v36;
  v68(v34, v35);
  v37 = (int *)type metadata accessor for MonthlyAveragesChartInput(0);
  v70 = v28;
  v28(&v34[v37[5]], &v35[v37[5]], v27);
  v38 = v37[6];
  v39 = &v34[v38];
  v40 = &v35[v38];
  v41 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v39, v40, v41);
  v42 = v37[7];
  v43 = &v34[v42];
  v44 = &v35[v42];
  v45 = sub_1000BA294(&qword_100BC4E70);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v43, v44, v45);
  v46 = v37[8];
  v47 = &v34[v46];
  v48 = &v35[v46];
  v49 = sub_1000BA294(&qword_100BCB240);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v47, v48, v49);
  ((void (*)(char *, char *, uint64_t))v66)(&v34[v37[9]], &v35[v37[9]], v67);
  v50 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  v51 = &a1[v50];
  v52 = &a2[v50];
  v53 = type metadata accessor for NewsDataModel(0);
  if (swift_getEnumCaseMultiPayload(v52))
  {
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    v54 = type metadata accessor for News(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(v51, v52, v54);
    swift_storeEnumTagMultiPayload(v51, v53, 0);
  }
  v55 = a3[8];
  v56 = &a1[v55];
  v57 = &a2[v55];
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&a2[v55], 1, v32))
  {
    v58 = sub_1000BA294(&qword_100BCB248);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    v65(v56, v57, v32);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v56, 0, 1, v32);
  }
  ((void (*)(char *, char *, uint64_t))v71)(&a1[a3[9]], &a2[a3[9]], v72);
  v70(&a1[a3[10]], &a2[a3[10]], v27);
  v59 = a3[11];
  v60 = a3[12];
  v61 = &a1[v59];
  v62 = &a2[v59];
  v63 = *((_OWORD *)v62 + 1);
  *(_OWORD *)v61 = *(_OWORD *)v62;
  *((_OWORD *)v61 + 1) = v63;
  *((_OWORD *)v61 + 2) = *((_OWORD *)v62 + 2);
  ((void (*)(char *, char *, uint64_t))v68)(&a1[v60], &a2[v60], v69);
  return a1;
}

char *sub_1002065E8(char *a1, char *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  void (*v77)(char *, char *, uint64_t);
  uint64_t v78;
  void (*v79)(char *, char *);
  uint64_t v80;
  void (*v81)(char *, char *, uint64_t);
  void (*v82)(char *, char *);
  uint64_t v83;
  void (*v84)(char *, char *);
  uint64_t v85;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for TemperatureAveragesHeroChartInput(0);
  v7 = v6[5];
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for TimeZone(0);
  v84 = *(void (**)(char *, char *))(*(_QWORD *)(v10 - 8) + 40);
  v85 = v10;
  v84(v8, v9);
  v11 = v6[6];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = type metadata accessor for Locale(0);
  v79 = *(void (**)(char *, char *))(*(_QWORD *)(v14 - 8) + 40);
  v80 = v14;
  v79(v12, v13);
  *(_QWORD *)&a1[v6[7]] = *(_QWORD *)&a2[v6[7]];
  swift_bridgeObjectRelease();
  v15 = v6[8];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
  LODWORD(v12) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, (uint64_t)v18);
  v19 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v17, 1, (uint64_t)v18);
  if ((_DWORD)v12)
  {
    if (!v19)
    {
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v20 = v18[5];
      v21 = &v16[v20];
      v22 = &v17[v20];
      v23 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
      *(_QWORD *)&v16[v18[6]] = *(_QWORD *)&v17[v18[6]];
      *(_QWORD *)&v16[v18[7]] = *(_QWORD *)&v17[v18[7]];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v16, 0, 1, (uint64_t)v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    sub_1000215BC((uint64_t)v16, type metadata accessor for DetailHeroChartLollipopPosition);
LABEL_6:
    v24 = sub_1000BA294(&qword_100BCB0D0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v73 = v18[5];
  v74 = &v16[v73];
  v75 = &v17[v73];
  v76 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 40))(v74, v75, v76);
  *(_QWORD *)&v16[v18[6]] = *(_QWORD *)&v17[v18[6]];
  *(_QWORD *)&v16[v18[7]] = *(_QWORD *)&v17[v18[7]];
LABEL_7:
  v25 = v6[9];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = type metadata accessor for Date(0);
  v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 40);
  v29(v26, v27, v28);
  v29(&a1[v6[10]], &a2[v6[10]], v28);
  v30 = v6[11];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = sub_1000BA294(&qword_100BCB238);
  v78 = *(_QWORD *)(v33 - 8);
  v77 = *(void (**)(char *, char *, uint64_t))(v78 + 40);
  v77(v31, v32, v33);
  v34 = a3[5];
  v35 = &a1[v34];
  v36 = &a2[v34];
  v37 = type metadata accessor for Calendar(0);
  v82 = *(void (**)(char *, char *))(*(_QWORD *)(v37 - 8) + 40);
  v83 = v37;
  v82(v35, v36);
  v38 = (int *)type metadata accessor for MonthlyAveragesChartInput(0);
  v81 = v29;
  v29(&v35[v38[5]], &v36[v38[5]], v28);
  v39 = v38[6];
  v40 = &v35[v39];
  v41 = &v36[v39];
  v42 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 40))(v40, v41, v42);
  v43 = v38[7];
  v44 = &v35[v43];
  v45 = &v36[v43];
  v46 = sub_1000BA294(&qword_100BC4E70);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 40))(v44, v45, v46);
  v47 = v38[8];
  v48 = &v35[v47];
  v49 = &v36[v47];
  v50 = sub_1000BA294(&qword_100BCB240);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 40))(v48, v49, v50);
  v51 = a3;
  ((void (*)(char *, char *, uint64_t))v79)(&v35[v38[9]], &v36[v38[9]], v80);
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v52 = a3[7];
    v53 = &a1[v52];
    v54 = &a2[v52];
    sub_1000215BC((uint64_t)&a1[v52], type metadata accessor for NewsDataModel);
    v55 = type metadata accessor for NewsDataModel(0);
    if (swift_getEnumCaseMultiPayload(v54))
    {
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
    else
    {
      v56 = type metadata accessor for News(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v53, v54, v56);
      swift_storeEnumTagMultiPayload(v53, v55, 0);
    }
  }
  v57 = a3[8];
  v58 = &a1[v57];
  v59 = &a2[v57];
  v60 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)&a1[v57], 1, v33);
  v61 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v59, 1, v33);
  if (!v60)
  {
    if (!v61)
    {
      v77(v58, v59, v33);
      goto LABEL_17;
    }
    (*(void (**)(char *, uint64_t))(v78 + 8))(v58, v33);
    goto LABEL_16;
  }
  if (v61)
  {
LABEL_16:
    v62 = sub_1000BA294(&qword_100BCB248);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v58, v59, v33);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v58, 0, 1, v33);
LABEL_17:
  ((void (*)(char *, char *, uint64_t))v84)(&a1[a3[9]], &a2[a3[9]], v85);
  v81(&a1[a3[10]], &a2[a3[10]], v28);
  v63 = a3[11];
  v64 = &a1[v63];
  v65 = &a2[v63];
  v66 = *(void **)&a1[v63];
  *(_QWORD *)v64 = *(_QWORD *)v65;

  v67 = (void *)*((_QWORD *)v64 + 1);
  *((_QWORD *)v64 + 1) = *((_QWORD *)v65 + 1);

  v68 = (void *)*((_QWORD *)v64 + 2);
  *((_QWORD *)v64 + 2) = *((_QWORD *)v65 + 2);

  v69 = (void *)*((_QWORD *)v64 + 3);
  *((_QWORD *)v64 + 3) = *((_QWORD *)v65 + 3);

  v70 = (void *)*((_QWORD *)v64 + 4);
  *((_QWORD *)v64 + 4) = *((_QWORD *)v65 + 4);

  v71 = (void *)*((_QWORD *)v64 + 5);
  *((_QWORD *)v64 + 5) = *((_QWORD *)v65 + 5);

  ((void (*)(char *, char *, uint64_t))v82)(&a1[v51[12]], &a2[v51[12]], v83);
  return a1;
}

uint64_t sub_100206B6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100206B78);
}

uint64_t sub_100206B78(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  sub_1000D0C20();
  sub_100088FF0();
  if (v9)
  {
    v7 = v6;
    v8 = v4;
    return _s7Weather24LocationCompositionStateOwet_0(v8, v3, v7);
  }
  type metadata accessor for MonthlyAveragesChartInput(0);
  sub_100088FF0();
  if (v9)
  {
    v7 = v10;
    v11 = a3[5];
LABEL_25:
    v8 = v4 + v11;
    return _s7Weather24LocationCompositionStateOwet_0(v8, v3, v7);
  }
  if ((_DWORD)v3 != 2147483646)
  {
    type metadata accessor for NewsDataModel(0);
    sub_100088FF0();
    if (v9)
    {
      v7 = v15;
      v11 = a3[7];
    }
    else
    {
      sub_1000BA294(&qword_100BCB248);
      sub_100088FF0();
      if (v16)
      {
        v7 = v17;
        v11 = a3[8];
      }
      else
      {
        type metadata accessor for TimeZone(0);
        sub_100088FF0();
        if (v18)
        {
          v7 = v19;
          v11 = a3[9];
        }
        else
        {
          type metadata accessor for Date(0);
          sub_100088FF0();
          if (v20)
          {
            v7 = v21;
            v11 = a3[10];
          }
          else
          {
            v7 = type metadata accessor for Calendar(0);
            v11 = a3[12];
          }
        }
      }
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(v4 + a3[6]);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  v13 = v12 - 1;
  if (v13 < 0)
    v13 = -1;
  return (v13 + 1);
}

uint64_t sub_100206C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100206CA8);
}

void sub_100206CA8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  sub_1000D0C20();
  sub_10009D2E8();
  if (v11)
  {
    v9 = v8;
    v10 = v5;
  }
  else
  {
    type metadata accessor for MonthlyAveragesChartInput(0);
    sub_10009D2E8();
    if (v11)
    {
      v9 = v12;
      v13 = a4[5];
    }
    else
    {
      if (a3 == 2147483646)
      {
        *(_QWORD *)(v5 + a4[6]) = v4;
        return;
      }
      type metadata accessor for NewsDataModel(0);
      sub_10009D2E8();
      if (v11)
      {
        v9 = v14;
        v13 = a4[7];
      }
      else
      {
        sub_1000BA294(&qword_100BCB248);
        sub_10009D2E8();
        if (v15)
        {
          v9 = v16;
          v13 = a4[8];
        }
        else
        {
          type metadata accessor for TimeZone(0);
          sub_10009D2E8();
          if (v17)
          {
            v9 = v18;
            v13 = a4[9];
          }
          else
          {
            type metadata accessor for Date(0);
            sub_10009D2E8();
            if (v19)
            {
              v9 = v20;
              v13 = a4[10];
            }
            else
            {
              v9 = type metadata accessor for Calendar(0);
              v13 = a4[12];
            }
          }
        }
      }
    }
    v10 = v5 + v13;
  }
  _s7Weather24LocationCompositionStateOwst_0(v10, v4, v4, v9);
}

uint64_t type metadata accessor for TemperatureAveragesDetailInput(uint64_t a1)
{
  uint64_t result;

  result = qword_100BCB2A8;
  if (!qword_100BCB2A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TemperatureAveragesDetailInput);
  return result;
}

void sub_100206DF4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[9];

  v2 = type metadata accessor for TemperatureAveragesHeroChartInput(319);
  if (v3 <= 0x3F)
  {
    v16[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for MonthlyAveragesChartInput(319);
    if (v5 <= 0x3F)
    {
      v16[1] = *(_QWORD *)(v4 - 8) + 64;
      v16[2] = "\b";
      v6 = type metadata accessor for NewsDataModel(319);
      if (v7 <= 0x3F)
      {
        v16[3] = *(_QWORD *)(v6 - 8) + 64;
        sub_100206F14(319);
        if (v9 <= 0x3F)
        {
          v16[4] = *(_QWORD *)(v8 - 8) + 64;
          v10 = type metadata accessor for TimeZone(319);
          if (v11 <= 0x3F)
          {
            v16[5] = *(_QWORD *)(v10 - 8) + 64;
            v12 = type metadata accessor for Date(319);
            if (v13 <= 0x3F)
            {
              v16[6] = *(_QWORD *)(v12 - 8) + 64;
              v16[7] = &unk_100988E88;
              v14 = type metadata accessor for Calendar(319);
              if (v15 <= 0x3F)
              {
                v16[8] = *(_QWORD *)(v14 - 8) + 64;
                swift_initStructMetadata(a1, 256, 9, v16, a1 + 16);
              }
            }
          }
        }
      }
    }
  }
}

void sub_100206F14(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BCB2B8)
  {
    v2 = sub_100075EB0(&qword_100BCB238);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BCB2B8);
  }
}

uint64_t sub_100206F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  void (*v40)(char *, uint64_t);
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  __int128 v47;
  _OWORD *v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  _OWORD v57[3];
  _OWORD v58[3];

  v5 = sub_1000BA294(&qword_100BCB238);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BCB308);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100098694();
  sub_1000BA294(&qword_100BCB248);
  sub_1000B42B0();
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v53 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v53 - v18;
  if ((sub_1002852B4(a1, a2) & 1) == 0)
    goto LABEL_23;
  v56 = v6;
  v20 = sub_1000C0924();
  v21 = sub_10004A330(*(int *)(v20 + 20));
  if ((sub_10081BB04(v21, v22) & 1) == 0)
    goto LABEL_23;
  v53 = v5;
  v54 = v2;
  v55 = (int *)v20;
  v23 = *(int *)(v20 + 24);
  v24 = *(_QWORD *)(a1 + v23);
  v25 = *(_QWORD *)(a2 + v23);
  if (v24)
  {
    if (!v25)
      goto LABEL_23;
    swift_bridgeObjectRetain(*(_QWORD *)(a2 + v23));
    swift_bridgeObjectRetain(v24);
    sub_100949F90();
    v27 = v26;
    sub_1000986C4();
    swift_bridgeObjectRelease(v25);
    if ((v27 & 1) == 0)
      goto LABEL_23;
  }
  else if (v25)
  {
LABEL_23:
    v51 = 0;
    return v51 & 1;
  }
  v28 = v55;
  v29 = sub_10004A330(v55[7]);
  if ((sub_1000FA3BC(v29, v30) & 1) == 0)
    goto LABEL_23;
  sub_1000C1D10(a1 + v28[8], (uint64_t)v19);
  sub_1000C1D10(a2 + v28[8], (uint64_t)v17);
  v31 = *(int *)(v9 + 48);
  v32 = v54;
  v33 = v54 + v31;
  sub_1000C1D10((uint64_t)v19, v54);
  sub_1000C1D10((uint64_t)v17, v33);
  v34 = v53;
  sub_100088FC8(v32, 1, v53);
  if (v35)
  {
    sub_100021A14((uint64_t)v17, &qword_100BCB248);
    sub_100021A14((uint64_t)v19, &qword_100BCB248);
    sub_100088FC8(v33, 1, v34);
    if (v35)
    {
      sub_100021A14(v54, &qword_100BCB248);
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  sub_10003773C(v32, (uint64_t)v14, &qword_100BCB248);
  sub_100088FC8(v33, 1, v34);
  if (v35)
  {
    sub_100021A14((uint64_t)v17, &qword_100BCB248);
    sub_100021A14((uint64_t)v19, &qword_100BCB248);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v14, v34);
LABEL_17:
    sub_100021A14(v54, &qword_100BCB308);
    goto LABEL_23;
  }
  v36 = v33;
  v37 = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v8, v36, v34);
  v38 = sub_100208498();
  v39 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v8, v34, v38);
  v40 = *(void (**)(char *, uint64_t))(v37 + 8);
  v40(v8, v34);
  sub_1000987A0((uint64_t)v17);
  sub_1000987A0((uint64_t)v19);
  v40(v14, v34);
  sub_1000987A0(v32);
  if ((v39 & 1) == 0)
    goto LABEL_23;
LABEL_19:
  v41 = v55;
  v42 = sub_10004A330(v55[9]);
  if ((static TimeZone.== infix(_:_:)(v42, v43) & 1) == 0)
    goto LABEL_23;
  v44 = sub_10004A330(v41[10]);
  if ((static Date.== infix(_:_:)(v44, v45) & 1) == 0)
    goto LABEL_23;
  v46 = (_OWORD *)(a1 + v41[11]);
  v47 = v46[2];
  v57[1] = v46[1];
  v57[2] = v47;
  v57[0] = *v46;
  v48 = (_OWORD *)(a2 + v41[11]);
  v49 = v48[2];
  v58[1] = v48[1];
  v58[2] = v49;
  v58[0] = *v48;
  if ((sub_10009A7F8((uint64_t)v57, (id *)v58) & 1) == 0)
    goto LABEL_23;
  v50 = sub_10004A330(v41[12]);
  v51 = static Calendar.== infix(_:_:)(v50);
  return v51 & 1;
}

uint64_t sub_10020731C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  os_log_type_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int EnumCaseMultiPayload;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t (*v108)(uint64_t, uint64_t, uint64_t);
  uint64_t v109;
  os_log_type_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _DWORD *v118;
  uint64_t (*v119)(uint64_t, uint64_t, uint64_t);
  uint64_t v120;
  os_log_type_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  os_log_type_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char **v170;
  void *v171;
  char *v172;
  uint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  id v178;
  char *v179;
  char *v180;
  char *v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  int *v186;
  _QWORD *v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  char v236[8];
  uint64_t v237;
  char v238[8];
  uint64_t v239;

  v211 = a4;
  v212 = a2;
  v234 = a5;
  v8 = type metadata accessor for Location(0);
  v232 = *(_QWORD *)(v8 - 8);
  v233 = v8;
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_1000986FC();
  v230 = (char *)v10;
  v12 = __chkstk_darwin(v11);
  v224 = (char *)&v192 - v13;
  __chkstk_darwin(v12);
  sub_1000BA30C();
  __chkstk_darwin(v14);
  sub_100079F7C();
  v16 = sub_1000987B4(v15);
  v17 = type metadata accessor for Calendar(v16);
  sub_1000B43A4(v17, (uint64_t)&v239);
  v207 = v18;
  sub_10009D98C();
  __chkstk_darwin(v19);
  sub_100088FDC();
  v21 = sub_1000987B4(v20);
  v222 = type metadata accessor for Date(v21);
  v203 = *(_QWORD *)(v222 - 8);
  sub_10009D98C();
  __chkstk_darwin(v22);
  sub_100088FDC();
  v221 = v23;
  v24 = sub_10009876C();
  type metadata accessor for TimeState(v24);
  sub_1000B42B0();
  __chkstk_darwin(v25);
  sub_100088FDC();
  v27 = sub_1000987B4(v26);
  v28 = type metadata accessor for TimeZone(v27);
  sub_1000B43A4(v28, (uint64_t)v236);
  v204 = v29;
  sub_10009D98C();
  __chkstk_darwin(v30);
  sub_100088FDC();
  v220 = v31;
  v32 = sub_10009876C();
  v33 = type metadata accessor for WeatherDataModel(v32);
  sub_1000B43A4(v33, (uint64_t)&v229);
  v196 = v34;
  sub_10009D98C();
  __chkstk_darwin(v35);
  sub_100088FDC();
  v195 = v36;
  sub_1000BA294(&qword_100BC3460);
  sub_1000B42B0();
  __chkstk_darwin(v37);
  sub_100088FDC();
  v198 = v38;
  sub_1000BA294(&qword_100BCB318);
  sub_1000B42B0();
  __chkstk_darwin(v39);
  sub_100088FDC();
  v41 = sub_1000987B4(v40);
  v42 = type metadata accessor for HistoricalFacts(v41);
  sub_1000B43A4(v42, (uint64_t)&v232);
  v194 = v43;
  sub_10009D98C();
  __chkstk_darwin(v44);
  sub_100088FDC();
  v46 = sub_1000987B4(v45);
  type metadata accessor for MonthlyAveragesChartInput(v46);
  sub_1000B42B0();
  __chkstk_darwin(v47);
  sub_1000986FC();
  v218 = v48;
  __chkstk_darwin(v49);
  sub_100079F7C();
  v217 = v50;
  sub_1000BA294(&qword_100BCB320);
  sub_1000B42B0();
  __chkstk_darwin(v51);
  sub_100088FDC();
  v53 = sub_1000987B4(v52);
  v209 = type metadata accessor for TemperatureAveragesHeroChartInput(v53);
  sub_1000B42B0();
  __chkstk_darwin(v54);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v55);
  sub_100079F7C();
  v223 = v56;
  sub_1000BA294(&qword_100BCB328);
  sub_1000B42B0();
  __chkstk_darwin(v57);
  v59 = (char *)&v192 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BA294(&qword_100BCB248);
  sub_1000B42B0();
  __chkstk_darwin(v60);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v61);
  v63 = (char *)&v192 - v62;
  v64 = sub_1000BA294(&qword_100BCB238);
  v226 = *(_QWORD *)(v64 - 8);
  v227 = v64;
  sub_10009D98C();
  __chkstk_darwin(v65);
  sub_100088FDC();
  v225 = v66;
  v67 = sub_10009876C();
  type metadata accessor for NewsDataModel(v67);
  sub_1000B42B0();
  __chkstk_darwin(v68);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v69);
  sub_100079F7C();
  v231 = v70;
  v71 = sub_10009876C();
  v72 = type metadata accessor for WeatherData(v71);
  sub_1000B42B0();
  __chkstk_darwin(v73);
  sub_100088FDC();
  v229 = (char *)v74;
  sub_1000BA294(&qword_100BC3380);
  sub_1000B42B0();
  __chkstk_darwin(v75);
  sub_100098694();
  v76 = type metadata accessor for LocationWeatherDataState(0);
  sub_1000B42B0();
  v78 = __chkstk_darwin(v77);
  v80 = (char *)&v192 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v78);
  v82 = (char *)&v192 - v81;
  v219 = a1;
  v83 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 16);
  swift_bridgeObjectRetain(v83);
  v84 = a3;
  v86 = Location.id.getter(v85);
  sub_1000EED10(v86, v87, v83);
  sub_1000986C4();
  swift_bridgeObjectRelease(v83);
  sub_100088FC8(v5, 1, v76);
  if (v131)
  {
    sub_100021A14(v5, &qword_100BC3380);
    if (qword_100BC2470 != -1)
      swift_once(&qword_100BC2470, sub_1006F38C8);
    v88 = sub_100098720();
    sub_1000C659C(v88, (uint64_t)qword_100CAF138);
    v89 = (uint64_t)v230;
    v91 = sub_1000D15E4(v90);
    Logger.logObject.getter(v91);
    v92 = sub_100094F54();
    if (sub_1000C51D4(v92))
    {
      sub_100098710(22);
      v93 = sub_1000C5B78();
      v235 = (_QWORD *)v93;
      sub_1000C24C8(7.2225e-34);
      sub_1000DB764();
      v94 = sub_1000C1370();
      v96 = sub_100098994(v94, v95);
      sub_1000CC8F4(v96);
      sub_1000986C4();
      sub_1000CD5D0();
      sub_1000B4500((void *)&_mh_execute_header, v97, v98, "Failed to create averages temperature detail input due to missing weather data for location; location=%{private,mask.hash}s");
      sub_1000988D8(v93);
      sub_1000986F0(v93);
      sub_1000986F0(v89);
    }
    else
    {
      sub_1000B3274(v89, *(uint64_t (**)(uint64_t, uint64_t))(v83 + 8));
    }

    goto LABEL_40;
  }
  sub_10007C77C(v5, (uint64_t)v82, type metadata accessor for LocationWeatherDataState);
  sub_100095B78((uint64_t)v82, (uint64_t)v80, type metadata accessor for LocationWeatherDataState);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v80);
  if (EnumCaseMultiPayload == 1)
  {
    v230 = v82;
    v100 = sub_1000BA294(&qword_100BC3358);
    v101 = (uint64_t)&v80[*(int *)(v100 + 48)];
    v102 = (uint64_t)&v80[*(int *)(v100 + 64)];
    v103 = v229;
    sub_10007C77C((uint64_t)v80, (uint64_t)v229, type metadata accessor for WeatherData);
    sub_10007C77C(v102, v231, type metadata accessor for NewsDataModel);
    sub_1000215BC(v101, type metadata accessor for PreprocessedWeatherData);
    WeatherDataModel.historicalComparisons.getter();
    v104 = v228;
    sub_100208284((uint64_t)v59, (uint64_t)v63);
    sub_100021A14((uint64_t)v59, &qword_100BCB328);
    v105 = v227;
    sub_100088FC8((uint64_t)v63, 1, v227);
    if (v131)
    {
      sub_100021A14((uint64_t)v63, &qword_100BCB248);
      if (qword_100BC2470 != -1)
        swift_once(&qword_100BC2470, sub_1006F38C8);
      v106 = sub_100098720();
      sub_1000C659C(v106, (uint64_t)qword_100CAF138);
      v107 = (uint64_t)v214;
      v109 = sub_1000D15E4(v108);
      Logger.logObject.getter(v109);
      v110 = sub_100094F54();
      if (sub_1000C51D4(v110))
      {
        sub_100098710(22);
        v111 = sub_1000C5B78();
        v235 = (_QWORD *)v111;
        sub_1000C24C8(7.2225e-34);
        sub_1000DB764();
        v112 = sub_1000C1370();
        v114 = sub_100098994(v112, v113);
        sub_1000CC8F4(v114);
        sub_1000986C4();
        sub_1000CD5D0();
        sub_1000B4500((void *)&_mh_execute_header, v115, v116, "Failed to get temperature averages from weather comparisons; location=%{private,mask.hash}s");
        sub_1000988D8(v111);
        sub_1000986F0(v111);
        sub_1000986F0(v107);

LABEL_26:
        sub_1000215BC(v231, type metadata accessor for NewsDataModel);
        v144 = (uint64_t)v229;
LABEL_37:
        sub_1000215BC(v144, type metadata accessor for WeatherData);
        goto LABEL_38;
      }

      (*(void (**)(uint64_t, char *))(v105 + 8))(v107, v59);
    }
    else
    {
      v127 = v225;
      (*(void (**)(void *, char *, uint64_t))(v226 + 32))(v225, v63, v105);
      sub_1000DB418((_QWORD *)v104 + 5, *((_QWORD *)v104 + 8));
      v128 = v210;
      v129 = v219;
      v130 = v84;
      sub_1002855FC(v219, v103, v212, v84, (uint64_t)v127, v211, v210);
      sub_100088FC8((uint64_t)v128, 1, v209);
      if (!v131)
      {
        sub_10007C77C((uint64_t)v128, v223, type metadata accessor for TemperatureAveragesHeroChartInput);
        sub_1000DB418((_QWORD *)v104 + 10, *((_QWORD *)v104 + 13));
        sub_10081BC88(v129, v217);
        v146 = type metadata accessor for SettingReader(0);
        v147 = static SettingReader.shared.getter(v146);
        if (qword_100BC22C8 != -1)
          swift_once(&qword_100BC22C8, sub_1005E691C);
        v148 = SettingReader.isEnabled(_:with:)(qword_100CAEE68, 2);
        swift_release(v147);
        if ((v148 & 1) != 0)
        {
          v149 = v198;
          sub_1000EADE8();
          sub_100088FC8(v149, 1, v72);
          if (v131)
          {
            sub_100021A14(v149, &qword_100BC3460);
            v159 = v199;
            _s7Weather24LocationCompositionStateOwst_0(v199, 1, 1, v200);
          }
          else
          {
            v154 = v149 + *(int *)(v72 + 24);
            v155 = v196;
            v156 = v195;
            v157 = v149;
            v158 = v197;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v196 + 16))(v195, v154, v197);
            sub_1000215BC(v157, type metadata accessor for WeatherData);
            v159 = v199;
            WeatherDataModel.historicalFacts.getter(v160);
            (*(void (**)(uint64_t, uint64_t))(v155 + 8))(v156, v158);
            v161 = v200;
            sub_100088FC8(v159, 1, v200);
            if (!v162)
            {
              v190 = v194;
              v191 = v193;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v194 + 32))(v193, v159, v161);
              sub_1000DB418(v228, *((_QWORD *)v228 + 3));
              v233 = sub_10056C3D4(v191);
              (*(void (**)(uint64_t, uint64_t))(v190 + 8))(v191, v161);
LABEL_46:
              sub_100095B78(v223, v216, type metadata accessor for TemperatureAveragesHeroChartInput);
              v163 = v217;
              sub_100095B78(v217, v218, type metadata accessor for MonthlyAveragesChartInput);
              sub_100095B78(v231, v213, type metadata accessor for NewsDataModel);
              v164 = v225;
              v165 = v226;
              v166 = v215;
              (*(void (**)(uint64_t, void *, uint64_t))(v226 + 16))(v215, v225, v105);
              v167 = _s7Weather24LocationCompositionStateOwst_0(v166, 0, 1, v105);
              Location.timeZone.getter(v167);
              v168 = v202;
              sub_100095B78(v129 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_time, v202, type metadata accessor for TimeState);
              v232 = *(_QWORD *)(v203 + 32);
              ((void (*)(uint64_t, uint64_t, uint64_t))v232)(v221, v168, v222);
              v169 = v129 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment;
              swift_beginAccess(v129 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment, &v235, 0, 0);
              v170 = (char **)(v169 + *(int *)(type metadata accessor for EnvironmentState(0) + 64));
              v172 = v170[1];
              v224 = *v170;
              v171 = v224;
              v173 = v105;
              v219 = (uint64_t)v172;
              v174 = v170[3];
              v214 = v170[2];
              v175 = v214;
              v176 = v170[4];
              v228 = v170[5];
              v177 = v228;
              v178 = v171;
              v179 = v172;
              v180 = v175;
              v181 = v174;
              v182 = v174;
              v183 = v176;
              v184 = v206;
              static Calendar.current.getter(v183);
              sub_1000215BC(v163, type metadata accessor for MonthlyAveragesChartInput);
              sub_1000215BC(v223, type metadata accessor for TemperatureAveragesHeroChartInput);
              (*(void (**)(void *, uint64_t))(v165 + 8))(v164, v173);
              sub_1000215BC(v231, type metadata accessor for NewsDataModel);
              sub_1000215BC((uint64_t)v229, type metadata accessor for WeatherData);
              sub_1000215BC((uint64_t)v230, type metadata accessor for LocationWeatherDataState);
              v185 = v234;
              sub_10007C77C(v216, v234, type metadata accessor for TemperatureAveragesHeroChartInput);
              v186 = (int *)sub_1000C0924();
              sub_10007C77C(v218, v185 + v186[5], type metadata accessor for MonthlyAveragesChartInput);
              *(_QWORD *)(v185 + v186[6]) = v233;
              sub_10007C77C(v213, v185 + v186[7], type metadata accessor for NewsDataModel);
              sub_10020851C(v215, v185 + v186[8]);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v204 + 32))(v185 + v186[9], v220, v205);
              ((void (*)(uint64_t, uint64_t, uint64_t))v232)(v185 + v186[10], v221, v222);
              v187 = (_QWORD *)(v185 + v186[11]);
              v188 = v219;
              *v187 = v224;
              v187[1] = v188;
              v187[2] = v214;
              v187[3] = v182;
              v189 = v228;
              v187[4] = v176;
              v187[5] = v189;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v207 + 32))(v185 + v186[12], v184, v208);
              v151 = v185;
              v152 = 0;
              v150 = (uint64_t)v186;
              return _s7Weather24LocationCompositionStateOwst_0(v151, v152, 1, v150);
            }
          }
          sub_100021A14(v159, &qword_100BCB318);
        }
        v233 = 0;
        goto LABEL_46;
      }
      sub_100021A14((uint64_t)v128, &qword_100BCB320);
      if (qword_100BC2470 != -1)
        swift_once(&qword_100BC2470, sub_1006F38C8);
      v132 = sub_100098720();
      sub_1000AECD4(v132, (uint64_t)qword_100CAF138);
      v134 = v232;
      v133 = v233;
      v135 = v201;
      v136 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v232 + 16))(v201, v130, v233);
      Logger.logObject.getter(v136);
      v137 = sub_100094F54();
      if (sub_1000C51D4(v137))
      {
        sub_100098710(22);
        v228 = (char *)sub_1000C5B78();
        v235 = v228;
        sub_1000C24C8(7.2225e-34);
        sub_1000DB764();
        v138 = dispatch thunk of CustomStringConvertible.description.getter(v133);
        v140 = sub_100098994(v138, v139);
        sub_1000CC8F4(v140);
        sub_1000986C4();
        sub_1000B3274(v135, *(uint64_t (**)(uint64_t, uint64_t))(v134 + 8));
        sub_1000B4500((void *)&_mh_execute_header, v141, v142, "Failed to create hero chart input; location=%{private,mask.hash}s");
        v143 = v228;
        sub_1000988D8((uint64_t)v228);
        sub_1000986F0((uint64_t)v143);
        sub_1000986F0(v130);

        (*(void (**)(void *, uint64_t))(v226 + 8))(v225, v105);
        goto LABEL_26;
      }

      sub_1000B3274(v135, *(uint64_t (**)(uint64_t, uint64_t))(v134 + 8));
      (*(void (**)(void *, uint64_t))(v226 + 8))(v225, v105);
    }
    sub_1000215BC(v231, type metadata accessor for NewsDataModel);
    v144 = (uint64_t)v103;
    goto LABEL_37;
  }
  sub_1000215BC((uint64_t)v80, type metadata accessor for LocationWeatherDataState);
  if (qword_100BC2470 != -1)
    swift_once(&qword_100BC2470, sub_1006F38C8);
  v117 = sub_100098720();
  sub_1000C659C(v117, (uint64_t)qword_100CAF138);
  v118 = v224;
  v120 = sub_1000D15E4(v119);
  Logger.logObject.getter(v120);
  v121 = sub_100094F54();
  if (sub_1000C51D4(v121))
  {
    sub_100098710(22);
    v122 = sub_1000C5B78();
    v235 = (_QWORD *)v122;
    *v118 = 141558275;
    v237 = 1752392040;
    v230 = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, v238);
    sub_1000DB764();
    v123 = sub_1000C1370();
    v237 = sub_100098994(v123, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, v238);
    sub_1000986C4();
    sub_1000CD5D0();
    sub_1000B4500((void *)&_mh_execute_header, v125, v126, "Failed to create averages temperature detail input due to missing weather data; location=%{private,mask.hash}s");
    sub_1000988D8(v122);
    sub_1000986F0(v122);
    sub_1000986F0((uint64_t)v118);

LABEL_38:
    v145 = (uint64_t)v230;
    goto LABEL_39;
  }

  sub_1000B3274((uint64_t)v118, *(uint64_t (**)(uint64_t, uint64_t))(v83 + 8));
  v145 = (uint64_t)v82;
LABEL_39:
  sub_1000215BC(v145, type metadata accessor for LocationWeatherDataState);
LABEL_40:
  v150 = sub_1000C0924();
  v151 = v234;
  v152 = 1;
  return _s7Weather24LocationCompositionStateOwst_0(v151, v152, 1, v150);
}

uint64_t sub_100208284@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v24;

  v4 = type metadata accessor for HistoricalComparison(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000BA294(&qword_100BCB328);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003773C(a1, (uint64_t)v10, &qword_100BCB328);
  v11 = type metadata accessor for HistoricalComparisons(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v11) == 1)
  {
    sub_100021A14((uint64_t)v10, &qword_100BCB328);
    v12 = _swiftEmptyArrayStorage;
  }
  else
  {
    v12 = (_QWORD *)HistoricalComparisons.comparisons.getter();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  }
  v13 = v12[2];
  if (v13)
  {
    v14 = (char *)v12 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v15 = enum case for HistoricalComparison.highTemperature(_:);
    v16 = *(_QWORD *)(v5 + 72);
    v17 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    while (1)
    {
      v17(v7, v14, v4);
      if ((*(unsigned int (**)(char *, uint64_t))(v5 + 88))(v7, v4) == v15)
        break;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v14 += v16;
      if (!--v13)
        goto LABEL_8;
    }
    v21 = swift_bridgeObjectRelease(v12);
    (*(void (**)(char *, uint64_t, __n128))(v5 + 96))(v7, v4, v21);
    v22 = sub_1000BA294(&qword_100BCB238);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(a2, v7, v22);
    v19 = a2;
    v20 = 0;
    v18 = v22;
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease(v12);
    v18 = sub_1000BA294(&qword_100BCB238);
    v19 = a2;
    v20 = 1;
  }
  return _s7Weather24LocationCompositionStateOwst_0(v19, v20, 1, v18);
}

unint64_t sub_100208498()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCB310;
  if (!qword_100BCB310)
  {
    v1 = sub_100075EB0(&qword_100BCB238);
    result = swift_getWitnessTable(&protocol conformance descriptor for Trend<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCB310);
  }
  return result;
}

unint64_t sub_1002084DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC5FE0;
  if (!qword_100BC5FE0)
  {
    v1 = type metadata accessor for Location(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Location, v1);
    atomic_store(result, (unint64_t *)&qword_100BC5FE0);
  }
  return result;
}

uint64_t sub_10020851C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BCB248);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for TemperatureAveragesDetailInputFactory(_QWORD *a1)
{
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1 + 5);
  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1 + 10);
}

_OWORD *initializeWithCopy for TemperatureAveragesDetailInputFactory(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = a2[4];
  a1[4] = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)a1 + 40, (uint64_t)a2 + 40);
  v6 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  return a1;
}

_QWORD *assignWithCopy for TemperatureAveragesDetailInputFactory(_QWORD *a1, _QWORD *a2)
{
  sub_100094D04(a1, a2);
  sub_100094D04(a1 + 5, a2 + 5);
  sub_100094D04(a1 + 10, a2 + 10);
  return a1;
}

void *initializeWithTake for TemperatureAveragesDetailInputFactory(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x78uLL);
}

uint64_t assignWithTake for TemperatureAveragesDetailInputFactory(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + 80));
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for TemperatureAveragesDetailInputFactory(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 120))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TemperatureAveragesDetailInputFactory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TemperatureAveragesDetailInputFactory()
{
  return &type metadata for TemperatureAveragesDetailInputFactory;
}

uint64_t *sub_100208770(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t, __n128);
  __n128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t, __n128);
  __n128 v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  void (*v88)(char *, char *, uint64_t);
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *__dsta;
  char *__dst;
  uint64_t *v123;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = (uint64_t *)((char *)a1 + v7);
    v9 = (char *)a2 + v7;
    v10 = *(uint64_t *)((char *)a2 + v7 + 8);
    *v8 = *(uint64_t *)((char *)a2 + v7);
    v8[1] = v10;
    swift_retain();
    swift_retain();
    v11 = *(int *)(sub_1000BA294(&qword_100BCB330) + 32);
    v12 = (char *)v8 + v11;
    v13 = &v9[v11];
    v14 = (int *)type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, (uint64_t)v14))
    {
      v15 = sub_1000BA294(&qword_100BCB340);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v123 = v4;
      v17 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v12, v13, v17);
      v18 = v14[5];
      v19 = &v12[v18];
      v20 = &v13[v18];
      v21 = *((_QWORD *)v20 + 1);
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *((_QWORD *)v19 + 1) = v21;
      v22 = v14[6];
      v23 = &v12[v22];
      v24 = &v13[v22];
      v25 = *((_QWORD *)v24 + 1);
      *(_QWORD *)v23 = *(_QWORD *)v24;
      *((_QWORD *)v23 + 1) = v25;
      v26 = v14[7];
      __dsta = &v12[v26];
      v27 = &v13[v26];
      v28 = type metadata accessor for TimeZone(0);
      v29 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v28 - 8) + 16);
      swift_bridgeObjectRetain(v21);
      v30 = swift_bridgeObjectRetain(v25);
      v29(__dsta, v27, v28, v30);
      v31 = v14[8];
      v32 = &v12[v31];
      v33 = &v13[v31];
      v34 = sub_1000BA294(&qword_100BC4E68);
      v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
      v35(v32, v33, v34);
      v35(&v12[v14[9]], &v13[v14[9]], v34);
      v36 = v14[10];
      v37 = &v12[v36];
      v38 = &v13[v36];
      v39 = *((_QWORD *)v38 + 1);
      *(_QWORD *)v37 = *(_QWORD *)v38;
      *((_QWORD *)v37 + 1) = v39;
      v40 = v14[11];
      v41 = &v12[v40];
      v42 = &v13[v40];
      v43 = *((_QWORD *)v42 + 1);
      *(_QWORD *)v41 = *(_QWORD *)v42;
      *((_QWORD *)v41 + 1) = v43;
      *(_QWORD *)&v12[v14[12]] = *(_QWORD *)&v13[v14[12]];
      v12[v14[13]] = v13[v14[13]];
      v44 = v14[14];
      v45 = &v12[v44];
      v46 = &v13[v44];
      v47 = *((_QWORD *)v46 + 1);
      *(_QWORD *)v45 = *(_QWORD *)v46;
      *((_QWORD *)v45 + 1) = v47;
      v48 = v14[15];
      __dst = &v12[v48];
      v49 = &v13[v48];
      v50 = type metadata accessor for Precipitation(0);
      swift_bridgeObjectRetain(v39);
      swift_bridgeObjectRetain(v43);
      swift_bridgeObjectRetain(v47);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v49, 1, v50))
      {
        v51 = sub_1000BA294(&qword_100BCB338);
        memcpy(__dst, v49, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(__dst, v49, v50);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v50);
      }
      v12[v14[16]] = v13[v14[16]];
      v52 = v14[17];
      v53 = &v12[v52];
      v54 = &v13[v52];
      v55 = *((_QWORD *)v54 + 1);
      *(_QWORD *)v53 = *(_QWORD *)v54;
      *((_QWORD *)v53 + 1) = v55;
      v56 = v14[18];
      v57 = &v12[v56];
      v58 = &v13[v56];
      v59 = *((_QWORD *)v58 + 1);
      *(_QWORD *)v57 = *(_QWORD *)v58;
      *((_QWORD *)v57 + 1) = v59;
      v60 = v14[19];
      v61 = &v12[v60];
      v62 = &v13[v60];
      v63 = *((_QWORD *)v62 + 1);
      *(_QWORD *)v61 = *(_QWORD *)v62;
      *((_QWORD *)v61 + 1) = v63;
      v64 = v14[20];
      v65 = *(_QWORD *)&v13[v64];
      *(_QWORD *)&v12[v64] = v65;
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRetain(v59);
      swift_bridgeObjectRetain(v63);
      swift_bridgeObjectRetain(v65);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, (uint64_t)v14);
      v4 = v123;
    }
    v66 = *(int *)(a3 + 24);
    v67 = (char *)v4 + v66;
    v68 = (char *)a2 + v66;
    v69 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 16))(v67, v68, v69);
    v70 = v14[5];
    v71 = &v67[v70];
    v72 = &v68[v70];
    v73 = *((_QWORD *)v72 + 1);
    *(_QWORD *)v71 = *(_QWORD *)v72;
    *((_QWORD *)v71 + 1) = v73;
    v74 = v14[6];
    v75 = &v67[v74];
    v76 = &v68[v74];
    v77 = *((_QWORD *)v76 + 1);
    *(_QWORD *)v75 = *(_QWORD *)v76;
    *((_QWORD *)v75 + 1) = v77;
    v78 = v14[7];
    v79 = &v67[v78];
    v80 = &v68[v78];
    v81 = type metadata accessor for TimeZone(0);
    v82 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v81 - 8) + 16);
    swift_bridgeObjectRetain(v73);
    v83 = swift_bridgeObjectRetain(v77);
    v82(v79, v80, v81, v83);
    v84 = v14[8];
    v85 = &v67[v84];
    v86 = &v68[v84];
    v87 = sub_1000BA294(&qword_100BC4E68);
    v88 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 16);
    v88(v85, v86, v87);
    v88(&v67[v14[9]], &v68[v14[9]], v87);
    v89 = v14[10];
    v90 = &v67[v89];
    v91 = &v68[v89];
    v92 = *((_QWORD *)v91 + 1);
    *(_QWORD *)v90 = *(_QWORD *)v91;
    *((_QWORD *)v90 + 1) = v92;
    v93 = v14[11];
    v94 = &v67[v93];
    v95 = &v68[v93];
    v96 = *((_QWORD *)v95 + 1);
    *(_QWORD *)v94 = *(_QWORD *)v95;
    *((_QWORD *)v94 + 1) = v96;
    *(_QWORD *)&v67[v14[12]] = *(_QWORD *)&v68[v14[12]];
    v67[v14[13]] = v68[v14[13]];
    v97 = v14[14];
    v98 = &v67[v97];
    v99 = &v68[v97];
    v100 = *((_QWORD *)v99 + 1);
    *(_QWORD *)v98 = *(_QWORD *)v99;
    *((_QWORD *)v98 + 1) = v100;
    v101 = v14[15];
    v102 = &v67[v101];
    v103 = &v68[v101];
    v104 = type metadata accessor for Precipitation(0);
    swift_bridgeObjectRetain(v92);
    swift_bridgeObjectRetain(v96);
    swift_bridgeObjectRetain(v100);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v103, 1, v104))
    {
      v105 = sub_1000BA294(&qword_100BCB338);
      memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 16))(v102, v103, v104);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v102, 0, 1, v104);
    }
    v67[v14[16]] = v68[v14[16]];
    v106 = v14[17];
    v107 = &v67[v106];
    v108 = &v68[v106];
    v109 = *((_QWORD *)v108 + 1);
    *(_QWORD *)v107 = *(_QWORD *)v108;
    *((_QWORD *)v107 + 1) = v109;
    v110 = v14[18];
    v111 = &v67[v110];
    v112 = &v68[v110];
    v113 = *((_QWORD *)v112 + 1);
    *(_QWORD *)v111 = *(_QWORD *)v112;
    *((_QWORD *)v111 + 1) = v113;
    v114 = v14[19];
    v115 = &v67[v114];
    v116 = &v68[v114];
    v117 = *((_QWORD *)v116 + 1);
    *(_QWORD *)v115 = *(_QWORD *)v116;
    *((_QWORD *)v115 + 1) = v117;
    v118 = v14[20];
    v119 = *(_QWORD *)&v68[v118];
    *(_QWORD *)&v67[v118] = v119;
    swift_bridgeObjectRetain(v109);
    swift_bridgeObjectRetain(v113);
    swift_bridgeObjectRetain(v117);
    swift_bridgeObjectRetain(v119);
  }
  return v4;
}

double sub_100208CF4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  double result;

  v4 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  swift_release(*v4);
  swift_release(v4[1]);
  v5 = (uint64_t)v4 + *(int *)(sub_1000BA294(&qword_100BCB330) + 32);
  v6 = (int *)type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v5, 1, (uint64_t)v6))
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v8 = v5 + v6[7];
    v9 = type metadata accessor for TimeZone(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
    v10 = v5 + v6[8];
    v11 = sub_1000BA294(&qword_100BC4E68);
    v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
    v12(v10, v11);
    v12(v5 + v6[9], v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = v5 + v6[15];
    v14 = type metadata accessor for Precipitation(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v13, 1, v14))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v15 = a1 + *(int *)(a2 + 24);
  v16 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = v15 + v6[7];
  v18 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = v15 + v6[8];
  v20 = sub_1000BA294(&qword_100BC4E68);
  v21 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8);
  v21(v19, v20);
  v21(v15 + v6[9], v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = v15 + v6[15];
  v23 = type metadata accessor for Precipitation(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v22, 1, v23))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

_BYTE *sub_100209004(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  _BYTE *v5;
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t, __n128);
  __n128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  _BYTE *v80;
  uint64_t v81;
  void (*v82)(_BYTE *, _BYTE *, uint64_t, __n128);
  __n128 v83;
  uint64_t v84;
  _BYTE *v85;
  _BYTE *v86;
  uint64_t v87;
  void (*v88)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v121;
  _BYTE *v122;

  v3 = a3;
  v5 = a1;
  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = *(_QWORD *)&a2[v6 + 8];
  *v7 = *(_QWORD *)&a2[v6];
  v7[1] = v9;
  swift_retain();
  swift_retain();
  v10 = *(int *)(sub_1000BA294(&qword_100BCB330) + 32);
  v11 = (char *)v7 + v10;
  v12 = &v8[v10];
  v13 = (int *)type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, (uint64_t)v13))
  {
    v14 = sub_1000BA294(&qword_100BCB340);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v121 = v3;
    v122 = v5;
    v15 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v11, v12, v15);
    v16 = v13[5];
    v17 = &v11[v16];
    v18 = &v12[v16];
    v19 = *((_QWORD *)v18 + 1);
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *((_QWORD *)v17 + 1) = v19;
    v20 = v13[6];
    v21 = &v11[v20];
    v22 = &v12[v20];
    v23 = *((_QWORD *)v22 + 1);
    *(_QWORD *)v21 = *(_QWORD *)v22;
    *((_QWORD *)v21 + 1) = v23;
    v24 = v13[7];
    v25 = &v11[v24];
    v26 = &v12[v24];
    v27 = type metadata accessor for TimeZone(0);
    v28 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v27 - 8) + 16);
    swift_bridgeObjectRetain(v19);
    v29 = swift_bridgeObjectRetain(v23);
    v28(v25, v26, v27, v29);
    v30 = v13[8];
    v31 = &v11[v30];
    v32 = &v12[v30];
    v33 = sub_1000BA294(&qword_100BC4E68);
    v34 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16);
    v34(v31, v32, v33);
    v34(&v11[v13[9]], &v12[v13[9]], v33);
    v35 = v13[10];
    v36 = &v11[v35];
    v37 = &v12[v35];
    v38 = *((_QWORD *)v37 + 1);
    *(_QWORD *)v36 = *(_QWORD *)v37;
    *((_QWORD *)v36 + 1) = v38;
    v39 = v13[11];
    v40 = &v11[v39];
    v41 = &v12[v39];
    v42 = *((_QWORD *)v41 + 1);
    *(_QWORD *)v40 = *(_QWORD *)v41;
    *((_QWORD *)v40 + 1) = v42;
    *(_QWORD *)&v11[v13[12]] = *(_QWORD *)&v12[v13[12]];
    v11[v13[13]] = v12[v13[13]];
    v43 = v13[14];
    v44 = &v11[v43];
    v45 = &v12[v43];
    v46 = *((_QWORD *)v45 + 1);
    *(_QWORD *)v44 = *(_QWORD *)v45;
    *((_QWORD *)v44 + 1) = v46;
    v47 = v13[15];
    v48 = &v11[v47];
    v49 = &v12[v47];
    v50 = type metadata accessor for Precipitation(0);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v46);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v49, 1, v50))
    {
      v51 = sub_1000BA294(&qword_100BCB338);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v48, 0, 1, v50);
    }
    v11[v13[16]] = v12[v13[16]];
    v52 = v13[17];
    v53 = &v11[v52];
    v54 = &v12[v52];
    v55 = *((_QWORD *)v54 + 1);
    *(_QWORD *)v53 = *(_QWORD *)v54;
    *((_QWORD *)v53 + 1) = v55;
    v56 = v13[18];
    v57 = &v11[v56];
    v58 = &v12[v56];
    v59 = *((_QWORD *)v58 + 1);
    *(_QWORD *)v57 = *(_QWORD *)v58;
    *((_QWORD *)v57 + 1) = v59;
    v60 = v13[19];
    v61 = &v11[v60];
    v62 = &v12[v60];
    v63 = *((_QWORD *)v62 + 1);
    *(_QWORD *)v61 = *(_QWORD *)v62;
    *((_QWORD *)v61 + 1) = v63;
    v64 = v13[20];
    v65 = *(_QWORD *)&v12[v64];
    *(_QWORD *)&v11[v64] = v65;
    swift_bridgeObjectRetain(v55);
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRetain(v63);
    swift_bridgeObjectRetain(v65);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, (uint64_t)v13);
    v3 = v121;
    v5 = v122;
  }
  v66 = *(int *)(v3 + 24);
  v67 = &v5[v66];
  v68 = &a2[v66];
  v69 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v69 - 8) + 16))(v67, v68, v69);
  v70 = v13[5];
  v71 = &v67[v70];
  v72 = &v68[v70];
  v73 = v72[1];
  *v71 = *v72;
  v71[1] = v73;
  v74 = v13[6];
  v75 = &v67[v74];
  v76 = &v68[v74];
  v77 = v76[1];
  *v75 = *v76;
  v75[1] = v77;
  v78 = v13[7];
  v79 = &v67[v78];
  v80 = &v68[v78];
  v81 = type metadata accessor for TimeZone(0);
  v82 = *(void (**)(_BYTE *, _BYTE *, uint64_t, __n128))(*(_QWORD *)(v81 - 8) + 16);
  swift_bridgeObjectRetain(v73);
  v83 = swift_bridgeObjectRetain(v77);
  v82(v79, v80, v81, v83);
  v84 = v13[8];
  v85 = &v67[v84];
  v86 = &v68[v84];
  v87 = sub_1000BA294(&qword_100BC4E68);
  v88 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v87 - 8) + 16);
  v88(v85, v86, v87);
  v88(&v67[v13[9]], &v68[v13[9]], v87);
  v89 = v13[10];
  v90 = &v67[v89];
  v91 = &v68[v89];
  v92 = v91[1];
  *v90 = *v91;
  v90[1] = v92;
  v93 = v13[11];
  v94 = &v67[v93];
  v95 = &v68[v93];
  v96 = v95[1];
  *v94 = *v95;
  v94[1] = v96;
  *(_QWORD *)&v67[v13[12]] = *(_QWORD *)&v68[v13[12]];
  v67[v13[13]] = v68[v13[13]];
  v97 = v13[14];
  v98 = &v67[v97];
  v99 = &v68[v97];
  v100 = v99[1];
  *v98 = *v99;
  v98[1] = v100;
  v101 = v13[15];
  v102 = &v67[v101];
  v103 = &v68[v101];
  v104 = type metadata accessor for Precipitation(0);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v96);
  swift_bridgeObjectRetain(v100);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v103, 1, v104))
  {
    v105 = sub_1000BA294(&qword_100BCB338);
    memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v104 - 8) + 16))(v102, v103, v104);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v102, 0, 1, v104);
  }
  v67[v13[16]] = v68[v13[16]];
  v106 = v13[17];
  v107 = &v67[v106];
  v108 = &v68[v106];
  v109 = v108[1];
  *v107 = *v108;
  v107[1] = v109;
  v110 = v13[18];
  v111 = &v67[v110];
  v112 = &v68[v110];
  v113 = v112[1];
  *v111 = *v112;
  v111[1] = v113;
  v114 = v13[19];
  v115 = &v67[v114];
  v116 = &v68[v114];
  v117 = v116[1];
  *v115 = *v116;
  v115[1] = v117;
  v118 = v13[20];
  v119 = *(_QWORD *)&v68[v118];
  *(_QWORD *)&v67[v118] = v119;
  swift_bridgeObjectRetain(v109);
  swift_bridgeObjectRetain(v113);
  swift_bridgeObjectRetain(v117);
  swift_bridgeObjectRetain(v119);
  return v5;
}

_BYTE *sub_100209550(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t, __n128);
  __n128 v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE *v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  _BYTE *v135;
  _BYTE *v136;
  uint64_t v137;
  uint64_t v138;
  _BYTE *v139;
  _BYTE *v140;
  uint64_t v141;
  void (*v142)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  _BYTE *v156;
  _BYTE *v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _BYTE *v177;
  uint64_t v178;
  uint64_t v179;

  v3 = a3;
  v5 = a1;
  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = *(_QWORD *)&a1[v6];
  *(_QWORD *)&a1[v6] = *(_QWORD *)&a2[v6];
  swift_retain();
  swift_release(v9);
  v10 = *((_QWORD *)v7 + 1);
  *((_QWORD *)v7 + 1) = *((_QWORD *)v8 + 1);
  swift_retain();
  swift_release(v10);
  v11 = *(int *)(sub_1000BA294(&qword_100BCB330) + 32);
  v12 = &v7[v11];
  v13 = &v8[v11];
  v14 = (int *)type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
  v15 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, (uint64_t)v14);
  v16 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, (uint64_t)v14);
  if (!v15)
  {
    if (v16)
    {
      sub_100209EFC((uint64_t)v12);
      goto LABEL_7;
    }
    v179 = v3;
    v55 = v5;
    v56 = type metadata accessor for Date(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v56 - 8) + 24))(v12, v13, v56);
    v57 = v14[5];
    v58 = &v12[v57];
    v59 = &v13[v57];
    *v58 = *v59;
    v60 = v59[1];
    v58[1] = v60;
    swift_bridgeObjectRetain(v60);
    swift_bridgeObjectRelease();
    v61 = v14[6];
    v62 = &v12[v61];
    v63 = &v13[v61];
    *v62 = *v63;
    v64 = v63[1];
    v62[1] = v64;
    swift_bridgeObjectRetain(v64);
    swift_bridgeObjectRelease();
    v65 = v14[7];
    v66 = &v12[v65];
    v67 = &v13[v65];
    v68 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 24))(v66, v67, v68);
    v69 = v14[8];
    v70 = &v12[v69];
    v71 = &v13[v69];
    v72 = sub_1000BA294(&qword_100BC4E68);
    v73 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 24);
    v73(v70, v71, v72);
    v73(&v12[v14[9]], &v13[v14[9]], v72);
    v74 = v14[10];
    v75 = &v12[v74];
    v76 = &v13[v74];
    *v75 = *v76;
    v77 = v76[1];
    v75[1] = v77;
    swift_bridgeObjectRetain(v77);
    swift_bridgeObjectRelease();
    v78 = v14[11];
    v79 = &v12[v78];
    v80 = &v13[v78];
    *v79 = *v80;
    v81 = v80[1];
    v79[1] = v81;
    swift_bridgeObjectRetain(v81);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v12[v14[12]] = *(_QWORD *)&v13[v14[12]];
    v12[v14[13]] = v13[v14[13]];
    v82 = v14[14];
    v83 = &v12[v82];
    v84 = &v13[v82];
    *v83 = *v84;
    v85 = v84[1];
    v83[1] = v85;
    swift_bridgeObjectRetain(v85);
    swift_bridgeObjectRelease();
    v86 = v14[15];
    v87 = &v12[v86];
    v88 = &v13[v86];
    v89 = type metadata accessor for Precipitation(0);
    v90 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v87, 1, v89);
    v91 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v88, 1, v89);
    if (v90)
    {
      if (!v91)
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 16))(v87, v88, v89);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v87, 0, 1, v89);
LABEL_16:
        v12[v14[16]] = v13[v14[16]];
        v108 = v14[17];
        v109 = &v12[v108];
        v110 = &v13[v108];
        *v109 = *v110;
        v111 = v110[1];
        v109[1] = v111;
        swift_bridgeObjectRetain(v111);
        swift_bridgeObjectRelease();
        v112 = v14[18];
        v113 = &v12[v112];
        v114 = &v13[v112];
        *v113 = *v114;
        v115 = v114[1];
        v113[1] = v115;
        swift_bridgeObjectRetain(v115);
        swift_bridgeObjectRelease();
        v116 = v14[19];
        v117 = &v12[v116];
        v118 = &v13[v116];
        *v117 = *v118;
        v119 = v118[1];
        v117[1] = v119;
        swift_bridgeObjectRetain(v119);
        swift_bridgeObjectRelease();
        v120 = v14[20];
        v121 = *(_QWORD *)&v13[v120];
        *(_QWORD *)&v12[v120] = v121;
        swift_bridgeObjectRetain(v121);
        swift_bridgeObjectRelease();
        v5 = v55;
        v3 = v179;
        goto LABEL_17;
      }
    }
    else
    {
      v106 = *(_QWORD *)(v89 - 8);
      if (!v91)
      {
        (*(void (**)(char *, char *, uint64_t))(v106 + 24))(v87, v88, v89);
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v106 + 8))(v87, v89);
    }
    v107 = sub_1000BA294(&qword_100BCB338);
    memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
    goto LABEL_16;
  }
  if (v16)
  {
LABEL_7:
    v54 = sub_1000BA294(&qword_100BCB340);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_17;
  }
  v177 = v5;
  v178 = v3;
  v17 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v12, v13, v17);
  v18 = v14[5];
  v19 = &v12[v18];
  v20 = &v13[v18];
  *v19 = *v20;
  v21 = v20[1];
  v19[1] = v21;
  v22 = v14[6];
  v23 = &v12[v22];
  v24 = &v13[v22];
  *v23 = *v24;
  v25 = v24[1];
  v23[1] = v25;
  v26 = v14[7];
  v27 = &v12[v26];
  v28 = &v13[v26];
  v29 = type metadata accessor for TimeZone(0);
  v30 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v29 - 8) + 16);
  swift_bridgeObjectRetain(v21);
  v31 = swift_bridgeObjectRetain(v25);
  v30(v27, v28, v29, v31);
  v32 = v14[8];
  v33 = &v12[v32];
  v34 = &v13[v32];
  v35 = sub_1000BA294(&qword_100BC4E68);
  v36 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16);
  v36(v33, v34, v35);
  v36(&v12[v14[9]], &v13[v14[9]], v35);
  v37 = v14[10];
  v38 = &v12[v37];
  v39 = &v13[v37];
  *v38 = *v39;
  v40 = v39[1];
  v38[1] = v40;
  v41 = v14[11];
  v42 = &v12[v41];
  v43 = &v13[v41];
  *v42 = *v43;
  v44 = v43[1];
  v42[1] = v44;
  *(_QWORD *)&v12[v14[12]] = *(_QWORD *)&v13[v14[12]];
  v12[v14[13]] = v13[v14[13]];
  v45 = v14[14];
  v46 = &v12[v45];
  v47 = &v13[v45];
  *v46 = *v47;
  v48 = v47[1];
  v46[1] = v48;
  v49 = v14[15];
  v50 = &v12[v49];
  v51 = &v13[v49];
  v52 = type metadata accessor for Precipitation(0);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRetain(v48);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v51, 1, v52))
  {
    v53 = sub_1000BA294(&qword_100BCB338);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v50, v51, v52);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v50, 0, 1, v52);
  }
  v3 = v178;
  v12[v14[16]] = v13[v14[16]];
  v92 = v14[17];
  v93 = &v12[v92];
  v94 = &v13[v92];
  *v93 = *v94;
  v95 = v94[1];
  v93[1] = v95;
  v96 = v14[18];
  v97 = &v12[v96];
  v98 = &v13[v96];
  *v97 = *v98;
  v99 = v98[1];
  v97[1] = v99;
  v100 = v14[19];
  v101 = &v12[v100];
  v102 = &v13[v100];
  *v101 = *v102;
  v103 = v102[1];
  v101[1] = v103;
  v104 = v14[20];
  v105 = *(_QWORD *)&v13[v104];
  *(_QWORD *)&v12[v104] = v105;
  swift_bridgeObjectRetain(v95);
  swift_bridgeObjectRetain(v99);
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRetain(v105);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, (uint64_t)v14);
  v5 = v177;
LABEL_17:
  v122 = *(int *)(v3 + 24);
  v123 = &v5[v122];
  v124 = &a2[v122];
  v125 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v125 - 8) + 24))(v123, v124, v125);
  v126 = v14[5];
  v127 = &v123[v126];
  v128 = &v124[v126];
  *v127 = *v128;
  v129 = v128[1];
  v127[1] = v129;
  swift_bridgeObjectRetain(v129);
  swift_bridgeObjectRelease();
  v130 = v14[6];
  v131 = &v123[v130];
  v132 = &v124[v130];
  *v131 = *v132;
  v133 = v132[1];
  v131[1] = v133;
  swift_bridgeObjectRetain(v133);
  swift_bridgeObjectRelease();
  v134 = v14[7];
  v135 = &v123[v134];
  v136 = &v124[v134];
  v137 = type metadata accessor for TimeZone(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v137 - 8) + 24))(v135, v136, v137);
  v138 = v14[8];
  v139 = &v123[v138];
  v140 = &v124[v138];
  v141 = sub_1000BA294(&qword_100BC4E68);
  v142 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v141 - 8) + 24);
  v142(v139, v140, v141);
  v142(&v123[v14[9]], &v124[v14[9]], v141);
  v143 = v14[10];
  v144 = &v123[v143];
  v145 = &v124[v143];
  *v144 = *v145;
  v146 = v145[1];
  v144[1] = v146;
  swift_bridgeObjectRetain(v146);
  swift_bridgeObjectRelease();
  v147 = v14[11];
  v148 = &v123[v147];
  v149 = &v124[v147];
  *v148 = *v149;
  v150 = v149[1];
  v148[1] = v150;
  swift_bridgeObjectRetain(v150);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v123[v14[12]] = *(_QWORD *)&v124[v14[12]];
  v123[v14[13]] = v124[v14[13]];
  v151 = v14[14];
  v152 = &v123[v151];
  v153 = &v124[v151];
  *v152 = *v153;
  v154 = v153[1];
  v152[1] = v154;
  swift_bridgeObjectRetain(v154);
  swift_bridgeObjectRelease();
  v155 = v14[15];
  v156 = &v123[v155];
  v157 = &v124[v155];
  v158 = type metadata accessor for Precipitation(0);
  LODWORD(v139) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v156, 1, v158);
  v159 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v157, 1, v158);
  if (!(_DWORD)v139)
  {
    v160 = *(_QWORD *)(v158 - 8);
    if (!v159)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v160 + 24))(v156, v157, v158);
      goto LABEL_23;
    }
    (*(void (**)(_BYTE *, uint64_t))(v160 + 8))(v156, v158);
    goto LABEL_22;
  }
  if (v159)
  {
LABEL_22:
    v161 = sub_1000BA294(&qword_100BCB338);
    memcpy(v156, v157, *(_QWORD *)(*(_QWORD *)(v161 - 8) + 64));
    goto LABEL_23;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v158 - 8) + 16))(v156, v157, v158);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v156, 0, 1, v158);
LABEL_23:
  v123[v14[16]] = v124[v14[16]];
  v162 = v14[17];
  v163 = &v123[v162];
  v164 = &v124[v162];
  *v163 = *v164;
  v165 = v164[1];
  v163[1] = v165;
  swift_bridgeObjectRetain(v165);
  swift_bridgeObjectRelease();
  v166 = v14[18];
  v167 = &v123[v166];
  v168 = &v124[v166];
  *v167 = *v168;
  v169 = v168[1];
  v167[1] = v169;
  swift_bridgeObjectRetain(v169);
  swift_bridgeObjectRelease();
  v170 = v14[19];
  v171 = &v123[v170];
  v172 = &v124[v170];
  *v171 = *v172;
  v173 = v172[1];
  v171[1] = v173;
  swift_bridgeObjectRetain(v173);
  swift_bridgeObjectRelease();
  v174 = v14[20];
  v175 = *(_QWORD *)&v124[v174];
  *(_QWORD *)&v123[v174] = v175;
  swift_bridgeObjectRetain(v175);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100209EFC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_BYTE *sub_100209F38(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  void (*v42)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = *(_QWORD *)&a2[v6 + 8];
  *v7 = *(_QWORD *)&a2[v6];
  v7[1] = v9;
  v10 = *(int *)(sub_1000BA294(&qword_100BCB330) + 32);
  v11 = (char *)v7 + v10;
  v12 = &v8[v10];
  v13 = (int *)type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, (uint64_t)v13))
  {
    v14 = sub_1000BA294(&qword_100BCB340);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v11, v12, v15);
    *(_OWORD *)&v11[v13[5]] = *(_OWORD *)&v12[v13[5]];
    *(_OWORD *)&v11[v13[6]] = *(_OWORD *)&v12[v13[6]];
    v16 = v13[7];
    v17 = &v11[v16];
    v18 = &v12[v16];
    v19 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
    v20 = v13[8];
    v21 = &v11[v20];
    v22 = &v12[v20];
    v23 = sub_1000BA294(&qword_100BC4E68);
    v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32);
    v24(v21, v22, v23);
    v24(&v11[v13[9]], &v12[v13[9]], v23);
    *(_OWORD *)&v11[v13[10]] = *(_OWORD *)&v12[v13[10]];
    *(_OWORD *)&v11[v13[11]] = *(_OWORD *)&v12[v13[11]];
    *(_QWORD *)&v11[v13[12]] = *(_QWORD *)&v12[v13[12]];
    v11[v13[13]] = v12[v13[13]];
    *(_OWORD *)&v11[v13[14]] = *(_OWORD *)&v12[v13[14]];
    v25 = v13[15];
    v26 = &v11[v25];
    v27 = &v12[v25];
    v28 = type metadata accessor for Precipitation(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v27, 1, v28))
    {
      v29 = sub_1000BA294(&qword_100BCB338);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v26, 0, 1, v28);
    }
    v11[v13[16]] = v12[v13[16]];
    *(_OWORD *)&v11[v13[17]] = *(_OWORD *)&v12[v13[17]];
    *(_OWORD *)&v11[v13[18]] = *(_OWORD *)&v12[v13[18]];
    *(_OWORD *)&v11[v13[19]] = *(_OWORD *)&v12[v13[19]];
    *(_QWORD *)&v11[v13[20]] = *(_QWORD *)&v12[v13[20]];
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, (uint64_t)v13);
  }
  v30 = *(int *)(a3 + 24);
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
  *(_OWORD *)&v31[v13[5]] = *(_OWORD *)&v32[v13[5]];
  *(_OWORD *)&v31[v13[6]] = *(_OWORD *)&v32[v13[6]];
  v34 = v13[7];
  v35 = &v31[v34];
  v36 = &v32[v34];
  v37 = type metadata accessor for TimeZone(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
  v38 = v13[8];
  v39 = &v31[v38];
  v40 = &v32[v38];
  v41 = sub_1000BA294(&qword_100BC4E68);
  v42 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v41 - 8) + 32);
  v42(v39, v40, v41);
  v42(&v31[v13[9]], &v32[v13[9]], v41);
  *(_OWORD *)&v31[v13[10]] = *(_OWORD *)&v32[v13[10]];
  *(_OWORD *)&v31[v13[11]] = *(_OWORD *)&v32[v13[11]];
  *(_QWORD *)&v31[v13[12]] = *(_QWORD *)&v32[v13[12]];
  v31[v13[13]] = v32[v13[13]];
  *(_OWORD *)&v31[v13[14]] = *(_OWORD *)&v32[v13[14]];
  v43 = v13[15];
  v44 = &v31[v43];
  v45 = &v32[v43];
  v46 = type metadata accessor for Precipitation(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v45, 1, v46))
  {
    v47 = sub_1000BA294(&qword_100BCB338);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v44, 0, 1, v46);
  }
  v31[v13[16]] = v32[v13[16]];
  *(_OWORD *)&v31[v13[17]] = *(_OWORD *)&v32[v13[17]];
  *(_OWORD *)&v31[v13[18]] = *(_OWORD *)&v32[v13[18]];
  *(_OWORD *)&v31[v13[19]] = *(_OWORD *)&v32[v13[19]];
  *(_QWORD *)&v31[v13[20]] = *(_QWORD *)&v32[v13[20]];
  return a1;
}

_BYTE *sub_10020A358(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  _BYTE *v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  _BYTE *v110;
  uint64_t v111;
  void (*v112)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v113;
  _QWORD *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _BYTE *v129;
  _BYTE *v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = *(_QWORD *)&a1[v6];
  *v7 = *(_QWORD *)&a2[v6];
  swift_release(v9);
  v10 = v7[1];
  v7[1] = *((_QWORD *)v8 + 1);
  swift_release(v10);
  v11 = *(int *)(sub_1000BA294(&qword_100BCB330) + 32);
  v12 = (char *)v7 + v11;
  v13 = &v8[v11];
  v14 = (int *)type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
  v15 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, (uint64_t)v14);
  v16 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, (uint64_t)v14);
  if (!v15)
  {
    if (v16)
    {
      sub_100209EFC((uint64_t)v12);
      goto LABEL_7;
    }
    v33 = type metadata accessor for Date(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 40))(v12, v13, v33);
    v34 = v14[5];
    v35 = &v12[v34];
    v36 = (uint64_t *)&v13[v34];
    v38 = *v36;
    v37 = v36[1];
    *v35 = v38;
    v35[1] = v37;
    swift_bridgeObjectRelease();
    v39 = v14[6];
    v40 = &v12[v39];
    v41 = (uint64_t *)&v13[v39];
    v43 = *v41;
    v42 = v41[1];
    *v40 = v43;
    v40[1] = v42;
    swift_bridgeObjectRelease();
    v44 = v14[7];
    v45 = &v12[v44];
    v46 = &v13[v44];
    v47 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 40))(v45, v46, v47);
    v48 = v14[8];
    v49 = &v12[v48];
    v50 = &v13[v48];
    v51 = sub_1000BA294(&qword_100BC4E68);
    v52 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 40);
    v52(v49, v50, v51);
    v52(&v12[v14[9]], &v13[v14[9]], v51);
    v53 = v14[10];
    v54 = &v12[v53];
    v55 = (uint64_t *)&v13[v53];
    v57 = *v55;
    v56 = v55[1];
    *v54 = v57;
    v54[1] = v56;
    swift_bridgeObjectRelease();
    v58 = v14[11];
    v59 = &v12[v58];
    v60 = (uint64_t *)&v13[v58];
    v62 = *v60;
    v61 = v60[1];
    *v59 = v62;
    v59[1] = v61;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v12[v14[12]] = *(_QWORD *)&v13[v14[12]];
    v12[v14[13]] = v13[v14[13]];
    v63 = v14[14];
    v64 = &v12[v63];
    v65 = (uint64_t *)&v13[v63];
    v67 = *v65;
    v66 = v65[1];
    *v64 = v67;
    v64[1] = v66;
    swift_bridgeObjectRelease();
    v68 = v14[15];
    v69 = &v12[v68];
    v70 = &v13[v68];
    v71 = type metadata accessor for Precipitation(0);
    LODWORD(v52) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v69, 1, v71);
    v72 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v70, 1, v71);
    if ((_DWORD)v52)
    {
      if (!v72)
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 32))(v69, v70, v71);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v69, 0, 1, v71);
LABEL_16:
        v12[v14[16]] = v13[v14[16]];
        v75 = v14[17];
        v76 = &v12[v75];
        v77 = (uint64_t *)&v13[v75];
        v79 = *v77;
        v78 = v77[1];
        *v76 = v79;
        v76[1] = v78;
        swift_bridgeObjectRelease();
        v80 = v14[18];
        v81 = &v12[v80];
        v82 = (uint64_t *)&v13[v80];
        v84 = *v82;
        v83 = v82[1];
        *v81 = v84;
        v81[1] = v83;
        swift_bridgeObjectRelease();
        v85 = v14[19];
        v86 = &v12[v85];
        v87 = (uint64_t *)&v13[v85];
        v89 = *v87;
        v88 = v87[1];
        *v86 = v89;
        v86[1] = v88;
        swift_bridgeObjectRelease();
        *(_QWORD *)&v12[v14[20]] = *(_QWORD *)&v13[v14[20]];
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
    }
    else
    {
      v73 = *(_QWORD *)(v71 - 8);
      if (!v72)
      {
        (*(void (**)(char *, char *, uint64_t))(v73 + 40))(v69, v70, v71);
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v73 + 8))(v69, v71);
    }
    v74 = sub_1000BA294(&qword_100BCB338);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    goto LABEL_16;
  }
  if (v16)
  {
LABEL_7:
    v32 = sub_1000BA294(&qword_100BCB340);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_17;
  }
  v17 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v12, v13, v17);
  *(_OWORD *)&v12[v14[5]] = *(_OWORD *)&v13[v14[5]];
  *(_OWORD *)&v12[v14[6]] = *(_OWORD *)&v13[v14[6]];
  v18 = v14[7];
  v19 = &v12[v18];
  v20 = &v13[v18];
  v21 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
  v22 = v14[8];
  v23 = &v12[v22];
  v24 = &v13[v22];
  v25 = sub_1000BA294(&qword_100BC4E68);
  v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32);
  v26(v23, v24, v25);
  v26(&v12[v14[9]], &v13[v14[9]], v25);
  *(_OWORD *)&v12[v14[10]] = *(_OWORD *)&v13[v14[10]];
  *(_OWORD *)&v12[v14[11]] = *(_OWORD *)&v13[v14[11]];
  *(_QWORD *)&v12[v14[12]] = *(_QWORD *)&v13[v14[12]];
  v12[v14[13]] = v13[v14[13]];
  *(_OWORD *)&v12[v14[14]] = *(_OWORD *)&v13[v14[14]];
  v27 = v14[15];
  v28 = &v12[v27];
  v29 = &v13[v27];
  v30 = type metadata accessor for Precipitation(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v29, 1, v30))
  {
    v31 = sub_1000BA294(&qword_100BCB338);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v28, 0, 1, v30);
  }
  v12[v14[16]] = v13[v14[16]];
  *(_OWORD *)&v12[v14[17]] = *(_OWORD *)&v13[v14[17]];
  *(_OWORD *)&v12[v14[18]] = *(_OWORD *)&v13[v14[18]];
  *(_OWORD *)&v12[v14[19]] = *(_OWORD *)&v13[v14[19]];
  *(_QWORD *)&v12[v14[20]] = *(_QWORD *)&v13[v14[20]];
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, (uint64_t)v14);
LABEL_17:
  v90 = *(int *)(a3 + 24);
  v91 = &a1[v90];
  v92 = &a2[v90];
  v93 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v93 - 8) + 40))(v91, v92, v93);
  v94 = v14[5];
  v95 = &v91[v94];
  v96 = (uint64_t *)&v92[v94];
  v98 = *v96;
  v97 = v96[1];
  *v95 = v98;
  v95[1] = v97;
  swift_bridgeObjectRelease();
  v99 = v14[6];
  v100 = &v91[v99];
  v101 = (uint64_t *)&v92[v99];
  v103 = *v101;
  v102 = v101[1];
  *v100 = v103;
  v100[1] = v102;
  swift_bridgeObjectRelease();
  v104 = v14[7];
  v105 = &v91[v104];
  v106 = &v92[v104];
  v107 = type metadata accessor for TimeZone(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v107 - 8) + 40))(v105, v106, v107);
  v108 = v14[8];
  v109 = &v91[v108];
  v110 = &v92[v108];
  v111 = sub_1000BA294(&qword_100BC4E68);
  v112 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v111 - 8) + 40);
  v112(v109, v110, v111);
  v112(&v91[v14[9]], &v92[v14[9]], v111);
  v113 = v14[10];
  v114 = &v91[v113];
  v115 = (uint64_t *)&v92[v113];
  v117 = *v115;
  v116 = v115[1];
  *v114 = v117;
  v114[1] = v116;
  swift_bridgeObjectRelease();
  v118 = v14[11];
  v119 = &v91[v118];
  v120 = (uint64_t *)&v92[v118];
  v122 = *v120;
  v121 = v120[1];
  *v119 = v122;
  v119[1] = v121;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v91[v14[12]] = *(_QWORD *)&v92[v14[12]];
  v91[v14[13]] = v92[v14[13]];
  v123 = v14[14];
  v124 = &v91[v123];
  v125 = (uint64_t *)&v92[v123];
  v127 = *v125;
  v126 = v125[1];
  *v124 = v127;
  v124[1] = v126;
  swift_bridgeObjectRelease();
  v128 = v14[15];
  v129 = &v91[v128];
  v130 = &v92[v128];
  v131 = type metadata accessor for Precipitation(0);
  LODWORD(v112) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v129, 1, v131);
  v132 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v130, 1, v131);
  if (!(_DWORD)v112)
  {
    v133 = *(_QWORD *)(v131 - 8);
    if (!v132)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v133 + 40))(v129, v130, v131);
      goto LABEL_23;
    }
    (*(void (**)(_BYTE *, uint64_t))(v133 + 8))(v129, v131);
    goto LABEL_22;
  }
  if (v132)
  {
LABEL_22:
    v134 = sub_1000BA294(&qword_100BCB338);
    memcpy(v129, v130, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
    goto LABEL_23;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v131 - 8) + 32))(v129, v130, v131);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v129, 0, 1, v131);
LABEL_23:
  v91[v14[16]] = v92[v14[16]];
  v135 = v14[17];
  v136 = &v91[v135];
  v137 = (uint64_t *)&v92[v135];
  v139 = *v137;
  v138 = v137[1];
  *v136 = v139;
  v136[1] = v138;
  swift_bridgeObjectRelease();
  v140 = v14[18];
  v141 = &v91[v140];
  v142 = (uint64_t *)&v92[v140];
  v144 = *v142;
  v143 = v142[1];
  *v141 = v144;
  v141[1] = v143;
  swift_bridgeObjectRelease();
  v145 = v14[19];
  v146 = &v91[v145];
  v147 = (uint64_t *)&v92[v145];
  v149 = *v147;
  v148 = v147[1];
  *v146 = v149;
  v146[1] = v148;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v91[v14[20]] = *(_QWORD *)&v92[v14[20]];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10020AAF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10020AB04);
}

uint64_t sub_10020AB04(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = sub_1000BA294(&qword_100BCB330);
    if (*(_DWORD *)(*(_QWORD *)(v10 - 8) + 84) == (_DWORD)a2)
    {
      v11 = v10;
      v12 = *(int *)(a3 + 20);
    }
    else
    {
      v11 = sub_1000C5B88();
      v12 = *(int *)(a3 + 24);
    }
    return _s7Weather24LocationCompositionStateOwet_0((uint64_t)&a1[v12], a2, v11);
  }
}

uint64_t sub_10020AB9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10020ABA8);
}

_BYTE *sub_10020ABA8(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v8 = sub_1000BA294(&qword_100BCB330);
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
    {
      v9 = v8;
      v10 = *(int *)(a4 + 20);
    }
    else
    {
      v9 = sub_1000C5B88();
      v10 = *(int *)(a4 + 24);
    }
    return (_BYTE *)_s7Weather24LocationCompositionStateOwst_0((uint64_t)&v5[v10], a2, a2, v9);
  }
  return result;
}

void sub_10020AC38(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v6[0] = &unk_100988F60;
  sub_100154330(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

uint64_t sub_10020ACC8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AACB2C, 1);
}

uint64_t sub_10020ACD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  char v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v1 = type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
  __chkstk_darwin(v1);
  v24 = (uint64_t)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000BA294(&qword_100BCB410);
  __chkstk_darwin(v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100BCB340);
  __chkstk_darwin(v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v23 - v10;
  __chkstk_darwin(v12);
  v14 = (char *)&v23 - v13;
  v15 = type metadata accessor for DailyForecastRowViewButtonStyle(0);
  v16 = sub_1000BA294(&qword_100BCB330);
  Binding.wrappedValue.getter(v16);
  sub_100095B78(v0 + *(int *)(v15 + 24), (uint64_t)v11, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v1);
  v17 = (uint64_t)&v5[*(int *)(v3 + 48)];
  sub_10003773C((uint64_t)v14, (uint64_t)v5, &qword_100BCB340);
  sub_10003773C((uint64_t)v11, v17, &qword_100BCB340);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v5, 1, v1) == 1)
  {
    sub_10020BEA8((uint64_t)v11, &qword_100BCB340);
    sub_10020BEA8((uint64_t)v14, &qword_100BCB340);
    v18 = _s7Weather24LocationCompositionStateOwet_0(v17, 1, v1);
    if (v18 == 1)
      v19 = &qword_100BCB340;
    else
      v19 = &qword_100BCB410;
    if (v18 == 1)
      v20 = -1;
    else
      v20 = 0;
  }
  else
  {
    sub_10003773C((uint64_t)v5, (uint64_t)v8, &qword_100BCB340);
    if (_s7Weather24LocationCompositionStateOwet_0(v17, 1, v1) == 1)
    {
      sub_10020BEA8((uint64_t)v11, &qword_100BCB340);
      sub_10020BEA8((uint64_t)v14, &qword_100BCB340);
      sub_100209EFC((uint64_t)v8);
      v20 = 0;
      v19 = &qword_100BCB410;
    }
    else
    {
      v21 = v24;
      sub_10007C77C(v17, v24, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
      v20 = sub_10010C890((uint64_t)v8, v21);
      sub_100209EFC(v21);
      v19 = &qword_100BCB340;
      sub_10020BEA8((uint64_t)v11, &qword_100BCB340);
      sub_10020BEA8((uint64_t)v14, &qword_100BCB340);
      sub_100209EFC((uint64_t)v8);
    }
  }
  sub_10020BEA8((uint64_t)v5, v19);
  return v20 & 1;
}

void sub_10020AFA8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v3 = (uint64_t)v2;
  v43 = a1;
  v52 = a2;
  v4 = sub_1000D9BBC();
  v49 = *(_QWORD *)(v4 - 8);
  v50 = v4;
  v51 = *(_QWORD *)(v49 + 64);
  __chkstk_darwin(v4);
  v48 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000C35EC();
  v45 = *(_QWORD *)(v6 - 8);
  v41 = *(_QWORD *)(v45 + 64);
  __chkstk_darwin(v6);
  v47 = (uint64_t)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v44 = (uint64_t)&v41 - v9;
  v10 = type metadata accessor for PrimitiveButtonStyleConfiguration.Label(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000BA294(&qword_100BCB3E8);
  v46 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  PrimitiveButtonStyleConfiguration.label.getter(v17);
  v18 = *v2;
  v19 = sub_10020ACD8();
  v20 = v19;
  v21 = static Alignment.center.getter(v19);
  v23 = v22;
  v24 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v42 = v16;
  v24(v16, v13, v10);
  v25 = &v16[*(int *)(v14 + 36)];
  *v25 = v18;
  v25[1] = v20 & 1;
  *(_OWORD *)(v25 + 8) = xmmword_100988F10;
  *((_QWORD *)v25 + 3) = v21;
  *((_QWORD *)v25 + 4) = v23;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v26 = v44;
  sub_100095B78(v3, v44, type metadata accessor for DailyForecastRowViewButtonStyle);
  v27 = *(unsigned __int8 *)(v45 + 80);
  v28 = (v27 + 16) & ~v27;
  v29 = v28 + v41;
  v30 = v27 | 7;
  v31 = swift_allocObject(&unk_100B64938, v28 + v41, v27 | 7);
  sub_10007C77C(v26, v31 + v28, type metadata accessor for DailyForecastRowViewButtonStyle);
  v32 = v47;
  sub_100095B78(v3, v47, type metadata accessor for DailyForecastRowViewButtonStyle);
  v34 = v48;
  v33 = v49;
  v35 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v48, v43, v50);
  v36 = *(unsigned __int8 *)(v33 + 80);
  v37 = (v29 + v36) & ~v36;
  v38 = swift_allocObject(&unk_100B64960, v37 + v51, v30 | v36);
  sub_10007C77C(v32, v38 + v28, type metadata accessor for DailyForecastRowViewButtonStyle);
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v38 + v37, v34, v35);
  v39 = sub_10020BCE8();
  v40 = (uint64_t)v42;
  View._onButtonGesture(pressing:perform:)(sub_10020B978, v31, sub_10020BC90, v38, v46, v39);
  swift_release(v31);
  swift_release(v38);
  sub_10020BEA8(v40, &qword_100BCB3E8);
}

void sub_10020B2A4(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
  __chkstk_darwin(v4);
  v38 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100BCB410);
  __chkstk_darwin(v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BCB340);
  __chkstk_darwin(v9);
  v39 = (uint64_t)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v36 - v12;
  __chkstk_darwin(v14);
  v16 = (char *)&v36 - v15;
  __chkstk_darwin(v17);
  v19 = (char *)&v36 - v18;
  __chkstk_darwin(v20);
  v22 = (char *)&v36 - v21;
  v23 = type metadata accessor for DailyForecastRowViewButtonStyle(0);
  v24 = v23;
  if ((a1 & 1) != 0)
  {
    sub_100095B78(a2 + *(int *)(v23 + 24), (uint64_t)v22, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v22, 0, 1, v4);
    sub_10003773C((uint64_t)v22, (uint64_t)v19, &qword_100BCB340);
    v25 = sub_1000BA294(&qword_100BCB330);
    v26 = v19;
LABEL_11:
    Binding.wrappedValue.setter(v26, v25);
    v31 = (uint64_t)v22;
    v30 = &qword_100BCB340;
    goto LABEL_12;
  }
  v37 = sub_1000BA294(&qword_100BCB330);
  Binding.wrappedValue.getter(v37);
  sub_100095B78(a2 + *(int *)(v24 + 24), (uint64_t)v13, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, v4);
  v27 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_10003773C((uint64_t)v16, (uint64_t)v8, &qword_100BCB340);
  sub_10003773C((uint64_t)v13, v27, &qword_100BCB340);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v4) == 1)
  {
    sub_10020BEA8((uint64_t)v13, &qword_100BCB340);
    sub_10020BEA8((uint64_t)v16, &qword_100BCB340);
    if (_s7Weather24LocationCompositionStateOwet_0(v27, 1, v4) == 1)
    {
      v28 = (uint64_t)v19;
      sub_10020BEA8((uint64_t)v8, &qword_100BCB340);
LABEL_10:
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v22, 1, 1, v4);
      sub_10003773C((uint64_t)v22, v28, &qword_100BCB340);
      v26 = (char *)v28;
      v25 = v37;
      goto LABEL_11;
    }
  }
  else
  {
    v29 = v39;
    sub_10003773C((uint64_t)v8, v39, &qword_100BCB340);
    if (_s7Weather24LocationCompositionStateOwet_0(v27, 1, v4) != 1)
    {
      v28 = (uint64_t)v19;
      v32 = v27;
      v33 = v38;
      sub_10007C77C(v32, v38, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
      v34 = v29;
      v35 = sub_10010C890(v29, v33);
      sub_100209EFC(v33);
      sub_10020BEA8((uint64_t)v13, &qword_100BCB340);
      sub_10020BEA8((uint64_t)v16, &qword_100BCB340);
      sub_100209EFC(v34);
      sub_10020BEA8((uint64_t)v8, &qword_100BCB340);
      if ((v35 & 1) == 0)
        return;
      goto LABEL_10;
    }
    sub_10020BEA8((uint64_t)v13, &qword_100BCB340);
    sub_10020BEA8((uint64_t)v16, &qword_100BCB340);
    sub_100209EFC(v29);
  }
  v30 = &qword_100BCB410;
  v31 = (uint64_t)v8;
LABEL_12:
  sub_10020BEA8(v31, v30);
}

void sub_10020B67C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD aBlock[5];
  uint64_t v19;

  v2 = type metadata accessor for DailyForecastRowViewButtonStyle(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = sub_1000BA294(&qword_100BCB340);
  __chkstk_darwin(v5);
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)aBlock - v9;
  sub_100095B78(a1 + *(int *)(v2 + 24), (uint64_t)aBlock - v9, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
  v11 = type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v11);
  sub_10003773C((uint64_t)v10, (uint64_t)v7, &qword_100BCB340);
  v12 = sub_1000BA294(&qword_100BCB330);
  Binding.wrappedValue.setter(v7, v12);
  sub_10020BEA8((uint64_t)v10, &qword_100BCB340);
  PrimitiveButtonStyleConfiguration.trigger()();
  v13 = (void *)objc_opt_self(CATransaction);
  sub_100095B78(a1, (uint64_t)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for DailyForecastRowViewButtonStyle);
  v14 = *(unsigned __int8 *)(v3 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = swift_allocObject(&unk_100B64988, v15 + v4, v14 | 7);
  sub_10007C77C((uint64_t)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15, type metadata accessor for DailyForecastRowViewButtonStyle);
  aBlock[4] = sub_10020BDB0;
  v19 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100121D84;
  aBlock[3] = &unk_100B649A0;
  v17 = _Block_copy(aBlock);
  objc_msgSend(v13, "setCompletionBlock:", v17, swift_release(v19).n128_f64[0]);
  _Block_release(v17);
}

void sub_10020B890()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = sub_1000BA294(&qword_100BCB340);
  __chkstk_darwin(v0);
  v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v5 = (char *)&v8 - v4;
  v6 = type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v5, 1, 1, v6);
  type metadata accessor for DailyForecastRowViewButtonStyle(0);
  sub_10003773C((uint64_t)v5, (uint64_t)v2, &qword_100BCB340);
  v7 = sub_1000BA294(&qword_100BCB330);
  Binding.wrappedValue.setter(v2, v7);
  sub_10020BEA8((uint64_t)v5, &qword_100BCB340);
}

void sub_10020B978(char a1)
{
  uint64_t v1;
  uint64_t v3;

  sub_1000C35EC();
  sub_1000BA550();
  sub_10020B2A4(a1, v1 + v3);
}

uint64_t sub_10020B9A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = v0;
  v2 = sub_1000C35EC();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v32 = *(_QWORD *)(v3 + 64);
  v33 = sub_1000D9BBC();
  v5 = *(_QWORD *)(v33 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v31 = *(_QWORD *)(v5 + 64);
  v7 = v0 + ((v4 + 16) & ~v4);
  v8 = (_QWORD *)(v7 + *(int *)(v2 + 20));
  swift_release(*v8);
  swift_release(v8[1]);
  v9 = (uint64_t)v8 + *(int *)(sub_1000BA294(&qword_100BCB330) + 32);
  v10 = (int *)sub_1000C5B88();
  if (!_s7Weather24LocationCompositionStateOwet_0(v9, 1, (uint64_t)v10))
  {
    v30 = v0;
    v11 = sub_100098778();
    sub_1000989A0(v11);
    sub_1000BA548(v9 + v10[5]);
    sub_1000BA548(v9 + v10[6]);
    v12 = v9 + v10[7];
    sub_100099928();
    sub_1000C092C();
    v13(v12);
    v14 = v9 + v10[8];
    v15 = sub_1000BA294(&qword_100BC4E68);
    v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8);
    v16(v14, v15);
    v16(v9 + v10[9], v15);
    sub_1000BA548(v9 + v10[10]);
    sub_1000BA548(v9 + v10[11]);
    sub_1000BA548(v9 + v10[14]);
    v17 = v9 + v10[15];
    v18 = sub_1000C51E4();
    if (!_s7Weather24LocationCompositionStateOwet_0(v17, 1, v18))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
    sub_1000BA548(v9 + v10[17]);
    sub_1000BA548(v9 + v10[18]);
    sub_1000BA548(v9 + v10[19]);
    swift_bridgeObjectRelease();
    v1 = v30;
  }
  v19 = v7 + *(int *)(v2 + 24);
  v20 = sub_100098778();
  sub_1000B2568(v20);
  sub_1000BA548(v19 + v10[5]);
  sub_1000BA548(v19 + v10[6]);
  v21 = sub_100099928();
  sub_1000989A0(v21);
  v22 = v19 + v10[8];
  v23 = sub_1000BA294(&qword_100BC4E68);
  v24 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8);
  v24(v22, v23);
  v24(v19 + v10[9], v23);
  sub_1000BA548(v19 + v10[10]);
  sub_1000BA548(v19 + v10[11]);
  sub_1000BA548(v19 + v10[14]);
  v25 = sub_1000C51E4();
  if (!sub_1000C24F4(v25))
    sub_1000BBCFC();
  v26 = v4 | v6 | 7;
  v27 = (((v4 + 16) & ~v4) + v32 + v6) & ~v6;
  sub_1000BA548(v19 + v10[17]);
  sub_1000BA548(v19 + v10[18]);
  sub_1000BA548(v19 + v10[19]);
  v28 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, __n128))(v5 + 8))(v1 + v27, v33, v28);
  return swift_deallocObject(v1, v27 + v31, v26);
}

void sub_10020BC90()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = sub_1000C35EC();
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  sub_1000D9BBC();
  sub_10020B67C(v0 + v2);
}

unint64_t sub_10020BCE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCB3F0;
  if (!qword_100BCB3F0)
  {
    v1 = sub_100075EB0(&qword_100BCB3E8);
    sub_10020BD6C();
    sub_10003D310(&qword_100BCB400, &qword_100BCB408, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCB3F0);
  }
  return result;
}

unint64_t sub_10020BD6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCB3F8;
  if (!qword_100BCB3F8)
  {
    v1 = type metadata accessor for PrimitiveButtonStyleConfiguration.Label(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for PrimitiveButtonStyleConfiguration.Label, v1);
    atomic_store(result, (unint64_t *)&qword_100BCB3F8);
  }
  return result;
}

void sub_10020BDB0()
{
  sub_1000C35EC();
  sub_1000BA550();
  sub_10020B890();
}

uint64_t getEnumTagSinglePayload for DailyComponentForecastRowBackgroundView(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;

  if (a2)
  {
    if (a2 >= 0xFF && a1[24])
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *a1;
      v4 = v3 >= 2;
      v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DailyComponentForecastRowBackgroundView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

uint64_t sub_10020BE5C()
{
  _QWORD v1[2];

  v1[0] = sub_100075EB0(&qword_100BCB3E8);
  v1[1] = sub_10020BCE8();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View._onButtonGesture(pressing:perform:)>>, 1);
}

void sub_10020BEA8(uint64_t a1, uint64_t *a2)
{
  void (*v3)(uint64_t);

  sub_1000BA294(a2);
  sub_1000C092C();
  v3(a1);
  sub_10004A298();
}

uint64_t sub_10020BEDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC7Weather27PagingContentOffsetsStorage__offsets;
  v2 = sub_1000BA294(&qword_100BCB540);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10020BF30()
{
  return type metadata accessor for PagingContentOffsetsStorage(0);
}

uint64_t getEnumTagSinglePayload for PagingContentOffsets(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PagingContentOffsets(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 41) = v3;
  return result;
}

uint64_t sub_10020BF90(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 16))
      return 0;
  }
  else
  {
    if ((*(_BYTE *)(a2 + 16) & 1) != 0)
      return 0;
    if (*(double *)a1 != *(double *)a2 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0)
      return 0;
  }
  else
  {
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
      return 0;
    if (*(double *)(a1 + 24) != *(double *)(a2 + 24) || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  return 1;
}

uint64_t sub_10020C200(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = type metadata accessor for NotificationsOptInAction(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  sub_100080C0C(a1, (uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for NotificationsOptInAction);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_100B64B70, v7 + v5, v6 | 7);
  *(_QWORD *)(v8 + 16) = v1;
  sub_10007802C((uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7, type metadata accessor for NotificationsOptInAction);
  swift_retain();
  asyncMain(block:)(sub_10020CA14, v8);
  return swift_release(v8);
}

void sub_10020C2D4(uint64_t a1, void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;

  v7 = type metadata accessor for MainAction(0);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_1000BCED8();
  v9 = *(uint64_t (**)(uint64_t))(a1 + 16);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 24);
    a2(0);
    v11 = sub_1000DA8D4();
    swift_storeEnumTagMultiPayload(v11, v12, 4);
    type metadata accessor for ViewAction(0);
    v13 = sub_1000DA8D4();
    swift_storeEnumTagMultiPayload(v13, v14, a3);
    swift_storeEnumTagMultiPayload(v3, v7, 6);
    v16 = 0;
    memset(v15, 0, sizeof(v15));
    swift_retain();
    sub_1000A5EBC(v3, (uint64_t)v15, v9);
    sub_100021A14((uint64_t)v15, (uint64_t *)&unk_100BFFA10);
    sub_1000215BC(v3, type metadata accessor for MainAction);
    sub_1000BF8D0((uint64_t)v9, v10);
  }
  sub_10004A2A0();
}

uint64_t sub_10020C3BC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[2];
  uint64_t v13;

  v2 = *a1;
  v3 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v3);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100BC1F10 != -1)
    swift_once(&qword_100BC1F10, sub_10015B0AC);
  v6 = qword_100CAE5C0;
  LOBYTE(v12[0]) = 1;
  sub_100127C3C(&qword_100BCB638);
  result = Updatable.save<A>(setting:value:)(v6, v12, v2, v7);
  v9 = (uint64_t (*)(uint64_t))a1[2];
  if (v9)
  {
    v10 = a1[3];
    v11 = type metadata accessor for EnvironmentAction(0);
    swift_storeEnumTagMultiPayload(v5, v11, 12);
    swift_storeEnumTagMultiPayload(v5, v3, 2);
    v13 = 0;
    memset(v12, 0, sizeof(v12));
    swift_retain();
    sub_1000A5EBC((uint64_t)v5, (uint64_t)v12, v9);
    sub_100021A14((uint64_t)v12, (uint64_t *)&unk_100BFFA10);
    sub_1000215BC((uint64_t)v5, type metadata accessor for MainAction);
    return sub_1000BF8D0((uint64_t)v9, v10);
  }
  return result;
}

void sub_10020C514(uint64_t a1, char a2)
{
  _BYTE *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  v5 = type metadata accessor for MainAction(0);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_1000BCED8();
  v7 = *(uint64_t (**)(uint64_t))(a1 + 16);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 24);
    *v2 = a2;
    type metadata accessor for ModalViewAction(0);
    v9 = sub_1000DA8D4();
    swift_storeEnumTagMultiPayload(v9, v10, 1);
    swift_storeEnumTagMultiPayload(v2, v5, 7);
    v12 = 0;
    memset(v11, 0, sizeof(v11));
    swift_retain();
    sub_1000A5EBC((uint64_t)v2, (uint64_t)v11, v7);
    sub_100021A14((uint64_t)v11, (uint64_t *)&unk_100BFFA10);
    sub_1000215BC((uint64_t)v2, type metadata accessor for MainAction);
    sub_1000BF8D0((uint64_t)v7, v8);
  }
  sub_10004A2A0();
}

void sub_10020C5E8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v0 = type metadata accessor for NotificationsOptInAction(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload(v2, v3, 10);
  sub_10020C200((uint64_t)v2);
  sub_1000215BC((uint64_t)v2, type metadata accessor for NotificationsOptInAction);
}

uint64_t sub_10020C678(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  v4 = type metadata accessor for MainAction(0);
  result = __chkstk_darwin(v4);
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = (char *)v11 - v7;
  v9 = *(uint64_t (**)(uint64_t))(a1 + 16);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 24);
    sub_100080C0C(a2, (uint64_t)v11 - v7, type metadata accessor for NotificationsOptInAction);
    swift_storeEnumTagMultiPayload(v8, v4, 5);
    v12 = 0;
    memset(v11, 0, sizeof(v11));
    swift_retain();
    sub_1000A5EBC((uint64_t)v8, (uint64_t)v11, v9);
    sub_100021A14((uint64_t)v11, (uint64_t *)&unk_100BFFA10);
    sub_1000215BC((uint64_t)v8, type metadata accessor for MainAction);
    return sub_1000BF8D0((uint64_t)v9, v10);
  }
  return result;
}

uint64_t sub_10020C76C(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE *v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  v4 = type metadata accessor for MainAction(0);
  result = __chkstk_darwin(v4);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(uint64_t (**)(uint64_t))(a1 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 24);
    *v7 = a2;
    v10 = type metadata accessor for NotificationsOptInAction(0);
    swift_storeEnumTagMultiPayload(v7, v10, 1);
    swift_storeEnumTagMultiPayload(v7, v4, 5);
    v12 = 0;
    memset(v11, 0, sizeof(v11));
    swift_retain();
    sub_1000A5EBC((uint64_t)v7, (uint64_t)v11, v8);
    sub_100021A14((uint64_t)v11, (uint64_t *)&unk_100BFFA10);
    sub_1000215BC((uint64_t)v7, type metadata accessor for MainAction);
    return sub_1000BF8D0((uint64_t)v8, v9);
  }
  return result;
}

uint64_t *sub_10020C868()
{
  uint64_t *v0;

  sub_1000BF8D0(v0[2], v0[3]);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 4);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 9);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 14);
  swift_release(v0[19]);
  swift_release(v0[20]);
  return v0;
}

uint64_t sub_10020C8AC()
{
  uint64_t v0;

  sub_10020C868();
  return swift_deallocClassInstance(v0, 168, 7);
}

void sub_10020C8CC()
{
  sub_10020C5E8();
}

void sub_10020C8E4()
{
  uint64_t v0;

  sub_10020C514(v0, 2);
}

uint64_t sub_10020C900()
{
  uint64_t *v0;

  return sub_10020C3BC(v0);
}

void sub_10020C908()
{
  uint64_t v0;

  sub_10020C514(v0, 1);
}

void sub_10020C924()
{
  uint64_t v0;

  sub_10020C2D4(v0, (void (*)(_QWORD))type metadata accessor for LocationViewerViewAction, 1);
}

void sub_10020C948()
{
  uint64_t v0;

  sub_10020C2D4(v0, (void (*)(_QWORD))type metadata accessor for ListViewAction, 0);
}

uint64_t sub_10020C96C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;

  v1 = *(_QWORD *)(type metadata accessor for NotificationsOptInAction(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 24) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0 + v3);
  switch(EnumCaseMultiPayload)
  {
    case 4:
      v6 = type metadata accessor for Date(0);
      goto LABEL_6;
    case 3:
      swift_bridgeObjectRelease();
      return swift_deallocObject(v0, v3 + v4, v2 | 7);
    case 2:
      v6 = type metadata accessor for Location(0);
LABEL_6:
      sub_10003BC44(v6);
      break;
  }
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_10020CA14()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for NotificationsOptInAction(0) - 8) + 80);
  return sub_10020C678(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_10020CA44()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_10020CA68()
{
  uint64_t v0;

  return sub_10020C76C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

_QWORD *sub_10020CA74(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain(a1);
    v5 = 0;
    v6 = _swiftEmptyArrayStorage;
    do
    {
      if (*(_QWORD *)(a2 + 16))
      {
        v7 = *(unsigned __int8 *)(a1 + v5 + 32);
        v8 = sub_10016C75C(v7);
        if ((v9 & 1) != 0)
        {
          v10 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v8);
          swift_retain();
          UVIndex.ExposureCategory.rangeValue.getter(v7);
          v11 = Gradient.Stop.init(color:location:)(v10);
          v13 = v12;
          if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
          {
            sub_1005FED6C();
            v6 = v16;
          }
          v14 = v6[2];
          if (v14 >= v6[3] >> 1)
          {
            sub_1005FED6C();
            v6 = v17;
          }
          v6[2] = v14 + 1;
          v15 = &v6[2 * v14];
          v15[4] = v11;
          v15[5] = v13;
        }
      }
      ++v5;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    swift_bridgeObjectRelease(a2);
    return _swiftEmptyArrayStorage;
  }
  return v6;
}

uint64_t sub_10020CBD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10020CDC4(a1, (uint64_t (*)(_QWORD))&type metadata accessor for DetailChartDataElement, a2);
}

uint64_t sub_10020CBDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10020CC48(a1, type metadata accessor for ConditionDetailLegend, a2);
}

uint64_t sub_10020CBE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10020CDC4(a1, (uint64_t (*)(_QWORD))&type metadata accessor for HourWeather, a2);
}

uint64_t sub_10020CBF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10020CC48(a1, type metadata accessor for DayPickerViewModel.CalendarDayViewModel, a2);
}

uint64_t sub_10020CC00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10020CC48(a1, type metadata accessor for ScrubberDay, a2);
}

uint64_t sub_10020CC0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10020CC48(a1, type metadata accessor for ScrubberHour, a2);
}

uint64_t sub_10020CC18(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
    return *(_QWORD *)(a1 + 8 * v1 + 24);
  else
    return 0;
}

uint64_t sub_10020CC3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10020CC48(a1, type metadata accessor for ComparisonCapsuleViewModel.Row, a2);
}

uint64_t sub_10020CC48@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v7 = v5 - 1;
    v8 = a2(0);
    sub_1000BBD24();
    sub_10000AB54(a1 + v9 + *(_QWORD *)(v10 + 72) * v7, a3, a2);
    v11 = a3;
    v12 = 0;
    v13 = 1;
    v14 = v8;
  }
  else
  {
    a2(0);
    v11 = sub_1000C34B8();
  }
  return _s7Weather24LocationCompositionStateOwst_0(v11, v12, v13, v14);
}

uint64_t sub_10020CCD0@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v4 = (uint64_t *)(result + 40 * v3);
    v6 = *(v4 - 1);
    v5 = *v4;
    v7 = (void *)v4[1];
    v8 = v4[2];
    v9 = v4[3];
    sub_1000989F8();
    v10 = v7;
    result = sub_1000860DC();
  }
  else
  {
    v6 = 0;
    v5 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
  }
  *a2 = v6;
  a2[1] = v5;
  a2[2] = v7;
  a2[3] = v8;
  a2[4] = v9;
  return result;
}

uint64_t sub_10020CD48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(a1 + 32 * v1);
  sub_1000989F8();
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_10020CDAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10020CDC4(a1, (uint64_t (*)(_QWORD))&type metadata accessor for PrecipitationTotalPlatterViewModel.SectionModel, a2);
}

uint64_t sub_10020CDB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10020CDC4(a1, (uint64_t (*)(_QWORD))&type metadata accessor for PrecipitationTotalPlatterViewModel.RowModel, a2);
}

uint64_t sub_10020CDC4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v6 = v4 - 1;
    v7 = sub_1000BE9A8(a1, a2);
    sub_1000BBD24();
    sub_100089084(a3, a1 + v8 + *(_QWORD *)(v9 + 72) * v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16));
    return sub_1000987C4(a3, 0, 1, v7);
  }
  else
  {
    sub_1000BE9A8(a1, a2);
    v11 = sub_1000C34B8();
    return sub_1000987C4(v11, v12, v13, v14);
  }
}

id sub_10020CE30()
{
  id result;

  result = sub_10020CE4C();
  qword_100CAE4D8 = (uint64_t)result;
  return result;
}

id sub_10020CE4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  Class isa;
  NSString v6;
  uint64_t v8;

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  static Locale.autoupdatingCurrent.getter();
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  objc_msgSend(v4, "setLocale:", isa);

  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setLocalizedDateFormatFromTemplate:", v6);

  objc_msgSend(v4, "setTimeStyle:", 1);
  return v4;
}

uint64_t sub_10020CF4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = type metadata accessor for Date(0);
  sub_10000F1C8((unint64_t *)&qword_100BC3588, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  type metadata accessor for DetailChartViewModelFactory.FormattedHoursCacheKey(0);
  v4 = type metadata accessor for TimeZone(0);
  sub_10000F1C8(&qword_100BCBA30, (uint64_t (*)(uint64_t))&type metadata accessor for TimeZone);
  return dispatch thunk of Hashable.hash(into:)(a1, v4, v5);
}

uint64_t sub_10020CFF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((static Date.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v4 = *(int *)(type metadata accessor for DetailChartViewModelFactory.FormattedHoursCacheKey(0) + 20);
  return static TimeZone.== infix(_:_:)(a1 + v4, a2 + v4);
}

Swift::Int sub_10020D03C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  v0 = type metadata accessor for Date(0);
  sub_10000F1C8((unint64_t *)&qword_100BC3588, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)(v5, v0, v1);
  type metadata accessor for DetailChartViewModelFactory.FormattedHoursCacheKey(0);
  v2 = type metadata accessor for TimeZone(0);
  sub_10000F1C8(&qword_100BCBA30, (uint64_t (*)(uint64_t))&type metadata accessor for TimeZone);
  dispatch thunk of Hashable.hash(into:)(v5, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_10020D0F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt64 v7;
  uint64_t v8;
  uint64_t v9;

  v3 = type metadata accessor for DetailChartCondition(0);
  sub_10000F1C8(&qword_100BC3598, (uint64_t (*)(uint64_t))&type metadata accessor for DetailChartCondition);
  dispatch thunk of Hashable.hash(into:)(a1, v3, v4);
  v5 = type metadata accessor for DetailChartViewModelFactory.MarkerLabelCacheKey(0);
  v6 = v5;
  if ((*(_QWORD *)(v1 + *(int *)(v5 + 20)) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = *(_QWORD *)(v1 + *(int *)(v5 + 20));
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(*(_BYTE *)(v1 + *(int *)(v6 + 24)));
  v8 = type metadata accessor for ConditionUnits(0);
  sub_10000F1C8(&qword_100BCBA18, (uint64_t (*)(uint64_t))&type metadata accessor for ConditionUnits);
  return dispatch thunk of Hashable.hash(into:)(a1, v8, v9);
}

uint64_t sub_10020D1C0(uint64_t a1, uint64_t a2)
{
  int *v4;

  if ((sub_10068A5B8(a1, a2) & 1) != 0
    && (v4 = (int *)type metadata accessor for DetailChartViewModelFactory.MarkerLabelCacheKey(0),
        *(double *)(a1 + v4[5]) == *(double *)(a2 + v4[5]))
    && *(unsigned __int8 *)(a1 + v4[6]) == *(unsigned __int8 *)(a2 + v4[6]))
  {
    return static ConditionUnits.== infix(_:_:)(a1 + v4[7], a2 + v4[7]);
  }
  else
  {
    return 0;
  }
}

Swift::Int sub_10020D23C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  v0 = type metadata accessor for Date(0);
  sub_10000F1C8((unint64_t *)&qword_100BC3588, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)(v5, v0, v1);
  v2 = type metadata accessor for TimeZone(0);
  sub_10000F1C8(&qword_100BCBA30, (uint64_t (*)(uint64_t))&type metadata accessor for TimeZone);
  dispatch thunk of Hashable.hash(into:)(v5, v2, v3);
  return Hasher._finalize()();
}

void sub_10020D2F4()
{
  sub_10020D934((void (*)(_QWORD *))sub_10020D0F0);
}

void sub_10020D314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10020D998(a1, a2, a3, (void (*)(_QWORD *))sub_10020D0F0);
}

void sub_10020D324(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;

  v3 = type metadata accessor for ExtremaResult(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BCB720);
  __chkstk_darwin(v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DetailChartCondition(0);
  sub_10000F1C8(&qword_100BC3598, (uint64_t (*)(uint64_t))&type metadata accessor for DetailChartCondition);
  dispatch thunk of Hashable.hash(into:)(a1, v10, v11);
  v12 = (int *)type metadata accessor for DetailChartViewModelFactory.PeakMarkerRequestContext(0);
  Hasher._combine(_:)(*(_BYTE *)(v1 + v12[5]));
  sub_100037794(v1 + v12[6], (uint64_t)v9, &qword_100BCB720);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v3) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
    Hasher._combine(_:)(1u);
    sub_10000F1C8(&qword_100BCBA10, (uint64_t (*)(uint64_t))&type metadata accessor for ExtremaResult);
    dispatch thunk of Hashable.hash(into:)(a1, v3, v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  v14 = type metadata accessor for ConditionUnits(0);
  sub_10000F1C8(&qword_100BCBA18, (uint64_t (*)(uint64_t))&type metadata accessor for ConditionUnits);
  dispatch thunk of Hashable.hash(into:)(a1, v14, v15);
  Hasher._combine(_:)(*(_BYTE *)(v1 + v12[8]));
  Hasher._combine(_:)(*(_BYTE *)(v1 + v12[9]));
  v16 = *(_QWORD *)(v1 + v12[10]);
  if (v16)
  {
    Hasher._combine(_:)(1u);
    v17 = swift_retain();
    Color.hash(into:)(a1, v16, v17);
    swift_release(v16);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t sub_10020D56C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = type metadata accessor for ExtremaResult(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000BA294(&qword_100BCBA20);
  __chkstk_darwin(v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000BA294(&qword_100BCB720);
  __chkstk_darwin(v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v38 - v15;
  __chkstk_darwin(v17);
  v19 = (char *)&v38 - v18;
  if ((sub_10068A5B8(a1, a2) & 1) == 0)
    return 0;
  v20 = type metadata accessor for DetailChartViewModelFactory.PeakMarkerRequestContext(0);
  if (*(unsigned __int8 *)(a1 + *(int *)(v20 + 20)) != *(unsigned __int8 *)(a2 + *(int *)(v20 + 20)))
    return 0;
  v41 = v5;
  v21 = *(int *)(v20 + 24);
  v39 = a1;
  v22 = v20;
  sub_100037794(a1 + v21, (uint64_t)v19, &qword_100BCB720);
  v38 = (int *)v22;
  v23 = *(int *)(v22 + 24);
  v40 = a2;
  sub_100037794(a2 + v23, (uint64_t)v16, &qword_100BCB720);
  v24 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_100037794((uint64_t)v19, (uint64_t)v10, &qword_100BCB720);
  sub_100037794((uint64_t)v16, v24, &qword_100BCB720);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v4) != 1)
  {
    sub_100037794((uint64_t)v10, (uint64_t)v13, &qword_100BCB720);
    if (_s7Weather24LocationCompositionStateOwet_0(v24, 1, v4) != 1)
    {
      v25 = v41;
      (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(v7, v24, v4);
      sub_10000F1C8(&qword_100BCBA28, (uint64_t (*)(uint64_t))&type metadata accessor for ExtremaResult);
      v27 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v7, v4, v26);
      v28 = *(void (**)(char *, uint64_t))(v25 + 8);
      v28(v7, v4);
      sub_1000FF448((uint64_t)v16, &qword_100BCB720);
      sub_1000FF448((uint64_t)v19, &qword_100BCB720);
      v28(v13, v4);
      sub_1000FF448((uint64_t)v10, &qword_100BCB720);
      if ((v27 & 1) == 0)
        return 0;
      goto LABEL_10;
    }
    sub_1000FF448((uint64_t)v16, &qword_100BCB720);
    sub_1000FF448((uint64_t)v19, &qword_100BCB720);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v4);
LABEL_8:
    sub_1000FF448((uint64_t)v10, &qword_100BCBA20);
    return 0;
  }
  sub_1000FF448((uint64_t)v16, &qword_100BCB720);
  sub_1000FF448((uint64_t)v19, &qword_100BCB720);
  if (_s7Weather24LocationCompositionStateOwet_0(v24, 1, v4) != 1)
    goto LABEL_8;
  sub_1000FF448((uint64_t)v10, &qword_100BCB720);
LABEL_10:
  v30 = v38;
  v29 = v39;
  v31 = v40;
  if ((static ConditionUnits.== infix(_:_:)(v39 + v38[7], v40 + v38[7]) & 1) == 0
    || *(unsigned __int8 *)(v29 + v30[8]) != *(unsigned __int8 *)(v31 + v30[8])
    || *(unsigned __int8 *)(v29 + v30[9]) != *(unsigned __int8 *)(v31 + v30[9]))
  {
    return 0;
  }
  v33 = v30[10];
  v34 = *(_QWORD *)(v29 + v33);
  v35 = *(_QWORD *)(v31 + v33);
  if (v34)
  {
    if (v35)
    {
      swift_retain();
      swift_retain();
      v37 = static Color.== infix(_:_:)(v36, v35);
      swift_release(v34);
      swift_release(v35);
      if ((v37 & 1) != 0)
        return 1;
    }
  }
  else if (!v35)
  {
    return 1;
  }
  return 0;
}

void sub_10020D934(void (*a1)(_QWORD *))
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  a1(v2);
  Hasher._finalize()();
  sub_100098918();
}

void sub_10020D96C()
{
  sub_10020D934((void (*)(_QWORD *))sub_10020D324);
}

void sub_10020D98C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10020D998(a1, a2, a3, (void (*)(_QWORD *))sub_10020D324);
}

void sub_10020D998(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *))
{
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  a4(v5);
  Hasher._finalize()();
  sub_100098918();
}

_QWORD *sub_10020D9D0(__int128 *a1, __int128 *a2, __int128 *a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[17] = 6;
  v7 = sub_1000BA294(&qword_100BCB918);
  sub_1000860C4(v7);
  v3[18] = sub_10009ED1C();
  v8 = sub_1000BA294(&qword_100BCB920);
  sub_1000860C4(v8);
  v3[19] = sub_10009ED1C();
  v9 = sub_1000BA294(&qword_100BCB928);
  sub_1000860C4(v9);
  v3[20] = sub_10009ED1C();
  sub_10003C800(a1, (uint64_t)(v3 + 2));
  sub_10003C800(a2, (uint64_t)(v3 + 7));
  sub_10003C800(a3, (uint64_t)(v3 + 12));
  return v3;
}

void sub_10020DA80(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *x4_0@<X4>, char a6@<W5>, int a7@<W6>, _QWORD *a8@<X8>, double a9@<D0>, double a10@<D1>)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t (*v36)();
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  double *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t (*v151)(_QWORD, _QWORD, _QWORD);
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void (*v165)(uint64_t);
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t (*v176)(_QWORD, _QWORD, _QWORD);
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  void (*v252)(_QWORD, _QWORD);
  int *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  double v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char *v268;
  id v269;
  Swift::String v270;
  Swift::String v271;
  Swift::String_optional v272;
  NSBundle v273;
  Swift::String v274;
  void *object;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  void (*v279)(uint64_t);
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  double v287;
  uint64_t v288;
  uint64_t v289;
  __n128 v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  double v296;
  uint64_t (*v297)(_QWORD, _QWORD, _QWORD);
  double v298;
  void (*v299)(uint64_t *, uint64_t (*)(_QWORD, _QWORD, _QWORD), uint64_t);
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  __n128 *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  __n128 v311;
  char *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  int64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t (*v326)(_QWORD, uint64_t, _QWORD);
  uint64_t v327;
  uint64_t v328;
  id v329;
  uint64_t v330;
  void (*v331)(_QWORD, _QWORD, _QWORD);
  uint64_t v332;
  id v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t (*v345)(uint64_t, uint64_t, uint64_t);
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  void *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  double v355;
  double v356;
  uint64_t v357;
  uint64_t v358;
  __int128 v359;
  uint64_t v360;
  double v361;
  double v362;
  uint64_t (*v363)(uint64_t, _QWORD);
  uint64_t v364;
  uint64_t (*v365)(uint64_t, _QWORD);
  uint64_t v366;
  uint64_t v367;
  int *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  double v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  void *v379;
  uint64_t v380;
  double v381;
  double v382;
  uint64_t v383;
  void *v384;
  double v385;
  double v386;
  uint64_t v387;
  void (*v388)(_QWORD, _QWORD, _QWORD);
  uint64_t (*v389)(uint64_t, _QWORD, _QWORD);
  uint64_t v390;
  uint64_t v391;
  uint64_t *v392;
  void (*v393)(uint64_t);
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  char v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unint64_t v407;
  unint64_t v408;
  _QWORD *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  id v413;
  id v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  id v418;
  Swift::String v419;
  Swift::String v420;
  Swift::String v421;
  __n128 v422;
  uint64_t (*v423)(_QWORD, _QWORD, _QWORD);
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t (*v427)(uint64_t, uint64_t, _QWORD);
  uint64_t v428;
  uint64_t (*v429)(uint64_t, uint64_t, _QWORD);
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  char v437;
  uint64_t v438;
  uint64_t v439;
  void (*v440)(uint64_t);
  uint64_t v441;
  void (*v442)(uint64_t);
  uint64_t v443;
  char v444;
  double v445;
  uint64_t v446;
  uint64_t v447;
  double v448;
  double v449;
  double v450;
  double v451;
  uint64_t v452;
  uint64_t v453;
  __n128 v454;
  uint64_t (*v455)(_QWORD, _QWORD, _QWORD);
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t (*v460)(uint64_t, uint64_t, _QWORD);
  int64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  void *v466;
  uint64_t v467;
  uint64_t (*v468)(_QWORD, uint64_t, _QWORD);
  uint64_t v469;
  _QWORD *v470;
  id v471;
  uint64_t v472;
  uint64_t v473;
  id v474;
  NSBundle v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  void *v479;
  void *v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  char *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  double v496;
  double v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t (*v500)(_QWORD, _QWORD, _QWORD);
  uint64_t v501;
  double v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  char v509;
  double v510;
  uint64_t v511;
  char v512;
  uint64_t v513;
  uint64_t v514;
  double v515;
  void (*v516)(_QWORD, _QWORD, _QWORD);
  uint64_t v517;
  uint64_t v518;
  char v519;
  double v520;
  uint64_t v521;
  __n128 *v522;
  char v523;
  double v524;
  void (*v525)(uint64_t, uint64_t, uint64_t);
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  char v530;
  uint64_t v531;
  double v532;
  uint64_t v533;
  char v534;
  double v535;
  uint64_t v536;
  void (*v537)(uint64_t);
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t (*v541)(uint64_t);
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t (*v550)(uint64_t, uint64_t, uint64_t);
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  double v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  double v562;
  double v563;
  uint64_t v564;
  char v565;
  double v566;
  double v567;
  uint64_t v568;
  char v569;
  double v570;
  double v571;
  uint64_t v572;
  char v573;
  double v574;
  double v575;
  double v576;
  uint64_t v577;
  uint64_t v578;
  double v579;
  double v580;
  double v581;
  double v582;
  uint64_t v583;
  uint64_t v584;
  void *v585;
  uint64_t v586;
  id v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  int *v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t (*v595)(_QWORD, _QWORD, _QWORD);
  uint64_t (*v596)(uint64_t, _QWORD, _QWORD);
  uint64_t (*v597)(uint64_t *, _QWORD, uint64_t);
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  __n128 *v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  __n128 v608;
  char *v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t (*v612)(uint64_t, uint64_t, uint64_t);
  uint64_t v613;
  _QWORD *v614;
  uint64_t (*v615)(_QWORD, _QWORD, _QWORD);
  uint64_t v616;
  double v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  double *v621;
  char *v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t (*v626)(_QWORD, uint64_t, _QWORD);
  void (*v627)(_QWORD, _QWORD, _QWORD);
  id v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  unint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  __int128 v656;
  double v657;
  uint64_t v658;
  __n128 *v659;
  uint64_t v660;
  char v661;
  double v662;
  unint64_t v663;
  uint64_t v664;
  void *v665;
  char v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  double v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  void (*v676)(uint64_t, uint64_t, uint64_t);
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  __n128 *v684;
  uint64_t v685;
  uint64_t v686;
  __n128 v687;
  char *v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  id v701;
  id v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  id v706;
  Swift::String v707;
  Swift::String v708;
  Swift::String_optional v709;
  NSBundle v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  double v727;
  double v728;
  uint64_t v729;
  __int128 v730;
  uint64_t v731;
  uint64_t v732;
  double v733;
  double v734;
  uint64_t v735;
  char v736;
  double v737;
  double v738;
  uint64_t v739;
  char v740;
  double v741;
  double v742;
  void (*v743)(unint64_t, _QWORD, uint64_t);
  uint64_t v744;
  uint64_t v745;
  double v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  BOOL v750;
  int *v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  void (*v756)(void);
  void (*v757)(uint64_t *, uint64_t, uint64_t);
  uint64_t *v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  __n128 *v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  double v769;
  uint64_t v770;
  double v771;
  void *v772;
  uint64_t v773;
  __int128 v774;
  uint64_t v775;
  uint64_t v776;
  void (*v777)(uint64_t, int *, _QWORD *);
  uint64_t (*v778)(uint64_t);
  uint64_t v779;
  uint64_t v780;
  id v781;
  uint64_t v782;
  uint64_t v783;
  const char *v784;
  uint64_t (*v785)(_QWORD, _QWORD, _QWORD);
  uint64_t v786;
  uint64_t v787;
  int *v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  __n128 v792;
  uint64_t (*v793)(_QWORD, _QWORD, _QWORD);
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t (*v798)(uint64_t, uint64_t, _QWORD);
  uint64_t v799;
  uint64_t v800;
  char *v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  double *v806;
  uint64_t v807;
  uint64_t v808;
  void (*v809)(_QWORD, _QWORD, _QWORD);
  objc_class *v810;
  NSBundle v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  _QWORD *v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  void *v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  double v832;
  uint64_t v833;
  _QWORD *v834;
  double v835;
  double v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t inited;
  uint64_t v840;
  uint64_t v841;
  void (*v842)(uint64_t, uint64_t, uint64_t);
  _QWORD *v843;
  void (*v844)(void);
  void (*v845)(uint64_t);
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  __n128 *v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  __n128 v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t (*v865)(uint64_t, uint64_t, _QWORD);
  uint64_t v866;
  int64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t (*v872)(uint64_t, uint64_t, _QWORD);
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  double *v876;
  uint64_t v877;
  uint64_t v878;
  void (*v879)(_QWORD, _QWORD, _QWORD);
  id v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  id v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  double v907;
  uint64_t v908;
  uint64_t v909;
  __int128 v910;
  unint64_t v911;
  uint64_t (*v912)();
  void *v913;
  char *v914;
  char v915;
  uint64_t v916;
  char v917;
  double v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  char v923;
  uint64_t v924;
  uint64_t v925;
  double v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  double v941;
  char v942;
  uint64_t v943;
  uint64_t v944;
  double v945;
  uint64_t v946;
  char v947;
  double v948;
  double v949;
  uint64_t v950;
  char v951;
  double v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  double v956;
  char v957;
  char v958;
  void (*v959)(unint64_t, _QWORD, uint64_t);
  double v960;
  uint64_t (*v961)(uint64_t, uint64_t, uint64_t);
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  char v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t (*v972)(uint64_t, uint64_t, uint64_t);
  uint64_t v973;
  uint64_t v974;
  char v975;
  char *v976;
  double v977;
  uint64_t v978;
  double v979;
  unint64_t v980;
  void (*v981)(char *, char *, uint64_t);
  void (*v982)(uint64_t *, uint64_t, uint64_t);
  uint64_t v983;
  uint64_t (*v984)(_QWORD, _QWORD, _QWORD);
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  int v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t *v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  double v1004;
  uint64_t v1005;
  uint64_t v1006;
  char v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  unint64_t v1011;
  BOOL v1012;
  _QWORD *v1013;
  void *v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  _QWORD *v1018;
  BOOL v1019;
  id v1020;
  uint64_t v1021;
  uint64_t v1022;
  void *v1023;
  uint64_t v1024;
  uint64_t v1025;
  void (*v1026)(uint64_t, uint64_t);
  double v1027;
  int *v1028;
  void (*v1029)(void);
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  __n128 *v1035;
  void (*v1036)(_QWORD, _QWORD, _QWORD);
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  __n128 v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  double (*v1046)(uint64_t, uint64_t, uint64_t);
  uint64_t v1047;
  uint64_t v1048;
  void (*v1049)(void);
  uint64_t v1050;
  __n128 v1051;
  uint64_t (*v1052)(_QWORD, _QWORD, _QWORD);
  uint64_t v1053;
  void (*v1054)(int *, uint64_t, uint64_t);
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t (*v1061)(uint64_t, uint64_t, _QWORD);
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  id v1065;
  Swift::String v1066;
  Swift::String v1067;
  Swift::String v1068;
  id v1069;
  Swift::String v1070;
  Swift::String_optional v1071;
  NSBundle v1072;
  Swift::String v1073;
  Swift::String v1074;
  uint64_t v1075;
  id v1076;
  Swift::String v1077;
  Swift::String v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  void *v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  double v1092;
  uint64_t v1093;
  uint64_t v1094;
  double v1095;
  uint64_t v1096;
  _QWORD *v1097;
  double v1098;
  double v1099;
  void (*v1100)(unint64_t, uint64_t);
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  int v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  char v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  void (*v1127)(uint64_t, uint64_t);
  __n128 v1128;
  uint64_t (*v1129)(_QWORD, _QWORD, _QWORD);
  uint64_t v1130;
  uint64_t (*v1131)(uint64_t, uint64_t, uint64_t);
  uint64_t v1132;
  uint64_t v1133;
  void (*v1134)(_QWORD, _QWORD, _QWORD);
  uint64_t v1135;
  uint64_t v1136;
  char *v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  double v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  id v1148;
  Swift::String v1149;
  Swift::String v1150;
  Swift::String_optional v1151;
  NSBundle v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  unint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  _QWORD *v1171;
  uint64_t (*v1172)(_QWORD, _QWORD, _QWORD);
  __n128 *v1173;
  void *v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  __n128 v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  void *v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t *v1190;
  uint64_t (*v1191)(_QWORD, _QWORD, _QWORD);
  uint64_t v1192;
  uint64_t v1193;
  unint64_t v1194;
  double v1195;
  uint64_t v1196;
  unint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  char *v1201;
  double v1202;
  uint64_t v1203;
  unint64_t v1204;
  unint64_t v1205;
  unint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  char v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  _BYTE v1221[24];
  _BYTE v1222[24];
  _BYTE v1223[32];
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  unsigned __int8 v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  _QWORD *v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  void (*v1251)(_QWORD, _QWORD, _QWORD);
  uint64_t v1252;
  uint64_t (*v1253)(_QWORD, _QWORD, _QWORD);
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  __int128 v1260;
  uint64_t (*v1261)();
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t *v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  unint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  char *v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  uint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  void (*v1315)(uint64_t);
  uint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  char *v1329;
  void *v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  _QWORD *v1346;
  _QWORD *v1347;
  uint64_t v1348;
  unint64_t v1349;
  uint64_t v1350;
  unint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  _QWORD *v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  _QWORD *v1359;
  __int128 v1360;
  __n128 v1361;
  __int128 v1362;
  char *v1363;
  uint64_t v1364;
  __int128 v1365;
  uint64_t (*v1366)(uint64_t, uint64_t, _QWORD);
  uint64_t *v1367;
  uint64_t v1368;
  void (*v1369)(uint64_t, uint64_t, uint64_t);
  _QWORD *v1370;
  char *v1371;
  uint64_t v1372;
  _QWORD *v1373;
  void *v1374;
  uint64_t countAndFlagsBits;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  double *v1384;
  uint64_t v1385;
  _QWORD *v1386;
  uint64_t v1387;
  _QWORD *v1388;
  uint64_t (*v1389)(_QWORD, _QWORD, _QWORD);
  uint64_t v1390;
  void (*v1391)(_QWORD, _QWORD, _QWORD);
  uint64_t v1392;
  char *v1393;
  char *v1394;
  uint64_t v1395;
  id v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  __n128 *v1402;
  uint64_t v1403;
  uint64_t v1404;
  _QWORD *v1405;
  uint64_t v1406;
  uint64_t v1407;
  char *v1408;
  uint64_t v1409;
  uint64_t (*v1410)(_QWORD, _QWORD, _QWORD);
  uint64_t v1411;
  __int128 v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  _QWORD *v1417;
  uint64_t v1418;
  char *v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  char *v1423;
  int *v1424;
  _QWORD *v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  int *v1429;
  uint64_t v1430;
  _QWORD v1431[7];
  char v1432;
  uint64_t *v1433;
  uint64_t *v1434;
  uint64_t *v1435;
  uint64_t *v1436;
  uint64_t *v1437;
  uint64_t *v1438;
  uint64_t v1439;
  _QWORD *v1440;
  uint64_t v1441;
  char v1442[16];
  uint64_t v1443;
  char v1444;
  uint64_t v1445;
  char v1446;
  uint64_t v1447;
  unsigned __int8 v1448;
  uint64_t v1449;
  unsigned __int8 v1450;
  uint64_t v1451;
  unsigned __int8 v1452;
  uint64_t v1453;
  unsigned __int8 v1454;
  NSBundle v1455;
  NSBundle v1456;
  NSBundle v1457;
  Swift::String v1458;
  Swift::String v1459;
  Swift::String v1460;
  Swift::String v1461;
  Swift::String v1462;
  Swift::String v1463;
  Swift::String v1464;

  v11 = v10;
  LODWORD(v1423) = a7;
  v1396 = x4_0;
  v1351 = a3;
  v1320 = a2;
  v1386 = a8;
  LODWORD(v1394) = a6 & 1;
  sub_1000BA294(&qword_100BCB720);
  sub_10009D98C();
  __chkstk_darwin(v16);
  sub_100088FDC();
  v1289 = v17;
  v18 = sub_10009876C();
  type metadata accessor for DetailChartDataElement.ValueLabel(v18);
  sub_10009D98C();
  __chkstk_darwin(v19);
  sub_100088FDC();
  v1270 = v20;
  v21 = sub_10009876C();
  v22 = type metadata accessor for HourWeather.SecondValueUseCase(v21);
  v1268 = *(_QWORD *)(v22 - 8);
  v1269 = v22;
  sub_10009D98C();
  __chkstk_darwin(v23);
  sub_100088FDC();
  v1267 = v24;
  v25 = sub_10009876C();
  v26 = type metadata accessor for TimeZone(v25);
  v1264 = *(_QWORD *)(v26 - 8);
  v1265 = v26;
  sub_10009D98C();
  __chkstk_darwin(v27);
  sub_100088FDC();
  v1266 = v28;
  v29 = sub_10009876C();
  v30 = (_QWORD *)type metadata accessor for CurrentWeather(v29);
  v1262 = *(v30 - 1);
  v1464._object = v30;
  sub_10009D98C();
  __chkstk_darwin(v31);
  sub_100088FDC();
  v1263 = v32;
  sub_1000BA294(&qword_100BCB138);
  sub_10009D98C();
  __chkstk_darwin(v33);
  sub_100088FDC();
  v1461._object = v34;
  v35 = sub_10009876C();
  v36 = (uint64_t (*)())type metadata accessor for WeatherValueCalculationContext(v35);
  *((_QWORD *)&v1260 + 1) = *((_QWORD *)v36 - 1);
  v1261 = v36;
  sub_10009D98C();
  __chkstk_darwin(v37);
  sub_100088FDC();
  v1273 = v38;
  v39 = sub_10009876C();
  v1282 = type metadata accessor for Calendar.Component(v39);
  v1301 = *(_QWORD *)(v1282 - 8);
  sub_10009D98C();
  __chkstk_darwin(v40);
  sub_100088FDC();
  v1300 = v41;
  sub_1000BA294(&qword_100BCB930);
  sub_10009D98C();
  __chkstk_darwin(v42);
  sub_100088FDC();
  v1277 = v43;
  v1281 = sub_10009ED8C();
  v1302 = *(_QWORD *)(v1281 - 8);
  sub_10009D98C();
  __chkstk_darwin(v44);
  sub_1000986FC();
  v1278 = v45;
  sub_10009D2A4();
  __chkstk_darwin(v46);
  sub_1000860D0();
  v1271 = v47;
  sub_10009D2A4();
  __chkstk_darwin(v48);
  sub_100079F7C();
  v1280 = v49;
  v50 = sub_10009876C();
  v1329 = (char *)type metadata accessor for DetailChartDataElement(v50);
  v1328 = *((_QWORD *)v1329 - 1);
  sub_10009D98C();
  __chkstk_darwin(v51);
  sub_1000986FC();
  v1272 = v52;
  sub_10009D2A4();
  __chkstk_darwin(v53);
  sub_1000860D0();
  *(_QWORD *)&v1260 = v54;
  sub_10009D2A4();
  __chkstk_darwin(v55);
  sub_1000860D0();
  v1279 = v56;
  sub_10009D2A4();
  __chkstk_darwin(v57);
  sub_100079F7C();
  v1284 = v58;
  v59 = sub_1000BA294(&qword_100BCB938);
  v1287 = *(_QWORD *)(v59 - 8);
  v1288 = v59;
  sub_10009D98C();
  __chkstk_darwin(v60);
  sub_1000986FC();
  v1285 = v61;
  sub_10009D2A4();
  __chkstk_darwin(v62);
  sub_100079F7C();
  v1286 = v63;
  sub_1000BA294(&qword_100BCB940);
  sub_10009D98C();
  __chkstk_darwin(v64);
  sub_100088FDC();
  v1344 = v65;
  v1341 = sub_1000BA294(&qword_100BCB948);
  v1338 = *(_QWORD *)(v1341 - 8);
  sub_10009D98C();
  __chkstk_darwin(v66);
  sub_1000986FC();
  v1339 = v67;
  sub_10009D2A4();
  __chkstk_darwin(v68);
  sub_100079F7C();
  v1340 = v69;
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_10009D98C();
  __chkstk_darwin(v70);
  sub_1000986FC();
  v1290 = v71;
  sub_10009D2A4();
  __chkstk_darwin(v72);
  sub_1000860D0();
  v1294 = v73;
  sub_10009D2A4();
  __chkstk_darwin(v74);
  sub_1000860D0();
  v1293 = v75;
  sub_10009D2A4();
  __chkstk_darwin(v76);
  sub_1000860D0();
  v1332 = v77;
  sub_10009D2A4();
  __chkstk_darwin(v78);
  sub_1000860D0();
  v1327 = v79;
  sub_10009D2A4();
  __chkstk_darwin(v80);
  sub_100079F7C();
  v1326 = v81;
  v82 = sub_10009876C();
  *(_QWORD *)&v1360 = type metadata accessor for Color.RGBColorSpace(v82);
  v1359 = *(_QWORD **)(v1360 - 8);
  sub_10009D98C();
  __chkstk_darwin(v83);
  sub_100088FDC();
  v1361.n128_u64[0] = v84;
  v85 = sub_10009876C();
  v1383 = type metadata accessor for ChartPastDataTreatment(v85);
  v1382 = *(_QWORD *)(v1383 - 8);
  sub_10009D98C();
  __chkstk_darwin(v86);
  sub_100088FDC();
  v1392 = v87;
  v88 = sub_10009876C();
  type metadata accessor for ChartViewModel.Background(v88);
  sub_10009D98C();
  __chkstk_darwin(v89);
  sub_100088FDC();
  v1385 = v90;
  v91 = sub_10009876C();
  v1398 = type metadata accessor for ConditionUnits(v91);
  v1397 = *(_QWORD *)(v1398 - 8);
  __chkstk_darwin(v1398);
  v1380 = v92;
  v1390 = (uint64_t)&v1458._object - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_10009876C();
  v94 = (int *)type metadata accessor for ConditionDetailChartDataInput(v93);
  v1378 = *((_QWORD *)v94 - 1);
  __chkstk_darwin(v94);
  v1379 = v95;
  v1381 = (uint64_t)&v1458._object - ((v95 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_10009876C();
  v1373 = (_QWORD *)type metadata accessor for ChartViewModelInterpolationMode(v96);
  v1372 = *(v1373 - 1);
  sub_10009D98C();
  __chkstk_darwin(v97);
  sub_100088FDC();
  v1415 = v98;
  v99 = sub_10009876C();
  v1377 = type metadata accessor for ChartPeakMarkStyle(v99);
  v1376 = *(_QWORD *)(v1377 - 8);
  sub_10009D98C();
  __chkstk_darwin(v100);
  sub_100088FDC();
  v1384 = v101;
  v102 = sub_10009876C();
  type metadata accessor for ChartDateStep(v102);
  sub_10009D98C();
  __chkstk_darwin(v103);
  sub_1000986FC();
  v1354 = v104;
  sub_10009D2A4();
  __chkstk_darwin(v105);
  sub_1000860D0();
  v1346 = v106;
  sub_10009D2A4();
  __chkstk_darwin(v107);
  sub_100079F7C();
  v1405 = v108;
  v109 = sub_10009876C();
  v1388 = (_QWORD *)type metadata accessor for ChartKind(v109);
  v1387 = *(v1388 - 1);
  sub_10009D98C();
  __chkstk_darwin(v110);
  sub_1000986FC();
  v1358 = v111;
  sub_10009D2A4();
  __chkstk_darwin(v112);
  sub_1000860D0();
  v1345 = v113;
  sub_10009D2A4();
  __chkstk_darwin(v114);
  sub_100079F7C();
  v1364 = v115;
  sub_1000BA294(&qword_100BCB950);
  sub_10009D98C();
  __chkstk_darwin(v116);
  sub_100088FDC();
  v1368 = v117;
  v118 = sub_10009876C();
  v1370 = (_QWORD *)type metadata accessor for ChartLineColor(v118);
  v1366 = (uint64_t (*)(uint64_t, uint64_t, _QWORD))*(v1370 - 1);
  sub_10009D98C();
  __chkstk_darwin(v119);
  sub_100088FDC();
  v1367 = v120;
  v121 = sub_10009876C();
  v1414 = type metadata accessor for ChartLineStyle(v121);
  v1413 = *(_QWORD *)(v1414 - 8);
  sub_10009D98C();
  __chkstk_darwin(v122);
  sub_1000986FC();
  v1299 = v123;
  sub_10009D2A4();
  __chkstk_darwin(v124);
  sub_1000860D0();
  v1295 = v125;
  sub_10009D2A4();
  __chkstk_darwin(v126);
  sub_1000860D0();
  *(_QWORD *)&v1365 = v127;
  sub_10009D2A4();
  __chkstk_darwin(v128);
  sub_1000860D0();
  v1313 = v129;
  sub_10009D2A4();
  __chkstk_darwin(v130);
  sub_1000860D0();
  v1314 = v131;
  sub_10009D2A4();
  __chkstk_darwin(v132);
  sub_100079F7C();
  v1403 = v133;
  v134 = sub_10009876C();
  type metadata accessor for TemperatureScaleConfiguration.Gradient(v134);
  sub_10009D98C();
  __chkstk_darwin(v135);
  sub_100088FDC();
  v1318 = v136;
  v137 = sub_10009876C();
  v1426 = type metadata accessor for DetailChartGradientModel(v137);
  v1422 = *(_QWORD *)(v1426 - 8);
  sub_10009D98C();
  __chkstk_darwin(v138);
  sub_1000986FC();
  v1305 = v139;
  sub_10009D2A4();
  __chkstk_darwin(v140);
  sub_1000860D0();
  v1357 = v141;
  sub_10009D2A4();
  __chkstk_darwin(v142);
  sub_1000860D0();
  v1343 = v143;
  sub_10009D2A4();
  __chkstk_darwin(v144);
  sub_1000860D0();
  v1308 = v145;
  sub_10009D2A4();
  __chkstk_darwin(v146);
  sub_1000860D0();
  v1311 = v147;
  sub_10009D2A4();
  __chkstk_darwin(v148);
  sub_1000860D0();
  *(_QWORD *)&v1362 = v149;
  sub_10009D2A4();
  __chkstk_darwin(v150);
  sub_100079F7C();
  v1410 = v151;
  v152 = sub_10009876C();
  v1319 = type metadata accessor for DetailChartViewModelFactory.PeakMarkerRequestContext(v152);
  sub_10009D98C();
  __chkstk_darwin(v153);
  sub_1000986FC();
  v1304 = v154;
  sub_10009D2A4();
  __chkstk_darwin(v155);
  sub_1000860D0();
  v1307 = v156;
  sub_10009D2A4();
  __chkstk_darwin(v157);
  sub_100079F7C();
  v1331 = v158;
  v159 = sub_10009876C();
  v1350 = type metadata accessor for FloatingPointRoundingRule(v159);
  v1348 = *(_QWORD *)(v1350 - 8);
  sub_10009D98C();
  __chkstk_darwin(v160);
  sub_100088FDC();
  v1349 = v161;
  v162 = sub_10009876C();
  v163 = type metadata accessor for AppConfiguration(v162);
  v1316 = *(_QWORD *)(v163 - 8);
  v1317 = v163;
  sub_10009D98C();
  __chkstk_darwin(v164);
  sub_100088FDC();
  v1315 = v165;
  v166 = sub_10009876C();
  v167 = type metadata accessor for TemperatureScaleConfiguration(v166);
  v1309 = *(_QWORD *)(v167 - 8);
  v1310 = v167;
  sub_10009D98C();
  __chkstk_darwin(v168);
  sub_1000986FC();
  v1312 = v169;
  sub_10009D2A4();
  __chkstk_darwin(v170);
  sub_100079F7C();
  v1330 = v171;
  v172 = sub_10009876C();
  v1425 = (_QWORD *)type metadata accessor for DetailChartCondition(v172);
  v1411 = *(v1425 - 1);
  sub_10009D98C();
  __chkstk_darwin(v173);
  sub_1000986FC();
  v1395 = v174;
  sub_10009D2A4();
  __chkstk_darwin(v175);
  sub_100079F7C();
  v1389 = v176;
  v177 = sub_10009876C();
  v1430 = type metadata accessor for ChartDarkeningScrim(v177);
  v1427 = *(_QWORD *)(v1430 - 8);
  sub_10009D98C();
  __chkstk_darwin(v178);
  sub_1000986FC();
  v1353 = v179;
  sub_10009D2A4();
  __chkstk_darwin(v180);
  sub_1000860D0();
  v1342 = v181;
  sub_10009D2A4();
  __chkstk_darwin(v182);
  sub_1000860D0();
  *(_QWORD *)&v1412 = v183;
  sub_10009D2A4();
  __chkstk_darwin(v184);
  sub_100079F7C();
  v1429 = (int *)v185;
  v186 = sub_10009876C();
  v1418 = type metadata accessor for ChartLineStrokeStyle(v186);
  v1416 = *(_QWORD *)(v1418 - 8);
  sub_10009D98C();
  __chkstk_darwin(v187);
  sub_1000986FC();
  v1298 = v188;
  sub_10009D2A4();
  __chkstk_darwin(v189);
  sub_1000860D0();
  v1371 = v190;
  sub_10009D2A4();
  __chkstk_darwin(v191);
  sub_100079F7C();
  v1428 = v192;
  sub_1000BA294(&qword_100BCB0A0);
  sub_10009D98C();
  __chkstk_darwin(v193);
  sub_1000986FC();
  v1283 = v194;
  sub_10009D2A4();
  __chkstk_darwin(v195);
  sub_1000860D0();
  v1292 = v196;
  sub_10009D2A4();
  __chkstk_darwin(v197);
  sub_1000860D0();
  v1291 = v198;
  sub_10009D2A4();
  __chkstk_darwin(v199);
  sub_1000860D0();
  v1352 = v200;
  sub_10009D2A4();
  __chkstk_darwin(v201);
  sub_1000860D0();
  v1325 = v202;
  sub_10009D2A4();
  __chkstk_darwin(v203);
  sub_1000860D0();
  v1323 = v204;
  sub_10009D2A4();
  __chkstk_darwin(v205);
  sub_1000860D0();
  v1337 = v206;
  sub_10009D2A4();
  __chkstk_darwin(v207);
  sub_1000860D0();
  v1322 = v208;
  sub_10009D2A4();
  __chkstk_darwin(v209);
  sub_1000860D0();
  v1404 = v210;
  sub_10009D2A4();
  __chkstk_darwin(v211);
  v213 = (char *)&v1458._object - v212;
  v1421 = type metadata accessor for DetailChartExtrema(0);
  v1420 = *(_QWORD *)(v1421 - 8);
  sub_10009D98C();
  __chkstk_darwin(v214);
  sub_1000986FC();
  v1356 = v215;
  sub_10009D2A4();
  __chkstk_darwin(v216);
  sub_1000860D0();
  v1336 = v217;
  sub_10009D2A4();
  __chkstk_darwin(v218);
  sub_1000860D0();
  v1406 = v219;
  sub_10009D2A4();
  __chkstk_darwin(v220);
  v222 = (char *)&v1458._object - v221;
  v1400 = type metadata accessor for Calendar(0);
  v1399 = *(_QWORD *)(v1400 - 8);
  sub_10009D98C();
  __chkstk_darwin(v223);
  sub_1000986FC();
  v1324 = v224;
  sub_10009D2A4();
  __chkstk_darwin(v225);
  v227 = (char *)&v1458._object - v226;
  v228 = type metadata accessor for Date(0);
  __chkstk_darwin(v228);
  sub_1000986FC();
  v1297 = v229;
  sub_10009D2A4();
  __chkstk_darwin(v230);
  sub_1000860D0();
  v1296 = v231;
  sub_10009D2A4();
  __chkstk_darwin(v232);
  sub_1000860D0();
  v1274 = v233;
  sub_10009D2A4();
  __chkstk_darwin(v234);
  sub_1000860D0();
  v1303 = v235;
  sub_10009D2A4();
  __chkstk_darwin(v236);
  sub_1000860D0();
  v1306 = v237;
  sub_10009D2A4();
  __chkstk_darwin(v238);
  sub_1000860D0();
  v1355 = v239;
  sub_10009D2A4();
  __chkstk_darwin(v240);
  sub_1000860D0();
  v1334 = v241;
  sub_10009D2A4();
  __chkstk_darwin(v242);
  sub_1000860D0();
  v1333 = v243;
  sub_10009D2A4();
  __chkstk_darwin(v244);
  sub_1000860D0();
  v1335 = v245;
  sub_10009D2A4();
  __chkstk_darwin(v246);
  sub_1000860D0();
  v1409 = v247;
  sub_10009D2A4();
  __chkstk_darwin(v248);
  v250 = (char *)&v1458._object - v249;
  v1401 = v251;
  v252 = *(void (**)(_QWORD, _QWORD))(v251 + 16);
  v1424 = v253;
  v1391 = (void (*)(_QWORD, _QWORD, _QWORD))v252;
  v252((char *)&v1458._object - v249, a1);
  v254 = a1 + v94[10];
  v1393 = v227;
  v1276 = v254;
  static Calendar.currentCalendar(with:)(v254);
  v1453 = 0;
  v1454 = 1;
  v1451 = 0;
  v1452 = 1;
  v1449 = 0;
  v1450 = 1;
  v1447 = 0;
  v1448 = 1;
  v1445 = 0;
  v1446 = 1;
  v1443 = 0;
  v1444 = 1;
  v1275 = v94[11];
  v255 = *(_QWORD *)(a1 + v1275);
  v1431[2] = v11;
  v1431[3] = a1;
  v1431[4] = a4;
  *(double *)&v1431[5] = a9;
  *(double *)&v1431[6] = a10;
  v1432 = (char)v1423;
  v1433 = &v1453;
  v1434 = &v1451;
  v1435 = &v1449;
  v1436 = &v1447;
  v1437 = &v1445;
  v1438 = &v1443;
  sub_1000989F8();
  sub_10084A1B4((uint64_t)sub_100218FEC, (uint64_t)v1431, v255, (uint64_t)v1442, v256, v257, v258, v259);
  v1417 = (_QWORD *)v260;
  v1369 = 0;
  v261 = sub_1000986C4();
  LOBYTE(v1259) = v1444;
  v1419 = v222;
  DetailChartExtrema.init(minValue:maxValue:minSecondValue:maxSecondValue:minThirdValue:maxThirdValue:)(v1453, v1454, v1451, v1452, v1449, v1450, v1447, v1448, v261, v1445, v1446, v1443, v1259);
  v1423 = v213;
  v262 = (uint64_t)v94;
  v263 = (int)v1394;
  v1347 = v11;
  v1407 = a4;
  v1394 = v250;
  sub_1002141B0(a1, *(double *)&v1396, v263, v11, a4, (uint64_t)v250, (uint64_t)v213, a9, a10);
  sub_100214604(a1, v1428);
  v1440 = 0;
  sub_10000F1C8(&qword_100BCB958, (uint64_t (*)(uint64_t))&type metadata accessor for ChartDarkeningScrim);
  v265 = dispatch thunk of OptionSet.init(rawValue:)(&v1440, v1430, v264);
  v1321 = v94[9];
  if (!*(_BYTE *)(a1 + v1321))
  {
    v266 = v1412;
    static ChartDarkeningScrim.dimmingEffect.getter(v265);
    sub_10081C464();
    v267 = v266;
    v262 = (uint64_t)v94;
    sub_1000B2ED8(v267, *(uint64_t (**)(uint64_t, _QWORD))(v1427 + 8));
  }
  v268 = (char *)0xD000000000000030;
  v1396 = (id)objc_opt_self(NSBundle);
  v269 = objc_msgSend(v1396, "mainBundle");
  sub_1000989C4();
  sub_1001101BC();
  v270._countAndFlagsBits = 1701669204;
  v270._object = (void *)0xE400000000000000;
  v274 = NSLocalizedString(_:tableName:bundle:value:comment:)(v271, v272, v273, v270, v1458);
  object = v274._object;

  v1408 = (char *)v262;
  v276 = *(int *)(v262 + 24);
  v1402 = (__n128 *)a1;
  v277 = a1 + v276;
  v278 = v1411;
  v279 = *(void (**)(uint64_t))(v1411 + 16);
  v280 = sub_1000C213C();
  v279(v280);
  v281 = sub_10009171C(*(uint64_t (**)(uint64_t, uint64_t))(v278 + 88));
  countAndFlagsBits = v274._countAndFlagsBits;
  v1374 = v274._object;
  if ((_DWORD)v281 == enum case for DetailChartCondition.humidity(_:))
  {
    v282 = v278;
    v283 = sub_1000BA294(&qword_100BCB960);
    v284 = sub_100098740(v283, 96);
    *(_OWORD *)(v284 + 16) = xmmword_1009891D0;
    v285 = static Color.green.getter();
    v286 = Gradient.Stop.init(color:location:)(v285);
    v288 = sub_10021A780(v286, v287);
    v289 = static Color.cyan.getter(v288);
    *(_QWORD *)(v284 + 48) = Gradient.Stop.init(color:location:)(v289);
    *(_QWORD *)(v284 + 56) = v290.n128_u64[0];
    v291 = static Color.blue.getter(v290);
    *(_QWORD *)(v284 + 64) = Gradient.Stop.init(color:location:)(v291);
    *(_QWORD *)(v284 + 72) = v292;
    v293 = v1361.n128_u64[0];
    ((void (*)(unint64_t, _QWORD, _QWORD))v1359[13])(v1361.n128_u64[0], enum case for Color.RGBColorSpace.sRGB(_:), v1360);
    v294 = Color.init(_:red:green:blue:opacity:)(v293, 0.749019608, 0.352941176, 0.949019608, 1.0);
    *(_QWORD *)(v284 + 80) = Gradient.Stop.init(color:location:)(v294);
    *(_QWORD *)(v284 + 88) = v295;
    sub_1000FD8F8();
    v296 = sub_1000950F4();
    v297 = v1410;
    DetailChartGradientModel.init(gradient:startValue:endValue:)(v296, v298);
    sub_10009D3A0();
    if (qword_100BC20C0 != -1)
      swift_once(&qword_100BC20C0, sub_1004049E8);
    sub_1000DD7C4();
    sub_100404364();
    v299 = *(void (**)(uint64_t *, uint64_t (*)(_QWORD, _QWORD, _QWORD), uint64_t))(v1422 + 16);
    v300 = (uint64_t)v1367;
    v301 = v1426;
    v299(v1367, v297, v1426);
    sub_1000F43B0(v300, enum case for ChartLineColor.gradient(_:), *((uint64_t (**)(uint64_t, uint64_t, _QWORD))v1366 + 13));
    v302 = v1362;
    v299((uint64_t *)v1362, v297, v301);
    v303 = v1368;
    ChartAreaStyle.init(gradient:opacity:)(v302);
    v304 = sub_1000DB22C();
    sub_10009926C(v303, 0, v305, v304);
    v306 = sub_1000BA294(&qword_100BCB968);
    v307 = (__n128 *)sub_1000989D4(v306);
    sub_10009EE70(v307, (__n128)xmmword_10097DA20, (__n128)xmmword_1009891C0);
    v308 = v1403;
    sub_1000DA4A8((uint64_t)v274._object, v300, v309);
    v310 = sub_1000B327C();
    v311.n128_f64[0] = ((double (*)(uint64_t, uint64_t, _QWORD *))v279)(v310, v277, v1425);
    v1389 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))DetailChartCondition.id.getter(v311);
    v1371 = v312;
    sub_1000BE774(v303, *(uint64_t (**)(uint64_t, uint64_t))(v282 + 8));
    v313 = sub_1000BA294(&qword_100BCB970);
    v314 = v1364;
    v315 = v1364 + *(int *)(v313 + 48);
    sub_100089084(v1364, v308, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1413 + 16));
    sub_10009C7F0(v314, 0);
    sub_10009C7F0(v315, 1);
    sub_1001098C8(v314, enum case for ChartKind.line(_:), *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v1387 + 104));
    v316 = (uint64_t)v1402;
    v317 = (uint64_t)v1424;
    sub_1000C6998();
    sub_1000C5B90();
    v318 = (uint64_t)v1417;
    v319 = v1417[2] - 1;
    swift_bridgeObjectRetain(v1417);
    sub_10011DEFC(3, v319, 6);
    v1425 = (_QWORD *)v320;
    v321 = sub_1000BA294(&qword_100BCB978);
    v322 = (uint64_t)v1405 + *(int *)(v321 + 48);
    *v1405 = 6;
    _s7Weather24LocationCompositionStateOwst_0(v322, 1, 1, v317);
    v323 = sub_10009993C();
    sub_1000D0034(v323, v324, &qword_100BCB0A0);
    sub_100095144();
    v327 = sub_1000D8E08(v325, v326);
    v1411 = DetailChartCondition.title.getter(v327);
    v1408 = (char *)v328;
    v329 = sub_1000B258C(v1411, "mainBundle");
    sub_1000989C4();
    v1395 = sub_1000D1128(v330, 0x80000001009F4560);
    v1391 = v331;

    v333 = sub_1000B258C(v332, "mainBundle");
    sub_1000989C4();
    sub_1001101BC();
    v1396 = (id)sub_10021A848(v334, v335, v336, v337, v1455, 0x79746964696D7548, v338, v339);
    sub_10021A840((uint64_t)v1396, v340);
    sub_10021A834(v316, v341, type metadata accessor for ConditionDetailChartDataInput);
    v342 = v1397;
    v343 = sub_10011E0CC();
    sub_1000BD9A0(v343, v344, v345);
    sub_1000BEE08();
    sub_10011DC68();
    v348 = v347 & ~v346;
    sub_1000DC8CC();
    v351 = (void *)swift_allocObject(&unk_100B64D10, v349, v350);
    sub_10021A804((uint64_t)v351);
    sub_1000BD9A0((uint64_t)v351 + v348, v317, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v342 + 32));
    v352 = sub_1000BA294(&qword_100BCB988);
    sub_10009D34C(v1385, v353, v354, v352);
    v355 = sub_1004043F8();
    v356 = sub_1004043AC();
    sub_10009E56C(v356);
    sub_1000D1624(v357, enum case for ChartPeakMarkStyle.line(_:));
    v358 = v1392;
    sub_1000C6D7C(v1392, enum case for ChartPastDataTreatment.dimmed(_:), *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v1382 + 104));
    v1261 = sub_10021907C;
    v1461._object = v351;
    sub_10009CC50();
    sub_1000DA8E0();
    v1251 = v1391;
    v1247 = v1395;
    v1242 = (uint64_t)v1408;
    v1238 = v1411;
    v1232 = v1415;
    *(_OWORD *)v1223 = v359;
    *(_OWORD *)&v1223[16] = v359;
    sub_10021A78C();
    sub_1000950F4();
    sub_10011E780();
    sub_10055874C((uint64_t)v1389, (uint64_t)v1371, v314, v1409, v318, v1406, (uint64_t)v1425, (uint64_t)v1405, v1386, v361, v362, v355, v360, v1212, v1213, v1214, v1217, v1218, v1219,
      v1220,
      *(uint64_t *)v1223,
      *(__int128 *)&v1223[8],
      *(uint64_t *)&v1223[24],
      0x40u,
      v1232,
      v358,
      v1238,
      v1242,
      v1247,
      (uint64_t)v1251,
      v1255,
      v1258,
      v1259,
      (uint64_t)v1458._object,
      v1260,
      *((uint64_t *)&v1260 + 1),
      (uint64_t)v1261,
      (uint64_t)v1461._object);
    v363 = *(uint64_t (**)(uint64_t, _QWORD))(v1413 + 8);
    v364 = v1403;
LABEL_7:
    sub_10009DEB8(v364, v363);
LABEL_8:
    (*(void (**)(uint64_t (*)(_QWORD, _QWORD, _QWORD), uint64_t))(v1422 + 8))(v1410, v1426);
    goto LABEL_9;
  }
  v368 = (int *)v281;
  v1363 = (char *)v277;
  if ((_DWORD)v281 == enum case for DetailChartCondition.pressure(_:))
  {
    v369 = v1407;
    v370 = sub_1002158A8(v1407);
    v371 = sub_1000BA294(&qword_100BCB960);
    v372 = sub_100098740(v371, 64);
    v1412 = xmmword_10097DA20;
    *(_OWORD *)(v372 + 16) = xmmword_10097DA20;
    ((void (*)(void))static Color.purple.getter)();
    Color.opacity(_:)(0.1);
    sub_1000C1A0C();
    v373 = sub_100079FF0();
    v375 = sub_10021A780(v373, v374);
    v376 = static Color.purple.getter(v375);
    *(_QWORD *)(v372 + 48) = Gradient.Stop.init(color:location:)(v376);
    *(_QWORD *)(v372 + 56) = v377;
    sub_1000FD8F8();
    type metadata accessor for PressureFormatter(0);
    v378 = v1339;
    static PressureFormatter.minPressure.getter();
    v379 = (void *)sub_10009E3F0();
    v380 = v1340;
    sub_10021A728((uint64_t)v379);

    sub_10009C92C(v378);
    sub_10021A7F8();
    v382 = v381;
    v383 = sub_10009C92C(v380);
    static PressureFormatter.maxPressure.getter(v383);
    v384 = (void *)sub_10009E3F0();
    sub_10021A728((uint64_t)v384);

    sub_10009C92C(v378);
    sub_10021A7F8();
    v386 = v385;
    sub_10009C92C(v380);
    v387 = v1357;
    DetailChartGradientModel.init(gradient:startValue:endValue:)(v382, v386);
    sub_1000951DC();
    v388 = (void (*)(_QWORD, _QWORD, _QWORD))v1371;
    sub_1000D0954((uint64_t)v1371, v389);
    if (qword_100BC20C0 != -1)
      swift_once(&qword_100BC20C0, sub_1004049E8);
    sub_1000DD7C4();
    sub_100404364();
    v391 = static Color.purple.getter(v390);
    v392 = v1367;
    *v1367 = v391;
    sub_1000D0588(v391, enum case for ChartLineColor.color(_:));
    v393 = (void (*)(uint64_t))v1410;
    sub_10021A758((uint64_t)v1410, v387, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v1422 + 16));
    v394 = v1368;
    ChartAreaStyle.init(gradient:opacity:)(v393);
    v395 = sub_1000DB22C();
    sub_10009926C(v394, 0, v396, v395);
    v397 = sub_1000BA294(&qword_100BCB968);
    v398 = sub_1000989D4(v397);
    *(_OWORD *)(v398 + 16) = v1412;
    *(_OWORD *)(v398 + 32) = xmmword_1009891C0;
    ChartLineStyle.init(strokeStyle:lineThickness:lineColor:lineDash:opacity:opacityIncreasedContrast:areaStyle:)(v388, v392, v398, 0, 1, v394);
    sub_10011044C();
    v399 = (uint64_t)v1424;
    if ((v400 & 1) != 0)
      sub_1000FDB0C();
    v434 = (uint64_t)v1402;
    ((void (*)(void))DetailChartExtrema.minValue.getter)();
    v438 = (uint64_t)v1417;
    if ((v437 & 1) != 0)
      Array<A>.minValue.getter(v1417);
    v446 = sub_10011E024();
    v447 = v1350;
    v393(v446);
    sub_10021A6E8(v380, *(double *)&v370);
    v449 = v448;
    sub_10021A81C();
    ((void (*)(uint64_t, _QWORD, uint64_t))v393)(v380, enum case for FloatingPointRoundingRule.down(_:), v447);
    sub_1000878E4();
    v451 = v450;
    sub_10021A81C();
    v452 = sub_100075DFC();
    sub_1000BE768(v452, v453);
    *(_QWORD *)&v1412 = DetailChartCondition.id.getter(v454);
    v500 = v455;
    sub_1000DAE34();
    v456 = sub_1000BA294(&qword_100BCB970);
    v457 = v1358;
    v458 = v1358 + *(int *)(v456 + 48);
    sub_10008908C(v1358, v1365, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1413 + 16));
    sub_1000C138C(v457, 0);
    v430 = v1344;
    sub_1000C138C(v1344, 1);
    sub_1000F111C(v430, v458, &qword_100BCB940);
    sub_10021A734();
    sub_1001098C8(v457, v459, v460);
    sub_1000C6998();
    sub_1000CFBAC(v1356, *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v1420 + 16));
    v461 = *(_QWORD *)(v438 + 16) - 1;
    swift_bridgeObjectRetain(v438);
    sub_10011DEFC(1, v461, 2);
    if (v451 <= v449)
    {
      v1425 = (_QWORD *)v462;
      v463 = sub_1000BA294(&qword_100BCB978);
      v464 = (uint64_t)v1354 + *(int *)(v463 + 48);
      *v1354 = 6;
      v465 = v1332;
      _s7Weather24LocationCompositionStateOwst_0(v1332, 1, 1, v399);
      sub_1000F111C(v465, v464, (uint64_t *)&unk_100BD35A0);
      sub_1000C093C(v1353, (uint64_t)v1429, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v1427 + 16));
      sub_100037794((uint64_t)v1423, v1352, &qword_100BCB0A0);
      v466 = (void *)sub_10009E3F0();
      LOBYTE(v465) = NSUnitPressure.isMetric.getter();

      v1410 = v500;
      if ((v465 & 1) != 0)
      {
        v1411 = 0;
        v1406 = 0;
        LODWORD(v1409) = 128;
      }
      else
      {
        v1411 = sub_10009E3F0();
        LODWORD(v1409) = 4;
        v1406 = 1;
      }
      sub_100095144();
      v469 = sub_1000D8E08(v467, v468);
      v1408 = (char *)DetailChartCondition.title.getter(v469);
      v1405 = v470;
      v471 = sub_1000B258C((uint64_t)v1408, "mainBundle");
      sub_1000989C4();
      v1404 = sub_1000D1128(0xD000000000000030, 0x80000001009F4330);
      v1403 = v472;

      v474 = sub_1000B258C(v473, "mainBundle");
      sub_10011E24C();
      sub_1000989C4();
      v475.super.isa = (Class)v471;
      v478 = sub_10021A848(0xD000000000000030, 0x80000001009F43B0, 0, 0, v475, 0x6572757373657250, v476, v477);
      v480 = v479;

      sub_10021A834(v434, v481, type metadata accessor for ConditionDetailChartDataInput);
      v482 = v1397;
      v483 = v1390;
      v484 = v369;
      v485 = v1398;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v1397 + 16))(v1390, v484, v1398);
      sub_1000BEE08();
      sub_10011DC68();
      v488 = v487 & ~v486;
      sub_1000DC8CC();
      v491 = (char *)swift_allocObject(&unk_100B64CC0, v489, v490);
      sub_10021A804((uint64_t)v491);
      (*(void (**)(char *, uint64_t, uint64_t))(v482 + 32))(&v491[v488], v483, v485);
      v492 = sub_1000BA294(&qword_100BCB988);
      v493 = v1385;
      sub_10009D34C(v1385, v494, v495, v492);
      v496 = sub_1004043F8();
      v497 = sub_1004043AC();
      sub_10009E56C(v497);
      sub_1000D1624(v498, enum case for ChartPeakMarkStyle.line(_:));
      v499 = v1392;
      sub_1000C6D7C(v1392, enum case for ChartPastDataTreatment.dimmed(_:), *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v1382 + 104));
      v1260 = 0uLL;
      v1261 = sub_10021907C;
      v1461._object = v491;
      v1458._object = v480;
      sub_1000C2128();
      v1252 = v1403;
      v1248 = v1404;
      v1243 = v1405;
      v1239 = (uint64_t)v1408;
      v1233 = v1415;
      v1230 = v1409;
      v1227 = v1406;
      v1224 = v1411;
      sub_10021A78C();
      sub_10055874C(v1412, (uint64_t)v1410, v1358, v1355, (uint64_t)v1417, v1356, (uint64_t)v1425, (uint64_t)v1354, v1386, v451, v449, v496, v370, 0, v493, v1353, v1352, (uint64_t)_swiftEmptyArrayStorage, v1219,
        v1220,
        0,
        (unint64_t)v1224,
        v1227,
        v1230,
        v1233,
        v499,
        v1239,
        (uint64_t)v1243,
        v1248,
        v1252,
        v1255,
        v1258,
        v478,
        (uint64_t)v1458._object,
        v1260,
        *((uint64_t *)&v1260 + 1),
        (uint64_t)v1261,
        (uint64_t)v1461._object);
      sub_10009DEB8(v1365, *(uint64_t (**)(uint64_t, _QWORD))(v1413 + 8));
      (*(void (**)(uint64_t, uint64_t))(v1422 + 8))(v1357, v1426);
      goto LABEL_58;
    }
    __break(1u);
    goto LABEL_212;
  }
  if ((_DWORD)v281 == enum case for DetailChartCondition.precipitationTotal(_:))
  {
    v401 = (uint64_t)v1417;
    v402 = sub_100215414(1, (uint64_t)v1417);
    v1458._object = v279;
    v404 = v403;
    v406 = v405;
    v408 = v407;
    swift_bridgeObjectRetain(v401);
    v409 = sub_1002154B0(v402, v404, v406, v408, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))sub_1006ED464);
    v410 = sub_1000BA294(&qword_100BC42C8);
    v411 = sub_100098740(v410, 40);
    *(_OWORD *)(v411 + 16) = xmmword_10097CA50;
    v412 = static Color.cyan.getter(v411);
    *(_QWORD *)(v411 + 32) = v412;
    v1440 = (_QWORD *)v411;
    specialized Array._endMutation()(v412);
    Gradient.init(colors:)(v1440);
    DetailChartGradientModel.init(gradient:startValue:endValue:)(0.0, 3.0);
    v413 = v1396;
    v414 = objc_msgSend(v1396, "mainBundle");
    sub_1000989C4();
    v1414 = sub_1000B4524(v415, v416, (uint64_t)"This chart shows precipitation intensity over time.");
    v1413 = v417;

    v418 = objc_msgSend(v413, "mainBundle");
    sub_1000989C4();
    sub_1000B2FC4();
    v419._object = (void *)0x80000001009F44F0;
    v421 = NSLocalizedString(_:tableName:bundle:value:comment:)(v420, (Swift::String_optional)0, (NSBundle)v418, v419, v1461);
    v1406 = v421._countAndFlagsBits;
    v1405 = v421._object;

    sub_100075DFC();
    sub_1000EF970();
    *(_QWORD *)&v1412 = DetailChartCondition.id.getter(v422);
    v1410 = v423;
    sub_1000BD990(v1411);
    v424 = v1345;
    v425 = sub_10011E3D0();
    sub_10021A758(v425, v426, v427);
    sub_10021A734();
    sub_1001098C8(v424, v428, v429);
    v430 = (uint64_t)v1424;
    sub_1000C6998();
    sub_1000CFBAC(v1336, *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v1420 + 16));
    v431 = sub_1000BA294(&qword_100BCB978);
    v432 = (uint64_t)v1346 + *(int *)(v431 + 48);
    *v1346 = 6;
    v1425 = v409;
    sub_1002F6F6C((uint64_t)v409, v1322);
    v433 = sub_1000C0944();
    v434 = (uint64_t)v1329;
    v436 = sub_100088FC8(v433, v435, (uint64_t)v1329);
    if (v512)
    {
      sub_100110704(v436, &qword_100BCB0A0);
      v501 = 1;
      v500 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v1328;
    }
    else
    {
      DetailChartDataElement.date.getter(v436);
      v500 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v1328;
      sub_10009DD6C();
      v501 = 0;
    }
    v369 = v1326;
    v457 = v1323;
    sub_1000BEC68(v432, v501);
    v399 = (uint64_t)v1417;
    if (qword_100BC20C0 == -1)
    {
LABEL_33:
      sub_1000DD7C4();
      v502 = sub_100404388();
      sub_1000C093C(v1342, (uint64_t)v1429, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v1427 + 16));
      sub_100037794((uint64_t)v1423, v1337, &qword_100BCB0A0);
      sub_1002F6F6C((uint64_t)v1425, v457);
      v503 = sub_100088FC8(v457, 1, v434);
      v504 = v1327;
      if (v512)
      {
        sub_1000FF448(v457, &qword_100BCB0A0);
        v513 = sub_1000BEC68(v369, 1);
      }
      else
      {
        DetailChartDataElement.date.getter(v503);
        v511 = (*((uint64_t (**)(uint64_t, uint64_t))v500 + 1))(v457, v434);
        sub_10009E948(v511);
        sub_10021A7D8(-30);
        sub_10004A344();
        sub_1000BEC74();
        sub_1000BEC68(v369, 0);
        v513 = sub_100088FC8(v369, 1, v430);
        if (!v512)
        {
          sub_10021A774();
          v525(v1333, v369, v430);
          goto LABEL_48;
        }
      }
      v514 = Date.init()(v513);
      sub_10009C204(v514, (uint64_t *)&unk_100BD35A0);
LABEL_48:
      sub_10020CDC4((uint64_t)v1425, (uint64_t (*)(_QWORD))&type metadata accessor for DetailChartDataElement, v1325);
      v526 = sub_1000C0944();
      v528 = sub_100088FC8(v526, v527, v434);
      if (v512)
      {
        sub_100110704(v528, &qword_100BCB0A0);
        v531 = sub_1000BEC68(v504, 1);
      }
      else
      {
        DetailChartDataElement.date.getter(v528);
        v529 = sub_10009DD6C();
        sub_10009E948(v529);
        sub_10021A7D8(60);
        sub_10004A344();
        sub_1000BEC74();
        sub_1000BEC68(v504, 0);
        v531 = sub_100088FC8(v504, 1, v430);
        if (!v530)
        {
          sub_10021A774();
          v536 = sub_10011E3D0();
          v537(v536);
LABEL_57:
          v538 = (uint64_t)v1363;
          v1411 = sub_100215594(v399, (uint64_t)v1363);
          swift_bridgeObjectRelease(v399);
          v539 = (uint64_t)v1402;
          sub_100095144();
          v540 = v1415;
          v542 = v541(v1415);
          v543 = v538;
          v1417 = (_QWORD *)DetailChartCondition.title.getter(v542);
          v545 = v544;
          v546 = v1381;
          sub_10000AB54(v539, v1381, type metadata accessor for ConditionDetailChartDataInput);
          v547 = v1397;
          v548 = sub_10011E0CC();
          sub_100089084(v548, v549, v550);
          sub_1000ECF3C();
          sub_1000BF0E8();
          v553 = swift_allocObject(&unk_100B64CE8, v551, v552);
          sub_100219038(v546, v553 + v543);
          sub_100089084(v553 + v434, (uint64_t)v500, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v547 + 32));
          v554 = sub_1000BA294(&qword_100BCB988);
          v555 = v1385;
          sub_10009D34C(v1385, v556, v557, v554);
          v558 = sub_1004043AC();
          sub_10009E56C(v558);
          sub_1000D1624(v559, enum case for ChartPeakMarkStyle.line(_:));
          v560 = v1392;
          sub_1000C6D7C(v1392, enum case for ChartPastDataTreatment.dimmed(_:), *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v1382 + 104));
          sub_1005590A0(v1412, (uint64_t)v1410, v1345, v1335, (uint64_t)v1425, v1336, 0, (uint64_t)v1346, v1386, 0.0, 3.0, v502, 0x3FF0000000000000, 0, v555, v1342, v1337, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)&qword_100CAE968,
            7,
            v1333,
            v1334,
            v1411,
            1uLL,
            0,
            128,
            v540,
            v560,
            (uint64_t)v1417,
            v545,
            v1414,
            v1413,
            countAndFlagsBits,
            (uint64_t)v1374,
            v1406,
            (uint64_t)v1405,
            0,
            0,
            (uint64_t)sub_10021907C,
            v553);
          (*(void (**)(uint64_t, uint64_t))(v1422 + 8))(v1343, v1426);
LABEL_58:
          sub_100086108();
          sub_1000B3B54();
          v367 = (uint64_t)v1423;
          goto LABEL_59;
        }
      }
      Date.init()(v531);
      sub_1000FF448(v504, (uint64_t *)&unk_100BD35A0);
      goto LABEL_57;
    }
LABEL_212:
    swift_once(&qword_100BC20C0, sub_1004049E8);
    goto LABEL_33;
  }
  if ((_DWORD)v281 == enum case for DetailChartCondition.temperature(_:))
  {
    v439 = (uint64_t)v1402;
    sub_1000F3E04();
    v440 = v1315;
    v441 = sub_10011E1F4();
    v442 = v440;
    AppConfiguration.temperatureScale.getter(v441);
    sub_1000D0C30(v1316);
    *(double *)&v443 = COERCE_DOUBLE(sub_10011044C());
    if ((v444 & 1) != 0)
    {
      sub_1000FDB0C();
      v445 = v515;
    }
    else
    {
      v445 = *(double *)&v443;
    }
    v516 = (void (*)(_QWORD, _QWORD, _QWORD))v1371;
    v517 = v1331;
    *(double *)&v518 = COERCE_DOUBLE(DetailChartExtrema.maxSecondValue.getter());
    if ((v519 & 1) != 0)
    {
      sub_100095290();
      v520 = v532;
    }
    else
    {
      v520 = *(double *)&v518;
    }
    *(double *)&v533 = COERCE_DOUBLE(DetailChartExtrema.maxThirdValue.getter());
    if ((v534 & 1) != 0)
      v535 = Array<A>.maxThirdValue.getter(v1417);
    else
      v535 = *(double *)&v533;
    v561 = sub_10021472C((uint64_t)_swiftEmptyArrayStorage, v445, v520, v535);
    v563 = v562;
    *(double *)&v564 = COERCE_DOUBLE(DetailChartExtrema.minValue.getter(v561));
    if ((v565 & 1) != 0)
    {
      sub_10011DF64();
      v566 = v567;
    }
    else
    {
      v566 = *(double *)&v564;
    }
    *(double *)&v568 = COERCE_DOUBLE(DetailChartExtrema.minSecondValue.getter());
    if ((v569 & 1) != 0)
    {
      sub_10009E288();
      v570 = v571;
    }
    else
    {
      v570 = *(double *)&v568;
    }
    *(double *)&v572 = COERCE_DOUBLE(DetailChartExtrema.minThirdValue.getter());
    if ((v573 & 1) != 0)
      v574 = Array<A>.minThirdValue.getter(v1417);
    else
      v574 = *(double *)&v572;
    sub_100214760((uint64_t)_swiftEmptyArrayStorage, v566, v570, v574);
    v576 = sub_1002146B0(v563, v575);
    v577 = sub_10011E024();
    v578 = v1350;
    v442(v577);
    sub_10021A6E8(0xD000000000000030, v576);
    v580 = v579;
    sub_10021A828();
    ((void (*)(unint64_t, _QWORD, uint64_t))v442)(0xD000000000000030, enum case for FloatingPointRoundingRule.up(_:), v578);
    sub_1000878E4();
    v582 = v581;
    v583 = sub_10021A828();
    v584 = v1407;
    ConditionUnits.temperature.getter(v583);
    v585 = v1330;
    TemperatureScaleConfiguration.gradientValueRange(for:)();
    sub_10021A798();
    v587 = sub_10011DB24(v586, "mainBundle");
    sub_10011E24C();
    sub_1000989C4();
    v1389 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_1000B4524(v588, v589, (uint64_t)"This chart shows the temperature over time.");
    *(_QWORD *)&v1365 = v590;

    sub_1000BE768(v517, (uint64_t)v1363);
    sub_1000B2FE8();
    v591 = (int *)v1319;
    sub_100037794(v1320, v517 + *(int *)(v1319 + 24), &qword_100BCB720);
    v592 = v517 + v591[7];
    v1361.n128_u64[0] = *(_QWORD *)(v1397 + 16);
    v593 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v1361.n128_u64[0])(v592, v584, v1398);
    *(_BYTE *)(v517 + v591[5]) = (_BYTE)v585;
    *(_BYTE *)(v517 + v591[8]) = 1;
    *(_BYTE *)(v517 + v591[9]) = 1;
    *(_QWORD *)(v517 + v591[10]) = 0;
    v594 = v1318;
    TemperatureScaleConfiguration.gradient.getter(v593);
    Gradient.init(_:)(v594);
    v595 = v1410;
    sub_10009C848();
    sub_1000951DC();
    sub_1000D0954((uint64_t)v516, v596);
    if (qword_100BC20C0 != -1)
      swift_once(&qword_100BC20C0, sub_1004049E8);
    sub_1000DD7C4();
    sub_100404364();
    v597 = *(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(v1422 + 16);
    v598 = (uint64_t)v1367;
    v599 = v1426;
    v600 = v597(v1367, v595, v1426);
    sub_1000D0588(v600, enum case for ChartLineColor.gradient(_:));
    v597((uint64_t *)v1362, v595, v599);
    sub_10021A700();
    v601 = sub_1000DB22C();
    sub_10009926C(v599, 0, v602, v601);
    v603 = sub_1000BA294(&qword_100BCB968);
    v604 = (__n128 *)sub_1000989D4(v603);
    sub_10009EE70(v604, (__n128)xmmword_10097DA20, (__n128)xmmword_1009891C0);
    v605 = v1403;
    sub_1000DA4A8((uint64_t)v516, v598, v606);
    v607 = sub_10009E518();
    v608.n128_f64[0] = ((double (*)(uint64_t))v279)(v607);
    v1370 = (_QWORD *)DetailChartCondition.id.getter(v608);
    v1371 = v609;
    sub_1000DAE34();
    sub_1000BA294(&qword_100BCB970);
    v610 = sub_1000FC5F4();
    v611 = v1414;
    sub_100089084(v610, v605, v612);
    _s7Weather24LocationCompositionStateOwst_0(v598, 0, 1, v611);
    sub_10009C7F0(v599, 1);
    sub_1001098C8(v598, enum case for ChartKind.line(_:), *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v1387 + 104));
    v268 = v1408;
    v368 = v1424;
    sub_1000C6998();
    sub_1000C5B90();
    sub_1000C0D20();
    sub_1000989E0();
    v1425 = (_QWORD *)v613;
    v614 = v1405;
    if (v580 <= v582)
    {
      v615 = v595;
      v616 = (uint64_t)v614 + *(int *)(sub_1000BA294(&qword_100BCB978) + 48);
      *v614 = 6;
      sub_10009E61C(v616, 1);
      v617 = sub_100404388();
      v618 = sub_10009993C();
      sub_1000D0034(v618, v619, &qword_100BCB0A0);
      v1411 = (uint64_t)sub_10009E32C(v1331);
      v620 = sub_1000BA294(&qword_100BCB980);
      v621 = v1384;
      v622 = (char *)v1384 + *(int *)(v620 + 48);
      *v621 = sub_1004043AC();
      v597((uint64_t *)v622, v615, v1426);
      v623 = sub_1000CDBC8((uint64_t)v621, enum case for ChartPeakMarkStyle.filled(_:), *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v1376 + 104));
      v624 = v1407;
      v1395 = ConditionUnits.temperature.getter(v623);
      sub_100095144();
      sub_1000D8E08(v625, v626);
      v1408 = (char *)sub_10021A7E4();
      v1391 = v627;
      v628 = sub_10011DB24((uint64_t)v1408, "mainBundle");
      sub_10021A7C4();
      sub_1000989C4();
      sub_10011E2E4();
      v636 = sub_10009DA30(v629, v630, v631, v632, v1456, v633, v634, v635);
      sub_10009EFB0(v636);
      v638 = v637;

      v639 = v1381;
      sub_10000AB54(v439, v1381, type metadata accessor for ConditionDetailChartDataInput);
      v640 = v1390;
      v641 = v624;
      v642 = v1398;
      ((void (*)(uint64_t, uint64_t, uint64_t))v1361.n128_u64[0])(v1390, v641, v1398);
      sub_10021A718();
      v645 = v644 & ~v643;
      v646 = v1397;
      v647 = (v1379 + *(unsigned __int8 *)(v1397 + 80) + v645) & ~(unint64_t)*(unsigned __int8 *)(v1397 + 80);
      sub_1000DC8CC();
      v650 = swift_allocObject(&unk_100B64D60, v648, v649);
      sub_100219038(v639, v650 + v645);
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v646 + 32))(v650 + v647, v640, v642);
      v651 = sub_1000BA294(&qword_100BCB988);
      sub_10009D34C(v1385, v652, v653, v651);
      v654 = v1392;
      sub_1000C6D7C(v1392, enum case for ChartPastDataTreatment.dimmed(_:), *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v1382 + 104));
      *(_QWORD *)&v1260 = sub_10021907C;
      *((_QWORD *)&v1260 + 1) = v650;
      sub_10009CC50();
      v1256 = (uint64_t)v1396;
      sub_1000C2128();
      v1244 = v1365;
      sub_10009BC5C();
      v1234 = v655;
      v1228 = v1415;
      *(_OWORD *)&v1221[8] = v656;
      *(_QWORD *)v1221 = v1395;
      sub_10011E780();
      sub_1000C51EC((uint64_t)v1370, (uint64_t)v1371, v1364, v1386, v580, v582, v617, *(uint64_t *)&v576, v1210, v1211, v1212, v1213, v1214, (uint64_t)v621, 7, 0, *(__int128 *)v1221, *(uint64_t *)&v1221[16], 0,
        v1228,
        v654,
        v1234,
        v1236,
        v1237,
        v1244,
        v1246,
        v1250,
        v1256,
        v638,
        v1259,
        (uint64_t)v1458._object,
        v1260,
        *((uint64_t *)&v1260 + 1));
      sub_1000F41FC();
      sub_10011AB94();
      sub_10021A6BC(v1331, type metadata accessor for DetailChartViewModelFactory.PeakMarkerRequestContext);
      (*(void (**)(void *, uint64_t))(v1309 + 8))(v1330, v1310);
LABEL_9:
      v365 = *(uint64_t (**)(uint64_t, _QWORD))(v1427 + 8);
      v366 = (uint64_t)v1429;
LABEL_10:
      sub_1000B2ED8(v366, v365);
      sub_1000B3B54();
      v367 = (uint64_t)v1423;
LABEL_59:
      sub_1000FF448(v367, &qword_100BCB0A0);
      sub_100094F5C();
      sub_1000FDA00();
      sub_1000DE25C((uint64_t)v1394, *(uint64_t (**)(uint64_t, _QWORD))(v1401 + 8));
      return;
    }
    __break(1u);
LABEL_214:
    __break(1u);
LABEL_215:
    swift_once(&qword_100BC20C0, sub_1004049E8);
LABEL_97:
    sub_1000DD7C4();
    sub_100404364();
    v757 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v1422 + 16);
    v758 = v1367;
    v757(v1367, v611, v1426);
    v1361.n128_u64[0] = *((_QWORD *)v1366 + 13);
    v759 = (uint64_t)v1370;
    ((void (*)(uint64_t *, _QWORD, _QWORD *))v1361.n128_u64[0])(v758, enum case for ChartLineColor.gradient(_:), v1370);
    v1389 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_1000DB22C();
    v760 = v1368;
    sub_10009D34C(v1368, v761, v762, (uint64_t)v1389);
    v1366 = (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1000BA294(&qword_100BCB968);
    v763 = (__n128 *)sub_1000989D4((uint64_t)v1366);
    v1362 = xmmword_10097DA20;
    v1365 = xmmword_1009891C0;
    sub_10009EE70(v763, (__n128)xmmword_10097DA20, (__n128)xmmword_1009891C0);
    sub_1000BDC3C((uint64_t)v268, (uint64_t)v758, v764);
    v1359 = sub_10009E32C(v439);
    v765 = Color.init(hex:)(0x433341334133, 0xE600000000000000);
    v766 = sub_1000BA294(&qword_100BC42C8);
    v767 = sub_100098740(v766, 40);
    *(_OWORD *)(v767 + 16) = xmmword_10097CA50;
    v768 = Color.opacity(_:)(0.35);
    *(_QWORD *)(v767 + 32) = v768;
    v1441 = v767;
    specialized Array._endMutation()(v768);
    Gradient.init(colors:)(v1441);
    v769 = sub_1000950F4();
    v770 = v1308;
    DetailChartGradientModel.init(gradient:startValue:endValue:)(v769, v771);
    sub_10021A760();
    ((void (*)(void))v1403)();
    sub_100404364();
    *v758 = v765;
    ((void (*)(uint64_t *, _QWORD, uint64_t))v1361.n128_u64[0])(v758, enum case for ChartLineColor.color(_:), v759);
    v772 = v1410;
    v1370 = v757;
    v757((uint64_t *)v1410, v770, v1426);
    v1403 = v765;
    swift_retain();
    ChartAreaStyle.init(gradient:opacity:)(v772);
    _s7Weather24LocationCompositionStateOwst_0(v760, 0, 1, (uint64_t)v1389);
    v773 = sub_1000989D4((uint64_t)v1366);
    v774 = v1365;
    *(_OWORD *)(v773 + 16) = v1362;
    *(_OWORD *)(v773 + 32) = v774;
    sub_1000BDC3C((uint64_t)v268, (uint64_t)v758, v773);
    v775 = v1411;
    v776 = sub_1000B327C();
    v777(v776, v368, v1425);
    LOBYTE(v759) = sub_10068A5B8((uint64_t)v1363, (uint64_t)v772);
    v778 = *(uint64_t (**)(uint64_t))(v775 + 8);
    v779 = sub_10011E3D0();
    v780 = v778(v779);
    v781 = sub_10011DB24(v780, "mainBundle");
    sub_10011E24C();
    sub_1000989C4();
    if ((v759 & 1) != 0)
      v784 = "This chart shows what the temperature feels like over time.";
    else
      v784 = "This chart shows what the temperature feels like, in direct sun, over time.";
    v1411 = sub_1000B4524(v782, v783, (uint64_t)v784);
    v1389 = v785;
    v786 = (uint64_t)v1424;
    v787 = (uint64_t)v1419;
    v788 = v1429;
    v522 = v1402;
    v789 = v1414;
    v790 = (uint64_t)v1408;

    sub_100075DFC();
    v791 = (uint64_t)v1425;
    sub_1000EF970();
    v1371 = (char *)DetailChartCondition.id.getter(v792);
    v1410 = v793;
    ((void (*)(void *, uint64_t))v778)(v772, v791);
    v794 = sub_1000BA294(&qword_100BCB970);
    v795 = v1364;
    v796 = v1364 + *(int *)(v794 + 48);
    v676 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1413 + 16);
    v676(v1364, v1314, v789);
    _s7Weather24LocationCompositionStateOwst_0(v795, 0, 1, v789);
    v676(v796, v1313, v789);
    sub_10009E61C(v796, 0);
    sub_10021A734();
    sub_1001098C8(v795, v797, v798);
    sub_1000C6998();
    sub_10009BEA4();
    sub_1000C0D20();
    sub_1000989E0();
    v1425 = (_QWORD *)v799;
    if (v580 <= v582)
    {
      v800 = sub_1000BA294(&qword_100BCB978);
      v801 = sub_10009937C(v800);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v801, v802, v803, v786);
      sub_100404388();
      v804 = sub_1000C093C(v1412, (uint64_t)v788, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v1427 + 16));
      sub_1000D0034(v804, v805, &qword_100BCB0A0);
      sub_1000BA294(&qword_100BCB980);
      v806 = v1384;
      *v806 = sub_1004043AC();
      sub_10011DFA0();
      v807 = sub_1000CDBC8((uint64_t)v806, enum case for ChartPeakMarkStyle.filled(_:), *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v1376 + 104));
      v808 = v1407;
      v1395 = ConditionUnits.temperature.getter(v807);
      sub_1000D9BC4(v1395, (uint64_t)v522 + *(int *)(v790 + 56));
      v1408 = (char *)sub_10021A7E4();
      v1391 = v809;
      v810 = (objc_class *)sub_10011DB24((uint64_t)v1408, "mainBundle");
      sub_10021A7C4();
      sub_1000989C4();
      v811.super.isa = v810;
      v1396 = (id)sub_10009DA30(v812, 0x80000001009F46E0, 0, 0, v811, v813, v814, v815);
      v1388 = v816;

      v817 = v1381;
      sub_10000AB54((uint64_t)v522, v1381, type metadata accessor for ConditionDetailChartDataInput);
      ((void (*)(uint64_t, uint64_t, uint64_t))v1360)(v1390, v808, v1398);
      sub_10021A718();
      v820 = v819 & ~v818;
      v821 = v1397;
      sub_1000BF0E8();
      v824 = (void *)swift_allocObject(&unk_100B64D38, v822, v823);
      sub_100219038(v817, (uint64_t)v824 + v820);
      sub_10011DE98((uint64_t)v522 + (_QWORD)v824, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v821 + 32));
      v825 = sub_1000BA294(&qword_100BCB988);
      v826 = v1385;
      sub_10009D34C(v1385, v827, v828, v825);
      v829 = v1392;
      sub_1000C6D7C(v1392, enum case for ChartPastDataTreatment.dimmed(_:), *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v1382 + 104));
      v1261 = sub_10021907C;
      v1461._object = v824;
      *(_QWORD *)&v1260 = 0;
      *((_QWORD *)&v1260 + 1) = 0xE000000000000000;
      sub_1000DA8E0();
      v1253 = v1389;
      sub_10009BC5C();
      v1240 = v830;
      v1235 = v1415;
      v1225 = v1395;
      sub_1000F40A8();
      v1215 = v831;
      v832 = sub_1000B30C0();
      sub_1000C51EC(v833, (uint64_t)v1410, v1364, v834, v832, v835, v836, v1211, v1212, v826, v1215, v1217, v1218, (uint64_t)v806, 7, 0, (unint64_t)v1225, 0, 0,
        v1235,
        v829,
        v1240,
        v1241,
        v1246,
        (uint64_t)v1253,
        v1255,
        v1258,
        v1259,
        (uint64_t)v1458._object,
        v1260,
        *((uint64_t *)&v1260 + 1),
        (uint64_t)v1261,
        (uint64_t)v1461._object);
      swift_release(v1403);
      sub_10004A33C(v1313);
      sub_1000BE8BC(v1308);
      sub_10004A33C(v1314);
      sub_1000BE8BC(v1311);
      sub_10021A6BC(v1307, type metadata accessor for DetailChartViewModelFactory.PeakMarkerRequestContext);
      (*(void (**)(uint64_t, uint64_t))(v1309 + 8))(v1312, v1310);
      v365 = *(uint64_t (**)(uint64_t, _QWORD))(v1427 + 8);
      v366 = (uint64_t)v788;
      goto LABEL_10;
    }
    __break(1u);
LABEL_217:
    swift_once(&qword_100BC20C0, sub_1004049E8);
LABEL_107:
    sub_1000DD7C4();
    sub_100404364();
    v845 = *(void (**)(uint64_t))(v1422 + 16);
    v846 = (uint64_t)v1367;
    v847 = sub_1000C213C();
    v848 = v1426;
    v845(v847);
    sub_1000F43B0(v846, enum case for ChartLineColor.gradient(_:), *((uint64_t (**)(uint64_t, uint64_t, _QWORD))v1366 + 13));
    v849 = v1362;
    v1366 = (uint64_t (*)(uint64_t, uint64_t, _QWORD))v845;
    ((void (*)(_QWORD, _QWORD, uint64_t))v845)(v1362, v676, v848);
    v850 = v1368;
    ChartAreaStyle.init(gradient:opacity:)(v849);
    v851 = sub_1000DB22C();
    sub_10009926C(v850, 0, v852, v851);
    v853 = sub_1000BA294(&qword_100BCB968);
    v854 = (__n128 *)sub_1000989D4(v853);
    sub_10009EE70(v854, (__n128)xmmword_10097DA20, (__n128)xmmword_1009891C0);
    v505 = v1403;
    sub_1000DA4A8((uint64_t)v788, v846, v855);
    v856 = sub_1000B327C();
    v857 = v787;
    sub_1000FEC3C(v856, v787);
    v1371 = (char *)DetailChartCondition.id.getter(v858);
    v1370 = (_QWORD *)v859;
    (*(void (**)(uint64_t, uint64_t))(v1411 + 8))(v850, v795);
    v860 = sub_1000BA294(&qword_100BCB970);
    v861 = v1364;
    v862 = v1364 + *(int *)(v860 + 48);
    v863 = v1414;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1413 + 16))(v1364, v505, v1414);
    _s7Weather24LocationCompositionStateOwst_0(v861, 0, 1, v863);
    sub_10009E61C(v862, 1);
    sub_10021A734();
    sub_1001098C8(v861, v864, v865);
    v866 = (uint64_t)v1408;
    v664 = (uint64_t)v1424;
    sub_1000C6998();
    sub_1000C5B90();
    object = v1417;
    v867 = v1417[2] - 1;
    swift_bridgeObjectRetain(v1417);
    sub_100214794(1, v867, 2, (uint64_t)object);
    v1425 = (_QWORD *)v868;
    v869 = (uint64_t)v1429;
    if (v576 >= 0.0)
    {
      v870 = sub_1000BA294(&qword_100BCB978);
      v871 = sub_1000CF77C(v870);
      v873 = sub_1000C093C(v871, v869, v872);
      sub_1000D0034(v873, v874, &qword_100BCB0A0);
      v1411 = (uint64_t)sub_100214A3C(v1331);
      v875 = sub_1000BA294(&qword_100BCB980);
      v876 = v1384;
      v877 = (uint64_t)v1384 + *(int *)(v875 + 48);
      *v876 = sub_1004043AC();
      v1366(v877, (uint64_t)v676, v1426);
      sub_1000CDBC8((uint64_t)v876, enum case for ChartPeakMarkStyle.filled(_:), *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v1376 + 104));
      v1395 = sub_100215594((uint64_t)v1417, v857);
      v878 = (uint64_t)v1402;
      sub_1000D9BC4(v1395, (uint64_t)v1402 + *(int *)(v866 + 56));
      v1408 = (char *)sub_10021A76C();
      v1391 = v879;
      v880 = sub_1000B258C((uint64_t)v1408, "mainBundle");
      sub_10021A7B0();
      sub_1000989C4();
      v1389 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_1000D1128(v881, 0x80000001009F4250);
      sub_10021A840((uint64_t)v1389, v882);
      v884 = sub_1000B258C(v883, "mainBundle");
      sub_1000989C4();
      sub_1001101BC();
      v891 = sub_10021A848(v885, v886, v887, v888, v1457, 0x7865646E49205655, v889, v890);
      sub_10009EFB0(v891);
      v893 = v892;

      v894 = v1381;
      sub_10000AB54(v878, v1381, type metadata accessor for ConditionDetailChartDataInput);
      v895 = v1390;
      v1369(v1390, v1407, v1398);
      sub_1000BEE08();
      v896 = v1397;
      sub_10011DC68();
      v899 = v898 & ~v897;
      sub_1000DC8CC();
      v902 = swift_allocObject(&unk_100B64C98, v900, v901);
      sub_100219038(v894, (uint64_t)v884 + v902);
      sub_10008908C(v902 + v899, v895, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v896 + 32));
      v903 = sub_1000BA294(&qword_100BCB988);
      v904 = v1385;
      sub_10009D34C(v1385, v905, v906, v903);
      v907 = sub_1004043F8();
      v908 = v1392;
      sub_1000C6D7C(v1392, enum case for ChartPastDataTreatment.dimmed(_:), *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v1382 + 104));
      *(_QWORD *)&v1260 = sub_10021907C;
      *((_QWORD *)&v1260 + 1) = v902;
      sub_10009CC50();
      v1257 = (uint64_t)v1396;
      v1254 = (uint64_t)v1374;
      v1249 = countAndFlagsBits;
      v1245 = (uint64_t)v1388;
      sub_10009BC5C();
      sub_1000C51EC((uint64_t)v1371, (uint64_t)v1370, v1364, v1386, 0.0, v576, v907, 0x3FF0000000000000, 0, v904, v1412, v1404, v1411, (uint64_t)v876, 7, v1395, v910, 0, 0x80u,
        v1415,
        v908,
        v909,
        v1236,
        v1237,
        v1245,
        v1249,
        v1254,
        v1257,
        v893,
        v1259,
        (uint64_t)v1458._object,
        v1260,
        *((uint64_t *)&v1260 + 1));
      sub_1000F41FC();
      sub_10011AB94();
      sub_10021A6BC(v1331, type metadata accessor for DetailChartViewModelFactory.PeakMarkerRequestContext);
      goto LABEL_9;
    }
    __break(1u);
LABEL_219:
    swift_once(&qword_100BC20C0, sub_1004049E8);
LABEL_82:
    sub_1000DD7C4();
    sub_100404364();
    v679 = static Color.white.getter(v678);
    v680 = (uint64_t)v1367;
    *v1367 = v679;
    sub_1000D0588(v679, enum case for ChartLineColor.color(_:));
    sub_10021A758(v1362, (uint64_t)v676, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v1422 + 16));
    sub_10021A700();
    v681 = sub_1000DB22C();
    sub_10009926C((uint64_t)&qword_100CAE968, 0, v682, v681);
    v683 = sub_1000BA294(&qword_100BCB968);
    v684 = (__n128 *)sub_1000989D4(v683);
    sub_10009EE70(v684, (__n128)xmmword_10097DA20, v522[28]);
    sub_1000DA4A8((uint64_t)object, v680, v685);
    v686 = sub_1000B327C();
    sub_1000BE768(v686, (uint64_t)v1363);
    v1389 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))DetailChartCondition.id.getter(v687);
    v1371 = v688;
    (*(void (**)(uint64_t *, void (*)(uint64_t, uint64_t, uint64_t)))(v664 + 8))(&qword_100CAE968, v676);
    sub_1000BA294(&qword_100BCB970);
    sub_10009C8B0();
    sub_100089084(v664, v505, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v689 + 16));
    v690 = sub_100095528();
    sub_10009C7F0(v690, 1);
    sub_1001098C8(v664, enum case for ChartKind.line(_:), *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v1387 + 104));
    v691 = (uint64_t)v1408;
    v692 = (uint64_t)v1402;
    sub_1000C6998();
    sub_1000C5B90();
    sub_1000C0D20();
    sub_1000989E0();
    v1425 = (_QWORD *)v693;
    v694 = sub_1000BA294(&qword_100BCB978);
    v695 = (uint64_t)v1405 + *(int *)(v694 + 48);
    *v1405 = 6;
    sub_1000C138C(v695, 1);
    v696 = sub_10009993C();
    sub_1000D0034(v696, v697, &qword_100BCB0A0);
    v698 = v1407;
    v1411 = ConditionUnits.visibility.getter(v699);
    sub_1000D9BC4(v1411, v692 + *(int *)(v691 + 56));
    v1408 = (char *)sub_10021A76C();
    v1395 = v700;
    v701 = v1396;
    v702 = objc_msgSend(v1396, "mainBundle");
    sub_10021A7B0();
    sub_1000989C4();
    v1391 = (void (*)(_QWORD, _QWORD, _QWORD))sub_1000B4524(v703, v704, (uint64_t)"This chart shows visibility over time.");
    sub_10021A840((uint64_t)v1391, v705);
    v706 = objc_msgSend(v701, "mainBundle");
    sub_1000989C4();
    sub_1001101BC();
    v707._countAndFlagsBits = 0x696C696269736956;
    v707._object = (void *)0xEA00000000007974;
    v711 = NSLocalizedString(_:tableName:bundle:value:comment:)(v708, v709, v710, v707, v1462)._countAndFlagsBits;
    sub_10009EFB0(v711);
    v1387 = v712;

    sub_10009C878(v692, v713, type metadata accessor for ConditionDetailChartDataInput);
    v714 = v1397;
    v715 = v1390;
    sub_1000BE9D4(v1390, v698, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1397 + 16));
    sub_1000ECF3C();
    v716 = v505;
    v719 = v718 & ~v717;
    sub_1000DC8CC();
    v722 = swift_allocObject(&unk_100B64C70, v720, v721);
    sub_100219038(v692, (uint64_t)v706 + v722);
    sub_1000BE9D4(v722 + v719, v715, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v714 + 32));
    v723 = sub_1000BA294(&qword_100BCB988);
    v724 = v1385;
    sub_10009D34C(v1385, v725, v726, v723);
    v727 = sub_1004043F8();
    v728 = sub_1004043AC();
    sub_10009E56C(v728);
    sub_1000D1624(v729, enum case for ChartPeakMarkStyle.line(_:));
    sub_1000C6D7C(v1392, enum case for ChartPastDataTreatment.dimmed(_:), *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v1382 + 104));
    *(_QWORD *)&v1260 = sub_10021907C;
    *((_QWORD *)&v1260 + 1) = v722;
    sub_10009CC50();
    v1258 = v1387;
    sub_1000D1C8C();
    *(_OWORD *)&v1222[8] = v730;
    *(_QWORD *)v1222 = v1411;
    sub_10021A78C();
    sub_1000F40A8();
    sub_1000C51EC((uint64_t)v1389, (uint64_t)v1371, v664, v1386, v733, v576, v727, v732, 0, v724, v731, v1213, v1214, v1217, v1218, 0, *(__int128 *)v1222, *(uint64_t *)&v1222[16], 1u,
      v1226,
      v1229,
      v1231,
      v1236,
      v1237,
      v1241,
      v1246,
      v1250,
      v1255,
      v1258,
      v1259,
      (uint64_t)v1458._object,
      v1260,
      *((uint64_t *)&v1260 + 1));
    v363 = *(uint64_t (**)(uint64_t, _QWORD))(v1413 + 8);
    v364 = v716;
    goto LABEL_7;
  }
  v505 = v1403;
  if ((_DWORD)v281 == enum case for DetailChartCondition.temperatureFeelsLike(_:))
  {
    v506 = v1407;
    v1458._object = v279;
    sub_1000F3E04();
    v507 = sub_10011E1F4();
    AppConfiguration.temperatureScale.getter(v507);
    sub_1000AE82C(v1316);
    *(double *)&v508 = COERCE_DOUBLE(sub_10011044C());
    if ((v509 & 1) != 0)
    {
      sub_1000FDB0C();
      v510 = v657;
    }
    else
    {
      v510 = *(double *)&v508;
    }
    v658 = v1398;
    v659 = v1402;
    *(double *)&v660 = COERCE_DOUBLE(DetailChartExtrema.maxSecondValue.getter());
    if ((v661 & 1) != 0)
      sub_100095290();
    else
      v662 = *(double *)&v660;
    if (v510 > v662)
      v734 = v510;
    else
      v734 = v662;
    *(double *)&v735 = COERCE_DOUBLE(((uint64_t (*)(void))DetailChartExtrema.minValue.getter)());
    if ((v736 & 1) != 0)
    {
      sub_10011DF64();
      v737 = v738;
    }
    else
    {
      v737 = *(double *)&v735;
    }
    *(double *)&v739 = COERCE_DOUBLE(DetailChartExtrema.minSecondValue.getter());
    if ((v740 & 1) != 0)
      sub_10009E288();
    else
      v741 = *(double *)&v739;
    if (v741 >= v737)
      v742 = v737;
    else
      v742 = v741;
    v576 = sub_1002146B0(v734, v742);
    v743 = *(void (**)(unint64_t, _QWORD, uint64_t))(v1348 + 104);
    v744 = v1349;
    v745 = v1350;
    v743(v1349, enum case for FloatingPointRoundingRule.down(_:), v1350);
    sub_10021A6E8(v744, v576);
    v580 = v746;
    sub_10021A74C();
    v743(v744, enum case for FloatingPointRoundingRule.up(_:), v745);
    v582 = Double.nearestMultiple(of:roundingRule:)(v744, v576, v734 + v576);
    v747 = sub_10021A74C();
    v748 = v506;
    ConditionUnits.temperature.getter(v747);
    TemperatureScaleConfiguration.gradientValueRange(for:)();
    sub_10021A798();
    v749 = v1307;
    sub_1000EF970();
    v750 = v659->n128_u8[v1321] == 1;
    v751 = (int *)v1319;
    sub_100037794(v1320, v749 + *(int *)(v1319 + 24), &qword_100BCB720);
    v752 = v749 + v751[7];
    v753 = v748;
    v439 = v749;
    *(_QWORD *)&v1360 = *(_QWORD *)(v1397 + 16);
    v754 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v1360)(v752, v753, v658);
    *(_BYTE *)(v749 + v751[5]) = v750;
    *(_BYTE *)(v749 + v751[8]) = 1;
    *(_BYTE *)(v749 + v751[9]) = 1;
    *(_QWORD *)(v749 + v751[10]) = 0;
    v755 = v1318;
    TemperatureScaleConfiguration.gradient.getter(v754);
    Gradient.init(_:)(v755);
    v611 = v1311;
    sub_10009C848();
    sub_1000951DC();
    v268 = v1371;
    sub_10021A760();
    v1403 = (uint64_t)v756;
    v756();
    if (qword_100BC20C0 == -1)
      goto LABEL_97;
    goto LABEL_215;
  }
  if ((_DWORD)v281 == enum case for DetailChartCondition.uvIndex(_:))
  {
    *(double *)&v521 = COERCE_DOUBLE(sub_10011044C());
    v522 = (__n128 *)v279;
    if ((v523 & 1) != 0)
      sub_1000FDB0C();
    else
      v524 = *(double *)&v521;
    v837 = v1331;
    if (v524 <= 9.0)
      v576 = 11.0;
    else
      v576 = v524 + 2.0;
    v838 = sub_1000BA294(&qword_100BCB998);
    inited = swift_initStackObject(v838, &v1439);
    *(_OWORD *)(inited + 16) = xmmword_1009891E0;
    *(_BYTE *)(inited + 32) = 0;
    *(_QWORD *)(inited + 40) = static Color.green.getter();
    *(_BYTE *)(inited + 48) = 1;
    *(_QWORD *)(inited + 56) = static Color.yellow.getter();
    *(_BYTE *)(inited + 64) = 2;
    *(_QWORD *)(inited + 72) = static Color.orange.getter();
    *(_BYTE *)(inited + 80) = 3;
    v840 = static Color.pink.getter();
    *(_QWORD *)(inited + 88) = v840;
    *(_BYTE *)(inited + 96) = 4;
    *(_QWORD *)(inited + 104) = static Color.purple.getter(v840);
    sub_10021A50C();
    v841 = Dictionary.init(dictionaryLiteral:)(inited);
    v676 = (void (*)(uint64_t, uint64_t, uint64_t))static UVIndex.ExposureCategory.allCases.getter();
    sub_1000989F8();
    v842 = v1369;
    v843 = sub_10020CA74((uint64_t)v676, v841);
    v1389 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v842;
    sub_1000986C4();
    swift_bridgeObjectRelease(v676);
    v787 = (uint64_t)v1363;
    v795 = (uint64_t)v1425;
    sub_1000FEC3C(v837, (uint64_t)v1363);
    sub_1000B2FE8();
    v788 = (int *)v1319;
    sub_100037794(v1320, v837 + *(int *)(v1319 + 24), &qword_100BCB720);
    sub_10011E080();
    v1369 = (void (*)(uint64_t, uint64_t, uint64_t))v844;
    v844();
    *(_BYTE *)(v837 + v788[5]) = v841;
    *(_BYTE *)(v837 + v788[8]) = 1;
    *(_BYTE *)(v837 + v788[9]) = 0;
    *(_QWORD *)(v837 + v788[10]) = 0;
    Gradient.init(stops:)(v843);
    sub_10003BCD0();
    sub_10009D3A0();
    if (qword_100BC20C0 == -1)
      goto LABEL_107;
    goto LABEL_217;
  }
  v663 = v1351;
  if ((_DWORD)v281 == enum case for DetailChartCondition.visibility(_:))
  {
    v522 = (__n128 *)&unk_100989000;
    v664 = v278;
    v665 = (void *)ConditionUnits.visibility.getter(v281);
    v666 = NSUnitLength.isMetricVisibility.getter();

    if ((v666 & 1) != 0)
      v576 = 45.0;
    else
      v576 = 30.0;
    v667 = sub_1000BA294(&qword_100BCB960);
    v668 = sub_100098740(v667, 96);
    *(_OWORD *)(v668 + 16) = xmmword_1009891D0;
    static Color.white.getter(v668);
    Color.opacity(_:)(0.75);
    sub_1000C1A0C();
    v669 = sub_100079FF0();
    v671 = sub_10021A780(v669, v670);
    static Color.white.getter(v671);
    Color.opacity(_:)(0.25);
    sub_1000C1A0C();
    v672 = sub_100079FF0();
    *(_QWORD *)(v668 + 48) = v672;
    *(_QWORD *)(v668 + 56) = v673;
    static Color.white.getter(v672);
    Color.opacity(_:)(0.12);
    sub_1000C1A0C();
    v674 = sub_100079FF0();
    *(_QWORD *)(v668 + 64) = v674;
    *(_QWORD *)(v668 + 72) = v675;
    v676 = (void (*)(uint64_t, uint64_t, uint64_t))static Color.white.getter(v674);
    Color.opacity(_:)(0.1);
    sub_1000C1A0C();
    *(_QWORD *)(v668 + 80) = sub_100079FF0();
    *(_QWORD *)(v668 + 88) = v677;
    sub_1000FD8F8();
    sub_10003BCD0();
    sub_10009D3A0();
    if (qword_100BC20C0 == -1)
      goto LABEL_82;
    goto LABEL_219;
  }
  v1458._object = v279;
  if ((_DWORD)v281 == enum case for DetailChartCondition.wind(_:))
  {
    v911 = (unint64_t)&unk_100989000;
    v912 = (uint64_t (*)())v1429;
    v576 = sub_100215A60();
    v913 = (void *)((uint64_t (*)(void))ConditionUnits.windSpeed.getter)();
    v611 = sub_100079FE8((uint64_t)v913, (unint64_t *)&qword_100BCB990, NSUnitSpeed_ptr);
    v914 = (char *)static NSUnitSpeed.beaufort.getter();
    v915 = static NSObject.== infix(_:_:)(v914, v913);

    *(double *)&v916 = COERCE_DOUBLE(DetailChartExtrema.maxValue.getter());
    v1389 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v611;
    if ((v915 & 1) == 0)
    {
      if ((v917 & 1) != 0)
      {
        sub_1000FDB0C();
        v941 = v949;
      }
      else
      {
        v941 = *(double *)&v916;
      }
      *(double *)&v950 = COERCE_DOUBLE(sub_10011DEC0());
      if ((v951 & 1) != 0)
        sub_100095290();
      else
        v952 = *(double *)&v950;
      if (v941 > v952)
        v956 = v941;
      else
        v956 = v952;
      ((void (*)(void))DetailChartExtrema.minValue.getter)();
      if ((v957 & 1) != 0)
        sub_10011DF64();
      DetailChartExtrema.minSecondValue.getter();
      if ((v958 & 1) != 0)
        sub_10009E288();
      v959 = *(void (**)(unint64_t, _QWORD, uint64_t))(v1348 + 104);
      v663 = v1349;
      v611 = v1350;
      v959(v1349, enum case for FloatingPointRoundingRule.down(_:), v1350);
      sub_10021A6E8(v663, v576);
      v580 = v960;
      sub_1000B4544();
      if (v580 < 0.0)
        v580 = 0.0;
      v959(v663, enum case for FloatingPointRoundingRule.up(_:), v611);
      v582 = Double.nearestMultiple(of:roundingRule:)(v663, v576, v576 + v956);
      sub_1000B4544();
LABEL_164:
      v1440 = _swiftEmptyArrayStorage;
      v1010 = 12;
      sub_10010F94C();
      v1011 = 0;
      v1012 = 0;
      v1013 = v1440;
      v1014 = &unk_100989000;
      while (!v1012)
      {
        v663 = (unint64_t)v1014;
        v268 = v914;
        v1015 = static Beaufort.color(level:)(v1011);
        v368 = (int *)Gradient.Stop.init(color:location:)(v1015);
        v1017 = v1016;
        v1440 = v1013;
        v911 = v1013[2];
        v439 = v911 + 1;
        if (v911 >= v1013[3] >> 1)
        {
          sub_10010F94C();
          v1013 = v1440;
        }
        v1013[2] = v439;
        v1018 = &v1013[2 * v911];
        v1018[4] = v368;
        v1018[5] = v1017;
        v1012 = v1011 == 11;
        if (v1011 == 11)
        {
          v1011 = 0;
          v914 = v268;
          v611 = (uint64_t)v1371;
        }
        else
        {
          v1019 = __OFADD__(v1011++, 1);
          v611 = (uint64_t)v1371;
          if (v1019)
            goto LABEL_214;
          v914 = v268;
        }
        v1014 = (void *)v663;
        if (!--v1010)
        {
          sub_1000FD8F8();
          v1020 = objc_msgSend((id)objc_opt_self(NSUnitSpeed), "milesPerHour");
          v1021 = v1285;
          v1022 = Measurement.init(value:unit:)(v1020, v1389);
          v1023 = (void *)ConditionUnits.windSpeed.getter(v1022);
          v1024 = v1286;
          v1025 = v1288;
          Measurement<>.converted(to:)(v1023, v1288);

          v1026 = *(void (**)(uint64_t, uint64_t))(v1287 + 8);
          v1026(v1021, v1025);
          v1027 = Measurement.value.getter(v1025);
          v1026(v1024, v1025);
          v1028 = (int *)v1410;
          DetailChartGradientModel.init(gradient:startValue:endValue:)(0.0, v1027);
          sub_1000951DC();
          sub_10021A760();
          v1389 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v1029;
          v1029();
          if (qword_100BC20C0 != -1)
            swift_once(&qword_100BC20C0, sub_1004049E8);
          sub_1000DD7C4();
          sub_100404364();
          v1030 = (uint64_t)v1367;
          (*(void (**)(uint64_t *, int *, uint64_t))(v1422 + 16))(v1367, v1028, v1426);
          LODWORD(v1365) = enum case for ChartLineColor.gradient(_:);
          v1366 = (uint64_t (*)(uint64_t, uint64_t, _QWORD))*((_QWORD *)v1366 + 13);
          sub_1000F43B0(v1030, enum case for ChartLineColor.gradient(_:), v1366);
          v1031 = v1362;
          sub_10021A740(v1362);
          v1032 = v1368;
          ChartAreaStyle.init(gradient:opacity:)(v1031);
          *(_QWORD *)&v1362 = sub_1000DB22C();
          sub_10009926C(v1032, 0, v1033, v1362);
          v1034 = sub_1000BA294(&qword_100BCB968);
          v1035 = (__n128 *)sub_1000989D4(v1034);
          v1360 = xmmword_10097DA20;
          v1361 = *(__n128 *)(v663 + 448);
          sub_10009EE70(v1035, (__n128)xmmword_10097DA20, v1361);
          v1036 = (void (*)(_QWORD, _QWORD, _QWORD))v1371;
          sub_1000BDC3C((uint64_t)v1371, v1030, v1037);
          sub_10021A760();
          sub_10009C7A4();
          sub_100404364();
          sub_10021A740(v1030);
          v1366(v1030, v1365, v1370);
          sub_1000C135C();
          _s7Weather24LocationCompositionStateOwst_0(v1038, v1039, v1040, v1362);
          v1041 = sub_1000989D4(v1034);
          v1042 = v1361;
          *(_OWORD *)(v1041 + 16) = v1360;
          *(__n128 *)(v1041 + 32) = v1042;
          v911 = v1295;
          ChartLineStyle.init(strokeStyle:lineThickness:lineColor:lineDash:opacity:opacityIncreasedContrast:areaStyle:)(v1036, v1030, v1041, 0x3FE6666666666666, 0, v1032);
          v1043 = v1331;
          v1044 = (uint64_t)v1363;
          v1045 = (uint64_t)v1425;
          v1046 = (double (*)(uint64_t, uint64_t, uint64_t))v1458._object;
          ((void (*)(uint64_t, char *, _QWORD *))v1458._object)(v1331, v1363, v1425);
          v912 = (uint64_t (*)())v1402;
          v1047 = sub_100109290();
          sub_100037794(v1047, v1043 + v1048, &qword_100BCB720);
          sub_10011E080();
          v1370 = v1049;
          v1049();
          *(_BYTE *)(v1043 + v1028[5]) = &qword_100CAE968;
          *(_BYTE *)(v1043 + v1028[8]) = 0;
          *(_BYTE *)(v1043 + v1028[9]) = 0;
          *(_QWORD *)(v1043 + v1028[10]) = 0;
          v1050 = sub_1000B327C();
          v1051.n128_f64[0] = v1046(v1050, v1044, v1045);
          v1371 = (char *)DetailChartCondition.id.getter(v1051);
          v1389 = v1052;
          sub_1000DAE34();
          sub_1000BA294(&qword_100BCB970);
          sub_10009C8B0();
          v1054 = *(void (**)(int *, uint64_t, uint64_t))(v1053 + 16);
          v1055 = v1414;
          v1054(v1028, v1403, v1414);
          v1056 = sub_100095528();
          v1054((int *)v1056, v911, v1055);
          sub_10009C7F0((uint64_t)&qword_100CAE968, 0);
          sub_1001098C8((uint64_t)v1028, enum case for ChartKind.line(_:), *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v1387 + 104));
          v1057 = (uint64_t)v1408;
          sub_1000C6998();
          sub_1000C5B90();
          sub_1000C0D20();
          sub_1000989E0();
          v1425 = (_QWORD *)v1058;
          if (v580 <= v582)
          {
            v1059 = sub_1000BA294(&qword_100BCB978);
            v1060 = sub_1000CF77C(v1059);
            v1062 = sub_1000C093C(v1060, (uint64_t)v268, v1061);
            sub_1000D0034(v1062, v1063, &qword_100BCB0A0);
            v1411 = (uint64_t)sub_10009E32C(v1043);
            sub_1000D9BC4(v1411, (uint64_t)v912 + *(int *)(v1057 + 56));
            v1408 = (char *)sub_10021A76C();
            v1395 = v1064;
            v1065 = objc_msgSend(v1396, "mainBundle");
            sub_1000989C4();
            sub_1000B2FC4();
            v1066._countAndFlagsBits = 0xD000000000000026;
            v1067._countAndFlagsBits = 0;
            v1067._object = (void *)0xE000000000000000;
            v1459._countAndFlagsBits = 0xD00000000000002CLL;
            v1068 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1066, (Swift::String_optional)0, (NSBundle)v1065, v1067, v1459);
            v1391 = (void (*)(_QWORD, _QWORD, _QWORD))v1068._countAndFlagsBits;
            v1388 = v1068._object;

            v1069 = sub_10021A7A4();
            sub_1000989C4();
            sub_1000B2FC4();
            sub_10011E2E4();
            v1074 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1070, v1071, v1072, v1073, v1463);
            v1387 = v1074._countAndFlagsBits;
            v1373 = v1074._object;

            v1075 = (uint64_t)v912;
            v1076 = sub_10021A7A4();
            sub_1000989C4();
            sub_1000B2FC4();
            v1077._countAndFlagsBits = 0xD00000000000002CLL;
            v1078._countAndFlagsBits = 0x7374737547;
            v1078._object = (void *)0xE500000000000000;
            v1079 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1077, (Swift::String_optional)0, (NSBundle)v1076, v1078, v1464)._countAndFlagsBits;
            sub_10009EFB0(v1079);
            v1081 = v1080;

            v1082 = v1381;
            sub_10000AB54(v1075, v1381, type metadata accessor for ConditionDetailChartDataInput);
            sub_10011E0CC();
            v1083 = v1398;
            sub_10011DFA0();
            sub_1000BEE08();
            v1084 = v1397;
            sub_1000BF0E8();
            v1087 = (void *)swift_allocObject(&unk_100B64C48, v1085, v1086);
            sub_100219038(v1082, (uint64_t)v1087 - 0x2FFFFFFFFFFFFFD4);
            (*(void (**)(char *, uint64_t, uint64_t))(v1084 + 32))((char *)&NetworkConnectivityMonitor + (_QWORD)v1087, v1075, v1083);
            v1088 = sub_1000BA294(&qword_100BCB988);
            v1089 = v1385;
            sub_10009D34C(v1385, v1090, v1091, v1088);
            sub_1004043F8();
            v1092 = sub_1004043AC();
            sub_10009E56C(v1092);
            sub_1000D1624(v1093, enum case for ChartPeakMarkStyle.line(_:));
            sub_1000C6D7C(v1392, enum case for ChartPastDataTreatment.dimmed(_:), *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v1382 + 104));
            v1261 = sub_10021907C;
            v1461._object = v1087;
            *((_QWORD *)&v1260 + 1) = v1081;
            *(_QWORD *)&v1260 = v1396;
            v1458._object = v1373;
            sub_1000D1C8C();
            sub_10021A78C();
            sub_1000F40A8();
            v1216 = v1094;
            v1095 = sub_1000B30C0();
            sub_1000C51EC(v1096, (uint64_t)v1389, v1364, v1097, v1095, v1098, v1099, v1211, v1212, v1089, v1216, v1217, v1218, v1219, v1220, 0, 0, 0, 0x80u,
              v1231,
              v1236,
              v1237,
              v1241,
              v1246,
              v1250,
              v1255,
              v1258,
              v1259,
              (uint64_t)v1458._object,
              v1260,
              *((uint64_t *)&v1260 + 1),
              (uint64_t)v1261,
              (uint64_t)v1461._object);
            sub_10021A6BC(v1043, type metadata accessor for DetailChartViewModelFactory.PeakMarkerRequestContext);
            v1100 = *(void (**)(unint64_t, uint64_t))(v1413 + 8);
            v1101 = v1414;
            v1100(v1295, v1414);
            v1100(v1403, v1101);
            goto LABEL_8;
          }
          __break(1u);
          goto LABEL_221;
        }
      }
      goto LABEL_227;
    }
    if ((v917 & 1) != 0)
    {
      sub_1000FDB0C();
      v918 = v945;
    }
    else
    {
      v918 = *(double *)&v916;
    }
    *(double *)&v946 = COERCE_DOUBLE(sub_10011DEC0());
    if ((v947 & 1) != 0)
      *(double *)&v946 = COERCE_DOUBLE(sub_100095290());
    else
      v948 = *(double *)&v946;
    if (v918 > v948)
      v948 = v918;
    if ((~*(_QWORD *)&v948 & 0x7FF0000000000000) != 0)
    {
      if (v948 > -9.22337204e18)
      {
        if (v948 < 9.22337204e18)
        {
          v953 = (uint64_t)v948;
          v954 = static Beaufort.maxLevel.getter(v946);
          if (v954 >= v953)
            v955 = static Beaufort.maxLevel.getter(v954);
          else
            v955 = static Beaufort.maxExtendedLevel.getter(v954);
          v582 = (double)v955;
          v580 = 0.0;
          goto LABEL_164;
        }
LABEL_223:
        __break(1u);
        goto LABEL_224;
      }
    }
    else
    {
LABEL_221:
      __break(1u);
    }
    __break(1u);
    goto LABEL_223;
  }
  v919 = v1397;
  if ((_DWORD)v281 != enum case for DetailChartCondition.chanceOfRain(_:))
    goto LABEL_230;
  v920 = v1407;
  v921 = sub_1000BA294(&qword_100BCB960);
  v922 = sub_1000989D4(v921);
  v923 = v922;
  *(_OWORD *)(v922 + 16) = xmmword_10097CA50;
  v924 = static Color.cyan.getter(v922);
  v925 = Gradient.Stop.init(color:location:)(v924);
  sub_10021A780(v925, v926);
  sub_1000FD8F8();
  v927 = v1304;
  sub_1000EF970();
  sub_10009F7CC();
  v928 = sub_100109290();
  sub_100037794(v928, v927 + v929, &qword_100BCB720);
  v930 = v927 + v368[7];
  v1389 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v919 + 16);
  v931 = v1389(v930, v920, v1398);
  v932 = static Color.cyan.getter(v931);
  *(_BYTE *)(v927 + v368[5]) = v923;
  *(_BYTE *)(v927 + v368[8]) = 1;
  *(_BYTE *)(v927 + v368[9]) = 0;
  *(_QWORD *)(v927 + v368[10]) = v932;
  v933 = v1291;
  sub_1002F6F6C((uint64_t)v1417, v1291);
  v934 = sub_100088FC8(v933, 1, (uint64_t)v1329);
  v935 = v1293;
  if (v512)
  {
    sub_100110704(v934, &qword_100BCB0A0);
    sub_1000C135C();
    v911 = (unint64_t)v1424;
    v943 = sub_1000AE8C4(v936, v937, v938);
    v939 = v1303;
    v940 = v1294;
  }
  else
  {
    DetailChartDataElement.date.getter(v934);
    sub_1000BD990(v1328);
    v911 = (unint64_t)v1424;
    sub_1000AE8C4(v935, 0, 1);
    v943 = sub_100088FC8(v935, 1, v911);
    v939 = v1303;
    v940 = v1294;
    if (!v942)
    {
      sub_10021A774();
      sub_1000BD9A0(v1306, v935, v961);
      goto LABEL_147;
    }
  }
  v944 = Date.init()(v943);
  sub_10009C204(v944, (uint64_t *)&unk_100BD35A0);
LABEL_147:
  v962 = v1292;
  sub_10020CDC4((uint64_t)v1417, (uint64_t (*)(_QWORD))&type metadata accessor for DetailChartDataElement, v1292);
  v963 = sub_100088FC8(v962, 1, (uint64_t)v1329);
  if (v512)
  {
    sub_100110704(v963, &qword_100BCB0A0);
    sub_1000C135C();
    v969 = sub_1000AE8C4(v964, v965, v966);
    v967 = v1426;
  }
  else
  {
    DetailChartDataElement.date.getter(v963);
    sub_1000BD990(v1328);
    sub_1000AE8C4(v940, 0, 1);
    v969 = sub_100088FC8(v940, 1, v911);
    v967 = v1426;
    if (!v968)
    {
      sub_10021A774();
      v970 = sub_1000C213C();
      sub_1000BD9A0(v970, v971, v972);
      goto LABEL_153;
    }
  }
  Date.init()(v969);
  sub_1000FF448(v940, (uint64_t *)&unk_100BD35A0);
LABEL_153:
  v973 = (uint64_t)v1394;
  v974 = v1306;
  v975 = static Date.> infix(_:_:)(v1394, v1306);
  v976 = v1298;
  sub_100215BF8(v975 & 1, v974, v939, v973, v1298);
  v977 = sub_1000950F4();
  v978 = v1305;
  DetailChartGradientModel.init(gradient:startValue:endValue:)(v977, v979);
  sub_1000951DC();
  v980 = (unint64_t)v1371;
  v981(v1371, v976, v1418);
  v982 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v1422 + 16);
  v983 = (uint64_t)v1367;
  v982(v1367, v978, v967);
  sub_1000F43B0(v983, enum case for ChartLineColor.gradient(_:), *((uint64_t (**)(uint64_t, uint64_t, _QWORD))v1366 + 13));
  v984 = v1410;
  v1370 = v982;
  v982((uint64_t *)v1410, v978, v967);
  v985 = v1368;
  ChartAreaStyle.init(gradient:opacity:)(v984);
  v986 = sub_1000DB22C();
  sub_10009926C(v985, 0, v987, v986);
  v988 = sub_1000BA294(&qword_100BCB968);
  v989 = sub_1000989D4(v988);
  *(_OWORD *)(v989 + 16) = xmmword_10097DA20;
  *(_OWORD *)(v989 + 32) = xmmword_1009891C0;
  v990 = v1299;
  sub_1000DA4A8(v980, v983, v989);
  v1441 = (uint64_t)v1417;
  sub_10009F7CC();
  if (v991 != 1)
  {
LABEL_184:
    v1105 = v1289;
    goto LABEL_185;
  }
  v992 = v1283;
  sub_100037794((uint64_t)v1423, v1283, &qword_100BCB0A0);
  v993 = (uint64_t)v1329;
  sub_100088FC8(v992, 1, (uint64_t)v1329);
  if (v512)
  {
    v994 = &qword_100BCB0A0;
    v995 = v992;
LABEL_183:
    sub_1000FF448(v995, v994);
    goto LABEL_184;
  }
  v1371 = *(char **)(v1328 + 32);
  ((void (*)(uint64_t, uint64_t, uint64_t))v1371)(v1284, v992, v993);
  v996 = *(uint64_t *)((char *)v1402->n128_i64 + v1275);
  v997 = *(_QWORD *)(v996 + 16);
  if (v997)
  {
    v980 = v996 + ((*(unsigned __int8 *)(v1302 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1302 + 80));
    LODWORD(v1417) = enum case for Calendar.Component.hour(_:);
    v1403 = *(_QWORD *)(v1302 + 72);
    v1410 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1302 + 16);
    v1368 = v996;
    sub_1000860DC();
    v999 = v1281;
    v998 = v1282;
    v1000 = v1271;
    v1001 = v1409;
    v1002 = v1300;
    while (1)
    {
      v1003 = v1410(v1000, v980, v999);
      v1004 = HourWeather.date.getter(v1003);
      v1005 = v999;
      v1006 = v1301;
      (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v1301 + 104))(v1002, v1417, v998, v1004);
      v1007 = sub_10021A810((uint64_t)v1394, v1001);
      sub_100099254(v1002, *(uint64_t (**)(uint64_t, uint64_t))(v1006 + 8));
      sub_1000DE25C(v1001, *(uint64_t (**)(uint64_t, _QWORD))(v1401 + 8));
      if ((v1007 & 1) != 0)
        break;
      sub_1000BE774(v1000, *(uint64_t (**)(uint64_t, uint64_t))(v1302 + 8));
      v980 += v1403;
      --v997;
      v999 = v1005;
      if (!v997)
      {
        v1008 = 1;
        v911 = (unint64_t)v1424;
        v990 = v1299;
        v1009 = v1277;
        goto LABEL_179;
      }
    }
    v1009 = v1277;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1302 + 32))(v1277, v1000, v1005);
    v1008 = 0;
    v911 = (unint64_t)v1424;
    v990 = v1299;
    v999 = v1005;
LABEL_179:
    v996 = v1368;
  }
  else
  {
    sub_1000860DC();
    v1008 = 1;
    v999 = v1281;
    v1009 = v1277;
  }
  sub_1000C138C(v1009, v1008);
  swift_bridgeObjectRelease(v996);
  v1102 = sub_1000C0944();
  sub_100088FC8(v1102, v1103, v999);
  v1104 = (uint64_t)v1408;
  if (v512)
  {
    (*(void (**)(uint64_t, char *))(v1328 + 8))(v1284, v1329);
    v994 = &qword_100BCB930;
    v995 = v1009;
    goto LABEL_183;
  }
  v1169 = v1302;
  v1170 = v1280;
  sub_10008908C(v1280, v1009, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1302 + 32));
  v1171 = v1347;
  v1417 = (_QWORD *)sub_10021380C((uint64_t)v1394, v1276);
  v1410 = v1172;
  sub_10008908C(v1278, v1170, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1169 + 16));
  v1173 = v1402;
  v1174 = v1461._object;
  sub_100037794((uint64_t)v1402 + *(int *)(v1104 + 52), (uint64_t)v1461._object, &qword_100BCB138);
  v1175 = v1395;
  v268 = v1363;
  sub_1000EF970();
  v1176 = v1390;
  sub_10009C7A4();
  v1177 = v1263;
  (*(void (**)(uint64_t, char *, void *))(v1262 + 16))(v1263, (char *)v1173 + *(int *)(v1104 + 48), v1464._object);
  v1178 = v1266;
  v1179.n128_f64[0] = (*(double (**)(uint64_t, uint64_t, uint64_t))(v1264 + 16))(v1266, v1276, v1265);
  v1180 = v1273;
  WeatherValueCalculationContext.init(hourWeather:dayWeather:chartCondition:units:currentWeather:timeZone:)(v1278, v1174, v1175, v1176, v1177, v1178, v1179);
  v1181 = v1171[15];
  v1182 = v1171[16];
  sub_1000DB418(v1171 + 12, v1181);
  v1403 = dispatch thunk of DetailChartDataPointValueCalculatorType.accessibilityValueDescription(for:)(v1180, v1181, v1182);
  v1368 = v1183;
  v1184 = v1409;
  v1185 = v1394;
  v1186 = sub_1000C6998();
  DetailChartDataElement.value.getter(v1186);
  v1188 = v1267;
  v1187 = v1268;
  v1189 = v1269;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v1268 + 104))(v1267, enum case for HourWeather.SecondValueUseCase.chart(_:), v1269);
  HourWeather.secondValue(for:units:useCase:)(v268, v1407, v1188);
  (*(void (**)(uint64_t, uint64_t))(v1187 + 8))(v1188, v1189);
  v1190 = v1270;
  sub_100213978((uint64_t)v268, v1270);
  v1191 = v1410;
  swift_bridgeObjectRetain(v1410);
  v1458._object = (void *)sub_1002140B8();
  *(_QWORD *)&v1260 = 0;
  v1259 = v1368;
  v1258 = v1403;
  v1192 = DetailChartDataElement.init(date:value:secondValue:thirdValue:valueLabel:dateLabel:accessibilityDateString:accessibilityValueDescription:color:textColor:)(v1184, 0, 1, v1190, v1417, v1191, v1417, v1191);
  v914 = (char *)&v1260 + 8;
  v1193 = v1441;
  __chkstk_darwin(v1192);
  v1458._object = v1185;
  sub_1000989F8();
  v611 = (uint64_t)v1369;
  v663 = sub_10084AF58(sub_100219080, (uint64_t)&v1258, v1193);
  v1011 = v1194;
  v1195 = sub_1000986C4();
  if ((v1011 & 1) == 0)
  {
    if ((v663 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v1369 = (void (*)(uint64_t, uint64_t, uint64_t))v611;
      v268 = v1329;
      if (v663 < *(_QWORD *)(v1193 + 16))
      {
        v1196 = v1328;
        v1011 = (*(unsigned __int8 *)(v1328 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1328 + 80);
        v911 = *(_QWORD *)(v1328 + 72);
        v611 = v911 * v663;
        v1197 = v1193 + v1011 + v911 * v663;
        v914 = *(char **)(v1328 + 16);
        v1198 = v1260;
        v1199 = ((uint64_t (*)(_QWORD, unint64_t, char *, double))v914)(v1260, v1197, v1329, v1195);
        v1200 = v1409;
        DetailChartDataElement.date.getter(v1199);
        v1201 = v268;
        v268 = *(char **)(v1196 + 8);
        ((void (*)(uint64_t, char *))v268)(v1198, v1201);
        v1193 = (uint64_t)v1394;
        v1202 = Date.distance(to:)(v1200);
        v1203 = sub_1000DE25C(v1200, *(uint64_t (**)(uint64_t, _QWORD))(v1401 + 8));
        if (v1202 > static DetailChartCondition.chanceOfRainNowHourThreshold.getter(v1203))
        {
LABEL_205:
          v911 = (unint64_t)v1424;
          goto LABEL_207;
        }
        if ((sub_10011DFF8() & 1) != 0)
          goto LABEL_203;
        goto LABEL_228;
      }
    }
    __break(1u);
LABEL_227:
    __break(1u);
LABEL_228:
    sub_100867018();
    v1193 = v1209;
    v1441 = v1209;
LABEL_203:
    v1204 = *(_QWORD *)(v1193 + 16);
    if (v663 < v1204)
    {
      v1205 = v1204 - 1;
      v1206 = v1193 + v1011 + v611;
      ((void (*)(unint64_t, char *))v268)(v1206, v1329);
      sub_100600308(v1206 + v911, v1205 - v663);
      *(_QWORD *)(v1193 + 16) = v1205;
      v1441 = v1193;
      goto LABEL_205;
    }
    __break(1u);
LABEL_230:
    _diagnoseUnexpectedEnumCase<A>(type:)(v1425, v1425);
    __break(1u);
    return;
  }
  v914 = *(char **)(v1328 + 16);
LABEL_207:
  v912 = v1261;
  ((void (*)(uint64_t, uint64_t, char *))v914)(v1272, v1279, v1329);
  if ((sub_10011DFF8() & 1) == 0)
  {
LABEL_224:
    sub_10021A7EC();
    v1193 = v1207;
  }
  v980 = *(_QWORD *)(v1193 + 16);
  if (v980 >= *(_QWORD *)(v1193 + 24) >> 1)
  {
    sub_10021A7EC();
    v1193 = v1208;
  }
  *(_QWORD *)(v1193 + 16) = v980 + 1;
  ((void (*)(unint64_t, uint64_t, char *))v1371)(v1193+ ((*(unsigned __int8 *)(v1328 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1328 + 80))+ *(_QWORD *)(v1328 + 72) * v980, v1272, v1329);
  v1441 = v1193;
  sub_10004A33C(v1279);
  (*(void (**)(uint64_t, uint64_t (*)()))(*((_QWORD *)&v1260 + 1) + 8))(v1273, v912);
  (*(void (**)(uint64_t, uint64_t))(v1302 + 8))(v1280, v1281);
  sub_10004A33C(v1284);
  v1105 = v1289;
  v990 = v1299;
LABEL_185:
  sub_100215E60(&v1441);
  sub_10009F7CC();
  if (!v1106)
  {
    v1107 = v1412;
    static ChartDarkeningScrim.hashPatternEffect.getter();
    sub_10081C464();
    sub_1000B2ED8(v1107, *(uint64_t (**)(uint64_t, _QWORD))(v1427 + 8));
  }
  sub_100037794(v1320, v1105, &qword_100BCB720);
  v1108 = type metadata accessor for ExtremaResult(0);
  v1109 = sub_100088FC8(v1105, 1, v1108);
  if (v512)
  {
    sub_10009C204(v1109, &qword_100BCB720);
    v1115 = v1290;
    sub_1000C135C();
    v1117 = v911;
    v1120 = sub_1000AE8C4(v1110, v1111, v1112);
  }
  else
  {
    v1113 = v990;
    v1114 = v1290;
    ExtremaResult.maxDate.getter(v1109);
    v1115 = v1114;
    v990 = v1113;
    sub_100099254(v1105, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1108 - 8) + 8));
    sub_1000AE8C4(v1115, 0, 1);
    v1116 = sub_1000C0944();
    v1117 = v911;
    v1120 = sub_100088FC8(v1116, v1118, v911);
    if (!v1119)
    {
      v1122 = v1401;
      v1123 = v1274;
      v980 = v911;
      sub_1000BE9D4(v1274, v1115, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1401 + 32));
      v1125 = v1300;
      v1124 = v1301;
      v1126 = v1282;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v1301 + 104))(v1300, enum case for Calendar.Component.hour(_:), v1282);
      v1115 = sub_10021A810(v1123, (uint64_t)v1394);
      v1127 = *(void (**)(uint64_t, uint64_t))(v1124 + 8);
      v990 = v1299;
      v1127(v1125, v1126);
      (*(void (**)(uint64_t, uint64_t))(v1122 + 8))(v1123, v1117);
      v1121 = 7;
      if ((v1115 & 1) != 0)
        v1121 = 8;
      goto LABEL_195;
    }
  }
  sub_100110704(v1120, (uint64_t *)&unk_100BD35A0);
  v1121 = 7;
LABEL_195:
  v1403 = v1121;
  sub_10009E518();
  sub_1000EF970();
  v1417 = (_QWORD *)DetailChartCondition.id.getter(v1128);
  v1410 = v1129;
  sub_1000DAE34();
  sub_1000BA294(&qword_100BCB970);
  v1130 = sub_1000FC5F4();
  sub_10008908C(v1130, v990, v1131);
  sub_1000C138C(v980, 0);
  sub_1000C138C(v1115, 1);
  sub_1001098C8(v980, enum case for ChartKind.line(_:), *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v1387 + 104));
  v1132 = (uint64_t)v1408;
  v1133 = (uint64_t)v1402;
  v1134 = v1391;
  v1391(v1409, (char *)v1402 + *((int *)v1408 + 5), v1117);
  v1135 = v1441;
  sub_10009BEA4();
  v1136 = sub_1000BA294(&qword_100BCB978);
  v1137 = sub_10009937C(v1136);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v1137, v1138, v1139, v1117);
  v1140 = qword_100BC20C0;
  v1425 = (_QWORD *)v1135;
  swift_bridgeObjectRetain(v1135);
  v1141 = (uint64_t)v1429;
  if (v1140 != -1)
    swift_once(&qword_100BC20C0, sub_1004049E8);
  sub_1000DD7C4();
  v1142 = sub_100404388();
  v1143 = sub_1000C093C(v1412, v1141, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v1427 + 16));
  sub_1000D0034(v1143, v1144, &qword_100BCB0A0);
  v1411 = (uint64_t)sub_10009E32C(v1304);
  sub_1000BA294(&qword_100BCB980);
  v1145 = (uint64_t)v1384;
  *v1384 = 1.0;
  sub_10011DFA0();
  sub_1000CDBC8(v1145, enum case for ChartPeakMarkStyle.filled(_:), *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v1376 + 104));
  sub_1000FEC3C(v1296, v1306);
  v1146 = sub_1000FEC3C(v1297, v1303);
  sub_1000D9BC4(v1146, v1133 + *(int *)(v1132 + 56));
  sub_1000C6D7C(v1392, enum case for ChartPastDataTreatment.hashed(_:), *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v1382 + 104));
  v1408 = (char *)sub_10021A7E4();
  v1395 = v1147;
  v1148 = sub_10011DB24((uint64_t)v1408, "mainBundle");
  sub_1000989C4();
  sub_10011E2E4();
  v1149._countAndFlagsBits = 0x6C6175746341;
  v1149._object = (void *)0xE600000000000000;
  v1153 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1150, v1151, v1152, v1149, v1460)._countAndFlagsBits;
  sub_10009EFB0(v1153);
  v1155 = v1154;

  sub_10009C878(v1133, v1156, type metadata accessor for ConditionDetailChartDataInput);
  sub_10009C7A4();
  sub_10021A718();
  v1159 = v1158 & ~v1157;
  v1160 = v1397;
  v1161 = (v1379 + *(unsigned __int8 *)(v1397 + 80) + v1159) & ~(unint64_t)*(unsigned __int8 *)(v1397 + 80);
  sub_1000DC8CC();
  v1164 = swift_allocObject(&unk_100B64C20, v1162, v1163);
  sub_100219038((uint64_t)v1134, v1164 + v1159);
  sub_10011DE98(v1164 + v1161, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1160 + 32));
  v1165 = sub_1000BA294(&qword_100BCB988);
  v1166 = v1385;
  sub_10009D34C(v1385, v1167, v1168, v1165);
  sub_1005590A0((uint64_t)v1417, (uint64_t)v1410, v1364, v1409, (uint64_t)v1425, v1406, 0, (uint64_t)v1405, v1386, 0.0, 1.2, v1142, 0x3FC999999999999ALL, 0, v1166, v1412, v1404, v1411, v1145,
    v1403,
    v1296,
    v1297,
    0,
    0,
    0,
    64,
    v1415,
    v1392,
    (uint64_t)v1408,
    v1395,
    0,
    0xE000000000000000,
    countAndFlagsBits,
    (uint64_t)v1374,
    0,
    0xE000000000000000,
    (uint64_t)v1396,
    v1155,
    (uint64_t)sub_10021907C,
    v1164);
  sub_10009DEB8(v1299, *(uint64_t (**)(uint64_t, _QWORD))(v1413 + 8));
  (*(void (**)(uint64_t, uint64_t))(v1422 + 8))(v1305, v1426);
  sub_10004A33C((uint64_t)v1298);
  sub_1000BE8BC(v1303);
  sub_1000BE8BC(v1306);
  sub_10021A6BC(v1304, type metadata accessor for DetailChartViewModelFactory.PeakMarkerRequestContext);
  sub_100086108();
  sub_10004A33C(v1428);
  sub_1000FF448((uint64_t)v1423, &qword_100BCB0A0);
  sub_100094F5C();
  sub_1000FDA00();
  sub_1000BE8BC((uint64_t)v1394);
  swift_bridgeObjectRelease(v1441);
}

uint64_t sub_1002130BC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  __n128 v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  void (*v63)(char *, uint64_t);
  double v64;
  double v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  double v78;
  double v79;
  double v80;
  double v81;
  char *v82;
  uint64_t *v83;
  uint64_t v84;
  _QWORD v86[2];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  _QWORD *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  _QWORD *v117;
  char *v118;
  uint64_t v119;

  v117 = a2;
  v111 = a6;
  v112 = a7;
  v108 = a5;
  v119 = a4;
  v116 = a9;
  v113 = a12;
  v114 = a8;
  v18 = type metadata accessor for DetailChartDataElement.ValueLabel(0);
  __chkstk_darwin(v18);
  v115 = (_QWORD *)((char *)v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = type metadata accessor for HourWeather.SecondValueUseCase(0);
  v103 = *(_QWORD *)(v20 - 8);
  v104 = v20;
  __chkstk_darwin(v20);
  v102 = (char *)v86 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = (_QWORD *)type metadata accessor for TimeZone(0);
  v100 = *(v101 - 1);
  __chkstk_darwin(v101);
  v99 = (char *)v86 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for CurrentWeather(0);
  v97 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v96 = (char *)v86 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for ConditionUnits(0);
  v94 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v93 = (char *)v86 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for DetailChartCondition(0);
  v91 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v90 = (char *)v86 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_1000BA294(&qword_100BCB138);
  __chkstk_darwin(v26);
  v89 = (uint64_t)v86 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for HourWeather(0);
  v87 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v29 = (char *)v86 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for WeatherValueCalculationContext(0);
  v109 = *(_QWORD *)(v30 - 8);
  v110 = v30;
  __chkstk_darwin(v30);
  v118 = (char *)v86 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for Date(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = __chkstk_darwin(v32);
  v36 = (char *)v86 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86[1] = a1;
  HourWeather.date.getter(v34);
  v37 = (int *)type metadata accessor for ConditionDetailChartDataInput(0);
  v38 = a3 + v37[10];
  v39 = v117;
  v40 = sub_10021380C((uint64_t)v36, v38);
  v105 = v41;
  v106 = v40;
  v42 = *(void (**)(char *, uint64_t))(v33 + 8);
  v107 = v36;
  v42(v36, v32);
  v43 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v29, a1, v88);
  v44 = v89;
  sub_100037794(a3 + v37[13], v89, &qword_100BCB138);
  v88 = a3 + v37[6];
  v45 = v90;
  (*(void (**)(char *))(v91 + 16))(v90);
  v46 = v93;
  (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))(v93, v119, v95);
  v47 = v96;
  (*(void (**)(char *, uint64_t, uint64_t))(v97 + 16))(v96, a3 + v37[12], v98);
  v48 = v99;
  v49.n128_f64[0] = (*(double (**)(char *, uint64_t, _QWORD *))(v100 + 16))(v99, v38, v101);
  v50 = v118;
  WeatherValueCalculationContext.init(hourWeather:dayWeather:chartCondition:units:currentWeather:timeZone:)(v43, v44, v45, v46, v47, v48, v49);
  v51 = v39[15];
  v52 = v39[16];
  v101 = v39 + 12;
  sub_1000DB418(v39 + 12, v51);
  v53 = dispatch thunk of DetailChartDataPointValueCalculatorType.value(for:)(v50, v51, v52);
  v54 = Double.clamped(to:)(a10, a11, v53);
  v55 = enum case for HourWeather.SecondValueUseCase.chart(_:);
  v56 = v103;
  v57 = v104;
  v58 = *(void (**)(char *, uint64_t, uint64_t))(v103 + 104);
  v59 = v102;
  v58(v102, enum case for HourWeather.SecondValueUseCase.chart(_:), v104);
  v60 = v88;
  v61 = v119;
  v62 = HourWeather.secondValue(for:units:useCase:)(v88, v119, v59);
  v63 = *(void (**)(char *, uint64_t))(v56 + 8);
  v63(v59, v57);
  v64 = Double.clamped(to:)(a10, a11, v62);
  v58(v59, v55, v57);
  v65 = COERCE_DOUBLE(HourWeather.thirdValue(for:units:useCase:)(v60, v61, v59));
  LOBYTE(v39) = v66;
  v67 = v66 & 1;
  v68 = ((uint64_t (*)(char *, uint64_t))v63)(v59, v57);
  if ((v39 & 1) == 0)
    v65 = Double.clamped(to:)(a10, a11, v65);
  if ((v108 & 1) != 0)
  {
    v69 = v117[15];
    v70 = v117[16];
    sub_1000DB418(v101, v69);
    v68 = dispatch thunk of DetailChartDataPointValueCalculatorType.accessibilityValueDescription(for:)(v118, v69, v70);
    v117 = (_QWORD *)v68;
  }
  else
  {
    v117 = 0;
  }
  v71 = v111;
  v72 = *(double *)v111;
  if (*(double *)v111 >= v54)
    v72 = v54;
  if (*(_BYTE *)(v111 + 8))
    v72 = v54;
  *(double *)v111 = v72;
  *(_BYTE *)(v71 + 8) = 0;
  v73 = v112;
  v74 = *(double *)v112;
  if (v54 > *(double *)v112)
    v74 = v54;
  if (*(_BYTE *)(v112 + 8))
    v74 = v54;
  *(double *)v112 = v74;
  *(_BYTE *)(v73 + 8) = 0;
  v75 = v114;
  v76 = *(double *)v114;
  if (*(double *)v114 >= v64)
    v76 = v64;
  if (*(_BYTE *)(v114 + 8))
    v76 = v64;
  *(double *)v114 = v76;
  *(_BYTE *)(v75 + 8) = 0;
  v77 = v113;
  v78 = *(double *)v113;
  if (v64 > *(double *)v113)
    v78 = v64;
  if (*(_BYTE *)(v113 + 8))
    v78 = v64;
  *(double *)v113 = v78;
  *(_BYTE *)(v77 + 8) = 0;
  if (!(_DWORD)v67)
  {
    v79 = v65;
    v80 = *(double *)a13;
    if (*(double *)a13 >= v65)
      v80 = v65;
    if (*(_BYTE *)(a13 + 8))
      v80 = v65;
    *(double *)a13 = v80;
    *(_BYTE *)(a13 + 8) = 0;
    v81 = *(double *)a14;
    if (*(double *)a14 < v65)
      v81 = v65;
    if (!*(_BYTE *)(a14 + 8))
      v79 = v81;
    *(double *)a14 = v79;
    *(_BYTE *)(a14 + 8) = 0;
  }
  v82 = v107;
  HourWeather.date.getter(v68);
  v83 = v115;
  sub_100213978(v60, v115);
  v84 = v105;
  swift_bridgeObjectRetain(v105);
  sub_1002140B8();
  DetailChartDataElement.init(date:value:secondValue:thirdValue:valueLabel:dateLabel:accessibilityDateString:accessibilityValueDescription:color:textColor:)(v82, *(_QWORD *)&v65, v67, v83, v106, v84, v106, v84);
  return (*(uint64_t (**)(char *, uint64_t))(v109 + 8))(v118, v110);
}

uint64_t sub_10021380C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v4 = type metadata accessor for DetailChartViewModelFactory.FormattedHoursCacheKey(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v17 - v8;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v9, a1, v10);
  v11 = &v9[*(int *)(v4 + 20)];
  v12 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v11, a2, v12);
  Cache.subscript.getter(v9);
  if (v18)
  {
    v13 = v17;
  }
  else
  {
    v13 = Date.formattedHours(timeZone:forAccessibility:)(a2, 0);
    v15 = v14;
    sub_10000AB54((uint64_t)v9, (uint64_t)v7, type metadata accessor for DetailChartViewModelFactory.FormattedHoursCacheKey);
    v17 = v13;
    v18 = v15;
    swift_bridgeObjectRetain(v15);
    Cache.subscript.setter(&v17, v7);
  }
  sub_10021A6BC((uint64_t)v9, type metadata accessor for DetailChartViewModelFactory.FormattedHoursCacheKey);
  return v13;
}

uint64_t sub_100213978@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  void *v32;
  NSNumber v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t *, uint64_t);
  uint64_t *v48;
  double v51;
  char v52;
  Swift::String_optional v53;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  void *v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t);
  id v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void (*v71)(uint64_t);
  uint64_t v72;
  uint64_t v73;
  void *v74;
  Class isa;
  uint64_t result;
  uint64_t v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;

  v3 = sub_1000BA294(&qword_100BCB9B0);
  v85 = *(_QWORD *)(v3 - 8);
  v86 = v3;
  sub_10009D98C();
  __chkstk_darwin(v4);
  sub_100088FDC();
  v5 = sub_10009876C();
  v84 = *(_QWORD *)(type metadata accessor for Wind(v5) - 8);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v7 = sub_1000BA294(&qword_100BCB0A8);
  v88 = *(_QWORD *)(v7 - 8);
  v89 = v7;
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_1000986FC();
  sub_10009D2A4();
  __chkstk_darwin(v9);
  sub_100079F7C();
  v87 = v10;
  v93 = *(_QWORD *)(sub_10009ED8C() - 8);
  sub_10009D98C();
  __chkstk_darwin(v11);
  sub_100088FDC();
  v92 = v12;
  v13 = sub_10009876C();
  v91 = type metadata accessor for UVIndex(v13);
  v14 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  sub_100088FDC();
  v90 = v15;
  v16 = sub_10009876C();
  v17 = type metadata accessor for PressureTrend(v16);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  sub_100098728();
  v21 = v20 - v19;
  v22 = type metadata accessor for WeatherCondition(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  sub_100098728();
  v26 = v25 - v24;
  v27 = sub_1000DC68C();
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  sub_100099864();
  sub_1000BE9D4(v2, a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16));
  v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 88))(v2, v27);
  if ((_DWORD)v29 == enum case for DetailChartCondition.humidity(_:))
  {
    v31 = sub_100079FE8(v29, (unint64_t *)&qword_100BC6A08, NSNumberFormatter_ptr);
    v32 = (void *)static NSNumberFormatter.percent.getter(v31);
    HourWeather.humidity.getter();
    v33.super.super.isa = Double._bridgeToObjectiveC()().super.super.isa;
    v34 = sub_1000CC90C(v32, "stringFromNumber:");

    goto LABEL_3;
  }
  if ((_DWORD)v29 == enum case for DetailChartCondition.pressure(_:))
  {
    v38 = (uint64_t)a2 + *(int *)(sub_1000BA294(&qword_100BCB9B8) + 48);
    v39 = HourWeather.pressureTrend.getter();
    v40 = PressureTrend.symbolName.getter(v39);
    v42 = v41;
    sub_1000BE774(v21, *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
    *a2 = v40;
    a2[1] = v42;
    v43 = type metadata accessor for Image.TemplateRenderingMode(0);
    sub_10009D34C(v38, v44, v45, v43);
    v46 = enum case for DetailChartDataElement.ValueLabel.systemImage(_:);
    sub_10011E5D4();
    sub_1000FC480();
    v48 = a2;
    return v47(v48, v46);
  }
  if ((_DWORD)v29 == enum case for DetailChartCondition.precipitationTotal(_:)
    || (_DWORD)v29 == enum case for DetailChartCondition.temperature(_:)
    || (_DWORD)v29 == enum case for DetailChartCondition.temperatureFeelsLike(_:))
  {
    v51 = HourWeather.condition.getter(v29);
    v52 = HourWeather.isDaylight.getter(v51);
    v53 = WeatherCondition.conditionIconName(isDaytime:)(v52 & 1);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v26, v22);
    countAndFlagsBits = 0x2E78616D2E6E7573;
    if (v53.value._object)
      countAndFlagsBits = v53.value._countAndFlagsBits;
    object = (void *)0xEC0000006C6C6966;
    if (v53.value._object)
      object = v53.value._object;
    v56 = a2;
    *a2 = countAndFlagsBits;
    a2[1] = (uint64_t)object;
    v57 = (uint64_t)a2 + *(int *)(sub_1000BA294(&qword_100BCB9B8) + 48);
    static Image.TemplateRenderingMode.macSafeOriginal.getter();
    v58 = type metadata accessor for Image.TemplateRenderingMode(0);
    sub_10009926C(v57, 0, v59, v58);
    v60 = (unsigned int *)&enum case for DetailChartDataElement.ValueLabel.systemImage(_:);
    goto LABEL_20;
  }
  if ((_DWORD)v29 == enum case for DetailChartCondition.uvIndex(_:))
  {
    sub_100079FE8(v29, (unint64_t *)&qword_100BC6A08, NSNumberFormatter_ptr);
    v61 = (void *)static NSNumberFormatter.digits.getter();
    v62 = HourWeather.uvIndex.getter(v61);
    UVIndex.value.getter(v62);
    v63 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v63(v90, v91);
    v64 = sub_1000CC90C(objc_allocWithZone((Class)NSNumber), "initWithInteger:");
    v65 = sub_1000CC90C(v61, "stringFromNumber:");

    if (v65)
    {
      v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
      v68 = v67;

    }
    else
    {
      v66 = 0;
      v68 = 0;
    }
    v79 = sub_100089084(v92, v95, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 16));
    if (!v68)
    {
      v80 = HourWeather.uvIndex.getter(v79);
      UVIndex.value.getter(v80);
      v63(v90, v91);
      v66 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int);
      v68 = v81;
    }
    sub_100099254(v92, *(uint64_t (**)(uint64_t, uint64_t))(v93 + 8));
    *a2 = v66;
    a2[1] = v68;
    v46 = enum case for DetailChartDataElement.ValueLabel.text(_:);
    sub_10011E5D4();
    sub_1000FC480();
    v48 = a2;
    return v47(v48, v46);
  }
  if ((_DWORD)v29 == enum case for DetailChartCondition.visibility(_:))
  {
    v69 = HourWeather.visibility.getter(v29);
    v70 = (void *)ConditionUnits.visibility.getter(v69);
    Measurement<>.converted(to:)(v70, v89);

    v71 = *(void (**)(uint64_t))(v88 + 8);
    v72 = sub_1000C213C();
    v71(v72);
    Measurement.value.getter(v89);
    v73 = ((uint64_t (*)(uint64_t, uint64_t))v71)(v87, v89);
    sub_100079FE8(v73, (unint64_t *)&qword_100BC6A08, NSNumberFormatter_ptr);
    v74 = (void *)static NSNumberFormatter.decimal.getter();
    isa = Double._bridgeToObjectiveC()().super.super.isa;
    v34 = objc_msgSend(v74, "stringFromNumber:", isa);

    if (v34)
      goto LABEL_4;
    goto LABEL_26;
  }
  if ((_DWORD)v29 == enum case for DetailChartCondition.wind(_:))
  {
    v77 = HourWeather.wind.getter(v29, v30);
    Wind.direction.getter(v77);
    sub_1000C51C8(v84);
    v78 = Measurement.value.getter(v86);
    sub_1000BD208(*(uint64_t (**)(uint64_t, uint64_t))(v85 + 8));
    v56 = a2;
    *(double *)a2 = v78;
    v60 = (unsigned int *)&enum case for DetailChartDataElement.ValueLabel.windDirectionImage(_:);
LABEL_20:
    v46 = *v60;
    sub_10011E5D4();
    sub_1000FC480();
    v48 = v56;
    return v47(v48, v46);
  }
  if ((_DWORD)v29 == enum case for DetailChartCondition.chanceOfRain(_:))
  {
    v82 = sub_100079FE8(v29, (unint64_t *)&qword_100BC6A08, NSNumberFormatter_ptr);
    v83 = (void *)static NSNumberFormatter.percent.getter(v82);
    HourWeather.precipitationChance.getter(v83);
    v33.super.super.isa = Double._bridgeToObjectiveC()().super.super.isa;
    v34 = sub_1000CC90C(v83, "stringFromNumber:");

LABEL_3:
    if (v34)
    {
LABEL_4:
      v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      v37 = v36;

LABEL_27:
      *a2 = v35;
      a2[1] = v37;
      v46 = enum case for DetailChartDataElement.ValueLabel.text(_:);
      sub_10011E5D4();
      sub_1000FC480();
      v48 = a2;
      return v47(v48, v46);
    }
LABEL_26:
    v35 = 0;
    v37 = 0xE000000000000000;
    goto LABEL_27;
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v27, v27);
  __break(1u);
  return result;
}

uint64_t sub_1002140B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v0 = type metadata accessor for Precipitation(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_100099864();
  v2 = sub_1000DC68C();
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100098728();
  v6 = v5 - v4;
  v7 = sub_1000C213C();
  v8(v7);
  v9 = sub_10009171C(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88));
  v10 = enum case for DetailChartCondition.precipitationTotal(_:);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
  v12 = 0;
  if (v9 == v10)
  {
    v13 = HourWeather.precipitation.getter(v11);
    v12 = Precipitation.chartColor.getter(v13);
    sub_1000BD208(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  }
  return v12;
}

uint64_t sub_1002141B0@<X0>(uint64_t a1@<X0>, double a2@<X1>, int a3@<W2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int *v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  double v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v70 = a6;
  v67 = a5;
  v64 = a2;
  v65 = a4;
  LODWORD(v66) = a3;
  v72 = a7;
  v73 = a1;
  v71 = type metadata accessor for TimeZone(0);
  v68 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v63 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for DetailChartDataElement.ValueLabel(0);
  v12 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v62 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v51 - v19;
  v21 = type metadata accessor for ChartViewModelInterpolationMode(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_1000BA294(&qword_100BCB9F0);
  __chkstk_darwin(v25);
  v27 = (char *)&v51 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for ConditionDetailChartDataInput(0);
  if (*(_BYTE *)(v73 + *(int *)(v28 + 36)) == 1)
  {
    v29 = (int *)v28;
    v55 = v24;
    v56 = v22;
    v57 = v21;
    v58 = v12;
    v59 = v18;
    v60 = v15;
    v61 = v14;
    v31 = v62;
    v30 = v63;
    v32 = v73;
    v33 = v67;
    if ((v66 & 1) != 0)
    {
      v37 = v65[10];
      v66 = v65[11];
      sub_1000DB418(v65 + 7, v37);
      v65 = (_QWORD *)(v32 + v29[6]);
      v38 = v29[10];
      v54 = *(_QWORD *)(v32 + v29[11]);
      v39 = v29[13];
      v52 = v32 + v29[12];
      v53 = v32 + v39;
      *(_QWORD *)&v64 = v32 + v38;
      v40 = v55;
      (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v55, v32 + v29[14], v57);
      MidpointInterpolator.InterpolationMode.init(_:)(v40);
      v34 = dispatch thunk of CurrentMarkerValueCalculatorType.value(for:hourlyWeather:currentWeather:dayWeather:units:timeZone:maxRange:interpolationMode:)(v65, v54, v52, v53, v33, *(_QWORD *)&v64, v27, v37, a8, a9, v66);
      sub_1000FF448((uint64_t)v27, &qword_100BCB9F0);
    }
    else
    {
      v34 = v64;
    }
    Double.chartValueAccessibilityDescription(for:units:)(v32 + v29[6], v33, v34);
    v41 = v60;
    v42 = v61;
    (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v20, v70, v61);
    Double.clamped(to:)(a8, a9, v34);
    *v31 = 0;
    v31[1] = 0xE000000000000000;
    v43 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v58 + 104))(v31, enum case for DetailChartDataElement.ValueLabel.text(_:), v69);
    v44 = v59;
    v45 = CurrentWeather.date.getter(v43);
    static TimeZone.current.getter(v45);
    v46 = Date.formattedHours(timeZone:forAccessibility:)(v30, 0);
    v48 = v47;
    (*(void (**)(char *, uint64_t))(v68 + 8))(v30, v71);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v44, v42);
    v49 = v72;
    DetailChartDataElement.init(date:value:secondValue:thirdValue:valueLabel:dateLabel:accessibilityDateString:accessibilityValueDescription:color:textColor:)(v20, 0, 1, v31, 0, 0xE000000000000000, v46, v48);
    v50 = type metadata accessor for DetailChartDataElement(0);
    return _s7Weather24LocationCompositionStateOwst_0(v49, 0, 1, v50);
  }
  else
  {
    v35 = type metadata accessor for DetailChartDataElement(0);
    return _s7Weather24LocationCompositionStateOwst_0(v72, 1, 1, v35);
  }
}

uint64_t sub_100214604@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for ConditionDetailChartDataInput(0);
  if (*(_BYTE *)(a1 + *(int *)(v4 + 36)))
  {
    if (*(_BYTE *)(a1 + *(int *)(v4 + 36)) != 1)
    {
      v7 = (unsigned int *)&enum case for ChartLineStrokeStyle.solid(_:);
      goto LABEL_7;
    }
    CurrentWeather.date.getter(v4);
  }
  else
  {
    v5 = a1 + *(int *)(v4 + 32);
    v6 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, v5, v6);
  }
  v7 = (unsigned int *)&enum case for ChartLineStrokeStyle.dashed(_:);
LABEL_7:
  v8 = *v7;
  v9 = type metadata accessor for ChartLineStrokeStyle(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(a2, v8, v9);
}

double sub_1002146B0(double a1, double a2)
{
  double v2;
  double result;

  v2 = a1 - a2;
  result = 15.0;
  if (v2 <= 72.0)
  {
    result = 12.0;
    if (v2 <= 60.0)
    {
      result = 10.0;
      if (v2 <= 48.0)
      {
        result = 8.0;
        if (v2 <= 36.0)
        {
          result = 6.0;
          if (v2 <= 30.0)
          {
            result = 3.0;
            if (v2 > 18.0)
              return 5.0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_10021472C(uint64_t result, double a2, double a3, double a4)
{
  uint64_t v4;
  double *v5;
  double v6;
  double v7;

  if (a2 <= a3)
    a2 = a3;
  if (a2 <= a4)
    a2 = a4;
  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v5 = (double *)(result + 32);
    do
    {
      v6 = *v5++;
      v7 = v6;
      if (a2 <= v6)
        a2 = v7;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_100214760(uint64_t result, double a2, double a3, double a4)
{
  uint64_t v4;
  double *v5;
  double v6;
  double v7;

  if (a3 < a2)
    a2 = a3;
  if (a2 > a4)
    a2 = a4;
  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v5 = (double *)(result + 32);
    do
    {
      v6 = *v5++;
      v7 = v6;
      if (v6 < a2)
        a2 = v7;
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_100214794(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v8 = type metadata accessor for DetailChartDataElement(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_1000986FC();
  sub_10009D2A4();
  __chkstk_darwin(v10);
  sub_100079F7C();
  v11 = sub_10021A640(a1, a2, a3);
  sub_100605D80();
  if ((v11 & 0x8000000000000000) == 0)
  {
    v26 = a3;
    v27 = a4;
    if (v11)
    {
      v25 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      v24 = a4 + v25;
      while (1)
      {
        v13 = a1 <= a2;
        if (a3 > 0)
          v13 = a1 >= a2;
        if (v13)
          break;
        if (__OFADD__(a1, a3))
          v14 = ((a1 + a3) >> 63) ^ 0x8000000000000000;
        else
          v14 = a1 + a3;
        if (a1 < 0)
          goto LABEL_33;
        if ((unint64_t)a1 >= *(_QWORD *)(a4 + 16))
          goto LABEL_34;
        v15 = *(_QWORD *)(v9 + 72);
        sub_10021A6F0(v12, v24 + v15 * a1);
        v16 = _swiftEmptyArrayStorage[2];
        if (v16 >= _swiftEmptyArrayStorage[3] >> 1)
          sub_100605D80();
        _swiftEmptyArrayStorage[2] = v16 + 1;
        v12 = sub_1000DC600((uint64_t)_swiftEmptyArrayStorage + v25 + v16 * v15);
        a1 = v14;
        --v11;
        a3 = v26;
        a4 = v27;
        if (!v11)
          goto LABEL_17;
      }
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
    }
    else
    {
      v14 = a1;
LABEL_17:
      v17 = v14 <= a2;
      if (a3 > 0)
        v17 = v14 >= a2;
      if (v17)
      {
LABEL_20:
        swift_bridgeObjectRelease(a4);
        return;
      }
      while (1)
      {
        v18 = __OFADD__(v14, a3) ? ((v14 + a3) >> 63) ^ 0x8000000000000000 : v14 + a3;
        if (v14 < 0)
          break;
        if ((unint64_t)v14 >= *(_QWORD *)(a4 + 16))
          goto LABEL_36;
        v19 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
        v20 = a4 + v19;
        v21 = *(_QWORD *)(v9 + 72);
        sub_10021A6F0(v12, v20 + v21 * v14);
        v22 = _swiftEmptyArrayStorage[2];
        if (v22 >= _swiftEmptyArrayStorage[3] >> 1)
          sub_100605D80();
        _swiftEmptyArrayStorage[2] = v22 + 1;
        v12 = sub_1000DC600((uint64_t)_swiftEmptyArrayStorage + v19 + v22 * v21);
        a4 = v27;
        v23 = v18 <= a2;
        a3 = v26;
        if (v26 > 0)
          v23 = v18 >= a2;
        v14 = v18;
        if (v23)
          goto LABEL_20;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
  }
  __break(1u);
}

_QWORD *sub_100214A3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  int v42;
  void (*v43)(char *, _QWORD, uint64_t);
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  _QWORD *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  double v71;
  uint64_t v72;
  double v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  void (*v94)(char *, uint64_t, uint64_t);
  char *v95;
  unint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  double v103;
  double v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, _QWORD, uint64_t);
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(char *, uint64_t, uint64_t);
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  _QWORD v133[2];

  v125 = (char *)type metadata accessor for DetailChartDataElement(0);
  v130 = *((_QWORD *)v125 - 1);
  v2 = __chkstk_darwin(v125);
  v131 = (char *)&v106 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v129 = (char *)&v106 - v4;
  v5 = sub_1000BA294(&qword_100BCB0A0);
  v114 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v123 = (char *)&v106 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v132 = (char *)&v106 - v9;
  v10 = __chkstk_darwin(v8);
  v120 = (uint64_t)&v106 - v11;
  __chkstk_darwin(v10);
  v119 = (uint64_t)&v106 - v12;
  v13 = (int *)type metadata accessor for DetailChartViewModelFactory.PeakMarkerRequestContext(0);
  __chkstk_darwin(v13);
  v115 = (uint64_t)&v106 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ConditionUnits(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v106 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000BA294(&qword_100BCB720);
  v20 = __chkstk_darwin(v19);
  v109 = (uint64_t)&v106 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v116 = (uint64_t)&v106 - v23;
  __chkstk_darwin(v22);
  v25 = (char *)&v106 - v24;
  v26 = type metadata accessor for DetailChartCondition(0);
  v27 = *(_QWORD **)(v26 - 8);
  v28 = __chkstk_darwin(v26);
  v124 = (char *)&v106 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v122 = (char *)&v106 - v31;
  v32 = __chkstk_darwin(v30);
  v34 = (char *)&v106 - v33;
  __chkstk_darwin(v32);
  v36 = (char *)&v106 - v35;
  v121 = (void (*)(char *, uint64_t, uint64_t))v27[2];
  v121((char *)&v106 - v35, a1, v26);
  v37 = v13[6];
  v110 = *(unsigned __int8 *)(a1 + v13[5]);
  sub_100037794(a1 + v37, (uint64_t)v25, &qword_100BCB720);
  v38 = a1 + v13[7];
  v127 = v18;
  v128 = v16;
  v39 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v40 = v15;
  v39(v18, v38, v15);
  v41 = v13[9];
  v113 = *(unsigned __int8 *)(a1 + v13[8]);
  v112 = *(unsigned __int8 *)(a1 + v41);
  v42 = enum case for DetailChartCondition.chanceOfRain(_:);
  v43 = (void (*)(char *, _QWORD, uint64_t))v27[13];
  v43(v34, enum case for DetailChartCondition.chanceOfRain(_:), v26);
  sub_10000F1C8((unint64_t *)&qword_100BC35A0, (uint64_t (*)(uint64_t))&type metadata accessor for DetailChartCondition);
  LOBYTE(v13) = dispatch thunk of static Equatable.== infix(_:_:)(v36, v34, v26, v44);
  v45 = (void (*)(char *, uint64_t))v27[1];
  v45(v34, v26);
  if ((v13 & 1) == 0)
  {
    LODWORD(v107) = v42;
    v118 = v25;
    v47 = (uint64_t)v125;
    v111 = v40;
    v117 = a1;
    v43(v34, enum case for DetailChartCondition.temperature(_:), v26);
    v48 = sub_10068A5B8((uint64_t)v36, (uint64_t)v34);
    v45(v34, v26);
    v50 = (void (*)(char *, char *, uint64_t))v121;
    v49 = (uint64_t)v122;
    v121(v122, (uint64_t)v36, v26);
    v108 = v26;
    if ((v48 & 1) != 0)
    {
      v45((char *)v49, v26);
      v51 = v124;
      v50(v124, v36, v26);
      v52 = v26;
      v53 = v131;
      v54 = v128;
      v55 = v45;
      v56 = (uint64_t)v123;
      v45(v51, v52);
    }
    else
    {
      v57 = v107;
      v107 = v43;
      v43(v34, v57, v26);
      v58 = sub_10068A5B8(v49, (uint64_t)v34);
      v45(v34, v26);
      v45((char *)v49, v26);
      v59 = (uint64_t)v124;
      v50(v124, v36, v26);
      v60 = v26;
      v53 = v131;
      v54 = v128;
      v55 = v45;
      v56 = (uint64_t)v123;
      if ((v58 & 1) == 0)
      {
        v69 = v60;
        v107(v34, enum case for DetailChartCondition.temperatureFeelsLike(_:), v60);
        v70 = sub_10068A5B8(v59, (uint64_t)v34);
        v55(v34, v69);
        v55((char *)v59, v69);
        v61 = v126;
        if (v110 && (v70 & 1) == 0)
        {
          (*(void (**)(char *, uint64_t))(v54 + 8))(v127, v111);
          sub_1000FF448((uint64_t)v118, &qword_100BCB720);
          v55(v36, v108);
          return _swiftEmptyArrayStorage;
        }
LABEL_9:
        v125 = v36;
        v62 = *(char **)(v61 + 160);
        Cache.subscript.getter(v117);
        v46 = (_QWORD *)v133[0];
        v63 = v111;
        if (v133[0])
        {
          (*(void (**)(char *, uint64_t))(v54 + 8))(v127, v111);
          sub_1000FF448((uint64_t)v118, &qword_100BCB720);
          v55(v125, v108);
          return v46;
        }
        v123 = v62;
        v124 = (char *)v55;
        v64 = (uint64_t)v118;
        v65 = v116;
        sub_100037794((uint64_t)v118, v116, &qword_100BCB720);
        v66 = type metadata accessor for ExtremaResult(0);
        v67 = _s7Weather24LocationCompositionStateOwet_0(v65, 1, v66);
        if ((_DWORD)v67 == 1)
        {
          v68 = v64;
        }
        else
        {
          v71 = ExtremaResult.minValue.getter(v67);
          v72 = (uint64_t)v118;
          v73 = v71;
          v74 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 8);
          v74(v65, v66);
          v65 = v109;
          sub_100037794(v72, v109, &qword_100BCB720);
          v75 = _s7Weather24LocationCompositionStateOwet_0(v65, 1, v66);
          if ((_DWORD)v75 != 1)
          {
            v103 = ExtremaResult.maxValue.getter(v75);
            v68 = (uint64_t)v118;
            v104 = v103;
            v74(v65, v66);
            v76 = v130;
            v77 = (uint64_t)v127;
            v78 = v120;
            if (v104 <= v73)
            {
              v105 = v115;
              sub_10000AB54(v117, v115, type metadata accessor for DetailChartViewModelFactory.PeakMarkerRequestContext);
              v46 = _swiftEmptyArrayStorage;
              v133[0] = _swiftEmptyArrayStorage;
              Cache.subscript.setter(v133, v105);
              (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v77, v63);
              v101 = v68;
LABEL_29:
              sub_1000FF448(v101, &qword_100BCB720);
              ((void (*)(char *, uint64_t))v124)(v125, v108);
              return v46;
            }
LABEL_19:
            v79 = v119;
            v80 = (uint64_t)v125;
            v81 = v126;
            sub_100215F24(v68, v112, v126, (uint64_t)v125, v77, v119);
            v82 = v68;
            v83 = v79;
            sub_100216DE0(v82, v113, v81, v80, v77, v117, v78);
            v84 = sub_1000BA294(&qword_100BCB9C0);
            v85 = *(_QWORD *)(v114 + 72);
            v86 = *(unsigned __int8 *)(v114 + 80);
            v87 = (v86 + 32) & ~v86;
            v88 = swift_allocObject(v84, v87 + 2 * v85, v86 | 7);
            *(_OWORD *)(v88 + 16) = xmmword_10097DA20;
            v126 = v88;
            v89 = v88 + v87;
            sub_100037794(v83, v88 + v87, &qword_100BCB0A0);
            sub_100037794(v120, v89 + v85, &qword_100BCB0A0);
            v90 = 0;
            v91 = 0;
            v46 = _swiftEmptyArrayStorage;
            v92 = (uint64_t)v132;
            do
            {
              v93 = v90;
              sub_100037794(v89 + v91 * v85, v92, &qword_100BCB0A0);
              sub_1000F111C(v92, v56, &qword_100BCB0A0);
              if (_s7Weather24LocationCompositionStateOwet_0(v56, 1, v47) == 1)
              {
                sub_1000FF448(v56, &qword_100BCB0A0);
              }
              else
              {
                v94 = *(void (**)(char *, uint64_t, uint64_t))(v76 + 32);
                v95 = v129;
                v94(v129, v56, v47);
                v94(v53, (uint64_t)v95, v47);
                if ((swift_isUniquelyReferenced_nonNull_native(v46) & 1) == 0)
                {
                  sub_1005FECEC();
                  v46 = v98;
                }
                v96 = v46[2];
                if (v96 >= v46[3] >> 1)
                {
                  sub_1005FECEC();
                  v46 = v99;
                }
                v46[2] = v96 + 1;
                v76 = v130;
                v97 = (unint64_t)v46
                    + ((*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80))
                    + *(_QWORD *)(v130 + 72) * v96;
                v53 = v131;
                v94((char *)v97, (uint64_t)v131, v47);
              }
              v90 = 1;
              v91 = 1;
              v92 = (uint64_t)v132;
            }
            while ((v93 & 1) == 0);
            swift_setDeallocating(v126);
            sub_100500488();
            v100 = v115;
            sub_10000AB54(v117, v115, type metadata accessor for DetailChartViewModelFactory.PeakMarkerRequestContext);
            v133[0] = v46;
            swift_bridgeObjectRetain(v46);
            Cache.subscript.setter(v133, v100);
            sub_1000FF448(v120, &qword_100BCB0A0);
            sub_1000FF448(v119, &qword_100BCB0A0);
            (*(void (**)(char *, uint64_t))(v128 + 8))(v127, v111);
            v101 = (uint64_t)v118;
            goto LABEL_29;
          }
          v68 = v72;
        }
        v76 = v130;
        v77 = (uint64_t)v127;
        v78 = v120;
        sub_1000FF448(v65, &qword_100BCB720);
        goto LABEL_19;
      }
      v45((char *)v59, v60);
    }
    v61 = v126;
    goto LABEL_9;
  }
  (*(void (**)(char *, uint64_t))(v128 + 8))(v127, v40);
  sub_1000FF448((uint64_t)v25, &qword_100BCB720);
  v45(v36, v26);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100215414(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  char v4;
  unint64_t v5;

  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(a2 + 16);
  result = sub_1000F5658(0, (v3 - result) & ~((uint64_t)(v3 - result) >> 63), v3);
  if ((v4 & 1) != 0)
    v5 = v3;
  else
    v5 = result;
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_9;
  if (v3 >= v5)
  {
    type metadata accessor for DetailChartDataElement(0);
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

_QWORD *sub_1002154A4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1002154B0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))sub_1006ED480);
}

_QWORD *sub_1002154B0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if ((a4 & 1) == 0)
    goto LABEL_2;
  v11 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v12 = swift_unknownObjectRetain_n(a1, 2);
  v13 = (_QWORD *)swift_dynamicCastClass(v12, v11);
  if (!v13)
  {
    sub_1000D0C3C();
    v13 = _swiftEmptyArrayStorage;
  }
  v14 = v13[2];
  swift_release(v13);
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  v15 = a1;
  if (v14 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease(v15);
LABEL_2:
    v10 = (_QWORD *)a5(a1, a2, a3, a4);
    goto LABEL_9;
  }
  v10 = (_QWORD *)swift_dynamicCastClass(a1, v11);
  if (!v10)
  {
    sub_1000D0C3C();
    v10 = _swiftEmptyArrayStorage;
  }
LABEL_9:
  sub_1000D0C3C();
  return v10;
}

uint64_t sub_100215594(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[16];

  v4 = type metadata accessor for DetailChartCondition(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000BA294(&qword_100BCB0A0);
  __chkstk_darwin(v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v11);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002F6F6C(a1, (uint64_t)v10);
  v18 = type metadata accessor for DetailChartDataElement(0);
  v19 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v18);
  if ((_DWORD)v19 == 1)
  {
    sub_1000FF448((uint64_t)v10, &qword_100BCB0A0);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 1, 1, v14);
  }
  else
  {
    DetailChartDataElement.date.getter(v19);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v10, v18);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, v14);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v14) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
      v22 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
      if (v22 == enum case for DetailChartCondition.precipitationTotal(_:))
      {
        v23 = static ApparentPrecipitationIntensityCategory.allCases.getter();
        __chkstk_darwin(v23);
        *(&v34 - 2) = (uint64_t)v17;
        sub_10084A08C((uint64_t)sub_10021A6A0, (uint64_t)(&v34 - 4), v23, (uint64_t)&v35, v24, v25, v26, v27);
      }
      else
      {
        if (v22 != enum case for DetailChartCondition.uvIndex(_:))
        {
          (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
          (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
          return 0;
        }
        v23 = static UVIndex.ExposureCategory.allCases.getter();
        __chkstk_darwin(v23);
        *(&v34 - 2) = (uint64_t)v17;
        sub_10084A0A8((uint64_t)sub_10021A684, (uint64_t)(&v34 - 4), v23, (uint64_t)v36, v29, v30, v31, v32, v34, v35);
      }
      v20 = v28;
      v33 = swift_bridgeObjectRelease(v23);
      (*(void (**)(char *, uint64_t, __n128))(v15 + 8))(v17, v14, v33);
      return v20;
    }
  }
  sub_1000FF448((uint64_t)v13, (uint64_t *)&unk_100BD35A0);
  return 0;
}

double sub_1002158A8(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;
  id v4;
  char v5;
  double result;
  id v7;
  id v8;
  char v9;
  id v10;
  char v11;
  id v12;
  id v13;
  char v14;
  id v15;
  char v16;

  v1 = (void *)ConditionUnits.pressure.getter(a1);
  v2 = (void *)objc_opt_self(NSUnitPressure);
  v3 = v1;
  v4 = objc_msgSend(v2, "inchesOfMercury");
  sub_1000A0794(0, &qword_100BCB9A8, NSUnitPressure_ptr);
  v5 = static NSObject.== infix(_:_:)(v4, v3);

  if ((v5 & 1) != 0)
  {

    return 0.5;
  }
  else
  {
    v7 = v3;
    v8 = objc_msgSend(v2, "hectopascals");
    v9 = static NSObject.== infix(_:_:)(v8, v7);

    if ((v9 & 1) != 0
      || (v7 = v7,
          v10 = objc_msgSend(v2, "millibars"),
          v11 = static NSObject.== infix(_:_:)(v10, v7),
          v7,
          v10,
          (v11 & 1) != 0))
    {

      return 15.0;
    }
    else
    {
      v12 = v7;
      v13 = objc_msgSend(v2, "millimetersOfMercury");
      v14 = static NSObject.== infix(_:_:)(v13, v12);

      if ((v14 & 1) != 0)
      {

        return 10.0;
      }
      else
      {
        v15 = objc_msgSend(v2, "kilopascals");
        v16 = static NSObject.== infix(_:_:)(v15, v12);

        result = 1.0;
        if ((v16 & 1) != 0)
          return 1.5;
      }
    }
  }
  return result;
}

double sub_100215A60()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  char v4;
  double result;
  id v6;
  id v7;
  char v8;
  id v9;
  char v10;
  id v11;
  char v12;
  void *v13;
  char v14;

  v0 = (void *)ConditionUnits.windSpeed.getter();
  v1 = (void *)objc_opt_self(NSUnitSpeed);
  v2 = v0;
  v3 = objc_msgSend(v1, "metersPerSecond");
  sub_1000A0794(0, (unint64_t *)&qword_100BCB990, NSUnitSpeed_ptr);
  v4 = static NSObject.== infix(_:_:)(v3, v2);

  if ((v4 & 1) != 0)
  {

    return 2.0;
  }
  else
  {
    v6 = v2;
    v7 = objc_msgSend(v1, "kilometersPerHour");
    v8 = static NSObject.== infix(_:_:)(v7, v6);

    if ((v8 & 1) != 0)
      goto LABEL_6;
    v6 = v6;
    v9 = objc_msgSend(v1, "milesPerHour");
    v10 = static NSObject.== infix(_:_:)(v9, v6);

    if ((v10 & 1) != 0
      || (v6 = v6,
          v11 = objc_msgSend(v1, "knots"),
          v12 = static NSObject.== infix(_:_:)(v11, v6),
          v6,
          v11,
          (v12 & 1) != 0))
    {
LABEL_6:

      return 5.0;
    }
    else
    {
      v13 = (void *)static NSUnitSpeed.beaufort.getter();
      v14 = static NSObject.== infix(_:_:)(v13, v6);

      result = 5.0;
      if ((v14 & 1) != 0)
        return 1.0;
    }
  }
  return result;
}

uint64_t sub_100215BF8@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v28 = a4;
  v29 = a3;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v28 - v13;
  v15 = type metadata accessor for DateInterval(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v19(v14, a2, v8);
    v19(v12, v29, v8);
    DateInterval.init(start:end:)(v14, v12);
    v20 = v28;
    v21 = DateInterval.contains(_:)(v28);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    if ((v21 & 1) != 0)
      v22 = v20;
    else
      v22 = v29;
    v19(a5, v22, v8);
    v26 = enum case for ChartLineStrokeStyle.solidFrom(_:);
    v27 = type metadata accessor for ChartLineStrokeStyle(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(a5, v26, v27);
  }
  else
  {
    v23 = enum case for ChartLineStrokeStyle.solid(_:);
    v24 = type metadata accessor for ChartLineStrokeStyle(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(a5, v23, v24);
  }
}

uint64_t sub_100215DC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v10;

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  DetailChartDataElement.date.getter(v5);
  v8 = static Date.> infix(_:_:)(v7, a2);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v8 & 1;
}

void sub_100215E60(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  v2 = *(_QWORD *)(type metadata accessor for DetailChartDataElement(0) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_100867018();
    v3 = v5;
  }
  v4 = *(_QWORD *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  sub_10021909C((int64_t)v6);
  *a1 = v3;
}

uint64_t sub_100215EE4(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5;

  v5 = a1 + *(int *)(sub_10021A710() + 24);
  return Double.chartValueAccessibilityDescription(for:units:)(v5, a2, a3);
}

uint64_t sub_100215F24@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;

  v48 = a5;
  v50 = a4;
  v54 = a3;
  v55 = a6;
  LODWORD(v51) = a2;
  v7 = sub_1000BA294(&qword_100BCB9C8);
  __chkstk_darwin(v7);
  v49 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TimeZone(0);
  v46 = *(_QWORD *)(v9 - 8);
  v47 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DetailChartDataElement.ValueLabel(0);
  __chkstk_darwin(v12);
  v53 = (uint64_t *)((char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v52 = (char *)&v44 - v19;
  v20 = sub_1000BA294(&qword_100BCB720);
  __chkstk_darwin(v20);
  v22 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for ExtremaResult(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v44 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100037794(a1, (uint64_t)v22, &qword_100BCB720);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v22, 1, v23) == 1)
  {
    sub_1000FF448((uint64_t)v22, &qword_100BCB720);
LABEL_6:
    v41 = 1;
    v40 = v55;
    goto LABEL_7;
  }
  v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v24 + 32))(v26, v22, v23);
  if ((v51 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    goto LABEL_6;
  }
  v28 = ExtremaResult.minDate.getter(v27);
  ExtremaResult.minValue.getter(v28);
  v30 = ExtremaResult.minValue.getter(v29);
  v31 = v50;
  v32 = v48;
  sub_1002162D4(v50, 0, v48, v53, v30);
  v34 = ExtremaResult.minDate.getter(v33);
  static TimeZone.current.getter(v34);
  v51 = Date.formattedHours(timeZone:forAccessibility:)(v11, 0);
  v45 = v35;
  (*(void (**)(char *, uint64_t))(v46 + 8))(v11, v47);
  v36 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  v37 = ExtremaResult.minValue.getter(v36);
  v38 = type metadata accessor for ConditionUnits(0);
  v39 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v49, v32, v38);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v39, 0, 1, v38);
  sub_10021652C(v31, 0, v39, v37);
  sub_1000FF448((uint64_t)v39, &qword_100BCB9C8);
  v40 = v55;
  DetailChartDataElement.init(date:value:secondValue:thirdValue:valueLabel:dateLabel:accessibilityDateString:accessibilityValueDescription:color:textColor:)(v52, 0, 1, v53, 0, 0xE000000000000000, v51, v45);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  v41 = 0;
LABEL_7:
  v42 = type metadata accessor for DetailChartDataElement(0);
  return _s7Weather24LocationCompositionStateOwst_0(v40, v41, 1, v42);
}

void sub_1002162D4(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, double a5@<D0>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;

  v29 = a4;
  v9 = sub_1000BA294(&qword_100BCB9E0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v28 - v13;
  v15 = (int *)type metadata accessor for DetailChartViewModelFactory.MarkerLabelCacheKey(0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v28 - v19;
  v21 = type metadata accessor for DetailChartCondition(0);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
  v28 = a1;
  v22(v20, a1, v21);
  v23 = &v20[v15[7]];
  v24 = type metadata accessor for ConditionUnits(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v23, a3, v24);
  *(double *)&v20[v15[5]] = a5;
  v20[v15[6]] = a2;
  Cache.subscript.getter(v20);
  v25 = type metadata accessor for DetailChartDataElement.ValueLabel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, v25) == 1)
  {
    sub_1000FF448((uint64_t)v14, &qword_100BCB9E0);
    v26 = a2 & 1;
    v27 = v29;
    sub_1002171A8(v28, v26, a3, v29, a5);
    sub_10000AB54((uint64_t)v20, (uint64_t)v18, type metadata accessor for DetailChartViewModelFactory.MarkerLabelCacheKey);
    (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v12, v27, v25);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v25);
    Cache.subscript.setter(v12, v18);
    sub_10021A6BC((uint64_t)v20, type metadata accessor for DetailChartViewModelFactory.MarkerLabelCacheKey);
  }
  else
  {
    sub_10021A6BC((uint64_t)v20, type metadata accessor for DetailChartViewModelFactory.MarkerLabelCacheKey);
    (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v29, v14, v25);
  }
}

uint64_t sub_10021652C(uint64_t a1, int a2, char *a3, double a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  objc_class *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  NSBundle v82;
  uint64_t v83;
  unint64_t v84;
  double v85;
  Swift::String v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;

  v110 = a3;
  v98 = a2;
  v6 = sub_1000BA294(&qword_100BC3340);
  __chkstk_darwin(v6);
  v100 = (uint64_t)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for NSUnitPressure.BaseWeatherFormatStyle(0);
  v99 = *(_QWORD *)(v105 - 8);
  v8 = __chkstk_darwin(v105);
  v104 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v91 - v10;
  v12 = sub_1000BA294(&qword_100BCB948);
  v102 = *(_QWORD *)(v12 - 8);
  v103 = v12;
  __chkstk_darwin(v12);
  v101 = (char *)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for WeatherFormatPlaceholder(0);
  v15 = *(_QWORD *)(v14 - 8);
  v107 = v14;
  v108 = v15;
  __chkstk_darwin(v14);
  v106 = (char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(0);
  v96 = *(_QWORD *)(v17 - 8);
  v97 = v17;
  __chkstk_darwin(v17);
  v95 = (char *)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000BA294(&qword_100BC4E68);
  v93 = *(_QWORD *)(v19 - 8);
  v94 = v19;
  __chkstk_darwin(v19);
  v92 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000BA294(&qword_100BCB9C8);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v91 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v26 = (char *)&v91 - v25;
  v27 = type metadata accessor for ConditionUnits(0);
  v109 = *(_QWORD *)(v27 - 8);
  v28 = __chkstk_darwin(v27);
  v30 = (char *)&v91 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v32 = (char *)&v91 - v31;
  v33 = type metadata accessor for DetailChartCondition(0);
  v34 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v36 = (char *)&v91 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v36, a1, v33);
  result = (*(uint64_t (**)(char *, uint64_t))(v34 + 88))(v36, v33);
  if ((_DWORD)result == enum case for DetailChartCondition.pressure(_:))
  {
    sub_100037794((uint64_t)v110, (uint64_t)v24, &qword_100BCB9C8);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v24, 1, v27) != 1)
    {
      v42 = *(uint64_t (**)(char *, char *, uint64_t))(v109 + 32);
      v91 = v27;
      v43 = v42(v30, v24, v27);
      v44 = ConditionUnits.pressure.getter(v43);
      v45 = sub_1000A0794(0, &qword_100BCB9A8, NSUnitPressure_ptr);
      v46 = v101;
      Measurement.init(value:unit:)(v44, v45);
      v47 = type metadata accessor for Locale(0);
      v48 = v100;
      v49 = _s7Weather24LocationCompositionStateOwst_0(v100, 1, 1, v47);
      v50 = static Set<>.full.getter(v49);
      static WeatherFormatStyle<>.weather(_:locale:)(v50, v48);
      swift_bridgeObjectRelease(v50);
      sub_1000FF448(v48, &qword_100BC3340);
      v51 = v104;
      NSUnitPressure.BaseWeatherFormatStyle.accessible.getter(v52);
      v110 = *(char **)(v99 + 8);
      v53 = v105;
      ((void (*)(char *, uint64_t))v110)(v11, v105);
      v54 = v107;
      v55 = v106;
      (*(void (**)(char *, _QWORD, uint64_t))(v108 + 104))(v106, enum case for WeatherFormatPlaceholder.none(_:), v107);
      v56 = type metadata accessor for UnitManager(0);
      v57 = static UnitManager.standard.getter(v56);
      sub_10000F1C8((unint64_t *)&qword_100BCB9D0, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitPressure.BaseWeatherFormatStyle);
      v58 = v103;
      v41 = Measurement.formatted<A>(_:placeholder:unitManager:)(v51, v55, v57, &protocol witness table for UnitManager, v103, v53, v59);
      v60 = swift_release(v57);
      (*(void (**)(char *, uint64_t, __n128))(v108 + 8))(v55, v54, v60);
      ((void (*)(char *, uint64_t))v110)(v51, v53);
      (*(void (**)(char *, uint64_t))(v102 + 8))(v46, v58);
      (*(void (**)(char *, uint64_t))(v109 + 8))(v30, v91);
      return v41;
    }
    v38 = (uint64_t)v24;
LABEL_11:
    sub_1000FF448(v38, &qword_100BCB9C8);
    return 0;
  }
  if ((_DWORD)result == enum case for DetailChartCondition.temperature(_:)
    || (_DWORD)result == enum case for DetailChartCondition.temperatureFeelsLike(_:))
  {
    sub_100037794((uint64_t)v110, (uint64_t)v26, &qword_100BCB9C8);
    v40 = v27;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v26, 1, v27) != 1)
    {
      v61 = (*(uint64_t (**)(char *, char *, uint64_t))(v109 + 32))(v32, v26, v27);
      v110 = v32;
      v62 = ConditionUnits.temperature.getter(v61);
      v63 = sub_1000A0794(0, (unint64_t *)&qword_100BC5658, NSUnitTemperature_ptr);
      v64 = v92;
      v65 = Measurement.init(value:unit:)(v62, v63);
      v66 = v95;
      static WeatherFormatStyle<>.weather.getter(v65);
      v67 = v107;
      v68 = v108;
      v69 = v106;
      (*(void (**)(char *, _QWORD, uint64_t))(v108 + 104))(v106, enum case for WeatherFormatPlaceholder.none(_:), v107);
      v70 = type metadata accessor for UnitManager(0);
      v71 = static UnitManager.standard.getter(v70);
      sub_10000F1C8((unint64_t *)&qword_100BCB9D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
      v72 = v94;
      v73 = v97;
      v75 = Measurement.formatted<A>(_:placeholder:unitManager:)(v66, v69, v71, &protocol witness table for UnitManager, v94, v97, v74);
      v105 = v76;
      v77 = swift_release(v71);
      (*(void (**)(char *, uint64_t, __n128))(v68 + 8))(v69, v67, v77);
      (*(void (**)(char *, uint64_t))(v96 + 8))(v66, v73);
      (*(void (**)(char *, uint64_t))(v93 + 8))(v64, v72);
      v78 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      if ((v98 & 1) != 0)
      {
        v79 = 0xD000000000000046;
        v90 = 0x80000001009F4890;
        v80 = 0x20666F2068676948;
        v81 = 0xEA00000000004025;
        v82.super.isa = v78;
        v83 = 0;
        v84 = 0xE000000000000000;
      }
      else
      {
        v90 = 0x80000001009F4840;
        v80 = 0x2520666F20776F4CLL;
        v81 = 0xE900000000000040;
        v82.super.isa = v78;
        v83 = 0;
        v84 = 0xE000000000000000;
        v79 = 0xD000000000000045;
      }
      v86 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v80, (Swift::String_optional)0, v82, *(Swift::String *)&v83, *(Swift::String *)&v79);

      v87 = sub_1000BA294(&qword_100BC3C38);
      v88 = swift_allocObject(v87, 72, 7);
      *(_OWORD *)(v88 + 16) = xmmword_10097CA50;
      *(_QWORD *)(v88 + 56) = &type metadata for String;
      *(_QWORD *)(v88 + 64) = sub_1000B2E24();
      v89 = v105;
      *(_QWORD *)(v88 + 32) = v75;
      *(_QWORD *)(v88 + 40) = v89;
      v41 = static String.localizedStringWithFormat(_:_:)(v86._countAndFlagsBits, v86._object, v88);
      swift_bridgeObjectRelease(v86._object);
      swift_bridgeObjectRelease(v88);
      (*(void (**)(char *, uint64_t))(v109 + 8))(v110, v40);
      return v41;
    }
    v38 = (uint64_t)v26;
    goto LABEL_11;
  }
  if ((_DWORD)result == enum case for DetailChartCondition.uvIndex(_:))
  {
    v111 = *(_QWORD *)&a4;
    sub_10010D1D0();
    return BinaryFloatingPoint.formatted()()._countAndFlagsBits;
  }
  v85 = round(a4);
  if ((~*(_QWORD *)&v85 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v85 <= -9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v85 < 9.22337204e18)
  {
    v111 = (uint64_t)v85;
    v41 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
    return v41;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100216DE0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;

  v50 = a4;
  v51 = a6;
  v48 = a5;
  v55 = a3;
  v56 = a7;
  LODWORD(v52) = a2;
  v8 = sub_1000BA294(&qword_100BCB9C8);
  __chkstk_darwin(v8);
  v49 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TimeZone(0);
  v46 = *(_QWORD *)(v10 - 8);
  v47 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DetailChartDataElement.ValueLabel(0);
  __chkstk_darwin(v13);
  v54 = (uint64_t *)((char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v53 = (char *)&v45 - v20;
  v21 = sub_1000BA294(&qword_100BCB720);
  __chkstk_darwin(v21);
  v23 = (char *)&v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for ExtremaResult(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = (char *)&v45 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100037794(a1, (uint64_t)v23, &qword_100BCB720);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v23, 1, v24) == 1)
  {
    sub_1000FF448((uint64_t)v23, &qword_100BCB720);
LABEL_6:
    v42 = 1;
    v41 = v56;
    goto LABEL_7;
  }
  v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v25 + 32))(v27, v23, v24);
  if ((v52 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
    goto LABEL_6;
  }
  v29 = ExtremaResult.maxDate.getter(v28);
  ExtremaResult.maxValue.getter(v29);
  v31 = ExtremaResult.maxValue.getter(v30);
  v32 = v50;
  v33 = v48;
  sub_1002162D4(v50, 1, v48, v54, v31);
  v35 = ExtremaResult.maxDate.getter(v34);
  static TimeZone.current.getter(v35);
  v52 = Date.formattedHours(timeZone:forAccessibility:)(v12, 0);
  v45 = v36;
  (*(void (**)(char *, uint64_t))(v46 + 8))(v12, v47);
  v37 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  v38 = ExtremaResult.maxValue.getter(v37);
  v39 = type metadata accessor for ConditionUnits(0);
  v40 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v49, v33, v39);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v40, 0, 1, v39);
  sub_10021652C(v32, 1, v40, v38);
  sub_1000FF448((uint64_t)v40, &qword_100BCB9C8);
  type metadata accessor for DetailChartViewModelFactory.PeakMarkerRequestContext(0);
  swift_retain();
  v41 = v56;
  DetailChartDataElement.init(date:value:secondValue:thirdValue:valueLabel:dateLabel:accessibilityDateString:accessibilityValueDescription:color:textColor:)(v53, 0, 1, v54, 0, 0xE000000000000000, v52, v45);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  v42 = 0;
LABEL_7:
  v43 = type metadata accessor for DetailChartDataElement(0);
  return _s7Weather24LocationCompositionStateOwst_0(v41, v42, 1, v43);
}

uint64_t sub_1002171A8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, double a5@<D0>)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  objc_class *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  NSBundle v47;
  uint64_t v48;
  unint64_t v49;
  double v50;
  void *v51;
  uint64_t *v52;
  uint64_t v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  Class isa;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _BYTE v77[4];
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;

  v79 = a3;
  v78 = a2;
  v84 = a4;
  v7 = type metadata accessor for WeatherFormatPlaceholder(0);
  v82 = *(_QWORD *)(v7 - 8);
  v83 = v7;
  __chkstk_darwin(v7);
  v9 = &v77[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_1000BA294(&qword_100BC3340);
  __chkstk_darwin(v10);
  v12 = &v77[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for NSUnitPressure.BaseWeatherFormatStyle(0);
  v81 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = &v77[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = sub_1000BA294(&qword_100BCB948);
  v80 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = &v77[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = type metadata accessor for DetailChartCondition(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = &v77[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v20 + 16))(v22, a1, v19);
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v20 + 88))(v22, v19);
  if ((_DWORD)result == enum case for DetailChartCondition.pressure(_:))
  {
    v24 = ConditionUnits.pressure.getter();
    v25 = sub_1000A0794(0, &qword_100BCB9A8, NSUnitPressure_ptr);
    v26 = Measurement.init(value:unit:)(v24, v25);
    v27 = static Set<>.value.getter(v26);
    v28 = type metadata accessor for Locale(0);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 1, 1, v28);
    static WeatherFormatStyle<>.weather(_:locale:)(v27, v12);
    swift_bridgeObjectRelease(v27);
    sub_1000FF448((uint64_t)v12, &qword_100BC3340);
    v30 = v82;
    v29 = v83;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v82 + 104))(v9, enum case for WeatherFormatPlaceholder.none(_:), v83);
    v31 = type metadata accessor for UnitManager(0);
    v32 = static UnitManager.standard.getter(v31);
    sub_10000F1C8((unint64_t *)&qword_100BCB9D0, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitPressure.BaseWeatherFormatStyle);
    v34 = Measurement.formatted<A>(_:placeholder:unitManager:)(v15, v9, v32, &protocol witness table for UnitManager, v16, v13, v33);
    v36 = v35;
    v37 = swift_release(v32);
    (*(void (**)(_BYTE *, uint64_t, __n128))(v30 + 8))(v9, v29, v37);
    (*(void (**)(_BYTE *, uint64_t))(v81 + 8))(v15, v13);
    (*(void (**)(_BYTE *, uint64_t))(v80 + 8))(v18, v16);
    v38 = v84;
    *v84 = v34;
    v38[1] = v36;
    v39 = enum case for DetailChartDataElement.ValueLabel.text(_:);
    v40 = type metadata accessor for DetailChartDataElement.ValueLabel(0);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 104))(v38, v39, v40);
  }
  v41 = v84;
  if ((_DWORD)result == enum case for DetailChartCondition.temperature(_:)
    || (_DWORD)result == enum case for DetailChartCondition.temperatureFeelsLike(_:))
  {
    v43 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    if ((v78 & 1) != 0)
    {
      v44 = 0xD000000000000026;
      v76 = 0x80000001009F4910;
      v45 = 72;
      v46 = 0xE100000000000000;
      v47.super.isa = v43;
      v48 = 0;
      v49 = 0xE000000000000000;
    }
    else
    {
      v76 = 0x80000001009F48E0;
      v45 = 76;
      v46 = 0xE100000000000000;
      v47.super.isa = v43;
      v48 = 0;
      v49 = 0xE000000000000000;
      v44 = 0xD000000000000025;
    }
    v61 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v45, (Swift::String_optional)0, v47, *(Swift::String *)&v48, *(Swift::String *)&v44);
    object = v61._object;
    countAndFlagsBits = v61._countAndFlagsBits;
    goto LABEL_18;
  }
  if ((_DWORD)result != enum case for DetailChartCondition.uvIndex(_:))
  {
    if ((_DWORD)result != enum case for DetailChartCondition.chanceOfRain(_:))
    {
      v69 = round(a5);
      if ((~*(_QWORD *)&v69 & 0x7FF0000000000000) != 0)
      {
        if (v69 > -9.22337204e18)
        {
          if (v69 < 9.22337204e18)
          {
            v85 = (uint64_t)v69;
            *v41 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int);
            v41[1] = v70;
            v71 = enum case for DetailChartDataElement.ValueLabel.text(_:);
            v72 = type metadata accessor for DetailChartDataElement.ValueLabel(0);
            (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 104))(v41, v71, v72);
            return (*(uint64_t (**)(_BYTE *, uint64_t))(v20 + 8))(v22, v19);
          }
          goto LABEL_35;
        }
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        return result;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    v66 = sub_1000A0794(0, (unint64_t *)&qword_100BC6A08, NSNumberFormatter_ptr);
    v67 = (void *)static NSNumberFormatter.percent.getter(v66);
    isa = Double._bridgeToObjectiveC()().super.super.isa;
    v43 = (objc_class *)objc_msgSend(v67, "stringFromNumber:", isa);

    if (!v43)
    {
      v62 = 0;
      v63 = 0xE000000000000000;
      goto LABEL_19;
    }
    countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
LABEL_18:
    v62 = countAndFlagsBits;
    v63 = (unint64_t)object;

LABEL_19:
    *v41 = v62;
    v41[1] = v63;
    v64 = enum case for DetailChartDataElement.ValueLabel.text(_:);
    v65 = type metadata accessor for DetailChartDataElement.ValueLabel(0);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 104))(v41, v64, v65);
  }
  sub_1000A0794(0, (unint64_t *)&qword_100BC6A08, NSNumberFormatter_ptr);
  result = static NSNumberFormatter.digits.getter();
  v50 = round(a5);
  if ((~*(_QWORD *)&v50 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v50 <= -9.22337204e18)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v50 >= 9.22337204e18)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v51 = (void *)result;
  v52 = v41;
  v53 = (uint64_t)v50;
  v54 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", (uint64_t)v50);
  v55 = objc_msgSend(v51, "stringFromNumber:", v54);

  if (v55)
  {
    v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
    v58 = v57;

  }
  else
  {
    v85 = v53;
    v56 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int);
    v58 = v73;
  }
  *v52 = v56;
  v52[1] = v58;
  v74 = enum case for DetailChartDataElement.ValueLabel.text(_:);
  v75 = type metadata accessor for DetailChartDataElement.ValueLabel(0);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 104))(v52, v74, v75);
}

uint64_t sub_100217844@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a2;
  v23 = a1;
  v2 = type metadata accessor for TimeZone(0);
  v24 = *(_QWORD *)(v2 - 8);
  v25 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DetailChartDataElement.ValueLabel(0);
  v5 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v7 = (uint64_t *)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = ApparentPrecipitationIntensityCategory.rangeValue.getter(v10);
  v14 = ApparentPrecipitationIntensityCategory.standaloneDescription.getter(v13);
  v16 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v23, v8);
  *v7 = v14;
  v7[1] = v16;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DetailChartDataElement.ValueLabel.text(_:), v22);
  v17 = swift_bridgeObjectRetain(v16);
  static TimeZone.current.getter(v17);
  v18 = Date.formattedHours(timeZone:forAccessibility:)(v4, 0);
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v24 + 8))(v4, v25);
  return DetailChartDataElement.init(date:value:secondValue:thirdValue:valueLabel:dateLabel:accessibilityDateString:accessibilityValueDescription:color:textColor:)(v12, 0, 1, v7, 0, 0xE000000000000000, v18, v20);
}

uint64_t sub_100217A08@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = a3;
  v22 = a2;
  v23 = type metadata accessor for TimeZone(0);
  v4 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DetailChartDataElement.ValueLabel(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  UVIndex.ExposureCategory.rangeValue.getter(v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v22, v11);
  *v10 = UVIndex.ExposureCategory.localizedString.getter(v15);
  v10[1] = v16;
  v17 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DetailChartDataElement.ValueLabel.text(_:), v7);
  static TimeZone.current.getter(v17);
  v18 = Date.formattedHours(timeZone:forAccessibility:)(v6, 0);
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v23);
  UVIndex.ExposureCategory.localizedString.getter(v15);
  return DetailChartDataElement.init(date:value:secondValue:thirdValue:valueLabel:dateLabel:accessibilityDateString:accessibilityValueDescription:color:textColor:)(v14, 0, 1, v10, 0, 0xE000000000000000, v18, v20);
}

_QWORD *sub_100217BD8()
{
  _QWORD *v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 2);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 7);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 12);
  swift_release(v0[18]);
  swift_release(v0[19]);
  swift_release(v0[20]);
  return v0;
}

uint64_t sub_100217C1C()
{
  uint64_t v0;

  sub_100217BD8();
  return swift_deallocClassInstance(v0, 168, 7);
}

uint64_t type metadata accessor for DetailChartViewModelFactory()
{
  return objc_opt_self(_TtC7Weather27DetailChartViewModelFactory);
}

_QWORD *sub_100217C5C(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for DetailChartCondition(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for ExtremaResult(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v11))
    {
      v12 = sub_1000BA294(&qword_100BCB720);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v11);
    }
    v14 = a3[7];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for ConditionUnits(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    v18 = a3[9];
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    *((_BYTE *)a1 + v18) = *((_BYTE *)a2 + v18);
    *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  }
  swift_retain();
  return a1;
}

double sub_100217DB0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v4 = type metadata accessor for DetailChartCondition(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[6];
  v6 = type metadata accessor for ExtremaResult(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[7];
  v8 = type metadata accessor for ConditionUnits(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + a2[10])).n128_u64[0];
  return result;
}

uint64_t sub_100217E5C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for DetailChartCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for ExtremaResult(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10))
  {
    v11 = sub_1000BA294(&qword_100BCB720);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
  }
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for ConditionUnits(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  swift_retain();
  return a1;
}

uint64_t sub_100217F88(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for DetailChartCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for ExtremaResult(0);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v10);
  v12 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10);
  if (!v11)
  {
    v13 = *(_QWORD *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 24))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v14 = sub_1000BA294(&qword_100BCB720);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
LABEL_7:
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for ConditionUnits(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v19 = a3[10];
  v20 = *(_QWORD *)(a1 + v19);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  swift_retain();
  swift_release(v20);
  return a1;
}

uint64_t sub_100218118(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for DetailChartCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for ExtremaResult(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10))
  {
    v11 = sub_1000BA294(&qword_100BCB720);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
  }
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for ConditionUnits(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v16 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_100218240(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for DetailChartCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for ExtremaResult(0);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v10);
  v12 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10);
  if (!v11)
  {
    v13 = *(_QWORD *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v14 = sub_1000BA294(&qword_100BCB720);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
LABEL_7:
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for ConditionUnits(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v19) = *(_BYTE *)(a2 + v19);
  v20 = a3[10];
  v21 = *(_QWORD *)(a1 + v20);
  *(_QWORD *)(a1 + v20) = *(_QWORD *)(a2 + v20);
  swift_release(v21);
  return a1;
}

uint64_t sub_1002183C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002183CC);
}

void sub_1002183CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  sub_1000E76B0();
  sub_100088FF0();
  if (v9)
  {
    v7 = v6;
    v8 = v4;
  }
  else
  {
    sub_1000BA294(&qword_100BCB720);
    sub_100088FF0();
    if (v9)
    {
      v7 = v10;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      sub_1000DC134();
      sub_100088FF0();
      if (!v12)
      {
        sub_100079F70();
        return;
      }
      v7 = v13;
      v11 = *(int *)(a3 + 28);
    }
    v8 = v4 + v11;
  }
  sub_1000B250C(v8, v3, v7);
}

uint64_t sub_100218468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100218474);
}

void sub_100218474(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  sub_1000E76B0();
  sub_10009D2E8();
  if (v10)
  {
    v8 = v7;
    v9 = v5;
  }
  else
  {
    sub_1000BA294(&qword_100BCB720);
    sub_10009D2E8();
    if (v10)
    {
      v8 = v11;
      v12 = a4[6];
    }
    else
    {
      sub_1000DC134();
      sub_10009D2E8();
      if (!v13)
      {
        *(_QWORD *)(v5 + a4[10]) = v4;
        sub_100079F70();
        return;
      }
      v8 = v14;
      v12 = a4[7];
    }
    v9 = v5 + v12;
  }
  sub_1000987C4(v9, v4, v4, v8);
}

uint64_t type metadata accessor for DetailChartViewModelFactory.PeakMarkerRequestContext(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100BCB780, (uint64_t)&nominal type descriptor for DetailChartViewModelFactory.PeakMarkerRequestContext);
}

void sub_100218514(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[7];

  v2 = type metadata accessor for DetailChartCondition(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = &unk_1009892F0;
    sub_1002185C8(319);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for ConditionUnits(319);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        v8[4] = &unk_1009892F0;
        v8[5] = &unk_1009892F0;
        v8[6] = &unk_100989308;
        swift_initStructMetadata(a1, 256, 7, v8, a1 + 16);
      }
    }
  }
}

void sub_1002185C8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BCB790)
  {
    v2 = type metadata accessor for ExtremaResult(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BCB790);
  }
}

_QWORD *sub_10021861C(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    v7 = type metadata accessor for DetailChartCondition(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    v9 = a3[7];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for ConditionUnits(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_1002186D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for DetailChartCondition(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 28);
  v6 = type metadata accessor for ConditionUnits(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_100218734(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for DetailChartCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for ConditionUnits(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t sub_1002187C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for DetailChartCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v7 = a3[7];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ConditionUnits(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_100218858(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for DetailChartCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for ConditionUnits(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

uint64_t sub_1002188E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for DetailChartCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for ConditionUnits(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_100218978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100218984);
}

void sub_100218984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  sub_1000E76B0();
  sub_100088FF0();
  if (v7)
  {
    v8 = v6;
    v9 = v4;
  }
  else
  {
    if ((_DWORD)v3 == 254)
    {
      sub_100079F70();
      return;
    }
    v8 = sub_1000DC134();
    v9 = v4 + *(int *)(a3 + 28);
  }
  sub_1000B250C(v9, v3, v8);
}

uint64_t sub_100218A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100218A10);
}

void sub_100218A10(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  sub_1000E76B0();
  sub_10009D2E8();
  if (v9)
  {
    v10 = v8;
    v11 = v5;
  }
  else
  {
    if (a3 == 254)
    {
      *(_BYTE *)(v5 + *(int *)(a4 + 24)) = v4 + 1;
      sub_100079F70();
      return;
    }
    v10 = sub_1000DC134();
    v11 = v5 + *(int *)(a4 + 28);
  }
  sub_1000987C4(v11, v4, v4, v10);
}

uint64_t type metadata accessor for DetailChartViewModelFactory.MarkerLabelCacheKey(uint64_t a1)
{
  return sub_100098190(a1, qword_100BCB830, (uint64_t)&nominal type descriptor for DetailChartViewModelFactory.MarkerLabelCacheKey);
}

uint64_t sub_100218A90(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  result = type metadata accessor for DetailChartCondition(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[2] = &unk_1009892F0;
    result = type metadata accessor for ConditionUnits(319);
    if (v4 <= 0x3F)
    {
      v5[3] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t *sub_100218B2C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_100218BD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for TimeZone(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_100218C30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t sub_100218CAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_100218D28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_100218DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_100218E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100218E2C);
}

uint64_t sub_100218E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  sub_100098A00();
  sub_100088FF0();
  if (v7)
  {
    v8 = v6;
    v9 = v4;
  }
  else
  {
    v8 = sub_100099928();
    v9 = v4 + *(int *)(a3 + 20);
  }
  return sub_1000B250C(v9, v3, v8);
}

uint64_t sub_100218E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100218E80);
}

uint64_t sub_100218E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  sub_100098A00();
  sub_10009D2E8();
  if (v8)
  {
    v9 = v7;
    v10 = v5;
  }
  else
  {
    v9 = sub_100099928();
    v10 = v5 + *(int *)(a4 + 20);
  }
  return sub_1000987C4(v10, v4, v4, v9);
}

uint64_t type metadata accessor for DetailChartViewModelFactory.FormattedHoursCacheKey(uint64_t a1)
{
  return sub_100098190(a1, qword_100BCB8C8, (uint64_t)&nominal type descriptor for DetailChartViewModelFactory.FormattedHoursCacheKey);
}

uint64_t sub_100218EE4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimeZone(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

void sub_100218F68()
{
  sub_10000F1C8(&qword_100BCB900, type metadata accessor for DetailChartViewModelFactory.FormattedHoursCacheKey);
}

void sub_100218F94()
{
  sub_10000F1C8(&qword_100BCB908, type metadata accessor for DetailChartViewModelFactory.MarkerLabelCacheKey);
}

void sub_100218FC0()
{
  sub_10000F1C8(&qword_100BCB910, type metadata accessor for DetailChartViewModelFactory.PeakMarkerRequestContext);
}

uint64_t sub_100218FEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1002130BC(a1, *(_QWORD **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(unsigned __int8 *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), a2, *(double *)(v2 + 40), *(double *)(v2 + 48), *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 104));
}

uint64_t sub_100219038(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConditionDetailChartDataInput(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100219080(uint64_t a1)
{
  uint64_t v1;

  return sub_100215DC0(a1, *(_QWORD *)(v1 + 16)) & 1;
}

void sub_10021909C(int64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(void);
  char *v19;
  Swift::Int v20;
  Swift::Int v21;
  uint64_t v22;
  char *v23;
  void (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  char *v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  Swift::Int v38;
  Swift::Int v39;
  char *v40;
  void (*v41)(void);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  Swift::Int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  Swift::Int v61;
  char *v62;
  uint64_t v63;
  Swift::Int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t (*v70)(char *, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  void (*v78)(char *, uint64_t);
  char *v79;
  uint64_t v80;
  char *v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  char *v84;
  char *v85;
  void (*v86)(char *, char *, uint64_t);
  void (*v87)(void);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  void (*v94)(void);
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  BOOL v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  BOOL v116;
  uint64_t v117;
  char v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  uint64_t *v136;
  uint64_t v137;
  char *v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  Swift::Int v152;
  uint64_t v153;
  Swift::Int v154;
  char *v155;
  char *v156;
  void (*v157)(void);
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  void (*v162)(char *, uint64_t);
  void (*v163)(char *, uint64_t, uint64_t, char *);
  char *v164;
  char *v165;
  char *v166;
  uint64_t v167;
  char *v168;
  _QWORD *v169;
  uint64_t v170;
  void (*v171)(void);
  char *v172;
  char *v173;
  Swift::Int v174;
  _QWORD *v175;

  v2 = v1;
  v167 = type metadata accessor for Date(0);
  v160 = *(_QWORD *)(v167 - 8);
  v4 = __chkstk_darwin(v167);
  v166 = (char *)&v148 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v165 = (char *)&v148 - v6;
  v170 = type metadata accessor for DetailChartDataElement(0);
  v175 = *(_QWORD **)(v170 - 8);
  v7 = __chkstk_darwin(v170);
  v156 = (char *)&v148 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v172 = (char *)&v148 - v10;
  v11 = __chkstk_darwin(v9);
  v164 = (char *)&v148 - v12;
  __chkstk_darwin(v11);
  v168 = (char *)&v148 - v13;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = _minimumMergeRunLength(_:)(v14);
  if (v15 >= v14)
  {
    if ((v14 & 0x8000000000000000) == 0)
    {
      if (v14)
        sub_100219B8C(0, v14, 1, (_QWORD *)a1);
      return;
    }
    goto LABEL_140;
  }
  v152 = v15;
  sub_10087B654(v14 / 2);
  v150 = v16;
  v158 = v17;
  v151 = v14;
  if (v14 <= 0)
  {
LABEL_103:
    v19 = (char *)_swiftEmptyArrayStorage;
    v91 = _swiftEmptyArrayStorage[2];
LABEL_104:
    if (v91 < 2)
    {
LABEL_115:
      swift_bridgeObjectRelease(v19);
      if (v151 >= -1)
        goto LABEL_116;
      goto LABEL_144;
    }
    v141 = *(_QWORD *)a1;
    while (1)
    {
      a1 = v91 - 2;
      if (v91 < 2)
        break;
      if (!v141)
        goto LABEL_148;
      v142 = v19;
      v143 = *(_QWORD *)&v19[16 * a1 + 32];
      v144 = *(_QWORD *)&v19[16 * v91 + 24];
      sub_100219E78(v141 + v175[9] * v143, v141 + v175[9] * *(_QWORD *)&v19[16 * v91 + 16], v141 + v175[9] * v144, v158);
      if (v2)
      {
        v140 = v142;
        goto LABEL_101;
      }
      if (v144 < v143)
        goto LABEL_135;
      if ((swift_isUniquelyReferenced_nonNull_native(v142) & 1) == 0)
        v142 = sub_10021A488();
      if ((unint64_t)a1 >= *((_QWORD *)v142 + 2))
        goto LABEL_136;
      v145 = &v142[16 * a1 + 32];
      *(_QWORD *)v145 = v143;
      *((_QWORD *)v145 + 1) = v144;
      v146 = *((_QWORD *)v142 + 2);
      if (v91 > v146)
        goto LABEL_137;
      memmove(&v142[16 * v91 + 16], &v142[16 * v91 + 32], 16 * (v146 - v91));
      v19 = v142;
      *((_QWORD *)v142 + 2) = v146 - 1;
      v91 = v146 - 1;
      if (v146 <= 2)
        goto LABEL_115;
    }
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
    return;
  }
  v18 = 0;
  v19 = (char *)_swiftEmptyArrayStorage;
  v169 = (_QWORD *)a1;
  while (1)
  {
    v20 = (Swift::Int)v18;
    v21 = (Swift::Int)v18 + 1;
    v155 = v19;
    v157 = v18;
    if ((uint64_t)v18 + 1 < v14)
    {
      v153 = *(_QWORD *)a1;
      v22 = v153;
      v173 = (char *)v175[9];
      v23 = v173;
      v174 = (Swift::Int)v18 + 1;
      v24 = (void (*)(void))v175[2];
      v25 = v170;
      v24();
      v26 = v22 + (_QWORD)v23 * v20;
      v27 = v164;
      v171 = v24;
      v28 = ((uint64_t (*)(char *, uint64_t, uint64_t))v24)(v164, v26, v25);
      v29 = v165;
      v30 = DetailChartDataElement.date.getter(v28);
      v31 = v166;
      DetailChartDataElement.date.getter(v30);
      LODWORD(v163) = static Date.< infix(_:_:)(v29, v31);
      v32 = *(void (**)(char *, uint64_t))(v160 + 8);
      v33 = v167;
      v32(v31, v167);
      v34 = v29;
      v20 = (Swift::Int)v157;
      v162 = v32;
      v32(v34, v33);
      v35 = v173;
      v36 = (void (*)(char *, uint64_t))v175[1];
      v36(v27, v25);
      v161 = (char *)v36;
      v36(v168, v25);
      v21 = v20 + 2;
      if (v20 + 2 < v14)
      {
        v149 = v2;
        v159 = (_QWORD)v35 * v174;
        v37 = v153;
        v154 = (_QWORD)v35 * v21;
        while (1)
        {
          v38 = v14;
          v39 = v21;
          v40 = v168;
          v42 = v170;
          v41 = v171;
          ((void (*)(char *, uint64_t, uint64_t))v171)(v168, v37 + v154, v170);
          v43 = v164;
          v44 = ((uint64_t (*)(char *, uint64_t, uint64_t))v41)(v164, v37 + v159, v42);
          v45 = v165;
          v46 = DetailChartDataElement.date.getter(v44);
          v47 = v166;
          DetailChartDataElement.date.getter(v46);
          LODWORD(v174) = static Date.< infix(_:_:)(v45, v47);
          v48 = v47;
          v49 = v167;
          v50 = v162;
          v162(v48, v167);
          v50(v45, v49);
          v51 = (void (*)(char *, uint64_t))v161;
          ((void (*)(char *, uint64_t))v161)(v43, v42);
          v51(v40, v42);
          if (((v163 ^ v174) & 1) != 0)
            break;
          v21 = v39 + 1;
          v35 = v173;
          v37 += (uint64_t)v173;
          v14 = v38;
          if (v21 >= v38)
          {
            v21 = v38;
            a1 = (int64_t)v169;
            v2 = v149;
            v20 = (Swift::Int)v157;
            goto LABEL_11;
          }
        }
        a1 = (int64_t)v169;
        v2 = v149;
        v21 = v39;
        v20 = (Swift::Int)v157;
        v14 = v38;
        v35 = v173;
      }
LABEL_11:
      v19 = v155;
      if ((v163 & 1) != 0)
      {
        if (v21 < v20)
          goto LABEL_141;
        if (v20 < v21)
        {
          v162 = (void (*)(char *, uint64_t))v14;
          v52 = 0;
          v53 = (_QWORD)v35 * (v21 - 1);
          v54 = v21 * (_QWORD)v35;
          v55 = v20 * (_QWORD)v35;
          v171 = (void (*)(void))v21;
          do
          {
            if (v20 != v21 + v52 - 1)
            {
              v56 = v153;
              if (!v153)
                goto LABEL_147;
              v57 = v2;
              v58 = v153 + v55;
              v174 = v153 + v53;
              v59 = v170;
              v163 = (void (*)(char *, uint64_t, uint64_t, char *))v175[4];
              v163(v156, v153 + v55, v170, v19);
              if (v55 < v53 || v58 >= v56 + v54)
              {
                swift_arrayInitWithTakeFrontToBack(v56 + v55, v174, 1, v59);
                v35 = v173;
              }
              else
              {
                v35 = v173;
                if (v55 != v53)
                  swift_arrayInitWithTakeBackToFront(v58, v174, 1, v59);
              }
              ((void (*)(Swift::Int, char *, uint64_t))v163)(v174, v156, v59);
              v19 = v155;
              v2 = v57;
              v21 = (Swift::Int)v171;
            }
            ++v20;
            --v52;
            v53 -= (uint64_t)v35;
            v54 -= (uint64_t)v35;
            v55 += (uint64_t)v35;
          }
          while (v20 < v21 + v52);
          a1 = (int64_t)v169;
          v20 = (Swift::Int)v157;
          v14 = (Swift::Int)v162;
        }
      }
    }
    if (v21 < v14)
    {
      if (__OFSUB__(v21, v20))
        goto LABEL_139;
      if (v21 - v20 < v152)
      {
        if (__OFADD__(v20, v152))
          goto LABEL_142;
        if (v20 + v152 >= v14)
          v61 = v14;
        else
          v61 = v20 + v152;
        if (v61 < v20)
          goto LABEL_143;
        if (v21 != v61)
        {
          v149 = v2;
          v62 = (char *)v175[9];
          v159 = v175[2];
          v63 = (_QWORD)v62 * (v21 - 1);
          v161 = v62;
          v64 = v21 * (_QWORD)v62;
          v65 = v170;
          v154 = v61;
          do
          {
            v66 = 0;
            v171 = (void (*)(void))v21;
            v162 = (void (*)(char *, uint64_t))v64;
            v163 = (void (*)(char *, uint64_t, uint64_t, char *))v63;
            while (1)
            {
              v67 = *(_QWORD *)a1;
              v173 = (char *)(v64 + v66);
              v174 = v20;
              v68 = (char *)(v64 + v66 + v67);
              v69 = v168;
              v70 = (uint64_t (*)(char *, uint64_t, uint64_t))v159;
              ((void (*)(char *, char *, uint64_t, char *))v159)(v168, v68, v65, v19);
              v71 = v63 + v66 + v67;
              v72 = (uint64_t *)a1;
              v73 = v164;
              v74 = v70(v164, v71, v65);
              v75 = v165;
              v76 = DetailChartDataElement.date.getter(v74);
              v77 = v166;
              DetailChartDataElement.date.getter(v76);
              LOBYTE(v67) = static Date.< infix(_:_:)(v75, v77);
              v78 = *(void (**)(char *, uint64_t))(v160 + 8);
              v79 = v77;
              v80 = v167;
              v78(v79, v167);
              v81 = v75;
              v65 = v170;
              v78(v81, v80);
              v82 = (void (*)(char *, uint64_t))v175[1];
              v82(v73, v65);
              v82(v69, v65);
              if ((v67 & 1) == 0)
                break;
              v83 = *v72;
              if (!*v72)
                goto LABEL_145;
              v64 = (Swift::Int)v162;
              v63 = (uint64_t)v163;
              v84 = (char *)v162 + v83 + v66;
              v85 = (char *)v163 + v83 + v66;
              v86 = (void (*)(char *, char *, uint64_t))v175[4];
              v86(v172, v84, v65);
              swift_arrayInitWithTakeFrontToBack(v84, v85, 1, v65);
              v86(v85, v172, v65);
              v66 -= (uint64_t)v161;
              v20 = v174 + 1;
              v87 = v171;
              a1 = (int64_t)v169;
              if (v171 == (void (*)(void))(v174 + 1))
                goto LABEL_44;
            }
            v87 = v171;
            a1 = (int64_t)v72;
            v64 = (Swift::Int)v162;
            v63 = (uint64_t)v163;
LABEL_44:
            v21 = (Swift::Int)v87 + 1;
            v63 += (uint64_t)v161;
            v64 += (Swift::Int)v161;
            v20 = (Swift::Int)v157;
          }
          while (v21 != v154);
          v21 = v154;
          v2 = v149;
          v19 = v155;
        }
      }
    }
    if (v21 < v20)
      goto LABEL_138;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
    v171 = (void (*)(void))v21;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      v19 = v155;
    else
      v19 = sub_10021A398(0, *((_QWORD *)v155 + 2) + 1, 1, v155);
    v90 = *((_QWORD *)v19 + 2);
    v89 = *((_QWORD *)v19 + 3);
    v91 = v90 + 1;
    if (v90 >= v89 >> 1)
      v19 = sub_10021A398((char *)(v89 > 1), v90 + 1, 1, v19);
    *((_QWORD *)v19 + 2) = v91;
    v92 = v19 + 32;
    v93 = &v19[16 * v90 + 32];
    v94 = v171;
    *(_QWORD *)v93 = v20;
    *((_QWORD *)v93 + 1) = v94;
    if (v90)
      break;
    v91 = 1;
LABEL_94:
    a1 = (int64_t)v169;
    v14 = v169[1];
    v18 = v171;
    if ((uint64_t)v171 >= v14)
      goto LABEL_104;
  }
  while (1)
  {
    v95 = v91 - 1;
    if (v91 >= 4)
    {
      v100 = &v92[16 * v91];
      v101 = *((_QWORD *)v100 - 8);
      v102 = *((_QWORD *)v100 - 7);
      v106 = __OFSUB__(v102, v101);
      v103 = v102 - v101;
      if (v106)
        goto LABEL_123;
      v105 = *((_QWORD *)v100 - 6);
      v104 = *((_QWORD *)v100 - 5);
      v106 = __OFSUB__(v104, v105);
      v98 = v104 - v105;
      v99 = v106;
      if (v106)
        goto LABEL_124;
      v107 = v91 - 2;
      v108 = &v92[16 * v91 - 32];
      v110 = *(_QWORD *)v108;
      v109 = *((_QWORD *)v108 + 1);
      v106 = __OFSUB__(v109, v110);
      v111 = v109 - v110;
      if (v106)
        goto LABEL_125;
      v106 = __OFADD__(v98, v111);
      v112 = v98 + v111;
      if (v106)
        goto LABEL_127;
      if (v112 >= v103)
      {
        v130 = &v92[16 * v95];
        v132 = *(_QWORD *)v130;
        v131 = *((_QWORD *)v130 + 1);
        v106 = __OFSUB__(v131, v132);
        v133 = v131 - v132;
        if (v106)
          goto LABEL_133;
        v123 = v98 < v133;
        goto LABEL_83;
      }
    }
    else
    {
      if (v91 != 3)
      {
        v124 = *((_QWORD *)v19 + 4);
        v125 = *((_QWORD *)v19 + 5);
        v106 = __OFSUB__(v125, v124);
        v117 = v125 - v124;
        v118 = v106;
        goto LABEL_77;
      }
      v97 = *((_QWORD *)v19 + 4);
      v96 = *((_QWORD *)v19 + 5);
      v106 = __OFSUB__(v96, v97);
      v98 = v96 - v97;
      v99 = v106;
    }
    if ((v99 & 1) != 0)
      goto LABEL_126;
    v107 = v91 - 2;
    v113 = &v92[16 * v91 - 32];
    v115 = *(_QWORD *)v113;
    v114 = *((_QWORD *)v113 + 1);
    v116 = __OFSUB__(v114, v115);
    v117 = v114 - v115;
    v118 = v116;
    if (v116)
      goto LABEL_128;
    v119 = &v92[16 * v95];
    v121 = *(_QWORD *)v119;
    v120 = *((_QWORD *)v119 + 1);
    v106 = __OFSUB__(v120, v121);
    v122 = v120 - v121;
    if (v106)
      goto LABEL_130;
    if (__OFADD__(v117, v122))
      goto LABEL_132;
    if (v117 + v122 >= v98)
    {
      v123 = v98 < v122;
LABEL_83:
      if (v123)
        v95 = v107;
      goto LABEL_85;
    }
LABEL_77:
    if ((v118 & 1) != 0)
      goto LABEL_129;
    v126 = &v92[16 * v95];
    v128 = *(_QWORD *)v126;
    v127 = *((_QWORD *)v126 + 1);
    v106 = __OFSUB__(v127, v128);
    v129 = v127 - v128;
    if (v106)
      goto LABEL_131;
    if (v129 < v117)
      goto LABEL_94;
LABEL_85:
    v134 = v95 - 1;
    if (v95 - 1 >= v91)
    {
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    if (!*v169)
      goto LABEL_146;
    v135 = v19;
    v136 = (uint64_t *)&v92[16 * v134];
    v137 = *v136;
    v138 = &v92[16 * v95];
    a1 = *((_QWORD *)v138 + 1);
    sub_100219E78(*v169 + v175[9] * *v136, *v169 + v175[9] * *(_QWORD *)v138, *v169 + v175[9] * a1, v158);
    if (v2)
      break;
    if (a1 < v137)
      goto LABEL_120;
    if (v95 > *((_QWORD *)v135 + 2))
      goto LABEL_121;
    *v136 = v137;
    *(_QWORD *)&v92[16 * v134 + 8] = a1;
    v139 = *((_QWORD *)v135 + 2);
    if (v95 >= v139)
      goto LABEL_122;
    v91 = v139 - 1;
    memmove(&v92[16 * v95], v138 + 16, 16 * (v139 - 1 - v95));
    v19 = v135;
    *((_QWORD *)v135 + 2) = v139 - 1;
    if (v139 <= 2)
      goto LABEL_94;
  }
  v140 = v135;
LABEL_101:
  swift_bridgeObjectRelease(v140);
  if (v151 < -1)
  {
    __break(1u);
    goto LABEL_103;
  }
LABEL_116:
  v147 = v150;
  *(_QWORD *)(v150 + 16) = 0;
  swift_bridgeObjectRelease(v147);
}

uint64_t sub_100219B8C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;

  v46 = a1;
  v7 = type metadata accessor for Date(0);
  v53 = *(_QWORD *)(v7 - 8);
  v54 = v7;
  v8 = __chkstk_darwin(v7);
  v52 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v51 = (char *)&v44 - v10;
  v11 = type metadata accessor for DetailChartDataElement(0);
  v61 = *(_QWORD **)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v59 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v50 = (char *)&v44 - v15;
  result = __chkstk_darwin(v14);
  v49 = (char *)&v44 - v17;
  v58 = a3;
  v45 = a2;
  if (a3 != a2)
  {
    v18 = v61[9];
    v47 = (uint64_t (*)(char *, uint64_t, uint64_t))v61[2];
    v48 = v11;
    v19 = v18 * (v58 - 1);
    v55 = v18;
    v20 = v18 * v58;
    while (2)
    {
      v21 = 0;
      v62 = v46;
      v56 = v20;
      v57 = v19;
      do
      {
        v22 = *a4;
        v60 = v20 + v21;
        v23 = v20 + v21 + v22;
        v24 = v49;
        v25 = v47;
        v47(v49, v23, v11);
        v26 = v19 + v21 + v22;
        v27 = v50;
        v28 = v25(v50, v26, v11);
        v29 = v51;
        v30 = DetailChartDataElement.date.getter(v28);
        v31 = a4;
        v32 = v52;
        DetailChartDataElement.date.getter(v30);
        LOBYTE(v22) = static Date.< infix(_:_:)(v29, v32);
        v33 = *(void (**)(char *, uint64_t))(v53 + 8);
        v34 = v32;
        v35 = v54;
        v33(v34, v54);
        v36 = v35;
        a4 = v31;
        v11 = v48;
        v33(v29, v36);
        v37 = (void (*)(char *, uint64_t))v61[1];
        v38 = v27;
        v19 = v57;
        v37(v38, v11);
        v39 = v24;
        v20 = v56;
        result = ((uint64_t (*)(char *, uint64_t))v37)(v39, v11);
        if ((v22 & 1) == 0)
          break;
        v40 = *a4;
        if (!*a4)
        {
          __break(1u);
          return result;
        }
        v41 = v40 + v20 + v21;
        v42 = v40 + v19 + v21;
        v43 = (void (*)(char *, uint64_t, uint64_t))v61[4];
        v43(v59, v41, v11);
        swift_arrayInitWithTakeFrontToBack(v41, v42, 1, v11);
        result = ((uint64_t (*)(uint64_t, char *, uint64_t))v43)(v42, v59, v11);
        v21 -= v55;
        ++v62;
      }
      while (v58 != v62);
      v19 += v55;
      v20 += v55;
      if (++v58 != v45)
        continue;
      break;
    }
  }
  return result;
}

void sub_100219E78(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v19;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  char *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  unint64_t v38;
  uint64_t (*v43)(char *);
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t (*v48)(char *);
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  void (*v56)(char *, uint64_t);
  char *v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  unint64_t v61;
  unint64_t v62;
  BOOL v63;
  unint64_t v64;
  char *v66;
  uint64_t v68;
  unint64_t v69;
  uint64_t (*v70)(char *);
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;

  v81 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v81 - 8);
  v9 = __chkstk_darwin(v81);
  v80 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v79 = (char *)&v68 - v11;
  v85 = type metadata accessor for DetailChartDataElement(0);
  v12 = __chkstk_darwin(v85);
  v78 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v77 = (char *)&v68 - v14;
  v82 = v15;
  v16 = *(_QWORD *)(v15 + 72);
  if (!v16)
  {
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  v17 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v16 == -1)
    goto LABEL_75;
  v19 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v16 == -1)
    goto LABEL_76;
  v84 = a3;
  v21 = v17 / v16;
  v22 = v19 / v16;
  v76 = v16;
  if (v17 / v16 >= v19 / v16)
  {
    sub_100600308(a2, v19 / v16);
    v23 = (char *)(a4 + v22 * v16);
    if (v22 * v16 < 1 || a1 >= a2)
      goto LABEL_69;
    v71 = -v16;
    v43 = *(uint64_t (**)(char *))(v82 + 16);
    v69 = a4;
    v70 = v43;
    v44 = (char *)v84;
    v75 = v8;
    v83 = a1;
    v45 = v85;
    while (1)
    {
      v46 = v44;
      v48 = v70;
      v47 = v71;
      v74 = v46;
      v84 = (unint64_t)&v46[v71];
      v49 = v77;
      v73 = (unint64_t)&v23[v71];
      v70(v77);
      v50 = v78;
      v72 = a2 + v47;
      v51 = v48(v78);
      v52 = v79;
      v53 = DetailChartDataElement.date.getter(v51);
      v54 = (char *)a2;
      v55 = v80;
      DetailChartDataElement.date.getter(v53);
      LOBYTE(v47) = static Date.< infix(_:_:)(v52, v55);
      v56 = *(void (**)(char *, uint64_t))(v8 + 8);
      v57 = v55;
      v58 = v81;
      v56(v57, v81);
      v56(v52, v58);
      v59 = *(void (**)(char *, uint64_t))(v82 + 8);
      v59(v50, v45);
      v59(v49, v45);
      if ((v47 & 1) != 0)
        break;
      v44 = (char *)v84;
      v63 = v74 < v23 || v84 >= (unint64_t)v23;
      a2 = (unint64_t)v54;
      if (v63)
      {
        v61 = v84;
        v23 = (char *)v73;
        v62 = v73;
LABEL_58:
        swift_arrayInitWithTakeFrontToBack(v61, v62, 1, v85);
        a4 = v69;
        v8 = v75;
        v16 = v76;
        v64 = v83;
        goto LABEL_65;
      }
      a4 = v69;
      v8 = v75;
      v16 = v76;
      v64 = v83;
      if (v74 == v23)
      {
        v23 = (char *)v73;
      }
      else
      {
        v23 = (char *)v73;
        swift_arrayInitWithTakeBackToFront(v84, v73, 1, v85);
      }
LABEL_65:
      if ((unint64_t)v23 <= a4 || a2 <= v64)
        goto LABEL_69;
    }
    v44 = (char *)v84;
    if (v74 >= v54 && v84 < (unint64_t)v54)
    {
      v8 = v75;
      v16 = v76;
      v64 = v83;
      a2 = v72;
      if (v74 != v54)
        swift_arrayInitWithTakeBackToFront(v84, v72, 1, v85);
      a4 = v69;
      goto LABEL_65;
    }
    v61 = v84;
    a2 = v72;
    v62 = v72;
    goto LABEL_58;
  }
  sub_100600308(a1, v17 / v16);
  v23 = (char *)(a4 + v21 * v16);
  if (v21 * v16 >= 1 && a2 < v84)
  {
    v74 = *(char **)(v82 + 16);
    v75 = v8;
    v73 = a4 + v21 * v16;
    v25 = v85;
    v26 = v78;
    do
    {
      v83 = a1;
      v27 = v77;
      v28 = v74;
      ((void (*)(char *, unint64_t, uint64_t))v74)(v77, a2, v25);
      v29 = ((uint64_t (*)(char *, unint64_t, uint64_t))v28)(v26, a4, v25);
      v30 = a2;
      v31 = v79;
      v32 = DetailChartDataElement.date.getter(v29);
      v33 = v80;
      DetailChartDataElement.date.getter(v32);
      LOBYTE(v28) = static Date.< infix(_:_:)(v31, v33);
      v34 = *(void (**)(char *, uint64_t))(v75 + 8);
      v35 = v33;
      v36 = v81;
      v34(v35, v81);
      v34(v31, v36);
      v37 = *(void (**)(char *, uint64_t))(v82 + 8);
      v37(v26, v25);
      v37(v27, v25);
      if ((v28 & 1) != 0)
      {
        v16 = v76;
        a2 = v30 + v76;
        v38 = v83;
        if (v83 < v30 || v83 >= a2)
        {
          swift_arrayInitWithTakeFrontToBack(v83, v30, 1, v85);
        }
        else if (v83 != v30)
        {
          swift_arrayInitWithTakeBackToFront(v83, v30, 1, v85);
        }
      }
      else
      {
        v16 = v76;
        v38 = v83;
        if (v83 < a4 || v83 >= a4 + v76)
        {
          swift_arrayInitWithTakeFrontToBack(v83, a4, 1, v85);
        }
        else if (v83 != a4)
        {
          swift_arrayInitWithTakeBackToFront(v83, a4, 1, v85);
        }
        a2 = v30;
        a4 += v16;
      }
      v23 = (char *)v73;
      a1 = v38 + v16;
    }
    while (a4 < v73 && a2 < v84);
  }
LABEL_69:
  v66 = &v23[-a4];
  if (v16 != -1 || v66 != (char *)0x8000000000000000)
  {
    sub_100600308(a4, (uint64_t)v66 / v16);
    return;
  }
LABEL_77:
  __break(1u);
}

char *sub_10021A398(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000BA294(&qword_100BCB9E8);
    v11 = (char *)sub_100098740(v10, 16 * v9 + 32);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || &v14[16 * v8] <= v13)
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_10021A488()
{
  char *v0;
  int64_t v1;
  char v2;
  char *v3;

  v0 = (char *)sub_1000BBD10();
  return sub_10021A398(v0, v1, v2, v3);
}

uint64_t sub_10021A49C(double a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(sub_10021A710() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000DC134() - 8) + 80);
  return sub_100215EE4(v1 + v4, v1 + ((v4 + v5 + v6) & ~v6), a1);
}

unint64_t sub_10021A50C()
{
  unint64_t result;

  result = qword_100BCB9A0;
  if (!qword_100BCB9A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UVIndex.ExposureCategory, &type metadata for UVIndex.ExposureCategory);
    atomic_store(result, (unint64_t *)&qword_100BCB9A0);
  }
  return result;
}

void sub_10021A560()
{
  sub_1000BBD10();
  sub_100606478();
}

void sub_10021A570()
{
  sub_1000BBD10();
  sub_10060657C();
}

void sub_10021A580()
{
  sub_1000BBD10();
  sub_100606598();
}

void sub_10021A590()
{
  sub_1000BBD10();
  sub_1006065B4();
}

void sub_10021A5A0()
{
  sub_1000BBD10();
  sub_10060689C();
}

void sub_10021A5B0()
{
  sub_1000BBD10();
  sub_1006068B8();
}

void sub_10021A5C0()
{
  sub_1000BBD10();
  sub_1006068D4();
}

void sub_10021A5D0()
{
  sub_1000BBD10();
  sub_100606994();
}

void sub_10021A5E0()
{
  sub_1000BBD10();
  sub_1006069B0();
}

void sub_10021A5F0()
{
  sub_1000BBD10();
  sub_1006069CC();
}

void sub_10021A600()
{
  sub_1000BBD10();
  sub_1006069E8();
}

void sub_10021A610()
{
  sub_1000BBD10();
  sub_100606A04();
}

void sub_10021A620()
{
  sub_1000BBD10();
  sub_100606880();
}

void sub_10021A630()
{
  sub_1000BBD10();
  sub_100606AC0();
}

uint64_t sub_10021A640(int64_t a1, int64_t a2, uint64_t a3)
{
  uint64_t result;
  BOOL v5;
  BOOL v6;

  result = 0;
  while (1)
  {
    v5 = a1 <= a2;
    if (a3 > 0)
      v5 = a1 >= a2;
    if (v5)
      break;
    v6 = __OFADD__(a1, a3);
    a1 += a3;
    if (v6)
      a1 = (a1 >> 63) ^ 0x8000000000000000;
    v6 = __OFADD__(result++, 1);
    if (v6)
    {
      __break(1u);
      return result;
    }
  }
  return result;
}

uint64_t sub_10021A684@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100217A08(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_10021A6A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100217844(*(_QWORD *)(v1 + 16), a1);
}

void sub_10021A6BC(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  v2 = sub_1000BE9A8(a1, a2);
  sub_1000C51C8(*(_QWORD *)(v2 - 8));
  sub_10004A298();
}

uint64_t sub_10021A6E8(uint64_t a1, double a2)
{
  double v2;

  return Double.nearestMultiple(of:roundingRule:)(a1, a2, v2);
}

uint64_t sub_10021A6F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, a2, v3);
}

uint64_t sub_10021A700()
{
  uint64_t v0;

  return ChartAreaStyle.init(gradient:opacity:)(v0);
}

uint64_t sub_10021A710()
{
  return type metadata accessor for ConditionDetailChartDataInput(0);
}

uint64_t sub_10021A728(uint64_t a1)
{
  uint64_t v1;

  return Measurement<>.converted(to:)(a1, v1);
}

uint64_t sub_10021A740(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, v1, v3);
}

uint64_t sub_10021A74C()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_10021A758@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 + 1400));
}

uint64_t sub_10021A76C()
{
  return DetailChartCondition.title.getter();
}

uint64_t sub_10021A780(uint64_t result, double a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = result;
  *(double *)(v2 + 40) = a2;
  return result;
}

double sub_10021A798()
{
  void *v0;
  double result;

  return result;
}

id sub_10021A7A4()
{
  uint64_t v0;
  void *v1;

  return objc_msgSend(v1, *(SEL *)(v0 + 1936));
}

unint64_t sub_10021A7B0()
{
  return 0xD000000000000026;
}

unint64_t sub_10021A7C4()
{
  return 0xD00000000000002DLL;
}

uint64_t sub_10021A7D8(uint64_t a1)
{
  uint64_t v1;

  return Date.wc_addMinutes(_:calendar:)(a1, v1);
}

uint64_t sub_10021A7E4()
{
  return DetailChartCondition.title.getter();
}

void sub_10021A7EC()
{
  sub_1005FECEC();
}

uint64_t sub_10021A7F8()
{
  uint64_t v0;

  return Measurement.value.getter(v0);
}

uint64_t sub_10021A804(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_100219038(v2, a1 + v1);
}

uint64_t sub_10021A810(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return Calendar.isDate(_:equalTo:toGranularity:)(a1, a2, v2);
}

uint64_t sub_10021A81C()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_10021A828()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

void sub_10021A834(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_10000AB54(a1, *(_QWORD *)(v3 + 1032), a3);
}

void sub_10021A840(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)(v2 + 1088) = a2;

}

uint64_t sub_10021A848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSBundle a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;

  v8 = 0xE800000000000000;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&a1, *(Swift::String_optional *)&a3, a5, *(Swift::String *)&a6, *(Swift::String *)&a8)._countAndFlagsBits;
}

void View.withWeatherAnimation(reason:animation:enabled:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  if ((a3 & 1) != 0)
  {
    v7 = a1;
    v17 = 0;
    swift_retain();
    Transaction.animation.setter(v8);
    Transaction.animationFrameInterval.setter(0, 1);
    v9 = sub_10015BE34(v7);
    if ((_DWORD)v9)
    {
      v10 = v9;
      Transaction.animationFrameInterval.setter(0x3F81111111111111, 0);
      v16 = 0;
      v9 = Transaction.animationReason.setter(v10);
    }
    v11 = v17;
    __chkstk_darwin(v9);
    v14 = a4;
    v15 = a5;
    swift_retain();
    withTransaction<A>(_:_:)(v12, sub_100152744, v13, &type metadata for () + 1);
    swift_release(v11);
    swift_release(v11);
  }
  else
  {
    __chkstk_darwin(a1);
    v14 = a4;
    v15 = a5;
    withTransaction<A>(_:_:)(0, sub_100152654, v13, &type metadata for () + 1);
  }
}

uint64_t sub_10021A998(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10021A9C0(uint64_t (*a1)(void))
{
  return sub_10021A998(a1);
}

void sub_10021A9D4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, _QWORD, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v94 = a4;
  v95 = a2;
  v6 = type metadata accessor for Calendar.SearchDirection(0);
  v81 = *(_QWORD *)(v6 - 8);
  v82 = v6;
  sub_10009D98C();
  __chkstk_darwin(v7);
  sub_100088FDC();
  v80 = v8;
  v79 = type metadata accessor for Calendar.RepeatedTimePolicy(0);
  v91 = *(_QWORD *)(v79 - 8);
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_100088FDC();
  v77 = v10;
  v11 = type metadata accessor for Calendar.MatchingPolicy(0);
  v89 = *(_QWORD *)(v11 - 8);
  v90 = v11;
  sub_10009D98C();
  __chkstk_darwin(v12);
  sub_100088FDC();
  v76 = v13;
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_10009D98C();
  __chkstk_darwin(v14);
  sub_1000986FC();
  v78 = v15;
  sub_10009D2A4();
  __chkstk_darwin(v16);
  sub_1000860D0();
  v86 = v17;
  sub_10009D2A4();
  __chkstk_darwin(v18);
  v20 = (char *)&v74 - v19;
  __chkstk_darwin(v21);
  v23 = (char *)&v74 - v22;
  __chkstk_darwin(v24);
  v26 = (char *)&v74 - v25;
  v27 = type metadata accessor for Date(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  sub_1000986FC();
  v75 = v29;
  sub_10009D2A4();
  __chkstk_darwin(v30);
  sub_1000860D0();
  v88 = v31;
  sub_10009D2A4();
  __chkstk_darwin(v32);
  sub_1000860D0();
  v83 = v33;
  sub_10009D2A4();
  __chkstk_darwin(v34);
  sub_1000860D0();
  v84 = v35;
  sub_10009D2A4();
  __chkstk_darwin(v36);
  sub_1000860D0();
  v85 = v37;
  sub_10009D2A4();
  __chkstk_darwin(v38);
  v40 = (char *)&v74 - v39;
  __chkstk_darwin(v41);
  v43 = (char *)&v74 - v42;
  __chkstk_darwin(v44);
  v46 = (char *)&v74 - v45;
  v47 = type metadata accessor for Calendar(0);
  v92 = *(_QWORD *)(v47 - 8);
  v93 = v47;
  sub_10009D98C();
  __chkstk_darwin(v48);
  sub_100088FDC();
  v96 = v49;
  v87 = a3;
  static Calendar.currentCalendar(with:)(a3);
  sub_10007C714(a1, (uint64_t)v26);
  sub_1000BA594((uint64_t)v26);
  if (v54)
  {
    v23 = v26;
    v50 = v28;
    v51 = v95;
  }
  else
  {
    v52 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
    v52(v46, v26, v27);
    v53 = v95;
    sub_10007C714(v95, (uint64_t)v23);
    sub_1000BA594((uint64_t)v23);
    if (!v54)
    {
      v52(v43, v23, v27);
      v69 = v96;
      v70 = Date.secondsSinceMidnight(calendar:)(v96);
      if (!__OFSUB__(v70, Date.secondsSinceMidnight(calendar:)(v69)))
      {
        sub_1000DD7D8();
        sub_1000DB774();
LABEL_20:
        (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v69, v93);
        goto LABEL_21;
      }
      goto LABEL_23;
    }
    v51 = v53;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v46, v27);
    v50 = v28;
  }
  sub_1001C8EF4((uint64_t)v23);
  sub_10007C714(a1, (uint64_t)v20);
  sub_1000BA594((uint64_t)v20);
  if (!v54)
  {
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v40, v20, v27);
    v64 = v85;
    Date.startOfDay(timeZone:)(v87);
    v65 = v84;
    v66 = v96;
    Date.wc_addDays(_:calendar:)(1, v96);
    v67 = v83;
    Date.wc_addSeconds(_:calendar:)(-1, v66);
    v68 = Date.secondsSinceMidnight(calendar:)(v66);
    if (__OFSUB__(v68, Date.secondsSinceMidnight(calendar:)(v66)))
    {
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    sub_1000BA58C(v67);
    sub_1000BA58C(v65);
    sub_1000BA58C(v64);
    sub_1000BA58C((uint64_t)v40);
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v66, v93);
LABEL_21:
    sub_10009990C();
    return;
  }
  sub_1001C8EF4((uint64_t)v20);
  v55 = v86;
  sub_10007C714(v51, v86);
  sub_1000BA594(v55);
  v69 = v96;
  if (v54)
  {
LABEL_13:
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v69, v93);
    sub_1001C8EF4(v55);
    goto LABEL_21;
  }
  v56 = v88;
  v87 = *(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32);
  v87(v88, v55, v27);
  v57 = *(void (**)(uint64_t, _QWORD, uint64_t))(v89 + 104);
  v95 = v50;
  v58 = v76;
  v57(v76, enum case for Calendar.MatchingPolicy.nextTime(_:), v90);
  v59 = v77;
  v60 = v79;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v91 + 104))(v77, enum case for Calendar.RepeatedTimePolicy.first(_:), v79);
  v62 = v80;
  v61 = v81;
  v63 = v82;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v81 + 104))(v80, enum case for Calendar.SearchDirection.forward(_:), v82);
  v55 = v78;
  Calendar.date(bySettingHour:minute:second:of:matchingPolicy:repeatedTimePolicy:direction:)(0, 0, 0, v56, v58, v59, v62);
  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v62, v63);
  (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v59, v60);
  (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v58, v90);
  sub_1000BA594(v55);
  if (v54)
  {
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v88, v27);
    goto LABEL_13;
  }
  v71 = v75;
  v87(v75, v55, v27);
  v72 = v88;
  v73 = Date.secondsSinceMidnight(calendar:)(v69);
  if (!__OFSUB__(v73, Date.secondsSinceMidnight(calendar:)(v69)))
  {
    sub_1000BA58C(v71);
    sub_1000BA58C(v72);
    goto LABEL_20;
  }
LABEL_24:
  __break(1u);
}

void sub_10021B060(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_10009D98C();
  __chkstk_darwin(v4);
  sub_100098728();
  v7 = v6 - v5;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_100098728();
  v12 = v11 - v10;
  v13 = type metadata accessor for Calendar(0);
  __chkstk_darwin(v13);
  sub_100098728();
  v16 = v15 - v14;
  static Calendar.currentCalendar(with:)(a2);
  sub_10007C714(a1, v7);
  if (_s7Weather24LocationCompositionStateOwet_0(v7, 1, v8) == 1)
  {
    sub_1000CC8B8();
    sub_1001C8EF4(v7);
LABEL_5:
    sub_10009990C();
    return;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v12, v7, v8);
  v17 = Date.secondsSinceMidnight(calendar:)(v16);
  if (!__OFSUB__(v17, Date.secondsSinceMidnight(calendar:)(v16)))
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
    sub_1000CC8B8();
    goto LABEL_5;
  }
  __break(1u);
}

uint64_t type metadata accessor for SunriseSunsetProportionCalculator()
{
  return objc_opt_self(_TtC7Weather33SunriseSunsetProportionCalculator);
}

double destroy for SevereMessageEvent(_QWORD *a1)
{
  double result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1[4]).n128_u64[0];
  return result;
}

_QWORD *initializeWithCopy for SevereMessageEvent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for SevereMessageEvent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

_QWORD *assignWithTake for SevereMessageEvent(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  v6 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SevereMessageEvent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SevereMessageEvent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SevereMessageEvent()
{
  return &type metadata for SevereMessageEvent;
}

void sub_10021B3E4(uint64_t a1)
{
  _QWORD *v1;

  swift_bridgeObjectRetain(v1[1]);
  sub_1000BA5B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(v1[3]);
  sub_1000BA5B0();
  swift_bridgeObjectRelease();
  sub_10054A300(a1, v1[4]);
}

uint64_t sub_10021B440(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  v4 = *a1;
  v5 = a1[1];
  v6 = v4 == *a2 && v5 == a2[1];
  if ((v6 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2) & 1) != 0)
    && ((v7 = a1[2], v8 = a1[3], v9 = a2[2], v7 == v9) ? (v10 = v8 == a2[3]) : (v10 = 0),
        v10 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v9) & 1) != 0))
  {
    return sub_100946DB8(a1[4], a2[4]);
  }
  else
  {
    return 0;
  }
}

Swift::Int sub_10021B4BC()
{
  _QWORD *v0;
  double v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  *(_QWORD *)&v1 = swift_bridgeObjectRetain(v0[1]).n128_u64[0];
  sub_1000BBD38(v2, v1);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v3 = swift_bridgeObjectRetain(v0[3]).n128_u64[0];
  sub_1000BBD38(v4, v3);
  swift_bridgeObjectRelease();
  sub_10054A300((uint64_t)v6, v0[4]);
  return Hasher._finalize()();
}

Swift::Int sub_10021B53C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  Hasher.init(_seed:)(v7);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v7, v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease();
  sub_10054A300((uint64_t)v7, v5);
  return Hasher._finalize()();
}

unint64_t sub_10021B5DC()
{
  unint64_t result;

  result = qword_100BCBAD0;
  if (!qword_100BCBAD0)
  {
    result = swift_getWitnessTable(&unk_100989524, &type metadata for SevereMessageEvent);
    atomic_store(result, (unint64_t *)&qword_100BCBAD0);
  }
  return result;
}

uint64_t sub_10021B618()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC7Weather34LocalPresetLocationsViewController_editedWeatherDataState);
  swift_beginAccess(v0 + OBJC_IVAR____TtC7Weather34LocalPresetLocationsViewController_editedWeatherDataState, v5, 0, 0);
  v2 = *v1;
  v3 = v1[3];
  sub_1000860DC();
  sub_1000878DC();
  swift_bridgeObjectRetain(v3);
  return v2;
}

double sub_10021B688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  _BYTE v11[24];

  v9 = (_QWORD *)(v4 + OBJC_IVAR____TtC7Weather34LocalPresetLocationsViewController_editedWeatherDataState);
  swift_beginAccess(v9, v11, 1, 0);
  *v9 = a1;
  v9[1] = a2;
  v9[2] = a3;
  v9[3] = a4;
  sub_1000878DC();
  sub_1000860DC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_10009934C();
}

id sub_10021B728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  double v12;
  id v13;
  objc_super v15;

  v5 = &v3[OBJC_IVAR____TtC7Weather34LocalPresetLocationsViewController_presetName];
  *(_QWORD *)v5 = a1;
  *((_QWORD *)v5 + 1) = a2;
  sub_100084050(a3, (uint64_t)&v3[OBJC_IVAR____TtC7Weather34LocalPresetLocationsViewController_appState], type metadata accessor for PresetAppState);
  v6 = (uint64_t *)(a3 + *(int *)(sub_1000C44B8() + 24));
  v7 = *v6;
  v8 = v6[1];
  v9 = v6[2];
  v10 = v6[3];
  v11 = &v3[OBJC_IVAR____TtC7Weather34LocalPresetLocationsViewController_editedWeatherDataState];
  *(_QWORD *)v11 = v7;
  *((_QWORD *)v11 + 1) = v8;
  *((_QWORD *)v11 + 2) = v9;
  *((_QWORD *)v11 + 3) = v10;
  v15.receiver = v3;
  v15.super_class = (Class)sub_1000D8E14();
  sub_1000878DC();
  sub_100099360();
  *(_QWORD *)&v12 = swift_bridgeObjectRetain(v10).n128_u64[0];
  v13 = objc_msgSendSuper2(&v15, "initWithStyle:", 2, v12);
  sub_1000979AC(a3, type metadata accessor for PresetAppState);
  return v13;
}

double sub_10021B7F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0 + OBJC_IVAR____TtC7Weather34LocalPresetLocationsViewController_appState;
  v2 = (uint64_t *)(v1 + *(int *)(sub_1000C44B8() + 24));
  v3 = *v2;
  v4 = v2[1];
  v5 = v2[2];
  v6 = v2[3];
  sub_1000860DC();
  sub_1000878DC();
  sub_100099360();
  return sub_10021B688(v3, v4, v5, v6);
}

void sub_10021B85C(uint64_t a1)
{
  char *v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  _QWORD v12[6];

  v2 = v1;
  v3 = *(void **)&v1[OBJC_IVAR____TtC7Weather34LocalPresetLocationsViewController_presetName + 8];
  if (v3)
  {
    sub_10021BB9C(*(void **)&v1[OBJC_IVAR____TtC7Weather34LocalPresetLocationsViewController_presetName], v3);
  }
  else
  {
    sub_100079FE8(a1, &qword_100BCBB30, UIAlertController_ptr);
    v4 = sub_100551298(0x6572502065766153, 0xEB00000000746573, 0xD00000000000001ELL, 0x80000001009F49E0, 1);
    v12[4] = sub_10021BA5C;
    v12[5] = 0;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    v12[2] = sub_10021BA7C;
    v12[3] = &unk_100B64E98;
    v5 = _Block_copy(v12);
    sub_100098A10((uint64_t)v5, "addTextFieldWithConfigurationHandler:");
    _Block_release(v5);
    sub_100079FE8(v6, &qword_100BCBB38, UIAlertAction_ptr);
    v7 = swift_allocObject(&unk_100B64ED0, 24, 7);
    swift_unknownObjectWeakInit(v7 + 16, v4);
    v8 = swift_allocObject(&unk_100B64EF8, 32, 7);
    *(_QWORD *)(v8 + 16) = v7;
    *(_QWORD *)(v8 + 24) = v2;
    v9 = v2;
    v10 = sub_10055134C(1702256979, 0xE400000000000000, 0, (uint64_t)sub_10021D0E0, v8);
    objc_msgSend(v4, "addAction:", v10);

    v11 = sub_10055134C(0x6C65636E6143, 0xE600000000000000, 1, 0, 0);
    sub_100098A10((uint64_t)v11, "addAction:");

    objc_msgSend(v9, "presentViewController:animated:completion:", v4, 1, 0);
  }
}

void sub_10021BA5C(void *a1)
{
  sub_10021D0E8(0x7365725074736574, 0xEA00000000007465, a1);
}

void sub_10021BA7C(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

void sub_10021BACC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *Strong;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE v12[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v12, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = sub_10021D138(Strong);
    if (v4)
    {
      v5 = v4;
      v6 = v4 & 0xC000000000000001;
      sub_1001215C4(0, (v4 & 0xC000000000000001) == 0, v4);
      if (v6)
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v5);
      else
        v7 = *(id *)(v5 + 32);
      v8 = v7;
      swift_bridgeObjectRelease();
      v9 = sub_10021D1AC(v8);
      if (v10)
      {
        v11 = HIBYTE(v10) & 0xF;
        if ((v10 & 0x2000000000000000) == 0)
          v11 = v9 & 0xFFFFFFFFFFFFLL;
        if (v11)
          sub_10021BB9C((void *)v9, (void *)v10);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10021BB9C(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  NSString v15;
  unsigned __int8 v16;
  id v17;
  NSURL *v18;
  void *v19;
  void *v20;
  unsigned int v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  Swift::String v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  id v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  void *v60;
  void *v61;
  id v62[2];

  v60 = a1;
  v61 = a2;
  v54 = sub_1000C44B8();
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100088FDC();
  v59 = v4;
  v5 = type metadata accessor for URL.DirectoryHint(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = sub_1000BE9F0();
  v8 = type metadata accessor for URL(v7);
  v57 = *(_QWORD *)(v8 - 8);
  v58 = v8;
  __chkstk_darwin(v8);
  v56 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v53 - v11;
  type metadata accessor for LocalPreset(0);
  sub_1005DD5AC();
  v13 = (void *)objc_opt_self(NSFileManager);
  v14 = objc_msgSend(v13, "defaultManager");
  URL.path.getter(v14);
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(v14, "fileExistsAtPath:", v15, sub_1000986C4());

  if ((v16 & 1) == 0)
  {
    v17 = objc_msgSend(v13, "defaultManager");
    URL._bridgeToObjectiveC()(v18);
    v20 = v19;
    v62[0] = 0;
    v21 = objc_msgSend(v17, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v19, 1, 0, v62);

    v22 = v62[0];
    if (v21)
    {
      v23 = v62[0];
    }
    else
    {
      v24 = v62[0];
      v25 = _convertNSErrorToError(_:)(v22);

      swift_willThrow(v26, v27);
      swift_errorRelease(v25);
    }
  }
  v28 = (uint64_t)v59;
  v29 = v56;
  v62[0] = v60;
  v62[1] = v61;
  swift_bridgeObjectRetain(v61);
  v30._countAndFlagsBits = 1918984494;
  v30._object = (void *)0xE400000000000000;
  String.append(_:)(v30);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v2, enum case for URL.DirectoryHint.notDirectory(_:), v5);
  v31 = sub_100114EF8();
  v59 = v12;
  URL.appending<A>(path:directoryHint:)(v62, v2, &type metadata for String, v31);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v5);
  swift_bridgeObjectRelease();
  v32 = v55;
  sub_100084050((uint64_t)v55 + OBJC_IVAR____TtC7Weather34LocalPresetLocationsViewController_appState, v28, type metadata accessor for PresetAppState);
  v33 = sub_10021B618();
  v35 = v34;
  v37 = v36;
  v39 = v38;
  v40 = v54;
  v41 = (uint64_t *)(v28 + *(int *)(v54 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *v41 = v33;
  v41[1] = v35;
  v41[2] = v37;
  v41[3] = v39;
  v42 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
  v43 = JSONEncoder.init()();
  v44 = sub_10021D00C();
  v45 = dispatch thunk of JSONEncoder.encode<A>(_:)(v28, v40, v44);
  v47 = v46;
  swift_release(v43);
  Data.write(to:options:)(v29, 1, v45, v47);
  v50 = objc_msgSend(v32, "navigationController");
  if (v50)
  {
    v51 = v50;
    v52 = objc_msgSend(v50, "popViewControllerAnimated:", 1);

    sub_1000C2508();
  }
  else
  {
    sub_1000C2508();
  }
  v48 = v58;
  v49 = *(void (**)(char *, uint64_t))(v57 + 8);
  v49(v29, v58);
  v49(v59, v48);
  sub_1000979AC(v28, type metadata accessor for PresetAppState);
  sub_100098640();
}

void sub_10021C13C()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x706F2D6F4ELL, 0xE500000000000000, "Weather/LocalPresetLocationsViewController.swift", 48, 2);
  __break(1u);
}

void sub_10021C198()
{
  char *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t ObjCClassFromMetadata;
  NSString v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  objc_super v9;

  v9.receiver = v0;
  v9.super_class = (Class)sub_1000D8E14();
  objc_msgSendSuper2(&v9, "viewDidLoad");
  v1 = objc_msgSend(v0, "tableView");
  if (v1)
  {
    v2 = v1;
    v3 = sub_100079FE8((uint64_t)v1, (unint64_t *)&qword_100BD35E0, UITableViewCell_ptr);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v3);
    v5 = sub_1000B4550();
    objc_msgSend(v2, "registerClass:forCellReuseIdentifier:", ObjCClassFromMetadata, v5);

    v6 = *(_QWORD *)&v0[OBJC_IVAR____TtC7Weather34LocalPresetLocationsViewController_presetName + 8];
    if (v6)
    {
      v7 = *(_QWORD *)&v0[OBJC_IVAR____TtC7Weather34LocalPresetLocationsViewController_presetName];
      v8 = *(_QWORD *)&v0[OBJC_IVAR____TtC7Weather34LocalPresetLocationsViewController_presetName + 8];
    }
    else
    {
      v8 = 0xEA00000000007465;
      v7 = 0x736572502077654ELL;
    }
    swift_bridgeObjectRetain(v6);
    sub_1001207F8(v7, v8, v0);
  }
  else
  {
    __break(1u);
  }
}

void sub_10021C2C8(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    sub_1000C44B8();
    sub_1000C1398();
  }
  sub_10004A298();
}

uint64_t sub_10021C334(uint64_t a1, uint64_t a2)
{
  if (a2)
    return 0;
  else
    return 0x6E6F697461636F4CLL;
}

unint64_t sub_10021C368(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = 0xD00000000000001BLL;
  v3 = 0xD000000000000031;
  if (a2)
    v3 = 0;
  if (a2 != 1)
    v2 = v3;
  if (a2 == 2)
    return 0xD00000000000003BLL;
  else
    return v2;
}

id sub_10021C3E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  NSString v7;

  a5(a1, a4);
  if (v5)
  {
    v6 = v5;
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v7 = 0;
  }
  return v7;
}

id sub_10021C428(void *a1)
{
  NSString v2;
  Class isa;
  id v4;
  unint64_t v5;

  v2 = sub_1000B4550();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v4 = objc_msgSend(a1, "dequeueReusableCellWithIdentifier:forIndexPath:", v2, isa);

  if (IndexPath.section.getter())
  {
    if (IndexPath.section.getter() == 1)
    {
      sub_10021CCC4((uint64_t)v4);
    }
    else if (IndexPath.section.getter() == 2)
    {
      sub_10021CCF0((uint64_t)v4);
    }
  }
  else
  {
    v5 = IndexPath.row.getter();
    sub_10021CB0C(v4, v5);
  }
  return v4;
}

void sub_10021C5A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  __n128 v19;
  __n128 v20;
  double *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  double v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  void *v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t (*v53)(char *, uint64_t, uint64_t);
  double *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;

  sub_1000BA294(&qword_100BC3380);
  sub_1000B42B0();
  __chkstk_darwin(v0);
  sub_100088FDC();
  v62 = v1;
  v2 = type metadata accessor for LocationWeatherDataState(0);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  v5 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v52 - v7;
  v9 = sub_1000BE878();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  __chkstk_darwin(v12);
  v14 = (char *)&v52 - v13;
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v52 - v17;
  if (IndexPath.section.getter(v16))
  {
    if (IndexPath.section.getter(v19) == 1)
    {
      sub_10009990C();
      sub_10021B7F8();
      return;
    }
    if (IndexPath.section.getter(v20) == 2)
    {
      sub_10009990C();
      sub_10021B85C(v35);
      return;
    }
    goto LABEL_15;
  }
  v56 = v5;
  v57 = v8;
  v59 = v2;
  v60 = v18;
  v55 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = v14;
  v21 = (double *)&v63[OBJC_IVAR____TtC7Weather34LocalPresetLocationsViewController_appState];
  v22 = (char *)v21 + *(int *)(type metadata accessor for PresetAppState(0) + 20);
  v23 = *(_QWORD *)&v22[*(int *)(sub_1000C1398() + 24)];
  v24 = IndexPath.row.getter();
  if ((v24 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v24 < *(_QWORD *)(v23 + 16))
  {
    v54 = v21;
    v25 = *(unsigned __int8 *)(v10 + 80);
    v26 = v23 + ((v25 + 32) & ~v25) + *(_QWORD *)(v10 + 72) * v24;
    v27 = v60;
    v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v28 = v53(v60, v26, v9);
    v29 = v9;
    v30 = LocationModel.id.getter(v28);
    v58 = v10;
    v32 = v31;
    sub_10021B618();
    v33 = v62;
    sub_1000EED10(v30, v32, v34);
    sub_10009934C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000986C4();
    if (_s7Weather24LocationCompositionStateOwet_0(v33, 1, v59) == 1)
    {
      (*(void (**)(char *, uint64_t))(v58 + 8))(v27, v9);
      sub_10021D218(v33);
    }
    else
    {
      v36 = (uint64_t)v57;
      sub_10021D258(v33, (uint64_t)v57);
      v37 = v29;
      v38 = (void (*)(char *, char *, uint64_t))v53;
      v53(v61, (uint64_t)v27, v29);
      v39 = *v54;
      v40 = (uint64_t)v56;
      sub_100084050(v36, (uint64_t)v56, type metadata accessor for LocationWeatherDataState);
      v41 = v55;
      v38(v55, v27, v29);
      v42 = (v25 + 24) & ~v25;
      v43 = swift_allocObject(&unk_100B64F20, v42 + v11, v25 | 7);
      v44 = v63;
      *(_QWORD *)(v43 + 16) = v63;
      v45 = v58;
      (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v43 + v42, v41, v37);
      v46 = objc_allocWithZone((Class)type metadata accessor for WeatherDataEditorViewController());
      v47 = v44;
      v48 = sub_100799A70((uint64_t)v61, v40, (uint64_t)sub_10021D30C, v43, v39);
      if (v48)
      {
        v49 = v48;
        v50 = objc_msgSend(v47, "navigationController");
        if (v50)
        {
          v51 = v50;
          objc_msgSend(v50, "pushViewController:animated:", v49, 1);

          v49 = v51;
        }

      }
      sub_1000979AC(v36, type metadata accessor for LocationWeatherDataState);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v27, v37);
    }
LABEL_15:
    sub_10009990C();
    return;
  }
  __break(1u);
}

uint64_t sub_10021C974(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v11[24];

  v4 = sub_1000BA294(&qword_100BC3380);
  __chkstk_darwin(v4);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  LocationModel.id.getter(v7);
  sub_100084050(a1, (uint64_t)v6, type metadata accessor for LocationWeatherDataState);
  v8 = type metadata accessor for LocationWeatherDataState(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v6, 0, 1, v8);
  swift_beginAccess(a2 + OBJC_IVAR____TtC7Weather34LocalPresetLocationsViewController_editedWeatherDataState, v11, 33, 0);
  sub_1000EDE8C();
  return swift_endAccess(v11);
}

void sub_10021CB0C(void *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void (*v20)(_QWORD *, _QWORD);
  _QWORD *v21;
  void *v22;
  void *v23;
  _QWORD v24[5];

  v23 = a1;
  v5 = type metadata accessor for UIListContentConfiguration(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = sub_1000BE9F0();
  v8 = type metadata accessor for LocationModel(v7);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v24[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = OBJC_IVAR____TtC7Weather34LocalPresetLocationsViewController_appState;
  v13 = *(int *)(sub_1000C44B8() + 20);
  v14 = sub_1000C1398();
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v15 = *(_QWORD *)(v2 + v12 + v13 + *(int *)(v14 + 24));
    if (*(_QWORD *)(v15 + 16) > a2)
    {
      v16 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v15+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * a2, v8);
      v17 = static UIListContentConfiguration.subtitleCell()(v16);
      v18 = LocationModel.name.getter(v17);
      UIListContentConfiguration.text.setter(v18);
      v19 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
      v20 = (void (*)(_QWORD *, _QWORD))UIListContentConfiguration.textProperties.modify(v24);
      UIListContentConfiguration.TextProperties.color.setter(v19);
      v20(v24, 0);
      v24[3] = v5;
      v24[4] = &protocol witness table for UIListContentConfiguration;
      v21 = sub_10005F164(v24);
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v6 + 16))(v21, v3, v5);
      v22 = v23;
      UITableViewCell.contentConfiguration.setter(v24);
      objc_msgSend(v22, "setAccessoryType:", 1);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v5);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      sub_100098640();
      return;
    }
  }
  __break(1u);
}

uint64_t sub_10021CCC4(uint64_t a1)
{
  return sub_10021CD18(a1, 0x6843207465736552, 0xED00007365676E61, (SEL *)&selRef_redColor);
}

uint64_t sub_10021CCF0(uint64_t a1)
{
  return sub_10021CD18(a1, 0x6572502065766153, 0xEB00000000746573, (SEL *)&selRef_greenColor);
}

uint64_t sub_10021CD18(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  void (*v12)(_QWORD *, _QWORD);
  _QWORD *v13;
  _QWORD v16[5];

  v6 = type metadata accessor for UIListContentConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v16[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIListContentConfiguration.subtitleCell()(v10);
  UIListContentConfiguration.text.setter(a2);
  v11 = objc_msgSend((id)objc_opt_self(UIColor), *a4);
  v12 = (void (*)(_QWORD *, _QWORD))UIListContentConfiguration.textProperties.modify(v16);
  UIListContentConfiguration.TextProperties.color.setter(v11);
  v12(v16, 0);
  v16[3] = v6;
  v16[4] = &protocol witness table for UIListContentConfiguration;
  v13 = sub_10005F164(v16);
  (*(void (**)(_QWORD *, char *, uint64_t))(v7 + 16))(v13, v9, v6);
  UITableViewCell.contentConfiguration.setter(v16);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void sub_10021CE34()
{
  _swift_stdlib_reportUnimplementedInitializer("Weather.LocalPresetLocationsViewController", 42, "init(style:)", 12, 0);
  __break(1u);
}

void sub_10021CE6C()
{
  _swift_stdlib_reportUnimplementedInitializer("Weather.LocalPresetLocationsViewController", 42, "init(nibName:bundle:)", 21, 0);
  __break(1u);
}

id sub_10021CEBC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)sub_1000D8E14();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for LocalPresetLocationsViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_100BCBB18;
  if (!qword_100BCBB18)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocalPresetLocationsViewController);
  return result;
}

uint64_t sub_10021CF8C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1009895C8;
  result = type metadata accessor for PresetAppState(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1009895E0;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

unint64_t sub_10021D00C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCBB28;
  if (!qword_100BCBB28)
  {
    v1 = type metadata accessor for PresetAppState(255);
    result = swift_getWitnessTable(&unk_1009A2700, v1);
    atomic_store(result, (unint64_t *)&qword_100BCBB28);
  }
  return result;
}

uint64_t sub_10021D04C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10021D090()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10021D0B4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_10021D0E0(uint64_t a1)
{
  uint64_t v1;

  sub_10021BACC(a1, *(_QWORD *)(v1 + 16));
}

void sub_10021D0E8(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v5;

  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(a3, "setText:", v5, swift_bridgeObjectRelease(a2).n128_f64[0]);

}

uint64_t sub_10021D138(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;

  v2 = objc_msgSend(a1, "textFields");

  if (!v2)
    return 0;
  v3 = sub_1000A0794(0, &qword_100BCBB40, UITextField_ptr);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

uint64_t sub_10021D1AC(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, "text");

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_10021D218(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BC3380);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10021D258(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocationWeatherDataState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10021D29C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_1000BE878();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10021D30C(uint64_t a1)
{
  uint64_t v1;

  sub_1000BE878();
  return sub_10021C974(a1, *(_QWORD *)(v1 + 16));
}

void sub_10021D348(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_1000BA294(&qword_100BCBB48);
  __chkstk_darwin(v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain(a2);
  if ((a3 & 1) != 0)
  {
    Image.init(_:bundle:)(a1, a2, 0);
  }
  else
  {
    v9 = Image.init(systemName:)(a1, a2);
    static SymbolRenderingMode.hierarchical.getter();
    v10 = type metadata accessor for SymbolRenderingMode(0);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
    Image.symbolRenderingMode(_:)(v8, v9);
    swift_release(v9);
    sub_10021D790((uint64_t)v8);
    sub_100079F70();
  }
}

uint64_t static TipViewModel.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  BOOL v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v27;
  __int128 v28;
  _QWORD v29[2];
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  sub_10021D574((__int128 *)a1, (uint64_t)&v28);
  sub_10021D574((__int128 *)a2, (uint64_t)&v27);
  sub_10021D574(&v28, (uint64_t)v29);
  v4 = v29[0];
  v5 = v29[1];
  if ((v30 & 1) != 0)
  {
    sub_10021D574(&v27, (uint64_t)&v31);
    if ((v33 & 1) == 0)
    {
LABEL_3:
      v6 = 0;
      return v6 & 1;
    }
  }
  else
  {
    sub_10021D574(&v27, (uint64_t)&v31);
    if ((v33 & 1) != 0)
      goto LABEL_3;
  }
  v7 = v4 == v31 && v5 == v32;
  if (v7 || (v8 = sub_100099264(v4, v5, v31, v32), v6 = 0, (v8 & 1) != 0))
  {
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 32);
    v13 = v9 == v11 && v10 == v12;
    if (v13 || (v14 = sub_100099264(v9, v10, v11, v12), v6 = 0, (v14 & 1) != 0))
    {
      v15 = *(_QWORD *)(a1 + 40);
      v16 = *(_QWORD *)(a1 + 48);
      v17 = *(_QWORD *)(a2 + 40);
      v18 = *(_QWORD *)(a2 + 48);
      v19 = v15 == v17 && v16 == v18;
      if (v19 || (v20 = sub_100099264(v15, v16, v17, v18), v6 = 0, (v20 & 1) != 0))
      {
        v21 = *(_QWORD *)(a1 + 56);
        v22 = *(_QWORD *)(a1 + 64);
        v23 = *(_QWORD *)(a2 + 56);
        v24 = *(_QWORD *)(a2 + 64);
        if (v21 == v23 && v22 == v24)
          v6 = 1;
        else
          v6 = sub_100099264(v21, v22, v23, v24);
      }
    }
  }
  return v6 & 1;
}

uint64_t static ImageSource.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a3 & 1) != 0)
  {
    if ((a6 & 1) == 0)
      return 0;
  }
  else if ((a6 & 1) != 0)
  {
    return 0;
  }
  if (a1 == a4 && a2 == a5)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0);
}

uint64_t sub_10021D574(__int128 *a1, uint64_t a2)
{
  __int128 v2;

  v2 = *a1;
  *(_BYTE *)(a2 + 16) = *((_BYTE *)a1 + 16);
  *(_OWORD *)a2 = v2;
  return a2;
}

uint64_t sub_10021D58C(void *__src, const void *a2)
{
  _BYTE v4[72];
  _BYTE __dst[72];

  memcpy(v4, __src, sizeof(v4));
  memcpy(__dst, a2, sizeof(__dst));
  return static TipViewModel.__derived_struct_equals(_:_:)((uint64_t)v4, (uint64_t)__dst) & 1;
}

uint64_t sub_10021D5E0(uint64_t a1, uint64_t a2)
{
  return static ImageSource.__derived_enum_equals(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

double destroy for ImageSource(uint64_t *a1)
{
  return sub_10016F41C(*a1, a1[1]);
}

void _s7Weather11ImageSourceOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10009D328(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_100079F70();
}

uint64_t assignWithCopy for ImageSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10009D328(*(_QWORD *)a2, v4);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_10016F41C(v6, v7);
  return a1;
}

uint64_t assignWithTake for ImageSource(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_10016F41C(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageSource(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 1)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageSource(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_10021D76C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_10021D774(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ImageSource()
{
  return &type metadata for ImageSource;
}

uint64_t sub_10021D790(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BCBB48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10021D7D0(char a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BCBB58);
  __chkstk_darwin(v2);
  __asm { BR              X10 }
}

uint64_t sub_10021D844()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v4 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  ShortDescription.init(name:_:)(0x657373696D736964, 0xED0000776F6C4664, v4, &type metadata for NotificationsOptInViewAction);
  v1[3] = v0;
  v1[4] = sub_10021DAD4();
  v5 = sub_10005F164(v1);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v3 + 32))(v5, v2, v0);
}

void sub_10021DA64()
{
  char *v0;

  sub_10021D7D0(*v0);
}

uint64_t sub_10021DA6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10021DB18();
  return ShortDescribable.description.getter(a1, v2);
}

unint64_t sub_10021DA98()
{
  unint64_t result;

  result = qword_100BCBB50;
  if (!qword_100BCBB50)
  {
    result = swift_getWitnessTable(&unk_100989680, &type metadata for NotificationsOptInViewAction);
    atomic_store(result, (unint64_t *)&qword_100BCBB50);
  }
  return result;
}

unint64_t sub_10021DAD4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCBB60;
  if (!qword_100BCBB60)
  {
    v1 = sub_100075EB0(&qword_100BCBB58);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCBB60);
  }
  return result;
}

unint64_t sub_10021DB18()
{
  unint64_t result;

  result = qword_100BCBB68;
  if (!qword_100BCBB68)
  {
    result = swift_getWitnessTable(&unk_1009896A8, &type metadata for NotificationsOptInViewAction);
    atomic_store(result, (unint64_t *)&qword_100BCBB68);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NotificationsOptInViewAction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10021DBA0 + 4 * byte_10098967B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10021DBD4 + 4 * byte_100989676[v4]))();
}

uint64_t sub_10021DBD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10021DBDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10021DBE4);
  return result;
}

uint64_t sub_10021DBF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10021DBF8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10021DBFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10021DC04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotificationsOptInViewAction()
{
  return &type metadata for NotificationsOptInViewAction;
}

unint64_t sub_10021DC24()
{
  unint64_t result;

  result = qword_100BCBB70;
  if (!qword_100BCBB70)
  {
    result = swift_getWitnessTable(&unk_100989740, &type metadata for NotificationsOptInViewAction);
    atomic_store(result, (unint64_t *)&qword_100BCBB70);
  }
  return result;
}

void sub_10021DC60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66[6];

  sub_1000BA294(&qword_100BC30C8);
  sub_1000B42B0();
  __chkstk_darwin(v1);
  sub_100088FDC();
  v60 = v2;
  v61 = type metadata accessor for MainAction(0);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100088FDC();
  v62 = v4;
  sub_1000BA294(&qword_100BC3380);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100088FDC();
  v64 = v6;
  sub_1000BA294(&qword_100BC3460);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100088FDC();
  v65 = v8;
  v63 = sub_1000C2148();
  v58 = *(_QWORD *)(v63 - 8);
  v9 = *(_QWORD *)(v58 + 64);
  __chkstk_darwin(v63);
  v59 = (uint64_t)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v52 - v11;
  sub_1000BA294(&qword_100BCBC40);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000D9BD8();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  __chkstk_darwin(v16);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v52 - v21;
  v23 = v0;
  (*(void (**)(uint64_t *__return_ptr, __n128))(v0 + 152))(v66, v20);
  v24 = v66[0];
  sub_1003CD538(v66[0], (uint64_t)v15);
  if (sub_1000B4560((uint64_t)v15) == 1)
  {
    swift_release();
    v25 = &qword_100BCBC40;
    v26 = (uint64_t)v15;
LABEL_7:
    sub_100021A14(v26, v25);
    return;
  }
  v54 = v17;
  v55 = v18;
  v56 = (uint64_t)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = v12;
  v53 = v9;
  v27 = v62;
  sub_10007802C((uint64_t)v15, (uint64_t)v22, type metadata accessor for SunriseSunsetDetailViewState);
  v28 = *(_QWORD *)(v24 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 16);
  swift_bridgeObjectRetain();
  v30 = Location.id.getter(v29);
  v31 = v64;
  sub_1000EED10(v30, v32, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v33 = type metadata accessor for LocationWeatherDataState(0);
  if (_s7Weather24LocationCompositionStateOwet_0(v31, 1, v33) == 1)
  {
    sub_100021A14(v31, &qword_100BC3380);
    v34 = v65;
    _s7Weather24LocationCompositionStateOwst_0(v65, 1, 1, v63);
LABEL_6:
    sub_10009D330();
    sub_1000215BC((uint64_t)v22, type metadata accessor for SunriseSunsetDetailViewState);
    v25 = &qword_100BC3460;
    v26 = v34;
    goto LABEL_7;
  }
  v34 = v65;
  sub_1000EADE8();
  sub_1000215BC(v31, type metadata accessor for LocationWeatherDataState);
  if (_s7Weather24LocationCompositionStateOwet_0(v34, 1, v63) == 1)
    goto LABEL_6;
  v35 = (uint64_t)v57;
  sub_10007802C(v34, (uint64_t)v57, type metadata accessor for WeatherData);
  if (!v22[*(int *)(v16 + 24)])
  {
    v36 = v23;
    sub_1000DB418((_QWORD *)(v23 + 112), *(_QWORD *)(v23 + 136));
    v37 = sub_1001AE064();
    v38 = v61;
    if ((v37 & 1) == 0)
    {
      *v27 = 1;
      sub_1000E6EE0(v37, v38);
      sub_1000C5204();
      sub_1000C44C0();
      sub_100021A14((uint64_t)v66, (uint64_t *)&unk_100BFFA10);
      sub_1000215BC((uint64_t)v27, type metadata accessor for MainAction);
      swift_release();
      v40 = (uint64_t)v22;
      v41 = v60;
      static TaskPriority.userInitiated.getter(v42);
      v43 = type metadata accessor for TaskPriority(0);
      _s7Weather24LocationCompositionStateOwst_0(v41, 0, 1, v43);
      v44 = v59;
      sub_100080C0C(v35, v59, type metadata accessor for WeatherData);
      v45 = v56;
      sub_100080C0C(v40, v56, type metadata accessor for SunriseSunsetDetailViewState);
      v46 = *(unsigned __int8 *)(v58 + 80);
      v47 = (v46 + 40) & ~v46;
      v48 = *(unsigned __int8 *)(v54 + 80);
      v49 = (v53 + v48 + v47) & ~v48;
      v50 = v35;
      v51 = (_QWORD *)swift_allocObject(&unk_100B65198, v49 + v55, v46 | v48 | 7);
      v51[2] = 0;
      v51[3] = 0;
      v51[4] = v36;
      sub_10007802C(v44, (uint64_t)v51 + v47, type metadata accessor for WeatherData);
      sub_10007802C(v45, (uint64_t)v51 + v49, type metadata accessor for SunriseSunsetDetailViewState);
      swift_retain();
      sub_10068CCF4(v41, (uint64_t)&unk_100BCBC50, (uint64_t)v51);
      swift_release();
      sub_10009D330();
      sub_100021A14(v41, &qword_100BC30C8);
      sub_1000215BC(v50, type metadata accessor for WeatherData);
      v39 = v40;
      goto LABEL_13;
    }
    *v27 = 0;
    sub_1000E6EE0(v37, v38);
    sub_1000C5204();
    sub_1000C44C0();
    sub_10009D330();
    sub_100021A14((uint64_t)v66, (uint64_t *)&unk_100BFFA10);
    sub_1000215BC((uint64_t)v27, type metadata accessor for MainAction);
  }
  swift_release();
  sub_1000215BC(v35, type metadata accessor for WeatherData);
  v39 = (uint64_t)v22;
LABEL_13:
  sub_1000215BC(v39, type metadata accessor for SunriseSunsetDetailViewState);
}

uint64_t sub_10021E194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6[10] = a5;
  v6[11] = a6;
  v6[9] = a4;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v6[12] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[13] = v8;
  v6[14] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v6[15] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[16] = v10;
  v6[17] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OSSignpostID(0);
  v6[18] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v6[19] = v12;
  v6[20] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10021E248, 0, 0);
}

uint64_t sub_10021E248()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[20];
  v2 = (_QWORD *)v0[9];
  v3 = (void *)v2[23];
  v0[21] = v3;
  v4 = v3;
  v5 = OSSignpostID.init(log:)(v4);
  v6 = static os_signpost_type_t.begin.getter(v5);
  os_signpost(_:dso:log:name:signpostID:)(v6, &_mh_execute_header, v4, "Weather:sunriseSunsetDetailDataPreprocessor", 43, 2, v1);
  sub_1000DB418(v2 + 9, v2[12]);
  v7 = (_QWORD *)swift_task_alloc(dword_100BC52E4);
  v0[22] = v7;
  *v7 = v0;
  v7[1] = sub_10021E2F4;
  return sub_1001AE448(v0[10], v0[11]);
}

uint64_t sub_10021E2F4()
{
  uint64_t v0;

  sub_10009E3B0(*(_QWORD *)(*(_QWORD *)v0 + 176));
  return swift_task_switch(sub_10021E33C, 0, 0);
}

uint64_t sub_10021E33C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  __n128 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = v1[20];
  v2 = v1[21];
  v4 = v1[17];
  v20 = v1[19];
  v21 = v1[18];
  v5 = v1[14];
  v18 = v1[16];
  v19 = v1[15];
  v6 = v1[12];
  v17 = v1[13];
  v7 = v1[9];
  v8 = static os_signpost_type_t.end.getter(a1);
  os_signpost(_:dso:log:name:signpostID:)(v8, &_mh_execute_header, v2, "Weather:sunriseSunsetDetailDataPreprocessor", 43, 2, v3);
  v9 = sub_10009FFE0();
  v10 = (void *)static OS_dispatch_queue.main.getter(v9);
  v1[6] = sub_10021E9F4;
  v1[7] = v7;
  v1[2] = _NSConcreteStackBlock;
  v1[3] = 1107296256;
  v1[4] = sub_100088F7C;
  v1[5] = &unk_100B651B0;
  v11 = _Block_copy(v1 + 2);
  v12 = swift_retain();
  static DispatchQoS.unspecified.getter(v12);
  v1[8] = _swiftEmptyArrayStorage;
  v13 = sub_1001221E0();
  v14 = sub_1000BA294(&qword_100BD4F10);
  v15 = sub_100121014();
  dispatch thunk of SetAlgebra.init<A>(_:)(v1 + 8, v14, v15, v6, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v4, v5, v11);
  _Block_release(v11);

  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v4, v19);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v3, v21);
  swift_release(v1[7]);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return ((uint64_t (*)(void))v1[1])();
}

double sub_10021E500(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  double result;
  _OWORD v9[2];
  uint64_t v10;

  v2 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(uint64_t (**)(uint64_t))(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  *v4 = 0;
  swift_storeEnumTagMultiPayload(v4, v7, 12);
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  swift_retain();
  sub_1000A5EBC((uint64_t)v4, (uint64_t)v9, v6);
  sub_100021A14((uint64_t)v9, (uint64_t *)&unk_100BFFA10);
  sub_1000215BC((uint64_t)v4, type metadata accessor for MainAction);
  *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  return result;
}

uint64_t sub_10021E5CC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[7];
  v4 = v1[8];
  sub_1000DB418(v1 + 4, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 8) + 24))(a1, v3);
}

uint64_t sub_10021E618()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0 + 4;
  v2 = v0[7];
  v3 = v0[8];
  sub_1000DB418(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 32))(v2);
}

void sub_10021E654()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 24));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 32));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 72));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 112));
  v1 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 176));
  swift_release(v1);

  sub_10004A298();
}

uint64_t sub_10021E6A8()
{
  uint64_t v0;

  sub_10021E654();
  return swift_deallocClassInstance(v0, 192, 7);
}

uint64_t type metadata accessor for SunriseSunsetDetailInteractor()
{
  return objc_opt_self(_TtC7Weather29SunriseSunsetDetailInteractor);
}

uint64_t sub_10021E6E8(uint64_t a1)
{
  return sub_10021E5CC(a1);
}

uint64_t sub_10021E708()
{
  return sub_10021E618();
}

uint64_t sub_10021E728()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = (int *)sub_1000C2148();
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = *(_QWORD *)(sub_1000D9BD8() - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v9 = v0 + v4;
  swift_bridgeObjectRelease();
  v10 = v0 + v4 + v1[5];
  v11 = type metadata accessor for Locale(0);
  if (!sub_1000B4560(v10))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = type metadata accessor for WeatherDataModel(0);
  sub_1000987E0(v12);
  v13 = v9 + v1[7];
  v14 = sub_1000BA294(&qword_100BC3348);
  if (!_s7Weather24LocationCompositionStateOwet_0(v13, 1, v14))
  {
    v15 = type metadata accessor for Date(0);
    sub_1000987E0(v15);
  }
  v16 = v9 + v1[8];
  type metadata accessor for WeatherData.WeatherStatisticsState(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16);
  if (EnumCaseMultiPayload == 1)
  {
    v18 = type metadata accessor for WeatherStatisticsModel(0);
    sub_1000987E0(v18);
  }
  else if (!EnumCaseMultiPayload)
  {
    swift_bridgeObjectRelease();
  }
  v19 = v9 + v1[9];
  v20 = type metadata accessor for WeatherDataOverrides(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v19, 1, v20))
  {
    type metadata accessor for Date(0);
    if (!sub_1000B4560(v19))
      sub_1000B456C();
    if (!sub_1000B4560(v19 + *(int *)(v20 + 20)))
      sub_1000B456C();
  }
  v21 = (v4 + v5 + v7) & ~v7;
  v22 = v21 + v8;
  v23 = v0 + v21;
  v24 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  return swift_deallocObject(v0, v22, v3 | v7 | 7);
}

uint64_t sub_10021E904(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(sub_1000C2148() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000D9BD8() - 8) + 80);
  v8 = v5 + v6 + v7;
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = (uint64_t)v1 + v5;
  v13 = (uint64_t)v1 + (v8 & ~v7);
  v14 = (_QWORD *)swift_task_alloc(dword_100BCBC4C);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_10021E9B8;
  return sub_10021E194(a1, v9, v10, v11, v12, v13);
}

uint64_t sub_10021E9B8()
{
  uint64_t (**v0)(void);

  sub_10009E3B0(*((_QWORD *)*v0 + 2));
  return v0[1]();
}

double sub_10021E9F4()
{
  uint64_t v0;

  return sub_10021E500(v0);
}

void sub_10021E9FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;

  v47 = sub_1000BA294(&qword_100BC9F48);
  v3 = __chkstk_darwin(v47);
  v46 = (uint64_t)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v45 = (char *)&v38 - v6;
  __chkstk_darwin(v5);
  v44 = (char *)&v38 - v7;
  v8 = sub_1000BA294(&qword_100BCBD08);
  v42 = *(_QWORD *)(v8 - 8);
  v43 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v38 = v1;
    v52 = _swiftEmptyArrayStorage;
    sub_100605DB4();
    v12 = sub_10022193C(a1);
    if ((v12 & 0x8000000000000000) == 0)
    {
      v14 = v12;
      v15 = a1;
      if (v12 < 1 << *(_BYTE *)(a1 + 32))
      {
        v16 = a1 + 64;
        v40 = v10;
        v41 = v15;
        v39 = v15 + 64;
        while ((*(_QWORD *)(v16 + 8 * (v14 >> 6)) & (1 << v14)) != 0)
        {
          if ((_DWORD)v13 != *(_DWORD *)(v15 + 36))
            goto LABEL_20;
          v50 = 1 << v14;
          v51 = v14 >> 6;
          v48 = v11;
          v49 = v13;
          v17 = v47;
          v18 = v44;
          v19 = (uint64_t)&v44[*(int *)(v47 + 48)];
          v20 = *(_QWORD *)(v15 + 48);
          v21 = type metadata accessor for Date(0);
          v22 = *(_QWORD *)(v21 - 8);
          v23 = v20 + *(_QWORD *)(v22 + 72) * v14;
          v24 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
          v24(v18, v23, v21);
          v25 = *(_QWORD *)(v15 + 56);
          v26 = type metadata accessor for CalendarMoonPhaseData(0);
          sub_1002219BC(v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v14, v19);
          v27 = v45;
          v24(v45, (uint64_t)v18, v21);
          sub_1002219BC(v19, (uint64_t)&v27[*(int *)(v17 + 48)]);
          v28 = (uint64_t)v27;
          v29 = v46;
          sub_1001A7244(v28, v46, &qword_100BC9F48);
          v30 = (uint64_t)v18;
          v31 = (uint64_t)v40;
          sub_100021AA4(v30, &qword_100BC9F48);
          v32 = *(int *)(v17 + 48);
          v33 = *(int *)(v43 + 48);
          v24((char *)v31, v29, v21);
          *(_BYTE *)(v31 + v33) = *(_BYTE *)(v29 + v32);
          sub_100021AA4(v29, &qword_100BC9F48);
          v34 = v52;
          if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
          {
            sub_100605DB4();
            v34 = v52;
          }
          v35 = v34[2];
          v15 = v41;
          if (v35 >= v34[3] >> 1)
          {
            sub_100605DB4();
            v34 = v52;
          }
          v34[2] = v35 + 1;
          sub_1001A7244(v31, (uint64_t)v34+ ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80))+ *(_QWORD *)(v42 + 72) * v35, &qword_100BCBD08);
          v36 = -1 << *(_BYTE *)(v15 + 32);
          if ((uint64_t)v14 >= -v36)
            goto LABEL_21;
          v16 = v39;
          if ((*(_QWORD *)(v39 + 8 * v51) & v50) == 0)
            goto LABEL_22;
          if ((_DWORD)v49 != *(_DWORD *)(v15 + 36))
            goto LABEL_23;
          v37 = _HashTable.occupiedBucket(after:)(v14, v39, ~v36);
          v11 = v48 - 1;
          if (v48 == 1)
            return;
          v14 = v37;
          if ((v37 & 0x8000000000000000) == 0)
          {
            v13 = *(unsigned int *)(v15 + 36);
            if (v37 < 1 << *(_BYTE *)(v15 + 32))
              continue;
          }
          goto LABEL_24;
        }
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
      }
    }
LABEL_24:
    __break(1u);
  }
}

uint64_t sub_10021ED98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v4 = sub_10021EEA4(a1);
  sub_10021F924(a1, v4, a2);
  v5 = sub_100220224(a1, v4);
  swift_bridgeObjectRelease(v4);
  result = type metadata accessor for MoonCalendarViewModel(0);
  *(_QWORD *)(a2 + *(int *)(result + 20)) = v5;
  return result;
}

id sub_10021EE08()
{
  id result;

  result = sub_10021EE24();
  qword_100BCBC58 = (uint64_t)result;
  return result;
}

id sub_10021EE24()
{
  id v0;
  NSString v1;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setLocalizedDateFormatFromTemplate:", v1);

  objc_msgSend(v0, "setFormattingContext:", 2);
  return v0;
}

uint64_t sub_10021EEA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  double v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, _QWORD *, uint64_t);
  char *v54;
  uint64_t v55;
  char *v56;
  _QWORD *v57;
  uint64_t v58;
  double v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  char v74;
  uint64_t v75;
  _BYTE *v76;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v78;
  char v79;
  uint64_t v80;
  _BOOL8 v81;
  Swift::Int v82;
  unint64_t v83;
  char v84;
  Swift::Bool v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  __n128 v91;
  uint64_t v92;
  int v93;
  void (*v94)(char *, uint64_t);
  uint64_t result;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(char *, char *, uint64_t);
  unsigned int v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  void (*v123)(char *, uint64_t, uint64_t);
  char *v124;
  uint64_t v125;
  _QWORD *v126;
  char *v127;
  uint64_t v128;
  _QWORD *v129;
  char v130[8];

  v112 = type metadata accessor for CalendarMoonPhaseData(0);
  v107 = *(_QWORD *)(v112 - 8);
  v2 = __chkstk_darwin(v112);
  v120 = (uint64_t)&v96 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v109 = (char *)&v96 - v4;
  v5 = sub_1000BA294(&qword_100BCBD10);
  __chkstk_darwin(v5);
  v121 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = type metadata accessor for DayMoonData(0);
  v119 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v118 = (char *)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = type metadata accessor for Calendar.Component(0);
  v8 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v125);
  v10 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  v12 = __chkstk_darwin(v11);
  v108 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v106 = (char *)&v96 - v15;
  v16 = __chkstk_darwin(v14);
  v117 = (uint64_t)&v96 - v17;
  v18 = __chkstk_darwin(v16);
  v115 = (uint64_t *)((char *)&v96 - v19);
  __chkstk_darwin(v18);
  v126 = (uint64_t *)((char *)&v96 - v20);
  v21 = type metadata accessor for Date(0);
  v97 = *(_QWORD *)(v21 - 8);
  v22 = __chkstk_darwin(v21);
  v127 = (char *)&v96 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v96 - v25;
  v27 = __chkstk_darwin(v24);
  v122 = (char *)&v96 - v28;
  __chkstk_darwin(v27);
  v98 = (char *)&v96 - v29;
  v104 = type metadata accessor for DateComponents(0);
  v102 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v105 = (char *)&v96 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for Calendar(0);
  v100 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v32 = (char *)&v96 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = type metadata accessor for TimeZone(0);
  v99 = *(_QWORD *)(v101 - 8);
  v33 = __chkstk_darwin(v101);
  v35 = (char *)&v96 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  Location.timeZone.getter(v33);
  v124 = v35;
  static Calendar.currentCalendar(with:)(v35);
  v36 = sub_1000BA294(&qword_100BC4E50);
  v37 = *(_QWORD *)(v8 + 72);
  v38 = *(unsigned __int8 *)(v8 + 80);
  v39 = (v38 + 32) & ~v38;
  v40 = swift_allocObject(v36, v39 + 2 * v37, v38 | 7);
  *(_OWORD *)(v40 + 16) = xmmword_10097DA20;
  v41 = v40 + v39;
  v116 = v8;
  v42 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 104);
  v43 = v125;
  v42((char *)v41, enum case for Calendar.Component.year(_:), v125);
  v44 = (char *)(v41 + v37);
  v45 = enum case for Calendar.Component.month(_:);
  v123 = v42;
  v42(v44, enum case for Calendar.Component.month(_:), v43);
  v46 = sub_1000A8278(v40);
  v47 = *(int *)(type metadata accessor for MoonCalendarInput(0) + 28);
  v111 = a1;
  v48 = v105;
  Calendar.dateComponents(_:from:)(v46, a1 + v47);
  *(_QWORD *)&v49 = swift_bridgeObjectRelease(v46).n128_u64[0];
  v50 = v126;
  v51 = (uint64_t)v32;
  Calendar.date(from:)(v48, v49);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v50, 1, v21) == 1)
  {
LABEL_4:
    v56 = v124;
    sub_100021AA4((uint64_t)v50, (uint64_t *)&unk_100BD35A0);
    sub_1000A84E0((unint64_t *)&qword_100BC3588, (uint64_t)&protocol conformance descriptor for Date);
    v57 = (_QWORD *)Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
    (*(void (**)(char *, uint64_t))(v102 + 8))(v105, v104);
    (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v51, v103);
    (*(void (**)(char *, uint64_t))(v99 + 8))(v56, v101);
    return (uint64_t)v57;
  }
  v52 = v97;
  v53 = *(void (**)(char *, _QWORD *, uint64_t))(v97 + 32);
  v54 = v98;
  v53(v98, v50, v21);
  v55 = v125;
  v123(v10, v45, v125);
  v50 = v115;
  Calendar.date(byAdding:value:to:wrappingComponents:)(v10, 1, v54, 0);
  v116 = *(_QWORD *)(v116 + 8);
  ((void (*)(char *, uint64_t))v116)(v10, v55);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v50, 1, v21) == 1)
  {
    (*(void (**)(char *, uint64_t))(v52 + 8))(v54, v21);
    goto LABEL_4;
  }
  v126 = (_QWORD *)v51;
  v58 = ((uint64_t (*)(char *, _QWORD *, uint64_t))v53)(v122, v50, v21);
  v59 = Location.coordinate.getter(v58);
  v61 = v60;
  v113 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
  v113(v26, v54, v21);
  v62 = v110;
  v115 = (_QWORD *)(v110 + 16);
  swift_beginAccess(v26, v130, 1, 0);
  v114 = enum case for Calendar.Component.day(_:);
  v57 = &_swiftEmptyDictionarySingleton;
  while (1)
  {
    v63 = v52;
    v64 = *(_QWORD *)(v62 + 40);
    v65 = *(_QWORD *)(v62 + 48);
    sub_1000DB418(v115, v64);
    v66 = (uint64_t)v124;
    v67 = v65;
    v68 = (uint64_t)v121;
    dispatch thunk of MoonDataProviderType.dayMoonData(for:timeZone:coordinate:)(v26, v124, v64, v67, v59, v61);
    v69 = v128;
    if (_s7Weather24LocationCompositionStateOwet_0(v68, 1, v128) == 1)
    {
      sub_100021AA4(v68, &qword_100BCBD10);
      v70 = v125;
      v123(v10, v114, v125);
      v71 = (uint64_t)v108;
      Calendar.date(byAdding:value:to:wrappingComponents:)(v10, 1, v26, 0);
      ((void (*)(char *, uint64_t))v116)(v10, v70);
      v52 = v63;
      if (_s7Weather24LocationCompositionStateOwet_0(v71, 1, v21) == 1)
        goto LABEL_23;
      goto LABEL_18;
    }
    v72 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v119 + 32))(v118, v68, v69);
    v73 = DayMoonData.phase.getter(v72);
    v74 = v73;
    v75 = v117;
    sub_100220A48((uint64_t)v26, v111, v66, v73, (uint64_t)v126, v62, v117);
    v113(v127, v26, v21);
    v76 = v109;
    sub_1001A7210(v75, (uint64_t)&v109[*(int *)(v112 + 20)], (uint64_t *)&unk_100BD35A0);
    *v76 = v74;
    sub_1000DB648((uint64_t)v76, v120, type metadata accessor for CalendarMoonPhaseData);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v57);
    v129 = v57;
    sub_10016C6BC();
    v80 = v57[2];
    v81 = (v79 & 1) == 0;
    v82 = v80 + v81;
    if (__OFADD__(v80, v81))
      break;
    v83 = v78;
    v84 = v79;
    sub_1000BA294(&qword_100BCBD18);
    v85 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v82);
    v52 = v63;
    if (v85)
    {
      sub_10016C6BC();
      if ((v84 & 1) != (v87 & 1))
        goto LABEL_25;
      v83 = v86;
    }
    v57 = v129;
    if ((v84 & 1) != 0)
    {
      sub_100221A3C(v120, v129[7] + *(_QWORD *)(v107 + 72) * v83);
    }
    else
    {
      v129[(v83 >> 6) + 8] |= 1 << v83;
      v113((char *)(v57[6] + *(_QWORD *)(v63 + 72) * v83), v127, v21);
      sub_1000DB648(v120, v57[7] + *(_QWORD *)(v107 + 72) * v83, type metadata accessor for CalendarMoonPhaseData);
      v88 = v57[2];
      v89 = __OFADD__(v88, 1);
      v90 = v88 + 1;
      if (v89)
        goto LABEL_22;
      v57[2] = v90;
      v57 = v129;
    }
    v91 = swift_bridgeObjectRelease(0x8000000000000000);
    (*(void (**)(char *, uint64_t, __n128))(v63 + 8))(v127, v21, v91);
    sub_100021AA4(v117, (uint64_t *)&unk_100BD35A0);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v118, v128);
    v92 = v125;
    v123(v10, v114, v125);
    v71 = (uint64_t)v106;
    Calendar.date(byAdding:value:to:wrappingComponents:)(v10, 1, v26, 0);
    ((void (*)(char *, uint64_t))v116)(v10, v92);
    v93 = _s7Weather24LocationCompositionStateOwet_0(v71, 1, v21);
    v62 = v110;
    if (v93 == 1)
      goto LABEL_24;
LABEL_18:
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 40))(v26, v71, v21);
    if ((static Date.< infix(_:_:)(v26, v122) & 1) == 0)
    {
      v94 = *(void (**)(char *, uint64_t))(v52 + 8);
      v94(v122, v21);
      v94(v98, v21);
      (*(void (**)(char *, uint64_t))(v102 + 8))(v105, v104);
      (*(void (**)(_QWORD *, uint64_t))(v100 + 8))(v126, v103);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v124, v101);
      v94(v26, v21);
      return (uint64_t)v57;
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
  __break(1u);
  return result;
}

uint64_t sub_10021F924@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  int v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  uint64_t v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint8_t *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  __n128 v86;
  void (*v87)(char *, uint64_t, uint64_t, __n128);
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  char *v95;
  int *v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  __n128 v106;
  uint64_t v107;
  char *v108;
  void (*v109)(char *, char *, uint64_t, __n128);
  uint64_t v110;
  uint64_t v111;
  double v112;
  void (*v113)(char *, uint64_t);
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  char *v144;

  v138 = a2;
  v122 = a3;
  v4 = type metadata accessor for MoonPhase.Hemisphere(0);
  v136 = *(_QWORD *)(v4 - 8);
  v137 = v4;
  __chkstk_darwin(v4);
  v135 = (char *)&v114 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Calendar.Component(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v120 = (char *)&v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  v10 = __chkstk_darwin(v9);
  v134 = (uint64_t)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v116 = (char *)&v114 - v13;
  v14 = __chkstk_darwin(v12);
  v123 = (char *)&v114 - v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v114 - v16;
  v124 = type metadata accessor for Date(0);
  v143 = *(_QWORD *)(v124 - 8);
  v18 = __chkstk_darwin(v124);
  v142 = (char *)&v114 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v144 = (char *)&v114 - v21;
  v22 = __chkstk_darwin(v20);
  v140 = (char *)&v114 - v23;
  v24 = __chkstk_darwin(v22);
  v115 = (char *)&v114 - v25;
  v26 = __chkstk_darwin(v24);
  v117 = (char *)&v114 - v27;
  __chkstk_darwin(v26);
  v119 = (char *)&v114 - v28;
  v132 = type metadata accessor for DateComponents(0);
  v129 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v30 = (char *)&v114 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for TimeZone(0);
  v32 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v34 = (char *)&v114 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for Calendar(0);
  v126 = *(_QWORD *)(v35 - 8);
  v127 = v35;
  v36 = __chkstk_darwin(v35);
  v38 = (char *)&v114 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  Location.timeZone.getter(v36);
  static Calendar.currentCalendar(with:)(v34);
  v130 = v31;
  v131 = v32;
  v39 = *(void (**)(char *, uint64_t))(v32 + 8);
  v139 = v34;
  v39(v34, v31);
  v40 = sub_1000BA294(&qword_100BC4E50);
  v41 = *(_QWORD *)(v7 + 72);
  v42 = *(unsigned __int8 *)(v7 + 80);
  v43 = (v42 + 32) & ~v42;
  v44 = swift_allocObject(v40, v43 + 2 * v41, v42 | 7);
  *(_OWORD *)(v44 + 16) = xmmword_10097DA20;
  v45 = v44 + v43;
  v118 = v7;
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 104);
  v46(v45, enum case for Calendar.Component.year(_:), v6);
  v47 = enum case for Calendar.Component.month(_:);
  v121 = v6;
  v46(v45 + v41, enum case for Calendar.Component.month(_:), v6);
  v48 = sub_1000A8278(v44);
  v125 = type metadata accessor for MoonCalendarInput(0);
  v49 = *(int *)(v125 + 24);
  v50 = a1;
  v51 = v124;
  v133 = v50;
  v52 = v50 + v49;
  Calendar.dateComponents(_:from:)(v48, v50 + v49);
  *(_QWORD *)&v53 = swift_bridgeObjectRelease(v48).n128_u64[0];
  v128 = v30;
  Calendar.date(from:)(v30, v53);
  v54 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v17, 1, v51);
  v141 = v38;
  if (v54 == 1)
  {
    v55 = v122;
    v56 = v142;
    v57 = v143;
  }
  else
  {
    v114 = v52;
    v58 = *(void (**)(char *, char *, uint64_t))(v143 + 32);
    v59 = v119;
    v58(v119, v17, v51);
    v60 = v120;
    v61 = v121;
    v46((uint64_t)v120, v47, v121);
    v62 = (uint64_t)v123;
    Calendar.date(byAdding:value:to:wrappingComponents:)(v60, 1, v59, 0);
    v63 = *(void (**)(char *, uint64_t))(v118 + 8);
    v63(v60, v61);
    v64 = v59;
    if (_s7Weather24LocationCompositionStateOwet_0(v62, 1, v51) == 1)
    {
      v57 = v143;
      v55 = v122;
      v65 = v123;
      (*(void (**)(char *, uint64_t))(v143 + 8))(v59, v51);
    }
    else
    {
      v66 = v117;
      v58(v117, v123, v51);
      v67 = v120;
      v68 = v47;
      v69 = v121;
      v46((uint64_t)v120, v68, v121);
      v70 = (uint64_t)v116;
      v71 = v59;
      v72 = v141;
      Calendar.date(byAdding:value:to:wrappingComponents:)(v67, -1, v71, 0);
      v73 = v69;
      v65 = (char *)v70;
      v63(v67, v73);
      if (_s7Weather24LocationCompositionStateOwet_0(v70, 1, v51) != 1)
      {
        v103 = v115;
        v104 = ((uint64_t (*)(char *, char *, uint64_t))v58)(v115, v65, v51);
        v105 = v133;
        v106 = Location.timeZone.getter(v104);
        v107 = v143;
        v108 = v66;
        v109 = *(void (**)(char *, char *, uint64_t, __n128))(v143 + 16);
        v109(v140, v103, v51, v106);
        ((void (*)(char *, char *, uint64_t))v109)(v144, v108, v51);
        v110 = v125;
        v98 = v142;
        ((void (*)(char *, uint64_t, uint64_t))v109)(v142, v105 + *(int *)(v125 + 28), v51);
        v91 = v134;
        sub_1001A7210(v105 + *(int *)(v110 + 32), v134, (uint64_t *)&unk_100BD35A0);
        v92 = v138;
        swift_bridgeObjectRetain(v138);
        v112 = Location.coordinate.getter(v111);
        v95 = v135;
        MoonPhase.Hemisphere.init(latitude:)(v112);
        v113 = *(void (**)(char *, uint64_t))(v107 + 8);
        v113(v103, v51);
        v113(v117, v51);
        v113(v119, v51);
        (*(void (**)(char *, uint64_t))(v129 + 8))(v128, v132);
        (*(void (**)(char *, uint64_t))(v126 + 8))(v72, v127);
        v55 = v122;
        (*(void (**)(uint64_t, char *, uint64_t))(v131 + 32))(v122, v139, v130);
        v96 = (int *)type metadata accessor for CalendarViewModel(0);
        v97 = (char *)(v55 + v96[5]);
        v99 = v140;
        goto LABEL_13;
      }
      v57 = v143;
      v74 = *(void (**)(char *, uint64_t))(v143 + 8);
      v74(v66, v51);
      v55 = v122;
      v74(v64, v51);
    }
    v17 = v65;
    v56 = v142;
    v52 = v114;
  }
  sub_100021AA4((uint64_t)v17, (uint64_t *)&unk_100BD35A0);
  if (qword_100BC2450 != -1)
    swift_once(&qword_100BC2450, sub_1006F3844);
  v75 = type metadata accessor for Logger(0);
  v76 = sub_1000AECD4(v75, (uint64_t)qword_100CAF0E8);
  v77 = Logger.logObject.getter(v76);
  v79 = static os_log_type_t.error.getter(v77, v78);
  if (os_log_type_enabled(v77, v79))
  {
    v80 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v80 = 0;
    _os_log_impl((void *)&_mh_execute_header, v77, v79, "Failed to generate date range for the calendar view in the moon detail view", v80, 2u);
    v81 = v80;
    v56 = v142;
    swift_slowDealloc(v81, -1, -1);
  }

  v82 = v56;
  v83 = v139;
  v84 = v133;
  v86 = Location.timeZone.getter(v85);
  v87 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v57 + 16);
  v88 = v57;
  v89 = v140;
  v87(v140, v52, v51, v86);
  ((void (*)(char *, uint64_t, uint64_t))v87)(v144, v52, v51);
  v90 = v125;
  ((void (*)(char *, uint64_t, uint64_t))v87)(v82, v84 + *(int *)(v125 + 28), v51);
  v91 = v134;
  sub_1001A7210(v84 + *(int *)(v90 + 32), v134, (uint64_t *)&unk_100BD35A0);
  v92 = v138;
  swift_bridgeObjectRetain(v138);
  v94 = Location.coordinate.getter(v93);
  v95 = v135;
  MoonPhase.Hemisphere.init(latitude:)(v94);
  (*(void (**)(char *, uint64_t))(v129 + 8))(v128, v132);
  (*(void (**)(char *, uint64_t))(v126 + 8))(v141, v127);
  (*(void (**)(uint64_t, char *, uint64_t))(v131 + 32))(v55, v83, v130);
  v96 = (int *)type metadata accessor for CalendarViewModel(0);
  v97 = (char *)(v55 + v96[5]);
  v98 = v82;
  v58 = *(void (**)(char *, char *, uint64_t))(v88 + 32);
  v99 = v89;
LABEL_13:
  v58(v97, v99, v51);
  v101 = v136;
  v100 = v137;
  v58((char *)(v55 + v96[6]), v144, v51);
  v58((char *)(v55 + v96[7]), v98, v51);
  sub_1001A7244(v91, v55 + v96[8], (uint64_t *)&unk_100BD35A0);
  *(_QWORD *)(v55 + v96[9]) = v92;
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v101 + 32))(v55 + v96[10], v95, v100);
}

_QWORD *sub_100220224(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  Class isa;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  char v41;
  Class v42;
  id v43;
  uint64_t v44;
  void *v45;
  void *v46;
  id v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  BOOL v51;
  uint64_t v52;
  _QWORD *v53;
  Swift::String *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  char v65;
  __n128 v66;
  Class v67;
  id v68;
  uint64_t v69;
  void *v70;
  void *v71;
  id v72;
  Swift::String v73;
  Swift::String v74;
  Swift::String v75;
  BOOL v76;
  uint64_t v77;
  _QWORD *v78;
  Swift::String *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  Swift::String *v96;
  Swift::String *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  Swift::String v107;
  Swift::String v108;

  v3 = type metadata accessor for OverviewTableRowViewModel(0);
  v98 = *(_QWORD *)(v3 - 8);
  v99 = v3;
  v4 = __chkstk_darwin(v3);
  v97 = (Swift::String *)((char *)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v96 = (Swift::String *)((char *)&v88 - v6);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v100 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BCBD08);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v103 = (uint64_t)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TimeZone(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100BC1E88 != -1)
    v15 = swift_once(&qword_100BC1E88, sub_10021EE08);
  v18 = (void *)qword_100BCBC58;
  Location.timeZone.getter(v15);
  isa = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  v104 = v18;
  objc_msgSend(v18, "setTimeZone:", isa);

  swift_bridgeObjectRetain(a2);
  v21 = sub_1002214C0(v20);
  swift_bridgeObjectRelease(a2);
  sub_10021E9FC(v21);
  v23 = v22;
  swift_release(v21);
  sub_1000A84E0((unint64_t *)&qword_100BCB0E0, (uint64_t)&protocol conformance descriptor for Date);
  v25 = Array.sorting<A>(on:)(sub_1002209A4, 0, v23, v10, v7, v24);
  swift_bridgeObjectRelease(v23);
  v26 = *(_QWORD *)(v25 + 16);
  if (!v26)
  {
    swift_bridgeObjectRelease(v25);
    return _swiftEmptyArrayStorage;
  }
  v27 = *(int *)(v10 + 48);
  v28 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v89 = v25;
  v29 = v25 + v28;
  v101 = *(_QWORD *)(v11 + 72);
  v102 = v27;
  v30 = _swiftEmptyArrayStorage;
  v91 = (void *)0x80000001009F4D20;
  v92 = (void *)0x80000001009F4D80;
  v94 = v8;
  v95 = v7;
  v31 = v100;
  do
  {
    v32 = v103;
    sub_1001A7210(v29, v103, &qword_100BCBD08);
    v33 = *(unsigned __int8 *)(v32 + v102);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v31, v32, v7);
    v34 = MoonPhase.rawValue.getter(v33);
    v36 = v35;
    v37 = MoonPhase.rawValue.getter(0);
    v39 = v34 == v37 && v36 == v38;
    v105 = v29;
    v106 = v26;
    if (v39)
    {
      swift_bridgeObjectRelease_n(v36, 2);
    }
    else
    {
      v40 = v38;
      v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v36, v37, v38, 0);
      swift_bridgeObjectRelease(v36);
      swift_bridgeObjectRelease(v40);
      if ((v41 & 1) == 0)
        goto LABEL_18;
    }
    v42 = Date._bridgeToObjectiveC()().super.isa;
    v43 = objc_msgSend(v104, "stringForObjectValue:", v42);

    if (v43)
    {
      LODWORD(v93) = v33;
      v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
      v46 = v45;

      v47 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v107._object = v92;
      v48._countAndFlagsBits = 0x6E6F6F4D2077654ELL;
      v48._object = (void *)0xE800000000000000;
      v49._countAndFlagsBits = 0;
      v49._object = (void *)0xE000000000000000;
      v107._countAndFlagsBits = 0xD000000000000059;
      v50 = NSLocalizedString(_:tableName:bundle:value:comment:)(v48, (Swift::String_optional)0, (NSBundle)v47, v49, v107);

      v90 = v30[2];
      v51 = v90 != 0;
      v52 = v99;
      v53 = v30;
      v54 = v96;
      v55 = (uint64_t)v96 + *(int *)(v99 + 24);
      *(_QWORD *)v55 = v44;
      *(_QWORD *)(v55 + 8) = v46;
      *(_BYTE *)(v55 + 16) = 0;
      v56 = type metadata accessor for OverviewTableValueString(0);
      swift_storeEnumTagMultiPayload(v55, v56, 1);
      _s7Weather24LocationCompositionStateOwst_0(v55, 0, 1, v56);
      v54->_countAndFlagsBits = v44;
      v54->_object = v46;
      v54[1] = v50;
      *((_BYTE *)&v54->_countAndFlagsBits + *(int *)(v52 + 28)) = v51;
      v30 = v53;
      swift_bridgeObjectRetain(v46);
      if ((swift_isUniquelyReferenced_nonNull_native(v53) & 1) == 0)
      {
        sub_1005FED88();
        v30 = v83;
      }
      v57 = v30[2];
      v8 = v94;
      v7 = v95;
      v31 = v100;
      v29 = v105;
      v26 = v106;
      v33 = v93;
      if (v57 >= v30[3] >> 1)
      {
        sub_1005FED88();
        v30 = v84;
      }
      v30[2] = v57 + 1;
      sub_1000DB648((uint64_t)v96, (uint64_t)v30+ ((*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80))+ *(_QWORD *)(v98 + 72) * v57, type metadata accessor for OverviewTableRowViewModel);
    }
LABEL_18:
    v58 = MoonPhase.rawValue.getter(v33);
    v60 = v59;
    v61 = MoonPhase.rawValue.getter(4);
    if (v58 == v61 && v60 == v62)
    {
      swift_bridgeObjectRelease_n(v60, 2);
    }
    else
    {
      v64 = v62;
      v65 = _stringCompareWithSmolCheck(_:_:expecting:)(v58, v60, v61, v62, 0);
      swift_bridgeObjectRelease(v60);
      v66 = swift_bridgeObjectRelease(v64);
      if ((v65 & 1) == 0)
        goto LABEL_31;
    }
    v67 = Date._bridgeToObjectiveC()().super.isa;
    v68 = objc_msgSend(v104, "stringForObjectValue:", v67);

    if (v68)
    {
      v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
      v71 = v70;

      v72 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v108._countAndFlagsBits = 0xD00000000000005ALL;
      v108._object = v91;
      v73._countAndFlagsBits = 0x6F6F4D206C6C7546;
      v73._object = (void *)0xE90000000000006ELL;
      v74._countAndFlagsBits = 0;
      v74._object = (void *)0xE000000000000000;
      v75 = NSLocalizedString(_:tableName:bundle:value:comment:)(v73, (Swift::String_optional)0, (NSBundle)v72, v74, v108);

      v93 = v30[2];
      v76 = v93 != 0;
      v77 = v99;
      v78 = v30;
      v79 = v97;
      v80 = (uint64_t)v97 + *(int *)(v99 + 24);
      *(_QWORD *)v80 = v69;
      *(_QWORD *)(v80 + 8) = v71;
      *(_BYTE *)(v80 + 16) = 0;
      v81 = type metadata accessor for OverviewTableValueString(0);
      swift_storeEnumTagMultiPayload(v80, v81, 1);
      _s7Weather24LocationCompositionStateOwst_0(v80, 0, 1, v81);
      v79->_countAndFlagsBits = v69;
      v79->_object = v71;
      v79[1] = v75;
      *((_BYTE *)&v79->_countAndFlagsBits + *(int *)(v77 + 28)) = v76;
      v30 = v78;
      swift_bridgeObjectRetain(v71);
      if ((swift_isUniquelyReferenced_nonNull_native(v78) & 1) == 0)
      {
        sub_1005FED88();
        v30 = v85;
      }
      v82 = v30[2];
      v8 = v94;
      v7 = v95;
      v31 = v100;
      v29 = v105;
      v26 = v106;
      if (v82 >= v30[3] >> 1)
      {
        sub_1005FED88();
        v30 = v86;
      }
      v30[2] = v82 + 1;
      sub_1000DB648((uint64_t)v97, (uint64_t)v30+ ((*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80))+ *(_QWORD *)(v98 + 72) * v82, type metadata accessor for OverviewTableRowViewModel);
    }
LABEL_31:
    (*(void (**)(char *, uint64_t, __n128))(v8 + 8))(v31, v7, v66);
    v29 += v101;
    --v26;
  }
  while (v26);
  swift_bridgeObjectRelease(v89);
  return v30;
}

uint64_t sub_1002209A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = sub_1000BA294(&qword_100BCBD08);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v6, v7);
}

uint64_t sub_100220A48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t result;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t (*v52)(char *, uint64_t, uint64_t);
  void (*v53)(char *, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t v74;
  os_log_type_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t, uint64_t);
  char *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(char *, char *, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t, uint64_t);
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  unsigned int v118;
  void (*v119)(char *, uint64_t);
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123[3];
  uint64_t v124;
  void (*v125)(char *, uint64_t);
  uint64_t v126;
  uint64_t v127;
  _BYTE v128[16];
  char v129[16];
  char v130[8];
  char v131[8];
  char v132[8];

  v105 = a6;
  v115 = a5;
  v118 = a4;
  v113 = type metadata accessor for InterpolatedEphemeris(0);
  v110 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v109 = (char *)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000BA294(&qword_100BCBD20);
  v13 = __chkstk_darwin(v12);
  v112 = (uint64_t)&v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v111 = (char *)&v101 - v15;
  v108 = type metadata accessor for Calendar.Component(0);
  v119 = *(void (**)(char *, uint64_t))(v108 - 8);
  __chkstk_darwin(v108);
  v17 = (char *)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v18);
  v20 = (char *)&v101 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD **)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v116 = (char *)&v101 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v117 = (char *)&v101 - v26;
  __chkstk_darwin(v25);
  v28 = (char *)&v101 - v27;
  swift_beginAccess(a1, v132, 0, 0);
  v29 = (void (*)(char *, uint64_t, uint64_t))v22[2];
  v120 = a1;
  v29(v28, a1, v21);
  v30 = *(int *)(type metadata accessor for MoonCalendarInput(0) + 20);
  v114 = a2;
  v31 = a2 + v30;
  v106 = a3;
  LOBYTE(a3) = Date.isSameDay(as:timeZone:)(a2 + v30, a3);
  v32 = (void (*)(char *, uint64_t))v22[1];
  v121 = v28;
  v122 = v21;
  v32(v28, v21);
  if ((a3 & 1) != 0)
  {
    v33 = v122;
    v29((char *)a7, v31, v122);
    goto LABEL_3;
  }
  v104 = a7;
  v36 = MoonPhase.illuminatedFraction.getter(v118);
  if ((v37 & 1) != 0)
  {
    v97 = v120;
    swift_beginAccess(v120, v123, 0, 0);
    v98 = v121;
    v99 = v122;
    v29(v121, v97, v122);
    v100 = v104;
    Date.noon(timeZone:)(v106);
    v32(v98, v99);
    v34 = v100;
    v35 = v99;
    return _s7Weather24LocationCompositionStateOwst_0(v34, 0, 1, v35);
  }
  v103 = v36;
  v38 = v108;
  (*((void (**)(char *, _QWORD, uint64_t))v119 + 13))(v17, enum case for Calendar.Component.day(_:), v108);
  v39 = v115;
  v40 = v120;
  swift_beginAccess(v120, v131, 0, 0);
  v41 = v121;
  v42 = v122;
  v29(v121, v40, v122);
  Calendar.date(byAdding:value:to:wrappingComponents:)(v17, 1, v41, 0);
  v32(v41, v42);
  (*((void (**)(char *, uint64_t))v119 + 1))(v17, v38);
  result = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v20, 1, v42);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    return result;
  }
  v44 = v117;
  v45 = v20;
  v46 = v122;
  v102 = (void (*)(char *, char *, uint64_t))v22[4];
  v102(v117, v45, v122);
  swift_beginAccess(v40, v130, 0, 0);
  swift_beginAccess(v40, v129, 0, 0);
  v47 = v121;
  v29(v121, v40, v46);
  v48 = v116;
  Date.wc_addHours(_:calendar:)(0, v39);
  v32(v47, v46);
  if ((static Date.< infix(_:_:)(v48, v44) & 1) == 0)
  {
LABEL_14:
    v32(v48, v122);
LABEL_15:
    if (qword_100BC2450 != -1)
      swift_once(&qword_100BC2450, sub_1006F3844);
    v71 = type metadata accessor for Logger(0);
    v72 = sub_1000AECD4(v71, (uint64_t)qword_100CAF0E8);
    v73 = Logger.logObject.getter(v72);
    v75 = static os_log_type_t.error.getter(v73, v74);
    v76 = v75;
    if (os_log_type_enabled(v73, v75))
    {
      v77 = swift_slowAlloc(32, -1);
      v78 = swift_slowAlloc(64, -1);
      v119 = v32;
      v79 = v78;
      v123[0] = v78;
      *(_DWORD *)v77 = 136446722;
      LODWORD(v116) = v76;
      v80 = MoonPhase.description.getter(v118);
      v82 = v81;
      v127 = sub_1000CE1C8(v80, v81, v123);
      v83 = v122;
      v84 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, v128);
      swift_bridgeObjectRelease(v82);
      *(_WORD *)(v77 + 12) = 2050;
      v127 = v103;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, v128);
      *(_WORD *)(v77 + 22) = 2082;
      swift_beginAccess(v120, &v127, 0, 0);
      v85 = v121;
      v29(v121, v120, v83);
      sub_1000A84E0((unint64_t *)&qword_100BC52F0, (uint64_t)&protocol conformance descriptor for Date);
      v86 = dispatch thunk of CustomStringConvertible.description.getter(v83);
      v88 = v87;
      v119(v85, v83);
      v126 = sub_1000CE1C8(v86, v88, v123);
      v40 = v120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127);
      v89 = v88;
      v29 = v84;
      swift_bridgeObjectRelease(v89);
      _os_log_impl((void *)&_mh_execute_header, v73, (os_log_type_t)v116, "Did not find hour in day that matched expected illuminated fraction; moonPhase=%{public}s, expectedIlluminatedFr"
        "action=%{public}f, day=%{public}s",
        (uint8_t *)v77,
        0x20u);
      swift_arrayDestroy(v79, 2);
      v90 = v79;
      v32 = v119;
      swift_slowDealloc(v90, -1, -1);
      v91 = v77;
      v44 = v117;
      swift_slowDealloc(v91, -1, -1);
    }

    v92 = v104;
    v93 = v106;
    swift_beginAccess(v40, v123, 0, 0);
    v94 = v121;
    v95 = v40;
    v96 = v122;
    v29(v121, v95, v122);
    Date.noon(timeZone:)(v93);
    v32(v94, v96);
    v32(v44, v96);
    v34 = v92;
    v35 = v96;
    return _s7Weather24LocationCompositionStateOwst_0(v34, 0, 1, v35);
  }
  v108 = v105 + 56;
  v49 = 1;
  v107 = v29;
  v50 = v121;
  while (1)
  {
    sub_100043CA8(v108, (uint64_t)v123);
    v51 = v122;
    v52 = (uint64_t (*)(char *, uint64_t, uint64_t))v29;
    v53 = v32;
    v54 = v44;
    v55 = v124;
    v119 = v125;
    sub_1000DB418(v123, v124);
    v56 = v52(v50, v40, v51);
    v57 = v51;
    v58 = v118;
    v59 = Location.coordinate.getter(v56);
    v60 = v54;
    v32 = v53;
    v61 = v58;
    v62 = (uint64_t)v111;
    dispatch thunk of MoonInterpolationProviderType.interpolate(for:startOfDay:endOfDay:coordinate:dayMoonPhase:)(v48, v50, v60, v61, v55, v119, v59);
    v53(v50, v57);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v123);
    v63 = v112;
    sub_1001A7210(v62, v112, &qword_100BCBD20);
    v64 = v113;
    if (_s7Weather24LocationCompositionStateOwet_0(v63, 1, v113) != 1)
      break;
    sub_100021AA4(v62, &qword_100BCBD20);
    v48 = v116;
    v53(v116, v122);
    sub_100021AA4(v63, &qword_100BCBD20);
LABEL_12:
    v44 = v117;
    v40 = v120;
    v29 = v107;
    if (v49 == 25)
      goto LABEL_15;
    v69 = v121;
    v70 = v122;
    v107(v121, v120, v122);
    Date.wc_addHours(_:calendar:)(v49, v115);
    v32(v69, v70);
    ++v49;
    if ((static Date.< infix(_:_:)(v48, v44) & 1) == 0)
      goto LABEL_14;
  }
  v65 = v110;
  v66 = v109;
  v67 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v110 + 32))(v109, v63, v64);
  InterpolatedEphemeris.illuminatedFraction.getter(v67);
  v68 = sub_100491DA0();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v64);
  sub_100021AA4(v62, &qword_100BCBD20);
  if ((v68 & 1) == 0)
  {
    v48 = v116;
    v53(v116, v122);
    goto LABEL_12;
  }
  v33 = v122;
  v53(v117, v122);
  a7 = v104;
  v102((char *)v104, v116, v33);
LABEL_3:
  v34 = a7;
  v35 = v33;
  return _s7Weather24LocationCompositionStateOwst_0(v34, 0, 1, v35);
}

uint64_t sub_100221474()
{
  uint64_t v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 56));
  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t type metadata accessor for MoonCalendarViewModelFactory()
{
  return objc_opt_self(_TtC7Weather28MoonCalendarViewModelFactory);
}

uint64_t sub_1002214C0(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v13;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v8 = (unint64_t *)((char *)&v13 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_100605B40(0, v6, v8);
    sub_10022161C(v8, v6, v2);
    if (v1)
      swift_willThrow();
    else
      return v9;
  }
  else
  {
    v10 = (unint64_t *)swift_slowAlloc(v7, -1);
    sub_100605B40(0, v6, v10);
    sub_10022161C(v10, v6, v2);
    v2 = v11;
    swift_slowDealloc(v10, -1, -1);
  }
  return v2;
}

void sub_10022161C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  char v36;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;

  v38 = a2;
  v39 = a1;
  v4 = type metadata accessor for CalendarMoonPhaseData(0);
  v43 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (unsigned __int8 *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (unsigned __int8 *)&v38 - v8;
  v10 = 0;
  v11 = (_QWORD *)a3;
  v12 = *(_QWORD *)(a3 + 64);
  v40 = 0;
  v41 = a3 + 64;
  v13 = 1 << *(_BYTE *)(a3 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v42 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v10 << 6);
      goto LABEL_20;
    }
    v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v18 >= v42)
      goto LABEL_37;
    v19 = *(_QWORD *)(v41 + 8 * v18);
    ++v10;
    if (!v19)
    {
      v10 = v18 + 1;
      if (v18 + 1 >= v42)
        goto LABEL_37;
      v19 = *(_QWORD *)(v41 + 8 * v10);
      if (!v19)
      {
        v10 = v18 + 2;
        if (v18 + 2 >= v42)
          goto LABEL_37;
        v19 = *(_QWORD *)(v41 + 8 * v10);
        if (!v19)
          break;
      }
    }
LABEL_19:
    v15 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_20:
    sub_1002219BC(v11[7] + *(_QWORD *)(v43 + 72) * v17, (uint64_t)v9);
    v21 = MoonPhase.rawValue.getter(*v9);
    v23 = v22;
    v24 = MoonPhase.rawValue.getter(4);
    if (v21 == v24 && v23 == v25)
    {
      swift_bridgeObjectRelease_n(v23, 2);
      sub_1002219BC((uint64_t)v9, (uint64_t)v7);
      goto LABEL_33;
    }
    v27 = v25;
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, v24, v25, 0);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v27);
    sub_1002219BC((uint64_t)v9, (uint64_t)v7);
    if ((v28 & 1) != 0)
    {
LABEL_33:
      sub_100221A00((uint64_t)v7);
      sub_100221A00((uint64_t)v9);
LABEL_34:
      *(unint64_t *)((char *)v39 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      if (__OFADD__(v40++, 1))
      {
        __break(1u);
LABEL_37:
        sub_1005DB9E8(v39, v38, v40, v11);
        return;
      }
    }
    else
    {
      v29 = MoonPhase.rawValue.getter(*v7);
      v31 = v30;
      v32 = MoonPhase.rawValue.getter(0);
      if (v29 == v32 && v31 == v33)
      {
        swift_bridgeObjectRelease_n(v31, 2);
        goto LABEL_33;
      }
      v35 = v33;
      v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, v32, v33, 0);
      swift_bridgeObjectRelease(v31);
      swift_bridgeObjectRelease(v35);
      sub_100221A00((uint64_t)v7);
      sub_100221A00((uint64_t)v9);
      if ((v36 & 1) != 0)
        goto LABEL_34;
    }
  }
  v20 = v18 + 3;
  if (v20 >= v42)
    goto LABEL_37;
  v19 = *(_QWORD *)(v41 + 8 * v20);
  if (v19)
  {
    v10 = v20;
    goto LABEL_19;
  }
  while (1)
  {
    v10 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v10 >= v42)
      goto LABEL_37;
    v19 = *(_QWORD *)(v41 + 8 * v10);
    ++v20;
    if (v19)
      goto LABEL_19;
  }
LABEL_39:
  __break(1u);
}

uint64_t sub_10022193C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 64;
  for (i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_1002219BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CalendarMoonPhaseData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100221A00(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CalendarMoonPhaseData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100221A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CalendarMoonPhaseData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_100221A80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = sub_1000878BC();
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_1000986FC();
  v20 = v4;
  sub_10009D2A4();
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v19 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v19 - v9;
  type metadata accessor for LocationViewComponent(0);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100098728();
  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100098728();
  v15 = v14 - v13;
  v16 = *(_QWORD *)(a1 + 16);
  swift_retain();
  sub_100520630();
  v19 = v17;
  swift_release(v16);
  sub_1000C44D4(OBJC_IVAR____TtCV7Weather31LocationSevereNewsConfiguration8_Storage_map);
  sub_1000BD32C();
  sub_1000C5218();
  _s7Weather24LocationCompositionStateOwst_0(v15, 0, 1, v2);
  sub_1000C44D4(OBJC_IVAR____TtCV7Weather31LocationSevereNewsConfiguration8_Storage_airQuality);
  sub_1000BD32C();
  sub_1000C5218();
  sub_1000C44D4(OBJC_IVAR____TtCV7Weather31LocationSevereNewsConfiguration8_Storage_newsArticle);
  sub_1000BD32C();
  sub_1000C5218();
  sub_1000C44D4(OBJC_IVAR____TtCV7Weather31LocationSevereNewsConfiguration8_Storage_severeAlert);
  v18 = v20;
  sub_1000BD32C();
  sub_1000C5218();
  sub_1001F18FC(v19, v15, v10, v8, v18);
  sub_100098640();
}

void sub_100221C28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 *v20;
  __n128 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __n128 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __n128 *v78;
  __n128 *v79;
  uint64_t v80;
  uint64_t v81;
  __n128 *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __n128 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __n128 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __n128 *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __n128 *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __n128 *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __n128 *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __n128 *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  _BYTE v137[24];

  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100098728();
  v5 = v4 - v3;
  v6 = sub_1000878BC();
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100098728();
  v10 = v9 - v8;
  v11 = a1;
  v12 = a1 + OBJC_IVAR____TtCV7Weather17SevereNewsContent8_Storage_map;
  sub_1000992EC(a1 + OBJC_IVAR____TtCV7Weather17SevereNewsContent8_Storage_map, (uint64_t)v137);
  sub_10003773C(v12, v5, &qword_100BC4A98);
  if (_s7Weather24LocationCompositionStateOwet_0(v5, 1, v6) == 1)
  {
    sub_100021A14(v5, &qword_100BC4A98);
    v13 = sub_1000BA294(&qword_100BCC750);
    v14 = swift_allocObject(v13, 272, 7);
    *(_OWORD *)(v14 + 16) = xmmword_10097FA60;
    v15 = sub_1000BA294(&qword_100BCC758);
    v16 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v17 = v16 + *(_QWORD *)(v7 + 72);
    v18 = *(_QWORD *)(v7 + 72);
    v19 = v15;
    v20 = (__n128 *)sub_1000C2514(v15, v17);
    v21 = sub_100099954(v20, (__n128)xmmword_10097CA50);
    v22 = v11;
    sub_10009D3BC(v11 + OBJC_IVAR____TtCV7Weather17SevereNewsContent8_Storage_severeAlert, (uint64_t)v21 + v16);
    *(_QWORD *)(v14 + 32) = sub_1000B4580();
    *(_QWORD *)(v14 + 40) = v23;
    *(_QWORD *)(v14 + 48) = v24;
    v25 = sub_1000C2514(v19, v17);
    *(_OWORD *)(v25 + 16) = v136;
    sub_10009D3BC(v11 + OBJC_IVAR____TtCV7Weather17SevereNewsContent8_Storage_newsArticle, v25 + v16);
    *(_QWORD *)(v14 + 56) = sub_1000B4580();
    *(_QWORD *)(v14 + 64) = v26;
    *(_QWORD *)(v14 + 72) = v27;
    v28 = (__n128 *)sub_1000C2514(v19, v17);
    sub_1000BD314(v28);
    sub_10009D3BC(v29 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, v30);
    *(_QWORD *)(v14 + 80) = sub_1000B4580();
    *(_QWORD *)(v14 + 88) = v31;
    *(_QWORD *)(v14 + 96) = v32;
    v33 = (__n128 *)sub_1000C2514(v19, v17);
    sub_1000BD314(v33);
    sub_10009D3BC(v34 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v35);
    *(_QWORD *)(v14 + 104) = sub_1000B4580();
    *(_QWORD *)(v14 + 112) = v36;
    *(_QWORD *)(v14 + 120) = v37;
    v38 = sub_1000C2514(v19, v17);
    *(_OWORD *)(v38 + 16) = v136;
    sub_10009D3BC(v11 + OBJC_IVAR____TtCV7Weather17SevereNewsContent8_Storage_airQuality, v38 + v16);
    *(_QWORD *)(v14 + 128) = sub_100080C44(v38);
    *(_QWORD *)(v14 + 136) = v39;
    *(_QWORD *)(v14 + 144) = v40;
    v41 = v18;
    v133 = v16 + 2 * v18;
    v42 = (__n128 *)sub_1000C2514(v19, v133);
    v43 = (char *)sub_100099954(v42, (__n128)xmmword_10097DA20) + v16;
    v44 = *(_QWORD *)(v11 + 16);
    v45 = sub_1000C1D24(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex);
    sub_1000C3608(v45, v46);
    sub_1000C3608(v44 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, (uint64_t)&v43[v41]);
    *(_QWORD *)(v14 + 152) = sub_1000B4580();
    *(_QWORD *)(v14 + 160) = v47;
    *(_QWORD *)(v14 + 168) = v48;
    v49 = (__n128 *)sub_1000C2514(v19, v133);
    sub_100098A24(v49);
    v132 = v22;
    v50 = *(_QWORD *)(v22 + 16);
    v51 = sub_1000C1D24(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind);
    sub_10008611C(v51, v52);
    sub_10008611C(v50 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)&v43[v41]);
    *(_QWORD *)(v14 + 176) = sub_1000B4580();
    *(_QWORD *)(v14 + 184) = v53;
    *(_QWORD *)(v14 + 192) = v54;
    v55 = (__n128 *)sub_1000C2514(v19, v133);
    sub_100098A24(v55);
    v56 = *(_QWORD *)(v22 + 16);
    v57 = sub_1000C1D24(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike);
    sub_1000C3608(v57, v58);
    sub_100095B78(v56 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)&v43[v41], type metadata accessor for LocationComponentContainerViewModel);
    *(_QWORD *)(v14 + 200) = sub_1000B4580();
    *(_QWORD *)(v14 + 208) = v59;
    *(_QWORD *)(v14 + 216) = v60;
    v61 = (__n128 *)sub_1000C2514(v19, v133);
    sub_100098A24(v61);
    v62 = *(_QWORD *)(v22 + 16);
    v63 = sub_1000C1D24(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility);
    sub_100098A1C(v63, v64);
    sub_100098A1C(v62 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, (uint64_t)&v43[v41]);
    *(_QWORD *)(v14 + 224) = sub_1000B4580();
    *(_QWORD *)(v14 + 232) = v65;
    *(_QWORD *)(v14 + 240) = v66;
    v67 = sub_1000C2514(v19, v133);
    *(_OWORD *)(v67 + 16) = v136;
    v68 = *(_QWORD *)(v132 + 16);
    sub_100098A1C(v68 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, v67 + v16);
    sub_100098A1C(v68 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, v67 + v16 + v41);
    *(_QWORD *)(v14 + 248) = sub_100080C44(v67);
    *(_QWORD *)(v14 + 256) = v69;
    *(_QWORD *)(v14 + 264) = v70;
  }
  else
  {
    sub_10007C77C(v5, v10, type metadata accessor for LocationComponentContainerViewModel);
    v71 = sub_1000BA294(&qword_100BCC750);
    v72 = swift_allocObject(v71, 296, 7);
    *(_OWORD *)(v72 + 16) = xmmword_100989890;
    v73 = sub_1000BA294(&qword_100BCC758);
    v135 = *(_QWORD *)(v7 + 72);
    v74 = *(unsigned __int8 *)(v7 + 80);
    v75 = (v74 + 32) & ~v74;
    v76 = v74 | 7;
    v77 = v73;
    v78 = (__n128 *)sub_1000C3600(v73, v75 + v135);
    v79 = sub_100099954(v78, (__n128)xmmword_10097CA50);
    sub_1000B4590(a1 + OBJC_IVAR____TtCV7Weather17SevereNewsContent8_Storage_severeAlert, (uint64_t)v79 + v75);
    *(_QWORD *)(v72 + 32) = sub_1000B4588();
    *(_QWORD *)(v72 + 40) = v80;
    *(_QWORD *)(v72 + 48) = v81;
    v82 = (__n128 *)sub_1000BA5D8();
    sub_100098A38(v82);
    sub_1000B4590(a1 + OBJC_IVAR____TtCV7Weather17SevereNewsContent8_Storage_newsArticle, v83);
    *(_QWORD *)(v72 + 56) = sub_1000B4588();
    *(_QWORD *)(v72 + 64) = v84;
    *(_QWORD *)(v72 + 72) = v85;
    v86 = (__n128 *)sub_1000BA5D8();
    sub_100098A48(v86);
    sub_1000B4590(v87 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, v88);
    *(_QWORD *)(v72 + 80) = sub_1000B4588();
    *(_QWORD *)(v72 + 88) = v89;
    *(_QWORD *)(v72 + 96) = v90;
    v91 = (__n128 *)sub_1000BA5D8();
    sub_100098A48(v91);
    sub_1000B4590(v92 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v93);
    *(_QWORD *)(v72 + 104) = sub_1000B4588();
    *(_QWORD *)(v72 + 112) = v94;
    *(_QWORD *)(v72 + 120) = v95;
    v96 = (__n128 *)sub_1000BA5D8();
    sub_100098A38(v96);
    sub_1000B4590(a1 + OBJC_IVAR____TtCV7Weather17SevereNewsContent8_Storage_airQuality, v97);
    *(_QWORD *)(v72 + 128) = sub_1000B4588();
    *(_QWORD *)(v72 + 136) = v98;
    *(_QWORD *)(v72 + 144) = v99;
    v100 = (__n128 *)sub_1000BA5D8();
    sub_100098A38(v100);
    sub_1000B4590(v10, v101);
    *(_QWORD *)(v72 + 152) = sub_1000B4580();
    *(_QWORD *)(v72 + 160) = v102;
    *(_QWORD *)(v72 + 168) = v103;
    v134 = v75 + 2 * v135;
    v104 = (__n128 *)swift_allocObject(v77, v134, v76);
    v105 = (char *)sub_100099954(v104, (__n128)xmmword_10097DA20) + v75;
    v106 = *(_QWORD *)(a1 + 16);
    v107 = sub_10009939C(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex);
    sub_1000C3608(v107, v108);
    sub_1000C3608(v106 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, (uint64_t)&v105[v135]);
    *(_QWORD *)(v72 + 176) = sub_1000B4588();
    *(_QWORD *)(v72 + 184) = v109;
    *(_QWORD *)(v72 + 192) = v110;
    v111 = (__n128 *)sub_1000C3600(v77, v134);
    sub_1000C0D34(v111);
    v112 = sub_10009939C(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind);
    sub_100098A1C(v112, v113);
    sub_100098A1C(v106 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)&v105[v135]);
    *(_QWORD *)(v72 + 200) = sub_1000B4588();
    *(_QWORD *)(v72 + 208) = v114;
    *(_QWORD *)(v72 + 216) = v115;
    v116 = (__n128 *)sub_1000C3600(v77, v134);
    sub_1000C0D34(v116);
    v117 = sub_10009939C(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike);
    sub_1000C3608(v117, v118);
    sub_1000C3608(v106 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)&v105[v135]);
    *(_QWORD *)(v72 + 224) = sub_1000B4588();
    *(_QWORD *)(v72 + 232) = v119;
    *(_QWORD *)(v72 + 240) = v120;
    v121 = sub_1000C3600(v77, v134);
    *(_OWORD *)(v121 + 16) = v136;
    v122 = v121 + v75;
    v123 = *(_QWORD *)(a1 + 16);
    v124 = sub_10009939C(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility);
    sub_10008611C(v124, v125);
    sub_10008611C(v123 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, v122 + v135);
    *(_QWORD *)(v72 + 248) = sub_1000B4588();
    *(_QWORD *)(v72 + 256) = v126;
    *(_QWORD *)(v72 + 264) = v127;
    v128 = sub_1000C3600(v77, v134);
    *(_OWORD *)(v128 + 16) = v136;
    v129 = *(_QWORD *)(a1 + 16);
    sub_100095B78(v129 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, v128 + v75, type metadata accessor for LocationComponentContainerViewModel);
    sub_100095B78(v129 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, v128 + v75 + v135, type metadata accessor for LocationComponentContainerViewModel);
    *(_QWORD *)(v72 + 272) = sub_100080C44(v128);
    *(_QWORD *)(v72 + 280) = v130;
    *(_QWORD *)(v72 + 288) = v131;
    sub_1000215BC(v10, type metadata accessor for LocationComponentContainerViewModel);
  }
  sub_100098640();
}

void sub_100222400(char a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94[32];

  v93 = a3;
  v5 = type metadata accessor for TipPriorityQueue.GridEntry(0);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_1000986FC();
  v92 = v7;
  sub_10009D2A4();
  __chkstk_darwin(v8);
  v91 = (uint64_t)&v68 - v9;
  sub_10009D2A4();
  __chkstk_darwin(v10);
  v90 = (uint64_t)&v68 - v11;
  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100098728();
  v15 = v14 - v13;
  type metadata accessor for LocationComponentViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v68 - v20;
  sub_1000BA294(&qword_100BCC760);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  sub_1000986FC();
  v89 = v23;
  sub_10009D2A4();
  __chkstk_darwin(v24);
  v26 = (char *)&v68 - v25;
  __chkstk_darwin(v27);
  v29 = (char *)&v68 - v28;
  __chkstk_darwin(v30);
  v32 = (char *)&v68 - v31;
  if (a1)
  {
    if (a1 == 1)
    {
      if ((a2 & 1) != 0)
      {
        v33 = &qword_100BCC138;
        goto LABEL_11;
      }
    }
    else if ((a2 & 1) != 0)
    {
      v33 = &qword_100BCC548;
      goto LABEL_11;
    }
    v33 = &qword_100BCC340;
  }
  else if ((a2 & 1) != 0)
  {
    v33 = &qword_100BCBD28;
  }
  else
  {
    v33 = &qword_100BCBF30;
  }
LABEL_11:
  v34 = *((_BYTE *)v33 + 224);
  v76 = *v33;
  v75 = v33[1];
  v74 = v33[2];
  v73 = v33[3];
  v35 = v33[8];
  v79 = v33[9];
  v80 = v35;
  v36 = v33[10];
  v77 = v33[11];
  v78 = v36;
  v37 = v33[24];
  v72 = v33[25];
  v71 = v33[26];
  v70 = v33[27];
  v38 = v33[53];
  v83 = v33[54];
  v84 = v38;
  v39 = v33[55];
  v81 = v33[56];
  v82 = v39;
  v40 = v33[61];
  v87 = v33[62];
  v88 = v40;
  v41 = v93 + OBJC_IVAR____TtCV7Weather17SevereNewsContent8_Storage_map;
  v43 = v33[63];
  v42 = v33[64];
  v85 = v43;
  v86 = v42;
  sub_1000992EC(v93 + OBJC_IVAR____TtCV7Weather17SevereNewsContent8_Storage_map, (uint64_t)v94);
  sub_10003773C(v41, v15, &qword_100BC4A98);
  v44 = sub_1000878BC();
  if (_s7Weather24LocationCompositionStateOwet_0(v15, 1, v44) == 1)
  {
    sub_100021A14(v15, &qword_100BC4A98);
LABEL_16:
    v45 = 1;
    goto LABEL_17;
  }
  v69 = v37;
  sub_10009D3BC(v15 + *(int *)(v44 + 20), (uint64_t)v18);
  sub_1000215BC(v15, type metadata accessor for LocationComponentContainerViewModel);
  sub_10007C77C((uint64_t)v18, (uint64_t)v21, type metadata accessor for LocationComponentViewModel);
  if ((v34 & 1) != 0)
  {
    sub_1000215BC((uint64_t)v21, type metadata accessor for LocationComponentViewModel);
    goto LABEL_16;
  }
  sub_10007C77C((uint64_t)v21, (uint64_t)v29, type metadata accessor for LocationComponentViewModel);
  v45 = 0;
  v46 = &v29[*(int *)(v5 + 20)];
  v47 = v72;
  *(_QWORD *)v46 = v69;
  *((_QWORD *)v46 + 1) = v47;
  v48 = v70;
  *((_QWORD *)v46 + 2) = v71;
  *((_QWORD *)v46 + 3) = v48;
LABEL_17:
  sub_1000988B8((uint64_t)v29, v45);
  sub_1002228F0((uint64_t)v29, (uint64_t)v32);
  sub_10009D3BC(v93 + *(int *)(v44 + 20) + OBJC_IVAR____TtCV7Weather17SevereNewsContent8_Storage_airQuality, (uint64_t)v26);
  v49 = &v26[*(int *)(v5 + 20)];
  v50 = v75;
  *(_QWORD *)v49 = v76;
  *((_QWORD *)v49 + 1) = v50;
  v51 = v73;
  *((_QWORD *)v49 + 2) = v74;
  *((_QWORD *)v49 + 3) = v51;
  sub_1000988B8((uint64_t)v26, 0);
  v52 = sub_10009D3C4(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast);
  v53 = v90;
  sub_10009D3BC(v52, v90);
  v54 = (uint64_t *)(v53 + *(int *)(v5 + 20));
  v55 = v79;
  *v54 = v80;
  v54[1] = v55;
  v56 = v77;
  v54[2] = v78;
  v54[3] = v56;
  v57 = v89;
  sub_10003773C((uint64_t)v32, v89, &qword_100BCC760);
  v58 = sub_10009D3C4(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex);
  v59 = v91;
  sub_10009D3BC(v58, v91);
  v60 = (uint64_t *)(v59 + *(int *)(v5 + 20));
  v61 = v83;
  *v60 = v84;
  v60[1] = v61;
  v62 = v81;
  v60[2] = v82;
  v60[3] = v62;
  v63 = sub_10009D3C4(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind);
  v64 = v92;
  sub_10009D3BC(v63, v92);
  v65 = (uint64_t *)(v64 + *(int *)(v5 + 20));
  v66 = v87;
  *v65 = v88;
  v65[1] = v66;
  v67 = v86;
  v65[2] = v85;
  v65[3] = v67;
  sub_10087CED0((uint64_t)v26, v53, v57, v59, v64);
  sub_100021A14((uint64_t)v32, &qword_100BCC760);
  sub_100098640();
}

uint64_t sub_1002228F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BCC760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100222938(void (*a1)(char *, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  int64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  _QWORD v26[5];
  void (*v27)(char *, __n128);

  v27 = a1;
  v25 = sub_1000BA294(&qword_100BCC818);
  __chkstk_darwin(v25);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v23 - v8;
  sub_1006C17D4(v26, a3);
  v10 = v26[0];
  v11 = v26[3];
  v12 = v26[4];
  v23 = v26[1];
  v24 = (unint64_t)(v26[2] + 64) >> 6;
  swift_bridgeObjectRetain(a3);
  while (1)
  {
    if (v12)
    {
      v13 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_15;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v15 >= v24)
      goto LABEL_23;
    v16 = *(_QWORD *)(v23 + 8 * v15);
    if (!v16)
    {
      v17 = v11 + 2;
      if (v11 + 2 >= v24)
        goto LABEL_23;
      v16 = *(_QWORD *)(v23 + 8 * v17);
      if (v16)
        goto LABEL_13;
      v17 = v11 + 3;
      if (v11 + 3 >= v24)
        goto LABEL_23;
      v16 = *(_QWORD *)(v23 + 8 * v17);
      if (v16)
        goto LABEL_13;
      v17 = v11 + 4;
      if (v11 + 4 >= v24)
        goto LABEL_23;
      v16 = *(_QWORD *)(v23 + 8 * v17);
      if (v16)
      {
LABEL_13:
        v15 = v17;
      }
      else
      {
        v15 = v11 + 5;
        if (v11 + 5 >= v24)
          goto LABEL_23;
        v16 = *(_QWORD *)(v23 + 8 * v15);
        if (!v16)
        {
          v22 = v11 + 6;
          while (v22 < v24)
          {
            v16 = *(_QWORD *)(v23 + 8 * v22++);
            if (v16)
            {
              v15 = v22 - 1;
              goto LABEL_14;
            }
          }
LABEL_23:
          swift_release(v10);
          sub_1000B44B0();
          return;
        }
      }
    }
LABEL_14:
    v12 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v11 = v15;
LABEL_15:
    v18 = *(_QWORD *)(v10 + 48);
    v19 = type metadata accessor for Date(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v9, v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v14, v19);
    v20 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v14);
    *(_QWORD *)&v9[*(int *)(v25 + 48)] = v20;
    sub_1002234E8((uint64_t)v9, (uint64_t)v6, &qword_100BCC818);
    v21 = swift_bridgeObjectRetain(v20);
    v27(v6, v21);
    sub_100021AA4((uint64_t)v6, &qword_100BCC818);
    if (v3)
      goto LABEL_23;
  }
  __break(1u);
}

void sub_100222B7C(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  sub_100222BD4(a1, a2, a3, &qword_100BCC820, (void (*)(_QWORD *__return_ptr, uint64_t, __n128))sub_1006C17D4, type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity);
}

void sub_100222BA8(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  sub_100222BD4(a1, a2, a3, &qword_100BCC810, (void (*)(_QWORD *__return_ptr, uint64_t, __n128))sub_1006C17D4, type metadata accessor for MonthSunAverage);
}

void sub_100222BD4(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(_QWORD *__return_ptr, uint64_t, __n128), uint64_t (*a6)(_QWORD))
{
  uint64_t v6;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(_QWORD);
  uint64_t v27;
  uint64_t *v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  void (*v34)(char *);
  uint64_t *v35;
  uint64_t (*v36)(_QWORD);
  _QWORD v37[5];
  uint64_t v38;

  v35 = a4;
  v36 = a6;
  v34 = a1;
  v33 = sub_1000BA294(a4);
  __chkstk_darwin(v33);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v30 - v13;
  a5(v37, a3, v12);
  v38 = v37[0];
  v15 = v37[3];
  v16 = v37[4];
  v31 = v37[1];
  v32 = (unint64_t)(v37[2] + 64) >> 6;
  swift_bridgeObjectRetain(a3);
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_15;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v19 >= v32)
      goto LABEL_23;
    v20 = *(_QWORD *)(v31 + 8 * v19);
    if (!v20)
    {
      v21 = v15 + 2;
      if (v15 + 2 >= v32)
        goto LABEL_23;
      v20 = *(_QWORD *)(v31 + 8 * v21);
      if (v20)
        goto LABEL_13;
      v21 = v15 + 3;
      if (v15 + 3 >= v32)
        goto LABEL_23;
      v20 = *(_QWORD *)(v31 + 8 * v21);
      if (v20)
        goto LABEL_13;
      v21 = v15 + 4;
      if (v15 + 4 >= v32)
        goto LABEL_23;
      v20 = *(_QWORD *)(v31 + 8 * v21);
      if (v20)
      {
LABEL_13:
        v19 = v21;
      }
      else
      {
        v19 = v15 + 5;
        if (v15 + 5 >= v32)
          goto LABEL_23;
        v20 = *(_QWORD *)(v31 + 8 * v19);
        if (!v20)
        {
          v29 = v15 + 6;
          while (v29 < v32)
          {
            v20 = *(_QWORD *)(v31 + 8 * v29++);
            if (v20)
            {
              v19 = v29 - 1;
              goto LABEL_14;
            }
          }
LABEL_23:
          swift_release(v38);
          sub_1000B44B0();
          return;
        }
      }
    }
LABEL_14:
    v16 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v19 << 6);
    v15 = v19;
LABEL_15:
    v22 = v38;
    v23 = *(_QWORD *)(v38 + 48);
    v24 = type metadata accessor for Date(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v14, v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v18, v24);
    v25 = *(_QWORD *)(v22 + 56);
    v26 = v36;
    v27 = v36(0);
    sub_1002234B0(v25 + *(_QWORD *)(*(_QWORD *)(v27 - 8) + 72) * v18, (uint64_t)&v14[*(int *)(v33 + 48)], v26);
    v28 = v35;
    sub_1002234E8((uint64_t)v14, (uint64_t)v10, v35);
    v34(v10);
    sub_100021AA4((uint64_t)v10, v28);
    if (v6)
      goto LABEL_23;
  }
  __break(1u);
}

double sub_100222E38@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  uint64_t v11;

  v6 = sub_1000BA294(&qword_100BCB640);
  v7 = swift_allocObject(v6, 40, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1009898A0;
  *(_QWORD *)(v7 + 32) = a1;
  v11 = v7;
  specialized Array._endMutation()(v7);
  v8 = (uint64_t)a3 + *(int *)(type metadata accessor for NetworkActivityCompletion(0) + 24);
  v9 = type metadata accessor for NWActivity.CompletionReason(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v8, a2, v9);
  _s7Weather24LocationCompositionStateOwst_0(v8, 0, 1, v9);
  *a3 = _swiftEmptyArrayStorage;
  a3[1] = v11;
  *(_QWORD *)&result = swift_retain().n128_u64[0];
  return result;
}

uint64_t *sub_100222F04(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = a2[1];
    a1[1] = v6;
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for NWActivity.CompletionReason(0);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v6);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10))
    {
      v11 = sub_1000BA294(&qword_100BCC768);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
    }
  }
  return v5;
}

uint64_t *sub_100222FF8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for NWActivity.CompletionReason(0);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9))
  {
    v10 = sub_1000BA294(&qword_100BCC768);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v9);
  }
  return a1;
}

uint64_t *sub_1002230BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  v7 = a2[1];
  a1[1] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for NWActivity.CompletionReason(0);
  v12 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v11);
  v13 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v11);
  if (!v12)
  {
    v14 = *(_QWORD *)(v11 - 8);
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v9, v10, v11);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v15 = sub_1000BA294(&qword_100BCC768);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v11);
  return a1;
}

_OWORD *sub_1002231E8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for NWActivity.CompletionReason(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v6, 1, v7))
  {
    v8 = sub_1000BA294(&qword_100BCC768);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

_QWORD *sub_100223294(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for NWActivity.CompletionReason(0);
  v10 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v9);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9);
  if (!v10)
  {
    v12 = *(_QWORD *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    v13 = sub_1000BA294(&qword_100BCC768);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v9);
  return a1;
}

uint64_t sub_1002233B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002233BC);
}

uint64_t sub_1002233BC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000BA294(&qword_100BCC768);
    return _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_100223434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100223440);
}

_QWORD *sub_100223440(_QWORD *result, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *result = (a2 - 1);
  }
  else
  {
    v7 = sub_1000BA294(&qword_100BCC768);
    return (_QWORD *)_s7Weather24LocationCompositionStateOwst_0((uint64_t)v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void sub_1002234B0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = a3(0);
  sub_100089000(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  sub_10004A298();
}

void sub_1002234E8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_1000BA294(a3);
  sub_100089000(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_10004A298();
}

ValueMetadata *type metadata accessor for Measure()
{
  return &type metadata for Measure;
}

uint64_t sub_100223530(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[42] = a1;
  v2[43] = a2;
  v3 = type metadata accessor for MainActor(0);
  v2[44] = static MainActor.shared.getter(v3);
  v2[45] = dispatch thunk of Actor.unownedExecutor.getter(v3);
  v2[46] = v4;
  return sub_1000BA5E8();
}

uint64_t sub_100223594()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  unsigned __int8 *v6;
  void *v7;
  __objc2_class_ro *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void);
  double v28;
  NSObject *v29;
  unsigned __int8 *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  os_log_type_t v35;
  _BOOL4 v36;
  void *v37;
  _DWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;

  if (qword_100BC24D8 != -1)
    swift_once(&qword_100BC24D8, sub_1006F39A0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_1000AECD4(v1, (uint64_t)qword_100CAF270);
  *(_QWORD *)(v0 + 376) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)sub_100098710(2);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Performing Measure instruction", v5, 2u);
    sub_1000986F0((uint64_t)v5);
  }
  v6 = *(unsigned __int8 **)(v0 + 336);

  v7 = (void *)objc_opt_self(UIApplication);
  *(_QWORD *)(v0 + 384) = v7;
  v8 = &NetworkConnectivityMonitor;
  v9 = objc_msgSend(v7, "sharedApplication");
  *(_QWORD *)(v0 + 392) = v9;
  v10 = sub_1004142A4(*v6);
  sub_1006E462C(v10, v11, v9);
  objc_msgSend(v9, "_startHangTracer");
  v12 = sub_100223C20((uint64_t)v6, v0 + 16);
  Logger.logObject.getter(v12);
  v13 = sub_10009C0A4();
  if (os_log_type_enabled(v2, v13))
  {
    v14 = (uint8_t *)sub_100098710(12);
    v44 = sub_100098710(32);
    *(_DWORD *)v14 = 136315138;
    *(_BYTE *)(v0 + 433) = *(_BYTE *)(v0 + 16);
    v15 = sub_1000E6EEC();
    *(_QWORD *)(v0 + 328) = sub_1000B4598(v15, v16, v17, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336);
    swift_bridgeObjectRelease();
    sub_1000C5BA8();
    _os_log_impl((void *)&_mh_execute_header, v2, v13, "Started test: %s", v14, 0xCu);
    sub_1000988D8(v44);
    v8 = &NetworkConnectivityMonitor;
    sub_1000986F0(v44);
    sub_1000986F0((uint64_t)v14);
  }
  else
  {
    sub_1000C5BA8();
  }

  v19 = *(_QWORD *)(v0 + 344);
  v20 = *(_QWORD *)(v19 + 16);
  *(_QWORD *)(v0 + 400) = v20;
  if (v20)
  {
    *(_QWORD *)(v0 + 408) = 0;
    v21 = (_QWORD *)(v19 + 32);
    swift_bridgeObjectRetain(v19);
    v22 = (_QWORD *)sub_1000C44E4(v21);
    *(_QWORD *)(v0 + 416) = v22;
    v23 = sub_1000DCBBC(v22, (uint64_t)sub_100223938);
    return sub_1000C251C(v23, v24, v25, v26);
  }
  else
  {
    *(_QWORD *)&v28 = swift_release(*(_QWORD *)(v0 + 352)).n128_u64[0];
    v29 = *(NSObject **)(v0 + 376);
    v30 = *(unsigned __int8 **)(v0 + 336);
    v31 = objc_msgSend(*(id *)(v0 + 384), *(SEL *)&v8[27].flags, v28);
    v32 = sub_1004142A4(*v30);
    sub_1006E4638(v32, v33, v31);

    v34 = sub_100223C20((uint64_t)v30, v0 + 168);
    Logger.logObject.getter(v34);
    v35 = sub_10009C0A4();
    v36 = os_log_type_enabled(v29, v35);
    v37 = *(void **)(v0 + 392);
    if (v36)
    {
      v43 = *(void **)(v0 + 392);
      v38 = (_DWORD *)sub_100098710(12);
      v45 = sub_100098710(32);
      *v38 = 136315138;
      *(_BYTE *)(v0 + 432) = *(_BYTE *)(v0 + 168);
      v39 = sub_1000E6EEC();
      *(_QWORD *)(v0 + 320) = sub_1000B4598(v39, v40, v41, v42);
      sub_1000DF49C(v0 + 320, v0 + 328);
      swift_bridgeObjectRelease();
      sub_1000C5BA8();
      sub_1000C5224((void *)&_mh_execute_header, v29, v35, "Finished test: %s");
      sub_1000988D8(v45);
      sub_1000986F0(v45);
      sub_1000986F0((uint64_t)v38);

    }
    else
    {
      sub_1000C5BA8();

    }
    return sub_1000BBD48(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_100223938()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 416);
  *(_QWORD *)(*(_QWORD *)v1 + 424) = v0;
  swift_task_dealloc(v2);
  if (v0)
    swift_bridgeObjectRelease();
  return sub_1000BA5E8();
}

uint64_t sub_10022399C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  NSObject *v4;
  unsigned __int8 *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  _BOOL4 v11;
  void *v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 408) + 1;
  if (v1 == *(_QWORD *)(v0 + 400))
  {
    v2 = *(_QWORD *)(v0 + 352);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v3 = swift_release(v2).n128_u64[0];
    v4 = *(NSObject **)(v0 + 376);
    v5 = *(unsigned __int8 **)(v0 + 336);
    v6 = objc_msgSend(*(id *)(v0 + 384), "sharedApplication", v3);
    v7 = sub_1004142A4(*v5);
    sub_1006E4638(v7, v8, v6);

    v9 = sub_100223C20((uint64_t)v5, v0 + 168);
    Logger.logObject.getter(v9);
    v10 = sub_10009C0A4();
    v11 = os_log_type_enabled(v4, v10);
    v12 = *(void **)(v0 + 392);
    if (v11)
    {
      v13 = (_DWORD *)sub_100098710(12);
      v24 = sub_100098710(32);
      *v13 = 136315138;
      *(_BYTE *)(v0 + 432) = *(_BYTE *)(v0 + 168);
      v14 = sub_1000E6EEC();
      *(_QWORD *)(v0 + 320) = sub_1000B4598(v14, v15, v16, v17);
      sub_1000DF49C(v0 + 320, v0 + 328);
      swift_bridgeObjectRelease();
      sub_100223C5C((_QWORD *)(v0 + 168));
      sub_1000C5224((void *)&_mh_execute_header, v4, v10, "Finished test: %s");
      sub_1000988D8(v24);
      sub_1000986F0(v24);
      sub_1000986F0((uint64_t)v13);
    }
    else
    {
      sub_100223C5C((_QWORD *)(v0 + 168));
    }

    return sub_1000BBD48(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    *(_QWORD *)(v0 + 408) = v1;
    v18 = (_QWORD *)sub_1000C44E4((_QWORD *)(*(_QWORD *)(v0 + 344) + 40 * v1 + 32));
    *(_QWORD *)(v0 + 416) = v18;
    v19 = sub_1000DCBBC(v18, (uint64_t)sub_100223938);
    return sub_1000C251C(v19, v20, v21, v22);
  }
}

uint64_t sub_100223B54()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 352);

  swift_release(v1);
  return sub_1000950D8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100223B8C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_100BCC834);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100223BE0;
  return sub_100223530(a1, v4);
}

uint64_t sub_100223BE0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return sub_1000950D8(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_100223C20(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ExecutionContext(a2, a1);
  return a2;
}

_QWORD *sub_100223C5C(_QWORD *a1)
{
  destroy for ExecutionContext(a1);
  return a1;
}

uint64_t sub_100223C90(uint64_t a1)
{
  return sub_100223CB0(a1, (void (*)(_QWORD))&type metadata accessor for Date, 0);
}

uint64_t sub_100223CA0(uint64_t a1)
{
  return sub_100223CB0(a1, (void (*)(_QWORD))&type metadata accessor for DetailCondition, 1);
}

uint64_t sub_100223CB0(uint64_t a1, void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  _OWORD v17[2];
  uint64_t v18;

  v7 = sub_1000CC914();
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100098728();
  v11 = v10 - v9;
  v12 = *(uint64_t (**)(uint64_t))(v3 + 16);
  a2(0);
  v13 = sub_1000DB780();
  v14(v13, a1);
  v15 = sub_1000B45A4();
  swift_storeEnumTagMultiPayload(v11, v15, a3);
  sub_1000C5230(v11, v7);
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  swift_retain();
  sub_1000A5EBC(v11, (uint64_t)v17, v12);
  sub_100159C94((uint64_t)v17);
  sub_10006BD20(v11, type metadata accessor for MainAction);
  return sub_10009880C();
}

void sub_100223D98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[48];

  v3 = sub_1000CC914();
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_1000C3610();
  sub_10022406C(a1, v1);
  v5 = sub_1000B45A4();
  swift_storeEnumTagMultiPayload(v1, v5, 2);
  sub_1000C5230(v1, v3);
  sub_1000BA5F4();
  sub_1000BBD64();
  sub_100159C94((uint64_t)v6);
  sub_10006BD20(v1, type metadata accessor for MainAction);
  sub_10009880C();
  sub_10004A2A0();
}

void sub_100223E30()
{
  sub_100223FC0(3);
}

uint64_t sub_100223E38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v2 = v1;
  v4 = type metadata accessor for DetailCondition(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100098728();
  v8 = v7 - v6;
  v9 = type metadata accessor for DetailViewVisibilityTrackerModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = v12 - v11;
  v15 = *(_QWORD *)(v1 + 56);
  v14 = *(_QWORD *)(v1 + 64);
  sub_1000DD7E8();
  (*(void (**)(uint64_t))(*(_QWORD *)(v14 + 8) + 32))(v15);
  v16 = *(_QWORD *)(v2 + 56);
  v25 = *(_QWORD *)(v2 + 64);
  sub_1000DD7E8();
  v17 = type metadata accessor for ConditionDetailViewModel.Model(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, a1 + *(int *)(v17 + 36), v4);
  sub_1007BC490(v8, v13);
  v18 = a1 + *(int *)(v17 + 48);
  type metadata accessor for Location(0);
  v19 = sub_1000DB780();
  v20(v19, v18);
  v21 = v13 + *(int *)(v9 + 24);
  v22 = enum case for DetailViewOrigin.selector(_:);
  v23 = type metadata accessor for DetailViewOrigin(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v21, v22, v23);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 + 8) + 24))(v13, v16);
  return sub_10006BD20(v13, type metadata accessor for DetailViewVisibilityTrackerModel);
}

void sub_100223FB8()
{
  sub_100223FC0(4);
}

void sub_100223FC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[48];

  v3 = sub_1000CC914();
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_1000C3610();
  v5 = sub_1000B45A4();
  swift_storeEnumTagMultiPayload(v1, v5, a1);
  sub_1000C5230(v1, v3);
  sub_1000BA5F4();
  sub_1000BBD64();
  sub_100159C94((uint64_t)v6);
  sub_10006BD20(v1, type metadata accessor for MainAction);
  sub_10009880C();
  sub_10004A2A0();
}

uint64_t type metadata accessor for ConditionDetailInteractor()
{
  return objc_opt_self(_TtC7Weather25ConditionDetailInteractor);
}

uint64_t sub_10022406C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DetailChartSelection(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002240B0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[5];
  _QWORD v26[3];
  uint64_t v27;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BCC990);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (v27)
  {
    v8 = a1[3];
    v9 = a1[4];
    sub_1000DB418(a1, v8);
    v10 = sub_1000BA294(&qword_100BC4428);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
    if (result)
    {
      v11 = result;
      v12 = sub_100068EB4((uint64_t)v26, v27);
      __chkstk_darwin(v12);
      v14 = (_QWORD *)((char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *))(v15 + 16))(v14);
      v16 = *v14;
      v17 = type metadata accessor for MoonDetailInteractor();
      v25[3] = v17;
      v25[4] = &off_100B83150;
      v25[0] = v16;
      v18 = type metadata accessor for MoonDetailModule();
      v19 = (_QWORD *)swift_allocObject(v18, 64, 7);
      v20 = sub_100068EB4((uint64_t)v25, v17);
      __chkstk_darwin(v20);
      v22 = (_QWORD *)((char *)v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *))(v23 + 16))(v22);
      v24 = *v22;
      v19[5] = v17;
      v19[6] = &off_100B83150;
      v19[2] = v24;
      v19[7] = v11;
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v25);
      result = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v26);
      a2[3] = v18;
      a2[4] = &off_100B6A920;
      *a2 = v19;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

double sub_100224288()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  v0 = sub_1000BA294(&qword_100BCC988);
  v1 = RegistrationContainer.register<A>(_:name:factory:)(v0, 0, 0, sub_10022437C, 0, v0);
  swift_release(v1);
  v2 = sub_1000BA294(&qword_100BCC990);
  v3 = RegistrationContainer.register<A>(_:name:factory:)(v2, 0, 0, sub_100224464, 0, v2);
  swift_release(v3);
  v4 = sub_1000BA294(&qword_100BCC998);
  v5 = RegistrationContainer.register<A>(_:name:factory:)(v4, 0, 0, sub_100224684, 0, v4);
  swift_release(v5);
  v6 = sub_1000BA294(&qword_100BCC9A0);
  v7 = RegistrationContainer.register<A>(_:name:factory:)(v6, 0, 0, sub_100224698, 0, v6);
  swift_release(v7);
  v8 = sub_1000BA294(&qword_100BC4428);
  v9 = RegistrationContainer.register<A>(_:name:factory:)(v8, 0, 0, sub_1002248D8, 0, v8);
  *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  return result;
}

uint64_t sub_10022437C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = type metadata accessor for Tracker(0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (result)
  {
    v8 = result;
    v9 = a1[3];
    v10 = a1[4];
    sub_1000DB418(a1, v9);
    v11 = sub_1000BA294(&qword_100BC43F8);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v11, v11, v9, v10);
    if (v14)
    {
      a2[3] = (uint64_t)&type metadata for MoonDetailTracker;
      a2[4] = (uint64_t)&off_100B78C28;
      v12 = swift_allocObject(&unk_100B65320, 64, 7);
      *a2 = v12;
      *(_QWORD *)(v12 + 16) = v8;
      return sub_10003C800(&v13, v12 + 24);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100224464@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  ValueWitnessTable *v23;
  uint64_t *v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BC43F0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  v8 = v32;
  if (v32)
  {
    v28 = v33;
    v9 = a1[3];
    v10 = a1[4];
    sub_1000DB418(a1, v9);
    v11 = sub_1000BA294(&qword_100BCC988);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v11, v11, v9, v10);
    if (v31)
    {
      v12 = sub_100068EB4((uint64_t)v30, v31);
      __chkstk_darwin(v12);
      v14 = (_OWORD *)((char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(_OWORD *))(v15 + 16))(v14);
      v29[3] = &type metadata for MoonDetailTracker;
      v29[4] = &off_100B78C28;
      v16 = (_OWORD *)swift_allocObject(&unk_100B65320, 64, 7);
      v29[0] = v16;
      v17 = v14[1];
      v16[1] = *v14;
      v16[2] = v17;
      v16[3] = v14[2];
      v18 = type metadata accessor for MoonDetailInteractor();
      v19 = (_QWORD *)swift_allocObject(v18, 72, 7);
      v20 = sub_100068EB4((uint64_t)v29, (uint64_t)&type metadata for MoonDetailTracker);
      __chkstk_darwin(v20);
      v22 = (_OWORD *)((char *)&v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
      ((void (*)(uint64_t, uint64_t *))v23->initializeWithCopy)((uint64_t)v22, v24);
      v19[7] = &type metadata for MoonDetailTracker;
      v19[8] = &off_100B78C28;
      v25 = (_OWORD *)swift_allocObject(&unk_100B65320, 64, 7);
      v26 = v22[1];
      v25[1] = *v22;
      v25[2] = v26;
      v25[3] = v22[2];
      v19[2] = v8;
      v19[3] = v28;
      v19[4] = v25;
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v29);
      result = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v30);
      a2[3] = v18;
      a2[4] = &off_100B83150;
      *a2 = v19;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100224684@<X0>(uint64_t *a1@<X8>)
{
  return sub_10012A894((uint64_t (*)(_QWORD))type metadata accessor for MoonDetailInputFactory, (uint64_t)&off_100B61448, a1);
}

uint64_t sub_100224698@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD v27[3];
  uint64_t v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BCC9A8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v37)
  {
    __break(1u);
    goto LABEL_9;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1000BA294(&qword_100BCC9B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!v35)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v11 = a1[3];
  v12 = a1[4];
  sub_1000DB418(a1, v11);
  v13 = sub_1000BA294(&qword_100BCC9B8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
  if (!v33)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v14 = a1[3];
  v15 = a1[4];
  sub_1000DB418(a1, v14);
  v16 = sub_1000BA294(&qword_100BCC9C0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v16, v16, v14, v15);
  if (!v31)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v17 = a1[3];
  v18 = a1[4];
  sub_1000DB418(a1, v17);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&type metadata for MoonDetailDayRangeProvider, &type metadata for MoonDetailDayRangeProvider, v17, v18);
  if ((v29 & 1) != 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v19 = a1[3];
  v20 = a1[4];
  sub_1000DB418(a1, v19);
  v21 = sub_1000BA294(&qword_100BC43E8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v21, v21, v19, v20);
  if (v28)
  {
    v22 = sub_100068EB4((uint64_t)v27, v28);
    __chkstk_darwin(v22);
    v24 = (uint64_t **)((char *)v27 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t **))(v25 + 16))(v24);
    v26 = sub_100224C18(&v36, &v34, &v32, &v30, *v24);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v27);
    result = type metadata accessor for MoonDetailViewModelFactory();
    a2[3] = result;
    a2[4] = &off_100B96530;
    *a2 = v26;
    return result;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1002248D8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22[2];
  _QWORD v23[3];
  uint64_t v24;
  _UNKNOWN **v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BC43B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  v6 = v28;
  if (!v28)
  {
    __break(1u);
    goto LABEL_6;
  }
  v8 = v30;
  v7 = v31;
  v9 = v29;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1000BA294(&qword_100BCC998);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v12, v12, v10, v11);
  if (!v27)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v13 = *sub_1000DB418(v26, v27);
  v24 = type metadata accessor for MoonDetailInputFactory();
  v25 = &off_100B61448;
  v23[0] = v13;
  sub_100043CA8((uint64_t)v23, (uint64_t)v22);
  v14 = swift_allocObject(&unk_100B652A8, 56, 7);
  sub_10003C800(v22, v14 + 16);
  swift_retain();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v23);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v26);
  v15 = swift_allocObject(&unk_100B652D0, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_100224BE4;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = a1[3];
  v17 = a1[4];
  sub_1000DB418(a1, v16);
  v18 = sub_1000BA294(&qword_100BCC9A0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v18, v18, v16, v17);
  if (v27)
  {
    v19 = *sub_1000DB418(v26, v27);
    v24 = type metadata accessor for MoonDetailViewModelFactory();
    v25 = &off_100B96530;
    v23[0] = v19;
    sub_100043CA8((uint64_t)v23, (uint64_t)v22);
    v20 = swift_allocObject(&unk_100B652F8, 56, 7);
    sub_10003C800(v22, v20 + 16);
    swift_retain();
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v23);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v26);
    v21 = sub_1000BA294(&qword_100BC4428);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    return sub_1001831A4(v6, v9, v8, v7, sub_100182F48, 0, sub_1000A22C0, v15, sub_100224C10, v20);
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_100224B30(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  sub_1000DB418(a2, a2[3]);
  sub_1001D3634(a1, a3);
}

uint64_t sub_100224B78@<X0>(void (*a1)(uint64_t, uint64_t)@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  sub_1000DB418(a2, a2[3]);
  return sub_10083EAFC(a1, a3);
}

uint64_t sub_100224BC0()
{
  uint64_t v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

void sub_100224BE4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_100224B30(a1, (_QWORD *)(v2 + 16), a2);
}

uint64_t sub_100224BEC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100224C10@<X0>(void (*a1)(uint64_t, uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100224B78(a1, (_QWORD *)(v2 + 16), a2);
}

_QWORD *sub_100224C18(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[24];
  _QWORD v21[3];
  uint64_t v22;
  _UNKNOWN **v23;

  v22 = *a5;
  v9 = v22;
  v23 = &off_100B7D058;
  v21[0] = a5;
  v10 = type metadata accessor for MoonDetailViewModelFactory();
  v11 = (_QWORD *)swift_allocObject(v10, 232, 7);
  v12 = sub_100068EB4((uint64_t)v21, v22);
  __chkstk_darwin(v12);
  v14 = (uint64_t *)&v20[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  v16 = *v14;
  v11[26] = v9;
  v11[27] = &off_100B7D058;
  v11[23] = v16;
  swift_beginAccess(&unk_100C070A0, v20, 1, 0);
  v11[17] = sub_1007B18E4();
  type metadata accessor for Locale(0);
  type metadata accessor for ConditionUnits(0);
  sub_100224DA8();
  v17 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  v18 = sub_1000BA294(&qword_100BCC9D0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v11[28] = Cache.init(_:)(v17);
  sub_10003C800(a1, (uint64_t)(v11 + 2));
  sub_10003C800(a2, (uint64_t)(v11 + 7));
  sub_10003C800(a3, (uint64_t)(v11 + 12));
  sub_10003C800(a4, (uint64_t)(v11 + 18));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v21);
  return v11;
}

unint64_t sub_100224DA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCC9C8;
  if (!qword_100BCC9C8)
  {
    v1 = type metadata accessor for Locale(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Locale, v1);
    atomic_store(result, (unint64_t *)&qword_100BCC9C8);
  }
  return result;
}

uint64_t sub_100224DE8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t *sub_100224E18(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v12);
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v8 = type metadata accessor for Location(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = a3;
        v11 = 0;
        goto LABEL_10;
      case 1u:
        v13 = type metadata accessor for Location(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v9 = a1;
        v10 = a3;
        v11 = 1;
        goto LABEL_10;
      case 2u:
        v14 = type metadata accessor for Location(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v9 = a1;
        v10 = a3;
        v11 = 2;
        goto LABEL_10;
      case 3u:
        v15 = type metadata accessor for WeatherMapOverlayKind(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
        v9 = a1;
        v10 = a3;
        v11 = 3;
        goto LABEL_10;
      case 4u:
        v16 = type metadata accessor for Location(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a1, a2, v16);
        v9 = a1;
        v10 = a3;
        v11 = 4;
LABEL_10:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_100224FA8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
    case 1:
    case 2:
    case 4:
      v4 = type metadata accessor for Location(0);
      goto LABEL_4;
    case 3:
      v4 = type metadata accessor for WeatherMapOverlayKind(0);
LABEL_4:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      break;
    default:
      return result;
  }
  return result;
}

void *sub_10022501C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = type metadata accessor for Location(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = a1;
      v8 = a3;
      v9 = 0;
      goto LABEL_8;
    case 1u:
      v10 = type metadata accessor for Location(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v7 = a1;
      v8 = a3;
      v9 = 1;
      goto LABEL_8;
    case 2u:
      v11 = type metadata accessor for Location(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_8;
    case 3u:
      v12 = type metadata accessor for WeatherMapOverlayKind(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v7 = a1;
      v8 = a3;
      v9 = 3;
      goto LABEL_8;
    case 4u:
      v13 = type metadata accessor for Location(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
      v7 = a1;
      v8 = a3;
      v9 = 4;
LABEL_8:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *sub_100225184(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    sub_1002252FC((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2))
    {
      case 0u:
        v6 = type metadata accessor for Location(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        v7 = a1;
        v8 = a3;
        v9 = 0;
        goto LABEL_9;
      case 1u:
        v10 = type metadata accessor for Location(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        v7 = a1;
        v8 = a3;
        v9 = 1;
        goto LABEL_9;
      case 2u:
        v11 = type metadata accessor for Location(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        v7 = a1;
        v8 = a3;
        v9 = 2;
        goto LABEL_9;
      case 3u:
        v12 = type metadata accessor for WeatherMapOverlayKind(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        v7 = a1;
        v8 = a3;
        v9 = 3;
        goto LABEL_9;
      case 4u:
        v13 = type metadata accessor for Location(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v7 = a1;
        v8 = a3;
        v9 = 4;
LABEL_9:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1002252FC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for InteractiveMapViewAction(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_100225338(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = type metadata accessor for Location(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = a1;
      v8 = a3;
      v9 = 0;
      goto LABEL_8;
    case 1u:
      v10 = type metadata accessor for Location(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      v7 = a1;
      v8 = a3;
      v9 = 1;
      goto LABEL_8;
    case 2u:
      v11 = type metadata accessor for Location(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_8;
    case 3u:
      v12 = type metadata accessor for WeatherMapOverlayKind(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
      v7 = a1;
      v8 = a3;
      v9 = 3;
      goto LABEL_8;
    case 4u:
      v13 = type metadata accessor for Location(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
      v7 = a1;
      v8 = a3;
      v9 = 4;
LABEL_8:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *sub_1002254A0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    sub_1002252FC((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2))
    {
      case 0u:
        v6 = type metadata accessor for Location(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
        v7 = a1;
        v8 = a3;
        v9 = 0;
        goto LABEL_9;
      case 1u:
        v10 = type metadata accessor for Location(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
        v7 = a1;
        v8 = a3;
        v9 = 1;
        goto LABEL_9;
      case 2u:
        v11 = type metadata accessor for Location(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
        v7 = a1;
        v8 = a3;
        v9 = 2;
        goto LABEL_9;
      case 3u:
        v12 = type metadata accessor for WeatherMapOverlayKind(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
        v7 = a1;
        v8 = a3;
        v9 = 3;
        goto LABEL_9;
      case 4u:
        v13 = type metadata accessor for Location(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
        v7 = a1;
        v8 = a3;
        v9 = 4;
LABEL_9:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void sub_100225618()
{
  id v0;
  unint64_t v1;
  Swift::String v2;
  Swift::String_optional v3;
  NSBundle v4;
  Swift::String v5;
  uint64_t v6;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  sub_1000BA330();
  sub_10003BCE4();
  v1 = 0xD00000000000002DLL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, v4, v5, *(Swift::String *)(&v6 - 1));
  sub_1000C362C();
  sub_100099960();
}

void sub_1002256A0(uint64_t a1, uint64_t a2, char a3)
{
  id v4;
  uint64_t v5;
  uint64_t v7;
  NSBundle v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;

  v4 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  sub_1000BA330();
  sub_10003BCE4();
  if ((a3 & 1) == 0)
    v12 = 0xD00000000000006CLL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v5, *(Swift::String_optional *)&v7, v9, *(Swift::String *)&v10, *(Swift::String *)(&v13 - 1));
  sub_1000C362C();
  sub_100099960();
}

void sub_1002257A0()
{
  id v0;
  Swift::String v1;
  Swift::String_optional v2;
  NSBundle v3;
  Swift::String v4;
  uint64_t v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  sub_1000BA330();
  sub_10003BCE4();
  NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, v3, v4, *(Swift::String *)(&v5 - 1));
  sub_1000C362C();
  sub_100099960();
}

uint64_t sub_100225828()
{
  uint64_t v0;

  v0 = type metadata accessor for LocationViewCollisionOptions(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  return sub_10012AAD4();
}

uint64_t sub_10022585C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(_QWORD, _QWORD)@<X4>, _QWORD *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(_QWORD, _QWORD);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  __n128 v58;
  uint64_t v59;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(_QWORD, _QWORD);
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  _QWORD *v80;
  _QWORD *v81;

  v80 = a3;
  v81 = a6;
  v68 = a5;
  v69 = a2;
  v77 = a7;
  v78 = a4;
  v9 = sub_1000E6EF4();
  v75 = *(_QWORD *)(v9 - 8);
  v76 = v9;
  sub_10009D98C();
  __chkstk_darwin(v10);
  sub_100088FDC();
  v74 = v11;
  v12 = sub_10009876C();
  v13 = type metadata accessor for Calendar(v12);
  v72 = *(_QWORD *)(v13 - 8);
  v73 = v13;
  sub_10009D98C();
  __chkstk_darwin(v14);
  sub_100098728();
  v17 = v16 - v15;
  v18 = sub_100098778();
  v70 = *(_QWORD *)(v18 - 8);
  v71 = v18;
  sub_10009D98C();
  __chkstk_darwin(v19);
  v21 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v79 = (char *)&v61 - v23;
  v24 = sub_10009876C();
  v25 = type metadata accessor for WeatherConditionGradientModel(v24);
  v66 = *(_QWORD *)(v25 - 8);
  v67 = v25;
  sub_10009D98C();
  __chkstk_darwin(v26);
  sub_100098728();
  v29 = v28 - v27;
  type metadata accessor for VFXTestViewModel(0);
  sub_10009D98C();
  __chkstk_darwin(v30);
  sub_100098728();
  v33 = v32 - v31;
  v34 = sub_1000DB794();
  v63 = *(_QWORD *)(v34 - 8);
  v64 = v34;
  sub_10009D98C();
  __chkstk_darwin(v35);
  v61 = (char *)&v61 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for VFXTestView(0);
  sub_10009D98C();
  __chkstk_darwin(v37);
  sub_100098728();
  v40 = v39 - v38;
  *(_QWORD *)(v40 + 56) = sub_100225828;
  *(_QWORD *)(v40 + 64) = 0;
  *(_BYTE *)(v40 + 72) = 0;
  sub_100094EE4();
  v41 = sub_1000BA294(&qword_100BC44F8);
  sub_10003D2DC(&qword_100BC4500, &qword_100BC44F8);
  v65 = a1;
  *(_QWORD *)v40 = ObservedObject.init(wrappedValue:)(a1, v41, v42);
  *(_QWORD *)(v40 + 8) = v43;
  sub_10003B59C((uint64_t)a2, v40 + 16);
  v44 = v78;
  v45 = v68;
  *(_QWORD *)(v40 + 80) = v78;
  *(_QWORD *)(v40 + 88) = v45;
  sub_10003B59C((uint64_t)v81, v40 + 96);
  v47 = v80[3];
  v46 = v80[4];
  sub_1000DB418(v80, v47);
  swift_unknownObjectRetain(v44);
  sub_10017B010();
  sub_1006C9940();
  sub_1000979AC(v33, type metadata accessor for VFXTestViewModel);
  v48 = v61;
  dispatch thunk of WeatherConditionGradientManagerType.load(for:)(v29, v47, v46);
  (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v29, v67);
  v49 = (int *)v62;
  v50 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v63 + 32))(v40 + *(int *)(v62 + 36), v48, v64);
  v51 = Date.init()(v50);
  Date.startOfDay.getter(v51);
  v52 = v71;
  v68 = *(uint64_t (**)(_QWORD, _QWORD))(v70 + 8);
  v53 = v68(v21, v71);
  sub_100098A60(v53);
  Date.wc_addHours(_:calendar:)(12, v17);
  sub_1000DD7F4();
  v54 = sub_1000CC91C(v40 + v49[10]);
  sub_100098A60(v54);
  v55 = v79;
  Date.wc_addHours(_:calendar:)(6, v17);
  sub_1000DD7F4();
  v56 = sub_1000CC91C(v40 + v49[11]);
  sub_100098A60(v56);
  v57 = v55;
  Date.wc_addHours(_:calendar:)(18, v17);
  sub_1000DD7F4();
  sub_1000CC91C(v40 + v49[12]);
  v58.n128_u64[0] = 0x4056800000000000;
  v59 = v74;
  Elevation.init(_:isPM:)(0, v58);
  swift_release();
  swift_unknownObjectRelease(v78);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v81);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v69);
  v68(v57, v52);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 32))(v40 + v49[13], v59, v76);
  sub_100227310(v40, v77);
  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v80);
}

uint64_t sub_100225C34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t (*v97)(uint64_t, uint64_t, _QWORD);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t (*v110)(uint64_t, uint64_t, _QWORD);
  uint64_t v111;
  uint64_t (*v112)(uint64_t, uint64_t, _QWORD);
  uint64_t v113;
  uint64_t (*v114)(uint64_t, uint64_t, _QWORD);
  void *v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  double v129;
  uint64_t v130;
  int *v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(uint64_t, uint64_t, uint64_t);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t (*v139)(uint64_t, uint64_t, _QWORD);
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  char v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  _BYTE *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191[2];
  char v192[8];
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int *v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  uint64_t v205;
  char v206[8];
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;

  v2 = v1;
  v198 = a1;
  v3 = type metadata accessor for InternalStateWeatherConditionBackgroundModifier(0);
  sub_1000B43A4(v3, (uint64_t)&v215);
  sub_10009D98C();
  __chkstk_darwin(v4);
  sub_100088FDC();
  v194 = v5;
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_1000986FC();
  v196 = v7;
  __chkstk_darwin(v8);
  v10 = sub_1000987B4((uint64_t)&v163 - v9);
  v11 = type metadata accessor for WeatherConditionBackgroundOptions.DisplayLocation(v10);
  sub_1000B43A4(v11, (uint64_t)&v214);
  v191[1] = v12;
  sub_10009D98C();
  __chkstk_darwin(v13);
  sub_100088FDC();
  v15 = sub_1000987B4(v14);
  v16 = type metadata accessor for WeatherConditionBackgroundConfig.CameraPositionType(v15);
  sub_1000B43A4(v16, (uint64_t)&v213);
  v190 = v17;
  sub_10009D98C();
  __chkstk_darwin(v18);
  sub_100088FDC();
  v20 = sub_1000987B4(v19);
  v21 = type metadata accessor for VFXEffectViewID(v20);
  sub_1000B43A4(v21, (uint64_t)&v211);
  v187 = v22;
  sub_10009D98C();
  __chkstk_darwin(v23);
  sub_100088FDC();
  v25 = sub_1000987B4(v24);
  v26 = type metadata accessor for Location.Identifier(v25);
  sub_1000B43A4(v26, (uint64_t)v206);
  v180 = v27;
  sub_10009D98C();
  __chkstk_darwin(v28);
  sub_100088FDC();
  v30 = sub_1000987B4(v29);
  type metadata accessor for WeatherConditionBackgroundOptions(v30);
  sub_10009D98C();
  __chkstk_darwin(v31);
  sub_100088FDC();
  v193 = v32;
  sub_1000BA294(&qword_100BC3378);
  sub_10009D98C();
  __chkstk_darwin(v33);
  sub_100088FDC();
  *(_QWORD *)&v204 = v34;
  v35 = sub_10009876C();
  v36 = type metadata accessor for Elevation(v35);
  sub_1000B43A4(v36, (uint64_t)&v202);
  v173 = v37;
  sub_10009D98C();
  __chkstk_darwin(v38);
  sub_100088FDC();
  v203 = v39;
  v40 = sub_10009876C();
  v41 = type metadata accessor for CloudAltitudeKind(v40);
  sub_1000B43A4(v41, (uint64_t)&v199);
  v171 = v42;
  sub_10009D98C();
  __chkstk_darwin(v43);
  sub_100088FDC();
  v202 = v44;
  sub_1000BA294(&qword_100BCB938);
  sub_10009D98C();
  __chkstk_darwin(v45);
  sub_100088FDC();
  v201 = v46;
  v47 = sub_10009876C();
  v48 = type metadata accessor for WeatherCondition(v47);
  sub_1000B43A4(v48, (uint64_t)v192);
  v164 = v49;
  sub_10009D98C();
  __chkstk_darwin(v50);
  v200 = (char *)&v163 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_10009876C();
  type metadata accessor for VFXTestViewModel(v52);
  sub_10009D98C();
  __chkstk_darwin(v53);
  sub_100098728();
  v56 = v55 - v54;
  v57 = sub_100098778();
  sub_1000B43A4(v57, (uint64_t)v191);
  v172 = v58;
  sub_10009D98C();
  __chkstk_darwin(v59);
  sub_100088FDC();
  v61 = sub_1000987B4(v60);
  v62 = type metadata accessor for Location(v61);
  sub_1000B43A4(v62, (uint64_t)&v197);
  v169 = v63;
  sub_10009D98C();
  __chkstk_darwin(v64);
  sub_1000986FC();
  v168 = v65;
  __chkstk_darwin(v66);
  v175 = (char *)&v163 - v67;
  v68 = type metadata accessor for BackgroundAnimationData(0);
  sub_1000B43A4(v68, (uint64_t)&v212);
  v188 = v69;
  sub_10009D98C();
  __chkstk_darwin(v70);
  sub_100088FDC();
  v72 = sub_1000987B4(v71);
  v73 = type metadata accessor for BackgroundAnimationKind(v72);
  v74 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  sub_100098728();
  v77 = (_BYTE *)(v76 - v75);
  v78 = sub_1000DB794();
  v79 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  sub_100098728();
  v82 = v81 - v80;
  v177 = v81 - v80;
  v83 = type metadata accessor for WeatherConditionBackgroundModel(0);
  sub_1000B43A4(v83, (uint64_t)&v208);
  v182 = v84;
  sub_10009D98C();
  __chkstk_darwin(v85);
  sub_100088FDC();
  v179 = v86;
  sub_1000BA294(&qword_100BCCB30);
  sub_10009D98C();
  __chkstk_darwin(v87);
  sub_100088FDC();
  v89 = sub_1000987B4(v88);
  v90 = (int *)type metadata accessor for VFXTestView(v89);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 16))(v82, v2 + v90[9], v78);
  v176 = v77;
  *v77 = 1;
  v91 = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t))(v74 + 104))(v77, enum case for BackgroundAnimationKind.vfx(_:), v73);
  static Location.current.getter(v91);
  v92 = v90[10];
  v166 = v90;
  v172 = *(_QWORD *)(v172 + 16);
  v93 = v163;
  ((void (*)(uint64_t, uint64_t, uint64_t))v172)(v199, v2 + v92, v163);
  v167 = v2;
  sub_100094EE4();
  sub_10017B010();
  sub_10009880C();
  (*(void (**)(char *, uint64_t, uint64_t))(v164 + 32))(v200, v56, v165);
  v94 = objc_msgSend((id)objc_opt_self(NSUnitSpeed), "kilometersPerHour");
  v95 = sub_1002270FC();
  Measurement.init(value:unit:)(v94, v95);
  sub_100099970();
  sub_1000B3B68(v202, v96, v97);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v173 + 16))(v203, v2 + v90[13], v174);
  v98 = type metadata accessor for BackgroundMoonData(0);
  _s7Weather24LocationCompositionStateOwst_0(v204, 1, 1, v98);
  v99 = sub_1000BA294(&qword_100BC6A10);
  v100 = swift_allocObject(v99, 48, 7);
  *(_OWORD *)(v100 + 16) = xmmword_10097CA50;
  v101 = v168;
  v102 = static Location.current.getter(v100);
  v103 = v178;
  Location.identifier.getter(v102);
  v104 = (*(uint64_t (**)(uint64_t, uint64_t))(v169 + 8))(v101, v170);
  v105 = Location.Identifier.uniqueID.getter(v104);
  v107 = v106;
  (*(void (**)(uint64_t, uint64_t))(v180 + 8))(v103, v181);
  *(_QWORD *)(v100 + 32) = v105;
  *(_QWORD *)(v100 + 40) = v107;
  sub_100099970();
  v108 = v186;
  sub_1000B3B68(v186, v109, v110);
  sub_100099970();
  LOBYTE(v103) = v189;
  sub_1000B3B68(v189, v111, v112);
  sub_100099970();
  sub_1000B3B68(v191[0], v113, v114);
  v115 = (void *)objc_opt_self(UIApplication);
  v116 = objc_msgSend(v115, "sharedApplication");
  UIApplication.expectedWindow.getter(&v209);

  v117 = v210;
  v118 = v211;
  sub_1000DB418(&v209, v210);
  v119 = dispatch thunk of WindowType.bounds.getter(v117, v118);
  v121 = v120;
  v123 = v122;
  v125 = v124;
  v126 = objc_msgSend(v115, "sharedApplication");
  UIApplication.expectedWindow.getter(&v205);

  v127 = v207;
  v128 = v208;
  sub_1000DB418(&v205, v207);
  v129 = dispatch thunk of WindowType.displayScale.getter(v127, v128);
  v130 = v193;
  WeatherConditionBackgroundOptions.init(locationIDs:applyMask:applyLegibilityScrim:effectViewID:canShowCollisionLayer:cameraPositionType:displayLocation:windowBounds:displayScale:locationViewerOrientation:)(v100, 1, 0, v108, 1, v119, v121, v123, v125, v129, v103);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v205);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v209);
  v131 = v166;
  v132 = v167;
  v133 = v195;
  v134 = (void (*)(uint64_t, uint64_t, uint64_t))v172;
  ((void (*)(uint64_t, uint64_t, uint64_t))v172)(v195, v167 + v166[11], v93);
  v135 = v133;
  sub_1000C4510(v133);
  v136 = v196;
  v134(v196, v132 + v131[12], v93);
  sub_1000C4510(v136);
  v162 = 0;
  v161 = v136;
  v160 = 1;
  v137 = v185;
  BackgroundAnimationData.Model.init(location:date:conditionKind:windSpeed:cloudCover:cloudKind:elevation:moonData:options:isDayTime:sunrise:sunset:isReduceMotionEnabled:)(v175, v199, v200, v201, v202, v203, v204, v130, 0.5, v160, v135, v161, v162);
  sub_100099970();
  sub_1000B3B68(v137, v138, v139);
  v140 = v179;
  v141 = WeatherConditionBackgroundModel.init(gradient:animationKind:animationData:)(v177, v176, v137);
  v204 = *(_OWORD *)(v132 + 80);
  v142 = static Color.black.getter(v141);
  v143 = v197;
  v144 = v194;
  v145 = v182;
  v146 = v183;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v182 + 16))(v194 + v197[5], v140, v183);
  sub_10003B59C(v132 + 96, v144 + v143[7]);
  *(_QWORD *)v144 = sub_1008FDAC4;
  *(_QWORD *)(v144 + 8) = 0;
  *(_BYTE *)(v144 + 16) = 0;
  *(_OWORD *)(v144 + v143[6]) = v204;
  v147 = (_QWORD *)(v144 + v143[8]);
  *v147 = 0;
  v147[1] = 0;
  v147[2] = 0;
  *(_BYTE *)(v144 + v143[9]) = 0;
  *(_QWORD *)(v144 + v143[10]) = v142;
  v148 = v184;
  sub_100227138(v144, v184);
  swift_unknownObjectRetain(v204);
  sub_1000979AC(v144, type metadata accessor for InternalStateWeatherConditionBackgroundModifier);
  (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v140, v146);
  v149 = *(_QWORD *)(v132 + 56);
  v150 = *(_QWORD *)(v132 + 64);
  v151 = *(unsigned __int8 *)(v132 + 72);
  v152 = type metadata accessor for LocationViewCollisionOptions(0);
  sub_10000F1C8(&qword_100BCCB38, type metadata accessor for LocationViewCollisionOptions);
  v154 = v153;
  v155 = StateObject.wrappedValue.getter(v149, v150, v151, v152, v153);
  v156 = static ObservableObject.environmentStore.getter(v152, v154);
  v157 = v198;
  sub_10022717C(v148, v198);
  v158 = (uint64_t *)(v157 + *(int *)(sub_1000BA294(&qword_100BCCB40) + 36));
  *v158 = v156;
  v158[1] = v155;
  return sub_1002271C4(v148);
}

uint64_t sub_10022667C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;
  uint64_t v8;

  type metadata accessor for VFXTestViewModel(0);
  sub_10009D98C();
  __chkstk_darwin(v0);
  v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v5 = (char *)&v8 - v4;
  sub_100094EE4();
  sub_10017B010();
  sub_10009880C();
  sub_100094EE4();
  sub_10017B010();
  sub_10009880C();
  v6 = sub_10008805C((uint64_t)v5, (uint64_t)v2);
  sub_1000979AC((uint64_t)v2, type metadata accessor for VFXTestViewModel);
  sub_1000979AC((uint64_t)v5, type metadata accessor for VFXTestViewModel);
  return v6 & 1;
}

uint64_t sub_10022675C(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v31 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v31 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = *(_OWORD *)(a2 + 5);
    *(_OWORD *)(a1 + 40) = v8;
    v9 = v8;
    v10 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v8 - 8);
    v11 = swift_retain();
    v10(a1 + 16, (uint64_t)(a2 + 2), v9, v11);
    v12 = a2[7];
    v13 = a2[8];
    LOBYTE(v9) = *((_BYTE *)a2 + 72);
    sub_100037094(v12, v13);
    *(_QWORD *)(a1 + 56) = v12;
    *(_QWORD *)(a1 + 64) = v13;
    *(_BYTE *)(a1 + 72) = v9;
    v14 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 80) = v14;
    v15 = *(_OWORD *)(a2 + 15);
    *(_OWORD *)(a1 + 120) = v15;
    v16 = v15;
    v17 = **(void (***)(uint64_t, uint64_t, uint64_t))(v15 - 8);
    swift_unknownObjectRetain(v14);
    v17(a1 + 96, (uint64_t)(a2 + 12), v16);
    v18 = a3[9];
    v19 = a1 + v18;
    v20 = (uint64_t)a2 + v18;
    v21 = type metadata accessor for SkyBackgroundGradient(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
    v22 = a3[10];
    v23 = a1 + v22;
    v24 = (uint64_t)a2 + v22;
    v25 = type metadata accessor for Date(0);
    v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
    v26(v23, v24, v25);
    v26(a1 + a3[11], (uint64_t)a2 + a3[11], v25);
    v26(a1 + a3[12], (uint64_t)a2 + a3[12], v25);
    v27 = a3[13];
    v28 = a1 + v27;
    v29 = (uint64_t)a2 + v27;
    v30 = type metadata accessor for Elevation(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  }
  return a1;
}

uint64_t sub_10022690C(char *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t);
  char *v9;
  uint64_t v10;

  swift_release(*((_QWORD *)a1 + 1));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)a1 + 2);
  sub_1000BF398(*((_QWORD *)a1 + 7), *((_QWORD *)a1 + 8));
  swift_unknownObjectRelease(*((_QWORD *)a1 + 10));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)a1 + 12);
  v4 = &a1[a2[9]];
  v5 = type metadata accessor for SkyBackgroundGradient(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = &a1[a2[10]];
  v7 = type metadata accessor for Date(0);
  v8 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(&a1[a2[11]], v7);
  v8(&a1[a2[12]], v7);
  v9 = &a1[a2[13]];
  v10 = type metadata accessor for Elevation(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t sub_1002269F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = a2 + 16;
  v8 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v8;
  v9 = v8;
  v10 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v8 - 8);
  v11 = swift_retain();
  v10(a1 + 16, v7, v9, v11);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 64);
  LOBYTE(v9) = *(_BYTE *)(a2 + 72);
  sub_100037094(v12, v13);
  *(_QWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 64) = v13;
  *(_BYTE *)(a1 + 72) = v9;
  v14 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v14;
  v15 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 120) = v15;
  v16 = v15;
  v17 = **(void (***)(uint64_t, uint64_t, uint64_t))(v15 - 8);
  swift_unknownObjectRetain(v14);
  v17(a1 + 96, a2 + 96, v16);
  v18 = a3[9];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for SkyBackgroundGradient(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
  v22 = a3[10];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = type metadata accessor for Date(0);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
  v26(v23, v24, v25);
  v26(a1 + a3[11], a2 + a3[11], v25);
  v26(a1 + a3[12], a2 + a3[12], v25);
  v27 = a3[13];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = type metadata accessor for Elevation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  return a1;
}

uint64_t sub_100226B78(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release(v6);
  sub_100094D04((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16));
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 72);
  sub_100037094(v7, v8);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v8;
  *(_BYTE *)(a1 + 72) = v9;
  sub_1000BF398(v10, v11);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v12;
  swift_unknownObjectRetain(v12);
  swift_unknownObjectRelease(v14);
  *(_QWORD *)(a1 + 88) = v13;
  sub_100094D04((_QWORD *)(a1 + 96), (_QWORD *)(a2 + 96));
  v15 = a3[9];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for SkyBackgroundGradient(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[10];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = type metadata accessor for Date(0);
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24);
  v23(v20, v21, v22);
  v23(a1 + a3[11], a2 + a3[11], v22);
  v23(a1 + a3[12], a2 + a3[12], v22);
  v24 = a3[13];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = type metadata accessor for Elevation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 24))(v25, v26, v27);
  return a1;
}

uint64_t sub_100226CE8(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v7;
  v8 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v9 = a3[9];
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_OWORD *)(a1 + 112) = v8;
  v12 = type metadata accessor for SkyBackgroundGradient(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  v13 = a3[10];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for Date(0);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
  v17(v14, v15, v16);
  v17(a1 + a3[11], a2 + a3[11], v16);
  v17(a1 + a3[12], a2 + a3[12], v16);
  v18 = a3[13];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for Elevation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
  return a1;
}

uint64_t sub_100226E18(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_release(v7);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + 16));
  v8 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v9 = *(_BYTE *)(a2 + 72);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = v9;
  sub_1000BF398(v10, v11);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_unknownObjectRelease(v13);
  *(_QWORD *)(a1 + 88) = v12;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + 96));
  v14 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v14;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v15 = a3[9];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for SkyBackgroundGradient(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[10];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = type metadata accessor for Date(0);
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40);
  v23(v20, v21, v22);
  v23(a1 + a3[11], a2 + a3[11], v22);
  v23(a1 + a3[12], a2 + a3[12], v22);
  v24 = a3[13];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = type metadata accessor for Elevation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 40))(v25, v26, v27);
  return a1;
}

uint64_t sub_100226F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100226F84);
}

uint64_t sub_100226F84(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000DB794();
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == (_DWORD)a2)
    {
      v9 = v8;
      v10 = a3[9];
    }
    else
    {
      v11 = sub_100098778();
      if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == (_DWORD)a2)
      {
        v9 = v11;
        v10 = a3[10];
      }
      else
      {
        v9 = sub_1000E6EF4();
        v10 = a3[13];
      }
    }
    return _s7Weather24LocationCompositionStateOwet_0(a1 + v10, a2, v9);
  }
}

uint64_t sub_100227034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100227040);
}

uint64_t sub_100227040(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_1000DB794();
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
    {
      v9 = v8;
      v10 = a4[9];
    }
    else
    {
      v11 = sub_100098778();
      if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == a3)
      {
        v9 = v11;
        v10 = a4[10];
      }
      else
      {
        v9 = sub_1000E6EF4();
        v10 = a4[13];
      }
    }
    return _s7Weather24LocationCompositionStateOwst_0(v5 + v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1002270EC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AAD0B4, 1);
}

unint64_t sub_1002270FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCB990;
  if (!qword_100BCB990)
  {
    v1 = objc_opt_self(NSUnitSpeed);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100BCB990);
  }
  return result;
}

uint64_t sub_100227138(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InternalStateWeatherConditionBackgroundModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10022717C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BCCB30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002271C4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BCCB30);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100227208()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCCB48;
  if (!qword_100BCCB48)
  {
    v1 = sub_100075EB0(&qword_100BCCB40);
    sub_10022728C();
    sub_10003D2DC(&qword_100BCCB60, &qword_100BCCB68);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCCB48);
  }
  return result;
}

unint64_t sub_10022728C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCCB50;
  if (!qword_100BCCB50)
  {
    v1 = sub_100075EB0(&qword_100BCCB30);
    sub_10000F1C8(&qword_100BCCB58, type metadata accessor for InternalStateWeatherConditionBackgroundModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCCB50);
  }
  return result;
}

uint64_t sub_100227310(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for VFXTestView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for MoonDetailDayRangeProvider()
{
  return &type metadata for MoonDetailDayRangeProvider;
}

uint64_t sub_100227364(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void (*v53)(char *, uint64_t);
  int v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  uint64_t v60;
  os_log_type_t v61;
  uint64_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t (*v73)(uint64_t, char *, uint64_t);
  void (*v74)(char *, char *, uint64_t);
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94[2];

  v91 = a4;
  v92 = a3;
  v89 = a1;
  v90 = a2;
  v83 = type metadata accessor for TimeZone(0);
  v81 = *(_QWORD *)(v83 - 8);
  sub_10009D98C();
  __chkstk_darwin(v4);
  sub_100088FDC();
  v82 = v5;
  v6 = type metadata accessor for Calendar.Component(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100088FDC();
  v78 = v8;
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_1000986FC();
  v75 = v10;
  sub_10009D2A4();
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v74 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v74 - v15;
  v17 = type metadata accessor for Date(0);
  v85 = *(_QWORD *)(v17 - 8);
  sub_10009D98C();
  __chkstk_darwin(v18);
  sub_1000986FC();
  v80 = v19;
  sub_10009D2A4();
  __chkstk_darwin(v20);
  v79 = (char *)&v74 - v21;
  sub_10009D2A4();
  __chkstk_darwin(v22);
  v76 = (char *)&v74 - v23;
  sub_10009D2A4();
  __chkstk_darwin(v24);
  v84 = (char *)&v74 - v25;
  v26 = type metadata accessor for DateComponents(0);
  v87 = *(_QWORD *)(v26 - 8);
  v88 = v26;
  sub_10009D98C();
  __chkstk_darwin(v27);
  v29 = (char *)&v74 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_1000BA294(&qword_100BC4E50);
  v31 = *(_QWORD *)(v7 + 72);
  v32 = *(unsigned __int8 *)(v7 + 80);
  v33 = (v32 + 32) & ~v32;
  v34 = swift_allocObject(v30, v33 + 2 * v31, v32 | 7);
  *(_OWORD *)(v34 + 16) = xmmword_10097DA20;
  v35 = v34 + v33;
  v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 104);
  sub_1000B45AC(v35, enum case for Calendar.Component.year(_:));
  v37 = v35 + v31;
  v38 = enum case for Calendar.Component.month(_:);
  v77 = v6;
  sub_1000B45AC(v37, enum case for Calendar.Component.month(_:));
  v39 = sub_1000A8278(v34);
  Calendar.dateComponents(_:from:)(v39, v92);
  *(_QWORD *)&v40 = swift_bridgeObjectRelease(v39).n128_u64[0];
  v86 = v29;
  v41 = v29;
  v42 = v17;
  Calendar.date(from:)(v41, v40);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v17) == 1)
  {
    v14 = v16;
    v43 = v92;
    v44 = v85;
  }
  else
  {
    v46 = v84;
    v45 = v85;
    v74 = *(void (**)(char *, char *, uint64_t))(v85 + 32);
    v74(v84, v16, v17);
    v48 = v77;
    v47 = v78;
    v36(v78, v38, v77);
    Calendar.date(byAdding:value:to:wrappingComponents:)(v47, -1, v46, 0);
    v49 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v49(v47, v48);
    v44 = v45;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, v42) == 1)
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v84, v42);
    }
    else
    {
      v74(v76, v14, v42);
      v50 = v77;
      v51 = v78;
      sub_1000B45AC(v78, v38);
      v14 = v75;
      v52 = v84;
      Calendar.date(byAdding:value:to:wrappingComponents:)(v51, 2, v84, 0);
      v49(v51, v50);
      v53 = *(void (**)(char *, uint64_t))(v44 + 8);
      v53(v52, v42);
      v54 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, v42);
      v55 = v90;
      if (v54 != 1)
      {
        sub_1000C3638();
        v73 = (uint64_t (*)(uint64_t, char *, uint64_t))v74;
        v74(v55, v14, v42);
        return v73(v89, v76, v42);
      }
      v53(v76, v42);
    }
    v43 = v92;
  }
  v56 = (uint64_t)v79;
  sub_1001C8EF4((uint64_t)v14);
  if (qword_100BC2450 != -1)
    swift_once(&qword_100BC2450, sub_1006F3844);
  v57 = type metadata accessor for Logger(0);
  sub_1000AECD4(v57, (uint64_t)qword_100CAF0E8);
  v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v56, v43, v42);
  v59 = Logger.logObject.getter(v58);
  v61 = static os_log_type_t.error.getter(v59, v60);
  if (os_log_type_enabled(v59, v61))
  {
    v62 = v56;
    v63 = (uint8_t *)swift_slowAlloc(12, -1);
    v64 = swift_slowAlloc(32, -1);
    v94[0] = v64;
    *(_DWORD *)v63 = 136446210;
    sub_100051B90((unint64_t *)&qword_100BC52F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v65 = dispatch thunk of CustomStringConvertible.description.getter(v42);
    v67 = v66;
    v93 = sub_1000CE1C8(v65, v66, v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94);
    swift_bridgeObjectRelease(v67);
    sub_10009C92C(v62);
    _os_log_impl((void *)&_mh_execute_header, v59, v61, "Failed to get month range from date: =%{public}s", v63, 0xCu);
    swift_arrayDestroy(v64, 1);
    sub_1000986F0(v64);
    sub_1000986F0((uint64_t)v63);
  }
  else
  {
    sub_10009C92C(v56);
  }

  v68 = v80;
  sub_1000CC928(-45);
  v69 = v82;
  sub_1000DD800();
  sub_1000C5BB0();
  v70 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
  v71 = v83;
  v70(v69, v83);
  sub_10009C92C(v68);
  sub_1000CC928(46);
  sub_1000DD800();
  sub_1000C5BB0();
  v70(v69, v71);
  sub_10009C92C(v68);
  return sub_1000C3638();
}

uint64_t sub_100227940(uint64_t a1)
{
  uint64_t result;
  _BYTE *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = &_swiftEmptySetSingleton;
    goto LABEL_16;
  }
  sub_1000BA294(&qword_100BCCB88);
  result = sub_1000BA608();
  v3 = (_BYTE *)result;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_16:
    swift_bridgeObjectRelease(a1);
    return (uint64_t)v3;
  }
  v5 = 0;
  v6 = result + 56;
  while (v5 < *(_QWORD *)(a1 + 16))
  {
    v7 = *(unsigned __int8 *)(a1 + 32 + v5);
    Hasher.init(_seed:)(v18);
    Hasher._combine(_:)(v7);
    result = Hasher._finalize()();
    v8 = -1 << v3[32];
    v9 = result & ~v8;
    v10 = v9 >> 6;
    v11 = *(_QWORD *)(v6 + 8 * (v9 >> 6));
    v12 = 1 << v9;
    v13 = *((_QWORD *)v3 + 6);
    if (((1 << v9) & v11) != 0)
    {
      if (*(unsigned __int8 *)(v13 + v9) == (_DWORD)v7)
        goto LABEL_13;
      v14 = ~v8;
      while (1)
      {
        v9 = (v9 + 1) & v14;
        v10 = v9 >> 6;
        v11 = *(_QWORD *)(v6 + 8 * (v9 >> 6));
        v12 = 1 << v9;
        if ((v11 & (1 << v9)) == 0)
          break;
        if (*(unsigned __int8 *)(v13 + v9) == (_DWORD)v7)
          goto LABEL_13;
      }
    }
    *(_QWORD *)(v6 + 8 * v10) = v12 | v11;
    *(_BYTE *)(v13 + v9) = v7;
    v15 = *((_QWORD *)v3 + 2);
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_18;
    *((_QWORD *)v3 + 2) = v17;
LABEL_13:
    if (++v5 == v4)
      goto LABEL_16;
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

_QWORD *sub_100227A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _BYTE __src[120];
  _QWORD *v15;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v15 = _swiftEmptyArrayStorage;
    sub_100605E48(0, v5, 0);
    v7 = _swiftEmptyArrayStorage;
    v8 = *(_QWORD *)(type metadata accessor for LocationModel(0) - 8);
    v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v10 = *(_QWORD *)(v8 + 72);
    do
    {
      sub_1002280FC(a3, (uint64_t)__src);
      v15 = v7;
      v12 = v7[2];
      v11 = v7[3];
      if (v12 >= v11 >> 1)
      {
        sub_100605E48((char *)(v11 > 1), v12 + 1, 1);
        v7 = v15;
      }
      v7[2] = v12 + 1;
      memcpy(&v7[15 * v12 + 4], __src, 0x72uLL);
      v9 += v10;
      --v5;
    }
    while (v5);
    swift_release(a2);
  }
  else
  {
    swift_release(a2);
    v7 = _swiftEmptyArrayStorage;
  }
  swift_release(a3);
  return v7;
}

_QWORD *sub_100227BD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10009AAB0();
    v3 = type metadata accessor for NotificationSubscription.Location(0);
    v4 = *(_QWORD *)(v3 - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      v3 = NotificationSubscription.Location.id.getter(v3);
      v7 = v3;
      v9 = v8;
      v10 = _swiftEmptyArrayStorage[2];
      if (v10 >= _swiftEmptyArrayStorage[3] >> 1)
        sub_10009AAB0();
      _swiftEmptyArrayStorage[2] = v10 + 1;
      v11 = &_swiftEmptyArrayStorage[2 * v10];
      v11[4] = v7;
      v11[5] = v9;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void sub_100227CD4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_10021A590();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_100229778(v5);
  *a1 = v2;
}

void sub_100227D3C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  Class isa;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52[31];
  uint64_t v53;

  v51 = type metadata accessor for Locale(0);
  v49 = *(_QWORD *)(v51 - 8);
  sub_10009D98C();
  __chkstk_darwin(v4);
  v5 = sub_1000992A8();
  v6 = type metadata accessor for Date(v5);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100098728();
  v10 = v9 - v8;
  v11 = type metadata accessor for TimeZone(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_100098728();
  v15 = v14 - v13;
  static TimeZone.current.getter(v16);
  v17 = sub_100228008();
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v15, v11);
  Date.init()(v18);
  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  v20 = objc_msgSend(v17, "stringFromDate:", isa);

  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v46 = v22;
  v47 = v21;

  v23 = type metadata accessor for SettingReader(0);
  v24 = static SettingReader.shared.getter(v23);
  v25 = static Settings.WeatherEnvironment.contentEnvironment.getter();
  SettingReader.read<A>(_:)(&v53);
  swift_release(v24);
  v26 = swift_release(v25);
  v27 = ContentEnvironment.description.getter(v53, v26);
  v44 = v28;
  v45 = v27;
  v29 = a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment;
  swift_beginAccess(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment, v52, 0, 0);
  v30 = type metadata accessor for EnvironmentState(0);
  v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(v2, v29 + *(int *)(v30 + 28), v51);
  v43 = Locale.identifier.getter(v31);
  v33 = v32;
  sub_1000C5BBC();
  LOBYTE(v11) = *(_BYTE *)(v29 + 2) != 4;
  v34 = *(unsigned __int8 *)(v29 + 1);
  LOBYTE(v15) = (v34 - 1) < 2;
  v35 = LocationAuthorizationState.rawValue.getter(v34);
  v37 = v36;
  LOBYTE(v12) = *(_BYTE *)(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notifications) == 1;
  v38 = a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations;
  v39 = *(_QWORD *)(v38 + *(int *)(type metadata accessor for LocationsState(0) + 24));
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain(v39);
  v41 = sub_100227A94(v40, v50, a1);
  swift_bridgeObjectRelease();
  sub_10022833C();
  *(_QWORD *)a2 = v47;
  *(_QWORD *)(a2 + 8) = v46;
  *(_QWORD *)(a2 + 16) = v45;
  *(_QWORD *)(a2 + 24) = v44;
  *(_QWORD *)(a2 + 32) = v43;
  *(_QWORD *)(a2 + 40) = v33;
  *(_BYTE *)(a2 + 48) = v11;
  *(_BYTE *)(a2 + 49) = v15;
  *(_QWORD *)(a2 + 56) = v35;
  *(_QWORD *)(a2 + 64) = v37;
  *(_BYTE *)(a2 + 72) = v12;
  *(_QWORD *)(a2 + 80) = v41;
  *(_QWORD *)(a2 + 88) = v42;
}

id sub_100228008()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id result;
  id v4;
  Class isa;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v0 = ((uint64_t (*)(void))TimeZone.identifier.getter)();
  v2 = v1;
  v9 = v0;
  v10 = v1;
  Cache.subscript.getter(&v9);
  swift_bridgeObjectRelease(v2);
  result = v11;
  if (!v11)
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
    isa = TimeZone._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v4, "setTimeZone:", isa);

    objc_msgSend(v4, "setDateStyle:", 3);
    v6 = TimeZone.identifier.getter(objc_msgSend(v4, "setTimeStyle:", 3));
    v10 = v7;
    v11 = v4;
    v9 = v6;
    v8 = v4;
    Cache.subscript.setter(&v11, &v9);
    return v8;
  }
  return result;
}

__n128 sub_1002280FC@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 result;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  __int128 v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD v48[2];
  uint64_t v49;
  unsigned __int8 v50;
  int v51;
  unsigned __int16 v52;
  unsigned __int8 v53;

  v4 = type metadata accessor for Location.Identifier(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocationModel.identifier.getter(v8);
  v9 = sub_1002287AC();
  v46 = v10;
  v47 = v9;
  v11 = Location.Identifier.id.getter(v9);
  v44 = v12;
  v45 = v11;
  v13 = Location.Identifier.name.getter(v11);
  v42 = v14;
  v43 = v13;
  v15 = Location.Identifier.coordinate.getter();
  v17 = v16;
  sub_100228984(a1, (uint64_t)v48);
  v39 = v48[0];
  v38 = (__n128)v48[1];
  v37 = v49;
  HIDWORD(v36) = v50;
  v40 = v53;
  v41 = v52;
  v18 = a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notifications;
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notifications + 8));
  v20 = sub_100227BD8(v19);
  swift_bridgeObjectRelease();
  v22 = Location.Identifier.id.getter(v21);
  v23 = v51;
  v25 = sub_1008A5A8C(v22, v24, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(*(_QWORD *)(v18 + 16));
  v27 = sub_100227BD8(v26);
  swift_bridgeObjectRelease();
  v29 = Location.Identifier.id.getter(v28);
  LOBYTE(v20) = sub_1008A5A8C(v29, v30, v27);
  swift_bridgeObjectRelease();
  v31 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v31);
  v32 = v44;
  *(_QWORD *)a2 = v45;
  *(_QWORD *)(a2 + 8) = v32;
  v33 = v42;
  *(_QWORD *)(a2 + 16) = v43;
  *(_QWORD *)(a2 + 24) = v33;
  v34 = v46;
  *(_QWORD *)(a2 + 32) = v47;
  *(_QWORD *)(a2 + 40) = v34;
  *(double *)(a2 + 48) = v15;
  *(_QWORD *)(a2 + 56) = v17;
  result = v38;
  *(_OWORD *)(a2 + 64) = v39;
  *(__n128 *)(a2 + 80) = result;
  *(_QWORD *)(a2 + 96) = v37;
  *(_BYTE *)(a2 + 104) = BYTE4(v36);
  *(_DWORD *)(a2 + 105) = v23;
  *(_WORD *)(a2 + 109) = v41;
  *(_BYTE *)(a2 + 111) = v40;
  *(_BYTE *)(a2 + 112) = v25 & 1;
  *(_BYTE *)(a2 + 113) = v20 & 1;
  return result;
}

void sub_10022833C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  char v31;
  __n128 v32;
  Swift::String v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  id v56;
  Swift::String v57;
  Swift::String v58;

  v0 = type metadata accessor for DebugBundle(0);
  v1 = *(_QWORD *)(v0 - 8);
  sub_10009D98C();
  __chkstk_darwin(v2);
  v4 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v50 - v6;
  v8 = (void *)objc_opt_self(NSBundle);
  DebugBundle.init(bundle:)(objc_msgSend(v8, "mainBundle"));
  v9 = sub_1000BA294(&qword_100BCCC38);
  v10 = swift_allocObject(v9, 64, 7);
  *(_OWORD *)(v10 + 16) = xmmword_10097CA50;
  v11 = ((uint64_t (*)(void))DebugBundle.name.getter)();
  v13 = v12;
  v14 = DebugBundle.displayVersion.getter();
  *(_QWORD *)(v10 + 32) = v11;
  *(_QWORD *)(v10 + 40) = v13;
  *(_QWORD *)(v10 + 48) = v14;
  *(_QWORD *)(v10 + 56) = v15;
  v55 = v10;
  v16 = objc_msgSend(v8, "allFrameworks");
  v17 = sub_100228770();
  v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

  if ((unint64_t)v18 >> 62)
  {
    if (v18 < 0)
      v49 = v18;
    else
      v49 = v18 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v18);
    v19 = _CocoaArrayWrapper.endIndex.getter(v49);
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v20 = v0;
  v50 = v7;
  if (!v19)
  {
    v21 = v1;
LABEL_23:
    swift_bridgeObjectRelease();
    v48 = v55;
    v58._countAndFlagsBits = v55;
    swift_bridgeObjectRetain_n(v55, 2);
    sub_100227CD4(&v58);
    swift_bridgeObjectRelease_n(v48, 2);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v50, v20);
    return;
  }
  if (v19 >= 1)
  {
    v21 = v1;
    v22 = 0;
    v54 = v18 & 0xC000000000000001;
    v51 = v18;
    v52 = v20;
    v53 = v19;
    do
    {
      if (v54)
        v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v18);
      else
        v23 = *(id *)(v18 + 8 * v22 + 32);
      v24 = v23;
      DebugBundle.init(bundle:)(v24);
      v25 = sub_1000DCBDC();
      v27 = v26;
      swift_bridgeObjectRelease();
      v28 = HIBYTE(v27) & 0xF;
      if ((v27 & 0x2000000000000000) == 0)
        v28 = v25 & 0xFFFFFFFFFFFFLL;
      if (v28)
      {
        v56 = v24;
        sub_1000DCBDC();
        v29 = String.lowercased()();
        swift_bridgeObjectRelease();
        v58 = v29;
        v30 = String.lowercased()();
        v57 = v30;
        sub_1001C8F34();
        sub_1001C8F70();
        v31 = sub_1000BA618();
        sub_10009934C();
        v32.n128_f64[0] = sub_10009D2E0();
        if ((v31 & 1) != 0)
          goto LABEL_15;
        sub_1000DCBDC();
        String.lowercased()();
        sub_1000CC934();
        v58._countAndFlagsBits = (uint64_t)v29._object;
        v58._object = v30._object;
        v33 = String.lowercased()();
        v57 = v33;
        v34 = sub_1000BA618();
        sub_10009D2E0();
        v32.n128_f64[0] = sub_10009934C();
        if ((v34 & 1) != 0)
          goto LABEL_15;
        sub_1000DCBDC();
        String.lowercased()();
        sub_1000CC934();
        v58._countAndFlagsBits = (uint64_t)v33._object;
        v58._object = v30._object;
        v57 = String.lowercased()();
        v35 = sub_1000BA618();
        sub_10009D2E0();
        v32.n128_f64[0] = sub_10009934C();
        if ((v35 & 1) != 0)
        {
LABEL_15:
          v36 = v21;
          v37 = v52;
          v38 = DebugBundle.name.getter(v32);
          v40 = v39;
          v41 = DebugBundle.displayVersion.getter();
          v43 = v42;
          v44 = v55;
          v45 = *(_QWORD *)(v55 + 16);
          if (v45 >= *(_QWORD *)(v55 + 24) >> 1)
          {
            sub_1005FEE5C();
            v44 = v47;
          }
          *(_QWORD *)(v44 + 16) = v45 + 1;
          v55 = v44;
          v46 = (_QWORD *)(v44 + 32 * v45);
          v46[4] = v38;
          v46[5] = v40;
          v46[6] = v41;
          v46[7] = v43;
          v20 = v37;
          v21 = v36;
          v18 = v51;
          v19 = v53;
        }
        else
        {
          v20 = v52;
          v19 = v53;
        }
        v24 = v56;
      }
      ++v22;

      (*(void (**)(char *, uint64_t))(v21 + 8))(v4, v20);
    }
    while (v19 != v22);
    goto LABEL_23;
  }
  __break(1u);
  swift_release(v58._countAndFlagsBits);
  __break(1u);
}

uint64_t type metadata accessor for DiagnosticSummaryFactory()
{
  return objc_opt_self(_TtC7Weather24DiagnosticSummaryFactory);
}

unint64_t sub_100228770()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCCC40;
  if (!qword_100BCCC40)
  {
    v1 = objc_opt_self(NSBundle);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100BCCC40);
  }
  return result;
}

uint64_t sub_1002287AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  Class isa;
  id v15;
  uint64_t v17;

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000BA294(&qword_100BCCC50);
  __chkstk_darwin(v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TimeZone(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocationModel.timeZone.getter(v9);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v6, 1, v7) == 1)
  {
    sub_100021A14((uint64_t)v6, &qword_100BCCC50);
    return 0x2D656D69742D6F6ELL;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v6, v7);
    v13 = sub_100228008();
    Date.init()(v13);
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    v15 = objc_msgSend(v13, "stringFromDate:", isa);

    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
  return v12;
}

void sub_100228984(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[4];
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v4 = sub_1000BA294(&qword_100BC3460);
  __chkstk_darwin(v4);
  v6 = &v30[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v7);
  v9 = &v30[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_1000BA294(&qword_100BC3380);
  __chkstk_darwin(v10);
  v12 = &v30[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  v15 = &v30[-v14];
  v16 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 16);
  swift_bridgeObjectRetain(v16);
  v18 = Location.Identifier.id.getter(v17);
  sub_1000EED10(v18, v19, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v20 = sub_100228C30((uint64_t)v15);
  v35 = v21;
  v36 = v20;
  sub_100228ED8(a1, (uint64_t)v9);
  v22 = sub_1002291AC((uint64_t)v9);
  v33 = v23;
  v34 = v22;
  v32 = sub_100229378((uint64_t)v9);
  v31 = v24;
  sub_100033A34((uint64_t)v15, (uint64_t)v12, &qword_100BC3380);
  v25 = type metadata accessor for LocationWeatherDataState(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v25) == 1)
  {
    sub_100021A14((uint64_t)v12, &qword_100BC3380);
    v26 = type metadata accessor for WeatherData(0);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v6, 1, 1, v26);
  }
  else
  {
    sub_1000EADE8();
    sub_1000215BC((uint64_t)v12, type metadata accessor for LocationWeatherDataState);
  }
  v27 = sub_10022949C((uint64_t)v6);
  sub_100021A14((uint64_t)v6, &qword_100BC3460);
  sub_100021A14((uint64_t)v9, (uint64_t *)&unk_100BD35A0);
  sub_100021A14((uint64_t)v15, &qword_100BC3380);
  v28 = v35;
  *(_QWORD *)a2 = v36;
  *(_QWORD *)(a2 + 8) = v28;
  v29 = v33;
  *(_QWORD *)(a2 + 16) = v34;
  *(_QWORD *)(a2 + 24) = v29;
  *(_QWORD *)(a2 + 32) = v32;
  *(_BYTE *)(a2 + 40) = v31 & 1;
  *(_WORD *)(a2 + 41) = v27;
  *(_BYTE *)(a2 + 43) = BYTE2(v27);
  *(_BYTE *)(a2 + 44) = BYTE3(v27);
  *(_BYTE *)(a2 + 45) = BYTE4(v27);
  *(_BYTE *)(a2 + 46) = BYTE5(v27);
  *(_BYTE *)(a2 + 47) = BYTE6(v27);
}

unint64_t sub_100228C30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v13;

  v2 = sub_1000BA294(&qword_100BC3380);
  __chkstk_darwin(v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LocationWeatherDataState(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v13 - v9;
  sub_100033A34(a1, (uint64_t)v4, &qword_100BC3380);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v4, 1, v5) != 1)
  {
    sub_1000DB674((uint64_t)v4, (uint64_t)v10, type metadata accessor for LocationWeatherDataState);
    sub_10022A084((uint64_t)v10, (uint64_t)v7);
    v11 = (char *)&loc_100228D78 + 4 * byte_100989AE0[swift_getEnumCaseMultiPayload(v7)];
    __asm { BR              X10 }
  }
  sub_100021A14((uint64_t)v4, &qword_100BC3380);
  return 0xD000000000000010;
}

uint64_t sub_100228ED8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v32 = a2;
  v31 = type metadata accessor for CurrentWeather(0);
  v3 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for WeatherData(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BC3380);
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocationWeatherDataState(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v31 - v16;
  v18 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 16);
  swift_bridgeObjectRetain(v18);
  v20 = Location.Identifier.id.getter(v19);
  sub_1000EED10(v20, v21, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12) == 1)
  {
    sub_100021A14((uint64_t)v11, &qword_100BC3380);
LABEL_6:
    v28 = 1;
    v27 = v32;
    goto LABEL_7;
  }
  sub_1000DB674((uint64_t)v11, (uint64_t)v17, type metadata accessor for LocationWeatherDataState);
  sub_10022A084((uint64_t)v17, (uint64_t)v14);
  if (swift_getEnumCaseMultiPayload(v14) != 1)
  {
    sub_1000215BC((uint64_t)v17, type metadata accessor for LocationWeatherDataState);
    sub_1000215BC((uint64_t)v14, type metadata accessor for LocationWeatherDataState);
    goto LABEL_6;
  }
  v22 = sub_1000BA294(&qword_100BC3358);
  v23 = (uint64_t)&v14[*(int *)(v22 + 48)];
  v24 = (uint64_t)&v14[*(int *)(v22 + 64)];
  sub_1000DB674((uint64_t)v14, (uint64_t)v8, type metadata accessor for WeatherData);
  sub_1000215BC(v24, type metadata accessor for NewsDataModel);
  sub_1000215BC(v23, type metadata accessor for PreprocessedWeatherData);
  v26 = WeatherDataModel.currentWeather.getter(v25);
  v27 = v32;
  CurrentWeather.date.getter(v26);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v31);
  sub_1000215BC((uint64_t)v8, type metadata accessor for WeatherData);
  sub_1000215BC((uint64_t)v17, type metadata accessor for LocationWeatherDataState);
  v28 = 0;
LABEL_7:
  v29 = type metadata accessor for Date(0);
  return _s7Weather24LocationCompositionStateOwst_0(v27, v28, 1, v29);
}

uint64_t sub_1002291AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  Class isa;
  id v17;
  uint64_t v19;

  v2 = type metadata accessor for TimeZone(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100033A34(a1, (uint64_t)v8, (uint64_t *)&unk_100BD35A0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9) == 1)
  {
    sub_100021A14((uint64_t)v8, (uint64_t *)&unk_100BD35A0);
    return 0;
  }
  else
  {
    v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    static TimeZone.current.getter(v14);
    v15 = sub_100228008();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v17 = objc_msgSend(v15, "stringFromDate:", isa);

    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return v13;
}

uint64_t sub_100229378(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  double v11;
  uint64_t v12;

  v2 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100033A34(a1, (uint64_t)v4, (uint64_t *)&unk_100BD35A0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v4, 1, v5) == 1)
  {
    sub_100021A14((uint64_t)v4, (uint64_t *)&unk_100BD35A0);
    return 0;
  }
  else
  {
    v10 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    v11 = Date.timeIntervalSinceNow.getter(v10);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return *(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFLL;
  }
}

unint64_t sub_10022949C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;

  sub_1000BA294(&qword_100BCCC48);
  sub_10009D98C();
  __chkstk_darwin(v3);
  sub_100098728();
  v6 = v5 - v4;
  sub_1000BA294(&qword_100BC3460);
  sub_10009D98C();
  __chkstk_darwin(v7);
  v8 = sub_1000BE9F0();
  v9 = type metadata accessor for WeatherData(v8);
  sub_10009D98C();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = v12 - v11;
  sub_100033A34(a1, v1, &qword_100BC3460);
  if (_s7Weather24LocationCompositionStateOwet_0(v1, 1, v9) == 1)
  {
    sub_100021A14(v1, &qword_100BC3460);
    v14 = 0x202000000;
    v15 = 0x2000000000000;
    v16 = 2;
  }
  else
  {
    sub_1000DB674(v1, v13, type metadata accessor for WeatherData);
    v17 = sub_10022964C(v13, (void (*)(uint64_t))&WeatherAvailability.airQualityAvailability.getter);
    v18 = sub_10022964C(v13, (void (*)(uint64_t))&WeatherAvailability.minuteAvailability.getter);
    v19 = v18;
    WeatherDataModel.weatherChanges.getter(v18);
    sub_1000215BC(v13, type metadata accessor for WeatherData);
    v20 = type metadata accessor for WeatherChanges(0);
    v21 = _s7Weather24LocationCompositionStateOwet_0(v6, 1, v20) == 1;
    sub_100021A14(v6, &qword_100BCCC48);
    v16 = 0;
    v15 = v21 << 49;
    v14 = ((unint64_t)v17 << 24) | ((unint64_t)v19 << 32);
  }
  return ((v14 | v15 | (v16 << 40)) + (v16 << 16) + (v16 << 8)) | v16;
}

uint64_t sub_10022964C(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t result;

  v4 = type metadata accessor for WeatherAvailability.AvailabilityKind(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = sub_1000BE9F0();
  v7 = type metadata accessor for WeatherAvailability(v6);
  __chkstk_darwin(v7);
  v8 = sub_1000992A8();
  v9 = type metadata accessor for WeatherData(v8);
  v10 = WeatherDataModel.availability.getter(v9);
  a2(v10);
  sub_1000C5BBC();
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 88))(v2, v4);
  if (v11 == enum case for WeatherAvailability.AvailabilityKind.available(_:))
    return 0;
  if (v11 == enum case for WeatherAvailability.AvailabilityKind.temporarilyUnavailable(_:))
    return 1;
  if (v11 == enum case for WeatherAvailability.AvailabilityKind.unsupported(_:)
    || v11 == enum case for WeatherAvailability.AvailabilityKind.unknown(_:))
  {
    return 2;
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v4, v4);
  __break(1u);
  return result;
}

void sub_100229778(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  char *v7;
  Swift::Int v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v17;
  Swift::Int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  Swift::Int v29;
  _OWORD *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  Swift::Int v36;
  char *v37;
  Swift::Int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  Swift::Int v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  __int128 *v97;
  BOOL v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  Swift::Int v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_100229E00(0, v3, 1, a1);
      return;
    }
    goto LABEL_144;
  }
  v5 = v4;
  sub_10087B66C(v3 / 2);
  v113 = v6;
  v114 = v3;
  v115 = v7;
  v111 = a1;
  if (v3 <= 0)
  {
    v116 = (char *)_swiftEmptyArrayStorage;
    v41 = _swiftEmptyArrayStorage[2];
LABEL_110:
    if (v41 < 2)
    {
LABEL_121:
      swift_bridgeObjectRelease();
      if (v3 >= -1)
      {
        *(_QWORD *)(v113 + 16) = 0;
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_149;
    }
    v102 = *v111;
    while (1)
    {
      v103 = v41 - 2;
      if (v41 < 2)
        break;
      if (!v102)
        goto LABEL_153;
      v104 = v116;
      v105 = *(_QWORD *)&v116[16 * v103 + 32];
      v106 = *(_QWORD *)&v116[16 * v41 + 24];
      sub_100229ED8((char *)(v102 + 32 * v105), (char *)(v102 + 32 * *(_QWORD *)&v116[16 * v41 + 16]), v102 + 32 * v106, v115);
      if (v1)
        goto LABEL_106;
      if (v106 < v105)
        goto LABEL_139;
      if ((swift_isUniquelyReferenced_nonNull_native(v116) & 1) == 0)
        v104 = sub_10021A488();
      if (v103 >= *((_QWORD *)v104 + 2))
        goto LABEL_140;
      v107 = &v104[16 * v103 + 32];
      *(_QWORD *)v107 = v105;
      *((_QWORD *)v107 + 1) = v106;
      v108 = *((_QWORD *)v104 + 2);
      if (v41 > v108)
        goto LABEL_141;
      memmove(&v104[16 * v41 + 16], &v104[16 * v41 + 32], 16 * (v108 - v41));
      v116 = v104;
      *((_QWORD *)v104 + 2) = v108 - 1;
      v41 = v108 - 1;
      v3 = v114;
      if (v108 <= 2)
        goto LABEL_121;
    }
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
    return;
  }
  v112 = v5;
  v8 = 0;
  v9 = *a1;
  v109 = *a1 + 24;
  v110 = *a1 + 8;
  v116 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    v10 = v8++;
    if (v8 >= v3)
      goto LABEL_32;
    v11 = (uint64_t *)(v9 + 32 * v8);
    v12 = *v11;
    v13 = v11[1];
    v14 = (_QWORD *)(v9 + 32 * v10);
    v15 = v14[1];
    if (v12 == *v14 && v13 == v15)
    {
      v18 = v10 + 2;
      if (v10 + 2 >= v3)
        goto LABEL_31;
      v17 = 0;
LABEL_13:
      v19 = (uint64_t *)(v110 + 32 * v18);
      do
      {
        v20 = *(v19 - 1);
        v21 = *v19;
        v22 = (_QWORD *)(v9 + 32 * v8);
        v23 = v22[1];
        if (v20 == *v22 && v21 == v23)
        {
          if ((v17 & 1) != 0)
            goto LABEL_24;
        }
        else if (((v17 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, *v22, v23, 1)) & 1) != 0)
        {
          goto LABEL_23;
        }
        v19 += 4;
        v25 = v18 + 1;
        v8 = v18;
        v18 = v25;
      }
      while (v25 < v3);
      v18 = v25;
      goto LABEL_23;
    }
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, *v14, v15, 1);
    v18 = v10 + 2;
    if (v10 + 2 < v3)
      goto LABEL_13;
LABEL_23:
    v8 = v18;
    if ((v17 & 1) == 0)
      goto LABEL_32;
LABEL_24:
    if (v18 < v10)
      goto LABEL_148;
    if (v10 < v18)
    {
      v26 = 32 * v18;
      v27 = 32 * v10;
      v28 = v18;
      v29 = v10;
      do
      {
        if (v29 != --v28)
        {
          if (!v9)
            goto LABEL_152;
          v30 = (_OWORD *)(v9 + v27);
          v31 = v9 + v26;
          v32 = *(_OWORD *)(v9 + v27);
          v33 = *(_QWORD *)(v9 + v27 + 16);
          v34 = *(_QWORD *)(v9 + v27 + 24);
          v35 = *(_OWORD *)(v9 + v26 - 16);
          *v30 = *(_OWORD *)(v9 + v26 - 32);
          v30[1] = v35;
          *(_OWORD *)(v31 - 32) = v32;
          *(_QWORD *)(v31 - 16) = v33;
          *(_QWORD *)(v31 - 8) = v34;
        }
        ++v29;
        v26 -= 32;
        v27 += 32;
      }
      while (v29 < v28);
    }
LABEL_31:
    v8 = v18;
LABEL_32:
    if (v8 >= v3)
      goto LABEL_41;
    if (__OFSUB__(v8, v10))
      goto LABEL_143;
    if (v8 - v10 >= v112)
      goto LABEL_41;
    if (__OFADD__(v10, v112))
      goto LABEL_146;
    if (v10 + v112 >= v3)
      v36 = v3;
    else
      v36 = v10 + v112;
    if (v36 < v10)
      goto LABEL_147;
    if (v8 == v36)
    {
LABEL_41:
      v37 = v116;
    }
    else
    {
      v89 = (_QWORD *)(v109 + 32 * v8);
      v37 = v116;
      do
      {
        v90 = (uint64_t *)(v9 + 32 * v8);
        v91 = *v90;
        v92 = v90[1];
        v93 = v10;
        v94 = v89;
        do
        {
          v95 = *(v94 - 7);
          v96 = *(v94 - 6);
          v97 = (__int128 *)(v94 - 7);
          v98 = v91 == v95 && v92 == v96;
          if (v98 || (_stringCompareWithSmolCheck(_:_:expecting:)(v91, v92, v95, v96, 1) & 1) == 0)
            break;
          if (!v9)
            goto LABEL_150;
          v100 = *v97;
          v99 = *(_OWORD *)(v94 - 5);
          *(v94 - 4) = *v94;
          v94 -= 4;
          v91 = v94[1];
          v92 = v94[2];
          v101 = v94[3];
          v97[2] = v100;
          v97[3] = v99;
          *(v94 - 3) = v91;
          *(v94 - 2) = v92;
          *(v94 - 1) = v101;
          ++v93;
        }
        while (v8 != v93);
        ++v8;
        v89 += 4;
      }
      while (v8 != v36);
      v8 = v36;
    }
    if (v8 < v10)
      goto LABEL_142;
    v38 = v10;
    if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0)
      v37 = sub_10021A398(0, *((_QWORD *)v37 + 2) + 1, 1, v37);
    v40 = *((_QWORD *)v37 + 2);
    v39 = *((_QWORD *)v37 + 3);
    v41 = v40 + 1;
    if (v40 >= v39 >> 1)
      v37 = sub_10021A398((char *)(v39 > 1), v40 + 1, 1, v37);
    *((_QWORD *)v37 + 2) = v41;
    v42 = v37 + 32;
    v43 = &v37[16 * v40 + 32];
    *(_QWORD *)v43 = v38;
    *((_QWORD *)v43 + 1) = v8;
    v116 = v37;
    if (v40)
      break;
    v41 = 1;
LABEL_90:
    v3 = v114;
    if (v8 >= v114)
      goto LABEL_110;
  }
  while (1)
  {
    v44 = v41 - 1;
    if (v41 >= 4)
    {
      v49 = &v42[16 * v41];
      v50 = *((_QWORD *)v49 - 8);
      v51 = *((_QWORD *)v49 - 7);
      v55 = __OFSUB__(v51, v50);
      v52 = v51 - v50;
      if (v55)
        goto LABEL_127;
      v54 = *((_QWORD *)v49 - 6);
      v53 = *((_QWORD *)v49 - 5);
      v55 = __OFSUB__(v53, v54);
      v47 = v53 - v54;
      v48 = v55;
      if (v55)
        goto LABEL_128;
      v56 = v41 - 2;
      v57 = &v42[16 * v41 - 32];
      v59 = *(_QWORD *)v57;
      v58 = *((_QWORD *)v57 + 1);
      v55 = __OFSUB__(v58, v59);
      v60 = v58 - v59;
      if (v55)
        goto LABEL_129;
      v55 = __OFADD__(v47, v60);
      v61 = v47 + v60;
      if (v55)
        goto LABEL_131;
      if (v61 >= v52)
      {
        v79 = &v42[16 * v44];
        v81 = *(_QWORD *)v79;
        v80 = *((_QWORD *)v79 + 1);
        v55 = __OFSUB__(v80, v81);
        v82 = v80 - v81;
        if (v55)
          goto LABEL_137;
        v72 = v47 < v82;
        goto LABEL_79;
      }
    }
    else
    {
      if (v41 != 3)
      {
        v73 = *((_QWORD *)v37 + 4);
        v74 = *((_QWORD *)v37 + 5);
        v55 = __OFSUB__(v74, v73);
        v66 = v74 - v73;
        v67 = v55;
        goto LABEL_73;
      }
      v46 = *((_QWORD *)v37 + 4);
      v45 = *((_QWORD *)v37 + 5);
      v55 = __OFSUB__(v45, v46);
      v47 = v45 - v46;
      v48 = v55;
    }
    if ((v48 & 1) != 0)
      goto LABEL_130;
    v56 = v41 - 2;
    v62 = &v42[16 * v41 - 32];
    v64 = *(_QWORD *)v62;
    v63 = *((_QWORD *)v62 + 1);
    v65 = __OFSUB__(v63, v64);
    v66 = v63 - v64;
    v67 = v65;
    if (v65)
      goto LABEL_132;
    v68 = &v42[16 * v44];
    v70 = *(_QWORD *)v68;
    v69 = *((_QWORD *)v68 + 1);
    v55 = __OFSUB__(v69, v70);
    v71 = v69 - v70;
    if (v55)
      goto LABEL_134;
    if (__OFADD__(v66, v71))
      goto LABEL_136;
    if (v66 + v71 >= v47)
    {
      v72 = v47 < v71;
LABEL_79:
      if (v72)
        v44 = v56;
      goto LABEL_81;
    }
LABEL_73:
    if ((v67 & 1) != 0)
      goto LABEL_133;
    v75 = &v42[16 * v44];
    v77 = *(_QWORD *)v75;
    v76 = *((_QWORD *)v75 + 1);
    v55 = __OFSUB__(v76, v77);
    v78 = v76 - v77;
    if (v55)
      goto LABEL_135;
    if (v78 < v66)
      goto LABEL_90;
LABEL_81:
    v83 = v44 - 1;
    if (v44 - 1 >= v41)
    {
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
    if (!v9)
      goto LABEL_151;
    v84 = &v42[16 * v83];
    v85 = *(_QWORD *)v84;
    v86 = &v42[16 * v44];
    v87 = *((_QWORD *)v86 + 1);
    sub_100229ED8((char *)(v9 + 32 * *(_QWORD *)v84), (char *)(v9 + 32 * *(_QWORD *)v86), v9 + 32 * v87, v115);
    if (v1)
      break;
    if (v87 < v85)
      goto LABEL_124;
    if (v44 > *((_QWORD *)v116 + 2))
      goto LABEL_125;
    *(_QWORD *)v84 = v85;
    *(_QWORD *)&v42[16 * v83 + 8] = v87;
    v88 = *((_QWORD *)v116 + 2);
    if (v44 >= v88)
      goto LABEL_126;
    v37 = v116;
    v41 = v88 - 1;
    memmove(&v42[16 * v44], v86 + 16, 16 * (v88 - 1 - v44));
    *((_QWORD *)v116 + 2) = v88 - 1;
    if (v88 <= 2)
      goto LABEL_90;
  }
LABEL_106:
  swift_bridgeObjectRelease();
  if (v114 < -1)
    goto LABEL_145;
  *(_QWORD *)(v113 + 16) = 0;
  swift_bridgeObjectRelease();
}

uint64_t sub_100229E00(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 32 * a3 + 24;
    while (2)
    {
      v9 = (uint64_t *)(v7 + 32 * v4);
      result = *v9;
      v10 = v9[1];
      v11 = v6;
      v12 = (_QWORD *)v8;
      do
      {
        v13 = *(v12 - 7);
        v14 = *(v12 - 6);
        v15 = (__int128 *)(v12 - 7);
        if (result == v13 && v10 == v14)
          break;
        result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, v13, v14, 1);
        if ((result & 1) == 0)
          break;
        if (!v7)
        {
          __break(1u);
          return result;
        }
        v18 = *v15;
        v17 = *(_OWORD *)(v12 - 5);
        *(v12 - 4) = *v12;
        v12 -= 4;
        result = v12[1];
        v10 = v12[2];
        v19 = v12[3];
        v15[2] = v18;
        v15[3] = v17;
        *(v12 - 3) = result;
        *(v12 - 2) = v10;
        *(v12 - 1) = v19;
        ++v11;
      }
      while (v4 != v11);
      ++v4;
      v8 += 32;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_100229ED8(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char *v16;
  __int128 v17;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  __int128 v29;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 32;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 32;
  if (v9 >= v11)
  {
    sub_100600374(a2, (uint64_t)(a3 - (_QWORD)a2) / 32, a4);
    v12 = &v4[32 * v11];
    if (v7 >= v6 || v10 < 32)
      goto LABEL_43;
    v19 = (char *)(a3 - 32);
    while (1)
    {
      v20 = v19 + 32;
      v21 = *((_QWORD *)v12 - 4);
      v22 = *((_QWORD *)v12 - 3);
      v23 = v12 - 32;
      v24 = *((_QWORD *)v6 - 4);
      v25 = *((_QWORD *)v6 - 3);
      v26 = v21 == v24 && v22 == v25;
      if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, v24, v25, 1) & 1) == 0)
      {
        v28 = v20 != v12 || v19 >= v12;
        v12 -= 32;
        if (!v28)
          goto LABEL_39;
      }
      else
      {
        v27 = v20 != v6 || v19 >= v6;
        v23 = v6 - 32;
        v6 -= 32;
        if (!v27)
          goto LABEL_39;
      }
      v29 = *((_OWORD *)v23 + 1);
      *(_OWORD *)v19 = *(_OWORD *)v23;
      *((_OWORD *)v19 + 1) = v29;
LABEL_39:
      v19 -= 32;
      if (v6 <= v7 || v12 <= v4)
        goto LABEL_43;
    }
  }
  sub_100600374(a1, (a2 - a1) / 32, a4);
  v12 = &v4[32 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 32)
  {
    while (1)
    {
      v13 = *((_QWORD *)v6 + 1);
      v14 = *((_QWORD *)v4 + 1);
      v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && v13 == v14;
      if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v6, v13, *(_QWORD *)v4, v14, 1) & 1) != 0)
        break;
      v16 = v4;
      v15 = v7 == v4;
      v4 += 32;
      if (!v15)
        goto LABEL_13;
LABEL_14:
      v7 += 32;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_19;
    }
    v16 = v6;
    v15 = v7 == v6;
    v6 += 32;
    if (v15)
      goto LABEL_14;
LABEL_13:
    v17 = *((_OWORD *)v16 + 1);
    *(_OWORD *)v7 = *(_OWORD *)v16;
    *((_OWORD *)v7 + 1) = v17;
    goto LABEL_14;
  }
LABEL_19:
  v6 = v7;
LABEL_43:
  sub_100600374(v4, (v12 - v4) / 32, v6);
  return 1;
}

uint64_t sub_10022A084(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocationWeatherDataState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *sub_10022A0C8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t, __n128);
  __n128 v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = type metadata accessor for FeelsLikeComponentViewModel(0);
    v10 = *(int *)(v9 + 24);
    v11 = (uint64_t *)((char *)v4 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    v13 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v13))
    {
      v14 = sub_1000BA294(&qword_100BC3360);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v16 = v12[1];
      *v11 = *v12;
      v11[1] = v16;
      v17 = *(int *)(v13 + 20);
      v18 = (char *)v11 + v17;
      v19 = (char *)v12 + v17;
      v20 = type metadata accessor for TemperatureScaleConfiguration(0);
      v57 = v9;
      v21 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v20 - 8) + 16);
      v22 = swift_bridgeObjectRetain(v16);
      v21(v18, v19, v20, v22);
      v9 = v57;
      v23 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
      *(_QWORD *)&v18[v23[5]] = *(_QWORD *)&v19[v23[5]];
      *(_QWORD *)&v18[v23[6]] = *(_QWORD *)&v19[v23[6]];
      *(_QWORD *)&v18[v23[7]] = *(_QWORD *)&v19[v23[7]];
      v24 = v23[8];
      v25 = &v18[v24];
      v26 = &v19[v24];
      v28 = *(_QWORD *)v26;
      v27 = *((_QWORD *)v26 + 1);
      *(_QWORD *)v25 = v28;
      *((_QWORD *)v25 + 1) = v27;
      v18[v23[9]] = v19[v23[9]];
      swift_bridgeObjectRetain(v27);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v13);
    }
    v29 = *(int *)(v9 + 28);
    v30 = (uint64_t *)((char *)v4 + v29);
    v31 = (uint64_t *)((char *)a2 + v29);
    v32 = v31[1];
    *v30 = *v31;
    v30[1] = v32;
    v33 = a3[5];
    v34 = (char *)v4 + v33;
    v35 = (char *)a2 + v33;
    v36 = *(_QWORD *)v35;
    v37 = v35[8];
    swift_bridgeObjectRetain(v32);
    sub_10008D47C(v36, v37);
    *(_QWORD *)v34 = v36;
    v34[8] = v37;
    v38 = a3[6];
    v39 = (char *)v4 + v38;
    v40 = (char *)a2 + v38;
    v41 = *(_QWORD *)v40;
    v42 = v40[8];
    sub_10008D47C(*(_QWORD *)v40, v42);
    *(_QWORD *)v39 = v41;
    v39[8] = v42;
    v43 = a3[7];
    v44 = (char *)v4 + v43;
    v45 = (char *)a2 + v43;
    v46 = *(_QWORD *)v45;
    v47 = v45[8];
    sub_10008D47C(*(_QWORD *)v45, v47);
    *(_QWORD *)v44 = v46;
    v44[8] = v47;
    v48 = a3[8];
    v49 = (uint64_t *)((char *)v4 + v48);
    v50 = (uint64_t *)((char *)a2 + v48);
    v51 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v50) == 1)
    {
      v52 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v49, v50, v52);
      v53 = v49;
      v54 = v51;
      v55 = 1;
    }
    else
    {
      *v49 = *v50;
      swift_retain();
      v53 = v49;
      v54 = v51;
      v55 = 0;
    }
    swift_storeEnumTagMultiPayload(v53, v54, v55);
  }
  return v4;
}

double sub_10022A37C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  double result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(type metadata accessor for FeelsLikeComponentViewModel(0) + 24);
  v5 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v4, 1, v5))
  {
    swift_bridgeObjectRelease();
    v6 = v4 + *(int *)(v5 + 20);
    v7 = type metadata accessor for TemperatureScaleConfiguration(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
    type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_1000B15F8(*(_QWORD *)(a1 + a2[5]), *(_BYTE *)(a1 + a2[5] + 8));
  sub_1000B15F8(*(_QWORD *)(a1 + a2[6]), *(_BYTE *)(a1 + a2[6] + 8));
  sub_1000B15F8(*(_QWORD *)(a1 + a2[7]), *(_BYTE *)(a1 + a2[7] + 8));
  v8 = (_QWORD *)(a1 + a2[8]);
  sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v8) == 1)
  {
    v9 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v8).n128_u64[0];
  }
  return result;
}

_QWORD *sub_10022A4D8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t, __n128);
  __n128 v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = type metadata accessor for FeelsLikeComponentViewModel(0);
  v9 = *(int *)(v8 + 24);
  v10 = (_QWORD *)((char *)a1 + v9);
  v11 = (_QWORD *)((char *)a2 + v9);
  v12 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12))
  {
    v13 = sub_1000BA294(&qword_100BC3360);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = v11[1];
    *v10 = *v11;
    v10[1] = v14;
    v15 = *(int *)(v12 + 20);
    v16 = (char *)v10 + v15;
    v17 = (char *)v11 + v15;
    v18 = type metadata accessor for TemperatureScaleConfiguration(0);
    v53 = v8;
    v19 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v18 - 8) + 16);
    v20 = swift_bridgeObjectRetain(v14);
    v19(v16, v17, v18, v20);
    v8 = v53;
    v21 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
    *(_QWORD *)&v16[v21[5]] = *(_QWORD *)&v17[v21[5]];
    *(_QWORD *)&v16[v21[6]] = *(_QWORD *)&v17[v21[6]];
    *(_QWORD *)&v16[v21[7]] = *(_QWORD *)&v17[v21[7]];
    v22 = v21[8];
    v23 = &v16[v22];
    v24 = &v17[v22];
    v26 = *(_QWORD *)v24;
    v25 = *((_QWORD *)v24 + 1);
    *(_QWORD *)v23 = v26;
    *((_QWORD *)v23 + 1) = v25;
    v16[v21[9]] = v17[v21[9]];
    swift_bridgeObjectRetain(v25);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
  }
  v27 = *(int *)(v8 + 28);
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  v31 = a3[5];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)v33;
  v35 = v33[8];
  swift_bridgeObjectRetain(v30);
  sub_10008D47C(v34, v35);
  *(_QWORD *)v32 = v34;
  v32[8] = v35;
  v36 = a3[6];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  v39 = *(_QWORD *)v38;
  v40 = v38[8];
  sub_10008D47C(*(_QWORD *)v38, v40);
  *(_QWORD *)v37 = v39;
  v37[8] = v40;
  v41 = a3[7];
  v42 = (char *)a1 + v41;
  v43 = (char *)a2 + v41;
  v44 = *(_QWORD *)v43;
  v45 = v43[8];
  sub_10008D47C(*(_QWORD *)v43, v45);
  *(_QWORD *)v42 = v44;
  v42[8] = v45;
  v46 = a3[8];
  v47 = (_QWORD *)((char *)a1 + v46);
  v48 = (_QWORD *)((char *)a2 + v46);
  v49 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v48) == 1)
  {
    v50 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v47, v48, v50);
    v51 = 1;
  }
  else
  {
    *v47 = *v48;
    swift_retain();
    v51 = 0;
  }
  swift_storeEnumTagMultiPayload(v47, v49, v51);
  return a1;
}

_QWORD *sub_10022A758(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t, __n128);
  __n128 v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  int *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;

  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v7 = a2[3];
  a1[3] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  v8 = type metadata accessor for FeelsLikeComponentViewModel(0);
  v9 = *(int *)(v8 + 24);
  v10 = (_QWORD *)((char *)a1 + v9);
  v11 = (_QWORD *)((char *)a2 + v9);
  v12 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
  v13 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v12);
  v14 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12);
  if (v13)
  {
    if (!v14)
    {
      *v10 = *v11;
      v15 = v11[1];
      v10[1] = v15;
      v16 = *(int *)(v12 + 20);
      v17 = (char *)v10 + v16;
      v18 = (char *)v11 + v16;
      v19 = type metadata accessor for TemperatureScaleConfiguration(0);
      v70 = v8;
      v20 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v19 - 8) + 16);
      v21 = swift_bridgeObjectRetain(v15);
      v20(v17, v18, v19, v21);
      v8 = v70;
      v22 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
      *(_QWORD *)&v17[v22[5]] = *(_QWORD *)&v18[v22[5]];
      *(_QWORD *)&v17[v22[6]] = *(_QWORD *)&v18[v22[6]];
      *(_QWORD *)&v17[v22[7]] = *(_QWORD *)&v18[v22[7]];
      v23 = v22[8];
      v24 = &v17[v23];
      v25 = &v18[v23];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v26 = *((_QWORD *)v25 + 1);
      *((_QWORD *)v24 + 1) = v26;
      v17[v22[9]] = v18[v22[9]];
      swift_bridgeObjectRetain(v26);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_1000215BC((uint64_t)v10, type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference);
LABEL_6:
    v27 = sub_1000BA294(&qword_100BC3360);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  *v10 = *v11;
  v60 = v11[1];
  v10[1] = v60;
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRelease();
  v61 = *(int *)(v12 + 20);
  v62 = (char *)v10 + v61;
  v63 = (char *)v11 + v61;
  v64 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 24))(v62, v63, v64);
  v65 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
  *(_QWORD *)&v62[v65[5]] = *(_QWORD *)&v63[v65[5]];
  *(_QWORD *)&v62[v65[6]] = *(_QWORD *)&v63[v65[6]];
  *(_QWORD *)&v62[v65[7]] = *(_QWORD *)&v63[v65[7]];
  v66 = v65[8];
  v67 = &v62[v66];
  v68 = &v63[v66];
  *(_QWORD *)v67 = *(_QWORD *)v68;
  v69 = *((_QWORD *)v68 + 1);
  *((_QWORD *)v67 + 1) = v69;
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRelease();
  v62[v65[9]] = v63[v65[9]];
LABEL_7:
  v28 = *(int *)(v8 + 28);
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  *v29 = *v30;
  v31 = v30[1];
  v29[1] = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease();
  v32 = a3[5];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = *(_QWORD *)v34;
  v36 = v34[8];
  sub_10008D47C(*(_QWORD *)v34, v36);
  v37 = *(_QWORD *)v33;
  v38 = v33[8];
  *(_QWORD *)v33 = v35;
  v33[8] = v36;
  sub_1000B15F8(v37, v38);
  v39 = a3[6];
  v40 = (char *)a1 + v39;
  v41 = (char *)a2 + v39;
  v42 = *(_QWORD *)v41;
  v43 = v41[8];
  sub_10008D47C(*(_QWORD *)v41, v43);
  v44 = *(_QWORD *)v40;
  v45 = v40[8];
  *(_QWORD *)v40 = v42;
  v40[8] = v43;
  sub_1000B15F8(v44, v45);
  v46 = a3[7];
  v47 = (char *)a1 + v46;
  v48 = (char *)a2 + v46;
  v49 = *(_QWORD *)v48;
  v50 = v48[8];
  sub_10008D47C(*(_QWORD *)v48, v50);
  v51 = *(_QWORD *)v47;
  v52 = v47[8];
  *(_QWORD *)v47 = v49;
  v47[8] = v50;
  sub_1000B15F8(v51, v52);
  if (a1 != a2)
  {
    v53 = a3[8];
    v54 = (_QWORD *)((char *)a1 + v53);
    v55 = (_QWORD *)((char *)a2 + v53);
    sub_100021A14((uint64_t)a1 + v53, &qword_100BC37D8);
    v56 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v55) == 1)
    {
      v57 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v54, v55, v57);
      v58 = 1;
    }
    else
    {
      *v54 = *v55;
      swift_retain();
      v58 = 0;
    }
    swift_storeEnumTagMultiPayload(v54, v56, v58);
  }
  return a1;
}

_OWORD *sub_10022AB3C(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = type metadata accessor for FeelsLikeComponentViewModel(0);
  v8 = *(int *)(v7 + 24);
  v9 = (_OWORD *)((char *)a1 + v8);
  v10 = (_OWORD *)((char *)a2 + v8);
  v11 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v11))
  {
    v12 = sub_1000BA294(&qword_100BC3360);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    *v9 = *v10;
    v13 = *(int *)(v11 + 20);
    v14 = (char *)v9 + v13;
    v15 = (char *)v10 + v13;
    v16 = type metadata accessor for TemperatureScaleConfiguration(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    v17 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
    *(_QWORD *)&v14[v17[5]] = *(_QWORD *)&v15[v17[5]];
    *(_QWORD *)&v14[v17[6]] = *(_QWORD *)&v15[v17[6]];
    *(_QWORD *)&v14[v17[7]] = *(_QWORD *)&v15[v17[7]];
    *(_OWORD *)&v14[v17[8]] = *(_OWORD *)&v15[v17[8]];
    v14[v17[9]] = v15[v17[9]];
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v11);
  }
  *(_OWORD *)((char *)a1 + *(int *)(v7 + 28)) = *(_OWORD *)((char *)a2 + *(int *)(v7 + 28));
  v18 = a3[5];
  v19 = a3[6];
  v20 = (char *)a1 + v18;
  v21 = (char *)a2 + v18;
  v20[8] = v21[8];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v22 = (char *)a1 + v19;
  v23 = (char *)a2 + v19;
  v22[8] = v23[8];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v24 = a3[7];
  v25 = a3[8];
  v26 = (char *)a1 + v24;
  v27 = (char *)a2 + v24;
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v26[8] = v27[8];
  v28 = (char *)a1 + v25;
  v29 = (char *)a2 + v25;
  v30 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v29) == 1)
  {
    v31 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v28, v29, v31);
    swift_storeEnumTagMultiPayload(v28, v30, 1);
  }
  else
  {
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_10022AD3C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = type metadata accessor for FeelsLikeComponentViewModel(0);
  v9 = *(int *)(v8 + 24);
  v10 = (_QWORD *)((char *)a1 + v9);
  v11 = (_QWORD *)((char *)a2 + v9);
  v12 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
  v13 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v12);
  v14 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12);
  if (v13)
  {
    if (!v14)
    {
      *(_OWORD *)v10 = *(_OWORD *)v11;
      v15 = *(int *)(v12 + 20);
      v16 = (char *)v10 + v15;
      v17 = (char *)v11 + v15;
      v18 = type metadata accessor for TemperatureScaleConfiguration(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
      v19 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
      *(_QWORD *)&v16[v19[5]] = *(_QWORD *)&v17[v19[5]];
      *(_QWORD *)&v16[v19[6]] = *(_QWORD *)&v17[v19[6]];
      *(_QWORD *)&v16[v19[7]] = *(_QWORD *)&v17[v19[7]];
      *(_OWORD *)&v16[v19[8]] = *(_OWORD *)&v17[v19[8]];
      v16[v19[9]] = v17[v19[9]];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_1000215BC((uint64_t)v10, type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference);
LABEL_6:
    v20 = sub_1000BA294(&qword_100BC3360);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  v50 = v11[1];
  *v10 = *v11;
  v10[1] = v50;
  swift_bridgeObjectRelease();
  v51 = *(int *)(v12 + 20);
  v52 = (char *)v10 + v51;
  v53 = (char *)v11 + v51;
  v54 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 40))(v52, v53, v54);
  v55 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
  *(_QWORD *)&v52[v55[5]] = *(_QWORD *)&v53[v55[5]];
  *(_QWORD *)&v52[v55[6]] = *(_QWORD *)&v53[v55[6]];
  *(_QWORD *)&v52[v55[7]] = *(_QWORD *)&v53[v55[7]];
  v56 = v55[8];
  v57 = &v52[v56];
  v58 = &v53[v56];
  v60 = *(_QWORD *)v58;
  v59 = *((_QWORD *)v58 + 1);
  *(_QWORD *)v57 = v60;
  *((_QWORD *)v57 + 1) = v59;
  swift_bridgeObjectRelease();
  v52[v55[9]] = v53[v55[9]];
LABEL_7:
  v21 = *(int *)(v8 + 28);
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  v25 = *v23;
  v24 = v23[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  v26 = a3[5];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = *(_QWORD *)v28;
  LOBYTE(v28) = v28[8];
  v30 = *(_QWORD *)v27;
  v31 = v27[8];
  *(_QWORD *)v27 = v29;
  v27[8] = (char)v28;
  sub_1000B15F8(v30, v31);
  v32 = a3[6];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = *(_QWORD *)v34;
  LOBYTE(v34) = v34[8];
  v36 = *(_QWORD *)v33;
  v37 = v33[8];
  *(_QWORD *)v33 = v35;
  v33[8] = (char)v34;
  sub_1000B15F8(v36, v37);
  v38 = a3[7];
  v39 = (char *)a1 + v38;
  v40 = (char *)a2 + v38;
  v41 = *(_QWORD *)v40;
  LOBYTE(v40) = v40[8];
  v42 = *(_QWORD *)v39;
  v43 = v39[8];
  *(_QWORD *)v39 = v41;
  v39[8] = (char)v40;
  sub_1000B15F8(v42, v43);
  if (a1 != a2)
  {
    v44 = a3[8];
    v45 = (char *)a1 + v44;
    v46 = (char *)a2 + v44;
    sub_100021A14((uint64_t)a1 + v44, &qword_100BC37D8);
    v47 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v46) == 1)
    {
      v48 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 32))(v45, v46, v48);
      swift_storeEnumTagMultiPayload(v45, v47, 1);
    }
    else
    {
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10022B06C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10022B078);
}

uint64_t sub_10022B078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v6 = sub_1000C4538();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = v4;
    return _s7Weather24LocationCompositionStateOwet_0(v8, v3, v7);
  }
  if ((_DWORD)v3 != 254)
  {
    v7 = sub_1000BA294((uint64_t *)&unk_100C09CA0);
    v8 = v4 + *(int *)(a3 + 32);
    return _s7Weather24LocationCompositionStateOwet_0(v8, v3, v7);
  }
  v9 = *(unsigned __int8 *)(v4 + *(int *)(a3 + 20) + 8);
  if (v9 > 1)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_10022B108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10022B114);
}

uint64_t sub_10022B114(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = sub_1000C4538();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
  {
    v9 = result;
    v10 = v5;
  }
  else
  {
    if (a3 == 254)
    {
      *(_BYTE *)(v5 + *(int *)(a4 + 20) + 8) = -(char)v4;
      return result;
    }
    v9 = sub_1000BA294((uint64_t *)&unk_100C09CA0);
    v10 = v5 + *(int *)(a4 + 32);
  }
  return _s7Weather24LocationCompositionStateOwst_0(v10, v4, v4, v9);
}

void sub_10022B1A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v2 = type metadata accessor for FeelsLikeComponentViewModel(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "\t";
    v6[2] = "\t";
    v6[3] = "\t";
    sub_100158DB0(319);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

uint64_t sub_10022B234(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AAD17C, 1);
}

double sub_10022B244()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  double result;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for FeelsLikeComponentView(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend((id)objc_opt_self(UIFont), "wu_systemUsesExuberatedLineHeight");
  sub_10000AB54(v1, (uint64_t)v4, type metadata accessor for FeelsLikeComponentView);
  if (v5)
  {
    v6 = &v4[*(int *)(v2 + 24)];
    v7 = *(_QWORD *)v6;
    v8 = v6[8];
    sub_10008D47C(*(_QWORD *)v6, v8);
    sub_1007A5B80();
    v10 = v9;
    sub_1000B15F8(v7, v8);
    sub_1000215BC((uint64_t)v4, type metadata accessor for FeelsLikeComponentView);
    result = 1.0;
    if (!v10)
      return 2.0;
  }
  else
  {
    sub_1000215BC((uint64_t)v4, type metadata accessor for FeelsLikeComponentView);
    return 2.0;
  }
  return result;
}

double sub_10022B354()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  double result;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for FeelsLikeComponentView(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend((id)objc_opt_self(UIFont), "wu_systemUsesExuberatedLineHeight");
  sub_10000AB54(v1, (uint64_t)v4, type metadata accessor for FeelsLikeComponentView);
  if (v5)
  {
    v6 = &v4[*(int *)(v2 + 24)];
    v7 = *(_QWORD *)v6;
    v8 = v6[8];
    sub_10008D47C(*(_QWORD *)v6, v8);
    sub_1007A5B80();
    v10 = v9;
    sub_1000B15F8(v7, v8);
    sub_1000215BC((uint64_t)v4, type metadata accessor for FeelsLikeComponentView);
    result = 0.0;
    if (!v10)
      return -4.0;
  }
  else
  {
    sub_1000215BC((uint64_t)v4, type metadata accessor for FeelsLikeComponentView);
    return -4.0;
  }
  return result;
}

uint64_t sub_10022B464@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  __n128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  uint64_t result;
  uint64_t *v79;
  _BYTE v80[12];
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  _BYTE *v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v91 = a1;
  v2 = type metadata accessor for TypesettingLanguageAwareLineHeightRatio(0);
  v89 = *(_QWORD *)(v2 - 8);
  v90 = v2;
  __chkstk_darwin(v2);
  v88 = &v80[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = sub_1000BA294(&qword_100BCCDA8);
  __chkstk_darwin(v4);
  v6 = &v80[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v87 = &v80[-v8];
  v9 = type metadata accessor for Text.Scale(0);
  __chkstk_darwin(v9);
  v13 = &v80[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = v1[3];
  if (v14)
  {
    v15 = v1[1];
    v16 = v1[2];
    v94 = *v1;
    v95 = v15;
    v92 = v11;
    v93 = v10;
    v17 = sub_100114EF8();
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    v18 = Text.init<A>(_:)(&v94, &type metadata for String, v17);
    v82 = v19;
    v83 = v18;
    v84 = v20;
    v81 = v21 & 1;
    v94 = v16;
    v95 = v14;
    v22 = Text.init<A>(_:)(&v94, &type metadata for String, v17);
    v24 = v23;
    v26 = v25;
    v28 = v27 & 1;
    static Text.Scale.secondary.getter();
    v29 = Text.textScale(_:isEnabled:)(v13, 1, v22, v24, v28, v26);
    v31 = v30;
    v33 = v32;
    v85 = v6;
    v35 = v34 & 1;
    sub_1000D31B4(v22, v24, v28);
    v36 = swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t, __n128))(v92 + 8))(v13, v93, v36);
    v38 = v82;
    v37 = v83;
    LOBYTE(v22) = v81;
    v92 = static Text.+ infix(_:_:)(v83, v82, v81, v84, v29, v31, v35, v33);
    v93 = v39;
    v86 = v40;
    v42 = v41;
    v43 = v35;
    v6 = v85;
    sub_1000D31B4(v29, v31, v43);
    swift_bridgeObjectRelease();
    sub_1000D31B4(v37, v38, v22);
    swift_bridgeObjectRelease();
  }
  else
  {
    v45 = v1[1];
    v94 = *v1;
    v95 = v45;
    v46 = sub_100114EF8();
    swift_bridgeObjectRetain(v45);
    v44 = Text.init<A>(_:)(&v94, &type metadata for String, v46);
    v92 = v44;
    v93 = v47;
    v86 = v48;
    v42 = v49;
  }
  v50 = v42 & 1;
  LODWORD(v85) = v42 & 1;
  v51 = static Font.largeTitle.getter(v44);
  v52 = static Font.title2.getter();
  v53 = (char *)v1 + *(int *)(type metadata accessor for FeelsLikeComponentView(0) + 28);
  v54 = *(_QWORD *)v53;
  v55 = v53[8];
  sub_10008D47C(*(_QWORD *)v53, v55);
  sub_100109B54();
  v57 = v56;
  sub_1000B15F8(v54, v55);
  v58 = enum case for Font.Leading.tight(_:);
  v59 = type metadata accessor for Font.Leading(0);
  v60 = (uint64_t)v87;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 104))(v87, v58, v59);
  _s7Weather24LocationCompositionStateOwst_0(v60, 0, 1, v59);
  sub_100037794(v60, (uint64_t)v6, &qword_100BCCDA8);
  swift_retain();
  swift_retain();
  v61 = sub_10040BDEC(v51, v52, v57 & 1, (uint64_t)v6);
  v62 = v86;
  v63 = Text.font(_:)(v61, v92, v86, v50, v93);
  v65 = v64;
  LOBYTE(v50) = v66;
  v68 = v67;
  swift_release(v51);
  swift_release(v52);
  swift_release(v61);
  LOBYTE(v52) = v50 & 1;
  sub_100021A14(v60, &qword_100BCCDA8);
  v69 = v88;
  static TypesettingLanguageAwareLineHeightRatio.disable.getter(v70);
  v71 = Text.typesettingLanguageAwareLineHeightRatio(_:isEnabled:)(v69, 1, v63, v65, v50 & 1, v68);
  v73 = v72;
  LOBYTE(v51) = v74;
  v76 = v75;
  sub_1000D31B4(v63, v65, v52);
  swift_bridgeObjectRelease();
  sub_1000D31B4(v92, v62, (char)v85);
  v77 = swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v89 + 8))(v69, v90, v77);
  v79 = v91;
  *v91 = v71;
  v79[1] = v73;
  *((_BYTE *)v79 + 16) = v51 & 1;
  v79[3] = v76;
  v79[4] = 0x3FF0000000000000;
  return result;
}

void sub_10022B8B4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  __n128 v22;
  unint64_t v23;
  int v24;
  __n128 v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];

  v31 = a2;
  v32 = type metadata accessor for TypesettingLanguageAwareLineHeightRatio(0);
  v30 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v29 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BlendMode(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_1000BA294(&qword_100BCCDC8);
  __chkstk_darwin(v33);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[1];
  v34[0] = *a1;
  v34[1] = v13;
  v14 = sub_100114EF8();
  swift_bridgeObjectRetain(v13);
  v15 = Text.init<A>(_:)(v34, &type metadata for String, v14);
  v17 = v16;
  v19 = v18;
  v21 = v20 & 1;
  v22.n128_f64[0] = sub_10022B354();
  v23 = v22.n128_u64[0];
  v24 = static HierarchicalShapeStyle.secondary.getter(v22);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for BlendMode.plusLighter(_:), v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v6, v10, v7);
  sub_10000AB54((uint64_t)v6, (uint64_t)&v12[*(int *)(v33 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *(_QWORD *)v12 = v15;
  *((_QWORD *)v12 + 1) = v17;
  v12[16] = v21;
  *((_QWORD *)v12 + 3) = v19;
  *((_QWORD *)v12 + 4) = 0;
  *((_QWORD *)v12 + 5) = v23;
  *((_DWORD *)v12 + 12) = v24;
  sub_1000D55D4(v15, v17, v21);
  swift_bridgeObjectRetain(v19);
  sub_1000215BC((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  sub_1000D31B4(v15, v17, v21);
  v25 = swift_bridgeObjectRelease();
  v26 = v29;
  static TypesettingLanguageAwareLineHeightRatio.disable.getter(v25);
  v27 = sub_10022DE4C();
  View.typesettingLanguageAwareLineHeightRatio(_:isEnabled:)(v26, 1, v33, v27);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v26, v32);
  sub_100021A14((uint64_t)v12, &qword_100BCCDC8);
}

void sub_10022BB38(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  __n128 v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v53 = a2;
  v57 = a3;
  v58 = a1;
  v4 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
  __chkstk_darwin(v4);
  v55 = (uint64_t)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FeelsLikeComponentVarianceView(0);
  __chkstk_darwin(v6);
  v56 = (uint64_t)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v54 = (uint64_t)&v51 - v9;
  v10 = sub_1000BA294(&qword_100BCCDA8);
  __chkstk_darwin(v10);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Font.TextStyle(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000BA294(&qword_100BCCDB0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000BA294(&qword_100BCCDB8);
  __chkstk_darwin(v21);
  v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v52 = (uint64_t)&v51 - v25;
  v26 = a2;
  v27 = v58;
  sub_10022B8B4(v26, (uint64_t)v20);
  v28 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for Font.TextStyle.title3(_:), v13);
  static Font.Weight.semibold.getter(v28);
  v51 = static Font.system(_:weight:)(v16);
  v29 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v30 = static Font.headline.getter(v29);
  v31 = v27 + *(int *)(type metadata accessor for FeelsLikeComponentView(0) + 28);
  v32 = *(_QWORD *)v31;
  LOBYTE(v14) = *(_BYTE *)(v31 + 8);
  sub_10008D47C(*(_QWORD *)v31, v14);
  sub_100109B54();
  LOBYTE(v27) = v33;
  sub_1000B15F8(v32, v14);
  v34 = enum case for Font.Leading.tight(_:);
  v35 = type metadata accessor for Font.Leading(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v12, v34, v35);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v35);
  v36 = (uint64_t *)&v23[*(int *)(v21 + 36)];
  v37 = type metadata accessor for FontWithSmallVariantModifier(0);
  sub_100037794((uint64_t)v12, (uint64_t)v36 + *(int *)(v37 + 24), &qword_100BCCDA8);
  *v36 = v51;
  v36[1] = v30;
  *((_BYTE *)v36 + *(int *)(v37 + 28)) = v27 & 1;
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v23, v20, v17);
  sub_100021A14((uint64_t)v12, &qword_100BCCDA8);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  v38 = v52;
  sub_1000F111C((uint64_t)v23, v52, &qword_100BCCDB8);
  v39 = sub_10022B244();
  v40 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
  v41 = v55;
  sub_10000AB54((uint64_t)v53 + *(int *)(v40 + 20), v55, type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance);
  v42.n128_u64[0] = 2.0;
  v43.n128_u64[0] = 2.0;
  v44 = v54;
  sub_1003DC9EC(v41, v54, 9.0, v42, v43);
  v45 = sub_10022B244();
  sub_100037794(v38, (uint64_t)v23, &qword_100BCCDB8);
  v46 = v56;
  sub_10000AB54(v44, v56, type metadata accessor for FeelsLikeComponentVarianceView);
  v47 = v57;
  sub_100037794((uint64_t)v23, v57, &qword_100BCCDB8);
  v48 = (int *)sub_1000BA294(&qword_100BCCDC0);
  v49 = v47 + v48[12];
  *(double *)v49 = v39;
  *(_BYTE *)(v49 + 8) = 0;
  sub_10000AB54(v46, v47 + v48[16], type metadata accessor for FeelsLikeComponentVarianceView);
  v50 = v47 + v48[20];
  *(double *)v50 = v45;
  *(_BYTE *)(v50 + 8) = 0;
  sub_1000215BC(v44, type metadata accessor for FeelsLikeComponentVarianceView);
  sub_100021A14(v38, &qword_100BCCDB8);
  sub_1000215BC(v46, type metadata accessor for FeelsLikeComponentVarianceView);
  sub_100021A14((uint64_t)v23, &qword_100BCCDB8);
}

uint64_t sub_10022BF98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _QWORD v34[2];

  v1 = sub_1000BA294(&qword_100BCCDA8);
  __chkstk_darwin(v1);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v30 - v5;
  v7 = (_QWORD *)(v0 + *(int *)(type metadata accessor for FeelsLikeComponentViewModel(0) + 28));
  v8 = v7[1];
  v34[0] = *v7;
  v34[1] = v8;
  v9 = sub_100114EF8();
  swift_bridgeObjectRetain(v8);
  v33 = Text.init<A>(_:)(v34, &type metadata for String, v9);
  v11 = v10;
  v13 = v12;
  v15 = v14 & 1;
  v16 = static Font.subheadline.getter(v33);
  v17 = static Font.footnote.getter(v16);
  v18 = v0 + *(int *)(type metadata accessor for FeelsLikeComponentView(0) + 28);
  v19 = *(_QWORD *)v18;
  v20 = *(_BYTE *)(v18 + 8);
  sub_10008D47C(*(_QWORD *)v18, v20);
  sub_100109B54();
  LOBYTE(v8) = v21;
  sub_1000B15F8(v19, v20);
  v22 = enum case for Font.Leading.tight(_:);
  v23 = type metadata accessor for Font.Leading(0);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104);
  v32 = v6;
  v24(v6, v22, v23);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v6, 0, 1, v23);
  sub_100037794((uint64_t)v6, (uint64_t)v3, &qword_100BCCDA8);
  swift_retain();
  v25 = v17;
  swift_retain();
  v26 = v16;
  v27 = sub_10040BDEC(v16, v25, v8 & 1, (uint64_t)v3);
  v28 = v33;
  v31 = Text.font(_:)(v27, v33, v11, v15, v13);
  swift_release(v26);
  swift_release(v25);
  swift_release(v27);
  sub_1000D31B4(v28, v11, v15);
  swift_bridgeObjectRelease();
  sub_100021A14((uint64_t)v32, &qword_100BCCDA8);
  return v31;
}

void sub_10022C1D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t OpaqueTypeConformance2;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];

  v1 = v0;
  v32 = type metadata accessor for AutomationInfo(0);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100098728();
  v5 = v4 - v3;
  v6 = type metadata accessor for AccessibilityChildBehavior(0);
  v30 = *(_QWORD *)(v6 - 8);
  v31 = v6;
  __chkstk_darwin(v6);
  sub_100098728();
  v9 = v8 - v7;
  v10 = sub_1000BA294(&qword_100BCCCF8);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100098728();
  v14 = v13 - v12;
  v15 = sub_1000BA294(&qword_100BCCD00);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  sub_100098728();
  v19 = v18 - v17;
  sub_1000BA294(&qword_100BCCD08);
  sub_1000B42B0();
  __chkstk_darwin(v20);
  sub_100098728();
  v23 = v22 - v21;
  *(_QWORD *)v14 = static VerticalAlignment.center.getter(v24);
  *(_QWORD *)(v14 + 8) = 0;
  *(_BYTE *)(v14 + 16) = 0;
  v25 = sub_1000BA294(&qword_100BCCD10);
  sub_10022C410(v1, v14 + *(int *)(v25 + 44));
  static AccessibilityChildBehavior.combine.getter();
  sub_10003D2DC(&qword_100BCCD18, &qword_100BCCCF8);
  v27 = v26;
  View.accessibilityElement(children:)(v9, v10, v26);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v9, v31);
  sub_100021A14(v14, &qword_100BCCCF8);
  v33[0] = v10;
  v33[1] = v27;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v33, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibilityRespondsToUserInteraction(_:)(1, v15, OpaqueTypeConformance2);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v19, v15);
  v29 = type metadata accessor for AutomationCellInfo(0);
  swift_storeEnumTagMultiPayload(v5, v29, 18);
  swift_storeEnumTagMultiPayload(v5, v32, 1);
  sub_1003351C0();
  sub_1000215BC(v5, type metadata accessor for AutomationInfo);
  sub_100021A14(v23, &qword_100BCCD08);
}

void sub_10022C410(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_1000BA294(&qword_100BCCD20);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BCCD28);
  __chkstk_darwin(v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v16 - v11;
  *(_QWORD *)v6 = static HorizontalAlignment.leading.getter(v13);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  v14 = sub_1000BA294(&qword_100BCCD30);
  sub_10022C598(a1, (uint64_t)&v6[*(int *)(v14 + 44)]);
  sub_100037794((uint64_t)v6, (uint64_t)v9, &qword_100BCCD20);
  *(_QWORD *)&v9[*(int *)(v7 + 36)] = 0x3FF0000000000000;
  sub_100021A14((uint64_t)v6, &qword_100BCCD20);
  sub_1000F111C((uint64_t)v9, (uint64_t)v12, &qword_100BCCD28);
  sub_100037794((uint64_t)v12, (uint64_t)v9, &qword_100BCCD28);
  sub_100037794((uint64_t)v9, a2, &qword_100BCCD28);
  v15 = a2 + *(int *)(sub_1000BA294(&qword_100BCCD38) + 48);
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 0;
  sub_100021A14((uint64_t)v12, &qword_100BCCD28);
  sub_100021A14((uint64_t)v9, &qword_100BCCD28);
}

void sub_10022C598(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t KeyPath;
  uint64_t v36;
  uint64_t v37;
  char v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned __int8 v125;
  uint64_t v126;
  uint64_t v127;

  v122 = a2;
  v118 = sub_1000BA294(&qword_100BCCD40);
  __chkstk_darwin(v118);
  v4 = (char *)&v103 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_1000BA294(&qword_100BCCD48);
  __chkstk_darwin(v116);
  v6 = (char *)&v103 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_1000BA294(&qword_100BCCD50);
  __chkstk_darwin(v117);
  v8 = (char *)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BCCD58);
  __chkstk_darwin(v9);
  v11 = (char *)&v103 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v115 = (uint64_t)&v103 - v13;
  v121 = sub_1000BA294(&qword_100BCCD60);
  __chkstk_darwin(v121);
  v119 = (uint64_t)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = sub_1000BA294(&qword_100BCCD68);
  __chkstk_darwin(v120);
  v16 = (char *)&v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000BA294(&qword_100BC3360);
  __chkstk_darwin(v17);
  v19 = (char *)&v103 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
  __chkstk_darwin(v20);
  v22 = (uint64_t *)((char *)&v103 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = type metadata accessor for FeelsLikeComponentViewModel(0);
  sub_100037794(a1 + *(int *)(v23 + 24), (uint64_t)v19, &qword_100BC3360);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v19, 1, v20) == 1)
  {
    sub_100021A14((uint64_t)v19, &qword_100BC3360);
    sub_10022B464(&v123);
    v24 = v123;
    v119 = v124;
    v25 = v125;
    v115 = v126;
    v26 = v127;
    v27 = sub_10022B244();
    v28 = sub_10022BF98();
    v30 = v29;
    v32 = v31;
    v34 = v33 & 1;
    KeyPath = swift_getKeyPath(&unk_100989BD0);
    v36 = a1 + *(int *)(type metadata accessor for FeelsLikeComponentView(0) + 20);
    v37 = *(_QWORD *)v36;
    v38 = *(_BYTE *)(v36 + 8);
    sub_10008D47C(*(_QWORD *)v36, v38);
    sub_10010BCB4();
    LODWORD(v117) = v39;
    sub_1000B15F8(v37, v38);
    LODWORD(v37) = v25;
    LOBYTE(v123) = v25;
    v118 = v24;
    v40 = v119;
    sub_1000D55D4(v24, v119, v25);
    v41 = v115;
    swift_bridgeObjectRetain(v115);
    sub_1000D55D4(v28, v30, v34);
    swift_bridgeObjectRetain(v32);
    swift_retain();
    v42 = v24;
    LOBYTE(v24) = v37;
    LODWORD(v116) = v37;
    sub_1000D55D4(v42, v40, v37);
    swift_bridgeObjectRetain(v41);
    v43 = v28;
    sub_1000D55D4(v28, v30, v34);
    v44 = v32;
    swift_bridgeObjectRetain(v32);
    swift_retain();
    v45 = v30;
    sub_1000D31B4(v43, v30, v34);
    swift_release(KeyPath);
    v46 = v44;
    swift_bridgeObjectRelease();
    v48 = v118;
    v47 = v119;
    sub_1000D31B4(v118, v119, v123);
    swift_bridgeObjectRelease();
    *(_QWORD *)v16 = v48;
    *((_QWORD *)v16 + 1) = v47;
    v16[16] = v24;
    *((_QWORD *)v16 + 3) = v41;
    *((_QWORD *)v16 + 4) = v26;
    *((double *)v16 + 5) = v27;
    v16[48] = 0;
    v49 = v43;
    *((_QWORD *)v16 + 7) = v43;
    *((_QWORD *)v16 + 8) = v45;
    v16[72] = v34;
    *((_QWORD *)v16 + 10) = v46;
    *((_QWORD *)v16 + 11) = KeyPath;
    *((_QWORD *)v16 + 12) = 4;
    *((_WORD *)v16 + 52) = 0;
    v16[106] = (v117 & 1) == 0;
    swift_storeEnumTagMultiPayload(v16, v120, 1);
    v50 = sub_1000BA294(&qword_100BCCD70);
    v51 = sub_10022DD6C();
    sub_10003D2DC(&qword_100BCCD90, &qword_100BCCD70);
    _ConditionalContent<>.init(storage:)(v16, v121, v50, v51, v52);
    sub_1000D31B4(v49, v45, v34);
    swift_release(KeyPath);
    swift_bridgeObjectRelease();
    sub_1000D31B4(v118, v119, v116);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10022DE08((uint64_t)v19, (uint64_t)v22);
    v53 = a1 + *(int *)(type metadata accessor for FeelsLikeComponentView(0) + 20);
    v54 = *(_QWORD *)v53;
    v55 = *(_BYTE *)(v53 + 8);
    sub_10008D47C(*(_QWORD *)v53, v55);
    sub_10010BCB4();
    v57 = v56;
    v58 = sub_1000B15F8(v54, v55);
    if ((v57 & 1) != 0)
    {
      *v4 = static Axis.Set.vertical.getter(v58);
      v94 = sub_1000BA294(&qword_100BCCD98);
      sub_10022CEF8(a1, v22, (uint64_t)&v4[*(int *)(v94 + 44)]);
      sub_100037794((uint64_t)v4, (uint64_t)v6, &qword_100BCCD40);
      swift_storeEnumTagMultiPayload(v6, v116, 1);
      sub_10003D2DC(&qword_100BCCD80, &qword_100BCCD50);
      v96 = v95;
      sub_10003D2DC(&qword_100BCCD88, &qword_100BCCD40);
      v97 = (uint64_t)v4;
      v92 = v119;
      _ConditionalContent<>.init(storage:)(v6, v117, v118, v96, v98);
      sub_100021A14(v97, &qword_100BCCD40);
    }
    else
    {
      sub_10022B464(&v123);
      v59 = v123;
      v103 = v124;
      v60 = v125;
      v61 = v126;
      v104 = v126;
      v62 = v127;
      v109 = v6;
      v63 = v115;
      sub_10022BB38(a1, v22, v115);
      v112 = sub_10022BF98();
      v113 = v64;
      v110 = v22;
      v66 = v65;
      v105 = v67 & 1;
      v68 = swift_getKeyPath(&unk_100989BD0);
      v111 = v68;
      v69 = v60;
      v114 = v60;
      LOBYTE(v123) = v60;
      v70 = (uint64_t)v11;
      v108 = v11;
      sub_100037794(v63, (uint64_t)v11, &qword_100BCCD58);
      v71 = v59;
      v72 = v103;
      *(_QWORD *)v8 = v59;
      *((_QWORD *)v8 + 1) = v72;
      v8[16] = v69;
      *((_QWORD *)v8 + 3) = v61;
      *((_QWORD *)v8 + 4) = v62;
      v106 = v8;
      v73 = sub_1000BA294(&qword_100BCCDA0);
      sub_100037794(v70, (uint64_t)&v8[*(int *)(v73 + 48)], &qword_100BCCD58);
      v74 = &v8[*(int *)(v73 + 64)];
      v76 = v112;
      v75 = v113;
      *(_QWORD *)v74 = v112;
      *((_QWORD *)v74 + 1) = v66;
      v77 = v105;
      v74[16] = v105;
      *((_QWORD *)v74 + 3) = v75;
      *((_QWORD *)v74 + 4) = v68;
      *((_QWORD *)v74 + 5) = 3;
      v74[48] = 0;
      *(_WORD *)(v74 + 49) = 256;
      v78 = v72;
      LOBYTE(v68) = v114;
      sub_1000D55D4(v71, v72, v114);
      v79 = v104;
      swift_bridgeObjectRetain(v104);
      v80 = v76;
      v81 = v76;
      v82 = v66;
      sub_1000D55D4(v81, v66, v77);
      v83 = v75;
      swift_bridgeObjectRetain(v75);
      v84 = v111;
      swift_retain();
      sub_1000D55D4(v71, v78, v68);
      swift_bridgeObjectRetain(v79);
      v107 = v82;
      sub_1000D55D4(v80, v82, v77);
      swift_bridgeObjectRetain(v83);
      swift_retain();
      v85 = v80;
      v86 = v82;
      v22 = v110;
      LOBYTE(v80) = v77;
      sub_1000D31B4(v85, v86, v77);
      swift_release(v84);
      swift_bridgeObjectRelease();
      sub_100021A14((uint64_t)v108, &qword_100BCCD58);
      sub_1000D31B4(v71, v78, v123);
      swift_bridgeObjectRelease();
      v87 = (uint64_t)v106;
      v88 = (uint64_t)v109;
      sub_100037794((uint64_t)v106, (uint64_t)v109, &qword_100BCCD50);
      swift_storeEnumTagMultiPayload(v88, v116, 0);
      sub_10003D2DC(&qword_100BCCD80, &qword_100BCCD50);
      v90 = v89;
      sub_10003D2DC(&qword_100BCCD88, &qword_100BCCD40);
      v91 = v90;
      v92 = v119;
      _ConditionalContent<>.init(storage:)(v88, v117, v118, v91, v93);
      sub_100021A14(v87, &qword_100BCCD50);
      sub_1000D31B4(v112, v107, v80);
      swift_release(v111);
      swift_bridgeObjectRelease();
      sub_100021A14(v115, &qword_100BCCD58);
      sub_1000D31B4(v71, v78, v114);
      swift_bridgeObjectRelease();
    }
    v99 = v120;
    sub_100037794(v92, (uint64_t)v16, &qword_100BCCD60);
    swift_storeEnumTagMultiPayload(v16, v99, 0);
    v100 = sub_1000BA294(&qword_100BCCD70);
    v101 = sub_10022DD6C();
    sub_10003D2DC(&qword_100BCCD90, &qword_100BCCD70);
    _ConditionalContent<>.init(storage:)(v16, v121, v100, v101, v102);
    sub_100021A14(v92, &qword_100BCCD60);
    sub_1000215BC((uint64_t)v22, type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference);
  }
}

void sub_10022CEF8(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[2];
  char v52;
  uint64_t v53;
  uint64_t v54;

  v50 = a3;
  v5 = sub_1000BA294(&qword_100BCCD58);
  __chkstk_darwin(v5);
  v47 = (uint64_t)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v44 - v8;
  v10 = sub_1000BA294(&qword_100BCCDF8);
  __chkstk_darwin(v10);
  v49 = (uint64_t)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v44 - v13;
  v15 = sub_1000BA294(&qword_100BCCE00);
  __chkstk_darwin(v15);
  v48 = (uint64_t)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v44 - v18;
  v20 = sub_1000BA294(&qword_100BCCE08);
  __chkstk_darwin(v20);
  v46 = (uint64_t)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v44 - v23;
  *(_QWORD *)v24 = static HorizontalAlignment.leading.getter(v25);
  *((_QWORD *)v24 + 1) = 0;
  v24[16] = 0;
  v26 = sub_1000BA294(&qword_100BCCE10);
  sub_10022D2E0(a1, a2, (uint64_t)&v24[*(int *)(v26 + 44)]);
  *(_QWORD *)v19 = static HorizontalAlignment.leading.getter(v27);
  *((_QWORD *)v19 + 1) = 0;
  v19[16] = 0;
  v28 = sub_1000BA294(&qword_100BCCE18);
  sub_10022D4EC(a1, a2, (uint64_t)&v19[*(int *)(v28 + 44)]);
  *(_QWORD *)v14 = static HorizontalAlignment.leading.getter(v29);
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 0;
  v45 = v14;
  v30 = &v14[*(int *)(sub_1000BA294(&qword_100BCCE20) + 44)];
  sub_10022B464(v51);
  v32 = v51[0];
  v31 = v51[1];
  v33 = v52;
  v34 = v53;
  v35 = v54;
  sub_10022BB38(a1, a2, (uint64_t)v9);
  v36 = v47;
  sub_100037794((uint64_t)v9, v47, &qword_100BCCD58);
  *(_QWORD *)v30 = v32;
  *((_QWORD *)v30 + 1) = v31;
  v30[16] = v33;
  *((_QWORD *)v30 + 3) = v34;
  *((_QWORD *)v30 + 4) = v35;
  v37 = sub_1000BA294(&qword_100BCCE28);
  sub_100037794(v36, (uint64_t)&v30[*(int *)(v37 + 48)], &qword_100BCCD58);
  sub_1000D55D4(v32, v31, v33);
  swift_bridgeObjectRetain(v34);
  sub_100021A14((uint64_t)v9, &qword_100BCCD58);
  sub_100021A14(v36, &qword_100BCCD58);
  sub_1000D31B4(v32, v31, v33);
  swift_bridgeObjectRelease();
  v38 = v46;
  sub_100037794((uint64_t)v24, v46, &qword_100BCCE08);
  v39 = v48;
  sub_100037794((uint64_t)v19, v48, &qword_100BCCE00);
  v40 = (uint64_t)v45;
  v41 = v49;
  sub_100037794((uint64_t)v45, v49, &qword_100BCCDF8);
  v42 = v50;
  sub_100037794(v38, v50, &qword_100BCCE08);
  v43 = sub_1000BA294(&qword_100BCCE30);
  sub_100037794(v39, v42 + *(int *)(v43 + 48), &qword_100BCCE00);
  sub_100037794(v41, v42 + *(int *)(v43 + 64), &qword_100BCCDF8);
  sub_100021A14(v40, &qword_100BCCDF8);
  sub_100021A14((uint64_t)v19, &qword_100BCCE00);
  sub_100021A14((uint64_t)v24, &qword_100BCCE08);
  sub_100021A14(v41, &qword_100BCCDF8);
  sub_100021A14(v39, &qword_100BCCE00);
  sub_100021A14(v38, &qword_100BCCE08);
}

void sub_10022D2E0(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;

  v6 = sub_1000BA294(&qword_100BCCD58);
  __chkstk_darwin(v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v30 - v10;
  sub_10022B464(&v37);
  v12 = v37;
  v13 = v38;
  v31 = v38;
  v32 = v37;
  v14 = v39;
  v15 = v40;
  v16 = v41;
  sub_10022BB38(a1, a2, (uint64_t)v11);
  v17 = sub_10022BF98();
  v33 = v18;
  v34 = v17;
  v35 = v19;
  LOBYTE(a2) = v20 & 1;
  KeyPath = swift_getKeyPath(&unk_100989BD0);
  LOBYTE(v37) = v14;
  v36 = v8;
  sub_100037794((uint64_t)v11, (uint64_t)v8, &qword_100BCCD58);
  *(_QWORD *)a3 = v12;
  *(_QWORD *)(a3 + 8) = v13;
  *(_BYTE *)(a3 + 16) = v14;
  *(_QWORD *)(a3 + 24) = v15;
  v22 = v15;
  *(_QWORD *)(a3 + 32) = v16;
  v23 = sub_1000BA294(&qword_100BCCE38);
  sub_100037794((uint64_t)v8, a3 + *(int *)(v23 + 48), &qword_100BCCD58);
  v24 = a3 + *(int *)(v23 + 64);
  v26 = v33;
  v25 = v34;
  *(_QWORD *)v24 = v34;
  *(_QWORD *)(v24 + 8) = v26;
  *(_BYTE *)(v24 + 16) = (_BYTE)a2;
  v27 = v35;
  *(_QWORD *)(v24 + 24) = v35;
  *(_QWORD *)(v24 + 32) = KeyPath;
  *(_QWORD *)(v24 + 40) = 3;
  *(_BYTE *)(v24 + 48) = 0;
  v29 = v31;
  v28 = v32;
  sub_1000D55D4(v32, v31, v14);
  swift_bridgeObjectRetain(v22);
  sub_1000D55D4(v25, v26, (char)a2);
  swift_bridgeObjectRetain(v27);
  swift_retain();
  sub_100021A14((uint64_t)v11, &qword_100BCCD58);
  sub_1000D31B4(v25, v26, (char)a2);
  swift_release(KeyPath);
  swift_bridgeObjectRelease();
  sub_100021A14((uint64_t)v36, &qword_100BCCD58);
  sub_1000D31B4(v28, v29, v37);
  swift_bridgeObjectRelease();
}

void sub_10022D4EC(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  __n128 v42;
  double v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  __n128 v56;
  uint64_t (*v57)(char *, uint64_t, __n128);
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t, uint64_t);
  uint64_t v61;
  __n128 v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  int v70;
  uint64_t v71;
  uint64_t KeyPath;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  void (*v86)(char *);
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  unsigned __int8 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  double v108;
  char v109;
  double v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  double *v119;
  uint64_t v120;
  double *v121;
  uint64_t *v122;

  v83 = (uint64_t)a2;
  v96 = a3;
  v5 = type metadata accessor for Font.Leading(0);
  v99 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v89 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
  __chkstk_darwin(v7);
  v88 = (uint64_t)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FeelsLikeComponentVarianceView(0);
  __chkstk_darwin(v9);
  v95 = (uint64_t)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v100 = (uint64_t)&v81 - v12;
  v13 = sub_1000BA294(&qword_100BCCDA8);
  __chkstk_darwin(v13);
  v90 = (uint64_t)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v81 - v16;
  v84 = sub_1000BA294(&qword_100BCCDB0);
  v18 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v20 = (char *)&v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000BA294(&qword_100BCCDB8);
  __chkstk_darwin(v21);
  v98 = (uint64_t)&v81 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v97 = (uint64_t)&v81 - v24;
  sub_10022B464(&v101);
  v93 = v101;
  v92 = (uint64_t)v102;
  v91 = v103;
  v94 = v104;
  v25 = v105;
  v26 = a2;
  v27 = a1;
  sub_10022B8B4(v26, (uint64_t)v20);
  v82 = static Font.headline.getter(v28);
  v81 = static Font.subheadline.getter(v82);
  v87 = a1 + *(int *)(type metadata accessor for FeelsLikeComponentView(0) + 28);
  v29 = *(_QWORD *)v87;
  v30 = *(_BYTE *)(v87 + 8);
  sub_10008D47C(*(_QWORD *)v87, v30);
  sub_100109B54();
  v32 = v31;
  sub_1000B15F8(v29, v30);
  v85 = enum case for Font.Leading.tight(_:);
  v86 = *(void (**)(char *))(v99 + 104);
  v86(v17);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v17, 0, 1, v5);
  v33 = v98;
  v34 = (uint64_t *)(v98 + *(int *)(v21 + 36));
  v35 = type metadata accessor for FontWithSmallVariantModifier(0);
  sub_100037794((uint64_t)v17, (uint64_t)v34 + *(int *)(v35 + 24), &qword_100BCCDA8);
  v36 = v81;
  *v34 = v82;
  v34[1] = v36;
  *((_BYTE *)v34 + *(int *)(v35 + 28)) = v32 & 1;
  v37 = v84;
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 16))(v33, v20, v84);
  sub_100021A14((uint64_t)v17, &qword_100BCCDA8);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v37);
  sub_1000F111C(v33, v97, &qword_100BCCDB8);
  v38 = sub_10022B244();
  v39 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
  v40 = v88;
  sub_10000AB54(v83 + *(int *)(v39 + 20), v88, type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance);
  v41.n128_u64[0] = 2.0;
  v42.n128_u64[0] = 2.0;
  sub_1003DC9EC(v40, v100, 9.0, v41, v42);
  v43 = sub_10022B244();
  v44 = (uint64_t *)(v27 + *(int *)(type metadata accessor for FeelsLikeComponentViewModel(0) + 28));
  v45 = v44[1];
  v101 = *v44;
  v102 = (char *)v45;
  v46 = sub_100114EF8();
  swift_bridgeObjectRetain(v45);
  v84 = Text.init<A>(_:)(&v101, &type metadata for String, v46);
  v83 = v47;
  v88 = v48;
  v50 = v49 & 1;
  v51 = static Font.footnote.getter(v84);
  v52 = v89;
  v53 = v85;
  v54 = (void (*)(char *, uint64_t, uint64_t))v86;
  ((void (*)(char *, _QWORD, uint64_t))v86)(v89, v85, v5);
  v55 = Font.leading(_:)(v52, v51);
  v56 = swift_release(v51);
  v57 = *(uint64_t (**)(char *, uint64_t, __n128))(v99 + 8);
  v58 = v57(v52, v5, v56);
  v59 = static Font.caption2.getter(v58);
  v54(v52, v53, v5);
  v60 = v54;
  v61 = Font.leading(_:)(v52, v59);
  v62 = swift_release(v59);
  v57(v52, v5, v62);
  v63 = *(_QWORD *)v87;
  LOBYTE(v52) = *(_BYTE *)(v87 + 8);
  sub_10008D47C(*(_QWORD *)v87, (char)v52);
  sub_100109B54();
  LOBYTE(v57) = v64;
  sub_1000B15F8(v63, (char)v52);
  v60(v17, v53, v5);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v17, 0, 1, v5);
  v65 = v90;
  sub_100037794((uint64_t)v17, v90, &qword_100BCCDA8);
  swift_retain();
  swift_retain();
  v66 = sub_10040BDEC(v55, v61, v57 & 1, v65);
  v67 = v84;
  v68 = v83;
  v90 = Text.font(_:)(v66, v84, v83, v50, v88);
  v89 = v69;
  LODWORD(v87) = v70;
  v99 = v71;
  swift_release(v55);
  swift_release(v61);
  swift_release(v66);
  sub_1000D31B4(v67, v68, v50);
  swift_bridgeObjectRelease();
  sub_100021A14((uint64_t)v17, &qword_100BCCDA8);
  KeyPath = swift_getKeyPath(&unk_100989BD0);
  v73 = v93;
  v74 = v92;
  v112 = v93;
  v113 = v92;
  LOBYTE(v68) = v91;
  v114 = v91;
  v75 = v94;
  v115 = v94;
  v116 = v25;
  v117 = &v112;
  v76 = v97;
  v77 = v98;
  sub_100037794(v97, v98, &qword_100BCCDB8);
  v110 = v38;
  v111 = 0;
  v118 = v77;
  v119 = &v110;
  v78 = v100;
  v79 = v95;
  sub_10000AB54(v100, v95, type metadata accessor for FeelsLikeComponentVarianceView);
  v108 = v43;
  v109 = 0;
  v120 = v79;
  v121 = &v108;
  v101 = v90;
  v102 = v89;
  v103 = v87 & 1;
  v104 = v99;
  v105 = KeyPath;
  v106 = 3;
  v107 = 0;
  v122 = &v101;
  sub_10035D7E4();
  sub_1000D55D4(v73, v74, v68);
  swift_bridgeObjectRetain(v75);
  sub_1000215BC(v78, type metadata accessor for FeelsLikeComponentVarianceView);
  sub_100021A14(v76, &qword_100BCCDB8);
  sub_1000D31B4(v73, v74, v68);
  swift_bridgeObjectRelease();
  v80 = v105;
  sub_1000D31B4(v101, (uint64_t)v102, v103);
  swift_release(v80);
  swift_bridgeObjectRelease();
  sub_1000215BC(v79, type metadata accessor for FeelsLikeComponentVarianceView);
  sub_100021A14(v77, &qword_100BCCDB8);
  sub_1000D31B4(v112, v113, v114);
  swift_bridgeObjectRelease();
}

unint64_t sub_10022DD6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCCD78;
  if (!qword_100BCCD78)
  {
    v1 = sub_100075EB0(&qword_100BCCD60);
    sub_10003D2DC(&qword_100BCCD80, &qword_100BCCD50);
    sub_10003D2DC(&qword_100BCCD88, &qword_100BCCD40);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCCD78);
  }
  return result;
}

uint64_t sub_10022DE08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10022DE4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCCDD0;
  if (!qword_100BCCDD0)
  {
    v1 = sub_100075EB0(&qword_100BCCDC8);
    sub_10022DEB8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCCDD0);
  }
  return result;
}

unint64_t sub_10022DEB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCCDD8;
  if (!qword_100BCCDD8)
  {
    v1 = sub_100075EB0(&qword_100BCCDE0);
    sub_100157414();
    sub_10003D2DC(&qword_100BC3AE0, &qword_100BC3AE8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCCDD8);
  }
  return result;
}

unint64_t sub_10022DF40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCCE40;
  if (!qword_100BCCE40)
  {
    v1 = sub_100075EB0(&qword_100BCCE48);
    sub_10022DFC4();
    sub_10000F1C8((unint64_t *)&qword_100BC6768, type metadata accessor for AutomationInfoViewModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCCE40);
  }
  return result;
}

unint64_t sub_10022DFC4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_100BCCE50;
  if (!qword_100BCCE50)
  {
    v1 = sub_100075EB0(&qword_100BCCD08);
    v2 = sub_100075EB0(&qword_100BCCCF8);
    sub_10003D2DC(&qword_100BCCD18, &qword_100BCCCF8);
    v4[0] = v2;
    v4[1] = v3;
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10000F1C8((unint64_t *)&qword_100BC4E48, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCCE50);
  }
  return result;
}

uint64_t property wrapper backing initializer of WeatherAsyncImage.loadingState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v5 = type metadata accessor for WeatherAsyncImage.LoadingState(0, a2, a3, a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v11 - v8;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))((char *)&v11 - v8, a1, v5, v7);
  State.init(wrappedValue:)(v9, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
}

uint64_t type metadata accessor for WeatherAsyncImage.LoadingState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeatherAsyncImage.LoadingState);
}

void _s7Weather0A10AsyncImageV13_loadingState33_511D3CCAD74339EA7557309BE8DB11CCLL7SwiftUI0E0VyAC07LoadingE0AELLVyx_GGvpfi_0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a4 = 0;
  v5 = type metadata accessor for WeatherAsyncImage.LoadingState(0, a1, a2, a3);
  v6 = (uint64_t)a4 + *(int *)(v5 + 36);
  v7 = sub_10009896C();
  sub_10009D34C(v6, v8, v9, v7);
  *(_QWORD *)((char *)a4 + *(int *)(v5 + 40)) = 0x8000000000000000;
  sub_100079F70();
}

void WeatherAsyncImage.init<>(url:scale:)(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v6 = sub_1000BA294(&qword_100BD4280);
  __chkstk_darwin(v6);
  v8 = (char *)&v9 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007EBC8(a1, (uint64_t)v8, &qword_100BD4280);
  sub_10022E3BC((uint64_t)v8, 0, (uint64_t)sub_10022E240, 0, a2, a3);
  sub_100021AA4(a1, &qword_100BD4280);
}

void sub_10022E240(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 >> 62)
  {
    v4 = type metadata accessor for SettingReader(0);
    v5 = static SettingReader.shared.getter(v4);
    if (qword_100BC23A0 != -1)
      swift_once(&qword_100BC23A0, sub_100683E68);
    SettingReader.read<A>(_:)(&v6);
    swift_release(v5);
    if (v6 == 1)
      v3 = Image.init(systemName:)(0xD000000000000018, 0x80000001009F5000);
    else
      v3 = Image.init(_:bundle:)(0, 0xE000000000000000, 0);
  }
  else
  {
    swift_retain();
  }
  *a2 = v3;
}

void WeatherAsyncImagePhase.image.getter(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1 >> 62)
  {
    v1 = type metadata accessor for SettingReader(0);
    static SettingReader.shared.getter(v1);
    if (qword_100BC23A0 != -1)
      swift_once(&qword_100BC23A0, sub_100683E68);
    SettingReader.read<A>(_:)(&v2);
    swift_release();
    if (v2 == 1)
      Image.init(systemName:)(0xD000000000000018, 0x80000001009F5000);
  }
  else
  {
    swift_retain();
  }
}

uint64_t sub_10022E3BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int *v17;
  uint64_t result;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a3;
  v22 = a4;
  v10 = sub_1000BA294(&qword_100BCD000);
  __chkstk_darwin(v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v21 - v14);
  v16 = type metadata accessor for URL(0);
  _s7Weather24LocationCompositionStateOwst_0(a5, 1, 1, v16);
  v17 = (int *)sub_1000BA294(qword_100BCD008);
  *v15 = 0;
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15 + *(int *)(v10 + 36), 1, 1, v16);
  *(_QWORD *)((char *)v15 + *(int *)(v10 + 40)) = 0x8000000000000000;
  sub_10007EBC8((uint64_t)v15, (uint64_t)v12, &qword_100BCD000);
  State.init(wrappedValue:)(v12, v10);
  sub_100021AA4((uint64_t)v15, &qword_100BCD000);
  result = sub_100230A10(a1, a5);
  *(double *)(a5 + v17[9]) = a6;
  *(_QWORD *)(a5 + v17[10]) = a2;
  v19 = (_QWORD *)(a5 + v17[11]);
  v20 = v22;
  *v19 = v21;
  v19[1] = v20;
  return result;
}

uint64_t WeatherAsyncImage.init(url:scale:transaction:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>)
{
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  _QWORD *v27;
  uint64_t v28;

  v16 = type metadata accessor for WeatherAsyncImage.LoadingState(0, a5, a6, a4);
  __chkstk_darwin(v16);
  v18 = (uint64_t *)((char *)&v28 - v17);
  v19 = sub_10009896C();
  sub_10009D34C(a7, v20, v21, v19);
  v23 = (int *)type metadata accessor for WeatherAsyncImage(0, a5, a6, v22);
  _s7Weather0A10AsyncImageV13_loadingState33_511D3CCAD74339EA7557309BE8DB11CCLL7SwiftUI0E0VyAC07LoadingE0AELLVyx_GGvpfi_0(a5, a6, v24, v18);
  property wrapper backing initializer of WeatherAsyncImage.loadingState((uint64_t)v18, a5, a6, v25);
  result = sub_100230A10(a1, a7);
  *(double *)(a7 + v23[9]) = a8;
  *(_QWORD *)(a7 + v23[10]) = a2;
  v27 = (_QWORD *)(a7 + v23[11]);
  *v27 = a3;
  v27[1] = a4;
  return result;
}

void *sub_10022E644@<X0>(unint64_t a1@<X0>, void *a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v21;
  char v22;
  _QWORD v24[17];
  _BYTE v25[144];
  _QWORD v26[18];
  _BYTE v27[137];
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  __int128 v40;

  v5 = type metadata accessor for Image.ResizingMode(0, a3);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  WeatherAsyncImagePhase.image.getter(a1);
  if (v9)
  {
    v10 = v9;
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for Image.ResizingMode.stretch(_:), v5);
    v11 = Image.resizable(capInsets:resizingMode:)(v8, v10, 0.0, 0.0, 0.0, 0.0);
    v12 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v13 = static Alignment.center.getter(v12);
    v22 = 1;
    v21 = 1;
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v28, 0, 0, 0, 1, 0, 1, 0, 0, 0, v21, 0, v22, v13, v14);
    v24[0] = v11;
    v24[1] = 0;
    LOWORD(v24[2]) = 257;
    v24[3] = v28;
    LOBYTE(v24[4]) = v29;
    v24[5] = v30;
    LOBYTE(v24[6]) = v31;
    v24[7] = v32;
    LOBYTE(v24[8]) = v33;
    v24[9] = v34;
    LOBYTE(v24[10]) = v35;
    v24[11] = v36;
    LOBYTE(v24[12]) = v37;
    v24[13] = v38;
    LOBYTE(v24[14]) = v39;
    *(_OWORD *)&v24[15] = v40;
    memcpy(v26, v24, 0x88uLL);
    sub_1002327B4((uint64_t)v26);
    sub_1000B45B4();
    sub_10017989C(v24);
    sub_10017989C(v24);
    v15 = sub_1000BA294(&qword_100BCD098);
    v16 = sub_1002326E4();
    _ConditionalContent<>.init(storage:)(v25, v15, &type metadata for Color, v16, &protocol witness table for Color);
    swift_release_n(v11, 2);
    sub_100089020();
  }
  else
  {
    static Color.white.getter(0);
    v17 = Color.opacity(_:)(0.08);
    sub_100089020();
    v26[0] = v17;
    sub_100232690((uint64_t)v26);
    sub_1000B45B4();
    v18 = sub_1000BA294(&qword_100BCD098);
    v19 = sub_1002326E4();
    _ConditionalContent<>.init(storage:)(v25, v18, &type metadata for Color, v19, &protocol witness table for Color);
  }
  return memcpy(a2, v27, 0x89uLL);
}

double sub_10022E8C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id *v26;
  uint64_t v27;
  uint64_t v28;
  id *v29;
  void (*v30)(id *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  double result;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char v39;
  void (*v40)(char *, uint64_t);
  id *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  id *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v64 = a2;
  v5 = type metadata accessor for URL(0);
  v63 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v55 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v52 = (char *)&v51 - v8;
  v9 = sub_1000BA294(&qword_100BCCFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000BA294(&qword_100BD4280);
  __chkstk_darwin(v12);
  v59 = (uint64_t)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v54 = (uint64_t)&v51 - v15;
  __chkstk_darwin(v16);
  v18 = (char *)&v51 - v17;
  v19 = *(_QWORD *)(a3 + 24);
  v60 = *(_QWORD *)(a3 + 16);
  v61 = v19;
  v21 = type metadata accessor for WeatherAsyncImage.LoadingState(0, v60, v19, v20);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v58 = (id *)((char *)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v24);
  v26 = (id *)((char *)&v51 - v25);
  v53 = a3;
  v27 = *(int *)(a3 + 48);
  v62 = v3;
  v28 = v3 + v27;
  v56 = type metadata accessor for State(0, v21);
  v57 = v28;
  State.wrappedValue.getter(v26, v56);
  sub_10007EBC8((uint64_t)v26 + *(int *)(v21 + 36), (uint64_t)v18, &qword_100BD4280);
  v29 = v26;
  v30 = *(void (**)(id *, uint64_t))(v22 + 8);
  v30(v29, v21);
  v31 = (uint64_t)&v11[*(int *)(v9 + 48)];
  sub_10007EBC8((uint64_t)v18, (uint64_t)v11, &qword_100BD4280);
  v32 = v5;
  sub_10007EBC8(v64, v31, &qword_100BD4280);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v5) == 1)
  {
    sub_100021AA4((uint64_t)v18, &qword_100BD4280);
    v33 = _s7Weather24LocationCompositionStateOwet_0(v31, 1, v5);
    v34 = v63;
    if (v33 == 1)
    {
      sub_100021AA4((uint64_t)v11, &qword_100BD4280);
      return result;
    }
  }
  else
  {
    v36 = v54;
    sub_10007EBC8((uint64_t)v11, v54, &qword_100BD4280);
    if (_s7Weather24LocationCompositionStateOwet_0(v31, 1, v32) != 1)
    {
      v34 = v63;
      v37 = v52;
      (*(void (**)(char *, uint64_t, uint64_t))(v63 + 32))(v52, v31, v32);
      sub_100232620(qword_100BCCE60, (uint64_t)&protocol conformance descriptor for URL);
      v39 = dispatch thunk of static Equatable.== infix(_:_:)(v36, v37, v32, v38);
      v40 = *(void (**)(char *, uint64_t))(v34 + 8);
      v40(v37, v32);
      sub_100021AA4((uint64_t)v18, &qword_100BD4280);
      v40((char *)v36, v32);
      sub_100021AA4((uint64_t)v11, &qword_100BD4280);
      if ((v39 & 1) != 0)
        return result;
      goto LABEL_8;
    }
    sub_100021AA4((uint64_t)v18, &qword_100BD4280);
    v34 = v63;
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v36, v32);
  }
  sub_100021AA4((uint64_t)v11, &qword_100BCCFF0);
LABEL_8:
  v41 = v58;
  State.wrappedValue.getter(v58, v56);
  if (*v41)
  {
    v42 = *v41;
    v30(v41, v21);
    objc_msgSend(v42, "cancel");

  }
  else
  {
    v30(v41, v21);
  }
  v43 = (uint64_t)v55;
  v44 = v59;
  sub_10007EBC8(v64, v59, &qword_100BD4280);
  if (_s7Weather24LocationCompositionStateOwet_0(v44, 1, v32) == 1)
  {
    sub_100021AA4(v44, &qword_100BD4280);
    __chkstk_darwin(*(_QWORD *)(v62 + *(int *)(v53 + 40)));
    v45 = v61;
    *(&v51 - 4) = v60;
    *(&v51 - 3) = v45;
    *(&v51 - 2) = v46;
    withTransaction<A>(_:_:)(v47, sub_10023238C, &v51 - 6, &type metadata for () + 1);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v43, v44, v32);
    v48 = swift_allocObject(&unk_100B655F8, 24, 7);
    *(_QWORD *)(v48 + 16) = 0;
    v49 = type metadata accessor for SettingReader(0);
    v50 = static SettingReader.shared.getter(v49);
    if (qword_100BC23A0 != -1)
      swift_once(&qword_100BC23A0, sub_100683E68);
    SettingReader.read<A>(_:)(&v65);
    swift_release(v50);
    sub_10022EFCC(v48, v65, v43, v62, v60, v61);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v43, v32);
    *(_QWORD *)&result = swift_release(v48).n128_u64[0];
  }
  return result;
}

uint64_t sub_10022EDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v7 = type metadata accessor for WeatherAsyncImage.LoadingState(255, a2, a3, a4);
  v8 = type metadata accessor for State(0, v7);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v23 - v10;
  v12 = sub_1000BA294(&qword_100BD4280);
  __chkstk_darwin(v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (id *)((char *)&v23 - v16);
  v19 = a1 + *(int *)(type metadata accessor for WeatherAsyncImage(0, a2, a3, v18) + 48);
  State.wrappedValue.getter(v17, v8);

  *v17 = 0;
  State.wrappedValue.setter(v17, v8);
  v20 = type metadata accessor for URL(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 1, 1, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v19, v8);
  State.wrappedValue.getter(v17, v8);
  sub_100230A10((uint64_t)v14, (uint64_t)v17 + *(int *)(v7 + 36));
  State.wrappedValue.setter(v17, v8);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  State.wrappedValue.getter(v17, v8);
  v21 = *(int *)(v7 + 40);
  sub_100230AFC(*(unint64_t *)((char *)v17 + v21));
  *(id *)((char *)v17 + v21) = (id)0x8000000000000000;
  return State.wrappedValue.setter(v17, v8);
}

void sub_10022EFCC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  NSURL *v25;
  void *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  double v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  int v54;
  char *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  void (*v63)(char *, uint64_t, uint64_t);
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD aBlock[5];
  uint64_t v72;
  char v73[32];

  v69 = a3;
  v70 = a4;
  v8 = a2;
  v56 = a2;
  v60 = a5;
  v61 = a6;
  v66 = type metadata accessor for WeatherAsyncImage.LoadingState(255, a5, a6, a4);
  v65 = type metadata accessor for State(0, v66);
  v68 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v67 = (char *)&v53 - v10;
  v11 = sub_1000BA294(&qword_100BD4280);
  __chkstk_darwin(v11);
  v64 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (id *)((char *)&v53 - v14);
  v58 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v58 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v58);
  v55 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for WeatherAsyncImage(0, a5, a6, v18);
  v20 = *(_QWORD *)(v19 - 8);
  v53 = v19;
  v21 = *(_QWORD *)(v20 + 64);
  __chkstk_darwin(v19);
  v23 = (char *)&v53 - v22;
  v57 = a1;
  swift_beginAccess(a1 + 16, v73, 0, 0);
  v54 = (*(_QWORD *)(a1 + 16) < 1) & v8;
  v62 = objc_msgSend((id)objc_opt_self(NSURLSession), "sharedSession");
  v24 = v69;
  URL._bridgeToObjectiveC()(v25);
  v59 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v70, v19);
  v63 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v27 = v55;
  v28 = v58;
  v63(v55, v24, v58);
  v29 = *(unsigned __int8 *)(v20 + 80);
  v30 = (v29 + 33) & ~v29;
  v31 = (v21 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  v32 = *(unsigned __int8 *)(v16 + 80);
  v33 = (v32 + v31 + 9) & ~v32;
  v34 = swift_allocObject(&unk_100B65620, v33 + v17, v29 | v32 | 7);
  v35 = v61;
  *(_QWORD *)(v34 + 16) = v60;
  *(_QWORD *)(v34 + 24) = v35;
  *(_BYTE *)(v34 + 32) = v54;
  v36 = v34 + v30;
  v37 = v53;
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v36, v23, v53);
  v38 = v34 + v31;
  *(_QWORD *)v38 = v57;
  *(_BYTE *)(v38 + 8) = v56;
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v34 + v33, v27, v28);
  aBlock[4] = sub_100232518;
  v72 = v34;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100230120;
  aBlock[3] = &unk_100B65638;
  v39 = _Block_copy(aBlock);
  v40 = v72;
  swift_retain();
  *(_QWORD *)&v41 = swift_release(v40).n128_u64[0];
  v42 = v62;
  v43 = v59;
  v44 = objc_msgSend(v62, "downloadTaskWithURL:completionHandler:", v59, v39, v41);
  _Block_release(v39);

  v45 = v70 + *(int *)(v37 + 48);
  v46 = v44;
  v47 = v65;
  State.wrappedValue.getter(v15, v65);

  *v15 = v44;
  State.wrappedValue.setter(v15, v47);
  v48 = (uint64_t)v64;
  v49 = v28;
  v63(v64, v69, v28);
  v50 = v48;
  _s7Weather24LocationCompositionStateOwst_0(v48, 0, 1, v49);
  v52 = v67;
  v51 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v67, v45, v47);
  State.wrappedValue.getter(v15, v47);
  sub_100230A10(v50, (uint64_t)v15 + *(int *)(v66 + 36));
  State.wrappedValue.setter(v15, v47);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v47);
  objc_msgSend(v46, "resume");

}

void sub_10022F428(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  NSURL *v31;
  const __CFURL *v32;
  const __CFURL *v33;
  CGImageSource *v34;
  CGImageRef ImageAtIndex;
  uint64_t v36;
  CGImageRef v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;

  v17 = sub_1000BA294(&qword_100BD4280);
  __chkstk_darwin(v17);
  v51 = (uint64_t)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v45 - v20;
  v22 = type metadata accessor for URL(0);
  __chkstk_darwin(v22);
  v27 = (char *)&v45 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a4 & 1) == 0)
  {
    v47 = v27;
    v48 = v25;
    v49 = a7;
    v50 = a6;
    v28 = v23;
    sub_10007EBC8(a1, (uint64_t)v21, &qword_100BD4280);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v21, 1, v28) == 1)
    {
      sub_100021AA4((uint64_t)v21, &qword_100BD4280);
    }
    else
    {
      v46 = a1;
      v29 = v47;
      v30 = v48;
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v47, v21, v28);
      URL._bridgeToObjectiveC()(v31);
      v33 = v32;
      v34 = CGImageSourceCreateWithURL(v32, 0);

      if (v34)
      {
        if ((uint64_t)CGImageSourceGetCount(v34) > 0)
        {
          ImageAtIndex = CGImageSourceCreateImageAtIndex(v34, 0, 0);
          if (ImageAtIndex)
          {
            v37 = ImageAtIndex;
            v38 = type metadata accessor for WeatherAsyncImage(0, a9, a10, v36);
            __chkstk_darwin(*(_QWORD *)(a5 + *(int *)(v38 + 40)));
            *(&v45 - 8) = a9;
            *(&v45 - 7) = a10;
            v39 = v47;
            v40 = v50;
            *(&v45 - 6) = (uint64_t)v47;
            *(&v45 - 5) = v40;
            *(&v45 - 4) = a5;
            *(&v45 - 3) = (uint64_t)v37;
            *(&v45 - 2) = (uint64_t)v34;
            withTransaction<A>(_:_:)(v41, sub_1002325FC, &v45 - 10, &type metadata for () + 1);

            (*(void (**)(char *, uint64_t))(v48 + 8))(v39, v28);
            return;
          }
        }
        (*(void (**)(char *, uint64_t))(v48 + 8))(v47, v28);

      }
      else
      {
        (*(void (**)(char *, uint64_t))(v30 + 8))(v29, v28);
      }
      a1 = v46;
    }
    v42 = v51;
    sub_10007EBC8(a1, v51, &qword_100BD4280);
    _s7Weather24LocationCompositionStateOwet_0(v42, 1, v28);
    sub_100021AA4(v42, &qword_100BD4280);
    a6 = v50;
    LOBYTE(a7) = v49;
  }
  v43 = type metadata accessor for WeatherAsyncImage(0, a9, a10, v24);
  __chkstk_darwin(*(_QWORD *)(a5 + *(int *)(v43 + 40)));
  *(&v45 - 8) = a9;
  *(&v45 - 7) = a10;
  *(&v45 - 6) = a6;
  *(&v45 - 5) = a1;
  *((_BYTE *)&v45 - 32) = a7 & 1;
  *(&v45 - 3) = a8;
  *(&v45 - 2) = a5;
  *(&v45 - 1) = a3;
  withTransaction<A>(_:_:)(v44, sub_1002325D4, &v45 - 10, &type metadata for () + 1);
}

uint64_t sub_10022F734(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  double v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v43 = a5;
  v44 = a4;
  v45 = a3;
  v41 = a6;
  v42 = a7;
  v46 = type metadata accessor for WeatherAsyncImage.LoadingState(0, a6, a7, (uint64_t)a4);
  __chkstk_darwin(v46);
  v11 = (uint64_t *)((char *)&v38 - v10);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100BC24F8 != -1)
    swift_once(&qword_100BC24F8, sub_1006F39B4);
  v16 = type metadata accessor for Logger(0);
  sub_1000AECD4(v16, (uint64_t)qword_100CAF2D0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  v17 = swift_retain_n(a2, 2);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(22, -1);
    v40 = v7;
    v21 = v20;
    v39 = swift_slowAlloc(32, -1);
    v50 = v39;
    *(_DWORD *)v21 = 136315394;
    v38 = v21 + 4;
    sub_100232620(&qword_100BCCFF8, (uint64_t)&protocol conformance descriptor for URL);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v12);
    v48 = sub_1000CE1C8(v22, v23, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
    v24 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, __n128))(v13 + 8))(v15, v12, v24);
    *(_WORD *)(v21 + 12) = 2048;
    swift_beginAccess(a2 + 16, &v48, 0, 0);
    v25 = *(_QWORD *)(a2 + 16);
    swift_release(a2);
    v47 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
    swift_release(a2);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Successfully loaded image for URL=%s. retryCount=%ld", (uint8_t *)v21, 0x16u);
    v26 = v39;
    swift_arrayDestroy(v39, 1);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {
    v28 = swift_release(a2);
    (*(void (**)(char *, uint64_t, __n128))(v13 + 8))(v15, v12, v28);

    swift_release(a2);
  }
  v29 = type metadata accessor for WeatherAsyncImage(0, v41, v42, v27);
  v30 = *(double *)(v45 + *(int *)(v29 + 36));
  v31 = sub_10022FA9C(0);
  if (v31 == 8)
    v32 = 0;
  else
    v32 = v31;
  v33 = Image.init(decorative:scale:orientation:)(v44, v32, v30);
  v34 = v46;
  v35 = type metadata accessor for State(0, v46);
  State.wrappedValue.getter(v11, v35);
  v36 = *(int *)(v34 + 40);
  sub_100230AFC(*(_QWORD *)((char *)v11 + v36));
  *(_QWORD *)((char *)v11 + v36) = v33;
  return State.wrappedValue.setter(v11, v35);
}

uint64_t sub_10022FA9C(size_t index)
{
  CGImageSource *v1;
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  void *Value;
  id v5;

  v2 = CGImageSourceCopyPropertiesAtIndex(v1, index, 0);
  if (v2)
  {
    v3 = v2;
    Value = (void *)CFDictionaryGetValue(v2, kCGImagePropertyOrientation);

    if (Value)
    {
      v5 = Value;
      static Int._conditionallyBridgeFromObjectiveC(_:result:)();

    }
  }
  return 8;
}

uint64_t sub_10022FB30(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  os_log_type_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t WitnessTable;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[4];
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72[24];
  uint64_t v73;
  uint64_t v74;

  v9 = a8;
  v63 = a4;
  LODWORD(v62) = a3;
  v67 = a7;
  v64 = type metadata accessor for WeatherAsyncImage.LoadingState(0, a7, a8, a4);
  __chkstk_darwin(v64);
  v15 = &v60[-v14];
  v16 = sub_1000BA294(&qword_100BD4280);
  __chkstk_darwin(v16);
  v18 = &v60[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v19);
  v21 = &v60[-v20];
  v66 = (_QWORD *)(a1 + 16);
  swift_beginAccess(a1 + 16, v72, 0, 0);
  if (*(uint64_t *)(a1 + 16) > 2)
  {
    v63 = a6;
    if (qword_100BC24F8 != -1)
      swift_once(&qword_100BC24F8, sub_1006F39B4);
    v35 = type metadata accessor for Logger(0);
    sub_1000AECD4(v35, (uint64_t)qword_100CAF2D0);
    sub_10007EBC8(a2, (uint64_t)v18, &qword_100BD4280);
    v36 = swift_retain_n(a1, 2);
    v37 = Logger.logObject.getter(v36);
    v39 = static os_log_type_t.error.getter(v37, v38);
    v40 = v39;
    if (os_log_type_enabled(v37, v39))
    {
      v41 = swift_slowAlloc(22, -1);
      v65 = v9;
      v42 = v41;
      v62 = swift_slowAlloc(32, -1);
      v68 = v62;
      *(_DWORD *)v42 = 136446466;
      v61 = v40;
      sub_1004906F8();
      v70 = sub_1000CE1C8(v43, v44, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
      swift_bridgeObjectRelease();
      sub_100021AA4((uint64_t)v18, &qword_100BD4280);
      *(_WORD *)(v42 + 12) = 2048;
      swift_beginAccess(v66, &v70, 0, 0);
      v45 = *(_QWORD *)(a1 + 16);
      swift_release(a1);
      v73 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);
      swift_release(a1);
      _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v61, "Max retries hit, failed to load image for URL=%{public}s. retryCount=%ld", (uint8_t *)v42, 0x16u);
      v46 = v62;
      swift_arrayDestroy(v62, 1);
      swift_slowDealloc(v46, -1, -1);
      v47 = v42;
      v9 = v65;
      swift_slowDealloc(v47, -1, -1);

    }
    else
    {
      swift_release(a1);
      sub_100021AA4((uint64_t)v18, &qword_100BD4280);

      swift_release(a1);
    }
    v50 = v63;
    v51 = v63;
    v52 = v67;
    if (!v63)
    {
      v53 = type metadata accessor for WeatherAsyncImage.LoadingError(0, v67, v9, v48);
      WitnessTable = swift_getWitnessTable(&unk_100989D98, v53);
      v55 = v53;
      v50 = v63;
      v51 = swift_allocError(v55, WitnessTable, 0, 0);
    }
    v56 = v51 | 0x4000000000000000;
    type metadata accessor for WeatherAsyncImage(0, v52, v9, v48);
    swift_errorRetain(v50);
    v57 = v64;
    v58 = type metadata accessor for State(0, v64);
    State.wrappedValue.getter(v15, v58);
    v59 = *(int *)(v57 + 40);
    sub_100230AFC(*(_QWORD *)((char *)v15 + v59));
    *(_QWORD *)((char *)v15 + v59) = v56;
    return State.wrappedValue.setter(v15, v58);
  }
  else
  {
    v65 = v9;
    if (qword_100BC24F8 != -1)
      swift_once(&qword_100BC24F8, sub_1006F39B4);
    v22 = type metadata accessor for Logger(0);
    sub_1000AECD4(v22, (uint64_t)qword_100CAF2D0);
    sub_10007EBC8(a2, (uint64_t)v21, &qword_100BD4280);
    v23 = swift_retain_n(a1, 2);
    v24 = Logger.logObject.getter(v23);
    v26 = static os_log_type_t.error.getter(v24, v25);
    if (os_log_type_enabled(v24, v26))
    {
      v27 = swift_slowAlloc(22, -1);
      v28 = swift_slowAlloc(32, -1);
      v64 = v8;
      v29 = v28;
      v70 = v28;
      *(_DWORD *)v27 = 136446466;
      sub_1004906F8();
      v68 = sub_1000CE1C8(v30, v31, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);
      swift_bridgeObjectRelease();
      sub_100021AA4((uint64_t)v21, &qword_100BD4280);
      *(_WORD *)(v27 + 12) = 2048;
      v32 = v66;
      swift_beginAccess(v66, &v68, 0, 0);
      v33 = *(_QWORD *)(a1 + 16);
      swift_release(a1);
      v73 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);
      swift_release(a1);
      _os_log_impl((void *)&_mh_execute_header, v24, v26, "Retrying - failed to load image for URL=%{public}s. retryCount=%ld", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy(v29, 1);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      v34 = v65;
    }
    else
    {
      swift_release(a1);
      sub_100021AA4((uint64_t)v21, &qword_100BD4280);

      swift_release(a1);
      v34 = v65;
      v32 = v66;
    }
    result = swift_beginAccess(v32, &v70, 1, 0);
    if (__OFADD__(*v32, 1))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = *v32 + 1;
      return sub_10022EFCC(a1, v62 & 1, v63, a5, v67, v34);
    }
  }
  return result;
}

void sub_100230120(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, void *, void *);
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;

  v8 = sub_1000BA294(&qword_100BD4280);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void (**)(char *, void *, void *))(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(a2);
    v13 = type metadata accessor for URL(0);
    v14 = 0;
  }
  else
  {
    v13 = type metadata accessor for URL(0);
    v14 = 1;
  }
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, v14, 1, v13);
  swift_retain();
  v15 = a3;
  v16 = a4;
  v12(v10, a3, a4);

  swift_release(v11);
  sub_100021AA4((uint64_t)v10, &qword_100BD4280);
}

uint64_t WeatherAsyncImage.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double (*v40)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t WitnessTable;
  char *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t OpaqueTypeMetadata2;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;

  v63 = a2;
  v3 = *(_QWORD *)(a1 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(a1);
  v53 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v5 + 16);
  v7 = *(_QWORD *)(v5 + 24);
  v52 = v6;
  v51 = v7;
  v9 = type metadata accessor for WeatherAsyncImage.LoadingState(0, v6, v7, v8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v51 - v11);
  v14 = type metadata accessor for WeatherAsyncImage.Inner(255, v6, v7, v13);
  v15 = type metadata accessor for ModifiedContent(255, v14, &type metadata for _AppearanceActionModifier);
  v56 = v15;
  v16 = sub_100075EB0(&qword_100BD4280);
  v60 = v16;
  WitnessTable = swift_getWitnessTable(&unk_100989D28, v14);
  v82 = WitnessTable;
  v83 = &protocol witness table for _AppearanceActionModifier;
  v17 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v15);
  v59 = v17;
  v58 = sub_100230A64();
  v75 = v15;
  v76 = v16;
  v77 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v17;
  v78 = v58;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v75, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v61 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v55 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v57 = (char *)&v51 - v20;
  v21 = v64;
  v22 = type metadata accessor for State(0, v9);
  State.wrappedValue.getter(v12, v22);
  v23 = *(_QWORD *)((char *)v12 + *(int *)(v9 + 40));
  sub_100230AD8(v23);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  v24 = (uint64_t *)(v21 + *(int *)(a1 + 44));
  v25 = *v24;
  v26 = v24[1];
  v72 = v23;
  v73 = v25;
  v74 = v26;
  v27 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v53, v21, a1);
  v28 = *(unsigned __int8 *)(v3 + 80);
  v29 = (v28 + 32) & ~v28;
  v30 = swift_allocObject(&unk_100B65410, v29 + v4, v28 | 7);
  v31 = v52;
  v32 = v51;
  *(_QWORD *)(v30 + 16) = v52;
  *(_QWORD *)(v30 + 24) = v32;
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v30 + v29, v27, a1);
  v65 = 0;
  v66 = 0;
  v67 = sub_100230B1C;
  v68 = v30;
  swift_retain();
  v33 = swift_checkMetadataState(0, v14);
  View.modifier<A>(_:)(&v65, v33, &type metadata for _AppearanceActionModifier, WitnessTable);
  swift_release(v30);
  sub_100230AFC(v72);
  swift_release(v74);
  v34 = v75;
  v35 = v78;
  v36 = v79;
  WitnessTable = v80;
  v37 = v81;
  v65 = v75;
  v66 = v76;
  v67 = v77;
  v68 = v78;
  v69 = v79;
  v70 = v80;
  v71 = v81;
  v38 = v64;
  v40 = sub_100230734(v64, v31, v32, v39);
  v42 = v41;
  v43 = swift_checkMetadataState(0, v56);
  v44 = v55;
  View.onChange<A>(of:initial:_:)(v38, 1, v40, v42, v43, v60, v59, v58);
  swift_release(v42);
  sub_100230AFC(v34);
  sub_100089020();
  sub_1000BF8D0(v35, v36);
  sub_1000BF8D0(WitnessTable, v37);
  v45 = v61;
  v46 = *(void (**)(char *, char *, uint64_t))(v61 + 16);
  v47 = v57;
  v48 = OpaqueTypeMetadata2;
  v46(v57, v44, OpaqueTypeMetadata2);
  v49 = *(void (**)(char *, uint64_t))(v45 + 8);
  v49(v44, v48);
  v46(v63, v47, v48);
  return ((uint64_t (*)(char *, uint64_t))v49)(v47, v48);
}

void sub_100230654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(id *, uint64_t);
  id v13;
  uint64_t v14;

  v6 = type metadata accessor for WeatherAsyncImage.LoadingState(0, a2, a3, a4);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (id *)((char *)&v14 - v8);
  type metadata accessor for WeatherAsyncImage(0, a2, a3, v10);
  v11 = type metadata accessor for State(0, v6);
  State.wrappedValue.getter(v9, v11);
  if (*v9)
  {
    v12 = *(void (**)(id *, uint64_t))(v7 + 8);
    v13 = *v9;
    v12(v9, v6);
    objc_msgSend(v13, "cancel");

  }
  else
  {
    (*(void (**)(id *, uint64_t))(v7 + 8))(v9, v6);
  }
}

double (*sub_100230734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v7 = type metadata accessor for WeatherAsyncImage(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v17 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))((char *)&v17 - v11, a1, v7, v10);
  v13 = *(unsigned __int8 *)(v8 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = swift_allocObject(&unk_100B655D0, v14 + v9, v13 | 7);
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v15 + v14, v12, v7);
  return sub_100232330;
}

double sub_100230808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  v7 = type metadata accessor for WeatherAsyncImage(0, a4, a5, a4);
  return sub_10022E8C8(a1, a2, v7);
}

uint64_t sub_100230854@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, char *a5@<X8>)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  char *v24;

  v24 = a5;
  __chkstk_darwin(a1);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for _UnaryViewAdaptor(0, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v23 - v18;
  a2(a1);
  _UnaryViewAdaptor.init(_:)(v10, a3, a4);
  swift_getWitnessTable(&protocol conformance descriptor for _UnaryViewAdaptor<A>, v13);
  v20 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v20(v19, v17, v13);
  v21 = *(void (**)(char *, uint64_t))(v14 + 8);
  v21(v17, v13);
  v20(v24, v19, v13);
  return ((uint64_t (*)(char *, uint64_t))v21)(v19, v13);
}

uint64_t sub_1002309A4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;

  return sub_100230854(*(_QWORD *)v2, *(void (**)(uint64_t))(v2 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

void WeatherAsyncImagePhase.error.getter(unint64_t a1)
{
  if (a1 >> 62 == 1)
    swift_errorRetain(a1 & 0x3FFFFFFFFFFFFFFFLL);
  sub_10004A298();
}

uint64_t type metadata accessor for WeatherAsyncImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeatherAsyncImage);
}

uint64_t sub_100230A10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BD4280);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for WeatherAsyncImage.Inner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeatherAsyncImage.Inner);
}

unint64_t sub_100230A64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCCE58;
  if (!qword_100BCCE58)
  {
    v1 = sub_100075EB0(&qword_100BD4280);
    sub_100232620(qword_100BCCE60, (uint64_t)&protocol conformance descriptor for URL);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100BCCE58);
  }
  return result;
}

void sub_100230AD8(unint64_t a1)
{
  if (a1 >> 62 == 1)
  {
    swift_errorRetain(a1 & 0x3FFFFFFFFFFFFFFFLL);
  }
  else if (!(a1 >> 62))
  {
    swift_retain(a1);
  }
}

unint64_t sub_100230AFC(unint64_t result)
{
  if (result >> 62 == 1)
    return swift_errorRelease(result & 0x3FFFFFFFFFFFFFFFLL);
  if (!(result >> 62))
    return swift_release(result);
  return result;
}

void sub_100230B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000C4548(a1, a2, a3, a4);
  sub_100095298();
  sub_100230654(v5 + v7, v4, v6, v8);
}

uint64_t sub_100230B50(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of WeatherAsyncImage.body>>, 1);
}

void sub_100230B84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  sub_10015BC08(319);
  if (v4 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v8[2] = "\b";
    v8[3] = (char *)&value witness table for () + 64;
    v5 = type metadata accessor for WeatherAsyncImage.LoadingState(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v3);
    v6 = type metadata accessor for State(319, v5);
    if (v7 <= 0x3F)
    {
      v8[4] = *(_QWORD *)(v6 - 8) + 64;
      swift_initStructMetadata(a1, 0, 5, v8, a1 + 32);
    }
  }
}

uint64_t *sub_100230C3C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v7))
    {
      v8 = sub_1000BA294(&qword_100BD4280);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 40);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 36)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 36));
    *(uint64_t *)((char *)a1 + v11) = *(uint64_t *)((char *)a2 + v11);
    v12 = *(int *)(a3 + 44);
    v13 = *(int *)(a3 + 48);
    v14 = (uint64_t *)((char *)a1 + v12);
    v15 = (uint64_t *)((char *)a2 + v12);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    v17 = (char *)a1 + v13;
    v18 = (char *)a2 + v13;
    v19 = *(void **)((char *)a2 + v13);
    *(uint64_t *)((char *)a1 + v13) = (uint64_t)v19;
    v20 = type metadata accessor for WeatherAsyncImage.LoadingState(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v9);
    v21 = *(int *)(v20 + 36);
    v22 = &v17[v21];
    v23 = &v18[v21];
    swift_retain();
    swift_retain();
    v24 = v19;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v23, 1, v7))
    {
      v25 = sub_1000BA294(&qword_100BD4280);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v22, v23, v7);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v22, 0, 1, v7);
    }
    v26 = *(int *)(v20 + 40);
    v27 = *(_QWORD *)&v18[v26];
    sub_100230AD8(v27);
    *(_QWORD *)&v17[v26] = v27;
    v28 = type metadata accessor for State(0, v20);
    *(_QWORD *)&v17[*(int *)(v28 + 28)] = *(_QWORD *)&v18[*(int *)(v28 + 28)];
  }
  swift_retain();
  return a1;
}

double sub_100230E18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  v4 = type metadata accessor for URL(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 40)));
  swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 44) + 8));
  v5 = (id *)(a1 + *(int *)(a2 + 48));

  v7 = type metadata accessor for WeatherAsyncImage.LoadingState(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v6);
  v8 = (uint64_t)v5 + *(int *)(v7 + 36);
  if (!_s7Weather24LocationCompositionStateOwet_0(v8, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v8, v4);
  sub_100230AFC(*(unint64_t *)((char *)v5 + *(int *)(v7 + 40)));
  v9 = *(uint64_t *)((char *)v5 + *(int *)(type metadata accessor for State(0, v7) + 28));
  *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  return result;
}

char *sub_100230F00(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for URL(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6))
  {
    v7 = sub_1000BA294(&qword_100BD4280);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 40);
  *(_QWORD *)&a1[*(int *)(a3 + 36)] = *(_QWORD *)&a2[*(int *)(a3 + 36)];
  *(_QWORD *)&a1[v9] = *(_QWORD *)&a2[v9];
  v10 = *(int *)(a3 + 44);
  v11 = *(int *)(a3 + 48);
  v12 = &a1[v10];
  v13 = &a2[v10];
  v14 = *((_QWORD *)v13 + 1);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *((_QWORD *)v12 + 1) = v14;
  v15 = &a1[v11];
  v16 = &a2[v11];
  v17 = *(void **)&a2[v11];
  *(_QWORD *)&a1[v11] = v17;
  v18 = type metadata accessor for WeatherAsyncImage.LoadingState(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v8);
  v19 = *(int *)(v18 + 36);
  v20 = &v15[v19];
  v21 = &v16[v19];
  swift_retain();
  swift_retain();
  v22 = v17;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v21, 1, v6))
  {
    v23 = sub_1000BA294(&qword_100BD4280);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v20, v21, v6);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v20, 0, 1, v6);
  }
  v24 = *(int *)(v18 + 40);
  v25 = *(_QWORD *)&v16[v24];
  sub_100230AD8(v25);
  *(_QWORD *)&v15[v24] = v25;
  v26 = type metadata accessor for State(0, v18);
  *(_QWORD *)&v15[*(int *)(v26 + 28)] = *(_QWORD *)&v16[*(int *)(v26 + 28)];
  swift_retain();
  return a1;
}

char *sub_1002310B4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  void **v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v6 = type metadata accessor for URL(0);
  v7 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 1, v6);
  v8 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    v10 = sub_1000BA294(&qword_100BD4280);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  *(_QWORD *)&a1[*(int *)(a3 + 36)] = *(_QWORD *)&a2[*(int *)(a3 + 36)];
  v11 = *(int *)(a3 + 40);
  v12 = *(_QWORD *)&a1[v11];
  *(_QWORD *)&a1[v11] = *(_QWORD *)&a2[v11];
  swift_retain();
  swift_release(v12);
  v13 = *(int *)(a3 + 44);
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *((_QWORD *)v15 + 1);
  v17 = *((_QWORD *)v14 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v16;
  swift_retain();
  swift_release(v17);
  v18 = *(int *)(a3 + 48);
  v19 = (void **)&a1[v18];
  v20 = (void **)&a2[v18];
  v21 = *(void **)&a1[v18];
  v22 = *v20;
  *v19 = *v20;
  v23 = v22;

  v25 = type metadata accessor for WeatherAsyncImage.LoadingState(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v24);
  v26 = *(int *)(v25 + 36);
  v27 = (char *)v19 + v26;
  v28 = (char *)v20 + v26;
  v29 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v19 + v26, 1, v6);
  v30 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v28, 1, v6);
  if (!v29)
  {
    v31 = *(_QWORD *)(v6 - 8);
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 24))(v27, v28, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v27, v6);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    v32 = sub_1000BA294(&qword_100BD4280);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v27, v28, v6);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v27, 0, 1, v6);
LABEL_13:
  v33 = *(int *)(v25 + 40);
  v34 = *(unint64_t *)((char *)v20 + v33);
  sub_100230AD8(v34);
  v35 = *(unint64_t *)((char *)v19 + v33);
  *(void **)((char *)v19 + v33) = (void *)v34;
  sub_100230AFC(v35);
  v36 = *(int *)(type metadata accessor for State(0, v25) + 28);
  v37 = *(uint64_t *)((char *)v19 + v36);
  *(void **)((char *)v19 + v36) = *(void **)((char *)v20 + v36);
  swift_retain();
  swift_release(v37);
  return a1;
}

char *sub_100231324(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for URL(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6))
  {
    v7 = sub_1000BA294(&qword_100BD4280);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 40);
  *(_QWORD *)&a1[*(int *)(a3 + 36)] = *(_QWORD *)&a2[*(int *)(a3 + 36)];
  *(_QWORD *)&a1[v9] = *(_QWORD *)&a2[v9];
  v10 = *(int *)(a3 + 48);
  *(_OWORD *)&a1[*(int *)(a3 + 44)] = *(_OWORD *)&a2[*(int *)(a3 + 44)];
  v11 = &a1[v10];
  v12 = &a2[v10];
  *(_QWORD *)&a1[v10] = *(_QWORD *)&a2[v10];
  v13 = type metadata accessor for WeatherAsyncImage.LoadingState(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v8);
  v14 = *(int *)(v13 + 36);
  v15 = &v11[v14];
  v16 = &v12[v14];
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v12[v14], 1, v6))
  {
    v17 = sub_1000BA294(&qword_100BD4280);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v15, v16, v6);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 0, 1, v6);
  }
  *(_QWORD *)&v11[*(int *)(v13 + 40)] = *(_QWORD *)&v12[*(int *)(v13 + 40)];
  v18 = type metadata accessor for State(0, v13);
  *(_QWORD *)&v11[*(int *)(v18 + 28)] = *(_QWORD *)&v12[*(int *)(v18 + 28)];
  return a1;
}

char *sub_1002314A8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = type metadata accessor for URL(0);
  v7 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 1, v6);
  v8 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    v10 = sub_1000BA294(&qword_100BD4280);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  v11 = *(int *)(a3 + 40);
  *(_QWORD *)&a1[*(int *)(a3 + 36)] = *(_QWORD *)&a2[*(int *)(a3 + 36)];
  v12 = *(_QWORD *)&a1[v11];
  *(_QWORD *)&a1[v11] = *(_QWORD *)&a2[v11];
  swift_release(v12);
  v13 = *(int *)(a3 + 44);
  v14 = *(_QWORD *)&a1[v13 + 8];
  *(_OWORD *)&a1[v13] = *(_OWORD *)&a2[v13];
  swift_release(v14);
  v15 = *(int *)(a3 + 48);
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = *(void **)&a1[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;

  v20 = type metadata accessor for WeatherAsyncImage.LoadingState(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v19);
  v21 = *(int *)(v20 + 36);
  v22 = &v16[v21];
  v23 = &v17[v21];
  v24 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)&v16[v21], 1, v6);
  v25 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v23, 1, v6);
  if (!v24)
  {
    v26 = *(_QWORD *)(v6 - 8);
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 40))(v22, v23, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v6);
    goto LABEL_12;
  }
  if (v25)
  {
LABEL_12:
    v27 = sub_1000BA294(&qword_100BD4280);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v22, v23, v6);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v22, 0, 1, v6);
LABEL_13:
  v28 = *(int *)(v20 + 40);
  v29 = *(_QWORD *)&v16[v28];
  *(_QWORD *)&v16[v28] = *(_QWORD *)&v17[v28];
  sub_100230AFC(v29);
  v30 = *(int *)(type metadata accessor for State(0, v20) + 28);
  v31 = *(_QWORD *)&v16[v30];
  *(_QWORD *)&v16[v30] = *(_QWORD *)&v17[v30];
  swift_release(v31);
  return a1;
}

uint64_t sub_1002316EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002316F8);
}

void sub_1002316F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_1000BA294(&qword_100BD4280);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v10 = v6;
    v11 = a1;
  }
  else
  {
    if ((_DWORD)a2 == 0x7FFFFFFF)
    {
      sub_100079F70();
      return;
    }
    v10 = sub_1000DCBE4(v6, v7, v8, v9);
    v11 = a1 + *(int *)(a3 + 48);
  }
  sub_1000B250C(v11, a2, v10);
}

uint64_t sub_100231784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100231790);
}

void sub_100231790(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = sub_1000BA294(&qword_100BD4280);
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v12 = v8;
    v13 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 44)) = (a2 - 1);
      sub_100079F70();
      return;
    }
    v12 = sub_1000DCBE4(v8, v9, v10, v11);
    v13 = a1 + *(int *)(a4 + 48);
  }
  sub_1000987C4(v13, a2, a2, v12);
}

unint64_t *initializeBufferWithCopyOfBuffer for WeatherAsyncImagePhase(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  sub_100230AD8(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for WeatherAsyncImagePhase(unint64_t *a1)
{
  return sub_100230AFC(*a1);
}

unint64_t *assignWithCopy for WeatherAsyncImagePhase(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  sub_100230AD8(*a2);
  v4 = *a1;
  *a1 = v3;
  sub_100230AFC(v4);
  return a1;
}

_QWORD *initializeWithTake for ConfiguredUnitState(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

unint64_t *assignWithTake for WeatherAsyncImagePhase(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  sub_100230AFC(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for WeatherAsyncImagePhase(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 >= 0x7E && *(_BYTE *)(a1 + 8))
    {
      v2 = *(_DWORD *)a1 + 125;
    }
    else
    {
      v2 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
      if (v2 >= 0x7D)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for WeatherAsyncImagePhase(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_100231968(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*a1 >> 3) + 2;
}

_QWORD *sub_100231984(_QWORD *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_100231994(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 2)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 62;
  }
  else
  {
    v2 = 8 * (a2 - 2);
    v3 = 0x8000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for WeatherAsyncImagePhase()
{
  return &type metadata for WeatherAsyncImagePhase;
}

uint64_t sub_1002319D0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];

  v4 = type metadata accessor for WeatherAsyncImage.Inner(255, *a1, a1[1], a4);
  v5 = type metadata accessor for ModifiedContent(255, v4, &type metadata for _AppearanceActionModifier);
  v6 = sub_100075EB0(&qword_100BD4280);
  v8[4] = swift_getWitnessTable(&unk_100989D28, v4);
  v8[5] = &protocol witness table for _AppearanceActionModifier;
  v8[0] = v5;
  v8[1] = v6;
  v8[2] = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v5);
  v8[3] = sub_100230A64();
  return swift_getOpaqueTypeConformance2(v8, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

double sub_100231A88(unint64_t *a1)
{
  double result;

  sub_100230AFC(*a1);
  *(_QWORD *)&result = swift_release(a1[2]).n128_u64[0];
  return result;
}

unint64_t *sub_100231AB0(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *a2;
  sub_100230AD8(*a2);
  v6 = a2[1];
  v5 = a2[2];
  *a1 = v4;
  a1[1] = v6;
  a1[2] = v5;
  swift_retain();
  return a1;
}

unint64_t *sub_100231AF8(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v4 = *a2;
  sub_100230AD8(*a2);
  v5 = *a1;
  *a1 = v4;
  sub_100230AFC(v5);
  v7 = a2[1];
  v6 = a2[2];
  v8 = a1[2];
  a1[1] = v7;
  a1[2] = v6;
  swift_retain();
  swift_release(v8);
  return a1;
}

uint64_t sub_100231B54(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  sub_100230AFC(v4);
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for NotificationsState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NotificationsState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void sub_100231C18(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "\b";
  sub_10015BC08(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = "\b";
    swift_initStructMetadata(a1, 0, 3, v4, a1 + 32);
  }
}

void **sub_100231C94(void **a1, void **a2, uint64_t a3)
{
  int v3;
  char *v4;
  void **v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 36);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL(0);
    v12 = v4;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v11))
    {
      v13 = sub_1000BA294(&qword_100BD4280);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v11);
    }
    v14 = *(int *)(a3 + 40);
    v15 = *(unint64_t *)((char *)a2 + v14);
    sub_100230AD8(v15);
    *(void **)((char *)v7 + v14) = (void *)v15;
  }
  return v7;
}

unint64_t sub_100231D98(id *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = (uint64_t)a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for URL(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return sub_100230AFC(*(unint64_t *)((char *)a1 + *(int *)(a2 + 40)));
}

void **sub_100231E0C(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = *a2;
  *a1 = *a2;
  v7 = *(int *)(a3 + 36);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  v11 = v6;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10))
  {
    v12 = sub_1000BA294(&qword_100BD4280);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
  }
  v13 = *(int *)(a3 + 40);
  v14 = *(unint64_t *)((char *)a2 + v13);
  sub_100230AD8(v14);
  *(void **)((char *)a1 + v13) = (void *)v14;
  return a1;
}

void **sub_100231EE8(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  v8 = v7;

  v9 = *(int *)(a3 + 36);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for URL(0);
  v13 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v12);
  v14 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12);
  if (!v13)
  {
    v15 = *(_QWORD *)(v12 - 8);
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v16 = sub_1000BA294(&qword_100BD4280);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
LABEL_7:
  v17 = *(int *)(a3 + 40);
  v18 = *(unint64_t *)((char *)a2 + v17);
  sub_100230AD8(v18);
  v19 = *(unint64_t *)((char *)a1 + v17);
  *(void **)((char *)a1 + v17) = (void *)v18;
  sub_100230AFC(v19);
  return a1;
}

_QWORD *sub_10023201C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = *(int *)(a3 + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9))
  {
    v10 = sub_1000BA294(&qword_100BD4280);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v9);
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 40)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 40));
  return a1;
}

void **sub_1002320E4(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(int *)(a3 + 36);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v10);
  v12 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10);
  if (!v11)
  {
    v13 = *(_QWORD *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v14 = sub_1000BA294(&qword_100BD4280);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
LABEL_7:
  v15 = *(int *)(a3 + 40);
  v16 = *(unint64_t *)((char *)a1 + v15);
  *(void **)((char *)a1 + v15) = *(void **)((char *)a2 + v15);
  sub_100230AFC(v16);
  return a1;
}

uint64_t sub_10023220C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100232218);
}

void sub_100232218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 2147483646)
  {
    sub_100079F70();
  }
  else
  {
    v6 = sub_1000BA294(&qword_100BD4280);
    sub_1000B250C(a1 + *(int *)(a3 + 36), a2, v6);
  }
}

uint64_t sub_10023228C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100232298);
}

void sub_100232298(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 2147483646)
  {
    *a1 = a2;
    sub_100079F70();
  }
  else
  {
    v7 = sub_1000BA294(&qword_100BD4280);
    sub_1000987C4((uint64_t)a1 + *(int *)(a4 + 36), a2, a2, v7);
  }
}

uint64_t sub_1002322F8(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100AAD344, 1);
}

double sub_100232330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(_QWORD *)(v4 + 24);
  type metadata accessor for WeatherAsyncImage(0, v7, v8, a4);
  sub_100095298();
  return sub_100230808(a1, a2, v4 + v9, v7, v8);
}

uint64_t sub_10023238C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_10022EDFC(v4[4], v4[2], v4[3], a4);
}

uint64_t sub_1002323A8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002323B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = type metadata accessor for WeatherAsyncImage(0, v5, v6, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 33) & ~v9;
  v23 = *(_QWORD *)(v8 + 64);
  v11 = *(_QWORD *)(sub_10009896C() - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v22 = *(_QWORD *)(v11 + 64);
  if (!sub_100086130(v4 + v10))
    sub_100098820(v4 + v10, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  sub_1000DB79C();
  sub_1000DD80C();
  v13 = (id *)(v4 + v10 + *(int *)(v7 + 48));

  v15 = type metadata accessor for WeatherAsyncImage.LoadingState(0, v5, v6, v14);
  v16 = (uint64_t)v13 + *(int *)(v15 + 36);
  if (!sub_100086130(v16))
    sub_100098820(v16, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  v17 = v9 | v12 | 7;
  v18 = (v23 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v18 + v12 + 9) & ~v12;
  sub_100230AFC(*(unint64_t *)((char *)v13 + *(int *)(v15 + 40)));
  v20 = type metadata accessor for State(0, v15);
  swift_release(*(id *)((char *)v13 + *(int *)(v20 + 28)));
  swift_release(*(_QWORD *)(v4 + v18));
  sub_100098820(v4 + v19, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  return swift_deallocObject(v4, v19 + v22, v17);
}

void sub_100232518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v8 = *(_QWORD *)(v4 + 16);
  v9 = *(_QWORD *)(v4 + 24);
  v10 = *(_QWORD *)(type metadata accessor for WeatherAsyncImage(0, v8, v9, a4) - 8);
  v11 = (*(unsigned __int8 *)(v10 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = (*(_QWORD *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(unsigned __int8 *)(*(_QWORD *)(sub_10009896C() - 8) + 80);
  sub_10022F428(a1, a2, a3, *(_BYTE *)(v4 + 32), v4 + v11, *(_QWORD *)(v4 + v12), *(unsigned __int8 *)(v4 + v12 + 8), v4 + ((v12 + v13 + 9) & ~v13), v8, v9);
}

uint64_t sub_1002325D4()
{
  uint64_t v0;

  return sub_10022FB30(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(unsigned __int8 *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1002325FC()
{
  uint64_t v0;

  return sub_10022F734(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(void **)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100232620(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for URL(255);
    atomic_store(swift_getWitnessTable(a2, v4), a1);
  }
  sub_10004A298();
}

uint64_t type metadata accessor for WeatherAsyncImage.LoadingError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeatherAsyncImage.LoadingError);
}

uint64_t sub_100232668(_QWORD *a1)
{
  uint64_t v1;

  v1 = type metadata accessor for _UnaryViewAdaptor(255, *a1, a1[1]);
  return swift_getWitnessTable(&protocol conformance descriptor for _UnaryViewAdaptor<A>, v1);
}

uint64_t sub_100232690(uint64_t result)
{
  *(_BYTE *)(result + 136) = 1;
  return result;
}

uint64_t sub_10023269C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BCD090);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1002326E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCD0A0;
  if (!qword_100BCD0A0)
  {
    v1 = sub_100075EB0(&qword_100BCD098);
    sub_100232750();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCD0A0);
  }
  return result;
}

unint64_t sub_100232750()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCD0A8;
  if (!qword_100BCD0A8)
  {
    v1 = sub_100075EB0(&qword_100BCD0B0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCD0A8);
  }
  return result;
}

uint64_t sub_1002327B4(uint64_t result)
{
  *(_BYTE *)(result + 136) = 0;
  return result;
}

uint64_t sub_1002327C0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v6;
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v7 = *(int *)(a3 + 20);
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = type metadata accessor for Text.Measurements(0);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v6);
    v11(v8, v9, v10);
  }
  return v5;
}

uint64_t sub_100232878(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[2]);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Text.Measurements(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_1002328C8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  v5 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = a2[2];
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for Text.Measurements(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  return a1;
}

uint64_t *sub_100232958(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[1] = a2[1];
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  v10 = *(int *)(a3 + 20);
  v11 = (uint64_t)a1 + v10;
  v12 = (uint64_t)a2 + v10;
  v13 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *sub_1002329F4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  *(_OWORD *)((char *)a1 + 9) = *(_OWORD *)((char *)a2 + 9);
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *sub_100232A58(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a2[2];
  v8 = a1[2];
  a1[1] = a2[1];
  a1[2] = v7;
  swift_bridgeObjectRelease(v8);
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  v9 = *(int *)(a3 + 20);
  v10 = (uint64_t)a1 + v9;
  v11 = (uint64_t)a2 + v9;
  v12 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t sub_100232ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100232AE8);
}

void sub_100232AE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_1000C5BCC();
    sub_100079F70();
  }
  else
  {
    v6 = type metadata accessor for Text.Measurements(0);
    sub_1000B250C(a1 + *(int *)(a3 + 20), a2, v6);
  }
}

uint64_t sub_100232B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100232B48);
}

void sub_100232B48()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000993A8();
  if (v3)
  {
    *v1 = (v0 - 1);
    sub_100079F70();
  }
  else
  {
    v4 = v2;
    v5 = type metadata accessor for Text.Measurements(0);
    sub_1000987C4((uint64_t)v1 + *(int *)(v4 + 20), v0, v0, v5);
  }
}

uint64_t type metadata accessor for ConditionDetailLegendView(uint64_t a1)
{
  return sub_100098190(a1, qword_100BCD110, (uint64_t)&nominal type descriptor for ConditionDetailLegendView);
}

uint64_t sub_100232BAC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_100989E10;
  result = type metadata accessor for Text.Measurements(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100232C20(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AAD3D0, 1);
}

void sub_100232C30(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD v10[4];

  v3 = *(_QWORD *)v1;
  v10[2] = v1 + *(int *)(type metadata accessor for ConditionDetailLegendView(0) + 20);
  sub_10084A2F4((void (*)(uint64_t *__return_ptr, uint64_t))sub_100233128, (uint64_t)v10, v3);
  v5 = v4;
  v6 = *(_QWORD *)v1;
  v7 = *(_QWORD *)(v1 + 8);
  v8 = *(_QWORD *)(v1 + 16);
  v9 = *(unsigned __int8 *)(v1 + 24);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  sub_100232CD4(v6, v7, v8, v9, v5, a1);
}

void sub_100232CD4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(__int128 *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD v26[3];

  v25 = a5;
  v24 = a4;
  v23 = a3;
  v9 = type metadata accessor for GridItem.Size(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (__int128 *)((char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_1000BA294(&qword_100BCD148);
  v14 = *(_QWORD *)(type metadata accessor for GridItem(0) - 8);
  v15 = swift_allocObject(v13, ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ 2 * *(_QWORD *)(v14 + 72), *(unsigned __int8 *)(v14 + 80) | 7);
  *(_OWORD *)(v15 + 16) = xmmword_10097DA20;
  v22 = xmmword_100989DE0;
  *v12 = xmmword_100989DE0;
  v16 = enum case for GridItem.Size.flexible(_:);
  v17 = *(void (**)(__int128 *, uint64_t, uint64_t))(v10 + 104);
  v17(v12, enum case for GridItem.Size.flexible(_:), v9);
  GridItem.init(_:spacing:alignment:)(v12, 0, 1, 0, 0, 1);
  *v12 = v22;
  v17(v12, v16, v9);
  GridItem.init(_:spacing:alignment:)(v12, 0, 1, 0, 0, 1);
  *(_QWORD *)(a6 + 32) = v15;
  v26[0] = 0;
  State.init(wrappedValue:)(v26, &type metadata for CGFloat);
  v18 = v26[2];
  *(_QWORD *)(a6 + 40) = v26[1];
  *(_QWORD *)(a6 + 48) = v18;
  v19 = type metadata accessor for MeasuredConditionDetailLegendView(0);
  v20 = (_QWORD *)(a6 + *(int *)(v19 + 28));
  *v20 = swift_getKeyPath(&unk_100989E78);
  v21 = sub_1000BA294(&qword_100BC37D8);
  swift_storeEnumTagMultiPayload(v20, v21, 0);
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = v23;
  *(_BYTE *)(a6 + 24) = v24;
  *(_QWORD *)(a6 + *(int *)(v19 + 32)) = v25;
}

double sub_100232ECC(Swift::String *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::String v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  _QWORD v36[4];
  _BYTE v37[32];

  v36[1] = a2;
  v3 = sub_1000BA294(&qword_100BC39D0);
  __chkstk_darwin(v3);
  v5 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v6);
  v8 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(1, 2);
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v9);
  v10 = Image.init(systemName:)(0x662E656C63726963, 0xEB000000006C6C69);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
  swift_release(v10);
  v11._countAndFlagsBits = 32;
  v11._object = (void *)0xE100000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v11);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(a1[1]);
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v12);
  v13 = LocalizedStringKey.init(stringInterpolation:)(v8);
  v17 = Text.init(_:tableName:bundle:comment:)(v13, v15, v14 & 1, v16, 0, 0, 0, 0);
  v19 = v18;
  v21 = v20;
  v23 = v22 & 1;
  swift_beginAccess(&unk_100BDE048, v37, 33, 0);
  v24 = sub_1003BD4E8();
  swift_endAccess(v37);
  v25 = Text.font(_:)(v24, v17, v19, v23, v21);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  swift_release(v24);
  v32 = v29 & 1;
  sub_1000D31B4(v17, v19, v23);
  swift_bridgeObjectRelease();
  v33 = type metadata accessor for Text.WritingMode(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v5, 1, 1, v33);
  v34 = Text.Measurements.size(of:in:writingMode:)(v25, v27, v32, v31, v5, INFINITY, INFINITY);
  sub_1000D31B4(v25, v27, v32);
  swift_bridgeObjectRelease();
  sub_100021A14((uint64_t)v5, &qword_100BC39D0);
  return v34;
}

void sub_100233128(Swift::String *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;

  *a2 = sub_100232ECC(a1, *(_QWORD *)(v2 + 16));
}

uint64_t type metadata accessor for MeasuredConditionDetailLegendView(uint64_t a1)
{
  return sub_100098190(a1, qword_100BCD1A8, (uint64_t)&nominal type descriptor for MeasuredConditionDetailLegendView);
}

void sub_10023316C(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)();
  void (*v32)();
  uint64_t v33;
  void (**v34)();
  uint64_t v35;
  uint64_t v36;
  uint64_t (**v37)(double *);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;

  v2 = v1;
  v43 = a1;
  v42 = sub_1000BA294(&qword_100BCD1F8);
  __chkstk_darwin(v42);
  v40 = (uint64_t)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CoordinateSpace(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v41 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v39 = (char *)&v38 - v8;
  v9 = type metadata accessor for MeasuredConditionDetailLegendView(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = sub_1000BA294(&qword_100BCD200);
  __chkstk_darwin(v12);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000BA294(&qword_100BCD208);
  __chkstk_darwin(v15);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v14 = static HorizontalAlignment.leading.getter(v18);
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 1;
  v19 = sub_1000BA294(&qword_100BCD210);
  sub_100233500(v2, (uint64_t)&v14[*(int *)(v19 + 44)]);
  static Alignment.center.getter(v20);
  sub_100945BD0();
  sub_100021A14((uint64_t)v14, &qword_100BCD200);
  sub_100080C0C((uint64_t)v2, (uint64_t)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MeasuredConditionDetailLegendView);
  v21 = *(unsigned __int8 *)(v10 + 80);
  v22 = (v21 + 16) & ~v21;
  v23 = swift_allocObject(&unk_100B656D8, v22 + v11, v21 | 7);
  sub_10007802C((uint64_t)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v23 + v22, type metadata accessor for MeasuredConditionDetailLegendView);
  v24 = v39;
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v39, enum case for CoordinateSpace.global(_:), v4);
  v25 = v41;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v41, v24, v4);
  v26 = *(unsigned __int8 *)(v5 + 80);
  v27 = (v26 + 16) & ~v26;
  v28 = swift_allocObject(&unk_100B65700, v27 + v6, v26 | 7);
  v29 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v28 + v27, v25, v4);
  v30 = static Alignment.center.getter(v29);
  v32 = v31;
  v33 = v40;
  sub_100037768((uint64_t)v17, v40, &qword_100BCD208);
  v34 = (void (**)())(v33 + *(int *)(v42 + 36));
  *v34 = sub_1002360E4;
  v34[1] = (void (*)())v28;
  v34[2] = (void (*)())v30;
  v34[3] = v32;
  v35 = swift_allocObject(&unk_100B65728, 32, 7);
  *(_QWORD *)(v35 + 16) = sub_100236028;
  *(_QWORD *)(v35 + 24) = v23;
  v36 = v43;
  sub_100037768(v33, v43, &qword_100BCD1F8);
  v37 = (uint64_t (**)(double *))(v36 + *(int *)(sub_1000BA294(&qword_100BCD218) + 36));
  *v37 = sub_100236164;
  v37[1] = (uint64_t (*)(double *))v35;
  sub_100021A14(v33, &qword_100BCD1F8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v24, v4);
  sub_100021A14((uint64_t)v17, &qword_100BCD208);
}

void sub_100233500(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  int v43;
  uint64_t (*v50)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t OpaqueTypeConformance2;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _BOOL8 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  char *v167;
  char *v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD v187[2];
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;

  v186 = a2;
  v3 = type metadata accessor for MeasuredConditionDetailLegendView(0);
  v154 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v156 = v4;
  v158 = (uint64_t)&v147 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = sub_1000BA294(&qword_100BCD220);
  __chkstk_darwin(v169);
  v166 = (uint64_t *)((char *)&v147 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v172 = sub_1000BA294(&qword_100BCD228);
  v171 = *(_QWORD *)(v172 - 8);
  __chkstk_darwin(v172);
  v170 = (char *)&v147 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = sub_1000BA294(&qword_100BCD230);
  __chkstk_darwin(v185);
  v168 = (char *)&v147 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v167 = (char *)&v147 - v9;
  __chkstk_darwin(v10);
  v173 = (uint64_t)&v147 - v11;
  v152 = type metadata accessor for PinnedScrollableViews(0);
  __chkstk_darwin(v152);
  v153 = (char *)&v147 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = sub_1000BA294(&qword_100BCD238);
  v157 = *(_QWORD *)(v161 - 8);
  __chkstk_darwin(v161);
  v155 = (char *)&v147 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_1000BA294(&qword_100BCD240);
  v163 = *(_QWORD *)(v164 - 8);
  __chkstk_darwin(v164);
  v162 = (char *)&v147 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_1000BA294(&qword_100BCD248);
  __chkstk_darwin(v178);
  v160 = (char *)&v147 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v159 = (char *)&v147 - v17;
  __chkstk_darwin(v18);
  v165 = (uint64_t)&v147 - v19;
  v182 = sub_1000BA294(&qword_100BCD250);
  __chkstk_darwin(v182);
  v184 = (uint64_t)&v147 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = sub_1000BA294(&qword_100BCD258);
  __chkstk_darwin(v175);
  v176 = (uint64_t)&v147 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = sub_1000BA294(&qword_100BCD260);
  __chkstk_darwin(v183);
  v177 = (char *)&v147 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for AccessibilityChildBehavior(0);
  v180 = *(_QWORD *)(v23 - 8);
  v181 = v23;
  __chkstk_darwin(v23);
  v179 = (char *)&v147 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = sub_1000BA294(&qword_100BCD268);
  __chkstk_darwin(v148);
  v26 = (char *)&v147 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = sub_1000BA294(&qword_100BCD270);
  v149 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v28 = (char *)&v147 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = sub_1000BA294(&qword_100BCD278);
  __chkstk_darwin(v174);
  v30 = (char *)&v147 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v147 = (char *)&v147 - v32;
  __chkstk_darwin(v33);
  v151 = (uint64_t)&v147 - v34;
  v35 = type metadata accessor for ContentSizeCategory(0);
  v36 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v38 = (char *)&v147 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v41 = (char *)&v147 - v40;
  v42 = a1;
  sub_100109D64();
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v38, v41, v35);
  v43 = (*(uint64_t (**)(char *, uint64_t))(v36 + 88))(v38, v35);
  if (v43 == enum case for ContentSizeCategory.extraSmall(_:)
    || v43 == enum case for ContentSizeCategory.small(_:)
    || v43 == enum case for ContentSizeCategory.medium(_:)
    || v43 == enum case for ContentSizeCategory.large(_:)
    || v43 == enum case for ContentSizeCategory.extraLarge(_:)
    || v43 == enum case for ContentSizeCategory.extraExtraLarge(_:)
    || v43 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v41, v35);
  }
  else
  {
    v50 = *(uint64_t (**)(char *, uint64_t))(v36 + 8);
    if (v43 == enum case for ContentSizeCategory.accessibilityMedium(_:)
      || v43 == enum case for ContentSizeCategory.accessibilityLarge(_:)
      || v43 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
      || v43 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
      || v43 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
    {
      v55 = v50(v41, v35);
      *(_QWORD *)v26 = static HorizontalAlignment.leading.getter(v55);
      *((_QWORD *)v26 + 1) = 0;
      v26[16] = 1;
      sub_1000BA294(&qword_100BCD330);
      v188 = *a1;
      swift_bridgeObjectRetain(v188);
      v56 = sub_1000BA294(&qword_100BCD288);
      v57 = sub_1000BA294(&qword_100BCD338);
      sub_10003D2DC(&qword_100BCD298, &qword_100BCD288);
      v59 = v58;
      sub_10003D2DC(&qword_100BCD340, &qword_100BCD338);
      v61 = v60;
      sub_10000F1C8(&qword_100BCD2A8, type metadata accessor for ConditionDetailLegend);
      v63 = ForEach<>.init(_:content:)(&v188, sub_100234410, 0, v56, &type metadata for String, v57, v59, v61, v62);
      v64 = v179;
      static AccessibilityChildBehavior.contain.getter(v63);
      sub_10003D2DC(&qword_100BCD2C8, &qword_100BCD268);
      v66 = v65;
      v67 = (_QWORD *)v148;
      View.accessibilityElement(children:)(v64, v148, v65);
      (*(void (**)(char *, uint64_t))(v180 + 8))(v64, v181);
      sub_100021A14((uint64_t)v26, &qword_100BCD268);
      v68 = v42[2];
      v188 = v42[1];
      v189 = v68;
      v190 = v67;
      v191 = v66;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v190, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
      v70 = sub_100114EF8();
      v71 = v150;
      View.accessibilityLabel<A>(_:)(&v188, v150, &type metadata for String, OpaqueTypeConformance2, v70);
      (*(void (**)(char *, uint64_t))(v149 + 8))(v28, v71);
      v72 = (uint64_t)v147;
      v73 = v174;
      ModifiedContent<>.accessibilityRespondsToUserInteraction(_:)(0, v174);
      v74 = &qword_100BCD278;
      sub_100021A14((uint64_t)v30, &qword_100BCD278);
      v75 = v151;
      sub_1000787D4(v72, v151, &qword_100BCD278);
      v76 = v176;
      sub_100037768(v75, v176, &qword_100BCD278);
      swift_storeEnumTagMultiPayload(v76, v175, 0);
      v77 = sub_100236210();
      v78 = sub_1002362DC();
      v80 = (uint64_t)v177;
      v79 = v178;
      v81 = v76;
      v82 = v73;
      goto LABEL_39;
    }
    v50(v38, v35);
    v50(v41, v35);
  }
  v83 = a1;
  v84 = sub_100234458();
  if (!v84)
  {
    v116 = static VerticalAlignment.center.getter(v84);
    v117 = (uint64_t)v166;
    *v166 = v116;
    *(_QWORD *)(v117 + 8) = 0;
    *(_BYTE *)(v117 + 16) = 0;
    sub_1000BA294(&qword_100BCD280);
    v188 = *a1;
    v118 = v188;
    v119 = v158;
    sub_100080C0C((uint64_t)a1, v158, type metadata accessor for MeasuredConditionDetailLegendView);
    v120 = *(unsigned __int8 *)(v154 + 80);
    v121 = (v120 + 16) & ~v120;
    v122 = swift_allocObject(&unk_100B65750, v121 + v156, v120 | 7);
    sub_10007802C(v119, v122 + v121, type metadata accessor for MeasuredConditionDetailLegendView);
    swift_bridgeObjectRetain(v118);
    v123 = sub_1000BA294(&qword_100BCD288);
    v124 = sub_1000BA294(&qword_100BCD290);
    sub_10003D2DC(&qword_100BCD298, &qword_100BCD288);
    v126 = v125;
    sub_10003D2DC(&qword_100BCD2A0, &qword_100BCD290);
    v128 = v127;
    sub_10000F1C8(&qword_100BCD2A8, type metadata accessor for ConditionDetailLegend);
    v130 = ForEach<>.init(_:content:)(&v188, sub_100236170, v122, v123, &type metadata for String, v124, v126, v128, v129);
    v131 = v179;
    static AccessibilityChildBehavior.contain.getter(v130);
    sub_10003D2DC(&qword_100BCD2B0, &qword_100BCD220);
    v133 = v132;
    v134 = v170;
    v135 = (_QWORD *)v169;
    View.accessibilityElement(children:)(v131, v169, v132);
    (*(void (**)(char *, uint64_t))(v180 + 8))(v131, v181);
    sub_100021A14(v117, &qword_100BCD220);
    v136 = v83[2];
    v188 = v83[1];
    v189 = v136;
    v190 = v135;
    v191 = v133;
    v137 = swift_getOpaqueTypeConformance2(&v190, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v138 = sub_100114EF8();
    v139 = (uint64_t)v168;
    v140 = v172;
    View.accessibilityLabel<A>(_:)(&v188, v172, &type metadata for String, v137, v138);
    (*(void (**)(char *, uint64_t))(v171 + 8))(v134, v140);
    v141 = (uint64_t)v167;
    v142 = v185;
    ModifiedContent<>.accessibilityRespondsToUserInteraction(_:)(0, v185);
    v74 = &qword_100BCD230;
    sub_100021A14(v139, &qword_100BCD230);
    v143 = v173;
    sub_1000787D4(v141, v173, &qword_100BCD230);
    v144 = v184;
    sub_100037768(v143, v184, &qword_100BCD230);
    swift_storeEnumTagMultiPayload(v144, v182, 1);
    v145 = sub_1002361A4();
    v146 = sub_1002363A8();
    _ConditionalContent<>.init(storage:)(v144, v183, v142, v145, v146);
    v115 = v143;
    goto LABEL_41;
  }
  v85 = a1[4];
  swift_bridgeObjectRetain(v85);
  v87 = static HorizontalAlignment.leading.getter(v86);
  swift_beginAccess(&unk_100BDE048, &v188, 1, 0);
  v88 = sub_1003BD52C();
  v190 = _swiftEmptyArrayStorage;
  sub_10000F1C8(&qword_100BCD2E8, (uint64_t (*)(uint64_t))&type metadata accessor for PinnedScrollableViews);
  v90 = v89;
  v91 = sub_1000BA294(&qword_100BCD2F0);
  sub_10003D2DC(&qword_100BCD2F8, &qword_100BCD2F0);
  v92 = v153;
  v94 = dispatch thunk of SetAlgebra.init<A>(_:)(&v190, v91, v93, v152, v90);
  __chkstk_darwin(v94);
  v95 = sub_1000BA294(&qword_100BCD300);
  v96 = sub_10023647C();
  v97 = v155;
  v98 = LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)(v85, v87, *(_QWORD *)&v88, 0, v92, sub_100236474, &v147 - 4, v95, v96);
  v99 = v179;
  static AccessibilityChildBehavior.contain.getter(v98);
  sub_10003D2DC(&qword_100BCD2D8, &qword_100BCD238);
  v101 = v100;
  v102 = v162;
  v103 = v161;
  View.accessibilityElement(children:)(v99, v161, v100);
  (*(void (**)(char *, uint64_t))(v180 + 8))(v99, v181);
  (*(void (**)(char *, uint64_t))(v157 + 8))(v97, v103);
  v104 = v42[2];
  v190 = (_QWORD *)v42[1];
  v191 = v104;
  v187[0] = v103;
  v187[1] = v101;
  v105 = swift_getOpaqueTypeConformance2(v187, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v106 = sub_100114EF8();
  v107 = (uint64_t)v160;
  v108 = v164;
  View.accessibilityLabel<A>(_:)(&v190, v164, &type metadata for String, v105, v106);
  (*(void (**)(char *, uint64_t))(v163 + 8))(v102, v108);
  v109 = (uint64_t)v159;
  v110 = v178;
  ModifiedContent<>.accessibilityRespondsToUserInteraction(_:)(0, v178);
  v74 = &qword_100BCD248;
  sub_100021A14(v107, &qword_100BCD248);
  v75 = v165;
  sub_1000787D4(v109, v165, &qword_100BCD248);
  v111 = v176;
  sub_100037768(v75, v176, &qword_100BCD248);
  swift_storeEnumTagMultiPayload(v111, v175, 1);
  v77 = sub_100236210();
  v78 = sub_1002362DC();
  v80 = (uint64_t)v177;
  v81 = v111;
  v82 = v174;
  v79 = v110;
LABEL_39:
  _ConditionalContent<>.init(storage:)(v81, v82, v79, v77, v78);
  v112 = v184;
  sub_100037768(v80, v184, &qword_100BCD260);
  swift_storeEnumTagMultiPayload(v112, v182, 0);
  v113 = sub_1002361A4();
  v114 = sub_1002363A8();
  _ConditionalContent<>.init(storage:)(v112, v183, v185, v113, v114);
  sub_100021A14(v80, &qword_100BCD260);
  v115 = v75;
LABEL_41:
  sub_100021A14(v115, v74);
}

void sub_100234410(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  *(_QWORD *)a2 = static VerticalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v4 = sub_1000BA294(&qword_100BCD348);
  sub_100234650(a1, a2 + *(int *)(v4 + 44));
}

BOOL sub_100234458()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double *v3;
  double v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  double v10;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for MeasuredConditionDetailLegendView(0) + 32));
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = (double *)(v1 + 32);
    v4 = 0.0;
    v5 = v2;
    do
    {
      v6 = *v3++;
      v4 = v4 + v6;
      --v5;
    }
    while (v5);
  }
  else
  {
    v4 = 0.0;
  }
  v7 = (double)(v2 - 1) * 8.0 + v4;
  v8 = sub_1000BA294(&qword_100BC40A8);
  State.wrappedValue.getter(&v10, v8);
  return v10 < v7;
}

uint64_t sub_100234504(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD v4[4];

  v4[2] = a1;
  v1 = sub_1000BA294(&qword_100BCD318);
  v2 = sub_1002364EC();
  return Section<>.init(content:)(sub_100236588, v4, v1, v2);
}

uint64_t sub_10023455C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v9 = *a1;
  swift_bridgeObjectRetain(v9);
  v1 = sub_1000BA294(&qword_100BCD288);
  v2 = sub_1000BA294(&qword_100BCD328);
  sub_10003D2DC(&qword_100BCD298, &qword_100BCD288);
  v4 = v3;
  sub_10003D2DC(&qword_100BCD320, &qword_100BCD328);
  v6 = v5;
  sub_10000F1C8(&qword_100BCD2A8, type metadata accessor for ConditionDetailLegend);
  return ForEach<>.init(_:content:)(&v9, sub_10023464C, 0, v1, &type metadata for String, v2, v4, v6, v7);
}

void sub_100234650(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for LegendView(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v15 - v8;
  sub_100080C0C(a1, (uint64_t)v6, type metadata accessor for ConditionDetailLegend);
  v10 = &v6[*(int *)(v4 + 20)];
  *(_QWORD *)v10 = swift_getKeyPath(&unk_100989F40);
  v11 = sub_1000BA294(&qword_100BCD350);
  sub_1000DB7A8(v11);
  v12 = &v6[*(int *)(v4 + 24)];
  *(_QWORD *)v12 = swift_getKeyPath(&unk_100989F70);
  v13 = sub_1000BA294(&qword_100BC68C8);
  sub_1000DB7A8(v13);
  sub_10007802C((uint64_t)v6, (uint64_t)v9, type metadata accessor for LegendView);
  sub_100080C0C((uint64_t)v9, (uint64_t)v6, type metadata accessor for LegendView);
  sub_100080C0C((uint64_t)v6, a2, type metadata accessor for LegendView);
  v14 = a2 + *(int *)(sub_1000BA294(&qword_100BCD358) + 48);
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  sub_1000215BC((uint64_t)v9, type metadata accessor for LegendView);
  sub_1000215BC((uint64_t)v6, type metadata accessor for LegendView);
}

void sub_1002347AC(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;

  v62 = a2;
  v60 = a3;
  v4 = type metadata accessor for MeasuredConditionDetailLegendView(0);
  __chkstk_darwin(v4);
  v59 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ConditionDetailLegend(0);
  __chkstk_darwin(v6);
  v56 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_1000BA294(&qword_100BCD360);
  __chkstk_darwin(v61);
  v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BCD368);
  __chkstk_darwin(v10);
  v57 = (uint64_t *)((char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  v14 = (char *)&v55 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)&v55 - v16;
  v18 = type metadata accessor for LegendView(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)&v55 - v22;
  sub_100080C0C(a1, (uint64_t)v20, type metadata accessor for ConditionDetailLegend);
  v24 = &v20[*(int *)(v18 + 20)];
  *(_QWORD *)v24 = swift_getKeyPath(&unk_100989F40);
  v25 = sub_1000BA294(&qword_100BCD350);
  swift_storeEnumTagMultiPayload(v24, v25, 0);
  v26 = &v20[*(int *)(v18 + 24)];
  *(_QWORD *)v26 = swift_getKeyPath(&unk_100989F70);
  v27 = sub_1000BA294(&qword_100BC68C8);
  swift_storeEnumTagMultiPayload(v26, v27, 0);
  v58 = v23;
  v28 = (uint64_t)v23;
  v29 = v6;
  sub_10007802C((uint64_t)v20, v28, type metadata accessor for LegendView);
  v30 = a1;
  v31 = (uint64_t)v9;
  sub_100080C0C(v30, (uint64_t)v17, type metadata accessor for ConditionDetailLegend);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v17, 0, 1, v6);
  sub_10020CBDC(*v62, (uint64_t)v14);
  v32 = (uint64_t)&v9[*(int *)(v61 + 48)];
  sub_100037768((uint64_t)v17, (uint64_t)v9, &qword_100BCD368);
  sub_100037768((uint64_t)v14, v32, &qword_100BCD368);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v29) != 1)
  {
    v40 = v56;
    v41 = v57;
    sub_100037768(v31, (uint64_t)v57, &qword_100BCD368);
    if (_s7Weather24LocationCompositionStateOwet_0(v32, 1, v29) == 1)
    {
      v42 = &qword_100BCD360;
    }
    else
    {
      sub_10007802C(v32, (uint64_t)v40, type metadata accessor for ConditionDetailLegend);
      v43 = v41[1];
      v44 = *v41 == *v40 && v43 == v40[1];
      if (v44 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v41, v43, *v40) & 1) != 0)
      {
        v45 = v41[2];
        v46 = v41[3];
        v47 = v40[2];
        v48 = v45 == v47 && v46 == v40[3];
        if ((v48 || (_stringCompareWithSmolCheck(_:_:expecting:)(v45, v46, v47) & 1) != 0)
          && (sub_1001B5508((uint64_t)v41 + *(int *)(v29 + 24), (uint64_t)v40 + *(int *)(v29 + 24)) & 1) != 0)
        {
          v49 = *(int *)(v29 + 28);
          v50 = *(_QWORD *)((char *)v41 + v49);
          v51 = *(_QWORD *)((char *)v41 + v49 + 8);
          v52 = (_QWORD *)((char *)v40 + v49);
          v53 = v50 == *v52 && v51 == v52[1];
          v35 = (uint64_t)v58;
          v34 = (uint64_t)v59;
          v36 = (uint64_t)v62;
          if (v53)
          {
            sub_1000215BC((uint64_t)v40, type metadata accessor for ConditionDetailLegend);
            sub_100021A14((uint64_t)v14, &qword_100BCD368);
            sub_100021A14((uint64_t)v17, &qword_100BCD368);
            sub_1000215BC((uint64_t)v41, type metadata accessor for ConditionDetailLegend);
            goto LABEL_3;
          }
          LODWORD(v61) = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v51, *v52);
          sub_1000215BC((uint64_t)v40, type metadata accessor for ConditionDetailLegend);
          sub_100021A14((uint64_t)v14, &qword_100BCD368);
          sub_100021A14((uint64_t)v17, &qword_100BCD368);
          sub_1000215BC((uint64_t)v41, type metadata accessor for ConditionDetailLegend);
          sub_100021A14(v31, &qword_100BCD368);
          sub_100080C0C(v36, v34, type metadata accessor for MeasuredConditionDetailLegendView);
          v37 = v60;
          if ((v61 & 1) != 0)
            goto LABEL_4;
LABEL_28:
          sub_1000215BC(v34, type metadata accessor for MeasuredConditionDetailLegendView);
          v39 = 0;
          v38 = 1;
          goto LABEL_29;
        }
      }
      sub_1000215BC((uint64_t)v40, type metadata accessor for ConditionDetailLegend);
      v42 = &qword_100BCD368;
    }
    v34 = (uint64_t)v59;
    v37 = v60;
    v36 = (uint64_t)v62;
    v35 = (uint64_t)v58;
    sub_100021A14((uint64_t)v14, &qword_100BCD368);
    sub_100021A14((uint64_t)v17, &qword_100BCD368);
    sub_1000215BC((uint64_t)v57, type metadata accessor for ConditionDetailLegend);
LABEL_27:
    sub_100021A14(v31, v42);
    sub_100080C0C(v36, v34, type metadata accessor for MeasuredConditionDetailLegendView);
    goto LABEL_28;
  }
  sub_100021A14((uint64_t)v14, &qword_100BCD368);
  sub_100021A14((uint64_t)v17, &qword_100BCD368);
  v33 = _s7Weather24LocationCompositionStateOwet_0(v32, 1, v29);
  v35 = (uint64_t)v58;
  v34 = (uint64_t)v59;
  v36 = (uint64_t)v62;
  if (v33 != 1)
  {
    v42 = &qword_100BCD360;
    v37 = v60;
    goto LABEL_27;
  }
LABEL_3:
  sub_100021A14(v31, &qword_100BCD368);
  sub_100080C0C(v36, v34, type metadata accessor for MeasuredConditionDetailLegendView);
  v37 = v60;
LABEL_4:
  v38 = *(_BYTE *)(v34 + 24);
  sub_1000215BC(v34, type metadata accessor for MeasuredConditionDetailLegendView);
  v39 = v38 ^ 1;
LABEL_29:
  sub_100080C0C(v35, (uint64_t)v20, type metadata accessor for LegendView);
  sub_100080C0C((uint64_t)v20, v37, type metadata accessor for LegendView);
  v54 = v37 + *(int *)(sub_1000BA294(&qword_100BCD370) + 48);
  *(_QWORD *)v54 = 0;
  *(_BYTE *)(v54 + 8) = v38;
  *(_BYTE *)(v54 + 9) = v39;
  sub_1000215BC(v35, type metadata accessor for LegendView);
  sub_1000215BC((uint64_t)v20, type metadata accessor for LegendView);
}

uint64_t sub_100234DA4(uint64_t a1, double a2, double a3, double a4, double a5)
{
  CGFloat Width;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];

  Width = CGRectGetWidth(*(CGRect *)&a2);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  *(CGFloat *)v11 = Width;
  v11[1] = v7;
  v11[2] = v8;
  v9 = sub_1000BA294(&qword_100BC40A8);
  return State.wrappedValue.setter(v11, v9);
}

double sub_100234DFC@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t KeyPath;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  void (*v42)(char *, uint64_t);
  int64x2_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  double result;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char v54;
  _OWORD *v55;
  int64x2_t v56;
  int64x2_t v57;
  _OWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64x2_t v62;
  int64x2_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  char v72;
  int64x2_t v73[2];
  uint64_t v74;

  v58 = a1;
  v2 = sub_1000BA294(&qword_100BCD4A0);
  __chkstk_darwin(v2);
  v4 = &v56.i8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for ConditionDetailLegendForeground.LegendGradient(0);
  __chkstk_darwin(v5);
  v7 = &v56.i8[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for RedactionReasons(0);
  v57.i64[0] = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = &v56.i8[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v13 = &v56.i8[-v12];
  v14 = type metadata accessor for ConditionDetailLegendForeground(0);
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)v56.i64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = type metadata accessor for ConditionDetailLegend(0);
  sub_100080C0C(v1 + *(int *)(v17 + 24), (uint64_t)v16, type metadata accessor for ConditionDetailLegendForeground);
  if (swift_getEnumCaseMultiPayload(v16) == 1)
  {
    sub_10007802C((uint64_t)v16, (uint64_t)v7, type metadata accessor for ConditionDetailLegendForeground.LegendGradient);
    v19 = static Alignment.center.getter(v18);
    v21 = v20;
    v22 = Image.init(systemName:)(0x662E656C63726963, 0xEB000000006C6C69);
    v23 = (double *)&v7[*(int *)(v5 + 20)];
    v24 = *v23;
    v25 = v23[1];
    type metadata accessor for LegendView(0);
    sub_100114A94();
    v26 = type metadata accessor for ColorSchemeContrast(0);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v4, 0, 1, v26);
    DetailChartGradientModel.linearGradient(minValue:maxValue:colorSchemeContrast:)(v73, v4, v24, v25);
    v57 = v73[0];
    v56 = v73[1];
    v27 = v74;
    sub_100021A14((uint64_t)v4, &qword_100BCD4A0);
    v28 = *(_QWORD *)&v7[*(int *)(v5 + 24)];
    v59 = v19;
    v60 = v21;
    v61 = v22;
    v62 = v57;
    v63 = v56;
    v64 = v27;
    v65 = v28;
    v66 = 1;
    v29 = sub_1000BA294(&qword_100BCD4A8);
    v30 = sub_1000BA294(&qword_100BCD4B0);
    v31 = sub_100237748();
    sub_10003D2DC(&qword_100BCD4E0, &qword_100BCD4B0);
    _ConditionalContent<>.init(storage:)(&v59, v29, v30, v31, v32);
    sub_1000215BC((uint64_t)v7, type metadata accessor for ConditionDetailLegendForeground.LegendGradient);
  }
  else
  {
    v33 = *v16;
    v34 = Image.init(systemName:)(0x662E656C63726963, 0xEB000000006C6C69);
    KeyPath = swift_getKeyPath(&unk_10098A028);
    swift_retain();
    v37 = static Alignment.center.getter(v36);
    v39 = v38;
    type metadata accessor for LegendView(0);
    sub_1007A5C88();
    static RedactionReasons.placeholder.getter();
    sub_10000F1C8(&qword_100BCD4E8, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons);
    v41 = dispatch thunk of SetAlgebra.isSuperset(of:)(v10, v8, v40);
    v42 = *(void (**)(char *, uint64_t))(v57.i64[0] + 8);
    v42(v10, v8);
    v42(v13, v8);
    v43 = 0uLL;
    if ((v41 & 1) != 0)
    {
      swift_retain();
      v43 = vdupq_n_s64(0x100uLL);
      v43.i64[0] = v33;
    }
    v59 = v34;
    v60 = KeyPath;
    v61 = v33;
    v62 = v43;
    v63.i64[0] = v37;
    v63.i64[1] = v39;
    v65 = 0;
    v64 = 0;
    v44 = v43.i64[0];
    v66 = 0;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v45 = sub_1000BA294(&qword_100BCD4A8);
    v46 = sub_1000BA294(&qword_100BCD4B0);
    v47 = sub_100237748();
    sub_10003D2DC(&qword_100BCD4E0, &qword_100BCD4B0);
    _ConditionalContent<>.init(storage:)(&v59, v45, v46, v47, v48);
    swift_release(v44);
    swift_release(KeyPath);
    swift_release(v34);
    swift_release_n(v33, 2);
  }
  result = *(double *)&v67;
  v50 = v68;
  v51 = v69;
  v52 = v70;
  v53 = v71;
  v54 = v72;
  v55 = v58;
  *v58 = v67;
  v55[1] = v50;
  v55[2] = v51;
  v55[3] = v52;
  *((_QWORD *)v55 + 8) = v53;
  *((_BYTE *)v55 + 72) = v54;
  return result;
}

void sub_10023530C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t OpaqueTypeConformance2;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[2];
  _QWORD v50[19];
  _BYTE v51[48];
  _OWORD __dst[10];

  v48 = a1;
  v2 = type metadata accessor for AccessibilityChildBehavior(0);
  v42 = *(_QWORD *)(v2 - 8);
  v43 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000BA294(&qword_100BCD470);
  v6 = *(_QWORD *)(v5 - 8);
  v45 = v5;
  v46 = v6;
  __chkstk_darwin(v5);
  v40 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_1000BA294(&qword_100BCD478);
  __chkstk_darwin(v47);
  v41 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v44 = (char *)&v35 - v10;
  swift_beginAccess(&unk_100BDE048, v51, 1, 0);
  v11 = sub_1003BD52C();
  v13 = static VerticalAlignment.center.getter(v12);
  sub_100235668(v1, (uint64_t)__dst);
  v37 = __dst[1];
  v38 = __dst[0];
  v35 = __dst[3];
  v36 = __dst[2];
  v14 = *(_QWORD *)&__dst[4];
  v15 = BYTE8(__dst[4]);
  v16 = __dst[5];
  v17 = __dst[6];
  v18 = *((_QWORD *)&__dst[6] + 1);
  v51[40] = 0;
  v51[32] = BYTE8(__dst[4]);
  v51[24] = __dst[6];
  swift_beginAccess(&unk_100BDE048, __dst, 33, 0);
  v19 = sub_1003BD4E8();
  swift_endAccess(__dst);
  KeyPath = swift_getKeyPath(&unk_100989FF8);
  v50[0] = v13;
  *(double *)&v50[1] = v11;
  LOBYTE(v50[2]) = 0;
  *(_OWORD *)&v50[3] = v38;
  *(_OWORD *)&v50[5] = v37;
  *(_OWORD *)&v50[7] = v36;
  *(_OWORD *)&v50[9] = v35;
  v50[11] = v14;
  LOBYTE(v50[12]) = v15;
  *(_OWORD *)&v50[13] = v16;
  LOBYTE(v50[15]) = v17;
  v50[16] = v18;
  v50[17] = KeyPath;
  v50[18] = v19;
  static AccessibilityChildBehavior.ignore.getter(KeyPath);
  v21 = sub_1000BA294(&qword_100BCD480);
  v22 = sub_100237538();
  v23 = v40;
  View.accessibilityElement(children:)(v4, v21, v22);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v4, v43);
  memcpy(__dst, v50, 0x98uLL);
  sub_1002375D4((uint64_t)__dst);
  v24 = *(_QWORD *)(v39 + 24);
  v25 = v39;
  v50[0] = *(_QWORD *)(v39 + 16);
  v50[1] = v24;
  v49[0] = v21;
  v49[1] = v22;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v49, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v27 = sub_100114EF8();
  v28 = (uint64_t)v41;
  v29 = v45;
  View.accessibilityLabel<A>(_:)(v50, v45, &type metadata for String, OpaqueTypeConformance2, v27);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v23, v29);
  v30 = (uint64_t *)(v25 + *(int *)(type metadata accessor for ConditionDetailLegend(0) + 28));
  v32 = *v30;
  v31 = v30[1];
  v50[0] = v32;
  v50[1] = v31;
  v33 = (uint64_t)v44;
  v34 = v47;
  ModifiedContent<>.accessibilityValue<A>(_:)(v50, v47, &type metadata for String, v27);
  sub_100021A14(v28, &qword_100BCD478);
  ModifiedContent<>.accessibilityRespondsToUserInteraction(_:)(0, v34);
  sub_100021A14(v33, &qword_100BCD478);
}

void sub_100235668(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;

  sub_100234DFC(&v31);
  v26 = *((_QWORD *)&v31 + 1);
  v27 = v31;
  v24 = v33;
  v25 = v32;
  v22 = v35;
  v23 = v34;
  v29 = v37;
  v30 = v36;
  v28 = v38;
  v21 = v39;
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)&v31 = *(_QWORD *)(a1 + 16);
  *((_QWORD *)&v31 + 1) = v4;
  v5 = sub_100114EF8();
  swift_bridgeObjectRetain(v4);
  v6 = Text.init<A>(_:)(&v31, &type metadata for String, v5);
  v8 = v7;
  v10 = v9;
  v12 = v11 & 1;
  v13 = static Color.secondary.getter();
  v14 = Text.foregroundColor(_:)(v13, v6, v8, v12, v10);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  swift_release(v13);
  sub_1000D31B4(v6, v8, v12);
  swift_bridgeObjectRelease();
  LOBYTE(v31) = v21;
  *(_QWORD *)a2 = v27;
  *(_QWORD *)(a2 + 8) = v26;
  *(_QWORD *)(a2 + 16) = v25;
  *(_QWORD *)(a2 + 24) = v24;
  *(_QWORD *)(a2 + 32) = v23;
  *(_QWORD *)(a2 + 40) = v22;
  *(_QWORD *)(a2 + 48) = v30;
  *(_QWORD *)(a2 + 56) = v29;
  *(_QWORD *)(a2 + 64) = v28;
  *(_BYTE *)(a2 + 72) = v21;
  *(_QWORD *)(a2 + 80) = v14;
  *(_QWORD *)(a2 + 88) = v16;
  *(_BYTE *)(a2 + 96) = v18 & 1;
  *(_QWORD *)(a2 + 104) = v20;
  sub_1002376D8(v27, v26, v25, v24, v23, v22, v30, v29, v28, v21);
  sub_1000D55D4(v14, v16, v18 & 1);
  swift_bridgeObjectRetain(v20);
  sub_1000D31B4(v14, v16, v18 & 1);
  swift_bridgeObjectRelease();
  sub_100237670(v27, v26, v25, v24, v23, v22, v30, v29, v28, v31);
}

uint64_t sub_100235854(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    v8 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v8;
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v10 = a2[4];
    v9 = a2[5];
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v9;
    v11 = *(int *)(a3 + 28);
    v12 = (_QWORD *)(a1 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    *(_QWORD *)(a1 + 48) = a2[6];
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    swift_retain();
    v14 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v13) == 1)
    {
      v15 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
      v16 = 1;
    }
    else
    {
      *v12 = *v13;
      swift_retain();
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v14, v16);
    v17 = *(int *)(a3 + 32);
    v18 = *(uint64_t *)((char *)a2 + v17);
    *(_QWORD *)(a1 + v17) = v18;
    swift_bridgeObjectRetain(v18);
  }
  return a1;
}

double sub_100235980(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  double result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(a1 + 48));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 28));
  sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v4) == 1)
  {
    v5 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release(*v4);
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_100235A20(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *a2;
  v7 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = a2[2];
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  v10 = a2[4];
  v9 = a2[5];
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v9;
  v11 = *(int *)(a3 + 28);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (uint64_t *)((char *)a2 + v11);
  *(_QWORD *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_retain();
  v14 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v13) == 1)
  {
    v15 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
    v16 = 1;
  }
  else
  {
    *v12 = *v13;
    swift_retain();
    v16 = 0;
  }
  swift_storeEnumTagMultiPayload(v12, v14, v16);
  v17 = *(int *)(a3 + 32);
  v18 = *(uint64_t *)((char *)a2 + v17);
  *(_QWORD *)(a1 + v17) = v18;
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t sub_100235B28(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = a2[1];
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  v8 = a2[4];
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = a2[5];
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = a2[6];
  swift_retain();
  swift_release(v9);
  if ((uint64_t *)a1 != a2)
  {
    v10 = *(int *)(a3 + 28);
    v11 = (_QWORD *)(a1 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    sub_100021A14(a1 + v10, &qword_100BC37D8);
    v13 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v12) == 1)
    {
      v14 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      *v11 = *v12;
      swift_retain();
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
  }
  v16 = *(int *)(a3 + 32);
  v17 = *(uint64_t *)((char *)a2 + v16);
  *(_QWORD *)(a1 + v16) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100235C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v6 = *(int *)(a3 + 28);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v8) == 1)
  {
    v10 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 32)) = *(_QWORD *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t sub_100235D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release(v7);
  if (a1 != a2)
  {
    v8 = *(int *)(a3 + 28);
    v9 = (void *)(a1 + v8);
    v10 = (const void *)(a2 + v8);
    sub_100021A14(a1 + v8, &qword_100BC37D8);
    v11 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v10) == 1)
    {
      v12 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 32)) = *(_QWORD *)(a2 + *(int *)(a3 + 32));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100235E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100235E94);
}

void sub_100235E94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_1000C5BCC();
    sub_100079F70();
  }
  else
  {
    v6 = sub_1000BA294((uint64_t *)&unk_100C09CA0);
    sub_1000B250C(a1 + *(int *)(a3 + 28), a2, v6);
  }
}

uint64_t sub_100235EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100235EF8);
}

void sub_100235EF8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000993A8();
  if (v3)
  {
    *v1 = (v0 - 1);
    sub_100079F70();
  }
  else
  {
    v4 = v2;
    v5 = sub_1000BA294((uint64_t *)&unk_100C09CA0);
    sub_1000987C4((uint64_t)v1 + *(int *)(v4 + 28), v0, v0, v5);
  }
}

void sub_100235F4C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_100989E10;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = &unk_100989ED8;
  sub_100158B48(319, (unint64_t *)&qword_100BC3888, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

void sub_100235FE8()
{
  sub_10000F1C8(&qword_100BCD1F0, type metadata accessor for MeasuredConditionDetailLegendView);
}

uint64_t sub_100236014(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AAD428, 1);
}

uint64_t sub_100236028(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MeasuredConditionDetailLegendView(0) - 8) + 80);
  return sub_100234DA4(v4 + ((v9 + 16) & ~v9), a1, a2, a3, a4);
}

uint64_t sub_100236084()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for CoordinateSpace(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1002360E4()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for CoordinateSpace(0);
  sub_1000C130C();
  sub_1006D09C0(v0, v1);
}

uint64_t sub_100236118(double *a1, uint64_t (*a2)(double, double, double, double))
{
  return a2(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_100236140()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100236164(double *a1)
{
  uint64_t v1;

  return sub_100236118(a1, *(uint64_t (**)(double, double, double, double))(v1 + 16));
}

void sub_100236170()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  type metadata accessor for MeasuredConditionDetailLegendView(0);
  v0 = sub_1000C130C();
  sub_1002347AC(v0, v1, v2);
}

unint64_t sub_1002361A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCD2B8;
  if (!qword_100BCD2B8)
  {
    v1 = sub_100075EB0(&qword_100BCD260);
    sub_100236210();
    sub_1002362DC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCD2B8);
  }
  return result;
}

unint64_t sub_100236210()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_100BCD2C0;
  if (!qword_100BCD2C0)
  {
    v1 = sub_100075EB0(&qword_100BCD278);
    v2 = sub_100075EB0(&qword_100BCD268);
    sub_10003D2DC(&qword_100BCD2C8, &qword_100BCD268);
    v4[0] = v2;
    v4[1] = v3;
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10000F1C8((unint64_t *)&qword_100BC4E48, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCD2C0);
  }
  return result;
}

unint64_t sub_1002362DC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_100BCD2D0;
  if (!qword_100BCD2D0)
  {
    v1 = sub_100075EB0(&qword_100BCD248);
    v2 = sub_100075EB0(&qword_100BCD238);
    sub_10003D2DC(&qword_100BCD2D8, &qword_100BCD238);
    v4[0] = v2;
    v4[1] = v3;
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10000F1C8((unint64_t *)&qword_100BC4E48, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCD2D0);
  }
  return result;
}

unint64_t sub_1002363A8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_100BCD2E0;
  if (!qword_100BCD2E0)
  {
    v1 = sub_100075EB0(&qword_100BCD230);
    v2 = sub_100075EB0(&qword_100BCD220);
    sub_10003D2DC(&qword_100BCD2B0, &qword_100BCD220);
    v4[0] = v2;
    v4[1] = v3;
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10000F1C8((unint64_t *)&qword_100BC4E48, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCD2E0);
  }
  return result;
}

uint64_t sub_100236474()
{
  uint64_t v0;

  return sub_100234504(*(_QWORD *)(v0 + 16));
}

unint64_t sub_10023647C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCD308;
  if (!qword_100BCD308)
  {
    v1 = sub_100075EB0(&qword_100BCD300);
    sub_1002364EC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCD308);
  }
  return result;
}

unint64_t sub_1002364EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCD310;
  if (!qword_100BCD310)
  {
    v1 = sub_100075EB0(&qword_100BCD318);
    sub_10003D2DC(&qword_100BCD320, &qword_100BCD328);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCD310);
  }
  return result;
}

uint64_t type metadata accessor for LegendView(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100BCD3E0, (uint64_t)&nominal type descriptor for LegendView);
}

uint64_t sub_100236588()
{
  uint64_t v0;

  return sub_10023455C(*(uint64_t **)(v0 + 16));
}

uint64_t *sub_100236590(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = type metadata accessor for ConditionDetailLegend(0);
    v10 = *(int *)(v9 + 24);
    v11 = (uint64_t *)((char *)v4 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    v13 = type metadata accessor for ConditionDetailLegendForeground(0);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (swift_getEnumCaseMultiPayload(v12) == 1)
    {
      v14 = type metadata accessor for DetailChartGradientModel(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = type metadata accessor for ConditionDetailLegendForeground.LegendGradient(0);
      *(_OWORD *)((char *)v11 + *(int *)(v15 + 20)) = *(_OWORD *)((char *)v12 + *(int *)(v15 + 20));
      *(_QWORD *)((char *)v11 + *(int *)(v15 + 24)) = *(_QWORD *)((char *)v12 + *(int *)(v15 + 24));
      v16 = 1;
    }
    else
    {
      *v11 = *v12;
      swift_retain();
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v16);
    v18 = *(int *)(v9 + 28);
    v19 = (uint64_t *)((char *)v4 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v22 = *(int *)(a3 + 20);
    v23 = (uint64_t *)((char *)v4 + v22);
    v24 = (uint64_t *)((char *)a2 + v22);
    swift_bridgeObjectRetain(v21);
    v25 = sub_1000BA294(&qword_100BCD350);
    if (swift_getEnumCaseMultiPayload(v24) == 1)
    {
      v26 = type metadata accessor for RedactionReasons(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v23, v24, v26);
      v27 = 1;
    }
    else
    {
      *v23 = *v24;
      swift_retain();
      v27 = 0;
    }
    swift_storeEnumTagMultiPayload(v23, v25, v27);
    v28 = *(int *)(a3 + 24);
    v29 = (uint64_t *)((char *)v4 + v28);
    v30 = (uint64_t *)((char *)a2 + v28);
    v31 = sub_1000BA294(&qword_100BC68C8);
    if (swift_getEnumCaseMultiPayload(v30) == 1)
    {
      v32 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v29, v30, v32);
      v33 = v29;
      v34 = v31;
      v35 = 1;
    }
    else
    {
      *v29 = *v30;
      swift_retain();
      v33 = v29;
      v34 = v31;
      v35 = 0;
    }
    swift_storeEnumTagMultiPayload(v33, v34, v35);
  }
  return v4;
}

double sub_1002367C8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  double result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = (_QWORD *)(a1 + *(int *)(type metadata accessor for ConditionDetailLegend(0) + 24));
  type metadata accessor for ConditionDetailLegendForeground(0);
  if (swift_getEnumCaseMultiPayload(v4) == 1)
  {
    v5 = type metadata accessor for DetailChartGradientModel(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release(*v4);
  }
  swift_bridgeObjectRelease();
  v6 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  sub_1000BA294(&qword_100BCD350);
  if (swift_getEnumCaseMultiPayload(v6) == 1)
  {
    v7 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release(*v6);
  }
  v8 = (_QWORD *)(a1 + *(int *)(a2 + 24));
  sub_1000BA294(&qword_100BC68C8);
  if (swift_getEnumCaseMultiPayload(v8) == 1)
  {
    v9 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v8).n128_u64[0];
  }
  return result;
}

_QWORD *sub_10023690C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = type metadata accessor for ConditionDetailLegend(0);
  v9 = *(int *)(v8 + 24);
  v10 = (_QWORD *)((char *)a1 + v9);
  v11 = (_QWORD *)((char *)a2 + v9);
  v12 = type metadata accessor for ConditionDetailLegendForeground(0);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (swift_getEnumCaseMultiPayload(v11) == 1)
  {
    v13 = type metadata accessor for DetailChartGradientModel(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
    v14 = type metadata accessor for ConditionDetailLegendForeground.LegendGradient(0);
    *(_OWORD *)((char *)v10 + *(int *)(v14 + 20)) = *(_OWORD *)((char *)v11 + *(int *)(v14 + 20));
    *(_QWORD *)((char *)v10 + *(int *)(v14 + 24)) = *(_QWORD *)((char *)v11 + *(int *)(v14 + 24));
    v15 = 1;
  }
  else
  {
    *v10 = *v11;
    swift_retain();
    v15 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v12, v15);
  v16 = *(int *)(v8 + 28);
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = *(int *)(a3 + 20);
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  swift_bridgeObjectRetain(v19);
  v23 = sub_1000BA294(&qword_100BCD350);
  if (swift_getEnumCaseMultiPayload(v22) == 1)
  {
    v24 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v21, v22, v24);
    v25 = 1;
  }
  else
  {
    *v21 = *v22;
    swift_retain();
    v25 = 0;
  }
  swift_storeEnumTagMultiPayload(v21, v23, v25);
  v26 = *(int *)(a3 + 24);
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = (_QWORD *)((char *)a2 + v26);
  v29 = sub_1000BA294(&qword_100BC68C8);
  if (swift_getEnumCaseMultiPayload(v28) == 1)
  {
    v30 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
    v31 = 1;
  }
  else
  {
    *v27 = *v28;
    swift_retain();
    v31 = 0;
  }
  swift_storeEnumTagMultiPayload(v27, v29, v31);
  return a1;
}

_QWORD *sub_100236B10(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v7 = a2[3];
  a1[3] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  v8 = type metadata accessor for ConditionDetailLegend(0);
  v9 = v8;
  if (a1 != a2)
  {
    v10 = *(int *)(v8 + 24);
    v11 = (_QWORD *)((char *)a1 + v10);
    v12 = (_QWORD *)((char *)a2 + v10);
    sub_1000215BC((uint64_t)a1 + v10, type metadata accessor for ConditionDetailLegendForeground);
    v13 = type metadata accessor for ConditionDetailLegendForeground(0);
    if (swift_getEnumCaseMultiPayload(v12) == 1)
    {
      v14 = type metadata accessor for DetailChartGradientModel(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = type metadata accessor for ConditionDetailLegendForeground.LegendGradient(0);
      *(_OWORD *)((char *)v11 + *(int *)(v15 + 20)) = *(_OWORD *)((char *)v12 + *(int *)(v15 + 20));
      *(_QWORD *)((char *)v11 + *(int *)(v15 + 24)) = *(_QWORD *)((char *)v12 + *(int *)(v15 + 24));
      v16 = 1;
    }
    else
    {
      *v11 = *v12;
      swift_retain();
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v16);
  }
  v17 = *(int *)(v9 + 28);
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v21 = *(int *)(a3 + 20);
    v22 = (_QWORD *)((char *)a1 + v21);
    v23 = (_QWORD *)((char *)a2 + v21);
    sub_100021A14((uint64_t)a1 + v21, &qword_100BCD350);
    v24 = sub_1000BA294(&qword_100BCD350);
    if (swift_getEnumCaseMultiPayload(v23) == 1)
    {
      v25 = type metadata accessor for RedactionReasons(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v22, v23, v25);
      v26 = 1;
    }
    else
    {
      *v22 = *v23;
      swift_retain();
      v26 = 0;
    }
    swift_storeEnumTagMultiPayload(v22, v24, v26);
    v27 = *(int *)(a3 + 24);
    v28 = (_QWORD *)((char *)a1 + v27);
    v29 = (_QWORD *)((char *)a2 + v27);
    sub_100021A14((uint64_t)a1 + v27, &qword_100BC68C8);
    v30 = sub_1000BA294(&qword_100BC68C8);
    if (swift_getEnumCaseMultiPayload(v29) == 1)
    {
      v31 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v28, v29, v31);
      v32 = 1;
    }
    else
    {
      *v28 = *v29;
      swift_retain();
      v32 = 0;
    }
    swift_storeEnumTagMultiPayload(v28, v30, v32);
  }
  return a1;
}

_OWORD *sub_100236D80(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = type metadata accessor for ConditionDetailLegend(0);
  v8 = *(int *)(v7 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for ConditionDetailLegendForeground(0);
  if (swift_getEnumCaseMultiPayload(v10) == 1)
  {
    v12 = type metadata accessor for DetailChartGradientModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    v13 = type metadata accessor for ConditionDetailLegendForeground.LegendGradient(0);
    *(_OWORD *)&v9[*(int *)(v13 + 20)] = *(_OWORD *)&v10[*(int *)(v13 + 20)];
    *(_QWORD *)&v9[*(int *)(v13 + 24)] = *(_QWORD *)&v10[*(int *)(v13 + 24)];
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  *(_OWORD *)((char *)a1 + *(int *)(v7 + 28)) = *(_OWORD *)((char *)a2 + *(int *)(v7 + 28));
  v14 = *(int *)(a3 + 20);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = sub_1000BA294(&qword_100BCD350);
  if (swift_getEnumCaseMultiPayload(v16) == 1)
  {
    v18 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v15, v16, v18);
    swift_storeEnumTagMultiPayload(v15, v17, 1);
  }
  else
  {
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  v19 = *(int *)(a3 + 24);
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = sub_1000BA294(&qword_100BC68C8);
  if (swift_getEnumCaseMultiPayload(v21) == 1)
  {
    v23 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v20, v21, v23);
    swift_storeEnumTagMultiPayload(v20, v22, 1);
  }
  else
  {
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_100236F64(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = type metadata accessor for ConditionDetailLegend(0);
  v9 = v8;
  if (a1 != a2)
  {
    v10 = *(int *)(v8 + 24);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    sub_1000215BC((uint64_t)a1 + v10, type metadata accessor for ConditionDetailLegendForeground);
    v13 = type metadata accessor for ConditionDetailLegendForeground(0);
    if (swift_getEnumCaseMultiPayload(v12) == 1)
    {
      v14 = type metadata accessor for DetailChartGradientModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      v15 = type metadata accessor for ConditionDetailLegendForeground.LegendGradient(0);
      *(_OWORD *)&v11[*(int *)(v15 + 20)] = *(_OWORD *)&v12[*(int *)(v15 + 20)];
      *(_QWORD *)&v11[*(int *)(v15 + 24)] = *(_QWORD *)&v12[*(int *)(v15 + 24)];
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  v16 = *(int *)(v9 + 28);
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  v20 = *v18;
  v19 = v18[1];
  *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v21 = *(int *)(a3 + 20);
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    sub_100021A14((uint64_t)a1 + v21, &qword_100BCD350);
    v24 = sub_1000BA294(&qword_100BCD350);
    if (swift_getEnumCaseMultiPayload(v23) == 1)
    {
      v25 = type metadata accessor for RedactionReasons(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v22, v23, v25);
      swift_storeEnumTagMultiPayload(v22, v24, 1);
    }
    else
    {
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    v26 = *(int *)(a3 + 24);
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    sub_100021A14((uint64_t)a1 + v26, &qword_100BC68C8);
    v29 = sub_1000BA294(&qword_100BC68C8);
    if (swift_getEnumCaseMultiPayload(v28) == 1)
    {
      v30 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v27, v28, v30);
      swift_storeEnumTagMultiPayload(v27, v29, 1);
    }
    else
    {
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1002371B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002371BC);
}

uint64_t sub_1002371BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1000B45C0();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = v4;
  }
  else
  {
    v9 = sub_1000BA294(&qword_100BCD378);
    if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)v3)
    {
      v7 = v9;
      v10 = *(int *)(a3 + 20);
    }
    else
    {
      v7 = sub_1000BA294(&qword_100BCD380);
      v10 = *(int *)(a3 + 24);
    }
    v8 = v4 + v10;
  }
  return sub_1000B250C(v8, v3, v7);
}

uint64_t sub_10023723C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100237248);
}

uint64_t sub_100237248(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = sub_1000B45C0();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = v5;
  }
  else
  {
    v11 = sub_1000BA294(&qword_100BCD378);
    if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == a3)
    {
      v9 = v11;
      v12 = *(int *)(a4 + 20);
    }
    else
    {
      v9 = sub_1000BA294(&qword_100BCD380);
      v12 = *(int *)(a4 + 24);
    }
    v10 = v5 + v12;
  }
  return sub_1000987C4(v10, v4, v4, v9);
}

void sub_1002372D0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  v2 = type metadata accessor for ConditionDetailLegend(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100158B48(319, &qword_100BCD3F0, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100158B48(319, (unint64_t *)&qword_100BCD3F8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorSchemeContrast);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

unint64_t sub_100237394()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCD430;
  if (!qword_100BCD430)
  {
    v1 = sub_100075EB0(&qword_100BCD218);
    sub_100237418();
    sub_10003D2DC(&qword_100BCD460, &qword_100BCD468);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCD430);
  }
  return result;
}

unint64_t sub_100237418()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCD438;
  if (!qword_100BCD438)
  {
    v1 = sub_100075EB0(&qword_100BCD1F8);
    sub_10023749C();
    sub_10003D2DC(&qword_100BCD450, &qword_100BCD458);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCD438);
  }
  return result;
}

unint64_t sub_10023749C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCD440;
  if (!qword_100BCD440)
  {
    v1 = sub_100075EB0(&qword_100BCD208);
    sub_10003D2DC(&qword_100BCD448, &qword_100BCD200);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCD440);
  }
  return result;
}

uint64_t sub_100237520(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AAD450, 1);
}

unint64_t sub_100237538()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCD488;
  if (!qword_100BCD488)
  {
    v1 = sub_100075EB0(&qword_100BCD480);
    sub_10003D2DC(&qword_100BCD490, &qword_100BCD498);
    sub_10003D2DC(&qword_100BC4E20, &qword_100BC4E28);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCD488);
  }
  return result;
}

uint64_t sub_1002375D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_BYTE *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 136);
  v6 = *(_QWORD *)(a1 + 144);
  sub_100237670(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 96));
  sub_1000D31B4(v2, v3, v4);
  swift_release(v5);
  swift_bridgeObjectRelease();
  swift_release(v6);
  return a1;
}

void sub_100237670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if ((a10 & 1) != 0)
  {
    swift_release(a3);
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    swift_release(a1);
    swift_release(a2);
    swift_release(a3);
    swift_release(a4);
  }
}

double sub_1002376D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  double result;

  if ((a10 & 1) != 0)
  {
    swift_retain(a3);
    swift_bridgeObjectRetain(a4);
  }
  else
  {
    swift_retain(a4);
    swift_retain(a1);
    swift_retain(a2);
    *(_QWORD *)&result = swift_retain(a3).n128_u64[0];
  }
  return result;
}

unint64_t sub_100237748()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCD4B8;
  if (!qword_100BCD4B8)
  {
    v1 = sub_100075EB0(&qword_100BCD4A8);
    sub_1002377CC();
    sub_10003D2DC(&qword_100BCD4D0, &qword_100BCD4D8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCD4B8);
  }
  return result;
}

unint64_t sub_1002377CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCD4C0;
  if (!qword_100BCD4C0)
  {
    v1 = sub_100075EB0(&qword_100BCD4C8);
    sub_10003D2DC((unint64_t *)&qword_100BC4B98, (uint64_t *)&unk_100C09EE0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCD4C0);
  }
  return result;
}

unint64_t sub_10023785C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100BCD4F0;
  if (!qword_100BCD4F0)
  {
    v1 = sub_100075EB0(&qword_100BCD478);
    v2[0] = sub_100075EB0(&qword_100BCD480);
    v2[1] = sub_100237538();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10000F1C8((unint64_t *)&qword_100BC4E48, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCD4F0);
  }
  return result;
}

uint64_t LocationSearchEntityFromStringResolver.resolve(from:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3[20] = a2;
  v3[21] = a3;
  v3[19] = a1;
  v4 = sub_1000BA294(&qword_100BCAE48);
  v3[22] = sub_1000BA400(*(_QWORD *)(v4 - 8));
  v5 = sub_1000BA294(&qword_100BCAE50);
  v3[23] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[24] = v6;
  v3[25] = sub_1000BA400(v6);
  v7 = sub_1000BA294(&qword_100BCAE58);
  v3[26] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[27] = v8;
  v3[28] = sub_1000BA400(v8);
  return swift_task_switch(sub_10023799C, 0, 0);
}

uint64_t sub_10023799C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  double v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = sub_1000BA294(&qword_100BCAE60);
  Regex.init(_regexString:version:)(0xD00000000000001ALL, 0x80000001009F5050, 1, v4);
  Regex.wholeMatch(in:)(v3, v2, v1);
  v6 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 184);
  if (_s7Weather24LocationCompositionStateOwet_0(v6, 1, v5) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 208));
    sub_1001FCA08(v6);
LABEL_3:
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    goto LABEL_4;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 + 192) + 32))(*(_QWORD *)(v0 + 200), v6, v5);
  KeyPath = swift_getKeyPath(&unk_10098A060);
  sub_1000C2538(KeyPath);
  swift_release(KeyPath);
  v38 = Double.init(_:)(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
  v18 = v17;
  v19 = swift_getKeyPath(&unk_10098A080);
  sub_1000C2538(v19);
  swift_release(v19);
  v20 = COERCE_DOUBLE(Double.init(_:)(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112)));
  v22 = v21;
  v23 = swift_getKeyPath(&unk_10098A0A0);
  sub_1000C2538(v23);
  v24 = swift_release(v23);
  if (*(_QWORD *)(v0 + 144))
  {
    v25 = static String._fromSubstring(_:)(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), v24);
    v27 = v26;
    swift_bridgeObjectRelease();
  }
  else
  {
    v25 = 0;
    v27 = 0;
  }
  v29 = *(_QWORD *)(v0 + 216);
  v28 = *(_QWORD *)(v0 + 224);
  v30 = *(_QWORD *)(v0 + 208);
  if (((v18 | v22) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    sub_1000BBD88();
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
    goto LABEL_3;
  }
  v37 = *(_QWORD *)(v0 + 208);
  v31 = *(_QWORD *)(v0 + 168);
  v36 = *(_QWORD *)(v0 + 160);
  v32 = *(double *)&v38;
  sub_100237CC8();
  v39 = v28;
  v33 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", v32, v20);
  swift_bridgeObjectRetain(v27);
  v34 = sub_1001FCA48(v33, v25, v27, 0);
  if (!v27)
  {
    v25 = 11565;
    v27 = 0xE200000000000000;
  }
  swift_bridgeObjectRetain(v31);
  LocationSearchEntity.init(id:name:placemark:isLocal:)(v36, v31, v25, v27, v34, 0, v0 + 16);
  v7 = *(_QWORD *)(v0 + 16);
  v8 = *(_QWORD *)(v0 + 24);
  v9 = *(_QWORD *)(v0 + 32);
  v10 = *(_QWORD *)(v0 + 40);
  v35 = v29;
  v11 = *(_BYTE *)(v0 + 48);
  sub_1000BBD88();
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v39, v37);
LABEL_4:
  v12 = *(_QWORD *)(v0 + 200);
  v13 = *(_QWORD *)(v0 + 176);
  v14 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  *(_QWORD *)v14 = v7;
  *(_QWORD *)(v14 + 8) = v8;
  *(_QWORD *)(v14 + 16) = v9;
  *(_QWORD *)(v14 + 24) = v10;
  *(_BYTE *)(v14 + 32) = v11;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100237CC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCAE68;
  if (!qword_100BCAE68)
  {
    v1 = objc_opt_self(CLPlacemark);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100BCAE68);
  }
  return result;
}

Swift::Int LocationSearchEntityFromStringResolver.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100237D38(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v2 + 56) = a1;
  v3 = *a2;
  v4 = a2[1];
  v5 = (_QWORD *)swift_task_alloc(dword_100BCD4FC);
  *(_QWORD *)(v2 + 64) = v5;
  *v5 = v2;
  v5[1] = sub_100237DA0;
  return LocationSearchEntityFromStringResolver.resolve(from:context:)(v2 + 16, v3, v4);
}

uint64_t sub_100237DA0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 64);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    sub_100237EF8(v2 + 16, *(_QWORD *)(v2 + 56));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

Swift::Int sub_100237DF8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  return Hasher._finalize()();
}

unint64_t sub_100237E2C()
{
  unint64_t result;

  result = qword_100BCD500;
  if (!qword_100BCD500)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LocationSearchEntityFromStringResolver, &type metadata for LocationSearchEntityFromStringResolver);
    atomic_store(result, (unint64_t *)&qword_100BCD500);
  }
  return result;
}

unint64_t sub_100237E6C()
{
  unint64_t result;

  result = qword_100BCD508;
  if (!qword_100BCD508)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100BCD508);
  }
  return result;
}

unint64_t sub_100237EAC()
{
  unint64_t result;

  result = qword_100BCD518;
  if (!qword_100BCD518)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LocationSearchEntityFromStringResolver, &type metadata for LocationSearchEntityFromStringResolver);
    atomic_store(result, (unint64_t *)&qword_100BCD518);
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationSearchEntityFromStringResolver()
{
  return &type metadata for LocationSearchEntityFromStringResolver;
}

uint64_t sub_100237EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BCD520);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

Swift::Void __swiftcall WeatherConditionBackgroundManager.windowDidLoseFocus()()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  os_log_type_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _WORD *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;

  if ((WeatherConditionBackgroundManager.isVfxSceneLoaded.getter() & 1) != 0)
  {
    if (qword_100BC2438 != -1)
      swift_once(&qword_100BC2438, sub_100159690);
    v0 = sub_100098720();
    v1 = sub_1000C34E4(v0, (uint64_t)qword_100CAF0A0);
    v2 = static os_log_type_t.default.getter(v1);
    if (os_log_type_enabled(v1, v2))
    {
      v3 = (uint8_t *)sub_10009D340();
      *(_WORD *)v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "Window did lose focus. VFXScene is loaded and will be paused.", v3, 2u);
      sub_1000986F0((uint64_t)v3);
    }

    WeatherConditionPlaybackCoordinatorType.pause(_:)(0);
  }
  else
  {
    if (qword_100BC2438 != -1)
      swift_once(&qword_100BC2438, sub_100159690);
    v4 = sub_100098720();
    v22 = sub_1000C34E4(v4, (uint64_t)qword_100CAF0A0);
    v5 = static os_log_type_t.default.getter(v22);
    if (sub_1000C455C(v5, v6, v7, v8, v9, v10, v11, v12, v20, v22))
    {
      v13 = (_WORD *)sub_10009D340();
      *v13 = 0;
      sub_1000C2540((void *)&_mh_execute_header, v14, v15, "Window did lose focus. VFXScene is not loaded yet.", v16, v17, v18, v19, v21, v23);
      sub_1000986F0((uint64_t)v13);
    }

  }
}

uint64_t sub_1002380A4(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  double v24;
  __int128 v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v31;
  __int128 v32[4];
  __int128 v33[4];
  _OWORD v34[2];
  _OWORD v35[2];
  _OWORD v36[2];
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  _BYTE v40[25];
  char v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[25];
  char v45;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *((_QWORD *)a2 + 3);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = *(_QWORD *)a1;
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(_QWORD *)a2;
    v10 = *((_QWORD *)a2 + 1);
    v11 = *((_QWORD *)a2 + 2);
    v12 = sub_1000C456C();
    sub_10010F980(v12, v13, v14, v15);
    v31 = v6;
    v16 = sub_10010F980(v6, v7, v8, v4);
    LOBYTE(v42) = v11 & 1;
    LOBYTE(v6) = static Text.== infix(_:_:)(v6, v7, v8 & 1, v4, v9, v10, v11 & 1, v5, v16);
    v17 = sub_1000C456C();
    sub_10010F9B0(v17, v18, v19, v20);
    sub_10010F9B0(v31, v7, v8, v4);
    if ((v6 & 1) == 0)
      return 0;
LABEL_6:
    sub_100238680((__int128 *)(a1 + 32), v33);
    sub_100238680(a2 + 2, v32);
    sub_100238680(v33, &v38);
    if ((v41 & 1) != 0)
    {
      v34[0] = v38;
      v34[1] = v39;
      v35[0] = *(_OWORD *)v40;
      *(_OWORD *)((char *)v35 + 9) = *(_OWORD *)&v40[9];
      sub_100238680(v32, &v42);
      if ((v45 & 1) == 0)
        return 0;
      v36[0] = v42;
      v36[1] = v43;
      v37[0] = *(_OWORD *)v44;
      *(_OWORD *)((char *)v37 + 9) = *(_OWORD *)&v44[9];
      sub_100238774((uint64_t)v33, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1002386A0);
      sub_100238774((uint64_t)v32, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1002386A0);
      v21 = sub_10068959C((uint64_t)v34, (uint64_t)v36);
      sub_100238774((uint64_t)v32, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1002387C0);
      sub_100238774((uint64_t)v33, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1002387C0);
      if (!v21)
        return 0;
    }
    else
    {
      v22 = v38;
      v23 = *((_QWORD *)&v38 + 1);
      v25 = v39;
      v24 = *(double *)v40;
      sub_100238680(v32, &v42);
      if ((v45 & 1) != 0)
        return 0;
      if (v22 != v42)
        return 0;
      v26 = *((double *)&v43 + 1);
      v27 = *(double *)v44;
      v28 = v43;
      if (!sub_100948898(v23, *((uint64_t *)&v42 + 1)) || (sub_10010CD10(v25, v28) & 1) == 0)
        return 0;
      if (*((double *)&v25 + 1) != v26 || v24 != v27)
        return 0;
    }
    return 1;
  }
  if (!v5)
    goto LABEL_6;
  return 0;
}

BOOL sub_1002382D0(__int128 *a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  double v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  char v64;
  __int128 v65;
  uint64_t v66;
  double v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  _QWORD v72[6];
  char v73;
  _QWORD v74[6];
  char v75;

  sub_100238680(a1, &v65);
  if ((v71 & 1) == 0)
  {
    v32 = v65;
    v34 = *((_QWORD *)&v65 + 1);
    v33 = v66;
    v35 = v67;
    v36 = v68;
    sub_100238680(a2, &v57);
    if ((v64 & 1) == 0 && v32 == v57)
    {
      v37 = v59;
      v38 = v60;
      v39 = v58;
      if (sub_100948898(v34, *((uint64_t *)&v57 + 1)) && (sub_10010CD10(v33, v39) & 1) != 0 && v35 == v37 && v36 == v38)
        return 1;
    }
    return 0;
  }
  v4 = v65;
  v5 = v66;
  v6 = *(_QWORD *)&v67;
  v8 = *(_QWORD *)&v68;
  v7 = v69;
  v9 = v70;
  sub_100238680(a2, &v57);
  if (v64 != 1)
    return 0;
  v54 = v7;
  v52 = v6;
  v53 = v8;
  v10 = v57;
  v11 = *(_QWORD *)&v59;
  v55 = v58;
  v12 = v61;
  v13 = v62;
  v14 = v63;
  sub_1000C2554((uint64_t)a1);
  sub_1000C2554((uint64_t)a2);
  if ((sub_10094871C(v4, v10) & 1) == 0)
  {
LABEL_19:
    sub_1000C3648((uint64_t)a2);
    sub_1000C3648((uint64_t)a1);
    return 0;
  }
  HIDWORD(v51) = v14;
  if (v5)
  {
    sub_1000BA634();
    if (v16)
    {
      v72[0] = sub_1002386A0;
      v72[1] = v5;
      v72[2] = v52;
      v72[3] = v53;
      v72[4] = v54;
      v72[5] = v9;
      v73 = v15 & 1;
      v74[0] = *((_QWORD *)&v10 + 1);
      v74[1] = v13;
      v74[2] = v11;
      v74[3] = v12;
      v74[4] = v12;
      v74[5] = v14;
      v75 = v14 & 1;
      sub_100238738((uint64_t)sub_1002386A0, v5, v52, v53, v54, v9);
      v17 = sub_1000BBD98();
      sub_100238738(v17, v18, v19, v20, v21, v14);
      v22 = sub_100689764((uint64_t)v72, (uint64_t)v74);
      v23 = sub_1000BBD98();
      sub_100238858(v23, v24, v25, v26, v27, v28);
      sub_1000DCC04((uint64_t)sub_1002386A0, v5, v52, v53, v54, v29, v30, v31, v46, v47, v49, v11, v12, v51, *((uint64_t *)&v10 + 1), v52, v53, v54, *((uint64_t *)&v4 + 1),
        v55,
        v9);
      sub_1000C2554((uint64_t)a2);
      sub_1000C2554((uint64_t)a1);
      return (v22 & 1) != 0;
    }
    goto LABEL_18;
  }
  sub_1000BA634();
  if (v41)
  {
LABEL_18:
    sub_100238738((uint64_t)sub_1002386A0, v5, v52, v53, v54, v9);
    sub_100238738(*((uint64_t *)&v10 + 1), v13, v11, v12, v12, v14);
    sub_1000DCC04(*((uint64_t *)&v4 + 1), v5, v52, v53, v54, v42, v43, v44, v46, v12, v14, v11, v12, v51, *((uint64_t *)&v10 + 1), v52, v53, v54, *((uint64_t *)&v4 + 1),
      v55,
      v9);
    sub_100238858(v10, v56, v11, v48, v12, v50);
    goto LABEL_19;
  }
  sub_1000C3648((uint64_t)a2);
  sub_1000C3648((uint64_t)a1);
  return 1;
}

uint64_t sub_1002385E4(void *__src, const void *a2)
{
  _BYTE v4[96];
  __int128 __dst[6];

  memcpy(v4, __src, 0x5AuLL);
  memcpy(__dst, a2, 0x5AuLL);
  return sub_1002380A4((uint64_t)v4, __dst) & 1;
}

BOOL sub_100238638(__int128 *a1, __int128 *a2)
{
  __int128 v4[4];
  __int128 v5[4];

  sub_100238680(a1, v4);
  sub_100238680(a2, v5);
  return sub_1002382D0(v4, v5);
}

_OWORD *sub_100238680(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  *(_OWORD *)((char *)a2 + 42) = *(__int128 *)((char *)a1 + 42);
  a2[1] = v3;
  a2[2] = v4;
  *a2 = v2;
  return a2;
}

double sub_1002386A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  double result;

  if ((a9 & 1) != 0)
  {
    swift_bridgeObjectRetain(a1);
    return sub_100238738(a2, a3, a4, a5, a6, a7);
  }
  else
  {
    swift_bridgeObjectRetain(a2);
    *(_QWORD *)&result = swift_bridgeObjectRetain(a3).n128_u64[0];
  }
  return result;
}

double sub_100238738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    *(_QWORD *)&result = swift_retain(a6).n128_u64[0];
  }
  return result;
}

uint64_t sub_100238774(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 57);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), v4);
  return a1;
}

double sub_1002387C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  double result;

  if ((a9 & 1) != 0)
  {
    swift_bridgeObjectRelease(a1);
    sub_100238858(a2, a3, a4, a5, a6, a7);
  }
  else
  {
    swift_bridgeObjectRelease(a2);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a3).n128_u64[0];
  }
  return result;
}

uint64_t sub_100238858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    return swift_release(a6);
  }
  return result;
}

double destroy for ComparisonChartViewModel(uint64_t a1)
{
  return sub_1002387C0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(_BYTE *)(a1 + 57));
}

uint64_t initializeWithCopy for ComparisonChartViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_BYTE *)(a2 + 57);
  v11 = *(unsigned __int8 *)(a2 + 56);
  sub_1002386A0(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v11, v10);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 57) = v10;
  return a1;
}

uint64_t assignWithCopy for ComparisonChartViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_BYTE *)(a2 + 57);
  v11 = *(unsigned __int8 *)(a2 + 56);
  sub_1002386A0(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v11, v10);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_BYTE *)(a1 + 57);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  v20 = *(unsigned __int8 *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 57) = v10;
  sub_1002387C0(v12, v13, v14, v15, v16, v17, v18, v20, v19);
  return a1;
}

__n128 initializeWithTake for ComparisonChartViewModel(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ComparisonChartViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a2 + 48);
  v4 = *(_BYTE *)(a2 + 56);
  v5 = *(_BYTE *)(a2 + 57);
  v6 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_BYTE *)(a1 + 57);
  v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v14;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v3;
  v15 = *(unsigned __int8 *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v4;
  *(_BYTE *)(a1 + 57) = v5;
  sub_1002387C0(v6, v8, v7, v9, v10, v11, v12, v15, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for ComparisonChartViewModel(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 58))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 57);
      if (v3 <= 1)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ComparisonChartViewModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 58) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 58) = 0;
    if (a2)
      *(_BYTE *)(result + 57) = -(char)a2;
  }
  return result;
}

uint64_t sub_100238B54(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 57);
}

uint64_t sub_100238B5C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 57) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ComparisonChartViewModel()
{
  return &type metadata for ComparisonChartViewModel;
}

double destroy for ComparisonDetailComponentViewModel(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
  {
    sub_1000D31B4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  return sub_1002387C0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(unsigned __int8 *)(a1 + 88), *(_BYTE *)(a1 + 89));
}

uint64_t initializeWithCopy for ComparisonDetailComponentViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_BYTE *)(a2 + 16);
    sub_1000D55D4(*(_QWORD *)a2, v6, v7);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v4;
    swift_bridgeObjectRetain(v4);
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
  }
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a2 + 80);
  v16 = *(_BYTE *)(a2 + 89);
  v17 = *(unsigned __int8 *)(a2 + 88);
  sub_1002386A0(v9, v10, v11, v12, v13, v14, v15, v17, v16);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 64) = v13;
  *(_QWORD *)(a1 + 72) = v14;
  *(_QWORD *)(a1 + 80) = v15;
  *(_BYTE *)(a1 + 88) = v17;
  *(_BYTE *)(a1 + 89) = v16;
  return a1;
}

uint64_t assignWithCopy for ComparisonDetailComponentViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;

  v4 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      v5 = *(_QWORD *)a2;
      v6 = *(_QWORD *)(a2 + 8);
      v7 = *(_BYTE *)(a2 + 16);
      sub_1000D55D4(*(_QWORD *)a2, v6, v7);
      v8 = *(_QWORD *)a1;
      v9 = *(_QWORD *)(a1 + 8);
      v10 = *(_BYTE *)(a1 + 16);
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = v6;
      *(_BYTE *)(a1 + 16) = v7;
      sub_1000D31B4(v8, v9, v10);
      v11 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v11;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100176E20(a1);
      v16 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v16;
    }
  }
  else if (v4)
  {
    v12 = *(_QWORD *)a2;
    v13 = *(_QWORD *)(a2 + 8);
    v14 = *(_BYTE *)(a2 + 16);
    sub_1000D55D4(*(_QWORD *)a2, v13, v14);
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v13;
    *(_BYTE *)(a1 + 16) = v14;
    v15 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v15;
    swift_bridgeObjectRetain(v15);
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v17;
  }
  v18 = *(_QWORD *)(a2 + 32);
  v19 = *(_QWORD *)(a2 + 40);
  v20 = *(_QWORD *)(a2 + 48);
  v21 = *(_QWORD *)(a2 + 56);
  v22 = *(_QWORD *)(a2 + 64);
  v23 = *(_QWORD *)(a2 + 72);
  v24 = *(_QWORD *)(a2 + 80);
  v25 = *(_BYTE *)(a2 + 89);
  v26 = *(unsigned __int8 *)(a2 + 88);
  sub_1002386A0(v18, v19, v20, v21, v22, v23, v24, v26, v25);
  v27 = *(_QWORD *)(a1 + 32);
  v28 = *(_QWORD *)(a1 + 40);
  v29 = *(_QWORD *)(a1 + 48);
  v30 = *(_QWORD *)(a1 + 56);
  v31 = *(_QWORD *)(a1 + 64);
  v32 = *(_QWORD *)(a1 + 72);
  v33 = *(_QWORD *)(a1 + 80);
  v34 = *(_BYTE *)(a1 + 89);
  *(_QWORD *)(a1 + 32) = v18;
  *(_QWORD *)(a1 + 40) = v19;
  *(_QWORD *)(a1 + 48) = v20;
  *(_QWORD *)(a1 + 56) = v21;
  *(_QWORD *)(a1 + 64) = v22;
  *(_QWORD *)(a1 + 72) = v23;
  *(_QWORD *)(a1 + 80) = v24;
  v35 = *(unsigned __int8 *)(a1 + 88);
  *(_BYTE *)(a1 + 88) = v26;
  *(_BYTE *)(a1 + 89) = v25;
  sub_1002387C0(v27, v28, v29, v30, v31, v32, v33, v35, v34);
  return a1;
}

void *initializeWithTake for ComparisonDetailComponentViewModel(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x5AuLL);
}

uint64_t assignWithTake for ComparisonDetailComponentViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  uint64_t v22;

  if (!*(_QWORD *)(a1 + 24))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 24);
  if (!v4)
  {
    sub_100176E20(a1);
LABEL_5:
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    goto LABEL_6;
  }
  v5 = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1000D31B4(v6, v7, v8);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
LABEL_6:
  v10 = *(_QWORD *)(a2 + 80);
  v11 = *(_BYTE *)(a2 + 88);
  v12 = *(_BYTE *)(a2 + 89);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 56);
  v17 = *(_QWORD *)(a1 + 64);
  v18 = *(_QWORD *)(a1 + 72);
  v19 = *(_QWORD *)(a1 + 80);
  v20 = *(_BYTE *)(a1 + 89);
  v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v21;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = v10;
  v22 = *(unsigned __int8 *)(a1 + 88);
  *(_BYTE *)(a1 + 88) = v11;
  *(_BYTE *)(a1 + 89) = v12;
  sub_1002387C0(v13, v14, v15, v16, v17, v18, v19, v22, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for ComparisonDetailComponentViewModel(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 90))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 24);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ComparisonDetailComponentViewModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 88) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 90) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 90) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ComparisonDetailComponentViewModel()
{
  return &type metadata for ComparisonDetailComponentViewModel;
}

uint64_t sub_100238FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = type metadata accessor for Location.Identifier(0);
  v22 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v21 = v3;
    v10 = 0;
    v11 = *(_QWORD *)(type metadata accessor for LocationModel(0) - 8);
    v12 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v13 = *(_QWORD *)(v11 + 72);
    while (1)
    {
      v14 = LocationModel.identifier.getter();
      v15 = Location.Identifier.id.getter(v14);
      v17 = v16;
      (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v23);
      if (v15 == a2 && v17 == a3)
      {
        swift_bridgeObjectRelease_n(a3, 2);
        return v10;
      }
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, a2, a3, 0);
      swift_bridgeObjectRelease(v17);
      if ((v19 & 1) != 0)
        break;
      ++v10;
      v12 += v13;
      if (v9 == v10)
        goto LABEL_9;
    }
    swift_bridgeObjectRelease(a3);
  }
  else
  {
LABEL_9:
    swift_bridgeObjectRelease(a3);
    return 0;
  }
  return v10;
}

void sub_100239148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (!a3)
  {
    v3 = 1;
    goto LABEL_4;
  }
  if (a3 == 1)
  {
    v3 = -1;
LABEL_4:
    sub_100239168(a1, v3);
    return;
  }
  sub_100239D4C(a1, a2, a3);
}

void sub_100239168(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t active;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132[32];

  v130 = a2;
  v3 = sub_1000BA294(&qword_100BC5F60);
  __chkstk_darwin(v3);
  v129 = (uint64_t)&v103 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000BA294(&qword_100BC5F88);
  __chkstk_darwin(v5);
  v128 = (uint64_t)&v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BC5F90);
  __chkstk_darwin(v7);
  v127 = (uint64_t)&v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BC5F98);
  __chkstk_darwin(v9);
  v126 = (uint64_t)&v103 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000BA294(&qword_100BC5FA0);
  __chkstk_darwin(v11);
  v125 = (uint64_t)&v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000BA294(&qword_100BC5FA8);
  __chkstk_darwin(v13);
  v124 = (uint64_t)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000BA294(&qword_100BC5FB0);
  __chkstk_darwin(v15);
  v123 = (uint64_t)&v103 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000BA294(&qword_100BC5F68);
  __chkstk_darwin(v17);
  v122 = (uint64_t)&v103 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000BA294(&qword_100BC5F70);
  __chkstk_darwin(v19);
  v121 = (uint64_t)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000BA294(&qword_100BC5F78);
  __chkstk_darwin(v21);
  v119 = (uint64_t)&v103 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_1000BA294(&qword_100BC5F80);
  __chkstk_darwin(v23);
  v118 = (uint64_t *)((char *)&v103 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = sub_1000BA294(&qword_100BC5F40);
  __chkstk_darwin(v25);
  v116 = (uint64_t)&v103 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for LocationModel(0);
  v27 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v110 = (char *)&v103 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_1000BA294((uint64_t *)&unk_100C0D170);
  __chkstk_darwin(v29);
  v109 = (uint64_t)&v103 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for LocationsState(0);
  __chkstk_darwin(v31);
  v107 = (uint64_t)&v103 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for CurrentLocation(0);
  __chkstk_darwin(v108);
  v106 = (uint64_t)&v103 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  active = type metadata accessor for LocationViewerActiveLocationState(0);
  __chkstk_darwin(active);
  v131 = (uint64_t)&v103 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v37 = (char *)&v103 - v36;
  v38 = type metadata accessor for ViewState.SecondaryViewState(0);
  __chkstk_darwin(v38);
  v40 = (uint64_t *)((char *)&v103 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41 = type metadata accessor for ViewState(0);
  __chkstk_darwin(v41);
  v115 = (uint64_t)&v103 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v120 = (char *)&v103 - v44;
  __chkstk_darwin(v45);
  v47 = (char *)&v103 - v46;
  v112 = a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view;
  sub_100080C0C(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, (uint64_t)&v103 - v46, type metadata accessor for ViewState);
  v117 = v41;
  sub_100080C0C((uint64_t)&v47[*(int *)(v41 + 20)], (uint64_t)v40, type metadata accessor for ViewState.SecondaryViewState);
  sub_1000215BC((uint64_t)v47, type metadata accessor for ViewState);
  v114 = v38;
  if (swift_getEnumCaseMultiPayload(v40) == 1)
  {
    sub_1000215BC((uint64_t)v40, type metadata accessor for ViewState.SecondaryViewState);
LABEL_18:
    swift_retain();
    return;
  }
  v48 = *v40;
  v49 = a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations;
  if (!*(_QWORD *)(*(_QWORD *)(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations + *(int *)(v31 + 36)) + 16))
  {
    swift_release(*v40);
    goto LABEL_18;
  }
  v105 = a1;
  sub_100080C0C(v48 + OBJC_IVAR____TtCV7Weather23LocationViewerViewState8_Storage_activeLocationState, (uint64_t)v37, type metadata accessor for LocationViewerActiveLocationState);
  sub_10008B21C();
  v51 = v50;
  v53 = v52;
  sub_1000215BC((uint64_t)v37, type metadata accessor for LocationViewerActiveLocationState);
  v104 = v31;
  v54 = *(_QWORD *)(v49 + *(int *)(v31 + 24));
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRetain(v54);
  v56 = sub_100238FC8(v55, v51, v53);
  LOBYTE(v51) = v57;
  v58 = swift_bridgeObjectRelease();
  if ((v51 & 1) != 0)
    v59 = -1;
  else
    v59 = v56;
  v60 = v59 + v130;
  if (__OFADD__(v59, v130))
  {
    __break(1u);
  }
  else
  {
    if (v60 < 0)
    {
      v61 = v105 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment;
      swift_beginAccess(v105 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment, v132, 0, 0);
      if (*(unsigned __int8 *)(v61 + 1) - 1 <= 1)
      {
        swift_bridgeObjectRelease();
        v62 = v107;
        sub_100080C0C(v49, v107, type metadata accessor for LocationsState);
        v63 = v109;
        sub_10009C514(v62, v109);
        sub_1000215BC(v62, type metadata accessor for LocationsState);
        if (_s7Weather24LocationCompositionStateOwet_0(v63, 1, v108) == 1)
        {
          sub_100021A14(v63, (uint64_t *)&unk_100C0D170);
          v64 = type metadata accessor for Location.Identifier(0);
          v65 = v131;
          v66 = v131;
          v67 = 1;
        }
        else
        {
          v101 = v106;
          sub_10007802C(v63, v106, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
          v65 = v131;
          CurrentLocation.identifier.getter(v102);
          sub_1000215BC(v101, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
          v64 = type metadata accessor for Location.Identifier(0);
          v66 = v65;
          v67 = 0;
        }
        _s7Weather24LocationCompositionStateOwst_0(v66, v67, 1, v64);
        goto LABEL_16;
      }
    }
    v68 = *(_QWORD *)(v54 + 16);
    v69 = v68 - 1;
    if (v60 < (uint64_t)(v68 - 1))
      v69 = v60;
    v70 = v69 & ~(v69 >> 63);
    if (v70 < v68)
    {
      v71 = v110;
      v72 = v111;
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v27 + 16))(v110, v54+ ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(_QWORD *)(v27 + 72) * v70, v111, v58);
      swift_bridgeObjectRelease();
      LocationModel.identifier.getter(v73);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v71, v72);
      v74 = type metadata accessor for Location.Identifier(0);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v37, 0, 1, v74);
      v65 = v131;
      sub_10007802C((uint64_t)v37, v131, type metadata accessor for LocationViewerActiveLocationState);
LABEL_16:
      v75 = v116;
      sub_100080C0C(v65, v116, type metadata accessor for LocationViewerActiveLocationState);
      _s7Weather24LocationCompositionStateOwst_0(v75, 0, 1, active);
      sub_100023164(v75, 3, 2, 4, 2, 3, v48);
      v77 = v76;
      sub_100021A14(v75, &qword_100BC5F40);
      v78 = v115;
      sub_100080C0C(v112, v115, type metadata accessor for ViewState);
      v79 = (uint64_t)v118;
      *v118 = v77;
      v130 = v77;
      v80 = v114;
      swift_storeEnumTagMultiPayload(v79, v114, 0);
      _s7Weather24LocationCompositionStateOwst_0(v79, 0, 1, v80);
      v81 = type metadata accessor for SearchViewState(0);
      v82 = v119;
      _s7Weather24LocationCompositionStateOwst_0(v119, 1, 1, v81);
      v83 = type metadata accessor for DisplayMetrics(0);
      v84 = v121;
      _s7Weather24LocationCompositionStateOwst_0(v121, 1, 1, v83);
      v85 = type metadata accessor for WeatherMapPresentationState(0);
      v86 = v122;
      _s7Weather24LocationCompositionStateOwst_0(v122, 1, 1, v85);
      swift_retain();
      v87 = (uint64_t)v120;
      sub_100112494();
      sub_100021A14(v86, &qword_100BC5F68);
      sub_100021A14(v84, &qword_100BC5F70);
      sub_100021A14(v82, &qword_100BC5F78);
      sub_100021A14(v79, &qword_100BC5F80);
      sub_1000215BC(v78, type metadata accessor for ViewState);
      v88 = type metadata accessor for AppConfigurationState(0);
      v89 = v123;
      _s7Weather24LocationCompositionStateOwst_0(v123, 1, 1, v88);
      v90 = type metadata accessor for EnvironmentState(0);
      v91 = v124;
      _s7Weather24LocationCompositionStateOwst_0(v124, 1, 1, v90);
      v92 = v125;
      _s7Weather24LocationCompositionStateOwst_0(v125, 1, 1, v104);
      v93 = type metadata accessor for NotificationsOptInState(0);
      v94 = v48;
      v95 = v126;
      _s7Weather24LocationCompositionStateOwst_0(v126, 1, 1, v93);
      v96 = type metadata accessor for TimeState(0);
      v97 = v127;
      _s7Weather24LocationCompositionStateOwst_0(v127, 1, 1, v96);
      v98 = v128;
      sub_100080C0C(v87, v128, type metadata accessor for ViewState);
      _s7Weather24LocationCompositionStateOwst_0(v98, 0, 1, v117);
      v99 = type metadata accessor for ModalViewState(0);
      v100 = v129;
      _s7Weather24LocationCompositionStateOwst_0(v129, 1, 1, v99);
      sub_1000DEBAC(0, 3, v89, v91, v92, 0, 0, 0, v95, v97, v98, v100, 0, 0, 0, 0, 0, 0, 0, v105);
      swift_release(v130);
      swift_release(v94);
      sub_100021A14(v100, &qword_100BC5F60);
      sub_100021A14(v98, &qword_100BC5F88);
      sub_100021A14(v97, &qword_100BC5F90);
      sub_100021A14(v95, &qword_100BC5F98);
      sub_100021A14(v92, &qword_100BC5FA0);
      sub_100021A14(v91, &qword_100BC5FA8);
      sub_100021A14(v89, &qword_100BC5FB0);
      sub_1000215BC(v87, type metadata accessor for ViewState);
      sub_1000215BC(v131, type metadata accessor for LocationViewerActiveLocationState);
      return;
    }
  }
  __break(1u);
}

uint64_t sub_100239D4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(_QWORD);
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;

  v79 = a2;
  v80 = a3;
  v4 = sub_1000BA294(&qword_100BC5F60);
  __chkstk_darwin(v4);
  v77 = (uint64_t)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100BC5F88);
  __chkstk_darwin(v6);
  v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BC5F90);
  __chkstk_darwin(v9);
  v76 = (uint64_t)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000BA294(&qword_100BC5F98);
  __chkstk_darwin(v11);
  v72 = (uint64_t)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000BA294(&qword_100BC5FA0);
  __chkstk_darwin(v13);
  v78 = (uint64_t)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000BA294(&qword_100BC5FA8);
  __chkstk_darwin(v15);
  v17 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000BA294(&qword_100BC5FB0);
  __chkstk_darwin(v18);
  v82 = (uint64_t)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000BA294(&qword_100BC5F68);
  __chkstk_darwin(v20);
  v22 = (char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_1000BA294(&qword_100BC5F70);
  __chkstk_darwin(v23);
  v74 = (uint64_t)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_1000BA294(&qword_100BC5F78);
  __chkstk_darwin(v25);
  v73 = (uint64_t)&v68 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_1000BA294(&qword_100BC5F80);
  __chkstk_darwin(v27);
  v71 = (uint64_t)&v68 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for ViewState(0);
  __chkstk_darwin(v29);
  v31 = (char *)&v68 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v81 = (char *)&v68 - v33;
  __chkstk_darwin(v34);
  v36 = (uint64_t *)((char *)&v68 - v35);
  v37 = a1;
  v38 = a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view;
  sub_100080C0C(v38, (uint64_t)&v68 - v35, v39);
  v40 = *v36;
  v41 = *(uint64_t *)((char *)v36 + *(int *)(v29 + 36) + 8);
  v75 = v22;
  if (v41 != 1)
  {
    v43 = v40;
    swift_retain();
    goto LABEL_5;
  }
  v42 = (void *)objc_opt_self(UIDevice);
  v68 = v17;
  v43 = v40;
  v44 = objc_msgSend(v42, "currentDevice", swift_retain().n128_f64[0]);
  objc_msgSend(v44, "userInterfaceIdiom");

  v17 = v68;
  if (*((_BYTE *)v36 + *(int *)(v29 + 28)) != 1)
  {
LABEL_5:
    v69 = v29;
    sub_1000215BC((uint64_t)v36, type metadata accessor for ViewState);
    v70 = v43;
    sub_10055E36C(0, 256, 2, 3, 0, 0, v79, v80, 1, 0, 0, 2, 2, v43);
    v80 = v45;
    v46 = (uint64_t)v31;
    sub_100080C0C(v38, (uint64_t)v31, type metadata accessor for ViewState);
    v47 = type metadata accessor for ViewState.SecondaryViewState(0);
    v48 = v71;
    _s7Weather24LocationCompositionStateOwst_0(v71, 1, 1, v47);
    v49 = type metadata accessor for SearchViewState(0);
    v50 = v73;
    _s7Weather24LocationCompositionStateOwst_0(v73, 1, 1, v49);
    v51 = type metadata accessor for DisplayMetrics(0);
    v52 = v74;
    _s7Weather24LocationCompositionStateOwst_0(v74, 1, 1, v51);
    v53 = type metadata accessor for WeatherMapPresentationState(0);
    v54 = (uint64_t)v75;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v75, 1, 1, v53);
    v55 = (uint64_t)v81;
    sub_100112494();
    sub_100021A14(v54, &qword_100BC5F68);
    sub_100021A14(v52, &qword_100BC5F70);
    sub_100021A14(v50, &qword_100BC5F78);
    sub_100021A14(v48, &qword_100BC5F80);
    sub_1000215BC(v46, type metadata accessor for ViewState);
    v56 = type metadata accessor for AppConfigurationState(0);
    v57 = v82;
    _s7Weather24LocationCompositionStateOwst_0(v82, 1, 1, v56);
    v58 = type metadata accessor for EnvironmentState(0);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v17, 1, 1, v58);
    v59 = type metadata accessor for LocationsState(0);
    v60 = v78;
    _s7Weather24LocationCompositionStateOwst_0(v78, 1, 1, v59);
    v61 = type metadata accessor for NotificationsOptInState(0);
    v62 = v72;
    _s7Weather24LocationCompositionStateOwst_0(v72, 1, 1, v61);
    v63 = type metadata accessor for TimeState(0);
    v64 = v76;
    _s7Weather24LocationCompositionStateOwst_0(v76, 1, 1, v63);
    sub_100080C0C(v55, (uint64_t)v8, type metadata accessor for ViewState);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v69);
    v65 = type metadata accessor for ModalViewState(0);
    v66 = v77;
    _s7Weather24LocationCompositionStateOwst_0(v77, 1, 1, v65);
    v37 = sub_1000DEBAC(0, 3, v57, (uint64_t)v17, v60, 0, 0, 0, v62, v64, (uint64_t)v8, v66, 0, 0, 0, 0, 0, 0, 0,
            v37);
    swift_release(v80);
    swift_release(v70);
    sub_100021A14(v66, &qword_100BC5F60);
    sub_100021A14((uint64_t)v8, &qword_100BC5F88);
    sub_100021A14(v64, &qword_100BC5F90);
    sub_100021A14(v62, &qword_100BC5F98);
    sub_100021A14(v60, &qword_100BC5FA0);
    sub_100021A14((uint64_t)v17, &qword_100BC5FA8);
    sub_100021A14(v57, &qword_100BC5FB0);
    sub_1000215BC(v55, type metadata accessor for ViewState);
    return v37;
  }
  swift_release(v40);
  sub_1000215BC((uint64_t)v36, type metadata accessor for ViewState);
  swift_retain();
  return v37;
}

uint64_t sub_10023A49C(uint64_t a1, uint64_t a2)
{
  int *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (int *)type metadata accessor for LocationViewObserverView(0);
  v4 = (uint64_t *)(a2 + v3[5]);
  v5 = *v4;
  v6 = v4[1];
  v7 = *((unsigned __int8 *)v4 + 16);
  v8 = type metadata accessor for LocationViewObserverViewState();
  sub_10000F1C8(&qword_100BCD788, (uint64_t (*)(uint64_t))type metadata accessor for LocationViewObserverViewState);
  v10 = StateObject.wrappedValue.getter(v5, v6, v7, v8, v9);
  sub_100022DA0(0, (void (*)(char *, uint64_t))(a2 + v3[6]), *(_QWORD *)(a2 + v3[7]), *(_QWORD *)(a2 + v3[7] + 8), *(_QWORD *)(a2 + v3[9]));
  return swift_release(v10);
}

uint64_t sub_10023A550(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t active;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  int *v21;
  void (*v22)(char *, uint64_t);
  void (*v23)(char *);
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, uint64_t);

  v3 = type metadata accessor for Location.Identifier(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v40 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100BCD780);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  active = type metadata accessor for ActiveLocationModel(0);
  __chkstk_darwin(active);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = &qword_100BCD680;
  v13 = sub_1000BA294(&qword_100BCD680);
  v14 = __chkstk_darwin(v13);
  v42 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v40 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v40 - v19;
  v21 = (int *)type metadata accessor for LocationViewObserverView(0);
  v22 = (void (*)(char *, uint64_t))(a2 + v21[6]);
  v41 = v4;
  v23 = *(void (**)(char *))(v4 + 16);
  v43 = v22;
  v23(v20);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v20, 0, 1, v3);
  v24 = *(_QWORD *)(a2 + v21[8] + 8);
  swift_retain();
  sub_10006BDA4();
  swift_release(v24);
  sub_100019258((uint64_t)v11, (uint64_t)v18);
  v25 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_10003773C((uint64_t)v20, (uint64_t)v8, &qword_100BCD680);
  sub_10003773C((uint64_t)v18, v25, &qword_100BCD680);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v3) == 1)
  {
    sub_100021A14((uint64_t)v18, &qword_100BCD680);
    sub_100021A14((uint64_t)v20, &qword_100BCD680);
    if (_s7Weather24LocationCompositionStateOwet_0(v25, 1, v3) == 1)
    {
      v26 = -1;
    }
    else
    {
      v12 = &qword_100BCD780;
      v26 = 0;
    }
  }
  else
  {
    v27 = (uint64_t)v42;
    sub_10003773C((uint64_t)v8, (uint64_t)v42, &qword_100BCD680);
    if (_s7Weather24LocationCompositionStateOwet_0(v25, 1, v3) == 1)
    {
      sub_100021A14((uint64_t)v18, &qword_100BCD680);
      sub_100021A14((uint64_t)v20, &qword_100BCD680);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v27, v3);
      v26 = 0;
      v12 = &qword_100BCD780;
    }
    else
    {
      v29 = v40;
      v28 = v41;
      (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(v40, v25, v3);
      sub_10000F1C8((unint64_t *)&qword_100BC3640, (uint64_t (*)(uint64_t))&type metadata accessor for Location.Identifier);
      v26 = dispatch thunk of static Equatable.== infix(_:_:)(v27, v29, v3, v30);
      v31 = *(void (**)(char *, uint64_t))(v28 + 8);
      v31(v29, v3);
      v12 = &qword_100BCD680;
      sub_100021A14((uint64_t)v18, &qword_100BCD680);
      sub_100021A14((uint64_t)v20, &qword_100BCD680);
      v31(v42, v3);
    }
  }
  sub_100021A14((uint64_t)v8, v12);
  v32 = (uint64_t *)(a2 + v21[5]);
  v33 = *v32;
  v34 = v32[1];
  v35 = *((unsigned __int8 *)v32 + 16);
  v36 = type metadata accessor for LocationViewObserverViewState();
  sub_10000F1C8(&qword_100BCD788, (uint64_t (*)(uint64_t))type metadata accessor for LocationViewObserverViewState);
  v38 = StateObject.wrappedValue.getter(v33, v34, v35, v36, v37);
  sub_100022DA0(v26 & 1, v43, *(_QWORD *)(a2 + v21[7]), *(_QWORD *)(a2 + v21[7] + 8), *(_QWORD *)(a2 + v21[9]));
  return swift_release(v38);
}

uint64_t sub_10023A934(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  sub_1000C3650();
  return a3();
}

uint64_t sub_10023A964()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 17, 7);
}

uint64_t sub_10023A974()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

_QWORD *sub_10023A9A0(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  int *v55;
  uint64_t v56;
  char *v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  void (*v99)(char *, char *, uint64_t);
  id v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  void (*v112)(char *, char *, uint64_t, __n128);
  __n128 v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  int *v124;
  int *v125;
  int *v126;
  _QWORD *v127;
  _QWORD *v128;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v13 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_1000BA294(&qword_100C09EB0);
    if (swift_getEnumCaseMultiPayload(a2) == 1)
    {
      v8 = type metadata accessor for ScenePhase(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      *a1 = *a2;
      swift_retain();
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = *(_QWORD *)v16;
    v18 = *((_QWORD *)v16 + 1);
    v19 = v16[16];
    sub_100037094(*(_QWORD *)v16, v18);
    *(_QWORD *)v15 = v17;
    *((_QWORD *)v15 + 1) = v18;
    v15[16] = v19;
    v126 = a3;
    v20 = a3[6];
    v128 = a1;
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = type metadata accessor for Location.Identifier(0);
    v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
    v24(v21, v22, v23);
    v25 = type metadata accessor for LocationViewModel(0);
    v26 = *(int *)(v25 + 20);
    v27 = &v21[v26];
    v28 = &v22[v26];
    v127 = a2;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v22[v26], 1, v23))
    {
      v29 = sub_1000BA294(&qword_100BCD680);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v24(v27, v28, v23);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v27, 0, 1, v23);
    }
    v30 = *(int *)(v25 + 24);
    v31 = &v21[v30];
    v32 = &v22[v30];
    v33 = *(_QWORD *)&v22[v30 + 8];
    *(_QWORD *)v31 = *(_QWORD *)&v22[v30];
    *((_QWORD *)v31 + 1) = v33;
    v34 = *(_QWORD *)&v22[v30 + 16];
    v35 = *(_QWORD *)&v22[v30 + 24];
    v36 = v21;
    v37 = *(_QWORD *)&v22[v30 + 32];
    v38 = *(_QWORD *)&v22[v30 + 40];
    v39 = (int *)v25;
    v40 = v22[v30 + 48];
    swift_bridgeObjectRetain(v33);
    sub_100176D88(v34, v35, v37, v38, v40);
    *((_QWORD *)v31 + 2) = v34;
    *((_QWORD *)v31 + 3) = v35;
    *((_QWORD *)v31 + 4) = v37;
    *((_QWORD *)v31 + 5) = v38;
    v31[48] = v40;
    v123 = *((_QWORD *)v32 + 8);
    *((_QWORD *)v31 + 7) = *((_QWORD *)v32 + 7);
    *((_QWORD *)v31 + 8) = v123;
    v41 = *((_QWORD *)v32 + 10);
    *((_QWORD *)v31 + 9) = *((_QWORD *)v32 + 9);
    *((_QWORD *)v31 + 10) = v41;
    v42 = *((_QWORD *)v32 + 12);
    *((_QWORD *)v31 + 11) = *((_QWORD *)v32 + 11);
    *((_QWORD *)v31 + 12) = v42;
    v121 = *((_QWORD *)v32 + 14);
    *((_QWORD *)v31 + 13) = *((_QWORD *)v32 + 13);
    *((_QWORD *)v31 + 14) = v121;
    v43 = *((_QWORD *)v32 + 16);
    *((_QWORD *)v31 + 15) = *((_QWORD *)v32 + 15);
    *((_QWORD *)v31 + 16) = v43;
    v31[136] = v32[136];
    *(_WORD *)(v31 + 137) = *(_WORD *)(v32 + 137);
    v44 = *((_QWORD *)v32 + 19);
    *((_QWORD *)v31 + 18) = *((_QWORD *)v32 + 18);
    *((_QWORD *)v31 + 19) = v44;
    v31[160] = v32[160];
    v31[161] = v32[161];
    v45 = v39[7];
    v46 = *(_QWORD *)&v22[v45];
    *(_QWORD *)&v36[v45] = v46;
    *(_QWORD *)&v36[v39[8]] = *(_QWORD *)&v22[v39[8]];
    v125 = v39;
    v47 = v39[9];
    v48 = v36;
    v49 = &v36[v47];
    v50 = v22;
    v51 = &v22[v47];
    v52 = type metadata accessor for LocationFooterViewModel(0);
    swift_bridgeObjectRetain(v123);
    swift_bridgeObjectRetain(v41);
    v53 = v42;
    v54 = v51;
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRetain(v121);
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v44);
    v55 = (int *)v52;
    swift_bridgeObjectRetain(v46);
    swift_retain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v51, 1, v52))
    {
      v56 = sub_1000BA294(&qword_100BCD690);
      memcpy(v49, v51, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
      v57 = v48;
      v58 = v125;
    }
    else
    {
      *v49 = *v51;
      *(_WORD *)(v49 + 1) = *(_WORD *)(v51 + 1);
      v59 = *((_QWORD *)v51 + 2);
      *((_QWORD *)v49 + 1) = *((_QWORD *)v51 + 1);
      *((_QWORD *)v49 + 2) = v59;
      v60 = v55[8];
      v61 = &v49[v60];
      v62 = &v51[v60];
      v63 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain(v59);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v62, 1, v63))
      {
        v64 = sub_1000BA294(&qword_100BD4280);
        memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v61, v62, v63);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v61, 0, 1, v63);
      }
      v122 = v54;
      v124 = v55;
      v65 = v55[9];
      v66 = &v49[v65];
      v67 = &v54[v65];
      *v66 = v54[v65];
      v68 = *(_QWORD *)&v54[v65 + 8];
      *((_QWORD *)v66 + 1) = v68;
      v69 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
      v70 = v69[6];
      v71 = &v66[v70];
      v72 = &v67[v70];
      swift_bridgeObjectRetain(v68);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v72, 1, v63))
      {
        v73 = sub_1000BA294(&qword_100BD4280);
        memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v71, v72, v63);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v71, 0, 1, v63);
      }
      v74 = v69[7];
      v75 = &v66[v74];
      v76 = &v67[v74];
      v77 = *((_QWORD *)v76 + 1);
      *(_QWORD *)v75 = *(_QWORD *)v76;
      *((_QWORD *)v75 + 1) = v77;
      *(_QWORD *)&v66[v69[8]] = *(_QWORD *)&v67[v69[8]];
      v78 = (uint64_t)v49;
      v49[v124[10]] = v122[v124[10]];
      v79 = v124[11];
      v80 = &v49[v79];
      v81 = &v122[v79];
      v82 = type metadata accessor for LocationOfInterest(0);
      swift_bridgeObjectRetain(v77);
      swift_retain();
      v57 = v48;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v81, 1, v82))
      {
        v83 = sub_1000BA294(&qword_100BC3118);
        memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 16))(v80, v81, v82);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v80, 0, 1, v82);
      }
      *(_BYTE *)(v78 + v124[12]) = v122[v124[12]];
      *(_BYTE *)(v78 + v124[13]) = v122[v124[13]];
      v84 = v124[14];
      v85 = (char *)(v78 + v84);
      v86 = &v122[v84];
      v87 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v86, 1, (uint64_t)v87))
      {
        v88 = sub_1000BA294(&qword_100BCD688);
        memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
      }
      else
      {
        *v85 = *v86;
        v89 = v87[5];
        v90 = &v85[v89];
        v91 = &v86[v89];
        v92 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v90, v91, v92);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 16))(&v85[v87[6]], &v86[v87[6]], v82);
        v85[v87[7]] = v86[v87[7]];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v85, 0, 1, (uint64_t)v87);
      }
      v58 = v125;
      _s7Weather24LocationCompositionStateOwst_0(v78, 0, 1, (uint64_t)v124);
    }
    v57[v58[10]] = v50[v58[10]];
    v57[v58[11]] = v50[v58[11]];
    v57[v58[12]] = v50[v58[12]];
    v57[v58[13]] = v50[v58[13]];
    v57[v58[14]] = v50[v58[14]];
    v93 = v58[15];
    v94 = *(void **)&v50[v93];
    *(_QWORD *)&v57[v93] = v94;
    v57[v58[16]] = v50[v58[16]];
    v57[v58[17]] = v50[v58[17]];
    v57[v58[18]] = v50[v58[18]];
    v95 = v58[19];
    v96 = &v57[v95];
    v97 = &v50[v95];
    v98 = type metadata accessor for Date(0);
    v99 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v98 - 8) + 16);
    v100 = v94;
    v99(v96, v97, v98);
    v101 = v58[20];
    v102 = &v57[v101];
    v103 = &v50[v101];
    v104 = type metadata accessor for ForegroundEffect(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v103, 1, v104))
    {
      v105 = sub_1000BA294(&qword_100BC5B30);
      memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 16))(v102, v103, v104);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v102, 0, 1, v104);
    }
    v57[v58[21]] = v50[v58[21]];
    v106 = v58[22];
    v107 = *(_QWORD *)&v50[v106];
    *(_QWORD *)&v57[v106] = v107;
    v57[v58[23]] = v50[v58[23]];
    v108 = v58[24];
    v109 = &v57[v108];
    v110 = &v50[v108];
    v111 = type metadata accessor for LocationEntity(0);
    v112 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v111 - 8) + 16);
    v113 = swift_bridgeObjectRetain(v107);
    v112(v109, v110, v111, v113);
    v114 = v126[7];
    v115 = v126[8];
    v116 = *(_OWORD *)((char *)v127 + v114);
    v13 = v128;
    *(_OWORD *)((char *)v128 + v114) = v116;
    v117 = (_QWORD *)((char *)v128 + v115);
    v118 = (_QWORD *)((char *)v127 + v115);
    v119 = v118[1];
    *v117 = *v118;
    v117[1] = v119;
    *(_QWORD *)((char *)v128 + v126[9]) = *(_QWORD *)((char *)v127 + v126[9]);
    swift_unknownObjectRetain(v116);
    swift_retain();
  }
  swift_retain();
  return v13;
}

char *sub_10023B19C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v69;
  char *v70;
  char *__dst;
  _QWORD *__dsta;
  int *v73;
  int *v74;

  v6 = sub_1000BA294(&qword_100C09EB0);
  if (swift_getEnumCaseMultiPayload(a2) == 1)
  {
    v7 = type metadata accessor for ScenePhase(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = a3[6];
  v74 = a3;
  v10 = &a1[v8];
  v11 = &a2[v8];
  *(_OWORD *)v10 = *(_OWORD *)v11;
  v10[16] = v11[16];
  v12 = &a1[v9];
  v13 = &a2[v9];
  v14 = type metadata accessor for Location.Identifier(0);
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
  v15(v12, v13, v14);
  v16 = (int *)type metadata accessor for LocationViewModel(0);
  v17 = v16[5];
  v18 = &v12[v17];
  v19 = &v13[v17];
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v13[v17], 1, v14))
  {
    v20 = sub_1000BA294(&qword_100BCD680);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v15(v18, v19, v14);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v18, 0, 1, v14);
  }
  memcpy(&v12[v16[6]], &v13[v16[6]], 0xA2uLL);
  *(_QWORD *)&v12[v16[7]] = *(_QWORD *)&v13[v16[7]];
  *(_QWORD *)&v12[v16[8]] = *(_QWORD *)&v13[v16[8]];
  v21 = v16[9];
  v22 = &v12[v21];
  v23 = &v13[v21];
  v24 = type metadata accessor for LocationFooterViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v23, 1, v24))
  {
    v25 = sub_1000BA294(&qword_100BCD690);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v69 = a2;
    *v22 = *v23;
    *(_WORD *)(v22 + 1) = *(_WORD *)(v23 + 1);
    *(_OWORD *)(v22 + 8) = *(_OWORD *)(v23 + 8);
    v26 = *(int *)(v24 + 32);
    v27 = &v22[v26];
    v28 = &v23[v26];
    v29 = type metadata accessor for URL(0);
    v70 = a1;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v28, 1, v29))
    {
      v30 = sub_1000BA294(&qword_100BD4280);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v27, 0, 1, v29);
    }
    v73 = (int *)v24;
    v31 = *(int *)(v24 + 36);
    v32 = &v22[v31];
    v33 = &v23[v31];
    *v32 = v23[v31];
    *((_QWORD *)v32 + 1) = *(_QWORD *)&v23[v31 + 8];
    v34 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
    v35 = v34[6];
    __dst = &v32[v35];
    v36 = &v33[v35];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v33[v35], 1, v29))
    {
      v37 = sub_1000BA294(&qword_100BD4280);
      memcpy(__dst, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(__dst, v36, v29);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v29);
    }
    *(_OWORD *)&v32[v34[7]] = *(_OWORD *)&v33[v34[7]];
    *(_QWORD *)&v32[v34[8]] = *(_QWORD *)&v33[v34[8]];
    v38 = (uint64_t)v73;
    v22[v73[10]] = v23[v73[10]];
    v39 = v73[11];
    v40 = &v22[v39];
    v41 = &v23[v39];
    v42 = type metadata accessor for LocationOfInterest(0);
    __dsta = (_QWORD *)v42;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v41, 1, v42))
    {
      v43 = sub_1000BA294(&qword_100BC3118);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v40, 0, 1, v42);
    }
    a1 = v70;
    v22[v73[12]] = v23[v73[12]];
    v22[v73[13]] = v23[v73[13]];
    v44 = v73[14];
    v45 = &v22[v44];
    v46 = &v23[v44];
    v47 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v46, 1, (uint64_t)v47))
    {
      v48 = sub_1000BA294(&qword_100BCD688);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
    else
    {
      *v45 = *v46;
      v49 = v47[5];
      v50 = &v45[v49];
      v51 = &v46[v49];
      v52 = type metadata accessor for Location(0);
      v53 = v50;
      v38 = (uint64_t)v73;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v53, v51, v52);
      (*(void (**)(char *, char *))(*(__dsta - 1) + 32))(&v45[v47[6]], &v46[v47[6]]);
      v45[v47[7]] = v46[v47[7]];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v45, 0, 1, (uint64_t)v47);
    }
    a2 = v69;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v22, 0, 1, v38);
  }
  v12[v16[10]] = v13[v16[10]];
  v12[v16[11]] = v13[v16[11]];
  v12[v16[12]] = v13[v16[12]];
  v12[v16[13]] = v13[v16[13]];
  v12[v16[14]] = v13[v16[14]];
  *(_QWORD *)&v12[v16[15]] = *(_QWORD *)&v13[v16[15]];
  v12[v16[16]] = v13[v16[16]];
  v12[v16[17]] = v13[v16[17]];
  v12[v16[18]] = v13[v16[18]];
  v54 = v16[19];
  v55 = &v12[v54];
  v56 = &v13[v54];
  v57 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v55, v56, v57);
  v58 = v16[20];
  v59 = &v12[v58];
  v60 = &v13[v58];
  v61 = type metadata accessor for ForegroundEffect(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v60, 1, v61))
  {
    v62 = sub_1000BA294(&qword_100BC5B30);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(v59, v60, v61);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v59, 0, 1, v61);
  }
  v12[v16[21]] = v13[v16[21]];
  *(_QWORD *)&v12[v16[22]] = *(_QWORD *)&v13[v16[22]];
  v12[v16[23]] = v13[v16[23]];
  v63 = v16[24];
  v64 = &v12[v63];
  v65 = &v13[v63];
  v66 = type metadata accessor for LocationEntity(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v64, v65, v66);
  v67 = v74[8];
  *(_OWORD *)&a1[v74[7]] = *(_OWORD *)&a2[v74[7]];
  *(_OWORD *)&a1[v67] = *(_OWORD *)&a2[v67];
  *(_QWORD *)&a1[v74[9]] = *(_QWORD *)&a2[v74[9]];
  return a1;
}

char *sub_10023B7F8(uint64_t a1, char *a2, int *a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  int v50;
  uint64_t v51;
  void *v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  size_t v56;
  void *v57;
  const void *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const void *v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  const void *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  const void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  _BYTE *v80;
  int *v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  const void *v125;
  int v126;
  size_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  const void *v139;
  uint64_t v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _BYTE *v146;
  _BYTE *v147;
  int *v148;
  int v149;
  int v150;
  uint64_t v151;
  _BYTE *v152;
  uint64_t v153;
  _BYTE *v154;
  uint64_t v155;
  uint64_t v156;
  _BYTE *v157;
  uint64_t v158;
  _BYTE *v159;
  uint64_t v160;
  uint64_t v161;
  int *v162;
  uint64_t v163;
  void *__dst;
  _BYTE *__dstb;
  int *__dsta;
  char *v167;
  char *v168;
  int *v169;
  char *v170;

  v5 = (char *)a1;
  if ((char *)a1 != a2)
  {
    sub_100021A14(a1, &qword_100C09EB0);
    v6 = sub_1000BA294(&qword_100C09EB0);
    if (swift_getEnumCaseMultiPayload(a2) == 1)
    {
      v7 = type metadata accessor for ScenePhase(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, a2, v7);
      swift_storeEnumTagMultiPayload(v5, v6, 1);
    }
    else
    {
      memcpy(v5, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &v5[v8];
  v10 = &a2[v8];
  v11 = v10[16];
  v12 = *(_QWORD *)v9;
  v13 = *((_QWORD *)v9 + 1);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  v9[16] = v11;
  sub_1000BF398(v12, v13);
  v169 = a3;
  v170 = a2;
  v14 = a3[6];
  v15 = &v5[v14];
  v16 = &a2[v14];
  v17 = type metadata accessor for Location.Identifier(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(void (**)(char *, char *, uint64_t))(v18 + 40);
  v19(v15, v16, v17);
  v20 = (int *)type metadata accessor for LocationViewModel(0);
  v21 = v20[5];
  v22 = &v15[v21];
  v23 = &v16[v21];
  v24 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)&v15[v21], 1, v17);
  v25 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v23, 1, v17);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v22, v23, v17);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v22, 0, 1, v17);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v22, v17);
LABEL_10:
    v26 = sub_1000BA294(&qword_100BCD680);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_11;
  }
  v19(v22, v23, v17);
LABEL_11:
  v27 = v20[6];
  v28 = &v15[v27];
  v29 = &v16[v27];
  v30 = *(_QWORD *)&v16[v27 + 8];
  *(_QWORD *)v28 = *(_QWORD *)&v16[v27];
  *((_QWORD *)v28 + 1) = v30;
  swift_bridgeObjectRelease();
  v31 = v29[48];
  v32 = *((_QWORD *)v28 + 2);
  v33 = *((_QWORD *)v28 + 3);
  v34 = *((_QWORD *)v28 + 4);
  v35 = *((_QWORD *)v28 + 5);
  v36 = *((_OWORD *)v29 + 2);
  *((_OWORD *)v28 + 1) = *((_OWORD *)v29 + 1);
  *((_OWORD *)v28 + 2) = v36;
  v37 = v28[48];
  v28[48] = v31;
  sub_100176DD4(v32, v33, v34, v35, v37);
  v38 = *((_QWORD *)v29 + 8);
  *((_QWORD *)v28 + 7) = *((_QWORD *)v29 + 7);
  *((_QWORD *)v28 + 8) = v38;
  swift_bridgeObjectRelease();
  v39 = *((_QWORD *)v29 + 10);
  *((_QWORD *)v28 + 9) = *((_QWORD *)v29 + 9);
  *((_QWORD *)v28 + 10) = v39;
  swift_bridgeObjectRelease();
  v40 = *((_QWORD *)v29 + 12);
  *((_QWORD *)v28 + 11) = *((_QWORD *)v29 + 11);
  *((_QWORD *)v28 + 12) = v40;
  swift_bridgeObjectRelease();
  v41 = *((_QWORD *)v29 + 14);
  *((_QWORD *)v28 + 13) = *((_QWORD *)v29 + 13);
  *((_QWORD *)v28 + 14) = v41;
  swift_bridgeObjectRelease();
  v42 = *((_QWORD *)v29 + 16);
  *((_QWORD *)v28 + 15) = *((_QWORD *)v29 + 15);
  *((_QWORD *)v28 + 16) = v42;
  swift_bridgeObjectRelease();
  v28[136] = v29[136];
  v28[137] = v29[137];
  v28[138] = v29[138];
  v43 = *((_QWORD *)v29 + 19);
  *((_QWORD *)v28 + 18) = *((_QWORD *)v29 + 18);
  *((_QWORD *)v28 + 19) = v43;
  swift_bridgeObjectRelease();
  v28[160] = v29[160];
  v28[161] = v29[161];
  *(_QWORD *)&v15[v20[7]] = *(_QWORD *)&v16[v20[7]];
  swift_bridgeObjectRelease();
  v44 = v20[8];
  v45 = *(_QWORD *)&v15[v44];
  *(_QWORD *)&v15[v44] = *(_QWORD *)&v16[v44];
  swift_release(v45 & 0xFFFFFFFFFFFFFFBLL);
  v46 = v20[9];
  v47 = (uint64_t)&v15[v46];
  v48 = (uint64_t)&v16[v46];
  v49 = (int *)type metadata accessor for LocationFooterViewModel(0);
  LODWORD(v28) = _s7Weather24LocationCompositionStateOwet_0(v47, 1, (uint64_t)v49);
  v50 = _s7Weather24LocationCompositionStateOwet_0(v48, 1, (uint64_t)v49);
  if ((_DWORD)v28)
  {
    if (!v50)
    {
      v167 = v5;
      *(_BYTE *)v47 = *(_BYTE *)v48;
      *(_WORD *)(v47 + 1) = *(_WORD *)(v48 + 1);
      *(_OWORD *)(v47 + 8) = *(_OWORD *)(v48 + 8);
      v51 = v49[8];
      v52 = (void *)(v47 + v51);
      v53 = (const void *)(v48 + v51);
      v54 = type metadata accessor for URL(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v53, 1, v54))
      {
        v55 = sub_1000BA294(&qword_100BD4280);
        memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(v52, v53, v54);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v52, 0, 1, v54);
      }
      v162 = v49;
      v66 = v49[9];
      v67 = v47 + v66;
      v68 = v48 + v66;
      *(_BYTE *)v67 = *(_BYTE *)(v48 + v66);
      *(_QWORD *)(v67 + 8) = *(_QWORD *)(v48 + v66 + 8);
      v69 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
      v70 = v69[6];
      __dst = (void *)(v67 + v70);
      v71 = (const void *)(v68 + v70);
      if (_s7Weather24LocationCompositionStateOwet_0(v68 + v70, 1, v54))
      {
        v72 = sub_1000BA294(&qword_100BD4280);
        memcpy(__dst, v71, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(__dst, v71, v54);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v54);
      }
      *(_OWORD *)(v67 + v69[7]) = *(_OWORD *)(v68 + v69[7]);
      *(_QWORD *)(v67 + v69[8]) = *(_QWORD *)(v68 + v69[8]);
      *(_BYTE *)(v47 + v162[10]) = *(_BYTE *)(v48 + v162[10]);
      v73 = v162[11];
      v74 = (void *)(v47 + v73);
      v75 = (const void *)(v48 + v73);
      v76 = type metadata accessor for LocationOfInterest(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v75, 1, v76))
      {
        v77 = sub_1000BA294(&qword_100BC3118);
        memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v76 - 8) + 32))(v74, v75, v76);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v74, 0, 1, v76);
      }
      *(_BYTE *)(v47 + v162[12]) = *(_BYTE *)(v48 + v162[12]);
      *(_BYTE *)(v47 + v162[13]) = *(_BYTE *)(v48 + v162[13]);
      v78 = v162[14];
      v79 = (_BYTE *)(v47 + v78);
      v80 = (_BYTE *)(v48 + v78);
      v81 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v80, 1, (uint64_t)v81))
      {
        v82 = sub_1000BA294(&qword_100BCD688);
        memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
      }
      else
      {
        *v79 = *v80;
        v83 = v81[5];
        v84 = &v79[v83];
        __dstb = &v80[v83];
        v85 = type metadata accessor for Location(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v85 - 8) + 32))(v84, __dstb, v85);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v76 - 8) + 32))(&v79[v81[6]], &v80[v81[6]], v76);
        v79[v81[7]] = v80[v81[7]];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v79, 0, 1, (uint64_t)v81);
      }
      v5 = v167;
      v86 = v47;
      v87 = (uint64_t)v162;
      goto LABEL_34;
    }
    goto LABEL_17;
  }
  if (v50)
  {
    sub_1000215BC(v47, type metadata accessor for LocationFooterViewModel);
LABEL_17:
    v56 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BCD690) - 8) + 64);
    v57 = (void *)v47;
    v58 = (const void *)v48;
LABEL_18:
    memcpy(v57, v58, v56);
    goto LABEL_35;
  }
  v168 = v5;
  *(_BYTE *)v47 = *(_BYTE *)v48;
  *(_BYTE *)(v47 + 1) = *(_BYTE *)(v48 + 1);
  *(_BYTE *)(v47 + 2) = *(_BYTE *)(v48 + 2);
  v59 = *(_QWORD *)(v48 + 16);
  *(_QWORD *)(v47 + 8) = *(_QWORD *)(v48 + 8);
  *(_QWORD *)(v47 + 16) = v59;
  swift_bridgeObjectRelease();
  v60 = v49[8];
  v61 = (void *)(v47 + v60);
  v62 = (const void *)(v48 + v60);
  v63 = type metadata accessor for URL(0);
  v64 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v61, 1, v63);
  v65 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v62, 1, v63);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v63 - 8) + 32))(v61, v62, v63);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v61, 0, 1, v63);
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  v119 = *(_QWORD *)(v63 - 8);
  if (v65)
  {
    (*(void (**)(void *, uint64_t))(v119 + 8))(v61, v63);
LABEL_45:
    v120 = sub_1000BA294(&qword_100BD4280);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
    goto LABEL_46;
  }
  (*(void (**)(void *, const void *, uint64_t))(v119 + 40))(v61, v62, v63);
LABEL_46:
  v121 = v49[9];
  v122 = v47 + v121;
  v123 = v48 + v121;
  *(_BYTE *)v122 = *(_BYTE *)(v48 + v121);
  *(_QWORD *)(v122 + 8) = *(_QWORD *)(v48 + v121 + 8);
  swift_bridgeObjectRelease();
  v163 = v123;
  __dsta = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
  v124 = __dsta[6];
  v125 = (const void *)(v123 + v124);
  v161 = v122 + v124;
  LODWORD(v123) = _s7Weather24LocationCompositionStateOwet_0(v122 + v124, 1, v63);
  v126 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v125, 1, v63);
  if ((_DWORD)v123)
  {
    if (v126)
    {
      v127 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD4280) - 8) + 64);
      v128 = (void *)v161;
LABEL_51:
      memcpy(v128, v125, v127);
      goto LABEL_55;
    }
    (*(void (**)(uint64_t, const void *, uint64_t))(*(_QWORD *)(v63 - 8) + 32))(v161, v125, v63);
    _s7Weather24LocationCompositionStateOwst_0(v161, 0, 1, v63);
  }
  else
  {
    v129 = *(_QWORD *)(v63 - 8);
    if (v126)
    {
      (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v161, v63);
      v127 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD4280) - 8) + 64);
      v128 = (void *)v161;
      goto LABEL_51;
    }
    (*(void (**)(uint64_t, const void *, uint64_t))(v129 + 40))(v161, v125, v63);
  }
LABEL_55:
  v130 = __dsta[7];
  v131 = (_QWORD *)(v122 + v130);
  v132 = (uint64_t *)(v163 + v130);
  v134 = *v132;
  v133 = v132[1];
  *v131 = v134;
  v131[1] = v133;
  swift_bridgeObjectRelease();
  v135 = __dsta[8];
  v136 = *(_QWORD *)(v122 + v135);
  *(_QWORD *)(v122 + v135) = *(_QWORD *)(v163 + v135);
  swift_release(v136);
  *(_BYTE *)(v47 + v49[10]) = *(_BYTE *)(v48 + v49[10]);
  v137 = v49[11];
  v138 = (void *)(v47 + v137);
  v139 = (const void *)(v48 + v137);
  v140 = type metadata accessor for LocationOfInterest(0);
  v141 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v138, 1, v140);
  v142 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v139, 1, v140);
  if (v141)
  {
    if (!v142)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v140 - 8) + 32))(v138, v139, v140);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v138, 0, 1, v140);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  v143 = *(_QWORD *)(v140 - 8);
  if (v142)
  {
    (*(void (**)(void *, uint64_t))(v143 + 8))(v138, v140);
LABEL_60:
    v144 = sub_1000BA294(&qword_100BC3118);
    memcpy(v138, v139, *(_QWORD *)(*(_QWORD *)(v144 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(void *, const void *, uint64_t))(v143 + 40))(v138, v139, v140);
LABEL_61:
  *(_BYTE *)(v47 + v49[12]) = *(_BYTE *)(v48 + v49[12]);
  *(_BYTE *)(v47 + v49[13]) = *(_BYTE *)(v48 + v49[13]);
  v145 = v49[14];
  v146 = (_BYTE *)(v47 + v145);
  v147 = (_BYTE *)(v48 + v145);
  v148 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
  v149 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v146, 1, (uint64_t)v148);
  v150 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v147, 1, (uint64_t)v148);
  v5 = v168;
  if (v149)
  {
    if (!v150)
    {
      *v146 = *v147;
      v151 = v148[5];
      v152 = &v146[v151];
      v153 = v140;
      v154 = &v147[v151];
      v155 = type metadata accessor for Location(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v155 - 8) + 32))(v152, v154, v155);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v153 - 8) + 32))(&v146[v148[6]], &v147[v148[6]], v153);
      v146[v148[7]] = v147[v148[7]];
      v86 = (uint64_t)v146;
      v87 = (uint64_t)v148;
LABEL_34:
      _s7Weather24LocationCompositionStateOwst_0(v86, 0, 1, v87);
      goto LABEL_35;
    }
    goto LABEL_66;
  }
  if (v150)
  {
    sub_1000215BC((uint64_t)v146, type metadata accessor for HomeAndWorkRefinementRowViewModel);
LABEL_66:
    v56 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BCD688) - 8) + 64);
    v57 = v146;
    v58 = v147;
    goto LABEL_18;
  }
  *v146 = *v147;
  v156 = v148[5];
  v157 = &v146[v156];
  v158 = v140;
  v159 = &v147[v156];
  v160 = type metadata accessor for Location(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v160 - 8) + 40))(v157, v159, v160);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v158 - 8) + 40))(&v146[v148[6]], &v147[v148[6]], v158);
  v146[v148[7]] = v147[v148[7]];
LABEL_35:
  v15[v20[10]] = v16[v20[10]];
  v15[v20[11]] = v16[v20[11]];
  v15[v20[12]] = v16[v20[12]];
  v15[v20[13]] = v16[v20[13]];
  v15[v20[14]] = v16[v20[14]];
  v88 = v20[15];
  v89 = *(void **)&v15[v88];
  *(_QWORD *)&v15[v88] = *(_QWORD *)&v16[v88];

  v15[v20[16]] = v16[v20[16]];
  v15[v20[17]] = v16[v20[17]];
  v15[v20[18]] = v16[v20[18]];
  v90 = v20[19];
  v91 = &v15[v90];
  v92 = &v16[v90];
  v93 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v93 - 8) + 40))(v91, v92, v93);
  v94 = v20[20];
  v95 = &v15[v94];
  v96 = &v16[v94];
  v97 = type metadata accessor for ForegroundEffect(0);
  LODWORD(v91) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v95, 1, v97);
  v98 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v96, 1, v97);
  if (!(_DWORD)v91)
  {
    v99 = *(_QWORD *)(v97 - 8);
    if (!v98)
    {
      (*(void (**)(char *, char *, uint64_t))(v99 + 40))(v95, v96, v97);
      goto LABEL_41;
    }
    (*(void (**)(char *, uint64_t))(v99 + 8))(v95, v97);
    goto LABEL_40;
  }
  if (v98)
  {
LABEL_40:
    v100 = sub_1000BA294(&qword_100BC5B30);
    memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
    goto LABEL_41;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 32))(v95, v96, v97);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v95, 0, 1, v97);
LABEL_41:
  v15[v20[21]] = v16[v20[21]];
  *(_QWORD *)&v15[v20[22]] = *(_QWORD *)&v16[v20[22]];
  swift_bridgeObjectRelease();
  v15[v20[23]] = v16[v20[23]];
  v101 = v20[24];
  v102 = &v15[v101];
  v103 = &v16[v101];
  v104 = type metadata accessor for LocationEntity(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 40))(v102, v103, v104);
  v105 = v169[7];
  v106 = &v5[v105];
  v107 = &v170[v105];
  v108 = *((_QWORD *)v107 + 1);
  v109 = *(_QWORD *)v106;
  *(_QWORD *)v106 = *(_QWORD *)v107;
  swift_unknownObjectRelease(v109);
  *((_QWORD *)v106 + 1) = v108;
  v110 = v169[8];
  v111 = &v5[v110];
  v112 = &v170[v110];
  v114 = *(_QWORD *)v112;
  v113 = *((_QWORD *)v112 + 1);
  v115 = *((_QWORD *)v111 + 1);
  *(_QWORD *)v111 = v114;
  *((_QWORD *)v111 + 1) = v113;
  swift_release(v115);
  v116 = v169[9];
  v117 = *(_QWORD *)&v5[v116];
  *(_QWORD *)&v5[v116] = *(_QWORD *)&v170[v116];
  swift_release(v117);
  return v5;
}

uint64_t sub_10023C498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10023C4A4);
}

uint64_t sub_10023C4A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;

  v6 = sub_1000BA294(&qword_100BCD698);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
    return _s7Weather24LocationCompositionStateOwet_0(v8, a2, v7);
  }
  v9 = sub_1000CD5E0();
  if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v9;
    v8 = a1 + *(int *)(a3 + 24);
    return _s7Weather24LocationCompositionStateOwet_0(v8, a2, v7);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_10023C544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10023C550);
}

void sub_10023C550(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = sub_1000BA294(&qword_100BCD698);
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
LABEL_5:
    _s7Weather24LocationCompositionStateOwst_0(v10, a2, a2, v9);
    return;
  }
  v11 = sub_1000CD5E0();
  if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == a3)
  {
    v9 = v11;
    v10 = a1 + *(int *)(a4 + 24);
    goto LABEL_5;
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  sub_100079F70();
}

uint64_t sub_10023C5F0(uint64_t a1)
{
  return sub_10023C60C(a1, (uint64_t (*)(uint64_t))sub_10023A49C);
}

uint64_t sub_10023C600(uint64_t a1)
{
  return sub_10023C60C(a1, (uint64_t (*)(uint64_t))sub_10023A550);
}

uint64_t sub_10023C60C(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  sub_1000C3650();
  sub_1000987F4();
  return a2(a1);
}

void sub_10023C64C(uint64_t a1)
{
  sub_10023C658(a1, (uint64_t (*)(void))sub_1006BEE00);
}

void sub_10023C658(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4;

  sub_1000C3650();
  sub_1000987F4();
  sub_10023A934(a1, v4, a2);
  sub_100079F70();
}

uint64_t sub_10023C690()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void (*v7)(_QWORD *);
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  int *v11;
  int *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void (*v25)(char *);
  char *v26;
  void (*v27)(char *);
  char *v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = v0;
  v3 = (int *)sub_1000C3650();
  v4 = *((_QWORD *)v3 - 1);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v35 = *(_QWORD *)(v4 + 64);
  v36 = (v5 + 16) & ~v5;
  v6 = (_QWORD *)(v0 + v36);
  sub_1000BA294(&qword_100C09EB0);
  if (swift_getEnumCaseMultiPayload(v0 + v36) == 1)
  {
    type metadata accessor for ScenePhase(0);
    sub_1000C092C();
    v7(v6);
  }
  else
  {
    swift_release(*v6);
  }
  sub_1000BF398(*(_QWORD *)((char *)v6 + v3[5]), *(_QWORD *)((char *)v6 + v3[5] + 8));
  v8 = (char *)v6 + v3[6];
  v9 = type metadata accessor for Location.Identifier(0);
  v10 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v11 = (int *)sub_1000CD5E0();
  v12 = (int *)&v8[v11[5]];
  if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v9))
    v10((char *)v12, v9);
  v13 = &v8[v11[6]];
  swift_bridgeObjectRelease();
  sub_100176DD4(*((_QWORD *)v13 + 2), *((_QWORD *)v13 + 3), *((_QWORD *)v13 + 4), *((_QWORD *)v13 + 5), v13[48]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)&v8[v11[8]] & 0xFFFFFFFFFFFFFFBLL);
  v14 = &v8[v11[9]];
  v15 = type metadata accessor for LocationFooterViewModel(0);
  if (!sub_1000BBDB0(v15))
  {
    v33 = v2;
    v34 = v5;
    swift_bridgeObjectRelease();
    v16 = type metadata accessor for URL(0);
    if (!sub_1000C5238(v16))
      sub_1000DB7B8();
    v17 = &v14[v12[9]];
    swift_bridgeObjectRelease();
    v18 = type metadata accessor for LearnMoreAttributorViewModel(0);
    v19 = (uint64_t)&v17[*(int *)(v18 + 24)];
    if (!_s7Weather24LocationCompositionStateOwet_0(v19, 1, v1))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v19, v1);
    swift_bridgeObjectRelease();
    swift_release(*(_QWORD *)&v17[*(int *)(v18 + 32)]);
    v20 = type metadata accessor for LocationOfInterest(0);
    v2 = v33;
    if (!sub_1000C5238(v20))
      sub_1000DB7B8();
    v21 = &v14[v12[14]];
    v22 = type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
    v5 = v34;
    if (!sub_1000BBDB0(v22))
    {
      v23 = &v21[v12[5]];
      type metadata accessor for Location(0);
      sub_1000C092C();
      v24 = v23;
      v5 = v34;
      v25(v24);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(&v21[v12[6]], v1);
    }
  }

  v26 = &v8[v11[19]];
  type metadata accessor for Date(0);
  sub_1000C092C();
  v27(v26);
  v28 = &v8[v11[20]];
  v29 = type metadata accessor for ForegroundEffect(0);
  if (!sub_1000BBDB0(v29))
    (*(void (**)(char *, int *))(*((_QWORD *)v12 - 1) + 8))(v28, v12);
  swift_bridgeObjectRelease();
  v30 = &v8[v11[24]];
  type metadata accessor for LocationEntity(0);
  sub_1000C092C();
  v31(v30);
  swift_unknownObjectRelease(*(_QWORD *)((char *)v6 + v3[7]));
  swift_release(*(_QWORD *)((char *)v6 + v3[8] + 8));
  swift_release(*(_QWORD *)((char *)v6 + v3[9]));
  return swift_deallocObject(v2, v36 + v35, v5 | 7);
}

void sub_10023C9EC(uint64_t a1)
{
  sub_10023C658(a1, (uint64_t (*)(void))sub_1006BEE08);
}

void sub_10023C9F8()
{
  sub_10003D2DC(&qword_100BCD790, &qword_100BCD778);
}

uint64_t sub_10023CA24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10004037C(v10, static OpenUnitsConfigurationIntent.title);
  sub_1000AECD4(v10, (uint64_t)static OpenUnitsConfigurationIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000018, 0x80000001009F5210);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "The title of the 'Open Units Configuration' intent", 50, 2);
}

uint64_t OpenUnitsConfigurationIntent.title.unsafeMutableAddressor()
{
  return sub_10023CE1C(&qword_100BC1E90, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)static OpenUnitsConfigurationIntent.title, (uint64_t)sub_10023CA24);
}

uint64_t static OpenUnitsConfigurationIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10023CE84(&qword_100BC1E90, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)static OpenUnitsConfigurationIntent.title, (uint64_t)sub_10023CA24, a1);
}

uint64_t sub_10023CBE0()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[16];

  v0 = sub_1000BA294(&qword_100BC2918);
  __chkstk_darwin(v0);
  v2 = &v20[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for Locale(0);
  __chkstk_darwin(v7);
  v9 = &v20[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v10);
  v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = __chkstk_darwin(v13);
  v16 = &v20[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = type metadata accessor for IntentDescription(0, v14);
  sub_10004037C(v17, static OpenUnitsConfigurationIntent.description);
  sub_1000AECD4(v17, (uint64_t)static OpenUnitsConfigurationIntent.description);
  v18 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000076, 0x80000001009F5150);
  static Locale.current.getter(v18);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for LocalizedStringResource.BundleDescription.main(_:), v3);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v12, 0, 0, v9, v6, "The description of the 'Open Units Configuration' intent", 56, 2);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v2, 1, 1, v13);
  return IntentDescription.init(_:categoryName:searchKeywords:)(v16, v2, _swiftEmptyArrayStorage);
}

uint64_t OpenUnitsConfigurationIntent.description.unsafeMutableAddressor()
{
  return sub_10023CE1C(&qword_100BC1E98, (uint64_t (*)(_QWORD))&type metadata accessor for IntentDescription, (uint64_t)static OpenUnitsConfigurationIntent.description, (uint64_t)sub_10023CBE0);
}

uint64_t sub_10023CE1C(_QWORD *a1, uint64_t (*a2)(_QWORD), uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  if (*a1 != -1)
    swift_once(a1, a4);
  v6 = a2(0);
  return sub_1000AECD4(v6, a3);
}

uint64_t static OpenUnitsConfigurationIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10023CE84(&qword_100BC1E98, (uint64_t (*)(_QWORD))&type metadata accessor for IntentDescription, (uint64_t)static OpenUnitsConfigurationIntent.description, (uint64_t)sub_10023CBE0, a1);
}

uint64_t sub_10023CE84@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  if (*a1 != -1)
    swift_once(a1, a4);
  v8 = a2(0);
  v9 = sub_1000AECD4(v8, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a5, v9, v8);
}

void *OpenUnitsConfigurationIntent.openAppWhenRun.unsafeMutableAddressor()
{
  return &static OpenUnitsConfigurationIntent.openAppWhenRun;
}

void *OpenUnitsConfigurationIntent.isDiscoverable.unsafeMutableAddressor()
{
  return &static OpenUnitsConfigurationIntent.isDiscoverable;
}

uint64_t OpenNotificationsConfigurationIntent.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD v7[2];
  uint64_t v8;

  sub_1000BA294(&qword_100BC28E0);
  v0 = type metadata accessor for AppDependencyManager(0);
  memset(v7, 0, sizeof(v7));
  v8 = 0;
  v5 = static AppDependencyManager.shared.getter(v0, v1, v2, v3, v4);
  return AppDependency.__allocating_init(key:manager:)(v7, v5);
}

uint64_t OpenUnitsConfigurationIntent.perform()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[7] = a1;
  v2[8] = a2;
  v3 = type metadata accessor for WeatherIntentType(0);
  v2[9] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[10] = v4;
  v2[11] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10023CFC4, 0, 0);
}

uint64_t sub_10023CFC4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[10];
  v1 = v0[11];
  v3 = v0[9];
  AppDependency.wrappedValue.getter();
  v4 = v0[5];
  v5 = v0[6];
  sub_1000DB418(v0 + 2, v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for WeatherIntentType.openUnitsConfiguration(_:), v3);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of WeatherIntentHandlerType.handleIntent(_:)[1]);
  v0[12] = v6;
  *v6 = v0;
  v6[1] = sub_10023D078;
  return dispatch thunk of WeatherIntentHandlerType.handleIntent(_:)(v0[11], v4, v5);
}

uint64_t sub_10023D078()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  if (v0)
    v6 = sub_10023D144;
  else
    v6 = sub_10023D0F8;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10023D0F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  static IntentResult.result<>()(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023D144()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(v1);
  return sub_1000950D8(*(uint64_t (**)(void))(v0 + 8));
}

unint64_t sub_10023D180()
{
  unint64_t result;

  result = qword_100BCD7A0;
  if (!qword_100BCD7A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenUnitsConfigurationIntent, &type metadata for OpenUnitsConfigurationIntent);
    atomic_store(result, (unint64_t *)&qword_100BCD7A0);
  }
  return result;
}

unint64_t sub_10023D1C0()
{
  unint64_t result;

  result = qword_100BCD7A8;
  if (!qword_100BCD7A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenUnitsConfigurationIntent, &type metadata for OpenUnitsConfigurationIntent);
    atomic_store(result, (unint64_t *)&qword_100BCD7A8);
  }
  return result;
}

uint64_t sub_10023D1FC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of OpenUnitsConfigurationIntent.perform()>>, 1);
}

uint64_t sub_10023D20C(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_10023D24C();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

unint64_t sub_10023D24C()
{
  unint64_t result;

  result = qword_100BCD7B0;
  if (!qword_100BCD7B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenUnitsConfigurationIntent, &type metadata for OpenUnitsConfigurationIntent);
    atomic_store(result, (unint64_t *)&qword_100BCD7B0);
  }
  return result;
}

uint64_t sub_10023D288@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = OpenUnitsConfigurationIntent.title.unsafeMutableAddressor();
  v3 = type metadata accessor for LocalizedStringResource(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v2, v3);
}

uint64_t sub_10023D2D4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_100BCD79C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100223BE0;
  return OpenUnitsConfigurationIntent.perform()(a1, v4);
}

uint64_t sub_10023D32C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = OpenNotificationsConfigurationIntent.init()();
  *a1 = result;
  return result;
}

uint64_t sub_10023D350(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10023D24C();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for OpenUnitsConfigurationIntent()
{
  return &type metadata for OpenUnitsConfigurationIntent;
}

unint64_t sub_10023D38C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCD7C0;
  if (!qword_100BCD7C0)
  {
    v1 = sub_100075EB0(&qword_100BCD7C8);
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentResultContainer<A, B, C, D>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCD7C0);
  }
  return result;
}

_QWORD *sub_10023D3D0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33;
  char *__dst;
  uint64_t v35;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    v33 = a3;
    v8 = *(int *)(a3 + 20);
    v9 = (_QWORD *)((char *)v4 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v12 = *(void **)((char *)a2 + v8);
    v11 = *(uint64_t *)((char *)a2 + v8 + 8);
    *v9 = v12;
    v9[1] = v11;
    v14 = v10[2];
    v13 = v10[3];
    v9[2] = v14;
    v9[3] = v13;
    v16 = v10[4];
    v15 = v10[5];
    v9[4] = v16;
    v9[5] = v15;
    v17 = v10[6];
    v9[6] = v17;
    v18 = type metadata accessor for SearchLocation(0);
    v19 = *(int *)(v18 + 32);
    __dst = (char *)v9 + v19;
    v35 = v18;
    v20 = (char *)v10 + v19;
    v21 = type metadata accessor for Location(0);
    v22 = v12;
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v20, 1, v21))
    {
      v23 = sub_1000BA294(&qword_100BC35F8);
      memcpy(__dst, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(__dst, v20, v21);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v21);
    }
    v25 = *(int *)(v35 + 36);
    v26 = (char *)v9 + v25;
    v27 = (char *)v10 + v25;
    *(_OWORD *)v26 = *(_OWORD *)v27;
    v26[16] = v27[16];
    v28 = *(int *)(v33 + 24);
    v29 = (_QWORD *)((char *)v4 + v28);
    v30 = (uint64_t *)((char *)a2 + v28);
    v31 = v30[1];
    *v29 = *v30;
    v29[1] = v31;
    swift_bridgeObjectRetain(v31);
  }
  return v4;
}

double sub_10023D580(_QWORD *a1, uint64_t a2)
{
  id *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  v4 = (id *)((char *)a1 + *(int *)(a2 + 20));

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = (uint64_t)v4 + *(int *)(type metadata accessor for SearchLocation(0) + 32);
  v6 = type metadata accessor for Location(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_10023D624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  char *__dst;
  uint64_t v32;
  uint64_t v33;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v33 = a3;
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v11 = *(void **)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  *v8 = v11;
  v8[1] = v10;
  v13 = v9[2];
  v12 = v9[3];
  v8[2] = v13;
  v8[3] = v12;
  v15 = v9[4];
  v14 = v9[5];
  v8[4] = v15;
  v8[5] = v14;
  v16 = v9[6];
  v8[6] = v16;
  v17 = type metadata accessor for SearchLocation(0);
  v18 = *(int *)(v17 + 32);
  __dst = (char *)v8 + v18;
  v32 = v17;
  v19 = (char *)v9 + v18;
  v20 = type metadata accessor for Location(0);
  v21 = v11;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v19, 1, v20))
  {
    v22 = sub_1000BA294(&qword_100BC35F8);
    memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(__dst, v19, v20);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v20);
  }
  v23 = *(int *)(v32 + 36);
  v24 = (char *)v8 + v23;
  v25 = (char *)v9 + v23;
  *(_OWORD *)v24 = *(_OWORD *)v25;
  v24[16] = v25[16];
  v26 = *(int *)(v33 + 24);
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  swift_bridgeObjectRetain(v29);
  return a1;
}

_QWORD *sub_10023D7A0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;

  sub_100094D04(a1, a2);
  v6 = *(int *)(a3 + 20);
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  v9 = *(void **)((char *)a1 + v6);
  v10 = *(void **)((char *)a2 + v6);
  *v7 = v10;
  v11 = v10;

  v7[1] = v8[1];
  v12 = v8[2];
  v7[2] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease();
  v7[3] = v8[3];
  v13 = v8[4];
  v7[4] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease();
  v7[5] = v8[5];
  v14 = v8[6];
  v7[6] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease();
  v15 = type metadata accessor for SearchLocation(0);
  v16 = *(int *)(v15 + 32);
  v17 = (char *)v7 + v16;
  v18 = (char *)v8 + v16;
  v19 = type metadata accessor for Location(0);
  v20 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v17, 1, v19);
  v21 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v18, 1, v19);
  if (!v20)
  {
    v22 = *(_QWORD *)(v19 - 8);
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 24))(v17, v18, v19);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v17, v19);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    v23 = sub_1000BA294(&qword_100BC35F8);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v17, 0, 1, v19);
LABEL_7:
  v24 = *(int *)(v15 + 36);
  v25 = (char *)v7 + v24;
  v26 = (char *)v8 + v24;
  v27 = *(_OWORD *)v26;
  v25[16] = v26[16];
  *(_OWORD *)v25 = v27;
  v28 = *(int *)(a3 + 24);
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  *v29 = *v30;
  v31 = v30[1];
  v29[1] = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10023D984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)(a2 + v7);
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + v7 + 8);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + v7 + 24);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + v7 + 40);
  v10 = type metadata accessor for SearchLocation(0);
  v11 = *(int *)(v10 + 32);
  v12 = (void *)(v8 + v11);
  v13 = (const void *)(v9 + v11);
  v14 = type metadata accessor for Location(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v14))
  {
    v15 = sub_1000BA294(&qword_100BC35F8);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v14);
  }
  v16 = *(int *)(v10 + 36);
  v17 = v8 + v16;
  v18 = v9 + v16;
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
  *(_OWORD *)(a1 + *(int *)(a3 + 24)) = *(_OWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10023DAB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = *(void **)(a1 + v7);
  *v8 = *v9;

  v11 = v9[2];
  v8[1] = v9[1];
  v8[2] = v11;
  swift_bridgeObjectRelease();
  v12 = v9[4];
  v8[3] = v9[3];
  v8[4] = v12;
  swift_bridgeObjectRelease();
  v13 = v9[6];
  v8[5] = v9[5];
  v8[6] = v13;
  swift_bridgeObjectRelease();
  v14 = type metadata accessor for SearchLocation(0);
  v15 = *(int *)(v14 + 32);
  v16 = (char *)v8 + v15;
  v17 = (char *)v9 + v15;
  v18 = type metadata accessor for Location(0);
  v19 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v18);
  v20 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v17, 1, v18);
  if (!v19)
  {
    v21 = *(_QWORD *)(v18 - 8);
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 40))(v16, v17, v18);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v18);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v22 = sub_1000BA294(&qword_100BC35F8);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v16, 0, 1, v18);
LABEL_7:
  v23 = *(int *)(v14 + 36);
  v24 = (char *)v8 + v23;
  v25 = (char *)v9 + v23;
  *(_OWORD *)v24 = *(_OWORD *)v25;
  v24[16] = v25[16];
  v26 = *(int *)(a3 + 24);
  v27 = (_QWORD *)(a1 + v26);
  v28 = (uint64_t *)(a2 + v26);
  v30 = *v28;
  v29 = v28[1];
  *v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10023DC68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10023DC74);
}

uint64_t sub_10023DC74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10009BEBC();
    return _s7Weather24LocationCompositionStateOwet_0(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_10023DCE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10023DCF0);
}

uint64_t sub_10023DCF0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = sub_10009BEBC();
    return _s7Weather24LocationCompositionStateOwst_0(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SearchResultRowView(uint64_t a1)
{
  uint64_t result;

  result = qword_100BCD828;
  if (!qword_100BCD828)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SearchResultRowView);
  return result;
}

uint64_t sub_10023DD90(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "(";
  result = type metadata accessor for SearchLocation(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_10098A4C0;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10023DE0C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AAD648, 1);
}

uint64_t sub_10023DE1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t OpaqueTypeConformance2;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[16];
  uint64_t v57;
  _QWORD v58[4];
  _QWORD v59[2];

  v2 = v1;
  v55 = a1;
  v54 = type metadata accessor for AutomationInfo(0);
  sub_10009D98C();
  __chkstk_darwin(v3);
  sub_100098728();
  v6 = (_QWORD *)(v5 - v4);
  v53 = type metadata accessor for SearchResultButtonStyle(0);
  sub_10009D98C();
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v12 = (char *)&v48 - v11;
  v51 = sub_1000DCC10();
  v13 = *(_QWORD *)(v51 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v51);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000BA294(&qword_100BCD868);
  v49 = *(_QWORD *)(v16 - 8);
  sub_10009D98C();
  __chkstk_darwin(v17);
  sub_100098728();
  v20 = v19 - v18;
  v50 = sub_1000BA294(&qword_100BCD870);
  v52 = *(_QWORD *)(v50 - 8);
  sub_10009D98C();
  __chkstk_darwin(v21);
  sub_100098728();
  v24 = v23 - v22;
  sub_1000BA294(&qword_100BCD878);
  sub_10009D98C();
  __chkstk_darwin(v25);
  sub_100098728();
  v48 = v27 - v26;
  sub_10023E7A0(v2, (uint64_t)v15);
  v28 = *(unsigned __int8 *)(v13 + 80);
  v29 = (v28 + 16) & ~v28;
  v30 = swift_allocObject(&unk_100B65C38, v29 + v14, v28 | 7);
  sub_1000A15B4((uint64_t)v15, v30 + v29, type metadata accessor for SearchResultRowView);
  v57 = v2;
  v31 = sub_1000BA294(&qword_100BCD880);
  v32 = sub_10023E8F8();
  Button.init(action:label:)(sub_10023E8C8, v30, sub_10023E8F0, v56, v31, v32);
  *v9 = swift_getKeyPath(&unk_10098A528);
  v33 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  swift_storeEnumTagMultiPayload(v9, v33, 0);
  sub_1000A15B4((uint64_t)v9, (uint64_t)v12, type metadata accessor for SearchResultButtonStyle);
  sub_10003D2DC(&qword_100BCD8B0, &qword_100BCD868);
  v35 = v34;
  sub_10000F1C8(&qword_100BCD8B8, type metadata accessor for SearchResultButtonStyle);
  v37 = v36;
  v38 = v53;
  View.buttonStyle<A>(_:)(v12, v16, v53, v35, v36);
  sub_1000979AC((uint64_t)v12, type metadata accessor for SearchResultButtonStyle);
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v20, v16);
  v39 = v2 + *(int *)(v51 + 20);
  v40 = *(_QWORD *)(v39 + 48);
  v59[0] = *(_QWORD *)(v39 + 40);
  v59[1] = v40;
  v58[0] = v16;
  v58[1] = v38;
  v58[2] = v35;
  v58[3] = v37;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v58, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v42 = sub_100114EF8();
  v43 = v48;
  v44 = v50;
  View.accessibilityLabel<A>(_:)(v59, v50, &type metadata for String, OpaqueTypeConformance2, v42);
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v24, v44);
  v45 = *(_QWORD *)(v39 + 48);
  *v6 = *(_QWORD *)(v39 + 40);
  v6[1] = v45;
  v46 = type metadata accessor for AutomationCellInfo(0);
  swift_storeEnumTagMultiPayload(v6, v46, 0);
  swift_storeEnumTagMultiPayload(v6, v54, 1);
  sub_1003351DC();
  swift_bridgeObjectRetain(v45);
  sub_1000979AC((uint64_t)v6, type metadata accessor for AutomationInfo);
  return sub_10023E964(v43);
}

uint64_t sub_10023E1C8(_QWORD *a1)
{
  uint64_t v2;

  sub_1000DB418(a1, a1[3]);
  v2 = type metadata accessor for SearchResultRowView(0);
  return sub_1005A139C((uint64_t)a1 + *(int *)(v2 + 20));
}

void sub_10023E208(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  __int128 v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;

  v4 = type metadata accessor for SearchResultRowView(0);
  v5 = *(int *)(v4 + 24);
  v6 = a1 + *(int *)(v4 + 20);
  v8 = *(_QWORD *)(v6 + 40);
  v7 = *(_QWORD *)(v6 + 48);
  v43 = v8;
  v44 = v7;
  v9 = *(_QWORD *)(a1 + v5 + 8);
  *(_QWORD *)&v51 = *(_QWORD *)(a1 + v5);
  *((_QWORD *)&v51 + 1) = v9;
  v10 = sub_100114EF8();
  v11 = StringProtocol.localizedStandardRange<A>(of:)(&v51, &type metadata for String, &type metadata for String, v10, v10);
  if ((v13 & 1) != 0)
  {
    v43 = v8;
    v44 = v7;
    swift_bridgeObjectRetain(v7);
    v22 = Text.init<A>(_:)(&v43, &type metadata for String, v10);
    v24 = v23;
    v26 = v25;
    v28 = v27 & 1;
    v29 = static Color.secondary.getter();
    v14 = Text.foregroundColor(_:)(v29, v22, v24, v28, v26);
    v16 = v30;
    v32 = v31;
    v34 = v33;
    swift_release(v29);
    v20 = v32 & 1;
    sub_1000D31B4(v22, v24, v28);
    swift_bridgeObjectRelease();
    KeyPath = swift_getKeyPath(&unk_10098A558);
    *(_QWORD *)&v51 = v14;
    *((_QWORD *)&v51 + 1) = v16;
    v52 = v32 & 1;
    v53 = v34;
    v54 = KeyPath;
    v55 = 1;
    v56 = 0;
    sub_1000D55D4(v14, v16, v32 & 1);
    swift_bridgeObjectRetain(v34);
    swift_retain();
    sub_100527CAC(&v51, (uint64_t)&v43);
  }
  else
  {
    v14 = sub_10023E484(v8, v7, v11, v12);
    v16 = v15;
    v18 = v17;
    v20 = v19 & 1;
    KeyPath = swift_getKeyPath(&unk_10098A558);
    *(_QWORD *)&v51 = v14;
    *((_QWORD *)&v51 + 1) = v16;
    v52 = v20;
    v53 = v18;
    v54 = KeyPath;
    v55 = 1;
    v56 = 0;
    sub_1000D55D4(v14, v16, v20);
    swift_bridgeObjectRetain(v18);
    swift_retain();
    sub_100527C94(&v51, (uint64_t)&v43);
  }
  v41 = v44;
  v42 = v43;
  v35 = v47;
  v39 = v46;
  v40 = v45;
  v36 = v48;
  v37 = v49;
  v38 = v50;
  sub_1000D31B4(v14, v16, v20);
  swift_release(KeyPath);
  swift_bridgeObjectRelease();
  sub_1000D31B4(v14, v16, v20);
  swift_release(KeyPath);
  swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v42;
  *(_QWORD *)(a2 + 8) = v41;
  *(_QWORD *)(a2 + 16) = v40;
  *(_QWORD *)(a2 + 24) = v39;
  *(_QWORD *)(a2 + 32) = v35;
  *(_QWORD *)(a2 + 40) = v36;
  *(_BYTE *)(a2 + 48) = v37;
  *(_BYTE *)(a2 + 49) = v38;
}

uint64_t sub_10023E484(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  swift_bridgeObjectRetain(a2);
  v77 = a1;
  v7 = String.subscript.getter(15, a3);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  swift_bridgeObjectRelease();
  v80 = v7;
  v81 = v9;
  v82 = v11;
  v83 = v13;
  v76 = sub_10023E9AC();
  v14 = Text.init<A>(_:)(&v80, &type metadata for Substring, v76);
  v16 = v15;
  v18 = v17;
  v20 = v19 & 1;
  v21 = static Color.secondary.getter();
  v22 = Text.foregroundColor(_:)(v21, v14, v16, v20, v18);
  v69 = v23;
  v70 = v22;
  v25 = v24;
  v71 = v26;
  swift_release(v21);
  v68 = v25 & 1;
  sub_1000D31B4(v14, v16, v20);
  swift_bridgeObjectRelease();
  v80 = String.subscript.getter(a3, a4);
  v81 = v27;
  v82 = v28;
  v83 = v29;
  v30 = Text.init<A>(_:)(&v80, &type metadata for Substring, v76);
  v32 = v31;
  v34 = v33;
  v36 = v35 & 1;
  v38 = static Color.primary.getter(v37);
  v39 = Text.foregroundColor(_:)(v38, v30, v32, v36, v34);
  v41 = v40;
  LOBYTE(v13) = v42;
  v44 = v43;
  swift_release(v38);
  v45 = v13 & 1;
  sub_1000D31B4(v30, v32, v36);
  swift_bridgeObjectRelease();
  v46 = static Text.+ infix(_:_:)(v70, v69, v68, v71, v39, v41, v45, v44);
  v73 = v47;
  v75 = v48;
  v72 = v49 & 1;
  sub_1000D31B4(v39, v41, v45);
  swift_bridgeObjectRelease();
  sub_1000D31B4(v70, v69, v68);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(a2);
  v80 = sub_1008687CC(a4, v77, a2);
  v81 = v50;
  v82 = v51;
  v83 = v52;
  v53 = Text.init<A>(_:)(&v80, &type metadata for Substring, v76);
  v55 = v54;
  v57 = v56;
  v59 = v58 & 1;
  v60 = static Color.secondary.getter();
  v61 = Text.foregroundColor(_:)(v60, v53, v55, v59, v57);
  v63 = v62;
  LOBYTE(v34) = v64;
  v66 = v65;
  swift_release(v60);
  sub_1000D31B4(v53, v55, v59);
  swift_bridgeObjectRelease();
  v79 = static Text.+ infix(_:_:)(v46, v73, v72, v75, v61, v63, v34 & 1, v66);
  sub_1000D31B4(v61, v63, v34 & 1);
  swift_bridgeObjectRelease();
  sub_1000D31B4(v46, v73, v72);
  swift_bridgeObjectRelease();
  return v79;
}

uint64_t sub_10023E7A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SearchResultRowView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10023E7E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = sub_1000DCC10();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + v4));
  v6 = (id *)(v0 + v4 + *(int *)(v1 + 20));

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = (uint64_t)v6 + *(int *)(sub_10009BEBC() + 32);
  v8 = type metadata accessor for Location(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10023E8C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000DCC10() - 8) + 80);
  return sub_10023E1C8((_QWORD *)(v0 + ((v1 + 16) & ~v1)));
}

void sub_10023E8F0(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_10023E208(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_10023E8F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCD888;
  if (!qword_100BCD888)
  {
    v1 = sub_100075EB0(&qword_100BCD880);
    sub_100157390();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCD888);
  }
  return result;
}

uint64_t sub_10023E964(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BCD878);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10023E9AC()
{
  unint64_t result;

  result = qword_100BCD8C0;
  if (!qword_100BCD8C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_100BCD8C0);
  }
  return result;
}

unint64_t sub_10023E9EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCD8C8;
  if (!qword_100BCD8C8)
  {
    v1 = sub_100075EB0(&qword_100BCD8D0);
    sub_10023EA70();
    sub_10000F1C8((unint64_t *)&qword_100BC6768, type metadata accessor for AutomationInfoViewModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCD8C8);
  }
  return result;
}

unint64_t sub_10023EA70()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  result = qword_100BCD8D8;
  if (!qword_100BCD8D8)
  {
    v1 = sub_100075EB0(&qword_100BCD878);
    v2 = sub_100075EB0(&qword_100BCD868);
    v3 = type metadata accessor for SearchResultButtonStyle(255);
    sub_10003D2DC(&qword_100BCD8B0, &qword_100BCD868);
    v5 = v4;
    sub_10000F1C8(&qword_100BCD8B8, type metadata accessor for SearchResultButtonStyle);
    v7[0] = v2;
    v7[1] = v3;
    v7[2] = v5;
    v7[3] = v6;
    swift_getOpaqueTypeConformance2(v7, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_10000F1C8((unint64_t *)&qword_100BC4E48, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCD8D8);
  }
  return result;
}

unint64_t sub_10023EB78(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100B59470, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t sub_10023EBC0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10023EBEC + 4 * byte_10098A590[a1]))(1768319351, 0xE400000000000000);
}

unint64_t sub_10023EBEC()
{
  return 0xD000000000000010;
}

uint64_t sub_10023EC08()
{
  return 0x6163696669746F6ELL;
}

uint64_t sub_10023EC2C()
{
  return 0x72656874616577;
}

void sub_10023EC44()
{
  sub_10068A9C0();
}

void sub_10023EC50()
{
  unsigned __int8 *v0;

  sub_1004A7464(*v0);
}

void sub_10023EC58()
{
  sub_1001D8608();
}

void sub_10023EC60(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1001DA074(a1, *v1);
}

unint64_t sub_10023EC68@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10023EB78(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10023EC94@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10023EBC0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10023ECBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10023F220();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10023ED18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10023F220();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_10023ED64(char a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BCD8E8);
  __chkstk_darwin(v2);
  __asm { BR              X10 }
}

uint64_t sub_10023EDD8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v4 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  ShortDescription.init(name:_:)(1768319351, 0xE400000000000000, v4, &type metadata for SystemSettingLocation);
  v1[3] = v0;
  v1[4] = sub_10023F00C();
  v5 = sub_10005F164(v1);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v3 + 32))(v5, v2, v0);
}

void sub_10023EF5C()
{
  char *v0;

  sub_10023ED64(*v0);
}

uint64_t sub_10023EF64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10023F050();
  return ShortDescribable.description.getter(a1, v2);
}

void sub_10023EF8C(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  char v4;

  static NotificationAuthorizationState.read(from:)(a1);
  if (!v2)
    *a2 = v4;
}

void sub_10023EFB4(uint64_t a1)
{
  char *v1;

  NotificationAuthorizationState.write(to:)(a1, *v1);
}

unint64_t sub_10023EFD0()
{
  unint64_t result;

  result = qword_100BCD8E0;
  if (!qword_100BCD8E0)
  {
    result = swift_getWitnessTable(&unk_10098A5F4, &type metadata for SystemSettingLocation);
    atomic_store(result, (unint64_t *)&qword_100BCD8E0);
  }
  return result;
}

unint64_t sub_10023F00C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCD8F0;
  if (!qword_100BCD8F0)
  {
    v1 = sub_100075EB0(&qword_100BCD8E8);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCD8F0);
  }
  return result;
}

unint64_t sub_10023F050()
{
  unint64_t result;

  result = qword_100BCD8F8;
  if (!qword_100BCD8F8)
  {
    result = swift_getWitnessTable(&unk_10098A61C, &type metadata for SystemSettingLocation);
    atomic_store(result, (unint64_t *)&qword_100BCD8F8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NotificationAuthorizationState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 3) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v5 = v6 - 4;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemSettingLocation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10023F160 + 4 * byte_10098A59D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10023F194 + 4 * byte_10098A598[v4]))();
}

uint64_t sub_10023F194(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10023F19C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10023F1A4);
  return result;
}

uint64_t sub_10023F1B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10023F1B8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10023F1BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10023F1C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SystemSettingLocation()
{
  return &type metadata for SystemSettingLocation;
}

unint64_t sub_10023F1E4()
{
  unint64_t result;

  result = qword_100BCD900;
  if (!qword_100BCD900)
  {
    result = swift_getWitnessTable(&unk_10098A6E0, &type metadata for SystemSettingLocation);
    atomic_store(result, (unint64_t *)&qword_100BCD900);
  }
  return result;
}

unint64_t sub_10023F220()
{
  unint64_t result;

  result = qword_100BCD908;
  if (!qword_100BCD908)
  {
    result = swift_getWitnessTable(&unk_10098A668, &type metadata for SystemSettingLocation);
    atomic_store(result, (unint64_t *)&qword_100BCD908);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PolarType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10023F2A8 + 4 * byte_10098A75D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10023F2DC + 4 * byte_10098A758[v4]))();
}

uint64_t sub_10023F2DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10023F2E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10023F2ECLL);
  return result;
}

uint64_t sub_10023F2F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10023F300);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10023F304(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10023F30C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PolarType()
{
  return &type metadata for PolarType;
}

unint64_t sub_10023F32C()
{
  unint64_t result;

  result = qword_100BCD910[0];
  if (!qword_100BCD910[0])
  {
    result = swift_getWitnessTable(&unk_10098A7AC, &type metadata for PolarType);
    atomic_store(result, qword_100BCD910);
  }
  return result;
}

id sub_10023F368()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;

  v1 = *(void **)(v0 + 8);
  if (v1)
  {
    v2 = *(id *)(v0 + 8);
  }
  else
  {
    v3 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleSubheadline);
    *(_QWORD *)(v0 + 8) = v3;
    v2 = v3;
    v1 = 0;
  }
  v4 = v1;
  return v2;
}

uint64_t type metadata accessor for ElevatedAqiContentView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ElevatedAqiContentView);
}

uint64_t sub_10023F3E0(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100AAD6E4, 1);
}

uint64_t sub_10023F414@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  void *v24;
  uint64_t v25;
  uint64_t (*v26)(_QWORD, _QWORD);
  uint64_t WitnessTable;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t (*v51)(_QWORD, _QWORD);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  _QWORD v63[2];
  _QWORD v64[2];
  _QWORD v65[4];
  _BYTE v66[456];
  _QWORD v67[58];

  v62 = a4;
  v55 = a3;
  v60 = a7;
  v67[0] = a5;
  v67[1] = a5;
  v67[2] = a5;
  v67[3] = a5;
  v10 = a2;
  v11 = a2 & 0x100;
  v67[4] = a5;
  v67[5] = a5;
  v67[6] = a5;
  v67[7] = a5;
  v12 = sub_1000BBB64(255, 8, (uint64_t)v67);
  v53 = sub_1000AE86C(v12);
  v13 = type metadata accessor for Group(0, v53);
  v14 = *(_QWORD *)(v13 - 8);
  v56 = v13;
  v57 = v14;
  __chkstk_darwin(v13);
  sub_1000986FC();
  v59 = v15;
  __chkstk_darwin(v16);
  v58 = (char *)&v48 - v17;
  v67[0] = a5;
  v67[1] = type metadata accessor for Optional(255, a5);
  v67[2] = a5;
  v67[3] = a5;
  v67[4] = a5;
  v67[5] = a5;
  v18 = sub_1000BBB64(255, 6, (uint64_t)v67);
  v51 = (uint64_t (*)(_QWORD, _QWORD))sub_1000AE86C(v18);
  v54 = type metadata accessor for Group(0, v51);
  v52 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  sub_1000986FC();
  v20 = v19;
  __chkstk_darwin(v21);
  v61 = (char *)&v48 - v22;
  if (v10)
  {
    if (v10 == 1)
    {
      if (v11)
      {
        v23 = &qword_100BDA208;
        goto LABEL_11;
      }
    }
    else if (v11)
    {
      v23 = &qword_100BDA598;
      goto LABEL_11;
    }
    v23 = &qword_100BDA3D0;
    goto LABEL_11;
  }
  if (v11)
    v23 = &qword_100BD9E78;
  else
    v23 = &qword_100BDA040;
LABEL_11:
  memcpy(v67, v23, 0x1C8uLL);
  v24 = memcpy(v66, v67, sizeof(v66));
  v50 = &v48;
  __chkstk_darwin(v24);
  *(&v48 - 8) = a5;
  *(&v48 - 7) = a6;
  v48 = a1;
  *(&v48 - 6) = a1;
  *((_BYTE *)&v48 - 40) = v10;
  HIDWORD(v49) = v11 >> 8;
  *((_BYTE *)&v48 - 39) = BYTE1(v11);
  v25 = v62;
  *(&v48 - 4) = v55;
  *(&v48 - 3) = v25;
  *(&v48 - 2) = (uint64_t)v66;
  v26 = v51;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v51);
  Group<A>.init(content:)(sub_10024081C, &v48 - 10, v26, WitnessTable);
  v65[3] = WitnessTable;
  v28 = v54;
  v50 = (uint64_t *)swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v54);
  sub_1000B2074(v20, v28, v50);
  v29 = v52;
  v51 = *(uint64_t (**)(_QWORD, _QWORD))(v52 + 8);
  v30 = v51(v20, v28);
  __chkstk_darwin(v30);
  *(&v48 - 8) = a5;
  *(&v48 - 7) = a6;
  *(&v48 - 6) = v48;
  *((_BYTE *)&v48 - 40) = v10;
  *((_BYTE *)&v48 - 39) = BYTE4(v49);
  v31 = v62;
  *(&v48 - 4) = v32;
  *(&v48 - 3) = v31;
  *(&v48 - 2) = (uint64_t)v66;
  v33 = v53;
  v34 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v53);
  v35 = v59;
  Group<A>.init(content:)(sub_100240828, &v48 - 10, v33, v34);
  v65[2] = v34;
  v36 = v56;
  v37 = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v56);
  v38 = (uint64_t)v58;
  sub_1000B2074(v35, v36, v37);
  v39 = v57;
  sub_1000C3530(v35);
  v40 = *(void (**)(uint64_t, char *, uint64_t))(v29 + 16);
  v41 = v61;
  v40(v20, v61, v28);
  v65[0] = v20;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v35, v38, v36);
  v65[1] = v35;
  v64[0] = v28;
  v64[1] = v36;
  v63[0] = v50;
  v63[1] = v37;
  sub_10052800C((uint64_t)v65, 2, (uint64_t)v64, (uint64_t)v63, v42, v43, v44, v45, v48, v49, (uint64_t)v50, (uint64_t)v51, v52, v53, v54, v55, v56, v57);
  sub_1000C3530(v38);
  v46 = v51;
  v51(v41, v28);
  sub_1000C3530(v35);
  return v46(v20, v28);
}

uint64_t sub_10023F834@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X2>, uint64_t *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  void (*v65)(uint64_t, char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t);
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t);
  void (*v90)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _BYTE v107[24];
  _BYTE v108[40];
  _QWORD v109[4];
  char v110;

  v98 = a5;
  v90 = a2;
  v88 = a6;
  v9 = sub_1000BA294(&qword_100BC4A98);
  __chkstk_darwin(v9);
  v11 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = type metadata accessor for Optional(0, a4);
  v93 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v102 = (uint64_t)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v99 = (uint64_t)&v80 - v14;
  v82 = type metadata accessor for LocationComponentContainerViewModel(0);
  __chkstk_darwin(v82);
  v80 = (uint64_t)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v80 - v17;
  v19 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(v20);
  v87 = (uint64_t)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v96 = (char *)&v80 - v23;
  __chkstk_darwin(v24);
  v95 = (char *)&v80 - v25;
  __chkstk_darwin(v26);
  v94 = (char *)&v80 - v27;
  __chkstk_darwin(v28);
  v86 = (uint64_t)&v80 - v29;
  __chkstk_darwin(v30);
  v84 = (uint64_t)&v80 - v31;
  __chkstk_darwin(v32);
  v92 = (char *)&v80 - v33;
  __chkstk_darwin(v34);
  v101 = (char *)&v80 - v35;
  __chkstk_darwin(v36);
  v38 = (char *)&v80 - v37;
  __chkstk_darwin(v39);
  v41 = (char *)&v80 - v40;
  sub_100080E30(a1 + OBJC_IVAR____TtCV7Weather18ElevatedAqiContent8_Storage_airQuality, (uint64_t)v18);
  v90((uint64_t)v18, *a3, a3[1], a3[2], a3[3]);
  v81 = v18;
  sub_100080DF4((uint64_t)v18);
  v91 = v41;
  sub_1000B2074(v38, a4, v98);
  v83 = v19;
  v42 = *(void (**)(char *, uint64_t))(v19 + 8);
  v100 = v38;
  v43 = v42;
  v42(v38, a4);
  v85 = a1;
  v44 = a1 + OBJC_IVAR____TtCV7Weather18ElevatedAqiContent8_Storage_map;
  swift_beginAccess(a1 + OBJC_IVAR____TtCV7Weather18ElevatedAqiContent8_Storage_map, v107, 0, 0);
  sub_1001A1D04(v44, (uint64_t)v11);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v82) == 1)
  {
    sub_1001A1D4C((uint64_t)v11);
  }
  else
  {
    v45 = v80;
    sub_1001A1D8C((uint64_t)v11, v80);
    sub_1001A1DD0((uint64_t)(a3 + 24), (uint64_t)v108);
    sub_1001A1DD0((uint64_t)v108, (uint64_t)v109);
    if (v110 != 1)
    {
      v48 = v101;
      v47 = v90;
      v90(v45, v109[0], v109[1], v109[2], v109[3]);
      sub_100080DF4(v45);
      v49 = (uint64_t)v100;
      sub_1000B2074(v48, a4, v98);
      v43(v48, a4);
      sub_1000B1100(v49, a4, v102);
      v43((char *)v49, a4);
      v46 = 0;
      goto LABEL_7;
    }
    sub_100080DF4(v45);
  }
  v46 = 1;
  v47 = v90;
LABEL_7:
  v50 = v102;
  _s7Weather24LocationCompositionStateOwst_0(v102, v46, 1, a4);
  v51 = v98;
  sub_100158984(v50, a4, v99);
  v90 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v93 + 8);
  ((void (*)(uint64_t, uint64_t))v90)(v50, v97);
  v52 = v85;
  v53 = (uint64_t)v81;
  sub_100080E30(*(_QWORD *)(v85 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, (uint64_t)v81);
  v54 = v101;
  v47(v53, a3[16], a3[17], a3[18], a3[19]);
  sub_100080DF4(v53);
  sub_1000B2074(v54, a4, v51);
  v89 = v43;
  v43(v54, a4);
  v55 = v52;
  sub_100080E30(*(_QWORD *)(v52 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v53);
  v56 = v92;
  v47(v53, a3[8], a3[9], a3[10], a3[11]);
  sub_100080DF4(v53);
  sub_1000B2074(v56, a4, v51);
  v89(v56, a4);
  sub_100080E30(*(_QWORD *)(v55 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex, v53);
  v57 = v84;
  v47(v53, a3[45], a3[46], a3[47], a3[48]);
  sub_100080DF4(v53);
  sub_1000B2074(v57, a4, v51);
  v58 = (void (*)(uint64_t, uint64_t))v89;
  v89((char *)v57, a4);
  sub_100080E30(*(_QWORD *)(v55 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, v53);
  v59 = a3[41];
  v60 = a3[42];
  v61 = a3[43];
  v62 = a3[44];
  v63 = v86;
  v47(v53, v59, v60, v61, v62);
  sub_100080DF4(v53);
  sub_1000B2074(v63, a4, v51);
  v58(v63, a4);
  v64 = v58;
  v65 = *(void (**)(uint64_t, char *, uint64_t))(v83 + 16);
  v65(v63, v91, a4);
  v106[0] = v63;
  v66 = v63;
  v67 = v102;
  v68 = v97;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 16))(v102, v99, v97);
  v106[1] = v67;
  v69 = v94;
  v65((uint64_t)v94, v100, a4);
  v106[2] = v69;
  v70 = v95;
  v65((uint64_t)v95, v101, a4);
  v106[3] = v70;
  v71 = v96;
  v72 = v92;
  v65((uint64_t)v96, v92, a4);
  v106[4] = v71;
  v73 = v87;
  v65(v87, (char *)v57, a4);
  v106[5] = v73;
  v105[0] = a4;
  v105[1] = v68;
  v105[2] = a4;
  v105[3] = a4;
  v105[4] = a4;
  v105[5] = a4;
  v103 = v51;
  v104[0] = v51;
  v104[1] = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v68);
  v104[2] = v51;
  v104[3] = v51;
  v104[4] = v51;
  v104[5] = v51;
  sub_10052800C((uint64_t)v106, 6, (uint64_t)v105, (uint64_t)v104, v74, v75, v76, v77, v80, (uint64_t)v81, v82, v83, v84, v85, v86, v87, v88, (uint64_t)v89);
  v64(v57, a4);
  v64((uint64_t)v72, a4);
  v64((uint64_t)v101, a4);
  v64((uint64_t)v100, a4);
  v78 = (void (*)(uint64_t, uint64_t))v90;
  ((void (*)(uint64_t, uint64_t))v90)(v99, v68);
  v64((uint64_t)v91, a4);
  v64(v73, a4);
  v64((uint64_t)v96, a4);
  v64((uint64_t)v95, a4);
  v64((uint64_t)v94, a4);
  v78(v102, v68);
  return ((uint64_t (*)(uint64_t, uint64_t))v64)(v66, a4);
}

uint64_t sub_10023FFAC@<X0>(uint64_t a1@<X0>, void (*a2)(char *, _QWORD, _QWORD, _QWORD, _QWORD)@<X2>, _QWORD *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  _QWORD v93[8];
  _QWORD v94[8];
  _QWORD v95[8];

  v78 = a6;
  v11 = type metadata accessor for LocationComponentContainerViewModel(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(v14);
  v77 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v76 = (char *)&v74 - v17;
  __chkstk_darwin(v18);
  v92 = (char *)&v74 - v19;
  __chkstk_darwin(v20);
  v91 = (char *)&v74 - v21;
  __chkstk_darwin(v22);
  v89 = (char *)&v74 - v23;
  __chkstk_darwin(v24);
  v87 = (char *)&v74 - v25;
  __chkstk_darwin(v26);
  v86 = (char *)&v74 - v27;
  __chkstk_darwin(v28);
  v85 = (char *)&v74 - v29;
  __chkstk_darwin(v30);
  v75 = (uint64_t)&v74 - v31;
  __chkstk_darwin(v32);
  v83 = (char *)&v74 - v33;
  __chkstk_darwin(v34);
  v81 = (char *)&v74 - v35;
  __chkstk_darwin(v36);
  v79 = (char *)&v74 - v37;
  __chkstk_darwin(v38);
  v80 = (char *)&v74 - v39;
  __chkstk_darwin(v40);
  v42 = (char *)&v74 - v41;
  __chkstk_darwin(v43);
  v45 = (char *)&v74 - v44;
  __chkstk_darwin(v46);
  v88 = (char *)&v74 - v47;
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind, (uint64_t)v13);
  a2(v13, a3[53], a3[54], a3[55], a3[56]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v45, a4, a5);
  v48 = *(void (**)(char *, uint64_t))(v90 + 8);
  v84 = v45;
  v48(v45, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)v13);
  a2(v13, a3[37], a3[38], a3[39], a3[40]);
  sub_100080DF4((uint64_t)v13);
  v49 = a5;
  sub_1000B2074(v42, a4, a5);
  v82 = v42;
  v48(v42, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike, (uint64_t)v13);
  v50 = (uint64_t)v80;
  a2(v13, a3[12], a3[13], a3[14], a3[15]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v50, a4, v49);
  v48((char *)v50, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)v13);
  v51 = (uint64_t)v79;
  a2(v13, a3[20], a3[21], a3[22], a3[23]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v51, a4, v49);
  v48((char *)v51, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility, (uint64_t)v13);
  v52 = (uint64_t)v81;
  a2(v13, a3[49], a3[50], a3[51], a3[52]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v52, a4, v49);
  v48((char *)v52, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, (uint64_t)v13);
  v53 = (uint64_t)v83;
  a2(v13, a3[33], a3[34], a3[35], a3[36]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v53, a4, v49);
  v48((char *)v53, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, (uint64_t)v13);
  v54 = v75;
  a2(v13, a3[29], a3[30], a3[31], a3[32]);
  sub_100080DF4((uint64_t)v13);
  v55 = v54;
  v74 = v49;
  sub_1000B2074(v54, a4, v49);
  v48((char *)v54, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, (uint64_t)v13);
  v56 = v85;
  a2(v13, a3[4], a3[5], a3[6], a3[7]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v56, a4, v49);
  v48(v56, a4);
  v57 = *(void (**)(char *, char *, uint64_t))(v90 + 16);
  v57(v56, v88, a4);
  v95[0] = v56;
  v58 = v86;
  v57(v86, v84, a4);
  v95[1] = v58;
  v59 = v87;
  v57(v87, v82, a4);
  v95[2] = v59;
  v60 = v89;
  v61 = (uint64_t)v80;
  v57(v89, v80, a4);
  v95[3] = v60;
  v62 = v91;
  v63 = (uint64_t)v79;
  v57(v91, v79, a4);
  v95[4] = v62;
  v64 = v92;
  v65 = (uint64_t)v81;
  v57(v92, v81, a4);
  v95[5] = v64;
  v66 = (uint64_t)v76;
  v67 = (uint64_t)v83;
  v57(v76, v83, a4);
  v95[6] = v66;
  v68 = (uint64_t)v77;
  v57(v77, (char *)v55, a4);
  v95[7] = v68;
  v94[0] = a4;
  v94[1] = a4;
  v94[2] = a4;
  v94[3] = a4;
  v94[4] = a4;
  v94[5] = a4;
  v94[6] = a4;
  v94[7] = a4;
  v93[0] = v74;
  v93[1] = v74;
  v93[2] = v74;
  v93[3] = v74;
  v93[4] = v74;
  v93[5] = v74;
  v93[6] = v74;
  v93[7] = v74;
  sub_10052800C((uint64_t)v95, 8, (uint64_t)v94, (uint64_t)v93, v69, v70, v71, v72, v74, v75, (uint64_t)v76, (uint64_t)v77, v78, (uint64_t)v79, (uint64_t)v80, (uint64_t)v81, (uint64_t)v82, (uint64_t)v83);
  v48((char *)v55, a4);
  v48((char *)v67, a4);
  v48((char *)v65, a4);
  v48((char *)v63, a4);
  v48((char *)v61, a4);
  v48(v82, a4);
  v48(v84, a4);
  v48(v88, a4);
  v48((char *)v68, a4);
  v48((char *)v66, a4);
  v48(v92, a4);
  v48(v91, a4);
  v48(v89, a4);
  v48(v87, a4);
  v48(v86, a4);
  return ((uint64_t (*)(char *, uint64_t))v48)(v85, a4);
}

uint64_t sub_1002407F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int16 v3;

  if (*(_BYTE *)(v2 + 9))
    v3 = 256;
  else
    v3 = 0;
  return sub_10023F414(*(_QWORD *)v2, v3 | *(unsigned __int8 *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t sub_10024081C()
{
  return sub_1001A1CD4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10023F834);
}

uint64_t sub_100240828()
{
  return sub_1001A1CD4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10023FFAC);
}

double sub_100240834(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  double result;
  _OWORD v11[2];
  uint64_t v12;

  v3 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v3);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(uint64_t (**)(uint64_t))(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v8 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v5, a1, v8);
  v9 = type metadata accessor for ConditionDetailViewAction(0);
  swift_storeEnumTagMultiPayload(v5, v9, 0);
  swift_storeEnumTagMultiPayload(v5, v3, 11);
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  swift_retain();
  sub_1000A5EBC((uint64_t)v5, (uint64_t)v11, v7);
  sub_100159C94((uint64_t)v11);
  sub_1000A0AA4((uint64_t)v5);
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

uint64_t SidebarVisibilityMonitor.__deallocating_deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for DayPickerInteractor()
{
  return objc_opt_self(_TtC7Weather19DayPickerInteractor);
}

ValueMetadata *type metadata accessor for LocationViewerTracker()
{
  return &type metadata for LocationViewerTracker;
}

_QWORD *sub_100240980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8, _QWORD *a9)
{
  _QWORD *v9;
  _QWORD *v10;
  __n128 v16;

  v10 = v9;
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = a4;
  v10[6] = a5;
  v10[7] = a6;
  sub_100043CA8((uint64_t)a7, (uint64_t)(v10 + 8));
  sub_100043CA8((uint64_t)a8, (uint64_t)(v10 + 13));
  sub_100043CA8((uint64_t)a9, (uint64_t)(v10 + 18));
  sub_1000DB418(a7, a7[3]);
  sub_100136218();
  swift_retain();
  swift_retain();
  swift_retain();
  v16 = swift_retain();
  dispatch thunk of SavedLocationsManagerType.addObserver(_:)(v16);
  swift_release(a4);
  swift_release(a2);
  swift_release(a6);
  swift_release(v10);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a9);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a8);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a7);
  return v10;
}

double sub_100240A98(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  double result;

  v2 = v1;
  v4 = v1[21];
  v5 = v1[22];
  sub_1000DB418(v1 + 18, v4);
  v6 = dispatch thunk of LocationDisplayContextManagerType.fetchDisplayContextByLocation()(v4, v5);
  v7 = (_QWORD *)swift_allocObject(&unk_100B65F90, 40, 7);
  v7[2] = v2;
  v7[3] = a1;
  v7[4] = v6;
  swift_retain();
  swift_bridgeObjectRetain(a1);
  asyncMain(block:)(sub_100240CDC, v7);
  *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  return result;
}

double sub_100240B30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  double result;
  _OWORD v13[2];
  uint64_t v14;

  v6 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v6);
  v8 = (_QWORD *)((char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(uint64_t (**)(uint64_t))(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  *v8 = a2;
  v8[1] = a3;
  v11 = type metadata accessor for LocationsAction(0);
  swift_storeEnumTagMultiPayload(v8, v11, 2);
  swift_storeEnumTagMultiPayload(v8, v6, 3);
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  swift_retain();
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  sub_1000A5EBC((uint64_t)v8, (uint64_t)v13, v10);
  sub_100159C94((uint64_t)v13);
  sub_1000A0AA4((uint64_t)v8);
  *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  return result;
}

_QWORD *SavedLocationsMonitor.deinit()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[3];
  swift_release(v0[5]);
  swift_release(v1);
  swift_release(v0[7]);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 8);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 13);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 18);
  return v0;
}

uint64_t SavedLocationsMonitor.__deallocating_deinit()
{
  uint64_t v0;

  SavedLocationsMonitor.deinit();
  return swift_deallocClassInstance(v0, 184, 7);
}

void sub_100240C94()
{
  ApplicationStateMonitor.applicationDidEnterBackground()();
}

double SavedLocationsMonitor.savedLocationsDidUpdate(manager:savedLocations:)(uint64_t a1, uint64_t a2)
{
  return sub_100240A98(a2);
}

uint64_t sub_100240CA8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

double sub_100240CDC()
{
  uint64_t *v0;

  return sub_100240B30(v0[2], v0[3], v0[4]);
}

_QWORD *sub_100240CE8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v13 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2))
    {
      case 0u:
        v8 = type metadata accessor for URL(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = sub_1000BA294(&qword_100BC5FE8);
        *((_BYTE *)a1 + *(int *)(v9 + 48)) = *((_BYTE *)a2 + *(int *)(v9 + 48));
        v10 = a1;
        v11 = a3;
        v12 = 0;
        goto LABEL_9;
      case 1u:
        v14 = type metadata accessor for WeatherMapOverlayKind(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v10 = a1;
        v11 = a3;
        v12 = 1;
        goto LABEL_9;
      case 2u:
        v15 = type metadata accessor for DetailCondition(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
        v16 = sub_1000BA294(&qword_100BC5FF8);
        *((_BYTE *)a1 + *(int *)(v16 + 48)) = *((_BYTE *)a2 + *(int *)(v16 + 48));
        v10 = a1;
        v11 = a3;
        v12 = 2;
        goto LABEL_9;
      case 4u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v17 = *(int *)(sub_1000BA294(&qword_100BC5FF0) + 48);
        v18 = (char *)a1 + v17;
        v19 = (char *)a2 + v17;
        v20 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
        v10 = a1;
        v11 = a3;
        v12 = 4;
LABEL_9:
        swift_storeEnumTagMultiPayload(v10, v11, v12);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

_BYTE *sub_100240E98(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;

  if (a1 != a2)
  {
    sub_100094BF8((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2))
    {
      case 0u:
        v6 = type metadata accessor for URL(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        v7 = sub_1000BA294(&qword_100BC5FE8);
        a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
        v8 = a1;
        v9 = a3;
        v10 = 0;
        goto LABEL_8;
      case 1u:
        v11 = type metadata accessor for WeatherMapOverlayKind(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        v8 = a1;
        v9 = a3;
        v10 = 1;
        goto LABEL_8;
      case 2u:
        v12 = type metadata accessor for DetailCondition(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        v13 = sub_1000BA294(&qword_100BC5FF8);
        a1[*(int *)(v13 + 48)] = a2[*(int *)(v13 + 48)];
        v8 = a1;
        v9 = a3;
        v10 = 2;
        goto LABEL_8;
      case 4u:
        *a1 = *a2;
        v14 = *(int *)(sub_1000BA294(&qword_100BC5FF0) + 48);
        v15 = &a1[v14];
        v16 = &a2[v14];
        v17 = type metadata accessor for Location(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
        v8 = a1;
        v9 = a3;
        v10 = 4;
LABEL_8:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

_BYTE *sub_100241030(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;

  switch(swift_getEnumCaseMultiPayload(a2))
  {
    case 0u:
      v6 = type metadata accessor for URL(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = sub_1000BA294(&qword_100BC5FE8);
      a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
      v8 = a1;
      v9 = a3;
      v10 = 0;
      goto LABEL_7;
    case 1u:
      v11 = type metadata accessor for WeatherMapOverlayKind(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      v8 = a1;
      v9 = a3;
      v10 = 1;
      goto LABEL_7;
    case 2u:
      v12 = type metadata accessor for DetailCondition(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
      v13 = sub_1000BA294(&qword_100BC5FF8);
      a1[*(int *)(v13 + 48)] = a2[*(int *)(v13 + 48)];
      v8 = a1;
      v9 = a3;
      v10 = 2;
      goto LABEL_7;
    case 4u:
      *a1 = *a2;
      v14 = *(int *)(sub_1000BA294(&qword_100BC5FF0) + 48);
      v15 = &a1[v14];
      v16 = &a2[v14];
      v17 = type metadata accessor for Location(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
      v8 = a1;
      v9 = a3;
      v10 = 4;
LABEL_7:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_BYTE *sub_1002411B8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;

  if (a1 != a2)
  {
    sub_100094BF8((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2))
    {
      case 0u:
        v6 = type metadata accessor for URL(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
        v7 = sub_1000BA294(&qword_100BC5FE8);
        a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
        v8 = a1;
        v9 = a3;
        v10 = 0;
        goto LABEL_8;
      case 1u:
        v11 = type metadata accessor for WeatherMapOverlayKind(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
        v8 = a1;
        v9 = a3;
        v10 = 1;
        goto LABEL_8;
      case 2u:
        v12 = type metadata accessor for DetailCondition(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
        v13 = sub_1000BA294(&qword_100BC5FF8);
        a1[*(int *)(v13 + 48)] = a2[*(int *)(v13 + 48)];
        v8 = a1;
        v9 = a3;
        v10 = 2;
        goto LABEL_8;
      case 4u:
        *a1 = *a2;
        v14 = *(int *)(sub_1000BA294(&qword_100BC5FF0) + 48);
        v15 = &a1[v14];
        v16 = &a2[v14];
        v17 = type metadata accessor for Location(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
        v8 = a1;
        v9 = a3;
        v10 = 4;
LABEL_8:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t *sub_100241350(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = type metadata accessor for Location(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    v7 = *(int *)(sub_1000BA294(&qword_100BC5FC0) + 48);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for LocationOfInterest(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  }
  return a1;
}

uint64_t sub_100241400(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  v3 = a1 + *(int *)(sub_1000BA294(&qword_100BC5FC0) + 48);
  v4 = type metadata accessor for LocationOfInterest(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
}

uint64_t sub_100241464(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  v5 = *(int *)(sub_1000BA294(&qword_100BC5FC0) + 48);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for LocationOfInterest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  return a1;
}

uint64_t sub_1002414E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  v5 = *(int *)(sub_1000BA294(&qword_100BC5FC0) + 48);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for LocationOfInterest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t sub_10024156C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  v5 = *(int *)(sub_1000BA294(&qword_100BC5FC0) + 48);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for LocationOfInterest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t sub_1002415F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  v5 = *(int *)(sub_1000BA294(&qword_100BC5FC0) + 48);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for LocationOfInterest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(v6, v7, v8);
  return a1;
}

uint64_t sub_100241674(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BC5FC0);
  return _s7Weather24LocationCompositionStateOwet_0(a1, a2, v4);
}

uint64_t sub_1002416AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1000BA294(&qword_100BC5FC0);
  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, a3, v6);
}

uint64_t type metadata accessor for LocationFooterAction(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100BCDC28, (uint64_t)&nominal type descriptor for LocationFooterAction);
}

uint64_t sub_100241708(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD v7[8];

  v2 = type metadata accessor for Location(319);
  if (v3 <= 0x3F)
  {
    v4 = type metadata accessor for LocationOfInterest(319);
    if (v5 > 0x3F)
    {
      return v4;
    }
    else
    {
      swift_getTupleTypeLayout2(v7, *(_QWORD *)(v2 - 8) + 64, *(_QWORD *)(v4 - 8) + 64);
      swift_initEnumMetadataSingleCase(a1, 256, v7);
      v2 = 0;
      *(_DWORD *)(*(_QWORD *)(a1 - 8) + 84) = v7[5];
    }
  }
  return v2;
}

void sub_1002417A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  void (*v31)(uint64_t, uint64_t);
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v36 = a2;
  v3 = type metadata accessor for LocationOfInterest(0);
  v35 = *(_QWORD *)(v3 - 8);
  sub_10009D98C();
  __chkstk_darwin(v4);
  sub_1000986FC();
  v34 = v5;
  __chkstk_darwin(v6);
  v8 = (char *)&v33 - v7;
  v9 = type metadata accessor for Location(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v33 - v14;
  sub_1000BA294(&qword_100BCDC40);
  sub_10009D98C();
  __chkstk_darwin(v16);
  sub_100098728();
  v19 = v18 - v17;
  v21 = v18 - v17 + *(int *)(v20 + 48);
  sub_1000A6594(a1, v18 - v17, type metadata accessor for LocationFooterAction);
  sub_1000A6594(v36, v21, type metadata accessor for LocationFooterAction);
  v22 = *(int *)(sub_1000BA294(&qword_100BC5FC0) + 48);
  v23 = v19 + v22;
  v24 = v21 + v22;
  v36 = v10;
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 32);
  v26 = v19;
  v27 = v35;
  v25(v15, v26, v9);
  v28 = v21;
  v29 = v34;
  v25(v12, v28, v9);
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 32);
  v30(v8, v23, v3);
  v30(v29, v24, v3);
  if ((static Location.== infix(_:_:)(v15, v12) & 1) != 0)
    static LocationOfInterest.== infix(_:_:)(v8, v29);
  v31 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v31((uint64_t)v29, v3);
  v31((uint64_t)v8, v3);
  v32 = *(void (**)(char *, uint64_t))(v36 + 8);
  v32(v12, v9);
  v32(v15, v9);
  sub_100098640();
}

uint64_t sub_1002419B0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BCDC38);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for Map(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Map(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 17) = v3;
  return result;
}

uint64_t sub_100241A40(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100241A5C(uint64_t result, int a2)
{
  char v2;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    v2 = 1;
  }
  else
  {
    v2 = 0;
  }
  *(_BYTE *)(result + 16) = v2;
  return result;
}

ValueMetadata *type metadata accessor for Map()
{
  return &type metadata for Map;
}

uint64_t sub_100241A8C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)(v4 + 185) = a4;
  *(_QWORD *)(v4 + 248) = a2;
  *(_QWORD *)(v4 + 256) = a3;
  *(_QWORD *)(v4 + 240) = a1;
  v5 = type metadata accessor for WeatherMapPerformanceTestConditions(0);
  *(_QWORD *)(v4 + 264) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 272) = v6;
  *(_QWORD *)(v4 + 280) = sub_1000BA400(v6);
  v7 = type metadata accessor for Location(0);
  *(_QWORD *)(v4 + 288) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 296) = v8;
  *(_QWORD *)(v4 + 304) = sub_1000BA400(v8);
  v9 = type metadata accessor for SavedLocation(0);
  *(_QWORD *)(v4 + 312) = v9;
  *(_QWORD *)(v4 + 320) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v4 + 328) = sub_1000BA410();
  *(_QWORD *)(v4 + 336) = sub_1000BA410();
  v10 = sub_1000BA294(&qword_100BC35F8);
  *(_QWORD *)(v4 + 344) = sub_1000BA400(*(_QWORD *)(v10 - 8));
  sub_1000BA294(&qword_100BCDC58);
  *(_QWORD *)(v4 + 352) = sub_1000BA410();
  *(_QWORD *)(v4 + 360) = sub_1000BA410();
  *(_QWORD *)(v4 + 368) = sub_1000BA410();
  *(_QWORD *)(v4 + 376) = sub_1000BA410();
  v11 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 384) = static MainActor.shared.getter(v11);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(v11);
  return swift_task_switch(sub_100241BBC, v12, v13);
}

uint64_t sub_100241BBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  os_log_type_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v83 = v0 + 232;
  swift_release(*(_QWORD *)(v0 + 384));
  if (qword_100BC24D8 != -1)
    swift_once(&qword_100BC24D8, sub_1006F39A0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_1000AECD4(v1, (uint64_t)qword_100CAF270);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_BYTE *)(v0 + 185);
    v7 = *(_QWORD *)(v0 + 248);
    v6 = *(_QWORD *)(v0 + 256);
    v8 = (uint8_t *)sub_100098710(12);
    v9 = sub_100098710(32);
    *(_DWORD *)v8 = 136315138;
    v84 = v9;
    *(_QWORD *)(v0 + 168) = v7;
    *(_QWORD *)(v0 + 176) = v6;
    *(_BYTE *)(v0 + 184) = v5 & 1;
    v10 = String.init<A>(describing:)(v0 + 168);
    *(_QWORD *)(v0 + 232) = sub_1000CE1C8(v10, v11, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v83, v0 + 240);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Performing Map instruction: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1);
    sub_1000986F0(v9);
    sub_1000986F0((uint64_t)v8);
  }

  v12 = *(_QWORD *)(v0 + 368);
  v13 = *(_QWORD *)(v0 + 264);
  CurrentValueSubject.value.getter(v14);
  v15 = _s7Weather24LocationCompositionStateOwet_0(v12, 1, v13);
  v16 = *(_QWORD *)(v0 + 368);
  if (v15 == 1)
  {
    v17 = *(_QWORD *)(v0 + 344);
    _s7Weather24LocationCompositionStateOwst_0(v17, 1, 1, *(_QWORD *)(v0 + 288));
    WeatherMapPerformanceTestConditions.init(location:zoomLevel:)(v17, 0, 1);
    sub_100021A68(v16, &qword_100BCDC58);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 272) + 32))(*(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 264));
  }
  v18 = *(_BYTE *)(v0 + 185);
  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v0 + 376), 0, 1, *(_QWORD *)(v0 + 264));
  v19 = sub_1000CC958();
  v20 = static os_log_type_t.default.getter(v19);
  v21 = os_log_type_enabled(v19, v20);
  if ((v18 & 1) != 0)
  {
    if (v21)
    {
      v43 = (uint8_t *)sub_100098710(2);
      *(_WORD *)v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Reset map conditions.", v43, 2u);
      sub_1000986F0((uint64_t)v43);
    }
    v44 = *(_QWORD *)(v0 + 376);
    v45 = *(_QWORD *)(v0 + 264);

    sub_1000C13A0(v46, &qword_100BCDC58);
    _s7Weather24LocationCompositionStateOwst_0(v44, 1, 1, v45);
    goto LABEL_21;
  }
  v22 = v0 + 224;
  v82 = v0 + 200;
  if (v21)
  {
    v23 = *(double *)(v0 + 256);
    v24 = *(_QWORD *)(v0 + 248);
    v25 = sub_100098710(22);
    v26 = sub_100098710(32);
    v84 = v26;
    *(_DWORD *)v25 = 134218242;
    *(_QWORD *)(v0 + 208) = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216);
    *(_WORD *)(v25 + 12) = 2080;
    v27 = Double.description.getter(v23);
    *(_QWORD *)(v0 + 216) = sub_1000CE1C8(v27, v28, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224);
    swift_bridgeObjectRelease();
    sub_1000DD81C((void *)&_mh_execute_header, v19, v20, "Set map location and zoomLevel. index=%ld, zoomLevel=%s");
    swift_arrayDestroy(v26, 1);
    v29 = v26;
    v22 = v0 + 224;
    sub_1000986F0(v29);
    sub_1000986F0(v25);
  }

  v30 = *(_QWORD *)(v0 + 248);
  v31 = *(_QWORD *)(sub_1000C3658() + 16);
  swift_bridgeObjectRelease();
  if (v31 <= v30)
  {
    sub_100223C20(*(_QWORD *)(v0 + 240), v0 + 16);
    v49 = sub_1000CC958();
    v51 = static os_log_type_t.error.getter(v49, v50);
    if (os_log_type_enabled(v49, v51))
    {
      v52 = *(_QWORD *)(v0 + 248);
      v53 = sub_100098710(22);
      *(_DWORD *)v53 = 134218240;
      *(_QWORD *)(v0 + 224) = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v22, v83);
      *(_WORD *)(v53 + 12) = 2048;
      v54 = *(_QWORD *)(v0 + 88);
      v55 = *(_QWORD *)(v0 + 96);
      sub_1000DB418((_QWORD *)(v0 + 64), v54);
      v56 = *(_QWORD *)(dispatch thunk of SavedLocationsManagerType.savedLocations.getter(v54, v55) + 16);
      swift_bridgeObjectRelease();
      sub_100223C5C((_QWORD *)(v0 + 16));
      *(_QWORD *)(v0 + 192) = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v82);
      sub_1000DD81C((void *)&_mh_execute_header, v49, v51, "Cannot select location. index=%ld, count=%ld");
      sub_1000986F0(v53);
    }
    else
    {
      sub_100223C5C((_QWORD *)(v0 + 16));
    }

    goto LABEL_26;
  }
  v32 = *(_QWORD *)(v0 + 248);
  result = sub_1000C3658();
  if (v32 < 0)
  {
    __break(1u);
  }
  else
  {
    v34 = *(_QWORD *)(v0 + 248);
    if (*(_QWORD *)(result + 16) > v34)
    {
      v36 = *(_QWORD *)(v0 + 328);
      v35 = *(_QWORD *)(v0 + 336);
      sub_1002423C8(result+ ((*(unsigned __int8 *)(*(_QWORD *)(v0 + 320) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v0 + 320) + 80))+ *(_QWORD *)(*(_QWORD *)(v0 + 320) + 72) * v34, v35);
      swift_bridgeObjectRelease();
      sub_1002423C8(v35, v36);
      if (swift_getEnumCaseMultiPayload(v36) == 1)
      {
        sub_10024240C(*(_QWORD *)(v0 + 328));
        v37 = sub_1000CC958();
        v39 = static os_log_type_t.error.getter(v37, v38);
        if (os_log_type_enabled(v37, v39))
        {
          v40 = *(_QWORD *)(v0 + 248);
          v41 = (uint8_t *)sub_100098710(12);
          *(_DWORD *)v41 = 134217984;
          *(_QWORD *)(v0 + 200) = v40;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v82, v0 + 208);
          _os_log_impl((void *)&_mh_execute_header, v37, v39, "Selected location was pending reverse geocode. index=%ld", v41, 0xCu);
          sub_1000986F0((uint64_t)v41);
        }
        v42 = *(_QWORD *)(v0 + 336);

        sub_10024240C(v42);
        goto LABEL_26;
      }
      v66 = *(_QWORD *)(v0 + 376);
      v67 = *(_QWORD *)(v0 + 264);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 296) + 32))(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 288));
      v68 = 1;
      if (!_s7Weather24LocationCompositionStateOwet_0(v66, 1, v67))
      {
        v69 = *(_QWORD *)(v0 + 344);
        v71 = *(_QWORD *)(v0 + 296);
        v70 = *(_QWORD *)(v0 + 304);
        v73 = *(_QWORD *)(v0 + 280);
        v72 = *(_QWORD *)(v0 + 288);
        v75 = *(_QWORD *)(v0 + 264);
        v74 = *(_QWORD *)(v0 + 272);
        v76 = *(_QWORD *)(v0 + 256);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v74 + 16))(v73, *(_QWORD *)(v0 + 376), v75);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 16))(v69, v70, v72);
        _s7Weather24LocationCompositionStateOwst_0(v69, 0, 1, v72);
        v77 = WeatherMapPerformanceTestConditions.with(location:zoomLevel:)(v69, v76, 0);
        sub_1000C13A0(v77, &qword_100BC35F8);
        (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v75);
        v68 = 0;
      }
      v78 = *(_QWORD *)(v0 + 376);
      v79 = *(_QWORD *)(v0 + 360);
      v80 = *(_QWORD *)(v0 + 336);
      v81 = *(_QWORD *)(v0 + 264);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 296) + 8))(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 288));
      sub_10024240C(v80);
      _s7Weather24LocationCompositionStateOwst_0(v79, v68, 1, v81);
      sub_100242448(v79, v78);
LABEL_21:
      v47 = *(_QWORD *)(v0 + 352);
      sub_100242490(*(_QWORD *)(v0 + 376), v47);
      v48 = sub_10070264C(v47);
      sub_1000C13A0(v48, &qword_100BCDC58);
LABEL_26:
      v57 = *(_QWORD *)(v0 + 368);
      v58 = *(_QWORD *)(v0 + 376);
      v60 = *(_QWORD *)(v0 + 352);
      v59 = *(_QWORD *)(v0 + 360);
      v62 = *(_QWORD *)(v0 + 336);
      v61 = *(_QWORD *)(v0 + 344);
      v63 = *(_QWORD *)(v0 + 328);
      v64 = *(_QWORD *)(v0 + 304);
      v65 = *(_QWORD *)(v0 + 280);
      sub_100021A68(v58, &qword_100BCDC58);
      swift_task_dealloc(v58);
      swift_task_dealloc(v57);
      swift_task_dealloc(v59);
      swift_task_dealloc(v60);
      swift_task_dealloc(v61);
      swift_task_dealloc(v62);
      swift_task_dealloc(v63);
      swift_task_dealloc(v64);
      swift_task_dealloc(v65);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100242360(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;

  v4 = *(_QWORD *)v1;
  v5 = *(_QWORD *)(v1 + 8);
  v6 = *(_BYTE *)(v1 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_100BCDC54);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10014E920;
  return sub_100241A8C(a1, v4, v5, v6);
}

uint64_t sub_1002423C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SavedLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10024240C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SavedLocation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100242448(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BCDC58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100242490(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BCDC58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002424D8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BCDC60);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100242518()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCDC70;
  if (!qword_100BCDC70)
  {
    v1 = type metadata accessor for SessionEndData(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for SessionEndData, v1);
    atomic_store(result, (unint64_t *)&qword_100BCDC70);
  }
  return result;
}

_QWORD *SessionScenePhaseObserver.deinit()
{
  _QWORD *v0;

  swift_release(v0[2]);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 3);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 8);
  return v0;
}

uint64_t SessionScenePhaseObserver.__deallocating_deinit()
{
  uint64_t v0;

  SessionScenePhaseObserver.deinit();
  return swift_deallocClassInstance(v0, 104, 7);
}

void sub_1002425A4()
{
  qword_100CAE530 = 0x4028000000000000;
}

void sub_1002425B4()
{
  qword_100CAE540 = 0x4028000000000000;
}

void sub_1002425C4()
{
  qword_100CAE548 = 0x4020000000000000;
}

void sub_1002425D4()
{
  qword_100CAE550 = 0x402C000000000000;
}

void sub_1002425E4()
{
  qword_100CAE558 = 0x402C000000000000;
}

unint64_t sub_1002425F4(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100B594F0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t sub_10024263C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100242674 + 4 * byte_10098AB20[a1]))(0x696C617551726961, 0xEA00000000007974);
}

uint64_t sub_100242674()
{
  return 0x7469706963657270;
}

uint64_t sub_100242698()
{
  return 0x74617265706D6574;
}

uint64_t sub_1002426B8()
{
  return 1684957559;
}

void sub_1002426C8()
{
  sub_10068A810();
}

void sub_1002426D4()
{
  unsigned __int8 *v0;

  sub_1004A7470(*v0);
}

void sub_1002426DC()
{
  sub_1001D854C();
}

void sub_1002426E4(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1001DA0E0(a1, *v1);
}

unint64_t sub_1002426EC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1002425F4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100242718@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10024263C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

double destroy for LocationViewDescription(_QWORD *a1)
{
  double result;

  swift_bridgeObjectRelease(*a1);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1[1]).n128_u64[0];
  return result;
}

uint64_t *_s7Weather23LocationViewDescriptionVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *assignWithCopy for LocationViewDescription(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for LocationViewDescription(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for LocationViewDescription()
{
  return &type metadata for LocationViewDescription;
}

uint64_t storeEnumTagSinglePayload for LocationViewDescription.NotableCondition(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100242894 + 4 * byte_10098AB29[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1002428C8 + 4 * byte_10098AB24[v4]))();
}

uint64_t sub_1002428C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002428D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002428D8);
  return result;
}

uint64_t sub_1002428E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002428ECLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1002428F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002428F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocationViewDescription.NotableCondition()
{
  return &type metadata for LocationViewDescription.NotableCondition;
}

unint64_t sub_100242918()
{
  unint64_t result;

  result = qword_100BCDD28;
  if (!qword_100BCDD28)
  {
    result = swift_getWitnessTable(&unk_10098AC1C, &type metadata for LocationViewDescription.NotableCondition);
    atomic_store(result, (unint64_t *)&qword_100BCDD28);
  }
  return result;
}

uint64_t sub_100242954(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100242A1C();
  return static RawRepresentable<>.dataType.getter(a1, v2, &protocol witness table for String);
}

uint64_t sub_100242994(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100242A1C();
  return static RawRepresentable<>.convert(from:)(a1, a2, v4, &protocol witness table for String);
}

uint64_t sub_1002429DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100242A1C();
  return RawRepresentable<>.toData()(a1, v2, &protocol witness table for String);
}

unint64_t sub_100242A1C()
{
  unint64_t result;

  result = qword_100BCDD30;
  if (!qword_100BCDD30)
  {
    result = swift_getWitnessTable(&unk_10098ABA4, &type metadata for LocationViewDescription.NotableCondition);
    atomic_store(result, (unint64_t *)&qword_100BCDD30);
  }
  return result;
}

ValueMetadata *_s15CornerRadiusKeyVMa()
{
  return &_s15CornerRadiusKeyVN;
}

uint64_t sub_100242A68(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_1000B15F8(v6, v7);
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  swift_release(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppStateTransitionModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppStateTransitionModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_100242B44(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t *sub_100242B4C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for WeatherDescription(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain(v11);
  }
  return a1;
}

uint64_t sub_100242BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for WeatherDescription(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t sub_100242C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for WeatherDescription(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100242CB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for WeatherDescription(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_100242D24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100242D30);
}

uint64_t sub_100242D30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;

  v6 = type metadata accessor for WeatherDescription(0);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return _s7Weather24LocationCompositionStateOwet_0(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

uint64_t sub_100242DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100242DB8);
}

uint64_t sub_100242DB8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = type metadata accessor for WeatherDescription(0);
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return _s7Weather24LocationCompositionStateOwst_0(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100242E30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  if ((static WeatherDescription.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v4 = *(int *)(type metadata accessor for UVIndexComponentPreprocessedDataModel(0) + 20);
  v5 = *(_QWORD *)(a1 + v4);
  v6 = *(_QWORD *)(a1 + v4 + 8);
  v7 = (_QWORD *)(a2 + v4);
  if (v5 == *v7 && v6 == v7[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, *v7);
}

uint64_t sub_100242E9C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69)
  {
    v5 = 0xEB000000006E6F69;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7470697263736564, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x79726F6765746163 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x79726F6765746163, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100242FA0(char a1)
{
  if ((a1 & 1) != 0)
    return 0x79726F6765746163;
  else
    return 0x7470697263736564;
}

uint64_t sub_100242FE0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  char v20;

  v3 = v1;
  v5 = sub_1000BA294(&qword_100BCDEB8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100098728();
  v9 = v8 - v7;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1002433F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for UVIndexComponentPreprocessedDataModel.CodingKeys, &type metadata for UVIndexComponentPreprocessedDataModel.CodingKeys, v12, v10, v11);
  v20 = 0;
  v13 = type metadata accessor for WeatherDescription(0);
  v14 = sub_100087964(&qword_100BCDEC0, (uint64_t)&protocol conformance descriptor for WeatherDescription);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v20, v5, v13, v14);
  if (!v2)
  {
    v15 = (uint64_t *)(v3 + *(int *)(type metadata accessor for UVIndexComponentPreprocessedDataModel(0) + 20));
    v16 = *v15;
    v17 = v15[1];
    v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v19, v5);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_100243124@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;

  v26 = type metadata accessor for WeatherDescription(0);
  v24 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  sub_100098728();
  v27 = v5 - v4;
  v25 = sub_1000BA294(&qword_100BCDEA0);
  v6 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  sub_100098728();
  v9 = v8 - v7;
  v10 = type metadata accessor for UVIndexComponentPreprocessedDataModel(0);
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = v12 - v11;
  v15 = a1[3];
  v14 = a1[4];
  sub_1000DB418(a1, v15);
  v16 = sub_1002433F0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for UVIndexComponentPreprocessedDataModel.CodingKeys, &type metadata for UVIndexComponentPreprocessedDataModel.CodingKeys, v16, v15, v14);
  if (v2)
    return sub_1000C255C();
  v22 = v6;
  v29 = 0;
  sub_100087964(&qword_100BCDEB0, (uint64_t)&protocol conformance descriptor for WeatherDescription);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v26, &v29, v25, v26);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v13, v27, v26);
  v28 = 1;
  v17 = KeyedDecodingContainer.decode(_:forKey:)(&v28, v25);
  v19 = v18;
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v9, v25);
  v20 = (uint64_t *)(v13 + *(int *)(v10 + 20));
  *v20 = v17;
  v20[1] = v19;
  sub_100125274(v13, a2);
  sub_1000C255C();
  return sub_10024342C(v13);
}

uint64_t sub_100243348()
{
  char *v0;

  return sub_100242FA0(*v0);
}

uint64_t sub_100243350@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100242E9C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100243374(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002433F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10024339C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002433F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002433C4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100243124(a1, a2);
}

uint64_t sub_1002433D8(_QWORD *a1)
{
  return sub_100242FE0(a1);
}

unint64_t sub_1002433F0()
{
  unint64_t result;

  result = qword_100BCDEA8;
  if (!qword_100BCDEA8)
  {
    result = swift_getWitnessTable(&unk_10098AFAC, &type metadata for UVIndexComponentPreprocessedDataModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCDEA8);
  }
  return result;
}

uint64_t sub_10024342C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UVIndexComponentPreprocessedDataModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for UVIndexComponentPreprocessedDataModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1002434B4 + 4 * byte_10098ADF5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1002434E8 + 4 * byte_10098ADF0[v4]))();
}

uint64_t sub_1002434E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002434F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002434F8);
  return result;
}

uint64_t sub_100243504(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10024350CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100243510(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100243518(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UVIndexComponentPreprocessedDataModel.CodingKeys()
{
  return &type metadata for UVIndexComponentPreprocessedDataModel.CodingKeys;
}

unint64_t sub_100243538()
{
  unint64_t result;

  result = qword_100BCDEC8;
  if (!qword_100BCDEC8)
  {
    result = swift_getWitnessTable(&unk_10098AF84, &type metadata for UVIndexComponentPreprocessedDataModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCDEC8);
  }
  return result;
}

unint64_t sub_100243578()
{
  unint64_t result;

  result = qword_100BCDED0;
  if (!qword_100BCDED0)
  {
    result = swift_getWitnessTable(&unk_10098AEF4, &type metadata for UVIndexComponentPreprocessedDataModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCDED0);
  }
  return result;
}

unint64_t sub_1002435B8()
{
  unint64_t result;

  result = qword_100BCDED8;
  if (!qword_100BCDED8)
  {
    result = swift_getWitnessTable(&unk_10098AF1C, &type metadata for UVIndexComponentPreprocessedDataModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCDED8);
  }
  return result;
}

uint64_t sub_1002435F4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];
  _QWORD v21[3];
  uint64_t v22;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = sub_1000BA294(&qword_100BCDF78);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (v22)
  {
    v7 = sub_100068EB4((uint64_t)v21, v22);
    __chkstk_darwin(v7);
    v9 = (_QWORD *)((char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v10 + 16))(v9);
    v11 = *v9;
    v12 = type metadata accessor for MessageCoverInteractor();
    v20[3] = v12;
    v20[4] = &off_100B76C68;
    v20[0] = v11;
    v13 = type metadata accessor for MessageCoverModule();
    v14 = (_QWORD *)swift_allocObject(v13, 56, 7);
    v15 = sub_100068EB4((uint64_t)v20, v12);
    __chkstk_darwin(v15);
    v17 = (_QWORD *)((char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v18 + 16))(v17);
    v19 = *v17;
    v14[5] = v12;
    v14[6] = &off_100B76C68;
    v14[2] = v19;
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v20);
    result = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v21);
    a2[3] = v13;
    a2[4] = &off_100B95CB8;
    *a2 = v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

double sub_10024377C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = sub_1000BA294(&qword_100BCDF78);
  v1 = RegistrationContainer.register<A>(_:name:factory:)(v0, 0, 0, sub_1002437C0, 0, v0);
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

uint64_t sub_1002437C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for MessageCoverInteractor();
  result = swift_allocObject(v2, 16, 7);
  a1[3] = v2;
  a1[4] = (uint64_t)&off_100B76C68;
  *a1 = result;
  return result;
}

BOOL sub_100243804()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  float v14;
  Swift::Bool v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  double v22;
  uint64_t v23;
  uint64_t v24;

  v1 = type metadata accessor for AppStoreReviewConfiguration(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AppConfiguration(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v0[5];
  v10 = v0[6];
  sub_1000DB418(v0 + 2, v9);
  v11 = dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v9, v10);
  AppConfiguration.appStoreReview.getter(v11);
  v12 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v13 = AppStoreReviewConfiguration.reviewPromptSamplingRate.getter(v12);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v14 = v13;
  sub_1000DB418(v0 + 7, v0[10]);
  v15 = PrivacySamplerType.canRecord(samplingRate:)(v14);
  if (qword_100BC23E8 != -1)
    swift_once(&qword_100BC23E8, sub_1006F3764);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_1000AECD4(v16, (uint64_t)qword_100CAEFB0);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(18, -1);
    *(_DWORD *)v20 = 67240448;
    HIDWORD(v23) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)((char *)&v23 + 4, &v24);
    *(_WORD *)(v20 + 8) = 2050;
    v22 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "App Store Review Privacy Sampler evinced result %{BOOL,public}d for sampling rate : %{public}f", (uint8_t *)v20, 0x12u);
    swift_slowDealloc(v20, -1, -1);
  }

  return v15;
}

char *sub_100243A4C(char *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  void (*v79)(char *, char *, uint64_t);
  void (*v80)(char *, char *, uint64_t);
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v31 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = (char *)(v31 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, (char *)a2, v7);
    v9 = (int *)type metadata accessor for PrecipitationAveragesHeroChartInput(0);
    v10 = v9[5];
    v11 = &a1[v10];
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for WeatherStatisticsModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    v14 = v9[6];
    v15 = &a1[v14];
    v16 = (char *)a2 + v14;
    v17 = sub_1000BA294(&qword_100BCB130);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    v18 = v9[7];
    v19 = &a1[v18];
    v20 = (char *)a2 + v18;
    v21 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
    v22 = v9[8];
    v23 = &a1[v22];
    v24 = (char *)a2 + v22;
    v25 = type metadata accessor for Locale(0);
    v82 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
    v82(v23, v24, v25);
    v26 = v9[9];
    v27 = &a1[v26];
    v28 = (uint64_t *)((char *)a2 + v26);
    v29 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v28, 1, (uint64_t)v29))
    {
      v30 = sub_1000BA294(&qword_100BCB0D0);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v27 = *v28;
      v8(&v27[v29[5]], (char *)v28 + v29[5], v7);
      *(_QWORD *)&v27[v29[6]] = *(_QWORD *)((char *)v28 + v29[6]);
      *(_QWORD *)&v27[v29[7]] = *(_QWORD *)((char *)v28 + v29[7]);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v27, 0, 1, (uint64_t)v29);
    }
    v32 = a3[5];
    v33 = &a1[v32];
    v34 = (char *)a2 + v32;
    v35 = type metadata accessor for Calendar(0);
    v79 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16);
    v79(v33, v34, v35);
    v36 = (int *)type metadata accessor for MonthlyAveragesChartInput(0);
    v80 = v8;
    v81 = v7;
    v8(&v33[v36[5]], &v34[v36[5]], v7);
    v37 = v36[6];
    v38 = &v33[v37];
    v39 = &v34[v37];
    v40 = type metadata accessor for TemperatureScaleConfiguration(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
    v41 = v36[7];
    v42 = &v33[v41];
    v43 = &v34[v41];
    v44 = sub_1000BA294(&qword_100BC4E70);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
    v45 = v36[8];
    v46 = &v33[v45];
    v47 = &v34[v45];
    v48 = sub_1000BA294(&qword_100BCB240);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v46, v47, v48);
    v82(&v33[v36[9]], &v34[v36[9]], v25);
    v49 = a3[6];
    v50 = a3[7];
    v51 = *(uint64_t *)((char *)a2 + v49);
    *(_QWORD *)&a1[v49] = v51;
    v52 = (uint64_t *)&a1[v50];
    v53 = (uint64_t *)((char *)a2 + v50);
    v54 = type metadata accessor for NewsDataModel(0);
    swift_bridgeObjectRetain(v51);
    if (swift_getEnumCaseMultiPayload(v53) == 1)
    {
      v55 = *v53;
      *v52 = *v53;
      swift_bridgeObjectRetain(v55);
      v56 = 1;
    }
    else
    {
      v57 = type metadata accessor for News(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v52, v53, v57);
      v56 = 0;
    }
    v58 = swift_storeEnumTagMultiPayload(v52, v54, v56);
    ((void (*)(char *, char *, uint64_t, __n128))v79)(&a1[a3[8]], (char *)a2 + a3[8], v35, v58);
    v80(&a1[a3[9]], (char *)a2 + a3[9], v81);
    v59 = a3[10];
    v60 = &a1[v59];
    v61 = (char *)a2 + v59;
    v62 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v60, v61, v62);
    v63 = a3[11];
    v64 = &a1[v63];
    v65 = (char *)a2 + v63;
    v66 = *(void **)v65;
    v67 = (void *)*((_QWORD *)v65 + 1);
    *(_QWORD *)v64 = *(_QWORD *)v65;
    *((_QWORD *)v64 + 1) = v67;
    v68 = (void *)*((_QWORD *)v65 + 2);
    v69 = (void *)*((_QWORD *)v65 + 3);
    *((_QWORD *)v64 + 2) = v68;
    *((_QWORD *)v64 + 3) = v69;
    v70 = (void *)*((_QWORD *)v65 + 4);
    v71 = (void *)*((_QWORD *)v65 + 5);
    *((_QWORD *)v64 + 4) = v70;
    *((_QWORD *)v64 + 5) = v71;
    v72 = v66;
    v73 = v67;
    v74 = v68;
    v75 = v69;
    v76 = v70;
    v77 = v71;
  }
  return a1;
}

void sub_100243E60(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id *v33;
  void (*v34)(uint64_t, uint64_t);

  v4 = type metadata accessor for Date(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = (int *)type metadata accessor for PrecipitationAveragesHeroChartInput(0);
  v7 = a1 + v6[5];
  v8 = type metadata accessor for WeatherStatisticsModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + v6[6];
  v10 = sub_1000BA294(&qword_100BCB130);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + v6[7];
  v12 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + v6[8];
  v14 = type metadata accessor for Locale(0);
  v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
  v15(v13, v14);
  v16 = a1 + v6[9];
  v17 = type metadata accessor for DetailHeroChartLollipopPosition(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v16, 1, v17))
    v5(v16 + *(int *)(v17 + 20), v4);
  v18 = a1 + a2[5];
  v19 = type metadata accessor for Calendar(0);
  v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8);
  v20(v18, v19);
  v21 = (int *)type metadata accessor for MonthlyAveragesChartInput(0);
  v34 = v5;
  v5(v18 + v21[5], v4);
  v22 = v18 + v21[6];
  v23 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  v24 = v18 + v21[7];
  v25 = sub_1000BA294(&qword_100BC4E70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  v26 = v18 + v21[8];
  v27 = sub_1000BA294(&qword_100BCB240);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
  v15(v18 + v21[9], v14);
  swift_bridgeObjectRelease();
  v28 = a1 + a2[7];
  type metadata accessor for NewsDataModel(0);
  if (swift_getEnumCaseMultiPayload(v28) == 1)
  {
    v29 = swift_bridgeObjectRelease();
  }
  else
  {
    v30 = type metadata accessor for News(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v28, v30);
  }
  ((void (*)(uint64_t, uint64_t, __n128))v20)(a1 + a2[8], v19, v29);
  v34(a1 + a2[9], v4);
  v31 = a1 + a2[10];
  v32 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v31, v32);
  v33 = (id *)(a1 + a2[11]);

}

uint64_t sub_100244144(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  void (*v77)(uint64_t, uint64_t, uint64_t);
  void (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for Date(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = (int *)type metadata accessor for PrecipitationAveragesHeroChartInput(0);
  v9 = v8[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for WeatherStatisticsModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  v13 = v8[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_1000BA294(&qword_100BCB130);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  v17 = v8[7];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  v21 = v8[8];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for Locale(0);
  v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
  v80(v22, v23, v24);
  v25 = v8[9];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (_QWORD *)(a2 + v25);
  v28 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v27, 1, (uint64_t)v28))
  {
    v29 = sub_1000BA294(&qword_100BCB0D0);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    *v26 = *v27;
    v7((uint64_t)v26 + v28[5], (uint64_t)v27 + v28[5], v6);
    *(_QWORD *)((char *)v26 + v28[6]) = *(_QWORD *)((char *)v27 + v28[6]);
    *(_QWORD *)((char *)v26 + v28[7]) = *(_QWORD *)((char *)v27 + v28[7]);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v26, 0, 1, (uint64_t)v28);
  }
  v30 = a3[5];
  v31 = a1 + v30;
  v32 = a2 + v30;
  v33 = type metadata accessor for Calendar(0);
  v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 16);
  v77(v31, v32, v33);
  v34 = (int *)type metadata accessor for MonthlyAveragesChartInput(0);
  v78 = v7;
  v79 = v6;
  v7(v31 + v34[5], v32 + v34[5], v6);
  v35 = v34[6];
  v36 = v31 + v35;
  v37 = v32 + v35;
  v38 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
  v39 = v34[7];
  v40 = v31 + v39;
  v41 = v32 + v39;
  v42 = sub_1000BA294(&qword_100BC4E70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
  v43 = v34[8];
  v44 = v31 + v43;
  v45 = v32 + v43;
  v46 = sub_1000BA294(&qword_100BCB240);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
  v80(v31 + v34[9], v32 + v34[9], v24);
  v47 = a3[6];
  v48 = a3[7];
  v49 = *(_QWORD *)(a2 + v47);
  *(_QWORD *)(a1 + v47) = v49;
  v50 = (uint64_t *)(a1 + v48);
  v51 = (uint64_t *)(a2 + v48);
  v52 = type metadata accessor for NewsDataModel(0);
  swift_bridgeObjectRetain(v49);
  if (swift_getEnumCaseMultiPayload(v51) == 1)
  {
    v53 = *v51;
    *v50 = *v51;
    swift_bridgeObjectRetain(v53);
    v54 = 1;
  }
  else
  {
    v55 = type metadata accessor for News(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v50, v51, v55);
    v54 = 0;
  }
  v56 = swift_storeEnumTagMultiPayload(v50, v52, v54);
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v77)(a1 + a3[8], a2 + a3[8], v33, v56);
  v78(a1 + a3[9], a2 + a3[9], v79);
  v57 = a3[10];
  v58 = a1 + v57;
  v59 = a2 + v57;
  v60 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v58, v59, v60);
  v61 = a3[11];
  v62 = (_QWORD *)(a1 + v61);
  v63 = a2 + v61;
  v64 = *(void **)v63;
  v65 = *(void **)(v63 + 8);
  *v62 = *(_QWORD *)v63;
  v62[1] = v65;
  v66 = *(void **)(v63 + 16);
  v67 = *(void **)(v63 + 24);
  v62[2] = v66;
  v62[3] = v67;
  v68 = *(void **)(v63 + 32);
  v69 = *(void **)(v63 + 40);
  v62[4] = v68;
  v62[5] = v69;
  v70 = v64;
  v71 = v65;
  v72 = v66;
  v73 = v67;
  v74 = v68;
  v75 = v69;
  return a1;
}

uint64_t sub_10024452C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  id v68;
  void *v69;
  void *v70;
  id v71;
  void *v72;
  void *v73;
  id v74;
  void *v75;
  void *v76;
  id v77;
  void *v78;
  void *v79;
  id v80;
  void *v81;
  void *v82;
  id v83;
  void (*v85)(uint64_t, uint64_t, uint64_t);
  void (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v88 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v88(a1, a2, v6);
  v8 = (int *)type metadata accessor for PrecipitationAveragesHeroChartInput(0);
  v9 = v8[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for WeatherStatisticsModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  v13 = v8[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_1000BA294(&qword_100BCB130);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  v17 = v8[7];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  v21 = v8[8];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for Locale(0);
  v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 24);
  v86(v22, v23, v24);
  v25 = v8[9];
  v26 = (char *)(a1 + v25);
  v27 = (char *)(a2 + v25);
  v28 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
  v29 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v26, 1, (uint64_t)v28);
  v30 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v27, 1, (uint64_t)v28);
  if (v29)
  {
    if (!v30)
    {
      *(_QWORD *)v26 = *(_QWORD *)v27;
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(&v26[v28[5]], &v27[v28[5]], v6);
      *(_QWORD *)&v26[v28[6]] = *(_QWORD *)&v27[v28[6]];
      *(_QWORD *)&v26[v28[7]] = *(_QWORD *)&v27[v28[7]];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v26, 0, 1, (uint64_t)v28);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v30)
  {
    sub_1000215BC((uint64_t)v26, type metadata accessor for DetailHeroChartLollipopPosition);
LABEL_6:
    v31 = sub_1000BA294(&qword_100BCB0D0);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v88((uint64_t)&v26[v28[5]], (uint64_t)&v27[v28[5]], v6);
  *(_QWORD *)&v26[v28[6]] = *(_QWORD *)&v27[v28[6]];
  *(_QWORD *)&v26[v28[7]] = *(_QWORD *)&v27[v28[7]];
LABEL_7:
  v32 = a3[5];
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = type metadata accessor for Calendar(0);
  v85 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 24);
  v85(v33, v34, v35);
  v36 = (int *)type metadata accessor for MonthlyAveragesChartInput(0);
  v87 = v6;
  v88(v33 + v36[5], v34 + v36[5], v6);
  v37 = v36[6];
  v38 = v33 + v37;
  v39 = v34 + v37;
  v40 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 24))(v38, v39, v40);
  v41 = v36[7];
  v42 = v33 + v41;
  v43 = v34 + v41;
  v44 = sub_1000BA294(&qword_100BC4E70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 24))(v42, v43, v44);
  v45 = v36[8];
  v46 = v33 + v45;
  v47 = v34 + v45;
  v48 = sub_1000BA294(&qword_100BCB240);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 24))(v46, v47, v48);
  v86(v33 + v36[9], v34 + v36[9], v24);
  v49 = a3[6];
  v50 = *(_QWORD *)(a2 + v49);
  *(_QWORD *)(a1 + v49) = v50;
  swift_bridgeObjectRetain(v50);
  v51 = swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v52 = a3[7];
    v53 = (uint64_t *)(a1 + v52);
    v54 = (uint64_t *)(a2 + v52);
    sub_1000215BC(a1 + v52, type metadata accessor for NewsDataModel);
    v55 = type metadata accessor for NewsDataModel(0);
    if (swift_getEnumCaseMultiPayload(v54) == 1)
    {
      v56 = *v54;
      *v53 = *v54;
      swift_bridgeObjectRetain(v56);
      v57 = 1;
    }
    else
    {
      v58 = type metadata accessor for News(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v53, v54, v58);
      v57 = 0;
    }
    v51 = swift_storeEnumTagMultiPayload(v53, v55, v57);
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v85)(a1 + a3[8], a2 + a3[8], v35, v51);
  v88(a1 + a3[9], a2 + a3[9], v87);
  v59 = a3[10];
  v60 = a1 + v59;
  v61 = a2 + v59;
  v62 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 24))(v60, v61, v62);
  v63 = a3[11];
  v64 = (_QWORD *)(a1 + v63);
  v65 = a2 + v63;
  v66 = *(void **)(a1 + v63);
  v67 = *(void **)v65;
  *v64 = *(_QWORD *)v65;
  v68 = v67;

  v69 = (void *)v64[1];
  v70 = *(void **)(v65 + 8);
  v64[1] = v70;
  v71 = v70;

  v72 = (void *)v64[2];
  v73 = *(void **)(v65 + 16);
  v64[2] = v73;
  v74 = v73;

  v75 = (void *)v64[3];
  v76 = *(void **)(v65 + 24);
  v64[3] = v76;
  v77 = v76;

  v78 = (void *)v64[4];
  v79 = *(void **)(v65 + 32);
  v64[4] = v79;
  v80 = v79;

  v81 = (void *)v64[5];
  v82 = *(void **)(v65 + 40);
  v64[5] = v82;
  v83 = v82;

  return a1;
}

uint64_t sub_1002449F0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const void *v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  _OWORD *v59;
  __int128 v60;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  void (*v63)(uint64_t, uint64_t, uint64_t);
  void (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;

  v6 = type metadata accessor for Date(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = (int *)type metadata accessor for PrecipitationAveragesHeroChartInput(0);
  v9 = v8[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for WeatherStatisticsModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  v13 = v8[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_1000BA294(&qword_100BCB130);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  v17 = v8[7];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  v21 = v8[8];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for Locale(0);
  v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32);
  v63(v22, v23, v24);
  v25 = v8[9];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (_QWORD *)(a2 + v25);
  v28 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v27, 1, (uint64_t)v28))
  {
    v29 = sub_1000BA294(&qword_100BCB0D0);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    *v26 = *v27;
    v7((uint64_t)v26 + v28[5], (uint64_t)v27 + v28[5], v6);
    *(_QWORD *)((char *)v26 + v28[6]) = *(_QWORD *)((char *)v27 + v28[6]);
    *(_QWORD *)((char *)v26 + v28[7]) = *(_QWORD *)((char *)v27 + v28[7]);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v26, 0, 1, (uint64_t)v28);
  }
  v30 = a3[5];
  v31 = a1 + v30;
  v32 = a2 + v30;
  v33 = type metadata accessor for Calendar(0);
  v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 32);
  v62(v31, v32, v33);
  v34 = (int *)type metadata accessor for MonthlyAveragesChartInput(0);
  v64 = v7;
  v65 = v6;
  v7(v31 + v34[5], v32 + v34[5], v6);
  v35 = v34[6];
  v36 = v31 + v35;
  v37 = v32 + v35;
  v38 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
  v39 = v34[7];
  v40 = v31 + v39;
  v41 = v32 + v39;
  v42 = sub_1000BA294(&qword_100BC4E70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
  v43 = v34[8];
  v44 = v31 + v43;
  v45 = v32 + v43;
  v46 = sub_1000BA294(&qword_100BCB240);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
  v63(v31 + v34[9], v32 + v34[9], v24);
  v47 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v48 = (void *)(a1 + v47);
  v49 = (const void *)(a2 + v47);
  v50 = type metadata accessor for NewsDataModel(0);
  if (swift_getEnumCaseMultiPayload(v49))
  {
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    v52 = type metadata accessor for News(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v48, v49, v52);
    v51 = swift_storeEnumTagMultiPayload(v48, v50, 0);
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v62)(a1 + a3[8], a2 + a3[8], v33, v51);
  v64(a1 + a3[9], a2 + a3[9], v65);
  v53 = a3[10];
  v54 = a1 + v53;
  v55 = a2 + v53;
  v56 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v54, v55, v56);
  v57 = a3[11];
  v58 = (_OWORD *)(a1 + v57);
  v59 = (_OWORD *)(a2 + v57);
  v60 = v59[1];
  *v58 = *v59;
  v58[1] = v60;
  v58[2] = v59[2];
  return a1;
}

uint64_t sub_100244DAC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  void *v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  void (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v72(a1, a2, v6);
  v8 = (int *)type metadata accessor for PrecipitationAveragesHeroChartInput(0);
  v9 = v8[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for WeatherStatisticsModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = v8[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_1000BA294(&qword_100BCB130);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  v17 = v8[7];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  v21 = v8[8];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for Locale(0);
  v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 40);
  v70(v22, v23, v24);
  v25 = v8[9];
  v26 = (char *)(a1 + v25);
  v27 = (char *)(a2 + v25);
  v28 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
  v29 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v26, 1, (uint64_t)v28);
  v30 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v27, 1, (uint64_t)v28);
  if (v29)
  {
    if (!v30)
    {
      *(_QWORD *)v26 = *(_QWORD *)v27;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v26[v28[5]], &v27[v28[5]], v6);
      *(_QWORD *)&v26[v28[6]] = *(_QWORD *)&v27[v28[6]];
      *(_QWORD *)&v26[v28[7]] = *(_QWORD *)&v27[v28[7]];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v26, 0, 1, (uint64_t)v28);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v30)
  {
    sub_1000215BC((uint64_t)v26, type metadata accessor for DetailHeroChartLollipopPosition);
LABEL_6:
    v31 = sub_1000BA294(&qword_100BCB0D0);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v72((uint64_t)&v26[v28[5]], (uint64_t)&v27[v28[5]], v6);
  *(_QWORD *)&v26[v28[6]] = *(_QWORD *)&v27[v28[6]];
  *(_QWORD *)&v26[v28[7]] = *(_QWORD *)&v27[v28[7]];
LABEL_7:
  v32 = a3[5];
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = type metadata accessor for Calendar(0);
  v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 40);
  v69(v33, v34, v35);
  v36 = (int *)type metadata accessor for MonthlyAveragesChartInput(0);
  v71 = v6;
  v72(v33 + v36[5], v34 + v36[5], v6);
  v37 = v36[6];
  v38 = v33 + v37;
  v39 = v34 + v37;
  v40 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 40))(v38, v39, v40);
  v41 = v36[7];
  v42 = v33 + v41;
  v43 = v34 + v41;
  v44 = sub_1000BA294(&qword_100BC4E70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 40))(v42, v43, v44);
  v45 = v36[8];
  v46 = v33 + v45;
  v47 = v34 + v45;
  v48 = sub_1000BA294(&qword_100BCB240);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 40))(v46, v47, v48);
  v70(v33 + v36[9], v34 + v36[9], v24);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v49 = swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v50 = a3[7];
    v51 = (void *)(a1 + v50);
    v52 = (const void *)(a2 + v50);
    sub_1000215BC(a1 + v50, type metadata accessor for NewsDataModel);
    v53 = type metadata accessor for NewsDataModel(0);
    if (swift_getEnumCaseMultiPayload(v52))
    {
      memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    }
    else
    {
      v54 = type metadata accessor for News(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(v51, v52, v54);
      v49 = swift_storeEnumTagMultiPayload(v51, v53, 0);
    }
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v69)(a1 + a3[8], a2 + a3[8], v35, v49);
  v72(a1 + a3[9], a2 + a3[9], v71);
  v55 = a3[10];
  v56 = a1 + v55;
  v57 = a2 + v55;
  v58 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 40))(v56, v57, v58);
  v59 = a3[11];
  v60 = (_QWORD *)(a1 + v59);
  v61 = (_QWORD *)(a2 + v59);
  v62 = *(void **)(a1 + v59);
  *v60 = *v61;

  v63 = (void *)v60[1];
  v60[1] = v61[1];

  v64 = (void *)v60[2];
  v60[2] = v61[2];

  v65 = (void *)v60[3];
  v60[3] = v61[3];

  v66 = (void *)v60[4];
  v60[4] = v61[4];

  v67 = (void *)v60[5];
  v60[5] = v61[5];

  return a1;
}

uint64_t sub_100245250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10024525C);
}

uint64_t sub_10024525C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  sub_100098A74();
  sub_100088FF0();
  if (v9)
  {
    v7 = v6;
    v8 = v4;
    return _s7Weather24LocationCompositionStateOwet_0(v8, v3, v7);
  }
  type metadata accessor for MonthlyAveragesChartInput(0);
  sub_100088FF0();
  if (v9)
  {
    v7 = v10;
    v11 = a3[5];
LABEL_22:
    v8 = v4 + v11;
    return _s7Weather24LocationCompositionStateOwet_0(v8, v3, v7);
  }
  if ((_DWORD)v3 != 2147483646)
  {
    sub_1000BD334();
    sub_100088FF0();
    if (v9)
    {
      v7 = v15;
      v11 = a3[7];
    }
    else
    {
      type metadata accessor for Calendar(0);
      sub_100088FF0();
      if (v16)
      {
        v7 = v17;
        v11 = a3[8];
      }
      else
      {
        sub_100098778();
        sub_100088FF0();
        if (v18)
        {
          v7 = v19;
          v11 = a3[9];
        }
        else
        {
          v7 = sub_1000992C4();
          v11 = a3[10];
        }
      }
    }
    goto LABEL_22;
  }
  v12 = *(_QWORD *)(v4 + a3[6]);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  v13 = v12 - 1;
  if (v13 < 0)
    v13 = -1;
  return (v13 + 1);
}

uint64_t sub_100245354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100245360);
}

void sub_100245360(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  sub_100098A74();
  sub_10009D2E8();
  if (v11)
  {
    v9 = v8;
    v10 = v5;
  }
  else
  {
    type metadata accessor for MonthlyAveragesChartInput(0);
    sub_10009D2E8();
    if (v11)
    {
      v9 = v12;
      v13 = a4[5];
    }
    else
    {
      if (a3 == 2147483646)
      {
        *(_QWORD *)(v5 + a4[6]) = v4;
        return;
      }
      sub_1000BD334();
      sub_10009D2E8();
      if (v11)
      {
        v9 = v14;
        v13 = a4[7];
      }
      else
      {
        type metadata accessor for Calendar(0);
        sub_10009D2E8();
        if (v15)
        {
          v9 = v16;
          v13 = a4[8];
        }
        else
        {
          sub_100098778();
          sub_10009D2E8();
          if (v17)
          {
            v9 = v18;
            v13 = a4[9];
          }
          else
          {
            v9 = sub_1000992C4();
            v13 = a4[10];
          }
        }
      }
    }
    v10 = v5 + v13;
  }
  _s7Weather24LocationCompositionStateOwst_0(v10, v4, v4, v9);
}

uint64_t type metadata accessor for PrecipitationAveragesDetailInput(uint64_t a1)
{
  uint64_t result;

  result = qword_100BCE120;
  if (!qword_100BCE120)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrecipitationAveragesDetailInput);
  return result;
}

uint64_t sub_100245480(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD v9[8];

  result = type metadata accessor for PrecipitationAveragesHeroChartInput(319);
  if (v3 <= 0x3F)
  {
    v9[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for MonthlyAveragesChartInput(319);
    if (v4 <= 0x3F)
    {
      v9[1] = *(_QWORD *)(result - 8) + 64;
      v9[2] = "\b";
      result = type metadata accessor for NewsDataModel(319);
      if (v5 <= 0x3F)
      {
        v9[3] = *(_QWORD *)(result - 8) + 64;
        result = type metadata accessor for Calendar(319);
        if (v6 <= 0x3F)
        {
          v9[4] = *(_QWORD *)(result - 8) + 64;
          result = type metadata accessor for Date(319);
          if (v7 <= 0x3F)
          {
            v9[5] = *(_QWORD *)(result - 8) + 64;
            result = type metadata accessor for Location(319);
            if (v8 <= 0x3F)
            {
              v9[6] = *(_QWORD *)(result - 8) + 64;
              v9[7] = &unk_10098B1C0;
              swift_initStructMetadata(a1, 256, 8, v9, a1 + 16);
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_100245584(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  _OWORD *v21;
  __int128 v22;
  char v23;
  _OWORD v25[3];
  _OWORD v26[3];

  if (!sub_10028C3C8(a1, a2))
    goto LABEL_13;
  v4 = (int *)sub_10009D3D4();
  v5 = sub_1000D8E28(v4[5]);
  if ((sub_10081BB04(v5, v6) & 1) == 0)
    goto LABEL_13;
  v7 = v4[6];
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a2 + v7);
  if (v8)
  {
    if (!v9)
      goto LABEL_13;
    swift_bridgeObjectRetain(*(_QWORD *)(a2 + v7));
    swift_bridgeObjectRetain(v8);
    sub_100949F90();
    v11 = v10;
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v9);
    if ((v11 & 1) == 0)
      goto LABEL_13;
  }
  else if (v9)
  {
LABEL_13:
    v23 = 0;
    return v23 & 1;
  }
  v12 = sub_1000D8E28(v4[7]);
  if ((sub_1000FA3BC(v12, v13) & 1) == 0)
    goto LABEL_13;
  v14 = sub_1000D8E28(v4[8]);
  if ((static Calendar.== infix(_:_:)(v14) & 1) == 0)
    goto LABEL_13;
  v15 = sub_1000D8E28(v4[9]);
  if ((static Date.== infix(_:_:)(v15, v16) & 1) == 0)
    goto LABEL_13;
  v17 = sub_1000D8E28(v4[10]);
  if ((static Location.== infix(_:_:)(v17, v18) & 1) == 0)
    goto LABEL_13;
  v19 = (_OWORD *)(a1 + v4[11]);
  v20 = v19[2];
  v25[1] = v19[1];
  v25[2] = v20;
  v25[0] = *v19;
  v21 = (_OWORD *)(a2 + v4[11]);
  v22 = v21[2];
  v26[1] = v21[1];
  v26[2] = v22;
  v26[0] = *v21;
  v23 = sub_10009A7F8((uint64_t)v25, (id *)v26);
  return v23 & 1;
}

id sub_1002456B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  os_log_type_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t, char *);
  char *v86;
  uint64_t (*v87)(char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  uint64_t v105;
  os_log_type_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int *v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  _QWORD *v140;
  id v141;
  id v142;
  id v143;
  id v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void (*v152)(uint64_t, uint64_t, char *);
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  id v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;

  v161 = a4;
  v163 = a2;
  v182 = a5;
  v7 = (_QWORD *)sub_1000992C4();
  v180 = *(v7 - 1);
  v181 = v7;
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_1000986FC();
  v173 = (char *)v9;
  sub_10009D2A4();
  __chkstk_darwin(v10);
  v162 = (char *)&v148 - v11;
  v12 = sub_10009876C();
  v13 = type metadata accessor for TimeZone(v12);
  v168 = *(_QWORD *)(v13 - 8);
  v169 = v13;
  sub_10009D98C();
  __chkstk_darwin(v14);
  sub_100088FDC();
  v167 = v15;
  v16 = sub_10009876C();
  v17 = type metadata accessor for Calendar(v16);
  v170 = *(_QWORD *)(v17 - 8);
  v171 = v17;
  sub_10009D98C();
  __chkstk_darwin(v18);
  sub_100088FDC();
  v179 = v19;
  v20 = sub_10009876C();
  v157 = type metadata accessor for WeatherDataModel(v20);
  v156 = *(_QWORD *)(v157 - 8);
  sub_10009D98C();
  __chkstk_darwin(v21);
  sub_100088FDC();
  v155 = v22;
  sub_1000BA294(&qword_100BC3460);
  sub_1000B42B0();
  __chkstk_darwin(v23);
  sub_100088FDC();
  v158 = v24;
  sub_1000BA294(&qword_100BCB318);
  sub_1000B42B0();
  __chkstk_darwin(v25);
  sub_100088FDC();
  v159 = v26;
  v27 = sub_10009876C();
  v160 = type metadata accessor for HistoricalFacts(v27);
  v154 = *(_QWORD *)(v160 - 8);
  sub_10009D98C();
  __chkstk_darwin(v28);
  sub_100088FDC();
  v153 = v29;
  v30 = sub_10009876C();
  type metadata accessor for MonthlyAveragesChartInput(v30);
  sub_1000B42B0();
  __chkstk_darwin(v31);
  sub_1000986FC();
  v166 = v32;
  sub_10009D2A4();
  __chkstk_darwin(v33);
  v176 = (uint64_t)&v148 - v34;
  v35 = sub_10009876C();
  type metadata accessor for TimeState(v35);
  sub_1000B42B0();
  __chkstk_darwin(v36);
  sub_100088FDC();
  v177 = v37;
  v38 = sub_10009876C();
  v39 = (int *)type metadata accessor for PrecipitationAveragesHeroChartInput(v38);
  sub_1000B42B0();
  __chkstk_darwin(v40);
  sub_1000986FC();
  v164 = v41;
  sub_10009D2A4();
  __chkstk_darwin(v42);
  v44 = (char *)&v148 - v43;
  sub_1000BD334();
  sub_1000B42B0();
  __chkstk_darwin(v45);
  sub_1000986FC();
  v178 = v46;
  sub_10009D2A4();
  __chkstk_darwin(v47);
  v175 = (uint64_t)&v148 - v48;
  v49 = sub_10009876C();
  v172 = type metadata accessor for WeatherData(v49);
  sub_1000B42B0();
  __chkstk_darwin(v50);
  sub_100088FDC();
  v174 = v51;
  sub_1000BA294(&qword_100BC3380);
  sub_1000B42B0();
  __chkstk_darwin(v52);
  v54 = (char *)&v148 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for LocationWeatherDataState(0);
  sub_1000B42B0();
  v57 = __chkstk_darwin(v56);
  v59 = (char *)&v148 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v57);
  v61 = (char *)&v148 - v60;
  v62 = a1;
  v63 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 16);
  swift_bridgeObjectRetain(v63);
  v64 = a3;
  v66 = Location.id.getter(v65);
  sub_1000EED10(v66, v67, v63);
  sub_1000986C4();
  swift_bridgeObjectRelease(v63);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v54, 1, v55) == 1)
  {
    sub_100021A14((uint64_t)v54, &qword_100BC3380);
    if (qword_100BC2478 != -1)
      swift_once(&qword_100BC2478, sub_1006F38E8);
    v68 = type metadata accessor for Logger(0);
    sub_1000AECD4(v68, (uint64_t)qword_100CAF150);
    v69 = v181;
    v70 = (*(uint64_t (**)(char *, uint64_t, id))(v180 + 16))(v173, a3, v181);
    v71 = Logger.logObject.getter(v70);
    v73 = static os_log_type_t.error.getter(v71, v72);
    if (os_log_type_enabled(v71, v73))
    {
      v74 = sub_100098710(22);
      v75 = sub_100098710(32);
      v183 = v75;
      sub_1000B45D8(7.2225e-34);
      v77 = v76 + 8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v76 + 8);
      *(_WORD *)(v74 + 12) = 2081;
      sub_1002084DC();
      v78 = dispatch thunk of CustomStringConvertible.description.getter(v69);
      v184 = sub_100098994(v78, v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v77);
      sub_1000986C4();
      sub_1000E6F04();
      sub_1000D8E34((void *)&_mh_execute_header, v71, v73, "Failed to create averages detail input due to missing weather data; location=%{private,mask.hash}s");
      swift_arrayDestroy(v75, 1);
      sub_1000986F0(v75);
      sub_1000986F0(v74);
    }
    else
    {
      sub_1000E6F04();
    }

LABEL_20:
    v114 = sub_10009D3D4();
    return (id)_s7Weather24LocationCompositionStateOwst_0(v182, 1, 1, v114);
  }
  sub_1000F2100((uint64_t)v54, (uint64_t)v61, type metadata accessor for LocationWeatherDataState);
  sub_10009A7C4((uint64_t)v61, (uint64_t)v59, type metadata accessor for LocationWeatherDataState);
  if (swift_getEnumCaseMultiPayload(v59) != 1)
  {
    sub_1000215BC((uint64_t)v59, type metadata accessor for LocationWeatherDataState);
    v101 = v181;
    if (qword_100BC2478 != -1)
      swift_once(&qword_100BC2478, sub_1006F38E8);
    v102 = type metadata accessor for Logger(0);
    sub_1000AECD4(v102, (uint64_t)qword_100CAF150);
    v103 = (*(uint64_t (**)(char *, uint64_t, id))(v180 + 16))(v162, a3, v101);
    v104 = Logger.logObject.getter(v103);
    v106 = static os_log_type_t.error.getter(v104, v105);
    if (os_log_type_enabled(v104, v106))
    {
      v107 = sub_100098710(22);
      v108 = sub_100098710(32);
      v183 = v108;
      sub_1000B45D8(7.2225e-34);
      v173 = v61;
      v110 = v109 + 8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v109 + 8);
      *(_WORD *)(v107 + 12) = 2081;
      sub_1002084DC();
      v111 = dispatch thunk of CustomStringConvertible.description.getter(v101);
      v184 = sub_100098994(v111, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v110);
      sub_1000986C4();
      sub_1000CD5D0();
      sub_1000D8E34((void *)&_mh_execute_header, v104, v106, "Failed to create averages detail input due to missing weather data; location=%{private,mask.hash}s");
      swift_arrayDestroy(v108, 1);
      sub_1000986F0(v108);
      sub_1000986F0(v107);

      v113 = (uint64_t)v173;
    }
    else
    {

      sub_1000CD5D0();
      v113 = (uint64_t)v61;
    }
    sub_1000215BC(v113, type metadata accessor for LocationWeatherDataState);
    goto LABEL_20;
  }
  v173 = v61;
  v80 = sub_1000BA294(&qword_100BC3358);
  v81 = (uint64_t)&v59[*(int *)(v80 + 48)];
  v82 = (uint64_t)&v59[*(int *)(v80 + 64)];
  sub_1000F2100((uint64_t)v59, v174, type metadata accessor for WeatherData);
  sub_1000F2100(v82, v175, type metadata accessor for NewsDataModel);
  sub_1000215BC(v81, type metadata accessor for PreprocessedWeatherData);
  v151 = v62 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_time;
  v83 = v177;
  sub_10009A7C4(v62 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_time, v177, type metadata accessor for TimeState);
  v84 = sub_100098778();
  v85 = *(void (**)(uint64_t, uint64_t, char *))(*(_QWORD *)(v84 - 8) + 32);
  v162 = (char *)v84;
  v152 = v85;
  ((void (*)(char *, uint64_t))v85)(v44, v83);
  v86 = &v44[v39[5]];
  type metadata accessor for WeatherStatisticsModel(0);
  sub_10009BC70();
  v88 = v87(v86, v163);
  v89 = WeatherDataModel.dailyForecast.getter(v88);
  v90 = v64;
  Location.timeZone.getter(v89);
  v91 = v62 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment;
  swift_beginAccess(v62 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment, &v183, 0, 0);
  v150 = type metadata accessor for EnvironmentState(0);
  v149 = v91;
  sub_100203470(v161, (uint64_t)&v44[v39[9]]);
  v92 = (uint64_t)&v44[v39[8]];
  type metadata accessor for Locale(0);
  sub_10009BC70();
  sub_1000C13A8(v92, v93);
  v94 = v165;
  sub_1000DB418((_QWORD *)(v165 + 40), *(_QWORD *)(v165 + 64));
  v163 = v90;
  sub_10081BC88(v62, v176);
  v95 = type metadata accessor for SettingReader(0);
  v96 = static SettingReader.shared.getter(v95);
  if (qword_100BC22C8 != -1)
    swift_once(&qword_100BC22C8, sub_1005E691C);
  v97 = SettingReader.isEnabled(_:with:)(qword_100CAEE68, 2);
  swift_release(v96);
  if ((v97 & 1) != 0)
  {
    v98 = v158;
    sub_1000EADE8();
    v99 = v172;
    if (_s7Weather24LocationCompositionStateOwet_0(v98, 1, v172) == 1)
    {
      sub_100021A14(v98, &qword_100BC3460);
      v100 = v159;
      _s7Weather24LocationCompositionStateOwst_0(v159, 1, 1, v160);
    }
    else
    {
      v116 = v98 + *(int *)(v99 + 24);
      v117 = v156;
      v118 = v155;
      v119 = v157;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v156 + 16))(v155, v116, v157);
      sub_1000215BC(v98, type metadata accessor for WeatherData);
      v120 = v159;
      WeatherDataModel.historicalFacts.getter(v121);
      v122 = v119;
      v100 = v120;
      (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v118, v122);
      v123 = v160;
      if (_s7Weather24LocationCompositionStateOwet_0(v120, 1, v160) != 1)
      {
        v146 = v154;
        v147 = v153;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v154 + 32))(v153, v100, v123);
        sub_1000DB418((_QWORD *)(v94 + 80), *(_QWORD *)(v94 + 104));
        v172 = sub_10056C9D0(v147);
        (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v147, v123);
        goto LABEL_24;
      }
    }
    sub_100021A14(v100, &qword_100BCB318);
  }
  v172 = 0;
LABEL_24:
  v124 = v164;
  sub_10009A7C4((uint64_t)v44, v164, type metadata accessor for PrecipitationAveragesHeroChartInput);
  v125 = v176;
  v126 = v166;
  sub_10009A7C4(v176, v166, type metadata accessor for MonthlyAveragesChartInput);
  v127 = v175;
  sub_10009A7C4(v175, v178, type metadata accessor for NewsDataModel);
  v128 = v167;
  v129 = v163;
  Location.timeZone.getter(v130);
  static Calendar.currentCalendar(with:)(v128);
  (*(void (**)(uint64_t, uint64_t))(v168 + 8))(v128, v169);
  sub_1000215BC(v125, type metadata accessor for MonthlyAveragesChartInput);
  sub_1000215BC((uint64_t)v44, type metadata accessor for PrecipitationAveragesHeroChartInput);
  sub_1000215BC(v127, type metadata accessor for NewsDataModel);
  sub_1000215BC(v174, type metadata accessor for WeatherData);
  sub_1000215BC((uint64_t)v173, type metadata accessor for LocationWeatherDataState);
  v131 = v177;
  sub_10009A7C4(v151, v177, type metadata accessor for TimeState);
  v132 = (int *)sub_10009D3D4();
  v133 = v182;
  v152(v182 + v132[9], v131, v162);
  (*(void (**)(uint64_t, uint64_t, id))(v180 + 16))(v133 + v132[10], v129, v181);
  v134 = v149 + *(int *)(v150 + 64);
  v136 = *(void **)v134;
  v135 = *(void **)(v134 + 8);
  v138 = *(void **)(v134 + 16);
  v137 = *(void **)(v134 + 24);
  v139 = *(void **)(v134 + 40);
  v181 = *(id *)(v134 + 32);
  sub_1000F2100(v124, v133, type metadata accessor for PrecipitationAveragesHeroChartInput);
  sub_1000F2100(v126, v133 + v132[5], type metadata accessor for MonthlyAveragesChartInput);
  *(_QWORD *)(v133 + v132[6]) = v172;
  sub_1000F2100(v178, v133 + v132[7], type metadata accessor for NewsDataModel);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v170 + 32))(v133 + v132[8], v179, v171);
  v140 = (_QWORD *)(v133 + v132[11]);
  *v140 = v136;
  v140[1] = v135;
  v140[2] = v138;
  v140[3] = v137;
  v140[4] = v181;
  v140[5] = v139;
  _s7Weather24LocationCompositionStateOwst_0(v133, 0, 1, (uint64_t)v132);
  v141 = v139;
  v142 = v136;
  v143 = v135;
  v144 = v138;
  v145 = v137;
  return v181;
}

ValueMetadata *type metadata accessor for PrecipitationAveragesDetailInputFactory()
{
  return &type metadata for PrecipitationAveragesDetailInputFactory;
}

uint64_t getEnumTagSinglePayload for Down(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;

  if (a2)
  {
    if (a2 >= 0xFD && a1[48])
    {
      v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      v3 = *a1;
      v4 = v3 >= 4;
      v2 = v3 - 4;
      if (!v4)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Down(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for Down()
{
  return &type metadata for Down;
}

uint64_t sub_1002463AC()
{
  unsigned __int8 *v0;

  return *v0;
}

double sub_1002463B4()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

double sub_1002463C0()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

void sub_1002463C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, int a6, int a7, int a8)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t inited;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 *v60;
  void (*v61)(_QWORD, _QWORD, _QWORD);
  __n128 v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  _QWORD *v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  BOOL v76;
  BOOL v77;
  char v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __n128 *v107;
  uint64_t v108;
  void (*v109)(_QWORD, _QWORD, _QWORD);
  uint64_t *v110;
  uint64_t v111;
  __n128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _BYTE *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __n128 *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void (*v152)(uint64_t, uint64_t);
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  __n128 *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void (*v196)(char *, uint64_t, uint64_t);
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  void (*v221)(uint64_t, uint64_t);
  _BYTE *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  __n128 *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  __n128 *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  _BYTE *v276;
  uint64_t v277;
  uint64_t v278;
  _BYTE *v279;
  char *v280;
  int v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  uint64_t *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  __n128 *v301;
  uint64_t v302;
  void (*v303)(_QWORD, _QWORD, _QWORD);
  __int128 v304;
  _QWORD *HourPrecipitationComponentParameters;
  uint64_t v306;
  int v307;
  __int128 v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  _BYTE *v318;
  uint64_t v319;
  _QWORD v320[29];
  unsigned __int8 v321;
  char v322[40];

  v9 = v8;
  LODWORD(v314) = a8;
  v307 = a6;
  v316 = a3;
  v291 = *v8;
  LODWORD(v309) = a5;
  v13 = sub_1000BA294(&qword_100BCB9F8);
  v296 = *(_QWORD *)(v13 - 8);
  v297 = v13;
  sub_10009D98C();
  __chkstk_darwin(v14);
  sub_100088FDC();
  v295 = v15;
  v16 = sub_1000BA294(&qword_100BCB130);
  v293 = *(_QWORD *)(v16 - 8);
  v294 = v16;
  sub_10009D98C();
  __chkstk_darwin(v17);
  sub_100088FDC();
  v298 = v18;
  v311 = type metadata accessor for CurrentWeather(0);
  v292 = *(_QWORD *)(v311 - 8);
  sub_10009D98C();
  __chkstk_darwin(v19);
  sub_100088FDC();
  v313 = v20;
  sub_1000BA294(&qword_100BCB328);
  sub_10009D98C();
  __chkstk_darwin(v21);
  sub_1000986FC();
  v299 = v22;
  sub_10009D2A4();
  __chkstk_darwin(v23);
  v286 = (char *)&v280 - v24;
  v25 = sub_1000C1A18();
  sub_10009D98C();
  __chkstk_darwin(v26);
  sub_100088FDC();
  *(_QWORD *)&v304 = v27;
  HourPrecipitationComponentParameters = (_QWORD *)type metadata accessor for NextHourPrecipitationComponentParameters(0);
  sub_10009D98C();
  __chkstk_darwin(v28);
  sub_100088FDC();
  v306 = v29;
  v30 = sub_1000F43B8();
  v302 = *(_QWORD *)(v30 - 8);
  v303 = (void (*)(_QWORD, _QWORD, _QWORD))v30;
  sub_10009D98C();
  __chkstk_darwin(v31);
  sub_100088FDC();
  v301 = v32;
  sub_1000BA294(&qword_100BCE2A8);
  sub_10009D98C();
  __chkstk_darwin(v33);
  sub_1000986FC();
  v287 = v34;
  sub_10009D2A4();
  __chkstk_darwin(v35);
  sub_1000860D0();
  v289 = v36;
  sub_10009D2A4();
  __chkstk_darwin(v37);
  sub_1000860D0();
  v288 = v38;
  sub_10009D2A4();
  __chkstk_darwin(v39);
  v41 = (uint64_t *)((char *)&v280 - v40);
  v42 = type metadata accessor for LocationViewComponent(0);
  v290 = *(_QWORD *)(v42 - 8);
  sub_10009D98C();
  __chkstk_darwin(v43);
  sub_1000986FC();
  v282 = v44;
  sub_10009D2A4();
  __chkstk_darwin(v45);
  sub_1000860D0();
  v284 = v46;
  sub_10009D2A4();
  __chkstk_darwin(v47);
  sub_1000860D0();
  v318 = v48;
  sub_10009D2A4();
  __chkstk_darwin(v49);
  sub_1000860D0();
  v283 = v50;
  sub_10009D2A4();
  __chkstk_darwin(v51);
  v53 = (char *)&v280 - v52;
  v54 = type metadata accessor for LocationViewConfigurationBuilder();
  inited = swift_initStackObject(v54, v322);
  *(_QWORD *)(inited + 16) = _swiftEmptyArrayStorage;
  v300 = inited + 16;
  v315 = inited;
  *(_QWORD *)(inited + 24) = &_swiftEmptySetSingleton;
  v285 = v25;
  v312 = a2 + *(int *)(v25 + 24);
  v56 = WeatherDataModel.weatherAlerts.getter();
  v57 = a2;
  v317 = a2;
  *(_QWORD *)&v308 = v9;
  v310 = a1;
  if (v56)
  {
    v280 = v53;
    v281 = a7;
    v58 = Array<A>.filteredEvents.getter();
    swift_bridgeObjectRelease();
    sub_1000DB418(v9 + 2, v9[5]);
    v60 = v301;
    v59 = v302;
    v61 = v303;
    (*(void (**)(__n128 *, _QWORD, _QWORD))(v302 + 104))(v301, enum case for WeatherAlert.Prominence.high(_:), v303);
    sub_10000C5A4(v58, (uint64_t)v60, v41);
    v62 = swift_bridgeObjectRelease();
    (*(void (**)(__n128 *, void (*)(_QWORD, _QWORD, _QWORD), __n128))(v59 + 8))(v60, v61, v62);
    sub_100088FC8((uint64_t)v41, 1, v42);
    if (v63)
    {
      sub_100021A14((uint64_t)v41, &qword_100BCE2A8);
    }
    else
    {
      v64 = (uint64_t)v280;
      sub_10009D3DC((uint64_t)v41);
      sub_10006BDC8(v64);
      sub_10004A2E0(v65, type metadata accessor for LocationViewComponent);
    }
    v57 = v317;
    v9 = (_QWORD *)v308;
    a1 = v310;
    LOBYTE(a7) = v281;
  }
  v66 = sub_1000992C4();
  v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 16);
  v319 = v42;
  v68 = v306;
  v67(v306, a1, v66);
  v69 = HourPrecipitationComponentParameters;
  sub_1000F9DA4(v57, v68 + *((int *)HourPrecipitationComponentParameters + 5), (void (*)(_QWORD))type metadata accessor for WeatherData);
  *(_QWORD *)(v68 + *((int *)v69 + 6)) = _swiftEmptyArrayStorage;
  v70 = a7 & 1;
  *(_BYTE *)(v68 + *((int *)v69 + 7)) = a7 & 1;
  v71 = v9[5];
  HourPrecipitationComponentParameters = v9 + 2;
  sub_1000DA4B8(v9 + 2, v71);
  v72 = v288;
  sub_10081EA5C(v68, v288);
  v73 = sub_100088FC8(v72, 1, v319);
  v74 = v9;
  if (v63)
  {
    sub_1000988A8(v73, &qword_100BCE2A8);
  }
  else
  {
    v75 = v283;
    sub_100102BB4(v72, v283);
    sub_10006BDC8(v75);
    if ((v314 & 1) != 0 || (v309 & 1) != 0)
    {
      sub_1000215BC(v75, type metadata accessor for LocationViewComponent);
    }
    else
    {
      v279 = v318;
      v67((uint64_t)v318, v310, v66);
      swift_storeEnumTagMultiPayload(v279, v319, 9);
      sub_1000D9450((uint64_t)v279);
      sub_1000215BC((uint64_t)v279, type metadata accessor for LocationViewComponent);
      sub_1000215BC(v75, type metadata accessor for LocationViewComponent);
    }
  }
  v76 = sub_10048BD40();
  v77 = v76;
  v78 = v314 ^ 1 | v309;
  v79 = v316;
  if ((v78 & 1) == 0 && !v76)
  {
    v80 = v318;
    swift_storeEnumTagMultiPayload(v318, v319, 19);
    sub_1000D9450((uint64_t)v80);
    sub_1000215BC((uint64_t)v80, type metadata accessor for LocationViewComponent);
  }
  sub_1000DA4B8(HourPrecipitationComponentParameters, v74[5]);
  v81 = v289;
  sub_10000E75C(v289);
  sub_100088FC8(v81, 1, v319);
  if (v63)
  {
    sub_100021A14(v81, &qword_100BCE2A8);
  }
  else
  {
    v82 = v81;
    v83 = v284;
    sub_1000CD5E8(v82);
    sub_1000D9450(v83);
    sub_1000215BC(v83, type metadata accessor for LocationViewComponent);
  }
  if (!(v78 & 1 | !v77))
  {
    v84 = v318;
    swift_storeEnumTagMultiPayload(v318, v319, 19);
    sub_1000D9450((uint64_t)v84);
    sub_10004A2E0(v85, type metadata accessor for LocationViewComponent);
  }
  v86 = v318;
  sub_100098A84();
  v87 = type metadata accessor for PreprocessedWeatherData(0);
  v88 = type metadata accessor for HourlyForecastComponent(0);
  sub_1000CF7B8();
  sub_10009DA50(v89, v90, (void (*)(_QWORD))type metadata accessor for HourlyForecastComponentPreprocessedDataModel);
  v92 = WeatherDataModel.hourlyForecast.getter(v91);
  v93 = WeatherDataModel.dailyForecast.getter(v92);
  WeatherDataModel.weatherChanges.getter(v93);
  v86[*(int *)(v88 + 36)] = 1;
  v86[*(int *)(v88 + 40)] = v70;
  v94 = v319;
  swift_storeEnumTagMultiPayload(v86, v319, 3);
  sub_1000D9450((uint64_t)v86);
  sub_10009BEDC();
  sub_100098A84();
  v314 = v87;
  v95 = *(_QWORD *)(v79 + *(int *)(v87 + 20));
  *(_QWORD *)&v86[*(int *)(type metadata accessor for DailyForecastComponent(0) + 20)] = v95;
  swift_storeEnumTagMultiPayload(v86, v94, 1);
  sub_1000989F8();
  sub_1000D9450((uint64_t)v86);
  sub_10009BEDC();
  if (!(_BYTE)v307)
  {
    v97 = v318;
    v96 = v319;
    *v318 = 0;
    swift_storeEnumTagMultiPayload(v97, v96, 12);
    sub_1000D9450((uint64_t)v97);
    sub_10004A2E0(v98, type metadata accessor for LocationViewComponent);
  }
  v99 = v308;
  v100 = v304;
  if ((v309 & 1) == 0)
  {
    v101 = sub_1000B4608();
    v102 = v318;
    sub_1000C13A8((uint64_t)v318, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 104));
    sub_1000DF4A8();
    sub_1000DC378();
    sub_1000F9DA4(v317, v103, (void (*)(_QWORD))type metadata accessor for WeatherData);
    swift_storeEnumTagMultiPayload(v102, v319, 5);
    sub_1000D9450((uint64_t)v102);
    sub_10004A2E0(v104, type metadata accessor for LocationViewComponent);
  }
  v105 = WeatherDataModel.weatherAlerts.getter();
  if (v105)
  {
    v106 = v105;
    sub_1000DB418(HourPrecipitationComponentParameters, *(_QWORD *)(v99 + 40));
    v107 = v301;
    v108 = v302;
    v109 = v303;
    (*(void (**)(__n128 *, _QWORD, _QWORD))(v302 + 104))(v301, enum case for WeatherAlert.Prominence.low(_:), v303);
    v110 = v287;
    sub_10000C5A4(v106, (uint64_t)v107, v287);
    v111 = v319;
    v112 = swift_bridgeObjectRelease();
    (*(void (**)(__n128 *, void (*)(_QWORD, _QWORD, _QWORD), __n128))(v108 + 8))(v107, v109, v112);
    sub_100088FC8((uint64_t)v110, 1, v111);
    if (v63)
    {
      sub_100021A14((uint64_t)v110, &qword_100BCE2A8);
    }
    else
    {
      v113 = v282;
      sub_10009D3DC((uint64_t)v110);
      sub_1000D9450(v113);
      sub_10004A2E0(v114, type metadata accessor for LocationViewComponent);
    }
    v79 = v316;
    v100 = v304;
  }
  if (qword_100BC2670 != -1)
    swift_once(&qword_100BC2670, sub_10015A7B0);
  v115 = qword_100CAF4D8;
  v116 = sub_1002489C0();
  Configurable.setting<A>(_:)(v115, v291, v116);
  LODWORD(v115) = v321;
  sub_1000F9DA4(v317, v100, (void (*)(_QWORD))type metadata accessor for WeatherData);
  if ((_DWORD)v115 == 1)
  {
    sub_1000998E4(v117, type metadata accessor for WeatherData);
LABEL_37:
    sub_1000BA294(&qword_100BCE2B8);
    sub_1000C65C4();
    v302 = v123;
    v125 = v124;
    v309 = v124;
    v310 = v126;
    v127 = v126;
    HourPrecipitationComponentParameters = (_QWORD *)(v128 | 7);
    v130 = v129;
    *(_QWORD *)&v304 = v129;
    v131 = swift_allocObject(v129, v123, v128 | 7);
    v308 = xmmword_10097DA20;
    *(_OWORD *)(v131 + 16) = xmmword_10097DA20;
    v132 = v299;
    WeatherDataModel.historicalComparisons.getter();
    sub_1002489FC(v132, v131 + v125);
    v133 = v319;
    swift_storeEnumTagMultiPayload(v131 + v125, v319, 15);
    v134 = v131 + v125 + v127;
    v135 = v314;
    v136 = v79;
    sub_1000F9DA4(v79 + *(int *)(v314 + 24), v134, (void (*)(_QWORD))type metadata accessor for FeelsLikeComponentPreprocessedDataModel);
    swift_storeEnumTagMultiPayload(v134, v133, 2);
    sub_1000FFCC8(v131);
    swift_setDeallocating(v131);
    sub_10006BE54();
    v137 = v318;
    sub_100098A84();
    sub_10009BEC4(v320);
    v138 = type metadata accessor for WindComponent(0);
    sub_10009BEC4(&v137[*(int *)(v138 + 20)]);
    swift_storeEnumTagMultiPayload(v137, v133, 18);
    sub_1002488CC(v320);
    sub_1000D9450((uint64_t)v137);
    sub_1000998E4(v139, type metadata accessor for LocationViewComponent);
    v140 = v302;
    v141 = (__n128 *)sub_1000BDC4C(v130, v302);
    sub_1000C69A0(v141);
    v144 = v142 + v143;
    v145 = v313;
    sub_100098A84();
    v146 = v136 + *(int *)(v135 + 40);
    v147 = v298;
    v148 = sub_1000E76C0();
    v149 = v295;
    WeatherDataModel.hourlyForecast.getter(v148);
    v303 = *(void (**)(_QWORD, _QWORD, _QWORD))(v292 + 32);
    v303(v144, v145, v311);
    v150 = type metadata accessor for UVIndexComponent(0);
    sub_1000F9DA4(v146, v144 + *(int *)(v150 + 20), (void (*)(_QWORD))type metadata accessor for UVIndexComponentPreprocessedDataModel);
    sub_1000D1CCC();
    v151 = sub_1000DB234();
    v152(v151, v149);
    v153 = v319;
    swift_storeEnumTagMultiPayload(v144, v319, 16);
    v154 = v144 + v310;
    sub_100098A84();
    sub_1000E76C0();
    SunriseSunsetModel.init(currentWeather:dailyForecast:)(v145, v147);
    swift_storeEnumTagMultiPayload(v154, v153, 14);
    sub_1000FFCC8((uint64_t)v141);
    sub_1000D0960();
    sub_1000CDEE0();
    v301 = (__n128 *)sub_1000BDC4C(v304, v140);
    sub_1000C69A0(v301);
    v157 = (_QWORD *)(v155 + v156);
    sub_1000EF978();
    v159 = v158[1];
    v160 = v158[2];
    v161 = v158[3];
    v162 = v158[4];
    v163 = v158[5];
    v164 = v158[6];
    v165 = v158[7];
    v166 = v158[8];
    v167 = v158[9];
    v168 = v158[10];
    v169 = v158[11];
    v170 = v158[12];
    v171 = v158[13];
    *v157 = *v158;
    v157[1] = v159;
    v157[2] = v160;
    v157[3] = v161;
    v157[4] = v162;
    v157[5] = v163;
    v157[6] = v164;
    v157[7] = v165;
    v157[8] = v166;
    v157[9] = v167;
    v157[10] = v168;
    v157[11] = v169;
    v157[12] = v170;
    v157[13] = v171;
    sub_10009BED0((uint64_t)v157);
    v172 = (uint64_t)v157 + v310;
    swift_bridgeObjectRetain(v159);
    sub_1000878DC();
    sub_1000860DC();
    sub_100099360();
    swift_bridgeObjectRetain(v167);
    v173 = v169;
    v174 = v319;
    swift_bridgeObjectRetain(v173);
    swift_bridgeObjectRetain(v171);
    v175 = v313;
    WeatherDataModel.currentWeather.getter(v176);
    sub_1000EF978();
    v179 = *v177;
    v178 = v177[1];
    v181 = v177[2];
    v180 = v177[3];
    v183 = v177[4];
    v182 = v177[5];
    v184 = v175;
    v185 = v311;
    v303(v172, v184, v311);
    v186 = (_QWORD *)(v172 + *(int *)(type metadata accessor for VisibilityComponent(0) + 20));
    *v186 = v179;
    v186[1] = v178;
    v186[2] = v181;
    v186[3] = v180;
    v186[4] = v183;
    v186[5] = v182;
    v187 = v315;
    sub_1000BD9A8(v172);
    sub_1000989F8();
    sub_1000860DC();
    sub_1000878DC();
    v188 = v301;
    sub_1000CE524((uint64_t)v301);
    swift_setDeallocating(v188);
    v189 = sub_10006BE54();
    sub_1000E7BC4(v189, v190, (void (*)(_QWORD))type metadata accessor for WeatherData);
    sub_1000D059C();
    sub_1000C1D30();
    sub_1000215BC((uint64_t)v188, type metadata accessor for LocationViewComponent);
    v191 = sub_1000BDC4C(v304, v302);
    sub_1000C69A0((__n128 *)v191);
    v194 = v192 + v193;
    v195 = v313;
    sub_1000ECF60();
    v196 = (void (*)(char *, uint64_t, uint64_t))v303;
    v303(v194, v195, v185);
    v197 = sub_1000CDBD0();
    swift_storeEnumTagMultiPayload(v197, v198, 4);
    v199 = (char *)(v194 + v310);
    sub_1000ECF60();
    sub_1000CFBB8();
    sub_1000CF7B8();
    sub_10009DA50(v200, v201, (void (*)(_QWORD))type metadata accessor for PressureComponentPreprocessedDataModel);
    v202 = v199;
    v203 = v195;
    v204 = v185;
    goto LABEL_39;
  }
  v118 = (uint64_t)v286;
  WeatherDataModel.historicalComparisons.getter();
  v119 = type metadata accessor for HistoricalComparisons(0);
  v120 = sub_100088FC8(v118, 1, v119);
  if (v63)
  {
    sub_1000998E4(v120, type metadata accessor for WeatherData);
    sub_100021A14(v118, &qword_100BCB328);
  }
  else
  {
    v121 = HistoricalComparisons.hasDeviationsFromTrend.getter(v120);
    v122 = v121;
    sub_1000998E4(v121, type metadata accessor for WeatherData);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v119 - 8) + 8))(v118, v119);
    if ((v122 & 1) != 0)
      goto LABEL_37;
  }
  v303 = (void (*)(_QWORD, _QWORD, _QWORD))sub_1000BA294(&qword_100BCE2B8);
  sub_1000C65C4();
  v206 = v205;
  HourPrecipitationComponentParameters = v205;
  v208 = v207;
  *(_QWORD *)&v308 = v207;
  v309 = v210 | 7;
  v310 = v209;
  v212 = swift_allocObject(v211, v209, v210 | 7);
  v304 = xmmword_10097DA20;
  *(_OWORD *)(v212 + 16) = xmmword_10097DA20;
  v213 = (uint64_t)v206 + v212;
  sub_1000F9DA4(v79 + *(int *)(v314 + 24), v213, (void (*)(_QWORD))type metadata accessor for FeelsLikeComponentPreprocessedDataModel);
  swift_storeEnumTagMultiPayload(v213, v319, 2);
  v214 = v213 + v208;
  v215 = v313;
  sub_100098A84();
  v216 = v298;
  v217 = sub_1000E76C0();
  v218 = v295;
  WeatherDataModel.hourlyForecast.getter(v217);
  v302 = *(_QWORD *)(v292 + 32);
  ((void (*)(uint64_t, uint64_t, uint64_t))v302)(v214, v215, v311);
  v219 = type metadata accessor for UVIndexComponent(0);
  sub_1000D0C44(v219, v214 + *(int *)(v219 + 20), (void (*)(_QWORD))type metadata accessor for UVIndexComponentPreprocessedDataModel);
  sub_1000D1CCC();
  v220 = sub_1000DB234();
  v221(v220, v218);
  swift_storeEnumTagMultiPayload(v214, v319, 16);
  sub_1000FFCC8(v212);
  sub_1000D0960();
  sub_1000CDEE0();
  v222 = v318;
  sub_100098A84();
  sub_10009BEC4(v320);
  v223 = type metadata accessor for WindComponent(0);
  sub_10009BEC4(&v222[*(int *)(v223 + 20)]);
  v224 = sub_1000CDBD0();
  swift_storeEnumTagMultiPayload(v224, v225, 18);
  sub_1002488CC(v320);
  sub_10006BDC8((uint64_t)v222);
  sub_1000215BC((uint64_t)v222, type metadata accessor for LocationViewComponent);
  v226 = (__n128 *)sub_1000DA900();
  sub_1000DC13C(v226);
  v227 = v313;
  sub_100098A84();
  sub_1000E76C0();
  SunriseSunsetModel.init(currentWeather:dailyForecast:)(v227, v216);
  v228 = sub_1000CDBD0();
  swift_storeEnumTagMultiPayload(v228, v229, 14);
  sub_1000EF978();
  v231 = v230[1];
  v232 = v230[2];
  v233 = v230[3];
  v234 = v230[4];
  v235 = v230[5];
  v236 = v230[6];
  v237 = v230[7];
  v238 = v230[8];
  v239 = v230[9];
  v240 = v230[10];
  v241 = v230[11];
  v242 = v230[12];
  v243 = v230[13];
  *v244 = *v230;
  v244[1] = v231;
  v244[2] = v232;
  v244[3] = v233;
  v244[4] = v234;
  v244[5] = v235;
  v244[6] = v236;
  v244[7] = v237;
  v244[8] = v238;
  v244[9] = v239;
  v244[10] = v240;
  v244[11] = v241;
  v244[12] = v242;
  v244[13] = v243;
  sub_10009BED0((uint64_t)v244);
  sub_1000989F8();
  sub_1000878DC();
  swift_bridgeObjectRetain(v235);
  swift_bridgeObjectRetain(v237);
  swift_bridgeObjectRetain(v239);
  sub_1000860DC();
  sub_100099360();
  sub_1000FFCC8(v212);
  sub_1000D0960();
  sub_1000CDEE0();
  v245 = (__n128 *)sub_1000DA900();
  sub_1000DC13C(v245);
  v248 = v246 + v247;
  v249 = v313;
  WeatherDataModel.currentWeather.getter(v246);
  sub_1000EF978();
  v252 = *v250;
  v251 = v250[1];
  v254 = v250[2];
  v253 = v250[3];
  v256 = v250[4];
  v255 = v250[5];
  v257 = v249;
  v258 = v311;
  ((void (*)(uint64_t, uint64_t, uint64_t))v302)(v248, v257, v311);
  v259 = (_QWORD *)(v248 + *(int *)(type metadata accessor for VisibilityComponent(0) + 20));
  *v259 = v252;
  v259[1] = v251;
  v259[2] = v254;
  v259[3] = v253;
  v259[4] = v256;
  v259[5] = v255;
  v174 = v319;
  sub_1000BD9A8(v248);
  v260 = v248 + v308;
  sub_1000989F8();
  sub_1000878DC();
  v261 = sub_100099360();
  v262 = v313;
  WeatherDataModel.currentWeather.getter(v261);
  v263 = v258;
  v196 = (void (*)(char *, uint64_t, uint64_t))v302;
  ((void (*)(uint64_t, uint64_t, uint64_t))v302)(v260, v262, v263);
  swift_storeEnumTagMultiPayload(v260, v174, 4);
  v187 = v315;
  sub_1000CE524(v212);
  sub_1000D0960();
  v264 = sub_1000CDEE0();
  sub_1000E7BC4(v264, v265, (void (*)(_QWORD))type metadata accessor for WeatherData);
  sub_1000D059C();
  sub_1000C1D30();
  sub_1000215BC(v260, type metadata accessor for LocationViewComponent);
  v191 = sub_1000DA900();
  *(_OWORD *)(v191 + 16) = v304;
  v266 = (char *)HourPrecipitationComponentParameters + v191;
  v267 = v299;
  WeatherDataModel.historicalComparisons.getter();
  sub_1002489FC(v267, (uint64_t)v266);
  v268 = sub_1000CDBD0();
  swift_storeEnumTagMultiPayload(v268, v269, 15);
  v270 = &v266[v308];
  v271 = v313;
  sub_1000ECF60();
  sub_1000CFBB8();
  sub_1000CF7B8();
  sub_10009DA50(v272, v273, (void (*)(_QWORD))type metadata accessor for PressureComponentPreprocessedDataModel);
  v202 = v270;
  v203 = v271;
  v204 = v311;
LABEL_39:
  v196(v202, v203, v204);
  v274 = sub_1000CDBD0();
  swift_storeEnumTagMultiPayload(v274, v275, 10);
  sub_1000CE524(v191);
  swift_setDeallocating(v191);
  sub_10006BE54();
  if (v307 == 1)
  {
    v276 = v318;
    *v318 = 1;
    swift_storeEnumTagMultiPayload(v276, v174, 12);
    sub_1000C1D30();
    sub_10004A2E0(v277, type metadata accessor for LocationViewComponent);
  }
  sub_1000215BC(v306, type metadata accessor for NextHourPrecipitationComponentParameters);
  swift_beginAccess(v300, v320, 0, 0);
  swift_setDeallocating(v187);
  sub_1000860DC();
  v278 = sub_1001267BC();
  swift_deallocClassInstance(v278, 32, 7);
  sub_100098640();
}

void sub_100247584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  __n128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(char *, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189[2];
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  _QWORD *v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t HourPrecipitationComponentParameters;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;

  v215 = a3;
  v213 = a7;
  v216 = a1;
  HourPrecipitationComponentParameters = type metadata accessor for NextHourPrecipitationComponentParameters(0);
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_1000986FC();
  v203 = v9;
  sub_10009D2A4();
  __chkstk_darwin(v10);
  v201 = (char *)v189 - v11;
  v12 = sub_1000F43B8();
  v210 = *(_QWORD *)(v12 - 8);
  v211 = v12;
  sub_10009D98C();
  __chkstk_darwin(v13);
  sub_100088FDC();
  v209 = v14;
  sub_1000BA294(&qword_100BCE2A8);
  sub_10009D98C();
  __chkstk_darwin(v15);
  sub_1000986FC();
  v196 = v16;
  sub_10009D2A4();
  __chkstk_darwin(v17);
  sub_1000860D0();
  v202 = v18;
  sub_10009D2A4();
  __chkstk_darwin(v19);
  sub_1000860D0();
  v198 = v20;
  sub_10009D2A4();
  __chkstk_darwin(v21);
  v23 = (char *)v189 - v22;
  __chkstk_darwin(v24);
  sub_1000860D0();
  v194 = v25;
  sub_10009D2A4();
  __chkstk_darwin(v26);
  sub_1000860D0();
  v193 = v27;
  sub_10009D2A4();
  __chkstk_darwin(v28);
  sub_1000860D0();
  v200 = v29;
  sub_10009D2A4();
  __chkstk_darwin(v30);
  v32 = (uint64_t *)((char *)v189 - v31);
  v33 = type metadata accessor for LocationViewComponent(0);
  sub_10009D98C();
  __chkstk_darwin(v34);
  sub_1000986FC();
  v195 = v35;
  sub_10009D2A4();
  __chkstk_darwin(v36);
  sub_1000860D0();
  v197 = v37;
  sub_10009D2A4();
  __chkstk_darwin(v38);
  sub_1000860D0();
  v192 = v39;
  sub_10009D2A4();
  __chkstk_darwin(v40);
  sub_1000860D0();
  v206 = v41;
  sub_10009D2A4();
  __chkstk_darwin(v42);
  sub_1000860D0();
  v191 = v43;
  sub_10009D2A4();
  __chkstk_darwin(v44);
  v46 = (char *)v189 - v45;
  __chkstk_darwin(v47);
  sub_1000860D0();
  v204 = v48;
  sub_10009D2A4();
  __chkstk_darwin(v49);
  sub_1000860D0();
  v208 = v50;
  sub_10009D2A4();
  __chkstk_darwin(v51);
  v53 = (char *)v189 - v52;
  __chkstk_darwin(v54);
  sub_1000860D0();
  v190 = v55;
  sub_10009D2A4();
  __chkstk_darwin(v56);
  v58 = (char *)v189 - v57;
  __chkstk_darwin(v59);
  v205 = (uint64_t)v189 - v60;
  v61 = a2;
  sub_1000C1A18();
  v62 = ((uint64_t (*)(void))WeatherDataModel.weatherAlerts.getter)();
  v212 = v53;
  if (v62)
  {
    v63 = v62;
    v189[0] = (uint64_t)v46;
    v189[1] = (uint64_t)v58;
    v64 = *(_QWORD *)(v214 + 40);
    v199 = (_QWORD *)(v214 + 16);
    sub_1000DB418((_QWORD *)(v214 + 16), v64);
    v66 = v209;
    v65 = v210;
    v67 = v211;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v210 + 104))(v209, enum case for WeatherAlert.Prominence.high(_:), v211);
    sub_10000C5A4(v63, v66, v32);
    v68 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, __n128))(v65 + 8))(v66, v67, v68);
    v69 = sub_1000CC960((uint64_t)v32);
    if (!v115)
    {
      v108 = v205;
      sub_100102BB4((uint64_t)v32, v205);
      sub_1000992C4();
      sub_10009BC70();
      v109 = (uint64_t)v201;
      v110 = v216;
      v111(v201, v216);
      v112 = HourPrecipitationComponentParameters;
      sub_1000F9DA4(v61, v109 + *(int *)(HourPrecipitationComponentParameters + 20), (void (*)(_QWORD))type metadata accessor for WeatherData);
      *(_QWORD *)(v109 + *(int *)(v112 + 24)) = _swiftEmptyArrayStorage;
      *(_BYTE *)(v109 + *(int *)(v112 + 28)) = v213 & 1;
      v113 = v214;
      sub_1000DA4B8(v199, *(_QWORD *)(v214 + 40));
      v114 = v200;
      sub_10081EA5C(v109, v200);
      sub_1000CC960(v114);
      if (v115)
      {
        sub_100021A14(v114, &qword_100BCE2A8);
        sub_1000DA4B8(v199, *(_QWORD *)(v113 + 40));
        v116 = v194;
        sub_1000993BC(v194);
        sub_1000CC960(v116);
        if (v115)
        {
          sub_100021A14(v116, &qword_100BCE2A8);
          sub_1000BBDD8();
          v118 = v117;
          sub_1000998D4(v117, type metadata accessor for NextHourPrecipitationComponentParameters);
          v119 = sub_1000B4608();
          sub_1000C2564(v119);
          sub_1000DF4A8();
          sub_1000DC378();
          sub_1000D0C44(v120, v121, (void (*)(_QWORD))type metadata accessor for WeatherData);
          sub_1000DCC18(v110);
          v122 = v208;
          sub_1000CD5E8(v108);
          v123 = type metadata accessor for LocationNoAqiSevereConfiguration._Storage(0);
          sub_1000860C4(v123);
          sub_1001E40F8(v118, v110, v122);
        }
        else
        {
          sub_1000BEA0C(v116, (uint64_t)&v218);
          sub_1000BBDD8();
          sub_1000998D4(v158, type metadata accessor for NextHourPrecipitationComponentParameters);
          v159 = sub_1000B4608();
          sub_1000C2564(v159);
          sub_1000DF4A8();
          sub_1000DC378();
          sub_1000D0C44(v160, v161, (void (*)(_QWORD))type metadata accessor for WeatherData);
          sub_1000DCC18(v110);
          sub_1000CD5E8(v116);
          sub_1000DAE48(v108);
          v162 = type metadata accessor for LocationElevatedAqiSevereConfiguration._Storage(0);
          sub_1000860C4(v162);
          v163 = sub_1000C13B0();
          sub_1001DF9A8(v163, v164, v165, v166);
        }
      }
      else
      {
        sub_1000BEA0C(v114, (uint64_t)&v217);
        sub_1000DA4B8(v199, *(_QWORD *)(v113 + 40));
        v137 = v193;
        sub_1000993BC(v193);
        sub_1000CC960(v137);
        if (v138)
        {
          sub_100021A14(v137, &qword_100BCE2A8);
          sub_1000BBDD8();
          sub_1000998D4(v139, type metadata accessor for NextHourPrecipitationComponentParameters);
          v140 = sub_1000B4608();
          sub_1000C2564(v140);
          sub_1000DF4A8();
          sub_1000DC378();
          sub_1000D0C44(v141, v142, (void (*)(_QWORD))type metadata accessor for WeatherData);
          sub_1000DCC18(v110);
          sub_1000CD5E8(v205);
          sub_1000DAE48(v67);
          v143 = type metadata accessor for LocationNoAqiSevereNhpConfiguration._Storage(0);
          sub_1000860C4(v143);
          v144 = sub_1000C13B0();
          sub_1001E4FEC(v144, v145, v146, v147);
          sub_1000BEE1C();
        }
        else
        {
          v177 = v137;
          v178 = v190;
          sub_100102BB4(v177, v190);
          sub_1000BBDD8();
          sub_1000998D4(v179, type metadata accessor for NextHourPrecipitationComponentParameters);
          v180 = sub_1000B4608();
          sub_1000C2564(v180);
          sub_1000DF4A8();
          sub_1000DC378();
          sub_1000D0C44(v181, v182, (void (*)(_QWORD))type metadata accessor for WeatherData);
          sub_1000DCC18(v110);
          sub_1000CD5E8(v205);
          sub_1000DAE48(v67);
          v183 = v189[0];
          sub_100102BB4(v178, v189[0]);
          v184 = type metadata accessor for LocationSevereNhpAqiConfiguration._Storage(0);
          sub_1000860C4(v184);
          v185 = sub_1000C13B0();
          sub_1001E7200(v185, v186, v187, v188, v183);
        }
      }
      goto LABEL_27;
    }
    sub_1000988A8(v69, &qword_100BCE2A8);
  }
  v70 = v214;
  v71 = (_QWORD *)(v214 + 16);
  sub_1000DA4B8((_QWORD *)(v214 + 16), *(_QWORD *)(v214 + 40));
  sub_10000E75C((uint64_t)v23);
  sub_1000CC960((uint64_t)v23);
  if (!v115)
  {
    v90 = sub_100102BB4((uint64_t)v23, v206);
    v91 = WeatherDataModel.weatherAlerts.getter(v90);
    v92 = v216;
    if (v91)
    {
      v93 = v91;
      sub_1000DB418(v71, *(_QWORD *)(v70 + 40));
      v94 = v210;
      v95 = v211;
      v96 = v33;
      v97 = v209;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v210 + 104))(v209, enum case for WeatherAlert.Prominence.low(_:), v211);
      v98 = v198;
      HourPrecipitationComponentParameters = a2;
      sub_10000C5A4(v93, v97, v198);
      v99 = swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t, __n128))(v94 + 8))(v97, v95, v99);
      sub_100088FC8((uint64_t)v98, 1, v96);
      if (!v115)
      {
        v148 = v192;
        sub_1000CD5E8((uint64_t)v98);
        v149 = HourPrecipitationComponentParameters;
        sub_1000DB7CC(HourPrecipitationComponentParameters, v92, v215, v213 & 1);
        v150 = sub_1000B4608();
        v151 = (uint64_t)v212;
        sub_1000C13A8((uint64_t)v212, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v150 - 8) + 104));
        v152 = sub_1000DF4A8();
        sub_1000F9DA4(v149, v151 + *(int *)(v152 + 20), (void (*)(_QWORD))type metadata accessor for WeatherData);
        sub_1000DCC18(v151);
        sub_10009D3DC(v148);
        sub_1000CD5E8(v206);
        v153 = type metadata accessor for LocationElevatedAqiMinorAlertConfiguration._Storage(0);
        sub_1000860C4(v153);
        v154 = sub_1000EAF24();
        sub_1001DEE64(v154, v155, v156, v157);
        goto LABEL_27;
      }
      sub_100021A14((uint64_t)v98, &qword_100BCE2A8);
    }
    sub_1000DB7CC(a2, v92, v215, v213 & 1);
    v100 = sub_1000B4608();
    v101 = (uint64_t)v212;
    sub_1000C13A8((uint64_t)v212, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 104));
    sub_1000DF4A8();
    sub_1000CF7B8();
    sub_10009997C(v102, v103, (void (*)(_QWORD))type metadata accessor for WeatherData);
    sub_1000DCC18(v101);
    sub_1000D8E40();
    v104 = type metadata accessor for LocationElevatedAqiConfiguration._Storage(0);
    sub_1000860C4(v104);
    v105 = sub_1000B2594();
    sub_1001DE8D8(v105, v106, v107);
    sub_1000BEE1C();
    goto LABEL_27;
  }
  sub_100021A14((uint64_t)v23, &qword_100BCE2A8);
  sub_1000992C4();
  sub_10009BC70();
  v72 = v203;
  v73 = v216;
  v75 = v74(v203, v216);
  v76 = HourPrecipitationComponentParameters;
  sub_10009997C(v75, v72 + *(int *)(HourPrecipitationComponentParameters + 20), (void (*)(_QWORD))type metadata accessor for WeatherData);
  *(_QWORD *)(v72 + *(int *)(v76 + 24)) = _swiftEmptyArrayStorage;
  v77 = *(int *)(v76 + 28);
  v78 = v213;
  v79 = v213 & 1;
  *(_BYTE *)(v72 + v77) = v213 & 1;
  sub_1000DA4B8(v71, *(_QWORD *)(v70 + 40));
  v80 = v202;
  sub_10081EA5C(v72, v202);
  sub_1000CC960(v80);
  if (v115)
  {
    sub_100021A14(v80, &qword_100BCE2A8);
    sub_100248174(a2, v73, v215, v79, 1);
    v82 = v81;
    sub_100098A8C(v81, type metadata accessor for NextHourPrecipitationComponentParameters);
    v83 = enum case for WeatherMapOverlayKind.airQuality(_:);
    v84 = sub_1000B4608();
    v85 = (uint64_t)v212;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 104))(v212, v83, v84);
    sub_1000DF4A8();
    sub_1000DC378();
    sub_10009997C(v86, v87, (void (*)(_QWORD))type metadata accessor for WeatherData);
    sub_1000DCC18(v85);
    v88 = type metadata accessor for LocationNoAqiConfiguration._Storage(0);
    v89 = sub_1000860C4(v88);
    *(_QWORD *)(v89 + 16) = v82;
    sub_100102BB4(v85, v89 + OBJC_IVAR____TtCV7Weather26LocationNoAqiConfiguration8_Storage_map);
  }
  else
  {
    sub_100102BB4(v80, v197);
    sub_1000DA4B8(v71, *(_QWORD *)(v70 + 40));
    v124 = v196;
    sub_1000993BC(v196);
    v126 = sub_1000CC960(v124);
    if (v125)
    {
      sub_1000988A8(v126, &qword_100BCE2A8);
      sub_1000B45F8(a2, v73, v127, v78 & 1);
      sub_100098A8C(v128, type metadata accessor for NextHourPrecipitationComponentParameters);
      v129 = sub_1000B4608();
      v130 = (uint64_t)v212;
      sub_1000C13A8((uint64_t)v212, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v129 - 8) + 104));
      sub_1000DF4A8();
      sub_1000CF7B8();
      sub_10009997C(v131, v132, (void (*)(_QWORD))type metadata accessor for WeatherData);
      sub_1000DCC18(v130);
      sub_1000D8E40();
      v133 = type metadata accessor for LocationNoAqiNhpConfiguration._Storage(0);
      sub_1000860C4(v133);
      v134 = sub_1000B2594();
      sub_1001E33A8(v134, v135, v136);
    }
    else
    {
      sub_100102BB4(v124, v195);
      sub_1000B45F8(a2, v73, v167, v78 & 1);
      sub_100098A8C(v168, type metadata accessor for NextHourPrecipitationComponentParameters);
      v169 = sub_1000B4608();
      v170 = (uint64_t)v212;
      sub_1000C13A8((uint64_t)v212, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v169 - 8) + 104));
      v171 = sub_1000DF4A8();
      sub_10009997C(v171, v170 + *(int *)(v171 + 20), (void (*)(_QWORD))type metadata accessor for WeatherData);
      sub_1000DCC18(v170);
      sub_1000D8E40();
      sub_1000CD5E8(v195);
      v172 = type metadata accessor for LocationNhpConfiguration._Storage(0);
      sub_1000860C4(v172);
      v173 = sub_1000EAF24();
      sub_1001E0F1C(v173, v174, v175, v176);
    }
    sub_1000BEE1C();
  }
LABEL_27:
  sub_100098640();
}

void sub_100248174(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  const void *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int *v107;
  int v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD __dst[29];

  v108 = a5;
  LODWORD(v109) = a4;
  v117 = a1;
  v6 = sub_1000BA294(&qword_100BCB130);
  __chkstk_darwin(v6);
  v111 = (char *)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CurrentWeather(0);
  __chkstk_darwin(v8);
  v110 = (char *)&v107 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = type metadata accessor for LocationViewComponent(0);
  __chkstk_darwin(v121);
  v120 = (uint64_t)&v107 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v119 = (char *)&v107 - v12;
  __chkstk_darwin(v13);
  v118 = (char *)&v107 - v14;
  __chkstk_darwin(v15);
  v115 = (char *)&v107 - v16;
  __chkstk_darwin(v17);
  v124 = (uint64_t)&v107 - v18;
  __chkstk_darwin(v19);
  v123 = (uint64_t)&v107 - v20;
  __chkstk_darwin(v21);
  v23 = (int **)((char *)&v107 - v22);
  __chkstk_darwin(v24);
  v122 = (uint64_t)&v107 - v25;
  __chkstk_darwin(v26);
  v28 = (char *)&v107 - v27;
  __chkstk_darwin(v29);
  v31 = (char *)&v107 - v30;
  __chkstk_darwin(v32);
  v34 = (char *)&v107 - v33;
  __chkstk_darwin(v35);
  v37 = (char *)&v107 - v36;
  v38 = type metadata accessor for WeatherData(0);
  WeatherDataModel.currentWeather.getter(v38);
  v39 = (int *)type metadata accessor for PreprocessedWeatherData(0);
  v40 = a3 + v39[7];
  v41 = (int *)type metadata accessor for HourlyForecastComponent(0);
  sub_1000F9DA4(v40, (uint64_t)&v37[v41[5]], (void (*)(_QWORD))type metadata accessor for HourlyForecastComponentPreprocessedDataModel);
  v43 = WeatherDataModel.hourlyForecast.getter(v42);
  v44 = WeatherDataModel.dailyForecast.getter(v43);
  WeatherDataModel.weatherChanges.getter(v44);
  v45 = v41[9];
  v116 = v37;
  v37[v45] = v108;
  v37[v41[10]] = v109;
  v46 = v37;
  v47 = v121;
  swift_storeEnumTagMultiPayload(v46, v121, 3);
  WeatherDataModel.currentWeather.getter(v48);
  v49 = *(_QWORD *)(a3 + v39[5]);
  v50 = *(int *)(type metadata accessor for DailyForecastComponent(0) + 20);
  v114 = v34;
  *(_QWORD *)&v34[v50] = v49;
  swift_storeEnumTagMultiPayload(v34, v47, 1);
  swift_bridgeObjectRetain(v49);
  v113 = v31;
  WeatherDataModel.currentWeather.getter(v51);
  v52 = a3 + v39[10];
  v53 = type metadata accessor for UVIndexComponent(0);
  sub_1000F9DA4(v52, (uint64_t)&v31[*(int *)(v53 + 20)], (void (*)(_QWORD))type metadata accessor for UVIndexComponentPreprocessedDataModel);
  v55 = WeatherDataModel.dailyForecast.getter(v54);
  WeatherDataModel.hourlyForecast.getter(v55);
  v56 = v31;
  v57 = v47;
  swift_storeEnumTagMultiPayload(v56, v47, 16);
  v58 = v110;
  v60 = WeatherDataModel.currentWeather.getter(v59);
  v61 = v111;
  WeatherDataModel.dailyForecast.getter(v60);
  v112 = v28;
  SunriseSunsetModel.init(currentWeather:dailyForecast:)(v58, v61);
  swift_storeEnumTagMultiPayload(v28, v47, 14);
  v62 = v122;
  WeatherDataModel.currentWeather.getter(v63);
  v64 = (const void *)(a3 + v39[13]);
  memcpy(__dst, v64, sizeof(__dst));
  v65 = type metadata accessor for WindComponent(0);
  memcpy((void *)(v62 + *(int *)(v65 + 20)), v64, 0xE8uLL);
  swift_storeEnumTagMultiPayload(v62, v57, 18);
  v66 = (uint64_t *)(a3 + v39[9]);
  v67 = *v66;
  v68 = v66[1];
  v69 = v66[2];
  v70 = v66[3];
  v71 = v66[4];
  v72 = v66[5];
  v73 = v66[6];
  v74 = v66[7];
  v75 = v66[8];
  v109 = v66[9];
  v76 = v109;
  v77 = v66[10];
  v110 = (char *)v66[11];
  v78 = v110;
  v80 = v66[12];
  v79 = (char *)v66[13];
  v111 = v79;
  *v23 = v67;
  v23[1] = v68;
  v23[2] = v69;
  v23[3] = v70;
  v23[4] = v71;
  v23[5] = v72;
  v23[6] = v73;
  v23[7] = v74;
  v23[8] = v75;
  v23[9] = v76;
  v23[10] = v77;
  v23[11] = v78;
  v23[12] = v80;
  v23[13] = v79;
  swift_storeEnumTagMultiPayload(v23, v57, 11);
  v81 = v39[6];
  v107 = v39;
  v82 = v123;
  sub_1000F9DA4(a3 + v81, v123, (void (*)(_QWORD))type metadata accessor for FeelsLikeComponentPreprocessedDataModel);
  swift_storeEnumTagMultiPayload(v82, v57, 2);
  sub_1002488CC(__dst);
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRetain(v70);
  swift_bridgeObjectRetain(v72);
  swift_bridgeObjectRetain(v74);
  swift_bridgeObjectRetain(v109);
  swift_bridgeObjectRetain(v110);
  swift_bridgeObjectRetain(v111);
  v83 = v124;
  WeatherDataModel.currentWeather.getter(v84);
  swift_storeEnumTagMultiPayload(v83, v57, 4);
  v85 = v115;
  WeatherDataModel.currentWeather.getter(v86);
  v87 = a3;
  v88 = (uint64_t *)(a3 + v39[11]);
  v90 = *v88;
  v89 = v88[1];
  v92 = v88[2];
  v91 = v88[3];
  v94 = v88[4];
  v93 = v88[5];
  v95 = &v85[*(int *)(type metadata accessor for VisibilityComponent(0) + 20)];
  *(_QWORD *)v95 = v90;
  *((_QWORD *)v95 + 1) = v89;
  *((_QWORD *)v95 + 2) = v92;
  *((_QWORD *)v95 + 3) = v91;
  *((_QWORD *)v95 + 4) = v94;
  *((_QWORD *)v95 + 5) = v93;
  v96 = v85;
  v97 = (uint64_t)v85;
  v98 = v121;
  swift_storeEnumTagMultiPayload(v96, v121, 17);
  swift_bridgeObjectRetain(v89);
  swift_bridgeObjectRetain(v91);
  swift_bridgeObjectRetain(v93);
  v99 = (uint64_t)v118;
  WeatherDataModel.currentWeather.getter(v100);
  v101 = v87 + v107[12];
  v102 = type metadata accessor for PressureComponent(0);
  sub_1000F9DA4(v101, v99 + *(int *)(v102 + 20), (void (*)(_QWORD))type metadata accessor for PressureComponentPreprocessedDataModel);
  v103 = swift_storeEnumTagMultiPayload(v99, v98, 10);
  v104 = (uint64_t)v119;
  WeatherDataModel.historicalComparisons.getter(v103);
  swift_storeEnumTagMultiPayload(v104, v98, 15);
  v105 = v120;
  sub_1000F9DA4(v117, v120, (void (*)(_QWORD))type metadata accessor for WeatherData);
  swift_storeEnumTagMultiPayload(v105, v98, 6);
  v106 = type metadata accessor for LocationCommonConfigurationComponents._Storage(0);
  swift_allocObject(v106, *(unsigned int *)(v106 + 48), *(unsigned __int16 *)(v106 + 52));
  sub_1001DBE94((uint64_t)v116, (uint64_t)v114, (uint64_t)v113, (uint64_t)v112, v122, (uint64_t)v23, v123, v124, v97, v99, v104, v105);
}

void sub_100248888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, int a6, int a7, int a8)
{
  sub_1002463C8(a1, a2, a3, a4, a5 & 1, a6, a7, a8);
}

void sub_1002488AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  sub_100247584(a1, a2, a3, a4, a5, a6, a7);
}

_QWORD *sub_1002488CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[7];
  v5 = a1[9];
  v6 = a1[11];
  v7 = a1[13];
  v8 = a1[15];
  v9 = a1[17];
  v10 = a1[19];
  v12 = a1[21];
  v13 = a1[23];
  v14 = a1[25];
  v15 = a1[28];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  return a1;
}

unint64_t sub_1002489C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCE2B0;
  if (!qword_100BCE2B0)
  {
    v1 = type metadata accessor for AlternativeLocationViewConfigurationFactory();
    result = swift_getWitnessTable(&unk_10098B2FC, v1);
    atomic_store(result, (unint64_t *)&qword_100BCE2B0);
  }
  return result;
}

uint64_t sub_1002489FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BCB328);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100248A44(__int128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_10003C800(a1, v3 + 16);
  *(_QWORD *)(v3 + 56) = a2;
  *(_QWORD *)(v3 + 64) = a3;
  return v3;
}

uint64_t sub_100248A7C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t HourPrecipitationChartPlacement;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t HourPrecipitationDetail;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t HourPrecipitationDetailView;
  uint64_t v70;
  uint64_t HourPrecipitationDetailViewModel;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  objc_class *v81;
  NSBundle v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t);
  objc_class *v100;
  NSBundle v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t, uint64_t);
  void (*v110)(uint64_t, uint64_t);
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t);
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(uint64_t, uint64_t);
  objc_class *v126;
  NSBundle v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int *v138;
  uint64_t *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  objc_class *v143;
  NSBundle v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  int *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  id v163;
  objc_class *v164;
  NSBundle v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int *v172;
  uint64_t v173;
  uint64_t *v174;
  objc_class *v175;
  NSBundle v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  int *v198;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void (*v204)(uint64_t, uint64_t);
  uint64_t v205;
  uint64_t v206;
  int *v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  int *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  id v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;

  v228 = a1;
  v243 = (char *)a2;
  sub_1000BA294(&qword_100BCE370);
  sub_10009D98C();
  __chkstk_darwin(v2);
  sub_100088FDC();
  v227 = v3;
  v4 = sub_10009876C();
  v5 = type metadata accessor for ConditionDetailPlatterViewModel(v4);
  v6 = *(_QWORD *)(v5 - 8);
  v223 = (int *)v5;
  v224 = v6;
  sub_10009D98C();
  __chkstk_darwin(v7);
  sub_1000986FC();
  v241 = v8;
  __chkstk_darwin(v9);
  v222 = (char *)&v202 - v10;
  v11 = sub_10009876C();
  v12 = type metadata accessor for ConditionDetailMapViewModel(v11);
  sub_10009D98C();
  __chkstk_darwin(v13);
  sub_1000986FC();
  v242 = v14;
  __chkstk_darwin(v15);
  v240 = (uint64_t *)((char *)&v202 - v16);
  v17 = sub_10009876C();
  v18 = type metadata accessor for WeatherDescription(v17);
  v238 = *(_QWORD *)(v18 - 8);
  v239 = v18;
  sub_10009D98C();
  __chkstk_darwin(v19);
  sub_100088FDC();
  v237 = v20;
  sub_1000BA294(&qword_100BCCC48);
  sub_10009D98C();
  __chkstk_darwin(v21);
  sub_100098728();
  v24 = v23 - v22;
  v25 = sub_1000BA294(&qword_100BCB130);
  sub_1000B43A4(v25, (uint64_t)&v246);
  v220 = v26;
  sub_10009D98C();
  __chkstk_darwin(v27);
  sub_100088FDC();
  v219 = v28;
  v29 = sub_1000BA294(&qword_100BCB9F8);
  sub_1000B43A4(v29, (uint64_t)&v245);
  v218 = v30;
  sub_10009D98C();
  __chkstk_darwin(v31);
  sub_100088FDC();
  v217 = v32;
  v33 = sub_10009876C();
  v34 = type metadata accessor for CurrentWeather(v33);
  sub_1000B43A4(v34, (uint64_t)&v244);
  v216 = v35;
  sub_10009D98C();
  __chkstk_darwin(v36);
  sub_100088FDC();
  v215 = v37;
  sub_1000BA294(&qword_100BC3368);
  sub_10009D98C();
  __chkstk_darwin(v38);
  sub_100088FDC();
  v232 = v39;
  v40 = sub_10009876C();
  v41 = type metadata accessor for TimeZone(v40);
  v235 = *(_QWORD *)(v41 - 8);
  v236 = v41;
  sub_10009D98C();
  __chkstk_darwin(v42);
  sub_100088FDC();
  v234 = v43;
  v44 = sub_10009876C();
  HourPrecipitationChartPlacement = type metadata accessor for NextHourPrecipitationChartPlacement(v44);
  sub_1000B43A4(HourPrecipitationChartPlacement, (uint64_t)&v243);
  v213 = v46;
  sub_10009D98C();
  __chkstk_darwin(v47);
  sub_100098728();
  v50 = v49 - v48;
  HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
  v225 = *(_QWORD *)(HourPrecipitationChartViewModel - 8);
  v226 = HourPrecipitationChartViewModel;
  sub_10009D98C();
  __chkstk_darwin(v52);
  sub_1000986FC();
  v233 = v53;
  __chkstk_darwin(v54);
  v56 = (char *)&v202 - v55;
  v229 = type metadata accessor for Date(0);
  v57 = *(_QWORD *)(v229 - 8);
  __chkstk_darwin(v229);
  sub_100098728();
  v60 = v59 - v58;
  type metadata accessor for NextHourPrecipitationDetailInput(0);
  sub_10009D98C();
  __chkstk_darwin(v61);
  sub_100098728();
  v64 = v63 - v62;
  HourPrecipitationDetail = type metadata accessor for NextHourPrecipitationDetailInput.Input(0);
  sub_10009D98C();
  __chkstk_darwin(v66);
  sub_100088FDC();
  v68 = v67;
  sub_100080C0C((uint64_t)v228, v64, type metadata accessor for NextHourPrecipitationDetailInput);
  if (_s7Weather24LocationCompositionStateOwet_0(v64, 1, HourPrecipitationDetail) == 1)
  {
    sub_1000215BC(v64, type metadata accessor for NextHourPrecipitationDetailInput);
    HourPrecipitationDetailView = type metadata accessor for NextHourPrecipitationDetailViewModel.Model(0);
    v70 = (uint64_t)v243;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v243, 1, 1, HourPrecipitationDetailView);
    HourPrecipitationDetailViewModel = type metadata accessor for NextHourPrecipitationDetailViewModel(0);
    v72 = v70;
  }
  else
  {
    v231 = v68;
    sub_10007802C(v64, v68, type metadata accessor for NextHourPrecipitationDetailInput.Input);
    v206 = v24;
    v73 = v230;
    v205 = v230[7];
    v74 = *(int *)(HourPrecipitationDetail + 20);
    v207 = (int *)v12;
    v75 = v68 + v74;
    v221 = v75;
    sub_1000DF4B0();
    v76 = NextHourPrecipitationStringBuilder.buildShortString(from:referenceDate:)(v75, v60);
    v78 = v77;
    v204 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
    v204(v60, v229);
    if (v78)
      v79 = v76;
    else
      v79 = 0;
    v211 = v79;
    v80 = 0xE000000000000000;
    if (v78)
      v80 = v78;
    v210 = v80;
    v228 = (id)objc_opt_self(NSBundle);
    v81 = (objc_class *)objc_msgSend(v228, "mainBundle");
    sub_1000B4610();
    sub_1000989C4();
    sub_1000D9458();
    v82.super.isa = v81;
    v209 = sub_1000BA340(v83, v84, v85, v86, v82, v87, v88, v89);
    v208 = v90;

    v91 = v73[5];
    v92 = v73[6];
    sub_1000DB418(v73 + 2, v91);
    v93 = v56;
    v94 = v213;
    v95 = v214;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v213 + 104))(v50, enum case for NextHourPrecipitationChartPlacement.detailView(_:), v214);
    sub_1000DF4B0();
    v212 = v93;
    v96 = v231;
    v203 = HourPrecipitationDetail;
    v97 = v221;
    dispatch thunk of NextHourPrecipitationChartViewModelFactoryType.makeViewModel(for:precipitation:placement:currentTime:)(v231, v221, v50, v60, v91, v92);
    v98 = v229;
    v99 = v204;
    v204(v60, v229);
    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v50, v95);
    v100 = (objc_class *)objc_msgSend(v228, "mainBundle");
    sub_1000B4610();
    sub_1000989C4();
    v101.super.isa = v100;
    v214 = sub_1000BA340(0x7473616365726F46, 0xE800000000000000, 0, 0, v101, v102, v103, v104);
    v213 = v105;

    v106 = v234;
    Location.timeZone.getter(v107);
    sub_1000DF4B0();
    v108 = NextHourPrecipitationStringBuilder.buildLongString(from:timeZone:referenceDate:)(v97, v106, v60);
    v110 = v109;
    v99(v60, v98);
    v111 = v236;
    v112 = *(void (**)(uint64_t, uint64_t))(v235 + 8);
    v112(v106, v236);
    if (v110)
      v113 = v108;
    else
      v113 = 0;
    v205 = v113;
    v114 = (void (*)(uint64_t, uint64_t))0xE000000000000000;
    if (v110)
      v114 = v110;
    v204 = v114;
    v229 = v96 + *(int *)(v203 + 24);
    v230 = (_QWORD *)type metadata accessor for WeatherData(0);
    v115 = v215;
    v116 = WeatherDataModel.currentWeather.getter(v230);
    v117 = v217;
    v118 = WeatherDataModel.hourlyForecast.getter(v116);
    v119 = v219;
    v120 = WeatherDataModel.dailyForecast.getter(v118);
    v121 = v206;
    v122 = WeatherDataModel.weatherChanges.getter(v120);
    Location.timeZone.getter(v122);
    v123 = v232;
    WeatherForecastDescriptionStringBuilder.buildWeatherDescription(from:hourlyForecast:dailyForecast:weatherChanges:timeZone:)(v115, v117, v119, v121, v106);
    v112(v106, v111);
    sub_100021A14(v121, &qword_100BCCC48);
    sub_100094F10(v119, *(uint64_t (**)(uint64_t, _QWORD))(v220 + 8));
    sub_100094F10(v117, *(uint64_t (**)(uint64_t, _QWORD))(v218 + 8));
    sub_100094F10(v115, *(uint64_t (**)(uint64_t, _QWORD))(v216 + 8));
    v124 = v237;
    v125 = v204;
    sub_1002497B8(v123, v205, (uint64_t)v204, v237);
    swift_bridgeObjectRelease(v125);
    v126 = (objc_class *)sub_1000C13C8();
    sub_1000B4610();
    sub_1000989C4();
    sub_1000D9458();
    v127.super.isa = v126;
    v135 = sub_1000BA340(v128, v129, v130, v131, v127, v132, v133, v134);
    v137 = v136;

    v138 = v207;
    v139 = v240;
    v140 = (char *)v240 + v207[5];
    v141 = type metadata accessor for Location(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v141 - 8) + 16))(v140, v231, v141);
    v142 = (uint64_t)v139 + v138[6];
    sub_100080C0C(v229, v142, type metadata accessor for WeatherData);
    _s7Weather24LocationCompositionStateOwst_0(v142, 0, 1, (uint64_t)v230);
    v143 = (objc_class *)sub_1000C13C8();
    sub_1000989C4();
    v144.super.isa = v143;
    v148 = sub_1000BA340(0x65726F4D20656553, 0xE800000000000000, 0, 0, v144, v145, v146, v147);
    v150 = v149;

    v151 = type metadata accessor for WeatherMapPrecipitationOverlayKind(0);
    sub_1000C4588(v151);
    v152 = type metadata accessor for WeatherMapOverlayKind(0);
    sub_1000C4588(v152);
    *v139 = v135;
    v139[1] = v137;
    v153 = (uint64_t *)((char *)v139 + v138[7]);
    *v153 = v148;
    v153[1] = v150;
    *((_BYTE *)v139 + v138[9]) = 1;
    v154 = v223;
    v155 = (uint64_t)v222;
    v156 = v239;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)&v222[v223[6]], 1, 1, v239);
    v157 = v155 + v154[7];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v238 + 16))(v157, v124, v156);
    v158 = type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
    swift_storeEnumTagMultiPayload(v157, v158, 0);
    sub_1000988B8(v155 + v154[8], 1);
    *(_QWORD *)v155 = 0;
    *(_QWORD *)(v155 + 8) = 0;
    *(_BYTE *)(v155 + 16) = 2;
    v159 = v213;
    *(_QWORD *)(v155 + 24) = v214;
    *(_QWORD *)(v155 + 32) = v159;
    *(_BYTE *)(v155 + v154[9]) = 0;
    *(_BYTE *)(v155 + v154[10]) = 0;
    sub_1005FEE78();
    v161 = v160;
    v162 = *(_QWORD *)(v160 + 16);
    if (v162 >= *(_QWORD *)(v160 + 24) >> 1)
    {
      sub_100098A94();
      v161 = v200;
    }
    *(_QWORD *)(v161 + 16) = v162 + 1;
    v230 = (_QWORD *)((*(unsigned __int8 *)(v224 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v224 + 80));
    v229 = *(_QWORD *)(v224 + 72);
    sub_10007802C(v155, (uint64_t)v230 + v161 + v229 * v162, type metadata accessor for ConditionDetailPlatterViewModel);
    v163 = v228;
    v164 = (objc_class *)objc_msgSend(v228, "mainBundle");
    sub_1000B4610();
    sub_1000989C4();
    v165.super.isa = v164;
    v224 = sub_1000BA340(0xD00000000000001DLL, 0x80000001009F5710, 0, 0, v165, v166, v167, v168);
    v170 = v169;

    v171 = v154[6];
    v172 = v154;
    v173 = v241;
    _s7Weather24LocationCompositionStateOwst_0(v241 + v171, 1, 1, v156);
    v174 = (uint64_t *)(v173 + v172[7]);
    v175 = (objc_class *)objc_msgSend(v163, "mainBundle");
    sub_1000B4610();
    sub_1000989C4();
    v176.super.isa = v175;
    v180 = sub_1000BA340(0x1000000000000172, 0x80000001009F5790, 0, 0, v176, v177, v178, v179);
    v182 = v181;

    *v174 = v180;
    v174[1] = v182;
    swift_storeEnumTagMultiPayload(v174, v158, 1);
    sub_1000988B8(v173 + v172[8], 1);
    sub_1000B4610();
    *(_QWORD *)v173 = v183;
    *(_QWORD *)(v173 + 8) = 0x80000001009F5710;
    *(_BYTE *)(v173 + 16) = 0;
    *(_QWORD *)(v173 + 24) = v224;
    *(_QWORD *)(v173 + 32) = v170;
    *(_BYTE *)(v173 + v172[9]) = 0;
    *(_BYTE *)(v173 + v172[10]) = 0;
    v184 = *(_QWORD *)(v161 + 16);
    if (v184 >= *(_QWORD *)(v161 + 24) >> 1)
    {
      sub_100098A94();
      v161 = v201;
    }
    v185 = v243;
    v187 = (uint64_t)v240;
    v186 = v241;
    v188 = v234;
    v189 = v212;
    *(_QWORD *)(v161 + 16) = v184 + 1;
    sub_10007802C(v186, (uint64_t)v230 + v161 + v184 * v229, type metadata accessor for ConditionDetailPlatterViewModel);
    v191 = v225;
    v190 = v226;
    (*(void (**)(uint64_t, char *, uint64_t))(v225 + 16))(v233, v189, v226);
    sub_100080C0C(v187, v242, type metadata accessor for ConditionDetailMapViewModel);
    v192 = v231;
    Location.timeZone.getter(v193);
    sub_1000215BC(v187, type metadata accessor for ConditionDetailMapViewModel);
    (*(void (**)(uint64_t, uint64_t))(v238 + 8))(v237, v239);
    sub_100021A14(v232, &qword_100BC3368);
    (*(void (**)(char *, uint64_t))(v191 + 8))(v189, v190);
    v194 = sub_1000BA294(&qword_100BCE378);
    v195 = v227;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v194 - 8) + 16))(v227, v221, v194);
    sub_1000215BC(v192, type metadata accessor for NextHourPrecipitationDetailInput.Input);
    sub_1000988B8(v195, 0);
    v196 = v210;
    *(_QWORD *)v185 = v211;
    *((_QWORD *)v185 + 1) = v196;
    v197 = v208;
    *((_QWORD *)v185 + 2) = v209;
    *((_QWORD *)v185 + 3) = v197;
    *((_QWORD *)v185 + 4) = v161;
    v198 = (int *)type metadata accessor for NextHourPrecipitationDetailViewModel.Model(0);
    (*(void (**)(char *, uint64_t, uint64_t))(v191 + 32))(&v185[v198[7]], v233, v190);
    sub_10007802C(v242, (uint64_t)&v185[v198[8]], type metadata accessor for ConditionDetailMapViewModel);
    (*(void (**)(char *, uint64_t, uint64_t))(v235 + 32))(&v185[v198[9]], v188, v236);
    sub_100249A98(v195, (uint64_t)&v185[v198[10]]);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v185, 0, 1, (uint64_t)v198);
    HourPrecipitationDetailViewModel = type metadata accessor for NextHourPrecipitationDetailViewModel(0);
    v72 = (uint64_t)v185;
  }
  return _s7Weather24LocationCompositionStateOwst_0(v72, 0, 1, HourPrecipitationDetailViewModel);
}

uint64_t sub_1002497B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v16;
  id v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, _QWORD, uint64_t);
  __n128 v30;
  uint64_t v31;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v34;
  Swift::String v35;

  v8 = sub_1000BA294(&qword_100BC3368);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for WeatherDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100087250(a1, (uint64_t)v10);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v11) == 1)
  {
    sub_100021A14((uint64_t)v10, &qword_100BC3368);
    return static WeatherDescription.string(_:)(a2, a3);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    v16 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v34 = a4;
    v17 = v16;
    v35._countAndFlagsBits = 0xD0000000000000E4;
    v35._object = (void *)0x80000001009F59A0;
    v18._object = (void *)0x80000001009F5970;
    v18._countAndFlagsBits = 0xD000000000000029;
    v19._countAndFlagsBits = 0x4025204025;
    v19._object = (void *)0xE500000000000000;
    v20 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, (Swift::String_optional)0, (NSBundle)v17, v19, v35);
    object = v20._object;
    countAndFlagsBits = v20._countAndFlagsBits;

    v21 = sub_1000BA294(&qword_100BCE380);
    v22 = type metadata accessor for WeatherDescription.Argument(0);
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(_QWORD *)(v23 + 72);
    v25 = *(unsigned __int8 *)(v23 + 80);
    v26 = (v25 + 32) & ~v25;
    v27 = swift_allocObject(v21, v26 + 2 * v24, v25 | 7);
    *(_OWORD *)(v27 + 16) = xmmword_10097DA20;
    v28 = (char *)(v27 + v26);
    *(_QWORD *)v28 = a2;
    *((_QWORD *)v28 + 1) = a3;
    v29 = *(void (**)(char *, _QWORD, uint64_t))(v23 + 104);
    v29(v28, enum case for WeatherDescription.Argument.string(_:), v22);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(&v28[v24], v14, v11);
    v29(&v28[v24], enum case for WeatherDescription.Argument.description(_:), v22);
    v30 = swift_bridgeObjectRetain(a3);
    WeatherDescription.init(format:_:)(countAndFlagsBits, object, v27, v30);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

_QWORD *sub_100249A2C()
{
  _QWORD *v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 2);
  swift_release(v0[7]);
  swift_release(v0[8]);
  return v0;
}

uint64_t sub_100249A58()
{
  uint64_t v0;

  sub_100249A2C();
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for NextHourPrecipitationDetailViewModelFactory()
{
  return objc_opt_self(_TtC7Weather43NextHourPrecipitationDetailViewModelFactory);
}

uint64_t sub_100249A98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BCE370);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for ResizeMacWindow()
{
  return &type metadata for ResizeMacWindow;
}

Swift::Int StubLocalSearchRequestService.Errors.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int sub_100249B34()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_100249B70(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(double *)(v4 + 104) = a3;
  *(double *)(v4 + 112) = a4;
  *(double *)(v4 + 88) = a1;
  *(double *)(v4 + 96) = a2;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 120) = v5;
  *(_QWORD *)(v4 + 128) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5);
  *(_QWORD *)(v4 + 136) = v6;
  *(_QWORD *)(v4 + 144) = v7;
  return swift_task_switch(sub_100249BE4, v6, v7);
}

uint64_t sub_100249BE4()
{
  double *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  uint64_t v9;
  NSString *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  NSString *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32[2];
  CGSize v33;
  CGSize v34;

  if (qword_100BC24D8 != -1)
    swift_once(&qword_100BC24D8, sub_1006F39A0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_1000AECD4(v1, (uint64_t)qword_100CAF270);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = v0[11];
    v7 = v0[13];
    v6 = v0[14];
    v8 = v0[12];
    v9 = swift_slowAlloc(22, -1);
    v31 = swift_slowAlloc(64, -1);
    v32[0] = v31;
    *(_DWORD *)v9 = 136315394;
    v33.width = v5;
    v33.height = v8;
    v10 = NSStringFromCGSize(v33);
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

    *((_QWORD *)v0 + 10) = sub_1000CE1C8(v11, v13, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11);
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    v34.width = v7;
    v34.height = v6;
    v14 = NSStringFromCGSize(v34);
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    *((_QWORD *)v0 + 10) = sub_1000CE1C8(v15, v17, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Performing resize test with minimum %s, maximum %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v31, 2);
    sub_1000986F0(v31);
    sub_1000986F0(v9);
  }

  v18 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v19 = UIApplication.maybeWindow.getter();
  *((_QWORD *)v0 + 19) = v19;

  if (!v19)
  {
    swift_release(*((_QWORD *)v0 + 16));
    v23 = sub_10024A0EC();
    v24 = swift_allocError(&type metadata for ResizeMacWindow.Errors, v23, 0, 0);
    swift_willThrow(v24, v25);
    sub_1000BBDF4();
    __asm { BR              X0 }
  }
  v21 = static MainActor.shared.getter(v20);
  *((_QWORD *)v0 + 20) = v21;
  if (v21)
  {
    ObjectType = swift_getObjectType(v21);
    dispatch thunk of Actor.unownedExecutor.getter(ObjectType);
  }
  sub_1000BBDF4();
  return swift_task_switch(v27, v28, v29);
}

uint64_t sub_100249E9C()
{
  double *v0;
  void *v1;
  double v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;

  v1 = (void *)*((_QWORD *)v0 + 19);
  v3 = v0[13];
  v2 = v0[14];
  v5 = v0[11];
  v4 = v0[12];
  *((_QWORD *)v0 + 2) = v0;
  *((_QWORD *)v0 + 3) = sub_100249F14;
  v6 = swift_continuation_init(v0 + 2, 0);
  sub_100249F94(v6, v1, v5, v4, v3, v2);
  return swift_continuation_await(v0 + 2);
}

uint64_t sub_100249F14()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_release(*(_QWORD *)(*v0 + 160));
  return swift_task_switch(sub_100249F60, *(_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 144));
}

uint64_t sub_100249F60()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 128));

  return sub_1000950D8(*(uint64_t (**)(void))(v0 + 8));
}

void sub_100249F94(uint64_t a1, void *a2, double a3, double a4, double a5, double a6)
{
  uint64_t v12;
  id v13;
  id v14;
  double v15;
  id v16;

  v12 = swift_allocObject(&unk_100B66830, 24, 7);
  *(_QWORD *)(v12 + 16) = a1;
  v13 = objc_allocWithZone((Class)RPTResizeTestParameters);
  v14 = a2;
  v16 = sub_10024A128(v15, 0, 0, v14, (uint64_t)sub_10024A21C, v12);
  objc_msgSend(v16, "setMinimumWindowSize:", a3, a4);
  objc_msgSend(v16, "setMaximumWindowSize:", a5, a6);
  objc_msgSend((id)objc_opt_self(RPTTestRunner), "runTestWithParameters:", v16);

}

uint64_t sub_10024A080()
{
  double *v0;
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  double v5;
  _QWORD *v6;

  v2 = *v0;
  v3 = v0[1];
  v4 = v0[2];
  v5 = v0[3];
  v6 = (_QWORD *)swift_task_alloc(dword_100BCE394);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100223BE0;
  return sub_100249B70(v2, v3, v4, v5);
}

unint64_t sub_10024A0EC()
{
  unint64_t result;

  result = qword_100BCE398;
  if (!qword_100BCE398)
  {
    result = swift_getWitnessTable(&unk_10098B478, &type metadata for ResizeMacWindow.Errors);
    atomic_store(result, (unint64_t *)&qword_100BCE398);
  }
  return result;
}

id sub_10024A128(double a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  void *v7;
  NSString v11;
  void *v12;
  id v13;
  _QWORD v15[5];
  uint64_t v16;

  v7 = v6;
  if (!a3)
  {
    v11 = 0;
    if (a5)
      goto LABEL_3;
LABEL_5:
    v12 = 0;
    goto LABEL_6;
  }
  v11 = String._bridgeToObjectiveC()();
  *(_QWORD *)&a1 = swift_bridgeObjectRelease().n128_u64[0];
  if (!a5)
    goto LABEL_5;
LABEL_3:
  v15[4] = a5;
  v16 = a6;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = sub_100121D84;
  v15[3] = &unk_100B66848;
  v12 = _Block_copy(v15);
  *(_QWORD *)&a1 = swift_release(v16).n128_u64[0];
LABEL_6:
  v13 = objc_msgSend(v7, "initWithTestName:window:completionHandler:", v11, a4, v12, a1);

  _Block_release(v12);
  return v13;
}

uint64_t sub_10024A20C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10024A21C()
{
  uint64_t v0;

  return swift_continuation_throwingResume(*(_QWORD *)(v0 + 16));
}

uint64_t storeEnumTagSinglePayload for ResizeMacWindow.Errors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10024A264 + 4 * byte_10098B3DC[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10024A284 + 4 * byte_10098B3E1[v4]))();
}

_BYTE *sub_10024A264(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10024A284(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10024A28C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10024A294(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10024A29C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10024A2A4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ResizeMacWindow.Errors()
{
  return &type metadata for ResizeMacWindow.Errors;
}

unint64_t sub_10024A2C4()
{
  unint64_t result;

  result = qword_100BCE3A0;
  if (!qword_100BCE3A0)
  {
    result = swift_getWitnessTable(&unk_10098B450, &type metadata for ResizeMacWindow.Errors);
    atomic_store(result, (unint64_t *)&qword_100BCE3A0);
  }
  return result;
}

uint64_t *sub_10024A308(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Location.Identifier(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v7))
    {
      v8 = sub_1000BA294(&qword_100BCD680);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v7);
    }
    v10 = *(int *)(a3 + 20);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    *(_QWORD *)v11 = *(_QWORD *)v12;
    v11[8] = v12[8];
  }
  return a1;
}

char *sub_10024A3F0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v6 = type metadata accessor for Location.Identifier(0);
  v7 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 1, v6);
  v8 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6);
  if (!v7)
  {
    v9 = *(_QWORD *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v10 = sub_1000BA294(&qword_100BCD680);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
LABEL_7:
  v11 = *(int *)(a3 + 20);
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = *(_QWORD *)v13;
  v12[8] = v13[8];
  *(_QWORD *)v12 = v14;
  return a1;
}

char *sub_10024A4FC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;

  v6 = type metadata accessor for Location.Identifier(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6))
  {
    v7 = sub_1000BA294(&qword_100BCD680);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  *(_QWORD *)v9 = *(_QWORD *)v10;
  v9[8] = v10[8];
  return a1;
}

char *sub_10024A5B8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  v6 = type metadata accessor for Location.Identifier(0);
  v7 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 1, v6);
  v8 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6);
  if (!v7)
  {
    v9 = *(_QWORD *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v10 = sub_1000BA294(&qword_100BCD680);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
LABEL_7:
  v11 = *(int *)(a3 + 20);
  v12 = &a1[v11];
  v13 = &a2[v11];
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  return a1;
}

uint64_t sub_10024A6C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10009E50C();
  v2 = sub_1000BA294(&qword_100BCD680);
  return _s7Weather24LocationCompositionStateOwet_0(v1, v0, v2);
}

uint64_t sub_10024A6F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10009E50C();
  v2 = sub_1000BA294(&qword_100BCD680);
  return _s7Weather24LocationCompositionStateOwst_0(v1, v0, v0, v2);
}

uint64_t *sub_10024A730(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t active;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    active = type metadata accessor for LocationViewerActiveLocationState(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, active))
    {
      v11 = sub_1000BA294(&qword_100BC5F40);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      v13 = type metadata accessor for Location.Identifier(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v13))
      {
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(active - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v8, v9, v13);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v13);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, active);
    }
    v14 = *(int *)(a3 + 24);
    v15 = *(uint64_t *)((char *)a2 + v14);
    *(uint64_t *)((char *)v4 + v14) = v15;
    swift_bridgeObjectRetain(v15);
  }
  return v4;
}

_BYTE *sub_10024A87C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t active;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  active = type metadata accessor for LocationViewerActiveLocationState(0);
  v10 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, active);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, active);
  if (v10)
  {
    if (!v11)
    {
      v12 = type metadata accessor for Location.Identifier(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v12))
      {
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(active - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v7, v8, v12);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v12);
      }
      v17 = (uint64_t)v7;
      v18 = active;
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (v11)
  {
    sub_1000215BC((uint64_t)v7, type metadata accessor for LocationViewerActiveLocationState);
LABEL_7:
    v13 = *(_QWORD *)(sub_1000BA294(&qword_100BC5F40) - 8);
    goto LABEL_8;
  }
  v14 = type metadata accessor for Location.Identifier(0);
  v15 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v14);
  v16 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v14);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v7, v8, v14);
      v17 = (uint64_t)v7;
      v18 = v14;
LABEL_14:
      _s7Weather24LocationCompositionStateOwst_0(v17, 0, 1, v18);
      goto LABEL_15;
    }
  }
  else
  {
    v22 = *(_QWORD *)(v14 - 8);
    if (!v16)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v22 + 24))(v7, v8, v14);
      goto LABEL_15;
    }
    (*(void (**)(_BYTE *, uint64_t))(v22 + 8))(v7, v14);
  }
  v13 = *(_QWORD *)(active - 8);
LABEL_8:
  memcpy(v7, v8, *(_QWORD *)(v13 + 64));
LABEL_15:
  v19 = *(int *)(a3 + 24);
  v20 = *(_QWORD *)&a2[v19];
  *(_QWORD *)&a1[v19] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease();
  return a1;
}

_BYTE *sub_10024AA70(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t active;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  active = type metadata accessor for LocationViewerActiveLocationState(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, active))
  {
    v10 = sub_1000BA294(&qword_100BC5F40);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v11 = type metadata accessor for Location.Identifier(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v11))
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(active - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v7, v8, v11);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v11);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, active);
  }
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

_BYTE *sub_10024AB8C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t active;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  active = type metadata accessor for LocationViewerActiveLocationState(0);
  v10 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, active);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, active);
  if (v10)
  {
    if (!v11)
    {
      v12 = type metadata accessor for Location.Identifier(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v12))
      {
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(active - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v7, v8, v12);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v12);
      }
      v17 = (uint64_t)v7;
      v18 = active;
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (v11)
  {
    sub_1000215BC((uint64_t)v7, type metadata accessor for LocationViewerActiveLocationState);
LABEL_7:
    v13 = *(_QWORD *)(sub_1000BA294(&qword_100BC5F40) - 8);
    goto LABEL_8;
  }
  v14 = type metadata accessor for Location.Identifier(0);
  v15 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v14);
  v16 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v14);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v7, v8, v14);
      v17 = (uint64_t)v7;
      v18 = v14;
LABEL_14:
      _s7Weather24LocationCompositionStateOwst_0(v17, 0, 1, v18);
      goto LABEL_15;
    }
  }
  else
  {
    v20 = *(_QWORD *)(v14 - 8);
    if (!v16)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v20 + 40))(v7, v8, v14);
      goto LABEL_15;
    }
    (*(void (**)(_BYTE *, uint64_t))(v20 + 8))(v7, v14);
  }
  v13 = *(_QWORD *)(active - 8);
LABEL_8:
  memcpy(v7, v8, *(_QWORD *)(v13 + 64));
LABEL_15:
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10024AD78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v8;

  sub_10009E50C();
  v6 = sub_1000BA294(&qword_100BC5F40);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
    return _s7Weather24LocationCompositionStateOwet_0(v4 + *(int *)(a3 + 20), v3, v6);
  v8 = *(_QWORD *)(v4 + *(int *)(a3 + 24));
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

uint64_t sub_10024ADF4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  sub_10009E50C();
  result = sub_1000BA294(&qword_100BC5F40);
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return _s7Weather24LocationCompositionStateOwst_0(v5 + *(int *)(a4 + 20), v4, v4, result);
  *(_QWORD *)(v5 + *(int *)(a4 + 24)) = (v4 - 1);
  return result;
}

void sub_10024AE70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_100099310();
  v4 = sub_1000E7BD0(v1, v2, v3);
  v5 = type metadata accessor for MonthTemperatureStatistics(v4);
  v6 = sub_1000DAC14(v5);
  __chkstk_darwin(v6);
  sub_1000B30E0();
  v8 = __chkstk_darwin(v7);
  sub_1000BF100(v8, v9, v10, v11, v12, v13, v14, v15, v28);
  sub_1001FB504();
  sub_1000BEE28();
  __chkstk_darwin(v16);
  sub_100094EC4();
  sub_1000BA294(&qword_100BCE7E0);
  sub_10009D98C();
  __chkstk_darwin(v17);
  sub_1000C45A0();
  sub_1000F43C4(&qword_100BCE7E8);
  sub_1000C13DC(v18);
  sub_10011E18C();
  sub_1000F43C4(&qword_100BCE7F0);
  sub_1000E6F1C(v19);
  sub_1000B25A8();
  if (v21)
  {
LABEL_8:
    sub_10009518C(v20, &qword_100BCE7E0);
    sub_100252B48();
  }
  else
  {
    sub_1000EAF3C();
    while (1)
    {
      v22 = sub_1000DA90C();
      sub_1001101D4(v22, v23);
      sub_1000AE8CC();
      sub_1000993C8();
      sub_1000C0D4C();
      sub_1000DAE54();
      sub_1000D1638();
      v24 = sub_1000CF7C4();
      if (v0)
      {
        v27 = sub_1001098D0();
        sub_1000BEA18(v27, &qword_100BCE7E0);
        goto LABEL_12;
      }
      if ((v24 & 1) != 0)
        break;
      sub_1000CD5F0();
      sub_1000D1CE4();
      sub_1000B25A8();
      if (v21)
        goto LABEL_8;
    }
    sub_1000BEA18(v24, &qword_100BCE7E0);
    v25 = sub_1000D1148();
    v26 = 0;
  }
  sub_1000CDBDC(v25, v26);
LABEL_12:
  sub_10009E33C();
  sub_1000B44B0();
}

void sub_10024AFD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_100099310();
  v4 = sub_1000E7BD0(v1, v2, v3);
  v5 = type metadata accessor for HourWeather(v4);
  v6 = sub_1000DAC14(v5);
  __chkstk_darwin(v6);
  sub_1000B30E0();
  __chkstk_darwin(v7);
  sub_1000BF100(v8, v9, v10, v11, v12, v13, v14, v15, v28);
  sub_1001FB504();
  sub_1000BEE28();
  __chkstk_darwin(v16);
  sub_100094EC4();
  sub_1000BA294(&qword_100BCE7F8);
  sub_10009D98C();
  __chkstk_darwin(v17);
  sub_1000C45A0();
  sub_1000F43C4(&qword_100BCE800);
  sub_1000C13DC(v18);
  sub_10011E18C();
  sub_1000F43C4((unint64_t *)&qword_100BCBA00);
  sub_1000E6F1C(v19);
  sub_1000B25A8();
  if (v21)
  {
LABEL_8:
    sub_10009518C(v20, &qword_100BCE7F8);
    sub_100252B48();
  }
  else
  {
    sub_1000EAF3C();
    while (1)
    {
      v22 = sub_1000DA90C();
      sub_1001101D4(v22, v23);
      sub_1000AE8CC();
      sub_1000993C8();
      sub_1000C0D4C();
      sub_1000DAE54();
      sub_1000D1638();
      v24 = sub_1000CF7C4();
      if (v0)
      {
        v27 = sub_1001098D0();
        sub_1000BEA18(v27, &qword_100BCE7F8);
        goto LABEL_12;
      }
      if ((v24 & 1) != 0)
        break;
      sub_1000CD5F0();
      sub_1000D1CE4();
      sub_1000B25A8();
      if (v21)
        goto LABEL_8;
    }
    sub_1000BEA18(v24, &qword_100BCE7F8);
    v25 = sub_1000D1148();
    v26 = 0;
  }
  sub_1000CDBDC(v25, v26);
LABEL_12:
  sub_10009E33C();
  sub_1000B44B0();
}

void sub_10024B130()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_100099310();
  v4 = sub_1000E7BD0(v1, v2, v3);
  v5 = type metadata accessor for MonthPrecipitationStatistics(v4);
  v6 = sub_1000DAC14(v5);
  __chkstk_darwin(v6);
  sub_1000B30E0();
  v8 = __chkstk_darwin(v7);
  sub_1000BF100(v8, v9, v10, v11, v12, v13, v14, v15, v28);
  sub_1001FB504();
  sub_1000BEE28();
  __chkstk_darwin(v16);
  sub_100094EC4();
  sub_1000BA294(&qword_100BCE7C8);
  sub_10009D98C();
  __chkstk_darwin(v17);
  sub_1000C45A0();
  sub_1000F43C4(&qword_100BCE7D0);
  sub_1000C13DC(v18);
  sub_10011E18C();
  sub_1000F43C4(&qword_100BCE7D8);
  sub_1000E6F1C(v19);
  sub_1000B25A8();
  if (v21)
  {
LABEL_8:
    sub_10009518C(v20, &qword_100BCE7C8);
    sub_100252B48();
  }
  else
  {
    sub_1000EAF3C();
    while (1)
    {
      v22 = sub_1000DA90C();
      sub_1001101D4(v22, v23);
      sub_1000AE8CC();
      sub_1000993C8();
      sub_1000C0D4C();
      sub_1000DAE54();
      sub_1000D1638();
      v24 = sub_1000CF7C4();
      if (v0)
      {
        v27 = sub_1001098D0();
        sub_1000BEA18(v27, &qword_100BCE7C8);
        goto LABEL_12;
      }
      if ((v24 & 1) != 0)
        break;
      sub_1000CD5F0();
      sub_1000D1CE4();
      sub_1000B25A8();
      if (v21)
        goto LABEL_8;
    }
    sub_1000BEA18(v24, &qword_100BCE7C8);
    v25 = sub_1000D1148();
    v26 = 0;
  }
  sub_1000CDBDC(v25, v26);
LABEL_12:
  sub_10009E33C();
  sub_1000B44B0();
}

void sub_10024B290()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  char v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t (*v22)(uint64_t);

  sub_100099310();
  v4 = v3;
  v22 = v5;
  v7 = v6;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_10004A2E8();
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_10009D98C();
  __chkstk_darwin(v10);
  sub_100099234();
  v11 = *(_QWORD *)(v4 + 16);
  v19 = v7;
  if (v11)
  {
    v12 = v4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v20 = *(_QWORD *)(v9 + 72);
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v9 + 16);
    v13 = swift_bridgeObjectRetain();
    while (1)
    {
      v21(v2, v12, v8, v13);
      sub_1000C138C(v2, 0);
      if (_s7Weather24LocationCompositionStateOwet_0(v2, 1, v8) == 1)
        break;
      v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
      v14(v1, v2, v8);
      v15 = v22(v1);
      if (v0)
      {
        sub_10009E628();
        sub_100098AC0();
        goto LABEL_12;
      }
      if ((v15 & 1) != 0)
      {
        v18 = sub_100098AC0();
        v17 = v19;
        ((void (*)(uint64_t, uint64_t, uint64_t, double))v14)(v19, v1, v8, v18);
        v16 = 0;
        goto LABEL_11;
      }
      sub_10009E628();
      v12 += v20;
      if (!--v11)
        goto LABEL_9;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_9:
    sub_1000C138C(v2, 1);
  }
  sub_100098AC0();
  v16 = 1;
  v17 = v19;
LABEL_11:
  sub_1000C138C(v17, v16);
LABEL_12:
  sub_1000B44B0();
}

uint64_t sub_10024B41C@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *);

  v16 = a1;
  v5 = type metadata accessor for ExtremaResult(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BCB720);
  __chkstk_darwin(v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100037768(v2, (uint64_t)v11, &qword_100BCB720);
  v12 = 1;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v5) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    v16(v8);
    if (v3)
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v12 = 0;
  }
  v14 = sub_1000BA294(&qword_100BCB938);
  return _s7Weather24LocationCompositionStateOwst_0(a2, v12, 1, v14);
}

void sub_10024B58C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (*a10)(char *), uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_100099310();
  a19 = v23;
  a20 = v24;
  a10 = v25;
  v27 = v26;
  v28 = type metadata accessor for TimeZone(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v31 = (char *)&a9 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BA294(&qword_100BCCC50);
  sub_10009D98C();
  __chkstk_darwin(v32);
  sub_10004A2E8();
  sub_100037768(v20, v22, &qword_100BCCC50);
  v33 = 1;
  if (_s7Weather24LocationCompositionStateOwet_0(v22, 1, v28) == 1)
    goto LABEL_5;
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v31, v22, v28);
  a10(v31);
  if (!v21)
  {
    sub_10011E69C();
    v33 = 0;
LABEL_5:
    v34 = type metadata accessor for Date(0);
    _s7Weather24LocationCompositionStateOwst_0(v27, v33, 1, v34);
    goto LABEL_6;
  }
  sub_10011E69C();
LABEL_6:
  sub_1000B44B0();
}

void sub_10024B6B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t);
  int v78;
  char v79;
  uint64_t v80;
  __n128 *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  objc_class *v87;
  NSBundle v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  Class isa;
  id v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  objc_class *v100;
  NSBundle v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  char v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  void *v135;
  objc_class *v136;
  NSBundle v137;
  uint64_t v138;
  objc_class *v139;
  NSBundle v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __n128 v145;
  int *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  objc_class **v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  char v160;
  uint64_t v161;
  void *v162;
  objc_class *v163;
  NSBundle v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  objc_class *v177;
  NSBundle v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  __n128 *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  objc_class *v197;
  NSBundle v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  objc_class *v210;
  NSBundle v211;
  uint64_t v212;
  uint64_t v213;
  id v214;
  Swift::String v215;
  Swift::String_optional v216;
  NSBundle v217;
  Swift::String v218;
  Swift::String v219;
  uint64_t v220;
  int *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  __n128 *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  __n128 *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  __n128 *v249;
  uint64_t v250;
  void *v251;
  objc_class *v252;
  NSBundle v253;
  uint64_t v254;
  uint64_t v255;
  objc_class *v256;
  NSBundle v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  __n128 *v275;
  char v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  uint64_t v280;
  char v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  char v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  _QWORD *v290;
  objc_class *v291;
  NSBundle v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  void *v298;
  uint64_t v299;
  objc_class *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  const char *v305;
  uint64_t v306;
  uint64_t v307;
  _QWORD *v308;
  char v309;
  uint64_t v310;
  char *v311;
  objc_class *v312;
  NSBundle v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  objc_class *v320;
  NSBundle v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  objc_class *v329;
  NSBundle v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  __n128 v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  int *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  NSBundle v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  void *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  __n128 *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  objc_class *v381;
  NSBundle v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  objc_class *v391;
  NSBundle v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  __n128 *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  _QWORD *v431;
  _QWORD *v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  int v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  __int128 v471;
  uint64_t v472;
  char *v473;
  uint64_t v474;
  uint64_t v475;
  char *v476;
  uint64_t v477;
  int *v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  Swift::String v482;

  v442 = a5;
  v438 = a4;
  v476 = (char *)a3;
  v449 = a2;
  v475 = a1;
  sub_1000BA294(&qword_100BCE728);
  sub_10009D98C();
  __chkstk_darwin(v6);
  v446 = (uint64_t)&v434 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v471 = *(_QWORD *)(sub_1000BA294(&qword_100BC68B8) - 8);
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_1000BA30C();
  __chkstk_darwin(v9);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v10);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v11);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v12);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v13);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v14);
  sub_1000860D0();
  v470 = v15;
  sub_10009D2A4();
  __chkstk_darwin(v16);
  sub_1000860D0();
  v474 = v17;
  sub_10009D2A4();
  __chkstk_darwin(v18);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v19);
  sub_1000860D0();
  sub_1000BA30C();
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v434 - v22;
  __chkstk_darwin(v21);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v24);
  v26 = (char *)&v434 - v25;
  sub_1000BA294(&qword_100BC68A0);
  sub_10009D98C();
  __chkstk_darwin(v27);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v28);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v29);
  sub_1000860D0();
  sub_1000BA30C();
  v31 = __chkstk_darwin(v30);
  v33 = (uint64_t)&v434 - v32;
  __chkstk_darwin(v31);
  sub_100079F7C();
  v463 = v34;
  v35 = sub_10009876C();
  v36 = type metadata accessor for DetailComponentContainerViewModel(v35);
  sub_10009D98C();
  __chkstk_darwin(v37);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v38);
  sub_1000BA30C();
  __chkstk_darwin(v39);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v40);
  sub_1000860D0();
  v466 = v41;
  sub_10009D2A4();
  __chkstk_darwin(v42);
  sub_100079F7C();
  v455 = v43;
  v44 = sub_1000B3B70();
  v479 = *(_QWORD *)(v44 - 8);
  sub_10009D98C();
  __chkstk_darwin(v45);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v46);
  sub_1000BA30C();
  __chkstk_darwin(v47);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v48);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v49);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v50);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v51);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v52);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v53);
  sub_1000860D0();
  v473 = (char *)v54;
  sub_10009D2A4();
  __chkstk_darwin(v55);
  sub_1000860D0();
  v465 = v56;
  sub_10009D2A4();
  __chkstk_darwin(v57);
  sub_1000BA30C();
  __chkstk_darwin(v58);
  sub_1000BA30C();
  v60 = __chkstk_darwin(v59);
  v62 = (char *)&v434 - v61;
  v63 = __chkstk_darwin(v60);
  v65 = (char *)&v434 - v64;
  __chkstk_darwin(v63);
  sub_1000860D0();
  v480 = v66;
  sub_10009D2A4();
  __chkstk_darwin(v67);
  sub_1000860D0();
  v477 = v68;
  sub_10009D2A4();
  __chkstk_darwin(v69);
  sub_1000860D0();
  v464 = v70;
  sub_10009D2A4();
  __chkstk_darwin(v71);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v72);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v73);
  sub_100079F7C();
  v75 = sub_1000CE52C(v74);
  v76 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  sub_100079F58();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 16))(v5, v475, v75);
  v467 = v5;
  v468 = v76;
  v77 = *(uint64_t (**)(uint64_t, uint64_t))(v76 + 88);
  v469 = v75;
  v78 = v77(v5, v75);
  v478 = (int *)v44;
  if (v78 == enum case for DetailCondition.conditions(_:))
  {
    sub_10024D7F8((uint64_t)v26);
    sub_1000BEC68((uint64_t)v26, 0);
    sub_100037768((uint64_t)v476, v33, &qword_100BC68A0);
    sub_100088FC8(v33, 1, v36);
    if (v79)
    {
      sub_100021A14(v33, &qword_100BC68A0);
      v80 = sub_1000BA294(&qword_100BCE738);
      v81 = (__n128 *)sub_1000C2580(v80);
      sub_10011070C(v81, (__n128)xmmword_10097CA50);
      sub_10004A358((uint64_t)v26);
      v82 = v5;
      v83 = v458;
      sub_10004A358(v82);
      v84 = v459;
      sub_1000787D4(v83, v459, &qword_100BC68B8);
      sub_100088FC8(v84, 1, v44);
      if (v79)
      {
        sub_100021A14(v84, &qword_100BC68B8);
      }
      else
      {
        sub_1000C0CEC(v84, (uint64_t)v65);
        sub_1000C0CEC((uint64_t)v65, (uint64_t)v62);
        v159 = _swiftEmptyArrayStorage;
        v160 = sub_100117378();
        if ((v160 & 1) == 0)
        {
          sub_100098AA8();
          v159 = v431;
        }
        if (v159[2] >= v159[3] >> 1)
          sub_1000CFBD0();
        sub_10009BC80();
        sub_10007802C((uint64_t)v62, v161, type metadata accessor for ConditionDetailPlatterViewModel);
      }
      sub_10009E334();
      sub_1005004A0();
      v158 = (uint64_t)v26;
    }
    else
    {
      v99 = v466;
      sub_10007802C(v33, v466, type metadata accessor for DetailComponentContainerViewModel);
      v100 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      sub_1000989C4();
      v101.super.isa = v100;
      v105 = sub_1000BA340(1937204558, 0xE400000000000000, 0, 0, v101, v102, v103, v104);
      v107 = v106;

      v108 = v464;
      v109 = v464 + *(int *)(v44 + 24);
      v110 = sub_100089094();
      sub_10009D34C(v109, v111, v112, v110);
      v113 = v108 + *(int *)(v44 + 28);
      sub_100080C0C(v99, v113, type metadata accessor for DetailComponentContainerViewModel);
      v114 = sub_1000D0C4C();
      swift_storeEnumTagMultiPayload(v113, v114, 4);
      sub_1000C4470(v108 + *(int *)(v44 + 32));
      *(_OWORD *)v108 = xmmword_10097CA60;
      *(_BYTE *)(v108 + 16) = 2;
      *(_QWORD *)(v108 + 24) = v105;
      *(_QWORD *)(v108 + 32) = v107;
      *(_BYTE *)(v108 + *(int *)(v44 + 36)) = 0;
      *(_BYTE *)(v108 + *(int *)(v44 + 40)) = 0;
      v115 = sub_1000BA294(&qword_100BCE738);
      v116 = *(_QWORD *)(v471 + 72);
      v117 = *(unsigned __int8 *)(v471 + 80);
      v118 = (v117 + 32) & ~v117;
      v119 = sub_1000D0968(v115, v118 + 2 * v116, v117);
      *(_OWORD *)(v119 + 16) = xmmword_10097DA20;
      v475 = v119;
      v120 = v119 + v118;
      sub_100252B34(v108);
      sub_1000BEC68(v120, 0);
      v476 = v26;
      sub_1000D0580((uint64_t)v26, v120 + v116);
      v121 = 0;
      v122 = 0;
      v123 = _swiftEmptyArrayStorage;
      v124 = v44;
      v125 = v462;
      do
      {
        v126 = v121;
        sub_1000D0580(v120 + v122 * v116, v125);
        sub_1000DE264(v125);
        sub_100088FC8((uint64_t)v23, 1, v124);
        if (v79)
        {
          sub_10011E094();
        }
        else
        {
          v127 = v477;
          sub_1001FB980((uint64_t)v23, v477);
          sub_1001FB980(v127, v480);
          v128 = sub_100117378();
          if ((v128 & 1) == 0)
          {
            sub_100098AA8();
            v123 = v133;
          }
          v129 = v123[2];
          if (v129 >= v123[3] >> 1)
          {
            sub_1000CFBD0();
            v123 = v134;
          }
          v123[2] = v129 + 1;
          sub_10008613C();
          sub_1001FB980(v132, v130 + v131 * v129);
          v124 = (uint64_t)v478;
        }
        v121 = 1;
        v122 = 1;
      }
      while ((v126 & 1) == 0);
      sub_10009E334();
      sub_1005004A0();
      sub_1000215BC(v464, type metadata accessor for ConditionDetailPlatterViewModel);
      sub_1000215BC(v466, type metadata accessor for DetailComponentContainerViewModel);
      v158 = (uint64_t)v476;
    }
    sub_100021A14(v158, &qword_100BC68B8);
    (*(void (**)(uint64_t, uint64_t))(v468 + 8))(v467, v469);
    goto LABEL_67;
  }
  v85 = (uint64_t)v476;
  v434 = v36;
  if (v78 == enum case for DetailCondition.humidity(_:))
  {
    sub_10011E204();
    v86 = (void *)objc_opt_self(NSBundle);
    v87 = (objc_class *)sub_1000B2EE0(v86);
    v475 = 0x80000001009F6740;
    v433 = 0x80000001009F6740;
    v88.super.isa = v87;
    v89 = sub_1000DA4CC((uint64_t)(v23 - 13), 0x80000001009F6720, 0, 0, v88);
    sub_10009E3F8(v89, v90);
    v91 = sub_1000A0794(0, (unint64_t *)&qword_100BC6A08, NSNumberFormatter_ptr);
    v92 = (void *)static NSNumberFormatter.percent.getter(v91);
    sub_1000A0794(0, &qword_100BCE740, NSNumber_ptr);
    isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
    v94 = objc_msgSend(v92, "stringFromNumber:", isa, v433);

    if (v94)
    {
      v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
      v98 = v97;

    }
    else
    {
      v98 = 0xE000000000000000;
      v96 = 0;
    }
    v196 = v460;
    v197 = (objc_class *)sub_10009DD7C(v95, *(const char **)(v44 + 1936));
    v473 = v23 + 51;
    v198.super.isa = v197;
    v201 = sub_1000BA340((uint64_t)(v23 + 201), 0x80000001009F6770, 0, 0, v198, v199, v200, (uint64_t)(v23 + 51));
    v203 = v202;

    v204 = sub_1000BA294(&qword_100BC3C38);
    v205 = sub_1000D0970(v204);
    v471 = xmmword_10097CA50;
    *(_OWORD *)(v205 + 16) = xmmword_10097CA50;
    *(_QWORD *)(v205 + 56) = &type metadata for String;
    v206 = sub_1000B2E24();
    *(_QWORD *)(v205 + 64) = v206;
    *(_QWORD *)(v205 + 32) = v96;
    *(_QWORD *)(v205 + 40) = v98;
    swift_bridgeObjectRetain(v98);
    v207 = sub_100252B40(v201, v203);
    v474 = v208;
    sub_1000986E8();
    swift_bridgeObjectRelease(v203);
    v210 = (objc_class *)sub_10009DD7C(v209, "mainBundle");
    v211.super.isa = v210;
    v475 = sub_1000DA4CC(0x65442074756F6241, 0xEF746E696F502077, 0, 0, v211);
    v470 = v212;

    v214 = sub_10009DD7C(v213, "mainBundle");
    v482._object = (void *)0x80000001009F6860;
    sub_10003BCE4();
    v482._countAndFlagsBits = (uint64_t)v473;
    v219 = NSLocalizedString(_:tableName:bundle:value:comment:)(v215, v216, v217, v218, v482);

    v220 = sub_1000D0970(v204);
    *(_OWORD *)(v220 + 16) = v471;
    *(_QWORD *)(v220 + 56) = &type metadata for String;
    *(_QWORD *)(v220 + 64) = v206;
    *(_QWORD *)(v220 + 32) = v96;
    *(_QWORD *)(v220 + 40) = v98;
    sub_100252B40(v219._countAndFlagsBits, (uint64_t)v219._object);
    sub_1000C13F4();
    sub_1000986E8();
    sub_100098964();
    v221 = v478;
    v222 = v196 + v478[6];
    v223 = sub_100089094();
    _s7Weather24LocationCompositionStateOwst_0(v222, 1, 1, v223);
    v224 = (uint64_t *)(v196 + v221[7]);
    v225 = v474;
    *v224 = v207;
    v224[1] = v225;
    v226 = sub_1000D0C4C();
    sub_10009525C((uint64_t)v224, v226);
    sub_1000BEA20(v196 + v221[8]);
    *(_OWORD *)v196 = xmmword_10098B620;
    *(_BYTE *)(v196 + 16) = 0;
    v227 = v477;
    *(_QWORD *)(v196 + 24) = v480;
    *(_QWORD *)(v196 + 32) = v227;
    *(_BYTE *)(v196 + v221[9]) = 0;
    *(_BYTE *)(v196 + v221[10]) = 0;
    v228 = v461;
    _s7Weather24LocationCompositionStateOwst_0(v461 + v221[6], 1, 1, v223);
    v229 = (unint64_t *)(v228 + v221[7]);
    *v229 = v98;
    v229[1] = v204;
    sub_10009525C((uint64_t)v229, v226);
    sub_1000BEA20(v228 + v221[8]);
    *(_OWORD *)v228 = xmmword_10098B630;
    *(_BYTE *)(v228 + 16) = 0;
    v230 = (uint64_t)v476;
    v231 = v470;
    *(_QWORD *)(v228 + 24) = v475;
    *(_QWORD *)(v228 + 32) = v231;
    *(_BYTE *)(v228 + v221[9]) = 0;
    *(_BYTE *)(v228 + v221[10]) = 0;
    v232 = v463;
    sub_100037768(v230, v463, &qword_100BC68A0);
    v233 = sub_100088FC8(v232, 1, v434);
    if (v79)
    {
      sub_10009518C(v233, &qword_100BC68A0);
      v234 = sub_1000BA294(&qword_100BCE730);
      v235 = *(_QWORD *)(v479 + 72);
      v236 = *(unsigned __int8 *)(v479 + 80);
      v237 = (v236 + 32) & ~v236;
      v238 = (__n128 *)sub_1000D0968(v234, v237 + 2 * v235, v236);
      sub_10011070C(v238, (__n128)xmmword_10097DA20);
      sub_100080C0C(v196, v237, type metadata accessor for ConditionDetailPlatterViewModel);
      sub_10007802C(v228, v237 + v235, type metadata accessor for ConditionDetailPlatterViewModel);
    }
    else
    {
      v239 = v455;
      sub_1000C0CEC(v232, v455);
      v240 = v457;
      sub_100095150(v239, v457);
      v241 = sub_1000BA294(&qword_100BCE730);
      v242 = *(_QWORD *)(v479 + 72);
      v243 = *(unsigned __int8 *)(v479 + 80);
      v244 = (v243 + 32) & ~v243;
      v245 = (__n128 *)sub_1000D0968(v241, v244 + 3 * v242, v243);
      sub_1000FCC4C(v245, (__n128)xmmword_10098B610);
      sub_100099904(v240, v244);
      sub_100099904(v196, v244 + v242);
      sub_100099904(v228, v244 + 2 * v242);
      sub_1000B3B44(v240);
      sub_100079F9C(v239);
      sub_1000B3B44(v228);
    }
    v250 = v196;
    goto LABEL_66;
  }
  if (v78 == enum case for DetailCondition.pressure(_:))
  {
    v135 = (void *)objc_opt_self(NSBundle);
    v136 = (objc_class *)sub_10011E79C(v135);
    sub_1000989C4();
    sub_10011E204();
    v137.super.isa = v136;
    sub_1000DA4CC(0x72502074756F6241, 0xEE00657275737365, 0, 0, v137);
    sub_10009DD84();
    v139 = (objc_class *)sub_1000C45D0(v138, *(const char **)(v33 + 1936));
    sub_1000989C4();
    v140.super.isa = v139;
    sub_1000BA340(v141, 0x80000001009F65D0, 0, 0, v140, v142, v143, v144);
    sub_10009F7DC();
LABEL_22:
    v146 = v478;
LABEL_23:
    v147 = DetailCondition.rawValue.getter(v145);
    v149 = v148;
    v150 = v456;
    v151 = v456 + v146[6];
    v152 = sub_100089094();
    _s7Weather24LocationCompositionStateOwst_0(v151, 1, 1, v152);
    v153 = (objc_class **)(v150 + v146[7]);
    *v153 = v136;
    v153[1] = (objc_class *)v33;
    v154 = sub_1000D0C4C();
    sub_10009525C((uint64_t)v153, v154);
    sub_1000C4470(v150 + v146[8]);
    *(_QWORD *)v150 = v147;
    *(_QWORD *)(v150 + 8) = v149;
    *(_BYTE *)(v150 + 16) = 0;
    *(_QWORD *)(v150 + 24) = v5;
    *(_QWORD *)(v150 + 32) = v75;
    *(_BYTE *)(v150 + v146[9]) = 0;
    *(_BYTE *)(v150 + v146[10]) = 0;
    sub_1000DA4E0(v85, &qword_100BC68A0, (uint64_t)&v481);
    v155 = sub_100088FC8(v147, 1, v434);
    if (v79)
    {
      sub_10009518C(v155, &qword_100BC68A0);
      v156 = sub_1000BA294(&qword_100BCE730);
      v157 = sub_1000C2580(v156);
      *(_OWORD *)(v157 + 16) = xmmword_10097CA50;
      sub_1000BCF30(v150, v157 + v5);
    }
    else
    {
      v246 = v453;
      sub_1000C0CEC(v147, v453);
      v247 = v457;
      sub_100095150(v246, v457);
      v248 = sub_1000BA294(&qword_100BCE730);
      v249 = (__n128 *)sub_1000C1D3C(v248, v479);
      sub_1000FCC4C(v249, (__n128)xmmword_10097DA20);
      sub_100099904(v247, v147);
      sub_100099904(v150, v147 + v154);
      sub_1000B3B44(v247);
      sub_100079F9C(v246);
    }
    v250 = v150;
    goto LABEL_66;
  }
  if (v78 == enum case for DetailCondition.precipitationTotal(_:))
  {
    v162 = (void *)objc_opt_self(NSBundle);
    v163 = (objc_class *)sub_1000B2EE0(v162);
    sub_1000989C4();
    v164.super.isa = v163;
    v168 = sub_1000BA340(0xD00000000000001DLL, 0x80000001009F5710, 0, 0, v164, v165, v166, v167);
    v170 = v169;

    v171 = v478;
    v172 = v454;
    v173 = v454 + v478[6];
    v174 = sub_100089094();
    v175 = _s7Weather24LocationCompositionStateOwst_0(v173, 1, 1, v174);
    v176 = (uint64_t *)(v172 + v171[7]);
    v177 = (objc_class *)sub_10009DD7C(v175, *(const char **)(v44 + 1936));
    sub_1000989C4();
    sub_1000D9458();
    v178.super.isa = v177;
    v186 = sub_1000BA340(v179, v180, v181, v182, v178, v183, v184, v185);
    v188 = v187;

    *v176 = v186;
    v176[1] = v188;
    v189 = sub_1000D0C4C();
    sub_10009525C((uint64_t)v176, v189);
    sub_1000BEA20(v172 + v171[8]);
    *(_QWORD *)v172 = 0xD00000000000001DLL;
    *(_QWORD *)(v172 + 8) = 0x80000001009F5710;
    *(_BYTE *)(v172 + 16) = 0;
    *(_QWORD *)(v172 + 24) = v168;
    *(_QWORD *)(v172 + 32) = v170;
    *(_BYTE *)(v172 + v171[9]) = 0;
    *(_BYTE *)(v172 + v171[10]) = 0;
    v190 = v450;
    sub_100037768((uint64_t)v476, v450, &qword_100BC68A0);
    sub_100088FC8(v190, 1, v434);
    if (v79)
    {
      sub_100021A14(v190, &qword_100BC68A0);
      v191 = sub_1000BA294(&qword_100BCE738);
      v192 = (__n128 *)sub_1000C2580(v191);
      sub_10011070C(v192, (__n128)xmmword_10097CA50);
      sub_100080C0C(v172, v190, type metadata accessor for ConditionDetailPlatterViewModel);
      sub_1000D1CFC(v190, 0);
      v193 = v190;
      v194 = v447;
      sub_10004A358(v193);
      v195 = v448;
      sub_1000787D4(v194, v448, &qword_100BC68B8);
      sub_100088FC8(v195, 1, (uint64_t)v171);
      if (v79)
      {
        sub_100021A14(v195, &qword_100BC68B8);
      }
      else
      {
        v306 = v441;
        sub_1000C0CEC(v195, v441);
        v307 = v443;
        sub_1000C0CEC(v306, v443);
        v308 = _swiftEmptyArrayStorage;
        v309 = sub_100117378();
        if ((v309 & 1) == 0)
        {
          sub_100098AA8();
          v308 = v432;
        }
        if (v308[2] >= v308[3] >> 1)
          sub_1000CFBD0();
        sub_10009BC80();
        sub_10007802C(v307, v310, type metadata accessor for ConditionDetailPlatterViewModel);
      }
      sub_10009E334();
      sub_1005004A0();
      v250 = v172;
    }
    else
    {
      v268 = v190;
      v269 = v452;
      sub_10007802C(v268, v452, type metadata accessor for DetailComponentContainerViewModel);
      v270 = v451;
      sub_100095150(v269, v451);
      v271 = sub_1000BA294(&qword_100BCE738);
      v272 = *(_QWORD *)(v471 + 72);
      v273 = *(unsigned __int8 *)(v471 + 80);
      v274 = (v273 + 32) & ~v273;
      v275 = (__n128 *)sub_1000D0968(v271, v274 + 2 * v272, v273);
      sub_10011070C(v275, (__n128)xmmword_10097DA20);
      sub_100099904(v270, v274);
      sub_1000D1CFC(v274, 0);
      sub_100099904(v172, v274 + v272);
      sub_1000D1CFC(v274 + v272, 0);
      v276 = 0;
      v277 = 0;
      v278 = _swiftEmptyArrayStorage;
      v279 = (uint64_t)v171;
      v280 = v470;
      do
      {
        v281 = v276;
        v282 = v474;
        sub_1000D0580(v274 + v277 * v272, v474);
        sub_1000DE264(v282);
        sub_100088FC8(v280, 1, v279);
        if (v79)
        {
          sub_10011E094();
        }
        else
        {
          v283 = v280;
          v284 = v465;
          sub_10009C0AC(v283, v465);
          sub_10009C0AC(v284, (uint64_t)v473);
          v285 = sub_100117378();
          if ((v285 & 1) == 0)
          {
            sub_100098AA8();
            v278 = v289;
          }
          v286 = v278[2];
          if (v286 >= v278[3] >> 1)
          {
            sub_1000CFBD0();
            v278 = v290;
          }
          v278[2] = v286 + 1;
          sub_10008613C();
          sub_10009C0AC((uint64_t)v473, v287 + v288 * v286);
          v280 = v470;
        }
        v276 = 1;
        v277 = 1;
      }
      while ((v281 & 1) == 0);
      sub_10009E334();
      sub_1005004A0();
      sub_100079F9C(v451);
      sub_1000215BC(v452, type metadata accessor for DetailComponentContainerViewModel);
      v250 = v454;
    }
    goto LABEL_66;
  }
  if (v78 == enum case for DetailCondition.uvIndex(_:))
  {
    v251 = (void *)objc_opt_self(NSBundle);
    v252 = (objc_class *)sub_10011E79C(v251);
    sub_10011E204();
    sub_1000989C4();
    v253.super.isa = v252;
    sub_1000DA4CC(v254, 0x80000001009F6330, 0, 0, v253);
    sub_10009DD84();
    v256 = (objc_class *)sub_1000C45D0(v255, *(const char **)(v33 + 1936));
    sub_1000989C4();
    v257.super.isa = v256;
    v262 = sub_1000BA340(v258, 0x80000001009F6380, 0, 0, v257, v259, v260, v261);
    v264 = v263;

    v265 = sub_1000BA294(&qword_100BC3C38);
    v266 = sub_1000D0970(v265);
    *(_OWORD *)(v266 + 16) = xmmword_10097CA50;
    *(_QWORD *)(v266 + 56) = &type metadata for Int;
    *(_QWORD *)(v266 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v266 + 32) = 3;
    v136 = (objc_class *)static String.localizedStringWithFormat(_:_:)(v262, v264, v266);
    v33 = v267;
    swift_bridgeObjectRelease(v266);
    v145 = swift_bridgeObjectRelease(v264);
    goto LABEL_22;
  }
  if (v78 == enum case for DetailCondition.visibility(_:))
  {
    sub_10011E204();
    v136 = (objc_class *)objc_opt_self(NSBundle);
    v291 = (objc_class *)-[objc_class mainBundle](v136, "mainBundle", v434);
    sub_1000989C4();
    v292.super.isa = v291;
    v5 = sub_1000BA340(v293, 0x80000001009F6080, 0, 0, v292, v294, v295, v296);
    v75 = v297;

    v298 = (void *)ConditionUnits.visibility.getter();
    v33 = NSUnitLength.isMetricVisibility.getter();

    v300 = (objc_class *)sub_1000B258C(v299, "mainBundle");
    v146 = v478;
    sub_1000989C4();
    if ((v33 & 1) != 0)
      v305 = "Visibility tells you how far away you can clearly see objects like buildings and hills. It is a measure of "
             "the transparency of the air and does not take into account the amount of sunlight or the presence of obstru"
             "ctions. Visibility at or above 10 km is considered clear.";
    else
      v305 = "Visibility tells you how far away you can clearly see objects like buildings and hills. It is a measure of "
             "the transparency of the air and does not take into account the amount of sunlight or the presence of obstru"
             "ctions. Visibility at or above 10 km (6 mi) is considered clear.";
    v367.super.isa = v300;
    sub_1000BA340(v301, (unint64_t)(v305 - 32) | 0x8000000000000000, 0, 0, v367, v302, v303, v304);
    sub_10009F7DC();
    goto LABEL_23;
  }
  if (v78 == enum case for DetailCondition.wind(_:))
  {
    if ((v442 & 1) == 0)
      goto LABEL_67;
    v311 = (char *)objc_opt_self(NSBundle);
    v312 = (objc_class *)objc_msgSend(v311, "mainBundle", v434);
    sub_1000989C4();
    v313.super.isa = v312;
    v317 = sub_1000BA340(0x74726F6675616542, 0xEE00656C61635320, 0, 0, v313, v314, v315, v316);
    sub_10009E3F8(v317, v318);
    v320 = (objc_class *)sub_1000C45D0(v319, "mainBundle");
    sub_1000989C4();
    v321.super.isa = v320;
    v326 = sub_1000BA340(v322, 0x80000001009F5D50, 0, 0, v321, v323, v324, v325);
    v474 = v327;

    v473 = v311;
    v329 = (objc_class *)sub_1000C45D0(v328, "mainBundle");
    sub_1000989C4();
    v330.super.isa = v329;
    v335 = sub_1000BA340(v331, 0x80000001009F5DA0, 0, 0, v330, v332, v333, v334);
    v337 = v336;

    v338 = sub_1000BA294(&qword_100BC3C38);
    v339 = sub_1000D0970(v338);
    *(_OWORD *)(v339 + 16) = xmmword_10097CA50;
    *(_QWORD *)(v339 + 56) = &type metadata for Int;
    *(_QWORD *)(v339 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v339 + 32) = 20;
    v340 = sub_100252B40(v335, v337);
    v342 = v341;
    sub_1000986E8();
    v343 = swift_bridgeObjectRelease(v337);
    v344 = DetailCondition.rawValue.getter(v343);
    v346 = v345;
    v347 = v478;
    v348 = v445;
    v349 = v445 + v478[6];
    v350 = sub_100089094();
    sub_1000BEC68(v349, 1);
    v351 = (uint64_t *)(v348 + v347[7]);
    *v351 = v340;
    v351[1] = v342;
    v352 = v472;
    v353 = sub_1000D0C4C();
    sub_10009525C((uint64_t)v351, v353);
    v354 = sub_1000C20AC(v348 + v347[8]);
    *(_QWORD *)v348 = v344;
    *(_QWORD *)(v348 + 8) = v346;
    *(_BYTE *)(v348 + 16) = 0;
    v355 = v474;
    *(_QWORD *)(v348 + 24) = v326;
    *(_QWORD *)(v348 + 32) = v355;
    *(_BYTE *)(v348 + v347[9]) = 0;
    *(_BYTE *)(v348 + v347[10]) = 0;
    __chkstk_darwin(v354);
    v436 = v449;
    v356 = v446;
    sub_10024B41C((void (*)(char *))sub_100252A00, v446);
    sub_10024DA34(v356);
    sub_1000C13F4();
    v358 = v357;
    v359 = sub_10009E290(v347[6]);
    v475 = v350;
    _s7Weather24LocationCompositionStateOwst_0(v359, v360, v361, v350);
    v362 = (uint64_t *)(v356 + v347[7]);
    *v362 = v352;
    v362[1] = 0;
    v362[2] = v358;
    v363 = type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
    swift_storeEnumTagMultiPayload(v362, v363, 0);
    swift_storeEnumTagMultiPayload(v362, v353, 7);
    sub_1000C20AC(v356 + v347[8]);
    *(_QWORD *)v356 = 0xD000000000000011;
    *(_QWORD *)(v356 + 8) = 0x80000001009F5E90;
    *(_BYTE *)(v356 + 16) = 1;
    v364 = (uint64_t)v476;
    v365 = v477;
    *(_QWORD *)(v356 + 24) = v480;
    *(_QWORD *)(v356 + 32) = v365;
    *(_BYTE *)(v356 + v347[9]) = 1;
    *(_BYTE *)(v356 + v347[10]) = 0;
    sub_1000DA4E0(v364, &qword_100BC68A0, (uint64_t)&v468);
    v366 = sub_100088FC8(v352, 1, v434);
    if (v79)
    {
      sub_10009518C(v366, &qword_100BC68A0);
      v370 = 1;
      v371 = v440;
      v369 = v439;
    }
    else
    {
      v368 = v437;
      sub_10009C0AC(v352, v437);
      v369 = v439;
      sub_10024D6A8(v368, v439);
      sub_1000B3B44(v368);
      v370 = 0;
      v371 = v440;
    }
    sub_1000D1CFC(v369, v370);
    sub_1000787D4(v369, v371, &qword_100BC68B8);
    v372 = (void *)ConditionUnits.windSpeed.getter();
    v373 = NSUnitSpeed.isBeaufort.getter(v372);

    if ((v373 & 1) != 0)
    {
      sub_1000DA4E0(v371, &qword_100BC68B8, (uint64_t)&v465);
      sub_100088FC8((uint64_t)v372, 1, (uint64_t)v347);
      if (!v79)
      {
        v413 = v435;
        sub_1000C0CEC((uint64_t)v372, v435);
        sub_1000BA294(&qword_100BCE730);
        sub_100110454();
        v416 = sub_1000D0968(v414, (uint64_t)v372 + 3 * v373, v415);
        *(_OWORD *)(v416 + 16) = xmmword_10098B610;
        v417 = (uint64_t)v372 + v416;
        v418 = v445;
        sub_1000BCF30(v445, v417);
        sub_1000BCF30(v413, v417 + v373);
        v419 = v417 + 2 * v373;
        v420 = v444;
        sub_1000BCF30(v444, v419);
        sub_100079F9C(v413);
        sub_10009ED60(v421, &qword_100BC68B8);
        v422 = v420;
LABEL_84:
        sub_100079F9C(v422);
        sub_10011E378(v430, &qword_100BCE728);
        v250 = v418;
        goto LABEL_66;
      }
      sub_100075DD0((uint64_t)v372);
      v375 = sub_1000BA294(&qword_100BCE730);
      v376 = (__n128 *)sub_1000C1D3C(v375, v479);
      sub_1000FCC4C(v376, (__n128)xmmword_10097DA20);
      v377 = v445;
      sub_100099904(v445, (uint64_t)v372);
      v378 = (uint64_t)v372 + v369;
      v379 = v444;
      sub_100099904(v444, v378);
      sub_100075DD0(v371);
      v380 = v379;
    }
    else
    {
      v381 = (objc_class *)sub_1000B258C(v374, "mainBundle");
      sub_1000989C4();
      sub_1000D9458();
      v382.super.isa = v381;
      sub_1000BA340(v383, v384, v385, v386, v382, v387, v388, v389);
      sub_1000C13F4();

      v391 = (objc_class *)sub_1000B258C(v390, "mainBundle");
      sub_1000989C4();
      v392.super.isa = v391;
      v397 = sub_1000BA340(v393, 0x80000001009F5F10, 0, 0, v392, v394, v395, v396);
      v399 = v398;

      v400 = sub_10009E290(v347[6]);
      _s7Weather24LocationCompositionStateOwst_0(v400, v401, v402, v475);
      v403 = (uint64_t *)((char *)v391 + v347[7]);
      *v403 = v397;
      v403[1] = v399;
      v404 = (uint64_t)v391;
      sub_10009525C((uint64_t)v403, v353);
      sub_1000C20AC((uint64_t)v391 + v347[8]);
      *(_QWORD *)v391 = 0xD000000000000012;
      *((_QWORD *)v391 + 1) = 0x80000001009F6060;
      *((_BYTE *)v391 + 16) = 0;
      *((_QWORD *)v391 + 3) = v372;
      *((_QWORD *)v391 + 4) = v373;
      *((_BYTE *)v391 + v347[9]) = 0;
      *((_BYTE *)v391 + v347[10]) = 0;
      sub_1000DA4E0(v371, &qword_100BC68B8, (uint64_t)&v467);
      sub_100088FC8((uint64_t)v372, 1, (uint64_t)v347);
      if (!v79)
      {
        v423 = v436;
        sub_1000C0CEC((uint64_t)v372, v436);
        sub_1000BA294(&qword_100BCE730);
        sub_100110454();
        v426 = sub_1000D0968(v424, (uint64_t)v372 + 4 * v373, v425);
        *(_OWORD *)(v426 + 16) = xmmword_1009891D0;
        v427 = (uint64_t)v372 + v426;
        v418 = v445;
        sub_1000BCF30(v445, v427);
        sub_1000BCF30(v423, v427 + v373);
        v428 = v444;
        sub_1000BCF30(v444, v427 + 2 * v373);
        sub_1000BCF30(v404, v427 + 3 * v373);
        sub_100079F9C(v423);
        sub_100079F9C(v404);
        sub_10009ED60(v429, &qword_100BC68B8);
        v422 = v428;
        goto LABEL_84;
      }
      sub_100075DD0((uint64_t)v372);
      v405 = sub_1000BA294(&qword_100BCE730);
      v406 = *(_QWORD *)(v479 + 72);
      v407 = *(unsigned __int8 *)(v479 + 80);
      v408 = (v407 + 32) & ~v407;
      v409 = (__n128 *)sub_1000D0968(v405, v408 + 3 * v406, v407);
      sub_1000FCC4C(v409, (__n128)xmmword_10098B610);
      v377 = v445;
      sub_100099904(v445, v408);
      v410 = v404;
      v411 = v444;
      sub_100099904(v444, v408 + v406);
      sub_10009C0AC(v410, v408 + 2 * v406);
      sub_100075DD0(v371);
      v380 = v411;
    }
    sub_1000B3B44(v380);
    sub_10011E378(v412, &qword_100BCE728);
    v250 = v377;
LABEL_66:
    sub_1000215BC(v250, type metadata accessor for ConditionDetailPlatterViewModel);
LABEL_67:
    sub_100098640();
    return;
  }
  _diagnoseUnexpectedEnumCase<A>(type:)(v469, v469);
  __break(1u);
}

double sub_10024D6A8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  Swift::String v14;

  v4 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v14._object = (void *)0x80000001009F6570;
  v5._countAndFlagsBits = 1937204558;
  v5._object = (void *)0xE400000000000000;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v14._countAndFlagsBits = 0xD000000000000021;
  v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, (Swift::String_optional)0, (NSBundle)v4, v6, v14);

  v8 = (int *)type metadata accessor for ConditionDetailPlatterViewModel(0);
  v9 = a2 + v8[6];
  v10 = type metadata accessor for WeatherDescription(0);
  _s7Weather24LocationCompositionStateOwst_0(v9, 1, 1, v10);
  v11 = a2 + v8[7];
  sub_100080C0C(a1, v11, type metadata accessor for DetailComponentContainerViewModel);
  v12 = type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
  swift_storeEnumTagMultiPayload(v11, v12, 4);
  _s7Weather24LocationCompositionStateOwst_0(a2 + v8[8], 1, 1, v12);
  *(_QWORD *)&result = 1;
  *(_OWORD *)a2 = xmmword_10097CA60;
  *(_BYTE *)(a2 + 16) = 2;
  *(Swift::String *)(a2 + 24) = v7;
  *(_BYTE *)(a2 + v8[9]) = 0;
  *(_BYTE *)(a2 + v8[10]) = 0;
  return result;
}

uint64_t sub_10024D7F8@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String *v10;
  id v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t result;
  Swift::String v17;
  Swift::String v18;

  v2 = (void *)objc_opt_self(NSBundle);
  v3 = objc_msgSend(v2, "mainBundle");
  v17._countAndFlagsBits = 0xD000000000000052;
  v17._object = (void *)0x80000001009F6A10;
  v4._countAndFlagsBits = 0xD00000000000001CLL;
  v4._object = (void *)0x80000001009F69F0;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v17);

  v7 = (int *)type metadata accessor for ConditionDetailPlatterViewModel(0);
  v8 = a1 + v7[6];
  v9 = type metadata accessor for WeatherDescription(0);
  _s7Weather24LocationCompositionStateOwst_0(v8, 1, 1, v9);
  v10 = (Swift::String *)(a1 + v7[7]);
  v11 = objc_msgSend(v2, "mainBundle");
  v18._countAndFlagsBits = 0xD00000000000004DLL;
  v12._countAndFlagsBits = 0xD0000000000000A6;
  v18._object = (void *)0x80000001009F6B20;
  v12._object = (void *)0x80000001009F6A70;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, (Swift::String_optional)0, (NSBundle)v11, v13, v18);

  *v10 = v14;
  v15 = type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
  swift_storeEnumTagMultiPayload(v10, v15, 1);
  result = _s7Weather24LocationCompositionStateOwst_0(a1 + v7[8], 1, 1, v15);
  *(_QWORD *)a1 = 0xD00000000000001CLL;
  *(_QWORD *)(a1 + 8) = 0x80000001009F69F0;
  *(_BYTE *)(a1 + 16) = 0;
  *(Swift::String *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + v7[9]) = 0;
  *(_BYTE *)(a1 + v7[10]) = 0;
  return result;
}

uint64_t sub_10024D9B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  ExtremaResult.maxValue.getter(a1);
  v1 = ConditionUnits.windSpeed.getter();
  v2 = sub_1000A0794(0, (unint64_t *)&qword_100BCB990, NSUnitSpeed_ptr);
  return Measurement.init(value:unit:)(v1, v2);
}

uint64_t sub_10024DA34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  _QWORD *v54;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  __int128 v66;
  _QWORD *v67;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  Swift::String v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  _QWORD *v94;

  v82 = a1;
  v72 = type metadata accessor for Beaufort.Category(0);
  v71 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v70 = (char *)&v69 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_1000BA294(&qword_100BCE728);
  __chkstk_darwin(v2);
  *(_QWORD *)&v75 = (char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for WeatherFormatPlaceholder(0);
  v80 = *(_QWORD *)(v4 - 8);
  v81 = (void *)v4;
  __chkstk_darwin(v4);
  v78 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100BC3340);
  __chkstk_darwin(v6);
  v8 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NSUnitSpeed.WeatherFormatUsage(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for NSUnitSpeed.BaseWeatherFormatStyle(0);
  v79 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v14 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000BA294(&qword_100BCB938);
  v76 = *(_QWORD *)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v69 = (char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v69 - v18;
  v20 = type metadata accessor for UnitManager(0);
  v21 = static UnitManager.standard.getter(v20);
  v22 = (void *)UnitManager.windGust.getter();
  swift_release(v21);
  v23 = sub_1000A0794(0, (unint64_t *)&qword_100BCB990, NSUnitSpeed_ptr);
  v24 = v22;
  v25 = v75;
  v83 = v24;
  v26 = Measurement.init(value:unit:)(v24, v23);
  v27 = static Set<>.unit.getter(v26);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for NSUnitSpeed.WeatherFormatUsage.windGust(_:), v9);
  v28 = type metadata accessor for Locale(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 1, 1, v28);
  static WeatherFormatStyle<>.weather(_:usage:locale:)(v27, v12, v8);
  swift_bridgeObjectRelease(v27);
  sub_100021A14((uint64_t)v8, &qword_100BC3340);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v29 = v80;
  v30 = v81;
  v31 = v78;
  v32 = (*(uint64_t (**)(char *, _QWORD, void *))(v80 + 104))(v78, enum case for WeatherFormatPlaceholder.none(_:), v81);
  v33 = static UnitManager.standard.getter(v32);
  sub_10000F1C8(&qword_100BCE748, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitSpeed.BaseWeatherFormatStyle);
  v34 = v77;
  v36 = Measurement.formatted<A>(_:placeholder:unitManager:)(v14, v31, v33, &protocol witness table for UnitManager, v15, v77, v35);
  v37 = v76;
  v74 = v36;
  v73 = v38;
  v39 = swift_release(v33);
  (*(void (**)(char *, void *, __n128))(v29 + 8))(v31, v30, v39);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v14, v34);
  v40 = *(void (**)(char *, uint64_t))(v37 + 8);
  v40(v19, v15);
  sub_100037768(v82, v25, &qword_100BCE728);
  if (_s7Weather24LocationCompositionStateOwet_0(v25, 1, v15) == 1)
  {
    sub_100021A14(v25, &qword_100BCE728);
  }
  else
  {
    v42 = v69;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v69, v25, v15);
    v43 = v70;
    v44 = Measurement<>.beaufortCategory(useExtendedScale:)(1);
    v45 = Beaufort.Category.level.getter(v44);
    v46 = (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v43, v72);
    v47 = static Beaufort.maxLevel.getter(v46);
    v41 = ((uint64_t (*)(char *, uint64_t))v40)(v42, v15);
    if (v47 < v45)
    {
      LODWORD(v82) = 1;
      result = static Beaufort.maxExtendedLevel.getter(v41);
      v49 = result;
      goto LABEL_6;
    }
  }
  result = static Beaufort.maxLevel.getter(v41);
  v49 = result;
  LODWORD(v82) = 0;
LABEL_6:
  if (v49 < 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v50 = v49 + 1;
  if (!__OFADD__(v49, 1))
  {
    v94 = _swiftEmptyArrayStorage;
    result = (uint64_t)sub_100605E80(0, v50 & ~(v50 >> 63), 0);
    if (v50 < 0)
      goto LABEL_23;
    v51 = 0;
    v52 = 0;
    v53 = -1;
    v54 = v94;
    while (v49 != v53)
    {
      if (v52)
        goto LABEL_24;
      v84 = v51;
      result = sub_1002526C4(v82, (uint64_t)v83, &v85);
      countAndFlagsBits = v85._countAndFlagsBits;
      object = v85._object;
      v58 = v86;
      v57 = v87;
      v59 = v88;
      v60 = v89;
      v61 = v90;
      v62 = v91;
      v64 = v54[2];
      v63 = v54[3];
      v65 = v92;
      v66 = v93;
      v94 = v54;
      if (v64 >= v63 >> 1)
      {
        v80 = v87;
        v81 = v85._object;
        v78 = v89;
        v79 = v88;
        v77 = v90;
        v76 = v91;
        v75 = v93;
        result = (uint64_t)sub_100605E80((char *)(v63 > 1), v64 + 1, 1);
        v66 = v75;
        v62 = v76;
        v61 = v77;
        v60 = v78;
        v59 = v79;
        v57 = v80;
        object = v81;
        v54 = v94;
      }
      v54[2] = v64 + 1;
      v67 = &v54[11 * v64];
      v67[4] = countAndFlagsBits;
      v67[5] = object;
      v67[6] = v58;
      v67[7] = v57;
      v67[8] = v59;
      v67[9] = v60;
      v67[10] = v61;
      v67[11] = v62;
      v67[12] = v65;
      *(_OWORD *)(v67 + 13) = v66;
      v52 = v51 == v49;
      if (v51 == v49)
      {
        v51 = 0;
      }
      else if (__OFADD__(v51++, 1))
      {
        goto LABEL_20;
      }
      if (v49 == ++v53)
      {

        return v74;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

void sub_10024E048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  int *v55;
  uint64_t v56;
  void (*v57)(_QWORD, _QWORD, _QWORD);
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v64;
  void *v65;
  objc_class *v66;
  NSBundle v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  id v82;
  Swift::String v83;
  Swift::String_optional v84;
  NSBundle v85;
  Swift::String v86;
  Swift::String v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(uint64_t, _QWORD);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  int *v110;
  uint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int *v139;
  uint64_t *v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(uint64_t, uint64_t);
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t (*v158)(uint64_t, _QWORD);
  uint64_t v159;
  uint64_t v160;
  uint64_t (*v161)(uint64_t, _QWORD);
  uint64_t v162;
  uint64_t v163;
  __n128 *v164;
  uint64_t v165;
  uint64_t v166;
  void (*v167)(uint64_t, uint64_t);
  uint64_t v168;
  uint64_t v169;
  uint64_t (*v170)(uint64_t, _QWORD);
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void (*v178)(uint64_t, uint64_t);
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  int *v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  id v190;
  Swift::String v191;
  Swift::String v192;
  Swift::String v193;
  int *v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  __n128 *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t (*v210)(uint64_t, _QWORD);
  uint64_t v211;
  uint64_t v212;
  _QWORD v213[2];
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  void (*v217)(_QWORD, _QWORD, _QWORD);
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t countAndFlagsBits;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int *v226;
  uint64_t v227;
  _QWORD *v228;
  void *object;
  uint64_t v230;
  uint64_t v231;
  _BYTE *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  int *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  Swift::String v261;
  Swift::String v262;

  v224 = a4;
  v218 = a3;
  v221 = a2;
  v214 = type metadata accessor for ConditionDetailMapViewModel(0);
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_100088FDC();
  v216 = v9;
  v10 = sub_1000B3B70();
  sub_1000B43A4(v10, (uint64_t)&v256);
  v230 = v11;
  sub_10009D98C();
  __chkstk_darwin(v12);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v13);
  sub_100079F7C();
  v219 = v14;
  v15 = sub_10009876C();
  v16 = type metadata accessor for WeatherDescription(v15);
  sub_1000B43A4(v16, (uint64_t)&v255);
  v223 = v17;
  sub_10009D98C();
  __chkstk_darwin(v18);
  v20 = sub_1000CE52C((uint64_t)v213 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v240 = *(_QWORD *)(v20 - 8);
  v241 = v20;
  sub_10009D98C();
  __chkstk_darwin(v21);
  sub_100088FDC();
  v239 = v22;
  v23 = sub_10009876C();
  v24 = type metadata accessor for Calendar(v23);
  sub_1000B43A4(v24, (uint64_t)&v259);
  v231 = v25;
  sub_10009D98C();
  __chkstk_darwin(v26);
  sub_100088FDC();
  v254 = v27;
  sub_1000BA294(&qword_100BCCC48);
  sub_10009D98C();
  __chkstk_darwin(v28);
  sub_100088FDC();
  v245 = v29;
  v30 = sub_10009876C();
  v261._object = (void *)type metadata accessor for WeatherData(v30);
  sub_10009D98C();
  __chkstk_darwin(v31);
  sub_100088FDC();
  v246 = v32;
  v255 = sub_1000BA294(&qword_100BCB9F8);
  v247 = *(_QWORD *)(v255 - 8);
  sub_10009D98C();
  __chkstk_darwin(v33);
  sub_100088FDC();
  v256 = v34;
  v35 = sub_1000BA294(&qword_100BCB130);
  v248 = *(_QWORD *)(v35 - 8);
  v249 = v35;
  sub_10009D98C();
  __chkstk_darwin(v36);
  sub_100088FDC();
  v257 = v37;
  v38 = sub_10009876C();
  v39 = type metadata accessor for CurrentWeather(v38);
  v250 = *(_QWORD *)(v39 - 8);
  v251 = v39;
  sub_10009D98C();
  __chkstk_darwin(v40);
  sub_100088FDC();
  v258 = v41;
  v42 = sub_10009876C();
  v43 = type metadata accessor for DayWeather(v42);
  v252 = *(_QWORD *)(v43 - 8);
  v253 = v43;
  sub_10009D98C();
  __chkstk_darwin(v44);
  sub_100079F58();
  v45 = type metadata accessor for TimeZone(0);
  sub_1000B43A4(v45, (uint64_t)&v260);
  v234 = v46;
  sub_10009D98C();
  __chkstk_darwin(v47);
  sub_100094EC4();
  v48 = type metadata accessor for Location(0);
  v49 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  sub_100099234();
  v50 = type metadata accessor for Date(0);
  v51 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v52);
  v54 = (char *)v213 - v53;
  v55 = (int *)type metadata accessor for ConditionDetailInput.Input(0);
  v56 = a1 + v55[10];
  v233 = v51;
  v57 = *(void (**)(_QWORD, _QWORD, _QWORD))(v51 + 16);
  v244 = v54;
  v236 = v50;
  v217 = v57;
  v57(v54, v56, v50);
  v58 = a1 + v55[13];
  v235 = v49;
  v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 16);
  v237 = v6;
  v238 = v48;
  v213[1] = v59;
  v60 = v59(v6, v58, v48);
  v61 = Location.timeZone.getter(v60);
  v62 = a1 + v55[15];
  v63 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v252 + 16);
  v64 = v245;
  v242 = v4;
  v63(v4, v62, v253, v61);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v250 + 16))(v258, a1 + v55[16], v251);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v248 + 16))(v257, a1 + v55[17], v249);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v247 + 16))(v256, a1 + v55[5], v255);
  sub_100080C0C(a1 + v55[18], v246, type metadata accessor for WeatherData);
  sub_100037768(a1 + v55[22], v64, &qword_100BCCC48);
  v243 = v5;
  static Calendar.currentCalendar(with:)(v5);
  v65 = (void *)objc_opt_self(NSBundle);
  v66 = (objc_class *)objc_msgSend(v65, "mainBundle");
  sub_1000989C4();
  v67.super.isa = v66;
  v71 = sub_1000BA340(0x755320796C696144, 0xED00007972616D6DLL, 0, 0, v67, v68, v69, v70);
  v73 = v72;

  v74 = sub_100252B24();
  *(_BYTE *)(v74 + 16) = 2;
  v75 = (_BYTE *)sub_100252B24();
  v75[16] = 2;
  v76 = a1 + v55[8];
  v78 = v239;
  v77 = v240;
  v79 = v241;
  (*(void (**)(int *, uint64_t, uint64_t))(v240 + 16))(v239, v76, v241);
  v80 = (*(uint64_t (**)(int *, uint64_t))(v77 + 88))(v78, v79);
  v232 = v75;
  v227 = v74;
  v81 = v71;
  if (v80 == enum case for DetailCondition.conditions(_:))
  {
    if ((sub_100110520() & 1) != 0)
    {
      v82 = objc_msgSend(v65, "mainBundle", sub_100098964());
      sub_1000989C4();
      sub_10003BCE4();
      v261._countAndFlagsBits = 0xD000000000000035;
      v87 = NSLocalizedString(_:tableName:bundle:value:comment:)(v83, v84, v85, v86, v261);
      countAndFlagsBits = v87._countAndFlagsBits;
      object = v87._object;

      v75 = (_BYTE *)v228[5];
      v88 = v228[6];
      sub_1000CDECC(v228 + 2, (uint64_t)v75);
      v261._object = v75;
      v214 = v88;
      v89 = sub_10011E3DC();
      dispatch thunk of ConditionsPlatterStringBuilderType.makeForecastPlatterWeatherDescription(from:timeZone:dayWeather:currentWeather:hourlyForecast:dailyForecast:weatherChanges:units:)(v89);
    }
    else
    {
      sub_1000CDECC(v228 + 2, v228[5]);
      sub_10011DB2C();
      v106 = sub_10011E3DC();
      dispatch thunk of ConditionsPlatterStringBuilderType.makeDailySummaryPlatterWeatherDescription(from:timeZone:hourlyForecast:dayWeather:isYesterday:units:)(v106);
      object = v73;
      countAndFlagsBits = v71;
    }
    v107 = sub_1000BA294(&qword_100BCE730);
    v108 = sub_1000C2580(v107);
    *(_OWORD *)(v108 + 16) = xmmword_10097CA50;
    v109 = &v75[v108];
    v110 = v226;
    v111 = v225;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)&v75[v108 + v226[6]], 1, 1, v225);
    v112 = &v75[v108 + v110[7]];
    v113 = v223;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v223 + 16))(&v109[v110[7]], v64, v111);
    v114 = sub_1000D0C4C();
    swift_storeEnumTagMultiPayload(v112, v114, 0);
    sub_1000C6D84((uint64_t)&v109[v110[8]]);
    *(_QWORD *)v109 = 0;
    *((_QWORD *)v109 + 1) = 0;
    v109[16] = 2;
    v115 = object;
    *((_QWORD *)v109 + 3) = countAndFlagsBits;
    *((_QWORD *)v109 + 4) = v115;
    v109[v110[9]] = 0;
    v109[v110[10]] = 0;
    (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v64, v111);
    v116 = sub_1000DB7E0();
    sub_10009ED60(v116, &qword_100BCCC48);
    sub_10009BEE8(v117, type metadata accessor for WeatherData);
    sub_1000DB248();
    sub_1000C65E0();
    sub_1000D05AC();
    sub_1000FDB14();
    sub_100094F10(v243, *(uint64_t (**)(uint64_t, _QWORD))(v234 + 8));
    sub_1000D9BE0();
    sub_100094F10((uint64_t)v244, *(uint64_t (**)(uint64_t, _QWORD))(v233 + 8));
    (*(void (**)(int *, uint64_t))(v240 + 8))(v239, v241);
    goto LABEL_34;
  }
  object = v73;
  if (v80 == enum case for DetailCondition.humidity(_:))
  {
    sub_1000C69DC();
    v91 = v90[20];
    v92 = v90[21];
    v93 = sub_1000DB418(v90 + 17, v91);
    v94 = v255;
    v95 = Forecast.forecast.getter(v255);
    v96 = v254;
    dispatch thunk of HumidityPlatterStringBuilderType.makeSummaryString(hourlyForecast:dayWeather:date:calendar:timeZone:units:)(v95, v242, v244, v254, v243, v224, v91, v92);
    sub_10009DEC0();
    swift_bridgeObjectRelease(v95);
    v97 = sub_1000BA294(&qword_100BCE730);
    v98 = sub_1000D946C(v97);
    *(_OWORD *)(v98 + 16) = xmmword_10097CA50;
    v99 = sub_1000CC97C(v98);
    sub_10009525C(v92, v99);
    sub_1000BDC54();
    *(_QWORD *)(v71 + 24) = v71;
    *(_QWORD *)(v71 + 32) = v100;
    *(_BYTE *)(v71 + *((int *)v93 + 9)) = 0;
    *(_BYTE *)(v71 + *((int *)v93 + 10)) = 0;
    sub_1000988C4();
    v102 = sub_1000BD33C(v96, v101);
    sub_1000EF984(v102, &qword_100BCCC48);
    sub_10009BEE8(v103, type metadata accessor for WeatherData);
    v104 = sub_1000878F4();
    v105(v104, v94);
    sub_1000C65E0();
    sub_1000D05AC();
    v74 = v227;
    (*(void (**)(uint64_t, uint64_t))(v252 + 8))(v242, v253);
    sub_100094F10(v243, *(uint64_t (**)(uint64_t, _QWORD))(v234 + 8));
    sub_1000D9BE0();
    sub_100094F10((uint64_t)v244, *(uint64_t (**)(uint64_t, _QWORD))(v233 + 8));
LABEL_35:
    swift_release(v74);
    swift_release(v232);
    sub_100098640();
    return;
  }
  v118 = (uint64_t)v244;
  if (v80 == enum case for DetailCondition.pressure(_:))
  {
    v119 = sub_100110520();
    countAndFlagsBits = v71;
    if ((v119 & 1) != 0)
    {
      sub_100252AFC();
      v120 = v255;
      v121 = v256;
      v122 = Forecast.forecast.getter(v255);
      sub_1000C0950();
      dispatch thunk of PressurePlatterStringBuilderType.makeTodayString(from:hourlyForecast:extrema:timeZone:units:)();
      sub_1000C13F4();
    }
    else
    {
      v128 = sub_10011DB2C();
      sub_100252AFC();
      v121 = v256;
      v122 = Forecast.forecast.getter(v255);
      sub_1000C0950();
      if ((v128 & 1) != 0)
        dispatch thunk of PressurePlatterStringBuilderType.makeYesterdayString(for:hourlyForecast:extrema:timeZone:units:)();
      else
        dispatch thunk of PressurePlatterStringBuilderType.makeFutureDayString(for:hourlyForecast:extrema:timeZone:units:)();
      sub_1000C13F4();
      v120 = v255;
    }
    v127 = v242;
    sub_1000986E8();
    v136 = sub_1000BA294(&qword_100BCE730);
    v137 = sub_1000C2580(v136);
    *(_OWORD *)(v137 + 16) = xmmword_10097CA50;
    v138 = v137 + v122;
    v139 = v226;
    _s7Weather24LocationCompositionStateOwst_0(v137 + v122 + v226[6], 1, 1, v225);
    v140 = (uint64_t *)(v137 + v122 + v139[7]);
    *v140 = v121;
    v140[1] = v64;
    v141 = sub_1000D0C4C();
    sub_10009525C((uint64_t)v140, v141);
    sub_1000C6D84(v138 + v139[8]);
    *(_QWORD *)v138 = 0;
    *(_QWORD *)(v138 + 8) = 0;
    *(_BYTE *)(v138 + 16) = 2;
    v142 = object;
    *(_QWORD *)(v138 + 24) = countAndFlagsBits;
    *(_QWORD *)(v138 + 32) = v142;
    *(_BYTE *)(v138 + v139[9]) = 0;
    *(_BYTE *)(v138 + v139[10]) = 0;
    v143 = sub_1000DB7E0();
    sub_1000EF984(v143, &qword_100BCCC48);
    sub_10009BEE8(v144, type metadata accessor for WeatherData);
    v145 = sub_1000878F4();
    v146(v145, v120);
    (*(void (**)(uint64_t, uint64_t))(v248 + 8))(v257, v249);
LABEL_31:
    sub_1000BE8C4();
    (*(void (**)(uint64_t, uint64_t))(v252 + 8))(v127, v253);
LABEL_32:
    v161 = *(uint64_t (**)(uint64_t, _QWORD))(v234 + 8);
    v162 = v243;
    goto LABEL_33;
  }
  if (v80 == enum case for DetailCondition.precipitationTotal(_:))
  {
    v123 = sub_100110520();
    countAndFlagsBits = v71;
    if ((v123 & 1) != 0)
    {
      v124 = v228[35];
      v125 = v228[36];
      sub_1000CDECC(v228 + 32, v124);
      v126 = v257;
      v127 = v242;
      dispatch thunk of PrecipitationPlatterStringBuilderType.makeTodayString(from:dayWeather:dailyForecast:hourlyForecast:timeZone:)(v258, v242, v257, v256, v243, v124, v125);
      sub_10009DEC0();
    }
    else
    {
      v78 = (int *)sub_10011DB2C();
      v125 = v228[36];
      sub_1000CDECC(v228 + 32, v228[35]);
      v127 = v242;
      sub_10011E5DC();
      if ((v78 & 1) != 0)
        dispatch thunk of PrecipitationPlatterStringBuilderType.makeYesterdayString(for:dayWeather:timeZone:units:)();
      else
        dispatch thunk of PrecipitationPlatterStringBuilderType.makeFutureDayString(for:dayWeather:timeZone:units:)();
      sub_10009DEC0();
      v126 = v257;
    }
    v171 = sub_1000BA294(&qword_100BCE730);
    v172 = sub_1000D946C(v171);
    *(_OWORD *)(v172 + 16) = xmmword_10097CA50;
    v173 = sub_1000CC97C(v172);
    sub_10009525C(v125, v173);
    _s7Weather24LocationCompositionStateOwst_0(v81 + v78[8], 1, 1, v173);
    *(_QWORD *)v81 = 0;
    *(_QWORD *)(v81 + 8) = 0;
    *(_BYTE *)(v81 + 16) = 2;
    v174 = object;
    *(_QWORD *)(v81 + 24) = countAndFlagsBits;
    *(_QWORD *)(v81 + 32) = v174;
    *(_BYTE *)(v81 + v78[9]) = 0;
    *(_BYTE *)(v81 + v78[10]) = 0;
    v175 = sub_1000DB7E0();
    sub_1000EF984(v175, &qword_100BCCC48);
    sub_10009BEE8(v176, type metadata accessor for WeatherData);
    v177 = sub_1000878F4();
    v178(v177, v255);
    (*(void (**)(uint64_t, uint64_t))(v248 + 8))(v126, v249);
    goto LABEL_31;
  }
  v240 = a1;
  v129 = v258;
  if (v80 == enum case for DetailCondition.uvIndex(_:))
  {
    v130 = (uint64_t)v244;
    swift_bridgeObjectRelease(object);
    v131 = sub_10024F308(v74, v240);
    v132 = v220;
    if ((v131 & 1) != 0)
    {
      CurrentWeather.date.getter(v131);
      v133 = v236;
      v134 = v129;
      v135 = v130;
    }
    else
    {
      v134 = v129;
      v135 = v130;
      v133 = v236;
      sub_100095288((uint64_t)&v246);
    }
    v163 = sub_1000BA294(&qword_100BCE730);
    v164 = (__n128 *)sub_1000C2580(v163);
    sub_10011070C(v164, (__n128)xmmword_10097CA50);
    sub_1000C69DC();
    sub_1000CDECC((_QWORD *)(v165 + 56), *(_QWORD *)(v165 + 80));
    v166 = v243;
    sub_1001A7410(v132, v243, v134, v256, v221);
    v167 = *(void (**)(uint64_t, uint64_t))(v233 + 8);
    v167(v132, v133);
    v168 = sub_1000DB7E0();
    sub_1000EF984(v168, &qword_100BCCC48);
    sub_10009BEE8(v169, type metadata accessor for WeatherData);
    sub_1000DB248();
    sub_1000C65E0();
    sub_1000BE8C4();
    sub_1000FDB14();
    sub_1000988C4();
    sub_100094F10(v166, v170);
    sub_1000D9BE0();
    v167(v135, v133);
    goto LABEL_35;
  }
  v147 = v255;
  if (v80 == enum case for DetailCondition.visibility(_:))
  {
    sub_1000C69DC();
    v149 = v148[25];
    v150 = v148[26];
    sub_1000CDECC(v148 + 22, v149);
    v151 = v118;
    v152 = v254;
    v153 = v243;
    dispatch thunk of VisibilityPlatterStringBuilderType.makeSummaryString(currentWeather:extrema:date:calendar:timeZone:units:)(v129, v221, v151, v254, v243, v224, v149, v150);
    sub_10009DEC0();
    v154 = sub_1000BA294(&qword_100BCE730);
    v155 = sub_1000D946C(v154);
    *(_OWORD *)(v155 + 16) = xmmword_10097CA50;
    v156 = sub_1000CC97C(v155);
    sub_10009525C(v150, v156);
    sub_1000BDC54();
    *(_QWORD *)(v71 + 24) = v71;
    *(_QWORD *)(v71 + 32) = v157;
    *(_BYTE *)(v71 + v78[9]) = 0;
    *(_BYTE *)(v71 + v78[10]) = 0;
    sub_1000988C4();
    v159 = sub_1000BD33C(v152, v158);
    sub_1000EF984(v159, &qword_100BCCC48);
    sub_10009BEE8(v160, type metadata accessor for WeatherData);
    sub_1000DB248();
    sub_1000C65E0();
    sub_1000D05AC();
    sub_1000FDB14();
    sub_1000988C4();
    v162 = v153;
LABEL_33:
    sub_100094F10(v162, v161);
    sub_1000D9BE0();
    (*(void (**)(char *, uint64_t))(v233 + 8))(v244, v236);
LABEL_34:
    v74 = v227;
    goto LABEL_35;
  }
  v179 = v254;
  if (v80 == enum case for DetailCondition.wind(_:))
  {
    v180 = v258;
    v181 = v81;
    sub_1000C69DC();
    v183 = v182[15];
    v184 = v182[16];
    sub_1000CDECC(v182 + 12, v183);
    dispatch thunk of WindPlatterStringBuilderType.makeSummaryString(currentWeather:extrema:secondaryValueExtrema:date:calendar:timeZone:units:)(v180, v221, v218, v118, v179, v243, v224, v183, v184);
    sub_1000C13F4();
    v185 = v226;
    v186 = v219;
    _s7Weather24LocationCompositionStateOwst_0(v219 + v226[6], 1, 1, v225);
    v187 = (uint64_t *)(v186 + v185[7]);
    *v187 = v79;
    v187[1] = v183;
    v188 = sub_1000D0C4C();
    sub_10009525C((uint64_t)v187, v188);
    sub_1000C6D84(v186 + v185[8]);
    *(_QWORD *)v186 = 0;
    *(_QWORD *)(v186 + 8) = 0;
    *(_BYTE *)(v186 + 16) = 2;
    *(_QWORD *)(v186 + 24) = v181;
    v189 = v186;
    *(_QWORD *)(v186 + 32) = object;
    *(_BYTE *)(v186 + v185[9]) = 0;
    *(_BYTE *)(v186 + v185[10]) = 0;
    if ((sub_10024F308(v227, v240) & 1) != 0)
    {
      v190 = objc_msgSend(v65, "mainBundle");
      sub_1000989C4();
      v191._countAndFlagsBits = 0x6C7469745F70616DLL;
      v191._object = (void *)0xEC000000326C5F65;
      v192._countAndFlagsBits = 7364941;
      v192._object = (void *)0xE300000000000000;
      v193 = NSLocalizedString(_:tableName:bundle:value:comment:)(v191, (Swift::String_optional)0, (NSBundle)v190, v192, v262);
      v241 = v193._countAndFlagsBits;

      v194 = (int *)v214;
      v195 = v216;
      sub_100095288((uint64_t)&v241);
      v196 = (uint64_t)v195 + v194[6];
      v197 = v246;
      sub_100080C0C(v246, v196, type metadata accessor for WeatherData);
      _s7Weather24LocationCompositionStateOwst_0(v196, 0, 1, (uint64_t)v261._object);
      v198 = (char *)v195 + v194[8];
      v199 = enum case for WeatherMapOverlayKind.wind(_:);
      v200 = type metadata accessor for WeatherMapOverlayKind(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v200 - 8) + 104))(v198, v199, v200);
      *v195 = 0;
      v195[1] = 0;
      v201 = (_QWORD *)((char *)v195 + v194[7]);
      *v201 = 0;
      v201[1] = 0xE000000000000000;
      *((_BYTE *)v195 + v194[9]) = 0;
      v202 = v215;
      sub_1000D1CFC(v215 + v185[6], 1);
      v203 = v202 + v185[7];
      sub_100252B34((uint64_t)v195);
      v204 = type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
      sub_10009525C(v203, v204);
      swift_storeEnumTagMultiPayload(v203, v188, 7);
      sub_1000C6D84(v202 + v185[8]);
      *(_OWORD *)v202 = xmmword_10098B640;
      *(_BYTE *)(v202 + 16) = 1;
      *(_QWORD *)(v202 + 24) = v241;
      *(_QWORD *)(v202 + 32) = v193._object;
      *(_BYTE *)(v202 + v185[9]) = 1;
      *(_BYTE *)(v202 + v185[10]) = 0;
      v205 = sub_1000BA294(&qword_100BCE730);
      v206 = (__n128 *)sub_1000C1D3C(v205, v230);
      sub_1000FCC4C(v206, (__n128)xmmword_10097DA20);
      sub_100099904(v189, v188);
      sub_10009C0AC(v202, (uint64_t)v185 + v188);
      sub_1000215BC((uint64_t)v195, type metadata accessor for ConditionDetailMapViewModel);
      sub_1000B3B44(v189);
      v207 = sub_1000DB7E0();
      sub_1000EF984(v207, &qword_100BCCC48);
      sub_1000215BC(v197, type metadata accessor for WeatherData);
      (*(void (**)(uint64_t, uint64_t))(v247 + 8))(v256, v255);
    }
    else
    {
      v208 = sub_1000BA294(&qword_100BCE730);
      v209 = sub_1000C2580(v208);
      *(_OWORD *)(v209 + 16) = xmmword_10097CA50;
      sub_10007802C(v186, v209 + v186, type metadata accessor for ConditionDetailPlatterViewModel);
      sub_1000988C4();
      v211 = sub_1000BD33C(v179, v210);
      sub_1000EF984(v211, &qword_100BCCC48);
      sub_10009BEE8(v212, type metadata accessor for WeatherData);
      (*(void (**)(uint64_t, uint64_t))(v247 + 8))(v256, v147);
    }
    sub_1000C65E0();
    sub_1000D05AC();
    (*(void (**)(uint64_t, uint64_t))(v252 + 8))(v242, v253);
    goto LABEL_32;
  }
  _diagnoseUnexpectedEnumCase<A>(type:)(v241, v241);
  __break(1u);
}

uint64_t sub_10024F308(uint64_t a1, uint64_t a2)
{
  int v2;
  _BYTE *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (_BYTE *)(a1 + 16);
  v2 = *(unsigned __int8 *)(a1 + 16);
  if (v2 != 2)
    return v2 & 1;
  v4 = *(unsigned __int8 *)(a2 + *(int *)(type metadata accessor for ConditionDetailInput.Input(0) + 44));
  swift_beginAccess(v3, v6, 1, 0);
  *v3 = v4;
  return v4;
}

uint64_t sub_10024F370(uint64_t a1, uint64_t a2)
{
  int v2;
  _BYTE *v3;
  uint64_t v5;
  char v6;
  _BYTE v8[24];

  v3 = (_BYTE *)(a1 + 16);
  v2 = *(unsigned __int8 *)(a1 + 16);
  if (v2 == 2)
  {
    v5 = type metadata accessor for ConditionDetailInput.Input(0);
    v6 = static Date.== infix(_:_:)(a2 + *(int *)(v5 + 40), a2 + *(int *)(v5 + 48));
    swift_beginAccess(v3, v8, 1, 0);
    *v3 = v6 & 1;
  }
  else
  {
    v6 = v2 & 1;
  }
  return v6 & 1;
}

void sub_10024F3F8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, _QWORD, uint64_t);
  uint64_t v93;
  uint64_t v94;
  char v95;
  void (*v96)(uint64_t, uint64_t);
  void (*v97)(uint64_t, uint64_t);
  uint64_t v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int16 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  objc_class *v131;
  NSBundle v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  char v182[8];
  uint64_t v183;
  uint64_t v184;
  char v185[8];
  _OWORD v186[3];
  uint64_t v187;
  unsigned __int16 v188;
  char v189[8];
  uint64_t v190;

  v169 = a6;
  v171 = a5;
  v170 = a4;
  v168 = a3;
  v167 = a2;
  v181 = a7;
  v8 = type metadata accessor for HourWeather(0);
  sub_1000B43A4(v8, (uint64_t)v189);
  *(_QWORD *)&v180 = v9;
  sub_10009D98C();
  __chkstk_darwin(v10);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v11);
  sub_1000BA30C();
  __chkstk_darwin(v12);
  sub_100079F7C();
  v156 = v13;
  v14 = sub_10009876C();
  v15 = type metadata accessor for Precipitation(v14);
  sub_1000B43A4(v15, (uint64_t)&v190);
  *(_QWORD *)&v178 = v16;
  sub_10009D98C();
  __chkstk_darwin(v17);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v18);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v19);
  sub_1000BA30C();
  __chkstk_darwin(v20);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v21);
  sub_1000BA30C();
  __chkstk_darwin(v22);
  sub_1000BA30C();
  __chkstk_darwin(v23);
  sub_100079F7C();
  v174 = v24;
  v25 = sub_10009876C();
  v161 = type metadata accessor for ConditionDetailChartDataInput(v25);
  sub_10009D98C();
  __chkstk_darwin(v26);
  sub_100088FDC();
  v160 = v27;
  sub_1000BA294(&qword_100BCE758);
  sub_10009D98C();
  __chkstk_darwin(v28);
  sub_1000BA30C();
  __chkstk_darwin(v29);
  sub_100079F7C();
  v163 = v30;
  v31 = sub_10009876C();
  v32 = type metadata accessor for ConditionDetailChartInputs(v31);
  sub_1000B43A4(v32, (uint64_t)v185);
  v162 = v33;
  sub_10009D98C();
  __chkstk_darwin(v34);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v35);
  sub_100079F7C();
  v37 = sub_1000CE52C(v36);
  v38 = __chkstk_darwin(v37);
  v40 = (char *)&v150 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v42 = (char *)&v150 - v41;
  v43 = type metadata accessor for ConditionDetailInput.Input(0);
  if (*(_BYTE *)(a1 + *(int *)(v43 + 44)) != 1)
    goto LABEL_45;
  v44 = v43;
  v45 = a1 + *(int *)(v43 + 32);
  v154 = a1;
  sub_1000FD900();
  sub_1000B3288((uint64_t)v40, enum case for DetailCondition.pressure(_:));
  sub_10000F1C8(&qword_100BCE760, (uint64_t (*)(uint64_t))&type metadata accessor for DetailCondition);
  v46 = sub_1000F3E18();
  sub_10011DF6C();
  sub_100094F70();
  if ((v46 & 1) != 0)
    goto LABEL_45;
  sub_1000FD900();
  v47 = enum case for DetailCondition.precipitationTotal(_:);
  sub_1000B3288((uint64_t)v40, enum case for DetailCondition.precipitationTotal(_:));
  v48 = sub_1000F3E18();
  sub_10011DF6C();
  v49 = sub_100094F70();
  if ((v48 & 1) != 0)
    goto LABEL_45;
  v153 = v45;
  v50 = *(int *)(v44 + 28);
  v51 = *(_QWORD *)(v154 + v50);
  __chkstk_darwin(v49);
  *(&v150 - 2) = v52;
  sub_10009EF94();
  v53 = sub_10084B0CC(sub_100252A1C, (uint64_t)(&v150 - 4), v51);
  v55 = v54;
  sub_1000986E8();
  if ((v55 & 1) != 0 || (v56 = v53 - 1, v53 < 1))
  {
    if (qword_100BC2450 != -1)
      swift_once(&qword_100BC2450, sub_1006F3844);
    v69 = type metadata accessor for Logger(0);
    v70 = sub_1000AECD4(v69, (uint64_t)qword_100CAF0E8);
    v71 = Logger.logObject.getter(v70);
    v73 = static os_log_type_t.error.getter(v71, v72);
    if (os_log_type_enabled(v71, v73))
    {
      v74 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v74 = 0;
      _os_log_impl((void *)&_mh_execute_header, v71, v73, "Not enough data to compare weather data from yesterday and today. Comparison platter will not be shown.", v74, 2u);
      swift_slowDealloc(v74, -1, -1);
    }

    goto LABEL_45;
  }
  v57 = v50;
  sub_1000B3288((uint64_t)v42, v47);
  v58 = v153;
  v59 = static DetailCondition.== infix(_:_:)(v153);
  sub_100094F70();
  if ((v59 & 1) == 0)
    goto LABEL_44;
  v152 = v53;
  v60 = v154;
  v61 = *(_QWORD *)(v154 + v57);
  if (v56 >= *(_QWORD *)(v61 + 16))
  {
    __break(1u);
LABEL_52:
    __break(1u);
    return;
  }
  v62 = (*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80);
  v63 = *(_QWORD *)(v162 + 72);
  v151 = v56;
  v64 = v164;
  sub_100080C0C(v61 + v62 + v63 * v56, v164, type metadata accessor for ConditionDetailChartInputs);
  v65 = v165;
  v66 = v163;
  sub_1002F6F78(*(_QWORD *)(v64 + *(int *)(v165 + 20)), v163);
  v67 = type metadata accessor for ConditionDetailChartInput(0);
  v68 = sub_100088FC8(v66, 1, v67);
  if (v109)
  {
    sub_10009518C(v68, &qword_100BCE758);
    v76 = _swiftEmptyArrayStorage;
  }
  else
  {
    v75 = v160;
    sub_1000BCF30(v66 + *(int *)(v67 + 20), v160);
    sub_1000215BC(v66, type metadata accessor for ConditionDetailChartInput);
    v76 = *(_QWORD **)(v75 + *(int *)(v161 + 44));
    swift_bridgeObjectRetain(v76);
    sub_100079F9C(v75);
  }
  sub_1000215BC(v64, type metadata accessor for ConditionDetailChartInputs);
  v77 = *(_QWORD *)(v60 + v57);
  if (v152 >= *(_QWORD *)(v77 + 16))
    goto LABEL_52;
  v78 = v77 + v62 + v63 * v152;
  v79 = v159;
  sub_100080C0C(v78, v159, type metadata accessor for ConditionDetailChartInputs);
  v80 = v158;
  sub_1002F6F78(*(_QWORD *)(v79 + *(int *)(v65 + 20)), v158);
  sub_100088FC8(v80, 1, v67);
  if (v109)
  {
    sub_100021A14(v80, &qword_100BCE758);
    v82 = _swiftEmptyArrayStorage;
  }
  else
  {
    v81 = v160;
    sub_100080C0C(v80 + *(int *)(v67 + 20), v160, type metadata accessor for ConditionDetailChartDataInput);
    sub_1000215BC(v80, type metadata accessor for ConditionDetailChartInput);
    v82 = *(_QWORD **)(v81 + *(int *)(v161 + 44));
    sub_10009EF94();
    sub_1000215BC(v81, type metadata accessor for ConditionDetailChartDataInput);
  }
  sub_1000215BC(v79, type metadata accessor for ConditionDetailChartInputs);
  *(_QWORD *)&v186[0] = v76;
  sub_10025E198((uint64_t)v82);
  v83 = *(_QWORD *)&v186[0];
  v84 = *(_QWORD *)(*(_QWORD *)&v186[0] + 16);
  if (!v84)
  {
LABEL_49:
    swift_bridgeObjectRelease(v83);
LABEL_50:
    v149 = v181;
    v123 = sub_1000B3B70();
    v124 = v149;
LABEL_46:
    v125 = 1;
    goto LABEL_47;
  }
  v85 = *(_QWORD *)&v186[0]
      + ((*(unsigned __int8 *)(v180 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v180 + 80));
  v164 = *(_QWORD *)(v180 + 72);
  LODWORD(v163) = enum case for Precipitation.none(_:);
  v165 = *(_QWORD *)(v180 + 16);
  v162 = *(_QWORD *)&v186[0];
  swift_bridgeObjectRetain(*(_QWORD *)&v186[0]);
  v161 = v85;
  v86 = v175;
  v87 = v157;
  v88 = v176;
  v89 = v177;
  while (1)
  {
    v90 = sub_100095288((uint64_t)v185);
    HourWeather.precipitation.getter(v90);
    v91 = v178;
    v92 = *(void (**)(uint64_t, _QWORD, uint64_t))(v178 + 104);
    v93 = v179;
    sub_1000B3288(v89, v163);
    sub_10000F1C8(&qword_100BCE778, (uint64_t (*)(uint64_t))&type metadata accessor for Precipitation);
    v95 = dispatch thunk of static Equatable.== infix(_:_:)(v88, v89, v93, v94);
    v96 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
    v96(v89, v93);
    v96(v88, v93);
    if ((v95 & 1) == 0)
      break;
    sub_1000988C4();
    v97(v87, v86);
    v85 += v164;
    if (!--v84)
    {
      sub_100098718(v162);
      goto LABEL_50;
    }
  }
  v98 = v162;
  v99 = sub_1000986E8();
  v100 = v180;
  v101 = v156;
  v102 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(v180 + 32))(v156, v87, v86, v99);
  v103 = v155;
  HourWeather.precipitation.getter(v102);
  *(_QWORD *)&v180 = *(_QWORD *)(v100 + 8);
  ((void (*)(uint64_t, uint64_t))v180)(v101, v86);
  v104 = v179;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v178 + 32))(v174, v103, v179);
  v105 = *(_QWORD *)(v98 + 16);
  if (!v105)
    goto LABEL_43;
  v106 = sub_10009EF94();
  do
  {
    HourWeather.precipitation.getter(v106);
    sub_10000F1C8(&qword_100BCE780, (uint64_t (*)(uint64_t))&type metadata accessor for Precipitation);
    sub_1000B30FC();
    sub_1000B30FC();
    v107 = v104;
    v108 = v184;
    v109 = *(_QWORD *)&v186[0] == v183 && *((_QWORD *)&v186[0] + 1) == v184;
    if (v109)
    {
      sub_100098718(*((uint64_t *)&v186[0] + 1));
      sub_10009E578();
      sub_1000C69B0();
      v104 = v107;
LABEL_39:
      v106 = sub_10007A164();
      goto LABEL_40;
    }
    _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)&v186[0], *((_QWORD *)&v186[0] + 1), v183, v184, 0);
    sub_10011E0DC();
    swift_bridgeObjectRelease(v108);
    sub_10009E578();
    v110 = sub_1000C69B0();
    v104 = v107;
    v111 = v173;
    if ((v98 & 1) != 0)
      goto LABEL_39;
    HourWeather.precipitation.getter(v110);
    v98 = v172;
    v92(v172, v163, v104);
    sub_1000B30FC();
    sub_1000B30FC();
    if (*(_QWORD *)&v186[0] == v183 && *((_QWORD *)&v186[0] + 1) == v184)
    {
      sub_100098718(*((uint64_t *)&v186[0] + 1));
      sub_1000ED428(v98);
      sub_1000ED428(v111);
      goto LABEL_39;
    }
    _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)&v186[0], *((_QWORD *)&v186[0] + 1), v183, v184, 0);
    sub_10011E0DC();
    sub_100098964();
    sub_1000ED428(v98);
    sub_1000ED428(v173);
    v106 = sub_10007A164();
    if ((v98 & 1) == 0)
    {
      v148 = v162;
      sub_1000986E8();
      sub_1000ED428(v174);
      v83 = v148;
      goto LABEL_49;
    }
LABEL_40:
    --v105;
  }
  while (v105);
  sub_1000986E8();
LABEL_43:
  sub_1000ED428(v174);
  sub_1000986E8();
  v58 = v153;
  v53 = v152;
  v56 = v151;
LABEL_44:
  v113 = v154;
  v114 = v53;
  v115 = v56;
  v116 = v167;
  v117 = v168;
  v118 = v170;
  v119 = v171;
  v120 = v169;
  v121 = v166;
  sub_1002501CC(v154, v114, v115, v167, v168, v170, v171, v169, &v183);
  sub_1000787D4((uint64_t)&v183, (uint64_t)v186, &qword_100BCE768);
  v122 = v188;
  if (HIBYTE(v188) > 0xFEu)
  {
LABEL_45:
    v123 = sub_1000B3B70();
    v124 = v181;
    goto LABEL_46;
  }
  v180 = v186[0];
  v179 = v186[1];
  v178 = v186[2];
  v177 = v187;
  sub_1002512B4(v58, (uint64_t)v182);
  sub_100251444((uint64_t)v182, v113, v120, v116, v117, v118, v119);
  sub_10009DEC0();
  v127 = v126;
  v129 = v128 & 1;
  objc_opt_self(NSBundle);
  sub_1000D55D4(v119, v121, v129);
  swift_bridgeObjectRetain(v127);
  sub_100252A68((uint64_t)&v183, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100252A38);
  v131 = (objc_class *)sub_10009DD7C(v130, "mainBundle");
  sub_1000989C4();
  v132.super.isa = v131;
  v136 = sub_1000BA340(0xD000000000000010, 0x80000001009F6B70, 0, 0, v132, v133, v134, v135);
  v138 = v137;

  sub_100252A68((uint64_t)&v183, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100252AA0);
  sub_1000D31B4(v119, v121, v129);
  swift_bridgeObjectRelease(v127);
  sub_100021A14((uint64_t)v182, &qword_100BCE770);
  v139 = (int *)sub_1000B3B70();
  v140 = v181;
  v141 = v181 + v139[6];
  v142 = sub_100089094();
  sub_10009D34C(v141, v143, v144, v142);
  v145 = v140 + v139[7];
  *(_QWORD *)v145 = v119;
  *(_QWORD *)(v145 + 8) = v121;
  *(_QWORD *)(v145 + 16) = v129;
  *(_QWORD *)(v145 + 24) = v127;
  v146 = v179;
  *(_OWORD *)(v145 + 32) = v180;
  *(_OWORD *)(v145 + 48) = v146;
  *(_OWORD *)(v145 + 64) = v178;
  *(_QWORD *)(v145 + 80) = v177;
  *(_BYTE *)(v145 + 88) = v122;
  *(_BYTE *)(v145 + 89) = HIBYTE(v122) & 1;
  v147 = sub_1000D0C4C();
  swift_storeEnumTagMultiPayload(v145, v147, 5);
  sub_1000C20AC(v140 + v139[8]);
  *(_OWORD *)v140 = xmmword_10097EFD0;
  *(_BYTE *)(v140 + 16) = 2;
  *(_QWORD *)(v140 + 24) = v136;
  *(_QWORD *)(v140 + 32) = v138;
  *(_BYTE *)(v140 + v139[9]) = 0;
  *(_BYTE *)(v140 + v139[10]) = 0;
  v124 = v140;
  v125 = 0;
  v123 = (uint64_t)v139;
LABEL_47:
  _s7Weather24LocationCompositionStateOwst_0(v124, v125, 1, v123);
}

uint64_t sub_100250180(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConditionDetailInput.Input(0);
  return static Date.== infix(_:_:)(a1, a2 + *(int *)(v4 + 40)) & 1;
}

uint64_t sub_1002501CC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(char *, uint64_t);
  uint64_t result;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  BOOL v63;
  BOOL v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  NSBundle v87;
  Swift::String v88;
  Swift::String v89;
  Swift::String v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, char *, uint64_t);
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  void (*v107)(char *, char *, uint64_t);
  char *v108;
  void (*v109)(uint64_t, uint64_t, __n128);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int16 v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  Swift::String v121;
  Swift::String v122;
  Swift::String v123;
  id v124;
  uint64_t v125;
  char *v126;
  __int16 v127;
  void (*v128)(char *, uint64_t);
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  id v138;
  Swift::String v139;
  Swift::String v140;
  Swift::String v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  id v153;
  Swift::String v154;
  Swift::String v155;
  Swift::String v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  void (*v164)(char *, uint64_t);
  uint64_t v165;
  __int128 v166;
  uint64_t (*v167)(char *, uint64_t);
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  char *v189;
  char *v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t object;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t countAndFlagsBits;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  __int128 v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  __int128 v213;
  uint64_t v214;
  unsigned __int8 v215;
  Swift::String v216;
  Swift::String v217;
  Swift::String v218;
  Swift::String v219;

  v196 = a8;
  v186 = a7;
  v193 = a6;
  v195 = a5;
  *(_QWORD *)&v206 = a4;
  v187 = a3;
  object = a2;
  v207 = a9;
  v202 = type metadata accessor for Date(0);
  v205 = *(_QWORD **)(v202 - 8);
  v10 = __chkstk_darwin(v202);
  v199 = (char *)&v168 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  countAndFlagsBits = (uint64_t)&v168 - v12;
  v13 = sub_1000BA294(qword_100BC4E80);
  __chkstk_darwin(v13);
  v181 = (char *)&v168 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
  __chkstk_darwin(v184);
  v180 = (char *)&v168 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = sub_1000BA294(&qword_100BC4E68);
  v185 = *(_QWORD *)(v182 - 8);
  v16 = __chkstk_darwin(v182);
  v179 = (char *)&v168 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v178 = (char *)&v168 - v19;
  __chkstk_darwin(v18);
  v192 = (char *)&v168 - v20;
  v21 = type metadata accessor for TemperatureScaleConfiguration.Gradient(0);
  __chkstk_darwin(v21);
  v175 = (char *)&v168 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = type metadata accessor for TemperatureScaleConfiguration(0);
  v172 = *(_QWORD *)(v173 - 8);
  __chkstk_darwin(v173);
  v171 = (char *)&v168 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = type metadata accessor for AppConfiguration(0);
  v169 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v25 = (char *)&v168 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_1000BA294(&qword_100BCB720);
  v27 = __chkstk_darwin(v26);
  v177 = (uint64_t)&v168 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v174 = (uint64_t)&v168 - v30;
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v168 - v32;
  __chkstk_darwin(v31);
  v35 = (char *)&v168 - v34;
  v200 = type metadata accessor for ExtremaResult(0);
  v191 = *(_QWORD *)(v200 - 8);
  v36 = __chkstk_darwin(v200);
  v176 = (char *)&v168 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __chkstk_darwin(v36);
  v183 = (char *)&v168 - v39;
  v40 = __chkstk_darwin(v38);
  v168 = (char *)&v168 - v41;
  v42 = __chkstk_darwin(v40);
  v188 = (char *)&v168 - v43;
  v44 = __chkstk_darwin(v42);
  v189 = (char *)&v168 - v45;
  __chkstk_darwin(v44);
  v190 = (char *)&v168 - v46;
  v47 = type metadata accessor for DetailCondition(0);
  v48 = *(_QWORD *)(v47 - 8);
  v49 = __chkstk_darwin(v47);
  v51 = (char *)&v168 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v49);
  v53 = (char *)&v168 - v52;
  v54 = type metadata accessor for ConditionDetailInput.Input(0);
  v55 = a1;
  v56 = a1 + *(int *)(v54 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v53, v56, v47);
  v203 = v48;
  v57 = *(uint64_t (**)(char *, uint64_t))(v48 + 88);
  v198 = v53;
  v204 = v47;
  result = v57(v53, v47);
  if ((_DWORD)result == enum case for DetailCondition.conditions(_:))
  {
    sub_100037768(v206, (uint64_t)v35, &qword_100BCB720);
    v59 = v200;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v35, 1, v200) == 1)
    {
      v33 = v35;
    }
    else
    {
      v95 = v191;
      v96 = *(void (**)(char *, char *, uint64_t))(v191 + 32);
      v97 = v190;
      v96(v190, v35, v59);
      sub_100037768(v193, (uint64_t)v33, &qword_100BCB720);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v33, 1, v59) != 1)
      {
        v96(v189, v33, v59);
        v98 = v194[70];
        v99 = v95;
        v100 = v194[71];
        sub_1000DB418(v194 + 67, v98);
        v101 = dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v98, v100);
        v102 = v171;
        AppConfiguration.temperatureScale.getter(v101);
        v103 = (*(uint64_t (**)(char *, uint64_t))(v169 + 8))(v25, v170);
        v104 = (uint64_t)v175;
        TemperatureScaleConfiguration.gradient.getter(v103);
        (*(void (**)(char *, uint64_t))(v172 + 8))(v102, v173);
        v205 = sub_1000ADC80(v104);
        CurrentWeather.temperature.getter(v205);
        v105 = v174;
        sub_100037768(v195, v174, &qword_100BCB720);
        v106 = v97;
        v107 = *(void (**)(char *, char *, uint64_t))(v99 + 16);
        v108 = v168;
        v107(v168, v106, v59);
        if (_s7Weather24LocationCompositionStateOwet_0(v105, 1, v59) == 1)
        {
          v96(v188, v108, v59);
          sub_100021A14(v105, &qword_100BCB720);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v99 + 8))(v108, v59);
          v96(v188, (char *)v105, v59);
        }
        v129 = v183;
        v130 = v177;
        v131 = v176;
        sub_100037768(v186, v177, &qword_100BCB720);
        v107(v131, v189, v59);
        if (_s7Weather24LocationCompositionStateOwet_0(v130, 1, v59) == 1)
        {
          v96(v129, v131, v59);
          sub_100021A14(v130, &qword_100BCB720);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v99 + 8))(v131, v59);
          v96(v129, (char *)v130, v59);
        }
        v132 = sub_1000BA294(&qword_100BCE790);
        *(_QWORD *)&v206 = type metadata accessor for ComparisonCapsuleViewModel.Row(0);
        v133 = *(_QWORD *)(v206 - 8);
        countAndFlagsBits = *(_QWORD *)(v133 + 72);
        v134 = *(unsigned __int8 *)(v133 + 80);
        v135 = (v134 + 32) & ~v134;
        v136 = swift_allocObject(v132, v135 + 2 * countAndFlagsBits, v134 | 7);
        v202 = v136;
        *(_OWORD *)(v136 + 16) = xmmword_10097DA20;
        v137 = v136 + v135;
        v199 = (char *)objc_opt_self(NSBundle);
        v138 = objc_msgSend(v199, "mainBundle");
        v218._countAndFlagsBits = 0xD000000000000031;
        v218._object = (void *)0x80000001009F6BE0;
        v139._countAndFlagsBits = 0x7961646F54;
        v139._object = (void *)0xE500000000000000;
        v140._countAndFlagsBits = 0;
        v140._object = (void *)0xE000000000000000;
        v141 = NSLocalizedString(_:tableName:bundle:value:comment:)(v139, (Swift::String_optional)0, (NSBundle)v138, v140, v218);
        object = (unint64_t)v141._object;

        ExtremaResult.minValue.getter(v142);
        v143 = ConditionUnits.temperature.getter();
        v144 = sub_1000A0794(0, (unint64_t *)&qword_100BC5658, NSUnitTemperature_ptr);
        v145 = Measurement.init(value:unit:)(v143, v144);
        ExtremaResult.maxValue.getter(v145);
        v146 = ConditionUnits.temperature.getter();
        Measurement.init(value:unit:)(v146, v144);
        v147 = (uint64_t)v181;
        v148 = v182;
        (*(void (**)(char *, char *, uint64_t))(v185 + 16))(v181, v192, v182);
        _s7Weather24LocationCompositionStateOwst_0(v147, 0, 1, v148);
        v149 = (uint64_t)v180;
        sub_1005B035C();
        swift_storeEnumTagMultiPayload(v149, v184, 0);
        v150 = object;
        *(_QWORD *)v137 = v141._countAndFlagsBits;
        *(_QWORD *)(v137 + 8) = v150;
        *(_OWORD *)(v137 + 16) = 0u;
        *(_OWORD *)(v137 + 32) = 0u;
        v151 = v206;
        sub_10007802C(v149, v137 + *(int *)(v206 + 20), type metadata accessor for ComparisonCapsuleViewModel.Row.Body);
        *(_BYTE *)(v137 + *(int *)(v151 + 24)) = 0;
        v152 = v137 + countAndFlagsBits;
        v153 = objc_msgSend(v199, "mainBundle");
        v219._object = (void *)0x80000001009F6C20;
        v154._countAndFlagsBits = 0x6164726574736559;
        v154._object = (void *)0xE900000000000079;
        v155._countAndFlagsBits = 0;
        v155._object = (void *)0xE000000000000000;
        v219._countAndFlagsBits = 0xD00000000000002BLL;
        v156 = NSLocalizedString(_:tableName:bundle:value:comment:)(v154, (Swift::String_optional)0, (NSBundle)v153, v155, v219);
        countAndFlagsBits = v156._countAndFlagsBits;
        v199 = (char *)v156._object;

        v157 = v183;
        ExtremaResult.minValue.getter(v158);
        v159 = ConditionUnits.temperature.getter();
        v160 = Measurement.init(value:unit:)(v159, v144);
        ExtremaResult.maxValue.getter(v160);
        v161 = ConditionUnits.temperature.getter();
        Measurement.init(value:unit:)(v161, v144);
        _s7Weather24LocationCompositionStateOwst_0(v147, 1, 1, v148);
        sub_1005B035C();
        swift_storeEnumTagMultiPayload(v149, v184, 0);
        v162 = v199;
        *(_QWORD *)v152 = countAndFlagsBits;
        *(_QWORD *)(v152 + 8) = v162;
        *(_OWORD *)(v152 + 16) = 0u;
        *(_OWORD *)(v152 + 32) = 0u;
        v163 = v206;
        sub_10007802C(v149, v152 + *(int *)(v206 + 20), type metadata accessor for ComparisonCapsuleViewModel.Row.Body);
        *(_BYTE *)(v152 + *(int *)(v163 + 24)) = 0;
        sub_1005B04E8(0, v202, (uint64_t)v205, &v208);
        v164 = *(void (**)(char *, uint64_t))(v191 + 8);
        v165 = v200;
        v164(v157, v200);
        v164(v188, v165);
        (*(void (**)(char *, uint64_t))(v185 + 8))(v192, v148);
        v164(v189, v165);
        v164(v190, v165);
        sub_1000787D4((uint64_t)&v208, (uint64_t)&v209, &qword_100BC4E60);
        v111 = v210;
        if (v210)
        {
          v110 = v209;
          v112 = v211;
          v113 = v212;
          v167 = *(uint64_t (**)(char *, uint64_t))(v203 + 8);
          *(_QWORD *)&v166 = v213;
          v206 = v166;
          result = v167(v198, v204);
          v115 = v206;
          v114 = 0;
          v116 = 0;
        }
        else
        {
          result = (*(uint64_t (**)(char *, uint64_t))(v203 + 8))(v198, v204);
          v110 = 0;
          v112 = 0;
          v113 = 0;
          v114 = 0;
          v116 = -256;
          v115 = 0uLL;
        }
        goto LABEL_33;
      }
      (*(void (**)(char *, uint64_t))(v95 + 8))(v97, v59);
    }
    sub_100021A14((uint64_t)v33, &qword_100BCB720);
    result = (*(uint64_t (**)(char *, uint64_t))(v203 + 8))(v198, v204);
LABEL_32:
    v110 = 0;
    v111 = 0;
    v112 = 0;
    v113 = 0;
    v114 = 0;
    v115 = 0uLL;
    v116 = -256;
LABEL_33:
    v117 = v207;
    *v207 = v110;
    v117[1] = v111;
    v117[2] = v112;
    v117[3] = v113;
    *((_OWORD *)v117 + 2) = v115;
    v117[6] = v114;
    *((_WORD *)v117 + 28) = v116;
    return result;
  }
  v60 = v202;
  v61 = countAndFlagsBits;
  v62 = object;
  if ((_DWORD)result == enum case for DetailCondition.humidity(_:))
    goto LABEL_17;
  if ((_DWORD)result == enum case for DetailCondition.pressure(_:))
    goto LABEL_32;
  v63 = (_DWORD)result == enum case for DetailCondition.precipitationTotal(_:)
     || (_DWORD)result == enum case for DetailCondition.uvIndex(_:);
  v64 = v63 || (_DWORD)result == enum case for DetailCondition.visibility(_:);
  if (v64 || (_DWORD)result == enum case for DetailCondition.wind(_:))
  {
LABEL_17:
    if ((object & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v66 = *(_QWORD *)(v55 + *(int *)(v54 + 28));
      if (*(_QWORD *)(v66 + 16) > object)
      {
        v67 = *(_QWORD *)(type metadata accessor for ConditionDetailChartInputs(0) - 8);
        v68 = v66 + ((*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80));
        v69 = *(_QWORD *)(v67 + 72);
        v70 = v68 + v69 * v62;
        v71 = (void (*)(uint64_t, uint64_t, uint64_t))v205[2];
        v71(v61, v70, v60);
        if ((v187 & 0x8000000000000000) == 0)
        {
          if (*(_QWORD *)(v66 + 16) > v187)
          {
            v72 = v68 + v69 * v187;
            v73 = (uint64_t)v199;
            v71((uint64_t)v199, v72, v60);
            v74 = v196;
            v75 = sub_1002517BC(v55, v61, v206, v195, v196);
            if (v76)
            {
              v79 = v75;
              v80 = v76;
              *(_QWORD *)&v206 = v77;
              v81 = sub_1002517BC(v55, v73, v193, v186, v74);
              if (v82)
              {
                v196 = v79;
                object = v83;
                v198 = v82;
                v200 = v81;
                v84 = sub_1000BA294(&qword_100BCE788);
                v85 = swift_allocObject(v84, 144, 7);
                *(_OWORD *)(v85 + 16) = xmmword_10097DA20;
                v86 = (void *)objc_opt_self(NSBundle);
                v87.super.isa = (Class)objc_msgSend(v86, "mainBundle");
                v216._countAndFlagsBits = 0xD000000000000031;
                v216._object = (void *)0x80000001009F6BE0;
                v88._countAndFlagsBits = 0x7961646F54;
                v88._object = (void *)0xE500000000000000;
                v89._countAndFlagsBits = 0;
                v89._object = (void *)0xE000000000000000;
                v90 = NSLocalizedString(_:tableName:bundle:value:comment:)(v88, (Swift::String_optional)0, v87, v89, v216);

                v91 = v203;
                v92 = v204;
                (*(void (**)(char *, _QWORD, uint64_t))(v203 + 104))(v51, enum case for DetailCondition.precipitationTotal(_:), v204);
                LOBYTE(v87.super.isa) = static DetailCondition.== infix(_:_:)(v56);
                v93 = (*(uint64_t (**)(char *, uint64_t))(v91 + 8))(v51, v92);
                if (((uint64_t)v87.super.isa & 1) != 0)
                  v94 = static Color.teal.getter(v93);
                else
                  v94 = static Color.white.getter(v93);
                v118 = v202;
                v119 = countAndFlagsBits;
                *(Swift::String *)(v85 + 32) = v90;
                *(_QWORD *)(v85 + 48) = v196;
                *(_QWORD *)(v85 + 56) = v80;
                *(_QWORD *)(v85 + 64) = v206;
                *(_QWORD *)(v85 + 72) = v94;
                *(_BYTE *)(v85 + 80) = 1;
                v120 = objc_msgSend(v86, "mainBundle");
                v217._object = (void *)0x80000001009F6C20;
                v121._countAndFlagsBits = 0x6164726574736559;
                v121._object = (void *)0xE900000000000079;
                v122._countAndFlagsBits = 0;
                v122._object = (void *)0xE000000000000000;
                v217._countAndFlagsBits = 0xD00000000000002BLL;
                v123 = NSLocalizedString(_:tableName:bundle:value:comment:)(v121, (Swift::String_optional)0, (NSBundle)v120, v122, v217);

                v124 = objc_msgSend((id)objc_opt_self(UIColor), "systemFillColor");
                v125 = Color.init(uiColor:)(v124);
                *(Swift::String *)(v85 + 88) = v123;
                v126 = v198;
                *(_QWORD *)(v85 + 104) = v200;
                *(_QWORD *)(v85 + 112) = v126;
                *(_QWORD *)(v85 + 120) = object;
                *(_QWORD *)(v85 + 128) = v125;
                *(_BYTE *)(v85 + 136) = 0;
                sub_100689414(v85, (uint64_t)&v209);
                v110 = v209;
                v111 = v210;
                v112 = v211;
                v113 = v212;
                v206 = v213;
                v114 = v214;
                v127 = v215;
                v128 = (void (*)(char *, uint64_t))v205[1];
                v128(v199, v118);
                result = ((uint64_t (*)(uint64_t, uint64_t))v128)(v119, v118);
                v115 = v206;
                v116 = v127 | 0x100;
                goto LABEL_33;
              }
              v78 = swift_bridgeObjectRelease(v80);
            }
            v109 = (void (*)(uint64_t, uint64_t, __n128))v205[1];
            v109(v73, v60, v78);
            result = ((uint64_t (*)(uint64_t, uint64_t))v109)(v61, v60);
            goto LABEL_32;
          }
          goto LABEL_46;
        }
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
    }
    __break(1u);
    goto LABEL_45;
  }
LABEL_47:
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v204, v204);
  __break(1u);
  return result;
}

uint64_t sub_1002512B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v5 = type metadata accessor for DetailCondition(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  result = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v8, v5);
  if ((_DWORD)result == enum case for DetailCondition.conditions(_:))
  {
    sub_100043CA8(v2 + 296, a2);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  if ((_DWORD)result == enum case for DetailCondition.humidity(_:))
  {
    v10 = v2 + 336;
    return sub_100043CA8(v10, a2);
  }
  if ((_DWORD)result == enum case for DetailCondition.pressure(_:)
    || (_DWORD)result == enum case for DetailCondition.precipitationTotal(_:))
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else if ((_DWORD)result == enum case for DetailCondition.uvIndex(_:))
  {
    *(_QWORD *)(a2 + 24) = &type metadata for UVIndexComparisonTextBuilder;
    *(_QWORD *)(a2 + 32) = &off_100B9CB48;
  }
  else
  {
    if ((_DWORD)result == enum case for DetailCondition.visibility(_:))
    {
      v10 = v2 + 376;
      return sub_100043CA8(v10, a2);
    }
    if ((_DWORD)result == enum case for DetailCondition.wind(_:))
    {
      v10 = v2 + 416;
      return sub_100043CA8(v10, a2);
    }
    result = _diagnoseUnexpectedEnumCase<A>(type:)(v5, v5);
    __break(1u);
  }
  return result;
}

uint64_t sub_100251444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  __int128 v51;
  uint64_t v52;
  _QWORD v53[3];
  uint64_t v54;
  uint64_t v55;

  v49 = a5;
  v45 = a3;
  v46 = a4;
  v11 = type metadata accessor for TimeZone(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Date(0);
  v47 = *(_QWORD *)(v15 - 8);
  v48 = v15;
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v50 = (char *)&v43 - v19;
  v20 = (int *)type metadata accessor for PastDataComparisonTextContext(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100037768(a1, (uint64_t)&v51, &qword_100BCE770);
  if (v52)
  {
    sub_10003C800(&v51, (uint64_t)v53);
    v23 = type metadata accessor for ConditionDetailInput.Input(0);
    v44 = a7;
    v24 = v23;
    v25 = CurrentWeather.date.getter(v23);
    v43 = a6;
    Location.timeZone.getter(v25);
    Date.midnight(timeZone:)(v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v27 = v47;
    v26 = v48;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v18, v48);
    v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 16))(&v22[v20[5]], a2 + *(int *)(v24 + 48), v26);
    Location.timeZone.getter(v28);
    v29 = sub_1000BA294(&qword_100BCB130);
    v30 = Forecast.forecast.getter(v29);
    v31 = sub_1000BA294(&qword_100BCB9F8);
    v32 = Forecast.forecast.getter(v31);
    v33 = &v22[v20[9]];
    v34 = type metadata accessor for ConditionUnits(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v33, v45, v34);
    sub_100037768(v46, (uint64_t)&v22[v20[10]], &qword_100BCB720);
    sub_100037768(v49, (uint64_t)&v22[v20[11]], &qword_100BCB720);
    sub_100037768(v43, (uint64_t)&v22[v20[12]], &qword_100BCB720);
    sub_100037768(v44, (uint64_t)&v22[v20[13]], &qword_100BCB720);
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v22, v50, v26);
    *(_QWORD *)&v22[v20[7]] = v30;
    *(_QWORD *)&v22[v20[8]] = v32;
    v35 = v54;
    v36 = v55;
    sub_1000DB418(v53, v54);
    v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 8))(v22, v35, v36);
    sub_1000215BC((uint64_t)v22, type metadata accessor for PastDataComparisonTextContext);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v53);
  }
  else
  {
    sub_100021A14((uint64_t)&v51, &qword_100BCE770);
    v38 = LocalizedStringKey.init(stringLiteral:)(0, 0xE000000000000000);
    return Text.init(_:tableName:bundle:comment:)(v38, v40, v39 & 1, v41, 0, 0, 0, 0);
  }
  return v37;
}

uint64_t sub_1002517BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  Class isa;
  id v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t result;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  __n128 v89;
  char *v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t);
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(char *, uint64_t);
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  __n128 v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  _QWORD *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  double v174;
  uint64_t v175;

  v152 = a5;
  v150 = a4;
  v165 = a3;
  v173 = a2;
  v137 = type metadata accessor for WeatherFormatPlaceholder(0);
  v136 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v135 = (char *)&v123 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BC3340);
  __chkstk_darwin(v7);
  v130 = (uint64_t)&v123 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = type metadata accessor for NSUnitSpeed.WeatherFormatUsage(0);
  v128 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v127 = (char *)&v123 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = type metadata accessor for NSUnitSpeed.BaseWeatherFormatStyle(0);
  v133 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v153 = (char *)&v123 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_1000BA294(&qword_100BCB938);
  v131 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v151 = (char *)&v123 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = type metadata accessor for NumberFormatStyleConfiguration.Precision(0);
  v146 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148);
  v145 = (char *)&v123 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = type metadata accessor for Locale(0);
  __chkstk_darwin(v125);
  v141 = (char *)&v123 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = sub_1000BA294(&qword_100BCE798);
  v143 = *(_QWORD *)(v147 - 8);
  v14 = __chkstk_darwin(v147);
  v142 = (char *)&v123 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v144 = (char *)&v123 - v16;
  v17 = sub_1000BA294(&qword_100BCB720);
  v18 = __chkstk_darwin(v17);
  v139 = (uint64_t)&v123 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v138 = (uint64_t)&v123 - v21;
  __chkstk_darwin(v20);
  v155 = (uint64_t)&v123 - v22;
  v171 = type metadata accessor for ExtremaResult(0);
  v164 = *(_QWORD *)(v171 - 8);
  v23 = __chkstk_darwin(v171);
  v149 = (char *)&v123 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v124 = (char *)&v123 - v26;
  __chkstk_darwin(v25);
  v140 = (char *)&v123 - v27;
  v28 = type metadata accessor for RoundedPrecipitation(0);
  v162 = *(_QWORD *)(v28 - 8);
  v163 = v28;
  __chkstk_darwin(v28);
  v161 = (char *)&v123 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_1000BA294(&qword_100BCB0A8);
  v159 = *(_QWORD *)(v30 - 8);
  v160 = v30;
  v31 = __chkstk_darwin(v30);
  v157 = (char *)&v123 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v158 = (char *)&v123 - v33;
  v166 = sub_1000BA294(&qword_100BCB130);
  v34 = *(_QWORD *)(v166 - 8);
  __chkstk_darwin(v166);
  v36 = (char *)&v123 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_1000BA294(&qword_100BCB138);
  __chkstk_darwin(v37);
  v167 = (char *)&v123 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = type metadata accessor for DayWeather(0);
  v156 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v154 = (char *)&v123 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for Calendar(0);
  v168 = *(_QWORD *)(v40 - 8);
  v169 = v40;
  __chkstk_darwin(v40);
  v172 = (char *)&v123 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for TimeZone(0);
  v43 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v45 = (char *)&v123 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for DetailCondition(0);
  v47 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v49 = (char *)&v123 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for ConditionDetailInput.Input(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v49, a1 + *(int *)(v50 + 32), v46);
  v51 = (*(uint64_t (**)(char *, uint64_t))(v47 + 88))(v49, v46);
  if ((_DWORD)v51 == enum case for DetailCondition.conditions(_:))
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v49, v46);
    return 0;
  }
  if ((_DWORD)v51 == enum case for DetailCondition.humidity(_:))
  {
    Location.timeZone.getter(v51);
    v53 = sub_1000BA294(&qword_100BCB9F8);
    sub_10003D2DC(&qword_100BCE7A8, &qword_100BCB9F8);
    RandomAccessCollection<>.averageHumidity(from:timeZone:)(v173, v45, v53, v54);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v42);
    v55 = sub_1000A0794(0, (unint64_t *)&qword_100BC6A08, NSNumberFormatter_ptr);
    v56 = (void *)static NSNumberFormatter.percent.getter(v55);
    isa = Double._bridgeToObjectiveC()().super.super.isa;
    v58 = objc_msgSend(v56, "stringFromNumber:", isa);

    if (!v58)
      return 0;
    v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);

    return v52;
  }
  if ((_DWORD)v51 == enum case for DetailCondition.pressure(_:))
    return 0;
  if ((_DWORD)v51 == enum case for DetailCondition.precipitationTotal(_:))
  {
    Location.timeZone.getter(v51);
    v59 = v172;
    static Calendar.currentCalendar(with:)(v45);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v42);
    v60 = v166;
    v61 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 16))(v36, a1 + *(int *)(v50 + 68), v166);
    __chkstk_darwin(v61);
    v62 = v173;
    *(&v123 - 2) = (uint64_t)v59;
    *(&v123 - 1) = v62;
    v63 = (uint64_t)v167;
    sub_1000D8C28();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v60);
    v64 = v170;
    if (_s7Weather24LocationCompositionStateOwet_0(v63, 1, v170) != 1)
    {
      v82 = v156;
      v83 = v154;
      v84 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v156 + 32))(v154, v63, v64);
      v85 = v158;
      DayWeather.precipitationAmount.getter(v84);
      v86 = type metadata accessor for UnitManager(0);
      v87 = static UnitManager.standard.getter(v86);
      v88 = v161;
      Measurement<>.convertAndRoundPrecipitation(unitManager:)(v87, &protocol witness table for UnitManager);
      v89 = swift_release(v87);
      v52 = RoundedPrecipitation.formattedString.getter(v89);
      v90 = v157;
      RoundedPrecipitation.measurement.getter();
      v91 = v160;
      Measurement.value.getter(v160);
      v92 = *(void (**)(char *, uint64_t))(v159 + 8);
      v92(v90, v91);
      (*(void (**)(char *, uint64_t))(v162 + 8))(v88, v163);
      v92(v85, v91);
      (*(void (**)(char *, uint64_t))(v82 + 8))(v83, v64);
      (*(void (**)(char *, uint64_t))(v168 + 8))(v172, v169);
      return v52;
    }
    (*(void (**)(char *, uint64_t))(v168 + 8))(v59, v169);
    v65 = &qword_100BCB138;
    v66 = v63;
    goto LABEL_23;
  }
  if ((_DWORD)v51 == enum case for DetailCondition.uvIndex(_:))
  {
    v68 = v155;
    sub_100037768(v165, v155, &qword_100BCB720);
    v69 = v171;
    if (_s7Weather24LocationCompositionStateOwet_0(v68, 1, v171) != 1)
    {
      v70 = v164;
      v71 = v140;
      v72 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v164 + 32))(v140, v68, v69);
      v174 = round(ExtremaResult.maxValue.getter(v72));
      v73 = v141;
      static Locale.autoupdatingCurrent.getter(v74);
      v75 = sub_10010D1D0();
      v76 = v142;
      FloatingPointFormatStyle.init(locale:)(v73, &type metadata for Double, v75);
      v77 = v145;
      static NumberFormatStyleConfiguration.Precision.fractionLength(_:)(0);
      v78 = v144;
      v79 = v147;
      FloatingPointFormatStyle.precision(_:)(v77, v147);
      (*(void (**)(char *, uint64_t))(v146 + 8))(v77, v148);
      v80 = *(void (**)(char *, uint64_t))(v143 + 8);
      v80(v76, v79);
      sub_10003D2DC(&qword_100BCE7A0, &qword_100BCE798);
      BinaryFloatingPoint.formatted<A>(_:)(&v175, v78, &type metadata for Double, v79, v75, v81);
      v80(v78, v79);
      (*(void (**)(char *, uint64_t))(v70 + 8))(v71, v69);
      return v175;
    }
    goto LABEL_22;
  }
  v93 = v171;
  if ((_DWORD)v51 == enum case for DetailCondition.visibility(_:))
  {
    v68 = v138;
    sub_100037768(v165, v138, &qword_100BCB720);
    if (_s7Weather24LocationCompositionStateOwet_0(v68, 1, v93) != 1)
    {
      v94 = v164;
      v95 = v124;
      v96 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v164 + 32))(v124, v68, v93);
      v97 = ExtremaResult.maxValue.getter(v96);
      v98 = v126[25];
      v99 = v126[26];
      sub_1000DB418(v126 + 22, v98);
      v52 = dispatch thunk of VisibilityPlatterStringBuilderType.makeVisibilityWithUnitString(visibility:units:)(v152, v98, v99, v97);
      v100 = *(void (**)(char *, uint64_t))(v94 + 8);
      v101 = v95;
LABEL_25:
      v100(v101, v93);
      return v52;
    }
    goto LABEL_22;
  }
  if ((_DWORD)v51 == enum case for DetailCondition.wind(_:))
  {
    v68 = v139;
    sub_100037768(v150, v139, &qword_100BCB720);
    if (_s7Weather24LocationCompositionStateOwet_0(v68, 1, v93) != 1)
    {
      v102 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v164 + 32))(v149, v68, v93);
      ExtremaResult.maxValue.getter(v102);
      v103 = ConditionUnits.windGust.getter();
      v104 = sub_1000A0794(0, (unint64_t *)&qword_100BCB990, NSUnitSpeed_ptr);
      Measurement.init(value:unit:)(v103, v104);
      v105 = v128;
      v106 = v127;
      v107 = v129;
      (*(void (**)(char *, _QWORD, uint64_t))(v128 + 104))(v127, enum case for NSUnitSpeed.WeatherFormatUsage.windGust(_:), v129);
      v108 = v130;
      v109 = _s7Weather24LocationCompositionStateOwst_0(v130, 1, 1, v125);
      v110 = static Set<>.full.getter(v109);
      v111 = v153;
      static WeatherFormatStyle<>.weather(_:usage:locale:)(v110, v106, v108);
      swift_bridgeObjectRelease(v110);
      sub_100021A14(v108, &qword_100BC3340);
      (*(void (**)(char *, uint64_t))(v105 + 8))(v106, v107);
      v112 = v136;
      v113 = v135;
      v114 = v137;
      (*(void (**)(char *, _QWORD, uint64_t))(v136 + 104))(v135, enum case for WeatherFormatPlaceholder.none(_:), v137);
      v115 = type metadata accessor for UnitManager(0);
      v116 = static UnitManager.standard.getter(v115);
      sub_10000F1C8(&qword_100BCE748, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitSpeed.BaseWeatherFormatStyle);
      v118 = v117;
      v119 = v111;
      v120 = v132;
      v121 = v134;
      v52 = Measurement.formatted<A>(_:placeholder:unitManager:)(v119, v113, v116, &protocol witness table for UnitManager, v132, v134, v118);
      v122 = swift_release(v116);
      (*(void (**)(char *, uint64_t, __n128))(v112 + 8))(v113, v114, v122);
      (*(void (**)(char *, uint64_t))(v133 + 8))(v153, v121);
      (*(void (**)(char *, uint64_t))(v131 + 8))(v151, v120);
      v100 = *(void (**)(char *, uint64_t))(v164 + 8);
      v101 = v149;
      goto LABEL_25;
    }
LABEL_22:
    v65 = &qword_100BCB720;
    v66 = v68;
LABEL_23:
    sub_100021A14(v66, v65);
    return 0;
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v46, v46);
  __break(1u);
  return result;
}

uint64_t sub_100252614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v11;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  DayWeather.date.getter(v6);
  v9 = Calendar.isDate(_:inSameDayAs:)(a3, v8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v9 & 1;
}

uint64_t sub_1002526C4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, Swift::String *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  void (*v23)(char *, uint64_t);
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v6 = type metadata accessor for Beaufort.Category.Range(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Beaufort.Category(0);
  v43 = *(_QWORD *)(v10 - 8);
  v44 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000BA294(&qword_100BCB938);
  v41 = *(_QWORD *)(v13 - 8);
  v42 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000A0794(0, (unint64_t *)&qword_100BCB990, NSUnitSpeed_ptr);
  v17 = static NSUnitSpeed.beaufort.getter();
  Measurement.init(value:unit:)(v17, v16);
  v18 = Measurement<>.beaufortCategory(useExtendedScale:)(a1);
  v45 = Beaufort.Category.level.getter(v18);
  sub_100121D48();
  v19 = BinaryInteger.formatted()();
  object = v19._object;
  countAndFlagsBits = v19._countAndFlagsBits;
  v20 = Beaufort.Category.name.getter();
  v37 = v21;
  v38 = v20;
  Beaufort.Category.range(in:)(a2);
  v22 = Beaufort.Category.Range.formattedRange(forAccessibility:)(0);
  v35 = v22._object;
  v36 = v22._countAndFlagsBits;
  v23 = *(void (**)(char *, uint64_t))(v7 + 8);
  v23(v9, v6);
  Beaufort.Category.range(in:)(a2);
  v24 = Beaufort.Category.Range.formattedRange(forAccessibility:includeUnit:)(0, 1);
  v33 = v24._object;
  v34 = v24._countAndFlagsBits;
  v23(v9, v6);
  Beaufort.Category.range(in:)(a2);
  v25 = Beaufort.Category.Range.formattedRange(forAccessibility:)(1);
  v26 = ((uint64_t (*)(char *, uint64_t))v23)(v9, v6);
  v27 = Beaufort.Category.color.getter(v26);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v44);
  result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v15, v42);
  v29 = object;
  a3->_countAndFlagsBits = countAndFlagsBits;
  a3->_object = v29;
  v30 = v37;
  a3[1]._countAndFlagsBits = v38;
  a3[1]._object = v30;
  v31 = v35;
  a3[2]._countAndFlagsBits = v36;
  a3[2]._object = v31;
  v32 = v33;
  a3[3]._countAndFlagsBits = v34;
  a3[3]._object = v32;
  a3[4] = v25;
  a3[5]._countAndFlagsBits = v27;
  return result;
}

_QWORD *sub_10025293C()
{
  _QWORD *v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 2);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 7);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 12);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 17);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 22);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 27);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 32);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 37);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 42);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 47);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 52);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 57);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 62);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 67);
  return v0;
}

uint64_t sub_1002529C0()
{
  uint64_t v0;

  sub_10025293C();
  return swift_deallocClassInstance(v0, 577, 7);
}

uint64_t type metadata accessor for ConditionDetailPlatterViewModelFactory()
{
  return objc_opt_self(_TtC7Weather38ConditionDetailPlatterViewModelFactory);
}

uint64_t sub_100252A00(uint64_t a1)
{
  return sub_10024D9B8(a1);
}

uint64_t sub_100252A1C(uint64_t a1)
{
  uint64_t v1;

  return sub_100250180(a1, *(_QWORD *)(v1 + 16)) & 1;
}

double sub_100252A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double result;

  if (BYTE1(a8) != 255)
    return sub_1002386A0(a1, a2, a3, a4, a5, a6, a7, a8, BYTE1(a8) & 1);
  return result;
}

void sub_100252A68(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int16 *)(a1 + 56));
  sub_10004A298();
}

double sub_100252AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double result;

  if (BYTE1(a8) != 255)
    return sub_1002387C0(a1, a2, a3, a4, a5, a6, a7, a8, BYTE1(a8) & 1);
  return result;
}

uint64_t sub_100252AD0(uint64_t a1)
{
  uint64_t v1;

  return sub_100252614(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

uint64_t sub_100252AEC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_QWORD *sub_100252AFC()
{
  uint64_t v0;

  return sub_1000DB418((_QWORD *)(*(_QWORD *)(v0 - 352) + 216), *(_QWORD *)(*(_QWORD *)(v0 - 352) + 240));
}

uint64_t sub_100252B24()
{
  uint64_t v0;

  return swift_allocObject(v0, 17, 7);
}

void sub_100252B34(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  sub_100080C0C(a1, v1, v2);
}

uint64_t sub_100252B40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return static String.localizedStringWithFormat(_:_:)(a1, a2, v2);
}

_QWORD *sub_100252B54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v15[2];
  _QWORD *v16;

  v3 = sub_1000BA294(&qword_100BC35F8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v15[1] = v1;
    v16 = _swiftEmptyArrayStorage;
    sub_10011ED08();
    v8 = v16;
    v9 = type metadata accessor for SavedLocation(0);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v12 = *(_QWORD *)(v10 + 72);
    do
    {
      SavedLocation.location.getter(v9);
      v16 = v8;
      v13 = v8[2];
      if (v13 >= v8[3] >> 1)
      {
        sub_10011ED08();
        v8 = v16;
      }
      v8[2] = v13 + 1;
      v9 = sub_10015A074((uint64_t)v6, (uint64_t)v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v13);
      v11 += v12;
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t sub_100252CA4(__int16 *a1, __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  __int16 v23;
  __int16 v24;
  int v25;
  char v26;
  _BOOL4 v27;
  _BOOL4 v28;
  char v29;
  char v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  void (*v41)(uint64_t, uint64_t);
  int *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  BOOL v49;
  char v50;
  char v51;
  char v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = type metadata accessor for Location(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100098728();
  v8 = v7 - v6;
  v9 = sub_1000BA294(&qword_100BCE968);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = v12 - v11;
  sub_1000BA294(&qword_100BC35F8);
  sub_1000B42B0();
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v54 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v54 - v21;
  v23 = *a1;
  v24 = *a2;
  v25 = *a2;
  if (*a1 == 2)
  {
    if (v25 != 2)
      goto LABEL_43;
  }
  else
  {
    if (v25 == 2)
    {
LABEL_43:
      v26 = 0;
      return v26 & 1;
    }
    v26 = 0;
    v27 = (v23 & 1) == 0;
    v28 = (v23 & 0x100) == 0;
    if (v27 == (v24 & 1) || ((v28 ^ ((unsigned __int16)(v24 & 0x100) >> 8)) & 1) == 0)
      return v26 & 1;
  }
  sub_10009C55C();
  if ((v29 & 1) == 0)
    goto LABEL_43;
  sub_10009C55C();
  if ((v30 & 1) == 0 || (sub_10009B650(*((unsigned __int8 *)a1 + 24), *((unsigned __int8 *)a2 + 24)) & 1) == 0)
    goto LABEL_43;
  v31 = *((_BYTE *)a1 + 25);
  LODWORD(v56) = *((unsigned __int8 *)a2 + 25);
  v55 = LocationAuthorizationState.rawValue.getter(v31);
  v57 = v32;
  v34 = LocationAuthorizationState.rawValue.getter(v56);
  v35 = v55 == v34 && v57 == v33;
  if (v35)
  {
    swift_bridgeObjectRelease_n(v57, 2);
  }
  else
  {
    v54 = v33;
    LODWORD(v56) = _stringCompareWithSmolCheck(_:_:expecting:)(v55, v57, v34, v33, 0);
    swift_bridgeObjectRelease(v57);
    swift_bridgeObjectRelease(v54);
    v26 = 0;
    if ((v56 & 1) == 0)
      return v26 & 1;
  }
  v57 = sub_1000D9BFC();
  sub_10007EBC8((uint64_t)a1 + *(int *)(v57 + 36), (uint64_t)v22, &qword_100BC35F8);
  sub_10007EBC8((uint64_t)a2 + *(int *)(v57 + 36), (uint64_t)v20, &qword_100BC35F8);
  v36 = v13 + *(int *)(v9 + 48);
  sub_10007EBC8((uint64_t)v22, v13, &qword_100BC35F8);
  v56 = v36;
  sub_10007EBC8((uint64_t)v20, v36, &qword_100BC35F8);
  sub_100098750(v13);
  if (v35)
  {
    sub_1000987A0((uint64_t)v20);
    sub_1000987A0((uint64_t)v22);
    sub_100098750(v56);
    if (v35)
    {
      sub_100021A14(v13, &qword_100BC35F8);
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  sub_10007EBC8(v13, (uint64_t)v17, &qword_100BC35F8);
  v37 = v56;
  sub_100098750(v56);
  if (v38)
  {
    sub_100021A14((uint64_t)v20, &qword_100BC35F8);
    sub_100021A14((uint64_t)v22, &qword_100BC35F8);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v17, v4);
LABEL_25:
    sub_100021A14(v13, &qword_100BCE968);
    goto LABEL_43;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8, v37, v4);
  sub_10005329C((unint64_t *)&qword_100BC35B8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Location, (uint64_t)&protocol conformance descriptor for Location);
  v40 = dispatch thunk of static Equatable.== infix(_:_:)(v17, v8, v4, v39);
  v41 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v41(v8, v4);
  sub_1000987A0((uint64_t)v20);
  sub_1000987A0((uint64_t)v22);
  v41((uint64_t)v17, v4);
  sub_1000987A0(v13);
  if ((v40 & 1) == 0)
    goto LABEL_43;
LABEL_27:
  v42 = (int *)v57;
  sub_10009C55C();
  if ((v43 & 1) == 0)
    goto LABEL_43;
  sub_1000C524C();
  if (!v35)
    goto LABEL_43;
  sub_1000C524C();
  if (!v35)
    goto LABEL_43;
  sub_1000C524C();
  if (!v35 || (sub_10009B654(*((_BYTE *)a1 + v42[14]), *((_BYTE *)a2 + v42[14])) & 1) == 0)
    goto LABEL_43;
  v44 = v42[15];
  v45 = *(_QWORD *)((char *)a1 + v44);
  v46 = *(_QWORD *)((char *)a1 + v44 + 8);
  v47 = (_QWORD *)((char *)a2 + v44);
  v48 = v47[1];
  v49 = v45 == *v47 && v46 == v48;
  if (v49 || (v50 = _stringCompareWithSmolCheck(_:_:expecting:)(v45, v46, *v47, v48, 0), v26 = 0, (v50 & 1) != 0))
  {
    sub_10009E970();
    if ((v51 & 1) == 0)
      goto LABEL_43;
    sub_10009B6B0();
    if ((v52 & 1) == 0)
      goto LABEL_43;
    v26 = *((_BYTE *)a1 + v42[16]) ^ *((_BYTE *)a2 + v42[16]) ^ 1;
  }
  return v26 & 1;
}

__n128 sub_100253130@<Q0>(__int16 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, char a10, char a11, char a12, __n128 a13, unint64_t a14, unint64_t a15, char a16)
{
  int *v20;
  __n128 *v21;
  __n128 result;

  *(_WORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_BYTE *)(a9 + 24) = a4;
  *(_BYTE *)(a9 + 25) = a5;
  v20 = (int *)sub_1000D9BFC();
  sub_10015A074(a6, a9 + v20[9]);
  *(_QWORD *)(a9 + v20[10]) = a7;
  *(_BYTE *)(a9 + v20[11]) = a8;
  *(_BYTE *)(a9 + v20[12]) = a10;
  *(_BYTE *)(a9 + v20[13]) = a11;
  *(_BYTE *)(a9 + v20[14]) = a12;
  v21 = (__n128 *)(a9 + v20[15]);
  result = a13;
  *v21 = a13;
  v21[1].n128_u64[0] = a14;
  v21[1].n128_u64[1] = a15;
  *(_BYTE *)(a9 + v20[16]) = a16;
  return result;
}

uint64_t sub_100253214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  int v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t, uint64_t);
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v97;
  __n128 v98;
  _QWORD v99[2];
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  unsigned __int8 *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;

  v109 = a2;
  v4 = *v2;
  v5 = sub_1000BA294(&qword_100BC35F8);
  v99[1] = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_1000986FC();
  v115 = v6;
  sub_10009D2A4();
  __chkstk_darwin(v7);
  v117 = (uint64_t)v99 - v8;
  sub_10009D2A4();
  __chkstk_darwin(v9);
  v112 = (uint64_t)v99 - v10;
  v11 = type metadata accessor for NotificationSubscription.Location(0);
  v12 = *(_QWORD *)(v11 - 8);
  v120 = v11;
  v121 = v12;
  __chkstk_darwin(v11);
  sub_100098728();
  v15 = v14 - v13;
  v16 = type metadata accessor for Location(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  sub_1000986FC();
  v116 = v18;
  sub_10009D2A4();
  __chkstk_darwin(v19);
  v114 = (char *)v99 - v20;
  sub_10009D2A4();
  __chkstk_darwin(v21);
  v119 = (char *)v99 - v22;
  sub_10009D2A4();
  __chkstk_darwin(v23);
  v118 = (char *)v99 - v24;
  sub_1000BA294((uint64_t *)&unk_100C0D170);
  sub_1000B42B0();
  __chkstk_darwin(v25);
  sub_1000986FC();
  v101 = v26;
  sub_10009D2A4();
  __chkstk_darwin(v27);
  v113 = (uint64_t)v99 - v28;
  v29 = type metadata accessor for ModalViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v30);
  sub_100098728();
  v33 = (unsigned __int8 *)(v32 - v31);
  sub_1001D7128(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_modalView, v32 - v31);
  if (swift_getEnumCaseMultiPayload(v33, v29) == 1)
  {
    if (v33[1])
      v34 = 256;
    else
      v34 = 0;
    v35 = v34 | *v33;
  }
  else
  {
    sub_1000215BC((uint64_t)v33, type metadata accessor for ModalViewState);
    v35 = 2;
  }
  v108 = v35;
  v36 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 8);
  v107 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData);
  v37 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 16);
  v38 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 24);
  v100 = a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations;
  sub_10007EBC8(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations, v113, (uint64_t *)&unk_100C0D170);
  v106 = v36;
  swift_bridgeObjectRetain(v36);
  v105 = v37;
  swift_bridgeObjectRetain(v37);
  v104 = v38;
  swift_bridgeObjectRetain(v38);
  swift_retain();
  v103 = sub_1004E4178(v39);
  v40 = v115;
  v122 = v16;
  if ((v103 & 0xFE) == 2)
  {
    v41 = a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notificationsOptIn;
    v43 = *(unsigned __int8 *)(v41 + *(int *)(type metadata accessor for NotificationsOptInState(0) + 52));
    if (v43 != 1)
    {
      if (qword_100BC1F10 != -1)
        swift_once(&qword_100BC1F10, sub_10015B0AC);
      v44 = qword_100CAE5C0;
      sub_10005329C(&qword_100BCE970, v42, (uint64_t (*)(uint64_t))type metadata accessor for NotificationSettingsInputFactory, (uint64_t)&unk_10098B8A0);
      Configurable.setting<A>(_:)(v44, v4, v45);
      v43 = v123 ^ 1;
    }
    v102 = v43;
    v16 = v122;
  }
  else
  {
    v102 = 0;
  }
  v111 = a1;
  v46 = (unsigned __int8 *)(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notifications);
  v47 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notifications + 8);
  v48 = *(_QWORD *)(v47 + 16);
  v49 = (char *)_swiftEmptyArrayStorage;
  v110 = v46;
  if (v48)
  {
    v123 = (char *)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v47);
    sub_1000DD828();
    sub_1000C259C();
    v51 = *(_QWORD *)(v50 + 72);
    v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16);
    do
    {
      v53 = v120;
      v52(v15, v40, v120);
      sub_1000D9490();
      (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v15, v53);
      v49 = v123;
      if ((swift_isUniquelyReferenced_nonNull_native(v123) & 1) == 0)
      {
        sub_1000CC9C0();
        v49 = v123;
      }
      v54 = *((_QWORD *)v49 + 2);
      v55 = v118;
      if (v54 >= *((_QWORD *)v49 + 3) >> 1)
      {
        sub_1000BBE18();
        v55 = v118;
        v49 = v123;
      }
      *((_QWORD *)v49 + 2) = v54 + 1;
      sub_100098AC8();
      v57 = &v49[v56 + *(_QWORD *)(v17 + 72) * v54];
      v16 = v122;
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v57, v55, v122);
      v123 = v49;
      v40 += v51;
      --v48;
    }
    while (v48);
    sub_1000D1650();
    v40 = v115;
    v46 = v110;
  }
  v58 = *((_QWORD *)v46 + 2);
  v59 = *(_QWORD *)(v58 + 16);
  v60 = (char *)_swiftEmptyArrayStorage;
  if (v59)
  {
    v123 = (char *)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v58);
    sub_1000DD828();
    sub_1000C259C();
    v118 = *(char **)(v61 + 72);
    v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16);
    do
    {
      v63 = v120;
      v62(v15, v40, v120);
      sub_1000D9490();
      (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v15, v63);
      v60 = v123;
      if ((swift_isUniquelyReferenced_nonNull_native(v123) & 1) == 0)
      {
        sub_1000CC9C0();
        v60 = v123;
      }
      v64 = *((_QWORD *)v60 + 2);
      v65 = v119;
      if (v64 >= *((_QWORD *)v60 + 3) >> 1)
      {
        sub_1000BBE18();
        v65 = v119;
        v60 = v123;
      }
      *((_QWORD *)v60 + 2) = v64 + 1;
      sub_100098AC8();
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(&v60[v66 + *(_QWORD *)(v17 + 72) * v64], v65, v122);
      v123 = v60;
      v40 += (uint64_t)v118;
      --v59;
    }
    while (v59);
    sub_1000D1650();
    v40 = v115;
    v16 = v122;
    v46 = v110;
  }
  LODWORD(v120) = *v46;
  v67 = v111;
  v68 = (char *)(v111 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment);
  swift_beginAccess(v111 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment, &v123, 0, 0);
  v118 = v68;
  LODWORD(v119) = v68[1];
  v69 = v101;
  sub_10007EBC8(v113, v101, (uint64_t *)&unk_100C0D170);
  v70 = type metadata accessor for CurrentLocation(0);
  v71 = _s7Weather24LocationCompositionStateOwet_0(v69, 1, v70);
  if ((_DWORD)v71 == 1)
  {
    sub_100021A14(v69, (uint64_t *)&unk_100C0D170);
    _s7Weather24LocationCompositionStateOwst_0(v112, 1, 1, v16);
  }
  else
  {
    CurrentLocation.location.getter(v71);
    sub_1000215BC(v69, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
  }
  v72 = *(_QWORD *)(v100 + *(int *)(type metadata accessor for LocationsState(0) + 20));
  swift_bridgeObjectRetain(v72);
  v74 = (unsigned __int8 *)sub_100252B54(v73);
  swift_bridgeObjectRelease(v72);
  v75 = *((_QWORD *)v74 + 2);
  if (v75)
  {
    v121 = v17;
    sub_100098AC8();
    v77 = (uint64_t)&v74[v76];
    v79 = *(_QWORD *)(v78 + 72);
    v110 = v74;
    swift_bridgeObjectRetain(v74);
    v80 = _swiftEmptyArrayStorage;
    v81 = v114;
    do
    {
      v82 = v117;
      sub_10007EBC8(v77, v117, &qword_100BC35F8);
      sub_10015A074(v82, v40);
      v83 = v122;
      if (_s7Weather24LocationCompositionStateOwet_0(v40, 1, v122) == 1)
      {
        sub_100021A14(v40, &qword_100BC35F8);
      }
      else
      {
        v84 = *(void (**)(char *, uint64_t, uint64_t))(v121 + 32);
        v84(v81, v40, v83);
        v84(v116, (uint64_t)v81, v83);
        if ((swift_isUniquelyReferenced_nonNull_native(v80) & 1) == 0)
        {
          sub_1000DF4B8();
          v80 = v88;
        }
        v85 = v80[2];
        if (v85 >= v80[3] >> 1)
        {
          sub_1000DF4B8();
          v80 = v89;
        }
        v80[2] = v85 + 1;
        sub_100098AC8();
        ((void (*)(char *, char *))v84)((char *)v80 + v86 + *(_QWORD *)(v87 + 72) * v85, v116);
        v40 = v115;
      }
      v77 += v79;
      --v75;
    }
    while (v75);
    swift_bridgeObjectRelease_n(v110, 2);
    v67 = v111;
  }
  else
  {
    swift_bridgeObjectRelease(v74);
    v80 = _swiftEmptyArrayStorage;
  }
  sub_100021A14(v113, (uint64_t *)&unk_100C0D170);
  v90 = v67 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notificationsOptIn;
  v91 = type metadata accessor for NotificationsOptInState(0);
  v92 = *(_BYTE *)(v90 + *(int *)(v91 + 56));
  LOBYTE(v90) = *(_BYTE *)(v90 + *(int *)(v91 + 60));
  v93 = type metadata accessor for EnvironmentState(0);
  v98.n128_u64[1] = v106;
  v98.n128_u64[0] = v107;
  v97 = v90;
  v94 = v109;
  sub_100253130(v108, (uint64_t)v49, (uint64_t)v60, v120, (char)v119, v112, (uint64_t)v80, v92, v109, v97, v102 & 1, v103, v98, v105, v104, v118[*(int *)(v93 + 56)]);
  v95 = sub_1000D9BFC();
  return _s7Weather24LocationCompositionStateOwst_0(v94, 0, 1, v95);
}

uint64_t type metadata accessor for NotificationSettingsInputFactory()
{
  return objc_opt_self(_TtC7Weather32NotificationSettingsInputFactory);
}

_QWORD *sub_100253AEC(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    v7 = a2[1];
    v8 = a2[2];
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v8;
    *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
    v9 = a3[9];
    v10 = (void *)(a1 + v9);
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Location(0);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12))
    {
      v13 = sub_1000BA294(&qword_100BC35F8);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
    }
    v15 = a3[10];
    v16 = a3[11];
    v17 = *(uint64_t *)((char *)a2 + v15);
    *(_QWORD *)((char *)v4 + v15) = v17;
    *((_BYTE *)v4 + v16) = *((_BYTE *)a2 + v16);
    v18 = a3[13];
    *((_BYTE *)v4 + a3[12]) = *((_BYTE *)a2 + a3[12]);
    *((_BYTE *)v4 + v18) = *((_BYTE *)a2 + v18);
    v19 = a3[15];
    *((_BYTE *)v4 + a3[14]) = *((_BYTE *)a2 + a3[14]);
    v20 = (_QWORD *)((char *)v4 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = v21[2];
    v24 = v21[3];
    v20[2] = v23;
    v20[3] = v24;
    *((_BYTE *)v4 + a3[16]) = *((_BYTE *)a2 + a3[16]);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
  }
  return v4;
}

double sub_100253C70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for Location(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_100253D0C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  v8 = a3[9];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for Location(0);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v11))
  {
    v12 = sub_1000BA294(&qword_100BC35F8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v11);
  }
  v13 = a3[10];
  v14 = a3[11];
  v15 = *(_QWORD *)(a2 + v13);
  *(_QWORD *)(a1 + v13) = v15;
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  v16 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
  v17 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = v19[2];
  v22 = v19[3];
  v18[2] = v21;
  v18[3] = v22;
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  return a1;
}

uint64_t sub_100253E64(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  v8 = a3[9];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for Location(0);
  v12 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v11);
  v13 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v11);
  if (!v12)
  {
    v14 = *(_QWORD *)(v11 - 8);
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(v14 + 24))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v15 = sub_1000BA294(&qword_100BC35F8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v11);
LABEL_7:
  v16 = a3[10];
  v17 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(a1 + v16) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  v18 = a3[15];
  v19 = (_QWORD *)(a1 + v18);
  v20 = a2 + v18;
  *v19 = *(_QWORD *)(a2 + v18);
  v21 = *(_QWORD *)(a2 + v18 + 8);
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(v20 + 16);
  v19[2] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease();
  v23 = *(_QWORD *)(v20 + 24);
  v19[3] = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  return a1;
}

uint64_t sub_100254064(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  v6 = a3[9];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Location(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9))
  {
    v10 = sub_1000BA294(&qword_100BC35F8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v9);
  }
  v11 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v12 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  v13 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  v14 = (_OWORD *)(a1 + v13);
  v15 = (_OWORD *)(a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  return a1;
}

uint64_t sub_100254180(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  v6 = a3[9];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Location(0);
  v10 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v9);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9);
  if (!v10)
  {
    v12 = *(_QWORD *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(v12 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    v13 = sub_1000BA294(&qword_100BC35F8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v9);
LABEL_7:
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  swift_bridgeObjectRelease();
  v14 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  v15 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v16 = a3[15];
  v17 = (_QWORD *)(a1 + v16);
  v18 = a2 + v16;
  v19 = *(_QWORD *)(a2 + v16 + 8);
  *v17 = *(_QWORD *)(a2 + v16);
  v17[1] = v19;
  swift_bridgeObjectRelease();
  v17[2] = *(_QWORD *)(v18 + 16);
  swift_bridgeObjectRelease();
  v17[3] = *(_QWORD *)(v18 + 24);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  return a1;
}

uint64_t sub_100254338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100254344);
}

uint64_t sub_100254344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000BA294(&qword_100BC35F8);
    return _s7Weather24LocationCompositionStateOwet_0(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t sub_1002543BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002543C8);
}

uint64_t sub_1002543C8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1000BA294(&qword_100BC35F8);
    return _s7Weather24LocationCompositionStateOwst_0(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for NotificationSettingsInput(uint64_t a1)
{
  uint64_t result;

  result = qword_100BCE8F8;
  if (!qword_100BCE8F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NotificationSettingsInput);
  return result;
}

void sub_100254470(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[13];

  v4[0] = &unk_10098B800;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = &unk_10098B818;
  v4[4] = &unk_10098B830;
  sub_10015A0BC(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(v2 - 8) + 64;
    v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[7] = &unk_10098B848;
    v4[8] = &unk_10098B848;
    v4[9] = &unk_10098B848;
    v4[10] = &unk_10098B818;
    v4[11] = &unk_10098B860;
    v4[12] = &unk_10098B848;
    swift_initStructMetadata(a1, 256, 13, v4, a1 + 16);
  }
}

_QWORD *sub_10025452C(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t, __n128);
  __n128 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL(0);
    swift_bridgeObjectRetain(v7);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v11))
    {
      v12 = sub_1000BA294(&qword_100BD4280);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v11);
    }
    v14 = a3[6];
    v15 = a3[7];
    v16 = (_QWORD *)((char *)v4 + v14);
    v17 = (_QWORD *)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = (char *)v4 + v15;
    v20 = (char *)a2 + v15;
    v21 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
    v22 = swift_bridgeObjectRetain(v18);
    v21(v19, v20, v11, v22);
    v23 = a3[8];
    v24 = (char *)v4 + v23;
    v25 = (char *)a2 + v23;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2 + v23, 1, v11))
    {
      v26 = sub_1000BA294(&qword_100BD4280);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      ((void (*)(char *, char *, uint64_t))v21)(v24, v25, v11);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v24, 0, 1, v11);
    }
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  return v4;
}

uint64_t sub_1002546D0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t result;
  uint64_t (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = type metadata accessor for URL(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = swift_bridgeObjectRelease();
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  ((void (*)(uint64_t, uint64_t, __n128))v9)(a1 + a2[7], v5, v6);
  v7 = a1 + a2[8];
  result = _s7Weather24LocationCompositionStateOwet_0(v7, 1, v5);
  if (!(_DWORD)result)
    return v9(v7, v5);
  return result;
}

_QWORD *sub_1002547AC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  swift_bridgeObjectRetain(v6);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10))
  {
    v11 = sub_1000BA294(&qword_100BD4280);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = (_QWORD *)((char *)a1 + v12);
  v15 = (_QWORD *)((char *)a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = (char *)a1 + v13;
  v18 = (char *)a2 + v13;
  v19 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v10 - 8) + 16);
  v20 = swift_bridgeObjectRetain(v16);
  v19(v17, v18, v10, v20);
  v21 = a3[8];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2 + v21, 1, v10))
  {
    v24 = sub_1000BA294(&qword_100BD4280);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    ((void (*)(char *, char *, uint64_t))v19)(v22, v23, v10);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v22, 0, 1, v10);
  }
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

char *sub_100254924(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t, __n128);
  uint64_t v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  uint64_t v27;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for URL(0);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v10);
  v12 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v13 = *(_QWORD *)(v10 - 8);
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
LABEL_6:
    v14 = sub_1000BA294(&qword_100BD4280);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v8, v9, v10);
LABEL_7:
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v18 = *((_QWORD *)v17 + 1);
  *((_QWORD *)v16 + 1) = v18;
  swift_bridgeObjectRetain(v18);
  v19 = swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(v10 - 8);
  v21 = *(void (**)(char *, char *, uint64_t, __n128))(v20 + 24);
  v21(&a1[a3[7]], &a2[a3[7]], v10, v19);
  v22 = a3[8];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)&a1[v22], 1, v10);
  v26 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v24, 1, v10);
  if (!v25)
  {
    if (!v26)
    {
      ((void (*)(char *, char *, uint64_t))v21)(v23, v24, v10);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v10);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    v27 = sub_1000BA294(&qword_100BD4280);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v23, v24, v10);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v23, 0, 1, v10);
LABEL_13:
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

char *sub_100254B50(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for URL(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9))
  {
    v10 = sub_1000BA294(&qword_100BD4280);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  }
  else
  {
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
    v11(v7, v8, v9);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v9);
  }
  v12 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  v11(&a1[v12], &a2[v12], v9);
  v13 = a3[8];
  v14 = &a1[v13];
  v15 = &a2[v13];
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&a2[v13], 1, v9))
  {
    v16 = sub_1000BA294(&qword_100BD4280);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v11(v14, v15, v9);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 0, 1, v9);
  }
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

char *sub_100254CAC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t, __n128);
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for URL(0);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v10);
  v12 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v13 = *(_QWORD *)(v10 - 8);
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
LABEL_6:
    v14 = sub_1000BA294(&qword_100BD4280);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
LABEL_7:
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = (uint64_t *)&a2[v15];
  v19 = *v17;
  v18 = v17[1];
  *(_QWORD *)v16 = v19;
  *((_QWORD *)v16 + 1) = v18;
  v20 = swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(v10 - 8);
  v22 = *(void (**)(char *, char *, uint64_t, __n128))(v21 + 40);
  v22(&a1[a3[7]], &a2[a3[7]], v10, v20);
  v23 = a3[8];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)&a1[v23], 1, v10);
  v27 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v25, 1, v10);
  if (!v26)
  {
    if (!v27)
    {
      ((void (*)(char *, char *, uint64_t))v22)(v24, v25, v10);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v10);
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    v28 = sub_1000BA294(&qword_100BD4280);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v24, v25, v10);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v24, 0, 1, v10);
LABEL_13:
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

uint64_t sub_100254EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100254EC4);
}

uint64_t sub_100254EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000BA294(&qword_100BD4280);
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == (_DWORD)a2)
    {
      v9 = v8;
      v10 = *(int *)(a3 + 20);
    }
    else
    {
      v9 = sub_10009896C();
      v10 = *(int *)(a3 + 28);
    }
    return _s7Weather24LocationCompositionStateOwet_0(a1 + v10, a2, v9);
  }
}

uint64_t sub_100254F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100254F68);
}

uint64_t sub_100254F68(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_1000BA294(&qword_100BD4280);
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
    {
      v9 = v8;
      v10 = *(int *)(a4 + 20);
    }
    else
    {
      v9 = sub_10009896C();
      v10 = *(int *)(a4 + 28);
    }
    return _s7Weather24LocationCompositionStateOwst_0(v5 + v10, a2, a2, v9);
  }
  return result;
}

_QWORD *sub_100254FFC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t, __n128);
  __n128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v15 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload(a2) == 1)
  {
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    v9 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
    v10 = v9[5];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for URL(0);
    swift_bridgeObjectRetain(v8);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v13))
    {
      v14 = sub_1000BA294(&qword_100BD4280);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v13);
    }
    v16 = v9[6];
    v17 = (_QWORD *)((char *)a1 + v16);
    v18 = (_QWORD *)((char *)a2 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    v20 = v9[7];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v13 - 8) + 16);
    v24 = swift_bridgeObjectRetain(v19);
    v23(v21, v22, v13, v24);
    v25 = v9[8];
    v26 = (char *)a1 + v25;
    v27 = (char *)a2 + v25;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2 + v25, 1, v13))
    {
      v28 = sub_1000BA294(&qword_100BD4280);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      ((void (*)(char *, char *, uint64_t))v23)(v26, v27, v13);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v26, 0, 1, v13);
    }
    *((_BYTE *)a1 + v9[9]) = *((_BYTE *)a2 + v9[9]);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t sub_1002551E8(uint64_t a1)
{
  uint64_t result;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);

  result = swift_getEnumCaseMultiPayload(a1);
  if ((_DWORD)result == 1)
  {
    swift_bridgeObjectRelease();
    v3 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
    v4 = a1 + v3[5];
    v5 = type metadata accessor for URL(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v4, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
    v6 = swift_bridgeObjectRelease();
    v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
    ((void (*)(uint64_t, uint64_t, __n128))v8)(a1 + v3[7], v5, v6);
    v7 = a1 + v3[8];
    result = _s7Weather24LocationCompositionStateOwet_0(v7, 1, v5);
    if (!(_DWORD)result)
      return v8(v7, v5);
  }
  return result;
}

_QWORD *sub_1002552D8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  if (swift_getEnumCaseMultiPayload(a2) == 1)
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
    v8 = v7[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL(0);
    swift_bridgeObjectRetain(v6);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v11))
    {
      v12 = sub_1000BA294(&qword_100BD4280);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v11);
    }
    v13 = v7[6];
    v14 = (_QWORD *)((char *)a1 + v13);
    v15 = (_QWORD *)((char *)a2 + v13);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    v17 = v7[7];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
    v21 = swift_bridgeObjectRetain(v16);
    v20(v18, v19, v11, v21);
    v22 = v7[8];
    v23 = (char *)a1 + v22;
    v24 = (char *)a2 + v22;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2 + v22, 1, v11))
    {
      v25 = sub_1000BA294(&qword_100BD4280);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      ((void (*)(char *, char *, uint64_t))v20)(v23, v24, v11);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v23, 0, 1, v11);
    }
    *((_BYTE *)a1 + v7[9]) = *((_BYTE *)a2 + v7[9]);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_10025549C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  if (a1 != a2)
  {
    sub_1000215BC((uint64_t)a1, type metadata accessor for NewsArticleComponentViewModel);
    if (swift_getEnumCaseMultiPayload(a2) == 1)
    {
      *a1 = *a2;
      v6 = a2[1];
      a1[1] = v6;
      v7 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
      v8 = v7[5];
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain(v6);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v11))
      {
        v12 = sub_1000BA294(&qword_100BD4280);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v11);
      }
      v13 = v7[6];
      v14 = (_QWORD *)((char *)a1 + v13);
      v15 = (_QWORD *)((char *)a2 + v13);
      *v14 = *v15;
      v16 = v15[1];
      v14[1] = v16;
      v17 = v7[7];
      v18 = (char *)a1 + v17;
      v19 = (char *)a2 + v17;
      v20 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
      v21 = swift_bridgeObjectRetain(v16);
      v20(v18, v19, v11, v21);
      v22 = v7[8];
      v23 = (char *)a1 + v22;
      v24 = (char *)a2 + v22;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2 + v22, 1, v11))
      {
        v25 = sub_1000BA294(&qword_100BD4280);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        ((void (*)(char *, char *, uint64_t))v20)(v23, v24, v11);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v23, 0, 1, v11);
      }
      *((_BYTE *)a1 + v7[9]) = *((_BYTE *)a2 + v7[9]);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

char *sub_100255688(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  if (swift_getEnumCaseMultiPayload(a2) == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v6 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
    v7 = v6[5];
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = type metadata accessor for URL(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10))
    {
      v11 = sub_1000BA294(&qword_100BD4280);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
    }
    else
    {
      v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
      v12(v8, v9, v10);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
    }
    *(_OWORD *)&a1[v6[6]] = *(_OWORD *)&a2[v6[6]];
    v12(&a1[v6[7]], &a2[v6[7]], v10);
    v13 = v6[8];
    v14 = &a1[v13];
    v15 = &a2[v13];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&a2[v13], 1, v10))
    {
      v16 = sub_1000BA294(&qword_100BD4280);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v10);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 0, 1, v10);
    }
    a1[v6[9]] = a2[v6[9]];
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_100255830(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  if (a1 != a2)
  {
    sub_1000215BC((uint64_t)a1, type metadata accessor for NewsArticleComponentViewModel);
    if (swift_getEnumCaseMultiPayload(a2) == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v6 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
      v7 = v6[5];
      v8 = &a1[v7];
      v9 = &a2[v7];
      v10 = type metadata accessor for URL(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10))
      {
        v11 = sub_1000BA294(&qword_100BD4280);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
        v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
      }
      else
      {
        v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
        v12(v8, v9, v10);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
      }
      *(_OWORD *)&a1[v6[6]] = *(_OWORD *)&a2[v6[6]];
      v12(&a1[v6[7]], &a2[v6[7]], v10);
      v13 = v6[8];
      v14 = &a1[v13];
      v15 = &a2[v13];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&a2[v13], 1, v10))
      {
        v16 = sub_1000BA294(&qword_100BD4280);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        v12(v14, v15, v10);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 0, 1, v10);
      }
      a1[v6[9]] = a2[v6[9]];
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void sub_1002559F0()
{
  sub_100086DA4(&qword_100BCEAC0, type metadata accessor for NewsArticleComponentViewModel, (uint64_t)&unk_10098B9B0);
}

void sub_100255A1C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = sub_10004A364();
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_1000C45D8();
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100098728();
  v8 = v7 - v6;
  sub_1002566C4(v1, v7 - v6);
  if (swift_getEnumCaseMultiPayload(v8) == 1)
  {
    sub_100256708(v8, v1);
    v9 = v1 + *(int *)(v3 + 28);
    v10 = sub_10009896C();
    sub_10008908C(a1, v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16));
    sub_1000215BC(v1, type metadata accessor for NewsArticleComponentContentViewModel);
    v11 = a1;
    v12 = 0;
    v13 = v10;
  }
  else
  {
    v13 = sub_10009896C();
    v11 = a1;
    v12 = 1;
  }
  _s7Weather24LocationCompositionStateOwst_0(v11, v12, 1, v13);
  sub_10004A2A0();
}

uint64_t sub_100255B0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v0 = sub_10004A364();
  sub_1000B42B0();
  __chkstk_darwin(v1);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NewsArticleComponentViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_1000C3680(v5, v9);
  v6 = 0;
  if (sub_100098ADC() == 1)
  {
    sub_1000D165C();
    v6 = *(_QWORD *)&v3[*(int *)(v0 + 24)];
    swift_bridgeObjectRetain();
    sub_100098AD4(v7, type metadata accessor for NewsArticleComponentContentViewModel);
  }
  return v6;
}

uint64_t sub_100255BC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = v0;
  type metadata accessor for NewsArticleComponentContentViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NewsArticleComponentViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002566C4(v1, (uint64_t)v7);
  v8 = 0;
  if (sub_10009F7EC((uint64_t)v7) == 1)
  {
    sub_100256708((uint64_t)v7, (uint64_t)v4);
    v8 = *v4;
    swift_bridgeObjectRetain();
    sub_100098AD4(v9, type metadata accessor for NewsArticleComponentContentViewModel);
  }
  return v8;
}

uint64_t sub_100255C9C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v23;

  type metadata accessor for NewsArticleComponentContentViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_1000C45D8();
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_10009883C();
  v9 = (_QWORD *)(v7 - v8);
  __chkstk_darwin(v10);
  v12 = (char *)&v23 - v11;
  sub_1000BA294(&qword_100BCEAD0);
  sub_1000B42B0();
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = &v16[*(int *)(v14 + 48)];
  sub_1002566C4(a1, (uint64_t)v16);
  sub_1002566C4(a2, (uint64_t)v17);
  if (sub_10009F7EC((uint64_t)v16) != 1)
  {
    sub_1002566C4((uint64_t)v16, (uint64_t)v12);
    v20 = sub_10009F7EC((uint64_t)v17);
    if ((_DWORD)v20 != 1)
    {
      v21 = *v12 ^ *v17;
      sub_100098AD4(v20, type metadata accessor for NewsArticleComponentViewModel);
      v18 = v21 ^ 1;
      return v18 & 1;
    }
LABEL_7:
    sub_100021A14((uint64_t)v16, &qword_100BCEAD0);
    v18 = 0;
    return v18 & 1;
  }
  sub_1002566C4((uint64_t)v16, (uint64_t)v9);
  if (sub_10009F7EC((uint64_t)v17) != 1)
  {
    sub_1000215BC((uint64_t)v9, type metadata accessor for NewsArticleComponentContentViewModel);
    goto LABEL_7;
  }
  sub_100256708((uint64_t)v17, (uint64_t)v2);
  v18 = sub_100255F18(v9, v2);
  sub_1000215BC((uint64_t)v2, type metadata accessor for NewsArticleComponentContentViewModel);
  sub_1000215BC((uint64_t)v9, type metadata accessor for NewsArticleComponentContentViewModel);
  sub_100098AD4(v19, type metadata accessor for NewsArticleComponentViewModel);
  return v18 & 1;
}

void sub_100255E5C(uint64_t a1)
{
  Swift::UInt8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt8 v7;
  uint64_t v8;

  type metadata accessor for NewsArticleComponentContentViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  type metadata accessor for NewsArticleComponentViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_1000C3680(v5, v8);
  if (sub_100098ADC() == 1)
  {
    sub_1000D165C();
    Hasher._combine(_:)(1uLL);
    sub_100256418(a1);
    sub_100098AD4(v6, type metadata accessor for NewsArticleComponentContentViewModel);
  }
  else
  {
    v7 = *v1;
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v7);
  }
  sub_10004A2A0();
}

uint64_t sub_100255F18(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  BOOL v51;
  char v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  void (*v63)(uint64_t, uint64_t);
  _BYTE v65[4];
  int v66;
  uint64_t v67;
  int *v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v4 = sub_10009896C();
  v72 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100098728();
  v7 = v6 - v5;
  v73 = sub_1000BA294(&qword_100BCCFF0);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_10009883C();
  v71 = v9 - v10;
  __chkstk_darwin(v11);
  v13 = &v65[-v12];
  sub_1000BA294(&qword_100BD4280);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  sub_10009883C();
  v17 = v15 - v16;
  v19 = __chkstk_darwin(v18);
  v69 = &v65[-v20];
  v21 = __chkstk_darwin(v19);
  v70 = &v65[-v22];
  v23 = __chkstk_darwin(v21);
  v25 = &v65[-v24];
  v26 = __chkstk_darwin(v23);
  v28 = &v65[-v27];
  __chkstk_darwin(v26);
  v30 = &v65[-v29];
  v31 = a1[1];
  v32 = a2[1];
  v33 = *a1 == *a2 && v31 == v32;
  if (!v33)
  {
    v34 = _stringCompareWithSmolCheck(_:_:expecting:)(*a1, v31, *a2, v32, 0);
    v35 = 0;
    if ((v34 & 1) == 0)
      return v35 & 1;
  }
  v36 = sub_10004A364();
  sub_1000BD348((uint64_t)a1 + *(int *)(v36 + 20));
  v68 = (int *)v36;
  sub_100038D20((uint64_t)a2 + *(int *)(v36 + 20), (uint64_t)v28);
  v37 = (uint64_t)&v13[*(int *)(v73 + 48)];
  sub_100038D20((uint64_t)v30, (uint64_t)v13);
  sub_100038D20((uint64_t)v28, v37);
  sub_100098750((uint64_t)v13);
  if (v33)
  {
    sub_100021A14((uint64_t)v28, &qword_100BD4280);
    sub_100021A14((uint64_t)v30, &qword_100BD4280);
    sub_100098750(v37);
    if (v33)
    {
      sub_100021A14((uint64_t)v13, &qword_100BD4280);
      goto LABEL_17;
    }
LABEL_14:
    v39 = (uint64_t)v13;
    goto LABEL_15;
  }
  sub_100038D20((uint64_t)v13, (uint64_t)v25);
  sub_100098750(v37);
  if (v38)
  {
    sub_100075DD0((uint64_t)v28);
    sub_100075DD0((uint64_t)v30);
    (*(void (**)(_BYTE *, uint64_t))(v72 + 8))(v25, v4);
    goto LABEL_14;
  }
  v67 = v17;
  v40 = v72;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 32))(v7, v37, v4);
  sub_100086DA4(qword_100BCCE60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v66 = sub_1000CD608((uint64_t)v25, v42, v43, v41);
  v44 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
  v44(v7, v4);
  sub_1000987A0((uint64_t)v28);
  sub_1000987A0((uint64_t)v30);
  v44((uint64_t)v25, v4);
  v17 = v67;
  sub_1000987A0((uint64_t)v13);
  if ((v66 & 1) == 0)
    goto LABEL_34;
LABEL_17:
  v45 = v68;
  v46 = v68[6];
  v47 = *(_QWORD *)((char *)a1 + v46);
  v48 = *(_QWORD *)((char *)a1 + v46 + 8);
  v49 = (_QWORD *)((char *)a2 + v46);
  v50 = v49[1];
  v51 = v47 == *v49 && v48 == v50;
  if (v51 || (v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v47, v48, *v49, v50, 0), v35 = 0, (v52 & 1) != 0))
  {
    if ((static URL.== infix(_:_:)((char *)a1 + v45[7], (char *)a2 + v45[7]) & 1) == 0)
      goto LABEL_34;
    v53 = (uint64_t)v70;
    sub_1000BD348((uint64_t)a1 + v45[8]);
    v54 = v69;
    sub_100038D20((uint64_t)a2 + v45[8], (uint64_t)v69);
    v55 = v71;
    v56 = v71 + *(int *)(v73 + 48);
    sub_100038D20(v53, v71);
    sub_100038D20((uint64_t)v54, v56);
    sub_100098750(v55);
    if (v33)
    {
      sub_1000987A0((uint64_t)v54);
      sub_1000987A0(v53);
      sub_100098750(v56);
      if (v33)
      {
        sub_100021A14(v71, &qword_100BD4280);
LABEL_33:
        v35 = *((_BYTE *)a1 + v45[9]) ^ *((_BYTE *)a2 + v45[9]) ^ 1;
        return v35 & 1;
      }
    }
    else
    {
      sub_100038D20(v71, v17);
      sub_100098750(v56);
      if (!v57)
      {
        v58 = v72;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 32))(v7, v56, v4);
        sub_100086DA4(qword_100BCCE60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v62 = sub_1000CD608(v17, v60, v61, v59);
        v63 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
        v63(v7, v4);
        sub_1000987A0((uint64_t)v54);
        sub_1000987A0(v53);
        v63(v17, v4);
        v45 = v68;
        sub_1000987A0(v71);
        if ((v62 & 1) != 0)
          goto LABEL_33;
LABEL_34:
        v35 = 0;
        return v35 & 1;
      }
      sub_100075DD0((uint64_t)v54);
      sub_100075DD0(v53);
      (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v17, v4);
    }
    v39 = v71;
LABEL_15:
    sub_100021A14(v39, &qword_100BCCFF0);
    goto LABEL_34;
  }
  return v35 & 1;
}

void sub_100256418(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = v1;
  v4 = sub_10009896C();
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100098728();
  v8 = v7 - v6;
  sub_1000BA294(&qword_100BD4280);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_10009883C();
  v12 = v10 - v11;
  __chkstk_darwin(v13);
  v15 = (char *)&v23 - v14;
  v16 = *v2;
  v17 = v2[1];
  swift_bridgeObjectRetain(v17);
  String.hash(into:)(a1, v16, v17);
  swift_bridgeObjectRelease();
  v18 = (int *)sub_10004A364();
  sub_100038D20((uint64_t)v2 + v18[5], (uint64_t)v15);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v4) == 1)
  {
    sub_100075E0C(0);
  }
  else
  {
    sub_10008908C(v8, (uint64_t)v15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32));
    sub_100075E0C(1u);
    sub_100086DA4(&qword_100BCEAD8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v19);
    sub_1000DB7FC();
  }
  v20 = (_QWORD *)((char *)v2 + v18[6]);
  v21 = *v20;
  v22 = v20[1];
  swift_bridgeObjectRetain(v22);
  String.hash(into:)(a1, v21, v22);
  swift_bridgeObjectRelease();
  sub_100086DA4(&qword_100BCEAD8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  sub_1000C1400(a1);
  sub_1000BD348((uint64_t)v2 + v18[8]);
  if (_s7Weather24LocationCompositionStateOwet_0(v12, 1, v4) == 1)
  {
    sub_100075E0C(0);
  }
  else
  {
    sub_10008908C(v8, v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32));
    sub_100075E0C(1u);
    sub_1000C1400(a1);
    sub_1000DB7FC();
  }
  sub_100075E0C(*((_BYTE *)v2 + v18[9]));
}

void sub_10025663C()
{
  sub_10020D934((void (*)(_QWORD *))sub_100255E5C);
}

void sub_10025665C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10020D998(a1, a2, a3, (void (*)(_QWORD *))sub_100255E5C);
}

void sub_100256668()
{
  sub_100086DA4(&qword_100BCEAC8, type metadata accessor for NewsArticleComponentContentViewModel, (uint64_t)&unk_10098BA18);
}

void sub_100256698()
{
  sub_10020D934((void (*)(_QWORD *))sub_100256418);
}

void sub_1002566B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10020D998(a1, a2, a3, (void (*)(_QWORD *))sub_100256418);
}

uint64_t sub_1002566C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NewsArticleComponentViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100256708(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NewsArticleComponentContentViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

BOOL LocationAuthorizationState.isAlwaysAuthorized.getter(char a1)
{
  return a1 == 2;
}

BOOL LocationAuthorizationState.isAuthorized.getter(unsigned __int8 a1)
{
  return a1 - 1 < 2;
}

Weather::LocationAuthorizationState_optional __swiftcall LocationAuthorizationState.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100B59570, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return (Weather::LocationAuthorizationState_optional)5;
  else
    return (Weather::LocationAuthorizationState_optional)v3;
}

void sub_1002567B8()
{
  unsigned __int8 *v0;

  sub_1004A747C(*v0);
}

void sub_1002567C0()
{
  sub_1001D84B4();
}

void sub_1002567C8(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1001DA100(a1, *v1);
}

Weather::LocationAuthorizationState_optional sub_1002567D0@<W0>(Swift::String *a1@<X0>, Weather::LocationAuthorizationState_optional *a2@<X8>)
{
  Weather::LocationAuthorizationState_optional result;

  result.value = LocationAuthorizationState.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t sub_1002567FC@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = LocationAuthorizationState.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100256824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100256B84();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100256880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100256B84();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

BOOL LocationAuthorizationState.isUndetermined.getter(char a1)
{
  return a1 == 0;
}

uint64_t LocationAuthorizationState.locationAccessData.getter@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;

  if (a1 - 1 < 2)
  {
    v3 = (unsigned int *)&enum case for LocationAccessData.enabled(_:);
  }
  else if (a1 - 3 >= 2)
  {
    v3 = (unsigned int *)&enum case for LocationAccessData.unknown(_:);
  }
  else
  {
    v3 = (unsigned int *)&enum case for LocationAccessData.disabled(_:);
  }
  v4 = *v3;
  v5 = type metadata accessor for LocationAccessData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
}

void sub_100256950()
{
  sub_10068A6EC();
}

unint64_t sub_100256960()
{
  unint64_t result;

  result = qword_100BCEAF0;
  if (!qword_100BCEAF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LocationAuthorizationState, &type metadata for LocationAuthorizationState);
    atomic_store(result, (unint64_t *)&qword_100BCEAF0);
  }
  return result;
}

uint64_t sub_10025699C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100256B48();
  return ShortDescribable.description.getter(a1, v2);
}

void sub_1002569C4(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  char v4;

  static LocationAuthorizationState.read(from:)(a1);
  if (!v2)
    *a2 = v4;
}

void sub_1002569EC(uint64_t a1)
{
  char *v1;

  LocationAuthorizationState.write(to:)(a1, *v1);
}

uint64_t getEnumTagSinglePayload for LocationAuthorizationState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 4) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v5 = v6 - 5;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for LocationAuthorizationState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100256AD8 + 4 * byte_10098BA4F[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100256B0C + 4 * byte_10098BA4A[v4]))();
}

uint64_t sub_100256B0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100256B14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100256B1CLL);
  return result;
}

uint64_t sub_100256B28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100256B30);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100256B34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100256B3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

unint64_t sub_100256B48()
{
  unint64_t result;

  result = qword_100BCEB00;
  if (!qword_100BCEB00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LocationAuthorizationState, &type metadata for LocationAuthorizationState);
    atomic_store(result, (unint64_t *)&qword_100BCEB00);
  }
  return result;
}

unint64_t sub_100256B84()
{
  unint64_t result;

  result = qword_100BCEB08[0];
  if (!qword_100BCEB08[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LocationAuthorizationState, &type metadata for LocationAuthorizationState);
    atomic_store(result, qword_100BCEB08);
  }
  return result;
}

uint64_t sub_100256BC0()
{
  uint64_t v0;

  StubLocalSearchRequestService.deinit();
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_100256BE0(uint64_t a1, uint64_t a2)
{
  return swift_getAssociatedConformanceWitness(*(_QWORD *)(a2 + 88), *(_QWORD *)(a2 + 80), a1, &unk_100ABB724, &unk_100ABB72C);
}

uint64_t sub_100256BFC(uint64_t a1, uint64_t a2)
{
  return swift_getAssociatedConformanceWitness(*(_QWORD *)(a2 + 88), *(_QWORD *)(a2 + 80), a1, &unk_100ABB724, &unk_100ABB734);
}

uint64_t sub_100256C18(uint64_t a1, uint64_t a2)
{
  return swift_getAssociatedConformanceWitness(*(_QWORD *)(a2 + 88), *(_QWORD *)(a2 + 80), a1, &unk_100ABB724, &unk_100ABB73C);
}

uint64_t sub_100256C34(uint64_t a1, uint64_t a2)
{
  return swift_getAssociatedConformanceWitness(*(_QWORD *)(a2 + 88), *(_QWORD *)(a2 + 80), a1, &unk_100ABB724, &unk_100ABB744);
}

uint64_t sub_100256C50(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 88);
}

uint64_t sub_100256C58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v1 = OBJC_IVAR____TtC7Weather11AppDelegate____lazy_storage___testManager;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC7Weather11AppDelegate____lazy_storage___testManager))
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Weather11AppDelegate____lazy_storage___testManager);
LABEL_5:
    swift_retain();
    return v2;
  }
  v3 = v0;
  sub_100037674((uint64_t)v9);
  v4 = v10;
  v5 = v11;
  sub_1000DB418(v9, v10);
  v6 = type metadata accessor for PerformanceTestManager();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (result)
  {
    v2 = result;
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v9);
    v8 = *(_QWORD *)(v3 + v1);
    *(_QWORD *)(v3 + v1) = v2;
    swift_retain();
    swift_release(v8);
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_100256D10(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  UIApplicationLaunchOptionsKey.applicationStateLaunchOptionKey.getter(*a3);
  return sub_1000CE46C(a4, a2);
}

id LocalSearchCompleterManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)sub_10009D408();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100256E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(v5);
  return Configurable.setting<A>(_:)(a1, ObjectType, a5);
}

uint64_t sub_100256EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(v7);
  return Configurable.setting<A>(_:_:)(a1, a2, a3, ObjectType, a7);
}

uint64_t sub_100256F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(v8);
  return Configurable.setting<A>(_:defaultValue:_:)(a1, a2, a3, a4, ObjectType, a8);
}

void sub_100256F6C()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;

  v2 = v0;
  v3 = type metadata accessor for EndReason(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v27[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SessionEndData(0);
  v26 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100079FBC();
  sub_100079FE8(v8, (unint64_t *)&qword_100BC2998, OS_os_log_ptr);
  sub_1000D94A4();
  sub_10009C0A4();
  sub_1000D0040((uint64_t)"Application will terminate", 26, v9, (uint64_t)&_mh_execute_header);

  v10 = OBJC_IVAR____TtC7Weather11AppDelegate_sessionManager;
  if (!*(_QWORD *)&v0[OBJC_IVAR____TtC7Weather11AppDelegate_sessionManager]
    || !*(_QWORD *)&v0[OBJC_IVAR____TtC7Weather11AppDelegate_appSessionManager])
  {
    if (qword_100BC2420 != -1)
      swift_once(&qword_100BC2420, sub_10015967C);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_1000AECD4(v11, (uint64_t)qword_100CAF058);
    Logger.logObject.getter(v12);
    v13 = sub_10009C0A4();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Terminating app without session managers", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

  }
  sub_1000C25BC();
  v15 = v28;
  v16 = v29;
  sub_1000DB418(v27, v28);
  v17 = sub_1000BA294((uint64_t *)&unk_100BCEF20);
  v18 = dispatch thunk of ResolverType.resolve<A>(_:)(v17, v17, v15, v16);
  if (!v18)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    return;
  }
  v19 = v18;
  sub_1000DB80C();
  sub_10060C7DC();
  if (*(_QWORD *)&v2[v10])
  {
    v20 = sub_100094EE4();
    v21 = SessionManager.tracker.getter(v20);
    sub_10009880C();
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for EndReason.forceQuit(_:), v3);
    SessionEndData.init(endReason:)(v6);
    sub_1000C0CC8((unint64_t *)&qword_100BCDC70, v22, (uint64_t (*)(uint64_t))&type metadata accessor for SessionEndData, (uint64_t)&protocol conformance descriptor for SessionEndData);
    Tracker.push<A>(data:traits:file:line:)(v1, _swiftEmptyArrayStorage, 0xD000000000000047, 0x80000001009F7000, 283, v7, v23);
    swift_release(v21);
    sub_1000BEA30(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
  }
  sub_1000C25BC();
  v24 = sub_10009D3E4();
  v25 = type metadata accessor for LazyEventProcessor(v24);
  if (!dispatch thunk of ResolverType.resolve<A>(_:name:)(v25, 0xD000000000000011, 0x80000001009F7050, v25, v7, v1))
    goto LABEL_16;
  LazyEventProcessor.resolve()();
  sub_10009880C();
  sub_1000DB80C();
  if (*(_QWORD *)&v2[OBJC_IVAR____TtC7Weather11AppDelegate_appSessionManager])
  {
    sub_100094EE4();
    AppSessionManager.appSessionDidTerminate(timeout:)(1.0);
    sub_10009880C();
  }
  swift_release(v19);
}

uint64_t sub_10025730C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(v6);
  return Updatable.save<A>(setting:value:)(a1, a2, ObjectType, a6);
}

uint64_t sub_100257350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(v5);
  return Updatable.reset<A>(setting:)(a1, ObjectType, a5);
}

uint64_t sub_10025738C(uint64_t a1)
{
  uint64_t v1;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(v1);
  return Updatable.apply(preset:)(a1, ObjectType);
}

uint64_t sub_1002573C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  type metadata accessor for ContainerScope(0);
  sub_1000CFB28();
  __chkstk_darwin(v4);
  sub_100079FBC();
  sub_10014CBAC();
  sub_1000B461C(enum case for ContainerScope.scene(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104));
  v5 = ContainerManager.container(for:)(v1);
  sub_10009880C();
  sub_1000BEA30(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  result = type metadata accessor for Container(0);
  a1[3] = result;
  *a1 = v5;
  return result;
}

void sub_1002574B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = sub_1000D1160(&OBJC_IVAR____TtC7Weather11AppDelegate____lazy_storage___windowFocusManager, &qword_100BCEEE8, (uint64_t (*)(_QWORD *, uint64_t))sub_10003C800, &qword_100BCEEF0, a5);
  sub_1000C140C(v6, v7, v8, v9, v10, v11, v12, v13, v15, v16, v17, v18, v19);
  v14 = sub_1000C25C8(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16));
  sub_1000C36A0(v14);
  sub_1000BA668();
}

uint64_t sub_100257538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100256C58();
  LOBYTE(a3) = sub_1008F76C4(a2, a3);
  sub_10009880C();
  return a3 & 1;
}

void sub_100257628(uint64_t a1, uint64_t a2)
{
  sub_10005329C(&qword_100BCED48, a2, (uint64_t (*)(uint64_t))type metadata accessor for AppDelegate, (uint64_t)&unk_10098BD34);
}

void sub_100257654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSString v8;
  NSString v9;

  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(a5, "resetLocationAuthorizationForBundleId:orBundlePath:", v8, v9, swift_bridgeObjectRelease(a4).n128_f64[0]);

}

_QWORD *sub_1002576DC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for WeatherDescription(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    v12 = *((_QWORD *)v11 + 1);
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *((_QWORD *)v10 + 1) = v12;
    v13 = *((_QWORD *)v11 + 3);
    *((_QWORD *)v10 + 2) = *((_QWORD *)v11 + 2);
    *((_QWORD *)v10 + 3) = v13;
    v10[32] = v11[32];
    v14 = *((_QWORD *)v11 + 6);
    *((_QWORD *)v10 + 5) = *((_QWORD *)v11 + 5);
    *((_QWORD *)v10 + 6) = v14;
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
  }
  return a1;
}

uint64_t sub_1002577A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for WeatherDescription(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  v11 = *(_QWORD *)(v10 + 8);
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_QWORD *)(v9 + 8) = v11;
  v12 = *(_QWORD *)(v10 + 24);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v9 + 24) = v12;
  *(_BYTE *)(v9 + 32) = *(_BYTE *)(v10 + 32);
  v13 = *(_QWORD *)(v10 + 48);
  *(_QWORD *)(v9 + 40) = *(_QWORD *)(v10 + 40);
  *(_QWORD *)(v9 + 48) = v13;
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  return a1;
}

uint64_t sub_100257838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for WeatherDescription(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  v11 = *(_QWORD *)(a1 + v7 + 8);
  *(_QWORD *)(v8 + 8) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  v12 = *(_QWORD *)(v9 + 24);
  v13 = *(_QWORD *)(v8 + 24);
  *(_QWORD *)(v8 + 24) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(v8 + 32) = *(_BYTE *)(v9 + 32);
  *(_QWORD *)(v8 + 40) = *(_QWORD *)(v9 + 40);
  v14 = *(_QWORD *)(v9 + 48);
  v15 = *(_QWORD *)(v8 + 48);
  *(_QWORD *)(v8 + 48) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100257910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v6 = type metadata accessor for WeatherDescription(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(v10 + 48);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  return a1;
}

uint64_t sub_10025798C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for WeatherDescription(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a2 + v7 + 8);
  v11 = *(_QWORD *)(a1 + v7 + 8);
  *(_QWORD *)v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(v8 + 8) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(v9 + 24);
  v13 = *(_QWORD *)(v8 + 24);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v8 + 24) = v12;
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(v8 + 32) = *(_BYTE *)(v9 + 32);
  v14 = *(_QWORD *)(v9 + 48);
  v15 = *(_QWORD *)(v8 + 48);
  *(_QWORD *)(v8 + 40) = *(_QWORD *)(v9 + 40);
  *(_QWORD *)(v8 + 48) = v14;
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100257A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100257A40);
}

uint64_t sub_100257A40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;

  v6 = type metadata accessor for WeatherDescription(0);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return _s7Weather24LocationCompositionStateOwet_0(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

uint64_t sub_100257ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100257AC8);
}

uint64_t sub_100257AC8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = type metadata accessor for WeatherDescription(0);
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return _s7Weather24LocationCompositionStateOwst_0(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100257B40(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_100257B9C + 4 * byte_10098BD80[swift_getEnumCaseMultiPayload(a2)];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t sub_100257DE4(uint64_t result, uint64_t a2)
{
  char *v3;

  if (result != a2)
  {
    sub_10006BD20(result, type metadata accessor for LocationComponentHeaderViewModel);
    v3 = (char *)&loc_100257E4C + 4 * byte_10098BD8F[swift_getEnumCaseMultiPayload(a2)];
    __asm { BR              X10 }
  }
  return result;
}

_BYTE *sub_10025811C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;

  if (swift_getEnumCaseMultiPayload(a2) == 3)
  {
    v6 = type metadata accessor for WeatherDescription(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = type metadata accessor for LocationComponentHeaderViewModel.Description(0);
    v8 = *(int *)(v7 + 20);
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = *((_OWORD *)v10 + 1);
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *((_OWORD *)v9 + 1) = v11;
    *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
    *((_QWORD *)v9 + 6) = *((_QWORD *)v10 + 6);
    a1[*(int *)(v7 + 24)] = a2[*(int *)(v7 + 24)];
    swift_storeEnumTagMultiPayload(a1, a3, 3);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_BYTE *sub_1002581E0(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;

  if (a1 != a2)
  {
    sub_10006BD20((uint64_t)a1, type metadata accessor for LocationComponentHeaderViewModel);
    if (swift_getEnumCaseMultiPayload(a2) == 3)
    {
      v6 = type metadata accessor for WeatherDescription(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = type metadata accessor for LocationComponentHeaderViewModel.Description(0);
      v8 = *(int *)(v7 + 20);
      v9 = &a1[v8];
      v10 = &a2[v8];
      v11 = *((_OWORD *)v10 + 1);
      *(_OWORD *)v9 = *(_OWORD *)v10;
      *((_OWORD *)v9 + 1) = v11;
      *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
      *((_QWORD *)v9 + 6) = *((_QWORD *)v10 + 6);
      a1[*(int *)(v7 + 24)] = a2[*(int *)(v7 + 24)];
      swift_storeEnumTagMultiPayload(a1, a3, 3);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void sub_1002582C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;

  v3 = sub_1000BBE30(a1);
  v7 = v7 && v4 == v6;
  if (!v7 && (sub_100099264(v3, v4, v5, v6) & 1) == 0)
    goto LABEL_16;
  v8 = *(_QWORD *)(v2 + 24);
  v9 = *(_QWORD *)(v1 + 24);
  if (!v8)
  {
    if (v9)
      goto LABEL_16;
LABEL_15:
    sub_100092144(v2 + 32);
    goto LABEL_16;
  }
  if (v9)
  {
    v10 = *(_QWORD *)(v2 + 16);
    v11 = *(_QWORD *)(v1 + 16);
    v12 = v10 == v11 && v8 == v9;
    if (v12 || (sub_100099264(v10, v8, v11, v9) & 1) != 0)
      goto LABEL_15;
  }
LABEL_16:
  sub_10004A298();
}

void sub_100258358(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;

  v3 = sub_1000BBE30(a1);
  v7 = v7 && v4 == v6;
  if (v7 || (sub_100099264(v3, v4, v5, v6) & 1) != 0)
  {
    v8 = v2[2];
    v9 = v2[3];
    v10 = v1[2];
    v11 = v1[3];
    v12 = v8 == v10 && v9 == v11;
    if (v12 || (sub_100099264(v8, v9, v10, v11) & 1) != 0)
    {
      v13 = v2[4];
      v14 = v2[5];
      v15 = v1[4];
      v16 = v1[5];
      v17 = v13 == v15 && v14 == v16;
      if (v17 || (sub_100099264(v13, v14, v15, v16) & 1) != 0)
      {
        v18 = v2[6];
        v19 = v2[7];
        v20 = v1[6];
        v21 = v1[7];
        v22 = v18 == v20 && v19 == v21;
        if (v22 || (sub_100099264(v18, v19, v20, v21) & 1) != 0)
          sub_100092144((uint64_t)(v2 + 8));
      }
    }
  }
  sub_10004A298();
}

uint64_t sub_100258418(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  char v11;
  char v12;
  _OWORD v14[3];
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  if ((static WeatherDescription.== infix(_:_:)(a1, a2) & 1) == 0)
    goto LABEL_4;
  v4 = sub_1000C5BE4();
  v5 = (__int128 *)(a1 + *(int *)(v4 + 20));
  v6 = v5[2];
  v15 = *((_QWORD *)v5 + 6);
  v7 = *v5;
  v14[1] = v5[1];
  v14[2] = v6;
  v14[0] = v7;
  v8 = (__int128 *)(a2 + *(int *)(v4 + 20));
  v19 = *((_QWORD *)v8 + 6);
  v9 = v8[2];
  v10 = *v8;
  v17 = v8[1];
  v18 = v9;
  v16 = v10;
  sub_100092144((uint64_t)v14);
  if ((v11 & 1) != 0)
    v12 = *(_BYTE *)(a1 + *(int *)(v4 + 24)) ^ *(_BYTE *)(a2 + *(int *)(v4 + 24)) ^ 1;
  else
LABEL_4:
    v12 = 0;
  return v12 & 1;
}

void sub_1002584D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  sub_1000C5BE4();
  sub_1000B42B0();
  __chkstk_darwin(v1);
  sub_1000BCED8();
  type metadata accessor for LocationComponentHeaderViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100098728();
  v5 = v4 - v3;
  sub_100091B54(v0, v4 - v3);
  v6 = (char *)sub_10025856C + 4 * byte_10098BD99[swift_getEnumCaseMultiPayload(v5)];
  __asm { BR              X10 }
}

uint64_t sub_10025856C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 32);
  swift_bridgeObjectRelease();
  sub_1000986C4();
  swift_bridgeObjectRelease();
  return v1;
}

void sub_100258630()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  sub_1000986AC();
  v1 = v0;
  sub_1000C5BE4();
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100079FBC();
  v3 = type metadata accessor for LocationComponentHeaderViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100098728();
  v7 = v6 - v5;
  sub_100091B54(v1, v6 - v5);
  v8 = (char *)sub_1002586C8 + 4 * byte_10098BD9E[swift_getEnumCaseMultiPayload(v7, v3)];
  __asm { BR              X10 }
}

void sub_1002586C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  v5 = *(_BYTE *)(v2 + 32);
  *(_OWORD *)v0 = *(_OWORD *)v2;
  *(_QWORD *)(v0 + 16) = v3;
  *(_QWORD *)(v0 + 24) = v4;
  *(_BYTE *)(v0 + 32) = v5;
  *(_OWORD *)(v0 + 40) = *(_OWORD *)(v2 + 40);
  swift_storeEnumTagMultiPayload(v0, v1, 4);
  sub_100098640();
}

uint64_t sub_100258820(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BCF0B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_100258860(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[9];
  v7 = a1[14];
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *sub_1002588E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[10];
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v5);
  return a1;
}

void type metadata accessor for LocationComponentHeaderViewModel.PinningOnly()
{
  sub_100098884();
}

double sub_100258974(_QWORD *a1)
{
  double result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1[14]).n128_u64[0];
  return result;
}

uint64_t sub_1002589C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v9 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v9;
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t sub_100258A78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a2 + 112);
  v17 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  return a1;
}

void *sub_100258B94(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x79uLL);
}

uint64_t sub_100258B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v16 = *(_QWORD *)(a2 + 112);
  v17 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v16;
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  return a1;
}

uint64_t sub_100258C40(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 121))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100258C80(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 120) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 121) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 121) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for LocationComponentHeaderViewModel.Prominent()
{
  sub_100098884();
}

double sub_100258CEC(_QWORD *a1)
{
  double result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1[10]).n128_u64[0];
  return result;
}

uint64_t sub_100258D2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t sub_100258DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return a1;
}

void *initializeWithTake for DetermineCompactGridLayoutModifier(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x59uLL);
}

uint64_t sub_100258E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v12;
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return a1;
}

uint64_t sub_100258F20(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 89))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100258F60(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 89) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 89) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for LocationComponentHeaderViewModel.Large()
{
  sub_100098884();
}

double sub_100258FC4(_QWORD *a1)
{
  double result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1[6]).n128_u64[0];
  return result;
}

void sub_100258FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain(v3);
  sub_1000989F8();
  sub_1000860DC();
  sub_100079F70();
}

void sub_100259040(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  sub_10003BC58();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain(v5);
  sub_10003BC58();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  sub_100079F70();
}

uint64_t sub_1002590C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t sub_100259120@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;
  objc_class *v7;
  NSBundle v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  objc_class *v16;
  NSBundle v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = (void *)objc_opt_self(NSBundle);
  v7 = (objc_class *)objc_msgSend(v6, "mainBundle");
  sub_1000D9458();
  v8.super.isa = v7;
  v13 = sub_1000C4624(v9, v10, v11, v12, v8, 0x612074726F706552, 0xEF6575737349206ELL);
  v15 = v14;

  a3[7] = v13;
  a3[8] = v15;
  v16 = (objc_class *)objc_msgSend(v6, "mainBundle", 0x80000001009F7150);
  sub_1000D9458();
  v17.super.isa = v16;
  v22 = sub_1000C4624(v18, v19, v20, v21, v17, 0x7374696E55, 0xE500000000000000);
  v24 = v23;

  a3[9] = v22;
  a3[10] = v24;
  v25 = sub_1000BA294(&qword_100BC4820);
  sub_10003D310(&qword_100BC4828, &qword_100BC4820, (uint64_t)&unk_1009D9950);
  *a3 = ObservedObject.init(wrappedValue:)(a1, v25, v26);
  a3[1] = v27;
  return sub_10003C800(a2, (uint64_t)(a3 + 2));
}

double destroy for ListMenuView(uint64_t a1)
{
  double result;

  swift_release(*(_QWORD *)(a1 + 8));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + 16));
  swift_bridgeObjectRelease();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for ListMenuView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2 + 16;
  v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v6 - 8);
  v9 = swift_retain(v4);
  v8(a1 + 16, v5, v7, v9);
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v12;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  return a1;
}

_QWORD *assignWithCopy for ListMenuView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = *a2;
  v4 = a1[1];
  a1[1] = a2[1];
  swift_retain();
  swift_release(v4);
  sub_100094D04(a1 + 2, a2 + 2);
  a1[7] = a2[7];
  v5 = a2[8];
  a1[8] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  v6 = a2[10];
  a1[10] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ListMenuView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_release(v5);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + 16));
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WindCategoryTableViewModel.Row(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 88))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WindCategoryTableViewModel.Row(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1002594FC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AAE0A8, 1);
}

uint64_t sub_10025950C()
{
  uint64_t result;
  uint64_t v1;

  result = sub_10025952C();
  qword_100CAE5B0 = result;
  unk_100CAE5B8 = v1;
  return result;
}

uint64_t sub_10025952C()
{
  void *v0;
  id v1;
  UIImage *v2;
  id v3;
  UIImage *v4;
  UIImage *v5;
  uint64_t v6;

  v0 = (void *)objc_opt_self(NSUnitTemperature);
  v1 = objc_msgSend(v0, "celsius");
  v2 = sub_1004AB354();

  if (!v2)
    goto LABEL_5;
  v3 = objc_msgSend(v0, "fahrenheit");
  v4 = sub_1004AB354();

  if (!v4)
  {

LABEL_5:
    v6 = Image.init(systemName:)(0x656D6F6D72656874, 0xEB00000000726574);
    Image.init(systemName:)(0x656D6F6D72656874, 0xEB00000000726574);
    return v6;
  }
  v5 = v2;
  v6 = ((uint64_t (*)(void))Image.init(uiImage:))();
  Image.init(uiImage:)(v4);

  return v6;
}

uint64_t sub_10025962C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  *a2 = static Alignment.trailing.getter(a1);
  a2[1] = v4;
  v5 = sub_1000BA294(&qword_100BCF0B8);
  return sub_10025966C(v2, (uint64_t)a2 + *(int *)(v5 + 44));
}

uint64_t sub_10025966C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t OpaqueTypeConformance2;
  _QWORD v36[2];
  uint64_t v37;
  _QWORD __src[11];

  v36[1] = a2;
  v37 = sub_1000BA294(&qword_100BCF0C0);
  v3 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v5 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100BCF0C8);
  __chkstk_darwin(v6);
  v8 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[0] = sub_1000BA294(&qword_100BCF0D0);
  v9 = *(_QWORD *)(v36[0] - 8);
  __chkstk_darwin(v36[0]);
  v11 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 8);
  swift_retain();
  v13 = sub_10017B254();
  v15 = v14;
  swift_release(v12);

  if ((v15 & 1) != 0)
  {
    sub_10025B3C0(a1, (uint64_t)__src);
    v25 = swift_allocObject(&unk_100B66FB0, 104, 7);
    memcpy((void *)(v25 + 16), __src, 0x58uLL);
    v26 = sub_1000BA294(&qword_100BCF110);
    v27 = sub_10025B418();
    Button.init(action:label:)(sub_10025B3F8, v25, sub_10025AC58, 0, v26, v27);
    v28 = v36[0];
    (*(void (**)(char *, char *, _QWORD))(v9 + 16))(v8, v11, v36[0]);
    swift_storeEnumTagMultiPayload(v8, v6, 0);
    sub_10003D310(&qword_100BCF0D8, &qword_100BCF0D0, (uint64_t)&protocol conformance descriptor for Button<A>);
    v30 = v29;
    v31 = sub_100075EB0(&qword_100BCF0E0);
    v32 = sub_100075EB0(&qword_100BCF0E8);
    v33 = sub_10025B2FC();
    sub_10003D310(&qword_100BCF108, &qword_100BCF0E8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    __src[0] = v31;
    __src[1] = v32;
    __src[2] = v33;
    __src[3] = v34;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(__src, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer<A>(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v8, v28, v37, v30, OpaqueTypeConformance2);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v28);
  }
  else
  {
    sub_1002599AC((uint64_t)v5);
    v16 = v37;
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v8, v5, v37);
    swift_storeEnumTagMultiPayload(v8, v6, 1);
    sub_10003D310(&qword_100BCF0D8, &qword_100BCF0D0, (uint64_t)&protocol conformance descriptor for Button<A>);
    v18 = v17;
    v19 = sub_100075EB0(&qword_100BCF0E0);
    v20 = sub_100075EB0(&qword_100BCF0E8);
    v21 = sub_10025B2FC();
    sub_10003D310(&qword_100BCF108, &qword_100BCF0E8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    __src[0] = v19;
    __src[1] = v20;
    __src[2] = v21;
    __src[3] = v22;
    v23 = swift_getOpaqueTypeConformance2(__src, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer<A>(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v8, v36[0], v16, v18, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v16);
  }
}

void sub_1002599AC(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD v29[2];
  _BYTE v30[16];
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;
  _BYTE v34[16];
  uint64_t v35;

  v2 = v1;
  v29[1] = a1;
  v3 = sub_1000BA294(&qword_100BCF100);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BCF0E0);
  __chkstk_darwin(v7);
  v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = v2;
  v33 = v2;
  v10 = sub_1000BA294(&qword_100BCF120);
  v11 = sub_1000BA294(&qword_100BCF128);
  v12 = sub_10025B4B4();
  sub_10003D310(&qword_100BCF150, &qword_100BCF128, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  Menu.init(content:label:)(sub_10025B4A4, v34, sub_10025B4AC, v32, v10, v11, v12, v13);
  v14 = LocalizedStringKey.init(stringLiteral:)(1701998413, 0xE400000000000000);
  v18 = Text.init(_:tableName:bundle:comment:)(v14, v16, v15 & 1, v17, 0, 0, 0, "Accessibility label for the list menu button");
  v20 = v19;
  v22 = v21;
  v24 = v23 & 1;
  sub_10003D310(&qword_100BCF0F8, &qword_100BCF100, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
  View.accessibilityLabel(_:)(v18, v20, v24, v22, v3, v25);
  sub_1000D31B4(v18, v20, v24);
  v26 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, __n128))(v4 + 8))(v6, v3, v26);
  v31 = v2;
  v27 = sub_1000BA294(&qword_100BCF0E8);
  v28 = sub_10025B2FC();
  sub_10003D310(&qword_100BCF108, &qword_100BCF0E8, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.accessibilityShowsLargeContentViewer<A>(_:)(sub_10025B5A4, v30, v7, v27, v28);
  sub_100021AA4((uint64_t)v9, &qword_100BCF0E0);
}

uint64_t sub_100259C10@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  int *v46;
  char *v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  void (*v52)(char *, uint64_t);
  void (*v54)(char *, char *, uint64_t);
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char v72[16];
  uint64_t v73;
  char v74[16];
  uint64_t v75;
  char v76[16];
  uint64_t v77;
  _BYTE __src[88];

  v63 = a2;
  v62 = sub_1000BA294(&qword_100BCF168);
  v71 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v61 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v67 = (char *)&v54 - v5;
  v60 = sub_1000BA294(&qword_100BCF170);
  v68 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v69 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v54 - v8;
  v10 = sub_1000BA294(&qword_100BCF178);
  v64 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v70 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v66 = (char *)&v54 - v13;
  __chkstk_darwin(v14);
  v65 = (char *)&v54 - v15;
  __chkstk_darwin(v16);
  v59 = (char *)&v54 - v17;
  __chkstk_darwin(v18);
  v20 = (char *)&v54 - v19;
  __chkstk_darwin(v21);
  v23 = (char *)&v54 - v22;
  sub_10025B3C0(a1, (uint64_t)__src);
  v24 = swift_allocObject(&unk_100B66FD8, 104, 7);
  memcpy((void *)(v24 + 16), __src, 0x58uLL);
  v25 = sub_1000BA294(&qword_100BCF180);
  sub_10003D310(&qword_100BCF188, &qword_100BCF180, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v27 = v26;
  v58 = v23;
  Button.init(action:label:)(sub_10025B600, v24, sub_10025ACD0, 0, v25, v26);
  sub_10025B3C0(a1, (uint64_t)__src);
  v28 = swift_allocObject(&unk_100B67000, 104, 7);
  memcpy((void *)(v28 + 16), __src, 0x58uLL);
  v57 = v20;
  Button.init(action:label:)(sub_10025B624, v28, sub_10025AD68, 0, v25, v27);
  v77 = a1;
  v29 = sub_1000BA294(&qword_100BCF190);
  sub_10003D310(&qword_100BCF198, &qword_100BCF190, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v30 = v9;
  v56 = v9;
  Section<>.init(content:)(sub_10025B644, v76, v29, v31);
  v75 = a1;
  sub_10003D310(&qword_100BCF1A0, &qword_100BCF178, (uint64_t)&protocol conformance descriptor for Button<A>);
  v32 = v67;
  v33 = v10;
  Section<>.init(content:)(sub_10025B64C, v74, v10, v34);
  sub_10025B3C0(a1, (uint64_t)__src);
  v35 = swift_allocObject(&unk_100B67028, 104, 7);
  memcpy((void *)(v35 + 16), __src, 0x58uLL);
  v73 = a1;
  v36 = v59;
  Button.init(action:label:)(sub_10025B658, v35, sub_10025B678, v72, v25, v27);
  v37 = *(void (**)(char *, char *, uint64_t))(v64 + 16);
  v38 = v65;
  v37(v65, v23, v10);
  v39 = v66;
  v37(v66, v20, v10);
  v54 = *(void (**)(char *, char *, uint64_t))(v68 + 16);
  v40 = v69;
  v41 = v60;
  v54(v69, v30, v60);
  v55 = *(void (**)(char *, char *, uint64_t))(v71 + 16);
  v42 = v61;
  v43 = v32;
  v44 = v62;
  v55(v61, v43, v62);
  v37(v70, v36, v33);
  v45 = v63;
  v37(v63, v38, v33);
  v46 = (int *)sub_1000BA294(&qword_100BCF1A8);
  v37(&v45[v46[12]], v39, v33);
  v54(&v45[v46[16]], v40, v41);
  v47 = v42;
  v55(&v45[v46[20]], v42, v44);
  v48 = v70;
  v37(&v45[v46[24]], v70, v33);
  v49 = *(void (**)(char *, uint64_t))(v64 + 8);
  v50 = v33;
  v49(v36, v33);
  v51 = *(void (**)(char *, uint64_t))(v71 + 8);
  v51(v67, v44);
  v52 = *(void (**)(char *, uint64_t))(v68 + 8);
  v52(v56, v41);
  v49(v57, v50);
  v49(v58, v50);
  v49(v48, v50);
  v51(v47, v44);
  v52(v69, v41);
  v49(v66, v50);
  return ((uint64_t (*)(char *, uint64_t))v49)(v65, v50);
}

uint64_t sub_10025A234@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v2 = sub_1000BA294(&qword_100BCF1B0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - v7;
  __chkstk_darwin(v9);
  v11 = (char *)&v19 - v10;
  __chkstk_darwin(v12);
  v14 = (char *)&v19 - v13;
  sub_10025A398();
  sub_10025A4E8();
  v15 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v15(v8, v14, v2);
  v15(v5, v11, v2);
  v15(a1, v8, v2);
  v16 = sub_1000BA294(&qword_100BCF1B8);
  v15(&a1[*(int *)(v16 + 48)], v5, v2);
  v17 = *(void (**)(char *, uint64_t))(v3 + 8);
  v17(v11, v2);
  v17(v14, v2);
  v17(v5, v2);
  return ((uint64_t (*)(char *, uint64_t))v17)(v8, v2);
}

uint64_t sub_10025A398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD __src[11];

  sub_10025B3C0(v0, (uint64_t)__src);
  v1 = type metadata accessor for MainActor(0);
  v2 = static MainActor.shared.getter(v1);
  v3 = (_QWORD *)swift_allocObject(&unk_100B670C8, 120, 7);
  v3[2] = v2;
  v3[3] = &protocol witness table for MainActor;
  memcpy(v3 + 4, __src, 0x58uLL);
  v4 = sub_10025B3C0(v0, (uint64_t)__src);
  v5 = static MainActor.shared.getter(v4);
  v6 = (_QWORD *)swift_allocObject(&unk_100B670F0, 120, 7);
  v6[2] = v5;
  v6[3] = &protocol witness table for MainActor;
  memcpy(v6 + 4, __src, 0x58uLL);
  Binding.init(get:set:)(__src, sub_10025B770, v3, sub_10025B7DC, v6, &type metadata for Bool);
  v7 = __src[0];
  v8 = __src[1];
  v9 = LOBYTE(__src[2]);
  v10 = sub_1000BA294(&qword_100BCF180);
  sub_10003D310(&qword_100BCF188, &qword_100BCF180, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  return Toggle.init(isOn:label:)(v7, v8, v9, sub_10025AE10, 0, v10, v11);
}

uint64_t sub_10025A4E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD __src[11];

  sub_10025B3C0(v0, (uint64_t)__src);
  v1 = type metadata accessor for MainActor(0);
  v2 = static MainActor.shared.getter(v1);
  v3 = (_QWORD *)swift_allocObject(&unk_100B67078, 120, 7);
  v3[2] = v2;
  v3[3] = &protocol witness table for MainActor;
  memcpy(v3 + 4, __src, 0x58uLL);
  v4 = sub_10025B3C0(v0, (uint64_t)__src);
  v5 = static MainActor.shared.getter(v4);
  v6 = (_QWORD *)swift_allocObject(&unk_100B670A0, 120, 7);
  v6[2] = v5;
  v6[3] = &protocol witness table for MainActor;
  memcpy(v6 + 4, __src, 0x58uLL);
  Binding.init(get:set:)(__src, sub_10025B700, v3, sub_10025B728, v6, &type metadata for Bool);
  v7 = __src[0];
  v8 = __src[1];
  v9 = LOBYTE(__src[2]);
  v10 = sub_1000BA294(&qword_100BCF180);
  sub_10003D310(&qword_100BCF188, &qword_100BCF180, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  return Toggle.init(isOn:label:)(v7, v8, v9, sub_10025AF54, 0, v10, v11);
}

uint64_t sub_10025A638(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  _BYTE __src[88];

  sub_10025B3C0(a1, (uint64_t)__src);
  v2 = swift_allocObject(&unk_100B67050, 104, 7);
  memcpy((void *)(v2 + 16), __src, 0x58uLL);
  v6[2] = a1;
  v3 = sub_1000BA294(&qword_100BCF180);
  sub_10003D310(&qword_100BCF188, &qword_100BCF180, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  return Button.init(action:label:)(sub_10025B6AC, v2, sub_10025B6CC, v6, v3, v4);
}

void sub_10025A6F0(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;

  v2 = sub_1000BA294(&qword_100BCF148);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for Image.Scale(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BCF140);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = Image.init(systemName:)(0x73697370696C6C65, 0xEF656C637269632ELL);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for Image.Scale.large(_:), v5);
  KeyPath = swift_getKeyPath(&unk_10098BFC0);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))((char *)v4 + *(int *)(v2 + 28), v8, v5);
  *v4 = KeyPath;
  sub_10007EBC8((uint64_t)v4, (uint64_t)v11 + *(int *)(v9 + 36), &qword_100BCF148);
  *v11 = v12;
  swift_retain();
  sub_100021AA4((uint64_t)v4, &qword_100BCF148);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_release(v12);
  sub_10007EBC8((uint64_t)v11, a1, &qword_100BCF140);
  *(_BYTE *)(a1 + *(int *)(sub_1000BA294(&qword_100BCF120) + 36)) = 1;
  sub_100021AA4((uint64_t)v11, &qword_100BCF140);
}

void sub_10025A8D8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  *(_QWORD *)a2 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  v3 = sub_1000BA294(&qword_100BCF158);
  sub_10025A924(a2 + *(int *)(v3 + 44));
}

void sub_10025A924(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = a1;
  v30 = sub_1000BA294(&qword_100BCF148);
  __chkstk_darwin(v30);
  v2 = (uint64_t *)((char *)&v29 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = type metadata accessor for Image.Scale(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BCF140);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = sub_1000BA294(&qword_100BCF120);
  __chkstk_darwin(v29);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v29 - v13;
  v15 = Image.init(systemName:)(0x73697370696C6C65, 0xEF656C637269632ELL);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Image.Scale.large(_:), v3);
  KeyPath = swift_getKeyPath(&unk_10098BFC0);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))((char *)v2 + *(int *)(v30 + 28), v6, v3);
  *v2 = KeyPath;
  sub_10007EBC8((uint64_t)v2, (uint64_t)v9 + *(int *)(v7 + 36), &qword_100BCF148);
  *v9 = v15;
  swift_retain();
  sub_100021AA4((uint64_t)v2, &qword_100BCF148);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_release(v15);
  sub_10007EBC8((uint64_t)v9, (uint64_t)v11, &qword_100BCF140);
  v11[*(int *)(v29 + 36)] = 1;
  sub_100021AA4((uint64_t)v9, &qword_100BCF140);
  sub_10025B5B4((uint64_t)v11, (uint64_t)v14);
  v17 = LocalizedStringKey.init(stringLiteral:)(1701998413, 0xE400000000000000);
  v21 = Text.init(_:tableName:bundle:comment:)(v17, v19, v18 & 1, v20, 0, 0, 0, "Accessibility label for the list menu button");
  v23 = v22;
  v25 = v24;
  LOBYTE(v15) = v26 & 1;
  sub_10007EBC8((uint64_t)v14, (uint64_t)v11, &qword_100BCF120);
  v27 = v31;
  sub_10007EBC8((uint64_t)v11, v31, &qword_100BCF120);
  v28 = v27 + *(int *)(sub_1000BA294(&qword_100BCF160) + 48);
  *(_QWORD *)v28 = v21;
  *(_QWORD *)(v28 + 8) = v23;
  *(_BYTE *)(v28 + 16) = v15;
  *(_QWORD *)(v28 + 24) = v25;
  sub_1000D55D4(v21, v23, v15);
  swift_bridgeObjectRetain(v25);
  sub_100021AA4((uint64_t)v14, &qword_100BCF120);
  sub_1000D31B4(v21, v23, v15);
  swift_bridgeObjectRelease();
  sub_100021AA4((uint64_t)v11, &qword_100BCF120);
}

uint64_t sub_10025AC58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v2 = LocalizedStringKey.init(stringLiteral:)(1701736260, 0xE400000000000000);
  result = Text.init(_:tableName:bundle:comment:)(v2, v4, v3 & 1, v5, 0, 0, 0, "Title for button to finish editing location list");
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8 & 1;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

uint64_t sub_10025ACD0()
{
  return Label.init(title:icon:)(sub_10025AD0C, 0, sub_10025AD34, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_10025AD0C@<X0>(uint64_t a1@<X8>)
{
  return sub_10025AFB8(0x73694C2074696445, 0xE900000000000074, (uint64_t)"Title for menu item to edit location list", a1);
}

uint64_t sub_10025AD34@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(systemName:)(0x6C69636E6570, 0xE600000000000000);
  *a1 = result;
  return result;
}

uint64_t sub_10025AD68()
{
  return Label.init(title:icon:)(sub_10025ADA4, 0, sub_10025ADD4, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_10025ADA4@<X0>(uint64_t a1@<X8>)
{
  return sub_10025AFB8(0x6163696669746F4ELL, 0xED0000736E6F6974, (uint64_t)"Title for menu item to open notification settings", a1);
}

uint64_t sub_10025ADD4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(systemName:)(0x6461622E6C6C6562, 0xEA00000000006567);
  *a1 = result;
  return result;
}

uint64_t sub_10025AE10()
{
  return Label.init(title:icon:)(sub_10025AE4C, 0, sub_10025AE70, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_10025AE4C@<X0>(uint64_t a1@<X8>)
{
  return sub_10025AFB8(0x737569736C6543, 0xE700000000000000, (uint64_t)"Title for menu item to change units to Celsius", a1);
}

double sub_10025AE70@<D0>(_QWORD *a1@<X8>)
{
  return sub_10025B030(&qword_100CAE5B0, a1);
}

void sub_10025AE7C(SEL *a1@<X3>, _BYTE *a2@<X8>)
{
  id v4;
  id v5;
  char v6;

  sub_100113B0C();
  swift_retain();
  v4 = sub_10017B254();
  sub_10009880C();
  v5 = objc_msgSend((id)objc_opt_self(NSUnitTemperature), *a1);
  v6 = static NSObject.== infix(_:_:)(v4, v5);

  *a2 = v6 & 1;
}

void sub_10025AF18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = static Animation.default.getter(a1);
  sub_1000BA684(v1, (uint64_t)&type metadata for (), v2);
  sub_10009880C();
  sub_10003BCFC();
}

uint64_t sub_10025AF54()
{
  return Label.init(title:icon:)(sub_10025AF90, 0, sub_10025B024, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_10025AF90@<X0>(uint64_t a1@<X8>)
{
  return sub_10025AFB8(0x65686E6572686146, 0xEA00000000007469, (uint64_t)"Title for menu item to change units to Fahrenheit", a1);
}

uint64_t sub_10025AFB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v6 = LocalizedStringKey.init(stringLiteral:)(a1, a2);
  result = Text.init(_:tableName:bundle:comment:)(v6, v8, v7 & 1, v9, 0, 0, 0, a3);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v12 & 1;
  *(_QWORD *)(a4 + 24) = v13;
  return result;
}

double sub_10025B024@<D0>(_QWORD *a1@<X8>)
{
  return sub_10025B030(&qword_100CAE5B8, a1);
}

double sub_10025B030@<D0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  if (qword_100BC1F08 != -1)
    swift_once(&qword_100BC1F08, sub_10025950C);
  *a2 = *a1;
  *(_QWORD *)&result = swift_retain().n128_u64[0];
  return result;
}

uint64_t sub_10025B080(uint64_t a1)
{
  _QWORD v2[4];

  v2[2] = a1;
  return Label.init(title:icon:)(sub_10025B680, v2, sub_10025B140, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_10025B0D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD v9[2];

  v3 = *(_QWORD *)(a1 + 64);
  v9[0] = *(_QWORD *)(a1 + 56);
  v9[1] = v3;
  v4 = sub_100114EF8();
  swift_bridgeObjectRetain(v3);
  result = Text.init<A>(_:)(v9, &type metadata for String, v4);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 16) = v7 & 1;
  *(_QWORD *)(a2 + 24) = v8;
  return result;
}

uint64_t sub_10025B140@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(systemName:)(0xD000000000000016, 0x80000001009F7260);
  *a1 = result;
  return result;
}

void sub_10025B17C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = static Animation.default.getter(a1);
  sub_1000BA684(v1, (uint64_t)&type metadata for (), v2);
  sub_10009880C();
  sub_10003BCFC();
}

uint64_t sub_10025B1B8(uint64_t a1, uint64_t (*a2)(void))
{
  sub_1000DB418((_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 40));
  return a2();
}

uint64_t sub_10025B1FC(uint64_t a1)
{
  _QWORD v2[4];

  v2[2] = a1;
  return Label.init(title:icon:)(sub_10025B6D4, v2, sub_10025B2BC, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_10025B254@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD v9[2];

  v3 = *(_QWORD *)(a1 + 80);
  v9[0] = *(_QWORD *)(a1 + 72);
  v9[1] = v3;
  v4 = sub_100114EF8();
  swift_bridgeObjectRetain(v3);
  result = Text.init<A>(_:)(v9, &type metadata for String, v4);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 16) = v7 & 1;
  *(_QWORD *)(a2 + 24) = v8;
  return result;
}

uint64_t sub_10025B2BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(systemName:)(0x61622E7472616863, 0xE900000000000072);
  *a1 = result;
  return result;
}

unint64_t sub_10025B2FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCF0F0;
  if (!qword_100BCF0F0)
  {
    v1 = sub_100075EB0(&qword_100BCF0E0);
    sub_10003D310(&qword_100BCF0F8, &qword_100BCF100, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    sub_10025B380();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCF0F0);
  }
  return result;
}

unint64_t sub_10025B380()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC4E48;
  if (!qword_100BC4E48)
  {
    v1 = type metadata accessor for AccessibilityAttachmentModifier(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for AccessibilityAttachmentModifier, v1);
    atomic_store(result, (unint64_t *)&qword_100BC4E48);
  }
  return result;
}

uint64_t sub_10025B3C0(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ListMenuView(a2, a1);
  return a2;
}

void sub_10025B3F8()
{
  uint64_t v0;

  sub_10025B17C(v0 + 16);
}

unint64_t sub_10025B418()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCF118;
  if (!qword_100BCF118)
  {
    v1 = sub_100075EB0(&qword_100BCF110);
    sub_1001CDA94();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCF118);
  }
  return result;
}

uint64_t sub_10025B484()
{
  uint64_t v0;

  return sub_10025B1B8(*(_QWORD *)(v0 + 16), (uint64_t (*)(void))sub_100404080);
}

uint64_t sub_10025B4A4@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_100259C10(*(_QWORD *)(v1 + 16), a1);
}

void sub_10025B4AC(uint64_t a1@<X8>)
{
  sub_10025A6F0(a1);
}

unint64_t sub_10025B4B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCF130;
  if (!qword_100BCF130)
  {
    v1 = sub_100075EB0(&qword_100BCF120);
    sub_10025B520();
    sub_1001CDA94();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCF130);
  }
  return result;
}

unint64_t sub_10025B520()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCF138;
  if (!qword_100BCF138)
  {
    v1 = sub_100075EB0(&qword_100BCF140);
    sub_10003D310((unint64_t *)&unk_100C0A520, &qword_100BCF148, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCF138);
  }
  return result;
}

void sub_10025B5A4(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_10025A8D8(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10025B5B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BCF120);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10025B600()
{
  uint64_t v0;

  sub_10025B17C(v0 + 16);
}

void sub_10025B624()
{
  uint64_t v0;

  sub_10025B17C(v0 + 16);
}

uint64_t sub_10025B644@<X0>(char *a1@<X8>)
{
  return sub_10025A234(a1);
}

uint64_t sub_10025B64C()
{
  uint64_t v0;

  return sub_10025A638(*(_QWORD *)(v0 + 16));
}

void sub_10025B658()
{
  uint64_t v0;

  sub_10025B17C(v0 + 16);
}

uint64_t sub_10025B678()
{
  uint64_t v0;

  return sub_10025B080(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10025B680@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10025B0D8(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10025B688()
{
  uint64_t v0;

  return sub_10025B1B8(*(_QWORD *)(v0 + 16), (uint64_t (*)(void))sub_10040425C);
}

void sub_10025B6AC()
{
  uint64_t v0;

  sub_10025B17C(v0 + 16);
}

uint64_t sub_10025B6CC()
{
  uint64_t v0;

  return sub_10025B1FC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10025B6D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10025B254(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10025B6DC()
{
  uint64_t v0;

  return sub_10025B1B8(*(_QWORD *)(v0 + 16), (uint64_t (*)(void))sub_100404254);
}

void sub_10025B700(_BYTE *a1@<X8>)
{
  sub_10025AE7C((SEL *)&selRef_fahrenheit, a1);
}

void sub_10025B728(uint64_t a1)
{
  sub_10025AF18(a1);
}

uint64_t sub_10025B74C()
{
  uint64_t v0;

  return sub_10025B1B8(*(_QWORD *)(v0 + 16), (uint64_t (*)(void))sub_1004040A4);
}

void sub_10025B770(_BYTE *a1@<X8>)
{
  sub_10025AE7C((SEL *)&selRef_celsius, a1);
}

uint64_t sub_10025B798()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[5]);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, 120, 7);
}

void sub_10025B7DC(uint64_t a1)
{
  sub_10025AF18(a1);
}

uint64_t sub_10025B800()
{
  uint64_t v0;

  return sub_10025B1B8(*(_QWORD *)(v0 + 16), (uint64_t (*)(void))sub_100404098);
}

uint64_t sub_10025B820()
{
  uint64_t v0;

  return sub_10025B1B8(*(_QWORD *)(v0 + 16), (uint64_t (*)(void))sub_100404090);
}

uint64_t sub_10025B840()
{
  uint64_t v0;

  return sub_10025B1B8(*(_QWORD *)(v0 + 16), (uint64_t (*)(void))sub_100404088);
}

void sub_10025B860()
{
  sub_10003D310(&qword_100BCF1C0, &qword_100BCF1C8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

uint64_t sub_10025B88C(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 0x4472656874616577 && a2 == 0xEB00000000617461)
  {
    swift_bridgeObjectRelease(0xEB00000000617461);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4472656874616577, 0xEB00000000617461, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

uint64_t sub_10025B928()
{
  return 0x4472656874616577;
}

uint64_t sub_10025B948(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  v4 = sub_1000BA294(&qword_100BCF1E8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100098728();
  v8 = v7 - v6;
  v9 = a1[3];
  v10 = a1[4];
  sub_1000DB418(a1, v9);
  v11 = sub_10025BCA0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MoonComponent.CodingKeys, &type metadata for MoonComponent.CodingKeys, v11, v9, v10);
  v12 = type metadata accessor for WeatherData(0);
  sub_10025BCDC(&qword_100BCF1F0, (uint64_t)&unk_1009CD5FC);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v2, v14, v4, v12, v13);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_10025BA48@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for WeatherData(0);
  __chkstk_darwin(v4);
  sub_100098728();
  v22 = v6 - v5;
  v7 = sub_1000BA294(&qword_100BCF1D0);
  v21 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100098728();
  v10 = v9 - v8;
  v11 = type metadata accessor for MoonComponent(0);
  __chkstk_darwin(v11);
  sub_100098728();
  v14 = v13 - v12;
  v15 = a1[3];
  v16 = a1[4];
  sub_1000DB418(a1, v15);
  v17 = sub_10025BCA0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MoonComponent.CodingKeys, &type metadata for MoonComponent.CodingKeys, v17, v15, v16);
  if (!v2)
  {
    sub_10025BCDC(&qword_100BCF1E0, (uint64_t)&unk_1009CD624);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v4, v18, v7, v4);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v10, v7);
    sub_1000A15B4(v22, v14, type metadata accessor for WeatherData);
    sub_1000A15B4(v14, a2, type metadata accessor for MoonComponent);
  }
  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
}

uint64_t sub_10025BBFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10025B88C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10025BC24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10025BCA0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10025BC4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10025BCA0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10025BC74@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10025BA48(a1, a2);
}

uint64_t sub_10025BC88(_QWORD *a1)
{
  return sub_10025B948(a1);
}

unint64_t sub_10025BCA0()
{
  unint64_t result;

  result = qword_100BCF1D8;
  if (!qword_100BCF1D8)
  {
    result = swift_getWitnessTable(&unk_10098C148, &type metadata for MoonComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCF1D8);
  }
  return result;
}

void sub_10025BCDC(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for WeatherData(255);
    atomic_store(swift_getWitnessTable(a2, v4), a1);
  }
  sub_10004A298();
}

uint64_t storeEnumTagSinglePayload for MoonComponent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10025BD58 + 4 * byte_10098BFF0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10025BD78 + 4 * byte_10098BFF5[v4]))();
}

_BYTE *sub_10025BD58(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10025BD78(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10025BD80(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10025BD88(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10025BD90(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10025BD98(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MoonComponent.CodingKeys()
{
  return &type metadata for MoonComponent.CodingKeys;
}

uint64_t *sub_10025BDB4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  int EnumCaseMultiPayload;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;

  v4 = type metadata accessor for WeatherData(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return a1;
  }
  v6 = (int *)v4;
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  v8 = *(int *)(v4 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Locale(0);
  swift_bridgeObjectRetain(v7);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v11))
  {
    v12 = sub_1000BA294(&qword_100BC3340);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v11);
  }
  v14 = v6[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for WeatherDataModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  v18 = v6[7];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = sub_1000BA294(&qword_100BC3348);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v20, 1, v21))
  {
    v22 = type metadata accessor for WeatherData.CachingState(0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v23 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v19, v20, v23);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v19, 0, 1, v21);
  }
  v24 = v6[8];
  v25 = (uint64_t *)((char *)a1 + v24);
  v26 = (uint64_t *)((char *)a2 + v24);
  v27 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v26);
  if (EnumCaseMultiPayload == 1)
  {
    v33 = type metadata accessor for WeatherStatisticsModel(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v25, v26, v33);
    v30 = v25;
    v31 = v27;
    v32 = 1;
    goto LABEL_13;
  }
  if (!EnumCaseMultiPayload)
  {
    v29 = v26[1];
    *v25 = *v26;
    v25[1] = v29;
    swift_bridgeObjectRetain(v29);
    v30 = v25;
    v31 = v27;
    v32 = 0;
LABEL_13:
    swift_storeEnumTagMultiPayload(v30, v31, v32);
    goto LABEL_15;
  }
  memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
LABEL_15:
  v34 = v6[9];
  v35 = (char *)a1 + v34;
  v36 = (char *)a2 + v34;
  v37 = type metadata accessor for WeatherDataOverrides(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v36, 1, v37))
  {
    v38 = sub_1000BA294(&qword_100BC3350);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    v39 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v36, 1, v39))
    {
      v40 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v35, v36, v39);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v35, 0, 1, v39);
    }
    v41 = *(int *)(v37 + 20);
    v42 = &v35[v41];
    v43 = &v36[v41];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v43, 1, v39))
    {
      v44 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v42, v43, v39);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v42, 0, 1, v39);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v35, 0, 1, v37);
  }
  return a1;
}

_QWORD *sub_10025C13C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  int EnumCaseMultiPayload;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  void *v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;

  *a1 = *a2;
  v4 = a2[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  v5 = (int *)type metadata accessor for WeatherData(0);
  v6 = v5[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Locale(0);
  v10 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v9);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    v13 = sub_1000BA294(&qword_100BC3340);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  v14 = v5[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for WeatherDataModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  v18 = v5[7];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = sub_1000BA294(&qword_100BC3348);
  v22 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v19, 1, v21);
  v23 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v20, 1, v21);
  if (v22)
  {
    if (!v23)
    {
      v24 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v19, v20, v24);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v19, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    sub_10025C6F0((uint64_t)v19);
LABEL_12:
    v25 = type metadata accessor for WeatherData.CachingState(0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  v47 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 24))(v19, v20, v47);
LABEL_13:
  if (a1 == a2)
    goto LABEL_20;
  v26 = v5[8];
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = (_QWORD *)((char *)a2 + v26);
  sub_1000979AC((uint64_t)a1 + v26, type metadata accessor for WeatherData.WeatherStatisticsState);
  v29 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v28);
  if (EnumCaseMultiPayload == 1)
  {
    v35 = type metadata accessor for WeatherStatisticsModel(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v27, v28, v35);
    v32 = v27;
    v33 = v29;
    v34 = 1;
    goto LABEL_18;
  }
  if (!EnumCaseMultiPayload)
  {
    *v27 = *v28;
    v31 = v28[1];
    v27[1] = v31;
    swift_bridgeObjectRetain(v31);
    v32 = v27;
    v33 = v29;
    v34 = 0;
LABEL_18:
    swift_storeEnumTagMultiPayload(v32, v33, v34);
    goto LABEL_20;
  }
  memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
LABEL_20:
  v36 = v5[9];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  v39 = type metadata accessor for WeatherDataOverrides(0);
  v40 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v37, 1, v39);
  v41 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v38, 1, v39);
  if (v40)
  {
    if (!v41)
    {
      v42 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v38, 1, v42))
      {
        v43 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v37, v38, v42);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v37, 0, 1, v42);
      }
      v51 = *(int *)(v39 + 20);
      v52 = &v37[v51];
      v53 = &v38[v51];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v53, 1, v42))
      {
        v54 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v52, v53, v42);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v52, 0, 1, v42);
      }
      v55 = (uint64_t)v37;
      v56 = v39;
      goto LABEL_38;
    }
    goto LABEL_26;
  }
  if (v41)
  {
    sub_1000979AC((uint64_t)v37, type metadata accessor for WeatherDataOverrides);
LABEL_26:
    v44 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC3350) - 8) + 64);
    v45 = v37;
    v46 = v38;
    goto LABEL_27;
  }
  v48 = type metadata accessor for Date(0);
  v49 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v37, 1, v48);
  v50 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v38, 1, v48);
  if (!v49)
  {
    v58 = *(_QWORD *)(v48 - 8);
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v58 + 24))(v37, v38, v48);
      goto LABEL_43;
    }
    (*(void (**)(char *, uint64_t))(v58 + 8))(v37, v48);
    goto LABEL_42;
  }
  if (v50)
  {
LABEL_42:
    v59 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v37, v38, v48);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v37, 0, 1, v48);
LABEL_43:
  v60 = *(int *)(v39 + 20);
  v61 = (uint64_t)&v37[v60];
  v62 = (uint64_t)&v38[v60];
  v63 = _s7Weather24LocationCompositionStateOwet_0(v61, 1, v48);
  v64 = _s7Weather24LocationCompositionStateOwet_0(v62, 1, v48);
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v61, v62, v48);
      v55 = v61;
      v56 = v48;
LABEL_38:
      _s7Weather24LocationCompositionStateOwst_0(v55, 0, 1, v56);
      return a1;
    }
  }
  else
  {
    v65 = *(_QWORD *)(v48 - 8);
    if (!v64)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 24))(v61, v62, v48);
      return a1;
    }
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v61, v48);
  }
  v44 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
  v45 = (void *)v61;
  v46 = (const void *)v62;
LABEL_27:
  memcpy(v45, v46, v44);
  return a1;
}

uint64_t sub_10025C6F0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BC3348);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *sub_10025C730(_OWORD *a1, _OWORD *a2)
{
  int *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;

  *a1 = *a2;
  v4 = (int *)type metadata accessor for WeatherData(0);
  v5 = v4[5];
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for Locale(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v8))
  {
    v9 = sub_1000BA294(&qword_100BC3340);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v6, 0, 1, v8);
  }
  v10 = v4[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for WeatherDataModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = v4[7];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = sub_1000BA294(&qword_100BC3348);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v17))
  {
    v18 = type metadata accessor for WeatherData.CachingState(0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v15, v16, v19);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 0, 1, v17);
  }
  v20 = v4[8];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
  if (swift_getEnumCaseMultiPayload(v22) == 1)
  {
    v24 = type metadata accessor for WeatherStatisticsModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v21, v22, v24);
    swift_storeEnumTagMultiPayload(v21, v23, 1);
  }
  else
  {
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  v25 = v4[9];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = type metadata accessor for WeatherDataOverrides(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v27, 1, v28))
  {
    v29 = sub_1000BA294(&qword_100BC3350);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v30 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v27, 1, v30))
    {
      v31 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v26, v27, v30);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v26, 0, 1, v30);
    }
    v32 = *(int *)(v28 + 20);
    v33 = &v26[v32];
    v34 = &v27[v32];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v34, 1, v30))
    {
      v35 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v33, v34, v30);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v33, 0, 1, v30);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v26, 0, 1, v28);
  }
  return a1;
}

_QWORD *sub_10025CA5C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  void *v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = (int *)type metadata accessor for WeatherData(0);
  v6 = v5[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Locale(0);
  v10 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v9);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    v13 = sub_1000BA294(&qword_100BC3340);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v7, v8, v9);
LABEL_7:
  v14 = v5[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for WeatherDataModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  v18 = v5[7];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = sub_1000BA294(&qword_100BC3348);
  v22 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v19, 1, v21);
  v23 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v20, 1, v21);
  if (v22)
  {
    if (!v23)
    {
      v24 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v19, v20, v24);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v19, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    sub_10025C6F0((uint64_t)v19);
LABEL_12:
    v25 = type metadata accessor for WeatherData.CachingState(0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  v42 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 40))(v19, v20, v42);
LABEL_13:
  if (a1 != a2)
  {
    v26 = v5[8];
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    sub_1000979AC((uint64_t)a1 + v26, type metadata accessor for WeatherData.WeatherStatisticsState);
    v29 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
    if (swift_getEnumCaseMultiPayload(v28) == 1)
    {
      v30 = type metadata accessor for WeatherStatisticsModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v27, v28, v30);
      swift_storeEnumTagMultiPayload(v27, v29, 1);
    }
    else
    {
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
  }
  v31 = v5[9];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = type metadata accessor for WeatherDataOverrides(0);
  v35 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v32, 1, v34);
  v36 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v33, 1, v34);
  if (v35)
  {
    if (!v36)
    {
      v37 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v33, 1, v37))
      {
        v38 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v32, v33, v37);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v32, 0, 1, v37);
      }
      v46 = *(int *)(v34 + 20);
      v47 = &v32[v46];
      v48 = &v33[v46];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v48, 1, v37))
      {
        v49 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v47, v48, v37);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v47, 0, 1, v37);
      }
      v50 = (uint64_t)v32;
      v51 = v34;
      goto LABEL_35;
    }
    goto LABEL_23;
  }
  if (v36)
  {
    sub_1000979AC((uint64_t)v32, type metadata accessor for WeatherDataOverrides);
LABEL_23:
    v39 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC3350) - 8) + 64);
    v40 = v32;
    v41 = v33;
    goto LABEL_24;
  }
  v43 = type metadata accessor for Date(0);
  v44 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v32, 1, v43);
  v45 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v33, 1, v43);
  if (!v44)
  {
    v53 = *(_QWORD *)(v43 - 8);
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 40))(v32, v33, v43);
      goto LABEL_40;
    }
    (*(void (**)(char *, uint64_t))(v53 + 8))(v32, v43);
    goto LABEL_39;
  }
  if (v45)
  {
LABEL_39:
    v54 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_40;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v32, v33, v43);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v32, 0, 1, v43);
LABEL_40:
  v55 = *(int *)(v34 + 20);
  v56 = (uint64_t)&v32[v55];
  v57 = (uint64_t)&v33[v55];
  v58 = _s7Weather24LocationCompositionStateOwet_0(v56, 1, v43);
  v59 = _s7Weather24LocationCompositionStateOwet_0(v57, 1, v43);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v56, v57, v43);
      v50 = v56;
      v51 = v43;
LABEL_35:
      _s7Weather24LocationCompositionStateOwst_0(v50, 0, 1, v51);
      return a1;
    }
  }
  else
  {
    v60 = *(_QWORD *)(v43 - 8);
    if (!v59)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 40))(v56, v57, v43);
      return a1;
    }
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v56, v43);
  }
  v39 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
  v40 = (void *)v56;
  v41 = (const void *)v57;
LABEL_24:
  memcpy(v40, v41, v39);
  return a1;
}

uint64_t sub_10025CFD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10025CFE4);
}

uint64_t sub_10025CFE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1000BBE4C();
  return _s7Weather24LocationCompositionStateOwet_0(v1, v0, v2);
}

uint64_t sub_10025D00C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10025D018);
}

uint64_t sub_10025D018()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1000BBE4C();
  return _s7Weather24LocationCompositionStateOwst_0(v1, v0, v0, v2);
}

unint64_t sub_10025D048()
{
  unint64_t result;

  result = qword_100BCF288;
  if (!qword_100BCF288)
  {
    result = swift_getWitnessTable(&unk_10098C120, &type metadata for MoonComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCF288);
  }
  return result;
}

unint64_t sub_10025D088()
{
  unint64_t result;

  result = qword_100BCF290;
  if (!qword_100BCF290)
  {
    result = swift_getWitnessTable(&unk_10098C090, &type metadata for MoonComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCF290);
  }
  return result;
}

unint64_t sub_10025D0C8()
{
  unint64_t result;

  result = qword_100BCF298;
  if (!qword_100BCF298)
  {
    result = swift_getWitnessTable(&unk_10098C0B8, &type metadata for MoonComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCF298);
  }
  return result;
}

_QWORD *DiagnosticFileProvider.files()()
{
  _QWORD *v0;

  v0 = sub_10025D140();
  sub_10025D384();
  sub_10025E1AC();
  return v0;
}

_QWORD *sub_10025D140()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  void (*v8)(_BYTE *, uint64_t);
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  double v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  _BYTE v24[16];
  id v25;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v24[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v6 = &v24[-v5];
  type metadata accessor for AppGroup(0);
  v7 = static AppGroup.weather.getter();
  AppGroup.containerURL.getter();
  swift_release(v7);
  URL.appendingPathComponent(_:)(0x74736F6E67616964, 0xEB00000000736369);
  v8 = *(void (**)(_BYTE *, uint64_t))(v1 + 8);
  v8(v3, v0);
  v9 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL.path.getter(v9);
  v11 = v10;
  v12 = String._bridgeToObjectiveC()();
  *(_QWORD *)&v13 = swift_bridgeObjectRelease(v11).n128_u64[0];
  v25 = 0;
  v14 = objc_msgSend(v9, "contentsOfDirectoryAtPath:error:", v12, &v25, v13);

  v15 = v25;
  if (v14)
  {
    v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, &type metadata for String);
    v17 = v15;

    __chkstk_darwin(v18);
    *(_QWORD *)&v24[-16] = v6;
    sub_10084A3E0((uint64_t)sub_10025F00C, (uint64_t)&v24[-32], v16);
    v20 = v19;
    v8(v6, v0);
    swift_bridgeObjectRelease(v16);
  }
  else
  {
    v21 = v25;
    v22 = _convertNSErrorToError(_:)(v15);

    swift_willThrow();
    swift_errorRelease(v22);
    v8(v6, v0);
    return _swiftEmptyArrayStorage;
  }
  return (_QWORD *)v20;
}

_QWORD *sub_10025D384()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t inited;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_BYTE *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _BYTE v78[128];

  v0 = type metadata accessor for Database.Location(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v78[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v6 = &v78[-v5];
  __chkstk_darwin(v7);
  v9 = &v78[-v8];
  __chkstk_darwin(v10);
  v12 = &v78[-v11];
  __chkstk_darwin(v13);
  v15 = &v78[-v14];
  v16 = sub_1000BA294(&qword_100BC39A8);
  inited = swift_initStackObject(v16, v78);
  *(_OWORD *)(inited + 16) = xmmword_10098C1A0;
  type metadata accessor for NotificationStore(0);
  v18 = static NotificationStore.location.getter();
  v19 = Database.Location.path.getter(v18);
  v21 = v20;
  v22 = *(void (**)(_BYTE *, uint64_t))(v1 + 8);
  v22(v15, v0);
  *(_QWORD *)(inited + 32) = v19;
  *(_QWORD *)(inited + 40) = v21;
  type metadata accessor for GeocodeStore(0);
  v23 = static GeocodeStore.location.getter();
  v24 = Database.Location.path.getter(v23);
  v26 = v25;
  v22(v12, v0);
  *(_QWORD *)(inited + 48) = v24;
  *(_QWORD *)(inited + 56) = v26;
  type metadata accessor for WeatherDataStore(0);
  v27 = static WeatherDataStore.location.getter();
  v28 = Database.Location.path.getter(v27);
  v30 = v29;
  v22(v9, v0);
  *(_QWORD *)(inited + 64) = v28;
  *(_QWORD *)(inited + 72) = v30;
  type metadata accessor for AQIScaleStore(0);
  *(_QWORD *)(inited + 80) = static AQIScaleStore.locationPath.getter();
  *(_QWORD *)(inited + 88) = v31;
  type metadata accessor for LocationMetadataStore(0);
  v32 = static LocationMetadataStore.location.getter();
  v33 = Database.Location.path.getter(v32);
  v35 = v34;
  v22(v6, v0);
  *(_QWORD *)(inited + 96) = v33;
  *(_QWORD *)(inited + 104) = v35;
  type metadata accessor for WeatherStatisticsDataStore(0);
  v36 = static WeatherStatisticsDataStore.location.getter();
  v37 = Database.Location.path.getter(v36);
  v39 = v38;
  v22(v3, v0);
  *(_QWORD *)(inited + 112) = v37;
  *(_QWORD *)(inited + 120) = v39;
  v40 = *(_QWORD *)(inited + 40);
  if (v40)
  {
    v41 = *(_QWORD *)(inited + 32);
    swift_bridgeObjectRetain(*(_QWORD *)(inited + 40));
    sub_1000B2E08();
    v43 = v42;
    v44 = v42[2];
    if (v44 >= v42[3] >> 1)
    {
      sub_1000B2E08();
      v43 = v67;
    }
    v43[2] = v44 + 1;
    v45 = &v43[2 * v44];
    v45[4] = v41;
    v45[5] = v40;
  }
  else
  {
    v43 = _swiftEmptyArrayStorage;
  }
  v46 = *(_QWORD *)(inited + 56);
  if (v46)
  {
    v47 = *(_QWORD *)(inited + 48);
    swift_bridgeObjectRetain(*(_QWORD *)(inited + 56));
    if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
    {
      sub_1000B2E08();
      v43 = v68;
    }
    v48 = v43[2];
    if (v48 >= v43[3] >> 1)
    {
      sub_1000B2E08();
      v43 = v69;
    }
    v43[2] = v48 + 1;
    v49 = &v43[2 * v48];
    v49[4] = v47;
    v49[5] = v46;
  }
  v50 = *(_QWORD *)(inited + 72);
  if (v50)
  {
    v51 = *(_QWORD *)(inited + 64);
    swift_bridgeObjectRetain(*(_QWORD *)(inited + 72));
    if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
    {
      sub_1000B2E08();
      v43 = v70;
    }
    v52 = v43[2];
    if (v52 >= v43[3] >> 1)
    {
      sub_1000B2E08();
      v43 = v71;
    }
    v43[2] = v52 + 1;
    v53 = &v43[2 * v52];
    v53[4] = v51;
    v53[5] = v50;
  }
  v54 = *(_QWORD *)(inited + 88);
  if (v54)
  {
    v55 = *(_QWORD *)(inited + 80);
    swift_bridgeObjectRetain(*(_QWORD *)(inited + 88));
    if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
    {
      sub_1000B2E08();
      v43 = v72;
    }
    v56 = v43[2];
    if (v56 >= v43[3] >> 1)
    {
      sub_1000B2E08();
      v43 = v73;
    }
    v43[2] = v56 + 1;
    v57 = &v43[2 * v56];
    v57[4] = v55;
    v57[5] = v54;
  }
  v58 = *(_QWORD *)(inited + 104);
  if (v58)
  {
    v59 = *(_QWORD *)(inited + 96);
    swift_bridgeObjectRetain(*(_QWORD *)(inited + 104));
    if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
    {
      sub_1000B2E08();
      v43 = v74;
    }
    v60 = v43[2];
    if (v60 >= v43[3] >> 1)
    {
      sub_1000B2E08();
      v43 = v75;
    }
    v43[2] = v60 + 1;
    v61 = &v43[2 * v60];
    v61[4] = v59;
    v61[5] = v58;
  }
  v62 = *(_QWORD *)(inited + 120);
  if (v62)
  {
    v63 = *(_QWORD *)(inited + 112);
    swift_bridgeObjectRetain(*(_QWORD *)(inited + 120));
    if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
    {
      sub_1000B2E08();
      v43 = v76;
    }
    v64 = v43[2];
    if (v64 >= v43[3] >> 1)
    {
      sub_1000B2E08();
      v43 = v77;
    }
    v43[2] = v64 + 1;
    v65 = &v43[2 * v64];
    v65[4] = v63;
    v65[5] = v62;
  }
  swift_setDeallocating(inited);
  sub_10011EA28();
  return v43;
}

double DiagnosticFileProvider.exportDirectory()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  NSString *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, _QWORD *);
  uint64_t v24;
  __n128 v25;
  void (*v26)(char *, uint64_t, __n128);
  id v27;
  NSURL *v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  NSURL *v43;
  void *v44;
  void *v45;
  NSURL *v46;
  void *v47;
  void *v48;
  unsigned int v49;
  id v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  double result;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  __int128 v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  _QWORD *v79;
  char *v80;
  _QWORD *v81;

  v74 = a1;
  v79 = (_QWORD *)type metadata accessor for UUID(0);
  v1 = *(v79 - 1);
  __chkstk_darwin(v79);
  v3 = (char *)&v74 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v80 = (char *)&v74 - v9;
  __chkstk_darwin(v10);
  v12 = (char *)&v74 - v11;
  v13 = sub_10025D140();
  sub_10025D384();
  v81 = v13;
  sub_10025E1AC();
  v75 = v81;
  v14 = NSTemporaryDirectory();
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;

  URL.init(fileURLWithPath:isDirectory:)(v15, v17, 1);
  swift_bridgeObjectRelease();
  v19 = UUID.init()(v18);
  v20 = UUID.uuidString.getter(v19);
  v22 = v21;
  v23 = *(void (**)(char *, _QWORD *))(v1 + 8);
  v24 = v74;
  v23(v3, v79);
  URL.appendingPathComponent(_:)(v20, v22);
  v25 = swift_bridgeObjectRelease();
  v26 = *(void (**)(char *, uint64_t, __n128))(v5 + 8);
  v26(v12, v4, v25);
  v79 = (_QWORD *)objc_opt_self(NSFileManager);
  v27 = objc_msgSend(v79, "defaultManager");
  URL._bridgeToObjectiveC()(v28);
  v30 = v29;
  v81 = 0;
  LODWORD(v15) = objc_msgSend(v27, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v29, 1, 0, &v81);

  v31 = v81;
  if ((_DWORD)v15)
  {
    v32 = v75[2];
    if (v32)
    {
      v33 = v75;
      v78 = (void (*)(char *, uint64_t))v26;
      v34 = v81;
      v35 = v33 + 5;
      v76 = xmmword_10097CA50;
      do
      {
        v37 = *(v35 - 1);
        v36 = *v35;
        v38 = swift_bridgeObjectRetain(*v35);
        URL.init(fileURLWithPath:)(v37, v36, v38);
        swift_bridgeObjectRelease();
        v40 = URL.lastPathComponent.getter(v39);
        URL.appendingPathComponent(_:)(v40, v41);
        v42 = objc_msgSend(v79, "defaultManager", swift_bridgeObjectRelease().n128_f64[0]);
        URL._bridgeToObjectiveC()(v43);
        v45 = v44;
        URL._bridgeToObjectiveC()(v46);
        v48 = v47;
        v81 = 0;
        v49 = objc_msgSend(v42, "copyItemAtURL:toURL:error:", v45, v47, &v81);

        v50 = v81;
        if (v49)
        {
          v51 = v81;
        }
        else
        {
          v52 = v81;
          v53 = (_QWORD *)_convertNSErrorToError(_:)(v50);

          v56 = swift_willThrow(v54, v55);
          LODWORD(v77) = static os_log_type_t.error.getter(v56, v57);
          v58 = sub_1000BA294(&qword_100BC3C38);
          v59 = swift_allocObject(v58, 72, 7);
          *(_OWORD *)(v59 + 16) = v76;
          v81 = v53;
          swift_errorRetain(v53);
          sub_1000BA294(&qword_100BD7910);
          v60 = String.init<A>(describing:)(&v81);
          v61 = v7;
          v62 = v4;
          v63 = v24;
          v65 = v64;
          *(_QWORD *)(v59 + 56) = &type metadata for String;
          *(_QWORD *)(v59 + 64) = sub_1000B2E24();
          *(_QWORD *)(v59 + 32) = v60;
          *(_QWORD *)(v59 + 40) = v65;
          sub_1000A0794(0, (unint64_t *)&qword_100BC2998, OS_os_log_ptr);
          v66 = (void *)static OS_os_log.default.getter();
          os_log(_:dso:log:type:_:)("Failed to copy diagnostic file to temp directory with error: %@", 63, 2, &_mh_execute_header, v66, v77, v59);
          swift_bridgeObjectRelease();

          v24 = v63;
          v4 = v62;
          v7 = v61;
          swift_errorRelease(v53);
          v77 = 0;
        }
        v35 += 2;
        v67 = v78;
        v78(v7, v4);
        v67(v80, v4);
        --v32;
      }
      while (v32);
    }
    else
    {
      v73 = v81;
    }
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  }
  else
  {
    v68 = v4;
    v69 = v81;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)(v31);

    swift_willThrow(v70, v71);
    ((void (*)(uint64_t, uint64_t))v26)(v24, v68);
  }
  return result;
}

id LocalSearchCompleterManager.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

id DiagnosticFileProvider.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "init");
}

id UserNotificationMonitor.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10025DF30@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = URL.appendingPathComponent(_:)(*a1, a1[1]);
  v9 = URL.path.getter(v8);
  v11 = v10;
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *a2 = v9;
  a2[1] = v11;
  return result;
}

void sub_10025DFE0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v15 = a1;
    else
      v15 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v15);
    sub_1000986E8();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if ((unint64_t)*v1 >> 62)
  {
    if (v4 < 0)
      v16 = *v1;
    else
      v16 = v4 & 0xFFFFFFFFFFFFFF8;
    sub_1000878DC();
    v5 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
    goto LABEL_30;
  }
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_16;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    sub_1000878DC();
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_16:
    sub_10025ED84(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v10 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v17 = v4;
    else
      v17 = v4 & 0xFFFFFFFFFFFFFF8;
    sub_1000878DC();
    v9 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease();
  }
  if (v10 < 1)
    goto LABEL_20;
  v11 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v12 = __OFADD__(v11, v10);
  v13 = v11 + v10;
  if (!v12)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v13;
LABEL_20:
    swift_bridgeObjectRelease();
    specialized Array._endMutation()(v14);
    return;
  }
  __break(1u);
}

void sub_10025E184(uint64_t a1)
{
  sub_1000F5498(a1, (uint64_t (*)(void))sub_1005FED88, type metadata accessor for OverviewTableRowViewModel);
}

void sub_10025E198(uint64_t a1)
{
  sub_1000F5498(a1, (uint64_t (*)(void))sub_1005FEE8C, (uint64_t (*)(_QWORD))&type metadata accessor for HourWeather);
}

void sub_10025E1AC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000C5BEC();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_1000DB814() || (sub_1000CFBDC(), !(v6 ^ v4 | v5)))
  {
    sub_1000BD35C();
    sub_1000B2E08();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_1000D94AC();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_1000D1168();
  sub_10009AB84();
  if (!v3)
  {
LABEL_11:
    sub_1000986E8();
    *v1 = v2;
    sub_10004A2A0();
    return;
  }
  sub_1000D004C();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v8;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t type metadata accessor for DiagnosticFileProvider()
{
  return objc_opt_self(WDEDiagnosticFileProvider);
}

void sub_10025E260(uint64_t a1)
{
  sub_1000F5498(a1, (uint64_t (*)(void))sub_1005FEE78, type metadata accessor for ConditionDetailPlatterViewModel);
}

void sub_10025E274(uint64_t a1)
{
  sub_1000F5498(a1, (uint64_t (*)(void))sub_1005FF0F0, type metadata accessor for UnitsConfigurationViewModel.Temperature);
}

void sub_10025E288(uint64_t a1)
{
  sub_1000F5498(a1, (uint64_t (*)(void))sub_1005FF104, (uint64_t (*)(_QWORD))&type metadata accessor for NotificationSubscription.Location);
}

void sub_10025E29C(uint64_t a1)
{
  sub_1000F5498(a1, (uint64_t (*)(void))sub_1005FECEC, (uint64_t (*)(_QWORD))&type metadata accessor for DetailChartDataElement);
}

void sub_10025E2B0(uint64_t a1)
{
  sub_1000F5498(a1, (uint64_t (*)(void))sub_1005FF1FC, type metadata accessor for ScrubberHour);
}

void sub_10025E2C4(uint64_t a1)
{
  sub_1000F5498(a1, (uint64_t (*)(void))sub_100119A2C, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
}

void sub_10025E2D8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_1000C5BEC();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_1000DB814() || (sub_1000CFBDC(), !(v6 ^ v4 | v5)))
  {
    sub_1000BD35C();
    sub_1005FF3E8(v7, v8, v9, v10);
    v2 = v11;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_1000D94AC();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_1000D1168();
  sub_10025EC38();
  if (!v3)
  {
LABEL_11:
    sub_1000986E8();
    *v1 = v2;
    sub_10004A2A0();
    return;
  }
  sub_1000D004C();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v12;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_10025E370(uint64_t a1)
{
  sub_1000F5498(a1, (uint64_t (*)(void))sub_1005FF40C, type metadata accessor for ListLocationViewModel);
}

uint64_t sub_10025E384(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025E390(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025E39C(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025E3A8(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025E3B4(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025E3C0(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025E3CC(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025E3D8(uint64_t a1, uint64_t a2)
{
  return sub_1001202C0(a1, a2);
}

uint64_t sub_10025E3E4()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1000B4628();
  if (v3 < 0)
  {
    sub_1000BA698();
    sub_1000C36A8();
  }
  else
  {
    v4 = v0 + 80 * v1;
    if (v2 + 80 * v1 > v0)
    {
      v5 = v4 >= v2;
      v6 = v4 == v2;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    if (v6 || !v5)
      return sub_1000C4630();
    sub_1000BA698();
    sub_1000C25D8();
  }
  result = sub_1000BBE5C(v8, v9, v10, v11, v12, v13, v14);
  __break(1u);
  return result;
}

uint64_t sub_10025E47C(uint64_t a1, uint64_t a2)
{
  return sub_1001202C0(a1, a2);
}

uint64_t sub_10025E488(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025E494(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  const char *v6;
  uint64_t v7;

  if (a2 < 0)
  {
    v6 = "UnsafeMutablePointer.initialize with negative count";
    v7 = 51;
  }
  else
  {
    if (a3 + 8 * a2 <= a1 || a1 + 8 * a2 <= a3)
    {
      sub_1000A0794(0, &qword_100BCF2F0, UIApplicationShortcutItem_ptr);
      return swift_arrayInitWithCopy(a3);
    }
    v6 = "UnsafeMutablePointer.initialize overlapping range";
    v7 = 49;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v6, v7, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

uint64_t sub_10025E58C()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  BOOL v3;
  BOOL v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_1000B4628();
  if (v0 < 0)
  {
    sub_1000BA698();
    sub_1000C36A8();
  }
  else
  {
    sub_1000D8E60();
    if (!v4 && v3)
    {
      v3 = v2 >= v1;
      v4 = v2 == v1;
    }
    else
    {
      v3 = 0;
      v4 = 0;
    }
    if (v4 || !v3)
      return sub_1000C4630();
    sub_1000BA698();
    sub_1000C25D8();
  }
  result = sub_1000BBE5C(v6, v7, v8, v9, v10, v11, v12);
  __break(1u);
  return result;
}

uint64_t sub_10025E614(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025E620(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025E62C(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025E638(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025E644(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025E650(uint64_t a1, uint64_t a2)
{
  return sub_1001202C0(a1, a2);
}

uint64_t sub_10025E65C()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1000B4628();
  if (v3 < 0)
  {
    sub_1000BA698();
    sub_1000C36A8();
  }
  else
  {
    v4 = v0 + 32 * v1;
    if (v2 + 32 * v1 > v0)
    {
      v5 = v4 >= v2;
      v6 = v4 == v2;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    if (v6 || !v5)
      return sub_1000C4630();
    sub_1000BA698();
    sub_1000C25D8();
  }
  result = sub_1000BBE5C(v8, v9, v10, v11, v12, v13, v14);
  __break(1u);
  return result;
}

uint64_t sub_10025E6F0()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1000B4628();
  if (v3 < 0)
  {
    sub_1000BA698();
    sub_1000C36A8();
  }
  else
  {
    v4 = v0 + 120 * v1;
    if (v2 + 120 * v1 > v0)
    {
      v5 = v4 >= v2;
      v6 = v4 == v2;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    if (v6 || !v5)
      return sub_1000C4630();
    sub_1000BA698();
    sub_1000C25D8();
  }
  result = sub_1000BBE5C(v8, v9, v10, v11, v12, v13, v14);
  __break(1u);
  return result;
}

void *sub_10025E78C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  void *v6;
  const void *v7;
  size_t v8;
  void *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 < 0)
  {
    sub_1000BA698();
    sub_1000C36A8();
  }
  else
  {
    v3 = a1 + 8 * a2;
    if (a3 + 8 * a2 > a1)
    {
      v4 = v3 >= a3;
      v5 = v3 == a3;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      v6 = (void *)sub_1000D1668();
      return sub_1000DCC24(v6, v7, v8);
    }
    sub_1000BA698();
    sub_1000C25D8();
  }
  result = (void *)sub_1000BBE5C(v10, v11, v12, v13, v14, v15, v16);
  __break(1u);
  return result;
}

uint64_t sub_10025E81C()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1000B4628();
  if (v3 < 0)
  {
    sub_1000BA698();
    sub_1000C36A8();
  }
  else
  {
    v4 = v0 + 88 * v1;
    if (v2 + 88 * v1 > v0)
    {
      v5 = v4 >= v2;
      v6 = v4 == v2;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    if (v6 || !v5)
      return sub_1000C4630();
    sub_1000BA698();
    sub_1000C25D8();
  }
  result = sub_1000BBE5C(v8, v9, v10, v11, v12, v13, v14);
  __break(1u);
  return result;
}

uint64_t sub_10025E8B8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 < 0)
  {
    sub_1000BA698();
    sub_1000C36A8();
  }
  else
  {
    sub_1000DF4C4();
    v5 = v3 + 40 * v4;
    if (v2 + 40 * v4 > v3)
    {
      v6 = v5 >= v2;
      v7 = v5 == v2;
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    if (v7 || !v6)
    {
      sub_1000BA294(&qword_100BCF2C8);
      v8 = sub_1000E6F44();
      return sub_1000DD83C(v8);
    }
    sub_1000BA698();
    sub_1000C25D8();
  }
  result = sub_1000BBE5C(v10, v11, v12, v13, v14, v15, v16);
  __break(1u);
  return result;
}

uint64_t sub_10025E958(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025E964(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025E970(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025E97C(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025E988(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025E994(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025E9A0(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025E9AC(uint64_t a1, uint64_t a2)
{
  return sub_1001202C0(a1, a2);
}

uint64_t sub_10025E9B8(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025E9C4(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025E9D0(uint64_t a1, uint64_t a2)
{
  return sub_10025EA54(a1, a2);
}

uint64_t sub_10025E9DC(uint64_t a1, uint64_t a2)
{
  return sub_10025EA54(a1, a2);
}

uint64_t sub_10025E9E8(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025E9F4(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025EA00(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025EA0C(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025EA18(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025EA24(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025EA30(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025EA3C(uint64_t a1, uint64_t a2)
{
  return sub_10025EA54(a1, a2);
}

uint64_t sub_10025EA48(uint64_t a1, uint64_t a2)
{
  return sub_10025EA54(a1, a2);
}

uint64_t sub_10025EA54(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 < 0)
  {
    sub_1000BA698();
    sub_1000C36A8();
  }
  else
  {
    sub_1000DF4C4();
    v6 = v4 + 24 * v5;
    if (v2 + 24 * v5 > v4)
    {
      v7 = v6 >= v2;
      v8 = v6 == v2;
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    if (v8 || !v7)
    {
      sub_1000BA294(v3);
      v9 = sub_1000E6F44();
      return sub_1000DD83C(v9);
    }
    sub_1000BA698();
    sub_1000C25D8();
  }
  result = sub_1000BBE5C(v11, v12, v13, v14, v15, v16, v17);
  __break(1u);
  return result;
}

uint64_t sub_10025EAF0()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  BOOL v3;
  BOOL v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_1000B4628();
  if (v0 < 0)
  {
    sub_1000BA698();
    sub_1000C36A8();
  }
  else
  {
    sub_1000D9C04();
    if (!v4 && v3)
    {
      v3 = v2 >= v1;
      v4 = v2 == v1;
    }
    else
    {
      v3 = 0;
      v4 = 0;
    }
    if (v4 || !v3)
      return sub_1000C4630();
    sub_1000BA698();
    sub_1000C25D8();
  }
  result = sub_1000BBE5C(v6, v7, v8, v9, v10, v11, v12);
  __break(1u);
  return result;
}

uint64_t sub_10025EB78(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025EB84(uint64_t a1, uint64_t a2)
{
  return sub_1001202C0(a1, a2);
}

uint64_t sub_10025EB90(uint64_t a1, uint64_t a2)
{
  return sub_1001202C0(a1, a2);
}

void *sub_10025EB9C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  void *v6;
  const void *v7;
  size_t v8;
  void *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 < 0)
  {
    sub_1000BA698();
    sub_1000C36A8();
  }
  else
  {
    v3 = a1 + 32 * a2;
    if (a3 + 32 * a2 > a1)
    {
      v4 = v3 >= a3;
      v5 = v3 == a3;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      v6 = (void *)sub_1000D1668();
      return sub_1000DCC24(v6, v7, v8);
    }
    sub_1000BA698();
    sub_1000C25D8();
  }
  result = (void *)sub_1000BBE5C(v10, v11, v12, v13, v14, v15, v16);
  __break(1u);
  return result;
}

uint64_t sub_10025EC2C(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025EC38()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1000B4628();
  if (v3 < 0)
  {
    sub_1000BA698();
    sub_1000C36A8();
  }
  else
  {
    v4 = v0 + 40 * v1;
    if (v2 + 40 * v1 > v0)
    {
      v5 = v4 >= v2;
      v6 = v4 == v2;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    if (v6 || !v5)
      return sub_1000C4630();
    sub_1000BA698();
    sub_1000C25D8();
  }
  result = sub_1000BBE5C(v8, v9, v10, v11, v12, v13, v14);
  __break(1u);
  return result;
}

uint64_t sub_10025ECD0(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025ECDC(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025ECE8(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10025ECF4(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  void (*v3)(_QWORD);
  unint64_t v4;
  char v5;
  char v6;
  BOOL v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 < 0)
  {
    sub_1000BA698();
    sub_1000C36A8();
  }
  else
  {
    sub_1000DF4C4();
    v3(0);
    sub_1000C141C();
    if (!v6 & v5)
      v7 = v4 > v2;
    else
      v7 = 0;
    if (!v7)
    {
      v8 = sub_1000E6F44();
      return sub_1000DD83C(v8);
    }
    sub_1000BA698();
    sub_1000C25D8();
  }
  result = sub_1000BBE5C(v10, v11, v12, v13, v14, v15, v16);
  __break(1u);
  return result;
}

void sub_10025ED84(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t i;
  void (*v11)(_QWORD *);
  id *v12;
  id v13;
  uint64_t v14;
  _QWORD v15[4];

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v14 = a3;
    else
      v14 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease();
    if (!v7)
      return;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return;
  }
  if (!a1)
  {
LABEL_23:
    __break(1u);
    return;
  }
  if (!v6)
  {
    if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
    {
      sub_10025E494((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10), a1);
      return;
    }
    __break(1u);
    goto LABEL_21;
  }
  if (a3 < 0)
    v8 = a3;
  else
    v8 = a3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a3);
  v9 = _CocoaArrayWrapper.endIndex.getter(v8);
  swift_bridgeObjectRelease();
  if (v9 > a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v7 < 1)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  sub_10025EF5C();
  swift_bridgeObjectRetain(a3);
  for (i = 0; i != v7; ++i)
  {
    sub_1000BA294(&qword_100BCF2E0);
    v11 = sub_10025EF08(v15, i, a3);
    v13 = *v12;
    ((void (*)(_QWORD *, _QWORD))v11)(v15, 0);
    *(_QWORD *)(a1 + 8 * i) = v13;
  }
  swift_bridgeObjectRelease();
}

void (*sub_10025EF08(_QWORD *a1, unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_10025EFA0(v6, a2, a3);
  return sub_100174830;
}

unint64_t sub_10025EF5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCF2E8;
  if (!qword_100BCF2E8)
  {
    v1 = sub_100075EB0(&qword_100BCF2E0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100BCF2E8);
  }
  return result;
}

void (*sub_10025EFA0(_QWORD *a1, unint64_t a2, uint64_t a3))(id *a1)
{
  unint64_t v6;
  id v7;

  v6 = a3 & 0xC000000000000001;
  sub_1001215C8(a2, (a3 & 0xC000000000000001) == 0, a3);
  if (v6)
    v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
  else
    v7 = *(id *)(a3 + 8 * a2 + 32);
  *a1 = v7;
  return destroy for ConfiguredUnitState;
}

uint64_t sub_10025F00C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10025DF30(a1, a2);
}

_QWORD *sub_10025F028(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Location(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v9 = (_QWORD *)((char *)a1 + v8);
    v10 = (_QWORD *)((char *)a2 + v8);
    v11 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, (uint64_t)v11))
    {
      v12 = sub_1000BA294(&qword_100BCB0D0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      *v9 = *v10;
      v14 = v11[5];
      v15 = (char *)v9 + v14;
      v16 = (char *)v10 + v14;
      v17 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      *(_QWORD *)((char *)v9 + v11[6]) = *(_QWORD *)((char *)v10 + v11[6]);
      *(_QWORD *)((char *)v9 + v11[7]) = *(_QWORD *)((char *)v10 + v11[7]);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, (uint64_t)v11);
    }
    v18 = a3[7];
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    v21 = *((_OWORD *)v20 + 1);
    *(_OWORD *)v19 = *(_OWORD *)v20;
    *((_OWORD *)v19 + 1) = v21;
    v19[32] = v20[32];
  }
  return a1;
}

uint64_t sub_10025F188(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 24);
  v6 = type metadata accessor for DetailHeroChartLollipopPosition(0);
  result = _s7Weather24LocationCompositionStateOwet_0(v5, 1, v6);
  if (!(_DWORD)result)
  {
    v8 = v5 + *(int *)(v6 + 20);
    v9 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  return result;
}

uint64_t sub_10025F218(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v6 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, (uint64_t)v10))
  {
    v11 = sub_1000BA294(&qword_100BCB0D0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    *v8 = *v9;
    v12 = v10[5];
    v13 = (char *)v8 + v12;
    v14 = (char *)v9 + v12;
    v15 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    *(_QWORD *)((char *)v8 + v10[6]) = *(_QWORD *)((char *)v9 + v10[6]);
    *(_QWORD *)((char *)v8 + v10[7]) = *(_QWORD *)((char *)v9 + v10[7]);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, (uint64_t)v10);
  }
  v16 = a3[7];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v19;
  *(_BYTE *)(v17 + 32) = *(_BYTE *)(v18 + 32);
  return a1;
}

uint64_t sub_10025F34C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int *v10;
  int v11;
  int v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v6 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, (uint64_t)v10);
  v12 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, (uint64_t)v10);
  if (!v11)
  {
    if (!v12)
    {
      *v8 = *v9;
      v24 = v10[5];
      v25 = (char *)v8 + v24;
      v26 = (char *)v9 + v24;
      v27 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 24))(v25, v26, v27);
      *(_QWORD *)((char *)v8 + v10[6]) = *(_QWORD *)((char *)v9 + v10[6]);
      *(_QWORD *)((char *)v8 + v10[7]) = *(_QWORD *)((char *)v9 + v10[7]);
      goto LABEL_7;
    }
    sub_1000215BC((uint64_t)v8, type metadata accessor for DetailHeroChartLollipopPosition);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v17 = sub_1000BA294(&qword_100BCB0D0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  *v8 = *v9;
  v13 = v10[5];
  v14 = (char *)v8 + v13;
  v15 = (char *)v9 + v13;
  v16 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  *(_QWORD *)((char *)v8 + v10[6]) = *(_QWORD *)((char *)v9 + v10[6]);
  *(_QWORD *)((char *)v8 + v10[7]) = *(_QWORD *)((char *)v9 + v10[7]);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, (uint64_t)v10);
LABEL_7:
  v18 = a3[7];
  v19 = a1 + v18;
  v20 = (__int128 *)(a2 + v18);
  v21 = *v20;
  v22 = v20[1];
  *(_BYTE *)(v19 + 32) = *((_BYTE *)v20 + 32);
  *(_OWORD *)v19 = v21;
  *(_OWORD *)(v19 + 16) = v22;
  return a1;
}

uint64_t sub_10025F500(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v6 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, (uint64_t)v10))
  {
    v11 = sub_1000BA294(&qword_100BCB0D0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    *v8 = *v9;
    v12 = v10[5];
    v13 = (char *)v8 + v12;
    v14 = (char *)v9 + v12;
    v15 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
    *(_QWORD *)((char *)v8 + v10[6]) = *(_QWORD *)((char *)v9 + v10[6]);
    *(_QWORD *)((char *)v8 + v10[7]) = *(_QWORD *)((char *)v9 + v10[7]);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, (uint64_t)v10);
  }
  v16 = a3[7];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v19;
  *(_BYTE *)(v17 + 32) = *(_BYTE *)(v18 + 32);
  return a1;
}

uint64_t sub_10025F634(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int *v10;
  int v11;
  int v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v6 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, (uint64_t)v10);
  v12 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, (uint64_t)v10);
  if (!v11)
  {
    if (!v12)
    {
      *v8 = *v9;
      v23 = v10[5];
      v24 = (char *)v8 + v23;
      v25 = (char *)v9 + v23;
      v26 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
      *(_QWORD *)((char *)v8 + v10[6]) = *(_QWORD *)((char *)v9 + v10[6]);
      *(_QWORD *)((char *)v8 + v10[7]) = *(_QWORD *)((char *)v9 + v10[7]);
      goto LABEL_7;
    }
    sub_1000215BC((uint64_t)v8, type metadata accessor for DetailHeroChartLollipopPosition);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v17 = sub_1000BA294(&qword_100BCB0D0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  *v8 = *v9;
  v13 = v10[5];
  v14 = (char *)v8 + v13;
  v15 = (char *)v9 + v13;
  v16 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  *(_QWORD *)((char *)v8 + v10[6]) = *(_QWORD *)((char *)v9 + v10[6]);
  *(_QWORD *)((char *)v8 + v10[7]) = *(_QWORD *)((char *)v9 + v10[7]);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, (uint64_t)v10);
LABEL_7:
  v18 = a3[7];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = *(_OWORD *)(v20 + 16);
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_OWORD *)(v19 + 16) = v21;
  *(_BYTE *)(v19 + 32) = *(_BYTE *)(v20 + 32);
  return a1;
}

uint64_t sub_10025F7E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10025F7F0);
}

uint64_t sub_10025F7F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v6 = sub_1000988EC();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = v4;
    return _s7Weather24LocationCompositionStateOwet_0(v8, v3, v7);
  }
  if ((_DWORD)v3 != 254)
  {
    v7 = sub_1000BA294(&qword_100BCB0D0);
    v8 = v4 + *(int *)(a3 + 24);
    return _s7Weather24LocationCompositionStateOwet_0(v8, v3, v7);
  }
  v9 = *(unsigned __int8 *)(v4 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return v9 - 1;
  else
    return 0;
}

uint64_t sub_10025F87C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10025F888);
}

uint64_t sub_10025F888(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = sub_1000988EC();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
  {
    v9 = result;
    v10 = v5;
  }
  else
  {
    if (a3 == 254)
    {
      *(_BYTE *)(v5 + *(int *)(a4 + 20)) = v4 + 1;
      return result;
    }
    v9 = sub_1000BA294(&qword_100BCB0D0);
    v10 = v5 + *(int *)(a4 + 24);
  }
  return _s7Weather24LocationCompositionStateOwst_0(v10, v4, v4, v9);
}

uint64_t sub_10025F914(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v10;

  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x80000001009F7470;
    if (a2 == 0x80000001009F7470)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001009F7470, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD000000000000010)
  {
    v8 = 0x80000001009F7490;
    if (a2 == 0x80000001009F7490)
      goto LABEL_18;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001009F7490, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_18:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x6552656372756F73 && a2 == 0xEA00000000007463)
  {
    swift_bridgeObjectRelease(0xEA00000000007463);
    return 3;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6552656372756F73, 0xEA00000000007463, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_10025FAC4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10025FAF8 + 4 * byte_10098C1D0[a1]))(0x6E6F697461636F6CLL, 0xE800000000000000);
}

unint64_t sub_10025FAF8()
{
  return 0xD000000000000010;
}

uint64_t sub_10025FB20()
{
  return 0x6552656372756F73;
}

BOOL sub_10025FB3C(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CGRect *v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  uint64_t v37;

  v4 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100098728();
  v8 = (double *)(v7 - v6);
  v9 = sub_1000BA294(&qword_100BCF3D0);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = v12 - v11;
  sub_1000BA294(&qword_100BCB0D0);
  sub_1000B42B0();
  v15 = __chkstk_darwin(v14);
  v17 = (double *)((char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v37 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v37 - v21;
  if ((static Location.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v23 = type metadata accessor for AveragesDetailViewState(0);
  if (*(unsigned __int8 *)(a1 + *(int *)(v23 + 20)) != *(unsigned __int8 *)(a2 + *(int *)(v23 + 20)))
    return 0;
  v24 = v23;
  sub_100203470(a1 + *(int *)(v23 + 24), (uint64_t)v22);
  sub_100203470(a2 + *(int *)(v24 + 24), (uint64_t)v20);
  v25 = v13 + *(int *)(v9 + 48);
  sub_100203470((uint64_t)v22, v13);
  sub_100203470((uint64_t)v20, v25);
  sub_1000BBCA0(v13);
  if (v30)
  {
    sub_100021A14((uint64_t)v20, &qword_100BCB0D0);
    sub_100021A14((uint64_t)v22, &qword_100BCB0D0);
    sub_1000BBCA0(v25);
    if (v30)
    {
      sub_100021A14(v13, &qword_100BCB0D0);
      goto LABEL_8;
    }
    goto LABEL_14;
  }
  sub_100203470(v13, (uint64_t)v17);
  sub_1000BBCA0(v25);
  if (v30)
  {
    sub_100021A14((uint64_t)v20, &qword_100BCB0D0);
    sub_100021A14((uint64_t)v22, &qword_100BCB0D0);
    sub_1000215BC((uint64_t)v17, type metadata accessor for DetailHeroChartLollipopPosition);
LABEL_14:
    v31 = &qword_100BCF3D0;
    v32 = v13;
LABEL_21:
    sub_100021A14(v32, v31);
    return 0;
  }
  sub_1002605D8(v25, (uint64_t)v8);
  if (*v17 != *v8
    || (static Date.== infix(_:_:)((char *)v17 + v4[5], (char *)v8 + v4[5]) & 1) == 0
    || *(double *)((char *)v17 + v4[6]) != *(double *)((char *)v8 + v4[6]))
  {
    sub_1000215BC((uint64_t)v8, type metadata accessor for DetailHeroChartLollipopPosition);
    sub_100021A14((uint64_t)v20, &qword_100BCB0D0);
    sub_100021A14((uint64_t)v22, &qword_100BCB0D0);
    sub_1000215BC((uint64_t)v17, type metadata accessor for DetailHeroChartLollipopPosition);
    v32 = v13;
    v31 = &qword_100BCB0D0;
    goto LABEL_21;
  }
  v33 = v4[7];
  v34 = *(double *)((char *)v17 + v33);
  v35 = *(double *)((char *)v8 + v33);
  sub_1000215BC((uint64_t)v8, type metadata accessor for DetailHeroChartLollipopPosition);
  sub_1000B3B4C((uint64_t)v20);
  sub_1000B3B4C((uint64_t)v22);
  sub_1000215BC((uint64_t)v17, type metadata accessor for DetailHeroChartLollipopPosition);
  sub_1000B3B4C(v13);
  if (v34 != v35)
    return 0;
LABEL_8:
  v26 = *(int *)(v24 + 28);
  v27 = (CGRect *)(a1 + v26);
  v28 = *(_BYTE *)(a1 + v26 + 32);
  v29 = a2 + v26;
  if ((v28 & 1) != 0)
    return (*(_BYTE *)(v29 + 32) & 1) != 0;
  return (*(_BYTE *)(v29 + 32) & 1) == 0 && CGRectEqualToRect(*v27, *(CGRect *)v29);
}

uint64_t sub_10025FE84(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v27[2];
  char v28;
  char v29;

  v3 = v1;
  v5 = sub_1000BA294(&qword_100BCF408);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100098728();
  v9 = v8 - v7;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_10026061C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AveragesDetailViewState.CodingKeys, &type metadata for AveragesDetailViewState.CodingKeys, v12, v10, v11);
  LOBYTE(v27[0]) = 0;
  v13 = type metadata accessor for Location(0);
  sub_100086DA4(&qword_100BCF410, (uint64_t (*)(uint64_t))&type metadata accessor for Location, (uint64_t)&protocol conformance descriptor for Location);
  sub_1000B4634(v3, (uint64_t)v27, v5, v13, v14);
  if (!v2)
  {
    v15 = (int *)type metadata accessor for AveragesDetailViewState(0);
    LOBYTE(v27[0]) = *(_BYTE *)(v3 + v15[5]);
    v29 = 1;
    v16 = sub_100260720();
    sub_1000B4634((uint64_t)v27, (uint64_t)&v29, v5, (uint64_t)&type metadata for AveragesKind, v16);
    v17 = v3 + v15[6];
    LOBYTE(v27[0]) = 2;
    v18 = type metadata accessor for DetailHeroChartLollipopPosition(0);
    sub_100086DA4(&qword_100BCF420, type metadata accessor for DetailHeroChartLollipopPosition, (uint64_t)&unk_10099CC50);
    sub_1000BDC8C(v17, (uint64_t)v27, v5, v18, v19);
    v20 = v3 + v15[7];
    v21 = *(_BYTE *)(v20 + 32);
    v22 = *(_OWORD *)(v20 + 16);
    v27[0] = *(_OWORD *)v20;
    v27[1] = v22;
    v28 = v21;
    v29 = 3;
    type metadata accessor for CGRect(0);
    v24 = v23;
    sub_100086DA4(&qword_100BCF428, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
    sub_1000BDC8C((uint64_t)v27, (uint64_t)&v29, v5, v24, v25);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

void sub_100260098(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[2];
  char v28;
  char v29;

  sub_1000BA294(&qword_100BCB0D0);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100088FDC();
  v21 = v4;
  v22 = type metadata accessor for Location(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  sub_100088FDC();
  v24 = v5;
  v25 = sub_1000BA294(&qword_100BCF3D8);
  __chkstk_darwin(v25);
  sub_100098728();
  v6 = type metadata accessor for AveragesDetailViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100098728();
  v10 = v9 - v8;
  v12 = v9 - v8 + *(int *)(v11 + 28);
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_BYTE *)(v12 + 32) = 1;
  v13 = a1[3];
  v14 = a1[4];
  sub_1000DB418(a1, v13);
  v15 = sub_10026061C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AveragesDetailViewState.CodingKeys, &type metadata for AveragesDetailViewState.CodingKeys, v15, v13, v14);
  if (v26)
  {
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  }
  else
  {
    LOBYTE(v27[0]) = 0;
    sub_100086DA4(&qword_100BCF3E8, (uint64_t (*)(uint64_t))&type metadata accessor for Location, (uint64_t)&protocol conformance descriptor for Location);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v22, v27, v25, v22);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v10, v24, v22);
    v29 = 1;
    sub_100260658();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for AveragesKind, &v29, v25, &type metadata for AveragesKind);
    *(_BYTE *)(v10 + *(int *)(v6 + 20)) = v27[0];
    type metadata accessor for DetailHeroChartLollipopPosition(0);
    LOBYTE(v27[0]) = 2;
    sub_100086DA4(&qword_100BCF3F8, type metadata accessor for DetailHeroChartLollipopPosition, (uint64_t)&unk_10099CC78);
    sub_1000C36B8(v16, (uint64_t)v27);
    sub_100260694(v21, v10 + *(int *)(v6 + 24));
    type metadata accessor for CGRect(0);
    v29 = 3;
    sub_100086DA4(&qword_100BCF400, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
    sub_1000C36B8(v17, (uint64_t)&v29);
    sub_1000C25E8();
    v18 = v28;
    v19 = v27[1];
    *(_OWORD *)v12 = v27[0];
    *(_OWORD *)(v12 + 16) = v19;
    *(_BYTE *)(v12 + 32) = v18;
    sub_1002606DC(v10, a2);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
    sub_1000215BC(v10, type metadata accessor for AveragesDetailViewState);
  }
}

uint64_t sub_1002603EC()
{
  unsigned __int8 *v0;

  return sub_10025FAC4(*v0);
}

uint64_t sub_1002603F4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10025F914(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100260418(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10026061C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100260440(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10026061C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10026046C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100260098(a1, a2);
}

uint64_t sub_100260480(_QWORD *a1)
{
  return sub_10025FE84(a1);
}

void sub_100260494()
{
  sub_100691F40();
}

void sub_1002604A8()
{
  sub_100692124();
}

uint64_t sub_1002604BC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  a1[3] = sub_1000BA294(&qword_100BCF430);
  a1[4] = sub_10026075C();
  sub_10005F164(a1);
  v3 = type metadata accessor for AveragesDetailViewState(0);
  return ShortDescription.init(name:_:)(0xD000000000000017, 0x800000010098C1C0, v2, v3);
}

uint64_t sub_100260558@<X0>(_QWORD *a1@<X8>)
{
  return sub_1002604BC(a1);
}

uint64_t sub_10026056C(uint64_t a1)
{
  uint64_t v2;

  sub_100086DA4(&qword_100BCF440, type metadata accessor for AveragesDetailViewState, (uint64_t)&unk_10098C250);
  return ShortDescribable.description.getter(a1, v2);
}

void sub_1002605AC()
{
  sub_100086DA4(&qword_100BCF3C8, type metadata accessor for AveragesDetailViewState, (uint64_t)&unk_10098C228);
}

uint64_t sub_1002605D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DetailHeroChartLollipopPosition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10026061C()
{
  unint64_t result;

  result = qword_100BCF3E0;
  if (!qword_100BCF3E0)
  {
    result = swift_getWitnessTable(&unk_10098C40C, &type metadata for AveragesDetailViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCF3E0);
  }
  return result;
}

unint64_t sub_100260658()
{
  unint64_t result;

  result = qword_100BCF3F0;
  if (!qword_100BCF3F0)
  {
    result = swift_getWitnessTable(&unk_1009DB370, &type metadata for AveragesKind);
    atomic_store(result, (unint64_t *)&qword_100BCF3F0);
  }
  return result;
}

uint64_t sub_100260694(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BCB0D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002606DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AveragesDetailViewState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100260720()
{
  unint64_t result;

  result = qword_100BCF418;
  if (!qword_100BCF418)
  {
    result = swift_getWitnessTable(&unk_1009DB348, &type metadata for AveragesKind);
    atomic_store(result, (unint64_t *)&qword_100BCF418);
  }
  return result;
}

unint64_t sub_10026075C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCF438;
  if (!qword_100BCF438)
  {
    v1 = sub_100075EB0(&qword_100BCF430);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCF438);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AveragesDetailViewState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1002607EC + 4 * byte_10098C1D9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100260820 + 4 * byte_10098C1D4[v4]))();
}

uint64_t sub_100260820(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100260828(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100260830);
  return result;
}

uint64_t sub_10026083C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100260844);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100260848(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100260850(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AveragesDetailViewState.CodingKeys()
{
  return &type metadata for AveragesDetailViewState.CodingKeys;
}

unint64_t sub_100260870()
{
  unint64_t result;

  result = qword_100BCF448;
  if (!qword_100BCF448)
  {
    result = swift_getWitnessTable(&unk_10098C3E4, &type metadata for AveragesDetailViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCF448);
  }
  return result;
}

unint64_t sub_1002608B0()
{
  unint64_t result;

  result = qword_100BCF450;
  if (!qword_100BCF450)
  {
    result = swift_getWitnessTable(&unk_10098C354, &type metadata for AveragesDetailViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCF450);
  }
  return result;
}

unint64_t sub_1002608F0()
{
  unint64_t result;

  result = qword_100BCF458;
  if (!qword_100BCF458)
  {
    result = swift_getWitnessTable(&unk_10098C37C, &type metadata for AveragesDetailViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BCF458);
  }
  return result;
}

uint64_t *sub_10026092C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload(a2) == 1)
  {
    *a1 = *a2;
    v8 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
    v9 = v8[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    *(uint64_t *)((char *)a1 + v8[6]) = *(uint64_t *)((char *)a2 + v8[6]);
    *(uint64_t *)((char *)a1 + v8[7]) = *(uint64_t *)((char *)a2 + v8[7]);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t sub_100260A20(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1);
  if ((_DWORD)result == 1)
  {
    v3 = a1 + *(int *)(type metadata accessor for DetailHeroChartLollipopPosition(0) + 20);
    v4 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  }
  return result;
}

_QWORD *sub_100260A7C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  if (swift_getEnumCaseMultiPayload(a2) == 1)
  {
    *a1 = *a2;
    v6 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
    v7 = v6[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    *(_QWORD *)((char *)a1 + v6[6]) = *(_QWORD *)((char *)a2 + v6[6]);
    *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_100260B48(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_100260C24((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2) == 1)
    {
      *a1 = *a2;
      v6 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
      v7 = v6[5];
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
      *(_QWORD *)((char *)a1 + v6[6]) = *(_QWORD *)((char *)a2 + v6[6]);
      *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100260C24(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AveragesDetailViewAction(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_100260C60(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  if (swift_getEnumCaseMultiPayload(a2) == 1)
  {
    *a1 = *a2;
    v6 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
    v7 = v6[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    *(_QWORD *)((char *)a1 + v6[6]) = *(_QWORD *)((char *)a2 + v6[6]);
    *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_100260D2C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_100260C24((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2) == 1)
    {
      *a1 = *a2;
      v6 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
      v7 = v6[5];
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      *(_QWORD *)((char *)a1 + v6[6]) = *(_QWORD *)((char *)a2 + v6[6]);
      *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100260E08@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _BYTE v21[80];

  v2 = v1;
  v4 = type metadata accessor for AveragesDetailViewAction(0);
  __chkstk_darwin(v4);
  v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_1000BA294(&qword_100BCF510);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1002610A0(v2, (uint64_t)v6);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6);
  if (!EnumCaseMultiPayload)
  {
    v13 = *v6;
    v14 = sub_1000BA294(&qword_100BC31F0);
    inited = swift_initStackObject(v14, v21);
    *(_OWORD *)(inited + 16) = xmmword_10097CA50;
    *(_QWORD *)(inited + 32) = 0x7365676172657661;
    *(_QWORD *)(inited + 40) = 0xE800000000000000;
    *(_QWORD *)(inited + 72) = &type metadata for AveragesKind;
    *(_BYTE *)(inited + 48) = v13;
    v16 = Dictionary.init(dictionaryLiteral:)(inited);
    v17 = 0x80000001009F7470;
    v18 = 0xD000000000000010;
LABEL_6:
    ShortDescription.init(name:_:)(v18, v17, v16, v4);
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v16 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
    v18 = 0x4C64657261656C63;
    v17 = 0xEF706F70696C6C6FLL;
    goto LABEL_6;
  }
  v12 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  ShortDescription.init(name:_:)(0xD000000000000017, 0x80000001009F74B0, v12, v4);
  sub_100260C24((uint64_t)v6);
LABEL_7:
  a1[3] = v7;
  a1[4] = sub_1002610E4();
  v19 = sub_10005F164(a1);
  return (*(uint64_t (**)(_QWORD *, _BYTE *, uint64_t))(v8 + 32))(v19, v10, v7);
}

uint64_t sub_100261044(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100261128(qword_100BCF520, (uint64_t)&unk_10098C4C0);
  return ShortDescribable.description.getter(a1, v2);
}

uint64_t sub_10026107C()
{
  return sub_100261128(&qword_100BCF508, (uint64_t)&unk_10098C498);
}

uint64_t sub_1002610A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AveragesDetailViewAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1002610E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCF518;
  if (!qword_100BCF518)
  {
    v1 = sub_100075EB0(&qword_100BCF510);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCF518);
  }
  return result;
}

uint64_t sub_100261128(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for AveragesDetailViewAction(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for NhpContentView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NhpContentView);
}

uint64_t sub_100261174(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100AAE1F8, 1);
}

uint64_t sub_1002611A8@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  void *v24;
  uint64_t v25;
  uint64_t (*v26)(_QWORD, _QWORD);
  uint64_t WitnessTable;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t (*v51)(_QWORD, _QWORD);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  _QWORD v63[2];
  _QWORD v64[2];
  _QWORD v65[4];
  _BYTE v66[488];
  _QWORD v67[62];

  v62 = a4;
  v55 = a3;
  v60 = a7;
  v67[0] = a5;
  v67[1] = a5;
  v67[2] = a5;
  v67[3] = a5;
  v10 = a2;
  v11 = a2 & 0x100;
  v67[4] = a5;
  v67[5] = a5;
  v67[6] = a5;
  v67[7] = a5;
  v12 = sub_1000BBB64(255, 8, (uint64_t)v67);
  v53 = sub_1000AE86C(v12);
  v13 = type metadata accessor for Group(0, v53);
  v14 = *(_QWORD *)(v13 - 8);
  v56 = v13;
  v57 = v14;
  __chkstk_darwin(v13);
  sub_1000986FC();
  v59 = v15;
  __chkstk_darwin(v16);
  v58 = (char *)&v48 - v17;
  v67[0] = a5;
  v67[1] = a5;
  v67[2] = type metadata accessor for Optional(255, a5);
  v67[3] = a5;
  v67[4] = a5;
  v67[5] = a5;
  v67[6] = a5;
  v18 = sub_1000BBB64(255, 7, (uint64_t)v67);
  v51 = (uint64_t (*)(_QWORD, _QWORD))sub_1000AE86C(v18);
  v54 = type metadata accessor for Group(0, v51);
  v52 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  sub_1000986FC();
  v20 = v19;
  __chkstk_darwin(v21);
  v61 = (char *)&v48 - v22;
  if (v10)
  {
    if (v10 == 1)
    {
      if (v11)
      {
        v23 = &qword_100C121D8;
        goto LABEL_11;
      }
    }
    else if (v11)
    {
      v23 = &qword_100C125A8;
      goto LABEL_11;
    }
    v23 = &qword_100C123C0;
    goto LABEL_11;
  }
  if (v11)
    v23 = &qword_100C11E08;
  else
    v23 = &qword_100C11FF0;
LABEL_11:
  memcpy(v67, v23, 0x1E8uLL);
  v24 = memcpy(v66, v67, sizeof(v66));
  v50 = &v48;
  __chkstk_darwin(v24);
  *(&v48 - 8) = a5;
  *(&v48 - 7) = a6;
  v48 = a1;
  *(&v48 - 6) = a1;
  *((_BYTE *)&v48 - 40) = v10;
  HIDWORD(v49) = v11 >> 8;
  *((_BYTE *)&v48 - 39) = BYTE1(v11);
  v25 = v62;
  *(&v48 - 4) = v55;
  *(&v48 - 3) = v25;
  *(&v48 - 2) = (uint64_t)v66;
  v26 = v51;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v51);
  Group<A>.init(content:)(sub_10026267C, &v48 - 10, v26, WitnessTable);
  v65[3] = WitnessTable;
  v28 = v54;
  v50 = (uint64_t *)swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v54);
  sub_1000B2074(v20, v28, v50);
  v29 = v52;
  v51 = *(uint64_t (**)(_QWORD, _QWORD))(v52 + 8);
  v30 = v51(v20, v28);
  __chkstk_darwin(v30);
  *(&v48 - 8) = a5;
  *(&v48 - 7) = a6;
  *(&v48 - 6) = v48;
  *((_BYTE *)&v48 - 40) = v10;
  *((_BYTE *)&v48 - 39) = BYTE4(v49);
  v31 = v62;
  *(&v48 - 4) = v32;
  *(&v48 - 3) = v31;
  *(&v48 - 2) = (uint64_t)v66;
  v33 = v53;
  v34 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v53);
  v35 = v59;
  Group<A>.init(content:)(sub_100262688, &v48 - 10, v33, v34);
  v65[2] = v34;
  v36 = v56;
  v37 = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v56);
  v38 = (uint64_t)v58;
  sub_1000B2074(v35, v36, v37);
  v39 = v57;
  sub_1000C3530(v35);
  v40 = *(void (**)(uint64_t, char *, uint64_t))(v29 + 16);
  v41 = v61;
  v40(v20, v61, v28);
  v65[0] = v20;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v35, v38, v36);
  v65[1] = v35;
  v64[0] = v28;
  v64[1] = v36;
  v63[0] = v50;
  v63[1] = v37;
  sub_10052800C((uint64_t)v65, 2, (uint64_t)v64, (uint64_t)v63, v42, v43, v44, v45, v48, v49, (uint64_t)v50, (uint64_t)v51, v52, v53, v54, v55, v56, v57);
  sub_1000C3530(v38);
  v46 = v51;
  v51(v41, v28);
  sub_1000C3530(v35);
  return v46(v20, v28);
}

uint64_t sub_1002615CC@<X0>(uint64_t a1@<X0>, void (*a2)(char *, _QWORD, _QWORD, _QWORD, _QWORD)@<X2>, _QWORD *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  void (*v61)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t);
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  void (*v106)(char *, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v107;
  uint64_t v108;
  _QWORD v109[7];
  _QWORD v110[7];
  _QWORD v111[7];
  _BYTE v112[24];
  _BYTE v113[40];
  _QWORD v114[4];
  char v115;

  v103 = a5;
  v106 = a2;
  v90 = a6;
  v10 = sub_1000BA294(&qword_100BC4A98);
  __chkstk_darwin(v10);
  v85 = (uint64_t)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for Optional(0, a4);
  v95 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v107 = (uint64_t)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v102 = (uint64_t)&v82 - v14;
  v86 = (void (*)(uint64_t, uint64_t))type metadata accessor for LocationComponentContainerViewModel(0);
  __chkstk_darwin(v86);
  v83 = (uint64_t)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v82 - v17;
  v19 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(v20);
  v89 = (char *)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v88 = (char *)&v82 - v23;
  __chkstk_darwin(v24);
  v99 = (char *)&v82 - v25;
  __chkstk_darwin(v26);
  v97 = (char *)&v82 - v27;
  __chkstk_darwin(v28);
  v98 = (char *)&v82 - v29;
  __chkstk_darwin(v30);
  v96 = (char *)&v82 - v31;
  __chkstk_darwin(v32);
  v93 = (char *)&v82 - v33;
  __chkstk_darwin(v34);
  v92 = (char *)&v82 - v35;
  __chkstk_darwin(v36);
  v105 = (char *)&v82 - v37;
  __chkstk_darwin(v38);
  v101 = (char *)&v82 - v39;
  __chkstk_darwin(v40);
  v42 = (char *)&v82 - v41;
  __chkstk_darwin(v43);
  v45 = (char *)&v82 - v44;
  sub_100080E30(a1 + OBJC_IVAR____TtCV7Weather10NhpContent8_Storage_nextHourPrecipitation, (uint64_t)v18);
  a2(v18, a3[33], a3[34], a3[35], a3[36]);
  sub_100080DF4((uint64_t)v18);
  v91 = v45;
  v46 = v103;
  sub_1000B2074(v42, a4, v103);
  v87 = v19;
  v47 = *(void (**)(char *, uint64_t))(v19 + 8);
  v48 = v85;
  v47(v42, a4);
  sub_100080E30(a1 + OBJC_IVAR____TtCV7Weather10NhpContent8_Storage_airQuality, (uint64_t)v18);
  v106(v18, *a3, a3[1], a3[2], a3[3]);
  v84 = v18;
  sub_100080DF4((uint64_t)v18);
  sub_1000B2074(v42, a4, v46);
  v104 = v42;
  v47(v42, a4);
  v94 = a1;
  v49 = a1 + OBJC_IVAR____TtCV7Weather10NhpContent8_Storage_map;
  swift_beginAccess(a1 + OBJC_IVAR____TtCV7Weather10NhpContent8_Storage_map, v112, 0, 0);
  sub_1001A1D04(v49, v48);
  if (_s7Weather24LocationCompositionStateOwet_0(v48, 1, (uint64_t)v86) == 1)
  {
    sub_1001A1D4C(v48);
    v50 = 1;
    v51 = a3;
  }
  else
  {
    v52 = v83;
    sub_1001A1D8C(v48, v83);
    sub_1001A1DD0((uint64_t)(a3 + 24), (uint64_t)v113);
    sub_1001A1DD0((uint64_t)v113, (uint64_t)v114);
    v51 = a3;
    if (v115 == 1)
    {
      sub_100080DF4(v52);
      v50 = 1;
    }
    else
    {
      v53 = v105;
      v106((char *)v52, v114[0], v114[1], v114[2], v114[3]);
      sub_100080DF4(v52);
      v54 = (uint64_t)v104;
      sub_1000B2074(v53, a4, v103);
      v47(v53, a4);
      sub_1000B1100(v54, a4, v107);
      v47((char *)v54, a4);
      v50 = 0;
    }
  }
  v55 = v107;
  _s7Weather24LocationCompositionStateOwst_0(v107, v50, 1, a4);
  v56 = v103;
  sub_100158984(v55, a4, v102);
  v86 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
  v86(v55, v100);
  v57 = v94;
  v58 = (uint64_t)v84;
  sub_100080E30(*(_QWORD *)(v94 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, (uint64_t)v84);
  v59 = v105;
  v106((char *)v58, v51[16], v51[17], v51[18], v51[19]);
  sub_100080DF4(v58);
  sub_1000B2074(v59, a4, v56);
  v47(v59, a4);
  sub_100080E30(*(_QWORD *)(v57 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v58);
  v60 = v92;
  v61 = (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))v106;
  v106((char *)v58, v51[8], v51[9], v51[10], v51[11]);
  sub_100080DF4(v58);
  v62 = v103;
  sub_1000B2074(v60, a4, v103);
  v47(v60, a4);
  sub_100080E30(*(_QWORD *)(v57 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex, v58);
  v63 = v93;
  v61(v58, v51[49], v51[50], v51[51], v51[52]);
  sub_100080DF4(v58);
  sub_1000B2074(v63, a4, v62);
  v47(v63, a4);
  sub_100080E30(*(_QWORD *)(v94 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, v58);
  v64 = v96;
  v61(v58, v51[45], v51[46], v51[47], v51[48]);
  sub_100080DF4(v58);
  v65 = v62;
  sub_1000B2074(v64, a4, v62);
  v47(v64, a4);
  v66 = *(void (**)(char *, char *, uint64_t))(v87 + 16);
  v66(v64, v91, a4);
  v111[0] = v64;
  v67 = v98;
  v66(v98, v101, a4);
  v111[1] = v67;
  v68 = v107;
  v69 = v100;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 16))(v107, v102, v100);
  v111[2] = v68;
  v70 = v97;
  v66(v97, v104, a4);
  v111[3] = v70;
  v71 = v99;
  v66(v99, v105, a4);
  v111[4] = v71;
  v72 = (uint64_t)v88;
  v73 = v92;
  v66(v88, v92, a4);
  v111[5] = v72;
  v74 = (uint64_t)v89;
  v75 = v93;
  v66(v89, v93, a4);
  v111[6] = v74;
  v110[0] = a4;
  v110[1] = a4;
  v110[2] = v69;
  v110[3] = a4;
  v110[4] = a4;
  v110[5] = a4;
  v110[6] = a4;
  v109[0] = v65;
  v109[1] = v65;
  v108 = v65;
  v109[2] = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v69);
  v109[3] = v65;
  v109[4] = v65;
  v109[5] = v65;
  v109[6] = v65;
  sub_10052800C((uint64_t)v111, 7, (uint64_t)v110, (uint64_t)v109, v76, v77, v78, v79, v82, v83, (uint64_t)v84, v85, (uint64_t)v86, v87, (uint64_t)v88, (uint64_t)v89, v90, (uint64_t)v91);
  v47(v75, a4);
  v47(v73, a4);
  v47(v105, a4);
  v47(v104, a4);
  v80 = v86;
  v86(v102, v69);
  v47(v101, a4);
  v47(v91, a4);
  v47((char *)v74, a4);
  v47((char *)v72, a4);
  v47(v99, a4);
  v47(v97, a4);
  v80(v107, v69);
  v47(v98, a4);
  return ((uint64_t (*)(char *, uint64_t))v47)(v96, a4);
}

uint64_t sub_100261E0C@<X0>(uint64_t a1@<X0>, void (*a2)(char *, _QWORD, _QWORD, _QWORD, _QWORD)@<X2>, _QWORD *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  _QWORD v93[8];
  _QWORD v94[8];
  _QWORD v95[8];

  v78 = a6;
  v11 = type metadata accessor for LocationComponentContainerViewModel(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(v14);
  v77 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v76 = (char *)&v74 - v17;
  __chkstk_darwin(v18);
  v92 = (char *)&v74 - v19;
  __chkstk_darwin(v20);
  v91 = (char *)&v74 - v21;
  __chkstk_darwin(v22);
  v89 = (char *)&v74 - v23;
  __chkstk_darwin(v24);
  v87 = (char *)&v74 - v25;
  __chkstk_darwin(v26);
  v86 = (char *)&v74 - v27;
  __chkstk_darwin(v28);
  v85 = (char *)&v74 - v29;
  __chkstk_darwin(v30);
  v75 = (uint64_t)&v74 - v31;
  __chkstk_darwin(v32);
  v83 = (char *)&v74 - v33;
  __chkstk_darwin(v34);
  v81 = (char *)&v74 - v35;
  __chkstk_darwin(v36);
  v79 = (char *)&v74 - v37;
  __chkstk_darwin(v38);
  v80 = (char *)&v74 - v39;
  __chkstk_darwin(v40);
  v42 = (char *)&v74 - v41;
  __chkstk_darwin(v43);
  v45 = (char *)&v74 - v44;
  __chkstk_darwin(v46);
  v88 = (char *)&v74 - v47;
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind, (uint64_t)v13);
  a2(v13, a3[57], a3[58], a3[59], a3[60]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v45, a4, a5);
  v48 = *(void (**)(char *, uint64_t))(v90 + 8);
  v84 = v45;
  v48(v45, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)v13);
  a2(v13, a3[41], a3[42], a3[43], a3[44]);
  sub_100080DF4((uint64_t)v13);
  v49 = a5;
  sub_1000B2074(v42, a4, a5);
  v82 = v42;
  v48(v42, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike, (uint64_t)v13);
  v50 = (uint64_t)v80;
  a2(v13, a3[12], a3[13], a3[14], a3[15]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v50, a4, v49);
  v48((char *)v50, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)v13);
  v51 = (uint64_t)v79;
  a2(v13, a3[20], a3[21], a3[22], a3[23]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v51, a4, v49);
  v48((char *)v51, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility, (uint64_t)v13);
  v52 = (uint64_t)v81;
  a2(v13, a3[53], a3[54], a3[55], a3[56]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v52, a4, v49);
  v48((char *)v52, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, (uint64_t)v13);
  v53 = (uint64_t)v83;
  a2(v13, a3[37], a3[38], a3[39], a3[40]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v53, a4, v49);
  v48((char *)v53, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, (uint64_t)v13);
  v54 = v75;
  a2(v13, a3[29], a3[30], a3[31], a3[32]);
  sub_100080DF4((uint64_t)v13);
  v55 = v54;
  v74 = v49;
  sub_1000B2074(v54, a4, v49);
  v48((char *)v54, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, (uint64_t)v13);
  v56 = v85;
  a2(v13, a3[4], a3[5], a3[6], a3[7]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v56, a4, v49);
  v48(v56, a4);
  v57 = *(void (**)(char *, char *, uint64_t))(v90 + 16);
  v57(v56, v88, a4);
  v95[0] = v56;
  v58 = v86;
  v57(v86, v84, a4);
  v95[1] = v58;
  v59 = v87;
  v57(v87, v82, a4);
  v95[2] = v59;
  v60 = v89;
  v61 = (uint64_t)v80;
  v57(v89, v80, a4);
  v95[3] = v60;
  v62 = v91;
  v63 = (uint64_t)v79;
  v57(v91, v79, a4);
  v95[4] = v62;
  v64 = v92;
  v65 = (uint64_t)v81;
  v57(v92, v81, a4);
  v95[5] = v64;
  v66 = (uint64_t)v76;
  v67 = (uint64_t)v83;
  v57(v76, v83, a4);
  v95[6] = v66;
  v68 = (uint64_t)v77;
  v57(v77, (char *)v55, a4);
  v95[7] = v68;
  v94[0] = a4;
  v94[1] = a4;
  v94[2] = a4;
  v94[3] = a4;
  v94[4] = a4;
  v94[5] = a4;
  v94[6] = a4;
  v94[7] = a4;
  v93[0] = v74;
  v93[1] = v74;
  v93[2] = v74;
  v93[3] = v74;
  v93[4] = v74;
  v93[5] = v74;
  v93[6] = v74;
  v93[7] = v74;
  sub_10052800C((uint64_t)v95, 8, (uint64_t)v94, (uint64_t)v93, v69, v70, v71, v72, v74, v75, (uint64_t)v76, (uint64_t)v77, v78, (uint64_t)v79, (uint64_t)v80, (uint64_t)v81, (uint64_t)v82, (uint64_t)v83);
  v48((char *)v55, a4);
  v48((char *)v67, a4);
  v48((char *)v65, a4);
  v48((char *)v63, a4);
  v48((char *)v61, a4);
  v48(v82, a4);
  v48(v84, a4);
  v48(v88, a4);
  v48((char *)v68, a4);
  v48((char *)v66, a4);
  v48(v92, a4);
  v48(v91, a4);
  v48(v89, a4);
  v48(v87, a4);
  v48(v86, a4);
  return ((uint64_t (*)(char *, uint64_t))v48)(v85, a4);
}

uint64_t sub_100262650@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int16 v3;

  if (*(_BYTE *)(v2 + 9))
    v3 = 256;
  else
    v3 = 0;
  return sub_1002611A8(*(_QWORD *)v2, v3 | *(unsigned __int8 *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t sub_10026267C()
{
  return sub_1001A1CD4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1002615CC);
}

uint64_t sub_100262688()
{
  return sub_1001A1CD4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100261E0C);
}

ValueMetadata *type metadata accessor for Delay()
{
  return &type metadata for Delay;
}

uint64_t sub_1002626A4(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(double *)(v1 + 88) = a1;
  v2 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v1 + 96) = v2;
  *(_QWORD *)(v1 + 104) = static MainActor.shared.getter(v2);
  *(_QWORD *)(v1 + 112) = dispatch thunk of Actor.unownedExecutor.getter(v2);
  *(_QWORD *)(v1 + 120) = v3;
  return sub_1000BBE68();
}

uint64_t sub_100262710()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;

  if (qword_100BC24D8 != -1)
    swift_once(&qword_100BC24D8, sub_1006F39A0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_1000AECD4(v1, (uint64_t)qword_100CAF270);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = v0[11];
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v6 = 134217984;
    v0[10] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Performing Delay instruction: %f", v6, 0xCu);
    swift_slowDealloc(v6, -1, -1);
  }

  v8 = static MainActor.shared.getter(v7);
  v0[16] = v8;
  if (v8)
  {
    ObjectType = swift_getObjectType(v8);
    dispatch thunk of Actor.unownedExecutor.getter(ObjectType);
  }
  return sub_1000BBE68();
}

uint64_t sub_100262868()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_1002628B8;
  v1 = swift_continuation_init(v0 + 16, 0);
  sub_100262930(v1);
  return swift_continuation_await(v0 + 16);
}

uint64_t sub_1002628B8()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_release(*(_QWORD *)(*v0 + 128));
  return swift_task_switch(sub_100262904, *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120));
}

uint64_t sub_100262904()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 104));
  return sub_1000950D8(*(uint64_t (**)(void))(v0 + 8));
}

void sub_100262930(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  void *v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  void *v19;
  __n128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD aBlock[5];
  uint64_t v29;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v24 = *(_QWORD *)(v5 - 8);
  v25 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchTime(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v24 - v13;
  v15 = sub_10009FFE0();
  v16 = (void *)static OS_dispatch_queue.main.getter(v15);
  static DispatchTime.now()(v16);
  + infix(_:_:)(v11);
  v17 = *(void (**)(char *, uint64_t))(v9 + 8);
  v17(v11, v8);
  v18 = swift_allocObject(&unk_100B67500, 24, 7);
  *(_QWORD *)(v18 + 16) = a1;
  aBlock[4] = sub_10024A21C;
  v29 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100088F7C;
  aBlock[3] = &unk_100B67518;
  v19 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v20);
  v27 = _swiftEmptyArrayStorage;
  v21 = sub_1001221E0();
  v22 = sub_1000BA294(&qword_100BD4F10);
  v23 = sub_100121014();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v22, v23, v2, v21);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v14, v7, v4, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v25);
  v17(v14, v8);
  swift_release(v29);
}

uint64_t sub_100262B8C()
{
  double *v0;
  uint64_t v1;
  double v2;
  _QWORD *v3;

  v2 = *v0;
  v3 = (_QWORD *)swift_task_alloc(dword_100BCF5B4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100223BE0;
  return sub_1002626A4(v2);
}

uint64_t sub_100262BD8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100262BE8(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __n128 v7;

  v2 = type metadata accessor for ConditionDetailChartDataInputFactory();
  v3 = swift_allocObject(v2, 16, 7);
  v4 = type metadata accessor for ConditionDetailChartDataInputFactoryWithCache();
  v5 = (_QWORD *)swift_allocObject(v4, 64, 7);
  v5[5] = v2;
  v5[6] = &off_100B9D368;
  v5[2] = v3;
  v6 = sub_1000BA294(&qword_100BCF688);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = swift_retain();
  v5[7] = Cache.init()(v7);
  swift_release(v3);
  a1[3] = v4;
  a1[4] = &off_100B9D378;
  *a1 = v5;
}

uint64_t sub_100262CA0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v13[24];
  uint64_t v14;

  v4 = type metadata accessor for MidpointInterpolator(0);
  v5 = __chkstk_darwin(v4);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MidpointInterpolator.init()(v5);
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1000BA294(&qword_100BCF680);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (v14)
  {
    a2[3] = type metadata accessor for CurrentMarkerValueCalculator(0);
    a2[4] = &protocol witness table for CurrentMarkerValueCalculator;
    sub_10005F164(a2);
    return CurrentMarkerValueCalculator.init(midpointInterpolator:detailChartDataPointValueCalculator:)(v7, v13);
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_100262D80@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BCF678);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v20)
  {
    __break(1u);
    goto LABEL_6;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1000BA294(&qword_100BCF658);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!v18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v11 = a1[3];
  v12 = a1[4];
  sub_1000DB418(a1, v11);
  v13 = sub_1000BA294(&qword_100BCF680);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
  if (v16)
  {
    v14 = type metadata accessor for DetailChartViewModelFactory();
    swift_allocObject(v14, 168, 7);
    result = sub_10020D9D0(&v19, &v17, &v15);
    a2[3] = v14;
    a2[4] = &off_100B64C00;
    *a2 = result;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

double sub_100262EB0()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = sub_1000BA294(&qword_100BCF668);
  v1 = RegistrationContainer.register<A>(_:name:factory:)(v0, 0, 0, sub_100262EF4, 0, v0);
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

uint64_t sub_100262EF4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = sub_1000BA294(&qword_100BCF670);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (v9)
  {
    a2[3] = (uint64_t)&type metadata for LollipopDataFactory;
    a2[4] = (uint64_t)&off_100B90A38;
    v7 = swift_allocObject(&unk_100B67558, 56, 7);
    *a2 = v7;
    return sub_10003C800(&v8, v7 + 16);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100262F94()
{
  uint64_t v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100262FB8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_QWORD *)(v1 + 56);
  sub_100043CA8(v1 + 16, (uint64_t)(a1 + 2));
  swift_retain();
  v4 = sub_1000BA294(&qword_100BC48C0);
  v5 = sub_10026303C();
  result = ObservedObject.init(wrappedValue:)(v3, v4, v5);
  *a1 = result;
  a1[1] = v7;
  return result;
}

uint64_t type metadata accessor for NotificationSettingsModule()
{
  return objc_opt_self(_TtC7Weather26NotificationSettingsModule);
}

unint64_t sub_10026303C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC48C8;
  if (!qword_100BC48C8)
  {
    v1 = sub_100075EB0(&qword_100BC48C0);
    result = swift_getWitnessTable(&unk_1009D9950, v1);
    atomic_store(result, (unint64_t *)&qword_100BC48C8);
  }
  return result;
}

ValueMetadata *type metadata accessor for SunEventViewModelFactory()
{
  return &type metadata for SunEventViewModelFactory;
}

uint64_t type metadata accessor for DefaultTrendNewsContentView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DefaultTrendNewsContentView);
}

uint64_t sub_10026309C(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100AAE360, 1);
}

uint64_t sub_1002630D0@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  void *v24;
  uint64_t v25;
  uint64_t (*v26)(_QWORD, _QWORD);
  uint64_t WitnessTable;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t (*v51)(_QWORD, _QWORD);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  _QWORD v63[2];
  _QWORD v64[2];
  _QWORD v65[4];
  _BYTE v66[488];
  _QWORD v67[62];

  v62 = a4;
  v55 = a3;
  v60 = a7;
  v67[0] = a5;
  v67[1] = a5;
  v67[2] = a5;
  v67[3] = a5;
  v10 = a2;
  v11 = a2 & 0x100;
  v67[4] = a5;
  v67[5] = a5;
  v67[6] = a5;
  v67[7] = a5;
  v12 = sub_1000BBB64(255, 8, (uint64_t)v67);
  v53 = sub_1000AE86C(v12);
  v13 = type metadata accessor for Group(0, v53);
  v14 = *(_QWORD *)(v13 - 8);
  v56 = v13;
  v57 = v14;
  __chkstk_darwin(v13);
  sub_1000986FC();
  v59 = v15;
  __chkstk_darwin(v16);
  v58 = (char *)&v48 - v17;
  v67[0] = a5;
  v67[1] = a5;
  v67[2] = type metadata accessor for Optional(255, a5);
  v67[3] = a5;
  v67[4] = a5;
  v67[5] = a5;
  v67[6] = a5;
  v18 = sub_1000BBB64(255, 7, (uint64_t)v67);
  v51 = (uint64_t (*)(_QWORD, _QWORD))sub_1000AE86C(v18);
  v54 = type metadata accessor for Group(0, v51);
  v52 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  sub_1000986FC();
  v20 = v19;
  __chkstk_darwin(v21);
  v61 = (char *)&v48 - v22;
  if (v10)
  {
    if (v10 == 1)
    {
      if (v11)
      {
        v23 = &qword_100C06778;
        goto LABEL_11;
      }
    }
    else if (v11)
    {
      v23 = &qword_100C06B48;
      goto LABEL_11;
    }
    v23 = &qword_100C06960;
    goto LABEL_11;
  }
  if (v11)
    v23 = &qword_100C063A8;
  else
    v23 = &qword_100C06590;
LABEL_11:
  memcpy(v67, v23, 0x1E8uLL);
  v24 = memcpy(v66, v67, sizeof(v66));
  v50 = &v48;
  __chkstk_darwin(v24);
  *(&v48 - 8) = a5;
  *(&v48 - 7) = a6;
  v48 = a1;
  *(&v48 - 6) = a1;
  *((_BYTE *)&v48 - 40) = v10;
  HIDWORD(v49) = v11 >> 8;
  *((_BYTE *)&v48 - 39) = BYTE1(v11);
  v25 = v62;
  *(&v48 - 4) = v55;
  *(&v48 - 3) = v25;
  *(&v48 - 2) = (uint64_t)v66;
  v26 = v51;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v51);
  Group<A>.init(content:)(sub_100263D60, &v48 - 10, v26, WitnessTable);
  v65[3] = WitnessTable;
  v28 = v54;
  v50 = (uint64_t *)swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v54);
  sub_1000B2074(v20, v28, v50);
  v29 = v52;
  v51 = *(uint64_t (**)(_QWORD, _QWORD))(v52 + 8);
  v30 = v51(v20, v28);
  __chkstk_darwin(v30);
  *(&v48 - 8) = a5;
  *(&v48 - 7) = a6;
  *(&v48 - 6) = v48;
  *((_BYTE *)&v48 - 40) = v10;
  *((_BYTE *)&v48 - 39) = BYTE4(v49);
  v31 = v62;
  *(&v48 - 4) = v32;
  *(&v48 - 3) = v31;
  *(&v48 - 2) = (uint64_t)v66;
  v33 = v53;
  v34 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v53);
  v35 = v59;
  Group<A>.init(content:)(sub_100262688, &v48 - 10, v33, v34);
  v65[2] = v34;
  v36 = v56;
  v37 = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v56);
  v38 = (uint64_t)v58;
  sub_1000B2074(v35, v36, v37);
  v39 = v57;
  sub_1000C3530(v35);
  v40 = *(void (**)(uint64_t, char *, uint64_t))(v29 + 16);
  v41 = v61;
  v40(v20, v61, v28);
  v65[0] = v20;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v35, v38, v36);
  v65[1] = v35;
  v64[0] = v28;
  v64[1] = v36;
  v63[0] = v50;
  v63[1] = v37;
  sub_10052800C((uint64_t)v65, 2, (uint64_t)v64, (uint64_t)v63, v42, v43, v44, v45, v48, v49, (uint64_t)v50, (uint64_t)v51, v52, v53, v54, v55, v56, v57);
  sub_1000C3530(v38);
  v46 = v51;
  v51(v41, v28);
  sub_1000C3530(v35);
  return v46(v20, v28);
}

uint64_t sub_1002634F4@<X0>(uint64_t a1@<X0>, void (*a2)(char *, _QWORD, _QWORD, _QWORD, _QWORD)@<X2>, _QWORD *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  void (*v61)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t);
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  void (*v106)(char *, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v107;
  uint64_t v108;
  _QWORD v109[7];
  _QWORD v110[7];
  _QWORD v111[7];
  _BYTE v112[24];
  _BYTE v113[40];
  _QWORD v114[4];
  char v115;

  v103 = a5;
  v106 = a2;
  v90 = a6;
  v10 = sub_1000BA294(&qword_100BC4A98);
  __chkstk_darwin(v10);
  v85 = (uint64_t)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for Optional(0, a4);
  v95 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v107 = (uint64_t)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v102 = (uint64_t)&v82 - v14;
  v86 = (void (*)(uint64_t, uint64_t))type metadata accessor for LocationComponentContainerViewModel(0);
  __chkstk_darwin(v86);
  v83 = (uint64_t)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v82 - v17;
  v19 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(v20);
  v89 = (char *)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v88 = (char *)&v82 - v23;
  __chkstk_darwin(v24);
  v99 = (char *)&v82 - v25;
  __chkstk_darwin(v26);
  v97 = (char *)&v82 - v27;
  __chkstk_darwin(v28);
  v98 = (char *)&v82 - v29;
  __chkstk_darwin(v30);
  v96 = (char *)&v82 - v31;
  __chkstk_darwin(v32);
  v93 = (char *)&v82 - v33;
  __chkstk_darwin(v34);
  v92 = (char *)&v82 - v35;
  __chkstk_darwin(v36);
  v105 = (char *)&v82 - v37;
  __chkstk_darwin(v38);
  v101 = (char *)&v82 - v39;
  __chkstk_darwin(v40);
  v42 = (char *)&v82 - v41;
  __chkstk_darwin(v43);
  v45 = (char *)&v82 - v44;
  sub_100080E30(a1 + OBJC_IVAR____TtCV7Weather23DefaultTrendNewsContent8_Storage_airQuality, (uint64_t)v18);
  a2(v18, *a3, a3[1], a3[2], a3[3]);
  sub_100080DF4((uint64_t)v18);
  v91 = v45;
  v46 = v103;
  sub_1000B2074(v42, a4, v103);
  v87 = v19;
  v47 = *(void (**)(char *, uint64_t))(v19 + 8);
  v48 = v85;
  v47(v42, a4);
  sub_100080E30(a1 + OBJC_IVAR____TtCV7Weather23DefaultTrendNewsContent8_Storage_newsArticle, (uint64_t)v18);
  v106(v18, a3[33], a3[34], a3[35], a3[36]);
  v84 = v18;
  sub_100080DF4((uint64_t)v18);
  sub_1000B2074(v42, a4, v46);
  v104 = v42;
  v47(v42, a4);
  v94 = a1;
  v49 = a1 + OBJC_IVAR____TtCV7Weather23DefaultTrendNewsContent8_Storage_map;
  swift_beginAccess(a1 + OBJC_IVAR____TtCV7Weather23DefaultTrendNewsContent8_Storage_map, v112, 0, 0);
  sub_1001A1D04(v49, v48);
  if (_s7Weather24LocationCompositionStateOwet_0(v48, 1, (uint64_t)v86) == 1)
  {
    sub_1001A1D4C(v48);
    v50 = 1;
    v51 = a3;
  }
  else
  {
    v52 = v83;
    sub_1001A1D8C(v48, v83);
    sub_1001A1DD0((uint64_t)(a3 + 24), (uint64_t)v113);
    sub_1001A1DD0((uint64_t)v113, (uint64_t)v114);
    v51 = a3;
    if (v115 == 1)
    {
      sub_100080DF4(v52);
      v50 = 1;
    }
    else
    {
      v53 = v105;
      v106((char *)v52, v114[0], v114[1], v114[2], v114[3]);
      sub_100080DF4(v52);
      v54 = (uint64_t)v104;
      sub_1000B2074(v53, a4, v103);
      v47(v53, a4);
      sub_1000B1100(v54, a4, v107);
      v47((char *)v54, a4);
      v50 = 0;
    }
  }
  v55 = v107;
  _s7Weather24LocationCompositionStateOwst_0(v107, v50, 1, a4);
  v56 = v103;
  sub_100158984(v55, a4, v102);
  v86 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
  v86(v55, v100);
  v57 = v94;
  v58 = (uint64_t)v84;
  sub_100080E30(*(_QWORD *)(v94 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, (uint64_t)v84);
  v59 = v105;
  v106((char *)v58, v51[16], v51[17], v51[18], v51[19]);
  sub_100080DF4(v58);
  sub_1000B2074(v59, a4, v56);
  v47(v59, a4);
  sub_100080E30(*(_QWORD *)(v57 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v58);
  v60 = v92;
  v61 = (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))v106;
  v106((char *)v58, v51[8], v51[9], v51[10], v51[11]);
  sub_100080DF4(v58);
  v62 = v103;
  sub_1000B2074(v60, a4, v103);
  v47(v60, a4);
  sub_100080E30(*(_QWORD *)(v57 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex, v58);
  v63 = v93;
  v61(v58, v51[49], v51[50], v51[51], v51[52]);
  sub_100080DF4(v58);
  sub_1000B2074(v63, a4, v62);
  v47(v63, a4);
  sub_100080E30(*(_QWORD *)(v94 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, v58);
  v64 = v96;
  v61(v58, v51[45], v51[46], v51[47], v51[48]);
  sub_100080DF4(v58);
  v65 = v62;
  sub_1000B2074(v64, a4, v62);
  v47(v64, a4);
  v66 = *(void (**)(char *, char *, uint64_t))(v87 + 16);
  v66(v64, v91, a4);
  v111[0] = v64;
  v67 = v98;
  v66(v98, v101, a4);
  v111[1] = v67;
  v68 = v107;
  v69 = v100;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 16))(v107, v102, v100);
  v111[2] = v68;
  v70 = v97;
  v66(v97, v104, a4);
  v111[3] = v70;
  v71 = v99;
  v66(v99, v105, a4);
  v111[4] = v71;
  v72 = (uint64_t)v88;
  v73 = v92;
  v66(v88, v92, a4);
  v111[5] = v72;
  v74 = (uint64_t)v89;
  v75 = v93;
  v66(v89, v93, a4);
  v111[6] = v74;
  v110[0] = a4;
  v110[1] = a4;
  v110[2] = v69;
  v110[3] = a4;
  v110[4] = a4;
  v110[5] = a4;
  v110[6] = a4;
  v109[0] = v65;
  v109[1] = v65;
  v108 = v65;
  v109[2] = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v69);
  v109[3] = v65;
  v109[4] = v65;
  v109[5] = v65;
  v109[6] = v65;
  sub_10052800C((uint64_t)v111, 7, (uint64_t)v110, (uint64_t)v109, v76, v77, v78, v79, v82, v83, (uint64_t)v84, v85, (uint64_t)v86, v87, (uint64_t)v88, (uint64_t)v89, v90, (uint64_t)v91);
  v47(v75, a4);
  v47(v73, a4);
  v47(v105, a4);
  v47(v104, a4);
  v80 = v86;
  v86(v102, v69);
  v47(v101, a4);
  v47(v91, a4);
  v47((char *)v74, a4);
  v47((char *)v72, a4);
  v47(v99, a4);
  v47(v97, a4);
  v80(v107, v69);
  v47(v98, a4);
  return ((uint64_t (*)(char *, uint64_t))v47)(v96, a4);
}

uint64_t sub_100263D34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int16 v3;

  if (*(_BYTE *)(v2 + 9))
    v3 = 256;
  else
    v3 = 0;
  return sub_1002630D0(*(_QWORD *)v2, v3 | *(unsigned __int8 *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t sub_100263D60()
{
  return sub_1001A1CD4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1002634F4);
}

void sub_100263D6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 *v20;
  __n128 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 *v32;
  uint64_t v33;
  uint64_t v34;
  __n128 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __n128 *v55;
  __n128 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __n128 *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __n128 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __n128 *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  _BYTE v96[24];

  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100098728();
  v5 = v4 - v3;
  v6 = type metadata accessor for LocationComponentContainerViewModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100098728();
  v10 = v9 - v8;
  v11 = a1 + OBJC_IVAR____TtCV7Weather12NoAqiContent8_Storage_map;
  sub_1000992EC(a1 + OBJC_IVAR____TtCV7Weather12NoAqiContent8_Storage_map, (uint64_t)v96);
  sub_10003773C(v11, v5, &qword_100BC4A98);
  if (_s7Weather24LocationCompositionStateOwet_0(v5, 1, v6) == 1)
  {
    sub_100021A14(v5, &qword_100BC4A98);
    v12 = sub_1000BA294(&qword_100BCC750);
    v13 = swift_allocObject(v12, 200, 7);
    *(_OWORD *)(v13 + 16) = xmmword_10098C750;
    v14 = sub_1000BA294(&qword_100BCC758);
    v15 = *(unsigned __int8 *)(v7 + 80);
    v16 = (v15 + 32) & ~v15;
    v17 = v16 + *(_QWORD *)(v7 + 72);
    v18 = *(_QWORD *)(v7 + 72);
    v19 = v14;
    v20 = (__n128 *)swift_allocObject(v14, v17, v15 | 7);
    v21 = sub_100099954(v20, (__n128)xmmword_10097CA50);
    sub_10008611C(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, (uint64_t)v21 + v16);
    *(_QWORD *)(v13 + 32) = sub_1000B4580();
    *(_QWORD *)(v13 + 40) = v22;
    *(_QWORD *)(v13 + 48) = v23;
    v93 = v19;
    v24 = sub_1000D9C18(v19, v17);
    *(_OWORD *)(v24 + 16) = v95;
    sub_10008611C(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v24 + v16);
    *(_QWORD *)(v13 + 56) = sub_100080C44(v24);
    *(_QWORD *)(v13 + 64) = v25;
    *(_QWORD *)(v13 + 72) = v26;
    v27 = (__n128 *)sub_1000D9C18(v19, v16 + 2 * v18);
    v28 = (char *)sub_100099954(v27, (__n128)xmmword_10097DA20) + v16;
    v29 = *(_QWORD *)(a1 + 16);
    sub_10008611C(v29 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex, (uint64_t)v28);
    sub_1000C3608(v29 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, (uint64_t)&v28[v18]);
    *(_QWORD *)(v13 + 80) = sub_1000B4580();
    *(_QWORD *)(v13 + 88) = v30;
    *(_QWORD *)(v13 + 96) = v31;
    v32 = (__n128 *)sub_1000D9C18(v93, v16 + 2 * v18);
    sub_1000D1674(v32);
    sub_100098A1C(v18 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind, (uint64_t)v28);
    sub_100098A1C(v18 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)&v28[v18]);
    *(_QWORD *)(v13 + 104) = sub_1000B4580();
    *(_QWORD *)(v13 + 112) = v33;
    *(_QWORD *)(v13 + 120) = v34;
    v35 = (__n128 *)sub_1000D9C18(v93, v16 + 2 * v18);
    sub_1000D1674(v35);
    sub_1000C3608(v18 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike, (uint64_t)v28);
    v36 = v18;
    sub_1000C3608(v18 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)&v28[v18]);
    *(_QWORD *)(v13 + 128) = sub_1000B4580();
    *(_QWORD *)(v13 + 136) = v37;
    *(_QWORD *)(v13 + 144) = v38;
    v39 = sub_1000BA6B8(v93);
    *(_OWORD *)(v39 + 16) = v95;
    v40 = v39 + v16;
    v41 = *(_QWORD *)(a1 + 16);
    sub_100095B78(v41 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility, v39 + v16, type metadata accessor for LocationComponentContainerViewModel);
    sub_100095B78(v41 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, v40 + v36, type metadata accessor for LocationComponentContainerViewModel);
    *(_QWORD *)(v13 + 152) = sub_1000B4580();
    *(_QWORD *)(v13 + 160) = v42;
    *(_QWORD *)(v13 + 168) = v43;
    v44 = sub_1000BA6B8(v93);
    *(_OWORD *)(v44 + 16) = v95;
    v45 = *(_QWORD *)(a1 + 16);
    sub_10009D3BC(v45 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, v44 + v16);
    sub_10009D3BC(v45 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, v44 + v16 + v36);
    *(_QWORD *)(v13 + 176) = sub_100080C44(v44);
    *(_QWORD *)(v13 + 184) = v46;
    *(_QWORD *)(v13 + 192) = v47;
  }
  else
  {
    sub_10007C77C(v5, v10, type metadata accessor for LocationComponentContainerViewModel);
    v48 = sub_1000BA294(&qword_100BCC750);
    v49 = swift_allocObject(v48, 224, 7);
    *(_OWORD *)(v49 + 16) = xmmword_10098BCC0;
    v50 = sub_1000BA294(&qword_100BCC758);
    v94 = *(_QWORD *)(v7 + 72);
    v51 = *(unsigned __int8 *)(v7 + 80);
    v52 = (v51 + 32) & ~v51;
    v53 = v51 | 7;
    v54 = v50;
    v55 = (__n128 *)sub_1000BA6AC(v50);
    v56 = sub_100099954(v55, (__n128)xmmword_10097CA50);
    sub_1000C3608(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, (uint64_t)v56 + v52);
    *(_QWORD *)(v49 + 32) = sub_1000B4588();
    *(_QWORD *)(v49 + 40) = v57;
    *(_QWORD *)(v49 + 48) = v58;
    v59 = sub_1000BA6AC(v54);
    *(_OWORD *)(v59 + 16) = v95;
    sub_1000C3608(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v59 + v52);
    *(_QWORD *)(v49 + 56) = sub_1000B4588();
    *(_QWORD *)(v49 + 64) = v60;
    *(_QWORD *)(v49 + 72) = v61;
    v62 = sub_1000BA6AC(v54);
    *(_OWORD *)(v62 + 16) = v95;
    sub_1000C3608(v10, v62 + v52);
    *(_QWORD *)(v49 + 80) = sub_1000B4580();
    *(_QWORD *)(v49 + 88) = v63;
    *(_QWORD *)(v49 + 96) = v64;
    v65 = (__n128 *)swift_allocObject(v54, v52 + 2 * v94, v53);
    v66 = (char *)sub_100099954(v65, (__n128)xmmword_10097DA20) + v52;
    v67 = *(_QWORD *)(a1 + 16);
    v68 = sub_1000CFBE8(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex);
    sub_100095B78(v68, v69, type metadata accessor for LocationComponentContainerViewModel);
    sub_100095B78(v67 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, (uint64_t)&v66[v94], type metadata accessor for LocationComponentContainerViewModel);
    *(_QWORD *)(v49 + 104) = sub_1000B4588();
    *(_QWORD *)(v49 + 112) = v70;
    *(_QWORD *)(v49 + 120) = v71;
    v72 = sub_1000BA6AC(v54);
    *(_OWORD *)(v72 + 16) = v95;
    v73 = v72 + v52;
    v74 = *(_QWORD *)(a1 + 16);
    v75 = sub_1000CFBE8(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind);
    sub_100095B78(v75, v76, type metadata accessor for LocationComponentContainerViewModel);
    sub_1000D94C0(v74 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, v73 + v94);
    *(_QWORD *)(v49 + 128) = sub_1000B4588();
    *(_QWORD *)(v49 + 136) = v77;
    *(_QWORD *)(v49 + 144) = v78;
    v79 = (__n128 *)sub_1000BA6AC(v54);
    sub_100098AE8(v79);
    v80 = sub_1000CFBE8(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike);
    sub_10008611C(v80, v81);
    sub_10008611C(v74 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, v73 + v94);
    *(_QWORD *)(v49 + 152) = sub_1000B4588();
    *(_QWORD *)(v49 + 160) = v82;
    *(_QWORD *)(v49 + 168) = v83;
    v84 = (__n128 *)sub_1000BA6AC(v54);
    sub_100098AE8(v84);
    v85 = sub_1000CFBE8(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility);
    sub_1000D94C0(v85, v86);
    sub_1000D94C0(v74 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, v73 + v94);
    *(_QWORD *)(v49 + 176) = sub_1000B4588();
    *(_QWORD *)(v49 + 184) = v87;
    *(_QWORD *)(v49 + 192) = v88;
    v89 = swift_allocObject(v54, v52 + 2 * v94, v53);
    *(_OWORD *)(v89 + 16) = v95;
    v90 = *(_QWORD *)(a1 + 16);
    sub_1000D94C0(v90 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, v89 + v52);
    sub_1000D94C0(v90 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, v89 + v52 + v94);
    *(_QWORD *)(v49 + 200) = sub_100080C44(v89);
    *(_QWORD *)(v49 + 208) = v91;
    *(_QWORD *)(v49 + 216) = v92;
    sub_1000215BC(v10, type metadata accessor for LocationComponentContainerViewModel);
  }
  sub_100098640();
}

void sub_10026444C(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  char *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE v103[32];

  v102 = a3;
  v101 = type metadata accessor for TipPriorityQueue.GridEntry(0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_1000986FC();
  v100 = v5;
  sub_10009D2A4();
  __chkstk_darwin(v6);
  v99 = (uint64_t)&v81 - v7;
  sub_10009D2A4();
  __chkstk_darwin(v8);
  v98 = (uint64_t)&v81 - v9;
  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = v12 - v11;
  type metadata accessor for LocationComponentViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  v16 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v83 = (uint64_t)&v81 - v18;
  sub_1000BA294(&qword_100BCC760);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  sub_1000986FC();
  v97 = v20;
  sub_10009D2A4();
  __chkstk_darwin(v21);
  v96 = (uint64_t)&v81 - v22;
  sub_10009D2A4();
  __chkstk_darwin(v23);
  __chkstk_darwin(v24);
  v94 = v26;
  v95 = (uint64_t)&v81 - v25;
  if (a1)
  {
    v27 = v13;
    sub_1000C25F4();
    v37 = v28 + 38;
    v38 = v28 + 39;
    v39 = v28 + 40;
    v40 = v28 + 45;
    v41 = v28 + 46;
    v42 = v28 + 47;
    v43 = v28 + 48;
    v44 = (char *)(v28 + 20);
  }
  else
  {
    sub_1000C25F4();
    v37 = v28 + 38;
    v38 = v28 + 39;
    v39 = v28 + 40;
    v40 = v28 + 45;
    v41 = v28 + 46;
    v42 = v28 + 47;
    v43 = v28 + 48;
    v44 = (char *)(v28 + 20);
    v27 = v13;
  }
  v45 = *v44;
  v46 = *v28;
  v47 = *v29;
  v85 = *v30;
  v84 = *v31;
  v48 = *v32;
  v49 = *v33;
  v50 = *v34;
  v51 = *v35;
  v52 = *v36;
  v88 = *v37;
  v89 = v52;
  v53 = *v38;
  v86 = *v39;
  v87 = v53;
  v54 = *v40;
  v92 = *v41;
  v93 = v54;
  v55 = *v42;
  v90 = *v43;
  v91 = v55;
  v56 = v102 + OBJC_IVAR____TtCV7Weather12NoAqiContent8_Storage_map;
  sub_1000992EC(v102 + OBJC_IVAR____TtCV7Weather12NoAqiContent8_Storage_map, (uint64_t)v103);
  sub_10003773C(v56, v27, &qword_100BC4A98);
  v57 = type metadata accessor for LocationComponentContainerViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0(v27, 1, v57) == 1)
  {
    sub_100021A14(v27, &qword_100BC4A98);
    v58 = 1;
    v59 = v94;
  }
  else
  {
    v82 = v51;
    sub_10009D3BC(v27 + *(int *)(v57 + 20), (uint64_t)v16);
    sub_1000215BC(v27, type metadata accessor for LocationComponentContainerViewModel);
    v60 = v83;
    sub_10007C77C((uint64_t)v16, v83, type metadata accessor for LocationComponentViewModel);
    if ((v45 & 1) != 0)
    {
      sub_1000215BC(v60, type metadata accessor for LocationComponentViewModel);
      v58 = 1;
      v59 = v94;
    }
    else
    {
      v59 = v94;
      sub_10007C77C(v60, v94, type metadata accessor for LocationComponentViewModel);
      v58 = 0;
      v61 = (_QWORD *)(v59 + *(int *)(v101 + 20));
      *v61 = v48;
      v61[1] = v49;
      v62 = v82;
      v61[2] = v50;
      v61[3] = v62;
    }
  }
  v63 = v101;
  _s7Weather24LocationCompositionStateOwst_0(v59, v58, 1, v101);
  v64 = v95;
  sub_1002228F0(v59, v95);
  v65 = v96;
  _s7Weather24LocationCompositionStateOwst_0(v96, 1, 1, v63);
  v66 = sub_1000CD630(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast);
  v67 = v98;
  sub_100098A1C(v66, v98);
  v68 = (_QWORD *)(v67 + *(int *)(v63 + 20));
  *v68 = v46;
  v68[1] = v47;
  v69 = v84;
  v68[2] = v85;
  v68[3] = v69;
  v70 = v97;
  sub_10003773C(v64, v97, &qword_100BCC760);
  v71 = sub_1000CD630(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex);
  v72 = v99;
  sub_100098A1C(v71, v99);
  v73 = (_QWORD *)(v72 + *(int *)(v63 + 20));
  v74 = v88;
  *v73 = v89;
  v73[1] = v74;
  v75 = v86;
  v73[2] = v87;
  v73[3] = v75;
  v76 = sub_1000CD630(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind);
  v77 = v100;
  sub_100098A1C(v76, v100);
  v78 = (_QWORD *)(v77 + *(int *)(v63 + 20));
  v79 = v92;
  *v78 = v93;
  v78[1] = v79;
  v80 = v90;
  v78[2] = v91;
  v78[3] = v80;
  sub_10087CED0(v65, v67, v70, v72, v77);
  sub_100021A14(v64, &qword_100BCC760);
  sub_100098640();
}

void sub_100264948(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  __n128 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[5];
  uint64_t v26;

  v2 = v1;
  v4 = sub_1000D0C54();
  v24 = *(_QWORD *)(v4 - 8);
  sub_10009D98C();
  __chkstk_darwin(v5);
  sub_100098728();
  v8 = v7 - v6;
  v9 = sub_100099984();
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_100098728();
  v13 = v12 - v11;
  v14 = v2 + OBJC_IVAR____TtC7Weather21AppContinuationBridge_pendingOpenL2Descriptor;
  sub_1000CD640(v15, (uint64_t)aBlock);
  sub_100265E98(a1, v14);
  swift_endAccess(aBlock);
  sub_1000C2420();
  v16 = (void *)sub_1000BBE70();
  aBlock[4] = sub_100265EE0;
  v26 = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100121D84;
  aBlock[3] = &unk_100B676A0;
  v17 = _Block_copy(aBlock);
  v18 = v26;
  swift_retain();
  v19 = swift_release(v18);
  static DispatchQoS.unspecified.getter(v19);
  aBlock[0] = _swiftEmptyArrayStorage;
  v20 = sub_1001221E0();
  v21 = sub_100098B10();
  sub_1000DA4EC((unint64_t *)&qword_100BFFA30, v22, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v21, v23, v4, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v8, v17);
  _Block_release(v17);

  sub_100098820(v8, *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8));
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  sub_100098640();
}

uint64_t sub_100264B04(uint64_t a1)
{
  return withTransaction<A>(_:_:)(0, sub_100265EE8, a1, &type metadata for () + 1);
}

double sub_100264B48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  double result;
  _OWORD v9[2];
  uint64_t v10;

  v2 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(uint64_t (**)(uint64_t))(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  swift_storeEnumTagMultiPayload(v4, v7, 19);
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  swift_retain();
  sub_1000A5EBC((uint64_t)v4, (uint64_t)v9, v6);
  sub_100021A14((uint64_t)v9, (uint64_t *)&unk_100BFFA10);
  sub_1000215BC((uint64_t)v4, type metadata accessor for MainAction);
  *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  return result;
}

void sub_100264C20(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  __n128 *inited;
  __n128 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  int v65;
  uint8_t *v66;
  uint64_t v67;
  __n128 *v68;
  __n128 *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint8_t *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  __n128 v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint8_t *v99;
  uint64_t v100;
  _QWORD v101[2];
  uint8_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint8_t *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD v122[7];
  uint64_t v123;
  char v124[32];

  v119 = a1;
  v2 = sub_1000D0C54();
  v116 = *(_QWORD *)(v2 - 8);
  v117 = (uint8_t *)v2;
  sub_10009D98C();
  __chkstk_darwin(v3);
  sub_100088FDC();
  v115 = v4;
  v5 = sub_100099984();
  v113 = *(_QWORD *)(v5 - 8);
  v114 = v5;
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v112 = v7;
  v8 = sub_1000BA294(&qword_100BD0160);
  v110 = *(_QWORD *)(v8 - 8);
  v111 = v8;
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_100088FDC();
  v109 = v10;
  sub_1000BA294(&qword_100BD0168);
  sub_10009D98C();
  __chkstk_darwin(v11);
  sub_100098728();
  v14 = v13 - v12;
  v15 = type metadata accessor for LocationViewAction(0);
  v105 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v106 = v16;
  v107 = (uint64_t)v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v120 = (uint64_t)v101 - v18;
  sub_1000BA294(&qword_100BC61F8);
  sub_10009D98C();
  __chkstk_darwin(v19);
  v21 = (char *)v101 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)v101 - v23;
  v25 = type metadata accessor for OpenL2Descriptor(0);
  sub_10009D98C();
  __chkstk_darwin(v26);
  v118 = (uint64_t)v101 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v104 = (uint64_t)v101 - v29;
  __chkstk_darwin(v30);
  v32 = (char *)v101 - v31;
  v108 = v1;
  v33 = v1 + OBJC_IVAR____TtC7Weather21AppContinuationBridge_pendingOpenL2Descriptor;
  swift_beginAccess(v1 + OBJC_IVAR____TtC7Weather21AppContinuationBridge_pendingOpenL2Descriptor, v124, 0, 0);
  sub_10003773C(v33, (uint64_t)v24, &qword_100BC61F8);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v24, 1, v25) == 1)
  {
    sub_100021A14((uint64_t)v24, &qword_100BC61F8);
  }
  else
  {
    sub_10007C77C((uint64_t)v24, (uint64_t)v32, type metadata accessor for OpenL2Descriptor);
    v34 = sub_1000C4638((uint64_t)v21, 1);
    sub_1000CD640(v34, (uint64_t)v122);
    sub_100266088((uint64_t)v21, v33);
    swift_endAccess(v122);
    type metadata accessor for OpenL2ActionHandler();
    sub_100095B78((uint64_t)v32, (uint64_t)v21, type metadata accessor for OpenL2Descriptor);
    sub_1000C4638((uint64_t)v21, 0);
    sub_100860014((uint64_t)v21, v14);
    sub_100021A14((uint64_t)v21, &qword_100BC61F8);
    v35 = v32;
    if (_s7Weather24LocationCompositionStateOwet_0(v14, 1, v15) == 1)
    {
      sub_100021A14(v14, &qword_100BD0168);
      if (qword_100BC24B0 != -1)
        swift_once(&qword_100BC24B0, sub_1006F391C);
      v36 = type metadata accessor for Logger(0);
      sub_1000AECD4(v36, (uint64_t)qword_100CAF1F8);
      v37 = v118;
      sub_100095B78((uint64_t)v32, v118, type metadata accessor for OpenL2Descriptor);
      v39 = Logger.logObject.getter(v38);
      v41 = static os_log_type_t.error.getter(v39, v40);
      if (os_log_type_enabled(v39, v41))
      {
        v42 = (uint8_t *)sub_100098710(12);
        v120 = sub_100098710(32);
        v122[0] = v120;
        *(_DWORD *)v42 = 136446210;
        v117 = v42 + 4;
        v43 = sub_1000BA294(&qword_100BC31F0);
        inited = (__n128 *)swift_initStackObject(v43, &v123);
        v45 = sub_1000D8E78(inited, (__n128)xmmword_10098B610);
        v46 = sub_1000C36CC((uint64_t)v45, (uint64_t)&type metadata for DetailKind);
        *(_BYTE *)(v46 + 96) = *(_BYTE *)(v37 + 1);
        sub_1000DF4D4((_QWORD *)v46);
        v119 = v35;
        v49 = v48 + v47;
        v50 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        v51 = sub_1000C65F0(v50);
        sub_10003773C(v49, (uint64_t)v51, (uint64_t *)&unk_100BD35A0);
        v52 = sub_1000C0D60();
        v53 = v109;
        sub_1000DAE68(v52, 0x80000001009F75B0, v52);
        sub_10003D310((unint64_t *)&qword_100BD0170, &qword_100BD0160, (uint64_t)&protocol conformance descriptor for ShortDescription<A>);
        sub_1000C69E8(2);
        sub_1000E76C8();
        v54(v53, v25);
        v55 = sub_1000CFBF4();
        v56 = sub_1000C0970(v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v56, v57);
        swift_bridgeObjectRelease();
        sub_1000215BC(v118, type metadata accessor for OpenL2Descriptor);
        _os_log_impl((void *)&_mh_execute_header, v39, v41, "Could not create L2 action for %{public}s, L2 may not be supported at location.", v42, 0xCu);
        v58 = v120;
        sub_1000C1438();
        sub_1000986F0(v58);
        sub_1000986F0((uint64_t)v42);

        v59 = (uint64_t)v119;
      }
      else
      {

        sub_1000215BC(v37, type metadata accessor for OpenL2Descriptor);
        v59 = (uint64_t)v32;
      }
    }
    else
    {
      sub_10007C77C(v14, v120, type metadata accessor for LocationViewAction);
      if (qword_100BC24B0 != -1)
        swift_once(&qword_100BC24B0, sub_1006F391C);
      v60 = type metadata accessor for Logger(0);
      sub_1000AECD4(v60, (uint64_t)qword_100CAF1F8);
      v119 = v32;
      v61 = v104;
      sub_100095B78((uint64_t)v32, v104, type metadata accessor for OpenL2Descriptor);
      v63 = Logger.logObject.getter(v62);
      v64 = static os_log_type_t.default.getter(v63);
      v65 = v64;
      if (os_log_type_enabled(v63, v64))
      {
        LODWORD(v118) = v65;
        v66 = (uint8_t *)sub_100098710(12);
        v103 = sub_100098710(32);
        v122[0] = v103;
        *(_DWORD *)v66 = 136446210;
        v101[1] = v66 + 4;
        v102 = v66;
        v67 = sub_1000BA294(&qword_100BC31F0);
        v68 = (__n128 *)swift_initStackObject(v67, &v121);
        v69 = sub_1000D8E78(v68, (__n128)xmmword_10098B610);
        v70 = sub_1000C36CC((uint64_t)v69, (uint64_t)&type metadata for DetailKind);
        *(_BYTE *)(v70 + 96) = *(_BYTE *)(v61 + 1);
        sub_1000DF4D4((_QWORD *)v70);
        v72 = v61 + v71;
        v73 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        v74 = sub_1000C65F0(v73);
        sub_10003773C(v72, (uint64_t)v74, (uint64_t *)&unk_100BD35A0);
        v75 = sub_1000C0D60();
        v76 = v109;
        sub_1000DAE68(v75, 0x80000001009F75B0, v75);
        sub_10003D310((unint64_t *)&qword_100BD0170, &qword_100BD0160, (uint64_t)&protocol conformance descriptor for ShortDescription<A>);
        sub_1000C69E8(2);
        sub_1000E76C8();
        v77(v76, v25);
        v78 = sub_1000CFBF4();
        v79 = sub_1000C0970(v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v79, v80);
        swift_bridgeObjectRelease();
        sub_1000215BC(v61, type metadata accessor for OpenL2Descriptor);
        v81 = v102;
        _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v118, "Opening L2: %{public}s...", v102, 0xCu);
        v82 = v103;
        sub_1000C1438();
        sub_1000986F0(v82);
        sub_1000986F0((uint64_t)v81);
      }
      else
      {
        sub_1000215BC(v61, type metadata accessor for OpenL2Descriptor);
      }

      sub_1000C2420();
      v83 = (void *)sub_1000BBE70();
      v84 = v107;
      v86 = *(_QWORD *)(v108 + 16);
      v85 = *(_QWORD *)(v108 + 24);
      v87 = v120;
      sub_100095B78(v120, v107, type metadata accessor for LocationViewAction);
      v88 = *(unsigned __int8 *)(v105 + 80);
      v89 = (v88 + 32) & ~v88;
      v90 = swift_allocObject(&unk_100B67778, v89 + v106, v88 | 7);
      *(_QWORD *)(v90 + 16) = v86;
      *(_QWORD *)(v90 + 24) = v85;
      sub_10007C77C(v84, v90 + v89, type metadata accessor for LocationViewAction);
      v122[4] = sub_100266204;
      v122[5] = v90;
      v122[0] = _NSConcreteStackBlock;
      v122[1] = 1107296256;
      v122[2] = sub_100121D84;
      v122[3] = &unk_100B67790;
      v91 = _Block_copy(v122);
      sub_100094EE4();
      v92 = swift_release();
      v93 = v112;
      static DispatchQoS.unspecified.getter(v92);
      v122[0] = _swiftEmptyArrayStorage;
      v94 = sub_1001221E0();
      v95 = sub_100098B10();
      sub_1000DA4EC((unint64_t *)&qword_100BFFA30, v96, (uint64_t)&protocol conformance descriptor for [A]);
      v97 = v115;
      v98 = v95;
      v99 = v117;
      dispatch thunk of SetAlgebra.init<A>(_:)(v122, v98, v100, v117, v94);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v93, v97, v91);
      _Block_release(v91);

      (*(void (**)(uint64_t, uint8_t *))(v116 + 8))(v97, v99);
      (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v93, v114);
      sub_1000215BC(v87, type metadata accessor for LocationViewAction);
      v59 = (uint64_t)v119;
    }
    sub_1000215BC(v59, type metadata accessor for OpenL2Descriptor);
  }
  sub_100098640();
}

void sub_100265550(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _OWORD v8[2];
  uint64_t v9;

  v5 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v5);
  v7 = (char *)v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100095B78(a3, (uint64_t)v7, type metadata accessor for LocationViewAction);
  swift_storeEnumTagMultiPayload(v7, v5, 8);
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  sub_1000A5EBC((uint64_t)v7, (uint64_t)v8, a1);
  sub_100021A14((uint64_t)v8, (uint64_t *)&unk_100BFFA10);
  sub_1000215BC((uint64_t)v7, type metadata accessor for MainAction);
}

void sub_10026563C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  __n128 v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  __n128 v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void **v52;
  uint64_t v53;
  uint64_t (*v54)();
  uint64_t v55;

  v4 = v3;
  v7 = type metadata accessor for ActivityAction(0);
  v47 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v48 = v8;
  v49 = (uint64_t)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000D0C54();
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_100098728();
  v13 = v12 - v11;
  v14 = sub_100099984();
  v50 = *(_QWORD *)(v14 - 8);
  v51 = v14;
  sub_10009D98C();
  __chkstk_darwin(v15);
  sub_100098728();
  v18 = v17 - v16;
  withTransaction<A>(_:_:)(0, sub_100265F00, v4, &type metadata for () + 1);
  if ((a3 & 1) != 0)
  {
    sub_1000C2420();
    v46 = sub_1000BBE70();
    v20 = *(_QWORD *)(v4 + 16);
    v19 = *(_QWORD *)(v4 + 24);
    v21 = swift_allocObject(&unk_100B67728, 32, 7);
    *(_QWORD *)(v21 + 16) = v20;
    *(_QWORD *)(v21 + 24) = v19;
    v54 = sub_10026604C;
    v55 = v21;
    v52 = _NSConcreteStackBlock;
    v53 = 1107296256;
    v22 = sub_1001098E0((uint64_t)&unk_100B67740);
    v23 = v55;
    sub_100094EE4();
    v24 = swift_release(v23);
    static DispatchQoS.unspecified.getter(v24);
    v52 = (void **)_swiftEmptyArrayStorage;
    v25 = sub_1001221E0();
    v26 = sub_100098B10();
    sub_1000DA4EC((unint64_t *)&qword_100BFFA30, v27, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v26, v28, v9, v25);
    v29 = (void *)v46;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v18, v13, v22);
    _Block_release(v22);

    sub_100098820(v13, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
    sub_1000D0058();
  }
  sub_1000C2420();
  v30 = (void *)sub_1000BBE70();
  v46 = v10;
  v32 = *(_QWORD *)(v4 + 16);
  v31 = *(_QWORD *)(v4 + 24);
  v33 = a1;
  v34 = v49;
  sub_100095B78(v33, v49, type metadata accessor for ActivityAction);
  v35 = *(unsigned __int8 *)(v47 + 80);
  v36 = (v35 + 32) & ~v35;
  v37 = swift_allocObject(&unk_100B676D8, v36 + v48, v35 | 7);
  *(_QWORD *)(v37 + 16) = v32;
  *(_QWORD *)(v37 + 24) = v31;
  sub_10007C77C(v34, v37 + v36, type metadata accessor for ActivityAction);
  v54 = sub_100266014;
  v55 = v37;
  v52 = _NSConcreteStackBlock;
  v53 = 1107296256;
  v38 = sub_1001098E0((uint64_t)&unk_100B676F0);
  v39 = v55;
  sub_100094EE4();
  v40 = swift_release(v39);
  static DispatchQoS.unspecified.getter(v40);
  v52 = (void **)_swiftEmptyArrayStorage;
  v41 = sub_1001221E0();
  v42 = sub_100098B10();
  sub_1000DA4EC((unint64_t *)&qword_100BFFA30, v43, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v42, v44, v9, v41);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v18, v13, v38);
  _Block_release(v38);

  sub_100098820(v13, *(uint64_t (**)(uint64_t, uint64_t))(v46 + 8));
  sub_1000D0058();
  sub_100098640();
}

double sub_100265988(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  double result;
  _OWORD v10[2];
  uint64_t v11;

  v2 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(uint64_t (**)(uint64_t))(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v7 = type metadata accessor for ActivityAction(0);
  swift_storeEnumTagMultiPayload(v4, v7, 2);
  v8 = type metadata accessor for EnvironmentAction(0);
  swift_storeEnumTagMultiPayload(v4, v8, 3);
  swift_storeEnumTagMultiPayload(v4, v2, 2);
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  swift_retain();
  sub_1000A5EBC((uint64_t)v4, (uint64_t)v10, v6);
  sub_100021A14((uint64_t)v10, (uint64_t *)&unk_100BFFA10);
  sub_1000215BC((uint64_t)v4, type metadata accessor for MainAction);
  *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  return result;
}

uint64_t sub_100265A94(uint64_t a1, uint64_t a2)
{
  _QWORD v3[6];

  v3[2] = a1;
  v3[3] = a2;
  return withTransaction<A>(_:_:)(0, sub_100266054, v3, &type metadata for () + 1);
}

void sub_100265ADC(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v2);
  v4 = (char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ActivityAction(0);
  swift_storeEnumTagMultiPayload(v4, v5, 6);
  v6 = type metadata accessor for EnvironmentAction(0);
  swift_storeEnumTagMultiPayload(v4, v6, 3);
  swift_storeEnumTagMultiPayload(v4, v2, 2);
  v8 = 0;
  memset(v7, 0, sizeof(v7));
  sub_1000A5EBC((uint64_t)v4, (uint64_t)v7, a1);
  sub_100021A14((uint64_t)v7, (uint64_t *)&unk_100BFFA10);
  sub_1000215BC((uint64_t)v4, type metadata accessor for MainAction);
}

uint64_t sub_100265BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[6];

  v5[2] = a1;
  v5[3] = a2;
  v5[4] = a3;
  return withTransaction<A>(_:_:)(0, a4, v5, (char *)&type metadata for () + 8);
}

void sub_100265C24(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;

  v5 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v5);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100095B78(a3, (uint64_t)v7, type metadata accessor for ActivityAction);
  v8 = type metadata accessor for EnvironmentAction(0);
  swift_storeEnumTagMultiPayload(v7, v8, 3);
  swift_storeEnumTagMultiPayload(v7, v5, 2);
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  sub_1000A5EBC((uint64_t)v7, (uint64_t)v9, a1);
  sub_100021A14((uint64_t)v9, (uint64_t *)&unk_100BFFA10);
  sub_1000215BC((uint64_t)v7, type metadata accessor for MainAction);
}

uint64_t sub_100265D28()
{
  _QWORD *v0;

  swift_release(v0[3]);
  sub_100021A14((uint64_t)v0 + OBJC_IVAR____TtC7Weather21AppContinuationBridge_pendingOpenL2Descriptor, &qword_100BC61F8);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100265D68()
{
  return type metadata accessor for AppContinuationBridge(0);
}

uint64_t type metadata accessor for AppContinuationBridge(uint64_t a1)
{
  uint64_t result;

  result = qword_100BD0030;
  if (!qword_100BD0030)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppContinuationBridge);
  return result;
}

void sub_100265DA8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for () + 64;
  sub_100265E24(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

void sub_100265E24(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BD0040)
  {
    v2 = type metadata accessor for OpenL2Descriptor(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BD0040);
  }
}

uint64_t type metadata accessor for RootViewControllerResolver()
{
  return objc_opt_self(_TtC7Weather26RootViewControllerResolver);
}

uint64_t sub_100265E98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BC61F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100265EE0()
{
  uint64_t v0;

  return sub_100264B04(v0);
}

double sub_100265EE8()
{
  uint64_t v0;

  return sub_100264B48(v0);
}

double sub_100265F00()
{
  uint64_t v0;

  return sub_100265988(v0);
}

uint64_t sub_100265F18()
{
  id *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v11;

  type metadata accessor for ActivityAction(0);
  sub_1000C2618();
  v5 = sub_10009D410();
  if (v5 == 1)
  {
    v7 = type metadata accessor for PreviewLocation(0);
    switch(sub_10009DA58(v7))
    {
      case 0u:
        goto LABEL_6;
      case 1u:
        type metadata accessor for LocationOfInterest(0);
        goto LABEL_8;
      case 2u:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        type metadata accessor for SearchLocation(0);
        v11 = sub_1000992C4();
        if (sub_1000C1D58(v11))
          return sub_100098B00(v1, v3 + v4, v2 | 7);
        v8 = sub_1000DA920();
        break;
      case 3u:
        swift_bridgeObjectRelease();
        return sub_100098B00(v1, v3 + v4, v2 | 7);
      default:
        return sub_100098B00(v1, v3 + v4, v2 | 7);
    }
    goto LABEL_9;
  }
  if (!v5)
  {
    v6 = type metadata accessor for SavedLocation(0);
    if (sub_10009DA58(v6) == 1)
      type metadata accessor for SavedLocation.Placeholder(0);
    else
LABEL_6:
      sub_1000992C4();
LABEL_8:
    v8 = sub_1000C5288();
LABEL_9:
    v9(v8);
  }
  return sub_100098B00(v1, v3 + v4, v2 | 7);
}

uint64_t sub_100266014()
{
  return sub_100266218(type metadata accessor for ActivityAction, (uint64_t)sub_10026606C);
}

uint64_t sub_100266028()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10026604C()
{
  uint64_t v0;

  return sub_100265A94(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100266054()
{
  uint64_t v0;

  sub_100265ADC(*(uint64_t (**)(uint64_t))(v0 + 16));
}

void sub_10026606C()
{
  uint64_t v0;

  sub_100265C24(*(uint64_t (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100266088(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BC61F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002660D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  type metadata accessor for LocationViewAction(0);
  sub_1000C2618();
  v5 = sub_10009D410();
  switch(v5)
  {
    case 2:
      v7 = sub_1000992C4();
      sub_10003BC44(v7);
      sub_1000BA294(&qword_100BC5FC0);
      type metadata accessor for LocationOfInterest(0);
      goto LABEL_8;
    case 1:
      v6 = type metadata accessor for LocationComponentAction(0);
      switch(sub_10009DA58(v6))
      {
        case 0u:
          type metadata accessor for URL(0);
          goto LABEL_12;
        case 1u:
          type metadata accessor for WeatherMapOverlayKind(0);
          goto LABEL_12;
        case 2u:
          type metadata accessor for DetailCondition(0);
LABEL_12:
          v10 = sub_1000C5288();
          goto LABEL_14;
        case 4u:
          v13 = v0 + *(int *)(sub_1000BA294(&qword_100BC5FF0) + 48);
          v11 = sub_1000992C4();
          v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
          v10 = v13;
LABEL_14:
          v12(v10, v11);
          break;
        default:
          break;
      }
      sub_1000BA294(&qword_100BC5FC8);
      v14 = type metadata accessor for Date(0);
      if (!sub_1000C1D58(v14))
      {
        v8 = sub_1000DA920();
        goto LABEL_9;
      }
      break;
    case 0:
      sub_1000992C4();
LABEL_8:
      v8 = sub_1000C5288();
LABEL_9:
      v9(v8);
      break;
  }
  return sub_100098B00(v1, v3 + v4, v2 | 7);
}

uint64_t sub_100266204()
{
  return sub_100266218(type metadata accessor for LocationViewAction, (uint64_t)sub_100266260);
}

uint64_t sub_100266218(uint64_t (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  return sub_100265BD8(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + ((v4 + 32) & ~v4), a2);
}

void sub_100266260()
{
  uint64_t v0;

  sub_100265550(*(uint64_t (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

void **sub_100266294(void **a1, void **a2, int *a3)
{
  int v4;
  char *v5;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = (char *)*a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (void **)&v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    v8 = a3[5];
    v9 = (void **)((char *)a1 + v8);
    v10 = (void **)((char *)a2 + v8);
    v11 = v5;
    v12 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v10) == 1)
    {
      v13 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v9, v10, v13);
      v14 = 1;
    }
    else
    {
      *v9 = *v10;
      swift_retain();
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v12, v14);
    v15 = a3[7];
    *(void **)((char *)a1 + a3[6]) = *(void **)((char *)a2 + a3[6]);
    *(void **)((char *)a1 + v15) = *(void **)((char *)a2 + v15);
  }
  return a1;
}

double sub_100266384(id *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  double result;

  v4 = (id *)((char *)a1 + *(int *)(a2 + 20));
  sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v4) == 1)
  {
    v5 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v4).n128_u64[0];
  }
  return result;
}

void **sub_1002663FC(void **a1, void **a2, int *a3)
{
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *a2;
  *a1 = *a2;
  v7 = a3[5];
  v8 = (void **)((char *)a1 + v7);
  v9 = (void **)((char *)a2 + v7);
  v10 = v6;
  v11 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v9) == 1)
  {
    v12 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v8, v9, v12);
    v13 = 1;
  }
  else
  {
    *v8 = *v9;
    swift_retain();
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v11, v13);
  v14 = a3[7];
  *(void **)((char *)a1 + a3[6]) = *(void **)((char *)a2 + a3[6]);
  *(void **)((char *)a1 + v14) = *(void **)((char *)a2 + v14);
  return a1;
}

void **sub_1002664C8(void **a1, void **a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  if (a1 != a2)
  {
    v9 = a3[5];
    v10 = (void **)((char *)a1 + v9);
    v11 = (void **)((char *)a2 + v9);
    sub_100021A68((uint64_t)a1 + v9, &qword_100BC37D8);
    v12 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v11) == 1)
    {
      v13 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      *v10 = *v11;
      swift_retain();
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
  }
  *(void **)((char *)a1 + a3[6]) = *(void **)((char *)a2 + a3[6]);
  *(void **)((char *)a1 + a3[7]) = *(void **)((char *)a2 + a3[7]);
  return a1;
}

_QWORD *sub_1002665B8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v8) == 1)
  {
    v10 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  return a1;
}

void **sub_100266684(void **a1, void **a2, int *a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a1;
  *a1 = *a2;

  if (a1 != a2)
  {
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    sub_100021A68((uint64_t)a1 + v7, &qword_100BC37D8);
    v10 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v9) == 1)
    {
      v11 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  v12 = a3[7];
  *(void **)((char *)a1 + a3[6]) = *(void **)((char *)a2 + a3[6]);
  *(void **)((char *)a1 + v12) = *(void **)((char *)a2 + v12);
  return a1;
}

uint64_t sub_100266770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10026677C);
}

uint64_t sub_10026677C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000BA294((uint64_t *)&unk_100C09CA0);
    return _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_1002667F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100266800);
}

_QWORD *sub_100266800(_QWORD *result, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *result = (a2 - 1);
  }
  else
  {
    v7 = sub_1000BA294((uint64_t *)&unk_100C09CA0);
    return (_QWORD *)_s7Weather24LocationCompositionStateOwst_0((uint64_t)v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for HorizontalABWithB1x1RatioLayout(uint64_t a1)
{
  uint64_t result;

  result = qword_100BD01D0;
  if (!qword_100BD01D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HorizontalABWithB1x1RatioLayout);
  return result;
}

void sub_1002668A8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_100158DB0(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

double sub_100266930(uint64_t a1, char a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  char v35;

  v33 = a4;
  v7 = sub_1000BA294(&qword_100BC42D0);
  __chkstk_darwin(v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LayoutSubview(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_100079F58();
  type metadata accessor for LayoutSubviews(0, v12);
  sub_100051B90(&qword_100BD0218, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutSubviews, (uint64_t)&protocol conformance descriptor for LayoutSubviews);
  sub_1000B4640();
  sub_1000DD84C();
  if (sub_1000BBE78() != 2)
    goto LABEL_10;
  v30 = v4;
  v31 = v11;
  v13 = v32;
  sub_1000B4640();
  sub_1000DD84C();
  if (sub_1000BBE78() != 2)
  {
    sub_10009E61C((uint64_t)v9, 1);
    goto LABEL_9;
  }
  LayoutSubviews.subscript.getter(0);
  sub_10009E61C((uint64_t)v9, 0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10) == 1)
  {
LABEL_9:
    sub_100021A68((uint64_t)v9, &qword_100BC42D0);
LABEL_10:
    if ((a2 & 1) != 0)
      return 10.0;
    else
      return *(double *)&a1;
  }
  v14 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v31 + 32))(v30, v9, v10);
  v15 = static ProposedViewSize.unspecified.getter(v14);
  v17 = v16 & 1;
  v35 = v17;
  v34 = v18 & 1;
  v20 = LayoutSubview.sizeThatFits(_:)(v15, v17, v19, v18 & 1);
  v22 = v21;
  if ((a2 & 1) != 0)
  {
    v28 = sub_1000C529C();
    v29 = *(int *)(v28 + 24);
    if (v22 <= *(double *)(v13 + v29))
      v22 = *(double *)(v13 + v29);
    sub_1000CC9D4();
    return v20 + v22 + *(double *)(v13 + *(int *)(v28 + 28));
  }
  else
  {
    v23 = *(double *)&a1;
    v24 = sub_1000C529C();
    v25 = *(double *)(v13 + *(int *)(v24 + 24));
    v26 = *(double *)(v13 + *(int *)(v24 + 28));
    if (*(double *)&a1 - v25 - v26 < v20)
    {
      v35 = 0;
      v34 = 1;
      ((void (*)(_QWORD, _QWORD, _QWORD, _QWORD))LayoutSubview.sizeThatFits(_:))(*(double *)&a1 - v25 - v26, 0, 0, 1);
    }
    sub_1000CC9D4();
  }
  return v23;
}

uint64_t sub_100266BA4(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  char *v27;
  id *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  CGFloat Height;
  CGFloat v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  __n128 v41;
  unint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  id *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  CGRect v57;

  v53 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  sub_100079F58();
  v10 = sub_1000BA294(&qword_100BC42D0);
  __chkstk_darwin(v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v49 - v14;
  v54 = type metadata accessor for LayoutSubview(0);
  v16 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v49 - v21;
  type metadata accessor for LayoutSubviews(0, v20);
  sub_100051B90(&qword_100BD0218, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutSubviews, (uint64_t)&protocol conformance descriptor for LayoutSubviews);
  sub_1000DCC2C();
  sub_1000C36F4();
  if (sub_1000BA6C4() != 2)
  {
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 1, 1, v54);
    goto LABEL_12;
  }
  v49 = v18;
  v50 = v4;
  v51 = v9;
  LayoutSubviews.subscript.getter(0);
  v23 = v54;
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 0, 1, v54);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v23) == 1)
  {
LABEL_12:
    v48 = (uint64_t)v15;
    return sub_100021A68(v48, &qword_100BC42D0);
  }
  v24 = v16;
  v25 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v26 = v22;
  v25(v22, v15, v23);
  sub_1000DCC2C();
  sub_1000C36F4();
  if (sub_1000BA6C4() != 2)
  {
    sub_10009C7F0((uint64_t)v12, 1);
    goto LABEL_15;
  }
  LayoutSubviews.subscript.getter(1);
  sub_10009C7F0((uint64_t)v12, 0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v23) == 1)
  {
LABEL_15:
    (*(void (**)(char *, uint64_t))(v24 + 8))(v22, v23);
    v48 = (uint64_t)v12;
    return sub_100021A68(v48, &qword_100BC42D0);
  }
  v27 = v49;
  v25(v49, v12, v23);
  v28 = v52;
  v29 = *v52;
  v30 = v50;
  v31 = OSSignpostID.init(log:)(v29);
  v32 = static os_signpost_type_t.begin.getter(v31);
  sub_1000C4644(v32, (uint64_t)&_mh_execute_header, (uint64_t)v29, (uint64_t)"Weather:layout_large_l1");
  v57.origin.x = a1;
  v57.origin.y = a2;
  v57.size.width = a3;
  v57.size.height = a4;
  Height = CGRectGetHeight(v57);
  v56 = 1;
  v55 = 0;
  v34 = a3 - LayoutSubview.sizeThatFits(_:)(0, 1, *(_QWORD *)&Height, 0);
  v35 = sub_1000C529C();
  v37 = *(double *)((char *)v28 + *(int *)(v35 + 28));
  v38 = v34 - v37;
  if (v34 - v37 > a4)
    v38 = a4;
  v36 = *(int *)(v35 + 24);
  if (v38 > *(double *)((char *)v28 + v36))
    v39 = v38;
  else
    v39 = *(double *)((char *)v28 + v36);
  v40 = sub_100266F7C(v39, a1, a2, a3, a4, a3, a4);
  v41.n128_u64[0] = static UnitPoint.topLeading.getter(v40);
  v43.n128_u64[0] = v42;
  v56 = 0;
  v55 = 0;
  v44 = ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, double, double, __n128, __n128))LayoutSubview.place(at:anchor:proposal:))(a3 - v39 - v37, 0, *(_QWORD *)&a4, 0, a1, a2, v41, v43);
  v45 = static os_signpost_type_t.end.getter(v44);
  sub_1000C4644(v45, (uint64_t)&_mh_execute_header, (uint64_t)v29, (uint64_t)"Weather:layout_large_l1");
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v30, v53);
  v46 = *(void (**)(char *, uint64_t))(v24 + 8);
  v46(v27, v23);
  return ((uint64_t (*)(char *, uint64_t))v46)(v26, v23);
}

uint64_t sub_100266F7C(double a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, double a6, double a7)
{
  double v13;
  double v14;
  uint64_t v15;
  __n128 v16;
  unint64_t v17;
  __n128 v18;
  CGRect v20;
  CGRect v21;

  v20.origin.x = a2;
  v20.origin.y = a3;
  v20.size.width = a4;
  v20.size.height = a5;
  v13 = CGRectGetMinX(v20) + a6 - a1;
  v21.origin.x = a2;
  v21.origin.y = a3;
  v21.size.width = a4;
  v21.size.height = a5;
  v14 = (a7 - a1) * 0.5 + CGRectGetMinY(v21);
  v16.n128_u64[0] = static UnitPoint.topLeading.getter(v15);
  v18.n128_u64[0] = v17;
  return LayoutSubview.place(at:anchor:proposal:)(*(_QWORD *)&a1, 0, *(_QWORD *)&a1, 0, v13, v14, v16, v18);
}

double sub_100267050(uint64_t a1, char a2, uint64_t a3, char a4)
{
  return sub_100266930(a1, a2 & 1, a3, a4 & 1);
}

uint64_t sub_10026706C()
{
  return sub_100051B90(&qword_100BD0210, type metadata accessor for HorizontalABWithB1x1RatioLayout, (uint64_t)&unk_10098C840);
}

void sub_100267098()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000B466C();
  sub_1000C3704();
  __chkstk_darwin(v0);
  sub_1000BA6D8();
  sub_1000C4654();
  __chkstk_darwin(v1);
  sub_100099864();
  v2 = sub_1000B4650();
  sub_1000BBE8C(v2, enum case for Access.public(_:));
  v4 = 0;
  v3 = sub_1000BA294(&qword_100BD0220);
  sub_1000860C4(v3);
  qword_100CAE5C8 = sub_1000B465C(62, 0x80000001009F75F0, (uint64_t)&v4);
  sub_100079F70();
}

void sub_100267140()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  type metadata accessor for Domain(0);
  sub_1000C3704();
  __chkstk_darwin(v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B466C();
  sub_1000C4654();
  __chkstk_darwin(v4);
  sub_100099864();
  v5 = sub_1000B4650();
  sub_1000BBE8C(v5, enum case for Domain.standard(_:));
  v8 = 0;
  v6 = sub_1000BA294(&qword_100BD0228);
  sub_1000860C4(v6);
  qword_100CAE5D0 = Setting.init(_:defaultValue:domain:access:)(0xD000000000000030, 0x80000001009F7630, &v8, v3, v0);
  sub_100079F70();
}

uint64_t *sub_10026720C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v13);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v14 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v14);
      v10 = a1;
      v11 = a3;
      v12 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        return a1;
      }
      v9 = type metadata accessor for CodableError(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = a1;
      v11 = a3;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }
  return a1;
}

double sub_1002672E0(_QWORD *a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  double result;
  uint64_t v5;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)&result = swift_bridgeObjectRelease(*a1).n128_u64[0];
  }
  else if (!EnumCaseMultiPayload)
  {
    v5 = type metadata accessor for CodableError(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  return result;
}

uint64_t *sub_100267340(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    sub_1000215BC((uint64_t)a1, type metadata accessor for SearchViewState.ViewState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    if (EnumCaseMultiPayload == 1)
    {
      v11 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v11);
      v8 = a1;
      v9 = a3;
      v10 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
      v7 = type metadata accessor for CodableError(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = a3;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

void *sub_100267404(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for CodableError(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

void *sub_10026748C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_1000215BC((uint64_t)a1, type metadata accessor for SearchViewState.ViewState);
    if (swift_getEnumCaseMultiPayload(a2))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for CodableError(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

_QWORD *sub_10026752C(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return v4;
  }
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (_QWORD *)((char *)a1 + v8);
  v10 = (_QWORD *)((char *)a2 + v8);
  v11 = type metadata accessor for SearchViewState.ViewState(0);
  swift_bridgeObjectRetain(v7);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10);
  if (EnumCaseMultiPayload == 1)
  {
    v18 = *v10;
    *v9 = *v10;
    swift_bridgeObjectRetain(v18);
    v14 = v9;
    v15 = v11;
    v16 = 1;
    goto LABEL_7;
  }
  if (!EnumCaseMultiPayload)
  {
    v13 = type metadata accessor for CodableError(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v9, v10, v13);
    v14 = v9;
    v15 = v11;
    v16 = 0;
LABEL_7:
    swift_storeEnumTagMultiPayload(v14, v15, v16);
    goto LABEL_9;
  }
  memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
LABEL_9:
  v19 = a3[7];
  *((_BYTE *)v4 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v20 = (char *)v4 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for Location(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v21, 1, v22))
  {
    v23 = sub_1000BA294(&qword_100BC35F8);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v20, 0, 1, v22);
  }
  return v4;
}

_QWORD *sub_1002676C0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v7 = a3[5];
    v8 = (_QWORD *)((char *)a1 + v7);
    v9 = (_QWORD *)((char *)a2 + v7);
    sub_1000215BC((uint64_t)a1 + v7, type metadata accessor for SearchViewState.ViewState);
    v10 = type metadata accessor for SearchViewState.ViewState(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9);
    if (EnumCaseMultiPayload == 1)
    {
      v16 = *v9;
      *v8 = *v9;
      swift_bridgeObjectRetain(v16);
      v13 = v8;
      v14 = v10;
      v15 = 1;
      goto LABEL_6;
    }
    if (!EnumCaseMultiPayload)
    {
      v12 = type metadata accessor for CodableError(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v8, v9, v12);
      v13 = v8;
      v14 = v10;
      v15 = 0;
LABEL_6:
      swift_storeEnumTagMultiPayload(v13, v14, v15);
      goto LABEL_8;
    }
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
LABEL_8:
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v17 = a3[7];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for Location(0);
  v21 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v18, 1, v20);
  v22 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v19, 1, v20);
  if (!v21)
  {
    v23 = *(_QWORD *)(v20 - 8);
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v18, v19, v20);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v18, v20);
    goto LABEL_13;
  }
  if (v22)
  {
LABEL_13:
    v24 = sub_1000BA294(&qword_100BC35F8);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v18, 0, 1, v20);
  return a1;
}

_OWORD *sub_100267894(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SearchViewState.ViewState(0);
  if (swift_getEnumCaseMultiPayload(v8))
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = type metadata accessor for CodableError(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 0);
  }
  v11 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for Location(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v14))
  {
    v15 = sub_1000BA294(&qword_100BC35F8);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *sub_1002679C8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    sub_1000215BC((uint64_t)a1 + v7, type metadata accessor for SearchViewState.ViewState);
    v10 = type metadata accessor for SearchViewState.ViewState(0);
    if (swift_getEnumCaseMultiPayload(v9))
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v11 = type metadata accessor for CodableError(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload(v8, v10, 0);
    }
  }
  v12 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Location(0);
  v16 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v15);
  v17 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, v15);
  if (!v16)
  {
    v18 = *(_QWORD *)(v15 - 8);
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v13, v14, v15);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v13, v15);
    goto LABEL_10;
  }
  if (v17)
  {
LABEL_10:
    v19 = sub_1000BA294(&qword_100BC35F8);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, v15);
  return a1;
}

uint64_t sub_100267B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for SearchViewState.ViewState(0);
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == (_DWORD)a2)
    {
      v9 = v8;
      v10 = *(int *)(a3 + 20);
    }
    else
    {
      v9 = sub_1000BA294(&qword_100BC35F8);
      v10 = *(int *)(a3 + 28);
    }
    return _s7Weather24LocationCompositionStateOwet_0(a1 + v10, a2, v9);
  }
}

uint64_t sub_100267C00(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for SearchViewState.ViewState(0);
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
    {
      v9 = v8;
      v10 = *(int *)(a4 + 20);
    }
    else
    {
      v9 = sub_1000BA294(&qword_100BC35F8);
      v10 = *(int *)(a4 + 28);
    }
    return _s7Weather24LocationCompositionStateOwst_0(v5 + v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100267C98(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v10;

  if (a1 == 1701736302 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701736302, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7375636F66 && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7375636F66, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x65766F6D6572 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 2;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65766F6D6572, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100267DC4(char a1)
{
  if (!a1)
    return 1701736302;
  if (a1 == 1)
    return 0x7375636F66;
  return 0x65766F6D6572;
}

uint64_t sub_100267E0C()
{
  char *v0;

  return sub_100267DC4(*v0);
}

uint64_t sub_100267E14@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100267C98(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100267E38(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10026A0A0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100267E60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10026A0A0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100267E88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10026A118();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100267EB0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10026A118();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100267ED8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10026A154();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100267F00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10026A154();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100267F28(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10026A0DC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100267F50(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10026A0DC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100267F78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t (*v34)(_QWORD);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(_QWORD);
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;

  sub_1000986AC();
  v3 = v0;
  v49 = v4;
  v53 = v5;
  v54 = v7;
  v55 = v6;
  v9 = v8;
  v11 = v10;
  sub_1000BA294(&qword_100BC35F8);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_10009883C();
  v51 = v13 - v14;
  __chkstk_darwin(v15);
  v52 = (uint64_t)&v48 - v16;
  sub_1000BA294(&qword_100BD0488);
  sub_1000B42B0();
  __chkstk_darwin(v17);
  v18 = sub_1000C4668();
  v19 = type metadata accessor for SearchViewState.ViewState(v18);
  sub_1000B42B0();
  __chkstk_darwin(v20);
  sub_100088FDC();
  v50 = v21;
  v22 = (int *)sub_1000C69F4();
  sub_1000B42B0();
  __chkstk_darwin(v23);
  sub_10009883C();
  v26 = v24 - v25;
  __chkstk_darwin(v27);
  v29 = (char *)&v48 - v28;
  __chkstk_darwin(v30);
  sub_100099338();
  __chkstk_darwin(v31);
  v33 = (uint64_t *)((char *)&v48 - v32);
  sub_10000AB54(v3, (uint64_t)&v48 - v32, v34);
  if (v9)
  {
    v48 = v9;
  }
  else
  {
    v35 = v33[1];
    v55 = *v33;
    v48 = v35;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  sub_1000215BC((uint64_t)v33, type metadata accessor for SearchViewState);
  sub_10003773C(v54, v2, &qword_100BD0488);
  sub_10000AB54(v3, v1, type metadata accessor for SearchViewState);
  if (_s7Weather24LocationCompositionStateOwet_0(v2, 1, v19) == 1)
  {
    v36 = v50;
    sub_10000AB54(v1 + v22[5], v50, type metadata accessor for SearchViewState.ViewState);
    v37 = v1;
    v38 = v36;
    sub_1000215BC(v37, type metadata accessor for SearchViewState);
    sub_100021A14(v2, &qword_100BD0488);
  }
  else
  {
    sub_1000215BC(v1, type metadata accessor for SearchViewState);
    v38 = v50;
    sub_100269E68(v2, v50);
  }
  v39 = v53;
  v40 = v51;
  v41 = v49;
  sub_10000AB54(v3, (uint64_t)v29, type metadata accessor for SearchViewState);
  if (v39 == 3)
    v39 = v29[v22[6]];
  v42 = sub_1000C0108();
  sub_1000215BC(v42, v43);
  sub_10003773C(v41, v40, &qword_100BC35F8);
  sub_10000AB54(v3, v26, type metadata accessor for SearchViewState);
  v44 = type metadata accessor for Location(0);
  sub_100098750(v40);
  if (v45)
  {
    v46 = v52;
    sub_10003773C(v26 + v22[7], v52, &qword_100BC35F8);
    sub_1000215BC(v26, type metadata accessor for SearchViewState);
    sub_100021A14(v40, &qword_100BC35F8);
  }
  else
  {
    sub_1000215BC(v26, type metadata accessor for SearchViewState);
    v46 = v52;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v52, v40, v44);
    _s7Weather24LocationCompositionStateOwst_0(v46, 0, 1, v44);
  }
  v47 = v48;
  *v11 = v55;
  v11[1] = v47;
  sub_100269E68(v38, (uint64_t)v11 + v22[5]);
  *((_BYTE *)v11 + v22[6]) = v39;
  sub_10015A074(v46, (uint64_t)v11 + v22[7]);
  sub_100098640();
}

uint64_t sub_1002682D0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  char v11;

  if (a1 == 0x7551686372616573 && a2 == 0xEB00000000797265)
  {
    v5 = 0xEB00000000797265;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7551686372616573, 0xEB00000000797265, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7461745377656976 && a2 == 0xE900000000000065)
  {
    v8 = 0xE900000000000065;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461745377656976, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x7165527375636F66 && a2 == 0xEC00000074736575)
  {
    v10 = 0xEC00000074736575;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7165527375636F66, 0xEC00000074736575, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x80000001009F76B0)
  {
    swift_bridgeObjectRelease(0x80000001009F76B0);
    return 3;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001009F76B0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1002684B8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002684F4 + 4 * byte_10098C910[a1]))(0x7551686372616573, 0xEB00000000797265);
}

uint64_t sub_1002684F4()
{
  return 0x7461745377656976;
}

uint64_t sub_100268510()
{
  return 0x7165527375636F66;
}

unint64_t sub_100268530()
{
  return 0xD000000000000011;
}

uint64_t sub_10026854C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;

  v4 = v1;
  v6 = sub_1000BA294(&qword_100BD03A0);
  sub_100099300();
  __chkstk_darwin(v7);
  sub_100079FBC();
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = sub_1001101E8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SearchViewState.CodingKeys, &type metadata for SearchViewState.CodingKeys, v10, v8, v9);
  v11 = *v4;
  v12 = v4[1];
  v26 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v11, v12, &v26, v6);
  if (!v2)
  {
    v13 = (int *)type metadata accessor for SearchViewState(0);
    v14 = (uint64_t)v4 + v13[5];
    v25 = 1;
    v15 = type metadata accessor for SearchViewState.ViewState(0);
    sub_100086DA4(&qword_100BD03A8, type metadata accessor for SearchViewState.ViewState, (uint64_t)&unk_10098CB18);
    sub_1000B4634(v14, (uint64_t)&v25, v6, v15, v16);
    v24 = *((_BYTE *)v4 + v13[6]);
    v23 = 2;
    v17 = sub_100269EE8();
    sub_1000B4634((uint64_t)&v24, (uint64_t)&v23, v6, (uint64_t)&type metadata for SearchViewState.FocusRequest, v17);
    v18 = (char *)v4 + v13[7];
    v22 = 3;
    v19 = type metadata accessor for Location(0);
    sub_100086DA4(&qword_100BCF410, (uint64_t (*)(uint64_t))&type metadata accessor for Location, (uint64_t)&protocol conformance descriptor for Location);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v18, &v22, v6, v19, v20);
  }
  return sub_1000C1D6C(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
}

void sub_100268708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, char a11, char a12, char a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[2];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  sub_100099310();
  a25 = v29;
  a26 = v30;
  v58 = v26;
  v32 = v31;
  v54[0] = v33;
  sub_1000BA294(&qword_100BC35F8);
  sub_1000B42B0();
  __chkstk_darwin(v34);
  sub_1000CE53C(v35, v54[0]);
  v36 = type metadata accessor for SearchViewState.ViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v37);
  sub_10007A130();
  v55 = sub_1000BA294(&qword_100BD0380);
  v38 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v39 = sub_1000C4668();
  v40 = (int *)type metadata accessor for SearchViewState(v39);
  sub_1000B42B0();
  __chkstk_darwin(v41);
  v43 = (uint64_t *)((char *)v54 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  v45 = *(_QWORD *)(v32 + 24);
  v44 = *(_QWORD *)(v32 + 32);
  v57 = v32;
  v46 = sub_1001101E8();
  v56 = v27;
  v47 = v58;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SearchViewState.CodingKeys, &type metadata for SearchViewState.CodingKeys, v46, v45, v44);
  if (v47)
  {
    sub_1000C1A24();
  }
  else
  {
    v48 = v36;
    a16 = 0;
    v49 = v55;
    *v43 = KeyedDecodingContainer.decode(_:forKey:)(&a16, v55);
    v43[1] = v50;
    a15 = 1;
    sub_100086DA4(&qword_100BD0390, type metadata accessor for SearchViewState.ViewState, (uint64_t)&unk_10098CB40);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v48, &a15, v49, v48);
    sub_100269E68(v28, (uint64_t)v43 + v40[5]);
    a13 = 2;
    sub_100269EAC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for SearchViewState.FocusRequest, &a13, v49, &type metadata for SearchViewState.FocusRequest);
    *((_BYTE *)v43 + v40[6]) = a14;
    v51 = type metadata accessor for Location(0);
    a12 = 3;
    sub_100086DA4(&qword_100BCF3E8, (uint64_t (*)(uint64_t))&type metadata accessor for Location, (uint64_t)&protocol conformance descriptor for Location);
    v52 = v49;
    v53 = v54[1];
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v51, &a12, v52, v51);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v56, v55);
    sub_10015A074(v53, (uint64_t)v43 + v40[7]);
    sub_10000AB54((uint64_t)v43, v54[0], type metadata accessor for SearchViewState);
    sub_1000C1A24();
    sub_1000215BC((uint64_t)v43, type metadata accessor for SearchViewState);
  }
  sub_1000B44B0();
}

uint64_t sub_1002689F4()
{
  unsigned __int8 *v0;

  return sub_1002684B8(*v0);
}

uint64_t sub_1002689FC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002682D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100268A20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100269E2C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100268A48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100269E2C();
  return CodingKey.debugDescription.getter(a1, v2);
}

#error "100268A7C: call analysis failed (funcsize=5)"

uint64_t sub_100268A88(uint64_t a1)
{
  return sub_10026854C(a1);
}

uint64_t sub_100268A9C()
{
  return sub_10069222C();
}

void sub_100268AB0()
{
  sub_100692388();
}

void sub_100268AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  sub_100099310();
  a22 = v24;
  a23 = v25;
  v27 = v26;
  type metadata accessor for CodableError(0);
  sub_10009D98C();
  __chkstk_darwin(v28);
  sub_100079F58();
  v33 = sub_1000BA294(&qword_100BD03B8);
  __chkstk_darwin(v33);
  type metadata accessor for SearchViewState.ViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v29);
  sub_100079FBC();
  v30 = v27[3];
  v31 = v27[4];
  sub_1000DB418(v27, v30);
  v32 = sub_100269F24();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SearchViewState.ViewState.CodingKeys, &type metadata for SearchViewState.ViewState.CodingKeys, v32, v30, v31);
  if (!v23)
  {
    a12 = 0;
    sub_100269F60();
    sub_1000D1D2C((uint64_t)&type metadata for SearchViewState.ViewState.CodingType, (uint64_t)&a12, v33, (uint64_t)&type metadata for SearchViewState.ViewState.CodingType);
    __asm { BR              X10 }
  }
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v27);
  sub_1000B44B0();
}

void sub_100268D54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;

  sub_100099310();
  v2 = v0;
  v4 = v3;
  v11 = type metadata accessor for CodableError(0);
  __chkstk_darwin(v11);
  type metadata accessor for SearchViewState.ViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100099234();
  sub_1000BA294(&qword_100BD03E8);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_100079FBC();
  v7 = v4[3];
  v8 = v4[4];
  sub_1000DB418(v4, v7);
  v9 = sub_100269F24();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SearchViewState.ViewState.CodingKeys, &type metadata for SearchViewState.ViewState.CodingKeys, v9, v7, v8);
  sub_10000AB54(v2, v1, type metadata accessor for SearchViewState.ViewState);
  v10 = (char *)sub_100268E70 + 4 * byte_10098C91E[swift_getEnumCaseMultiPayload(v1)];
  __asm { BR              X10 }
}

void sub_100268E70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(v5 - 120);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v3, v4, v6);
  *(_BYTE *)(v5 - 88) = 0;
  v7 = sub_1000C0984();
  sub_1000DF4F0(v7, v8, v9, (uint64_t)&type metadata for SearchViewState.ViewState.CodingType, v7);
  if (!v1)
  {
    *(_BYTE *)(v5 - 88) = 1;
    sub_100086DA4(&qword_100BD0408, (uint64_t (*)(uint64_t))&type metadata accessor for CodableError, (uint64_t)&protocol conformance descriptor for CodableError);
    sub_1000B4634(v3, v5 - 88, v0, v6, v10);
  }
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v6);
  sub_1000C1D6C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 112) + 8));
  sub_1000B44B0();
}

unint64_t sub_100268FFC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100B59940, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t sub_100269048(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100269074 + 4 * byte_10098C923[a1]))(1701869940, 0xE400000000000000);
}

uint64_t sub_100269074()
{
  return 0x726F727265;
}

uint64_t sub_100269088()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_1002690A4()
{
  return 0x7972657571;
}

uint64_t sub_1002690B8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002690E4 + 4 * byte_10098C927[a1]))(1701869940, 0xE400000000000000);
}

uint64_t sub_1002690E4()
{
  return 0x726F727265;
}

uint64_t sub_1002690F8()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_100269114()
{
  return 0x7972657571;
}

unint64_t sub_100269128(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100B599C0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

uint64_t sub_100269170(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002691A0 + 4 * byte_10098C92B[a1]))(0x726F727265, 0xE500000000000000);
}

uint64_t sub_1002691A0()
{
  return 0x676E6964616F6CLL;
}

uint64_t sub_1002691B8()
{
  return 0x73746C75736572;
}

uint64_t sub_1002691D0()
{
  return 0x7779654B6F72657ALL;
}

unint64_t sub_1002691F0()
{
  return 0xD000000000000011;
}

void sub_10026920C()
{
  sub_10068B554();
}

void sub_100269218()
{
  unsigned __int8 *v0;

  sub_1004A7488(*v0);
}

void sub_100269220()
{
  sub_1001D8C50();
}

void sub_100269228(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1001D9DD4(a1, *v1);
}

unint64_t sub_100269230@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100268FFC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10026925C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100269048(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100269284()
{
  unsigned __int8 *v0;

  return sub_1002690B8(*v0);
}

uint64_t sub_10026928C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100269044(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1002692B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100269F24();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002692D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100269F24();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100269300(char *a1)
{
  sub_10068B3F8(*a1);
}

void sub_10026930C()
{
  unsigned __int8 *v0;

  sub_1004A7494(*v0);
}

void sub_100269314()
{
  sub_1001D8BB4();
}

void sub_10026931C(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1001D9DE0(a1, *v1);
}

unint64_t sub_100269324@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100269128(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100269350@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100269170(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100269378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10026A890();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1002693D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10026A890();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

#error "100269428: call analysis failed (funcsize=5)"

void sub_100269434()
{
  sub_100268D54();
}

void sub_100269448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_100692450(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8, SWORD2(vars8), SBYTE6(vars8), SHIBYTE(vars8));
}

void sub_10026945C()
{
  sub_1006925F0();
}

void sub_100269470()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  sub_1000986AC();
  v2 = type metadata accessor for CodableError(0);
  __chkstk_darwin(v2);
  sub_10009883C();
  __chkstk_darwin(v3);
  type metadata accessor for SearchViewState.ViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100099234();
  sub_1000BA294(&qword_100BD0410);
  sub_10009D98C();
  __chkstk_darwin(v5);
  sub_100099864();
  v7 = sub_1000C69F4();
  sub_10000AB54(v0 + *(int *)(v7 + 20), v1, type metadata accessor for SearchViewState.ViewState);
  v6 = (char *)sub_100269578 + 4 * byte_10098C930[swift_getEnumCaseMultiPayload(v1)];
  __asm { BR              X10 }
}

void sub_100269578()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v3, v6, v2);
  v8 = sub_1000BA294(&qword_100BC31F0);
  inited = swift_initStackObject(v8, v7 - 248);
  *(_OWORD *)(inited + 16) = xmmword_10097CA50;
  *(_QWORD *)(inited + 32) = 0x726F727265;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v4, v3, v2);
  v10 = String.init<A>(describing:)(v4);
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = v10;
  *(_QWORD *)(inited + 56) = v11;
  Dictionary.init(dictionaryLiteral:)(inited);
  sub_1000E76DC();
  ShortDescription.init(name:_:)(0x726F727265, 0xE500000000000000, v12, *(_QWORD *)(v7 - 256));
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v2);
  v13 = *(_QWORD **)(v7 - 264);
  v13[3] = v5;
  v13[4] = sub_10026A05C();
  v14 = sub_10005F164(v13);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 272) + 32))(v14, v0, v5);
  sub_100098640();
}

void sub_100269800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, __int16 a11, char a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  sub_100099310();
  a24 = v28;
  a25 = v29;
  a10 = v30;
  v32 = v31;
  v33 = sub_1000BA294(&qword_100BD0468);
  v48 = *(_QWORD *)(v33 - 8);
  v49 = v33;
  sub_10009D98C();
  __chkstk_darwin(v34);
  sub_1000CE53C(v35, v44);
  v36 = sub_1000BA294(&qword_100BD0470);
  v45 = *(_QWORD *)(v36 - 8);
  v46 = v36;
  sub_10009D98C();
  __chkstk_darwin(v37);
  sub_10007A130();
  v38 = sub_1000BA294(&qword_100BD0478);
  v39 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  sub_100094EC4();
  v50 = *(_QWORD *)(sub_1000BA294(&qword_100BD0480) - 8);
  sub_10009D98C();
  __chkstk_darwin(v40);
  sub_100098694();
  v42 = v32[3];
  v41 = v32[4];
  sub_1000DB418(v32, v42);
  v43 = sub_10026A0A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SearchViewState.FocusRequest.CodingKeys, &type metadata for SearchViewState.FocusRequest.CodingKeys, v43, v42, v41);
  if (a10)
  {
    if (a10 == 1)
    {
      a14 = 1;
      sub_10026A118();
      sub_1000BA504((uint64_t)&type metadata for SearchViewState.FocusRequest.FocusCodingKeys, (uint64_t)&a14);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v27, v46);
    }
    else
    {
      sub_10009998C();
      sub_1000BA504((uint64_t)&type metadata for SearchViewState.FocusRequest.RemoveCodingKeys, (uint64_t)&a15);
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
    }
  }
  else
  {
    a13 = 0;
    sub_10026A154();
    sub_1000BA504((uint64_t)&type metadata for SearchViewState.FocusRequest.NoneCodingKeys, (uint64_t)&a13);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v26, v38);
  }
  sub_100098748(v25, *(uint64_t (**)(uint64_t, uint64_t))(v50 + 8));
  sub_1000B44B0();
}

uint64_t sub_1002699C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;

  sub_100099310();
  v51 = v4;
  v52 = v5;
  v7 = v6;
  v43 = sub_1000BA294(&qword_100BD0428);
  v46 = *(_QWORD *)(v43 - 8);
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_100088FDC();
  v45 = v9;
  v10 = sub_1000BA294(&qword_100BD0430);
  v41 = *(_QWORD *)(v10 - 8);
  v42 = v10;
  sub_10009D98C();
  __chkstk_darwin(v11);
  sub_100088FDC();
  v44 = v12;
  v40 = sub_1000BA294(&qword_100BD0438);
  sub_100099300();
  __chkstk_darwin(v13);
  sub_100098694();
  v14 = sub_1000BA294(&qword_100BD0440);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  sub_100079FBC();
  v17 = v7[3];
  v16 = v7[4];
  sub_1000DB418(v7, v17);
  v18 = sub_10026A0A0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SearchViewState.FocusRequest.CodingKeys, &type metadata for SearchViewState.FocusRequest.CodingKeys, v18, v17, v16);
  if (v0)
    goto LABEL_11;
  v38 = v1;
  v39 = v15;
  v47 = v7;
  v19 = KeyedDecodingContainer.allKeys.getter(v14);
  v20 = v19;
  v21 = *(_QWORD *)(v19 + 16);
  if (!v21)
  {
LABEL_8:
    v28 = type metadata accessor for DecodingError(0);
    swift_allocError(v28, &protocol witness table for DecodingError, 0, 0);
    v30 = v29;
    sub_1000BA294(&qword_100BC6CF8);
    *v30 = &type metadata for SearchViewState.FocusRequest;
    v31 = KeyedDecodingContainer.codingPath.getter(v14);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v31, 0xD00000000000002BLL, 0x80000001009F2600, 0);
    v32 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v30, enum case for DecodingError.typeMismatch(_:), v28);
    swift_willThrow(v32, v33);
    swift_unknownObjectRelease(v20);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v14);
    v7 = v47;
LABEL_11:
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v7);
    return v14;
  }
  v22 = v14;
  v14 = *(unsigned __int8 *)(v19 + 32);
  v23 = sub_10055FF58(1, v21, v19, v19 + 32, 0, (2 * v21) | 1);
  v25 = v24;
  v27 = v26;
  swift_bridgeObjectRelease();
  v20 = v23;
  if (v25 != v27 >> 1)
  {
    v14 = v22;
    goto LABEL_8;
  }
  if ((_DWORD)v14)
  {
    if ((_DWORD)v14 == 1)
    {
      v49 = 1;
      sub_10026A118();
      sub_100098904((uint64_t)&type metadata for SearchViewState.FocusRequest.FocusCodingKeys, (uint64_t)&v49);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v44, v42);
    }
    else
    {
      sub_10009998C();
      sub_100098904((uint64_t)&type metadata for SearchViewState.FocusRequest.RemoveCodingKeys, (uint64_t)&v50);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v43);
    }
    v35 = v23;
  }
  else
  {
    v48 = 0;
    sub_10026A154();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for SearchViewState.FocusRequest.NoneCodingKeys, &v48, v22, &type metadata for SearchViewState.FocusRequest.NoneCodingKeys);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v40);
    v35 = v23;
  }
  swift_unknownObjectRelease(v35);
  v36 = sub_1000B4490();
  v37(v36);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v47);
  return v14;
}

uint64_t sub_100269D58(uint64_t a1)
{
  uint64_t v2;

  sub_100086DA4(&qword_100BD0420, type metadata accessor for SearchViewState, (uint64_t)&unk_10098CA98);
  return ShortDescribable.description.getter(a1, v2);
}

uint64_t sub_100269D98@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_1002699C8();
  if (!v1)
    *a1 = result;
  return result;
}

#error "100269DCC: call analysis failed (funcsize=6)"

void sub_100269DD8(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  char v4;

  static WeatherChange.Direction.read(from:)(a1);
  if (!v2)
    *a2 = v4;
}

void sub_100269E00()
{
  sub_100086DA4(&qword_100BD0370, type metadata accessor for SearchViewState, (uint64_t)&unk_10098CA70);
}

unint64_t sub_100269E2C()
{
  unint64_t result;

  result = qword_100BD0388;
  if (!qword_100BD0388)
  {
    result = swift_getWitnessTable(&unk_10098D2CC, &type metadata for SearchViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BD0388);
  }
  return result;
}

uint64_t sub_100269E68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SearchViewState.ViewState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100269EAC()
{
  unint64_t result;

  result = qword_100BD0398;
  if (!qword_100BD0398)
  {
    result = swift_getWitnessTable(&unk_10098CA48, &type metadata for SearchViewState.FocusRequest);
    atomic_store(result, (unint64_t *)&qword_100BD0398);
  }
  return result;
}

unint64_t sub_100269EE8()
{
  unint64_t result;

  result = qword_100BD03B0;
  if (!qword_100BD03B0)
  {
    result = swift_getWitnessTable(&unk_10098CA20, &type metadata for SearchViewState.FocusRequest);
    atomic_store(result, (unint64_t *)&qword_100BD03B0);
  }
  return result;
}

unint64_t sub_100269F24()
{
  unint64_t result;

  result = qword_100BD03C0;
  if (!qword_100BD03C0)
  {
    result = swift_getWitnessTable(&unk_10098D27C, &type metadata for SearchViewState.ViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BD03C0);
  }
  return result;
}

unint64_t sub_100269F60()
{
  unint64_t result;

  result = qword_100BD03C8;
  if (!qword_100BD03C8)
  {
    result = swift_getWitnessTable(&unk_10098D254, &type metadata for SearchViewState.ViewState.CodingType);
    atomic_store(result, (unint64_t *)&qword_100BD03C8);
  }
  return result;
}

unint64_t sub_100269F9C()
{
  unint64_t result;

  result = qword_100BD03F0;
  if (!qword_100BD03F0)
  {
    result = swift_getWitnessTable(&unk_10098D22C, &type metadata for SearchViewState.ViewState.CodingType);
    atomic_store(result, (unint64_t *)&qword_100BD03F0);
  }
  return result;
}

uint64_t sub_100269FD8(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_100075EB0(&qword_100BC5E40);
    sub_100086DA4(a2, type metadata accessor for SearchLocation, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10026A05C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD0418;
  if (!qword_100BD0418)
  {
    v1 = sub_100075EB0(&qword_100BD0410);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BD0418);
  }
  return result;
}

unint64_t sub_10026A0A0()
{
  unint64_t result;

  result = qword_100BD0448;
  if (!qword_100BD0448)
  {
    result = swift_getWitnessTable(&unk_10098D1DC, &type metadata for SearchViewState.FocusRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BD0448);
  }
  return result;
}

unint64_t sub_10026A0DC()
{
  unint64_t result;

  result = qword_100BD0450;
  if (!qword_100BD0450)
  {
    result = swift_getWitnessTable(&unk_10098D18C, &type metadata for SearchViewState.FocusRequest.RemoveCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BD0450);
  }
  return result;
}

unint64_t sub_10026A118()
{
  unint64_t result;

  result = qword_100BD0458;
  if (!qword_100BD0458)
  {
    result = swift_getWitnessTable(&unk_10098D13C, &type metadata for SearchViewState.FocusRequest.FocusCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BD0458);
  }
  return result;
}

unint64_t sub_10026A154()
{
  unint64_t result;

  result = qword_100BD0460;
  if (!qword_100BD0460)
  {
    result = swift_getWitnessTable(&unk_10098D0EC, &type metadata for SearchViewState.FocusRequest.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BD0460);
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchViewState.FocusRequest.CodingKeys()
{
  return &type metadata for SearchViewState.FocusRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for SearchViewState.FocusRequest.NoneCodingKeys()
{
  return &type metadata for SearchViewState.FocusRequest.NoneCodingKeys;
}

ValueMetadata *type metadata accessor for SearchViewState.FocusRequest.FocusCodingKeys()
{
  return &type metadata for SearchViewState.FocusRequest.FocusCodingKeys;
}

ValueMetadata *type metadata accessor for SearchViewState.FocusRequest.RemoveCodingKeys()
{
  return &type metadata for SearchViewState.FocusRequest.RemoveCodingKeys;
}

uint64_t storeEnumTagSinglePayload for SearchViewState.ViewState.CodingType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10026A220 + 4 * byte_10098C93A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10026A254 + 4 * byte_10098C935[v4]))();
}

uint64_t sub_10026A254(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10026A25C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10026A264);
  return result;
}

uint64_t sub_10026A270(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10026A278);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10026A27C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10026A284(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchViewState.ViewState.CodingType()
{
  return &type metadata for SearchViewState.ViewState.CodingType;
}

ValueMetadata *type metadata accessor for SearchViewState.ViewState.CodingKeys()
{
  return &type metadata for SearchViewState.ViewState.CodingKeys;
}

uint64_t _s7Weather15SearchViewStateV9ViewStateO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10026A304 + 4 * byte_10098C944[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10026A338 + 4 * byte_10098C93F[v4]))();
}

uint64_t sub_10026A338(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10026A340(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10026A348);
  return result;
}

uint64_t sub_10026A354(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10026A35CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10026A360(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10026A368(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchViewState.CodingKeys()
{
  return &type metadata for SearchViewState.CodingKeys;
}

uint64_t _s7Weather15SearchViewStateV12FocusRequestOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10026A3D0 + 4 * byte_10098C94E[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10026A404 + 4 * byte_10098C949[v4]))();
}

uint64_t sub_10026A404(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10026A40C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10026A414);
  return result;
}

uint64_t sub_10026A420(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10026A428);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10026A42C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10026A434(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchViewState.FocusRequest()
{
  return &type metadata for SearchViewState.FocusRequest;
}

unint64_t sub_10026A454()
{
  unint64_t result;

  result = qword_100BD0490;
  if (!qword_100BD0490)
  {
    result = swift_getWitnessTable(&unk_10098C9F8, &type metadata for SearchViewState.FocusRequest);
    atomic_store(result, (unint64_t *)&qword_100BD0490);
  }
  return result;
}

unint64_t sub_10026A494()
{
  unint64_t result;

  result = qword_100BD0498;
  if (!qword_100BD0498)
  {
    result = swift_getWitnessTable(&unk_10098CD8C, &type metadata for SearchViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BD0498);
  }
  return result;
}

unint64_t sub_10026A4D4()
{
  unint64_t result;

  result = qword_100BD04A0;
  if (!qword_100BD04A0)
  {
    result = swift_getWitnessTable(&unk_10098CE7C, &type metadata for SearchViewState.ViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BD04A0);
  }
  return result;
}

unint64_t sub_10026A514()
{
  unint64_t result;

  result = qword_100BD04A8;
  if (!qword_100BD04A8)
  {
    result = swift_getWitnessTable(&unk_10098CF1C, &type metadata for SearchViewState.ViewState.CodingType);
    atomic_store(result, (unint64_t *)&qword_100BD04A8);
  }
  return result;
}

unint64_t sub_10026A554()
{
  unint64_t result;

  result = qword_100BD04B0;
  if (!qword_100BD04B0)
  {
    result = swift_getWitnessTable(&unk_10098D0C4, &type metadata for SearchViewState.FocusRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BD04B0);
  }
  return result;
}

unint64_t sub_10026A594()
{
  unint64_t result;

  result = qword_100BD04B8;
  if (!qword_100BD04B8)
  {
    result = swift_getWitnessTable(&unk_10098CFE4, &type metadata for SearchViewState.FocusRequest.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BD04B8);
  }
  return result;
}

unint64_t sub_10026A5D4()
{
  unint64_t result;

  result = qword_100BD04C0;
  if (!qword_100BD04C0)
  {
    result = swift_getWitnessTable(&unk_10098D00C, &type metadata for SearchViewState.FocusRequest.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BD04C0);
  }
  return result;
}

unint64_t sub_10026A614()
{
  unint64_t result;

  result = qword_100BD04C8;
  if (!qword_100BD04C8)
  {
    result = swift_getWitnessTable(&unk_10098CF94, &type metadata for SearchViewState.FocusRequest.FocusCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BD04C8);
  }
  return result;
}

unint64_t sub_10026A654()
{
  unint64_t result;

  result = qword_100BD04D0;
  if (!qword_100BD04D0)
  {
    result = swift_getWitnessTable(&unk_10098CFBC, &type metadata for SearchViewState.FocusRequest.FocusCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BD04D0);
  }
  return result;
}

unint64_t sub_10026A694()
{
  unint64_t result;

  result = qword_100BD04D8;
  if (!qword_100BD04D8)
  {
    result = swift_getWitnessTable(&unk_10098CF44, &type metadata for SearchViewState.FocusRequest.RemoveCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BD04D8);
  }
  return result;
}

unint64_t sub_10026A6D4()
{
  unint64_t result;

  result = qword_100BD04E0;
  if (!qword_100BD04E0)
  {
    result = swift_getWitnessTable(&unk_10098CF6C, &type metadata for SearchViewState.FocusRequest.RemoveCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BD04E0);
  }
  return result;
}

unint64_t sub_10026A714()
{
  unint64_t result;

  result = qword_100BD04E8;
  if (!qword_100BD04E8)
  {
    result = swift_getWitnessTable(&unk_10098D034, &type metadata for SearchViewState.FocusRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BD04E8);
  }
  return result;
}

unint64_t sub_10026A754()
{
  unint64_t result;

  result = qword_100BD04F0;
  if (!qword_100BD04F0)
  {
    result = swift_getWitnessTable(&unk_10098D05C, &type metadata for SearchViewState.FocusRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BD04F0);
  }
  return result;
}

unint64_t sub_10026A794()
{
  unint64_t result;

  result = qword_100BD04F8;
  if (!qword_100BD04F8)
  {
    result = swift_getWitnessTable(&unk_10098CDB4, &type metadata for SearchViewState.ViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BD04F8);
  }
  return result;
}

unint64_t sub_10026A7D4()
{
  unint64_t result;

  result = qword_100BD0500;
  if (!qword_100BD0500)
  {
    result = swift_getWitnessTable(&unk_10098CDDC, &type metadata for SearchViewState.ViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BD0500);
  }
  return result;
}

unint64_t sub_10026A814()
{
  unint64_t result;

  result = qword_100BD0508;
  if (!qword_100BD0508)
  {
    result = swift_getWitnessTable(&unk_10098CCFC, &type metadata for SearchViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BD0508);
  }
  return result;
}

unint64_t sub_10026A854()
{
  unint64_t result;

  result = qword_100BD0510;
  if (!qword_100BD0510)
  {
    result = swift_getWitnessTable(&unk_10098CD24, &type metadata for SearchViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BD0510);
  }
  return result;
}

unint64_t sub_10026A890()
{
  unint64_t result;

  result = qword_100BD0518;
  if (!qword_100BD0518)
  {
    result = swift_getWitnessTable(&unk_10098CEA4, &type metadata for SearchViewState.ViewState.CodingType);
    atomic_store(result, (unint64_t *)&qword_100BD0518);
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchZeroKeywordView()
{
  return &type metadata for SearchZeroKeywordView;
}

uint64_t sub_10026A8DC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AAE61C, 1);
}

uint64_t sub_10026A8EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _OWORD v19[2];
  uint64_t v20;
  uint64_t v21;

  v3 = sub_1000BA294(&qword_100BD0520);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BD0528);
  __chkstk_darwin(v7);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = static Color.black.getter(v10);
  v12 = Color.opacity(_:)(0.6);
  swift_release(v11);
  v21 = v12;
  sub_10026AAD8(v1, (uint64_t)v19);
  v13 = swift_allocObject(&unk_100B67D18, 56, 7);
  v14 = v19[1];
  *(_OWORD *)(v13 + 16) = v19[0];
  *(_OWORD *)(v13 + 32) = v14;
  *(_QWORD *)(v13 + 48) = v20;
  View.onTapGesture(count:perform:)(1, sub_10026AB30, v13, &type metadata for Color, &protocol witness table for Color);
  swift_release(v13);
  swift_release(v21);
  v16 = static SafeAreaRegions.all.getter(v15);
  LOBYTE(v13) = static Edge.Set.all.getter(v16);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v9, v6, v3);
  v17 = &v9[*(int *)(v7 + 36)];
  *(_QWORD *)v17 = v16;
  v17[8] = v13;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_10026AB38((uint64_t)v9, a1);
  *(_BYTE *)(a1 + *(int *)(sub_1000BA294(&qword_100BD0530) + 36)) = 1;
  return sub_10026AB80((uint64_t)v9);
}

uint64_t sub_10026AAAC(_QWORD *a1)
{
  sub_1000DB418(a1, a1[3]);
  return sub_1005A1654();
}

uint64_t sub_10026AAD8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for UVIDescriptorViewModelFactory(a2, a1);
  return a2;
}

uint64_t sub_10026AB0C()
{
  uint64_t v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10026AB30()
{
  uint64_t v0;

  return sub_10026AAAC((_QWORD *)(v0 + 16));
}

uint64_t sub_10026AB38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BD0528);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10026AB80(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BD0528);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10026ABC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD0538;
  if (!qword_100BD0538)
  {
    v1 = sub_100075EB0(&qword_100BD0530);
    sub_10026AC30();
    sub_1001CDA94();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BD0538);
  }
  return result;
}

unint64_t sub_10026AC30()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100BD0540;
  if (!qword_100BD0540)
  {
    v1 = sub_100075EB0(&qword_100BD0528);
    v2[0] = &type metadata for Color;
    v2[1] = &protocol witness table for Color;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BD0540);
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationViewPresentationKind()
{
  return &type metadata for LocationViewPresentationKind;
}

unint64_t sub_10026ACD4()
{
  unint64_t result;

  result = qword_100BD0548;
  if (!qword_100BD0548)
  {
    result = swift_getWitnessTable(&unk_10098D400, &type metadata for LocationViewPresentationKind);
    atomic_store(result, (unint64_t *)&qword_100BD0548);
  }
  return result;
}

void sub_10026AD10()
{
  sub_10026AD38(type metadata accessor for LocationViewCollisionOptions, (void (*)(void))sub_10012AAD4);
}

void sub_10026AD24()
{
  sub_10026AD38((uint64_t (*)(_QWORD))&type metadata accessor for WeatherVFXConditionBackground, (void (*)(void))&WeatherVFXConditionBackground.init());
}

void sub_10026AD38(uint64_t (*a1)(_QWORD), void (*a2)(void))
{
  uint64_t v3;

  v3 = a1(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  a2();
  sub_10004A298();
}

void sub_10026AD70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  sub_1000986AC();
  v2 = sub_1000BA294(&qword_100BD0610);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100099864();
  sub_1000BA294(&qword_100BD0618);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100098728();
  v7 = v6 - v5;
  v8 = sub_1000E6F58();
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100098728();
  v12 = v11 - v10;
  type metadata accessor for LocationPreviewViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  sub_100098728();
  v16 = v15 - v14;
  v17 = *(_QWORD *)(v0 + *(int *)(sub_1000BBE9C() + 52) + 8);
  swift_retain();
  sub_10017B384();
  swift_release(v17);
  if (_s7Weather24LocationCompositionStateOwet_0(v16, 1, v8) == 1)
  {
    swift_storeEnumTagMultiPayload(v1, v2, 1);
    v18 = sub_1002716D4();
    sub_1000CF7D4(v18, v19, (uint64_t)&type metadata for EmptyView, v18, (uint64_t)&protocol witness table for EmptyView);
  }
  else
  {
    sub_10007802C(v16, v12, type metadata accessor for LocationPreviewViewContentModel);
    sub_10026AF24();
    sub_100037768(v7, v1, &qword_100BD0618);
    swift_storeEnumTagMultiPayload(v1, v2, 0);
    v20 = sub_1002716D4();
    sub_1000CF7D4(v20, v21, (uint64_t)&type metadata for EmptyView, v20, (uint64_t)&protocol witness table for EmptyView);
    sub_100021A14(v7, &qword_100BD0618);
    sub_1000215BC(v12, type metadata accessor for LocationPreviewViewContentModel);
  }
  sub_100098640();
}

void sub_10026AF24()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;

  sub_1000986AC();
  v34 = v2;
  v35 = v0;
  v36 = v3;
  sub_1000BA294(&qword_100BC5A68);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100099864();
  v5 = sub_1000BA294(&qword_100BD0650);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v33 - v10;
  v12 = sub_1000BA294(&qword_100BD0640);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  sub_100098728();
  v16 = v15 - v14;
  v17 = sub_1000BA294(&qword_100BD0630);
  sub_1000B42B0();
  __chkstk_darwin(v18);
  sub_100098728();
  v21 = v20 - v19;
  *(_QWORD *)v8 = swift_getKeyPath(&unk_10098D580);
  v8[8] = 0;
  sub_10026B1A0(v34, v35, (uint64_t)&v8[*(int *)(v5 + 36)]);
  sub_1000787D4((uint64_t)v8, (uint64_t)v11, &qword_100BD0650);
  KeyPath = swift_getKeyPath(&unk_10098D580);
  sub_100037768((uint64_t)v11, v16, &qword_100BD0650);
  v23 = v16 + *(int *)(v12 + 36);
  *(_QWORD *)v23 = KeyPath;
  *(_BYTE *)(v23 + 8) = 1;
  sub_100021A14((uint64_t)v11, &qword_100BD0650);
  v24 = swift_getKeyPath(&unk_10098D5A8);
  sub_100037768(v16, v21, &qword_100BD0640);
  v25 = v21 + *(int *)(v17 + 36);
  *(_QWORD *)v25 = v24;
  *(_BYTE *)(v25 + 8) = 0x80;
  sub_100021A14(v16, &qword_100BD0640);
  v26 = swift_getKeyPath(&unk_10098D5D0);
  v27 = enum case for UserInterfaceSizeClass.compact(_:);
  v28 = type metadata accessor for UserInterfaceSizeClass(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v1, v27, v28);
  _s7Weather24LocationCompositionStateOwst_0(v1, 0, 1, v28);
  v29 = sub_1000BA294(&qword_100BD0618);
  v30 = v36;
  v31 = (uint64_t *)(v36 + *(int *)(v29 + 36));
  v32 = sub_1000BA294(&qword_100C09F10);
  sub_100037768(v1, (uint64_t)v31 + *(int *)(v32 + 28), &qword_100BC5A68);
  *v31 = v26;
  sub_100037768(v21, v30, &qword_100BD0630);
  sub_100021A14(v1, &qword_100BC5A68);
  sub_100021A14(v21, &qword_100BD0630);
  sub_100098640();
}

uint64_t sub_10026B1A0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t OpaqueTypeConformance2;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (**v108)();
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  __n128 v161;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  char v218;
  uint64_t v219;

  v207 = a3;
  v196 = type metadata accessor for AutomationInfo(0);
  __chkstk_darwin(v196);
  v197 = (uint64_t *)((char *)&v165 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v193 = type metadata accessor for AccessibilityChildBehavior(0);
  v191 = *(_QWORD *)(v193 - 8);
  __chkstk_darwin(v193);
  v189 = (char *)&v165 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v205 = type metadata accessor for LocationPreviewViewContentModel(0);
  v209 = *(_QWORD *)(v205 - 8);
  __chkstk_darwin(v205);
  v210 = v7;
  v212 = (uint64_t)&v165 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = type metadata accessor for LocationPreviewView(0);
  v180 = *(_QWORD *)(v206 - 8);
  __chkstk_darwin(v206);
  v181 = v8;
  v213 = (uint64_t)&v165 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BD4280);
  __chkstk_darwin(v9);
  v170 = (uint64_t)&v165 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000BA294(&qword_100BD0670);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v165 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = sub_1000BA294(&qword_100BD0678);
  __chkstk_darwin(v14);
  v16 = (char *)&v165 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = sub_1000BA294(&qword_100BD0680);
  v166 = *(_QWORD *)(v167 - 8);
  __chkstk_darwin(v167);
  v18 = (char *)&v165 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = sub_1000BA294(&qword_100BD0688);
  v168 = *(_QWORD *)(v169 - 8);
  __chkstk_darwin(v169);
  v20 = (char *)&v165 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v211 = sub_1000BA294(&qword_100BD0690);
  __chkstk_darwin(v211);
  v172 = (char *)&v165 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_1000BA294(&qword_100BD0698);
  v177 = *(_QWORD *)(v178 - 8);
  __chkstk_darwin(v178);
  v174 = (char *)&v165 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_1000BA294(&qword_100BD06A0);
  v175 = *(_QWORD *)(v176 - 8);
  __chkstk_darwin(v176);
  v173 = (char *)&v165 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = sub_1000BA294(&qword_100BD06A8);
  __chkstk_darwin(v171);
  v179 = (char *)&v165 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_1000BA294(&qword_100BD06B0);
  __chkstk_darwin(v25);
  v183 = (char *)&v165 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = sub_1000BA294(&qword_100BD06B8);
  __chkstk_darwin(v182);
  v184 = (uint64_t)&v165 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = sub_1000BA294(&qword_100BD06C0);
  __chkstk_darwin(v185);
  v186 = (uint64_t)&v165 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = sub_1000BA294(&qword_100BD06C8);
  v190 = *(_QWORD *)(v192 - 8);
  __chkstk_darwin(v192);
  v188 = (char *)&v165 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = sub_1000BA294(&qword_100BD06D0);
  __chkstk_darwin(v187);
  v194 = (char *)&v165 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v202 = sub_1000BA294(&qword_100BD06D8);
  __chkstk_darwin(v202);
  v195 = (uint64_t)&v165 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_1000BA294(&qword_100BD06E0);
  v203 = *(_QWORD *)(v32 - 8);
  v204 = v32;
  __chkstk_darwin(v32);
  v201 = (char *)&v165 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_1000BA294(&qword_100BD06E8);
  v199 = *(_QWORD *)(v34 - 8);
  v200 = v34;
  __chkstk_darwin(v34);
  v198 = (char *)&v165 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v13 = static Alignment.top.getter(v36);
  v13[1] = v37;
  v38 = sub_1000BA294(&qword_100BD06F0);
  v39 = a1;
  v40 = a2;
  sub_10026C258(a1, a2, (uint64_t)v13 + *(int *)(v38 + 44));
  v41 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v42 = objc_msgSend(v41, "userInterfaceIdiom");

  if (v42)
    v44 = Edge.Set.init(rawValue:)(0);
  else
    v44 = static Edge.Set.all.getter(v43);
  v45 = v44;
  v46 = static SafeAreaRegions.all.getter(v44);
  sub_100037768((uint64_t)v13, (uint64_t)v16, &qword_100BD0670);
  v47 = &v16[*(int *)(v14 + 36)];
  *(_QWORD *)v47 = v46;
  v47[8] = v45;
  sub_100021A14((uint64_t)v13, &qword_100BD0670);
  v48 = sub_100271890();
  View.enableForegroundEffects()(v14, v48);
  sub_100021A14((uint64_t)v16, &qword_100BD0678);
  v49 = (uint64_t)v40;
  v50 = v40[2];
  v218 = *((_BYTE *)v40 + 8);
  v219 = v50;
  v51 = sub_1000BA294(&qword_100BC5608);
  State.projectedValue.getter(v51);
  v52 = v214;
  v53 = v215;
  v54 = v216;
  v214 = v14;
  v215 = v48;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v214, &opaque type descriptor for <<opaque return type of View.enableForegroundEffects()>>, 1);
  v56 = v167;
  View.alert(isPresented:content:)(v52, v53, v54, sub_10026D2C8, 0, v167, OpaqueTypeConformance2);
  swift_release(v53);
  v57 = swift_release(v52);
  (*(void (**)(char *, uint64_t, __n128))(v166 + 8))(v18, v56, v57);
  v58 = sub_10026D5D4();
  v60 = v59;
  LOBYTE(v53) = v61;
  v62 = v170;
  v165 = v39;
  sub_10026D4C0(v39, v170);
  v63 = (uint64_t)v172;
  v64 = &v172[*(int *)(v211 + 36)];
  v65 = type metadata accessor for SafariSheetModifier(0);
  sub_100037768(v62, (uint64_t)&v64[*(int *)(v65 + 20)], &qword_100BD4280);
  *(_QWORD *)v64 = v58;
  *((_QWORD *)v64 + 1) = v60;
  v64[16] = v53 & 1;
  v66 = v168;
  v67 = v169;
  (*(void (**)(uint64_t, char *, uint64_t))(v168 + 16))(v63, v20, v169);
  sub_100021A14(v62, &qword_100BD4280);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v20, v67);
  v68 = v49;
  v208 = v49;
  v69 = sub_10026D5D4();
  v71 = v70;
  LODWORD(v168) = v72;
  v73 = v213;
  sub_100080C0C(v68, v213, type metadata accessor for LocationPreviewView);
  v74 = v39;
  v75 = v212;
  sub_100080C0C(v74, v212, type metadata accessor for LocationPreviewViewContentModel);
  v76 = *(unsigned __int8 *)(v180 + 80);
  v181 += (v76 + 16) & ~v76;
  v77 = (v76 + 16) & ~v76;
  v170 = v77;
  v78 = v76 | 7;
  v180 = v76 | 7;
  v79 = *(unsigned __int8 *)(v209 + 80);
  v210 += (v181 + v79) & ~v79;
  v80 = (v181 + v79) & ~v79;
  v169 = v80;
  v209 = v78 | v79;
  v81 = swift_allocObject(&unk_100B67E40, v210, v78 | v79);
  sub_10007802C(v73, v81 + v77, type metadata accessor for LocationPreviewView);
  sub_10007802C(v75, v81 + v80, type metadata accessor for LocationPreviewViewContentModel);
  v82 = sub_1000BA294(&qword_100BD0708);
  v83 = sub_100271960();
  v84 = sub_100271A3C();
  v85 = v174;
  v86 = v211;
  View.formSheet<A>(isPresented:content:)(v69, v71, v168 & 1, sub_100271918, v81, v211, v82, v83, v84);
  swift_release(v71);
  swift_release(v81);
  swift_release(v69);
  sub_100021A14(v63, &qword_100BD0690);
  v87 = v189;
  static AccessibilityChildBehavior.contain.getter(v88);
  v214 = v86;
  v215 = v82;
  v216 = v83;
  v217 = v84;
  v89 = swift_getOpaqueTypeConformance2(&v214, &opaque type descriptor for <<opaque return type of View.formSheet<A>(isPresented:content:)>>, 1);
  v90 = v173;
  v91 = v178;
  View.accessibilityElement(children:)(v87, v178, v89);
  (*(void (**)(char *, uint64_t))(v191 + 8))(v87, v193);
  (*(void (**)(char *, uint64_t))(v177 + 8))(v85, v91);
  v92 = v175;
  v93 = (uint64_t)v179;
  v94 = v176;
  (*(void (**)(char *, char *, uint64_t))(v175 + 16))(v179, v90, v176);
  *(_BYTE *)(v93 + *(int *)(v171 + 36)) = 1;
  (*(void (**)(char *, uint64_t))(v92 + 8))(v90, v94);
  v95 = v165;
  sub_10062FB68();
  v96 = (uint64_t)v197;
  *v197 = v97;
  *(_QWORD *)(v96 + 8) = v98;
  v99 = type metadata accessor for AutomationViewInfo(0);
  swift_storeEnumTagMultiPayload(v96, v99, 1);
  swift_storeEnumTagMultiPayload(v96, v196, 0);
  v100 = (uint64_t)v183;
  sub_1003351F8();
  sub_1000215BC(v96, type metadata accessor for AutomationInfo);
  sub_100021A14(v93, &qword_100BD06A8);
  v101 = v208;
  v102 = v213;
  sub_100080C0C(v208, v213, type metadata accessor for LocationPreviewView);
  v103 = v212;
  sub_100080C0C(v95, v212, type metadata accessor for LocationPreviewViewContentModel);
  v104 = swift_allocObject(&unk_100B67E68, v210, v209);
  v105 = v170;
  sub_10007802C(v102, v104 + v170, type metadata accessor for LocationPreviewView);
  v106 = v169;
  sub_10007802C(v103, v104 + v169, type metadata accessor for LocationPreviewViewContentModel);
  v107 = v184;
  sub_100037768(v100, v184, &qword_100BD06B0);
  v108 = (void (**)())(v107 + *(int *)(v182 + 36));
  *v108 = sub_100271F50;
  v108[1] = (void (*)())v104;
  v108[2] = 0;
  v108[3] = 0;
  sub_100021A14(v100, &qword_100BD06B0);
  sub_100080C0C(v101, v102, type metadata accessor for LocationPreviewView);
  v109 = v95;
  sub_100080C0C(v95, v103, type metadata accessor for LocationPreviewViewContentModel);
  v110 = swift_allocObject(&unk_100B67E90, v210, v209);
  v111 = v105;
  sub_10007802C(v102, v110 + v105, type metadata accessor for LocationPreviewView);
  sub_10007802C(v103, v110 + v106, type metadata accessor for LocationPreviewViewContentModel);
  v112 = v186;
  sub_100037768(v107, v186, &qword_100BD06B8);
  v113 = v185;
  v114 = (_QWORD *)(v112 + *(int *)(v185 + 36));
  *v114 = 0;
  v114[1] = 0;
  v114[2] = sub_100271F60;
  v114[3] = v110;
  sub_100021A14(v107, &qword_100BD06B8);
  v115 = v208;
  sub_100080C0C(v208, v102, type metadata accessor for LocationPreviewView);
  v116 = swift_allocObject(&unk_100B67EB8, v181, v180);
  sub_10007802C(v102, v116 + v111, type metadata accessor for LocationPreviewView);
  sub_100272018((uint64_t)&unk_100BD0848);
  v118 = v117;
  sub_10007A100((uint64_t)&unk_100BD0868);
  v119 = v188;
  v120 = v109;
  View.onChange<A>(of:initial:_:)(v109, 0, sub_100271FB4, v116, v113, v205, v118, v121);
  swift_release(v116);
  sub_100021A14(v112, &qword_100BD06C0);
  v122 = v206;
  v123 = v115 + *(int *)(v206 + 48);
  v124 = *(_QWORD *)v123;
  v125 = *(_QWORD *)(v123 + 8);
  v126 = *(unsigned __int8 *)(v123 + 16);
  v127 = type metadata accessor for WeatherVFXConditionBackground(0);
  sub_10007A100((uint64_t)&qword_100BD0870);
  v129 = v128;
  v130 = StateObject.wrappedValue.getter(v124, v125, v126, v127, v128);
  v131 = static ObservableObject.environmentStore.getter(v127, v129);
  v132 = v190;
  v133 = (uint64_t)v194;
  v134 = v192;
  (*(void (**)(char *, char *, uint64_t))(v190 + 16))(v194, v119, v192);
  v135 = (uint64_t *)(v133 + *(int *)(v187 + 36));
  *v135 = v131;
  v135[1] = v130;
  (*(void (**)(char *, uint64_t))(v132 + 8))(v119, v134);
  v136 = v115 + *(int *)(v122 + 44);
  v137 = *(_QWORD *)v136;
  v138 = *(_QWORD *)(v136 + 8);
  v139 = *(unsigned __int8 *)(v136 + 16);
  v140 = type metadata accessor for LocationViewCollisionOptions(0);
  sub_10007A100((uint64_t)&qword_100BCCB38);
  v142 = v141;
  v143 = StateObject.wrappedValue.getter(v137, v138, v139, v140, v141);
  v144 = static ObservableObject.environmentStore.getter(v140, v142);
  v145 = v195;
  sub_100037768(v133, v195, &qword_100BD06D0);
  v146 = v202;
  v147 = (uint64_t *)(v145 + *(int *)(v202 + 36));
  *v147 = v144;
  v147[1] = v143;
  sub_100021A14(v133, &qword_100BD06D0);
  __chkstk_darwin(v148);
  v163 = v115;
  v164 = v120;
  v149 = sub_1000BA294(&qword_100BD0878);
  v150 = sub_1002721E0();
  v151 = sub_100075EB0(&qword_100BD08A0);
  v152 = sub_10027236C();
  v214 = v151;
  v215 = v152;
  v153 = swift_getOpaqueTypeConformance2(&v214, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v154 = v201;
  View.toolbar<A>(content:)(sub_1002721D8, &v165 - 4, v146, v149, v150, v153);
  sub_100021A14(v145, &qword_100BD06D8);
  v155 = sub_1000BA294(&qword_100BD08C0);
  v156 = type metadata accessor for ToolbarPlacement(0);
  v157 = swift_allocObject(v155, ((*(unsigned __int8 *)(*(_QWORD *)(v156 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v156 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v156 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v156 - 8) + 80) | 7);
  *(_OWORD *)(v157 + 16) = xmmword_10097CA50;
  static ToolbarPlacement.navigationBar.getter();
  v214 = v146;
  v215 = v149;
  v216 = v150;
  v217 = v153;
  v158 = swift_getOpaqueTypeConformance2(&v214, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v159 = v198;
  v160 = v204;
  View.toolbarBackground(_:for:)(2, v157, v204, v158);
  v161 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, __n128))(v203 + 8))(v154, v160, v161);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v199 + 32))(v207, v159, v200);
}

void sub_10026C258(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  int *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE v78[40];
  _QWORD v79[6];

  v77 = a3;
  v5 = sub_1000BA294(&qword_100BD0988);
  __chkstk_darwin(v5);
  v76 = (uint64_t)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v72 = (uint64_t *)((char *)&v61 - v8);
  v9 = type metadata accessor for WeatherConditionBackgroundModifier(0);
  __chkstk_darwin(v9);
  v73 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for WeatherConditionBackgroundModel(0);
  v12 = *(_QWORD *)(v11 - 8);
  v62 = v11;
  v13 = v12;
  v69 = v12;
  __chkstk_darwin(v11);
  v66 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v61 - v16;
  v71 = sub_1000BA294(&qword_100BD0990);
  __chkstk_darwin(v71);
  v68 = (uint64_t *)((char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v75 = sub_1000BA294(&qword_100BD0998);
  __chkstk_darwin(v75);
  v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v74 = (uint64_t)&v61 - v22;
  v65 = static Color.clear.getter(v23);
  v24 = *(int *)(type metadata accessor for LocationPreviewViewContentModel(0) + 32);
  v67 = a1;
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v63 = v17;
  v25(v17, a1 + v24, v11);
  v26 = (int *)type metadata accessor for LocationPreviewView(0);
  v27 = v26[16];
  v28 = (_QWORD *)((char *)a2 + v26[15]);
  v29 = *v28;
  v64 = v28[1];
  sub_100043CA8((uint64_t)a2 + v27, (uint64_t)v79);
  v30 = (char *)a2 + v26[12];
  v70 = a2;
  v31 = *(_QWORD *)v30;
  v32 = *((_QWORD *)v30 + 1);
  v33 = v30[16];
  v34 = type metadata accessor for WeatherVFXConditionBackground(0);
  sub_10007A100((uint64_t)&qword_100BD0870);
  v36 = StateObject.wrappedValue.getter(v31, v32, v33, v34, v35);
  v37 = Namespace.wrappedValue.getter(*a2);
  sub_10062F880();
  v39 = v38;
  v41 = v40;
  v42 = static Color.black.getter(v38);
  v43 = (uint64_t)v66;
  v44 = v17;
  v45 = v62;
  v25(v66, (uint64_t)v44, v62);
  sub_100043CA8((uint64_t)v79, (uint64_t)v78);
  swift_unknownObjectRetain(v29);
  swift_retain();
  swift_bridgeObjectRetain(v41);
  swift_retain();
  LOBYTE(v60) = 0;
  v46 = (uint64_t)v73;
  sub_1000550B8(v43, v29, v64, (uint64_t)v78, v36, v37, v39, v41, v60, v42, v61, v62, (uint64_t)v63, v64, v65, (uint64_t)v66, v67, (uint64_t)v68, v69,
    (uint64_t)v70,
    v71,
    (uint64_t)v72);
  v47 = v68;
  sub_100080C0C(v46, (uint64_t)v68 + *(int *)(v71 + 36), type metadata accessor for WeatherConditionBackgroundModifier);
  v48 = v65;
  *v47 = v65;
  swift_retain();
  sub_1000215BC(v46, type metadata accessor for WeatherConditionBackgroundModifier);
  swift_release(v36);
  swift_bridgeObjectRelease();
  swift_release(v42);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v79);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v63, v45);
  swift_release(v48);
  v50 = static SafeAreaRegions.all.getter(v49);
  LOBYTE(v41) = static Edge.Set.all.getter(v50);
  sub_100037768((uint64_t)v47, (uint64_t)v20, &qword_100BD0990);
  v51 = &v20[*(int *)(v75 + 36)];
  *(_QWORD *)v51 = v50;
  v51[8] = v41;
  sub_100021A14((uint64_t)v47, &qword_100BD0990);
  v52 = v74;
  sub_1000787D4((uint64_t)v20, v74, &qword_100BD0998);
  v54 = static HorizontalAlignment.center.getter(v53);
  v55 = v72;
  *v72 = v54;
  v55[1] = 0;
  *((_BYTE *)v55 + 16) = 0;
  v56 = sub_1000BA294(&qword_100BD09A0);
  sub_10026C754((uint64_t)v70, v67, (uint64_t)v55 + *(int *)(v56 + 44));
  sub_100037768(v52, (uint64_t)v20, &qword_100BD0998);
  v57 = v76;
  sub_100037768((uint64_t)v55, v76, &qword_100BD0988);
  v58 = v77;
  sub_100037768((uint64_t)v20, v77, &qword_100BD0998);
  v59 = sub_1000BA294(&qword_100BD09A8);
  sub_100037768(v57, v58 + *(int *)(v59 + 48), &qword_100BD0988);
  sub_100021A14((uint64_t)v55, &qword_100BD0988);
  sub_100021A14(v52, &qword_100BD0998);
  sub_100021A14(v57, &qword_100BD0988);
  sub_100021A14((uint64_t)v20, &qword_100BD0998);
}

void sub_10026C754(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE __src[104];
  _BYTE __dst[112];

  v31 = a2;
  v33 = a1;
  v32 = a3;
  v3 = type metadata accessor for LocationPreviewView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = type metadata accessor for LocationPreviewViewContentModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = sub_1000BA294(&qword_100BD09B0);
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - v13;
  v15 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v16 = objc_msgSend(v15, "userInterfaceIdiom");

  if (v16)
  {
    v18 = sub_1000BA294(&qword_100BD09B8);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 1, 1, v18);
    v19 = v31;
  }
  else
  {
    *(_QWORD *)v14 = static VerticalAlignment.center.getter(v17);
    *((_QWORD *)v14 + 1) = 0;
    v14[16] = 1;
    v20 = sub_1000BA294(&qword_100BD09D8);
    v21 = v31;
    sub_10026CABC(v33, v31, (uint64_t)&v14[*(int *)(v20 + 44)]);
    v22 = sub_1000BA294(&qword_100BD09B8);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 0, 1, v22);
    v19 = v21;
  }
  sub_100080C0C(v19, (uint64_t)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for LocationPreviewViewContentModel);
  v23 = *(unsigned __int8 *)(v7 + 80);
  v24 = (v23 + 16) & ~v23;
  v25 = swift_allocObject(&unk_100B67FD0, v24 + v8, v23 | 7);
  sub_10007802C((uint64_t)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v25 + v24, type metadata accessor for LocationPreviewViewContentModel);
  sub_100080C0C(v33, (uint64_t)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for LocationPreviewView);
  v26 = *(unsigned __int8 *)(v4 + 80);
  v27 = (v26 + 16) & ~v26;
  v28 = swift_allocObject(&unk_100B67FF8, v27 + v5, v26 | 7);
  sub_10007802C((uint64_t)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v28 + v27, type metadata accessor for LocationPreviewView);
  sub_100528244((void (*)(__int128 *))sub_100272850, (uint64_t)sub_100272930, v28, (uint64_t)__dst);
  sub_100037768((uint64_t)__dst, (uint64_t)__src, &qword_100BD09C0);
  __src[97] = 1;
  sub_100021A14((uint64_t)__dst, &qword_100BD09C0);
  memcpy(__dst, __src, 0x62uLL);
  sub_100037768((uint64_t)v14, (uint64_t)v11, &qword_100BD09B0);
  sub_100037768((uint64_t)__dst, (uint64_t)__src, &qword_100BD09C8);
  v29 = v32;
  sub_100037768((uint64_t)v11, v32, &qword_100BD09B0);
  v30 = sub_1000BA294(&qword_100BD09D0);
  sub_100037768((uint64_t)__src, v29 + *(int *)(v30 + 48), &qword_100BD09C8);
  sub_100021A14((uint64_t)__dst, &qword_100BD09C8);
  sub_100021A14((uint64_t)v14, &qword_100BD09B0);
  sub_100021A14((uint64_t)__src, &qword_100BD09C8);
  sub_100021A14((uint64_t)v11, &qword_100BD09B0);
}

void sub_10026CABC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t KeyPath;
  char *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  void (*v90)(char *, uint64_t);
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;

  v92 = a2;
  v98 = a3;
  v4 = sub_1000BA294(&qword_100BC35F8);
  __chkstk_darwin(v4);
  v94 = (char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for Location(0);
  v95 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v89 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = v6;
  __chkstk_darwin(v7);
  v102 = (char *)&v78 - v8;
  v9 = sub_1000BA294(&qword_100BD09E0);
  __chkstk_darwin(v9);
  v97 = (uint64_t)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v96 = (uint64_t)&v78 - v12;
  v13 = type metadata accessor for LocationPreviewViewContentModel(0);
  v14 = *(_QWORD *)(v13 - 8);
  v90 = (void (*)(char *, uint64_t))v13;
  v91 = (char *)v14;
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for LocationPreviewView(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  __chkstk_darwin(v17);
  v20 = (char *)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_1000BA294(&qword_100BD0900);
  v93 = *(char **)(v100 - 8);
  __chkstk_darwin(v100);
  v22 = (char *)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_1000BA294(&qword_100BD08E8);
  __chkstk_darwin(v23);
  v25 = (char *)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v101 = (char *)&v78 - v27;
  v88 = a1;
  sub_100080C0C(a1, (uint64_t)v20, type metadata accessor for LocationPreviewView);
  v28 = v92;
  sub_100080C0C(v92, (uint64_t)v16, type metadata accessor for LocationPreviewViewContentModel);
  v29 = *(unsigned __int8 *)(v18 + 80);
  v30 = (v29 + 16) & ~v29;
  v31 = v91[80];
  v84 = v19;
  v85 = v15;
  v32 = (v19 + v31 + v30) & ~v31;
  v82 = v29;
  v81 = v31 | v29;
  v33 = swift_allocObject(&unk_100B68020, v32 + v15, v31 | v29 | 7);
  v86 = v20;
  sub_10007802C((uint64_t)v20, v33 + v30, type metadata accessor for LocationPreviewView);
  v34 = v33 + v32;
  v35 = v23;
  v91 = v16;
  sub_10007802C((uint64_t)v16, v34, type metadata accessor for LocationPreviewViewContentModel);
  v36 = sub_1000BA294(&qword_100BD0920);
  v37 = sub_1002724C8();
  v80 = v36;
  v38 = Button.init(action:label:)(sub_100272538, v33, sub_10026D17C, 0, v36, v37);
  v39 = static Color.white.getter(v38);
  KeyPath = swift_getKeyPath(&unk_10098D600);
  v41 = v93;
  v42 = v100;
  v83 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v93 + 2);
  v83(v25, v22, v100);
  v43 = (uint64_t *)&v25[*(int *)(v35 + 36)];
  *v43 = KeyPath;
  v43[1] = v39;
  v44 = (uint64_t)v101;
  v45 = (void (*)(char *, uint64_t))*((_QWORD *)v41 + 1);
  v93 = v22;
  v46 = v22;
  v47 = (uint64_t)v94;
  v45(v46, v42);
  sub_1000787D4((uint64_t)v25, v44, &qword_100BD08E8);
  sub_10062F730(v47);
  v48 = v99;
  if (_s7Weather24LocationCompositionStateOwet_0(v47, 1, v99) == 1)
  {
    sub_100021A14(v47, &qword_100BC35F8);
LABEL_6:
    v73 = 1;
    v72 = v96;
    goto LABEL_7;
  }
  v79 = v37;
  v49 = *(void (**)(char *, uint64_t, uint64_t))(v95 + 32);
  v49(v102, v47, v48);
  if (*(_BYTE *)(v28 + *((int *)v90 + 5)) != 1)
  {
    (*(void (**)(char *, uint64_t))(v95 + 8))(v102, v48);
    goto LABEL_6;
  }
  v94 = (char *)v35;
  v90 = v45;
  v50 = v82;
  v78 = ~v82;
  v51 = v28;
  v52 = (uint64_t)v91;
  sub_100080C0C(v51, (uint64_t)v91, type metadata accessor for LocationPreviewViewContentModel);
  v53 = (uint64_t)v86;
  sub_100080C0C(v88, (uint64_t)v86, type metadata accessor for LocationPreviewView);
  v54 = v95;
  v55 = v89;
  (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v89, v102, v48);
  v56 = (v31 + 16) & ~v31;
  v57 = (v85 + v50 + v56) & v78;
  v58 = *(unsigned __int8 *)(v54 + 80);
  v59 = v54;
  v60 = (v57 + v84 + v58) & ~v58;
  v61 = swift_allocObject(&unk_100B68048, v60 + v87, v81 | v58 | 7);
  sub_10007802C(v52, v61 + v56, type metadata accessor for LocationPreviewViewContentModel);
  sub_10007802C(v53, v61 + v57, type metadata accessor for LocationPreviewView);
  v62 = v61 + v60;
  v35 = (uint64_t)v94;
  v63 = v55;
  v64 = v99;
  v49((char *)v62, (uint64_t)v63, v99);
  v65 = v93;
  v66 = v61;
  v44 = (uint64_t)v101;
  v67 = Button.init(action:label:)(sub_1002724C4, v66, sub_10026D180, 0, v80, v79);
  v68 = static Color.white.getter(v67);
  v69 = swift_getKeyPath(&unk_10098D600);
  v70 = v100;
  v83(v25, v65, v100);
  v71 = (uint64_t *)&v25[*(int *)(v35 + 36)];
  *v71 = v69;
  v71[1] = v68;
  v90(v65, v70);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v102, v64);
  v72 = v96;
  sub_1000787D4((uint64_t)v25, v96, &qword_100BD08E8);
  v73 = 0;
LABEL_7:
  _s7Weather24LocationCompositionStateOwst_0(v72, v73, 1, v35);
  sub_100037768(v44, (uint64_t)v25, &qword_100BD08E8);
  v74 = v97;
  sub_100037768(v72, v97, &qword_100BD09E0);
  v75 = v98;
  sub_100037768((uint64_t)v25, v98, &qword_100BD08E8);
  v76 = sub_1000BA294(&qword_100BD09E8);
  v77 = v75 + *(int *)(v76 + 48);
  *(_QWORD *)v77 = 0;
  *(_BYTE *)(v77 + 8) = 1;
  sub_100037768(v74, v75 + *(int *)(v76 + 64), &qword_100BD09E0);
  sub_100021A14(v72, &qword_100BD09E0);
  sub_100021A14(v44, &qword_100BD08E8);
  sub_100021A14(v74, &qword_100BD09E0);
  sub_100021A14((uint64_t)v25, &qword_100BD08E8);
}

void sub_10026D184(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v3 = type metadata accessor for PreviewLocation(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LocationModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v10 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100080C0C(a2, (uint64_t)v5, type metadata accessor for PreviewLocation);
  sub_1005EC060((uint64_t)v5, (uint64_t)v9);
  sub_1000BF8E0();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_1005283AC(1, 0, 0);
}

double sub_10026D280@<D0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  double result;

  sub_1000DB418(a1, a1[3]);
  v5 = Namespace.wrappedValue.getter(*a2);
  *(_QWORD *)&result = sub_10007998C(v5, a3).n128_u64[0];
  return result;
}

uint64_t sub_10026D2C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;

  v30 = a1;
  v1 = sub_1000BA294(&qword_100BD0980);
  __chkstk_darwin(v1);
  v3 = (char *)v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = LocalizedStringKey.init(stringLiteral:)(0x1000000000000017, 0x80000001009F7730);
  v8 = Text.init(_:tableName:bundle:comment:)(v4, v6, v5 & 1, v7, 0, 0, 0, "Title of alert shown when adding a city from a preview card and the maximum cities has been reached");
  v28[1] = v9;
  v29 = v8;
  v28[0] = v10;
  v11 = LocalizedStringKey.init(stringLiteral:)(0x1000000000000036, 0x80000001009F77C0);
  Text.init(_:tableName:bundle:comment:)(v11, v13, v12 & 1, v14, 0, 0, 0, "Message of alert shown when adding a city from a preview card and the maximum cities has been reached");
  v15 = LocalizedStringKey.init(stringLiteral:)(19279, 0xE200000000000000);
  v19 = Text.init(_:tableName:bundle:comment:)(v15, v17, v16 & 1, v18, 0, 0, 0, "OK button title");
  v21 = v20;
  v23 = v22 & 1;
  static Alert.Button.default(_:action:)(v19, v20, v22 & 1, v24, LocationSearchEntityFromStringResolver.init(), 0, v25);
  sub_1000D31B4(v19, v21, v23);
  swift_bridgeObjectRelease();
  v26 = type metadata accessor for Alert.Button(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v3, 0, 1, v26);
  return Alert.init(title:message:dismissButton:)(v29);
}

uint64_t sub_10026D4C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v4 = type metadata accessor for LocationPreviewModalViewModel(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocationPreviewViewContentModel(0);
  sub_100080C0C(a1 + *(int *)(v7 + 36), (uint64_t)v6, type metadata accessor for LocationPreviewModalViewModel);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6);
  if ((EnumCaseMultiPayload - 2) >= 8)
  {
    if (!EnumCaseMultiPayload)
    {
      v13 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a2, v6, v13);
      v10 = a2;
      v11 = 0;
      v9 = v13;
      return _s7Weather24LocationCompositionStateOwst_0(v10, v11, 1, v9);
    }
    sub_1000215BC((uint64_t)v6, type metadata accessor for LocationPreviewModalViewModel);
  }
  v9 = type metadata accessor for URL(0);
  v10 = a2;
  v11 = 1;
  return _s7Weather24LocationCompositionStateOwst_0(v10, v11, 1, v9);
}

uint64_t sub_10026D5D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_1000986AC();
  v20 = v1;
  v21 = v2;
  v17 = v3;
  v18 = v4;
  v16 = v5;
  v7 = v6;
  v8 = sub_1000BBE9C();
  __chkstk_darwin(v8);
  sub_1000C1A3C(v0);
  v9 = type metadata accessor for MainActor(0);
  v10 = static MainActor.shared.getter(v9);
  v11 = sub_1000B25B4(v7);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = &protocol witness table for MainActor;
  sub_1000D8E90(v11);
  sub_1000C1A3C(v0);
  v13 = static MainActor.shared.getter(v12);
  v14 = sub_1000B25B4(v16);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = &protocol witness table for MainActor;
  sub_1000D8E90(v14);
  Binding.init(get:set:)(&v19, v17, v11, v18, v14, &type metadata for Bool);
  return v19;
}

void sub_10026D6E8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_1000BA294(&qword_100BD0728);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BD0708);
  __chkstk_darwin(v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10026EA78(a2, (uint64_t)v8);
  v12 = (uint64_t *)(a1 + *(int *)(type metadata accessor for LocationPreviewView(0) + 40));
  v13 = *v12;
  if (*v12)
  {
    v14 = type metadata accessor for ObservableResolver(0);
    sub_10007A100((uint64_t)&qword_100BD0930);
    v16 = v15;
    swift_retain();
    v17 = static ObservableObject.environmentStore.getter(v14, v16);
    sub_100037768((uint64_t)v8, (uint64_t)v11, &qword_100BD0728);
    v18 = (uint64_t *)&v11[*(int *)(v9 + 36)];
    *v18 = v17;
    v18[1] = v13;
    sub_100021A14((uint64_t)v8, &qword_100BD0728);
    sub_1000787D4((uint64_t)v11, a3, &qword_100BD0708);
  }
  else
  {
    v19 = v12[1];
    v20 = type metadata accessor for ObservableResolver(0);
    sub_10007A100((uint64_t)&qword_100BD0930);
    EnvironmentObject.error()(0, v19, v20, v21);
    __break(1u);
  }
}

void sub_10026D88C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = type metadata accessor for LocationPreviewView(0);
  sub_1000DB418((_QWORD *)(a3 + *(int *)(v5 + 56)), *(_QWORD *)(a3 + *(int *)(v5 + 56) + 24));
  sub_10095DC3C(a1);
}

void sub_10026D8E0(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  id v32;
  id v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t OpaqueTypeConformance2;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char **v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;

  v95 = a3;
  v96 = a2;
  v93 = a1;
  v92 = sub_1000BA294(&qword_100BD08C8);
  __chkstk_darwin(v92);
  v4 = (char *)&v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000BA294(&qword_100BC35F8);
  __chkstk_darwin(v5);
  v89 = (char **)((char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v90 = type metadata accessor for Location(0);
  v86 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v85 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000BA294(&qword_100BD08D0);
  __chkstk_darwin(v8);
  v91 = (uint64_t)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v78 - v11;
  v13 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v13);
  v79 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v78 - v16;
  v18 = sub_1000BA294(&qword_100BD08D8);
  v87 = *(_QWORD *)(v18 - 8);
  v88 = v18;
  __chkstk_darwin(v18);
  v20 = (char *)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)&v78 - v22;
  __chkstk_darwin(v24);
  v26 = (char *)&v78 - v25;
  v94 = sub_1000BA294(&qword_100BD08A0);
  __chkstk_darwin(v94);
  v28 = (char *)&v78 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v31 = (char *)&v78 - v30;
  v32 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v33 = objc_msgSend(v32, "userInterfaceIdiom");

  if (v33)
  {
    v78 = v20;
    v81 = v28;
    v82 = v31;
    v83 = v12;
    v84 = v4;
    v34 = static ToolbarItemPlacement.cancellationAction.getter();
    v80 = (char *)&v78;
    __chkstk_darwin(v34);
    v35 = v96;
    *(&v78 - 2) = v93;
    *(&v78 - 1) = v35;
    v36 = v17;
    v37 = sub_1000BA294(&qword_100BD08E0);
    v38 = sub_100075EB0(&qword_100BD08E8);
    v39 = type metadata accessor for PlainButtonStyle(255);
    v40 = sub_1002723F0();
    sub_10007A100((uint64_t)&qword_100BD0908);
    v97 = v38;
    v98 = v39;
    v99 = v40;
    v100 = v41;
    swift_getOpaqueTypeConformance2(&v97, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v42 = v37;
    ToolbarItem<>.init(placement:content:)(v36, sub_1002723E8, &v78 - 4, v37);
    v44 = v87;
    v43 = v88;
    (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v26, v23, v88);
    v45 = (uint64_t)v89;
    sub_10062F730((uint64_t)v89);
    v46 = v90;
    v47 = _s7Weather24LocationCompositionStateOwet_0(v45, 1, v90);
    v80 = v26;
    if (v47 == 1)
    {
      sub_100021A14(v45, &qword_100BC35F8);
      v48 = v92;
      v50 = (uint64_t)v83;
      v49 = v84;
      v51 = (uint64_t)v81;
    }
    else
    {
      v54 = v85;
      v55 = v86;
      (*(void (**)(char *, uint64_t, uint64_t))(v86 + 32))(v85, v45, v46);
      v56 = type metadata accessor for LocationPreviewViewContentModel(0);
      v50 = (uint64_t)v83;
      v51 = (uint64_t)v81;
      if (v96[*(int *)(v56 + 20)] == 1)
      {
        v57 = v79;
        v58 = static ToolbarItemPlacement.primaryAction.getter();
        v89 = &v78;
        __chkstk_darwin(v58);
        v59 = v93;
        *(&v78 - 4) = v96;
        *(&v78 - 3) = v59;
        *(&v78 - 2) = v54;
        v60 = v78;
        ToolbarItem<>.init(placement:content:)(v57, sub_1002724B4, &v78 - 6, v42);
        sub_10027248C((uint64_t)&unk_100BD0918);
        v62 = v61;
        v63 = v91;
        static ToolbarContentBuilder.buildBlock<A>(_:)(v60, v43, v61);
        v64 = v54;
        v65 = sub_1000BA294(&qword_100BD0910);
        _s7Weather24LocationCompositionStateOwst_0(v63, 0, 1, v65);
        v97 = v43;
        v98 = v62;
        OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v97, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
        static ToolbarContentBuilder.buildIf<A>(_:)(v63, v65, OpaqueTypeConformance2);
        sub_100021A14(v63, &qword_100BD08D0);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v60, v43);
        (*(void (**)(char *, uint64_t))(v86 + 8))(v64, v46);
        v48 = v92;
        v49 = v84;
LABEL_9:
        v71 = (uint64_t)&v49[*(int *)(v48 + 48)];
        v72 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
        v73 = v44;
        v74 = v80;
        v72(v49, v80, v43);
        sub_100037768(v50, v71, &qword_100BD08D0);
        TupleToolbarContent.init(_:)(v49, v48);
        v75 = sub_1000BA294(&qword_100BD08B8);
        _s7Weather24LocationCompositionStateOwst_0(v51, 0, 1, v75);
        sub_10027248C((uint64_t)&unk_100BD08B0);
        v31 = v82;
        static ToolbarContentBuilder.buildIf<A>(_:)(v51, v75, v76);
        sub_100021A14(v51, &qword_100BD08A0);
        sub_100021A14(v50, &qword_100BD08D0);
        (*(void (**)(char *, uint64_t))(v73 + 8))(v74, v43);
        goto LABEL_10;
      }
      (*(void (**)(char *, uint64_t))(v55 + 8))(v54, v46);
      v48 = v92;
      v49 = v84;
    }
    v67 = sub_1000BA294(&qword_100BD0910);
    v68 = v91;
    _s7Weather24LocationCompositionStateOwst_0(v91, 1, 1, v67);
    sub_10027248C((uint64_t)&unk_100BD0918);
    v97 = v43;
    v98 = v69;
    v70 = swift_getOpaqueTypeConformance2(&v97, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    static ToolbarContentBuilder.buildIf<A>(_:)(v68, v67, v70);
    sub_100021A14(v68, &qword_100BD08D0);
    goto LABEL_9;
  }
  v52 = sub_1000BA294(&qword_100BD08B8);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v28, 1, 1, v52);
  sub_10027248C((uint64_t)&unk_100BD08B0);
  static ToolbarContentBuilder.buildIf<A>(_:)(v28, v52, v53);
  sub_100021A14((uint64_t)v28, &qword_100BD08A0);
LABEL_10:
  v77 = sub_10027236C();
  static ToolbarContentBuilder.buildBlock<A>(_:)(v31, v94, v77);
  sub_100021A14((uint64_t)v31, &qword_100BD08A0);
}

uint64_t sub_10026E054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v43 = a2;
  v54 = a3;
  v4 = type metadata accessor for PlainButtonStyle(0);
  v52 = *(_QWORD *)(v4 - 8);
  v53 = v4;
  __chkstk_darwin(v4);
  v51 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LocationPreviewViewContentModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v45 = type metadata accessor for LocationPreviewView(0);
  v9 = *(_QWORD *)(v45 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v45);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000BA294(&qword_100BD0900);
  v46 = *(_QWORD *)(v12 - 8);
  v47 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_1000BA294(&qword_100BD08E8);
  __chkstk_darwin(v49);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_1000BA294(&qword_100BD08E0);
  v48 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v44 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100080C0C(a1, (uint64_t)v11, type metadata accessor for LocationPreviewView);
  sub_100080C0C(v43, (uint64_t)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for LocationPreviewViewContentModel);
  v18 = *(unsigned __int8 *)(v9 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = *(unsigned __int8 *)(v7 + 80);
  v21 = (v10 + v20 + v19) & ~v20;
  v22 = swift_allocObject(&unk_100B67F08, v21 + v8, v18 | v20 | 7);
  sub_10007802C((uint64_t)v11, v22 + v19, type metadata accessor for LocationPreviewView);
  sub_10007802C((uint64_t)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v22 + v21, type metadata accessor for LocationPreviewViewContentModel);
  v23 = sub_1000BA294(&qword_100BD0920);
  v24 = sub_1002724C8();
  Button.init(action:label:)(sub_100272538, v22, sub_10026D17C, 0, v23, v24);
  v25 = a1 + *(int *)(v45 + 36);
  v26 = *(_QWORD *)v25;
  LOBYTE(v23) = *(_BYTE *)(v25 + 8);
  sub_10008D47C(*(_QWORD *)v25, v23);
  sub_100109B54();
  LOBYTE(v22) = v27;
  v28 = sub_1000B15F8(v26, v23);
  if ((v22 & 1) != 0)
    v29 = static Color.black.getter(v28);
  else
    v29 = static Color.white.getter(v28);
  v30 = v29;
  KeyPath = swift_getKeyPath(&unk_10098D600);
  v33 = v46;
  v32 = v47;
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v16, v14, v47);
  v34 = v49;
  v35 = (uint64_t *)&v16[*(int *)(v49 + 36)];
  *v35 = KeyPath;
  v35[1] = v30;
  v36 = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v14, v32);
  v37 = v51;
  PlainButtonStyle.init()(v36);
  v38 = sub_1002723F0();
  sub_10007A100((uint64_t)&qword_100BD0908);
  v39 = v44;
  v40 = v53;
  View.buttonStyle<A>(_:)(v37, v34, v53, v38, v41);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v37, v40);
  sub_100021A14((uint64_t)v16, &qword_100BD08E8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v48 + 32))(v54, v39, v50);
}

void sub_10026E3F4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5;

  v5 = sub_1000BBE9C();
  sub_1000E76E8(v5);
  a3(a2);
  sub_100079F70();
}

double sub_10026E42C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v2 = LocalizedStringKey.init(stringLiteral:)(0x6C65636E6143, 0xE600000000000000);
  v9 = sub_1000C2638(v2, v4, v3 & 1, v5, v6, v7, v8, (uint64_t)"Button to cancel adding a previewed location");
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v16 = static Edge.Set.all.getter(v9);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v13 & 1;
  *(_QWORD *)(a1 + 24) = v15;
  return sub_1000DA4F4(v16);
}

uint64_t sub_10026E4BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t KeyPath;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v60 = a1;
  v61 = a3;
  v73 = a4;
  v5 = type metadata accessor for PlainButtonStyle(0);
  v71 = *(_QWORD *)(v5 - 8);
  v72 = v5;
  __chkstk_darwin(v5);
  v70 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Location(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v58 = v7;
  v59 = v9;
  __chkstk_darwin(v7);
  v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for LocationPreviewView(0);
  v12 = *(_QWORD *)(v63 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v63);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LocationPreviewViewContentModel(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v15);
  v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_1000BA294(&qword_100BD0900);
  v64 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v57 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_1000BA294(&qword_100BD08E8);
  __chkstk_darwin(v68);
  v62 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_1000BA294(&qword_100BD08E0);
  v67 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v65 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100080C0C(v60, (uint64_t)v18, type metadata accessor for LocationPreviewViewContentModel);
  sub_100080C0C(a2, (uint64_t)v14, type metadata accessor for LocationPreviewView);
  v22 = v11;
  v23 = v11;
  v24 = v58;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v22, v61, v58);
  v25 = *(unsigned __int8 *)(v16 + 80);
  v26 = (v25 + 16) & ~v25;
  v27 = *(unsigned __int8 *)(v12 + 80);
  v28 = (v17 + v27 + v26) & ~v27;
  v29 = *(unsigned __int8 *)(v8 + 80);
  v30 = (v13 + v29 + v28) & ~v29;
  v31 = swift_allocObject(&unk_100B67EE0, v30 + v59, v25 | v27 | v29 | 7);
  v32 = (uint64_t)v18;
  v33 = v57;
  sub_10007802C(v32, v31 + v26, type metadata accessor for LocationPreviewViewContentModel);
  sub_10007802C((uint64_t)v14, v31 + v28, type metadata accessor for LocationPreviewView);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v31 + v30, v23, v24);
  v34 = sub_1000BA294(&qword_100BD0920);
  v35 = sub_1002724C8();
  Button.init(action:label:)(sub_1002724C4, v31, sub_10026D180, 0, v34, v35);
  v36 = a2 + *(int *)(v63 + 36);
  v37 = *(_QWORD *)v36;
  LOBYTE(v26) = *(_BYTE *)(v36 + 8);
  sub_10008D47C(*(_QWORD *)v36, v26);
  sub_100109B54();
  LOBYTE(v28) = v38;
  v39 = sub_1000B15F8(v37, v26);
  if ((v28 & 1) != 0)
    v40 = static Color.black.getter(v39);
  else
    v40 = static Color.white.getter(v39);
  v41 = v40;
  KeyPath = swift_getKeyPath(&unk_10098D600);
  v43 = v64;
  v44 = (uint64_t)v62;
  v45 = v66;
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v62, v33, v66);
  v46 = v68;
  v47 = (uint64_t *)(v44 + *(int *)(v68 + 36));
  *v47 = KeyPath;
  v47[1] = v41;
  v48 = (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v33, v45);
  v49 = v70;
  PlainButtonStyle.init()(v48);
  v50 = sub_1002723F0();
  sub_10007A100((uint64_t)&qword_100BD0908);
  v51 = v65;
  v52 = v46;
  v53 = v72;
  View.buttonStyle<A>(_:)(v49, v52, v72, v50, v54);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v49, v53);
  sub_100021A14(v44, &qword_100BD08E8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v67 + 32))(v73, v51, v69);
}

double sub_10026E8F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[9];
  uint64_t v13;

  v6 = sub_1000E6F58();
  if ((*(_BYTE *)(a1 + *(int *)(v6 + 28)) & 1) != 0)
  {
    v7 = *(_QWORD *)(a2 + 16);
    v12[1] = *(_BYTE *)(a2 + 8);
    v13 = v7;
    v12[0] = 1;
    v8 = sub_1000BA294(&qword_100BC5608);
    State.wrappedValue.setter(v12, v8);
  }
  else
  {
    v10 = v6;
    v11 = sub_1000BBE9C();
    sub_1000E76E8(v11);
    return sub_10095DE60(a3, *(_BYTE *)(a1 + *(int *)(v10 + 24)));
  }
  return result;
}

double sub_10026E994@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = LocalizedStringKey.init(stringLiteral:)(6579265, 0xE300000000000000);
  v9 = sub_1000C2638(v2, v4, v3 & 1, v5, v6, v7, v8, (uint64_t)"Button to add a previewed location");
  v11 = v10;
  v13 = v12;
  v15 = v14 & 1;
  v16 = static Font.Weight.bold.getter(v9);
  v17 = Text.fontWeight(_:)(*(_QWORD *)&v16, 0, v9, v11, v15, v13);
  v19 = v18;
  v21 = v20;
  v23 = v22;
  sub_1000D31B4(v9, v11, v15);
  swift_bridgeObjectRelease();
  v25 = static Edge.Set.all.getter(v24);
  *(_QWORD *)a1 = v17;
  *(_QWORD *)(a1 + 8) = v19;
  *(_BYTE *)(a1 + 16) = v21 & 1;
  *(_QWORD *)(a1 + 24) = v23;
  return sub_1000DA4F4(v25);
}

void sub_10026EA78(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v36 = a2;
  v22 = sub_1000BA294(&qword_100BD0938);
  __chkstk_darwin(v22);
  v23 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_1000BA294(&qword_100BD0808);
  v4 = __chkstk_darwin(v27);
  v24 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NewsArticleView(0, v4);
  __chkstk_darwin(v6);
  v21 = sub_1000BA294(&qword_100BD0818);
  __chkstk_darwin(v21);
  __chkstk_darwin(v7);
  v20[1] = (char *)v20 - v8;
  v9 = type metadata accessor for NewsArticle(0);
  __chkstk_darwin(v9);
  v25 = sub_1000BA294(&qword_100BD0940);
  __chkstk_darwin(v25);
  v26 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_1000BA294(&qword_100BD07C8);
  __chkstk_darwin(v31);
  v28 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_1000BA294(&qword_100BD0948);
  __chkstk_darwin(v33);
  v35 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_1000BA294(&qword_100BD0950);
  __chkstk_darwin(v29);
  v30 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_1000BA294(&qword_100BD0748);
  __chkstk_darwin(v34);
  v32 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LocationPreviewModalViewModel(0);
  __chkstk_darwin(v15);
  v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for LocationPreviewViewContentModel(0);
  sub_100080C0C(a1 + *(int *)(v18 + 36), (uint64_t)v17, type metadata accessor for LocationPreviewModalViewModel);
  v19 = (char *)&loc_10026EDA0 + *((int *)qword_10026FF48 + swift_getEnumCaseMultiPayload(v17));
  __asm { BR              X10 }
}

uint64_t sub_10026EDB0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000215BC(v1, type metadata accessor for LocationPreviewModalViewModel);
  v2 = v0[16];
  swift_storeEnumTagMultiPayload(v2, v0[14], 1);
  sub_100271BD4((uint64_t)&unk_100BD0740);
  return _ConditionalContent<>.init(storage:)(v2, v0[15], &type metadata for EmptyView, v3, &protocol witness table for EmptyView);
}

void sub_10026FF70(_QWORD *a1)
{
  sub_10026FF94(a1, (uint64_t (*)(void))sub_100792100);
}

void sub_10026FF7C(_QWORD *a1)
{
  sub_10026FF94(a1, (uint64_t (*)(void))sub_10050BD14);
}

void sub_10026FF88(_QWORD *a1)
{
  sub_10026FF94(a1, (uint64_t (*)(void))sub_1006D02D8);
}

void sub_10026FF94(_QWORD *a1, uint64_t (*a2)(void))
{
  sub_10009D428(a1, a2);
  sub_100079F70();
}

uint64_t sub_10026FFB0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000DB418(a1, a1[3]);
  return sub_1004AAD9C(a2);
}

uint64_t sub_10026FFE0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000DB418(a1, a1[3]);
  return sub_1002BE6A8(a2);
}

void sub_100270010(_QWORD *a1)
{
  sub_10026FF94(a1, (uint64_t (*)(void))sub_100463E30);
}

void sub_10027001C(_QWORD *a1)
{
  sub_10026FF94(a1, (uint64_t (*)(void))sub_1004EB254);
}

void sub_100270028(uint64_t a1@<X2>, BOOL *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  BOOL v14;
  int EnumCaseMultiPayload;
  uint64_t v16;

  v4 = type metadata accessor for LocationPreviewModalViewModel(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocationPreviewViewContentModel(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocationPreviewViewModel(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for LocationPreviewView(0) + 52) + 8);
  swift_retain();
  sub_10017B384();
  swift_release(v13);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v7) == 1)
  {
    v14 = 0;
  }
  else
  {
    sub_10007802C((uint64_t)v12, (uint64_t)v9, type metadata accessor for LocationPreviewViewContentModel);
    sub_100080C0C((uint64_t)&v9[*(int *)(v7 + 36)], (uint64_t)v6, type metadata accessor for LocationPreviewModalViewModel);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6);
    v14 = 0;
    if ((EnumCaseMultiPayload - 2) >= 8)
    {
      v14 = EnumCaseMultiPayload == 0;
      sub_1000215BC((uint64_t)v6, type metadata accessor for LocationPreviewModalViewModel);
    }
    sub_1000215BC((uint64_t)v9, type metadata accessor for LocationPreviewViewContentModel);
  }
  *a2 = v14;
}

void sub_1002701CC(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  if ((*a1 & 1) == 0)
  {
    v5 = type metadata accessor for LocationPreviewView(0);
    sub_1000DB418((_QWORD *)(a4 + *(int *)(v5 + 56)), *(_QWORD *)(a4 + *(int *)(v5 + 56) + 24));
    sub_10095DDD4();
  }
}

void sub_100270210(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for LocationPreviewViewModel(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for LocationPreviewView(0) + 52) + 8);
  swift_retain();
  sub_10017B384();
  swift_release(v7);
  LOBYTE(a1) = sub_10050ADFC();
  sub_1000215BC((uint64_t)v6, type metadata accessor for LocationPreviewViewModel);
  *a2 = a1 & 1;
}

void sub_1002702CC(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for LocationPreviewViewModel(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocationPreviewView(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a1) = *a1;
  sub_100080C0C(a4, (uint64_t)v11, v12);
  if ((a1 & 1) != 0)
  {
    sub_1000215BC((uint64_t)v11, type metadata accessor for LocationPreviewView);
  }
  else
  {
    v13 = *(_QWORD *)&v11[*(int *)(v9 + 52) + 8];
    swift_retain();
    sub_10017B384();
    swift_release(v13);
    LOBYTE(v13) = sub_10050ADFC();
    sub_1000215BC((uint64_t)v8, type metadata accessor for LocationPreviewViewModel);
    sub_1000215BC((uint64_t)v11, type metadata accessor for LocationPreviewView);
    if ((v13 & 1) != 0)
    {
      sub_1000DB418((_QWORD *)(a4 + *(int *)(v9 + 56)), *(_QWORD *)(a4 + *(int *)(v9 + 56) + 24));
      sub_10095DDD4();
    }
  }
}

uint64_t sub_100270408@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 *a10, uint64_t a11, uint64_t a12, __int128 *a13)
{
  uint64_t v21;
  int *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _BYTE v37[9];
  uint64_t v38;

  *(_QWORD *)a9 = 0;
  v37[0] = 0;
  State.init(wrappedValue:)(v37, &type metadata for Bool);
  v21 = v38;
  *(_BYTE *)(a9 + 8) = v37[1];
  *(_QWORD *)(a9 + 16) = v21;
  v22 = (int *)sub_1000BBE9C();
  v23 = (_QWORD *)(a9 + v22[6]);
  *v23 = swift_getKeyPath(&unk_10098D440);
  v24 = sub_1000BA294(&qword_100BC37E0);
  swift_storeEnumTagMultiPayload(v23, v24, 0);
  v25 = a9 + v22[7];
  *(_QWORD *)v25 = swift_getKeyPath(&unk_10098D468);
  *(_BYTE *)(v25 + 8) = 0;
  sub_1000787D4(a1, a9 + v22[8], (uint64_t *)&unk_100C09CA0);
  v26 = a9 + v22[9];
  *(_QWORD *)v26 = a2;
  *(_BYTE *)(v26 + 8) = a3 & 1;
  v27 = (_QWORD *)(a9 + v22[10]);
  *v27 = a4;
  v27[1] = a5;
  v28 = a9 + v22[11];
  *(_QWORD *)v28 = a6;
  *(_QWORD *)(v28 + 8) = a7;
  *(_BYTE *)(v28 + 16) = 0;
  v29 = a9 + v22[12];
  *(_QWORD *)v29 = sub_10026AD24;
  *(_QWORD *)(v29 + 8) = 0;
  *(_BYTE *)(v29 + 16) = 0;
  v30 = (_QWORD *)(a9 + v22[13]);
  v31 = sub_1000BA294(&qword_100BC4578);
  sub_10027248C((uint64_t)&qword_100BC4580);
  *v30 = ObservedObject.init(wrappedValue:)(a8, v31, v32);
  v30[1] = v33;
  sub_10003C800(a10, a9 + v22[14]);
  v34 = (_QWORD *)(a9 + v22[15]);
  *v34 = a11;
  v34[1] = a12;
  return sub_10003C800(a13, a9 + v22[16]);
}

_QWORD *sub_1002705FC(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t, __n128);
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  char *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t);

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = a2[2];
    v7 = a3[6];
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    swift_retain();
    v10 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(v9) == 1)
    {
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
      *(_BYTE *)(v8 + 17) = *(_BYTE *)(v9 + 17);
      *(_BYTE *)(v8 + 18) = *(_BYTE *)(v9 + 18);
      v11 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v12 = v8 + v11;
      v13 = v9 + v11;
      v14 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      v15 = 1;
    }
    else
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      swift_retain();
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v10, v15);
    v17 = a3[7];
    v18 = (char *)v4 + v17;
    v19 = (uint64_t)a2 + v17;
    v20 = *(_QWORD *)v19;
    v21 = *(_BYTE *)(v19 + 8);
    sub_10008D47C(*(_QWORD *)v19, v21);
    *(_QWORD *)v18 = v20;
    v18[8] = v21;
    v22 = a3[8];
    v23 = (_QWORD *)((char *)v4 + v22);
    v24 = (uint64_t *)((char *)a2 + v22);
    v25 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v24) == 1)
    {
      v26 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v23, v24, v26);
      v27 = 1;
    }
    else
    {
      *v23 = *v24;
      swift_retain();
      v27 = 0;
    }
    swift_storeEnumTagMultiPayload(v23, v25, v27);
    v28 = a3[9];
    v29 = (char *)v4 + v28;
    v30 = (uint64_t)a2 + v28;
    v31 = *(_QWORD *)v30;
    v32 = *(_BYTE *)(v30 + 8);
    sub_10008D47C(*(_QWORD *)v30, v32);
    *(_QWORD *)v29 = v31;
    v29[8] = v32;
    v33 = a3[10];
    v34 = a3[11];
    v35 = (_QWORD *)((char *)v4 + v33);
    v36 = (uint64_t *)((char *)a2 + v33);
    v37 = *v36;
    v38 = v36[1];
    *v35 = v37;
    v35[1] = v38;
    v39 = (char *)v4 + v34;
    v40 = *(uint64_t *)((char *)a2 + v34);
    v41 = *(uint64_t *)((char *)a2 + v34 + 8);
    LOBYTE(v29) = *((_BYTE *)a2 + v34 + 16);
    swift_retain();
    sub_100037094(v40, v41);
    *(_QWORD *)v39 = v40;
    *((_QWORD *)v39 + 1) = v41;
    v39[16] = (char)v29;
    v42 = a3[12];
    v43 = (char *)v4 + v42;
    v44 = (uint64_t)a2 + v42;
    v45 = *(_QWORD *)v44;
    v46 = *(_QWORD *)(v44 + 8);
    LOBYTE(v29) = *(_BYTE *)(v44 + 16);
    sub_100037094(*(_QWORD *)v44, v46);
    *(_QWORD *)v43 = v45;
    *((_QWORD *)v43 + 1) = v46;
    v43[16] = (char)v29;
    v47 = a3[13];
    v48 = a3[14];
    v49 = (_QWORD *)((char *)v4 + v47);
    v50 = (uint64_t *)((char *)a2 + v47);
    v51 = v50[1];
    *v49 = *v50;
    v49[1] = v51;
    v52 = (char *)v4 + v48;
    v53 = (uint64_t)a2 + v48;
    v54 = *(_OWORD *)((char *)a2 + v48 + 24);
    *(_OWORD *)((char *)v4 + v48 + 24) = v54;
    v55 = v54;
    v56 = **(void (***)(char *, uint64_t, uint64_t, __n128))(v54 - 8);
    v57 = swift_retain();
    v56(v52, v53, v55, v57);
    v58 = a3[15];
    v59 = a3[16];
    v60 = *(_OWORD *)((char *)a2 + v58);
    *(_OWORD *)((char *)v4 + v58) = v60;
    v61 = (char *)v4 + v59;
    v62 = (uint64_t)a2 + v59;
    v63 = *(_OWORD *)(v62 + 24);
    *(_OWORD *)((char *)v4 + v59 + 24) = v63;
    v64 = v63;
    v65 = **(void (***)(char *, uint64_t, uint64_t))(v63 - 8);
    swift_unknownObjectRetain(v60);
    v65(v61, v62, v64);
  }
  return v4;
}

uint64_t sub_1002708E0(uint64_t a1, int *a2)
{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  swift_release(*(_QWORD *)(a1 + 16));
  v4 = (_QWORD *)(a1 + a2[6]);
  sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(v4) == 1)
  {
    v5 = (char *)v4 + *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v6 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release(*v4);
  }
  sub_1000B15F8(*(_QWORD *)(a1 + a2[7]), *(_BYTE *)(a1 + a2[7] + 8));
  v7 = (_QWORD *)(a1 + a2[8]);
  sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v7) == 1)
  {
    v8 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release(*v7);
  }
  sub_1000B15F8(*(_QWORD *)(a1 + a2[9]), *(_BYTE *)(a1 + a2[9] + 8));
  swift_release(*(_QWORD *)(a1 + a2[10]));
  sub_1000BF398(*(_QWORD *)(a1 + a2[11]), *(_QWORD *)(a1 + a2[11] + 8));
  sub_1000BF398(*(_QWORD *)(a1 + a2[12]), *(_QWORD *)(a1 + a2[12] + 8));
  swift_release(*(_QWORD *)(a1 + a2[13] + 8));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + a2[14]));
  swift_unknownObjectRelease(*(_QWORD *)(a1 + a2[15]));
  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + a2[16]));
}

uint64_t sub_100270A4C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  swift_retain();
  v9 = sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(v8) == 1)
  {
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
    *(_BYTE *)(v7 + 17) = *(_BYTE *)(v8 + 17);
    *(_BYTE *)(v7 + 18) = *(_BYTE *)(v8 + 18);
    v10 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v11 = v7 + v10;
    v12 = v8 + v10;
    v13 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    v14 = 1;
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)v8;
    swift_retain();
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v9, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_QWORD *)v17;
  v19 = *(_BYTE *)(v17 + 8);
  sub_10008D47C(*(_QWORD *)v17, v19);
  *(_QWORD *)v16 = v18;
  *(_BYTE *)(v16 + 8) = v19;
  v20 = a3[8];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  v23 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v22) == 1)
  {
    v24 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v21, v22, v24);
    v25 = 1;
  }
  else
  {
    *v21 = *v22;
    swift_retain();
    v25 = 0;
  }
  swift_storeEnumTagMultiPayload(v21, v23, v25);
  v26 = a3[9];
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = *(_QWORD *)v28;
  v30 = *(_BYTE *)(v28 + 8);
  sub_10008D47C(*(_QWORD *)v28, v30);
  *(_QWORD *)v27 = v29;
  *(_BYTE *)(v27 + 8) = v30;
  v31 = a3[10];
  v32 = a3[11];
  v33 = (_QWORD *)(a1 + v31);
  v34 = (uint64_t *)(a2 + v31);
  v35 = *v34;
  v36 = v34[1];
  *v33 = v35;
  v33[1] = v36;
  v37 = a1 + v32;
  v38 = *(_QWORD *)(a2 + v32);
  v39 = *(_QWORD *)(a2 + v32 + 8);
  LOBYTE(v27) = *(_BYTE *)(a2 + v32 + 16);
  swift_retain();
  sub_100037094(v38, v39);
  *(_QWORD *)v37 = v38;
  *(_QWORD *)(v37 + 8) = v39;
  *(_BYTE *)(v37 + 16) = v27;
  v40 = a3[12];
  v41 = a1 + v40;
  v42 = a2 + v40;
  v43 = *(_QWORD *)v42;
  v44 = *(_QWORD *)(v42 + 8);
  LOBYTE(v27) = *(_BYTE *)(v42 + 16);
  sub_100037094(*(_QWORD *)v42, v44);
  *(_QWORD *)v41 = v43;
  *(_QWORD *)(v41 + 8) = v44;
  *(_BYTE *)(v41 + 16) = v27;
  v45 = a3[13];
  v46 = a3[14];
  v47 = (_QWORD *)(a1 + v45);
  v48 = (_QWORD *)(a2 + v45);
  v49 = v48[1];
  *v47 = *v48;
  v47[1] = v49;
  v50 = a1 + v46;
  v51 = a2 + v46;
  v52 = *(_OWORD *)(a2 + v46 + 24);
  *(_OWORD *)(a1 + v46 + 24) = v52;
  v53 = v52;
  v54 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v52 - 8);
  v55 = swift_retain();
  v54(v50, v51, v53, v55);
  v56 = a3[15];
  v57 = a3[16];
  v58 = *(_OWORD *)(a2 + v56);
  *(_OWORD *)(a1 + v56) = v58;
  v59 = a1 + v57;
  v60 = a2 + v57;
  v61 = *(_OWORD *)(v60 + 24);
  *(_OWORD *)(a1 + v57 + 24) = v61;
  v62 = v61;
  v63 = **(void (***)(uint64_t, uint64_t, uint64_t))(v61 - 8);
  swift_unknownObjectRetain(v58);
  v63(v59, v60, v62);
  return a1;
}

uint64_t sub_100270D04(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release(v6);
  if (a1 != a2)
  {
    v7 = a3[6];
    v8 = a1 + v7;
    v9 = a2 + v7;
    sub_100021A14(a1 + v7, &qword_100BC37E0);
    v10 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(v9) == 1)
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
      *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
      *(_BYTE *)(v8 + 17) = *(_BYTE *)(v9 + 17);
      *(_BYTE *)(v8 + 18) = *(_BYTE *)(v9 + 18);
      v11 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v12 = v8 + v11;
      v13 = v9 + v11;
      v14 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      v15 = 1;
    }
    else
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      swift_retain();
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v10, v15);
  }
  v16 = a3[7];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_QWORD *)v18;
  v20 = *(_BYTE *)(v18 + 8);
  sub_10008D47C(*(_QWORD *)v18, v20);
  v21 = *(_QWORD *)v17;
  v22 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v17 = v19;
  *(_BYTE *)(v17 + 8) = v20;
  sub_1000B15F8(v21, v22);
  if (a1 != a2)
  {
    v23 = a3[8];
    v24 = (_QWORD *)(a1 + v23);
    v25 = (_QWORD *)(a2 + v23);
    sub_100021A14(a1 + v23, &qword_100BC37D8);
    v26 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v25) == 1)
    {
      v27 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v24, v25, v27);
      v28 = 1;
    }
    else
    {
      *v24 = *v25;
      swift_retain();
      v28 = 0;
    }
    swift_storeEnumTagMultiPayload(v24, v26, v28);
  }
  v29 = a3[9];
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = *(_QWORD *)v31;
  v33 = *(_BYTE *)(v31 + 8);
  sub_10008D47C(*(_QWORD *)v31, v33);
  v34 = *(_QWORD *)v30;
  v35 = *(_BYTE *)(v30 + 8);
  *(_QWORD *)v30 = v32;
  *(_BYTE *)(v30 + 8) = v33;
  sub_1000B15F8(v34, v35);
  v36 = a3[10];
  v37 = a1 + v36;
  v38 = a2 + v36;
  v39 = *(_QWORD *)(a1 + v36);
  *(_QWORD *)(a1 + v36) = *(_QWORD *)(a2 + v36);
  swift_retain();
  swift_release(v39);
  *(_QWORD *)(v37 + 8) = *(_QWORD *)(v38 + 8);
  v40 = a3[11];
  v41 = a1 + v40;
  v42 = a2 + v40;
  v43 = *(_QWORD *)v42;
  v44 = *(_QWORD *)(v42 + 8);
  LOBYTE(v38) = *(_BYTE *)(v42 + 16);
  sub_100037094(*(_QWORD *)v42, v44);
  v45 = *(_QWORD *)v41;
  v46 = *(_QWORD *)(v41 + 8);
  *(_QWORD *)v41 = v43;
  *(_QWORD *)(v41 + 8) = v44;
  *(_BYTE *)(v41 + 16) = v38;
  sub_1000BF398(v45, v46);
  v47 = a3[12];
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = *(_QWORD *)v49;
  v51 = *(_QWORD *)(v49 + 8);
  LOBYTE(v38) = *(_BYTE *)(v49 + 16);
  sub_100037094(*(_QWORD *)v49, v51);
  v52 = *(_QWORD *)v48;
  v53 = *(_QWORD *)(v48 + 8);
  *(_QWORD *)v48 = v50;
  *(_QWORD *)(v48 + 8) = v51;
  *(_BYTE *)(v48 + 16) = v38;
  sub_1000BF398(v52, v53);
  v54 = a3[13];
  v55 = (_QWORD *)(a1 + v54);
  v56 = (_QWORD *)(a2 + v54);
  *v55 = *v56;
  v57 = v55[1];
  v55[1] = v56[1];
  swift_retain();
  swift_release(v57);
  sub_100094D04((_QWORD *)(a1 + a3[14]), (_QWORD *)(a2 + a3[14]));
  v58 = a3[15];
  v59 = (uint64_t *)(a1 + v58);
  v60 = (uint64_t *)(a2 + v58);
  v61 = *v60;
  v62 = v60[1];
  v63 = *v59;
  *v59 = *v60;
  swift_unknownObjectRetain(v61);
  swift_unknownObjectRelease(v63);
  v59[1] = v62;
  sub_100094D04((_QWORD *)(a1 + a3[16]), (_QWORD *)(a2 + a3[16]));
  return a1;
}

uint64_t sub_100271038(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(v8) == 1)
  {
    *(_OWORD *)v7 = *(_OWORD *)v8;
    v7[16] = v8[16];
    v7[17] = v8[17];
    v7[18] = v8[18];
    v10 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v11 = &v7[v10];
    v12 = &v8[v10];
    v13 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v14 = a3[7];
  v15 = a3[8];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = (void *)(a1 + v15);
  v19 = (const void *)(a2 + v15);
  v20 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v19) == 1)
  {
    v21 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v18, v19, v21);
    swift_storeEnumTagMultiPayload(v18, v20, 1);
  }
  else
  {
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  v22 = a3[9];
  v23 = a3[10];
  v24 = a1 + v22;
  v25 = a2 + v22;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  *(_OWORD *)(a1 + v23) = *(_OWORD *)(a2 + v23);
  v26 = a3[11];
  v27 = a3[12];
  v28 = a1 + v26;
  v29 = a2 + v26;
  *(_BYTE *)(v28 + 16) = *(_BYTE *)(v29 + 16);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  v30 = a1 + v27;
  v31 = a2 + v27;
  *(_OWORD *)v30 = *(_OWORD *)v31;
  *(_BYTE *)(v30 + 16) = *(_BYTE *)(v31 + 16);
  v32 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  v33 = a1 + v32;
  v34 = (__int128 *)(a2 + v32);
  v35 = *v34;
  v36 = v34[1];
  *(_QWORD *)(v33 + 32) = *((_QWORD *)v34 + 4);
  v37 = a3[15];
  v38 = a3[16];
  v39 = *(_OWORD *)(a2 + v37);
  *(_OWORD *)v33 = v35;
  *(_OWORD *)(v33 + 16) = v36;
  *(_OWORD *)(a1 + v37) = v39;
  v40 = a1 + v38;
  v41 = *(_OWORD *)(a2 + v38 + 16);
  *(_OWORD *)v40 = *(_OWORD *)(a2 + v38);
  *(_OWORD *)(v40 + 16) = v41;
  *(_QWORD *)(v40 + 32) = *(_QWORD *)(a2 + v38 + 32);
  return a1;
}

uint64_t sub_100271264(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release(v6);
  if (a1 != a2)
  {
    v7 = a3[6];
    v8 = (char *)(a1 + v7);
    v9 = (char *)(a2 + v7);
    sub_100021A14(a1 + v7, &qword_100BC37E0);
    v10 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(v9) == 1)
    {
      *(_OWORD *)v8 = *(_OWORD *)v9;
      v8[16] = v9[16];
      v8[17] = v9[17];
      v8[18] = v9[18];
      v11 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v12 = &v8[v11];
      v13 = &v9[v11];
      v14 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = (uint64_t *)(a2 + v15);
  v18 = *v17;
  LOBYTE(v17) = *((_BYTE *)v17 + 8);
  v19 = *(_QWORD *)v16;
  v20 = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v16 = v18;
  *(_BYTE *)(v16 + 8) = (_BYTE)v17;
  sub_1000B15F8(v19, v20);
  if (a1 != a2)
  {
    v21 = a3[8];
    v22 = (void *)(a1 + v21);
    v23 = (const void *)(a2 + v21);
    sub_100021A14(a1 + v21, &qword_100BC37D8);
    v24 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v23) == 1)
    {
      v25 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v22, v23, v25);
      swift_storeEnumTagMultiPayload(v22, v24, 1);
    }
    else
    {
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
  }
  v26 = a3[9];
  v27 = a1 + v26;
  v28 = (uint64_t *)(a2 + v26);
  v29 = *v28;
  LOBYTE(v28) = *((_BYTE *)v28 + 8);
  v30 = *(_QWORD *)v27;
  v31 = *(_BYTE *)(v27 + 8);
  *(_QWORD *)v27 = v29;
  *(_BYTE *)(v27 + 8) = (_BYTE)v28;
  sub_1000B15F8(v30, v31);
  v32 = a3[10];
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = *(_QWORD *)(a1 + v32);
  *(_QWORD *)(a1 + v32) = *(_QWORD *)(a2 + v32);
  swift_release(v35);
  *(_QWORD *)(v33 + 8) = *(_QWORD *)(v34 + 8);
  v36 = a3[11];
  v37 = a1 + v36;
  v38 = a2 + v36;
  v39 = *(_BYTE *)(v38 + 16);
  v40 = *(_QWORD *)v37;
  v41 = *(_QWORD *)(v37 + 8);
  *(_OWORD *)v37 = *(_OWORD *)v38;
  *(_BYTE *)(v37 + 16) = v39;
  sub_1000BF398(v40, v41);
  v42 = a3[12];
  v43 = a1 + v42;
  v44 = a2 + v42;
  v45 = *(_BYTE *)(v44 + 16);
  v46 = *(_QWORD *)v43;
  v47 = *(_QWORD *)(v43 + 8);
  *(_OWORD *)v43 = *(_OWORD *)v44;
  *(_BYTE *)(v43 + 16) = v45;
  sub_1000BF398(v46, v47);
  v48 = a3[13];
  v49 = (_QWORD *)(a1 + v48);
  v50 = (uint64_t *)(a2 + v48);
  v52 = *v50;
  v51 = v50[1];
  v53 = v49[1];
  *v49 = v52;
  v49[1] = v51;
  swift_release(v53);
  v54 = a3[14];
  v55 = a1 + v54;
  v56 = a2 + v54;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + v54));
  v57 = *(_OWORD *)(v56 + 16);
  *(_OWORD *)v55 = *(_OWORD *)v56;
  *(_OWORD *)(v55 + 16) = v57;
  *(_QWORD *)(v55 + 32) = *(_QWORD *)(v56 + 32);
  v58 = a3[15];
  v59 = (uint64_t *)(a1 + v58);
  v60 = (uint64_t *)(a2 + v58);
  v61 = v60[1];
  v62 = *v59;
  *v59 = *v60;
  swift_unknownObjectRelease(v62);
  v59[1] = v61;
  v63 = a3[16];
  v64 = a1 + v63;
  v65 = a2 + v63;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + v63));
  v66 = *(_OWORD *)(v65 + 16);
  *(_OWORD *)v64 = *(_OWORD *)v65;
  *(_OWORD *)(v64 + 16) = v66;
  *(_QWORD *)(v64 + 32) = *(_QWORD *)(v65 + 32);
  return a1;
}

uint64_t sub_100271560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027156C);
}

uint64_t sub_10027156C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;

  v6 = sub_1000BA294(&qword_100BC3808);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a3[6];
    return _s7Weather24LocationCompositionStateOwet_0(a1 + v8, a2, v7);
  }
  v9 = sub_1000BA294((uint64_t *)&unk_100C09CA0);
  if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v9;
    v8 = a3[8];
    return _s7Weather24LocationCompositionStateOwet_0(a1 + v8, a2, v7);
  }
  v11 = *(_QWORD *)(a1 + a3[13] + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_100271618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100271624);
}

void sub_100271624(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = sub_1000BA294(&qword_100BC3808);
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a4[6];
LABEL_5:
    _s7Weather24LocationCompositionStateOwst_0(a1 + v10, a2, a2, v9);
    return;
  }
  v11 = sub_1000BA294((uint64_t *)&unk_100C09CA0);
  if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == a3)
  {
    v9 = v11;
    v10 = a4[8];
    goto LABEL_5;
  }
  *(_QWORD *)(a1 + a4[13] + 8) = (a2 - 1);
  sub_100079F70();
}

uint64_t sub_1002716C4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AAE688, 1);
}

unint64_t sub_1002716D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD0620;
  if (!qword_100BD0620)
  {
    v1 = sub_100075EB0(&qword_100BD0618);
    sub_100271758();
    sub_10027248C((uint64_t)&unk_100C0A020);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BD0620);
  }
  return result;
}

unint64_t sub_100271758()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD0628;
  if (!qword_100BD0628)
  {
    v1 = sub_100075EB0(&qword_100BD0630);
    sub_1002717DC();
    sub_10027248C((uint64_t)&qword_100BD0660);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BD0628);
  }
  return result;
}

unint64_t sub_1002717DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD0638;
  if (!qword_100BD0638)
  {
    v1 = sub_100075EB0(&qword_100BD0640);
    sub_10027248C((uint64_t)&unk_100BD0648);
    sub_10027248C((uint64_t)&unk_100C0A590);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BD0638);
  }
  return result;
}

unint64_t sub_100271890()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD06F8;
  if (!qword_100BD06F8)
  {
    v1 = sub_100075EB0(&qword_100BD0678);
    sub_10027248C((uint64_t)&unk_100BD0700);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BD06F8);
  }
  return result;
}

void sub_100271918(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  sub_1000BBE9C();
  sub_1000E6F58();
  v2 = sub_1000CD650();
  sub_10026D6E8(v2, v3, a1);
}

unint64_t sub_100271960()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  unint64_t v5;

  result = qword_100BD0710;
  if (!qword_100BD0710)
  {
    v1 = sub_100075EB0(&qword_100BD0690);
    v2 = sub_100075EB0(&qword_100BD0680);
    v4 = sub_100075EB0(&qword_100BD0678);
    v5 = sub_100271890();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.enableForegroundEffects()>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.alert(isPresented:content:)>>, 1);
    sub_10007A100((uint64_t)&qword_100BC6690);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BD0710);
  }
  return result;
}

unint64_t sub_100271A3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD0718;
  if (!qword_100BD0718)
  {
    v1 = sub_100075EB0(&qword_100BD0708);
    sub_100271AC0();
    sub_10027248C((uint64_t)&unk_100BD0838);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BD0718);
  }
  return result;
}

unint64_t sub_100271AC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD0720;
  if (!qword_100BD0720)
  {
    v1 = sub_100075EB0(&qword_100BD0728);
    sub_100271B24();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BD0720);
  }
  return result;
}

unint64_t sub_100271B24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD0730;
  if (!qword_100BD0730)
  {
    v1 = sub_100075EB0(&qword_100BD0738);
    sub_100271BD4((uint64_t)&unk_100BD0740);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BD0730);
  }
  return result;
}

void sub_100271BB0()
{
  sub_100271BD4((uint64_t)&unk_100BD0750);
}

void sub_100271BD4(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  void (*v3)(void);
  void (*v4)(void);
  void (*v5)(void);
  void (*v6)(void);
  uint64_t v7;

  if (!sub_10009987C(a1))
  {
    v5 = v4;
    v6 = v3;
    v7 = sub_100075EB0(v2);
    v6();
    v5();
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v7), v1);
  }
  sub_100099960();
}

unint64_t sub_100271C34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD0760;
  if (!qword_100BD0760)
  {
    v1 = sub_100075EB0(&qword_100BD0768);
    sub_10027248C((uint64_t)&unk_100BD0770);
    sub_10027248C((uint64_t)&unk_100BD0780);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BD0760);
  }
  return result;
}

unint64_t sub_100271CD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD0790;
  if (!qword_100BD0790)
  {
    v1 = sub_100075EB0(&qword_100BD0798);
    sub_10027248C((uint64_t)&unk_100BD07A0);
    sub_10027248C((uint64_t)&unk_100BD07B0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BD0790);
  }
  return result;
}

void sub_100271D7C()
{
  sub_100271BD4((uint64_t)&unk_100BD07C0);
}

unint64_t sub_100271DA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD07D0;
  if (!qword_100BD07D0)
  {
    v1 = sub_100075EB0(&qword_100BD07D8);
    sub_10027248C((uint64_t)&unk_100BD07E0);
    sub_10027248C((uint64_t)&unk_100BD07F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BD07D0);
  }
  return result;
}

unint64_t sub_100271E44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD0800;
  if (!qword_100BD0800)
  {
    v1 = sub_100075EB0(&qword_100BD0808);
    sub_100271EC8();
    sub_10027248C((uint64_t)&unk_100BD0828);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BD0800);
  }
  return result;
}

unint64_t sub_100271EC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD0810;
  if (!qword_100BD0810)
  {
    v1 = sub_100075EB0(&qword_100BD0818);
    sub_10007A100((uint64_t)&unk_100BD0820);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BD0810);
  }
  return result;
}

void sub_100271F50()
{
  sub_100271F6C(sub_10095D81C);
}

void sub_100271F60()
{
  sub_100271F6C((void (*)(uint64_t))sub_10095DBF0);
}

void sub_100271F6C(void (*a1)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;

  sub_1000BBE9C();
  sub_1000E6F58();
  v2 = sub_1000CD650();
  sub_10026E3F4(v2, v3, a1);
  sub_100079F70();
}

void sub_100271FB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000BBE9C() - 8) + 80);
  sub_10026D88C(a1, a2, v2 + ((v5 + 16) & ~v5));
}

void sub_100271FFC()
{
  sub_100272018((uint64_t)&unk_100BD0850);
}

void sub_100272018(uint64_t a1)
{
  unint64_t *v1;
  void (*v2)(void);
  uint64_t *v3;
  uint64_t v4;

  if (!sub_10009987C(a1))
  {
    v4 = sub_1000B4444(0, v3);
    v2();
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4), v1);
  }
  sub_100099960();
}

unint64_t sub_10027206C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD0858;
  if (!qword_100BD0858)
  {
    v1 = sub_100075EB0(&qword_100BD06B0);
    sub_1002720F0();
    sub_10007A100((uint64_t)&qword_100BC6768);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BD0858);
  }
  return result;
}

unint64_t sub_1002720F0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  result = qword_100BD0860;
  if (!qword_100BD0860)
  {
    v1 = sub_100075EB0(&qword_100BD06A8);
    v2 = sub_100075EB0(&qword_100BD0698);
    v4 = sub_100075EB0(&qword_100BD0690);
    v5 = sub_100075EB0(&qword_100BD0708);
    v6 = sub_100271960();
    v7 = sub_100271A3C();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.formSheet<A>(isPresented:content:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_1001CDA94();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BD0860);
  }
  return result;
}

void sub_1002721D8(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_10026D8E0(*(char **)(v1 + 16), *(char **)(v1 + 24), a1);
}

unint64_t sub_1002721E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD0880;
  if (!qword_100BD0880)
  {
    v1 = sub_100075EB0(&qword_100BD06D8);
    sub_100272264();
    sub_10027248C((uint64_t)&qword_100BCCB60);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BD0880);
  }
  return result;
}

unint64_t sub_100272264()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  result = qword_100BD0888;
  if (!qword_100BD0888)
  {
    v1 = sub_100075EB0(&qword_100BD06D0);
    v2 = sub_100075EB0(&qword_100BD06C0);
    v3 = type metadata accessor for LocationPreviewViewContentModel(255);
    sub_100272018((uint64_t)&unk_100BD0848);
    v5 = v4;
    sub_10007A100((uint64_t)&unk_100BD0868);
    v7[0] = v2;
    v7[1] = v3;
    v7[2] = v5;
    v7[3] = v6;
    swift_getOpaqueTypeConformance2(v7, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    sub_10027248C((uint64_t)&unk_100BD0890);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BD0888);
  }
  return result;
}

unint64_t sub_10027236C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD08A8;
  if (!qword_100BD08A8)
  {
    v1 = sub_100075EB0(&qword_100BD08A0);
    sub_10027248C((uint64_t)&unk_100BD08B0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100BD08A8);
  }
  return result;
}

uint64_t sub_1002723E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10026E054(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_1002723F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD08F0;
  if (!qword_100BD08F0)
  {
    v1 = sub_100075EB0(&qword_100BD08E8);
    sub_10027248C((uint64_t)&unk_100BD08F8);
    sub_10027248C((uint64_t)&qword_100BC4B98);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BD08F0);
  }
  return result;
}

void sub_10027248C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  if (!sub_10009987C(a1))
  {
    v3 = sub_1000B4444(0, v2);
    atomic_store(sub_10003BC38(v3), v1);
  }
  sub_10004A298();
}

uint64_t sub_1002724B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10026E4BC(v1[2], v1[3], v1[4], a1);
}

unint64_t sub_1002724C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD0928;
  if (!qword_100BD0928)
  {
    v1 = sub_100075EB0(&qword_100BD0920);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BD0928);
  }
  return result;
}

void sub_100272538()
{
  sub_100271F6C((void (*)(uint64_t))sub_10095DFEC);
}

uint64_t sub_100272548()
{
  return sub_100272574((uint64_t (*)(_QWORD, _QWORD, uint64_t))sub_100270210);
}

uint64_t sub_100272558(uint64_t a1)
{
  return sub_100272680(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t))sub_1002702CC);
}

uint64_t sub_100272568()
{
  return sub_100272574((uint64_t (*)(_QWORD, _QWORD, uint64_t))sub_100270028);
}

uint64_t sub_100272574(uint64_t (*a1)(_QWORD, _QWORD, uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  sub_1000BBE9C();
  sub_100095298();
  return a1(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + v2);
}

uint64_t sub_1002725B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000BBE9C();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_10009DA64();
  v1 = sub_1000BA294(&qword_100BC37E0);
  if (sub_100098814(v1) == 1)
  {
    sub_10009E908();
    v2 = sub_1000C1D78();
    sub_1000987E0(v2);
  }
  else
  {
    sub_1000B4394();
  }
  sub_1000BF114();
  v3 = sub_1000BA294(&qword_100BC37D8);
  if (sub_100098814(v3) == 1)
  {
    v4 = sub_1000C6D94();
    sub_1000987E0(v4);
  }
  else
  {
    sub_1000B4394();
  }
  sub_1000D94C8();
  sub_1000DCC48();
  sub_1001098EC();
  v5 = sub_1000F43CC();
  return sub_1000B4380(v5, v6, v7);
}

uint64_t sub_100272674(uint64_t a1)
{
  return sub_100272680(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t))sub_1002701CC);
}

uint64_t sub_100272680(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  sub_1000BBE9C();
  sub_100095298();
  return a2(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + v4);
}

uint64_t sub_1002726C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;

  sub_1000986AC();
  v1 = sub_1000E6F58();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = sub_10003BCB8();
  switch(sub_100098814(v6))
  {
    case 0u:
      sub_1000992C4();
      goto LABEL_4;
    case 1u:
      sub_1000AE824();
LABEL_4:
      v7 = sub_1000BCF58();
      goto LABEL_5;
    case 2u:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10009BEBC();
      v9 = sub_1000992C4();
      if (sub_10009E638(v9))
        goto LABEL_9;
      v7 = sub_1000E7BE4();
LABEL_5:
      v8(v7);
LABEL_9:
      v10 = sub_1000EAF50();
      sub_1000B2568(v10);
      v11 = sub_1000D097C();
      v12 = sub_10009DA58(v11);
      if (v12 == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v14 = (int *)sub_1000EF98C();
        v15 = v1 + v14[6];
        v16 = sub_10009896C();
        if (!sub_1000B4674())
          sub_1000B4684();
        v17 = sub_1000C2150();
        sub_1000989A0(v17);
        v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
        v18(v1 + v14[8], v16);
        sub_1000C1A2C();
        sub_1000CE558();
        v19 = v15 + *(int *)(sub_1000ECF68() + 24);
        if (!sub_1000B4674())
          v18(v19, v16);
        sub_10009D420(v14[10]);
        sub_10009D420(v14[11]);
        sub_10009D420(v14[12]);
      }
      else if (!v12)
      {
        v13 = sub_10009896C();
        sub_10003BC44(v13);
      }
      return sub_1000BBBC0(v0, v4 + v5, v3 | 7);
    case 3u:
      swift_bridgeObjectRelease();
      goto LABEL_9;
    default:
      goto LABEL_9;
  }
}

void sub_100272850(uint64_t a1)
{
  uint64_t v2;

  sub_1000E6F58();
  sub_1000987F4();
  sub_10026D184(a1, v2);
}

uint64_t sub_10027287C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000BBE9C();
  sub_10009DA64();
  v0 = sub_1000BA294(&qword_100BC37E0);
  if (sub_100098814(v0) == 1)
  {
    sub_10009E908();
    v1 = sub_1000C1D78();
    sub_1000987E0(v1);
  }
  else
  {
    sub_1000B4394();
  }
  sub_1000BF114();
  v2 = sub_1000BA294(&qword_100BC37D8);
  if (sub_100098814(v2) == 1)
  {
    v3 = sub_1000C6D94();
    sub_1000987E0(v3);
  }
  else
  {
    sub_1000B4394();
  }
  sub_1000D94C8();
  sub_1000DCC48();
  sub_1001098EC();
  v4 = sub_1000F43CC();
  return sub_1000B4380(v4, v5, v6);
}

double sub_100272930@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;

  sub_1000BBE9C();
  sub_1000987F4();
  return sub_10026D280(a1, v4, a2);
}

uint64_t sub_100272970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = sub_1000E6F58();
  v2 = *(_QWORD *)(v1 - 8);
  v43 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v43 + 16) & ~v43;
  v4 = *(_QWORD *)(v2 + 64);
  v5 = (int *)sub_1000BBE9C();
  v6 = *((_QWORD *)v5 - 1);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = v3 + v4 + v7;
  v42 = *(_QWORD *)(v6 + 64);
  v9 = sub_1000992C4();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v41 = *(_QWORD *)(v10 + 64);
  v12 = (id *)(v0 + v3);
  sub_10003BCB8();
  switch(swift_getEnumCaseMultiPayload(v12))
  {
    case 0u:
      v13 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
      v14 = (uint64_t)v12;
      goto LABEL_6;
    case 1u:
      v15 = sub_1000AE824();
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v12, v15);
      break;
    case 2u:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 = (uint64_t)v12 + *(int *)(sub_10009BEBC() + 32);
      if (!_s7Weather24LocationCompositionStateOwet_0(v16, 1, v9))
      {
        v13 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
        v14 = v16;
LABEL_6:
        v13(v14, v9);
      }
      break;
    case 3u:
      sub_1000CE558();
      break;
    default:
      break;
  }
  v44 = v10;
  v17 = v8 & ~v7;
  v18 = (char *)v12 + *(int *)(v1 + 32);
  v19 = type metadata accessor for WeatherConditionBackgroundModel(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  v20 = (char *)v12 + *(int *)(v1 + 36);
  v21 = type metadata accessor for LocationPreviewModalViewModel(0);
  v22 = sub_1000952AC(v21);
  if (v22 == 1)
  {
    v40 = v9;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v24 = (int *)sub_1000EF98C();
    v25 = &v20[v24[6]];
    v26 = sub_10009896C();
    if (!sub_1000D0C5C())
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
    v27 = &v20[v24[7]];
    v28 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
    v29 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8);
    v29(&v20[v24[8]], v26);
    v30 = &v20[v24[9]];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31 = &v30[*(int *)(sub_1000ECF68() + 24)];
    if (!sub_1000D0C5C())
      v29(v31, v26);
    sub_1000DB25C(v24[10]);
    sub_1000DB25C(v24[11]);
    sub_1000DB25C(v24[12]);
    v9 = v40;
  }
  else if (!v22)
  {
    v23 = sub_10009896C();
    sub_1000B2568(v23);
  }
  v32 = v0 + v17;
  swift_release(*(_QWORD *)(v0 + v17 + 16));
  v33 = sub_1000BA294(&qword_100BC37E0);
  if (sub_1000952AC(v33) == 1)
  {
    sub_10009E908();
    v34 = sub_100099998();
    sub_1000B2568(v34);
  }
  else
  {
    sub_1000F3F48();
  }
  sub_1000993DC(v5[7]);
  v35 = sub_1000BA294(&qword_100BC37D8);
  if (sub_1000952AC(v35) == 1)
  {
    v36 = sub_1000C6D94();
    sub_1000B2568(v36);
  }
  else
  {
    sub_1000F3F48();
  }
  v37 = v43 | v7 | v11 | 7;
  v38 = (v17 + v42 + v11) & ~v11;
  sub_1000993DC(v5[9]);
  swift_release(*(_QWORD *)(v32 + v5[10]));
  sub_1000C0D6C(v5[11]);
  sub_1000C0D6C(v5[12]);
  swift_release(*(_QWORD *)(v32 + v5[13] + 8));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v32 + v5[14]));
  swift_unknownObjectRelease(*(_QWORD *)(v32 + v5[15]));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v32 + v5[16]));
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v0 + v38, v9);
  return swift_deallocObject(v0, v38 + v41, v37);
}

void sub_100272D04()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(sub_1000E6F58() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(sub_1000BBE9C() - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000992C4() - 8) + 80);
  sub_10026E8F8(v0 + v2, v0 + v5, v0 + ((v5 + v6 + v7) & ~v7));
  sub_100079F70();
}

unint64_t sub_100272D7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD09F0;
  if (!qword_100BD09F0)
  {
    v1 = sub_100075EB0(&qword_100BD09F8);
    sub_1002716D4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BD09F0);
  }
  return result;
}

uint64_t sub_100272DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int EnumCaseMultiPayload;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;

  v150 = a3;
  v147 = a1;
  v148 = a2;
  v5 = type metadata accessor for Location(0);
  v145 = *(_QWORD *)(v5 - 8);
  v146 = v5;
  __chkstk_darwin(v5);
  sub_100088FDC();
  v144 = v6;
  sub_1000BA294(&qword_100BC5F60);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100098728();
  v10 = v9 - v8;
  sub_1000BA294(&qword_100BC5F88);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100088FDC();
  v152 = v12;
  sub_1000BA294(&qword_100BC5F90);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  sub_100088FDC();
  v151 = v14;
  sub_1000BA294(&qword_100BC5F98);
  sub_1000B42B0();
  __chkstk_darwin(v15);
  sub_100088FDC();
  v149 = v16;
  sub_1000BA294(&qword_100BC5FA0);
  sub_1000B42B0();
  __chkstk_darwin(v17);
  sub_100088FDC();
  v19 = v18;
  sub_1000BA294(&qword_100BC5FA8);
  sub_1000B42B0();
  __chkstk_darwin(v20);
  sub_100088FDC();
  v22 = v21;
  sub_1000BA294(&qword_100BC5FB0);
  sub_1000B42B0();
  __chkstk_darwin(v23);
  sub_100098728();
  v26 = v25 - v24;
  sub_1000BA294(&qword_100BC3660);
  sub_1000B42B0();
  v28 = __chkstk_darwin(v27);
  v30 = (char *)&v142 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v32 = (char *)&v142 - v31;
  v33 = type metadata accessor for DebugAction(0);
  sub_1000B42B0();
  __chkstk_darwin(v34);
  sub_100098728();
  v37 = v36 - v35;
  sub_100273434(a4, v36 - v35);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v37, v33);
  if (!EnumCaseMultiPayload)
  {
    v73 = (uint64_t *)(v37 + *(int *)(sub_1000BA294(&qword_100BD0A98) + 48));
    v74 = *v73;
    v145 = v73[1];
    v146 = v74;
    sub_100273478(v37, (uint64_t)v32);
    v75 = sub_1000C08E4();
    v76 = sub_1000C2648(v75);
    v143 = v22;
    v79 = sub_1000C266C(v76, v77, v78, v76);
    v80 = v19;
    v83 = sub_1000C3728(v79, v81, v82, v79);
    v84 = v149;
    v87 = sub_1000B4458(v149, v85, v86, v83);
    v88 = v151;
    v91 = sub_1000CC9E4(v151, v89, v90, v87);
    v92 = v152;
    _s7Weather24LocationCompositionStateOwst_0(v152, 1, 1, v91);
    v93 = sub_1000C52A4();
    sub_10009D34C(v10, v94, v95, v93);
    v96 = v148;
    v153 = v148;
    sub_10008046C((uint64_t)v32, (uint64_t)v30);
    swift_bridgeObjectRetain(v96);
    sub_10016B618();
    v97 = v153;
    v98 = v143;
    v70 = sub_10009D358(0, 3, v26, v143, v80, v99, v100, v101, v84, v88, v92, v10, 0, 0, 0, 0, v147 & 1, v153, 0,
            v150);
    swift_bridgeObjectRelease(v97);
    v103 = sub_1000C13A0(v102, &qword_100BC5F60);
    v104 = sub_1000D168C(v103, &qword_100BC5F88);
    sub_1000D9C20(v104, &qword_100BC5F90);
    sub_100021A68(v84, &qword_100BC5F98);
    sub_100021A68(v80, &qword_100BC5FA0);
    sub_100021A68(v98, &qword_100BC5FA8);
    sub_100021A68(v26, &qword_100BC5FB0);
    v105 = &qword_100BC3660;
    v106 = (uint64_t)v32;
LABEL_6:
    sub_100021A68(v106, v105);
    return v70;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v107 = sub_1000C08E4();
    v108 = sub_1000C2648(v107);
    v111 = sub_1000C266C(v108, v109, v110, v108);
    v112 = v19;
    v115 = sub_1000C3728(v111, v113, v114, v111);
    v116 = v149;
    v119 = sub_1000B4458(v149, v117, v118, v115);
    v120 = v151;
    v123 = sub_1000CC9E4(v151, v121, v122, v119);
    sub_1000B4698(v123);
    v124 = sub_1000C52A4();
    sub_10009D34C(v10, v125, v126, v124);
    v127 = v148;
    v128 = (v147 & 1) == 0;
    swift_bridgeObjectRetain(v148);
    v141 = v150;
    v129 = sub_1000E6F60();
    v70 = sub_10009D358(v129, v130, v131, v132, v112, v133, v134, v135, v116, v120, v37, v10, 0, 0, 0, 0, v128, v127, 0,
            v141);
    swift_bridgeObjectRelease(v127);
    sub_1000C13A0(v136, &qword_100BC5F60);
    v137 = sub_100021A68(v37, &qword_100BC5F88);
    sub_1000D168C(v137, &qword_100BC5F90);
    sub_100021A68(v116, &qword_100BC5F98);
    v138 = sub_100021A68(v112, &qword_100BC5FA0);
    sub_1000D9C20(v138, &qword_100BC5FA8);
    v105 = &qword_100BC5FB0;
    v106 = v26;
    goto LABEL_6;
  }
  v39 = v144;
  v40 = v145;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v145 + 32))(v144, v37, v146);
  v41 = sub_1000C08E4();
  v42 = sub_1000C2648(v41);
  v45 = sub_1000C266C(v42, v43, v44, v42);
  v46 = v19;
  v49 = sub_1000C3728(v45, v47, v48, v45);
  v50 = v149;
  v53 = sub_1000B4458(v149, v51, v52, v49);
  v54 = v151;
  v57 = sub_1000CC9E4(v151, v55, v56, v53);
  sub_1000B4698(v57);
  v58 = v146;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v10, v39, v146);
  v59 = type metadata accessor for PreviewLocation(0);
  swift_storeEnumTagMultiPayload(v10, v59, 0);
  v60 = v10 + *(int *)(type metadata accessor for LocationPreviewViewState(0) + 20);
  v61 = type metadata accessor for LocationPreviewModalViewState(0);
  swift_storeEnumTagMultiPayload(v60, v61, 9);
  v62 = sub_1000C52A4();
  swift_storeEnumTagMultiPayload(v10, v62, 0);
  _s7Weather24LocationCompositionStateOwst_0(v10, 0, 1, v62);
  v140 = v150;
  v63 = sub_1000E6F60();
  v70 = sub_10009D358(v63, v64, v65, v66, v46, v67, v68, v69, v50, v54, v37, v10, 0, 0, 0, 0, 0, 0, 0, v140);
  sub_1000C13A0(v70, &qword_100BC5F60);
  v71 = sub_100021A68(v37, &qword_100BC5F88);
  sub_1000D168C(v71, &qword_100BC5F90);
  sub_100021A68(v50, &qword_100BC5F98);
  v72 = sub_100021A68(v46, &qword_100BC5FA0);
  sub_1000D9C20(v72, &qword_100BC5FA8);
  sub_100021A68(v26, &qword_100BC5FB0);
  (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v39, v58);
  return v70;
}

uint64_t sub_100273434(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DebugAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100273478(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BC3660);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002734C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  void (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  char v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  BOOL v113;
  char v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t (*v122)(uint64_t, _QWORD);
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t (*v126)(uint64_t, uint64_t, _QWORD);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t (*v134)(uint64_t, _QWORD);
  uint64_t v135;
  uint64_t v136;
  uint64_t (*v137)(uint64_t, uint64_t, _QWORD);
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 *v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v147;
  int *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _OWORD v177[2];
  __int128 v178;
  _OWORD v179[2];
  __int128 v180;
  _BYTE v181[8];
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;

  v6 = type metadata accessor for MidpointInterpolator.InterpolationMode(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100099234();
  v156 = sub_1000BA294(&qword_100BD0D30);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100079FBC();
  sub_1000BA294(&qword_100BCB9F0);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_10009883C();
  v12 = v10 - v11;
  __chkstk_darwin(v13);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v14);
  v16 = sub_1000987B4((uint64_t)&v147 - v15);
  v164 = type metadata accessor for WeatherChanges(v16);
  v17 = *(_QWORD *)(v164 - 8);
  __chkstk_darwin(v164);
  sub_100088FDC();
  sub_10009511C(v18);
  v159 = sub_1000BA294(&qword_100BD0D38);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  sub_100088FDC();
  sub_10009511C(v20);
  sub_1000BA294(&qword_100BCCC48);
  sub_1000B42B0();
  __chkstk_darwin(v21);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v22);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v23);
  sub_100079F7C();
  v25 = sub_1000987B4(v24);
  v169 = type metadata accessor for DetailChartSelection(v25);
  sub_1000B42B0();
  __chkstk_darwin(v26);
  sub_100088FDC();
  sub_10009511C(v27);
  v165 = sub_1000BA294(&qword_100BD0D40);
  sub_1000B42B0();
  __chkstk_darwin(v28);
  sub_100088FDC();
  v170 = (_QWORD *)v29;
  sub_1000BA294(&qword_100BD0B58);
  sub_1000B42B0();
  __chkstk_darwin(v30);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v31);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v32);
  sub_100079F7C();
  sub_10009511C(v33);
  v175 = sub_1000BA294(&qword_100BCE378);
  v173 = *(_QWORD *)(v175 - 8);
  sub_10009D98C();
  __chkstk_darwin(v34);
  sub_100088FDC();
  v171 = v35;
  v36 = sub_1000BA294(&qword_100BD0D48);
  sub_1000B42B0();
  __chkstk_darwin(v37);
  sub_100088FDC();
  v174 = v38;
  sub_1000BA294(&qword_100BCE370);
  sub_1000B42B0();
  __chkstk_darwin(v39);
  sub_1000986FC();
  v172 = v40;
  sub_10009D2A4();
  v42 = __chkstk_darwin(v41);
  v44 = (char *)&v147 - v43;
  __chkstk_darwin(v42);
  sub_100079F7C();
  v176 = v45;
  if ((static Date.== infix(_:_:)(a1, a2) & 1) == 0)
    goto LABEL_65;
  v152 = v17;
  v151 = v12;
  v149 = v3;
  v150 = v7;
  v153 = v2;
  v154 = v6;
  v46 = (int *)sub_1000F40BC();
  v47 = v46[5];
  v48 = a1 + v47;
  v49 = a2;
  v155 = a1;
  v50 = a2 + v47;
  v51 = type metadata accessor for HourWeather(0);
  sub_10011DB38(&qword_100BD0C50);
  v53 = v52;
  sub_10011DB38(&qword_100BD0C58);
  v55 = v54;
  sub_10011DB38(&qword_100BD0C60);
  if ((static Forecast.== infix(_:_:)(v48, v50, v51, v53, v55, v56) & 1) == 0)
    goto LABEL_65;
  v57 = v155;
  v58 = v176;
  sub_1000CE570(v155 + v46[6], v176);
  sub_1000CE570(v49 + v46[6], (uint64_t)v44);
  v59 = v174;
  v60 = v174 + *(int *)(v36 + 48);
  sub_1000CE570(v58, v174);
  sub_1000CE570((uint64_t)v44, v60);
  v61 = v175;
  sub_100088FC8(v59, 1, v175);
  v62 = v49;
  if (v64)
  {
    sub_100075DD0((uint64_t)v44);
    sub_100075DD0(v58);
    sub_100088FC8(v60, 1, v61);
    if (v64)
    {
      sub_100021A14(v59, &qword_100BCE370);
      goto LABEL_14;
    }
LABEL_11:
    v65 = &qword_100BD0D48;
    v66 = v59;
LABEL_12:
    sub_100021A14(v66, v65);
    goto LABEL_65;
  }
  v63 = v172;
  sub_100037768(v59, v172, &qword_100BCE370);
  sub_100088FC8(v60, 1, v61);
  if (v64)
  {
    sub_100075DD0((uint64_t)v44);
    sub_100075DD0(v58);
    (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v63, v61);
    goto LABEL_11;
  }
  v67 = v173;
  v68 = v57;
  v69 = v62;
  v70 = v171;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v173 + 32))(v171, v60, v61);
  sub_10003D2DC(&qword_100BD0D60, &qword_100BCE378);
  v148 = v46;
  v72 = dispatch thunk of static Equatable.== infix(_:_:)(v63, v70, v61, v71);
  v73 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
  v74 = v70;
  v62 = v69;
  v57 = v68;
  v73(v74, v61);
  sub_100099298((uint64_t)v44);
  sub_100099298(v176);
  v73(v63, v61);
  v46 = v148;
  sub_100099298(v59);
  if ((v72 & 1) == 0)
    goto LABEL_65;
LABEL_14:
  sub_10094982C();
  if ((v75 & 1) == 0)
    goto LABEL_65;
  v76 = sub_1000BDC98(v46[8]);
  if ((static DetailCondition.== infix(_:_:)(v76) & 1) == 0)
    goto LABEL_65;
  v77 = sub_1000BDC98(v46[9]);
  if ((sub_10068A5B8(v77, v78) & 1) == 0)
    goto LABEL_65;
  if ((sub_100117380(v46[10]) & 1) == 0)
    goto LABEL_65;
  if (*(unsigned __int8 *)(v57 + v46[11]) != *(unsigned __int8 *)(v62 + v46[11]))
    goto LABEL_65;
  if ((sub_100117380(v46[12]) & 1) == 0)
    goto LABEL_65;
  v79 = sub_1000BDC98(v46[13]);
  if ((static Location.== infix(_:_:)(v79, v80) & 1) == 0)
    goto LABEL_65;
  v81 = sub_1000BDC98(v46[14]);
  if ((static Locale.== infix(_:_:)(v81, v82) & 1) == 0)
    goto LABEL_65;
  v83 = sub_1000BDC98(v46[15]);
  if ((static DayWeather.== infix(_:_:)(v83) & 1) == 0)
    goto LABEL_65;
  v84 = sub_1000BDC98(v46[16]);
  if ((static CurrentWeather.== infix(_:_:)(v84, v85) & 1) == 0)
    goto LABEL_65;
  v86 = v46[17];
  v87 = v57 + v86;
  v88 = v62 + v86;
  v89 = sub_1000DB264();
  sub_1000DF514(&qword_100BD0C78);
  v91 = v90;
  sub_1000DF514(&qword_100BD0C80);
  v93 = v92;
  sub_1000DF514(&qword_100BD0C88);
  if ((static Forecast.== infix(_:_:)(v87, v88, v89, v91, v93, v94) & 1) == 0)
    goto LABEL_65;
  sub_1000FAF2C((uint64_t *)(v57 + v46[18]), (uint64_t *)(v62 + v46[18]));
  if ((v95 & 1) == 0 || (sub_1000FA3BC(v57 + v46[19], v62 + v46[19]) & 1) == 0)
    goto LABEL_65;
  v96 = v168;
  sub_1000BCF38(v57 + v46[20], v168);
  v97 = v167;
  sub_1000BCF38(v62 + v46[20], v167);
  v98 = v170;
  v99 = (uint64_t)v170 + *(int *)(v165 + 48);
  sub_1000BCF38(v96, (uint64_t)v170);
  sub_1000BCF38(v97, v99);
  v100 = sub_10003BD0C();
  sub_100088FC8(v100, v101, v169);
  if (v64)
  {
    sub_1000C5C00((uint64_t)&v187);
    sub_1000C5C00((uint64_t)&v188);
    sub_100088FC8(v99, 1, v169);
    if (v64)
    {
      sub_100021A14((uint64_t)v170, &qword_100BD0B58);
      goto LABEL_37;
    }
    goto LABEL_35;
  }
  sub_1000993EC((uint64_t)v170, &qword_100BD0B58, (uint64_t)&v186);
  sub_100088FC8(v99, 1, v169);
  if (v102)
  {
    sub_1000D1178((uint64_t)&v187);
    sub_1000D1178((uint64_t)&v188);
    sub_1000B30B8(type metadata accessor for DetailChartSelection, (uint64_t)&v186);
LABEL_35:
    v65 = &qword_100BD0D40;
    v66 = (uint64_t)v170;
    goto LABEL_12;
  }
  sub_100280E04();
  sub_10007802C(v103, v104, type metadata accessor for DetailChartSelection);
  v105 = v166;
  sub_1005BC3B4(v166, v98);
  v107 = v106;
  sub_10009EFA8((uint64_t)v98);
  sub_1000C0114((uint64_t)&v187);
  sub_1000C0114((uint64_t)&v188);
  sub_10009EFA8((uint64_t)v105);
  sub_100021A14((uint64_t)v170, &qword_100BD0B58);
  if ((v107 & 1) == 0)
    goto LABEL_65;
LABEL_37:
  v108 = v46[21];
  v109 = *(_QWORD *)(v57 + v108);
  v110 = *(_QWORD *)(v57 + v108 + 8);
  v111 = (_QWORD *)(v62 + v108);
  v112 = v111[1];
  v113 = v109 == *v111 && v110 == v112;
  if (v113
    || (v114 = _stringCompareWithSmolCheck(_:_:expecting:)(v109, v110, *v111, v112, 0), v115 = 0, (v114 & 1) != 0))
  {
    v116 = v162;
    sub_1000BCF38(v57 + v46[22], v162);
    v117 = v161;
    sub_1000BCF38(v62 + v46[22], v161);
    v118 = v163 + *(int *)(v159 + 48);
    sub_1000BCF38(v116, v163);
    sub_1000BCF38(v117, v118);
    v119 = sub_10003BD0C();
    sub_100088FC8(v119, v120, v164);
    if (v64)
    {
      sub_1000C5C00((uint64_t)&v183);
      sub_1000C5C00((uint64_t)&v184);
      sub_100088FC8(v118, 1, v164);
      if (v64)
      {
        sub_100021A14(v163, &qword_100BCCC48);
LABEL_52:
        v128 = v158;
        sub_1000BCF38(v57 + v46[23], v158);
        v129 = v157;
        sub_1000BCF38(v62 + v46[23], v157);
        v130 = v153 + *(int *)(v156 + 48);
        sub_1000BCF38(v128, v153);
        sub_1000BCF38(v129, v130);
        v131 = sub_10003BD0C();
        sub_100088FC8(v131, v132, v154);
        if (v64)
        {
          sub_1000C5C00((uint64_t)&v180 + 8);
          sub_1000C5C00((uint64_t)v181);
          sub_100088FC8(v130, 1, v154);
          if (v64)
          {
            sub_100021A14(v153, &qword_100BCB9F0);
            goto LABEL_63;
          }
        }
        else
        {
          sub_1000993EC(v153, &qword_100BCB9F0, (uint64_t)&v178);
          sub_100088FC8(v130, 1, v154);
          if (!v133)
          {
            v135 = sub_1000DF508();
            sub_10009DECC(v135, v136, v137);
            sub_10000F1C8(&qword_100BD0D50, (uint64_t (*)(uint64_t))&type metadata accessor for MidpointInterpolator.InterpolationMode);
            sub_1000D098C(v138, (uint64_t)&v178);
            sub_1000BD9B4();
            sub_1000C5C00((uint64_t)&v180 + 8);
            sub_1000C5C00((uint64_t)v181);
            sub_1000F3F50();
            sub_1000C5C00((uint64_t)v179);
            if ((v130 & 1) != 0)
            {
LABEL_63:
              v139 = v46[24];
              v140 = *(_OWORD *)(v57 + v139 + 16);
              v177[0] = *(_OWORD *)(v57 + v139);
              v177[1] = v140;
              v141 = *(_OWORD *)(v57 + v139 + 32);
              v142 = (__int128 *)(v62 + v139);
              v143 = *v142;
              v144 = v142[1];
              v178 = v141;
              v179[0] = v143;
              v145 = v142[2];
              v179[1] = v144;
              v180 = v145;
              if ((sub_10009A7F8((uint64_t)v177, (id *)v179) & 1) != 0
                && *(unsigned __int8 *)(v57 + v46[25]) == *(unsigned __int8 *)(v62 + v46[25]))
              {
                v115 = *(_BYTE *)(v57 + v46[26]) ^ *(_BYTE *)(v62 + v46[26]) ^ 1;
                return v115 & 1;
              }
            }
LABEL_65:
            v115 = 0;
            return v115 & 1;
          }
          sub_1000D1178((uint64_t)&v180 + 8);
          sub_1000D1178((uint64_t)v181);
          sub_1000988C4();
          sub_100094F10(v151, v134);
        }
        v65 = &qword_100BD0D30;
        v123 = (uint64_t *)v179;
        goto LABEL_61;
      }
    }
    else
    {
      sub_1000993EC(v163, &qword_100BCCC48, (uint64_t)&v182);
      sub_100088FC8(v118, 1, v164);
      if (!v121)
      {
        v124 = sub_1000DF508();
        sub_10009DECC(v124, v125, v126);
        sub_10000F1C8(&qword_100BD0D58, (uint64_t (*)(uint64_t))&type metadata accessor for WeatherChanges);
        sub_1000D098C(v127, (uint64_t)&v182);
        sub_1000BD9B4();
        sub_1000C5C00((uint64_t)&v183);
        sub_1000C5C00((uint64_t)&v184);
        sub_1000F3F50();
        sub_1000C5C00((uint64_t)&v185);
        if ((v118 & 1) == 0)
          goto LABEL_65;
        goto LABEL_52;
      }
      sub_1000D1178((uint64_t)&v183);
      sub_1000D1178((uint64_t)&v184);
      sub_1000988C4();
      sub_100094F10(v160, v122);
    }
    v65 = &qword_100BD0D38;
    v123 = &v185;
LABEL_61:
    v66 = *(v123 - 32);
    goto LABEL_12;
  }
  return v115 & 1;
}

