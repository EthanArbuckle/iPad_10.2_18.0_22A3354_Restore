void SnowfallAmount.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];

  sub_100099310();
  sub_1000DA9E8();
  sub_100098BB4();
  __chkstk_darwin(v3);
  v15[0] = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v5);
  v15[1] = (char *)v15 - v6;
  sub_10009D2A4();
  __chkstk_darwin(v7);
  v15[2] = (char *)v15 - v8;
  sub_10009D2A4();
  __chkstk_darwin(v9);
  sub_1000B3B34();
  __chkstk_darwin(v10);
  sub_1000F3FD8();
  __chkstk_darwin(v11);
  sub_1006BA0CC();
  SnowfallAmount.amount.getter();
  sub_1006B9C10();
  v12 = sub_1006B915C();
  if (!v0)
  {
    SnowfallAmount.maximum.getter(v12);
    sub_1006B9140();
    v13 = sub_1000D1880(v1);
    SnowfallAmount.minimum.getter(v13);
    sub_1006B9140();
    v14 = sub_1000D1880(v2);
    SnowfallAmount.amountLiquidEquivalent.getter(v14);
    sub_1001092AC();
    sub_1006B9128();
    sub_1006BA378();
    SnowfallAmount.maximumLiquidEquivalent.getter();
    sub_1001092AC();
    sub_1006B9128();
    sub_1006BA378();
    SnowfallAmount.minimumLiquidEquivalent.getter();
    sub_1001092AC();
    sub_1006B9128();
  }
  sub_1006B95F8();
  sub_1000B44B0();
}

void static PrecipitationShift.read(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  sub_100110560();
  a17 = v21;
  a18 = v22;
  v23 = sub_1000C0C34();
  type metadata accessor for PrecipitationShift.Kind(v23);
  sub_1000B42B0();
  __chkstk_darwin(v24);
  sub_100079FBC();
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v25);
  sub_1000C0CD0();
  __chkstk_darwin(v26);
  v28 = (char *)&a9 - v27;
  sub_100098778();
  sub_1006BA3FC();
  if (!v18)
  {
    sub_1006BA3FC();
    v29 = sub_1000DAFE4();
    static PrecipitationShift.Kind.read(from:)(v29);
    PrecipitationShift.init(date:nextDate:kind:)(v28, v20, v19);
  }
  sub_1000C60F8();
}

void PrecipitationShift.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;

  sub_100099310();
  v16 = type metadata accessor for PrecipitationShift.Kind(0);
  sub_10009D98C();
  __chkstk_darwin(v1);
  sub_100079FBC();
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_10009DF40();
  v4 = __chkstk_darwin(v3);
  PrecipitationShift.date.getter(v4);
  v5 = sub_1000890B8();
  sub_1000DB348(v5, v6, v7);
  v8 = sub_1000DF794();
  sub_1005E5ABC(v8, v9);
  if (!v0)
  {
    PrecipitationShift.nextDate.getter();
    v10 = sub_1000890B8();
    v13 = sub_1000DB348(v10, v11, v12);
    sub_1006B9C28(v13, (uint64_t)&unk_100BD35A0);
    sub_1006BA8E0();
    PrecipitationShift.kind.getter();
    PrecipitationShift.Kind.write(to:)();
    v14 = sub_1006BA924();
    v15(v14, v16);
  }
  sub_1006B93E0();
  sub_1000B44B0();
}

void static PrecipitationShift.Kind.read(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  sub_1000C1780(a1);
  if (!v1)
  {
    switch(v8)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
LABEL_4:
        v2 = sub_10011E00C();
        v3 = type metadata accessor for PrecipitationShift.Kind(v2);
        sub_1000C229C(v3);
        break;
      default:
        switch(v8)
        {
          case 'A':
          case 'B':
          case 'C':
          case 'D':
          case 'E':
          case 'F':
          case 'G':
          case 'H':
          case 'I':
          case 'J':
          case 'K':
          case 'L':
          case 'M':
          case 'N':
          case 'O':
          case 'P':
          case 'Q':
          case 'R':
          case 'S':
          case 'T':
          case 'U':
          case 'V':
          case 'W':
          case 'X':
          case 'Y':
          case 'Z':
          case '[':
          case '\\':
          case ']':
          case '^':
          case '_':
          case 'a':
          case 'b':
          case 'c':
          case 'd':
          case 'e':
            goto LABEL_4;
          default:
            sub_1000C56E0();
            sub_10007A100((uint64_t)&qword_100BF4CC0);
            v5 = sub_1000BC670(v4);
            v7 = sub_1000D0A50(v5, v6);
            sub_1000C3D70(v7, enum case for BinaryDecoder.Error.valueNotSupported(_:));
            sub_1000C2294();
            break;
        }
        break;
    }
  }
  sub_1000C1348();
}

void PrecipitationShift.Kind.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v0 = sub_1000DC28C();
  type metadata accessor for PrecipitationShift.Kind(v0);
  sub_10009D5D4();
  __chkstk_darwin(v1);
  sub_1000C57E0(v2, v4);
  v3 = sub_1000FDC00();
  if (v3 == enum case for PrecipitationShift.Kind.possibleDrizzle(_:)
    || v3 == enum case for PrecipitationShift.Kind.possibleDrizzleStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.possibleDrizzleStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.possibleDrizzleStartStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.possibleDrizzleStopStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.drizzle(_:)
    || v3 == enum case for PrecipitationShift.Kind.drizzleStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.drizzleStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.drizzleStartStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.drizzleStopStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.rain(_:)
    || v3 == enum case for PrecipitationShift.Kind.rainStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.rainStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.rainStartStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.rainStopStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavyRain(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavyRainStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavyRainStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavyRainStopStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavyRainStartStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.drizzleToHeavyRain(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavyRainToDrizzle(_:)
    || v3 == enum case for PrecipitationShift.Kind.rainToHeavyRain(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavyRainToRain(_:)
    || v3 == enum case for PrecipitationShift.Kind.drizzleToHeavyRainStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavyRainToDrizzleStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.rainToHeavyRainStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavyRainToRainStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.drizzleToHeavyRainStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavyRainToDrizzleStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.rainToHeavyRainStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavyRainToRainStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.drizzleToHeavyRainStartStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavyRainToDrizzleStartStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.rainToHeavyRainStartStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavyRainToRainStartStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.drizzleToHeavyRainStopStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavyRainToDrizzleStopStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.rainToHeavyRainStopStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavyRainToRainStopStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.possibleFlurries(_:)
    || v3 == enum case for PrecipitationShift.Kind.possibleFlurriesStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.possibleFlurriesStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.possibleFlurriesStartStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.possibleFlurriesStopStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.flurries(_:)
    || v3 == enum case for PrecipitationShift.Kind.flurriesStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.flurriesStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.flurriesStartStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.flurriesStopStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.snow(_:)
    || v3 == enum case for PrecipitationShift.Kind.snowStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.snowStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.snowStartStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.snowStopStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavySnow(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavySnowStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavySnowStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavySnowStopStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavySnowStartStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.flurriesToHeavySnow(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavySnowToFlurries(_:)
    || v3 == enum case for PrecipitationShift.Kind.snowToHeavySnow(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavySnowToSnow(_:)
    || v3 == enum case for PrecipitationShift.Kind.flurriesToHeavySnowStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavySnowToFlurriesStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.snowToHeavySnowStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavySnowToSnowStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.flurriesToHeavySnowStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavySnowToFlurriesStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.snowToHeavySnowStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavySnowToSnowStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.flurriesToHeavySnowStartStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavySnowToFlurriesStartStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.snowToHeavySnowStartStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavySnowToSnowStartStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.flurriesToHeavySnowStopStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavySnowToFlurriesStopStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.snowToHeavySnowStopStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.heavySnowToSnowStopStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.possibleSleet(_:)
    || v3 == enum case for PrecipitationShift.Kind.possibleSleetStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.possibleSleetStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.possibleSleetStartStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.possibleSleetStopStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.sleet(_:)
    || v3 == enum case for PrecipitationShift.Kind.sleetStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.sleetStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.sleetStartStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.sleetStopStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.possibleHail(_:)
    || v3 == enum case for PrecipitationShift.Kind.possibleHailStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.possibleHailStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.possibleHailStartStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.possibleHailStopStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.hail(_:)
    || v3 == enum case for PrecipitationShift.Kind.hailStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.hailStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.hailStartStop(_:)
    || v3 == enum case for PrecipitationShift.Kind.hailStopStart(_:)
    || v3 == enum case for PrecipitationShift.Kind.clear(_:))
  {
    sub_100098F20();
    sub_1000D9830();
  }
  else
  {
    sub_1000F4288();
    __break(1u);
  }
}

void sub_1006A6FE4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_1006A718C(a1);
  if (!v2)
  {
    v4 = v17;
    v5 = v18;
    v6 = v19;
    v7 = v20;
    v8 = v21;
    v28 = v22;
    v14 = v24;
    v15 = v23;
    v12 = v26;
    v13 = v25;
    v11 = v27;
    v9 = sub_1000DA104();
    *a2 = v16;
    a2[1] = v4;
    a2[2] = v5;
    a2[3] = v6;
    a2[4] = v7;
    a2[5] = v8;
    a2[6] = v28;
    a2[7] = v15;
    a2[8] = v14;
    a2[9] = v13;
    a2[10] = v12;
    a2[11] = v11;
    a2[12] = v9;
    a2[13] = v10;
  }
}

void sub_1006A70C4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[5];
  v7 = v1[6];
  v8 = v1[7];
  v9 = v1[9];
  v14 = v1[10];
  v15 = v1[8];
  v13 = v1[11];
  String.write(to:)(a1, *v1, v1[1]);
  if (!v2)
  {
    String.write(to:)(a1, v4, v5);
    v10 = sub_1000DF794();
    String.write(to:)(v10, v11, v6);
    String.write(to:)(a1, v7, v8);
    String.write(to:)(a1, v15, v9);
    v12 = String.write(to:)(a1, v14, v13);
    sub_1000B31A8(v12, v1[12], v1[13]);
  }
  sub_1006B9564();
}

void sub_1006A718C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = sub_1006BA5DC(a1);
  if (!v1)
  {
    v5 = v3;
    v6 = v4;
    v7 = sub_1000DA104();
    v9 = v8;
    v10 = sub_1000DA104();
    v12 = v11;
    v18 = sub_1000DA104();
    v19 = v13;
    sub_1000DA104();
    sub_1000DA104();
    *v2 = v5;
    v2[1] = v6;
    v2[2] = v7;
    v2[3] = v9;
    v2[4] = v10;
    v2[5] = v12;
    v2[6] = v18;
    v2[7] = v19;
    sub_1006BA748();
    v2[8] = v15;
    v2[9] = v14;
    v2[10] = v16;
    v2[11] = v17;
  }
}

uint64_t sub_1006A72C8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1000B2F80(a1);
  if (!v2)
  {
    v4 = sub_1000B31A8(result, v1[2], v1[3]);
    v5 = sub_1000B31A8(v4, v1[4], v1[5]);
    v6 = sub_1000B31A8(v5, v1[6], v1[7]);
    v7 = sub_1000B31A8(v6, v1[8], v1[9]);
    return sub_1000B31A8(v7, v1[10], v1[11]);
  }
  return result;
}

void static PressureTrend.read(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_1006ADD7C(a1, (uint64_t)&enum case for PressureTrend.rising(_:), (uint64_t)&type metadata accessor for PressureTrend, (uint64_t)&enum case for PressureTrend.falling(_:), (uint64_t)&enum case for PressureTrend.steady(_:), a6, a7, a8, vars0, vars8, SWORD2(vars8), SBYTE6(vars8), SHIBYTE(vars8));
}

#error "1006A737C: call analysis failed (funcsize=13)"

void static ProviderAttribution.read(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000BA294(&qword_100BD4280);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_1000B301C();
  if (!v1)
  {
    v4 = sub_10009896C();
    sub_10009F80C(a1, v4);
    v5 = sub_1006B9E28();
    ProviderAttribution.init(name:logoURL:)(v5);
  }
  sub_1006BA61C();
  sub_1000D9830();
}

void ProviderAttribution.write(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;

  sub_1000BA294(&qword_100BD4280);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100098694();
  v4 = ProviderAttribution.name.getter();
  sub_1000E7D08(a1, v4, v5);
  if (v1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = swift_bridgeObjectRelease();
    ProviderAttribution.logoURL.getter(v6);
    v7 = sub_10009BD8C();
    sub_10009E498(v7, (uint64_t)&qword_100BD4280);
  }
  sub_1006BA1C0();
  sub_1000D9830();
}

void static SunEvents.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  sub_100099310();
  v7 = v6;
  v39 = v8;
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  v40 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v11);
  v41 = (char *)&v35 - v12;
  sub_10009D2A4();
  __chkstk_darwin(v13);
  sub_1000860D0();
  v42 = v14;
  sub_10009D2A4();
  __chkstk_darwin(v15);
  v17 = (char *)&v35 - v16;
  __chkstk_darwin(v18);
  sub_1000C0E4C();
  __chkstk_darwin(v19);
  sub_1000BEB28();
  __chkstk_darwin(v20);
  sub_1006B91A8();
  __chkstk_darwin(v21);
  sub_1000B3B34();
  __chkstk_darwin(v22);
  sub_10009DF40();
  __chkstk_darwin(v23);
  v25 = (char *)&v35 - v24;
  v26 = sub_100098778();
  v27 = v7;
  v28 = v7;
  v29 = v26;
  static Optional<A>.read(from:)(v28, v26);
  if (!v0)
  {
    v36 = v17;
    v37 = v1;
    v38 = v2;
    static Optional<A>.read(from:)(v27, v29);
    v35 = v3;
    v30 = v5;
    sub_10009E964();
    v31 = v4;
    sub_10009E964();
    v32 = v38;
    sub_10009E964();
    v33 = v37;
    sub_10009E964();
    sub_10009E964();
    sub_10009E964();
    sub_10009E964();
    v34 = v40;
    sub_10009E964();
    SunEvents.init(astronomicalDawn:nauticalDawn:civilDawn:sunrise:solarNoon:sunset:civilDusk:nauticalDusk:astronomicalDusk:solarMidnight:)(v25, v35, v30, v31, v32, v33, v36, v42, v41, v34);
  }
  sub_1000B44B0();
}

void SunEvents.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  sub_100099310();
  v9 = v8;
  v10 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_1000986FC();
  v43 = v12;
  sub_10009D2A4();
  __chkstk_darwin(v13);
  sub_1000860D0();
  v44 = v14;
  sub_10009D2A4();
  __chkstk_darwin(v15);
  sub_1000860D0();
  v45 = v16;
  sub_10009D2A4();
  __chkstk_darwin(v17);
  v46 = (char *)v41 - v18;
  sub_10009D2A4();
  __chkstk_darwin(v19);
  sub_1006B91A8();
  __chkstk_darwin(v20);
  sub_1000F3FD8();
  __chkstk_darwin(v21);
  sub_10009DF40();
  __chkstk_darwin(v22);
  sub_1006B93F4();
  __chkstk_darwin(v23);
  sub_1000B3B34();
  __chkstk_darwin(v24);
  sub_1006B9A20();
  v47 = v1;
  SunEvents.astronomicalDawn.getter();
  v48 = v9;
  v25 = Optional<A>.write(to:)(v9, v10, &protocol witness table for Date);
  if (v2)
  {
    v40 = v3;
  }
  else
  {
    v49 = v0;
    v41[2] = v4;
    v42 = v5;
    v41[1] = v6;
    sub_1006B9FC0(v25, (uint64_t)&unk_100BD35A0);
    SunEvents.nauticalDawn.getter();
    v26 = v48;
    sub_1000BED20(v48, v10, (uint64_t)&protocol witness table for Date);
    sub_1005E5ABC(v7, (uint64_t)&unk_100BD35A0);
    sub_1006B9B38();
    SunEvents.civilDawn.getter(v27);
    sub_1000BED20(v26, v10, (uint64_t)&protocol witness table for Date);
    sub_1005E5ABC(v49, (uint64_t)&unk_100BD35A0);
    v28 = v42;
    SunEvents.sunrise.getter(v29);
    sub_1000BED20(v48, v10, (uint64_t)&protocol witness table for Date);
    v30 = v28;
    v31 = v48;
    sub_1005E5ABC(v30, (uint64_t)&unk_100BD35A0);
    sub_1006B9B38();
    SunEvents.solarNoon.getter();
    v32 = sub_1000BED20(v31, v10, (uint64_t)&protocol witness table for Date);
    sub_1006B9120(v32, (uint64_t)&unk_100BD35A0);
    sub_1006B9B38();
    SunEvents.sunset.getter(v33);
    v34 = sub_1000BED20(v31, v10, (uint64_t)&protocol witness table for Date);
    sub_1006B9120(v34, (uint64_t)&unk_100BD35A0);
    sub_1006B9B38();
    SunEvents.civilDusk.getter(v35);
    v36 = sub_1000BED20(v31, v10, (uint64_t)&protocol witness table for Date);
    sub_1006B9120(v36, (uint64_t)&unk_100BD35A0);
    sub_1006B9B38();
    SunEvents.nauticalDusk.getter();
    v37 = sub_1000BED20(v31, v10, (uint64_t)&protocol witness table for Date);
    sub_1006B9120(v37, (uint64_t)&unk_100BD35A0);
    sub_1006B9B38();
    SunEvents.astronomicalDusk.getter();
    v38 = sub_1000BED20(v31, v10, (uint64_t)&protocol witness table for Date);
    sub_1006B9120(v38, (uint64_t)&unk_100BD35A0);
    v39 = v43;
    sub_1006B9B38();
    SunEvents.solarMidnight.getter();
    sub_1000BED20(v31, v10, (uint64_t)&protocol witness table for Date);
    v40 = v39;
  }
  sub_1005E5ABC(v40, (uint64_t)&unk_100BD35A0);
  sub_1000DB350();
  sub_1000B44B0();
}

void sub_1006A7D04(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;

  v2 = sub_1006B86E4();
  v3 = sub_1006B8720();
  sub_1000F3EA0(a1, (uint64_t)&unk_100B8D730, v2, v3);
  sub_1000C1348();
}

void sub_1006A7D48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1006B86E4();
  sub_1006B8720();
  v0 = sub_1006BA4D4();
  sub_1006B9484(v0, v1, v2, v3, v4);
  sub_1006B9D70();
}

double sub_1006A7D8C(uint64_t a1)
{
  uint64_t v1;
  double v2;
  double v5;

  sub_1000C1780(a1);
  if (!v1)
  {
    v2 = v5;
    sub_1000C1780(a1);
    sub_1000C1780(a1);
    sub_1000C1780(a1);
  }
  return v2;
}

uint64_t sub_1006A7E5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = FixedSizeTypeBinaryCodable.write(to:)(a1);
  if (!v1)
  {
    sub_1000BEB7C();
    sub_1000BEB7C();
    return sub_1000BEB7C();
  }
  return result;
}

void sub_1006A7F10(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = sub_1006A7D8C(a1);
  if (!v2)
  {
    v9 = v5;
    v10 = v6;
    v11 = v7;
    v12 = v8;
    sub_1000C1780(a1);
    *a2 = v9;
    *((_QWORD *)a2 + 1) = v10;
    *((_QWORD *)a2 + 2) = v11;
    *((_QWORD *)a2 + 3) = v12;
    *((_QWORD *)a2 + 4) = v13;
  }
}

void sub_1006A7F90(uint64_t a1)
{
  uint64_t v1;

  sub_1006A7E5C(a1);
  if (!v1)
    sub_1000BEB7C();
  sub_100089028();
}

void static UVIndex.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1006BA558();
  sub_1000C1780(v2);
  if (!v0)
  {
    static LocationAuthorizationState.read(from:)(v1);
    UVIndex.init(value:category:)(v3);
  }
  sub_1000B26E8();
}

void UVIndex.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  sub_1006B95D4();
  UVIndex.value.getter(v1);
  v2 = sub_1000E738C();
  if (!v0)
  {
    UVIndex.category.getter(v2);
    v3 = sub_1006B9150();
    LocationAuthorizationState.write(to:)(v3, v4);
  }
  sub_1000B26E8();
}

void sub_1006A80AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = sub_1000C1780(a1);
  if (!v1
    && sub_1006BA5A0(v2, v3, v4, v5, v6, v7, v8, v9, v14, v15, SWORD2(v15), SBYTE6(v15), HIBYTE(v15)) >= 5)
  {
    sub_1000C56E0();
    sub_10007A100((uint64_t)&qword_100BF4CC0);
    v11 = sub_1000BC670(v10);
    v13 = sub_1000D0A50(v11, v12);
    sub_1000C3D70(v13, enum case for BinaryDecoder.Error.valueNotSupported(_:));
    sub_1000C2294();
  }
  sub_100089028();
}

void sub_1006A8134(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

void sub_1006A815C(uint64_t a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 5) = 1;
  FixedSizeTypeBinaryCodable.write(to:)(a1);
  sub_10009ED00();
}

void static Wind.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  sub_1000B4C9C();
  v5 = v4;
  sub_1000BA294(&qword_100BCE728);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100079FBC();
  sub_1000BA294(&qword_100BCB938);
  sub_100098BB4();
  __chkstk_darwin(v7);
  sub_10004A2E8();
  sub_1000BA294(&qword_100BCB9B0);
  sub_1000C0120();
  __chkstk_darwin(v8);
  sub_100098694();
  static Wind.CompassDirection.read(from:)(v5);
  if (!v0)
  {
    v16 = v9;
    v10 = sub_1006B92D4(v5);
    sub_100079FE8(v10, (unint64_t *)&qword_100BF4860, NSUnitAngle_ptr);
    static NSUnitAngle.read(from:)(v5);
    sub_1000C4CA8(v11);
    v12 = sub_1006B92D4(v5);
    sub_100079FE8(v12, (unint64_t *)&qword_100BCB990, NSUnitSpeed_ptr);
    static NSUnitSpeed.read(from:)(v5);
    sub_1000C4CA8(v13);
    sub_1006B2340((uint64_t)&unk_100BFC8D8);
    sub_1006B2340((uint64_t)&unk_100BFC8F0);
    v14 = sub_1000DF7CC();
    static Optional<A>.read(from:)(v14, v15);
    Wind.init(compassDirection:direction:speed:gust:)(v16, v2, v3, v1);
  }
  sub_1006B9B2C();
  sub_1000DF888();
}

void Wind.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_100099310();
  v6 = v5;
  v20 = sub_1000BA294(&qword_100BCE728);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_1000D9C54(v8, v19);
  sub_1000BA294(&qword_100BCB938);
  sub_1000BD980();
  __chkstk_darwin(v9);
  sub_100099234();
  sub_1000BA294(&qword_100BCB9B0);
  sub_1000C0120();
  __chkstk_darwin(v10);
  sub_100098694();
  v12 = Wind.compassDirection.getter(v11);
  Wind.CompassDirection.write(to:)(v6, v12);
  if (!v1)
  {
    Wind.direction.getter(v13);
    sub_1006B917C();
    v14 = sub_10007A170(v3, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
    Wind.speed.getter(v14);
    sub_1006B917C();
    v15 = sub_1000B3274(v4, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    Wind.gust.getter(v15);
    sub_1006B2340((uint64_t)&unk_100BFC8D8);
    v17 = v16;
    sub_1006B2340((uint64_t)&unk_100BFC8F0);
    v18 = sub_1000DB348(v6, v20, v17);
    sub_1006BA950(v18, (uint64_t)&qword_100BCE728);
  }
  sub_1006B93E0();
  sub_1000B44B0();
}

void static Wind.CompassDirection.read(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = sub_1000C1780(a1);
  if (!v1)
  {
    sub_1006BA024(v2, v3, v4, v5, v6, v7, v8, v9, v15, v16, SWORD2(v16), SBYTE6(v16), HIBYTE(v16));
    if (v10 >= 0x10)
    {
      sub_1000C56E0();
      sub_10007A100((uint64_t)&qword_100BF4CC0);
      v12 = sub_1000BC670(v11);
      v14 = sub_1000D0A50(v12, v13);
      sub_1000C3D70(v14, enum case for BinaryDecoder.Error.valueNotSupported(_:));
      sub_1000C2294();
    }
  }
  sub_100089028();
}

void Wind.CompassDirection.write(to:)(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

void sub_1006A8674(uint64_t a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 1) = 1;
  FixedSizeTypeBinaryCodable.write(to:)(a1);
  sub_10009ED00();
}

void static WeatherAlert.read(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  double v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  double v88;
  double v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;

  sub_100099310();
  a19 = v25;
  a20 = v26;
  v110 = v21;
  a10 = v27;
  v100 = v28;
  v103 = sub_1000D91D0();
  sub_1000B42B0();
  __chkstk_darwin(v29);
  v104 = (char *)&v86 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_1000D0A5C();
  v101 = *(_QWORD *)(v31 - 8);
  v102 = v31;
  sub_10009D98C();
  __chkstk_darwin(v32);
  v34 = sub_10009E408(v33, v86);
  v35 = type metadata accessor for WeatherImportance(v34);
  v105 = *(_QWORD *)(v35 - 8);
  v106 = v35;
  sub_10009D98C();
  __chkstk_darwin(v36);
  v38 = sub_100095214(v37, v86);
  v39 = type metadata accessor for WeatherSeverity(v38);
  v107 = *(_QWORD *)(v39 - 8);
  v108 = v39;
  sub_10009D98C();
  __chkstk_darwin(v40);
  sub_10009DE08(v41, v86);
  sub_1000BA294(&qword_100BD4280);
  sub_1000B42B0();
  __chkstk_darwin(v42);
  sub_1000AE8A8(v43, v86);
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v44);
  v109 = (char *)&v86 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v46);
  v48 = (char *)&v86 - v47;
  v49 = sub_100098778();
  sub_10009C7D0();
  __chkstk_darwin(v50);
  sub_100089068();
  __chkstk_darwin(v51);
  v53 = (char *)&v86 - v52;
  __chkstk_darwin(v54);
  v56 = (char *)&v86 - v55;
  v57 = sub_10009896C();
  sub_100099300();
  __chkstk_darwin(v58);
  sub_1006B941C();
  v59 = v110;
  static URL.read(from:)(a10);
  if (!v59)
  {
    v92 = v48;
    v94 = v20;
    v93 = v22;
    v96 = v53;
    v97 = v56;
    v95 = v49;
    v98 = v23;
    v99 = v24;
    v110 = v57;
    v60 = sub_1006BA7EC();
    v62 = v61;
    sub_1006BA958();
    sub_1006BA958();
    v91 = v60;
    sub_1006BA958();
    v63 = v95;
    v90 = v62;
    v64 = sub_10011AC4C();
    static Optional<A>.read(from:)(v64, v65);
    v66 = v48;
    v67 = v109;
    static Optional<A>.read(from:)(v66, v63);
    *(_QWORD *)&v88 = static String.read(from:)(a10);
    v89 = v68;
    v86 = sub_1006BA7EC();
    v87 = v69;
    static Optional<A>.read(from:)(v67, v110);
    sub_1000CDD44(a10, (uint64_t)&type metadata for String);
    static WeatherSeverity.read(from:)(a10);
    static WeatherImportance.read(from:)(a10, v70, v71, v72, v73, v74, v75, v76);
    static WeatherMetadata.read(from:)(v77, v78, v79, v80, v81, v82, v83, v84, *(double *)&v86, v87, v88, v89);
    sub_1000C3EA0(a10);
    sub_1006BA6E0();
    sub_1006B9D24();
    WeatherAlert.init(detailsURL:source:date:expirationDate:issuedDate:onsetTime:endDate:summary:description:details:region:severity:importance:metadata:id:)(v99, v91, v90, v97, v96, v93, v92, v109, v85);
  }
  sub_1000B44B0();
}

void WeatherAlert.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53[2];
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  sub_100099310();
  v70 = v2;
  v73 = v7;
  v8 = sub_1000D91D0();
  v54 = *(_QWORD *)(v8 - 8);
  v55 = v8;
  sub_10009D98C();
  __chkstk_darwin(v9);
  v56 = (char *)v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000D0A5C();
  v57 = *(_QWORD *)(v11 - 8);
  v58 = v11;
  sub_10009D98C();
  __chkstk_darwin(v12);
  sub_100099B38(v13, v53[0]);
  v14 = type metadata accessor for WeatherImportance(0);
  v59 = *(_QWORD *)(v14 - 8);
  v60 = v14;
  sub_10009D98C();
  __chkstk_darwin(v15);
  v17 = sub_10009E4B4(v16, v53[0]);
  v18 = type metadata accessor for WeatherSeverity(v17);
  v19 = *(_QWORD *)(v18 - 8);
  v62 = v18;
  v63 = v19;
  sub_10009D98C();
  __chkstk_darwin(v20);
  sub_1000D0278(v21, v53[0]);
  v65 = sub_1000BA294(&qword_100BD4280);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  sub_100098678(v23, v53[0]);
  v68 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v24);
  sub_1000986FC();
  v66 = v25;
  sub_10009D2A4();
  __chkstk_darwin(v26);
  sub_100079F7C();
  v67 = v27;
  v28 = sub_100098778();
  sub_10009D5D4();
  __chkstk_darwin(v29);
  sub_10003BC68();
  __chkstk_darwin(v30);
  sub_10009DF40();
  __chkstk_darwin(v31);
  v33 = (char *)v53 - v32;
  v34 = sub_10009896C();
  sub_1000C0120();
  __chkstk_darwin(v35);
  sub_10009C8C4();
  v69 = v1;
  WeatherAlert.detailsURL.getter();
  v36 = v70;
  URL.write(to:)(v73);
  if (v36)
  {
    (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v3, v34);
  }
  else
  {
    v53[1] = v6;
    v53[0] = v4;
    v70 = v28;
    sub_10007A170(v3, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
    sub_1006B9470();
    v38 = WeatherAlert.source.getter(v37);
    sub_1000E7D08(v73, v38, v39);
    sub_1000986C4();
    sub_1006BA820();
    WeatherAlert.date.getter();
    sub_1006B936C();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v33, v70);
    sub_1006BA864();
    WeatherAlert.expirationDate.getter();
    sub_1006B96F4();
    sub_10021A828();
    sub_1006BA864();
    WeatherAlert.issuedDate.getter();
    sub_1006B96F4();
    sub_10021A828();
    sub_1006B9470();
    WeatherAlert.onsetTime.getter();
    v40 = sub_10009BD8C();
    sub_1006BA27C(v40, (uint64_t)&unk_100BD35A0);
    sub_1006B9470();
    WeatherAlert.endDate.getter();
    v41 = sub_10009BD8C();
    sub_1006BA27C(v41, (uint64_t)&unk_100BD35A0);
    sub_1006B9470();
    v42 = WeatherAlert.summary.getter();
    sub_1000E7D08(v73, v42, v43);
    v44 = sub_1000986C4();
    v45 = WeatherAlert.description.getter(v44);
    sub_1000E7D08(v73, v45, v46);
    v47 = sub_1000986C4();
    WeatherAlert.details.getter(v47);
    v48 = sub_10009BD8C();
    sub_1006BA27C(v48, (uint64_t)&qword_100BD4280);
    v49 = WeatherAlert.region.getter();
    v51 = v50;
    v71 = v49;
    v72 = v50;
    v52 = sub_1000BA294(&qword_100BC5AA8);
    sub_1000DB348(v73, v52, (uint64_t)&protocol witness table for String);
    sub_10009895C();
    sub_1006B9470();
    WeatherAlert.severity.getter();
    WeatherSeverity.write(to:)();
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v64, v62);
    if (!v51)
    {
      sub_1006BA304();
      WeatherAlert.importance.getter();
      sub_1006B9C04();
      WeatherImportance.write(to:)();
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v61, v60);
      sub_1006BA304();
      WeatherAlert.metadata.getter();
      sub_1006BA96C();
      sub_1006B93D0();
      sub_1006BA304();
      WeatherAlert.id.getter();
      sub_1006B9C04();
      UUID.write(to:)();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v56, v55);
    }
  }
  sub_10009E33C();
  sub_1000B44B0();
}

#error "1006A9334: call analysis failed (funcsize=41)"

void WeatherChanges.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  sub_100099310();
  sub_1000D0A5C();
  sub_1000AE898();
  __chkstk_darwin(v3);
  sub_100079FBC();
  WeatherChanges.changes.getter();
  v4 = sub_1006BA298();
  type metadata accessor for WeatherChange(v4);
  sub_1006B9224((uint64_t)&unk_100BFC988);
  sub_1006B9DB8((uint64_t)&unk_100BFC990);
  sub_1006B9208(v5);
  v6 = sub_10009D2E0();
  if (!v0)
  {
    WeatherChanges.metadata.getter(v6);
    sub_1006BA2C4();
    sub_100098820(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  }
  sub_10011E690();
  sub_1000B44B0();
}

void static WeatherChange.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_100099310();
  v3 = v2;
  sub_100098778();
  sub_100098B6C();
  __chkstk_darwin(v4);
  sub_10009E4D4();
  sub_1006BA1CC(v3);
  if (!v1)
  {
    sub_1006B998C();
    v6 = v5;
    sub_1006B998C();
    v8 = v7;
    sub_1006B998C();
    v10 = v9;
    sub_1006B998C();
    WeatherChange.init(date:highTemperature:lowTemperature:dayPrecipitationAmount:nightPrecipitationAmount:)(v0, v6, v8, v10, v11);
  }
  sub_10009EDB4();
  sub_1000B44B0();
}

void WeatherChange.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100110560();
  sub_100098778();
  sub_1000C6D9C();
  __chkstk_darwin(v2);
  sub_10009C224();
  WeatherChange.date.getter();
  sub_10009C7E8();
  if (v0)
  {
    sub_1000EFA30(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  }
  else
  {
    v3 = sub_1000EFA30(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    WeatherChange.highTemperature.getter(v3);
    sub_1006B9404();
    WeatherChange.lowTemperature.getter();
    sub_1006B9404();
    WeatherChange.dayPrecipitationAmount.getter();
    sub_1006B9404();
    WeatherChange.nightPrecipitationAmount.getter();
    sub_1006B9404();
  }
  sub_1000C1FB4();
  sub_1000C60F8();
}

void static WeatherCondition.read(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  sub_1000C1780(a1);
  if (!v1)
  {
    switch(v8)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
        v6 = sub_10011E00C();
        v7 = type metadata accessor for WeatherCondition(v6);
        sub_1000C229C(v7);
        break;
      default:
        sub_1000C56E0();
        sub_10007A100((uint64_t)&qword_100BF4CC0);
        v3 = sub_1000BC670(v2);
        v5 = sub_1000D0A50(v3, v4);
        sub_1000C3D70(v5, enum case for BinaryDecoder.Error.valueNotSupported(_:));
        sub_1000C2294();
        break;
    }
  }
  sub_1000C1348();
}

void WeatherCondition.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v0 = sub_1000DC28C();
  type metadata accessor for WeatherCondition(v0);
  sub_10009D5D4();
  __chkstk_darwin(v1);
  sub_1000C57E0(v2, v4);
  v3 = sub_1000FDC00();
  if (v3 == enum case for WeatherCondition.blizzard(_:)
    || v3 == enum case for WeatherCondition.blowingDust(_:)
    || v3 == enum case for WeatherCondition.blowingSnow(_:)
    || v3 == enum case for WeatherCondition.breezy(_:)
    || v3 == enum case for WeatherCondition.clear(_:)
    || v3 == enum case for WeatherCondition.cloudy(_:)
    || v3 == enum case for WeatherCondition.drizzle(_:)
    || v3 == enum case for WeatherCondition.flurries(_:)
    || v3 == enum case for WeatherCondition.foggy(_:)
    || v3 == enum case for WeatherCondition.freezingDrizzle(_:)
    || v3 == enum case for WeatherCondition.freezingRain(_:)
    || v3 == enum case for WeatherCondition.frigid(_:)
    || v3 == enum case for WeatherCondition.hail(_:)
    || v3 == enum case for WeatherCondition.haze(_:)
    || v3 == enum case for WeatherCondition.heavyRain(_:)
    || v3 == enum case for WeatherCondition.heavySnow(_:)
    || v3 == enum case for WeatherCondition.hot(_:)
    || v3 == enum case for WeatherCondition.hurricane(_:)
    || v3 == enum case for WeatherCondition.isolatedThunderstorms(_:)
    || v3 == enum case for WeatherCondition.mostlyClear(_:)
    || v3 == enum case for WeatherCondition.mostlyCloudy(_:)
    || v3 == enum case for WeatherCondition.partlyCloudy(_:)
    || v3 == enum case for WeatherCondition.rain(_:)
    || v3 == enum case for WeatherCondition.scatteredThunderstorms(_:)
    || v3 == enum case for WeatherCondition.sleet(_:)
    || v3 == enum case for WeatherCondition.smoky(_:)
    || v3 == enum case for WeatherCondition.snow(_:)
    || v3 == enum case for WeatherCondition.strongStorms(_:)
    || v3 == enum case for WeatherCondition.sunFlurries(_:)
    || v3 == enum case for WeatherCondition.sunShowers(_:)
    || v3 == enum case for WeatherCondition.thunderstorms(_:)
    || v3 == enum case for WeatherCondition.tropicalStorm(_:)
    || v3 == enum case for WeatherCondition.windy(_:)
    || v3 == enum case for WeatherCondition.wintryMix(_:))
  {
    sub_100098F20();
    sub_1000D9830();
  }
  else
  {
    sub_1000F4288();
    __break(1u);
  }
}

void static WeatherMetadata.read(from:)(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23[2];

  sub_1006B91CC();
  v16 = v15;
  sub_1000BA294(&qword_100BE55B0);
  sub_1000B42B0();
  __chkstk_darwin(v17);
  v19 = (char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100098778();
  sub_100098B6C();
  __chkstk_darwin(v20);
  sub_1000BEDA4();
  __chkstk_darwin(v21);
  sub_1006B9A20();
  sub_1006B947C(v16);
  if (!v12)
  {
    sub_1006B947C(v16);
    sub_1000C3EA0(v16);
    sub_1000C3EA0(v16);
    v22 = *(double *)&v23[1];
    v23[0] = type metadata accessor for WeatherAttribution(0);
    sub_10007A100((uint64_t)&unk_100BFC998);
    sub_10007A100((uint64_t)&unk_100BFC9A0);
    sub_1000CDD44(v16, v23[0]);
    WeatherMetadata.init(date:expirationDate:latitude:longitude:attribution:)(v13, v14, v19, a12, v22);
  }
  sub_1000E72CC();
}

void WeatherMetadata.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;

  sub_100099310();
  v29 = v1;
  v4 = v3;
  v5 = sub_1000BA294(&qword_100BE55B0);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100098778();
  sub_1000AE898();
  __chkstk_darwin(v10);
  sub_1000BEDA4();
  __chkstk_darwin(v11);
  v13 = (char *)v27 - v12;
  v28 = v0;
  WeatherMetadata.date.getter(v14);
  sub_1006BA2E4(v4);
  if (v1)
  {
    v15 = sub_1006BA0F4();
    sub_1000B3274(v15, v16);
  }
  else
  {
    v27[1] = v8;
    v29 = v5;
    v17 = *(uint64_t (**)(char *, uint64_t))(v2 + 8);
    v18 = v17(v13, v9);
    WeatherMetadata.expirationDate.getter(v18);
    sub_1006B97A0();
    v19 = sub_1006B9E3C();
    v20 = ((uint64_t (*)(uint64_t))v17)(v19);
    WeatherMetadata.latitude.getter(v20);
    v21 = sub_1006B91F8(v4);
    WeatherMetadata.longitude.getter(v21);
    v22 = sub_1006B91F8(v4);
    WeatherMetadata.attribution.getter(v22);
    sub_1000BD664((uint64_t)&unk_100BFC998);
    v24 = v23;
    sub_1000BD664((uint64_t)&unk_100BFC9A0);
    v25 = sub_1006BA79C();
    v26 = sub_1000DB348(v25, v29, v24);
    sub_1006B9120(v26, (uint64_t)&qword_100BE55B0);
  }
  sub_1006B93E0();
  sub_1000B44B0();
}

void static WeatherSeverity.read(from:)(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000C1780(a1);
  if (!v1)
  {
    sub_1006BA014();
    if (!(!v4 & v3))
      __asm { BR              X10 }
    sub_1000C56E0();
    sub_10007A100((uint64_t)&qword_100BF4CC0);
    v6 = sub_1000BC670(v5);
    v8 = sub_1000D0A50(v6, v7);
    sub_1000C3D70(v8, enum case for BinaryDecoder.Error.valueNotSupported(_:));
    sub_1000C2294();
  }
  sub_1000C1348();
}

void WeatherSeverity.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v0 = sub_1000DC28C();
  type metadata accessor for WeatherSeverity(v0);
  sub_10009D5D4();
  __chkstk_darwin(v1);
  sub_1000C57E0(v2, v4);
  v3 = sub_1000FDC00();
  if (v3 == enum case for WeatherSeverity.minor(_:)
    || v3 == enum case for WeatherSeverity.moderate(_:)
    || v3 == enum case for WeatherSeverity.severe(_:)
    || v3 == enum case for WeatherSeverity.extreme(_:)
    || v3 == enum case for WeatherSeverity.unknown(_:))
  {
    sub_100098F20();
    sub_1000D9830();
  }
  else
  {
    sub_1000F4288();
    __break(1u);
  }
}

void static WeatherSeverityKind.read(from:)(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000C1780(a1);
  if (!v1)
  {
    sub_1006BA014();
    if (!(!v4 & v3))
      __asm { BR              X10 }
    sub_1000C56E0();
    sub_10007A100((uint64_t)&qword_100BF4CC0);
    v6 = sub_1000BC670(v5);
    v8 = sub_1000D0A50(v6, v7);
    sub_1000C3D70(v8, enum case for BinaryDecoder.Error.valueNotSupported(_:));
    sub_1000C2294();
  }
  sub_1000C1348();
}

void WeatherSeverityKind.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v0 = sub_1000DC28C();
  type metadata accessor for WeatherSeverityKind(v0);
  sub_10009D5D4();
  __chkstk_darwin(v1);
  sub_1000C57E0(v2, v4);
  v3 = sub_1000FDC00();
  if (v3 == enum case for WeatherSeverityKind.minor(_:)
    || v3 == enum case for WeatherSeverityKind.moderate(_:)
    || v3 == enum case for WeatherSeverityKind.severe(_:)
    || v3 == enum case for WeatherSeverityKind.extreme(_:)
    || v3 == enum case for WeatherSeverityKind.unknown(_:))
  {
    sub_100098F20();
    sub_1000D9830();
  }
  else
  {
    sub_1000F4288();
    __break(1u);
  }
}

void sub_1006AA400()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t);
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[14];
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  sub_100099310();
  v6 = v5;
  v62 = v7;
  sub_1006B9644();
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100088FDC();
  v64 = v9;
  v10 = sub_10009876C();
  type metadata accessor for WeatherConditionBackgroundPreprocessedDataModel(v10);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100088FDC();
  v63 = v12;
  v13 = sub_10009876C();
  type metadata accessor for PressureComponentPreprocessedDataModel(v13);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  sub_100088FDC();
  v65 = v15;
  v16 = sub_10009876C();
  v69 = type metadata accessor for WeatherDescription(v16);
  sub_10009D98C();
  __chkstk_darwin(v17);
  sub_100088FDC();
  v18 = sub_10009876C();
  v66 = type metadata accessor for UVIndexComponentPreprocessedDataModel(v18);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  sub_100088FDC();
  v67 = v20;
  v21 = sub_10009876C();
  type metadata accessor for ListPreprocessedDataModel(v21);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  sub_100088FDC();
  v68 = v23;
  sub_1000BA294(&qword_100BC3368);
  sub_1000B42B0();
  __chkstk_darwin(v24);
  v25 = sub_1000C1E78();
  v26 = type metadata accessor for HourlyForecastComponentPreprocessedDataModel(v25);
  sub_1000B42B0();
  __chkstk_darwin(v27);
  v28 = sub_10008909C();
  type metadata accessor for FeelsLikeComponentPreprocessedDataModel(v28);
  sub_1000B42B0();
  __chkstk_darwin(v29);
  v30 = sub_1000BE9F0();
  type metadata accessor for UUID(v30);
  sub_100098B6C();
  __chkstk_darwin(v31);
  sub_10004A2E8();
  static FixedSizeTypeBinaryCodable.read(from:)(v6);
  if (!v0)
  {
    v59 = v3;
    v60 = v2;
    v91 = v4;
    v32 = sub_1006B9EE4();
    sub_1006B9224((uint64_t)&unk_100BFCBB8);
    v34 = v33;
    sub_1006B9224((uint64_t)&unk_100BFCBC0);
    v36 = sub_1006B99F8(v6, v32, v34, v35);
    sub_1006B9684();
    sub_10069DC88();
    sub_1006B9634();
    sub_1000BF24C((uint64_t)&unk_100BFCBD8);
    sub_1000BF24C((uint64_t)&unk_100BFCBE0);
    sub_1006BA79C();
    sub_1006BA338();
    v41 = static Array<A>.read(from:)(v37, v38, v39, v40);
    sub_1000BD664((uint64_t)&unk_100BFCBE8);
    sub_1000BD664((uint64_t)&unk_100BFCBF0);
    static Optional<A>.read(from:)(v6, v69);
    *v59 = v41;
    sub_10009E8CC(v60, (uint64_t)v59 + *(int *)(v26 + 20), &qword_100BC3368);
    sub_1006B9684();
    sub_1006A0854();
    v61 = v36;
    v42 = sub_1006BA1E8();
    sub_1006A718C(v42);
    v85[0] = v71;
    v85[1] = v72;
    v85[2] = v73;
    v85[3] = v74;
    v85[4] = v75;
    v85[5] = v76;
    v85[6] = v77;
    v85[7] = v78;
    v85[8] = v79;
    v85[9] = v80;
    v85[10] = v81;
    v85[11] = v82;
    v85[12] = sub_1000B301C();
    v85[13] = v43;
    v44 = sub_1006B9F88();
    static WeatherDescription.read(from:)(v44);
    v45 = sub_1000B301C();
    v47 = v46;
    v48 = sub_1000DF7CC();
    v49(v48);
    v50 = (uint64_t *)(v67 + *(int *)(v66 + 20));
    *v50 = v45;
    v50[1] = v47;
    sub_1000B301C();
    sub_1006BAA10();
    v51 = sub_1000B301C();
    v53 = v52;
    v70 = sub_1000B301C();
    v55 = v54;
    sub_1006BA1E8();
    sub_1006AB8A0();
    v56 = sub_1006BA1E8();
    sub_1006ABAF4(v56, v57);
    sub_1006BA1E8();
    sub_1006AC14C();
    sub_10007C75C(v64, v63, type metadata accessor for WeatherConditionBackgroundTimeData);
    v58 = sub_1006BA1E8();
    sub_1006A05B4(v58);
    *(_QWORD *)&v86 = v47;
    *((_QWORD *)&v86 + 1) = v67;
    v87 = v51;
    v88 = v53;
    v89 = v70;
    v90 = v55;
    sub_1000AED78(v91, v61, v1, (uint64_t)v59, v68, v85, v67, &v86, v62, v65, &v83, v63, &v84);
  }
  sub_10009E33C();
  sub_1000B44B0();
}

void sub_1006AAC54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[112];
  _BYTE __dst[232];
  uint64_t v42;

  sub_100099310();
  sub_1006BA978();
  UUID.write(to:)();
  if (!v1)
  {
    type metadata accessor for PreprocessedWeatherData(0);
    sub_1006B9FDC();
    sub_1006B9EE4();
    sub_1000C67A8((uint64_t)&unk_100BFCBB8);
    sub_1000C67A8((uint64_t)&unk_100BFCBC0);
    sub_1006B97B8(v4);
    sub_1000BEF10();
    sub_10069DE50();
    sub_1006B9634();
    sub_1000C67A8((uint64_t)&unk_100BFCBD8);
    sub_1000C67A8((uint64_t)&unk_100BFCBE0);
    sub_1006B97B8(v5);
    sub_1006BA384();
    v6 = sub_1000BA294(&qword_100BC3368);
    sub_1000C67A8((uint64_t)&unk_100BFCBE8);
    v8 = v7;
    sub_1000C67A8((uint64_t)&unk_100BFCBF0);
    sub_1000BED20(v0, v6, v8);
    sub_1000BEF10();
    sub_1006A09D0();
    v10 = (uint64_t *)(v2 + v3[9]);
    v42 = v10[2];
    v38 = v10[4];
    v39 = v10[3];
    v36 = v10[6];
    v37 = v10[5];
    v11 = v10[9];
    v34 = v10[8];
    v35 = v10[7];
    v13 = v10[10];
    v12 = v10[11];
    v15 = v10[12];
    v14 = v10[13];
    sub_1000BDB40(v9, *v10, v10[1]);
    sub_1000ED338(v0, v42, v39);
    sub_1000ED338(v0, v38, v37);
    sub_1000ED338(v0, v36, v35);
    sub_1000ED338(v0, v34, v11);
    sub_1000ED338(v0, v13, v12);
    sub_1000ED338(v0, v15, v14);
    v16 = v2 + v3[10];
    v17 = sub_1000BEF10();
    WeatherDescription.write(to:)(v17);
    v18 = type metadata accessor for UVIndexComponentPreprocessedDataModel(0);
    v19 = sub_1000BDB40(v18, *(_QWORD *)(v16 + *(int *)(v18 + 20)), *(_QWORD *)(v16 + *(int *)(v18 + 20) + 8));
    v20 = (uint64_t *)(v2 + v3[11]);
    v21 = v20[2];
    v22 = v20[3];
    v23 = v20[4];
    v24 = v20[5];
    sub_1000BDB40(v19, *v20, v20[1]);
    sub_1000ED338(v0, v21, v22);
    sub_1000ED338(v0, v23, v24);
    sub_1000BEF10();
    sub_1006ABA34();
    memcpy(__dst, (const void *)(v2 + v3[13]), sizeof(__dst));
    v25 = sub_1000BEF10();
    sub_1006ABEDC(v25);
    sub_10009C7E8();
    sub_1006B9644();
    sub_1000BA294(&qword_100BC3370);
    sub_10011DFBC((uint64_t)&unk_100BFCBF8);
    v27 = v26;
    sub_10011DFBC((uint64_t)&unk_100BFCC00);
    v28 = sub_10011AC4C();
    sub_1000BED20(v28, v29, v27);
    v30 = sub_1000BA294(&qword_100BC3378);
    sub_1000C67A8((uint64_t)&unk_100BFCC08);
    v32 = v31;
    sub_1000C67A8((uint64_t)&unk_100BFCC10);
    sub_1000BED20(v0, v30, v32);
    memcpy(v40, (const void *)(v2 + v3[15]), sizeof(v40));
    v33 = sub_1000BEF10();
    sub_1006A0748(v33);
  }
  sub_1000B44B0();
}

void static ApparentPrecipitationIntensity.read(from:)(uint64_t a1)
{
  sub_1006AB0B4(a1, (uint64_t (*)(_QWORD))&type metadata accessor for ApparentPrecipitationIntensityCategory, (void (*)(uint64_t))static ApparentPrecipitationIntensityCategory.read(from:), (void (*)(char *, double))&ApparentPrecipitationIntensity.init(value:category:));
}

void sub_1006AB0B4(uint64_t a1, uint64_t (*a2)(_QWORD), void (*a3)(uint64_t), void (*a4)(char *, double))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  double v11;
  uint64_t v12;
  _QWORD v13[2];

  sub_1000BE9A8(a1, a2);
  sub_100098F2C();
  __chkstk_darwin(v8);
  v10 = (char *)v13 - v9;
  sub_1000FDA70(a1);
  if (!v4)
  {
    v11 = *(double *)&v13[1];
    v12 = sub_1006B9684();
    a3(v12);
    a4(v10, v11);
  }
  sub_1006BA08C();
}

void ApparentPrecipitationIntensity.write(to:)()
{
  sub_1006AB1B0();
}

void sub_1006AB1B0()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  void (*v3)(uint64_t);
  void (*v4)(__n128);
  void (*v5)(__n128);
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);

  sub_100099310();
  v16 = v1;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = *(_QWORD *)(sub_1000BE9A8(v6, v8) - 8);
  sub_100098F2C();
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v15 - v12;
  v5(v11);
  v14 = sub_1006B9DC4(v7);
  if (!v0)
  {
    v3(v14);
    v16(v7);
    sub_100098820((uint64_t)v13, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
  }
  sub_1006B9B2C();
  sub_1000B44B0();
}

void static ApparentPrecipitationIntensityCategory.read(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_1006ADD7C(a1, (uint64_t)&enum case for ApparentPrecipitationIntensityCategory.light(_:), (uint64_t)&type metadata accessor for ApparentPrecipitationIntensityCategory, (uint64_t)&enum case for ApparentPrecipitationIntensityCategory.medium(_:), (uint64_t)&enum case for ApparentPrecipitationIntensityCategory.heavy(_:), a6, a7, a8, vars0, vars8, SWORD2(vars8), SBYTE6(vars8), SHIBYTE(vars8));
}

#error "1006AB2D0: call analysis failed (funcsize=13)"

void static WeatherAvailability.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000BE9DC();
  type metadata accessor for WeatherAvailability.AvailabilityKind(0);
  sub_100099300();
  __chkstk_darwin(v4);
  sub_100089068();
  __chkstk_darwin(v5);
  sub_10009DF40();
  __chkstk_darwin(v6);
  sub_1006BA680();
  sub_1006B9FB4();
  if (!v0)
  {
    sub_1006B9FB4();
    sub_1006B9FB4();
    WeatherAvailability.init(minuteAvailability:alertAvailability:airQualityAvailability:)(v1, v3, v2);
  }
  sub_1006B9A90();
  sub_100089054();
}

void WeatherAvailability.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_100099310();
  type metadata accessor for WeatherAvailability.AvailabilityKind(0);
  sub_100098B6C();
  __chkstk_darwin(v5);
  sub_1000C0CD0();
  __chkstk_darwin(v6);
  sub_10009DF40();
  __chkstk_darwin(v7);
  sub_1001FB600();
  WeatherAvailability.minuteAvailability.getter(v8);
  sub_1006BA91C();
  if (v0)
  {
    sub_100098820(v3, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  }
  else
  {
    v9 = sub_1006BA774(v3);
    WeatherAvailability.alertAvailability.getter(v9);
    sub_1006BA91C();
    sub_1006BA774(v2);
    sub_1006BA270();
    WeatherAvailability.airQualityAvailability.getter();
    sub_1006BA91C();
    sub_1006BA774(v1);
  }
  sub_1000DB350();
  sub_1000B44B0();
}

void static WeatherAvailability.AvailabilityKind.read(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  sub_1000C1780(a1);
  if (!v1)
  {
    switch(v8)
    {
      case 1:
      case 2:
      case 3:
      case 4:
        v6 = sub_10011E00C();
        v7 = type metadata accessor for WeatherAvailability.AvailabilityKind(v6);
        sub_1000C229C(v7);
        break;
      default:
        sub_1000C56E0();
        sub_10007A100((uint64_t)&qword_100BF4CC0);
        v3 = sub_1000BC670(v2);
        v5 = sub_1000D0A50(v3, v4);
        sub_1000C3D70(v5, enum case for BinaryDecoder.Error.valueNotSupported(_:));
        sub_1000C2294();
        break;
    }
  }
  sub_1000C1348();
}

void WeatherAvailability.AvailabilityKind.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v0 = sub_1000DC28C();
  type metadata accessor for WeatherAvailability.AvailabilityKind(v0);
  sub_10009D5D4();
  __chkstk_darwin(v1);
  sub_1000C57E0(v2, v4);
  v3 = sub_1000FDC00();
  if (v3 == enum case for WeatherAvailability.AvailabilityKind.available(_:)
    || v3 == enum case for WeatherAvailability.AvailabilityKind.temporarilyUnavailable(_:)
    || v3 == enum case for WeatherAvailability.AvailabilityKind.unsupported(_:)
    || v3 == enum case for WeatherAvailability.AvailabilityKind.unknown(_:))
  {
    sub_100098F20();
    sub_1000D9830();
  }
  else
  {
    sub_1000F4288();
    __break(1u);
  }
}

void sub_1006AB6A0()
{
  sub_1006AB6CC();
}

void sub_1006AB6CC()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t (*v2)(_QWORD);
  void (*v3)(uint64_t);
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t *v18;

  sub_1000BE9DC();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  sub_1000BE9A8(v5, v9);
  sub_1006B94DC();
  __chkstk_darwin(v10);
  v11 = sub_1006B9A00();
  v4(v11);
  if (!v0)
  {
    v12 = static String.read(from:)(v6);
    v14 = v13;
    v15 = sub_10011E3D0();
    sub_10009C94C(v15, v16, v17);
    v18 = (uint64_t *)(v8 + *(int *)(v2(0) + 20));
    *v18 = v12;
    v18[1] = v14;
  }
  sub_1006B9A90();
  sub_100089054();
}

uint64_t sub_1006AB778(uint64_t a1)
{
  return sub_1006AB79C(a1, (uint64_t (*)(void))&WeatherDescription.write(to:));
}

uint64_t sub_1006AB79C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;

  result = a2();
  if (!v3)
  {
    v6 = sub_1006BA8EC();
    return sub_10009DE70(a1, *(_QWORD *)(v2 + *(int *)(v6 + 20)), *(_QWORD *)(v2 + *(int *)(v6 + 20) + 8));
  }
  return result;
}

void sub_1006AB7F0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_100110560();
  v3 = sub_1006BA5DC(v2);
  if (!v0)
  {
    v5 = v3;
    v6 = v4;
    v7 = sub_1000DA104();
    v9 = v8;
    v10 = sub_1000DA104();
    *v1 = v5;
    v1[1] = v6;
    v1[2] = v7;
    v1[3] = v9;
    v1[4] = v10;
    v1[5] = v11;
  }
  sub_1000C60F8();
}

uint64_t sub_1006AB86C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = sub_1000B2F80(a1);
  if (!v2)
  {
    v4 = sub_1000B31A8(result, v1[2], v1[3]);
    return sub_1000B31A8(v4, v1[4], v1[5]);
  }
  return result;
}

void sub_1006AB8A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  sub_1000B4C9C();
  v4 = v3;
  v5 = sub_1006B93C4();
  type metadata accessor for PressureTrend(v5);
  sub_1000C6D9C();
  __chkstk_darwin(v6);
  sub_10009C224();
  static PressureTrend.read(from:)(v4, v7, v8, v9, v10, v11, v12, v13);
  if (!v0)
  {
    v14 = sub_1000DA104();
    v16 = v15;
    v17 = sub_1000DA104();
    v19 = v18;
    v32 = v17;
    v29 = sub_1000DA104();
    v30 = v20;
    v31 = v19;
    sub_1000C3EA0(v4);
    v21 = sub_1000DA104();
    v23 = v22;
    sub_10011DF3C(v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32));
    v24 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
    v25 = (uint64_t *)(v1 + v24[5]);
    *v25 = v14;
    v25[1] = v16;
    v26 = (uint64_t *)(v1 + v24[6]);
    *v26 = v32;
    v26[1] = v31;
    v27 = (uint64_t *)(v1 + v24[7]);
    *v27 = v29;
    v27[1] = v30;
    *(_QWORD *)(v1 + v24[8]) = v33;
    v28 = (uint64_t *)(v1 + v24[9]);
    *v28 = v21;
    v28[1] = v23;
  }
  sub_10009C884();
  sub_1000DF888();
}

void sub_1006ABA34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1006B9690();
  PressureTrend.write(to:)(v2);
  if (!v0)
  {
    v3 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
    v4 = sub_1000CF9A4((uint64_t)v3, *(_QWORD *)(v1 + v3[5]), *(_QWORD *)(v1 + v3[5] + 8));
    v5 = sub_1000CF9A4(v4, *(_QWORD *)(v1 + v3[6]), *(_QWORD *)(v1 + v3[6] + 8));
    sub_1000CF9A4(v5, *(_QWORD *)(v1 + v3[7]), *(_QWORD *)(v1 + v3[7] + 8));
    sub_1006B9DCC(v3[8]);
    v6 = sub_1000E738C();
    sub_1000CF9A4(v6, *(_QWORD *)(v1 + v3[9]), *(_QWORD *)(v1 + v3[9] + 8));
  }
  sub_1000FDBD8();
}

void sub_1006ABAF4(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v5 = static String.read(from:)(a1);
  if (!v2)
  {
    v7 = v5;
    v8 = v6;
    v9 = sub_1000DA104();
    v11 = v10;
    v12 = sub_1000DA104();
    v48 = v13;
    v14 = sub_1000DA104();
    v16 = v15;
    v47 = v14;
    v44 = sub_1000DA104();
    v45 = v16;
    v46 = v17;
    v18 = sub_1000DA104();
    v20 = v19;
    v43 = v18;
    v41 = sub_1000DA104();
    v42 = v21;
    v39 = sub_1000DA104();
    v40 = v22;
    v36 = sub_1000DA104();
    v38 = v23;
    v35 = sub_1000DA104();
    v37 = v24;
    v33 = sub_1000DA104();
    v34 = v25;
    v31 = sub_1000DA104();
    v32 = v26;
    sub_1000DA104();
    sub_1000C3EA0(a1);
    sub_1000DA104();
    *a2 = v7;
    a2[1] = v8;
    a2[2] = v9;
    a2[3] = v11;
    a2[4] = v12;
    a2[5] = v48;
    a2[6] = v47;
    a2[7] = v45;
    a2[8] = v44;
    a2[9] = v46;
    a2[10] = v43;
    a2[11] = v20;
    a2[12] = v41;
    a2[13] = v42;
    a2[14] = v39;
    a2[15] = v40;
    a2[16] = v36;
    a2[17] = v38;
    a2[18] = v35;
    a2[19] = v37;
    a2[20] = v33;
    a2[21] = v34;
    a2[22] = v31;
    a2[23] = v32;
    sub_1006BA748();
    a2[24] = v28;
    a2[25] = v27;
    a2[26] = v49;
    a2[27] = v29;
    a2[28] = v30;
  }
}

void sub_1006ABEDC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = sub_1000B2F80(a1);
  if (!v2)
  {
    v4 = sub_1000B31A8(v3, v1[2], v1[3]);
    v5 = sub_1000B31A8(v4, v1[4], v1[5]);
    v6 = sub_1000B31A8(v5, v1[6], v1[7]);
    v7 = sub_1000B31A8(v6, v1[8], v1[9]);
    v8 = sub_1000B31A8(v7, v1[10], v1[11]);
    v9 = sub_1000B31A8(v8, v1[12], v1[13]);
    v10 = sub_1000B31A8(v9, v1[14], v1[15]);
    v11 = sub_1000B31A8(v10, v1[16], v1[17]);
    v12 = sub_1000B31A8(v11, v1[18], v1[19]);
    v13 = sub_1000B31A8(v12, v1[20], v1[21]);
    v14 = sub_1000B31A8(v13, v1[22], v1[23]);
    sub_1000B31A8(v14, v1[24], v1[25]);
    v15 = sub_1000BEB7C();
    sub_1000B31A8(v15, v1[27], v1[28]);
  }
  sub_1000C1348();
}

#error "1006ABFD4: call analysis failed (funcsize=8)"

void sub_1006ABFE0()
{
  WeatherCondition.write(to:)();
}

void sub_1006ABFF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = sub_1000C0C34();
  type metadata accessor for WeatherConditionBackgroundTimeData(v2);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_10009E4D4();
  sub_1006BA4E4();
  sub_1006AC14C();
  if (!v1)
    sub_10009F7BC(v0, v4, type metadata accessor for WeatherConditionBackgroundTimeData);
  sub_1006B9D70();
}

void sub_1006AC058()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000BE9DC();
  sub_1006B9FE8(v2);
  if (!v0)
  {
    sub_1006B9644();
    sub_1006B9C68();
    v3 = sub_1000BA294(&qword_100BC3370);
    sub_1000C67A8((uint64_t)&unk_100BFCBF8);
    v5 = v4;
    sub_1000C67A8((uint64_t)&unk_100BFCC00);
    sub_1000FEC5C(v1, v3, v5);
    sub_1006B96D8();
    v6 = sub_1000BA294(&qword_100BC3378);
    sub_1000D02A0((uint64_t)&unk_100BFCC08);
    v8 = v7;
    sub_1000D02A0((uint64_t)&unk_100BFCC10);
    sub_1000FEC5C(v1, v6, v8);
  }
  sub_100089054();
}

void sub_1006AC14C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_100099310();
  v5 = v4;
  v7 = v6;
  sub_1000BA294(&qword_100BC3378);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100099234();
  sub_1000BA294(&qword_100BC3370);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100098778();
  sub_10009C7D0();
  __chkstk_darwin(v12);
  sub_1000B3BE8();
  sub_1006BA1CC(v5);
  if (!v1)
  {
    v20 = v3;
    v19 = v7;
    v13 = type metadata accessor for Elevation(0);
    sub_10011DFBC((uint64_t)&unk_100BFCBF8);
    sub_10011DFBC((uint64_t)&unk_100BFCC00);
    sub_1006B9758(v5, v13);
    v14 = type metadata accessor for BackgroundMoonData(0);
    sub_1006B9224((uint64_t)&unk_100BFCC08);
    sub_1006B9224((uint64_t)&unk_100BFCC10);
    sub_1006B9758(v5, v14);
    v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 32);
    v16 = v19;
    sub_1000C5B18(v19, v2, v15);
    v17 = sub_1006B9644();
    sub_10009E8CC((uint64_t)v11, v16 + *(int *)(v17 + 20), &qword_100BC3370);
    sub_10009E8CC(v20, v16 + *(int *)(v17 + 24), &qword_100BC3378);
  }
  sub_10009EDB4();
  sub_1000B44B0();
}

void static WeatherImportance.read(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_1006ADD7C(a1, (uint64_t)&enum case for WeatherImportance.high(_:), (uint64_t)&type metadata accessor for WeatherImportance, (uint64_t)&enum case for WeatherImportance.low(_:), (uint64_t)&enum case for WeatherImportance.normal(_:), a6, a7, a8, vars0, vars8, SWORD2(vars8), SBYTE6(vars8), SHIBYTE(vars8));
}

#error "1006AC384: call analysis failed (funcsize=13)"

uint64_t static DayPartForecast.read(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v55 = a2;
  sub_1000BA294(&qword_100BCB938);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  v54 = sub_10009ED50((uint64_t)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v53 = *(_QWORD *)(v54 - 8);
  sub_10009D98C();
  __chkstk_darwin(v10);
  sub_10009511C((uint64_t)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v58 = sub_1000BA294(&qword_100BCB0A8);
  v57 = *(_QWORD *)(v58 - 8);
  sub_10009D98C();
  __chkstk_darwin(v12);
  v56 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v14);
  sub_100079F7C();
  v59 = v15;
  v16 = sub_10009E260();
  v60 = *(_QWORD *)(v16 - 8);
  v61 = v16;
  sub_10009D98C();
  __chkstk_darwin(v17);
  v64 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100087944();
  v62 = *(_QWORD *)(v19 - 8);
  v63 = v19;
  sub_10009D98C();
  __chkstk_darwin(v20);
  sub_1000ED02C(v21, v46);
  v22 = sub_1000BA294(&qword_100BC4E68);
  v66 = *(_QWORD *)(v22 - 8);
  v67 = v22;
  sub_10009D98C();
  __chkstk_darwin(v23);
  sub_1006B93F4();
  __chkstk_darwin(v24);
  v26 = (char *)&v46 - v25;
  v27 = sub_1006B9148();
  sub_1000BD980();
  __chkstk_darwin(v28);
  v29 = sub_100099574();
  v30 = type metadata accessor for CloudCoverByAltitude(v29);
  sub_100099300();
  __chkstk_darwin(v31);
  sub_100098694();
  v68 = a1;
  v32 = v69;
  result = static FixedSizeTypeBinaryCodable.read(from:)(a1);
  if (!v32)
  {
    v47 = v2;
    v48 = v26;
    v49 = v3;
    v50 = v27;
    v51 = v6;
    v52 = v5;
    v69 = v30;
    v34 = v68;
    static CloudCoverByAltitude.read(from:)(v68);
    static WeatherCondition.read(from:)(v34);
    v46 = v4;
    v35 = sub_1000C1780(v34);
    v36 = sub_100079FE8(v35, (unint64_t *)&qword_100BC5658, NSUnitTemperature_ptr);
    sub_1006BA46C();
    Measurement.init(value:unit:)(v37, v36);
    sub_1000C1780(v34);
    sub_1006BA46C();
    sub_1000F4510();
    Measurement.init(value:unit:)(v38, v39);
    static Precipitation.read(from:)(v34);
    static PrecipitationAmountByType.read(from:)();
    sub_1000C3EA0(v68);
    sub_1000C3EA0(v68);
    sub_10003BDD4();
    v40 = sub_10003BDD4();
    sub_100079FE8(v40, (unint64_t *)&qword_100BCB0D8, NSUnitLength_ptr);
    sub_1006BA1D4(v68);
    sub_1006B9AA4(v41);
    sub_10003BDD4();
    sub_1006BA1D4(v68);
    sub_1006B99BC();
    sub_1006B9AA4(v42);
    static Wind.read(from:)();
    v43 = sub_10003BDD4();
    sub_100079FE8(v43, (unint64_t *)&qword_100BCB990, NSUnitSpeed_ptr);
    static NSUnitSpeed.read(from:)(v68);
    sub_1000C4CA8(v44);
    sub_1006BA8CC();
    v45 = sub_1006BA6BC();
    return DayPartForecast.init(cloudCover:cloudCoverByAltitude:condition:highTemperature:lowTemperature:precipitation:precipitationAmountByType:precipitationChance:maximumHumidity:minimumHumidity:maximumVisibility:minimumVisibility:wind:highWindSpeed:)(v45, v51, v48, v47, v65, v64, v59, v56);
  }
  return result;
}

void DayPartForecast.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  char *v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char *v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  sub_100099310();
  v67 = v2;
  v68 = v6;
  v7 = sub_1000BA294(&qword_100BCB938);
  v51 = *(_QWORD *)(v7 - 8);
  v52 = v7;
  sub_10009D98C();
  __chkstk_darwin(v8);
  v50 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1006B963C();
  v53 = *(_QWORD *)(v10 - 8);
  v54 = v10;
  sub_10009D98C();
  __chkstk_darwin(v11);
  sub_100099B38(v12, v46);
  v13 = sub_1000BA294(&qword_100BCB0A8);
  v57 = *(_QWORD *)(v13 - 8);
  v58 = v13;
  sub_10009D98C();
  __chkstk_darwin(v14);
  v55 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v16);
  v56 = (char *)&v46 - v17;
  v18 = sub_10009E260();
  v59 = *(_QWORD *)(v18 - 8);
  v60 = v18;
  sub_10009D98C();
  __chkstk_darwin(v19);
  v61 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100087944();
  v62 = *(_QWORD *)(v21 - 8);
  v63 = v21;
  sub_10009D98C();
  __chkstk_darwin(v22);
  sub_100098678(v23, v46);
  v24 = sub_1000BA294(&qword_100BC4E68);
  v64 = *(_QWORD *)(v24 - 8);
  v65 = v24;
  sub_10009D98C();
  __chkstk_darwin(v25);
  sub_10009DF40();
  __chkstk_darwin(v26);
  v28 = (char *)&v46 - v27;
  v29 = sub_1006B9148();
  sub_100098BB4();
  __chkstk_darwin(v30);
  sub_1006B989C();
  sub_1000C0120();
  __chkstk_darwin(v31);
  sub_10007A130();
  v66 = v1;
  DayPartForecast.cloudCover.getter();
  v32 = v67;
  FixedSizeTypeBinaryCodable.write(to:)(v68);
  if (!v32)
  {
    v49 = v3;
    v67 = v29;
    v48 = v28;
    v47 = v5;
    sub_1006B9470();
    DayPartForecast.cloudCoverByAltitude.getter();
    v33 = v68;
    CloudCoverByAltitude.write(to:)();
    if (v28)
    {
      v34 = sub_1006BA284();
LABEL_8:
      v36(v34, v35);
      goto LABEL_9;
    }
    sub_1001FB188(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
    sub_10011DDE8();
    DayPartForecast.condition.getter();
    WeatherCondition.write(to:)();
    if (!v0)
    {
      sub_1006BA45C(v49);
      v37 = v48;
      sub_10011DDE8();
      DayPartForecast.highTemperature.getter();
      sub_1006B97D4();
      v38 = v65;
      v39 = *(void (**)(char *, uint64_t))(v64 + 8);
      v39(v37, v65);
      v40 = v33;
      v41 = v47;
      sub_1006B9470();
      DayPartForecast.lowTemperature.getter();
      sub_1006B9304();
      v39(v41, v38);
      sub_10011DDE8();
      DayPartForecast.precipitation.getter();
      Precipitation.write(to:)();
      if (v39)
      {
        v34 = sub_1006BA924();
      }
      else
      {
        sub_1000D13D4(v62);
        sub_10011DDE8();
        DayPartForecast.precipitationAmountByType.getter();
        PrecipitationAmountByType.write(to:)();
        sub_1000D13D4(v59);
        sub_10011DDE8();
        DayPartForecast.precipitationChance.getter();
        sub_1000ED058(v40);
        sub_10011DDE8();
        DayPartForecast.maximumHumidity.getter();
        sub_1000ED058(v40);
        sub_10011DDE8();
        DayPartForecast.minimumHumidity.getter();
        sub_1000ED058(v40);
        v42 = v56;
        sub_10011DDE8();
        DayPartForecast.maximumVisibility.getter();
        sub_1006B97D4();
        v43 = *(void (**)(char *, uint64_t))(v57 + 8);
        v43(v42, v58);
        v44 = v55;
        sub_1006B9470();
        DayPartForecast.minimumVisibility.getter();
        sub_1006B9304();
        v43(v44, v58);
        sub_1006B9470();
        DayPartForecast.wind.getter();
        Wind.write(to:)();
        if (v42)
        {
          sub_1006B93D0();
          goto LABEL_9;
        }
        v45 = sub_1006B93D0();
        DayPartForecast.highWindSpeed.getter(v45);
        sub_1006B9304();
        v34 = sub_10011738C();
      }
      goto LABEL_8;
    }
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v4, v67);
  }
LABEL_9:
  sub_10009E33C();
  sub_1000B44B0();
}

#error "1006AD054: call analysis failed (funcsize=41)"

void HistoricalComparisons.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  sub_100099310();
  sub_1000D0A5C();
  sub_1000AE898();
  __chkstk_darwin(v3);
  sub_100079FBC();
  HistoricalComparisons.comparisons.getter();
  v4 = sub_1006BA298();
  type metadata accessor for HistoricalComparison(v4);
  sub_1006B9224((uint64_t)&unk_100BFC9A8);
  sub_1006B9DB8((uint64_t)&unk_100BFC9B0);
  sub_1006B9208(v5);
  v6 = sub_10009D2E0();
  if (!v0)
  {
    HistoricalComparisons.metadata.getter(v6);
    sub_1006BA2C4();
    sub_100098820(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  }
  sub_10011E690();
  sub_1000B44B0();
}

void static HistoricalComparison.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_100099310();
  v2 = v1;
  sub_1000BA294(&qword_100BDDF88);
  sub_1000AE898();
  __chkstk_darwin(v3);
  sub_10009DF40();
  __chkstk_darwin(v4);
  sub_1001FB600();
  sub_1000BA294(&qword_100BCB238);
  sub_100098B6C();
  __chkstk_darwin(v5);
  sub_1000C24A0();
  __chkstk_darwin(v6);
  sub_1000B2FD8();
  static FixedSizeTypeBinaryCodable.read(from:)(v2);
  if (!v0)
  {
    sub_1006B9AE4();
    if (!(!v9 & v8))
      __asm { BR              X10 }
    v10 = sub_1000C56E0();
    sub_10007A100((uint64_t)&qword_100BF4CC0);
    v12 = sub_10009D46C(v10, v11);
    v14 = sub_1006B9678(v12, v13);
    sub_1000AE9B0(v14, enum case for BinaryDecoder.Error.valueNotSupported(_:));
    sub_10009C808();
  }
  sub_10009E33C();
  sub_1000B44B0();
}

void sub_1006AD2A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1006AFF54(a1, v2);
  if (!v1)
  {
    sub_1006B99E0();
    v3 = enum case for HistoricalComparison.lowTemperature(_:);
    v4 = type metadata accessor for HistoricalComparison(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(v2, v3, v4);
  }
  JUMPOUT(0x1006AD1FCLL);
}

void sub_1006AD2D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  sub_1006B0158(a1, v3);
  if (!v1)
  {
    v4 = sub_1006BA8AC();
    sub_10009BCF8(v4, v5);
    v6 = enum case for HistoricalComparison.precipitationAmount(_:);
    v7 = type metadata accessor for HistoricalComparison(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v2, v6, v7);
  }
  JUMPOUT(0x1006AD1FCLL);
}

void sub_1006AD2F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);

  sub_1006B0158(a1, v2);
  if (!v1)
  {
    v3 = sub_1006BA8AC();
    v4(v3, v2);
    JUMPOUT(0x1006AD320);
  }
  JUMPOUT(0x1006AD1FCLL);
}

void HistoricalComparison.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  int v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  sub_100099310();
  v35 = v0;
  v6 = v5;
  v7 = sub_1000BA294(&qword_100BDDF88);
  v33 = *(_QWORD *)(v7 - 8);
  v34 = v7;
  sub_10009D98C();
  __chkstk_darwin(v8);
  v32 = (uint64_t)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v10);
  sub_100079F7C();
  v31 = v11;
  v12 = sub_1000BA294(&qword_100BCB238);
  sub_1000AE898();
  __chkstk_darwin(v13);
  sub_1000BEDA4();
  __chkstk_darwin(v14);
  v15 = sub_1006B9A34();
  v16 = type metadata accessor for HistoricalComparison(v15);
  sub_10009D5D4();
  __chkstk_darwin(v17);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000C1A00();
  sub_10008908C(v20, v21, v22);
  v23 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v19, v16);
  if (v23 == enum case for HistoricalComparison.highTemperature(_:))
  {
    sub_100098748((uint64_t)v19, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
    sub_100099B30(v4, (uint64_t)v19, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32));
    sub_1006B9138(v6);
    if (!v0)
      sub_1006AF9B8(v6);
    v24 = sub_1006BA0F4();
LABEL_9:
    v26 = v12;
LABEL_17:
    v25(v24, v26);
    sub_10009EDB4();
    sub_1000B44B0();
    return;
  }
  if (v23 == enum case for HistoricalComparison.lowTemperature(_:))
  {
    sub_100098748((uint64_t)v19, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
    sub_100099B30(v3, (uint64_t)v19, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32));
    sub_1006B9DC4(v6);
    if (!v0)
      sub_1006AF9B8(v6);
    v25 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
    v24 = v3;
    goto LABEL_9;
  }
  if (v23 == enum case for HistoricalComparison.precipitationAmount(_:))
  {
    sub_100098748((uint64_t)v19, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
    v28 = v33;
    v27 = v34;
    v29 = v31;
    sub_10009C94C(v31, (uint64_t)v19, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 32));
LABEL_14:
    sub_1006B9DC4(v6);
    if (!v0)
      sub_1006AFBA0(v6);
    v25 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v24 = v29;
    v26 = v27;
    goto LABEL_17;
  }
  if (v23 == enum case for HistoricalComparison.snowfallAmount(_:))
  {
    sub_100098748((uint64_t)v19, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
    v29 = v32;
    v28 = v33;
    v27 = v34;
    sub_10009C94C(v32, (uint64_t)v19, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 32));
    goto LABEL_14;
  }
  _diagnoseUnexpectedEnumCase<A>(type:)(v16, v16);
  __break(1u);
}

void static Deviation.read(from:)(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000C1780(a1);
  if (!v1)
  {
    sub_1006BA014();
    if (!(!v4 & v3))
      __asm { BR              X10 }
    sub_1000C56E0();
    sub_10007A100((uint64_t)&qword_100BF4CC0);
    v6 = sub_1000BC670(v5);
    v8 = sub_1000D0A50(v6, v7);
    sub_1000C3D70(v8, enum case for BinaryDecoder.Error.valueNotSupported(_:));
    sub_1000C2294();
  }
  sub_1000C1348();
}

void Deviation.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v0 = sub_1000DC28C();
  type metadata accessor for Deviation(v0);
  sub_10009D5D4();
  __chkstk_darwin(v1);
  sub_1000C57E0(v2, v4);
  v3 = sub_1000FDC00();
  if (v3 == enum case for Deviation.muchHigher(_:)
    || v3 == enum case for Deviation.higher(_:)
    || v3 == enum case for Deviation.normal(_:)
    || v3 == enum case for Deviation.lower(_:)
    || v3 == enum case for Deviation.muchLower(_:))
  {
    sub_100098F20();
    sub_1000D9830();
  }
  else
  {
    sub_1000F4288();
    __break(1u);
  }
}

void static HistoricalFacts.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_1000C0C34();
  type metadata accessor for HistoricalFact(v1);
  sub_1000D02A0((uint64_t)&unk_100BFC9B8);
  sub_1000D02A0((uint64_t)&unk_100BFC9C0);
  v3 = sub_1006B9374(v2);
  if (!v0)
    HistoricalFacts.init(facts:)(v3);
  sub_1000D9830();
}

void HistoricalFacts.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1006BA564();
  HistoricalFacts.facts.getter(v0);
  v1 = sub_10009C82C();
  type metadata accessor for HistoricalFact(v1);
  sub_1000D02A0((uint64_t)&unk_100BFC9B8);
  sub_1000D02A0((uint64_t)&unk_100BFC9C0);
  sub_10011AC30(v2);
  sub_1000986C4();
  sub_1000D9830();
}

void static HistoricalFact.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  sub_100099310();
  v5 = v4;
  sub_1000D0A5C();
  sub_1000B42B0();
  __chkstk_darwin(v6);
  v7 = sub_1000BE9F0();
  type metadata accessor for HistoricalFact.Period(v7);
  sub_100099300();
  __chkstk_darwin(v8);
  v9 = sub_1000992A8();
  type metadata accessor for HistoricalFact.Condition(v9);
  sub_10009D5D4();
  __chkstk_darwin(v10);
  sub_1000B3BE8();
  static HistoricalFact.Condition.read(from:)(v5, v11, v12, v13, v14, v15, v16, v17);
  if (!v0)
  {
    v52 = v3;
    static HistoricalFact.Period.read(from:)(v5, v18, v19, v20, v21, v22, v23, v24);
    v25 = sub_1006B9F0C();
    v27 = v26;
    v28 = sub_1006B9F0C();
    v30 = v29;
    v51 = v28;
    v43 = sub_1006B9F0C();
    v49 = v31;
    v47 = type metadata accessor for HistoricalFact.Argument(0);
    sub_10007A100((uint64_t)&unk_100BFC9C8);
    v45 = v32;
    sub_10007A100((uint64_t)&unk_100BFC9D0);
    v34 = COERCE_DOUBLE(static Array<A>.read(from:)(v5, v47, v45, v33));
    sub_1006B9F18(v35, v36, v37, v38, v39, v40, v41, v42, *(double *)&v43, *(double *)&v25, v34, v49);
    HistoricalFact.init(condition:period:token:heading:message:arguments:metadata:)(v52, v2, v46, v27, v51, v30, v44, v50, v48, v1);
  }
  sub_1000DB350();
  sub_1000B44B0();
}

void HistoricalFact.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  sub_100099310();
  v6 = sub_10011E270();
  type metadata accessor for WeatherMetadata(v6);
  sub_10009D98C();
  __chkstk_darwin(v7);
  v8 = sub_10008909C();
  v9 = type metadata accessor for HistoricalFact.Period(v8);
  sub_1000C6D9C();
  __chkstk_darwin(v10);
  v11 = sub_1000C4668();
  type metadata accessor for HistoricalFact.Condition(v11);
  sub_1000AE898();
  __chkstk_darwin(v12);
  sub_1006B930C();
  HistoricalFact.condition.getter(v13);
  HistoricalFact.Condition.write(to:)();
  if (v1)
  {
    v14 = sub_1000DF794();
LABEL_4:
    v16(v14, v15);
    goto LABEL_5;
  }
  v17 = sub_10007A170(v0, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  HistoricalFact.period.getter(v17);
  HistoricalFact.Period.write(to:)(v2);
  sub_1000BE774(v5, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_1006BA230();
  v18 = HistoricalFact.token.getter();
  sub_1006B9240(v18, v19);
  sub_1000986E8();
  sub_1006BA230();
  v21 = HistoricalFact.heading.getter(v20);
  sub_1006B9240(v21, v22);
  sub_1000986E8();
  sub_1006BA230();
  v23 = HistoricalFact.message.getter();
  sub_1006B9240(v23, v24);
  sub_1000986E8();
  sub_1006BA230();
  HistoricalFact.arguments.getter();
  v25 = sub_1000BDD30();
  v26 = type metadata accessor for HistoricalFact.Argument(v25);
  sub_1000C67A8((uint64_t)&unk_100BFC9C8);
  v28 = v27;
  sub_1000C67A8((uint64_t)&unk_100BFC9D0);
  v29 = sub_1006B9F68();
  Array<A>.write(to:)(v29, v30, v26, v28, v31);
  sub_1000986E8();
  if (!v9)
  {
    sub_1006BA230();
    HistoricalFact.metadata.getter();
    WeatherMetadata.write(to:)();
    v14 = sub_10011738C();
    goto LABEL_4;
  }
LABEL_5:
  sub_10009E33C();
  sub_1000B44B0();
}

void static HistoricalFact.Period.read(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_1006ADD7C(a1, (uint64_t)&enum case for HistoricalFact.Period.today(_:), (uint64_t)&type metadata accessor for HistoricalFact.Period, (uint64_t)&enum case for HistoricalFact.Period.month(_:), (uint64_t)&enum case for HistoricalFact.Period.streak(_:), a6, a7, a8, vars0, vars8, SWORD2(vars8), SBYTE6(vars8), SHIBYTE(vars8));
}

void sub_1006ADD7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_100110560();
  sub_1006BA5C8();
  sub_1000C1780(v14);
  if (!v13)
  {
    if (a13 == 3 || a13 == 2 || a13 == 1)
    {
      v15 = sub_1006BA8EC();
      sub_1000C229C(v15);
    }
    else
    {
      sub_1000C56E0();
      sub_10007A100((uint64_t)&qword_100BF4CC0);
      v17 = sub_1000BC670(v16);
      v19 = sub_1000D0A50(v17, v18);
      sub_1000C3D70(v19, enum case for BinaryDecoder.Error.valueNotSupported(_:));
      sub_1000C2294();
    }
  }
  sub_1000C60F8();
}

#error "1006ADE68: call analysis failed (funcsize=13)"

void sub_1006ADE74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t (*v29)(_QWORD);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  int v37;

  sub_100099310();
  a19 = v20;
  a20 = v21;
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v30 = *(_QWORD *)(sub_1000BE9A8(v28, v29) - 8);
  sub_100098F2C();
  __chkstk_darwin(v31);
  v33 = (char *)&a9 - v32;
  v34 = sub_1006B9E3C();
  sub_1000B2FD0(v34, v35, v36);
  v37 = sub_1000C13A8((uint64_t)v33, *(uint64_t (**)(uint64_t, uint64_t))(v30 + 88));
  if (v37 == *v27)
  {
    sub_1006B9CD0();
LABEL_7:
    sub_100098F20();
    sub_1000B44B0();
    return;
  }
  if (v37 == *v25)
  {
    sub_1006B9A14();
    goto LABEL_7;
  }
  if (v37 == *v23)
  {
    sub_1006B99B0();
    goto LABEL_7;
  }
  sub_1000F4288();
  __break(1u);
}

void static HistoricalFact.Condition.read(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_1006ADF9C(a1, (uint64_t)&enum case for HistoricalFact.Condition.temperature(_:), (uint64_t)&type metadata accessor for HistoricalFact.Condition, (uint64_t)&enum case for HistoricalFact.Condition.precipitation(_:), a5, a6, a7, a8, vars0, vars8, SWORD2(vars8), SBYTE6(vars8), SHIBYTE(vars8));
}

void sub_1006ADF9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1006BA034();
  sub_1006BA5C8();
  sub_1000C1780(v14);
  if (!v13)
  {
    if (a13 == 2 || a13 == 1)
    {
      v15 = sub_1006BA8EC();
      sub_1000C229C(v15);
    }
    else
    {
      sub_1000C56E0();
      sub_10007A100((uint64_t)&qword_100BF4CC0);
      v17 = sub_1000BC670(v16);
      v19 = sub_1000D0A50(v17, v18);
      sub_1000C3D70(v19, enum case for BinaryDecoder.Error.valueNotSupported(_:));
      sub_1000C2294();
    }
  }
  sub_1006B910C();
}

void HistoricalFact.Condition.write(to:)()
{
  sub_1006AE078();
}

void sub_1006AE078()
{
  uint64_t v0;
  _DWORD *v1;
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  int v13;
  _BYTE v14[16];

  sub_1000BE9DC();
  v2 = v1;
  v4 = v3;
  sub_1000BE9A8(v5, v6);
  sub_1006B94DC();
  __chkstk_darwin(v7);
  v9 = &v14[-v8];
  v10 = sub_1006B9FA0();
  sub_1000B2FD0(v10, v11, v12);
  v13 = sub_1000C13A8((uint64_t)v9, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 88));
  if (v13 == *v4)
  {
    v14[14] = 1;
LABEL_5:
    sub_100098F20();
    sub_100089054();
    return;
  }
  if (v13 == *v2)
  {
    sub_1006BA0A8();
    goto LABEL_5;
  }
  sub_1000F4288();
  __break(1u);
}

void static HistoricalFact.Argument.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;

  sub_1000B4C9C();
  v25 = v3;
  v5 = v4;
  sub_1000BA294(&qword_100BCB0A8);
  sub_1000C6D9C();
  __chkstk_darwin(v6);
  sub_1000BEDA4();
  __chkstk_darwin(v7);
  sub_1000B2FD8();
  v8 = sub_1000BA294(&qword_100BC4E68);
  sub_100098B6C();
  __chkstk_darwin(v9);
  sub_100079FBC();
  v10 = &type metadata for UInt8;
  static FixedSizeTypeBinaryCodable.read(from:)(v5);
  if (!v0)
  {
    switch(v27)
    {
      case 1:
        sub_1000C1780(v5);
        *v25 = v26;
        goto LABEL_9;
      case 2:
        v16 = sub_1000C1780(v5);
        sub_1006B9EEC(v16, (unint64_t *)&qword_100BC5658, NSUnitTemperature_ptr);
        v17 = sub_1006BA530();
        static NSUnitTemperature.read(from:)(v17);
        sub_1006B9494(v18);
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(v2 + 32))(v25, v1, v8);
        goto LABEL_9;
      case 3:
      case 4:
        v19 = sub_1000C1780(v5);
        v10 = (void *)sub_1006B9EEC(v19, (unint64_t *)&qword_100BCB0D8, NSUnitLength_ptr);
        sub_1006BA1D4(v5);
        sub_1006B9494(v20);
        sub_1006B9ACC();
        goto LABEL_9;
      case 5:
        sub_1000C1780(v5);
        v21 = static String.read(from:)(v5);
        *v25 = v26;
        v25[1] = v21;
        v25[2] = v22;
LABEL_9:
        v23 = sub_10011E00C();
        v24 = type metadata accessor for HistoricalFact.Argument(v23);
        (*(void (**)(_QWORD *, void *, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v25, v10, v24);
        break;
      default:
        v11 = sub_1000C56E0();
        sub_10007A100((uint64_t)&qword_100BF4CC0);
        v13 = sub_10009D46C(v11, v12);
        v15 = sub_1006B9678(v13, v14);
        sub_1000AE9B0(v15, enum case for BinaryDecoder.Error.valueNotSupported(_:));
        sub_10009C808();
        break;
    }
  }
  sub_1000DF888();
}

void HistoricalFact.Argument.write(to:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  sub_1000B4C9C();
  v39 = v5;
  v40 = v6;
  v8 = v7;
  v9 = sub_1000BA294(&qword_100BCB0A8);
  v36 = *(_QWORD *)(v9 - 8);
  v37 = v9;
  sub_10009D98C();
  __chkstk_darwin(v10);
  v34 = (uint64_t)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v12);
  sub_100079F7C();
  v35 = v13;
  sub_1000BA294(&qword_100BC4E68);
  sub_1000AE898();
  __chkstk_darwin(v14);
  v15 = sub_1000C4668();
  v16 = type metadata accessor for HistoricalFact.Argument(v15);
  sub_1000BD980();
  __chkstk_darwin(v17);
  sub_1000BCED8();
  v18 = sub_1000C1A00();
  v19(v18);
  v20 = (*(uint64_t (**)(uint64_t *, uint64_t))(v2 + 88))(v0, v16);
  if (v20 == enum case for HistoricalFact.Argument.integer(_:))
  {
    sub_10007A170((uint64_t)v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
    v21 = *v0;
    LOBYTE(v38) = 1;
    sub_1006B91F8(v8);
    if (!v1)
    {
      v38 = v21;
      sub_1000DB074(v8);
    }
    goto LABEL_16;
  }
  v33 = v1;
  if (v20 == enum case for HistoricalFact.Argument.temperature(_:))
  {
    sub_10007A170((uint64_t)v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
    sub_10007A0A8(v4, (uint64_t)v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
    LOBYTE(v38) = 2;
    sub_1006BA060();
    if (!v1)
      sub_1006B9304();
    v22 = sub_1006B9E3C();
LABEL_15:
    v24(v22, v23);
LABEL_16:
    sub_10009EDB4();
    sub_1000DF888();
    return;
  }
  if (v20 == enum case for HistoricalFact.Argument.precipitationAmount(_:))
  {
    sub_10007A170((uint64_t)v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
    v26 = v35;
    v25 = v36;
    v27 = v37;
    sub_10009C94C(v35, (uint64_t)v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 32));
    v28 = 3;
LABEL_12:
    LOBYTE(v38) = v28;
    sub_1006BA060();
    if (!v1)
      sub_1006B9304();
    v24 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v22 = v26;
    v23 = v27;
    goto LABEL_15;
  }
  if (v20 == enum case for HistoricalFact.Argument.snowfallAmount(_:))
  {
    sub_10007A170((uint64_t)v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
    v25 = v36;
    v27 = v37;
    v26 = v34;
    sub_10009C94C(v34, (uint64_t)v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 32));
    v28 = 4;
    goto LABEL_12;
  }
  if (v20 == enum case for HistoricalFact.Argument.date(_:))
  {
    sub_10007A170((uint64_t)v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
    v29 = *v0;
    v30 = v0[2];
    LOBYTE(v38) = 5;
    sub_1006B91F8(v8);
    if (!v1)
    {
      v38 = v29;
      sub_1000DB074(v8);
      v31 = sub_1000878C4();
      sub_1000E7D08(v31, v32, v30);
    }
    sub_1000986E8();
    goto LABEL_16;
  }
  _diagnoseUnexpectedEnumCase<A>(type:)(v16, v16);
  __break(1u);
}

void static WeatherStatisticsModel.read(from:)()
{
  uint64_t v0;
  double v1;
  double v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t v42;

  sub_100099310();
  v6 = v5;
  sub_1000D0A5C();
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_1000D9C54(v8, v34);
  sub_1000BA294(&qword_100BCB128);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_10009DE08(v10, v35);
  sub_1000BA294(&qword_100BCB240);
  sub_10009D98C();
  __chkstk_darwin(v11);
  sub_1000986CC(v12, v36);
  sub_1000BA294(&qword_100BC4E70);
  sub_1000C0120();
  __chkstk_darwin(v13);
  sub_10007A130();
  sub_1000BA294(&qword_100BCB108);
  sub_1000BD980();
  __chkstk_darwin(v14);
  sub_100094EC4();
  sub_1000BA294(&qword_100BD10F8);
  sub_10009D5D4();
  __chkstk_darwin(v15);
  sub_1006B9E90();
  sub_1006B100C(v6, v16);
  if (!v0)
  {
    sub_1006B0B00(v6, v1);
    sub_1006B159C(v6, v4);
    v40 = v2;
    sub_1006B178C(v6, v41);
    v17 = type metadata accessor for DayPrecipitationSummary(0);
    sub_10007A100((uint64_t)&unk_100BFC9D8);
    v38 = v18;
    sub_10007A100((uint64_t)&unk_100BFC9E0);
    v20 = sub_1006B99F8(v6, v17, v38, v19);
    static WeatherMetadata.read(from:)(v21, v22, v23, v24, v25, v26, v27, v28, *(double *)&v17, *(double *)&v20, v40, 0.0);
    sub_1006B9200((uint64_t)&unk_100BFC9E8);
    v30 = v29;
    sub_1006B9200((uint64_t)&unk_100BFC9F0);
    v32 = v31;
    sub_1006B9200((uint64_t)&unk_100BFC9F8);
    DailyWeatherSummary.init(days:metadata:)(v39, v42, v37, v30, v32, v33);
    ((void (*)(uint64_t, _QWORD, _QWORD))WeatherStatisticsModel.init(hourlyTemperatureStatistics:dailyPrecipitationStatistics:monthlyTemperatureStatistics:monthlyPrecipitationStatistics:dailyPrecipitationSummary:))(v3, *(_QWORD *)&v1, *(_QWORD *)&v4);
  }
  sub_1000B44B0();
}

void WeatherStatisticsModel.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  sub_100099310();
  v3 = v2;
  v23 = *(_QWORD *)(sub_1000BA294(&qword_100BCB128) - 8);
  sub_10009D98C();
  __chkstk_darwin(v4);
  sub_10009DA80(v5, v21);
  v24 = *(_QWORD *)(sub_1000BA294(&qword_100BCB240) - 8);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_10009DE08(v7, v22);
  v25 = *(_QWORD *)(sub_1000BA294(&qword_100BC4E70) - 8);
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_100079F58();
  sub_1000BA294(&qword_100BCB108);
  sub_100098B6C();
  __chkstk_darwin(v9);
  sub_10009E540();
  sub_1000BA294(&qword_100BD10F8);
  sub_1000C6D9C();
  __chkstk_darwin(v10);
  sub_1000E78C0();
  WeatherStatisticsModel.hourlyTemperatureStatistics.getter(v11);
  sub_1006B0E3C(v3);
  v12 = sub_1006BA008();
  v14 = sub_100098748(v12, v13);
  if (!v0)
  {
    WeatherStatisticsModel.dailyPrecipitationStatistics.getter(v14);
    sub_1006B0930(v3);
    v15 = sub_1000EFA30(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    WeatherStatisticsModel.monthlyTemperatureStatistics.getter(v15);
    v16 = sub_1006BA2D4();
    sub_1006B11FC(v16);
    v17 = sub_1000C51C8(v25);
    WeatherStatisticsModel.monthlyPrecipitationStatistics.getter(v17);
    v18 = sub_1006BA2D4();
    sub_1006B13CC(v18);
    v19 = sub_1000C51C8(v24);
    WeatherStatisticsModel.dailyPrecipitationSummary.getter(v19);
    v20 = sub_1006BA2D4();
    sub_1006B0CF0(v20);
    sub_1000C51C8(v23);
  }
  sub_1006B9B2C();
  sub_1000B44B0();
}

#error "1006AEC54: call analysis failed (funcsize=7)"

void DayPrecipitationStatistics.write(to:)()
{
  sub_1006AF4A4();
}

void static DayTemperatureStatistics.read(from:)()
{
  sub_1006AF608();
}

void DayTemperatureStatistics.write(to:)()
{
  sub_1006AF788();
}

void static DayPrecipitationSummary.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000B4C9C();
  sub_1000BA294(&qword_100BCB0A8);
  sub_1000AE898();
  __chkstk_darwin(v2);
  sub_1000C0CD0();
  __chkstk_darwin(v3);
  sub_100098778();
  sub_10009D5D4();
  __chkstk_darwin(v4);
  sub_1006B9438();
  if (!v0)
  {
    sub_1006BA64C();
    v5 = sub_1006B92D4(v1);
    sub_100079FE8(v5, (unint64_t *)&qword_100BCB0D8, NSUnitLength_ptr);
    sub_1006BA49C();
    sub_1006B96CC(v6);
    sub_1006B92D4(v1);
    sub_1006BA49C();
    sub_1006B96CC(v7);
    ((void (*)(_QWORD))DayPrecipitationSummary.init(date:precipitationAmount:snowfallAmount:))(0);
  }
  sub_1006B9B2C();
  sub_1000DF888();
}

void DayPrecipitationSummary.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100099310();
  sub_1000BA294(&qword_100BCB0A8);
  sub_10009D98C();
  __chkstk_darwin(v2);
  sub_1000C24A0();
  __chkstk_darwin(v3);
  sub_100098778();
  sub_1000AE898();
  __chkstk_darwin(v4);
  sub_1006B9B44();
  DayPrecipitationSummary.date.getter(v5);
  sub_1006B96F4();
  if (v0)
  {
    sub_1001FB188(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  }
  else
  {
    v6 = sub_1001FB188(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    DayPrecipitationSummary.precipitationAmount.getter(v6);
    sub_1006B917C();
    sub_1006B9784();
    sub_1006BA8E0();
    DayPrecipitationSummary.snowfallAmount.getter(v7);
    sub_1006B917C();
    sub_1006BA200();
  }
  sub_1006B93E0();
  sub_1000B44B0();
}

void static DayTemperatureSummary.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000B4C9C();
  sub_1000BA294(&qword_100BC4E68);
  sub_1000AE898();
  __chkstk_darwin(v2);
  sub_1000C0CD0();
  __chkstk_darwin(v3);
  sub_100098778();
  sub_10009D5D4();
  __chkstk_darwin(v4);
  sub_1006B9438();
  if (!v0)
  {
    sub_1006BA64C();
    v5 = sub_1006B92D4(v1);
    sub_100079FE8(v5, (unint64_t *)&qword_100BC5658, NSUnitTemperature_ptr);
    sub_1006BA48C();
    sub_1006B96CC(v6);
    sub_1006B92D4(v1);
    sub_1006BA48C();
    sub_1006B96CC(v7);
    ((void (*)(_QWORD))DayTemperatureSummary.init(date:lowTemperature:highTemperature:))(0);
  }
  sub_1006B9B2C();
  sub_1000DF888();
}

void DayTemperatureSummary.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100099310();
  sub_1000BA294(&qword_100BC4E68);
  sub_10009D98C();
  __chkstk_darwin(v2);
  sub_1000C24A0();
  __chkstk_darwin(v3);
  sub_100098778();
  sub_1000AE898();
  __chkstk_darwin(v4);
  sub_1006B9B44();
  DayTemperatureSummary.date.getter(v5);
  sub_1006B96F4();
  if (v0)
  {
    sub_1001FB188(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  }
  else
  {
    v6 = sub_1001FB188(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    DayTemperatureSummary.lowTemperature.getter(v6);
    sub_1006B917C();
    sub_1006B9784();
    sub_1006BA8E0();
    DayTemperatureSummary.highTemperature.getter(v7);
    sub_1006B917C();
    sub_1006BA200();
  }
  sub_1006B93E0();
  sub_1000B44B0();
}

void static HourTemperatureStatistics.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1006BA558();
  sub_1000BA294(&qword_100BFCA00);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100098694();
  sub_1006B9980(v1);
  if (!v0)
  {
    v3 = sub_1006BA07C();
    sub_1006B1B1C(v3, v4);
    v5 = sub_1000878C4();
    HourTemperatureStatistics.init(hour:percentiles:)(v5);
  }
  sub_1006BA61C();
  sub_1000FDBD8();
}

void HourTemperatureStatistics.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100110560();
  sub_1006BA570();
  sub_1000BA294(&qword_100BFCA00);
  sub_1000C6D9C();
  __chkstk_darwin(v4);
  sub_100094EC4();
  HourTemperatureStatistics.hour.getter(v5);
  sub_1006B91F8(v1);
  if (!v0)
  {
    sub_1006BA820();
    HourTemperatureStatistics.percentiles.getter(v6);
    v7 = sub_1006BA4C4();
    sub_1006B197C(v7);
    sub_100098820(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  }
  sub_1000C60F8();
}

#error "1006AF2EC: call analysis failed (funcsize=7)"

void sub_1006AF2F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_1006B91CC();
  sub_1006BA5B4();
  sub_1000BA294(&qword_100BCB0A8);
  sub_100098B6C();
  __chkstk_darwin(v17);
  sub_1000C0CD0();
  __chkstk_darwin(v18);
  sub_1001FB944();
  sub_1000FDA70(v16);
  if (!v13)
  {
    sub_1000FDA70(v16);
    v19 = sub_1000FDA70(v16);
    sub_100079FE8(v19, (unint64_t *)&qword_100BCB0D8, NSUnitLength_ptr);
    sub_1006BA2B4();
    sub_1006B9AA4(v20);
    sub_1000FDA70(v16);
    sub_1006BA2B4();
    sub_1006B9AA4(v21);
    v12(a12, v15, v14);
  }
  sub_1000E72CC();
}

void MonthPrecipitationStatistics.write(to:)()
{
  sub_1006AF4A4();
}

void sub_1006AF4A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  void (*v5)(void);
  void (*v6)(uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  void (*v15)(void);
  void (*v16)(uint64_t);
  uint64_t v17;

  sub_100099310();
  v15 = v5;
  v16 = v4;
  v7 = v6;
  v9 = v8;
  v17 = sub_1000BA294(&qword_100BCB0A8);
  sub_1000C0120();
  __chkstk_darwin(v10);
  sub_1000C0CD0();
  __chkstk_darwin(v11);
  sub_1006BA0E4();
  v12 = FixedSizeTypeBinaryCodable.write(to:)(v9);
  if (!v1)
  {
    v7(v12);
    v13 = sub_1006BA898(v9);
    v16(v13);
    sub_1006B9140();
    v14 = *(void (**)(uint64_t, uint64_t))(v0 + 8);
    v14(v3, v17);
    sub_1006BA270();
    v15();
    sub_1006B9140();
    v14(v2, v17);
  }
  sub_1006B95F8();
  sub_1000B44B0();
}

void static MonthTemperatureStatistics.read(from:)()
{
  sub_1006AF608();
}

void sub_1006AF608()
{
  void (*v0)(uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1000B4C9C();
  sub_1006BA5B4();
  sub_1000BA294(&qword_100BC4E68);
  sub_100098B6C();
  __chkstk_darwin(v5);
  sub_1000C0CD0();
  __chkstk_darwin(v6);
  sub_1001FB944();
  sub_1000FDA70(v4);
  if (!v1)
  {
    v7 = sub_1000FDA70(v4);
    sub_100079FE8(v7, (unint64_t *)&qword_100BC5658, NSUnitTemperature_ptr);
    sub_1006BA890(v4);
    sub_1006BA5E4(v8);
    sub_1000FDA70(v4);
    sub_1006BA890(v4);
    sub_1006BA5E4(v9);
    v0(v10, v3, v2);
  }
  sub_1006B95F8();
  sub_1000DF888();
}

void MonthTemperatureStatistics.write(to:)()
{
  sub_1006AF788();
}

void sub_1006AF788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  void (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  void (*v11)(uint64_t);

  sub_100099310();
  v10 = v4;
  v11 = v3;
  v6 = v5;
  sub_1000BA294(&qword_100BC4E68);
  sub_100099300();
  __chkstk_darwin(v7);
  sub_1000C0CD0();
  __chkstk_darwin(v8);
  sub_1006BA0E4();
  v9 = FixedSizeTypeBinaryCodable.write(to:)(v6);
  if (!v0)
  {
    v11(v9);
    sub_1006B9140();
    sub_1000D1880(v2);
    sub_1006BA270();
    v10();
    sub_1006B9140();
    sub_1000D1880(v1);
  }
  sub_1006B95F8();
  sub_1000B44B0();
}

void sub_1006AF894(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  sub_1000C1780(a1);
  if (!v1 && v6 != 2)
  {
    if (v6 == 1)
    {
      sub_1006B9F50();
    }
    else
    {
      sub_1000C56E0();
      sub_10007A100((uint64_t)&qword_100BF4CC0);
      v3 = sub_1000BC670(v2);
      v5 = sub_1000D0A50(v3, v4);
      sub_1000C3D70(v5, enum case for BinaryDecoder.Error.valueNotSupported(_:));
      sub_1000C2294();
    }
  }
  sub_1000C1348();
}

void sub_1006AF944(uint64_t a1, char a2)
{
  uint64_t v2;

  if (a2 == 4)
  {
    sub_1006BA640();
    sub_1000BEB7C();
  }
  else
  {
    sub_1000BEB7C();
    if (!v2)
      sub_1006BA960();
  }
  sub_1000C1348();
}

uint64_t sub_1006AF9B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for Deviation(0);
  v17 = *(_QWORD *)(v4 - 8);
  v18 = v4;
  __chkstk_darwin(v4);
  v16 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100BC4E68);
  v19 = *(_QWORD *)(v6 - 8);
  v20 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BDD4A0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000BA294(&qword_100BCB238);
  v21 = v1;
  Trend.baseline.getter(v13);
  v22 = a1;
  sub_1006AFD88();
  result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (!v2)
  {
    Trend.currentValue.getter(v13);
    sub_1006AFED0();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v20);
    v15 = v16;
    Trend.deviation.getter(v13);
    Deviation.write(to:)();
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v15, v18);
  }
  return result;
}

uint64_t sub_1006AFBA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for Deviation(0);
  v17 = *(_QWORD *)(v4 - 8);
  v18 = v4;
  __chkstk_darwin(v4);
  v16 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100BCB0A8);
  v19 = *(_QWORD *)(v6 - 8);
  v20 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BDDFA0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000BA294(&qword_100BDDF88);
  v21 = v1;
  Trend.baseline.getter(v13);
  v22 = a1;
  sub_1006AFD88();
  result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (!v2)
  {
    Trend.currentValue.getter(v13);
    sub_1006AFED0();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v20);
    v15 = v16;
    Trend.deviation.getter(v13);
    Deviation.write(to:)();
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v15, v18);
  }
  return result;
}

void sub_1006AFD88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_100099310();
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v16 = *(_QWORD *)(sub_100098778() - 8);
  sub_10009D98C();
  __chkstk_darwin(v10);
  sub_100099B54(v11, v15);
  sub_1000DA9E8();
  sub_1000C6D9C();
  __chkstk_darwin(v12);
  sub_10009E540();
  sub_1000BA294(v7);
  sub_100099300();
  __chkstk_darwin(v13);
  sub_100094EC4();
  v14 = sub_1000BA294(v5);
  TrendBaseline.kind.getter();
  sub_1006B076C(v9, v7);
  sub_10009171C(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  if (!v0)
  {
    TrendBaseline.value.getter(v14);
    sub_1006AFED0();
    sub_1006BA058(v1, *(uint64_t (**)(uint64_t, _QWORD))(v2 + 8));
    TrendBaseline.startDate.getter(v14);
    Date.write(to:)(v9);
    sub_1000C51C8(v16);
  }
  sub_1000B44B0();
}

void sub_1006AFED0()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  void (*v3)(uint64_t);
  uint64_t *v4;
  uint64_t v5;
  void *v6;

  sub_1006BA034();
  v3 = v2;
  sub_1006BA570();
  v5 = sub_1000BA294(v4);
  Measurement.value.getter(v5);
  sub_1006B9950();
  if (!v0)
  {
    v6 = (void *)Measurement.unit.getter(v5);
    v3(v1);

  }
  sub_1006B910C();
}

void sub_1006AFF54(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD v19[3];
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a2;
  v3 = type metadata accessor for Deviation(0);
  __chkstk_darwin(v3);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100BC4E68);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BDD4A0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v23;
  sub_1006B0564(a1, (uint64_t)v13);
  if (!v14)
  {
    v23 = v11;
    v19[2] = v6;
    v20 = v9;
    v19[1] = v7;
    v21 = v5;
    static FixedSizeTypeBinaryCodable.read(from:)(a1);
    v15 = sub_1000A0794(0, (unint64_t *)&qword_100BC5658, NSUnitTemperature_ptr);
    static NSUnitTemperature.read(from:)(a1);
    v16 = v20;
    Measurement.init(value:unit:)(v17, v15);
    v18 = v21;
    static Deviation.read(from:)(a1);
    Trend.init(baseline:currentValue:deviation:)(v13, v16, v18, v15);
  }
}

void sub_1006B0158(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD v19[3];
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a2;
  v3 = type metadata accessor for Deviation(0);
  __chkstk_darwin(v3);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100BCB0A8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BDDFA0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v23;
  sub_1006B035C(a1, (uint64_t)v13);
  if (!v14)
  {
    v23 = v11;
    v19[2] = v6;
    v20 = v9;
    v19[1] = v7;
    v21 = v5;
    static FixedSizeTypeBinaryCodable.read(from:)(a1);
    v15 = sub_1000A0794(0, (unint64_t *)&qword_100BCB0D8, NSUnitLength_ptr);
    static NSUnitLength.read(from:)(a1);
    v16 = v20;
    Measurement.init(value:unit:)(v17, v15);
    v18 = v21;
    static Deviation.read(from:)(a1);
    Trend.init(baseline:currentValue:deviation:)(v13, v16, v18, v15);
  }
}

void sub_1006B035C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD v19[2];
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;

  v22 = a2;
  v3 = type metadata accessor for Date(0);
  __chkstk_darwin(v3);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100BCB0A8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BDDF80);
  __chkstk_darwin(v10);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = a1;
  v13 = v24;
  sub_1006B0888(a1);
  if (!v13)
  {
    v24 = v12;
    v19[1] = v6;
    v20 = v9;
    v19[0] = v7;
    v21 = v5;
    v14 = v23;
    static FixedSizeTypeBinaryCodable.read(from:)(v23);
    v15 = sub_1000A0794(0, (unint64_t *)&qword_100BCB0D8, NSUnitLength_ptr);
    static NSUnitLength.read(from:)(v14);
    v16 = v20;
    Measurement.init(value:unit:)(v17, v15);
    v18 = v21;
    static Date.read(from:)(v14);
    TrendBaseline.init(kind:value:startDate:)(v24, v16, v18, v15);
  }
}

void sub_1006B0564(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD v19[2];
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;

  v22 = a2;
  v3 = type metadata accessor for Date(0);
  __chkstk_darwin(v3);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100BC4E68);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BFCCD8);
  __chkstk_darwin(v10);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = a1;
  v13 = v24;
  sub_1006B0888(a1);
  if (!v13)
  {
    v24 = v12;
    v19[1] = v6;
    v20 = v9;
    v19[0] = v7;
    v21 = v5;
    v14 = v23;
    static FixedSizeTypeBinaryCodable.read(from:)(v23);
    v15 = sub_1000A0794(0, (unint64_t *)&qword_100BC5658, NSUnitTemperature_ptr);
    static NSUnitTemperature.read(from:)(v14);
    v16 = v20;
    Measurement.init(value:unit:)(v17, v15);
    v18 = v21;
    static Date.read(from:)(v14);
    TrendBaseline.init(kind:value:startDate:)(v24, v16, v18, v15);
  }
}

void sub_1006B076C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unsigned int (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[16];

  sub_1000BA294(a2);
  sub_10009D5D4();
  __chkstk_darwin(v4);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_10011E3D0();
  sub_1000992E4(v7, v8, v9);
  v10 = sub_1000C1A00();
  if (v11(v10) == enum case for TrendBaseline.Kind.mean<A>(_:))
  {
    v15[15] = 1;
    sub_1000DB074(a1);
  }
  else
  {
    v12 = sub_1000C56E0();
    sub_10007A100((uint64_t)&qword_100BF4CC0);
    sub_10009D46C(v12, v13);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, enum case for BinaryDecoder.Error.valueNotSupported(_:), v12);
    sub_1006BA754();
    sub_100098820((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  }
  sub_1006BA1C0();
  sub_1000D9830();
}

void sub_1006B0888(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000C1780(a1);
  if (!v1)
  {
    sub_100094FFC();
    if (v2)
    {
      v3 = sub_1000DA9E8();
      sub_1000C229C(v3);
    }
    else
    {
      sub_1000C56E0();
      sub_10007A100((uint64_t)&qword_100BF4CC0);
      v5 = sub_1000BC670(v4);
      v7 = sub_1000D0A50(v5, v6);
      sub_1000C3D70(v7, enum case for BinaryDecoder.Error.valueNotSupported(_:));
      sub_1000C2294();
    }
  }
  sub_1000B26E8();
}

void sub_1006B0930(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = type metadata accessor for WeatherMetadata(0);
  v4 = *(_QWORD *)(v3 - 8);
  v20 = v3;
  v21 = v4;
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000BA294(&qword_100BCB108);
  v22 = v1;
  v23 = v11;
  v12 = DailyWeatherStatistics.days.getter();
  v13 = type metadata accessor for DayPrecipitationStatistics(0);
  sub_10007A100((uint64_t)&unk_100BFCC58);
  v15 = v14;
  sub_10007A100((uint64_t)&unk_100BFCC60);
  v16 = v24;
  Array<A>.write(to:)(a1, v12, v13, v15, v17);
  swift_bridgeObjectRelease();
  if (!v16)
  {
    v18 = v6;
    v19 = v21;
    DailyWeatherStatistics.baselineStartDate.getter(v23);
    Date.write(to:)(a1);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    DailyWeatherStatistics.metadata.getter(v23);
    WeatherMetadata.write(to:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v18, v20);
  }
}

uint64_t sub_1006B0B00@<X0>(uint64_t a1@<X0>, double a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;

  v30 = a2;
  v4 = type metadata accessor for WeatherMetadata(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DayPrecipitationStatistics(0);
  sub_10007A100((uint64_t)&unk_100BFCC58);
  v12 = v11;
  sub_10007A100((uint64_t)&unk_100BFCC60);
  result = static Array<A>.read(from:)(a1, v10, v12, v13);
  if (!v2)
  {
    v15 = result;
    static Date.read(from:)(a1);
    static WeatherMetadata.read(from:)(v16, v17, v18, v19, v20, v21, v22, v23, v29, v30, v31, v32);
    sub_10007A100((uint64_t)&unk_100BFCCA8);
    v25 = v24;
    sub_10007A100((uint64_t)&unk_100BFCCB0);
    v27 = v26;
    sub_10007A100((uint64_t)&unk_100BFCCB8);
    return DailyWeatherStatistics.init(days:baselineStartDate:metadata:)(v15, v9, v6, v10, v25, v27, v28);
  }
  return result;
}

void sub_1006B0CF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v16 = type metadata accessor for WeatherMetadata(0);
  v2 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000BA294(&qword_100BCB128);
  v6 = DailyWeatherSummary.days.getter(v5);
  v7 = type metadata accessor for DayPrecipitationSummary(0);
  sub_10007A100((uint64_t)&unk_100BFC9D8);
  v9 = v8;
  sub_10007A100((uint64_t)&unk_100BFC9E0);
  v10 = v17;
  Array<A>.write(to:)(a1, v6, v7, v9, v11);
  v12 = swift_bridgeObjectRelease();
  if (!v10)
  {
    v13 = v2;
    v14 = v16;
    DailyWeatherSummary.metadata.getter(v5, v12);
    WeatherMetadata.write(to:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v4, v14);
  }
}

void sub_1006B0E3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = type metadata accessor for WeatherMetadata(0);
  v4 = *(_QWORD *)(v3 - 8);
  v21 = v3;
  v22 = v4;
  __chkstk_darwin(v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000BA294(&qword_100BD10F8);
  v23 = v1;
  v24 = v11;
  v12 = HourlyWeatherStatistics.hours.getter(v11);
  v13 = type metadata accessor for HourTemperatureStatistics(0);
  sub_10007A100((uint64_t)&unk_100BFCC68);
  v15 = v14;
  sub_10007A100((uint64_t)&unk_100BFCC70);
  v16 = v25;
  Array<A>.write(to:)(a1, v12, v13, v15, v17);
  v18 = swift_bridgeObjectRelease();
  if (!v16)
  {
    v19 = v6;
    v20 = v22;
    HourlyWeatherStatistics.baselineStartDate.getter(v24, v18);
    Date.write(to:)(a1);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    HourlyWeatherStatistics.metadata.getter(v24);
    WeatherMetadata.write(to:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v19, v21);
  }
}

uint64_t sub_1006B100C@<X0>(uint64_t a1@<X0>, double a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;

  v30 = a2;
  v4 = type metadata accessor for WeatherMetadata(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for HourTemperatureStatistics(0);
  sub_10007A100((uint64_t)&unk_100BFCC68);
  v12 = v11;
  sub_10007A100((uint64_t)&unk_100BFCC70);
  result = static Array<A>.read(from:)(a1, v10, v12, v13);
  if (!v2)
  {
    v15 = result;
    static Date.read(from:)(a1);
    static WeatherMetadata.read(from:)(v16, v17, v18, v19, v20, v21, v22, v23, v29, v30, v31, v32);
    sub_10007A100((uint64_t)&unk_100BFCCC0);
    v25 = v24;
    sub_10007A100((uint64_t)&unk_100BFCCC8);
    v27 = v26;
    sub_10007A100((uint64_t)&unk_100BFCCD0);
    return HourlyWeatherStatistics.init(hours:baselineStartDate:metadata:)(v15, v9, v6, v10, v25, v27, v28);
  }
  return result;
}

void sub_1006B11FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = type metadata accessor for WeatherMetadata(0);
  v4 = *(_QWORD *)(v3 - 8);
  v21 = v3;
  v22 = v4;
  __chkstk_darwin(v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000BA294(&qword_100BC4E70);
  v23 = v1;
  v24 = v11;
  v12 = MonthlyWeatherStatistics.months.getter();
  v13 = type metadata accessor for MonthTemperatureStatistics(0);
  sub_10007A100((uint64_t)&unk_100BFCC48);
  v15 = v14;
  sub_10007A100((uint64_t)&unk_100BFCC50);
  v16 = v25;
  Array<A>.write(to:)(a1, v12, v13, v15, v17);
  v18 = swift_bridgeObjectRelease();
  if (!v16)
  {
    v19 = v6;
    v20 = v22;
    MonthlyWeatherStatistics.baselineStartDate.getter(v24, v18);
    Date.write(to:)(a1);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    MonthlyWeatherStatistics.metadata.getter(v24);
    WeatherMetadata.write(to:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v19, v21);
  }
}

void sub_1006B13CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = type metadata accessor for WeatherMetadata(0);
  v4 = *(_QWORD *)(v3 - 8);
  v21 = v3;
  v22 = v4;
  __chkstk_darwin(v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000BA294(&qword_100BCB240);
  v23 = v1;
  v24 = v11;
  v12 = MonthlyWeatherStatistics.months.getter();
  v13 = type metadata accessor for MonthPrecipitationStatistics(0);
  sub_10007A100((uint64_t)&unk_100BFCC38);
  v15 = v14;
  sub_10007A100((uint64_t)&unk_100BFCC40);
  v16 = v25;
  Array<A>.write(to:)(a1, v12, v13, v15, v17);
  v18 = swift_bridgeObjectRelease();
  if (!v16)
  {
    v19 = v6;
    v20 = v22;
    MonthlyWeatherStatistics.baselineStartDate.getter(v24, v18);
    Date.write(to:)(a1);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    MonthlyWeatherStatistics.metadata.getter(v24);
    WeatherMetadata.write(to:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v19, v21);
  }
}

uint64_t sub_1006B159C@<X0>(uint64_t a1@<X0>, double a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;

  v30 = a2;
  v4 = type metadata accessor for WeatherMetadata(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MonthTemperatureStatistics(0);
  sub_10007A100((uint64_t)&unk_100BFCC48);
  v12 = v11;
  sub_10007A100((uint64_t)&unk_100BFCC50);
  result = static Array<A>.read(from:)(a1, v10, v12, v13);
  if (!v2)
  {
    v15 = result;
    static Date.read(from:)(a1);
    static WeatherMetadata.read(from:)(v16, v17, v18, v19, v20, v21, v22, v23, v29, v30, v31, v32);
    sub_10007A100((uint64_t)&qword_100BFCC90);
    v25 = v24;
    sub_10007A100((uint64_t)&qword_100BFCC98);
    v27 = v26;
    sub_10007A100((uint64_t)&qword_100BFCCA0);
    return MonthlyWeatherStatistics.init(months:baselineStartDate:metadata:)(v15, v9, v6, v10, v25, v27, v28);
  }
  return result;
}

uint64_t sub_1006B178C@<X0>(uint64_t a1@<X0>, double a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;

  v30 = a2;
  v4 = type metadata accessor for WeatherMetadata(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MonthPrecipitationStatistics(0);
  sub_10007A100((uint64_t)&unk_100BFCC38);
  v12 = v11;
  sub_10007A100((uint64_t)&unk_100BFCC40);
  result = static Array<A>.read(from:)(a1, v10, v12, v13);
  if (!v2)
  {
    v15 = result;
    static Date.read(from:)(a1);
    static WeatherMetadata.read(from:)(v16, v17, v18, v19, v20, v21, v22, v23, v29, v30, v31, v32);
    sub_10007A100((uint64_t)&qword_100BFCC78);
    v25 = v24;
    sub_10007A100((uint64_t)&qword_100BFCC80);
    v27 = v26;
    sub_10007A100((uint64_t)&qword_100BFCC88);
    return MonthlyWeatherStatistics.init(months:baselineStartDate:metadata:)(v15, v9, v6, v10, v25, v27, v28);
  }
  return result;
}

uint64_t sub_1006B197C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t);
  uint64_t result;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = sub_1000BA294(&qword_100BC4E68);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v17 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v17 - v8;
  __chkstk_darwin(v10);
  v12 = (char *)&v17 - v11;
  v13 = sub_1000BA294(&qword_100BFCA00);
  v18 = v1;
  Percentiles.p10.getter(v13);
  v19 = a1;
  sub_1006AFED0();
  v14 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  result = v14(v12, v4);
  if (!v2)
  {
    Percentiles.p50.getter(v13);
    sub_1006AFED0();
    v14(v9, v4);
    v16 = v17;
    Percentiles.p90.getter(v13);
    sub_1006AFED0();
    return v14(v16, v4);
  }
  return result;
}

void sub_1006B1B1C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a2;
  v4 = sub_1000BA294(&qword_100BC4E68);
  __chkstk_darwin(v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v17 - v8;
  __chkstk_darwin(v10);
  v12 = (char *)&v17 - v11;
  static FixedSizeTypeBinaryCodable.read(from:)(a1);
  if (!v2)
  {
    v13 = sub_1000A0794(0, (unint64_t *)&qword_100BC5658, NSUnitTemperature_ptr);
    static NSUnitTemperature.read(from:)(a1);
    Measurement.init(value:unit:)(v14, v13);
    static FixedSizeTypeBinaryCodable.read(from:)(a1);
    static NSUnitTemperature.read(from:)(a1);
    Measurement.init(value:unit:)(v15, v13);
    static FixedSizeTypeBinaryCodable.read(from:)(a1);
    static NSUnitTemperature.read(from:)(a1);
    Measurement.init(value:unit:)(v16, v13);
    Percentiles.init(p10:p50:p90:)(v12, v9, v6, v13);
  }
}

void sub_1006B1D58(uint64_t a1)
{
  uint64_t v1;

  swift_retain();
  FixedSizeTypeBinaryCodable.write(to:)(a1);
  if (!v1)
  {
    sub_1006B9C04();
    sub_10068FEAC();
  }
  swift_release();
  sub_1000B26E8();
}

void sub_1006B1DCC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = sub_1000BDD30();
  type metadata accessor for VFXTestViewState(v2);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  v4 = sub_1000C1E78();
  type metadata accessor for ViewState.SecondaryViewState(v4);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_1000BCED8();
  sub_10009F04C((uint64_t)v0, v6, v7);
  if (swift_getEnumCaseMultiPayload(v0) == 1)
  {
    sub_1006BA7D0((uint64_t)v0, v8, type metadata accessor for VFXTestViewState);
    sub_1000E738C();
    if (!v1)
    {
      sub_10009C7B4();
      WeatherCondition.write(to:)();
    }
    sub_1006BA9BC();
  }
  else
  {
    v9 = *v0;
    sub_1000E738C();
    if (!v1)
    {
      v10 = sub_10009C7B4();
      sub_10069016C(v10);
    }
    swift_release(v9);
  }
  sub_1006BA1C0();
  sub_1000D9830();
}

void sub_1006B1EE8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  UIInterfaceOrientation.write(to:)(a1, *v1);
  if (!v2)
  {
    v3 = sub_1006B9150();
    UIUserInterfaceSizeClass.write(to:)(v3, v4);
    v5 = sub_1006B9150();
    sub_1006B488C(v5, v6);
    v7 = sub_1006B9150();
    sub_1006B6950(v7);
    v8 = sub_1006B9150();
    sub_1006B7048(v8);
    type metadata accessor for DisplayMetrics(0);
    sub_1006B9150();
    DynamicTypeSize.write(to:)();
  }
  sub_1000C1348();
}

void sub_1006B1F84(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000C1780(a1);
  if (!v1)
  {
    sub_100094FFC();
    if (v2)
    {
      type metadata accessor for ListViewState._Storage();
      v3 = sub_1006B9558();
      sub_10068FCB4(v3);
    }
    else
    {
      sub_1000C56E0();
      sub_10007A100((uint64_t)&qword_100BF4CC0);
      v5 = sub_1000BC670(v4);
      v7 = sub_1000D0A50(v5, v6);
      sub_1000C3D70(v7, enum case for BinaryDecoder.Error.valueNotSupported(_:));
      sub_1000C2294();
    }
  }
  sub_1000C1348();
}

void sub_1006B202C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  sub_1000BE9DC();
  v4 = sub_1000C0C34();
  type metadata accessor for WeatherCondition(v4);
  sub_100099300();
  __chkstk_darwin(v5);
  v6 = sub_10008909C();
  type metadata accessor for VFXTestViewState(v6);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_10004A2E8();
  sub_10003BDD4();
  if (!v1)
  {
    if (v17 == 2)
    {
      v12 = sub_1006BA4E4();
      static WeatherCondition.read(from:)(v12);
      sub_10011DF3C(v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
      sub_10009F7BC(v2, v13, type metadata accessor for VFXTestViewState);
      type metadata accessor for ViewState.SecondaryViewState(0);
      v9 = sub_1006BA3EC();
    }
    else
    {
      if (v17 != 1)
      {
        v14 = sub_1000C56E0();
        sub_10007A100((uint64_t)&qword_100BF4CC0);
        sub_10009D46C(v14, v15);
        sub_1000AE9B0(v16, enum case for BinaryDecoder.Error.valueNotSupported(_:));
        sub_1006BA754();
        goto LABEL_2;
      }
      type metadata accessor for LocationViewerViewState._Storage(0);
      sub_1006BA4E4();
      sub_100690048();
      *v0 = v8;
      type metadata accessor for ViewState.SecondaryViewState(0);
      v9 = sub_1006BA3DC();
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }
LABEL_2:
  sub_1006B9A90();
  sub_100089054();
}

void sub_1006B218C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;

  sub_100099310();
  a20 = v24;
  a21 = v25;
  v26 = sub_1000C0C34();
  type metadata accessor for DynamicTypeSize(v26);
  sub_100098B6C();
  __chkstk_darwin(v27);
  v29 = (char *)&a9 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_1006B9C44();
  static UIInterfaceOrientation.read(from:)(v30);
  if (!v22)
  {
    v32 = v31;
    v33 = sub_1006B9C44();
    static UIUserInterfaceSizeClass.read(from:)(v33);
    v35 = v34;
    v36 = sub_1006B9C44();
    sub_1006B4960(v36);
    v38 = v37;
    v39 = sub_1006B9C44();
    sub_1006B69A8(v39);
    a11 = v40;
    v41 = sub_1006B9C44();
    sub_1006B71EC(v41);
    a10 = v42;
    v43 = sub_1006B9C44();
    static DynamicTypeSize.read(from:)(v43);
    v45 = a10;
    v44 = a11;
    *(_QWORD *)v21 = v32;
    *(_QWORD *)(v21 + 8) = v35;
    *(_BYTE *)(v21 + 16) = v38;
    *(_BYTE *)(v21 + 17) = v44 & 1;
    *(_BYTE *)(v21 + 18) = v45;
    v46 = type metadata accessor for DisplayMetrics(0);
    sub_1000B2FD0(v21 + *(int *)(v46 + 36), (uint64_t)v29, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 32));
  }
  sub_1000DB350();
  sub_1000B44B0();
}

void sub_1006B2290(uint64_t a1)
{
  unint64_t *v1;
  unint64_t *v2;
  _QWORD *v3;
  uint64_t v4;

  if (!sub_10009987C(a1))
  {
    v4 = sub_1000A0794(255, v2, v3);
    atomic_store(sub_10003BC38(v4), v1);
  }
  sub_10004A298();
}

void sub_1006B22C0(uint64_t a1)
{
  unint64_t *v1;

  if (!sub_10009987C(a1))
  {
    sub_100075EB0(&qword_100BC4E68);
    sub_1006B97F0((uint64_t)&unk_100BFC8B8);
    sub_1006B97F0((uint64_t)&unk_100BFC8C0);
    atomic_store(sub_1006B9FF4(), v1);
  }
  sub_1000BAB2C();
}

void sub_1006B2340(uint64_t a1)
{
  unint64_t *v1;

  if (!sub_10009987C(a1))
  {
    sub_100075EB0(&qword_100BCB938);
    sub_1006B97F0((uint64_t)&unk_100BFC8E0);
    sub_1006B97F0((uint64_t)&unk_100BFC8E8);
    atomic_store(sub_1006B9FF4(), v1);
  }
  sub_1000BAB2C();
}

void sub_1006B23C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1000BE9DC();
  v2 = v1;
  v4 = v3;
  sub_1000BA294(&qword_100BD4280);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  v6 = sub_1000DA104();
  if (!v0)
  {
    v8 = v6;
    v9 = v7;
    v10 = sub_1000DA104();
    v12 = v11;
    v13 = sub_10009896C();
    sub_1000CDD44(v2, v13);
    *v4 = v8;
    v4[1] = v9;
    v4[2] = v10;
    v4[3] = v12;
    v14 = sub_1006B9F04();
    sub_1006B9968(v14, (uint64_t)v4 + *(int *)(v14 + 24), &qword_100BD4280);
  }
  sub_10009ECD4();
  sub_100089054();
}

void sub_1006B24B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  sub_100095100(a1);
  if (!v2)
  {
    sub_10009DE70(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
    sub_1006B9F04();
    sub_1006BA604();
    v4 = sub_1000BA294(&qword_100BD4280);
    sub_1000FEC5C(a1, v4, (uint64_t)&protocol witness table for URL);
  }
  sub_1000C1348();
}

uint64_t sub_1006B2524()
{
  return static String.read(from:)();
}

uint64_t sub_1006B2538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return String.write(to:)(a1, a2, a3);
}

void sub_1006B254C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = sub_1000C1780(a1);
  if (!v1
    && sub_1006BA5A0(v2, v3, v4, v5, v6, v7, v8, v9, v14, v15, SWORD2(v15), SBYTE6(v15), HIBYTE(v15)) >= 6)
  {
    sub_1000C56E0();
    sub_10007A100((uint64_t)&qword_100BF4CC0);
    v11 = sub_1000BC670(v10);
    v13 = sub_1000D0A50(v11, v12);
    sub_1000C3D70(v13, enum case for BinaryDecoder.Error.valueNotSupported(_:));
    sub_1000C2294();
  }
  sub_100089028();
}

void sub_1006B25D4(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

void sub_1006B25FC(uint64_t a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 6) = 1;
  FixedSizeTypeBinaryCodable.write(to:)(a1);
  sub_10009ED00();
}

void sub_1006B26C4(uint64_t a1)
{
  uint64_t v1;
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000C1780(a1);
  if (!v1)
  {
    sub_100094FFC();
    if (!v3 && v2 != 3)
    {
      if (v2 == 2)
      {
        sub_1000DA104();
      }
      else
      {
        sub_1000C56E0();
        sub_10007A100((uint64_t)&qword_100BF4CC0);
        v5 = sub_1000BC670(v4);
        v7 = sub_1000D0A50(v5, v6);
        sub_1000C3D70(v7, enum case for BinaryDecoder.Error.valueNotSupported(_:));
        sub_1000C2294();
      }
    }
  }
  sub_1000C1348();
}

void sub_1006B278C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (!a3)
  {
    sub_1006BA660();
LABEL_5:
    sub_1000BEB7C();
    goto LABEL_8;
  }
  if (a3 == 1)
    goto LABEL_5;
  sub_1000BEB7C();
  if (!v3)
    sub_1006BA47C();
LABEL_8:
  sub_1000B26E8();
}

void sub_1006B2828()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_100110560();
  v2 = v1;
  v4 = v3;
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  v6 = sub_1006B9F88();
  sub_1006B254C(v6);
  if (!v0)
  {
    v8 = v7;
    v9 = sub_1006B9F88();
    sub_1006B26C4(v9);
    v11 = v10;
    v13 = v12;
    v14 = sub_100098778();
    sub_10009F80C(v2, v14);
    *(_BYTE *)v4 = v8;
    *(_QWORD *)(v4 + 8) = v11;
    *(_QWORD *)(v4 + 16) = v13;
    v15 = sub_10009985C();
    sub_1006B9968(v15, v4 + *(int *)(v15 + 24), (uint64_t *)&unk_100BD35A0);
  }
  sub_1006BA08C();
  sub_1000C60F8();
}

void sub_1006B2908(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1006B25D4(a1, *v1);
  if (!v2)
  {
    v4 = sub_1006B9558();
    sub_1006B278C(v4, v5, v6);
    sub_10009985C();
    sub_1006BA604();
    v7 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    sub_1000FEC5C(a1, v7, (uint64_t)&protocol witness table for Date);
  }
  sub_1000C1348();
}

void sub_1006B2980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1006B91CC();
  v2 = v1;
  sub_10009BEBC();
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_1000AE824();
  sub_10009D5D4();
  __chkstk_darwin(v4);
  v5 = sub_1000C4668();
  type metadata accessor for Location(v5);
  sub_1000BD980();
  __chkstk_darwin(v6);
  sub_10007A130();
  static FixedSizeTypeBinaryCodable.read(from:)(v2);
  if (!v0)
  {
    sub_1006B9AE4();
    if (!(!v9 & v8))
      __asm { BR              X10 }
    v10 = sub_1000C56E0();
    sub_10007A100((uint64_t)&qword_100BF4CC0);
    v12 = sub_10009D46C(v10, v11);
    v14 = sub_1006B9678(v12, v13);
    sub_1000AE9B0(v14, enum case for BinaryDecoder.Error.valueNotSupported(_:));
    sub_10009C808();
  }
  sub_1000E72CC();
}

void sub_1006B2ADC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = sub_1006B9684();
  static LocationOfInterest.read(from:)(v1);
  if (!v0)
  {
    v2 = sub_10011AC4C();
    sub_10009C94C(v2, v3, v4);
    sub_10003BCB8();
    v5 = sub_1006BA3EC();
    swift_storeEnumTagMultiPayload(v5, v6, v7);
  }
  JUMPOUT(0x1006B2A2CLL);
}

void sub_1006B2B0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1006B9684();
  static SearchLocation.read(from:)();
  if (!v1)
  {
    v4 = v0;
    v5 = *(_QWORD *)(v2 - 128);
    sub_10009F7BC(v4, v3, type metadata accessor for SearchLocation);
    v6 = sub_10003BCB8();
    swift_storeEnumTagMultiPayload(v5, v6, 2);
  }
  JUMPOUT(0x1006B2A2CLL);
}

void sub_1006B2B48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v3 = sub_1006B9684();
  static CLLocationCoordinate2D.read(from:)(v3);
  if (!v0)
  {
    v6 = v4;
    v7 = v5;
    sub_10009F80C(v1, (uint64_t)&type metadata for String);
    v8 = *(_OWORD *)(v2 - 112);
    v9 = *(_QWORD *)(v2 - 128);
    *(_QWORD *)v9 = v6;
    *(_QWORD *)(v9 + 8) = v7;
    *(_OWORD *)(v9 + 16) = v8;
    sub_10003BCB8();
    JUMPOUT(0x1006B2BACLL);
  }
  JUMPOUT(0x1006B2A2CLL);
}

void sub_1006B2BB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD);
  char *v12;
  uint64_t v13;

  sub_1006B91CC();
  sub_10009BEBC();
  sub_1000B42B0();
  __chkstk_darwin(v1);
  v3 = sub_100095214(v2, v13);
  type metadata accessor for LocationOfInterest(v3);
  sub_1000AE898();
  __chkstk_darwin(v4);
  v5 = sub_100089108();
  type metadata accessor for Location(v5);
  sub_1000BD980();
  __chkstk_darwin(v6);
  v7 = sub_100099574();
  type metadata accessor for PreviewLocation(v7);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100079F58();
  v9 = sub_1000C1A00();
  sub_100078058(v9, v10, v11);
  v12 = (char *)sub_1006B2C7C + 4 * byte_1009BE60F[swift_getEnumCaseMultiPayload(v0)];
  __asm { BR              X10 }
}

void sub_1006B2C7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v4, v0, v3);
  *(_BYTE *)(v5 - 128) = 1;
  sub_10009C85C();
  if (!v1)
    Location.write(to:)(v0);
  v6 = sub_1006BA284();
  v7(v6);
  sub_1000E72CC();
}

void sub_1006B2F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  sub_100099310();
  v19 = v18;
  v21 = v20;
  sub_100098778();
  sub_100098B6C();
  __chkstk_darwin(v22);
  sub_100089068();
  __chkstk_darwin(v23);
  sub_10009DF40();
  __chkstk_darwin(v24);
  sub_1000B2FD8();
  sub_1006B92D4(v19);
  if (!v13)
  {
    switch(a13)
    {
      case 3:
        sub_1006B9F94();
        v25 = 2;
        v14 = v15;
        break;
      case 2:
        sub_1006B9F94();
        v25 = 1;
        v14 = v16;
        break;
      case 1:
        sub_1006B9F94();
        v25 = 0;
        break;
      default:
        v27 = sub_1000C56E0();
        sub_10007A100((uint64_t)&qword_100BF4CC0);
        v29 = sub_10009D46C(v27, v28);
        v31 = sub_1006B9678(v29, v30);
        sub_1000AE9B0(v31, enum case for BinaryDecoder.Error.valueNotSupported(_:));
        sub_10009C808();
        goto LABEL_2;
    }
    sub_10008908C(v21, v14, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 32));
    v26 = sub_1006BA914();
    swift_storeEnumTagMultiPayload(v21, v26, v25);
  }
LABEL_2:
  sub_10009E33C();
  sub_1000B44B0();
}

void sub_1006B308C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_100099310();
  v19 = v1;
  v6 = v5;
  sub_100098778();
  sub_1000BD980();
  __chkstk_darwin(v7);
  sub_1000C0CD0();
  __chkstk_darwin(v8);
  sub_1000F3FD8();
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - v10;
  sub_1006BA914();
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_1000BCED8();
  sub_10009F04C(v0, v13, v14);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      sub_1006B94F8(v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32));
      sub_1006B99B0();
      sub_1006B9138(v6);
      if (!v1)
        sub_10009C7E8();
      goto LABEL_13;
    }
    sub_1006B94F8(v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32));
    sub_1006B9A14();
    sub_1006B9138(v6);
    if (!v1)
    {
      sub_10009C7E8();
      v3 = v4;
LABEL_13:
      v16 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
      v17 = v3;
      goto LABEL_14;
    }
    v16 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
    v17 = v4;
  }
  else
  {
    sub_1006B94F8((uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32));
    sub_1006B9CD0();
    sub_1006B9138(v6);
    if (!v1)
    {
      sub_10009C7E8();
      v3 = (uint64_t)v11;
      goto LABEL_13;
    }
    v16 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
    v17 = (uint64_t)v11;
  }
LABEL_14:
  sub_100098820(v17, v16);
  sub_1000DB350();
  sub_1000B44B0();
}

uint64_t sub_1006B325C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000BE9DC();
  v3 = static String.read(from:)(v2);
  if (!v0)
  {
    v1 = v3;
    sub_10003BDE0();
    sub_1000BDDA0((uint64_t)&unk_100BFCA40);
    sub_1000BDDA0((uint64_t)&unk_100BFCA48);
    sub_1006B934C();
    sub_10009E900();
    sub_1000C67A8((uint64_t)&unk_100BFCA50);
    sub_1000C67A8((uint64_t)&unk_100BFCA58);
    sub_1006B934C();
  }
  return v1;
}

uint64_t sub_1006B33B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = String.write(to:)(a1, a2, a3);
  if (!v4)
  {
    v8 = sub_10003BDE0();
    sub_1000BDDA0((uint64_t)&unk_100BFCA40);
    sub_1000BDDA0((uint64_t)&unk_100BFCA48);
    sub_1006BA540(a1, a4, (uint64_t)&type metadata for String, v8);
    sub_10009E900();
    sub_1000D02A0((uint64_t)&unk_100BFCA50);
    sub_1000D02A0((uint64_t)&unk_100BFCA58);
    v9 = sub_1006BA4D4();
    return sub_1006BA540(v9, v10, v11, v12);
  }
  return result;
}

void sub_1006B34F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1000BE9DC();
  v2 = v1;
  v3 = sub_1000C0C34();
  type metadata accessor for PreprocessedWeatherData(v3);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  v5 = sub_1000BE9F0();
  type metadata accessor for WeatherData(v5);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_1006B9848();
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100089068();
  __chkstk_darwin(v8);
  sub_1001FB600();
  sub_1000FDA70(v2);
  if (!v0)
  {
    sub_1006B9AE4();
    if (!(!v11 & v10))
      __asm { BR              X10 }
    v12 = sub_1000C56E0();
    sub_10007A100((uint64_t)&qword_100BF4CC0);
    v14 = sub_10009D46C(v12, v13);
    v16 = sub_1006B9678(v14, v15);
    sub_1000AE9B0(v16, enum case for BinaryDecoder.Error.valueNotSupported(_:));
    sub_10009C808();
  }
  sub_1006BA08C();
  sub_100089054();
}

#error "1006B3624: call analysis failed (funcsize=12)"

#error "1006B3678: call analysis failed (funcsize=40)"

void sub_1006B36A4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000B301C();
  if (!v1)
  {
    *v0 = v2;
    v0[1] = v3;
    sub_10003BDE0();
    JUMPOUT(0x1006B36C8);
  }
  JUMPOUT(0x1006B3594);
}

void sub_1006B3728()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  char *v9;
  uint64_t v10;

  sub_100099310();
  type metadata accessor for PreprocessedWeatherData(0);
  sub_1000B42B0();
  __chkstk_darwin(v0);
  sub_100088FDC();
  v1 = sub_10009876C();
  type metadata accessor for WeatherData(v1);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  v3 = sub_1000BE9F0();
  type metadata accessor for NewsDataModel(v3);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100089068();
  __chkstk_darwin(v5);
  sub_1001FB600();
  sub_10003BDE0();
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_1006B960C(v7, v8, v10);
  v9 = (char *)sub_1006B37F4 + 4 * byte_1009BE617[sub_1006BA850()];
  __asm { BR              X10 }
}

void sub_1006B37F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1006BA844(a1, a2, type metadata accessor for NewsDataModel);
  *(_BYTE *)(v4 - 67) = 2;
  sub_1006B9138(v3);
  if (!v2)
    sub_1006A2280(v3);
  sub_1000BF3B4();
  sub_10011E690();
  sub_1000B44B0();
}

void sub_1006B3A0C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_100110560();
  v5 = sub_1006B9168();
  type metadata accessor for AvailableDataSets(v5);
  sub_1000C6D9C();
  __chkstk_darwin(v6);
  sub_100094EC4();
  sub_1000C3EA0(v3);
  if (!v0)
  {
    sub_1006BA070();
    if (v8)
    {
      *v1 = sub_1000DA104();
      v1[1] = v12;
      sub_10009E900();
      v9 = sub_1006B965C();
    }
    else if (v7 == 2)
    {
      sub_1000C3EA0(v3);
      AvailableDataSets.init(rawValue:)();
      sub_10009C94C((uint64_t)v1, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
      sub_10009E900();
      v9 = sub_1006B964C();
    }
    else
    {
      if (v7 != 1)
      {
        sub_1000C56E0();
        sub_10007A100((uint64_t)&qword_100BF4CC0);
        v14 = sub_1000BC670(v13);
        v16 = sub_1000D0A50(v14, v15);
        sub_1000C3D70(v16, enum case for BinaryDecoder.Error.valueNotSupported(_:));
        sub_1000C2294();
        goto LABEL_10;
      }
      sub_10009E900();
      v9 = sub_1006B9BE4();
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }
LABEL_10:
  sub_10009ECD4();
  sub_1000C60F8();
}

void sub_1006B3B48()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_1000BE9DC();
  v5 = sub_1000BDD30();
  type metadata accessor for AvailableDataSets(v5);
  sub_100099300();
  __chkstk_darwin(v6);
  v7 = sub_1000992A8();
  type metadata accessor for LocationAvailableDataSetState(v7);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_1000DC798(v9, v10, v15);
  v11 = sub_1006B9920();
  if (v11)
  {
    if (v11 == 1)
    {
      v13 = *v1;
      v12 = v1[1];
      sub_1006B99B0();
      sub_1000D91F8();
      if (!v2)
        sub_1000ED338(v0, v13, v12);
      sub_10009895C();
    }
    else
    {
      sub_1000D91F8();
    }
  }
  else
  {
    sub_10008908C(v3, (uint64_t)v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
    sub_1006B9A14();
    v14 = sub_1000D91F8();
    if (!v2)
    {
      AvailableDataSets.rawValue.getter(v14);
      sub_1000D91F8();
    }
    sub_100098748(v3, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  }
  sub_1000C1FB4();
  sub_100089054();
}

void sub_1006B3C9C()
{
  uint64_t v0;

  sub_1000BE9DC();
  v0 = sub_10009C82C();
  type metadata accessor for ContentStatusBanner(v0);
  sub_10016ED30();
  sub_1006B6D94();
  sub_1006B6DD0();
  sub_1000BF24C((uint64_t)&unk_100BFCA80);
  sub_1000BF24C((uint64_t)&unk_100BFCA88);
  sub_1006B934C();
  sub_100089054();
}

void sub_1006B3D3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = sub_10011E270();
  type metadata accessor for ContentStatusBanner(v0);
  sub_10016ED30();
  sub_1006B6D94();
  sub_1006B6DD0();
  sub_1000D02A0((uint64_t)&unk_100BFCA80);
  sub_1000D02A0((uint64_t)&unk_100BFCA88);
  v1 = sub_1006BA4D4();
  sub_1006BA540(v1, v2, v3, v4);
  sub_1006B9564();
}

uint64_t sub_1006B3DFC()
{
  return AppConfiguration.write(to:)();
}

#error "1006B3E28: call analysis failed (funcsize=9)"

void sub_1006B3E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, __n128);
  void (*v24)(uint64_t, __n128);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  char *v32;

  sub_1000BE9DC();
  a17 = v21;
  a18 = v22;
  v24 = v23;
  v26 = v25;
  v27 = sub_1000C0C34();
  v28(v27);
  sub_1006B94DC();
  v30 = __chkstk_darwin(v29);
  v32 = (char *)&a9 - v31;
  v24(v26, v30);
  if (!v19)
    sub_10008908C(v18, (uint64_t)v32, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 32));
  sub_1006BA08C();
  sub_100089054();
}

void BackgroundMoonData.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_100099310();
  v3 = v2;
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_10003BC68();
  __chkstk_darwin(v5);
  sub_100098778();
  sub_1000C0120();
  __chkstk_darwin(v6);
  sub_1006B941C();
  BackgroundMoonData.date.getter();
  sub_1006BA2E4(v3);
  if (v1)
  {
    sub_1001FB188(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  }
  else
  {
    v7 = sub_1001FB188(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
    BackgroundMoonData.moonrise.getter(v7);
    v8 = sub_10009BD8C();
    sub_1006B9C28(v8, (uint64_t)&unk_100BD35A0);
    BackgroundMoonData.moonset.getter();
    sub_10011AC4C();
    v9 = sub_10009BD8C();
    sub_10009E498(v9, (uint64_t)&unk_100BD35A0);
    BackgroundMoonData.elevation.getter();
    v10 = sub_1000E738C();
    BackgroundMoonData.phaseAngle.getter(v10);
    v11 = sub_1000E738C();
    BackgroundMoonData.rotationAngle.getter(v11);
    v12 = sub_1000E738C();
    v13 = BackgroundMoonData.moonImageName.getter(v12);
    sub_1000E7D08(v3, v13, v14);
    sub_1000986C4();
  }
  sub_10009EDB4();
  sub_1000B44B0();
}

void static BackgroundMoonData.read(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100089068();
  __chkstk_darwin(v4);
  v5 = sub_100098778();
  sub_100098B6C();
  __chkstk_darwin(v6);
  sub_1000E78C0();
  sub_1006B947C(a1);
  if (!v1)
  {
    sub_1000CDD44(a1, v5);
    sub_1000CDD44(a1, v5);
    sub_1000C3EA0(a1);
    sub_1000C3EA0(a1);
    sub_1000C3EA0(a1);
    sub_1000DA104();
    sub_1006BA8A0();
    ((void (*)())BackgroundMoonData.init(date:moonrise:moonset:elevation:phaseAngle:rotationAngle:moonImageName:))();
  }
  sub_1006B969C();
}

void sub_1006B427C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1006BA034();
  v2 = v1;
  v4 = v3;
  sub_1006BA584(v3);
  if (!v0)
  {
    v5 = sub_1006B9148();
    sub_1000D02A0((uint64_t)&unk_100BFCA60);
    sub_1000D02A0((uint64_t)&unk_100BFCA68);
    sub_1006BA540(v4, v2, (uint64_t)&type metadata for String, v5);
  }
  sub_1006B910C();
}

uint64_t sub_1006B433C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v4;

  sub_1006BA034();
  sub_1000C1780(v2);
  if (!v0)
  {
    v1 = v4;
    sub_1006B9148();
    sub_1000BF24C((uint64_t)&unk_100BFCA60);
    sub_1000BF24C((uint64_t)&unk_100BFCA68);
    sub_1006B934C();
  }
  return v1 & 1;
}

void sub_1006B4418()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  sub_1006BA984();
  FixedSizeTypeBinaryCodable.write(to:)(v1);
  if (!v0)
  {
    v2 = sub_1000BEF10();
    LocationAuthorizationState.write(to:)(v2, v3);
    v4 = sub_1000BEF10();
    sub_1006AF944(v4, v5);
    v6 = type metadata accessor for EnvironmentState(0);
    v7 = sub_1000BEF10();
    Locale.write(to:)(v7);
    sub_1000DCA14(*(int *)(v6 + 32));
    sub_1000D91F8();
    sub_1000D91F8();
    sub_1000D91F8();
    sub_1000D91F8();
    sub_1000D91F8();
    sub_1000D91F8();
    sub_1000D91F8();
  }
  sub_10009EFE8();
}

void sub_1006B45EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11, char a12, char a13, char a14, char a15, char a16, char a17)
{
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  sub_100099310();
  sub_1006B9FC8();
  sub_10009D5D4();
  __chkstk_darwin(v21);
  sub_100079FBC();
  sub_1000C3EA0(v20);
  if (!v17)
  {
    sub_1006BA9F0(v20);
    v23 = v22;
    sub_1006AF894(v20);
    v25 = v24;
    sub_1006BA9E4();
    v27 = sub_1000DA104();
    v28 = v26;
    sub_1000C3EA0(v20);
    sub_1000C3EA0(v20);
    sub_1000C3EA0(v20);
    sub_1000C3EA0(v20);
    sub_1000C3EA0(v20);
    sub_1000C3EA0(v20);
    sub_1000C3EA0(v20);
    sub_10005E6A8();
    sub_100768D60(a17, v23, v25, v18, v27, v28, a16, a15, v19, a14, a13, v29, a12, a11, (uint64_t)&v30);
  }
  sub_10009C884();
  sub_1000B44B0();
}

#error "1006B4880: call analysis failed (funcsize=10)"

void sub_1006B488C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

void sub_1006B48B4(uint64_t a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 4) = 1;
  FixedSizeTypeBinaryCodable.write(to:)(a1);
  sub_10009ED00();
}

void sub_1006B493C()
{
  sub_1006B8B9C();
}

void sub_1006B4960(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = sub_1000C1780(a1);
  if (!v1)
  {
    sub_1006BA024(v2, v3, v4, v5, v6, v7, v8, v9, v15, v16, SWORD2(v16), SBYTE6(v16), HIBYTE(v16));
    if (v10 >= 4)
    {
      sub_1000C56E0();
      sub_10007A100((uint64_t)&unk_100BF4CC0);
      v12 = sub_1000BC670(v11);
      v14 = sub_1000D0A50(v12, v13);
      sub_1000C3D70(v14, enum case for BinaryDecoder.Error.valueNotSupported(_:));
      sub_1000C2294();
    }
  }
  sub_100089028();
}

void sub_1006B49E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_1000BA294((uint64_t *)&unk_100C0D170);
  sub_1000D02A0((uint64_t)&unk_100BFCB28);
  sub_1000D02A0((uint64_t)&unk_100BFCB30);
  sub_10009BD8C();
  if (!v2)
  {
    v4 = type metadata accessor for LocationsState(0);
    sub_1000DB35C();
    sub_1000C67A8((uint64_t)&unk_100BFCB38);
    sub_1000C67A8((uint64_t)&unk_100BFCB40);
    sub_1006BA8A0();
    sub_1000BE954();
    v5 = sub_1000BE878();
    sub_1000C67A8((uint64_t)&unk_100BFCB48);
    sub_1000C67A8((uint64_t)&unk_100BFCB50);
    sub_10011AC4C();
    sub_1000BE954();
    sub_1000AE824();
    sub_1000D02A0((uint64_t)&unk_100BFCB58);
    sub_1000D02A0((uint64_t)&unk_100BFCB60);
    sub_10011AC4C();
    sub_1000BE954();
    v6 = sub_1000992C4();
    sub_1000BDDA0((uint64_t)&unk_100BFCA08);
    sub_1000BDDA0((uint64_t)&unk_100BFCA10);
    v8 = v7;
    sub_1000BE954();
    sub_100098AA0();
    sub_10011DFBC((uint64_t)&unk_100BFCB68);
    sub_10007A100((uint64_t)&unk_100BFCB70);
    sub_1000BE954();
    sub_1006BA75C(a1, *(_QWORD *)(v1 + *(int *)(v4 + 40)), (uint64_t)&type metadata for String, v5);
    sub_1006BA75C(a1, *(_QWORD *)(v1 + *(int *)(v4 + 44)), (uint64_t)&type metadata for String, v6);
    v9 = sub_1006B9150();
    sub_1006B4DB0(v9, v10, v11, v12, v13, v14, v15, v16, v8, v21);
    v17 = sub_1006BA8F4();
    sub_1000D02A0((uint64_t)&unk_100BFCB78);
    sub_1000D02A0((uint64_t)&unk_100BFCB80);
    v18 = sub_1000BCF4C();
    sub_1006BA75C(v18, v19, v20, v17);
  }
  sub_100099C50();
}

uint64_t sub_1006B4DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_100110560();
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)sub_1006B4DE8 + 4 * byte_1009BE61F[v10]))(v11, v12, v13, v14, v15, v16, v17, v18, a9, a10);
}

void sub_1006B4DE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000BEB7C();
  if (!v0)
  {
    v1 = sub_1000AE824();
    sub_1000D02A0((uint64_t)&unk_100BFCB58);
    v3 = v2;
    sub_1000D02A0((uint64_t)&unk_100BFCB60);
    v4 = sub_10054C56C();
    Array<A>.write(to:)(v4, v5, v1, v3, v6);
  }
  sub_1000C60F8();
}

void sub_1006B4F50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  sub_100099310();
  v3 = v2;
  v5 = v4;
  sub_1000BA294((uint64_t *)&unk_100C0D170);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  v7 = sub_1000C19E4();
  v8 = type metadata accessor for CurrentLocation(v7);
  sub_1000BDDA0((uint64_t)&unk_100BFCB28);
  sub_1000BDDA0((uint64_t)&unk_100BFCB30);
  sub_1000CDD44(v3, v8);
  if (!v1)
  {
    sub_1000DB35C();
    sub_1000BDDA0((uint64_t)&unk_100BFCB38);
    v10 = v9;
    sub_1000BDDA0((uint64_t)&unk_100BFCB40);
    v11 = sub_1006BA210();
    v14 = sub_1000F3EA0(v11, v12, v10, v13);
    v15 = sub_1000BE878();
    sub_1000BDDA0((uint64_t)&unk_100BFCB48);
    v17 = v16;
    sub_1000BDDA0((uint64_t)&unk_100BFCB50);
    v42 = sub_1000F3EA0(v3, v15, v17, v18);
    v43 = v14;
    sub_1000AE824();
    sub_1000BF24C((uint64_t)&unk_100BFCB58);
    v20 = v19;
    sub_1000BF24C((uint64_t)&unk_100BFCB60);
    v21 = sub_100079FDC();
    v40 = sub_1000F3EA0(v21, v22, v20, v23);
    v24 = sub_1000992C4();
    sub_1000BF24C((uint64_t)&unk_100BFCA08);
    v26 = v25;
    sub_10007A100((uint64_t)&unk_100BFCA10);
    v39 = sub_1000F3EA0(v3, v24, v26, v27);
    sub_100098AA0();
    sub_1000BDDA0((uint64_t)&unk_100BFCB68);
    v29 = v28;
    sub_1000BDDA0((uint64_t)&unk_100BFCB70);
    v30 = sub_1006BA210();
    sub_1000F3EA0(v30, v31, v29, v32);
    v33 = sub_1006B934C();
    v34 = sub_1006B934C();
    v41 = v33;
    sub_10009F070();
    sub_1006B544C();
    LOBYTE(v33) = v35;
    sub_1006BA8F4();
    sub_1000BDDA0((uint64_t)&unk_100BFCB78);
    sub_1000BDDA0((uint64_t)&unk_100BFCB80);
    v38 = sub_1006B934C();
    sub_1006BA80C();
    sub_1006EB624(v0, v43, v42, v40, v39, v41, v34, v5, v36, v37, v33, v38);
  }
  sub_10009C884();
  sub_1000B44B0();
}

uint64_t sub_1006B544C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  sub_1006BA034();
  v2 = v1;
  sub_1000C1780(v1);
  if (!v0)
  {
    switch(v17)
    {
      case 1:
        return sub_1006B9F24();
      case 2:
      case 3:
        v4 = sub_1000AE824();
        sub_1000BF24C((uint64_t)&unk_100BFCB58);
        v6 = v5;
        sub_1000BF24C((uint64_t)&unk_100BFCB60);
        sub_1000F3EA0(v2, v4, v6, v7);
        break;
      case 4:
        v12 = sub_1000AE824();
        sub_1000BD664((uint64_t)&unk_100BFCB58);
        v14 = v13;
        sub_1000BD664((uint64_t)&unk_100BFCB60);
        v16 = v15;
        sub_1000F3EA0(v2, v12, v14, v15);
        sub_1000F3EA0(v2, v12, v14, v16);
        break;
      default:
        sub_1000C56E0();
        sub_10007A100((uint64_t)&qword_100BF4CC0);
        v9 = sub_1000BC670(v8);
        v11 = sub_1000D0A50(v9, v10);
        sub_1000C3D70(v11, enum case for BinaryDecoder.Error.valueNotSupported(_:));
        sub_1000C2294();
        break;
    }
  }
  return sub_1006B9F24();
}

uint64_t sub_1006B5678()
{
  return Date.write(to:)();
}

void sub_1006B568C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  char *v9;
  uint64_t v10;

  sub_100099310();
  v0 = sub_10011E270();
  type metadata accessor for ModalViewState.LocationDetailModal(v0);
  sub_1000B42B0();
  __chkstk_darwin(v1);
  sub_100094EC4();
  sub_1000BA294(&qword_100BC5F58);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  v3 = sub_1000C1E78();
  type metadata accessor for LocationPreviewViewState(v3);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  v5 = sub_100089108();
  type metadata accessor for ModalViewState(v5);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_1006B960C(v7, v8, v10);
  v9 = (char *)sub_1006B5748 + 4 * byte_1009BE627[sub_1006BA850()];
  __asm { BR              X10 }
}

void sub_1006B5748(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1006B94C4(v4, a2, type metadata accessor for LocationPreviewViewState);
  *(_BYTE *)(v5 - 71) = 2;
  sub_1006B9138(v3);
  if (!v2)
  {
    sub_1006B2BB4();
    sub_1006B9150();
    sub_100694764();
  }
  sub_1000BF3B4();
  sub_10009EDB4();
  sub_1000B44B0();
}

void sub_1006B5A20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);

  sub_100098778();
  sub_10009D5D4();
  __chkstk_darwin(v1);
  sub_10009C8C4();
  v2 = sub_1006B9C44();
  static Date.read(from:)(v2);
  if (!v0)
  {
    v3 = sub_10054C56C();
    sub_1000B2FD0(v3, v4, v5);
  }
  sub_1000D9830();
}

void sub_1006B5A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  __int16 v61;
  char v62;
  char v63;

  sub_100110560();
  v18 = v17;
  v19 = sub_1006B93C4();
  type metadata accessor for ModalViewState.LocationDetailModal(v19);
  sub_1000B42B0();
  __chkstk_darwin(v20);
  sub_10009E540();
  sub_1000BA294(&qword_100BC5F58);
  sub_1000B42B0();
  __chkstk_darwin(v21);
  v22 = sub_1000992A8();
  type metadata accessor for LocationPreviewViewState(v22);
  sub_1000B42B0();
  __chkstk_darwin(v23);
  sub_10004A2E8();
  sub_1000C3EA0(v18);
  if (!v13)
  {
    switch(a13)
    {
      case 1:
        sub_1000BD65C();
        v24 = sub_10009DB10();
        v26 = 6;
        goto LABEL_18;
      case 2:
        sub_1006B91B8();
        sub_100693D34();
        sub_1006B938C(v16, v31, type metadata accessor for LocationPreviewViewState);
        sub_1000BD65C();
        v24 = sub_1006B964C();
        goto LABEL_18;
      case 3:
        v32 = sub_1006B91B8();
        sub_1006B68DC(v32);
        *v14 = v33 & 1;
        v14[1] = HIBYTE(v33) & 1;
        sub_1000BD65C();
        v24 = sub_1006B965C();
        goto LABEL_18;
      case 4:
        v34 = sub_1006B91B8();
        sub_100695918(v34);
        v36 = v35;
        v37 = HIBYTE(v35);
        v38 = v35 >> 8;
        v39 = type metadata accessor for NotificationsOptInViewState._Storage();
        v40 = (_BYTE *)sub_100098740(v39, 20);
        v40[16] = v36;
        v40[17] = v38;
        v40[18] = BYTE2(v36) & 1;
        v40[19] = v37;
        *(_QWORD *)v14 = v40;
        sub_1000BD65C();
        v24 = sub_1006B9BE4();
        goto LABEL_18;
      case 5:
        v41 = sub_1006B91B8();
        sub_100693274(v41, v42);
        v43 = type metadata accessor for ReportWeatherViewState._Storage();
        v44 = sub_100098740(v43, 112);
        sub_1001C4B3C(&v59, (void *)(v44 + 16));
        *(_QWORD *)v14 = v44;
        v25 = sub_1000BD65C();
        v24 = (uint64_t)v14;
        v26 = 3;
        goto LABEL_18;
      case 6:
        type metadata accessor for ModalViewState.MapViewModal(0);
        sub_1000BDDA0((uint64_t)&unk_100BFCA90);
        sub_1000BDDA0((uint64_t)&unk_100BFCA98);
        sub_1006BA338();
        sub_1000CDD44(v45, v46);
        v47 = sub_1000C213C();
        sub_10009E8CC(v47, v48, v49);
        v25 = sub_1000BD65C();
        v24 = (uint64_t)v14;
        v26 = 4;
        goto LABEL_18;
      case 7:
        v50 = sub_1006B91B8();
        sub_1006B7BAC(v50, v51, v52, v53, v54, v55, v56, v57, v59, v60, v61, v62, v63);
        sub_1006B938C(v15, v58, type metadata accessor for ModalViewState.LocationDetailModal);
        sub_1000BD65C();
        v24 = sub_10009DB10();
        v26 = 5;
        goto LABEL_18;
      case 8:
        sub_1000BD65C();
        v24 = sub_10009DB10();
        v26 = 7;
LABEL_18:
        swift_storeEnumTagMultiPayload(v24, v25, v26);
        break;
      default:
        sub_1000C56E0();
        sub_10007A100((uint64_t)&qword_100BF4CC0);
        v28 = sub_1000BC670(v27);
        v30 = sub_1000D0A50(v28, v29);
        sub_1000C3D70(v30, enum case for BinaryDecoder.Error.valueNotSupported(_:));
        sub_1000C2294();
        break;
    }
  }
  sub_10009ECD4();
  sub_1000C60F8();
}

void sub_1006B5D64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = v2;
  v5 = sub_1000B2F80(a1);
  if (!v3)
  {
    sub_1000BDB40(v5, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
    v6 = (int *)sub_1006B9BD4();
    v7 = sub_1000BA294(&qword_100BD4280);
    sub_1000BED20(v1, v7, (uint64_t)&protocol witness table for URL);
    sub_10009C7E8();
    v8 = sub_1000BEF10();
    v9 = URL.write(to:)(v8);
    v10 = (uint64_t *)(v2 + v6[9]);
    v11 = sub_1000BDB40(v9, *v10, v10[1]);
    sub_1000BDB40(v11, v10[2], v10[3]);
    sub_1006B9F04();
    sub_1006BA604();
    sub_1000BED20(v1, v7, (uint64_t)&protocol witness table for URL);
    sub_1006B992C(v1, *(_QWORD *)(v4 + v6[10]), (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, (uint64_t)&protocol witness table for String);
    sub_1006B992C(v1, *(_QWORD *)(v4 + v6[11]), (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, (uint64_t)&protocol witness table for String);
    sub_1000D91D0();
    v12 = sub_1000BCF4C();
    sub_1006B992C(v12, v13, v14, v15, v16);
  }
  sub_1000D9830();
}

void sub_1006B5EF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;

  sub_100099310();
  v7 = v6;
  v55 = v8;
  v56 = sub_1006B9F04();
  sub_1000B42B0();
  __chkstk_darwin(v9);
  v57 = (uint64_t *)((char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_10009896C();
  sub_100099300();
  __chkstk_darwin(v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100098778();
  sub_1000BD980();
  __chkstk_darwin(v16);
  sub_10009E540();
  sub_1000BA294(&qword_100BD4280);
  sub_1000B42B0();
  __chkstk_darwin(v17);
  sub_10009BE6C();
  __chkstk_darwin(v18);
  sub_1000D0024();
  v58 = v7;
  v19 = static String.read(from:)(v7);
  if (!v1)
  {
    v46 = v19;
    v47 = v0;
    v59 = v20;
    v48 = v5;
    v49 = v15;
    v50 = v2;
    v51 = v14;
    v53 = v4;
    v54 = v11;
    v52 = v3;
    v21 = v58;
    v22 = sub_1000DA104();
    v24 = v23;
    v25 = v54;
    sub_1000CDD44(v21, v54);
    sub_1006B947C(v21);
    v26 = sub_1006B9F24();
    static URL.read(from:)(v26);
    v44 = sub_1000DA104();
    v45 = v27;
    v43 = v22;
    v41 = sub_1000DA104();
    v42 = v28;
    sub_1000CDD44(v21, v25);
    v40 = v24;
    v29 = v57;
    v30 = v45;
    *v57 = v44;
    v29[1] = v30;
    v31 = v42;
    v29[2] = v41;
    v29[3] = v31;
    sub_10009E8CC(v47, (uint64_t)v29 + *(int *)(v56 + 24), &qword_100BD4280);
    v32 = sub_1000F3EA0(v21, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, (uint64_t)&protocol witness table for String);
    v33 = sub_1000F3EA0(v58, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, (uint64_t)&protocol witness table for String);
    v34 = sub_1000D91D0();
    v35 = sub_1000F3EA0(v58, v34, (uint64_t)&protocol witness table for UUID, (uint64_t)&protocol witness table for UUID);
    v36 = (char *)v55;
    *v55 = v46;
    *((_QWORD *)v36 + 1) = v59;
    v37 = v40;
    *((_QWORD *)v36 + 2) = v43;
    *((_QWORD *)v36 + 3) = v37;
    v38 = (int *)sub_1006B9BD4();
    sub_10009E8CC(v53, (uint64_t)&v36[v38[6]], &qword_100BD4280);
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(&v36[v38[7]], v52, v49);
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(&v36[v38[8]], v51, v54);
    sub_10007C75C((uint64_t)v57, (uint64_t)&v36[v38[9]], type metadata accessor for NewsChannel);
    *(_QWORD *)&v36[v38[10]] = v32;
    *(_QWORD *)&v36[v38[11]] = v33;
    *(_QWORD *)&v36[v38[12]] = v35;
  }
  sub_10009C884();
  sub_1000B44B0();
}

void sub_1006B6364()
{
  uint64_t v0;

  sub_100110560();
  sub_1006B9BD4();
  sub_1000BDDA0((uint64_t)&unk_100BFCC28);
  sub_1000BDDA0((uint64_t)&unk_100BFCC30);
  sub_1000BE954();
  if (!v0)
  {
    sub_1006BA3A4();
    sub_1006B9150();
    ArticlePlacementLocation.write(to:)();
  }
  sub_1000C60F8();
}

void sub_1006B6404()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_100099310();
  v5 = v4;
  sub_1006BA628();
  sub_100098B6C();
  __chkstk_darwin(v6);
  v7 = sub_1000BE9F0();
  v8 = type metadata accessor for NewsArticle(v7);
  sub_1000C67A8((uint64_t)&unk_100BFCC28);
  v10 = v9;
  sub_1000C67A8((uint64_t)&unk_100BFCC30);
  v12 = static Array<A>.read(from:)(v5, v8, v10, v11);
  if (!v1)
  {
    v13 = v12;
    v14 = sub_1006B9F5C();
    static ArticlePlacementLocation.read(from:)(v14);
    *v0 = v13;
    v15 = sub_1006BA3A4();
    sub_1000B2FD0((uint64_t)v0 + *(int *)(v15 + 20), v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
  }
  sub_10011E690();
  sub_1000B44B0();
}

void sub_1006B64E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t HourPrecipitationDetailViewState;

  Location.write(to:)(a1);
  if (!v2)
  {
    HourPrecipitationDetailViewState = type metadata accessor for NextHourPrecipitationDetailViewState(0);
    sub_1000DC624(v1 + *(int *)(HourPrecipitationDetailViewState + 20));
    sub_1000BA294(&qword_100BC40B0);
    sub_1000BD664((uint64_t)&unk_100BFCAA0);
    sub_1000BD664((uint64_t)&unk_100BFCAA8);
    sub_10011E56C();
  }
  sub_1006B92E0();
}

void sub_1006B6574()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t HourPrecipitationDetailViewState;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  sub_100099310();
  v4 = v3;
  v6 = v5;
  sub_1000992C4();
  sub_100098B6C();
  __chkstk_darwin(v7);
  sub_1006B9504();
  if (!v0)
  {
    sub_1006B9528();
    v9 = v8;
    sub_1000C67A8((uint64_t)&unk_100BFCAA0);
    sub_1000C67A8((uint64_t)&unk_100BFCAA8);
    sub_10009F80C(v4, v9);
    sub_1006BA610();
    sub_10008908C(v6, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32));
    HourPrecipitationDetailViewState = type metadata accessor for NextHourPrecipitationDetailViewState(0);
    sub_1006B957C((__n128 *)(v6 + *(int *)(HourPrecipitationDetailViewState + 20)));
    *(_QWORD *)(v11 + 16) = v12;
    *(_QWORD *)(v11 + 24) = v13;
    *(_BYTE *)(v11 + 32) = v14;
  }
  sub_10009E33C();
  sub_1000B44B0();
}

void sub_1006B666C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = sub_1000B2F80(a1);
  if (!v2)
  {
    sub_1000B31A8(v3, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
    sub_1000BEB7C();
    sub_1000BEB7C();
    sub_1000BEB7C();
    sub_1000BEB7C();
  }
  sub_1000C1348();
}

void sub_1006B6728(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;

  v4 = sub_1006BA7E0(a1);
  if (!v1)
  {
    v6 = v4;
    v7 = v5;
    v8 = sub_1000DA104();
    v10 = v9;
    sub_1000C3EA0(v3);
    sub_1000C3EA0(v3);
    sub_1000C3EA0(v3);
    sub_1000C3EA0(v3);
    *(_QWORD *)v2 = v6;
    *(_QWORD *)(v2 + 8) = v7;
    *(_QWORD *)(v2 + 16) = v8;
    *(_QWORD *)(v2 + 24) = v10;
    *(_BYTE *)(v2 + 32) = v14;
    *(_BYTE *)(v2 + 33) = v13;
    *(_BYTE *)(v2 + 34) = v12;
    *(_BYTE *)(v2 + 35) = v11;
  }
  sub_1006B9564();
}

void sub_1006B687C(uint64_t a1)
{
  uint64_t v1;

  sub_1006BA584(a1);
  if (!v1)
    sub_1000BEB7C();
  sub_1000C1348();
}

void sub_1006B68DC(uint64_t a1)
{
  uint64_t v1;

  sub_1000C1780(a1);
  if (!v1)
    sub_1000C1780(a1);
  sub_1000C1348();
}

void sub_1006B6950(uint64_t a1)
{
  FixedSizeTypeBinaryCodable.write(to:)(a1);
  sub_10009ED00();
}

void sub_1006B69A8(uint64_t a1)
{
  uint64_t v1;
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000C1780(a1);
  if (!v1)
  {
    sub_100094FFC();
    if (!v3 && v2 != 2)
    {
      sub_1000C56E0();
      sub_10007A100((uint64_t)&unk_100BF4CC0);
      v5 = sub_1000BC670(v4);
      v7 = sub_1000D0A50(v5, v6);
      sub_1000C3D70(v7, enum case for BinaryDecoder.Error.valueNotSupported(_:));
      sub_1000C2294();
    }
  }
  sub_100089028();
}

void SearchLocation.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1006B9690();
  v4 = String.write(to:)(v3, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
  if (!v1)
  {
    v5 = sub_1000CF9A4(v4, v2[3], v2[4]);
    sub_1000CF9A4(v5, v2[5], v2[6]);
    sub_10009BEBC();
    sub_1000BA294(&qword_100BC35F8);
    sub_1000C67A8((uint64_t)&unk_100BFCA08);
    sub_1000C67A8((uint64_t)&unk_100BFCA10);
    sub_10009BD8C();
    sub_1000BA294(&qword_100BFCA18);
    sub_1000BD664((uint64_t)&unk_100BFCA20);
    sub_1000BD664((uint64_t)&unk_100BFCA28);
    sub_10009BD8C();
  }
  sub_1006B9564();
}

void static SearchLocation.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  sub_100099310();
  v2 = v1;
  v4 = v3;
  sub_1000BA294(&qword_100BC35F8);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100079FBC();
  v6 = sub_1000DA104();
  if (!v0)
  {
    v8 = v6;
    v9 = v7;
    v10 = sub_1000DA104();
    v12 = v11;
    v17 = sub_1000DA104();
    v23 = v13;
    v18 = sub_1000992C4();
    sub_10007A100((uint64_t)&unk_100BFCA08);
    sub_10007A100((uint64_t)&unk_100BFCA10);
    sub_1000CDD44(v2, v18);
    type metadata accessor for CLLocationCoordinate2D(0);
    v19 = v14;
    sub_10007A100((uint64_t)&unk_100BFCA20);
    sub_10007A100((uint64_t)&unk_100BFCA28);
    sub_1000CDD44(v2, v19);
    *v4 = 0;
    v4[1] = v8;
    v4[2] = v9;
    v4[3] = v10;
    v4[4] = v12;
    v4[5] = v17;
    v4[6] = v23;
    v15 = sub_10009BEBC();
    sub_1006B9968(v15, (uint64_t)v4 + *(int *)(v15 + 32), &qword_100BC35F8);
    v16 = (char *)v4 + *(int *)(v15 + 36);
    *(_QWORD *)v16 = v20;
    *((_QWORD *)v16 + 1) = v21;
    v16[16] = v22;
  }
  sub_10009C884();
  sub_1000B44B0();
}

unint64_t sub_1006B6D94()
{
  unint64_t result;

  result = qword_100BFCA70;
  if (!qword_100BFCA70)
  {
    result = swift_getWitnessTable(&unk_1009B8D60, &type metadata for ContentStatusBanner.Placement);
    atomic_store(result, (unint64_t *)&qword_100BFCA70);
  }
  return result;
}

unint64_t sub_1006B6DD0()
{
  unint64_t result;

  result = qword_100BFCA78;
  if (!qword_100BFCA78)
  {
    result = swift_getWitnessTable(&unk_1009B8D38, &type metadata for ContentStatusBanner.Placement);
    atomic_store(result, (unint64_t *)&qword_100BFCA78);
  }
  return result;
}

void sub_1006B6E0C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  sub_1000B2F80(a1);
  if (!v3)
  {
    dispatch thunk of BinaryEncodable.write(to:)(v2, a2[2], a2[5]);
    dispatch thunk of BinaryEncodable.write(to:)(v2, a2[3], a2[7]);
  }
  sub_1006B9D70();
}

void sub_1006B6E68()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  sub_100099310();
  v23 = v4;
  v24 = v3;
  v6 = v5;
  v25 = v7;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;
  sub_10009D98C();
  __chkstk_darwin(v16);
  sub_100079FBC();
  __chkstk_darwin(v17);
  sub_10007A130();
  v19 = static String.read(from:)(v18);
  if (!v0)
  {
    v21 = v19;
    v22 = v20;
    dispatch thunk of static BinaryDecodable.read(from:)(v2, v13, v11, v25);
    dispatch thunk of static BinaryDecodable.read(from:)(v1, v13, v9, v24);
    sub_1007ED4E8(v21, v22, (uint64_t)v2, (uint64_t)v1, v11, v9, v25, v6, v15, v24, v23);
  }
  sub_1006B9B2C();
  sub_1000B44B0();
}

void sub_1006B6F78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1006B99A4();
  if (!v0)
  {
    v3 = type metadata accessor for SunriseSunsetDetailViewState(0);
    sub_1000DC624(v2 + *(int *)(v3 + 20));
    v4 = sub_1000BA294(&qword_100BC40B0);
    sub_1000BD664((uint64_t)&unk_100BFCAA0);
    v6 = v5;
    sub_1000BD664((uint64_t)&unk_100BFCAA8);
    sub_1000FEC5C(v1, v4, v6);
    sub_1006B96E4();
  }
}

void sub_1006B7048(uint64_t a1)
{
  FixedSizeTypeBinaryCodable.write(to:)(a1);
  sub_10009ED00();
}

void sub_1006B70CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  sub_100099310();
  v4 = v3;
  v6 = v5;
  sub_1000992C4();
  sub_100098B6C();
  __chkstk_darwin(v7);
  sub_1006B9504();
  if (!v0)
  {
    sub_1006B9528();
    v9 = v8;
    sub_1000C67A8((uint64_t)&unk_100BFCAA0);
    sub_1000C67A8((uint64_t)&unk_100BFCAA8);
    sub_10009F80C(v4, v9);
    sub_1006BAA04();
    v11 = v10;
    sub_10008908C(v6, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32));
    v12 = type metadata accessor for SunriseSunsetDetailViewState(0);
    v13 = v6 + *(int *)(v12 + 20);
    *(_QWORD *)v13 = v14;
    *(_QWORD *)(v13 + 8) = v15;
    *(_QWORD *)(v13 + 16) = v16;
    *(_QWORD *)(v13 + 24) = v17;
    *(_BYTE *)(v13 + 32) = v18;
    *(_BYTE *)(v6 + *(int *)(v12 + 24)) = v11;
  }
  sub_10009E33C();
  sub_1000B44B0();
}

void sub_1006B71EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = sub_1000C1780(a1);
  if (!v1
    && sub_1006BA5A0(v2, v3, v4, v5, v6, v7, v8, v9, v14, v15, SWORD2(v15), SBYTE6(v15), HIBYTE(v15)) >= 3)
  {
    sub_1000C56E0();
    sub_10007A100((uint64_t)&unk_100BF4CC0);
    v11 = sub_1000BC670(v10);
    v13 = sub_1000D0A50(v11, v12);
    sub_1000C3D70(v13, enum case for BinaryDecoder.Error.valueNotSupported(_:));
    sub_1000C2294();
  }
  sub_100089028();
}

void sub_1006B7274()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD);
  char *v22;
  uint64_t v23[18];

  sub_100099310();
  v23[2] = sub_1006B9BCC();
  sub_1000B42B0();
  __chkstk_darwin(v1);
  v23[8] = (uint64_t)v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10009896C();
  v23[5] = *(_QWORD *)(v3 - 8);
  v23[6] = v3;
  sub_10009D98C();
  __chkstk_darwin(v4);
  v5 = sub_1000992A8();
  v23[3] = type metadata accessor for AveragesDetailViewState(v5);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  v23[4] = sub_10009CC04(v7, v23[0]);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  v10 = sub_100095214(v9, v23[0]);
  v23[0] = type metadata accessor for SunriseSunsetDetailViewState(v10);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  v13 = sub_10009E408(v12, v23[0]);
  type metadata accessor for NextHourPrecipitationDetailViewState(v13);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  v15 = sub_100099574();
  type metadata accessor for AirQualityDetailViewState(v15);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  v23[1] = sub_1006B9880();
  sub_1000B42B0();
  __chkstk_darwin(v17);
  sub_100088FDC();
  v18 = sub_10009876C();
  type metadata accessor for ModalViewState.LocationDetailModal(v18);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  v20 = sub_1006B9EC8();
  sub_100078058(v20, v0, v21);
  v22 = (char *)sub_1006B73E0 + 4 * word_1009BE638[swift_getEnumCaseMultiPayload(v0)];
  __asm { BR              X10 }
}

void sub_1006B73E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_1006B94C4(v4, a2, type metadata accessor for ConditionDetailViewState);
  *(_BYTE *)(v6 - 128) = 1;
  sub_10011DE7C();
  if (!v2)
  {
    sub_1006BA548();
    v7 = *(_QWORD *)(v6 - 216);
    sub_10011DEA4();
    sub_1006B9DAC();
    v8 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    sub_1000DB348(v3, v8, (uint64_t)&protocol witness table for Date);
    sub_1000BEF8C(v5 + *(int *)(v7 + 28));
    sub_1000BA294(&qword_100BC40B0);
    sub_1000BD664((uint64_t)&unk_100BFCAA0);
    sub_1000BD664((uint64_t)&unk_100BFCAA8);
    sub_10009DC74(v3);
    v9 = sub_1000BA294(&qword_100BD0B58);
    sub_1000BD044((uint64_t)&unk_100BFCAC0);
    v11 = v10;
    sub_1000BD044((uint64_t)&unk_100BFCAC8);
    sub_1000DB348(v3, v9, v11);
    *(_BYTE *)(v6 - 128) = *(_BYTE *)(v5 + *(int *)(v7 + 36));
    sub_1006B91F8(v3);
  }
  sub_1000BF3B4();
  sub_1006B93E0();
  sub_1000B44B0();
}

void sub_1006B7BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 v78;
  uint64_t (*v79)(_QWORD, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 v86;
  uint64_t (*v87)(uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int8 v103;
  char v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(char *, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int8 v120;
  uint64_t (*v121)(_QWORD, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  unsigned __int8 v158;

  sub_100099310();
  *(_QWORD *)&v154 = v14;
  v19 = v18;
  v143 = v20;
  v140 = sub_1000AE824();
  v139 = *(_QWORD *)(v140 - 8);
  sub_10009D98C();
  __chkstk_darwin(v21);
  *(_QWORD *)&v153 = (char *)&v133 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = sub_1006B9BCC();
  sub_1000B42B0();
  __chkstk_darwin(v23);
  v137 = (char *)&v133 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_10009896C();
  v141 = *(_QWORD *)(v25 - 8);
  v142 = v25;
  sub_10009D98C();
  __chkstk_darwin(v26);
  sub_1000D0278(v27, v133);
  sub_1000BA294(&qword_100BCB0D0);
  sub_1000B42B0();
  __chkstk_darwin(v28);
  v135 = sub_10009CC24(v29, v133);
  sub_1000B42B0();
  __chkstk_darwin(v30);
  v32 = sub_1000987B4((uint64_t)&v133 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for MoonDetailViewState(v32);
  sub_1000B42B0();
  __chkstk_darwin(v33);
  v35 = sub_1000DF598(v34, v133);
  v149 = type metadata accessor for SunriseSunsetDetailViewState(v35);
  sub_1000B42B0();
  __chkstk_darwin(v36);
  v136 = (char *)&v133 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = sub_1006B981C();
  sub_1000B42B0();
  __chkstk_darwin(v38);
  v147 = (char *)&v133 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_1000992C4();
  v144 = *(_QWORD *)(v40 - 8);
  v145 = v40;
  sub_10009D98C();
  __chkstk_darwin(v41);
  sub_1000986FC();
  v146 = v42;
  sub_10009D2A4();
  __chkstk_darwin(v43);
  sub_1006B91A8();
  __chkstk_darwin(v44);
  sub_1006B93F4();
  __chkstk_darwin(v45);
  sub_10009DF40();
  __chkstk_darwin(v46);
  v47 = sub_1006B9BDC();
  sub_1000B42B0();
  __chkstk_darwin(v48);
  v49 = sub_10008909C();
  type metadata accessor for ConditionDetailViewState(v49);
  sub_1000B42B0();
  __chkstk_darwin(v50);
  sub_100079FBC();
  sub_1006BA40C();
  if (!v14)
  {
    v133 = v16;
    v58 = v13;
    v59 = (uint64_t)v147;
    v60 = v148;
    v61 = v151;
    *(_QWORD *)&v154 = v17;
    v62 = v149;
    v63 = v153;
    switch(a13)
    {
      case 1:
        sub_100693868(v19, v51, v52, v53, v54, v55, v56, v57, v133, v134, SWORD2(v134), SBYTE6(v134), SHIBYTE(v134));
        sub_10009CC64(v15, v64, type metadata accessor for ConditionDetailViewState);
        v65 = 0;
        goto LABEL_12;
      case 2:
        sub_1006BA7D8(v19);
        sub_1006B69A8(v61);
        v72 = v71;
        sub_1006B98F0();
        v74 = v73;
        sub_1000BF24C((uint64_t)&unk_100BFCAA0);
        sub_1000BF24C((uint64_t)&unk_100BFCAA8);
        v75 = sub_1006BA220();
        sub_10009F80C(v75, v74);
        sub_1006BA2EC();
        v76 = v156;
        v77 = v157;
        v78 = v158;
        sub_1006BA800();
        sub_1006B97FC(v79);
        *(_BYTE *)(v61 + *(int *)(v47 + 20)) = v72;
        sub_1006B957C((__n128 *)(v61 + *(int *)(v47 + 24)));
        *(_QWORD *)(v80 + 16) = v76;
        *(_QWORD *)(v80 + 24) = v77;
        *(_BYTE *)(v80 + 32) = v78;
        sub_10009CC64(v61, v81, type metadata accessor for AirQualityDetailViewState);
        v65 = 1;
        goto LABEL_12;
      case 3:
        sub_1006BA290(v19);
        sub_1006B98F0();
        sub_1000D02A0((uint64_t)&unk_100BFCAA0);
        sub_1000D02A0((uint64_t)&unk_100BFCAA8);
        v82 = sub_1006BA7A8();
        sub_10009F80C(v82, v83);
        v154 = v155;
        v84 = v156;
        v85 = v157;
        v86 = v158;
        sub_1006BA800();
        sub_10009BCF8(v59, v87);
        sub_1006B957C((__n128 *)(v59 + *(int *)(v60 + 20)));
        *(_QWORD *)(v88 + 16) = v84;
        *(_QWORD *)(v88 + 24) = v85;
        *(_BYTE *)(v88 + 32) = v86;
        sub_10009CC64(v59, v89, type metadata accessor for NextHourPrecipitationDetailViewState);
        v65 = 2;
        goto LABEL_12;
      case 4:
        v90 = v58;
        sub_1006BA7D8(v19);
        sub_1006B98F0();
        v92 = v91;
        sub_1000BD044((uint64_t)&unk_100BFCAA0);
        sub_1000BD044((uint64_t)&unk_100BFCAA8);
        v93 = sub_1006BA220();
        sub_10009F80C(v93, v92);
        v99 = v155;
        v100 = v61;
        v101 = v156;
        v102 = v157;
        v103 = v158;
        sub_1006B71EC(v100);
        v110 = v109;
        sub_1006BA800();
        v111 = v90;
        v112 = (uint64_t)v136;
        v113(v136, v111);
        v114 = v112 + *(int *)(v62 + 20);
        *(_OWORD *)v114 = v99;
        *(_QWORD *)(v114 + 16) = v101;
        *(_QWORD *)(v114 + 24) = v102;
        *(_BYTE *)(v114 + 32) = v103;
        *(_BYTE *)(v112 + *(int *)(v62 + 24)) = v110;
        sub_10009CC64(v112, v115, type metadata accessor for SunriseSunsetDetailViewState);
        v65 = 3;
        goto LABEL_12;
      case 5:
        v94 = v150;
        sub_1006934A8();
        sub_10009CC64(v94, v95, type metadata accessor for MoonDetailViewState);
        v65 = 4;
        goto LABEL_12;
      case 6:
        sub_1006BA290(v19);
        sub_1006B69A8(v63);
        v105 = v104;
        v106 = type metadata accessor for DetailHeroChartLollipopPosition(0);
        sub_1000BF24C((uint64_t)&unk_100BFCAB0);
        sub_1000BF24C((uint64_t)&unk_100BFCAB8);
        sub_10009F80C(v63, v106);
        sub_1006B9528();
        sub_1000BF24C((uint64_t)&unk_100BFCAA0);
        sub_1000BF24C((uint64_t)&unk_100BFCAA8);
        v116 = sub_1006BA7A8();
        sub_10009F80C(v116, v117);
        v153 = v155;
        v127 = v156;
        v128 = v157;
        LODWORD(v152) = v158;
        v129 = v134;
        sub_1000C5B18(v134, v154, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v144 + 32));
        v130 = v135;
        *(_BYTE *)(v129 + *(int *)(v135 + 20)) = v105 & 1;
        sub_10009E8CC(v61, v129 + *(int *)(v130 + 24), &qword_100BCB0D0);
        v131 = v129 + *(int *)(v130 + 28);
        *(_OWORD *)v131 = v153;
        *(_QWORD *)(v131 + 16) = v127;
        *(_QWORD *)(v131 + 24) = v128;
        *(_BYTE *)(v131 + 32) = v152;
        sub_10009CC64(v129, v132, type metadata accessor for AveragesDetailViewState);
        v65 = 5;
        goto LABEL_12;
      case 7:
        v96 = v152;
        static URL.read(from:)(v19);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v141 + 32))(v143, v96, v142);
        v65 = 6;
        goto LABEL_12;
      case 8:
        static Location.read(from:)(v19);
        static LocationOfInterest.read(from:)(v19);
        sub_1006B98F0();
        sub_1000BD044((uint64_t)&unk_100BFCAA0);
        sub_1000BD044((uint64_t)&unk_100BFCAA8);
        v107 = sub_1006B9F68();
        sub_10009F80C(v107, v108);
        v154 = v155;
        v118 = v156;
        v119 = v157;
        v120 = v158;
        sub_1006BA800();
        sub_1006B97FC(v121);
        v122 = v138;
        sub_1006B99BC();
        (*(void (**)(uint64_t))(v123 + 32))(v124);
        sub_1006B957C((__n128 *)(v61 + *(int *)(v122 + 24)));
        *(_QWORD *)(v125 + 16) = v118;
        *(_QWORD *)(v125 + 24) = v119;
        *(_BYTE *)(v125 + 32) = v120;
        sub_10009CC64(v61, v126, type metadata accessor for HomeAndWorkRefinementViewState);
        v65 = 7;
LABEL_12:
        type metadata accessor for ModalViewState.LocationDetailModal(0);
        v97 = sub_10009DB10();
        swift_storeEnumTagMultiPayload(v97, v98, v65);
        break;
      default:
        v66 = sub_1000C56E0();
        sub_10007A100((uint64_t)&qword_100BF4CC0);
        v68 = sub_10009D46C(v66, v67);
        v70 = sub_1006B9678(v68, v69);
        sub_1000AE9B0(v70, enum case for BinaryDecoder.Error.valueNotSupported(_:));
        sub_10009C808();
        break;
    }
  }
  sub_1000B44B0();
}

unint64_t sub_1006B8478()
{
  unint64_t result;

  result = qword_100BFCAE0;
  if (!qword_100BFCAE0)
  {
    result = swift_getWitnessTable(&unk_1009A4C40, &unk_100B772C0);
    atomic_store(result, (unint64_t *)&qword_100BFCAE0);
  }
  return result;
}

unint64_t sub_1006B84B4()
{
  unint64_t result;

  result = qword_100BFCAE8;
  if (!qword_100BFCAE8)
  {
    result = swift_getWitnessTable(&unk_1009A4C18, &unk_100B772C0);
    atomic_store(result, (unint64_t *)&qword_100BFCAE8);
  }
  return result;
}

unint64_t sub_1006B84F0()
{
  unint64_t result;

  result = qword_100BFCAF0;
  if (!qword_100BFCAF0)
  {
    result = swift_getWitnessTable(&unk_1009A37A8, &unk_100B76520);
    atomic_store(result, (unint64_t *)&qword_100BFCAF0);
  }
  return result;
}

unint64_t sub_1006B852C()
{
  unint64_t result;

  result = qword_100BFCAF8;
  if (!qword_100BFCAF8)
  {
    result = swift_getWitnessTable(&unk_1009A3780, &unk_100B76520);
    atomic_store(result, (unint64_t *)&qword_100BFCAF8);
  }
  return result;
}

unint64_t sub_1006B8568()
{
  unint64_t result;

  result = qword_100BFCB00;
  if (!qword_100BFCB00)
  {
    result = swift_getWitnessTable(&unk_1009A3B90, &unk_100B76490);
    atomic_store(result, (unint64_t *)&qword_100BFCB00);
  }
  return result;
}

unint64_t sub_1006B85A4()
{
  unint64_t result;

  result = qword_100BFCB08;
  if (!qword_100BFCB08)
  {
    result = swift_getWitnessTable(&unk_1009A3758, &unk_100B76490);
    atomic_store(result, (unint64_t *)&qword_100BFCB08);
  }
  return result;
}

unint64_t sub_1006B85E0()
{
  unint64_t result;

  result = qword_100BFCB10;
  if (!qword_100BFCB10)
  {
    result = swift_getWitnessTable(&unk_1009A3730, &unk_100B76490);
    atomic_store(result, (unint64_t *)&qword_100BFCB10);
  }
  return result;
}

unint64_t sub_1006B861C()
{
  unint64_t result;

  result = qword_100BFCB18;
  if (!qword_100BFCB18)
  {
    result = swift_getWitnessTable(&unk_1009AC8F0, &unk_100B7EE40);
    atomic_store(result, (unint64_t *)&qword_100BFCB18);
  }
  return result;
}

unint64_t sub_1006B8658()
{
  unint64_t result;

  result = qword_100BFCB20;
  if (!qword_100BFCB20)
  {
    result = swift_getWitnessTable(&unk_1009AC8C8, &unk_100B7EE40);
    atomic_store(result, (unint64_t *)&qword_100BFCB20);
  }
  return result;
}

uint64_t *sub_1006B8694(uint64_t *a1)
{
  sub_10019D2B8(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
  return a1;
}

unint64_t sub_1006B86E4()
{
  unint64_t result;

  result = qword_100BFCBA8;
  if (!qword_100BFCBA8)
  {
    result = swift_getWitnessTable(&unk_1009B4918, &unk_100B8D730);
    atomic_store(result, (unint64_t *)&qword_100BFCBA8);
  }
  return result;
}

unint64_t sub_1006B8720()
{
  unint64_t result;

  result = qword_100BFCBB0;
  if (!qword_100BFCBB0)
  {
    result = swift_getWitnessTable(&unk_1009B48F0, &unk_100B8D730);
    atomic_store(result, (unint64_t *)&qword_100BFCBB0);
  }
  return result;
}

_QWORD *sub_1006B875C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v14 = a1[3];
  v15 = a1[1];
  v12 = a1[7];
  v13 = a1[5];
  v2 = a1[9];
  v3 = a1[11];
  v4 = a1[13];
  v5 = a1[15];
  v6 = a1[17];
  v7 = a1[19];
  v8 = a1[21];
  v9 = a1[23];
  v10 = a1[25];
  swift_bridgeObjectRelease(a1[28]);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

void sub_1006B8850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD);

  sub_100110560();
  v4 = sub_10011E270();
  type metadata accessor for LocationPreviewViewState(v4);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  v6 = sub_1000BD1E4();
  type metadata accessor for ModalViewState.MapViewModal(v6);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_10004A2E8();
  sub_100078058(v1, v3, v8);
  sub_10007C75C(v3, v0, type metadata accessor for LocationPreviewViewState);
  sub_1006B9950();
  if (!v2)
  {
    sub_1006B2BB4();
    sub_100694764();
  }
  sub_1000BF3B4();
  sub_1000C60F8();
}

void sub_1006B8944(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v4 = sub_1000C0C34();
  type metadata accessor for LocationPreviewViewState(v4);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100098694();
  sub_1006B9980(a1);
  if (!v1)
  {
    if (v12 == 1)
    {
      sub_1006BA07C();
      sub_100693D34();
      sub_10009F7BC(v2, v6, type metadata accessor for LocationPreviewViewState);
    }
    else
    {
      v7 = sub_1000C56E0();
      sub_10007A100((uint64_t)&qword_100BF4CC0);
      v9 = sub_10009D46C(v7, v8);
      v11 = sub_1006B9678(v9, v10);
      sub_1000AE9B0(v11, enum case for BinaryDecoder.Error.valueNotSupported(_:));
      sub_10009C808();
    }
  }
  sub_1006BA61C();
  sub_1000FDBD8();
}

#error "1006B8A44: call analysis failed (funcsize=10)"

void sub_1006B8A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  void (*v26)(uint64_t);
  void (*v27)(_QWORD, __n128);
  void (*v28)(_QWORD, __n128);
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(_QWORD);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(_QWORD);
  uint64_t v44;

  sub_100099310();
  a21 = v23;
  a22 = v24;
  v26 = v25;
  v28 = v27;
  v30 = v29;
  v32 = sub_1000BE9A8(v29, v31);
  v33 = *(_QWORD *)(v32 - 8);
  sub_100098F2C();
  v35 = __chkstk_darwin(v34);
  v37 = (char *)&a9 - v36;
  v28(0, v35);
  sub_100098F2C();
  __chkstk_darwin(v38);
  v40 = (char *)&a9 - v39;
  sub_1006BA338();
  sub_100078058(v41, v42, v43);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v40, 1, v32) == 1)
  {
    a12 = 1;
    sub_1006B91F8(v30);
  }
  else
  {
    sub_1006B94F8((uint64_t)v37, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 32));
    sub_1006BA0A8();
    sub_1006B91F8(v30);
    if (!v22)
    {
      v44 = sub_1006BA4C4();
      v26(v44);
    }
    sub_100098820((uint64_t)v37, *(uint64_t (**)(uint64_t, uint64_t))(v33 + 8));
  }
  sub_1006B93E0();
  sub_1000B44B0();
}

void sub_1006B8B78()
{
  sub_1006B8B9C();
}

void sub_1006B8B9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;

  sub_1000BE9DC();
  v5 = v4;
  v6 = sub_1006B9168();
  v8 = v7(v6);
  sub_1006B94DC();
  __chkstk_darwin(v9);
  v11 = (char *)&v17 - v10;
  sub_1000C3EA0(v2);
  if (!v0)
  {
    v12 = v18;
    if (v18 != 1)
    {
      if (v18 != 2)
      {
        sub_1000C56E0();
        sub_10007A100((uint64_t)&unk_100BF4CC0);
        v14 = sub_1000BC670(v13);
        v16 = sub_1000D0A50(v14, v15);
        sub_1000C3D70(v16, enum case for BinaryDecoder.Error.valueNotSupported(_:));
        sub_1000C2294();
        goto LABEL_8;
      }
      v5(v2);
      sub_10009C94C(v1, (uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
      v12 = 0;
    }
    _s7Weather24LocationCompositionStateOwst_0(v1, v12, 1, v8);
  }
LABEL_8:
  sub_10009ECD4();
  sub_100089054();
}

#error "1006B8CFC: call analysis failed (funcsize=64)"

void sub_1006B8DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, unsigned __int8 a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_100110560();
  v15 = v14;
  sub_100098778();
  sub_1000C6D9C();
  __chkstk_darwin(v16);
  sub_10009E540();
  sub_1000C3EA0(v15);
  if (!v13)
  {
    v17 = a13;
    if (a13 != 1)
    {
      if (a13 != 2)
      {
        sub_1000C56E0();
        sub_10007A100((uint64_t)&qword_100BF4CC0);
        v24 = sub_1000BC670(v23);
        v26 = sub_1000D0A50(v24, v25);
        sub_1000C3D70(v26, enum case for BinaryDecoder.Error.valueNotSupported(_:));
        sub_1000C2294();
        goto LABEL_8;
      }
      sub_1006B947C(v15);
      v18 = sub_1000DF7CC();
      sub_10009C94C(v18, v19, v20);
      v17 = 0;
    }
    sub_1000BA294(&qword_100BC3348);
    v21 = sub_10009BD44();
    _s7Weather24LocationCompositionStateOwst_0(v21, v17, 1, v22);
  }
LABEL_8:
  sub_10009ECD4();
  sub_1000C60F8();
}

void sub_1006B8EB0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1000BE9DC();
  v5 = sub_1000BDD30();
  type metadata accessor for WeatherStatisticsModel(v5);
  sub_100099300();
  __chkstk_darwin(v6);
  v7 = sub_1000992A8();
  type metadata accessor for WeatherData.WeatherStatisticsState(v7);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_1000DC798(v9, v10, v14);
  v11 = sub_1006B9920();
  if (v11)
  {
    if (v11 == 1)
    {
      sub_10009C94C(v3, (uint64_t)v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
      sub_1006B99B0();
      sub_1000E738C();
      if (!v2)
      {
        sub_1006B9460();
        WeatherStatisticsModel.write(to:)();
      }
      sub_10009171C(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
    }
    else
    {
      sub_1006B9A14();
      sub_1000E738C();
    }
  }
  else
  {
    v13 = *v1;
    v12 = v1[1];
    sub_1006B9CD0();
    sub_1000E738C();
    if (!v2)
      sub_1000E7D08(v0, v13, v12);
    sub_100075DF4();
  }
  sub_1006B9A90();
  sub_100089054();
}

void sub_1006B8FE0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_100110560();
  v4 = v3;
  v5 = sub_1006B93C4();
  type metadata accessor for WeatherStatisticsModel(v5);
  sub_1000C6D9C();
  __chkstk_darwin(v6);
  sub_10009E540();
  sub_1000C3EA0(v4);
  if (!v0)
  {
    sub_1006BA070();
    if (v8)
    {
      sub_1006B91B8();
      static WeatherStatisticsModel.read(from:)();
      sub_10011DF3C((uint64_t)v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32));
      sub_100099698();
      v10 = sub_1006B965C();
    }
    else if (v7 == 2)
    {
      sub_100099698();
      v10 = sub_1006B9BE4();
    }
    else
    {
      if (v7 != 1)
      {
        sub_1000C56E0();
        sub_10007A100((uint64_t)&qword_100BF4CC0);
        v14 = sub_1000BC670(v13);
        v16 = sub_1000D0A50(v14, v15);
        sub_1000C3D70(v16, enum case for BinaryDecoder.Error.valueNotSupported(_:));
        sub_1000C2294();
        goto LABEL_10;
      }
      *v1 = sub_1000DA104();
      v1[1] = v9;
      sub_100099698();
      v10 = sub_1006B964C();
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }
LABEL_10:
  sub_10009ECD4();
  sub_1000C60F8();
}

void sub_1006B9100()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 608) = v0;
}

void sub_1006B9120(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1005E5ABC(v2, a2);
}

uint64_t sub_1006B9128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_1006B9138(uint64_t a1)
{
  return FixedSizeTypeBinaryCodable.write(to:)(a1);
}

void sub_1006B9140()
{
  sub_1006AFED0();
}

uint64_t sub_1006B9148()
{
  return type metadata accessor for WeatherCondition(0);
}

uint64_t sub_1006B9150()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006B915C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_1006B9168()
{
  return 0;
}

void sub_1006B917C()
{
  sub_1006AFED0();
}

uint64_t sub_1006B9184@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 408) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_1006B91B8()
{
  uint64_t v0;

  return v0;
}

double sub_1006B91C4(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(a1).n128_u64[0];
  return result;
}

uint64_t sub_1006B91E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v1)(_QWORD, _QWORD);
  uint64_t v2;

  return v1(*(_QWORD *)(a1 - 256), *(_QWORD *)(v2 - 264));
}

uint64_t sub_1006B91F8(uint64_t a1)
{
  return FixedSizeTypeBinaryCodable.write(to:)(a1);
}

void sub_1006B9200(uint64_t a1)
{
  sub_10007A100(a1);
}

uint64_t sub_1006B9208(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return Array<A>.write(to:)(v1, v2, v3, v4, a1);
}

void sub_1006B9224(uint64_t a1)
{
  sub_10007A100(a1);
}

void sub_1006B922C()
{
  uint64_t v0;

  static NSUnitLength.read(from:)(v0);
}

uint64_t sub_1006B9240(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return String.write(to:)(v2, a1, a2);
}

void sub_1006B925C()
{
  PrecipitationAmountByType.write(to:)();
}

uint64_t sub_1006B926C()
{
  uint64_t v0;

  return FixedSizeTypeBinaryCodable.write(to:)(*(_QWORD *)(v0 - 72));
}

uint64_t sub_1006B9280()
{
  uint64_t v0;

  return FixedSizeTypeBinaryCodable.write(to:)(*(_QWORD *)(v0 - 72));
}

uint64_t sub_1006B9294()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 248) + 8))(*(_QWORD *)(v0 - 232), *(_QWORD *)(v0 - 240));
}

uint64_t sub_1006B92A4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 264) + 8))(*(_QWORD *)(v0 - 248), *(_QWORD *)(v0 - 256));
}

uint64_t sub_1006B92B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 8))(v1, *(_QWORD *)(v2 - 104));
}

void sub_1006B92C8()
{
  uint64_t v0;

  sub_1006B7048(v0);
}

uint64_t sub_1006B92D4(uint64_t a1)
{
  return static FixedSizeTypeBinaryCodable.read(from:)(a1);
}

void sub_1006B9304()
{
  sub_1006AFED0();
}

void sub_1006B930C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = v0;
}

uint64_t sub_1006B932C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006B934C()
{
  return static Dictionary<>.read(from:)();
}

uint64_t sub_1006B936C()
{
  return Date.write(to:)();
}

uint64_t sub_1006B9374(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return static Array<A>.read(from:)(v1, v2, v3, a1);
}

void sub_1006B938C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_10007C75C(a1, v3, a3);
}

uint64_t sub_1006B93AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(v1 - 200));
}

void sub_1006B93B8()
{
  uint64_t v0;

  sub_1006B71EC(v0);
}

uint64_t sub_1006B93C4()
{
  return 0;
}

uint64_t sub_1006B93D0()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 232) + 8))(*(_QWORD *)(v0 - 216), *(_QWORD *)(v0 - 224));
}

double sub_1006B93EC()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 - 128)).n128_u64[0];
  return result;
}

void sub_1006B9404()
{
  uint64_t v0;

  WeatherChange.Direction.write(to:)(v0);
}

uint64_t sub_1006B9414(uint64_t a1)
{
  return FixedSizeTypeBinaryCodable.write(to:)(a1);
}

uint64_t sub_1006B9438()
{
  uint64_t v0;

  return static Date.read(from:)(v0);
}

uint64_t sub_1006B9460()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006B947C(uint64_t a1)
{
  return static Date.read(from:)(a1);
}

uint64_t sub_1006B9484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Array<A>.write(to:)(a1, a2, a3, a4, a5);
}

uint64_t sub_1006B948C@<X0>(uint64_t (*a1)(void)@<X8>)
{
  return a1();
}

uint64_t sub_1006B9494(uint64_t a1)
{
  uint64_t v1;

  return Measurement.init(value:unit:)(a1, v1);
}

uint64_t sub_1006B94A8(uint64_t a1)
{
  uint64_t v1;

  return Measurement.init(value:unit:)(a1, *(_QWORD *)(v1 - 120));
}

double sub_1006B94B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(a22).n128_u64[0];
  return result;
}

void sub_1006B94BC(uint64_t a1)
{
  uint64_t v1;

  sub_1005E5ABC(a1, v1);
}

void sub_1006B94C4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_10007C75C(a1, v3, a3);
}

double sub_1006B94CC()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 - 192)).n128_u64[0];
  return result;
}

uint64_t sub_1006B94D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, _QWORD);

  return v2(a1, *(_QWORD *)(a2 - 256));
}

void sub_1006B94F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_10007C75C(a1, v3, a3);
}

uint64_t sub_1006B94F8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

uint64_t sub_1006B9504()
{
  uint64_t v0;

  return static Location.read(from:)(v0);
}

void sub_1006B9528()
{
  type metadata accessor for CGRect(0);
}

uint64_t sub_1006B9530()
{
  uint64_t v0;

  return v0;
}

void sub_1006B9544(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1005E5ABC(v2, a2);
}

uint64_t sub_1006B954C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(v1 - 136));
}

uint64_t sub_1006B9558()
{
  uint64_t v0;

  return v0;
}

__n128 sub_1006B957C@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 - 144);
  *a1 = result;
  return result;
}

uint64_t sub_1006B9598()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 240);
}

uint64_t sub_1006B95A8()
{
  uint64_t v0;

  return static Optional<A>.read(from:)(*(_QWORD *)(v0 - 192), *(_QWORD *)(v0 - 216));
}

uint64_t sub_1006B95F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return String.write(to:)(a1, a2, a3);
}

void sub_1006B9604(uint64_t a1)
{
  uint64_t v1;

  sub_1005E5ABC(a1, v1);
}

void sub_1006B960C(uint64_t (*a1)(_QWORD)@<X2>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v3;

  sub_100078058(v3, (uint64_t)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
}

uint64_t sub_1006B962C()
{
  return type metadata accessor for ApparentPrecipitationIntensity(0);
}

uint64_t sub_1006B9634()
{
  return type metadata accessor for HourlyForecastComponentViewModel.HourlyItem(0);
}

uint64_t sub_1006B963C()
{
  return type metadata accessor for Wind(0);
}

uint64_t sub_1006B9644()
{
  return type metadata accessor for WeatherConditionBackgroundTimeData(0);
}

uint64_t sub_1006B964C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006B965C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006B9678(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1006B9684()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006B96BC()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 192) + 8))(*(_QWORD *)(v0 - 176), *(_QWORD *)(v0 - 184));
}

uint64_t sub_1006B96CC(uint64_t a1)
{
  uint64_t v1;

  return Measurement.init(value:unit:)(a1, v1);
}

void sub_1006B96E4()
{
  uint64_t v0;

  sub_1006B7048(v0);
}

uint64_t sub_1006B96F4()
{
  return Date.write(to:)();
}

uint64_t sub_1006B9700@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return type metadata accessor for PressureTrend(0);
}

uint64_t sub_1006B9734(uint64_t a1)
{
  uint64_t v1;

  return Measurement.init(value:unit:)(a1, v1);
}

_QWORD *sub_1006B9750()
{
  uint64_t v0;

  return sub_1001F53E4((_QWORD *)(v0 - 288));
}

uint64_t sub_1006B9758(uint64_t a1, uint64_t a2)
{
  return static Optional<A>.read(from:)(a1, a2);
}

double sub_1006B9760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(a16).n128_u64[0];
  return result;
}

void sub_1006B9768()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 640) = *(_QWORD *)(v0 - 232);
  static NSUnitSpeed.read(from:)(*(_QWORD *)(v0 - 240));
}

uint64_t sub_1006B9784()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 96) + 8))(v0, *(_QWORD *)(v1 - 72));
}

uint64_t sub_1006B97A0()
{
  return Date.write(to:)();
}

uint64_t sub_1006B97A8(uint64_t a1)
{
  uint64_t v1;

  return static Optional<A>.read(from:)(a1, v1);
}

uint64_t sub_1006B97B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return Array<A>.write(to:)(v1, v2, v3, v4, a1);
}

void sub_1006B97D4()
{
  sub_1006AFED0();
}

void sub_1006B97E0()
{
  sub_1000BF3B4();
}

void sub_1006B97F0(uint64_t a1)
{
  sub_1006B2290(a1);
}

uint64_t sub_1006B97FC@<X0>(uint64_t (*a1)(_QWORD, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(*(_QWORD *)(v1 - 256), v2);
}

uint64_t sub_1006B980C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 8))(v0, *(_QWORD *)(v2 - 176));
}

uint64_t sub_1006B981C()
{
  return type metadata accessor for NextHourPrecipitationDetailViewState(0);
}

uint64_t sub_1006B9828()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

void sub_1006B9838()
{
  uint64_t v0;

  static NSUnitLength.read(from:)(*(_QWORD *)(v0 - 208));
}

uint64_t sub_1006B9848()
{
  return type metadata accessor for NewsDataModel(0);
}

uint64_t sub_1006B9864()
{
  return type metadata accessor for AirPollutantMeasurement(0);
}

uint64_t sub_1006B9880()
{
  return type metadata accessor for ConditionDetailViewState(0);
}

uint64_t sub_1006B989C()
{
  return type metadata accessor for CloudCoverByAltitude(0);
}

uint64_t sub_1006B98B8()
{
  return type metadata accessor for AppConfigurationState(0);
}

uint64_t sub_1006B98D4()
{
  return type metadata accessor for AirPollutantKind(0);
}

void sub_1006B98F0()
{
  type metadata accessor for CGRect(0);
}

uint64_t sub_1006B98FC()
{
  return type metadata accessor for SearchViewState.ViewState(0);
}

uint64_t sub_1006B9904()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 552) + 8))(*(_QWORD *)(v0 - 544), *(_QWORD *)(v0 - 200));
}

uint64_t sub_1006B9920()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v0, v1);
}

uint64_t sub_1006B992C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Array<A>.write(to:)(a1, a2, a3, a4, a5);
}

uint64_t sub_1006B9934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  return Set<>.write(to:)(v3, v4, a3, v6, v7, v5);
}

uint64_t sub_1006B9950()
{
  uint64_t v0;

  return FixedSizeTypeBinaryCodable.write(to:)(v0);
}

uint64_t sub_1006B995C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return String.write(to:)(v3, a2, a3);
}

void sub_1006B9968(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  sub_10009E8CC(v3, a2, a3);
}

void sub_1006B9970()
{
  sub_1006AFED0();
}

uint64_t sub_1006B9980(uint64_t a1)
{
  return static FixedSizeTypeBinaryCodable.read(from:)(a1);
}

void sub_1006B998C()
{
  uint64_t v0;

  static WeatherChange.Direction.read(from:)(v0);
}

void sub_1006B9998()
{
  uint64_t v0;

  sub_1006B6950(v0);
}

uint64_t sub_1006B99A4()
{
  return Location.write(to:)();
}

void sub_1006B99B0()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 3;
}

uint64_t sub_1006B99C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return Optional<A>.write(to:)(*(_QWORD *)(v3 - 88), *(_QWORD *)(v3 - 96), a3);
}

uint64_t sub_1006B99E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v3 - 104), v0, v1);
}

uint64_t sub_1006B99F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Array<A>.read(from:)(a1, a2, a3, a4);
}

uint64_t sub_1006B9A00()
{
  uint64_t v0;

  return v0;
}

void sub_1006B9A14()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 2;
}

uint64_t sub_1006B9A34()
{
  return 0;
}

double sub_1006B9A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(a24).n128_u64[0];
  return result;
}

uint64_t sub_1006B9A50@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)(a1 - 256);
}

uint64_t sub_1006B9A60()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 192);
}

uint64_t sub_1006B9A74()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 280);
}

double sub_1006B9A88()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32)).n128_u64[0];
  return result;
}

uint64_t sub_1006B9A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Array<A>.write(to:)(a1, a2, a3, a4, a5);
}

uint64_t sub_1006B9AA4(uint64_t a1)
{
  uint64_t v1;

  return Measurement.init(value:unit:)(a1, v1);
}

uint64_t sub_1006B9AAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return static Array<A>.read(from:)(v1, v2, v3, a1);
}

uint64_t sub_1006B9AC4()
{
  return Dictionary<>.write(to:)();
}

uint64_t sub_1006B9ACC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v2 - 120) + 32))(v0, v1, *(_QWORD *)(v2 - 104));
}

uint64_t sub_1006B9AF4(uint64_t a1)
{
  uint64_t v1;

  return Measurement.init(value:unit:)(a1, v1);
}

uint64_t sub_1006B9AFC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 96);
}

uint64_t sub_1006B9B0C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 96);
}

uint64_t sub_1006B9B1C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006B9B64@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_1006B9B84@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 176) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_1006B9BC4()
{
  return type metadata accessor for AveragesDetailViewState(0);
}

uint64_t sub_1006B9BCC()
{
  return type metadata accessor for HomeAndWorkRefinementViewState(0);
}

uint64_t sub_1006B9BD4()
{
  return type metadata accessor for NewsArticle(0);
}

uint64_t sub_1006B9BDC()
{
  return type metadata accessor for AirQualityDetailViewState(0);
}

uint64_t sub_1006B9BE4()
{
  uint64_t v0;

  return v0;
}

void sub_1006B9BF4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_10009E8CC(a1, a2, v2);
}

uint64_t sub_1006B9BFC(uint64_t a1, uint64_t a2)
{
  return static Optional<A>.read(from:)(a1, a2);
}

void sub_1006B9C10()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = v0;
  sub_1006AFED0();
}

void sub_1006B9C28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1005E5ABC(v2, a2);
}

uint64_t sub_1006B9C30()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 192);
}

uint64_t sub_1006B9C44()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006B9C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  return static Set<>.read(from:)(v6, a2, *(_QWORD *)(v7 - 376), v5, a5);
}

uint64_t sub_1006B9C78()
{
  return 0;
}

uint64_t sub_1006B9C84()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 376);
}

double sub_1006B9CA0()
{
  double v0;

  return v0;
}

uint64_t sub_1006B9CBC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = v0;
  return Date.write(to:)(v0);
}

void sub_1006B9CD0()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 67) = 1;
}

uint64_t sub_1006B9CDC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 112) + 8))(*(_QWORD *)(v1 - 96), v0);
}

uint64_t sub_1006B9CF0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 360);
}

uint64_t sub_1006B9CFC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 384);
}

uint64_t sub_1006B9D30@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v1)(_QWORD, _QWORD);
  uint64_t v2;

  return v1(*(_QWORD *)(a1 - 256), *(_QWORD *)(v2 - 256));
}

void sub_1006B9D3C(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1005E5ABC(*(_QWORD *)(a1 - 256), v1);
}

uint64_t sub_1006B9D48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return UVIndex.init(value:category:)(v2, a2);
}

uint64_t sub_1006B9D54()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 320);
}

double sub_1006B9D7C()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48)).n128_u64[0];
  return result;
}

void sub_1006B9D84()
{
  uint64_t v0;

  sub_1006B7048(v0);
}

void sub_1006B9D98()
{
  uint64_t v0;

  static NSUnitTemperature.read(from:)(*(_QWORD *)(v0 - 208));
}

void sub_1006B9DB8(uint64_t a1)
{
  sub_10007A100(a1);
}

uint64_t sub_1006B9DC4(uint64_t a1)
{
  return FixedSizeTypeBinaryCodable.write(to:)(a1);
}

double sub_1006B9DCC@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(double *)(v1 + a1);
}

double sub_1006B9DD8()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 - 144)).n128_u64[0];
  return result;
}

uint64_t sub_1006B9DE0()
{
  uint64_t v0;

  return LocationOfInterest.write(to:)(v0);
}

void sub_1006B9DF4()
{
  uint64_t v0;

  sub_1006B7048(v0);
}

uint64_t sub_1006B9E08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(v2, v1);
}

void sub_1006B9E1C()
{
  uint64_t v0;

  sub_10069554C(v0);
}

uint64_t sub_1006B9E28()
{
  uint64_t v0;

  return v0;
}

void sub_1006B9E34()
{
  sub_1000BF3B4();
}

uint64_t sub_1006B9E3C()
{
  uint64_t v0;

  return v0;
}

__n128 sub_1006B9E48()
{
  uint64_t v0;
  __n128 result;

  result = *(__n128 *)(v0 - 128);
  *(__n128 *)(v0 - 144) = result;
  return result;
}

void sub_1006B9E64(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_10007C75C(a1, *(_QWORD *)(v3 - 208), a3);
}

void sub_1006B9E70(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_100078058(a1, v2, v1);
}

void sub_1006B9E7C()
{
  uint64_t v0;

  static NSUnitTemperature.read(from:)(*(_QWORD *)(v0 - 192));
}

void sub_1006B9EAC(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 232) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1006B9EC8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006B9EE4()
{
  return type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
}

uint64_t sub_1006B9EEC(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  return sub_1000A0794(0, a2, a3);
}

void sub_1006B9EF8()
{
  type metadata accessor for CGRect(0);
}

uint64_t sub_1006B9F04()
{
  return type metadata accessor for NewsChannel(0);
}

uint64_t sub_1006B9F0C()
{
  uint64_t v0;

  return static String.read(from:)(v0);
}

void sub_1006B9F18(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  static WeatherMetadata.read(from:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_1006B9F24()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006B9F30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(v1 - 208));
}

uint64_t sub_1006B9F3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

void sub_1006B9F48()
{
  sub_1000BF3B4();
}

void sub_1006B9F50()
{
  uint64_t v0;

  sub_1006B4960(v0);
}

uint64_t sub_1006B9F5C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006B9F68()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006B9F74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return Dictionary<>.write(to:)(v4, v3, a3, v5);
}

uint64_t sub_1006B9F88()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006B9F94()
{
  uint64_t v0;

  return static Date.read(from:)(v0);
}

uint64_t sub_1006B9FA0()
{
  uint64_t v0;

  return v0;
}

void sub_1006B9FAC(uint64_t a1)
{
  sub_1006B69A8(a1);
}

void sub_1006B9FB4()
{
  uint64_t v0;

  static WeatherAvailability.AvailabilityKind.read(from:)(v0);
}

void sub_1006B9FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1005E5ABC(v2, a2);
}

uint64_t sub_1006B9FC8()
{
  return type metadata accessor for Locale(0);
}

uint64_t sub_1006B9FE8(uint64_t a1)
{
  return Date.write(to:)(a1);
}

uint64_t sub_1006B9FF4()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getWitnessTable(v0, v1);
}

uint64_t sub_1006BA008()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006BA024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, unsigned __int8 a13)
{
  return a13 - 1;
}

uint64_t sub_1006BA048()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 240) + 8))(*(_QWORD *)(v0 - 224), *(_QWORD *)(v0 - 232));
}

uint64_t sub_1006BA058@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 120));
}

uint64_t sub_1006BA060()
{
  uint64_t v0;

  return FixedSizeTypeBinaryCodable.write(to:)(v0);
}

uint64_t sub_1006BA07C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006BA098()
{
  uint64_t (*v0)(uint64_t, _QWORD);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, *(_QWORD *)(v2 - 152));
}

void sub_1006BA0A8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 2;
}

uint64_t sub_1006BA0B4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = v0;
  return type metadata accessor for PrecipitationShift(0);
}

double sub_1006BA0C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(a20).n128_u64[0];
  return result;
}

void sub_1006BA0CC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = v0;
}

uint64_t sub_1006BA0E4()
{
  uint64_t (*v0)(void);

  return v0();
}

uint64_t sub_1006BA0F4()
{
  uint64_t v0;

  return v0;
}

void sub_1006BA100()
{
  uint64_t v0;

  static Precipitation.read(from:)(v0);
}

uint64_t sub_1006BA110()
{
  uint64_t v0;

  return TimeZone.write(to:)(v0);
}

uint64_t sub_1006BA120@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return type metadata accessor for MoonEvents(0);
}

uint64_t sub_1006BA130@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return static DayPartForecast.read(from:)(*(_QWORD *)(v1 - 240), *(_QWORD *)(a1 - 256));
}

uint64_t sub_1006BA140(uint64_t a1)
{
  uint64_t v1;

  return Measurement.init(value:unit:)(a1, v1);
}

uint64_t sub_1006BA150()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 328);
}

uint64_t sub_1006BA168()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 432);
}

uint64_t sub_1006BA180()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 424);
}

uint64_t sub_1006BA198()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 408);
}

void sub_1006BA1B0()
{
  sub_1006959E0();
}

uint64_t sub_1006BA1CC(uint64_t a1)
{
  return static Date.read(from:)(a1);
}

void sub_1006BA1D4(uint64_t a1)
{
  static NSUnitLength.read(from:)(a1);
}

uint64_t sub_1006BA1DC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006BA1E8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 184);
}

uint64_t sub_1006BA200()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t sub_1006BA210()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006BA220()
{
  uint64_t v0;

  return v0;
}

void sub_1006BA23C()
{
  uint64_t v0;

  static NSUnitLength.read(from:)(*(_QWORD *)(v0 - 240));
}

uint64_t sub_1006BA24C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 120);
}

uint64_t sub_1006BA258()
{
  uint64_t v0;

  return v0;
}

void sub_1006BA27C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1005E5ABC(v2, a2);
}

uint64_t sub_1006BA284()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006BA290(uint64_t a1)
{
  return static Location.read(from:)(a1);
}

uint64_t sub_1006BA298()
{
  return 0;
}

void sub_1006BA2B4()
{
  uint64_t v0;

  static NSUnitLength.read(from:)(v0);
}

void sub_1006BA2C4()
{
  WeatherMetadata.write(to:)();
}

uint64_t sub_1006BA2D4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 88);
}

uint64_t sub_1006BA2E4(uint64_t a1)
{
  return Date.write(to:)(a1);
}

__n128 sub_1006BA2EC()
{
  uint64_t v0;
  __n128 result;

  result = *(__n128 *)(v0 - 128);
  *(__n128 *)(v0 - 144) = result;
  return result;
}

uint64_t sub_1006BA2FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Optional<A>.write(to:)(a1, a2, a3);
}

void sub_1006BA310()
{
  uint64_t v0;

  sub_1006B6950(v0);
}

void sub_1006BA320(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_10007C75C(a1, *(_QWORD *)(v3 - 208), a3);
}

uint64_t sub_1006BA328(uint64_t a1)
{
  uint64_t v1;

  return static Optional<A>.read(from:)(a1, v1);
}

uint64_t sub_1006BA344()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 208);
}

uint64_t sub_1006BA350()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 312);
}

uint64_t sub_1006BA368()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 560);
}

uint64_t sub_1006BA384()
{
  return type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0);
}

uint64_t sub_1006BA38C()
{
  return type metadata accessor for ArticlePlacement(0);
}

uint64_t sub_1006BA394()
{
  return type metadata accessor for NotificationSubscription.Location(0);
}

uint64_t sub_1006BA39C()
{
  return type metadata accessor for AirQualityScaleGradientStop(0);
}

uint64_t sub_1006BA3A4()
{
  return type metadata accessor for NewsArticlePlacement(0);
}

uint64_t sub_1006BA3AC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 544);
}

uint64_t sub_1006BA3C4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 600);
}

uint64_t sub_1006BA3DC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006BA3EC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006BA3FC()
{
  uint64_t v0;
  uint64_t v1;

  return static Optional<A>.read(from:)(v0, v1);
}

uint64_t sub_1006BA40C()
{
  uint64_t v0;

  return static FixedSizeTypeBinaryCodable.read(from:)(v0);
}

void sub_1006BA41C()
{
  sub_1006AFED0();
}

uint64_t sub_1006BA424()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006BA434()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006BA440()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006BA450()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006BA45C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 8))(v1, *(_QWORD *)(v2 - 104));
}

void sub_1006BA46C()
{
  uint64_t v0;

  static NSUnitTemperature.read(from:)(v0);
}

uint64_t sub_1006BA47C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return String.write(to:)(v0, v2, v1);
}

void sub_1006BA48C()
{
  uint64_t v0;

  static NSUnitTemperature.read(from:)(v0);
}

void sub_1006BA49C()
{
  uint64_t v0;

  static NSUnitLength.read(from:)(v0);
}

uint64_t sub_1006BA4AC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006BA4C4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006BA4D4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006BA4E4()
{
  uint64_t v0;

  return v0;
}

void sub_1006BA4F0()
{
  NextHourToken.write(to:)();
}

void sub_1006BA500()
{
  PrecipitationShift.write(to:)();
}

void sub_1006BA510()
{
  CloudCoverByAltitude.write(to:)();
}

void *sub_1006BA520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1001C4B3C(&a9, (void *)(a1 + 16));
}

uint64_t sub_1006BA530()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006BA540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Dictionary<>.write(to:)(a1, a2, a3, a4);
}

uint64_t sub_1006BA548()
{
  uint64_t v0;

  return DetailCondition.write(to:)(v0);
}

double sub_1006BA57C()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 - 224)).n128_u64[0];
  return result;
}

uint64_t sub_1006BA584(uint64_t a1)
{
  return FixedSizeTypeBinaryCodable.write(to:)(a1);
}

uint64_t sub_1006BA5A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, unsigned __int8 a13)
{
  return a13 - 1;
}

uint64_t sub_1006BA5AC()
{
  return UVIndex.category.getter();
}

uint64_t sub_1006BA5DC(uint64_t a1)
{
  return static String.read(from:)(a1);
}

uint64_t sub_1006BA5E4(uint64_t a1)
{
  uint64_t v1;

  return Measurement.init(value:unit:)(a1, *(_QWORD *)(v1 - 112));
}

__n128 sub_1006BA5F0@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v1;
  unint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  __n128 result;

  result = *(__n128 *)(v4 - 144);
  *a1 = result;
  a1[1].n128_u64[0] = v1;
  a1[1].n128_u64[1] = v2;
  a1[2].n128_u8[0] = v3;
  return result;
}

__n128 sub_1006BA610()
{
  uint64_t v0;
  __n128 result;

  result = *(__n128 *)(v0 - 120);
  *(__n128 *)(v0 - 144) = result;
  return result;
}

uint64_t sub_1006BA628()
{
  return type metadata accessor for ArticlePlacementLocation(0);
}

uint64_t sub_1006BA634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AirQualitySource.init(kind:description:)(a1, a3, a4);
}

void sub_1006BA64C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 96) = v1;
  *(_QWORD *)(v6 - 120) = v5;
  *(_QWORD *)(v6 - 112) = v4;
  *(_QWORD *)(v6 - 144) = v3;
  *(_QWORD *)(v6 - 136) = v2;
  *(_QWORD *)(v6 - 128) = v0;
}

double sub_1006BA678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(a19).n128_u64[0];
  return result;
}

void sub_1006BA694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 256) = (char *)&a9 - v9;
}

uint64_t sub_1006BA6A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_1006BA6B0(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 376) = result;
  return result;
}

uint64_t sub_1006BA6BC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 368);
}

double sub_1006BA6C8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1 - 256);
  *(_QWORD *)(v2 - 72) = v1;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v3).n128_u64[0];
  return result;
}

uint64_t sub_1006BA6D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD, uint64_t);

  return v2(*(_QWORD *)(a1 - 256), v1);
}

uint64_t sub_1006BA6F8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006BA70C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006BA720()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 304);
}

void sub_1006BA734()
{
  sub_1000BF3B4();
}

uint64_t sub_1006BA73C()
{
  uint64_t v0;

  return FixedSizeTypeBinaryCodable.write(to:)(v0);
}

uint64_t sub_1006BA754()
{
  return swift_willThrow();
}

uint64_t sub_1006BA75C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Dictionary<>.write(to:)(a1, a2, a3, a4);
}

double sub_1006BA764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(a13).n128_u64[0];
  return result;
}

double sub_1006BA76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(a23).n128_u64[0];
  return result;
}

uint64_t sub_1006BA774(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_1006BA77C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006BA790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Optional<A>.write(to:)(a1, a2, a3);
}

uint64_t sub_1006BA79C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006BA7A8()
{
  uint64_t v0;

  return v0;
}

void sub_1006BA7D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_10007C75C(a1, v3, a3);
}

uint64_t sub_1006BA7D8(uint64_t a1)
{
  return static Location.read(from:)(a1);
}

uint64_t sub_1006BA7E0(uint64_t a1)
{
  return static String.read(from:)(a1);
}

uint64_t sub_1006BA7EC()
{
  uint64_t v0;

  return static String.read(from:)(*(_QWORD *)(v0 - 72));
}

void sub_1006BA7F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1005E5ABC(*(_QWORD *)(v2 - 128), a2);
}

void sub_1006BA82C()
{
  static PrecipitationAmount.read(from:)();
}

uint64_t sub_1006BA838()
{
  uint64_t v0;

  return v0;
}

void sub_1006BA844(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  sub_10007C75C(v4, v3, a3);
}

uint64_t sub_1006BA850()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, v0);
}

double sub_1006BA85C()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 - 248)).n128_u64[0];
  return result;
}

double sub_1006BA878()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 - 232)).n128_u64[0];
  return result;
}

uint64_t sub_1006BA880@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 216));
}

void sub_1006BA888()
{
  Precipitation.write(to:)();
}

void sub_1006BA890(uint64_t a1)
{
  static NSUnitTemperature.read(from:)(a1);
}

uint64_t sub_1006BA898(uint64_t a1)
{
  return FixedSizeTypeBinaryCodable.write(to:)(a1);
}

uint64_t sub_1006BA8AC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 104);
}

uint64_t sub_1006BA8C0()
{
  uint64_t (*v0)(_QWORD, _QWORD);
  uint64_t v1;

  return v0(*(_QWORD *)(v1 - 208), *(_QWORD *)(v1 - 192));
}

double sub_1006BA8CC()
{
  double v0;

  return v0;
}

uint64_t sub_1006BA8EC()
{
  uint64_t (*v0)(_QWORD);

  return v0(0);
}

uint64_t sub_1006BA8F4()
{
  return type metadata accessor for LocationDisplayContext(0);
}

uint64_t sub_1006BA8FC()
{
  return type metadata accessor for DetailChartSelection(0);
}

uint64_t sub_1006BA904()
{
  return type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
}

uint64_t sub_1006BA90C()
{
  return type metadata accessor for DetailHeroChartLollipopPosition(0);
}

uint64_t sub_1006BA914()
{
  return type metadata accessor for MoonDetailSelectedDate(0);
}

void sub_1006BA91C()
{
  WeatherAvailability.AvailabilityKind.write(to:)();
}

uint64_t sub_1006BA924()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1006BA930@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(v1 - 168));
}

uint64_t sub_1006BA93C()
{
  uint64_t v0;

  return TimeZone.write(to:)(v0);
}

void sub_1006BA948(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_1006955D4(v2, a2);
}

void sub_1006BA950(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1005E5ABC(v2, a2);
}

uint64_t sub_1006BA958()
{
  uint64_t v0;

  return static Date.read(from:)(v0);
}

void sub_1006BA960()
{
  uint64_t v0;
  char v1;

  sub_1006B488C(v0, v1);
}

void sub_1006BA96C()
{
  WeatherMetadata.write(to:)();
}

uint64_t sub_1006BA998@<X0>(uint64_t (*a1)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, *(_QWORD *)(v2 - 96));
}

void sub_1006BA9A4()
{
  uint64_t v0;

  sub_1006B6950(v0);
}

void sub_1006BA9B0()
{
  sub_10069E9E8();
}

void sub_1006BA9BC()
{
  sub_1000BF3B4();
}

void sub_1006BA9C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;

  sub_1006A20D0(v13, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

double sub_1006BA9D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(a18).n128_u64[0];
  return result;
}

void sub_1006BA9D8()
{
  uint64_t v0;

  sub_1006B71EC(v0);
}

uint64_t sub_1006BA9E4()
{
  uint64_t v0;

  return static Locale.read(from:)(v0);
}

void sub_1006BA9F0(uint64_t a1)
{
  static LocationAuthorizationState.read(from:)(a1);
}

uint64_t sub_1006BA9F8()
{
  uint64_t v0;

  return v0;
}

void sub_1006BAA04()
{
  uint64_t v0;

  sub_1006B71EC(v0);
}

uint64_t sub_1006BAA1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006BAA28);
}

uint64_t sub_1006BAA28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1000CD0E8();
  return _s7Weather24LocationCompositionStateOwet_0(v1, v0, v2);
}

uint64_t sub_1006BAA50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006BAA5C);
}

uint64_t sub_1006BAA5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1000CD0E8();
  return _s7Weather24LocationCompositionStateOwst_0(v1, v0, v0, v2);
}

uint64_t type metadata accessor for LocationRowContentViewLargeText(uint64_t a1)
{
  uint64_t result;

  result = qword_100BFCD38;
  if (!qword_100BFCD38)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationRowContentViewLargeText);
  return result;
}

uint64_t sub_1006BAAC0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for ListLocationViewModel(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1006BAB28(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABD2F0, 1);
}

void sub_1006BAB38()
{
  EnvironmentValues.redactionReasons.getter();
  sub_10004A298();
}

uint64_t sub_1006BAB54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_1000DBCB4();
  __chkstk_darwin(v2);
  sub_100098728();
  v5 = v4 - v3;
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v4 - v3, a1);
  return EnvironmentValues.redactionReasons.setter(v5);
}

uint64_t sub_1006BABC4(uint64_t a1)
{
  return sub_1006BABD4(a1, 0);
}

uint64_t sub_1006BABCC(uint64_t a1)
{
  return sub_1006BABD4(a1, 2u);
}

uint64_t sub_1006BABD4(uint64_t a1, unsigned __int8 a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;

  sub_10048BC30(a2, a1);
  if ((v2 & 1) != 0)
  {
    v3 = sub_1000BA294(&qword_100BD9468);
    v4 = sub_1000DBCB4();
    v5 = swift_allocObject(v3, ((*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v4 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80) | 7);
    *(_OWORD *)(v5 + 16) = xmmword_10097CA50;
    static RedactionReasons.placeholder.getter();
    sub_10000F1C8(&qword_100BCD4E8, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons);
    v7 = v6;
    sub_1000BA294(&qword_100BD9458);
    sub_10003D2DC(&qword_100BD9460, &qword_100BD9458);
    v16 = sub_1000C61E4(v8, v9, v10, v11, v12, v13, v14, v15, v33, v5);
    v19 = v4;
    v20 = v7;
  }
  else
  {
    v21 = sub_1000DBCB4();
    sub_10000F1C8(&qword_100BCD4E8, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons);
    v23 = v22;
    sub_1000BA294(&qword_100BD9458);
    sub_10003D2DC(&qword_100BD9460, &qword_100BD9458);
    v16 = sub_1000C61E4(v24, v25, v26, v27, v28, v29, v30, v31, v33, (char)_swiftEmptyArrayStorage);
    v19 = v21;
    v20 = v23;
  }
  return dispatch thunk of SetAlgebra.init<A>(_:)(v16, v17, v18, v19, v20);
}

void sub_1006BAD48()
{
  uint64_t *v0;

  *v0 = sub_1000C5808();
  sub_10004A298();
}

void sub_1006BAD64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = sub_1000BA294(&qword_100BFCD70);
  __chkstk_darwin(v1);
  sub_100098728();
  v4 = v3 - v2;
  *(_QWORD *)v4 = static HorizontalAlignment.leading.getter(v5);
  *(_QWORD *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 16) = 1;
  v6 = sub_1000BA294(&qword_100BFCD78);
  sub_1006BAE4C(v0, (_QWORD *)(v4 + *(int *)(v6 + 44)));
  static Alignment.leading.getter(v7);
  sub_1009465D8();
  sub_100021A14(v4, &qword_100BFCD70);
}

void sub_1006BAE4C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  double v74;
  double v75;
  void *v76;
  void *v77;
  double v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  int *v126;
  char *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  int *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  unint64_t v141;
  _QWORD *v142;
  char *v143;
  uint64_t KeyPath;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t v154;

  v142 = a2;
  v3 = sub_1000BA294(&qword_100BFCD80);
  __chkstk_darwin(v3);
  v150 = (uint64_t)&v131 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v148 = (uint64_t)&v131 - v6;
  v7 = type metadata accessor for LocationRowSubheadingView(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v131 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v131 - v11;
  v13 = type metadata accessor for ListLocationViewModel(0);
  v14 = (uint64_t *)(a1 + *(int *)(v13 + 24));
  v15 = v14[1];
  v153 = *v14;
  v154 = v15;
  v16 = sub_100114EF8();
  swift_bridgeObjectRetain();
  v141 = v16;
  v17 = Text.init<A>(_:)(&v153, &type metadata for String, v16);
  v19 = v18;
  v21 = v20;
  v23 = v22 & 1;
  swift_beginAccess(&xmmword_100BFE5C8, &v153, 33, 0);
  v24 = sub_1006D0C04();
  swift_endAccess(&v153);
  v25 = Font.init(_:)(v24);
  v26 = Text.font(_:)(v25, v17, v19, v23, v21);
  v145 = v27;
  v146 = v26;
  v140 = v28;
  v147 = v29;
  swift_release();
  v30 = v17;
  v31 = (int *)v13;
  sub_1000D31B4(v30, v19, v23);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath(&unk_1009BE6C0);
  sub_10000AB54(a1, (uint64_t)v9, type metadata accessor for ListLocationViewModel);
  v32 = &v9[*(int *)(v7 + 20)];
  *(_QWORD *)v32 = swift_getKeyPath(&unk_1009BE6F0);
  v32[8] = 0;
  v33 = &v9[*(int *)(v7 + 24)];
  *(_QWORD *)v33 = swift_getKeyPath(&unk_1009BE720);
  v34 = sub_1000BA294(&qword_100BC2990);
  swift_storeEnumTagMultiPayload(v33, v34, 0);
  v149 = v9;
  v143 = v12;
  sub_1006BC91C((uint64_t)v9, (uint64_t)v12);
  v35 = v31[17];
  v151 = a1;
  v36 = (uint64_t *)(a1 + v35);
  v37 = v36[1];
  if (v37)
  {
    v38 = *v36;
    v39 = (uint64_t *)(v151 + v31[16]);
    v40 = v39[1];
    v153 = *v39;
    v154 = v40;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v41 = v141;
    v42 = Text.init<A>(_:)(&v153, &type metadata for String, v141);
    v44 = v43;
    v136 = v31;
    v46 = v45;
    v48 = v47 & 1;
    swift_beginAccess(&xmmword_100BFE5C8, &v153, 33, 0);
    sub_1006D1468();
    v50 = v49;
    swift_endAccess(&v153);
    v51 = Font.init(_:)(v50);
    v132 = Text.font(_:)(v51, v42, v44, v48, v46);
    v135 = v52;
    v54 = v53;
    v134 = v55;
    swift_release();
    v133 = v54 & 1;
    sub_1000D31B4(v42, v44, v48);
    swift_bridgeObjectRelease();
    v153 = v38;
    v154 = v37;
    v56 = Text.init<A>(_:)(&v153, &type metadata for String, v41);
    v58 = v57;
    v60 = v59;
    v62 = v61 & 1;
    swift_beginAccess(&xmmword_100BFE5C8, &v153, 33, 0);
    sub_1006D154C();
    v64 = v63;
    swift_endAccess(&v153);
    v65 = Font.init(_:)(v64);
    v66 = Text.font(_:)(v65, v56, v58, v62, v60);
    v68 = v67;
    LOBYTE(v64) = v69;
    v71 = v70;
    swift_release();
    sub_1000D31B4(v56, v58, v62);
    swift_bridgeObjectRelease();
    swift_beginAccess(&xmmword_100BFE5C8, &v153, 33, 0);
    sub_1006D1468();
    v73 = v72;
    objc_msgSend(v72, "capHeight", swift_endAccess(&v153).n128_f64[0]);
    v75 = v74;

    swift_beginAccess(&xmmword_100BFE5C8, &v153, 33, 0);
    sub_1006D154C();
    v77 = v76;
    objc_msgSend(v76, "capHeight", swift_endAccess(&v153).n128_f64[0]);
    v79 = v78;

    v80 = Text.baselineOffset(_:)(v66, v68, v64 & 1, v71, v75 - v79 + -1.0);
    v82 = v81;
    v84 = v83;
    v86 = v85 & 1;
    v31 = v136;
    sub_1000D31B4(v66, v68, v64 & 1);
    swift_bridgeObjectRelease();
    v87 = v132;
    v88 = v135;
    LOBYTE(v68) = v133;
    v138 = static Text.+ infix(_:_:)(v132, v135, v133, v134, v80, v82, v86, v84);
    v137 = v89;
    v139 = v90;
    v92 = v91;
    sub_1000D31B4(v80, v82, v86);
    swift_bridgeObjectRelease();
    v93 = v87;
    v94 = v88;
    v95 = v68;
  }
  else
  {
    v96 = (uint64_t *)(v151 + v31[16]);
    v97 = v96[1];
    v153 = *v96;
    v154 = v97;
    swift_bridgeObjectRetain();
    v98 = Text.init<A>(_:)(&v153, &type metadata for String, v141);
    v100 = v99;
    v102 = v101;
    v104 = v103 & 1;
    swift_beginAccess(&xmmword_100BFE5C8, &v153, 33, 0);
    sub_1006D1468();
    v106 = v105;
    swift_endAccess(&v153);
    v107 = Font.init(_:)(v106);
    v138 = Text.font(_:)(v107, v98, v100, v104, v102);
    v137 = v108;
    v139 = v109;
    v92 = v110;
    swift_release();
    v93 = v98;
    v94 = v100;
    v95 = v104;
  }
  sub_1000D31B4(v93, v94, v95);
  swift_bridgeObjectRelease();
  v111 = swift_getKeyPath(&unk_1009BE6C0);
  v112 = *(_BYTE *)(v151 + v31[21]);
  v113 = v148;
  v141 = v111;
  if ((v112 & 1) != 0)
  {
    v114 = sub_1000BA294(&qword_100BFCD88);
    _s7Weather24LocationCompositionStateOwst_0(v113, 1, 1, v114);
    v115 = v139;
    v116 = v138;
    v117 = v137;
    sub_1000D55D4(v138, v137, v139 & 1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v115 = v139;
    v116 = v138;
    v117 = v137;
    sub_1000D55D4(v138, v137, v139 & 1);
    swift_bridgeObjectRetain();
    sub_1006BB770(v151, v113);
    v118 = sub_1000BA294(&qword_100BFCD88);
    _s7Weather24LocationCompositionStateOwst_0(v113, 0, 1, v118);
  }
  v119 = v92;
  v120 = v140 & 1;
  LOBYTE(v153) = v140 & 1;
  v121 = (uint64_t)v149;
  sub_10000AB54((uint64_t)v143, (uint64_t)v149, type metadata accessor for LocationRowSubheadingView);
  v122 = v115 & 1;
  v152 = v115 & 1;
  v123 = v150;
  sub_100037794(v113, v150, &qword_100BFCD80);
  v124 = v142;
  v125 = v145;
  *v142 = v146;
  v124[1] = v125;
  *((_BYTE *)v124 + 16) = v120;
  v124[3] = v147;
  *((_WORD *)v124 + 16) = 256;
  v124[5] = KeyPath;
  v124[6] = 2;
  *((_BYTE *)v124 + 56) = 0;
  v126 = (int *)sub_1000BA294(&qword_100BFCD90);
  sub_10000AB54(v121, (uint64_t)v124 + v126[12], type metadata accessor for LocationRowSubheadingView);
  v127 = (char *)v124 + v126[16];
  *(_QWORD *)v127 = v116;
  *((_QWORD *)v127 + 1) = v117;
  v127[16] = v122;
  v128 = v141;
  *((_QWORD *)v127 + 3) = v119;
  *((_QWORD *)v127 + 4) = v128;
  *((_QWORD *)v127 + 5) = 1;
  v127[48] = 0;
  sub_100037794(v123, (uint64_t)v124 + v126[20], &qword_100BFCD80);
  v129 = v145;
  v130 = v146;
  sub_1000D55D4(v146, v145, v120);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000D55D4(v116, v117, v122);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000D55D4(v130, v129, v120);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_100021A14(v148, &qword_100BFCD80);
  sub_1000D31B4(v116, v117, v122);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000215BC((uint64_t)v143, type metadata accessor for LocationRowSubheadingView);
  sub_1000D31B4(v130, v129, v120);
  swift_release();
  swift_bridgeObjectRelease();
  sub_100021A14(v150, &qword_100BFCD80);
  sub_1000D31B4(v116, v117, v152);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000215BC((uint64_t)v149, type metadata accessor for LocationRowSubheadingView);
  sub_1000D31B4(v130, v129, v153);
  swift_release();
  swift_bridgeObjectRelease();
}

void sub_1006BB770(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  __n128 v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t KeyPath;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  char *v80;
  __n128 v81;
  uint64_t v82;
  uint64_t *v83;
  _QWORD *v84;
  void (*v85)(char *, char *, uint64_t, __n128);
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  char *v91;
  uint64_t v92;
  int *v93;
  uint64_t v94;
  void *v95;
  char v96;
  char v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __n128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  int v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  __n128 v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t OpaqueTypeConformance2;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;

  v185 = a1;
  v184 = a2;
  v209 = sub_1000BA294(&qword_100BD9350);
  __chkstk_darwin(v209);
  v172 = (uint64_t *)((char *)&v164 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v183 = sub_1000BA294(&qword_100BD9358);
  __chkstk_darwin(v183);
  v173 = (char *)&v164 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v174 = (uint64_t)&v164 - v5;
  v178 = sub_1000BA294(&qword_100BFCD98);
  __chkstk_darwin(v178);
  v182 = (uint64_t)&v164 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = sub_1000BA294((uint64_t *)&unk_100C0A510);
  __chkstk_darwin(v180);
  v171 = (char *)&v164 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = type metadata accessor for TemperatureHighLowTextVertical(0);
  v168 = *(_QWORD *)(v169 - 8);
  __chkstk_darwin(v169);
  v167 = (char *)&v164 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_1000BA294(&qword_100BD9368);
  __chkstk_darwin(v176);
  v170 = (char *)&v164 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = sub_1000BA294(&qword_100BFCDA0);
  v166 = *(_QWORD *)(v179 - 8);
  __chkstk_darwin(v179);
  v164 = (char *)&v164 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v165 = (char *)&v164 - v12;
  v13 = type metadata accessor for LocationRowContentViewLargeText(0);
  __chkstk_darwin(v13);
  v201 = (uint64_t)&v164 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000BA294(&qword_100BFCDA8);
  __chkstk_darwin(v15);
  v181 = (uint64_t)&v164 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v177 = (char *)&v164 - v18;
  v19 = type metadata accessor for RedactionReasons(0);
  v207 = *(_QWORD **)(v19 - 8);
  v208 = v19;
  __chkstk_darwin(v19);
  v206 = (char *)&v164 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for BlendMode(0);
  v204 = *(_QWORD *)(v21 - 8);
  v205 = v21;
  __chkstk_darwin(v21);
  v203 = (char *)&v164 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = sub_1000BA294(&qword_100BCF148);
  __chkstk_darwin(v192);
  v24 = (uint64_t *)((char *)&v164 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v189 = type metadata accessor for Image.Scale(0);
  v188 = *(_QWORD *)(v189 - 8);
  __chkstk_darwin(v189);
  v186 = (char *)&v164 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = sub_1000BA294(&qword_100BD9840);
  __chkstk_darwin(v190);
  v187 = (char *)&v164 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = sub_1000BA294(&qword_100BFCDB0);
  __chkstk_darwin(v195);
  v191 = (uint64_t)&v164 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_1000BA294(&qword_100BFCDB8);
  __chkstk_darwin(v194);
  v193 = (char *)&v164 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = sub_1000BA294(&qword_100BFCDC0);
  __chkstk_darwin(v197);
  v196 = (uint64_t)&v164 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = sub_1000BA294(&qword_100BFCDC8);
  __chkstk_darwin(v200);
  v198 = (uint64_t)&v164 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v202 = sub_1000BA294(&qword_100BFCDD0);
  __chkstk_darwin(v202);
  v175 = (uint64_t)&v164 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v199 = (char *)&v164 - v33;
  __chkstk_darwin(v34);
  v210 = (uint64_t)&v164 - v35;
  v36 = sub_1006BC758();
  v38 = v37;
  v40 = v39;
  v42 = v41 & 1;
  swift_beginAccess(&xmmword_100BFE5C8, &v211, 33, 0);
  sub_1006D1130();
  v44 = v43;
  swift_endAccess(&v211);
  v45 = Font.init(_:)(v44);
  v46 = Text.font(_:)(v45, v36, v38, v42, v40);
  v48 = v47;
  v50 = v49;
  v52 = v51;
  swift_release();
  v53 = v50 & 1;
  sub_1000D31B4(v36, v38, v42);
  v54 = swift_bridgeObjectRelease();
  v55 = v188;
  v56 = v186;
  v57 = v189;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v188 + 104))(v186, enum case for Image.Scale.small(_:), v189, v54);
  KeyPath = swift_getKeyPath(&unk_1009BE750);
  v59 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
  v60 = v55;
  v61 = v57;
  v59((char *)v24 + *(int *)(v192 + 28), v56, v57);
  v62 = (uint64_t)v24;
  *v24 = KeyPath;
  v63 = (uint64_t)v187;
  sub_100037794(v62, (uint64_t)&v187[*(int *)(v190 + 36)], &qword_100BCF148);
  *(_QWORD *)v63 = v46;
  *(_QWORD *)(v63 + 8) = v48;
  *(_BYTE *)(v63 + 16) = v53;
  *(_QWORD *)(v63 + 24) = v52;
  sub_1000D55D4(v46, v48, v53);
  swift_bridgeObjectRetain();
  sub_100021A14(v62, &qword_100BCF148);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v56, v61);
  v64 = v48;
  v65 = v185;
  sub_1000D31B4(v46, v64, v53);
  v66 = swift_bridgeObjectRelease();
  LODWORD(KeyPath) = static HierarchicalShapeStyle.secondary.getter(v66);
  v67 = v191;
  sub_100037794(v63, v191, &qword_100BD9840);
  *(_DWORD *)(v67 + *(int *)(v195 + 36)) = KeyPath;
  sub_100021A14(v63, &qword_100BD9840);
  v69 = v203;
  v68 = v204;
  v70 = v205;
  (*(void (**)(char *, _QWORD, uint64_t))(v204 + 104))(v203, enum case for BlendMode.plusLighter(_:), v205);
  v71 = (uint64_t)v193;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(&v193[*(int *)(v194 + 36)], v69, v70);
  sub_100037794(v67, v71, &qword_100BFCDB0);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v70);
  sub_100021A14(v67, &qword_100BFCDB0);
  v72 = v196;
  sub_100037794(v71, v196, &qword_100BFCDB8);
  *(_WORD *)(v72 + *(int *)(v197 + 36)) = 256;
  sub_100021A14(v71, &qword_100BFCDB8);
  v73 = *((_QWORD *)sub_1008F9934() + 2);
  swift_bridgeObjectRelease();
  if (v73)
    v74 = 1;
  else
    v74 = 4;
  v75 = swift_getKeyPath(&unk_1009BE6C0);
  v76 = v198;
  sub_100037794(v72, v198, &qword_100BFCDC0);
  v77 = v76 + *(int *)(v200 + 36);
  *(_QWORD *)v77 = v75;
  *(_QWORD *)(v77 + 8) = v74;
  *(_BYTE *)(v77 + 16) = 0;
  sub_100021A14(v72, &qword_100BFCDC0);
  v78 = swift_getKeyPath(&unk_1009BE780);
  v79 = sub_1008F9934();
  v80 = v206;
  sub_1006BABD4((uint64_t)v79, 0);
  v81 = swift_bridgeObjectRelease();
  v82 = (uint64_t)v199;
  v83 = (uint64_t *)&v199[*(int *)(v202 + 36)];
  v84 = v207;
  v85 = (void (*)(char *, char *, uint64_t, __n128))v207[2];
  v86 = v80;
  v87 = v80;
  v88 = v208;
  v85((char *)v83 + *(int *)(v209 + 28), v86, v208, v81);
  *v83 = v78;
  v89 = v82;
  sub_100037794(v76, v82, &qword_100BFCDC8);
  v90 = (_QWORD *)v84[1];
  v91 = v87;
  v92 = v88;
  v207 = v90;
  ((void (*)(char *, uint64_t))v90)(v87, v88);
  sub_100021A14(v76, &qword_100BFCDC8);
  sub_1000F111C(v89, v210, &qword_100BFCDD0);
  v93 = (int *)type metadata accessor for ListLocationViewModel(0);
  LODWORD(v89) = *(unsigned __int8 *)(v65 + v93[24]);
  v94 = v201;
  sub_10000AB54(v65, v201, type metadata accessor for LocationRowContentViewLargeText);
  if ((_DWORD)v89 != 1)
  {
    sub_1000215BC(v94, type metadata accessor for LocationRowContentViewLargeText);
    goto LABEL_9;
  }
  v95 = sub_1008F9934();
  sub_10048BC30(2u, (uint64_t)v95);
  v97 = v96;
  swift_bridgeObjectRelease();
  sub_1000215BC(v94, type metadata accessor for LocationRowContentViewLargeText);
  if ((v97 & 1) != 0)
  {
LABEL_9:
    v136 = (uint64_t *)(v65 + v93[18]);
    v137 = *v136;
    v138 = v136[1];
    v139 = (uint64_t *)(v65 + v93[19]);
    v140 = *v139;
    v141 = v139[1];
    v204 = v137;
    v205 = v140;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v142 = sub_1008F9934();
    sub_10048BC30(2u, (uint64_t)v142);
    LODWORD(v203) = v143;
    swift_bridgeObjectRelease();
    v144 = (uint64_t *)(v65 + v93[20]);
    v146 = *v144;
    v145 = v144[1];
    v147 = swift_getKeyPath(&unk_1009BE780);
    swift_bridgeObjectRetain();
    v148 = sub_1008F9934();
    sub_1006BABD4((uint64_t)v148, 2u);
    v149 = swift_bridgeObjectRelease();
    v150 = v172;
    v85((char *)v172 + *(int *)(v209 + 28), v91, v92, v149);
    *v150 = v147;
    v151 = v183;
    v152 = (uint64_t)v173;
    sub_100037794((uint64_t)v150, (uint64_t)&v173[*(int *)(v183 + 36)], &qword_100BD9350);
    *(_QWORD *)v152 = v204;
    *(_QWORD *)(v152 + 8) = v138;
    *(_QWORD *)(v152 + 16) = v205;
    *(_QWORD *)(v152 + 24) = v141;
    *(_BYTE *)(v152 + 32) = v203 & 1;
    *(_QWORD *)(v152 + 40) = v146;
    *(_QWORD *)(v152 + 48) = v145;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100021A14((uint64_t)v150, &qword_100BD9350);
    ((void (*)(char *, uint64_t))v207)(v91, v92);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v153 = v174;
    sub_1000F111C(v152, v174, &qword_100BD9358);
    v154 = v182;
    sub_100037794(v153, v182, &qword_100BD9358);
    swift_storeEnumTagMultiPayload(v154, v178, 1);
    v155 = sub_100345678();
    sub_10003D2DC(&qword_100BC4E30, (uint64_t *)&unk_100C0A510);
    v211 = v176;
    v212 = v180;
    v213 = v155;
    v214 = v156;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v211, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    v158 = sub_100345714();
    v135 = (uint64_t)v177;
    _ConditionalContent<>.init(storage:)(v154, v179, v151, OpaqueTypeConformance2, v158);
    sub_100021A14(v153, &qword_100BD9358);
    goto LABEL_10;
  }
  v98 = v93[19];
  v99 = (uint64_t *)(v65 + v93[18]);
  v100 = *v99;
  v101 = v99[1];
  v102 = *(_QWORD *)(v65 + v98);
  v103 = *(_QWORD *)(v65 + v98 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v104 = v167;
  TemperatureHighLowTextVertical.init(highTemperature:lowTemperature:showNumericOnlyHighLow:scaleFactor:additionalSpacing:)(v100, v101, v102, v103, 0, 1.0, 0.0);
  v105 = (uint64_t *)(v65 + v93[20]);
  v106 = v105[1];
  v211 = *v105;
  v212 = v106;
  v107 = sub_100114EF8();
  swift_bridgeObjectRetain();
  v108 = Text.init<A>(_:)(&v211, &type metadata for String, v107);
  v110 = v109;
  v112 = v111;
  v114 = v113 & 1;
  sub_10000F1C8(&qword_100BC3BA8, (uint64_t (*)(uint64_t))&type metadata accessor for TemperatureHighLowTextVertical);
  v115 = (uint64_t)v170;
  v116 = v169;
  View.accessibilityLabel(_:)(v108, v110, v114, v112, v169, v117);
  sub_1000D31B4(v108, v110, v114);
  v118 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, __n128))(v168 + 8))(v104, v116, v118);
  v119 = enum case for DynamicTypeSize.accessibility3(_:);
  v120 = type metadata accessor for DynamicTypeSize(0);
  v121 = (uint64_t)v171;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v120 - 8) + 104))(v171, v119, v120);
  sub_10000F1C8(&qword_100C0A550, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  if ((dispatch thunk of static Equatable.== infix(_:_:)(v121, v121, v120, v122) & 1) != 0)
  {
    v123 = sub_100345678();
    sub_10003D2DC(&qword_100BC4E30, (uint64_t *)&unk_100C0A510);
    v125 = v124;
    v126 = v164;
    v127 = v176;
    v128 = v180;
    View.dynamicTypeSize<A>(_:)(v121, v176, v180, v123, v124);
    sub_100021A14(v121, (uint64_t *)&unk_100C0A510);
    sub_100021A14(v115, &qword_100BD9368);
    v129 = v166;
    v130 = v165;
    v131 = v179;
    (*(void (**)(char *, char *, uint64_t))(v166 + 32))(v165, v126, v179);
    v132 = v182;
    (*(void (**)(uint64_t, char *, uint64_t))(v129 + 16))(v182, v130, v131);
    swift_storeEnumTagMultiPayload(v132, v178, 0);
    v211 = v127;
    v212 = v128;
    v213 = v123;
    v214 = v125;
    v133 = swift_getOpaqueTypeConformance2(&v211, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    v134 = sub_100345714();
    v135 = (uint64_t)v177;
    _ConditionalContent<>.init(storage:)(v132, v131, v183, v133, v134);
    (*(void (**)(char *, uint64_t))(v129 + 8))(v130, v131);
LABEL_10:
    v159 = v210;
    v160 = v175;
    sub_100037794(v210, v175, &qword_100BFCDD0);
    v161 = v181;
    sub_100037794(v135, v181, &qword_100BFCDA8);
    v162 = v184;
    sub_100037794(v160, v184, &qword_100BFCDD0);
    v163 = sub_1000BA294(&qword_100BFCDD8);
    sub_100037794(v161, v162 + *(int *)(v163 + 48), &qword_100BFCDA8);
    sub_100021A14(v135, &qword_100BFCDA8);
    sub_100021A14(v159, &qword_100BFCDD0);
    sub_100021A14(v161, &qword_100BFCDA8);
    sub_100021A14(v160, &qword_100BFCDD0);
    return;
  }
  __break(1u);
}

uint64_t sub_1006BC758()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];

  v1 = v0;
  v2 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v2);
  sub_100098728();
  v5 = v4 - v3;
  v6 = type metadata accessor for ListLocationViewModel(0);
  v7 = v6;
  v8 = (uint64_t *)(v1 + *(int *)(v6 + 52));
  v9 = v8[1];
  if (v9)
  {
    v10 = *v8;
    swift_bridgeObjectRetain();
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 2);
    sub_10009DEF0();
    Image.init(systemName:)(v10, v9);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
    swift_release();
    sub_10009DEF0();
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(v1 + *(int *)(v7 + 48)));
    sub_10009DEF0();
    v11 = LocalizedStringKey.init(stringInterpolation:)(v5);
    return Text.init(_:tableName:bundle:comment:)(v11, v13, v12 & 1, v14, 0, 0, 0, 0, 0, 256);
  }
  else
  {
    v16 = (_QWORD *)(v1 + *(int *)(v6 + 48));
    v17 = v16[1];
    v19[0] = *v16;
    v19[1] = v17;
    v18 = sub_100114EF8();
    swift_bridgeObjectRetain();
    return Text.init<A>(_:)(v19, &type metadata for String, v18);
  }
}

void sub_1006BC89C(uint64_t a1@<X8>)
{
  char v2;

  *(_QWORD *)a1 = EnvironmentValues.lineLimit.getter();
  *(_BYTE *)(a1 + 8) = v2 & 1;
  sub_10004A298();
}

void sub_1006BC8CC(uint64_t a1)
{
  EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
  sub_10004A298();
}

void sub_1006BC8F8()
{
  uint64_t *v0;

  *v0 = sub_1000C5808();
  sub_10004A298();
}

uint64_t sub_1006BC91C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocationRowSubheadingView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1006BC968()
{
  EnvironmentValues.redactionReasons.getter();
  sub_10004A298();
}

unint64_t sub_1006BC98C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFCDE0;
  if (!qword_100BFCDE0)
  {
    v1 = sub_100075EB0(&qword_100BFCDE8);
    sub_10003D2DC(&qword_100BFCDF0, &qword_100BFCD70);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFCDE0);
  }
  return result;
}

_QWORD *sub_1006BCA10()
{
  _QWORD *v0;

  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 4);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 9);
  swift_unknownObjectRelease(v0[14]);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 16);
  return v0;
}

uint64_t sub_1006BCA4C()
{
  uint64_t v0;

  sub_1006BCA10();
  return swift_deallocClassInstance(v0, 168, 7);
}

uint64_t type metadata accessor for WeatherMenuInteractor()
{
  return objc_opt_self(_TtC7Weather21WeatherMenuInteractor);
}

unint64_t sub_1006BCA90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFCEB8;
  if (!qword_100BFCEB8)
  {
    v1 = type metadata accessor for WeatherMenuInteractor();
    result = swift_getWitnessTable(&unk_1009BE818, v1);
    atomic_store(result, (unint64_t *)&qword_100BFCEB8);
  }
  return result;
}

uint64_t sub_1006BCACC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ActivityAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_1006BCB10(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    if (EnumCaseMultiPayload == 1)
    {
      v12 = type metadata accessor for Location(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v13 = a1;
      v14 = a3;
      v15 = 1;
LABEL_11:
      swift_storeEnumTagMultiPayload(v13, v14, v15);
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      v9 = type metadata accessor for WeatherCondition(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v9))
      {
        v10 = sub_1000BA294(&qword_100BC3660);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v9);
      }
      v16 = *(int *)(sub_1000BA294(&qword_100BD0A98) + 48);
      v17 = (uint64_t *)((char *)a1 + v16);
      v18 = (uint64_t *)((char *)a2 + v16);
      v19 = v18[1];
      *v17 = *v18;
      v17[1] = v19;
      swift_bridgeObjectRetain();
      v13 = a1;
      v14 = a3;
      v15 = 0;
      goto LABEL_11;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

void sub_1006BCC6C(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1);
  if (EnumCaseMultiPayload == 1)
  {
    v4 = type metadata accessor for Location(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  else if (!EnumCaseMultiPayload)
  {
    v3 = type metadata accessor for WeatherCondition(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(a1, 1, v3))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    sub_1000BA294(&qword_100BD0A98);
    swift_bridgeObjectRelease();
  }
}

char *sub_1006BCD14(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
  if (EnumCaseMultiPayload == 1)
  {
    v9 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    v10 = a1;
    v11 = a3;
    v12 = 1;
LABEL_9:
    swift_storeEnumTagMultiPayload(v10, v11, v12);
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = type metadata accessor for WeatherCondition(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v7))
    {
      v8 = sub_1000BA294(&qword_100BC3660);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v7);
    }
    v13 = *(int *)(sub_1000BA294(&qword_100BD0A98) + 48);
    v14 = &a1[v13];
    v15 = &a2[v13];
    v16 = *((_QWORD *)v15 + 1);
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *((_QWORD *)v14 + 1) = v16;
    swift_bridgeObjectRetain();
    v10 = a1;
    v11 = a3;
    v12 = 0;
    goto LABEL_9;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *sub_1006BCE48(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  if (a1 != a2)
  {
    sub_1006BCF94((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    if (EnumCaseMultiPayload == 1)
    {
      v9 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = a1;
      v11 = a3;
      v12 = 1;
LABEL_10:
      swift_storeEnumTagMultiPayload(v10, v11, v12);
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      v7 = type metadata accessor for WeatherCondition(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v7))
      {
        v8 = sub_1000BA294(&qword_100BC3660);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v7);
      }
      v13 = *(int *)(sub_1000BA294(&qword_100BD0A98) + 48);
      v14 = &a1[v13];
      v15 = &a2[v13];
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
      swift_bridgeObjectRetain();
      v10 = a1;
      v11 = a3;
      v12 = 0;
      goto LABEL_10;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1006BCF94(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DebugAction(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_1006BCFD0(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
  if (EnumCaseMultiPayload == 1)
  {
    v9 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    v10 = a1;
    v11 = a3;
    v12 = 1;
LABEL_9:
    swift_storeEnumTagMultiPayload(v10, v11, v12);
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = type metadata accessor for WeatherCondition(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v7))
    {
      v8 = sub_1000BA294(&qword_100BC3660);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v7);
    }
    v13 = sub_1000BA294(&qword_100BD0A98);
    *(_OWORD *)&a1[*(int *)(v13 + 48)] = *(_OWORD *)&a2[*(int *)(v13 + 48)];
    v10 = a1;
    v11 = a3;
    v12 = 0;
    goto LABEL_9;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *sub_1006BD0F8(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    sub_1006BCF94((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    if (EnumCaseMultiPayload == 1)
    {
      v9 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = a1;
      v11 = a3;
      v12 = 1;
LABEL_10:
      swift_storeEnumTagMultiPayload(v10, v11, v12);
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      v7 = type metadata accessor for WeatherCondition(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v7))
      {
        v8 = sub_1000BA294(&qword_100BC3660);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v7);
      }
      v13 = sub_1000BA294(&qword_100BD0A98);
      *(_OWORD *)&a1[*(int *)(v13 + 48)] = *(_OWORD *)&a2[*(int *)(v13 + 48)];
      v10 = a1;
      v11 = a3;
      v12 = 0;
      goto LABEL_10;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1006BD230@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int EnumCaseMultiPayload;
  uint64_t v23;
  uint64_t inited;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  char v50[128];
  char v51[80];

  v2 = v1;
  v47 = a1;
  v3 = type metadata accessor for Location(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100098728();
  v7 = v6 - v5;
  v8 = sub_1000BA294(&qword_100BC3660);
  __chkstk_darwin(v8);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v45 - v12;
  v14 = type metadata accessor for DebugAction(0);
  __chkstk_darwin(v14);
  sub_100098728();
  v17 = v16 - v15;
  v18 = sub_1000BA294(&qword_100BFD028);
  v46 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  sub_100098728();
  v21 = v20 - v19;
  sub_100273434(v2, v17);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v7, v17, v3);
      v23 = sub_1000BA294(&qword_100BC31F0);
      inited = swift_initStackObject(v23, v51);
      *(_OWORD *)(inited + 16) = xmmword_10097CA50;
      sub_1000C2EF0();
      *(_QWORD *)(inited + 32) = v25;
      *(_QWORD *)(inited + 40) = v26;
      *(_QWORD *)(inited + 72) = v3;
      v28 = sub_10005F164(v27);
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 16))(v28, v7, v3);
      v29 = Dictionary.init(dictionaryLiteral:)(inited);
      sub_1000BB37C(0xD000000000000015, v29, (uint64_t)"selectedDebugLocation");
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
    }
    else
    {
      v36 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
      sub_1000BB37C(0xD00000000000001ALL, v36, (uint64_t)"toggledComponentVisibility");
    }
  }
  else
  {
    v30 = (uint64_t *)(v17 + *(int *)(sub_1000BA294(&qword_100BD0A98) + 48));
    v31 = *v30;
    v32 = v30[1];
    sub_100273478(v17, (uint64_t)v13);
    v33 = sub_1000BA294(&qword_100BC31F0);
    v34 = swift_initStackObject(v33, v50);
    *(_OWORD *)(v34 + 16) = xmmword_10097DA20;
    *(_QWORD *)(v34 + 32) = 0x6F697469646E6F63;
    *(_QWORD *)(v34 + 40) = 0xE90000000000006ELL;
    sub_10008046C((uint64_t)v13, (uint64_t)v10);
    v35 = type metadata accessor for WeatherCondition(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v35) == 1)
    {
      sub_1006BD6B4((uint64_t)v10);
      *(_QWORD *)(v34 + 72) = &type metadata for String;
      *(_QWORD *)(v34 + 48) = 0;
      *(_QWORD *)(v34 + 56) = 0xE000000000000000;
    }
    else
    {
      v49 = v35;
      v37 = sub_10005F164(&v48);
      (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v37, v10, v35);
      sub_10011E834(&v48, (_OWORD *)(v34 + 48));
    }
    sub_1000C2EF0();
    *(_QWORD *)(v34 + 80) = v38;
    *(_QWORD *)(v34 + 88) = v39;
    *(_QWORD *)(v34 + 120) = &type metadata for String;
    *(_QWORD *)(v34 + 96) = v31;
    *(_QWORD *)(v34 + 104) = v32;
    v40 = Dictionary.init(dictionaryLiteral:)(v34);
    ShortDescription.init(name:_:)(0xD000000000000011, 0x8000000100A07130, v40, v14);
    sub_1006BD6B4((uint64_t)v13);
  }
  v41 = v47;
  v42 = v46;
  v47[3] = v18;
  v41[4] = sub_1006BD670();
  v43 = sub_10005F164(v41);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v42 + 32))(v43, v21, v18);
}

uint64_t sub_1006BD614(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1006BD6F4(qword_100BFD038, (uint64_t)&unk_1009BE988);
  return ShortDescribable.description.getter(a1, v2);
}

uint64_t sub_1006BD64C()
{
  return sub_1006BD6F4(&qword_100BFD020, (uint64_t)&unk_1009BE960);
}

unint64_t sub_1006BD670()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFD030;
  if (!qword_100BFD030)
  {
    v1 = sub_100075EB0(&qword_100BFD028);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFD030);
  }
  return result;
}

uint64_t sub_1006BD6B4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BC3660);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1006BD6F4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for DebugAction(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for SevereNhpAqiContentView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SevereNhpAqiContentView);
}

uint64_t sub_1006BD740(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100ABD484, 1);
}

uint64_t sub_1006BD774@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  void *v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD, _QWORD);
  uint64_t WitnessTable;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, char *, uint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t (*v52)(_QWORD, _QWORD);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  _QWORD v64[2];
  _QWORD v65[2];
  _QWORD v66[4];
  _BYTE v67[520];
  _QWORD v68[66];

  v63 = a4;
  v56 = a3;
  v61 = a7;
  v68[0] = a5;
  v68[1] = a5;
  v68[2] = a5;
  v68[3] = a5;
  v10 = a2;
  v11 = a2 & 0x100;
  v68[4] = a5;
  v68[5] = a5;
  v68[6] = a5;
  v68[7] = a5;
  v12 = sub_1000BA3E0(a1, a2, (uint64_t)v68);
  v54 = sub_1000AE86C(v12);
  v13 = type metadata accessor for Group(0, v54);
  v14 = *(_QWORD *)(v13 - 8);
  v57 = v13;
  v58 = v14;
  __chkstk_darwin(v13);
  sub_1000986FC();
  v60 = v15;
  __chkstk_darwin(v16);
  v59 = (char *)&v49 - v17;
  v68[0] = a5;
  v68[1] = a5;
  v68[2] = a5;
  v68[3] = type metadata accessor for Optional(255, a5);
  v68[4] = a5;
  v68[5] = a5;
  v68[6] = a5;
  v68[7] = a5;
  v19 = sub_1000BA3E0(v68[3], v18, (uint64_t)v68);
  v52 = (uint64_t (*)(_QWORD, _QWORD))sub_1000AE86C(v19);
  v55 = type metadata accessor for Group(0, v52);
  v53 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  sub_1000986FC();
  v21 = v20;
  __chkstk_darwin(v22);
  v62 = (char *)&v49 - v23;
  if (v10)
  {
    if (v10 == 1)
    {
      if (v11)
      {
        v24 = &qword_100BF3220;
        goto LABEL_11;
      }
    }
    else if (v11)
    {
      v24 = &qword_100BF3630;
      goto LABEL_11;
    }
    v24 = &qword_100BF3428;
    goto LABEL_11;
  }
  if (v11)
    v24 = &qword_100BF2E10;
  else
    v24 = &qword_100BF3018;
LABEL_11:
  memcpy(v68, v24, 0x208uLL);
  v25 = memcpy(v67, v68, sizeof(v67));
  v51 = &v49;
  __chkstk_darwin(v25);
  *(&v49 - 8) = a5;
  *(&v49 - 7) = a6;
  v49 = a1;
  *(&v49 - 6) = a1;
  *((_BYTE *)&v49 - 40) = v10;
  HIDWORD(v50) = v11 >> 8;
  *((_BYTE *)&v49 - 39) = BYTE1(v11);
  v26 = v63;
  *(&v49 - 4) = v56;
  *(&v49 - 3) = v26;
  *(&v49 - 2) = (uint64_t)v67;
  v27 = v52;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v52);
  Group<A>.init(content:)(sub_1006BE4C8, &v49 - 10, v27, WitnessTable);
  v66[3] = WitnessTable;
  v29 = v55;
  v51 = (uint64_t *)swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v55);
  sub_1000B2074(v21, v29, v51);
  v30 = v53;
  v52 = *(uint64_t (**)(_QWORD, _QWORD))(v53 + 8);
  v31 = v52(v21, v29);
  __chkstk_darwin(v31);
  *(&v49 - 8) = a5;
  *(&v49 - 7) = a6;
  *(&v49 - 6) = v49;
  *((_BYTE *)&v49 - 40) = v10;
  *((_BYTE *)&v49 - 39) = BYTE4(v50);
  v32 = v63;
  *(&v49 - 4) = v33;
  *(&v49 - 3) = v32;
  *(&v49 - 2) = (uint64_t)v67;
  v34 = v54;
  v35 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v54);
  v36 = v60;
  Group<A>.init(content:)(sub_1001AB3A4, &v49 - 10, v34, v35);
  v66[2] = v35;
  v37 = v57;
  v38 = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v57);
  v39 = (uint64_t)v59;
  sub_1000B2074(v36, v37, v38);
  v40 = v58;
  sub_1000C3530(v36);
  v41 = *(void (**)(uint64_t, char *, uint64_t))(v30 + 16);
  v42 = v62;
  v41(v21, v62, v29);
  v66[0] = v21;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v36, v39, v37);
  v66[1] = v36;
  v65[0] = v29;
  v65[1] = v37;
  v64[0] = v51;
  v64[1] = v38;
  sub_10052800C((uint64_t)v66, 2, (uint64_t)v65, (uint64_t)v64, v43, v44, v45, v46, v49, v50, (uint64_t)v51, (uint64_t)v52, v53, v54, v55, v56, v57, v58);
  sub_1000C3530(v39);
  v47 = v52;
  v52(v42, v29);
  sub_1000C3530(v36);
  return v47(v21, v29);
}

uint64_t sub_1006BDB8C@<X0>(uint64_t a1@<X0>, void (*a2)(char *, uint64_t, uint64_t, uint64_t, uint64_t)@<X2>, uint64_t *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  void (*v51)(char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(_QWORD, _QWORD);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  char *v68;
  void (*v69)(char *, uint64_t);
  char *v70;
  void (*v71)(char *, uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  char *v74;
  void (*v75)(char *, char *, uint64_t);
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t);
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD v119[8];
  _QWORD v120[8];
  _QWORD v121[8];
  _BYTE v122[24];
  _BYTE v123[40];
  _QWORD v124[4];
  char v125;

  v92 = a5;
  v98 = a6;
  v10 = sub_1000BA294(&qword_100BC4A98);
  __chkstk_darwin(v10);
  v94 = (uint64_t *)((char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v109 = type metadata accessor for Optional(0, a4);
  v103 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v116 = (uint64_t)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v113 = (uint64_t)&v91 - v14;
  v93 = type metadata accessor for LocationComponentContainerViewModel(0);
  __chkstk_darwin(v93);
  v91 = (uint64_t)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v91 - v17;
  v100 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(v19);
  v97 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v96 = (char *)&v91 - v22;
  __chkstk_darwin(v23);
  v108 = (char *)&v91 - v24;
  __chkstk_darwin(v25);
  v107 = (char *)&v91 - v26;
  __chkstk_darwin(v27);
  v106 = (char *)&v91 - v28;
  __chkstk_darwin(v29);
  v105 = (char *)&v91 - v30;
  __chkstk_darwin(v31);
  v104 = (char *)&v91 - v32;
  __chkstk_darwin(v33);
  v95 = (uint64_t)&v91 - v34;
  __chkstk_darwin(v35);
  v102 = (char *)&v91 - v36;
  __chkstk_darwin(v37);
  v115 = (char *)&v91 - v38;
  __chkstk_darwin(v39);
  v112 = (char *)&v91 - v40;
  __chkstk_darwin(v41);
  v111 = (char *)&v91 - v42;
  __chkstk_darwin(v43);
  v45 = (char *)&v91 - v44;
  __chkstk_darwin(v46);
  v48 = (char *)&v91 - v47;
  v117 = a1;
  sub_100080E30(a1 + OBJC_IVAR____TtCV7Weather19SevereNhpAqiContent8_Storage_severeAlert, (uint64_t)v18);
  a2(v18, a3[45], a3[46], a3[47], a3[48]);
  sub_100080DF4((uint64_t)v18);
  v101 = v48;
  v49 = v92;
  sub_1000B2074(v45, a4, v92);
  v50 = *(void (**)(char *, uint64_t))(v100 + 8);
  v50(v45, a4);
  sub_100080E30(a1 + OBJC_IVAR____TtCV7Weather19SevereNhpAqiContent8_Storage_nextHourPrecipitation, (uint64_t)v18);
  a2(v18, a3[33], a3[34], a3[35], a3[36]);
  v51 = a2;
  sub_100080DF4((uint64_t)v18);
  sub_1000B2074(v45, a4, v49);
  v50(v45, a4);
  v52 = v117;
  sub_100080E30(v117 + OBJC_IVAR____TtCV7Weather19SevereNhpAqiContent8_Storage_airQuality, (uint64_t)v18);
  v53 = *a3;
  v54 = a3[1];
  v55 = a3[2];
  v56 = a3[3];
  v110 = v51;
  v51(v18, v53, v54, v55, v56);
  sub_100080DF4((uint64_t)v18);
  sub_1000B2074(v45, a4, v49);
  v114 = v45;
  v99 = (void (*)(uint64_t, uint64_t))v50;
  v50(v45, a4);
  v57 = v52 + OBJC_IVAR____TtCV7Weather19SevereNhpAqiContent8_Storage_map;
  swift_beginAccess(v57, v122, 0, 0);
  v58 = v57;
  v59 = (void (*)(_QWORD, _QWORD))v94;
  sub_1001A1D04(v58, (uint64_t)v94);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v59, 1, v93) == 1)
  {
    sub_1001A1D4C((uint64_t)v59);
  }
  else
  {
    v60 = (uint64_t)v59;
    v61 = v91;
    sub_1001A1D8C(v60, v91);
    sub_1001A1DD0((uint64_t)(a3 + 24), (uint64_t)v123);
    sub_1001A1DD0((uint64_t)v123, (uint64_t)v124);
    if (v125 != 1)
    {
      v63 = v115;
      v110((char *)v61, v124[0], v124[1], v124[2], v124[3]);
      sub_100080DF4(v61);
      v64 = (uint64_t)v114;
      sub_1000B2074(v63, a4, v49);
      v65 = v99;
      v99((uint64_t)v63, a4);
      sub_1000B1100(v64, a4, v116);
      v65(v64, a4);
      v62 = 0;
      goto LABEL_7;
    }
    sub_100080DF4(v61);
  }
  v62 = 1;
LABEL_7:
  v66 = v116;
  _s7Weather24LocationCompositionStateOwst_0(v116, v62, 1, a4);
  sub_100158984(v66, a4, v113);
  v94 = *(uint64_t **)(v103 + 8);
  ((void (*)(uint64_t, uint64_t))v94)(v66, v109);
  v67 = v117;
  sub_100080E30(*(_QWORD *)(v117 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, (uint64_t)v18);
  v68 = v115;
  v110(v18, a3[16], a3[17], a3[18], a3[19]);
  sub_100080DF4((uint64_t)v18);
  sub_1000B2074(v68, a4, v49);
  v69 = (void (*)(char *, uint64_t))v99;
  v99((uint64_t)v68, a4);
  sub_100080E30(*(_QWORD *)(v67 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, (uint64_t)v18);
  v70 = v102;
  v71 = v110;
  v110(v18, a3[8], a3[9], a3[10], a3[11]);
  sub_100080DF4((uint64_t)v18);
  sub_1000B2074(v70, a4, v49);
  v69(v70, a4);
  sub_100080E30(*(_QWORD *)(v117 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex, (uint64_t)v18);
  v72 = (void (*)(uint64_t, uint64_t))v69;
  v73 = v95;
  v71(v18, a3[53], a3[54], a3[55], a3[56]);
  sub_100080DF4((uint64_t)v18);
  sub_1000B2074(v73, a4, v49);
  v72(v73, a4);
  sub_100080E30(*(_QWORD *)(v117 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, (uint64_t)v18);
  v74 = v104;
  v71(v18, a3[49], a3[50], a3[51], a3[52]);
  sub_100080DF4((uint64_t)v18);
  sub_1000B2074(v74, a4, v49);
  v72((uint64_t)v74, a4);
  v75 = *(void (**)(char *, char *, uint64_t))(v100 + 16);
  v75(v74, v101, a4);
  v121[0] = v74;
  v76 = v105;
  v75(v105, v111, a4);
  v121[1] = v76;
  v77 = v106;
  v75(v106, v112, a4);
  v121[2] = v77;
  v78 = v116;
  v79 = v109;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v103 + 16))(v116, v113, v109);
  v121[3] = v78;
  v80 = v107;
  v75(v107, v114, a4);
  v121[4] = v80;
  v81 = v108;
  v75(v108, v115, a4);
  v121[5] = v81;
  v82 = (uint64_t)v96;
  v83 = v102;
  v75(v96, v102, a4);
  v121[6] = v82;
  v84 = (uint64_t)v97;
  v75(v97, (char *)v73, a4);
  v121[7] = v84;
  v120[0] = a4;
  v120[1] = a4;
  v120[2] = a4;
  v120[3] = v79;
  v120[4] = a4;
  v120[5] = a4;
  v120[6] = a4;
  v120[7] = a4;
  v119[0] = v49;
  v119[1] = v49;
  v119[2] = v49;
  v118 = v49;
  v119[3] = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v79);
  v119[4] = v49;
  v119[5] = v49;
  v119[6] = v49;
  v119[7] = v49;
  sub_10052800C((uint64_t)v121, 8, (uint64_t)v120, (uint64_t)v119, v85, v86, v87, v88, v91, v92, v93, (uint64_t)v94, v95, (uint64_t)v96, (uint64_t)v97, v98, (uint64_t)v99, v100);
  v72(v73, a4);
  v72((uint64_t)v83, a4);
  v72((uint64_t)v115, a4);
  v72((uint64_t)v114, a4);
  v89 = (void (*)(uint64_t, uint64_t))v94;
  ((void (*)(uint64_t, uint64_t))v94)(v113, v79);
  v72((uint64_t)v112, a4);
  v72((uint64_t)v111, a4);
  v72((uint64_t)v101, a4);
  v72(v84, a4);
  v72(v82, a4);
  v72((uint64_t)v108, a4);
  v72((uint64_t)v107, a4);
  v89(v116, v79);
  v72((uint64_t)v106, a4);
  v72((uint64_t)v105, a4);
  return ((uint64_t (*)(char *, uint64_t))v72)(v104, a4);
}

uint64_t sub_1006BE49C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;

  if (*(_BYTE *)(v2 + 9))
    v3 = 256;
  else
    v3 = 0;
  return sub_1006BD774(*(_QWORD *)v2, v3 | *(unsigned __int8 *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t sub_1006BE4C8()
{
  return sub_1001A1CD4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1006BDB8C);
}

void sub_1006BE4D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[48];

  v4 = sub_100099ACC();
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100099864();
  v6 = *(uint64_t (**)(uint64_t))(v1 + 16);
  v7 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v2, a1, v7);
  v8 = sub_1000DD230();
  swift_storeEnumTagMultiPayload(v2, v8, 0);
  sub_1000C3F0C(v2, v4);
  sub_1000BA5F4();
  v9 = sub_1000B49C8(v2, (uint64_t)v10, v6);
  sub_1000C17D4(v9, (uint64_t *)&unk_100BFFA10);
  sub_1000B4C00();
  sub_10009880C();
  sub_10004A2A0();
}

void sub_1006BE58C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[48];

  v1 = sub_100099ACC();
  sub_1000B42B0();
  __chkstk_darwin(v2);
  v4 = &v8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = *(uint64_t (**)(uint64_t))(v0 + 16);
  v6 = sub_1000D920C();
  sub_1000C3F0C((uint64_t)v4, v6);
  sub_1000BD630((uint64_t)v4, v1);
  sub_1000BA5F4();
  v7 = sub_1000B49C8((uint64_t)v4, (uint64_t)v8, v5);
  sub_1000C17D4(v7, (uint64_t *)&unk_100BFFA10);
  sub_1000215BC((uint64_t)v4, type metadata accessor for MainAction);
  sub_10009880C();
  sub_10004A2A0();
}

uint64_t sub_1006BE634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int EnumCaseMultiPayload;
  char v17;
  NSURL *v18;
  void *v19;
  uint64_t v20;
  Class isa;
  double v22;
  id v23;
  void *v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[2];
  uint64_t v40;

  v36 = a3;
  v37 = a4;
  v35 = a1;
  v7 = sub_100099ACC();
  sub_1000B42B0();
  __chkstk_darwin(v8);
  v9 = sub_1000BD1E4();
  v10 = type metadata accessor for LocationComponentAction(v9);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  sub_1000BCED8();
  sub_10000AB54(a2, (uint64_t)v13, type metadata accessor for LocationComponentAction);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v13, v10);
  v38 = v7;
  if (EnumCaseMultiPayload)
  {
    sub_1000215BC((uint64_t)v13, type metadata accessor for LocationComponentAction);
  }
  else
  {
    v17 = v13[*(int *)(sub_1000BA294(&qword_100BC5FE8) + 48)];
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v5, v13, v14);
    if ((v17 & 1) == 0)
    {
      v34 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
      URL._bridgeToObjectiveC()(v18);
      v33 = v19;
      type metadata accessor for OpenExternalURLOptionsKey(0);
      sub_10005329C((unint64_t *)&qword_100BC2BE8, 255, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_10097D0B4);
      v20 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)&v22 = swift_bridgeObjectRelease(v20).n128_u64[0];
      v24 = v33;
      v23 = v34;
      objc_msgSend(v34, "openURL:options:completionHandler:", v33, isa, 0, v22);

    }
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v5, v14);
  }
  sub_10068E00C(v35);
  v25 = *(uint64_t (**)(uint64_t))(v5 + 16);
  v26 = sub_1000BA294(&qword_100BC5FC8);
  v27 = v4 + *(int *)(v26 + 48);
  v28 = v4 + *(int *)(v26 + 64);
  sub_10000AB54(a2, v4, type metadata accessor for LocationComponentAction);
  sub_1006BF004(v36, v27);
  sub_10003773C(v37, v28, (uint64_t *)&unk_100BD35A0);
  sub_1000DD230();
  v29 = sub_1000D1F6C();
  swift_storeEnumTagMultiPayload(v29, v30, 1);
  sub_1000C3F0C(v4, v38);
  v40 = 0;
  memset(v39, 0, sizeof(v39));
  swift_retain();
  sub_1000B49C8(v4, (uint64_t)v39, v25);
  sub_100021A14((uint64_t)v39, (uint64_t *)&unk_100BFFA10);
  sub_100098AD4(v31, type metadata accessor for MainAction);
  return sub_10009880C();
}

uint64_t sub_1006BE8FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  _OWORD v12[2];
  uint64_t v13;

  v6 = sub_100099ACC();
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100099864();
  v8 = *(uint64_t (**)(uint64_t))(v2 + 16);
  v9 = v3 + *(int *)(sub_1000BA294(&qword_100BC5FB8) + 48);
  sub_10000AB54(a1, v3, type metadata accessor for LocationFooterAction);
  sub_1006BF004(a2, v9);
  v10 = sub_1000DD230();
  swift_storeEnumTagMultiPayload(v3, v10, 2);
  sub_1000C3F0C(v3, v6);
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  swift_retain();
  sub_1000B49C8(v3, (uint64_t)v12, v8);
  sub_100021A14((uint64_t)v12, (uint64_t *)&unk_100BFFA10);
  sub_1000B4C00();
  return sub_10009880C();
}

void sub_1006BE9F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;

  v2 = sub_100099ACC();
  sub_1000B42B0();
  __chkstk_darwin(v3);
  v4 = sub_1000BD1E4();
  v5 = type metadata accessor for Date(v4);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_1000BCED8();
  if (qword_100BC2088 != -1)
    v7 = swift_once(&qword_100BC2088, sub_10015B3B4);
  v8 = qword_100CAE8C0;
  v9 = Date.init()(v7);
  v10 = Date.timeIntervalSince1970.getter(v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v5);
  *(double *)v16 = v10;
  sub_10005329C(&qword_100BFD180, v11, (uint64_t (*)(uint64_t))type metadata accessor for LocationInteractor, (uint64_t)&unk_1009BEAF4);
  sub_1000DA13C(v8, (uint64_t)v16);
  if (qword_100BC2090 != -1)
    swift_once(&qword_100BC2090, sub_10015B308);
  LOBYTE(v16[0]) = 1;
  sub_1000DA13C(qword_100CAE8C8, (uint64_t)v16);
  v12 = *(uint64_t (**)(uint64_t))(v1 + 16);
  sub_1000DD230();
  v13 = sub_1000D1F6C();
  sub_1000BA4FC(v13, v14);
  sub_1000C3F0C(v0, v2);
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  swift_retain();
  sub_1000A5EBC(v0, (uint64_t)v16, v12);
  sub_100021A14((uint64_t)v16, (uint64_t *)&unk_100BFFA10);
  sub_100098AD4(v15, type metadata accessor for MainAction);
  swift_release();
}

double sub_1006BEBA4(char a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double result;
  _BYTE v29[56];
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v3 = a1 & 0xFE;
  v5 = *(uint64_t (**)(uint64_t))(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  sub_1000BA294(&qword_100BD3370);
  v6 = sub_100099ACC();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 72);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = sub_1000C6710(v10 + 2 * v8, v9);
  *(_OWORD *)(v11 + 16) = xmmword_10097DA20;
  v12 = v11 + v10;
  v13 = sub_1000DD230();
  v14 = v12 + v8;
  if (v3 == 2 || (a1 & 1) != 0)
  {
    v15 = v12;
    v16 = 5;
  }
  else
  {
    v15 = v12;
    v16 = 4;
  }
  swift_storeEnumTagMultiPayload(v15, v13, v16);
  sub_1000C3F0C(v12, v6);
  v17 = sub_1000D920C();
  sub_1000BA4FC(v14, v17);
  v18 = sub_1000BD630(v14, v6);
  v32 = 0;
  v30 = 0u;
  v31 = 0u;
  sub_100098FE0(v18);
  sub_1000D9840();
  swift_bridgeObjectRetain(v11);
  sub_10009FF10((uint64_t)v29, v5);
  sub_100021A14((uint64_t)v29, &qword_100BD3378);
  *(_QWORD *)&v19 = swift_bridgeObjectRelease().n128_u64[0];
  sub_1000D13E0(v20, v21, v22, v23, v24, v25, v26, v27, v19);
  *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  return result;
}

double sub_1006BECE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double result;
  _BYTE v23[56];
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v2 = *(uint64_t (**)(uint64_t))(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  sub_1000BA294(&qword_100BD3370);
  v3 = sub_100099ACC();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = sub_1000C6710(v7 + 2 * v5, v6);
  *(_OWORD *)(v8 + 16) = xmmword_10097DA20;
  v9 = sub_1000DD230();
  sub_1000BD630(v8 + v7, v9);
  sub_1000C3F0C(v8 + v7, v3);
  v10 = v8 + v7 + v5;
  v11 = sub_1000D920C();
  sub_1000C3F0C(v10, v11);
  v12 = sub_1000BD630(v10, v3);
  v26 = 0;
  v24 = 0u;
  v25 = 0u;
  sub_100098FE0(v12);
  sub_1000D9840();
  swift_bridgeObjectRetain(v8);
  sub_10009FF10((uint64_t)v23, v2);
  sub_100021A14((uint64_t)v23, &qword_100BD3378);
  *(_QWORD *)&v13 = swift_bridgeObjectRelease().n128_u64[0];
  sub_1000D13E0(v14, v15, v16, v17, v18, v19, v20, v21, v13);
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

void sub_1006BEE00()
{
  sub_1006BEE10(11);
}

void sub_1006BEE08()
{
  sub_1006BEE10(12);
}

void sub_1006BEE10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[48];

  v3 = sub_100099ACC();
  sub_1000B42B0();
  v5 = __chkstk_darwin(v4);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((static Settings.Features.homeAndWorkEnabled.getter(v5) & 1) == 0)
  {
    v8 = *(uint64_t (**)(uint64_t))(v1 + 16);
    type metadata accessor for SearchViewAction(0);
    v9 = sub_1000D1F6C();
    swift_storeEnumTagMultiPayload(v9, v10, a1);
    type metadata accessor for ViewAction(0);
    v11 = sub_1000D1F6C();
    swift_storeEnumTagMultiPayload(v11, v12, 3);
    sub_1000BA4FC((uint64_t)v7, v3);
    sub_1000BA5F4();
    v13 = sub_1000B49C8((uint64_t)v7, (uint64_t)v15, v8);
    sub_1000C17D4(v13, (uint64_t *)&unk_100BFFA10);
    sub_100098AD4(v14, type metadata accessor for MainAction);
    sub_10009880C();
  }
  sub_10004A2A0();
}

double sub_1006BEED4()
{
  double result;

  if (qword_100BC1EF8 != -1)
    swift_once(&qword_100BC1EF8, sub_100131F04);
  sub_1007BF388(byte_100CAE582, 0xD000000000000010, 0x8000000100A0FF80);
  sub_1008C0934();
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_1006BEF4C()
{
  uint64_t v0;

  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 32));
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1006BEF80()
{
  uint64_t v0;

  sub_1006BEF4C();
  return swift_deallocClassInstance(v0, 88, 7);
}

void sub_1006BEFA4(uint64_t a1)
{
  uint64_t v1;

  sub_1000DB418((_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 56));
  sub_10049B668(a1);
}

void sub_1006BEFD8(uint64_t a1, uint64_t a2)
{
  sub_10005329C(&qword_100BFD178, a2, (uint64_t (*)(uint64_t))type metadata accessor for LocationInteractor, (uint64_t)&unk_1009BEAA4);
}

uint64_t sub_1006BF004(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BC40B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_1006BF04C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC7Weather48DebugNotificationDeliverySchedulesViewController____lazy_storage___dateFormatter;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC7Weather48DebugNotificationDeliverySchedulesViewController____lazy_storage___dateFormatter);
  if (v2)
  {
    v3 = *(id *)(v0
               + OBJC_IVAR____TtC7Weather48DebugNotificationDeliverySchedulesViewController____lazy_storage___dateFormatter);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
    sub_1000BD398(v4, "setDateStyle:");
    sub_1000BD398(v4, "setTimeStyle:");
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_1006BF0DC(uint64_t a1)
{
  char *v1;
  objc_super v3;

  *(_QWORD *)&v1[OBJC_IVAR____TtC7Weather48DebugNotificationDeliverySchedulesViewController____lazy_storage___dateFormatter] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC7Weather48DebugNotificationDeliverySchedulesViewController_deliverySchedules] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for DebugNotificationDeliverySchedulesViewController();
  return objc_msgSendSuper2(&v3, "initWithStyle:", 2);
}

void sub_1006BF128()
{
  char *v0;

  *(_QWORD *)&v0[OBJC_IVAR____TtC7Weather48DebugNotificationDeliverySchedulesViewController____lazy_storage___dateFormatter] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x706F2D6F6ELL, 0xE500000000000000, "Weather/DebugNotificationDeliverySchedulesViewController.swift", 62, 2);
  __break(1u);
}

void sub_1006BF1A0()
{
  void *v0;
  id v1;
  void *v2;
  unint64_t v3;
  uint64_t ObjCClassFromMetadata;
  NSString v5;
  objc_super v6;

  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for DebugNotificationDeliverySchedulesViewController();
  objc_msgSendSuper2(&v6, "viewDidLoad");
  v1 = objc_msgSend(v0, "tableView");
  if (v1)
  {
    v2 = v1;
    v3 = sub_1003E9A38();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v3);
    v5 = sub_1000B4550();
    objc_msgSend(v2, "registerClass:forCellReuseIdentifier:", ObjCClassFromMetadata, v5);

    sub_1001207F8(0xD000000000000012, 0x8000000100A083B0, v0);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1006BF298()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0
                               + OBJC_IVAR____TtC7Weather48DebugNotificationDeliverySchedulesViewController_deliverySchedules)
                   + 16);
}

unint64_t sub_1006BF2CC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  NSString v16;
  Class isa;
  id v18;
  uint64_t v19;
  __n128 v20;
  unint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  id v27;
  char v28;
  Class v29;
  id v30;
  id v31;
  Class v32;
  id v33;
  Swift::String v34;
  id v35;
  _QWORD *v36;
  void *v37;
  Class v38;
  id v39;
  void (*v40)(uint64_t *, _QWORD);
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;

  v4 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v4);
  v47 = (uint64_t *)((char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v44 - v7);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v44 - v10);
  v12 = type metadata accessor for UIListContentConfiguration(0);
  v46 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_100099864();
  v13 = type metadata accessor for DeliveryScheduleEntity(0);
  v48 = *(_QWORD *)(v13 - 8);
  v49 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000B4550();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v18 = objc_msgSend(a1, "dequeueReusableCellWithIdentifier:forIndexPath:", v16, isa);

  v19 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7Weather48DebugNotificationDeliverySchedulesViewController_deliverySchedules);
  result = IndexPath.row.getter(v20);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (result >= *(_QWORD *)(v19 + 16))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v44 = v12;
  v45 = v18;
  v22 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v48 + 16))(v15, v19+ ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(_QWORD *)(v48 + 72) * result, v49);
  v23 = static UIListContentConfiguration.subtitleCell()(v22);
  v50 = 91;
  v51 = 0xE100000000000000;
  v54 = DeliveryScheduleEntity.state.getter(v23);
  v24 = sub_1000BA294(&qword_100BE8E48);
  sub_1004E3F84();
  v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v24);
  String.append(_:)(v25);
  swift_release();
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 8285;
  v26._object = (void *)0xE200000000000000;
  String.append(_:)(v26);
  v27 = sub_1006BF04C();
  DeliveryScheduleEntity.date.getter();
  dispatch thunk of Column.value.getter(v11);
  sub_10009880C();
  type metadata accessor for Date(0);
  result = sub_1000C4ABC((uint64_t)v11);
  if (v28)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v29 = Date._bridgeToObjectiveC()().super.isa;
  sub_1000DDE3C((uint64_t)v11);
  v30 = objc_msgSend(v27, "stringFromDate:", v29);

  sub_1000DA14C();
  sub_1000BC8C0();
  sub_1000BB390();
  sub_10009895C();
  UIListContentConfiguration.text.setter(v50);
  v50 = 0;
  v51 = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  v50 = 0x3A64657461657263;
  v51 = 0xE900000000000020;
  v31 = sub_1006BF04C();
  DeliveryScheduleEntity.created.getter();
  dispatch thunk of Column.value.getter(v8);
  sub_10009880C();
  result = sub_1000C4ABC((uint64_t)v8);
  if (v28)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v32 = Date._bridgeToObjectiveC()().super.isa;
  sub_1000DDE3C((uint64_t)v8);
  v33 = sub_1000C3F14();

  sub_1000DA14C();
  sub_1000BC8C0();
  sub_1000BB390();
  sub_10009895C();
  v34._countAndFlagsBits = 0x696669646F6D203BLL;
  v34._object = (void *)0xEC000000203A6465;
  String.append(_:)(v34);
  v35 = sub_1006BF04C();
  DeliveryScheduleEntity.modified.getter();
  v36 = v47;
  dispatch thunk of Column.value.getter(v47);
  sub_10009880C();
  result = sub_1000C4ABC((uint64_t)v36);
  v37 = v45;
  if (!v28)
  {
    v38 = Date._bridgeToObjectiveC()().super.isa;
    sub_1000DDE3C((uint64_t)v36);
    v39 = sub_1000C3F14();

    sub_1000DA14C();
    sub_1000BC8C0();
    sub_1000BB390();
    sub_10009895C();
    UIListContentConfiguration.secondaryText.setter(v50);
    v40 = (void (*)(uint64_t *, _QWORD))UIListContentConfiguration.secondaryTextProperties.modify(&v50);
    UIListContentConfiguration.TextProperties.numberOfLines.setter(0);
    v40(&v50, 0);
    v41 = v44;
    v52 = v44;
    v53 = &protocol witness table for UIListContentConfiguration;
    v42 = sub_10005F164(&v50);
    v43 = v46;
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v46 + 16))(v42, v2, v41);
    UITableViewCell.contentConfiguration.setter(&v50);
    sub_1000BD398(v37, "setAccessoryType:");
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v2, v41);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v15, v49);
    return (unint64_t)v37;
  }
LABEL_11:
  __break(1u);
  return result;
}

void sub_1006BF830()
{
  char *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  unint64_t v7;
  id v8;
  void *v9;
  id v10;
  id v11;

  v2 = v0;
  v3 = type metadata accessor for DeliveryScheduleEntity(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100099864();
  v5 = *(_QWORD *)&v0[OBJC_IVAR____TtC7Weather48DebugNotificationDeliverySchedulesViewController_deliverySchedules];
  v7 = IndexPath.row.getter(v6);
  if ((v7 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v7 >= *(_QWORD *)(v5 + 16))
  {
LABEL_7:
    __break(1u);
    return;
  }
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v4 + 16))(v1, v5+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v7, v3);
  v8 = objc_allocWithZone((Class)type metadata accessor for DebugNotificationDeliveryScheduleViewController(0));
  v9 = (void *)sub_1006E4F08();
  v10 = objc_msgSend(v2, "navigationController");
  if (v10)
  {
    v11 = v10;
    objc_msgSend(v10, "pushViewController:animated:", v9, 1);

    v9 = v11;
  }

}

void sub_1006BF9E4()
{
  _swift_stdlib_reportUnimplementedInitializer("Weather.DebugNotificationDeliverySchedulesViewController", 56, "init(style:)", 12, 0);
  __break(1u);
}

void sub_1006BFA1C()
{
  _swift_stdlib_reportUnimplementedInitializer("Weather.DebugNotificationDeliverySchedulesViewController", 56, "init(nibName:bundle:)", 21, 0);
  __break(1u);
}

id sub_1006BFA6C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DebugNotificationDeliverySchedulesViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DebugNotificationDeliverySchedulesViewController()
{
  return objc_opt_self(_TtC7Weather48DebugNotificationDeliverySchedulesViewController);
}

uint64_t sub_1006BFAF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  uint64_t v93;
  os_log_type_t v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __n128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int *v121;
  _QWORD *v122;
  id v123;
  Swift::String v124;
  Swift::String v125;
  Swift::String v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t (*v146)(uint64_t, uint64_t);
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  Swift::Int v166;
  double v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void (*v173)(uint64_t, uint64_t);
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  char v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  void (*v205)(char *, char *, uint64_t);
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  _QWORD *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  Swift::String v255;

  v252 = a2;
  sub_1000BA294(&qword_100BDACB0);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100088FDC();
  v247 = v4;
  v5 = sub_10009876C();
  v6 = type metadata accessor for AirQualityScaleCategory(v5);
  sub_1000B43A4(v6, (uint64_t)&v243);
  v211 = v7;
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v9);
  sub_100079F7C();
  v233 = v10;
  v11 = sub_10009876C();
  v235 = type metadata accessor for AirQualityScale(v11);
  v230 = *(_QWORD *)(v235 - 8);
  sub_10009D98C();
  __chkstk_darwin(v12);
  sub_1000986FC();
  v234 = v13;
  __chkstk_darwin(v14);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v15);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v16);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v17);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v18);
  sub_100079F7C();
  v227 = v19;
  v20 = sub_10009876C();
  v21 = type metadata accessor for LocationDetailsKind(v20);
  sub_1000B43A4(v21, (uint64_t)&v254);
  v224 = v22;
  sub_10009D98C();
  __chkstk_darwin(v23);
  sub_100088FDC();
  v225 = v24;
  v25 = sub_10009876C();
  type metadata accessor for Date(v25);
  sub_1000B42B0();
  __chkstk_darwin(v26);
  sub_100088FDC();
  v223 = v27;
  v28 = sub_10009876C();
  v29 = type metadata accessor for WeatherMetadata(v28);
  sub_1000B43A4(v29, (uint64_t)&v253);
  v221 = v30;
  sub_10009D98C();
  __chkstk_darwin(v31);
  sub_100088FDC();
  v220 = v32;
  v33 = sub_10009876C();
  type metadata accessor for LocationDetailEntity(v33);
  sub_1000B42B0();
  __chkstk_darwin(v34);
  sub_100088FDC();
  v245 = v35;
  v36 = sub_10009876C();
  v37 = type metadata accessor for LocationEntity(v36);
  v242 = *(_QWORD *)(v37 - 8);
  v243 = v37;
  sub_10009D98C();
  __chkstk_darwin(v38);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v39);
  sub_100079F7C();
  v241 = v40;
  sub_1000BA294(&qword_100BC68A0);
  sub_1000B42B0();
  __chkstk_darwin(v41);
  sub_1000986FC();
  v244 = v42;
  __chkstk_darwin(v43);
  sub_100079F7C();
  v240 = v44;
  v45 = sub_10009876C();
  v46 = type metadata accessor for ArticlePlacementLocation(v45);
  sub_1000B43A4(v46, (uint64_t)&v248);
  v215 = v47;
  sub_10009D98C();
  __chkstk_darwin(v48);
  sub_100088FDC();
  v214 = v49;
  sub_1000BA294(&qword_100BDAC90);
  sub_1000B42B0();
  __chkstk_darwin(v50);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v51);
  sub_100079F7C();
  v239 = v52;
  v53 = sub_10009876C();
  v212 = type metadata accessor for ConditionDetailMapViewModel(v53);
  sub_1000B42B0();
  __chkstk_darwin(v54);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v55);
  sub_100079F7C();
  v238 = (_QWORD *)v56;
  sub_1000BA294(&qword_100BE7C80);
  sub_1000B42B0();
  __chkstk_darwin(v57);
  sub_100088FDC();
  v236 = v58;
  v59 = sub_10009876C();
  v250 = type metadata accessor for AirQuality(v59);
  v218 = *(_QWORD *)(v250 - 8);
  sub_10009D98C();
  __chkstk_darwin(v60);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v61);
  sub_100079F7C();
  v237 = v62;
  v63 = sub_10009876C();
  type metadata accessor for NewsDataModel(v63);
  sub_1000B42B0();
  __chkstk_darwin(v64);
  sub_100088FDC();
  v249 = v65;
  v66 = sub_10009876C();
  type metadata accessor for WeatherData(v66);
  sub_1000B42B0();
  __chkstk_darwin(v67);
  sub_100088FDC();
  v248 = v68;
  sub_1000BA294(&qword_100BC3380);
  sub_1000B42B0();
  __chkstk_darwin(v69);
  v71 = (char *)&v200 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for LocationWeatherDataState(0);
  sub_1000B42B0();
  v74 = __chkstk_darwin(v73);
  v76 = (char *)&v200 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v74);
  sub_100079F7C();
  v251 = v77;
  sub_1000BA294(&qword_100BFD268);
  sub_1000B42B0();
  __chkstk_darwin(v78);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v79);
  v81 = (char *)&v200 - v80;
  v82 = type metadata accessor for Location(0);
  v83 = *(_QWORD *)(v82 - 8);
  v84 = __chkstk_darwin(v82);
  v86 = (char *)&v200 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v84);
  v88 = (char *)&v200 - v87;
  sub_1006C0ACC(a1, (uint64_t)v81);
  v208 = type metadata accessor for AirQualityDetailViewState(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v81, 1, v208) == 1)
  {
    v89 = v252;
    sub_100021A14((uint64_t)v81, &qword_100BFD268);
    if (qword_100BC2450 != -1)
      swift_once(&qword_100BC2450, sub_1006F3844);
    v90 = type metadata accessor for Logger(0);
    v91 = sub_1000AECD4(v90, (uint64_t)qword_100CAF0E8);
    v92 = Logger.logObject.getter(v91);
    v94 = static os_log_type_t.error.getter(v92, v93);
    if (os_log_type_enabled(v92, v94))
    {
      v95 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v95 = 0;
      _os_log_impl((void *)&_mh_execute_header, v92, v94, "Unable to make AirQualityDetailViewModel due to missing airQualityDetailViewState.", v95, 2u);
      swift_slowDealloc(v95, -1, -1);
    }

    v96 = type metadata accessor for AirQualityDetailViewModel.Model(0);
    v97 = v89;
    v98 = 1;
    goto LABEL_7;
  }
  v205 = *(void (**)(char *, char *, uint64_t))(v83 + 16);
  v205(v86, v81, v82);
  sub_1000215BC((uint64_t)v81, type metadata accessor for AirQualityDetailViewState);
  (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v88, v86, v82);
  v207 = a1;
  v100 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 16);
  swift_bridgeObjectRetain(v100);
  v102 = Location.id.getter(v101);
  v104 = v103;
  sub_1000EED10(v102, v103, v100);
  swift_bridgeObjectRelease(v104);
  swift_bridgeObjectRelease(v100);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v71, 1, v72) == 1)
  {
    (*(void (**)(char *, uint64_t))(v83 + 8))(v88, v82);
    v105 = &qword_100BC3380;
    v106 = (uint64_t)v71;
LABEL_13:
    sub_100021A14(v106, v105);
LABEL_15:
    v99 = 1;
    v89 = v252;
    goto LABEL_16;
  }
  v206 = v82;
  v107 = v251;
  sub_10007C77C((uint64_t)v71, v251, type metadata accessor for LocationWeatherDataState);
  sub_100095B78(v107, (uint64_t)v76, type metadata accessor for LocationWeatherDataState);
  if (swift_getEnumCaseMultiPayload(v76, v72) != 1)
  {
    sub_1000215BC(v107, type metadata accessor for LocationWeatherDataState);
    sub_1000C5850((uint64_t)v88, *(uint64_t (**)(uint64_t, _QWORD))(v83 + 8));
    sub_1000215BC((uint64_t)v76, type metadata accessor for LocationWeatherDataState);
    goto LABEL_15;
  }
  v204 = v88;
  v108 = sub_1000BA294(&qword_100BC3358);
  v109 = (uint64_t)&v76[*(int *)(v108 + 48)];
  v110 = (uint64_t)&v76[*(int *)(v108 + 64)];
  v111 = v248;
  sub_10007C77C((uint64_t)v76, v248, type metadata accessor for WeatherData);
  v112 = v249;
  sub_10007C77C(v110, v249, type metadata accessor for NewsDataModel);
  sub_1000215BC(v109, type metadata accessor for PreprocessedWeatherData);
  v113 = v236;
  WeatherDataModel.airQuality.getter(v114);
  v115 = v250;
  if (_s7Weather24LocationCompositionStateOwet_0(v113, 1, v250) == 1)
  {
    sub_1000215BC(v112, type metadata accessor for NewsDataModel);
    sub_1000215BC(v111, type metadata accessor for WeatherData);
    sub_1000215BC(v251, type metadata accessor for LocationWeatherDataState);
    sub_1000C5850((uint64_t)v204, *(uint64_t (**)(uint64_t, _QWORD))(v83 + 8));
    v105 = &qword_100BE7C80;
    v106 = v113;
    goto LABEL_13;
  }
  v203 = v83;
  v118 = v218;
  v119 = v237;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v218 + 32))(v237, v113, v115);
  v202 = sub_1006C0FE8();
  v201 = v120;
  v121 = (int *)v212;
  v122 = v238;
  v205((char *)v238 + *(int *)(v212 + 20), v204, v206);
  sub_1000EADE8();
  v123 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v255._object = (void *)0x8000000100A10100;
  v124._countAndFlagsBits = 0x65726F4D20656553;
  v124._object = (void *)0xE800000000000000;
  v125._countAndFlagsBits = 0;
  v125._object = (void *)0xE000000000000000;
  v255._countAndFlagsBits = 0xD000000000000030;
  v126 = NSLocalizedString(_:tableName:bundle:value:comment:)(v124, (Swift::String_optional)0, (NSBundle)v123, v125, v255);

  v127 = (char *)v122 + v121[8];
  v128 = enum case for WeatherMapOverlayKind.airQuality(_:);
  v129 = type metadata accessor for WeatherMapOverlayKind(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v129 - 8) + 104))(v127, v128, v129);
  *v122 = 0;
  v122[1] = 0;
  *(Swift::String *)((char *)v122 + v121[7]) = v126;
  *((_BYTE *)v122 + v121[9]) = 1;
  sub_1000DB418(v246 + 2, v246[5]);
  v130 = v215;
  v131 = v214;
  v132 = v216;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v215 + 104))(v214, enum case for ArticlePlacementLocation.airQualityDetail(_:), v216);
  v133 = v239;
  sub_100500070(v131, v239);
  (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v131, v132);
  v134 = (uint64_t)v133;
  v135 = v213;
  sub_10003773C(v134, v213, &qword_100BDAC90);
  sub_10035D148(v135, v240);
  v136 = v241;
  static LocationEntity.makeFromLocation(_:name:)(v204, 0, 0);
  v137 = v219;
  v138 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v242 + 16))(v219, v136, v243);
  v139 = v220;
  v140 = AirQuality.metadata.getter(v138);
  v141 = v223;
  WeatherMetadata.date.getter(v140);
  (*(void (**)(uint64_t, uint64_t))(v221 + 8))(v139, v222);
  v142 = v225;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v224 + 104))(v225, enum case for LocationDetailsKind.airQuality(_:), v226);
  LocationDetailEntity.init(location:date:kind:)(v137, v141, v142);
  v143 = v227;
  v144 = sub_1000DF8C0();
  v219 = AirQualityScale.displayName.getter(v144);
  v216 = v145;
  v146 = *(uint64_t (**)(uint64_t, uint64_t))(v230 + 8);
  v147 = v143;
  v148 = v235;
  sub_1000BAD8C(v147);
  v149 = v229;
  v150 = sub_1000DF8C0();
  v151 = AirQualityScale.longDisplayName.getter(v150);
  v153 = v152;
  sub_1000BAD8C(v149);
  v154 = v217;
  v155 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v118 + 16))(v217, v119, v115);
  if (v153)
  {
    v214 = v153;
    v215 = v151;
    sub_1000CD124();
    sub_1000E7398();
    v156 = v210;
  }
  else
  {
    v156 = v210;
    v157 = AirQuality.scale.getter(v155);
    v215 = AirQualityScale.displayName.getter(v157);
    v214 = v158;
    sub_1000BAD8C(v156);
    sub_1000CD124();
    sub_1000E7398();
  }
  v159 = v209;
  v160 = v208;
  v161 = v237;
  v236 = AirQuality.displayDescription.getter();
  v230 = v162;
  v163 = AirQuality.scale.getter(v236);
  v229 = AirQualityScale.range.getter(v163);
  v227 = v164;
  sub_1000BAD8C(v159);
  v165 = sub_1000DF8C0();
  v166 = AirQuality.index.getter(v165);
  v167 = AirQualityScale.fraction(for:)(v166);
  v168 = sub_1000BAD8C(v156);
  v169 = v233;
  v170 = AirQuality.currentScaleCategory.getter(v168);
  v226 = AirQualityScaleCategory.description.getter(v170);
  v225 = v171;
  v172 = v148;
  v173 = *(void (**)(uint64_t, uint64_t))(v154 + 8);
  v173(v169, v131);
  v174 = v232;
  v175 = sub_1000DF8C0();
  v233 = AirQualityScale.displayLabel.getter(v175);
  v224 = v176;
  v177 = v146(v174, v172);
  v178 = AirQuality.currentScaleCategory.getter(v177);
  v232 = AirQualityScaleCategory.recommendation.getter(v178);
  v223 = v179;
  v180 = ((uint64_t (*)(uint64_t, uint64_t))v173)(v115, v131);
  AirQuality.primaryPollutant.getter(v180);
  v181 = v246;
  sub_1006C10BC(v161);
  v222 = v182;
  v221 = v183;
  v220 = v184;
  v186 = v181[10];
  v185 = v181[11];
  sub_1000DB418(v181 + 7, v186);
  v187 = dispatch thunk of AirQualityDetailStringBuilderType.attributionDescription(for:)(v161, v186, v185);
  v188 = v234;
  v189 = sub_1000DF8C0();
  v190 = AirQualityScale.gradientStops.getter(v189);
  v146(v188, v172);
  v191 = (uint64_t)v238;
  v192 = v231;
  sub_100095B78((uint64_t)v238, v231, type metadata accessor for ConditionDetailMapViewModel);
  v193 = v240;
  sub_10003773C(v240, v244, &qword_100BC68A0);
  v194 = v228;
  sub_1006C0ACC(v207, v228);
  (*(void (**)(uint64_t, uint64_t))(v242 + 8))(v241, v243);
  sub_100021A14(v193, &qword_100BC68A0);
  sub_100021A14((uint64_t)v239, &qword_100BDAC90);
  sub_1000215BC(v191, type metadata accessor for ConditionDetailMapViewModel);
  ((void (*)(uint64_t, uint64_t))v218)(v161, v250);
  sub_1000215BC(v249, type metadata accessor for NewsDataModel);
  sub_1000215BC(v248, type metadata accessor for WeatherData);
  sub_1000215BC(v251, type metadata accessor for LocationWeatherDataState);
  sub_1000C5850((uint64_t)v204, *(uint64_t (**)(uint64_t, _QWORD))(v203 + 8));
  v195 = _s7Weather24LocationCompositionStateOwet_0(v194, 1, v160);
  v89 = v252;
  if (v195 == 1)
  {
    sub_100021A14(v194, &qword_100BFD268);
    v196 = 0;
  }
  else
  {
    v196 = *(_BYTE *)(v194 + *(int *)(v160 + 20));
    sub_1000215BC(v194, type metadata accessor for AirQualityDetailViewState);
  }
  *((_QWORD *)&v199 + 1) = v221;
  *(_QWORD *)&v199 = v222;
  *((_QWORD *)&v198 + 1) = v224;
  *(_QWORD *)&v198 = v233;
  *((_QWORD *)&v197 + 1) = v225;
  *(_QWORD *)&v197 = v226;
  sub_10059053C(v219, v216, v215, v214, v202, v201, v236, v230, v89, v167, v229, v227, v197, v198, v232, v223, v247, v199, v220,
    v187,
    v190,
    v192,
    v244,
    v196,
    v245);
  v96 = type metadata accessor for AirQualityDetailViewModel.Model(0);
  v97 = v89;
  v98 = 0;
LABEL_7:
  _s7Weather24LocationCompositionStateOwst_0(v97, v98, 1, v96);
  v99 = 0;
LABEL_16:
  v116 = type metadata accessor for AirQualityDetailViewModel(0);
  return _s7Weather24LocationCompositionStateOwst_0(v89, v99, 1, v116);
}

uint64_t sub_1006C0ACC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int EnumCaseMultiPayload;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v59 = a2;
  v57 = type metadata accessor for LocationPreviewModalViewState(0);
  v3 = __chkstk_darwin(v57);
  v54 = (uint64_t)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v56 = (uint64_t)&v50 - v5;
  v58 = type metadata accessor for LocationPreviewViewState(0);
  v6 = __chkstk_darwin(v58);
  v53 = (uint64_t)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v55 = (uint64_t)&v50 - v8;
  v9 = type metadata accessor for AirQualityDetailViewState(0);
  v10 = __chkstk_darwin(v9);
  v51 = (uint64_t)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v52 = (uint64_t)&v50 - v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v50 - v14;
  v16 = type metadata accessor for ModalViewState(0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v50 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v50 - v23;
  v25 = type metadata accessor for ModalViewState.LocationDetailModal(0);
  v26 = __chkstk_darwin(v25);
  v28 = (char *)&v50 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v30 = (char *)&v50 - v29;
  v31 = a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_modalView;
  sub_100095B78(v31, (uint64_t)v24, type metadata accessor for ModalViewState);
  if (swift_getEnumCaseMultiPayload(v24, v16) != 5)
  {
    sub_1000215BC((uint64_t)v24, type metadata accessor for ModalViewState);
    goto LABEL_6;
  }
  v50 = v9;
  sub_10007C77C((uint64_t)v24, (uint64_t)v30, type metadata accessor for ModalViewState.LocationDetailModal);
  sub_10007C77C((uint64_t)v30, (uint64_t)v28, type metadata accessor for ModalViewState.LocationDetailModal);
  if (swift_getEnumCaseMultiPayload(v28, v25) != 1)
  {
    sub_1000215BC((uint64_t)v28, type metadata accessor for ModalViewState.LocationDetailModal);
    v9 = v50;
LABEL_6:
    sub_100095B78(v31, (uint64_t)v22, type metadata accessor for ModalViewState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v22, v16);
    v36 = v58;
    if (EnumCaseMultiPayload)
    {
      sub_1000215BC((uint64_t)v22, type metadata accessor for ModalViewState);
    }
    else
    {
      v37 = v9;
      v38 = v55;
      sub_10007C77C((uint64_t)v22, v55, type metadata accessor for LocationPreviewViewState);
      v39 = v56;
      sub_100095B78(v38 + *(int *)(v36 + 20), v56, type metadata accessor for LocationPreviewModalViewState);
      sub_1000215BC(v38, type metadata accessor for LocationPreviewViewState);
      if (swift_getEnumCaseMultiPayload(v39, v57) == 2)
      {
        v40 = v39;
        v41 = v52;
        sub_10007C77C(v40, v52, type metadata accessor for AirQualityDetailViewState);
        v42 = v41;
        v33 = v59;
        goto LABEL_18;
      }
      sub_1000215BC(v39, type metadata accessor for LocationPreviewModalViewState);
    }
    sub_100095B78(v31, (uint64_t)v19, type metadata accessor for ModalViewState);
    if (swift_getEnumCaseMultiPayload(v19, v16) != 4)
    {
      sub_1000215BC((uint64_t)v19, type metadata accessor for ModalViewState);
      goto LABEL_15;
    }
    v43 = type metadata accessor for ModalViewState.MapViewModal(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v19, 1, v43) == 1)
    {
      sub_100021A14((uint64_t)v19, &qword_100BC5F58);
LABEL_15:
      v34 = 1;
      v33 = v59;
      return _s7Weather24LocationCompositionStateOwst_0(v33, v34, 1, v9);
    }
    v37 = v9;
    v44 = v53;
    sub_10007C77C((uint64_t)v19, v53, type metadata accessor for LocationPreviewViewState);
    v45 = v54;
    sub_100095B78(v44 + *(int *)(v36 + 20), v54, type metadata accessor for LocationPreviewModalViewState);
    sub_1000215BC(v44, type metadata accessor for LocationPreviewViewState);
    v46 = swift_getEnumCaseMultiPayload(v45, v57);
    v33 = v59;
    if (v46 != 2)
    {
      sub_1000215BC(v45, type metadata accessor for LocationPreviewModalViewState);
      v34 = 1;
      goto LABEL_20;
    }
    v47 = v45;
    v48 = v51;
    sub_10007C77C(v47, v51, type metadata accessor for AirQualityDetailViewState);
    v42 = v48;
LABEL_18:
    sub_10007C77C(v42, v33, type metadata accessor for AirQualityDetailViewState);
    v34 = 0;
LABEL_20:
    v9 = v37;
    return _s7Weather24LocationCompositionStateOwst_0(v33, v34, 1, v9);
  }
  sub_10007C77C((uint64_t)v28, (uint64_t)v15, type metadata accessor for AirQualityDetailViewState);
  v32 = (uint64_t)v15;
  v33 = v59;
  sub_10007C77C(v32, v59, type metadata accessor for AirQualityDetailViewState);
  v34 = 0;
  v9 = v50;
  return _s7Weather24LocationCompositionStateOwst_0(v33, v34, 1, v9);
}

uint64_t sub_1006C0FE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v0 = 0x776F6C2E697161;
  v1 = type metadata accessor for AirQualityScaleCategory(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = AirQuality.currentScaleCategory.getter(v3);
  v7 = AirQualityScaleCategory.glyph.getter(v6);
  v9 = v8;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  if (v9)
  {
    v10 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0)
      v10 = v7 & 0xFFFFFFFFFFFFLL;
    if (v10)
      return v7;
    else
      swift_bridgeObjectRelease(v9);
  }
  return v0;
}

void sub_1006C10BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  __n128 v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  char *v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  const __CTFont *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  id v43;
  Swift::String v44;
  Swift::String v45;
  __n128 v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  int64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  _QWORD v80[6];
  Swift::String v81;

  v69 = type metadata accessor for AirQuality(0);
  v67 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v72 = (char *)&v62 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Logger(0);
  v64 = *(_QWORD *)(v3 - 8);
  v65 = v3;
  __chkstk_darwin(v3);
  v68 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AirPollutant(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v75 = (char *)&v62 - v11;
  v79 = 0;
  v66 = a1;
  v12 = AirQuality.pollutants.getter(v10);
  sub_1006C17D8(v12, v80);
  v76 = v80[0];
  v13 = v80[3];
  v14 = v80[4];
  v73 = v80[1];
  v74 = (unint64_t)(v80[2] + 64) >> 6;
  v70 = v12;
  v15 = swift_bridgeObjectRetain(v12);
  v71 = _swiftEmptyArrayStorage;
  while (v14)
  {
    v16 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    v17 = v16 | (v13 << 6);
LABEL_22:
    v23 = v75;
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16))(v75, *(_QWORD *)(v76 + 56) + *(_QWORD *)(v6 + 72) * v17, v5, v15);
    v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))(v9, v23, v5);
    v25 = AirPollutant.standaloneDisplayName.getter(v24);
    if (!v26)
      goto LABEL_27;
    v28 = v25;
    v29 = v26;
    v30 = (const __CTFont *)sub_1006C1714(&v79);
    v31 = (void *)AirPollutant.abbreviatedDisplayName(font:)(v30);

    if (v31)
    {
      v32 = AirPollutant.formattedValueString.getter();
      if (!v33)
      {
        swift_bridgeObjectRelease(v29);

        goto LABEL_27;
      }
      v34 = v32;
      v35 = v33;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      if ((swift_isUniquelyReferenced_nonNull_native(v71) & 1) != 0)
      {
        v36 = v71;
      }
      else
      {
        sub_1005FECBC();
        v36 = v40;
      }
      v37 = v36[2];
      v38 = (_QWORD *)(v37 + 1);
      if (v37 >= v36[3] >> 1)
      {
        v71 = (_QWORD *)(v37 + 1);
        v63 = v37;
        sub_1005FECBC();
        v38 = v71;
        v37 = v63;
        v36 = v41;
      }
      v36[2] = v38;
      v71 = v36;
      v39 = &v36[5 * v37];
      v39[4] = v28;
      v39[5] = v29;
      v39[6] = v31;
      v39[7] = v34;
      v39[8] = v35;
    }
    else
    {
      v27 = swift_bridgeObjectRelease(v29);
LABEL_27:
      (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v9, v5, v27);
    }
  }
  v18 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    return;
  }
  v19 = v72;
  if (v18 >= v74)
    goto LABEL_34;
  v20 = *(_QWORD *)(v73 + 8 * v18);
  v21 = v13 + 1;
  if (v20)
    goto LABEL_21;
  v21 = v13 + 2;
  if (v13 + 2 >= v74)
    goto LABEL_34;
  v20 = *(_QWORD *)(v73 + 8 * v21);
  if (v20)
    goto LABEL_21;
  v21 = v13 + 3;
  if (v13 + 3 >= v74)
    goto LABEL_34;
  v20 = *(_QWORD *)(v73 + 8 * v21);
  if (v20)
    goto LABEL_21;
  v21 = v13 + 4;
  if (v13 + 4 >= v74)
    goto LABEL_34;
  v20 = *(_QWORD *)(v73 + 8 * v21);
  if (v20)
    goto LABEL_21;
  v21 = v13 + 5;
  if (v13 + 5 >= v74)
    goto LABEL_34;
  v20 = *(_QWORD *)(v73 + 8 * v21);
  if (v20)
    goto LABEL_21;
  v21 = v13 + 6;
  if (v13 + 6 >= v74)
    goto LABEL_34;
  v20 = *(_QWORD *)(v73 + 8 * v21);
  if (v20)
  {
LABEL_21:
    v14 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v21 << 6);
    v13 = v21;
    goto LABEL_22;
  }
  v22 = v13 + 7;
  while (v22 < v74)
  {
    v20 = *(_QWORD *)(v73 + 8 * v22++);
    if (v20)
    {
      v21 = v22 - 1;
      goto LABEL_21;
    }
  }
LABEL_34:
  swift_bridgeObjectRelease(v70);
  swift_release(v76);
  v42 = v71;
  if (v71[2])
  {
    v43 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v81._countAndFlagsBits = 0xD00000000000005FLL;
    v81._object = (void *)0x8000000100A10140;
    v44._object = (void *)0x80000001009FECF0;
    v44._countAndFlagsBits = 0xD000000000000011;
    v45._countAndFlagsBits = 0;
    v45._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v44, (Swift::String_optional)0, (NSBundle)v43, v45, v81);

    Array.sorting<A>(on:)(sub_1005B4558, 0, v42, &type metadata for AirPollutantTableViewModel.Row, &type metadata for String, &protocol witness table for String);
    swift_bridgeObjectRelease(v42);
  }
  else
  {
    v46 = swift_bridgeObjectRelease(v71);
    v47 = v68;
    static Logger.airPollutant.getter(v46);
    v48 = v67;
    v49 = v69;
    v50 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 16))(v19, v66, v69);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(12, -1);
      v54 = swift_slowAlloc(32, -1);
      v76 = v54;
      v78 = v54;
      *(_DWORD *)v53 = 136446210;
      v75 = (char *)(v53 + 4);
      v55 = AirQuality.pollutants.getter(v54);
      v56 = Dictionary.description.getter(v55, &type metadata for String, v5, &protocol witness table for String);
      v57 = v48;
      v59 = v58;
      swift_bridgeObjectRelease(v55);
      v77 = sub_1000CE1C8(v56, v59, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
      v60 = swift_bridgeObjectRelease(v59);
      (*(void (**)(char *, uint64_t, __n128))(v57 + 8))(v19, v69, v60);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "No view models created for pollutants = %{public}s", v53, 0xCu);
      v61 = v76;
      swift_arrayDestroy(v76, 1);
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v53, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v48 + 8))(v19, v49);
    }

    (*(void (**)(char *, uint64_t))(v64 + 8))(v47, v65);
  }

}

id sub_1006C1714(void **a1)
{
  void *v1;
  id v2;
  id v4;
  void *v5;
  id v6;
  _BYTE v8[24];

  v1 = *a1;
  if (*a1)
  {
    v2 = *a1;
  }
  else
  {
    v4 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleBody);
    swift_beginAccess(a1, v8, 1, 0);
    v5 = *a1;
    *a1 = v4;
    v2 = v4;

    v1 = 0;
  }
  v6 = v1;
  return v2;
}

uint64_t type metadata accessor for AirQualityDetailViewModelFactory()
{
  return objc_opt_self(_TtC7Weather32AirQualityDetailViewModelFactory);
}

uint64_t sub_1006C17D8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = -1;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v5 = v6;
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

uint64_t storeEnumTagSinglePayload for LocationHeaderViewTextLayout(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1006C185C + 4 * byte_1009BEC15[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1006C1890 + 4 * byte_1009BEC10[v4]))();
}

uint64_t sub_1006C1890(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006C1898(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1006C18A0);
  return result;
}

uint64_t sub_1006C18AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1006C18B4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1006C18B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006C18C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocationHeaderViewTextLayout()
{
  return &type metadata for LocationHeaderViewTextLayout;
}

unint64_t sub_1006C18E0()
{
  unint64_t result;

  result = qword_100BFD270;
  if (!qword_100BFD270)
  {
    result = swift_getWitnessTable(&unk_1009BEC80, &type metadata for LocationHeaderViewTextLayout);
    atomic_store(result, (unint64_t *)&qword_100BFD270);
  }
  return result;
}

_QWORD *sub_1006C191C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for DispatchQoS(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_OWORD *sub_1006C1998(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for DispatchQoS(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_1006C19F4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for DispatchQoS(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_1006C1A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006C1A6C);
}

uint64_t sub_1006C1A6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100099984();
    return _s7Weather24LocationCompositionStateOwet_0(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_1006C1ADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006C1AE8);
}

uint64_t sub_1006C1AE8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100099984();
    return _s7Weather24LocationCompositionStateOwst_0(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AutomationInfoSetting(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1006C1B9C + 4 * byte_1009BED05[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1006C1BD0 + 4 * byte_1009BED00[v4]))();
}

uint64_t sub_1006C1BD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006C1BD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1006C1BE0);
  return result;
}

uint64_t sub_1006C1BEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1006C1BF4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1006C1BF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006C1C00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AutomationInfoSetting()
{
  return &type metadata for AutomationInfoSetting;
}

uint64_t *sub_1006C1C1C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char v29;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    v10 = a2[7];
    a1[6] = a2[6];
    a1[7] = v10;
    v11 = a2[9];
    a1[8] = a2[8];
    a1[9] = v11;
    v12 = a2[11];
    v13 = a3[5];
    v14 = (uint64_t *)((char *)a1 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    a1[10] = a2[10];
    a1[11] = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v15) == 1)
    {
      v17 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v15, v17);
      v18 = 1;
    }
    else
    {
      *v14 = *v15;
      swift_retain();
      v18 = 0;
    }
    swift_storeEnumTagMultiPayload(v14, v16, v18);
    v20 = a3[6];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = *(_QWORD *)v22;
    v24 = v22[8];
    sub_10008D47C(*(_QWORD *)v22, v24);
    *(_QWORD *)v21 = v23;
    v21[8] = v24;
    v25 = a3[7];
    v26 = (char *)a1 + v25;
    v27 = (char *)a2 + v25;
    v28 = *(_QWORD *)v27;
    v29 = v27[8];
    sub_10008D47C(*(_QWORD *)v27, v29);
    *(_QWORD *)v26 = v28;
    v26[8] = v29;
  }
  return a1;
}

uint64_t sub_1006C1DB0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v4) == 1)
  {
    v5 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  sub_1000B15F8(*(_QWORD *)(a1 + a2[6]), *(_BYTE *)(a1 + a2[6] + 8));
  return sub_1000B15F8(*(_QWORD *)(a1 + a2[7]), *(_BYTE *)(a1 + a2[7] + 8));
}

_QWORD *sub_1006C1E7C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char v27;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  v10 = a2[9];
  a1[8] = a2[8];
  a1[9] = v10;
  v11 = a2[11];
  v12 = a3[5];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  a1[10] = a2[10];
  a1[11] = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v14) == 1)
  {
    v16 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = 1;
  }
  else
  {
    *v13 = *v14;
    swift_retain();
    v17 = 0;
  }
  swift_storeEnumTagMultiPayload(v13, v15, v17);
  v18 = a3[6];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = *(_QWORD *)v20;
  v22 = v20[8];
  sub_10008D47C(*(_QWORD *)v20, v22);
  *(_QWORD *)v19 = v21;
  v19[8] = v22;
  v23 = a3[7];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = *(_QWORD *)v25;
  v27 = v25[8];
  sub_10008D47C(*(_QWORD *)v25, v27);
  *(_QWORD *)v24 = v26;
  v24[8] = v27;
  return a1;
}

_QWORD *sub_1006C1FE4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v6 = a3[5];
    v7 = (_QWORD *)((char *)a1 + v6);
    v8 = (_QWORD *)((char *)a2 + v6);
    sub_100021AA4((uint64_t)a1 + v6, &qword_100BC37D8);
    v9 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v8) == 1)
    {
      v10 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, v8, v10);
      v11 = 1;
    }
    else
    {
      *v7 = *v8;
      swift_retain();
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v7, v9, v11);
  }
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = v14[8];
  sub_10008D47C(*(_QWORD *)v14, v16);
  v17 = *(_QWORD *)v13;
  v18 = v13[8];
  *(_QWORD *)v13 = v15;
  v13[8] = v16;
  sub_1000B15F8(v17, v18);
  v19 = a3[7];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *(_QWORD *)v21;
  v23 = v21[8];
  sub_10008D47C(*(_QWORD *)v21, v23);
  v24 = *(_QWORD *)v20;
  v25 = v20[8];
  *(_QWORD *)v20 = v22;
  v20[8] = v23;
  sub_1000B15F8(v24, v25);
  return a1;
}

char *sub_1006C21D0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;

  memcpy(a1, a2, 0x60uLL);
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v8) == 1)
  {
    v10 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[6];
  v12 = a3[7];
  v13 = &a1[v11];
  v14 = &a2[v11];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = &a1[v12];
  v16 = &a2[v12];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  return a1;
}

_QWORD *sub_1006C22BC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  v10 = a2[9];
  a1[8] = a2[8];
  a1[9] = v10;
  swift_bridgeObjectRelease();
  v11 = a2[11];
  a1[10] = a2[10];
  a1[11] = v11;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v12 = a3[5];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    sub_100021AA4((uint64_t)a1 + v12, &qword_100BC37D8);
    v15 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v14) == 1)
    {
      v16 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v13, v14, v16);
      swift_storeEnumTagMultiPayload(v13, v15, 1);
    }
    else
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
  }
  v17 = a3[6];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *(_QWORD *)v19;
  LOBYTE(v19) = v19[8];
  v21 = *(_QWORD *)v18;
  v22 = v18[8];
  *(_QWORD *)v18 = v20;
  v18[8] = (char)v19;
  sub_1000B15F8(v21, v22);
  v23 = a3[7];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = *(_QWORD *)v25;
  LOBYTE(v25) = v25[8];
  v27 = *(_QWORD *)v24;
  v28 = v24[8];
  *(_QWORD *)v24 = v26;
  v24[8] = (char)v25;
  sub_1000B15F8(v27, v28);
  return a1;
}

uint64_t sub_1006C2434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006C2440);
}

uint64_t sub_1006C2440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000BA294((uint64_t *)&unk_100C09CA0);
    return _s7Weather24LocationCompositionStateOwet_0(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_1006C24B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006C24C4);
}

uint64_t sub_1006C24C4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1000BA294((uint64_t *)&unk_100C09CA0);
    return _s7Weather24LocationCompositionStateOwst_0(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1006C2534(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABD6E8, 1);
}

void sub_1006C2544(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t OpaqueTypeConformance2;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  _QWORD __dst[13];

  v2 = v1;
  v49 = a1;
  v48 = type metadata accessor for AutomationInfo(0);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100098728();
  v6 = (_QWORD *)(v5 - v4);
  v7 = type metadata accessor for AccessibilityChildBehavior(0);
  v45 = *(_QWORD *)(v7 - 8);
  v46 = v7;
  __chkstk_darwin(v7);
  sub_100098728();
  v10 = v9 - v8;
  v11 = sub_1000BA294(&qword_100BFD3A0);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100098728();
  v15 = v14 - v13;
  v16 = sub_1000BA294(&qword_100BFD3A8);
  v44 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  sub_100098728();
  v19 = v18 - v17;
  v47 = sub_1000BA294(&qword_100BD9A78);
  sub_1000B42B0();
  __chkstk_darwin(v20);
  sub_10009883C();
  v23 = v21 - v22;
  __chkstk_darwin(v24);
  v26 = (char *)&v42 - v25;
  *(_QWORD *)v15 = static VerticalAlignment.center.getter(v27);
  *(_QWORD *)(v15 + 8) = 0;
  *(_BYTE *)(v15 + 16) = 0;
  v28 = sub_1000BA294(&qword_100BFD3B0);
  sub_1006C2830(v2, v15 + *(int *)(v28 + 44));
  static AccessibilityChildBehavior.ignore.getter(v29);
  sub_10003D2DC(&qword_100BFD3B8, &qword_100BFD3A0);
  v31 = v30;
  View.accessibilityElement(children:)(v10, v11, v30);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v10, v46);
  sub_100021AA4(v15, &qword_100BFD3A0);
  __dst[0] = v11;
  __dst[1] = v31;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(__dst, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibilityRespondsToUserInteraction(_:)(1, v16, OpaqueTypeConformance2);
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v19, v16);
  v33 = v43;
  memcpy(__dst, v43, 0x60uLL);
  v50[0] = sub_10048C9A8();
  v50[1] = v34;
  v35 = sub_100114EF8();
  v36 = Text.init<A>(_:)(v50, &type metadata for String, v35);
  v38 = v37;
  LOBYTE(v10) = v39 & 1;
  ModifiedContent<>.accessibilityLabel(_:)();
  sub_1000D31B4(v36, v38, v10);
  swift_bridgeObjectRelease();
  sub_100021AA4(v23, &qword_100BD9A78);
  v40 = v33[11];
  *v6 = v33[10];
  v6[1] = v40;
  v41 = type metadata accessor for AutomationCellInfo(0);
  swift_storeEnumTagMultiPayload(v6, v41, 2);
  swift_storeEnumTagMultiPayload(v6, v48, 1);
  sub_100335504();
  swift_bridgeObjectRetain();
  sub_1002BA0F0((uint64_t)v6);
  sub_100021AA4((uint64_t)v26, &qword_100BD9A78);
  sub_100098640();
}

void sub_1006C2830(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_1000BA294(&qword_100BFD3C0);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BFD3C8);
  __chkstk_darwin(v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v16 - v11;
  *(_QWORD *)v6 = static HorizontalAlignment.leading.getter(v13);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  v14 = sub_1000BA294(&qword_100BFD3D0);
  sub_1006C29B8(a1, (uint64_t)&v6[*(int *)(v14 + 44)]);
  sub_100037768((uint64_t)v6, (uint64_t)v9, &qword_100BFD3C0);
  *(_QWORD *)&v9[*(int *)(v7 + 36)] = 0x3FF0000000000000;
  sub_100021AA4((uint64_t)v6, &qword_100BFD3C0);
  sub_1000787D4((uint64_t)v9, (uint64_t)v12, &qword_100BFD3C8);
  sub_100037768((uint64_t)v12, (uint64_t)v9, &qword_100BFD3C8);
  sub_100037768((uint64_t)v9, a2, &qword_100BFD3C8);
  v15 = a2 + *(int *)(sub_1000BA294(&qword_100BFD3D8) + 48);
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 0;
  sub_100021AA4((uint64_t)v12, &qword_100BFD3C8);
  sub_100021AA4((uint64_t)v9, &qword_100BFD3C8);
}

void sub_1006C29B8(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t KeyPath;
  uint64_t v44;
  char *v45;
  __n128 v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t OpaqueTypeConformance2;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned __int8 v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  char v118;
  _BYTE v119[474];
  __n128 v120[30];
  _BYTE v121[472];
  __n128 v122[30];
  uint64_t v123[61];

  v114 = a2;
  v3 = type metadata accessor for TypesettingLanguageAwareLineHeightRatio(0);
  v110 = *(_QWORD *)(v3 - 8);
  v111 = v3;
  __chkstk_darwin(v3);
  v107 = (char *)&v98 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000BA294(&qword_100BCCDA8);
  __chkstk_darwin(v5);
  v7 = (uint64_t)&v98 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v98 - v9;
  v11 = sub_1000BA294(&qword_100BFD3E0);
  v12 = *(_QWORD *)(v11 - 8);
  v112 = v11;
  v113 = v12;
  __chkstk_darwin(v11);
  v105 = (uint64_t)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000BA294(&qword_100BFD3E8);
  __chkstk_darwin(v14);
  v108 = (char *)&v98 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_1000BA294(&qword_100BFD3F0);
  __chkstk_darwin(v109);
  v116 = (uint64_t)&v98 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v115 = (uint64_t)&v98 - v18;
  v19 = a1;
  v20 = *a1;
  v21 = a1[1];
  v22 = v19;
  v103 = (unint64_t)v19;
  v123[0] = v20;
  v123[1] = v21;
  v23 = sub_100114EF8();
  v104 = v23;
  swift_bridgeObjectRetain();
  v24 = Text.init<A>(_:)(v123, &type metadata for String, v23);
  v101 = v25;
  v102 = v26;
  v28 = v27 & 1;
  v29 = static Font.largeTitle.getter(v24);
  v30 = static Font.title2.getter();
  v106 = type metadata accessor for PrecipitationTotalComponentView(0);
  v31 = (uint64_t)v22 + *(int *)(v106 + 28);
  v32 = *(_QWORD *)v31;
  LOBYTE(v23) = *(_BYTE *)(v31 + 8);
  sub_10008D47C(*(_QWORD *)v31, v23);
  sub_100109B54();
  LOBYTE(v22) = v33;
  sub_1000B15F8(v32, v23);
  v34 = enum case for Font.Leading.tight(_:);
  v35 = type metadata accessor for Font.Leading(0);
  v36 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104);
  v100 = v10;
  v36(v10, v34, v35);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v35);
  sub_100037768((uint64_t)v10, v7, &qword_100BCCDA8);
  swift_retain();
  swift_retain();
  v37 = sub_10040BDEC(v29, v30, v22 & 1, v7);
  v38 = v101;
  v98 = Text.font(_:)(v37, v24, v101, v28, v102);
  v99 = v39;
  v41 = v40;
  LOBYTE(v7) = v42;
  swift_release();
  swift_release();
  swift_release();
  sub_1000D31B4(v24, v38, v28);
  swift_bridgeObjectRelease();
  sub_100021AA4((uint64_t)v100, &qword_100BCCDA8);
  KeyPath = swift_getKeyPath(&unk_1009BEE20);
  v44 = swift_getKeyPath(&unk_1009BEE50);
  v123[0] = v98;
  v123[1] = v41;
  LOBYTE(v123[2]) = v7 & 1;
  v123[3] = v99;
  v123[4] = KeyPath;
  v123[5] = 1;
  LOBYTE(v123[6]) = 0;
  v123[7] = v44;
  v123[8] = 0x3FE0000000000000;
  v45 = v107;
  static TypesettingLanguageAwareLineHeightRatio.disable.getter(v46);
  v47 = sub_1000BA294(&qword_100BD8900);
  v48 = sub_10032CA68();
  v49 = v105;
  View.typesettingLanguageAwareLineHeightRatio(_:isEnabled:)(v45, 1, v47, v48);
  (*(void (**)(char *, unint64_t))(v110 + 8))(v45, v111);
  sub_1000D31B4(v123[0], v123[1], v123[2]);
  v50 = v103;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v51 = *(_QWORD *)(v50 + 24);
  v123[0] = *(_QWORD *)(v50 + 16);
  v123[1] = v51;
  v122[0].n128_u64[0] = v47;
  v122[0].n128_u64[1] = v48;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v122, &opaque type descriptor for <<opaque return type of View.typesettingLanguageAwareLineHeightRatio(_:isEnabled:)>>, 1);
  v53 = (uint64_t)v108;
  v54 = v112;
  View.accessibilityLabel<A>(_:)(v123, v112, &type metadata for String, OpaqueTypeConformance2, v104);
  (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v49, v54);
  v55 = v116;
  sub_100037768(v53, v116, &qword_100BFD3E8);
  *(_QWORD *)(v55 + *(int *)(v109 + 36)) = 0x3FF0000000000000;
  sub_100021AA4(v53, &qword_100BFD3E8);
  sub_1000787D4(v55, v115, &qword_100BFD3F0);
  v56 = v50 + *(int *)(v106 + 24);
  v57 = *(_QWORD *)v56;
  LOBYTE(v55) = *(_BYTE *)(v56 + 8);
  sub_10008D47C(*(_QWORD *)v56, v55);
  sub_10010BCB4();
  LOBYTE(v53) = v58;
  v59 = sub_1000B15F8(v57, v55);
  if ((v53 & 1) != 0)
  {
    v88 = static Axis.Set.vertical.getter(v59);
    sub_1006C390C(v50, v121);
    memcpy(&v119[7], v121, 0x1D1uLL);
    v122[0].n128_u8[0] = v88;
    memcpy((char *)v122[0].n128_u64 + 1, v119, 0x1D8uLL);
    sub_1006C4160((uint64_t)v122);
    sub_1000787D4((uint64_t)v122, (uint64_t)v120, &qword_100BFD3F8);
    v89 = sub_1000BA294(&qword_100BFD400);
    v90 = sub_1000BA294(&qword_100BFD408);
    sub_10003D2DC(&qword_100BFD410, &qword_100BFD400);
    v92 = v91;
    sub_10003D2DC(&qword_100BFD418, &qword_100BFD408);
    _ConditionalContent<>.init(storage:)(v120, v89, v90, v92, v93);
  }
  else
  {
    sub_1006C337C(v123);
    v60 = v123[0];
    v61 = v123[1];
    v62 = LOBYTE(v123[2]);
    v63 = v123[3];
    v113 = v123[4];
    v64 = v123[5];
    sub_1006C3608((uint64_t)v123);
    v65 = v123[0];
    v66 = v123[1];
    v67 = v123[2];
    v68 = v123[3];
    v69 = v123[5];
    v112 = v123[6];
    v107 = (char *)v123[7];
    v108 = (char *)v123[4];
    LODWORD(v106) = LOBYTE(v123[8]);
    v70 = v62;
    v119[0] = v62;
    v121[0] = 0;
    v118 = v123[2];
    LODWORD(v102) = LOBYTE(v123[2]);
    v117 = v123[8];
    v71 = v60;
    v110 = v61;
    LODWORD(v109) = v70;
    sub_1000D55D4(v60, v61, v70);
    v111 = v63;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1000D55D4(v65, v66, v67);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_1000D55D4(v60, v61, v70);
    swift_bridgeObjectRetain();
    swift_retain();
    v72 = v65;
    v103 = v65;
    LOBYTE(v61) = v102;
    sub_1000D55D4(v65, v66, v102);
    v73 = v68;
    swift_bridgeObjectRetain();
    v74 = (unint64_t)v108;
    swift_retain();
    swift_retain();
    v75 = v72;
    v76 = v66;
    LOBYTE(v72) = v61;
    sub_1000D31B4(v75, v66, v61);
    swift_release();
    swift_release();
    v77 = v73;
    v104 = v73;
    swift_bridgeObjectRelease();
    v105 = v60;
    v78 = v110;
    v79 = v109;
    sub_1000D31B4(v105, v110, v109);
    v80 = v113;
    swift_release();
    v81 = v111;
    swift_bridgeObjectRelease();
    v122[0].n128_u64[0] = v71;
    v122[0].n128_u64[1] = v78;
    v122[1].n128_u8[0] = v79;
    v122[1].n128_u64[1] = v81;
    v122[2].n128_u64[0] = v80;
    v122[2].n128_u64[1] = v64;
    v122[3].n128_u16[0] = 256;
    v122[3].n128_u64[1] = 0;
    v122[4].n128_u8[0] = 0;
    v82 = v103;
    v122[4].n128_u64[1] = v103;
    v122[5].n128_u64[0] = v76;
    v122[5].n128_u8[8] = v72;
    LOBYTE(v71) = v72;
    v122[6].n128_u64[0] = v77;
    v122[6].n128_u64[1] = v74;
    v122[7].n128_u64[0] = v69;
    v122[7].n128_u64[1] = v112;
    v122[8].n128_u64[0] = (unint64_t)v107;
    v122[8].n128_u8[8] = v106;
    *(unsigned __int16 *)((char *)&v122[8].n128_u16[4] + 1) = 256;
    sub_1006C47C4((uint64_t)v122);
    sub_1000787D4((uint64_t)v122, (uint64_t)v123, &qword_100BFD3F8);
    v83 = sub_1000BA294(&qword_100BFD400);
    v84 = sub_1000BA294(&qword_100BFD408);
    sub_10003D2DC(&qword_100BFD410, &qword_100BFD400);
    v86 = v85;
    sub_10003D2DC(&qword_100BFD418, &qword_100BFD408);
    _ConditionalContent<>.init(storage:)(v123, v83, v84, v86, v87);
    sub_1000D31B4(v82, v76, v71);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    sub_1000D31B4(v105, v110, v109);
    swift_release();
    swift_bridgeObjectRelease();
    memcpy(v123, v120, 0x1DAuLL);
  }
  v95 = v115;
  v94 = v116;
  sub_100037768(v115, v116, &qword_100BFD3F0);
  memcpy(v119, v123, sizeof(v119));
  v96 = v114;
  sub_100037768(v94, v114, &qword_100BFD3F0);
  v97 = (void *)(v96 + *(int *)(sub_1000BA294(&qword_100BFD420) + 48));
  memcpy(v120, v119, 0x1DAuLL);
  memcpy(v97, v119, 0x1DAuLL);
  sub_1006C4448(v120);
  sub_100021AA4(v95, &qword_100BFD3F0);
  memcpy(v122, v119, 0x1DAuLL);
  sub_1006C4448(v122);
  sub_100021AA4(v94, &qword_100BFD3F0);
}

void sub_1006C337C(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t KeyPath;
  uint64_t *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  _QWORD v47[2];

  v46 = a1;
  sub_1000BA294(&qword_100BCCDA8);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_10009883C();
  v5 = v3 - v4;
  __chkstk_darwin(v6);
  v8 = (char *)&v42 - v7;
  v9 = type metadata accessor for Font.TextStyle(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_100098728();
  v13 = v12 - v11;
  v14 = *(_QWORD *)(v1 + 40);
  v47[0] = *(_QWORD *)(v1 + 32);
  v47[1] = v14;
  v15 = sub_100114EF8();
  swift_bridgeObjectRetain();
  v16 = Text.init<A>(_:)(v47, &type metadata for String, v15);
  v44 = v17;
  v45 = v18;
  v20 = v19 & 1;
  v21 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(v13, enum case for Font.TextStyle.title3(_:), v9);
  static Font.Weight.semibold.getter(v21);
  v22 = static Font.system(_:weight:)(v13);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  v24 = static Font.headline.getter(v23);
  v25 = v1 + *(int *)(type metadata accessor for PrecipitationTotalComponentView(0) + 28);
  v26 = *(_QWORD *)v25;
  LOBYTE(v13) = *(_BYTE *)(v25 + 8);
  sub_10008D47C(*(_QWORD *)v25, v13);
  sub_100109B54();
  LOBYTE(v14) = v27;
  sub_1000B15F8(v26, v13);
  v28 = enum case for Font.Leading.tight(_:);
  v29 = type metadata accessor for Font.Leading(0);
  v30 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 104);
  v43 = v8;
  v30(v8, v28, v29);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v29);
  sub_100037768((uint64_t)v8, v5, &qword_100BCCDA8);
  swift_retain();
  swift_retain();
  v31 = sub_10040BDEC(v22, v24, v14 & 1, v5);
  v32 = v16;
  v33 = v16;
  v34 = v44;
  v35 = Text.font(_:)(v31, v33, v44, v20, v45);
  v37 = v36;
  LOBYTE(v14) = v38;
  v42 = v39;
  swift_release();
  swift_release();
  swift_release();
  sub_1000D31B4(v32, v34, v20);
  swift_bridgeObjectRelease();
  sub_100021AA4((uint64_t)v43, &qword_100BCCDA8);
  KeyPath = swift_getKeyPath(&unk_1009BEE50);
  v41 = v46;
  *v46 = v35;
  v41[1] = v37;
  *((_BYTE *)v41 + 16) = v14 & 1;
  v41[3] = v42;
  v41[4] = KeyPath;
  v41[5] = 0x3FE999999999999ALL;
  sub_100098640();
}

void sub_1006C3608(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t KeyPath;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[2];

  v2 = v1;
  sub_1000BA294(&qword_100BCCDA8);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_10009883C();
  v59 = v5 - v6;
  __chkstk_darwin(v7);
  v9 = (char *)&v53 - v8;
  v10 = type metadata accessor for ContentSizeCategory(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_10009883C();
  v14 = v12 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)&v53 - v16;
  v18 = *(_QWORD *)(v1 + 48);
  v19 = *(_QWORD *)(v1 + 56);
  v60[0] = v18;
  v60[1] = v19;
  v20 = sub_100114EF8();
  swift_bridgeObjectRetain();
  v21 = Text.init<A>(_:)(v60, &type metadata for String, v20);
  v56 = v22;
  v57 = v21;
  v24 = v23;
  v58 = v25;
  v26 = type metadata accessor for PrecipitationTotalComponentView(0);
  sub_100109D64();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 104))(v14, enum case for ContentSizeCategory.extraExtraLarge(_:), v10);
  LOBYTE(v19) = sub_1004F5D00((uint64_t)v17, v14);
  v27 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v27(v14, v10);
  v28 = ((uint64_t (*)(char *, uint64_t))v27)(v17, v10);
  if ((v19 & 1) != 0)
    v29 = static Font.caption2.getter(v28);
  else
    v29 = static Font.subheadline.getter(v28);
  v30 = v29;
  v31 = v24 & 1;
  v32 = static Font.footnote.getter(v29);
  v33 = v2 + *(int *)(v26 + 28);
  v34 = *(_QWORD *)v33;
  v35 = *(_BYTE *)(v33 + 8);
  sub_10008D47C(*(_QWORD *)v33, v35);
  sub_100109B54();
  v37 = v36;
  sub_1000B15F8(v34, v35);
  v38 = enum case for Font.Leading.tight(_:);
  v39 = type metadata accessor for Font.Leading(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v9, v38, v39);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v39);
  v40 = v59;
  sub_100037768((uint64_t)v9, v59, &qword_100BCCDA8);
  swift_retain();
  swift_retain();
  v41 = sub_10040BDEC(v30, v32, v37 & 1, v40);
  v42 = (uint64_t)v9;
  v44 = v56;
  v43 = v57;
  v45 = Text.font(_:)(v41, v57, v56, v31, v58);
  v54 = v46;
  v55 = v45;
  v48 = v47;
  v59 = v49;
  swift_release();
  swift_release();
  swift_release();
  sub_1000D31B4(v43, v44, v31);
  swift_bridgeObjectRelease();
  sub_100021AA4(v42, &qword_100BCCDA8);
  KeyPath = swift_getKeyPath(&unk_1009BEE50);
  v51 = swift_getKeyPath(&unk_1009BEE20);
  v52 = v54;
  *(_QWORD *)a1 = v55;
  *(_QWORD *)(a1 + 8) = v52;
  *(_BYTE *)(a1 + 16) = v48 & 1;
  *(_QWORD *)(a1 + 24) = v59;
  *(_QWORD *)(a1 + 32) = KeyPath;
  *(_QWORD *)(a1 + 40) = 0x3FE999999999999ALL;
  *(_QWORD *)(a1 + 48) = v51;
  *(_QWORD *)(a1 + 56) = 3;
  *(_BYTE *)(a1 + 64) = 0;
  sub_100098640();
}

uint64_t sub_1006C390C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v17;
  uint64_t v18;
  uint64_t v20;
  _BYTE v21[168];
  _QWORD v22[23];
  __n128 v23[10];
  _BYTE __dst[465];
  __n128 v25[10];
  _QWORD v26[23];
  _BYTE v27[168];
  _BYTE __src[160];
  _BYTE v29[184];

  v20 = static HorizontalAlignment.leading.getter(a1);
  sub_1006C3BFC((uint64_t)__src);
  v29[168] = 1;
  memcpy(&v29[7], __src, 0x9BuLL);
  v3 = objc_msgSend((id)objc_opt_self(UIFont), "wu_systemUsesExuberatedLineHeight");
  if ((v3 & 1) != 0)
  {
    sub_1006C494C(__dst);
  }
  else
  {
    v4 = static HorizontalAlignment.leading.getter(v3);
    sub_1006C3D8C(a1, (uint64_t)v22);
    v25[0].n128_u8[0] = 0;
    memcpy((char *)v26 + 7, v22, 0x8BuLL);
    *(_QWORD *)__dst = v4;
    *(_QWORD *)&__dst[8] = 0xC008000000000000;
    __dst[16] = 0;
    memcpy(&__dst[17], v26, 0x92uLL);
    LocationSearchEntityFromStringResolver.init()();
  }
  sub_1000787D4((uint64_t)__dst, (uint64_t)v27, &qword_100BFD428);
  v18 = static HorizontalAlignment.leading.getter(v5);
  sub_1006C403C((uint64_t)v26);
  v6 = v26[0];
  v7 = v26[1];
  v8 = v26[2];
  v9 = v26[3];
  v10 = v26[4];
  v11 = v26[5];
  v12 = v26[6];
  v17 = *(_OWORD *)&v26[7];
  v13 = v26[9];
  v14 = v26[10];
  v15 = v26[11];
  sub_1000787D4((uint64_t)v27, (uint64_t)v21, &qword_100BFD428);
  v22[0] = v20;
  v22[1] = 0;
  LOBYTE(v22[2]) = 1;
  memcpy((char *)&v22[2] + 1, v29, 0xA2uLL);
  sub_1000787D4((uint64_t)v21, (uint64_t)v23, &qword_100BFD428);
  memcpy(__dst, v22, 0xB3uLL);
  sub_1000787D4((uint64_t)v23, (uint64_t)&__dst[184], &qword_100BFD428);
  *(_QWORD *)&__dst[352] = v18;
  *(_QWORD *)&__dst[360] = 0;
  __dst[368] = 1;
  *(_QWORD *)&__dst[376] = v6;
  *(_QWORD *)&__dst[384] = v7;
  __dst[392] = v8;
  *(_QWORD *)&__dst[400] = v9;
  *(_QWORD *)&__dst[408] = v10;
  *(_QWORD *)&__dst[416] = v11;
  *(_QWORD *)&__dst[424] = v12;
  *(_OWORD *)&__dst[432] = v17;
  *(_QWORD *)&__dst[448] = v13;
  *(_QWORD *)&__dst[456] = v14;
  __dst[464] = v15;
  memcpy(a2, __dst, 0x1D1uLL);
  sub_1006C47CC((uint64_t)v22);
  sub_1006C4868(v23);
  sub_1000D55D4(v6, v7, v8);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1000D31B4(v6, v7, v8);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000787D4((uint64_t)v21, (uint64_t)v25, &qword_100BFD428);
  sub_1006C4868(v25);
  v26[0] = v20;
  v26[1] = 0;
  LOBYTE(v26[2]) = 1;
  memcpy((char *)&v26[2] + 1, v29, 0xA2uLL);
  return sub_1006C48B0((uint64_t)v26);
}

double sub_1006C3BFC@<D0>(uint64_t a1@<X8>)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  double result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;

  sub_1006C337C(&v19);
  v17 = v20;
  v18 = v19;
  v2 = v21;
  v3 = v22;
  v4 = v23;
  v5 = v24;
  if (objc_msgSend((id)objc_opt_self(UIFont), "wu_systemUsesExuberatedLineHeight"))
    v6 = 0.0;
  else
    v6 = -4.0;
  sub_1006C3608((uint64_t)&v19);
  v7 = v19;
  v8 = v20;
  v9 = v21;
  v10 = v22;
  v11 = v23;
  v12 = v24;
  v14 = v25;
  v13 = v26;
  v15 = v27;
  LOBYTE(v19) = v2;
  v30 = 0;
  v29 = v21;
  v28 = v27;
  *(_QWORD *)a1 = v18;
  *(_QWORD *)(a1 + 8) = v17;
  *(_BYTE *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  *(_WORD *)(a1 + 48) = 256;
  *(_QWORD *)(a1 + 56) = 0;
  *(double *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 96) = v8;
  *(_BYTE *)(a1 + 104) = v9;
  *(_QWORD *)(a1 + 112) = v10;
  *(_QWORD *)(a1 + 120) = v11;
  *(_QWORD *)(a1 + 128) = v12;
  *(_QWORD *)(a1 + 136) = v14;
  *(_QWORD *)(a1 + 144) = v13;
  *(_BYTE *)(a1 + 152) = v15;
  *(_WORD *)(a1 + 153) = 256;
  sub_1000D55D4(v18, v17, v2);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000D55D4(v7, v8, v9);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1000D31B4(v7, v8, v9);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000D31B4(v18, v17, v2);
  swift_release();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

double sub_1006C3D8C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  _BYTE v53[7];
  char v54;
  _BYTE v55[7];
  char v56;
  int v57;
  __int16 v58;
  char v59;

  v4 = type metadata accessor for Font.Leading(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = a1;
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v43 = v8;
  v44 = v9;
  v10 = sub_100114EF8();
  swift_bridgeObjectRetain();
  v11 = Text.init<A>(_:)(&v43, &type metadata for String, v10);
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  v18 = static Font.subheadline.getter(v11);
  static Font.Weight.semibold.getter(v18);
  v19 = Font.weight(_:)(v18);
  v20 = swift_release();
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v5 + 104))(v7, enum case for Font.Leading.tight(_:), v4, v20);
  v21 = Font.leading(_:)(v7, v19);
  v22 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v22);
  v23 = Text.font(_:)(v21, v11, v13, v17, v15);
  v40 = v24;
  v41 = v25;
  LOBYTE(v4) = v26;
  swift_release();
  LOBYTE(v19) = v4 & 1;
  sub_1000D31B4(v11, v13, v17);
  swift_bridgeObjectRelease();
  sub_1006C3608((uint64_t)&v43);
  v27 = v43;
  v28 = v44;
  LOBYTE(v17) = v45;
  v29 = v46;
  v30 = v47;
  v31 = v48;
  v33 = v49;
  v32 = v50;
  v59 = v19;
  v56 = 0;
  v54 = v45;
  v52 = v51;
  *(_DWORD *)(a2 + 17) = v43;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)((char *)&v43 + 3);
  *(_DWORD *)(a2 + 34) = v57;
  *(_WORD *)(a2 + 38) = v58;
  *(_DWORD *)(a2 + 65) = *(_DWORD *)v55;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)&v55[3];
  v34 = *(_DWORD *)v53;
  *(_DWORD *)(a2 + 92) = *(_DWORD *)&v53[3];
  *(_DWORD *)(a2 + 89) = v34;
  LOBYTE(v34) = v52;
  v35 = v40;
  v36 = v41;
  *(_QWORD *)a2 = v23;
  *(_QWORD *)(a2 + 8) = v35;
  *(_BYTE *)(a2 + 16) = v19;
  *(_QWORD *)(a2 + 24) = v36;
  *(_WORD *)(a2 + 32) = 256;
  *(_OWORD *)(a2 + 40) = xmmword_1009BED60;
  *(_QWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = v27;
  *(_QWORD *)(a2 + 80) = v28;
  *(_BYTE *)(a2 + 88) = v17;
  *(_QWORD *)(a2 + 96) = v29;
  *(_QWORD *)(a2 + 104) = v30;
  *(_QWORD *)(a2 + 112) = v31;
  *(_QWORD *)(a2 + 120) = v33;
  *(_QWORD *)(a2 + 128) = v32;
  *(_BYTE *)(a2 + 136) = v34;
  *(_WORD *)(a2 + 137) = 256;
  v37 = v35;
  sub_1000D55D4(v23, v35, v19);
  swift_bridgeObjectRetain();
  sub_1000D55D4(v27, v28, v17);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1000D31B4(v27, v28, v17);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000D31B4(v23, v37, v19);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

double sub_1006C403C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  unsigned int v9;
  double v10;
  double result;
  uint64_t v12[2];
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1006C337C(v12);
  v2 = v12[0];
  v3 = v12[1];
  v4 = v13;
  v5 = v14;
  v6 = v15;
  v7 = v16;
  KeyPath = swift_getKeyPath(&unk_1009BEE50);
  v9 = objc_msgSend((id)objc_opt_self(UIFont), "wu_systemUsesExuberatedLineHeight");
  v10 = -4.0;
  if (v9)
    v10 = 0.0;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = KeyPath;
  *(_OWORD *)(a1 + 56) = xmmword_1009BED70;
  *(double *)(a1 + 72) = v10;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  sub_1000D55D4(v2, v3, v4);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1000D31B4(v2, v3, v4);
  swift_release();
  swift_release();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_1006C4160(uint64_t result)
{
  *(_BYTE *)(result + 473) = 1;
  return result;
}

double sub_1006C416C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,char a61)
{
  double result;

  if ((a61 & 1) != 0)
  {
    sub_1000D55D4(a5, a6, a7 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1000D55D4(a16, a17, a18 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_1006C43BC(a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39);
    sub_1000D55D4(a49, a50, a51 & 1);
  }
  else
  {
    sub_1000D55D4(a1, a2, a3 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1000D55D4(a10, a11, a12 & 1);
  }
  swift_bridgeObjectRetain();
  swift_retain();
  *(_QWORD *)&result = swift_retain().n128_u64[0];
  return result;
}

double sub_1006C43BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  double result;

  if (a7)
  {
    sub_1000D55D4(a4, a5, a6 & 1);
    swift_bridgeObjectRetain();
    sub_1000D55D4(a13, a14, a15 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    *(_QWORD *)&result = swift_retain().n128_u64[0];
  }
  return result;
}

uint64_t sub_1006C4448(__n128 *a1)
{
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t);

  v2 = sub_1000BB3A0(a1);
  sub_1000CD13C(v3, v4, v5, v6, v7, v8, v9, v10, v11, v2);
  return v1;
}

double sub_1006C44E8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,char a61)
{
  double result;

  if ((a61 & 1) != 0)
  {
    sub_1000D31B4(a5, a6, a7 & 1);
    swift_release();
    swift_bridgeObjectRelease();
    sub_1000D31B4(a16, a17, a18 & 1);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    sub_1006C4738(a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39);
    sub_1000D31B4(a49, a50, a51 & 1);
  }
  else
  {
    sub_1000D31B4(a1, a2, a3 & 1);
    swift_release();
    swift_bridgeObjectRelease();
    sub_1000D31B4(a10, a11, a12 & 1);
  }
  swift_release();
  swift_release();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

double sub_1006C4738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  double result;

  if (a7)
  {
    sub_1000D31B4(a4, a5, a6 & 1);
    swift_bridgeObjectRelease();
    sub_1000D31B4(a13, a14, a15 & 1);
    swift_release();
    swift_release();
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  }
  return result;
}

uint64_t sub_1006C47C4(uint64_t result)
{
  *(_BYTE *)(result + 473) = 0;
  return result;
}

uint64_t sub_1006C47CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 120);
  v4 = *(_BYTE *)(a1 + 128);
  sub_1000D55D4(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000D55D4(v2, v3, v4);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1006C4868(__n128 *a1)
{
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t);

  v2 = sub_1000BB3A0(a1);
  sub_1000CD13C(v3, v4, v5, v6, v7, v8, v9, v10, v11, v2);
  return v1;
}

uint64_t sub_1006C48B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 120);
  v4 = *(_BYTE *)(a1 + 128);
  sub_1000D31B4(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000D31B4(v2, v3, v4);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

void sub_1006C494C(void *a1)
{
  bzero(a1, 0xA3uLL);
}

unint64_t sub_1006C4958()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFD430;
  if (!qword_100BFD430)
  {
    v1 = sub_100075EB0(&qword_100BD9A80);
    sub_1006C49DC();
    sub_10000F1C8((unint64_t *)&qword_100BC6768, type metadata accessor for AutomationInfoViewModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFD430);
  }
  return result;
}

unint64_t sub_1006C49DC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_100BFD438;
  if (!qword_100BFD438)
  {
    v1 = sub_100075EB0(&qword_100BD9A78);
    v2 = sub_100075EB0(&qword_100BFD3A0);
    sub_10003D2DC(&qword_100BFD3B8, &qword_100BFD3A0);
    v4[0] = v2;
    v4[1] = v3;
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10000F1C8((unint64_t *)&qword_100BC4E48, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFD438);
  }
  return result;
}

void sub_1006C4AA8(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  char *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE v104[32];

  v103 = a3;
  v102 = type metadata accessor for TipPriorityQueue.GridEntry(0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_1000986FC();
  v101 = v5;
  sub_10009D2A4();
  __chkstk_darwin(v6);
  v100 = (uint64_t)&v82 - v7;
  sub_10009D2A4();
  __chkstk_darwin(v8);
  v99 = (uint64_t)&v82 - v9;
  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = v12 - v11;
  type metadata accessor for LocationComponentViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  sub_10009883C();
  v17 = v15 - v16;
  __chkstk_darwin(v18);
  v84 = (uint64_t)&v82 - v19;
  sub_1000BA294(&qword_100BCC760);
  sub_1000B42B0();
  __chkstk_darwin(v20);
  sub_1000986FC();
  v98 = v21;
  sub_10009D2A4();
  __chkstk_darwin(v22);
  v97 = (uint64_t)&v82 - v23;
  sub_10009D2A4();
  __chkstk_darwin(v24);
  __chkstk_darwin(v25);
  v95 = v27;
  v96 = (uint64_t)&v82 - v26;
  if (a1)
  {
    v28 = v13;
    sub_1000B4CB0();
    v38 = v29 + 42;
    v39 = v29 + 43;
    v40 = v29 + 44;
    v41 = v29 + 49;
    v42 = v29 + 50;
    v43 = v29 + 51;
    v44 = v29 + 52;
    v45 = (char *)(v29 + 20);
  }
  else
  {
    sub_1000B4CB0();
    v38 = v29 + 42;
    v39 = v29 + 43;
    v40 = v29 + 44;
    v41 = v29 + 49;
    v42 = v29 + 50;
    v43 = v29 + 51;
    v44 = v29 + 52;
    v45 = (char *)(v29 + 20);
    v28 = v13;
  }
  v46 = *v45;
  v47 = *v29;
  v48 = *v30;
  v86 = *v31;
  v85 = *v32;
  v49 = *v33;
  v50 = *v34;
  v51 = *v35;
  v52 = *v36;
  v53 = *v37;
  v89 = *v38;
  v90 = v53;
  v54 = *v39;
  v87 = *v40;
  v88 = v54;
  v55 = *v41;
  v93 = *v42;
  v94 = v55;
  v56 = *v43;
  v91 = *v44;
  v92 = v56;
  v57 = v103 + OBJC_IVAR____TtCV7Weather18NoAqiSevereContent8_Storage_map;
  sub_1000992EC(v103 + OBJC_IVAR____TtCV7Weather18NoAqiSevereContent8_Storage_map, (uint64_t)v104);
  sub_10003773C(v57, v28, &qword_100BC4A98);
  v58 = sub_1000878BC();
  if (_s7Weather24LocationCompositionStateOwet_0(v28, 1, v58) == 1)
  {
    sub_100021A14(v28, &qword_100BC4A98);
    v59 = 1;
    v60 = v95;
  }
  else
  {
    v83 = v52;
    sub_100095B78(v28 + *(int *)(v58 + 20), v17, type metadata accessor for LocationComponentViewModel);
    sub_1000215BC(v28, type metadata accessor for LocationComponentContainerViewModel);
    v61 = v84;
    sub_10007C77C(v17, v84, type metadata accessor for LocationComponentViewModel);
    if ((v46 & 1) != 0)
    {
      sub_1000215BC(v61, type metadata accessor for LocationComponentViewModel);
      v59 = 1;
      v60 = v95;
    }
    else
    {
      v60 = v95;
      sub_10007C77C(v61, v95, type metadata accessor for LocationComponentViewModel);
      v59 = 0;
      v62 = (_QWORD *)(v60 + *(int *)(v102 + 20));
      *v62 = v49;
      v62[1] = v50;
      v63 = v83;
      v62[2] = v51;
      v62[3] = v63;
    }
  }
  v64 = v102;
  _s7Weather24LocationCompositionStateOwst_0(v60, v59, 1, v102);
  v65 = v96;
  sub_1002228F0(v60, v96);
  v66 = v97;
  _s7Weather24LocationCompositionStateOwst_0(v97, 1, 1, v64);
  v67 = sub_1000CD630(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast);
  v68 = v99;
  sub_100098A1C(v67, v99);
  v69 = (_QWORD *)(v68 + *(int *)(v64 + 20));
  *v69 = v47;
  v69[1] = v48;
  v70 = v85;
  v69[2] = v86;
  v69[3] = v70;
  v71 = v98;
  sub_10003773C(v65, v98, &qword_100BCC760);
  v72 = sub_1000CD630(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex);
  v73 = v100;
  sub_100098A1C(v72, v100);
  v74 = (_QWORD *)(v73 + *(int *)(v64 + 20));
  v75 = v89;
  *v74 = v90;
  v74[1] = v75;
  v76 = v87;
  v74[2] = v88;
  v74[3] = v76;
  v77 = sub_1000CD630(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind);
  v78 = v101;
  sub_100098A1C(v77, v101);
  v79 = (_QWORD *)(v78 + *(int *)(v64 + 20));
  v80 = v93;
  *v79 = v94;
  v79[1] = v80;
  v81 = v91;
  v79[2] = v92;
  v79[3] = v81;
  sub_10087CED0(v66, v68, v71, v73, v78);
  sub_100021A14(v65, &qword_100BCC760);
  sub_100098640();
}

void sub_1006C4F9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 *v20;
  __n128 *v21;
  uint64_t v22;
  uint64_t v23;
  __n128 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 *v39;
  uint64_t v40;
  uint64_t v41;
  __n128 *v42;
  uint64_t v43;
  uint64_t v44;
  __n128 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __n128 *v59;
  __n128 *v60;
  uint64_t v61;
  uint64_t v62;
  __n128 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __n128 *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __n128 *v86;
  uint64_t v87;
  uint64_t v88;
  __n128 *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  _BYTE v99[24];

  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100098728();
  v5 = v4 - v3;
  v6 = sub_1000878BC();
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100098728();
  v10 = v9 - v8;
  v11 = a1 + OBJC_IVAR____TtCV7Weather18NoAqiSevereContent8_Storage_map;
  sub_1000992EC(a1 + OBJC_IVAR____TtCV7Weather18NoAqiSevereContent8_Storage_map, (uint64_t)v99);
  sub_10003773C(v11, v5, &qword_100BC4A98);
  if (_s7Weather24LocationCompositionStateOwet_0(v5, 1, v6) == 1)
  {
    sub_100021A14(v5, &qword_100BC4A98);
    v12 = sub_1000BA294(&qword_100BCC750);
    v13 = swift_allocObject(v12, 224, 7);
    *(_OWORD *)(v13 + 16) = xmmword_10098BCC0;
    v14 = sub_1000BA294(&qword_100BCC758);
    v15 = *(unsigned __int8 *)(v7 + 80);
    v16 = (v15 + 32) & ~v15;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = v15 | 7;
    v19 = v14;
    v20 = (__n128 *)sub_1000BA6B8(v14);
    v21 = sub_100099954(v20, (__n128)xmmword_10097CA50);
    sub_10009F7F4(a1 + OBJC_IVAR____TtCV7Weather18NoAqiSevereContent8_Storage_severeAlert, (uint64_t)v21 + v16);
    *(_QWORD *)(v13 + 32) = sub_1000B4580();
    *(_QWORD *)(v13 + 40) = v22;
    *(_QWORD *)(v13 + 48) = v23;
    v24 = (__n128 *)sub_1000BA6B8(v19);
    sub_10009D458(v24);
    sub_10009F7F4(v25 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, v26);
    *(_QWORD *)(v13 + 56) = sub_1000B4580();
    *(_QWORD *)(v13 + 64) = v27;
    *(_QWORD *)(v13 + 72) = v28;
    v96 = v19;
    v29 = (__n128 *)sub_1000BA6B8(v19);
    sub_10009D458(v29);
    sub_10009F7F4(v30 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v31);
    *(_QWORD *)(v13 + 80) = sub_100080C44((uint64_t)v29);
    *(_QWORD *)(v13 + 88) = v32;
    *(_QWORD *)(v13 + 96) = v33;
    v34 = (__n128 *)swift_allocObject(v19, v16 + 2 * v17, v18);
    v35 = (char *)sub_100099954(v34, (__n128)xmmword_10097DA20) + v16;
    v36 = *(_QWORD *)(a1 + 16);
    sub_10009F7F4(v36 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex, (uint64_t)v35);
    sub_10009F7F4(v36 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, (uint64_t)&v35[v17]);
    *(_QWORD *)(v13 + 104) = sub_1000B4580();
    *(_QWORD *)(v13 + 112) = v37;
    *(_QWORD *)(v13 + 120) = v38;
    v39 = (__n128 *)sub_1000BA6B8(v96);
    sub_1000B46B8(v39);
    sub_100095B78(v17 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind, (uint64_t)v35, type metadata accessor for LocationComponentContainerViewModel);
    sub_100098A1C(v17 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)&v35[v17]);
    *(_QWORD *)(v13 + 128) = sub_1000B4580();
    *(_QWORD *)(v13 + 136) = v40;
    *(_QWORD *)(v13 + 144) = v41;
    v42 = (__n128 *)sub_1000BA6B8(v96);
    sub_1000B46B8(v42);
    sub_100095B78(v17 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike, (uint64_t)v35, type metadata accessor for LocationComponentContainerViewModel);
    sub_100095B78(v17 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)&v35[v17], type metadata accessor for LocationComponentContainerViewModel);
    *(_QWORD *)(v13 + 152) = sub_1000B4580();
    *(_QWORD *)(v13 + 160) = v43;
    *(_QWORD *)(v13 + 168) = v44;
    v45 = (__n128 *)sub_1000BA6B8(v96);
    sub_1000B46B8(v45);
    sub_100098A1C(v17 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility, (uint64_t)v35);
    sub_100098A1C(v17 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, (uint64_t)&v35[v17]);
    *(_QWORD *)(v13 + 176) = sub_1000B4580();
    *(_QWORD *)(v13 + 184) = v46;
    *(_QWORD *)(v13 + 192) = v47;
    v48 = swift_allocObject(v96, v16 + 2 * v17, v18);
    *(_OWORD *)(v48 + 16) = v98;
    v49 = *(_QWORD *)(a1 + 16);
    sub_100098A1C(v49 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, v48 + v16);
    sub_100098A1C(v49 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, v48 + v16 + v17);
    *(_QWORD *)(v13 + 200) = sub_100080C44(v48);
    *(_QWORD *)(v13 + 208) = v50;
    *(_QWORD *)(v13 + 216) = v51;
  }
  else
  {
    sub_10007C77C(v5, v10, type metadata accessor for LocationComponentContainerViewModel);
    v52 = sub_1000BA294(&qword_100BCC750);
    v53 = swift_allocObject(v52, 248, 7);
    *(_OWORD *)(v53 + 16) = xmmword_10098E040;
    v54 = sub_1000BA294(&qword_100BCC758);
    v97 = *(_QWORD *)(v7 + 72);
    v55 = *(unsigned __int8 *)(v7 + 80);
    v56 = (v55 + 32) & ~v55;
    v57 = v55 | 7;
    v58 = v54;
    v59 = (__n128 *)sub_1000BA6AC(v54);
    v60 = sub_100099954(v59, (__n128)xmmword_10097CA50);
    sub_1000B4590(a1 + OBJC_IVAR____TtCV7Weather18NoAqiSevereContent8_Storage_severeAlert, (uint64_t)v60 + v56);
    *(_QWORD *)(v53 + 32) = sub_1000B4588();
    *(_QWORD *)(v53 + 40) = v61;
    *(_QWORD *)(v53 + 48) = v62;
    v63 = (__n128 *)sub_1000BA6AC(v58);
    sub_100098A48(v63);
    sub_1000B4590(v64 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, v65);
    *(_QWORD *)(v53 + 56) = sub_1000B4588();
    *(_QWORD *)(v53 + 64) = v66;
    *(_QWORD *)(v53 + 72) = v67;
    v68 = (__n128 *)sub_1000BA6AC(v58);
    sub_100098A48(v68);
    sub_1000B4590(v69 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v70);
    *(_QWORD *)(v53 + 80) = sub_1000B4588();
    *(_QWORD *)(v53 + 88) = v71;
    *(_QWORD *)(v53 + 96) = v72;
    v73 = sub_1000BA6AC(v58);
    *(_OWORD *)(v73 + 16) = v98;
    sub_1000B4590(v10, v73 + v56);
    *(_QWORD *)(v53 + 104) = sub_1000B4580();
    *(_QWORD *)(v53 + 112) = v74;
    *(_QWORD *)(v53 + 120) = v75;
    v76 = (__n128 *)swift_allocObject(v58, v56 + 2 * v97, v57);
    v77 = (char *)sub_100099954(v76, (__n128)xmmword_10097DA20) + v56;
    v78 = *(_QWORD *)(a1 + 16);
    sub_1000B4590(v78 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex, (uint64_t)v77);
    sub_1000B4590(v78 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, (uint64_t)&v77[v97]);
    *(_QWORD *)(v53 + 128) = sub_1000B4588();
    *(_QWORD *)(v53 + 136) = v79;
    *(_QWORD *)(v53 + 144) = v80;
    v81 = sub_1000BA6AC(v58);
    *(_OWORD *)(v81 + 16) = v98;
    v82 = v81 + v56;
    v83 = *(_QWORD *)(a1 + 16);
    sub_100095B78(v83 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind, v81 + v56, type metadata accessor for LocationComponentContainerViewModel);
    sub_1000D94C0(v83 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, v82 + v97);
    *(_QWORD *)(v53 + 152) = sub_1000B4588();
    *(_QWORD *)(v53 + 160) = v84;
    *(_QWORD *)(v53 + 168) = v85;
    v86 = (__n128 *)sub_1000BA6AC(v58);
    sub_100098AE8(v86);
    sub_10008611C(v83 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike, v82);
    sub_10008611C(v83 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, v82 + v97);
    *(_QWORD *)(v53 + 176) = sub_1000B4588();
    *(_QWORD *)(v53 + 184) = v87;
    *(_QWORD *)(v53 + 192) = v88;
    v89 = (__n128 *)sub_1000BA6AC(v58);
    sub_100098AE8(v89);
    sub_1000D94C0(v83 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility, v82);
    sub_1000D94C0(v83 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, v82 + v97);
    *(_QWORD *)(v53 + 200) = sub_1000B4588();
    *(_QWORD *)(v53 + 208) = v90;
    *(_QWORD *)(v53 + 216) = v91;
    v92 = swift_allocObject(v58, v56 + 2 * v97, v57);
    *(_OWORD *)(v92 + 16) = v98;
    v93 = *(_QWORD *)(a1 + 16);
    sub_1000D94C0(v93 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, v92 + v56);
    sub_1000D94C0(v93 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, v92 + v56 + v97);
    *(_QWORD *)(v53 + 224) = sub_100080C44(v92);
    *(_QWORD *)(v53 + 232) = v94;
    *(_QWORD *)(v53 + 240) = v95;
    sub_1000215BC(v10, type metadata accessor for LocationComponentContainerViewModel);
  }
  sub_100098640();
}

void sub_1006C5688(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = sub_1000878BC();
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_10009883C();
  v8 = v6 - v7;
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - v10;
  type metadata accessor for LocationViewComponent(0);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100098728();
  v15 = v14 - v13;
  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  sub_10009883C();
  v19 = v17 - v18;
  __chkstk_darwin(v20);
  v22 = (char *)&v26 - v21;
  v23 = *(_QWORD *)(a1 + 16);
  swift_retain();
  sub_100520630();
  v27 = v24;
  swift_release(v23);
  sub_100095B78(a1 + OBJC_IVAR____TtCV7Weather32LocationNoAqiSevereConfiguration8_Storage_map, v15, type metadata accessor for LocationViewComponent);
  a2(v15);
  sub_10009D530();
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v22, 0, 1, v4);
  sub_100095B78(a1 + OBJC_IVAR____TtCV7Weather32LocationNoAqiSevereConfiguration8_Storage_severeAlert, v15, type metadata accessor for LocationViewComponent);
  a2(v15);
  sub_10009D530();
  sub_10003773C((uint64_t)v22, v19, &qword_100BC4A98);
  sub_10008611C((uint64_t)v11, v8);
  v25 = type metadata accessor for NoAqiSevereContent._Storage(0);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  sub_1001EC69C(v27, v19, v8);
  sub_1000215BC((uint64_t)v11, type metadata accessor for LocationComponentContainerViewModel);
  sub_100021A14((uint64_t)v22, &qword_100BC4A98);
  sub_100098640();
}

uint64_t sub_1006C5874(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_initClassMetadata2(a1, 0, 2, v4, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1006C58F0()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104)));
  return v0;
}

uint64_t sub_1006C5930()
{
  uint64_t v0;

  sub_1006C58F0();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for SpyDispatcher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SpyDispatcher);
}

ValueMetadata *type metadata accessor for CompactOverviewTableView()
{
  return &type metadata for CompactOverviewTableView;
}

uint64_t sub_1006C5970(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABD7B0, 1);
}

uint64_t sub_1006C5980@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _BYTE v19[24];

  v7 = static VerticalAlignment.top.getter(a4);
  swift_beginAccess(&unk_100C070A0, v19, 1, 0);
  v8 = sub_1007B1BDC();
  *(_QWORD *)a3 = v7;
  *(double *)(a3 + 8) = v8;
  *(_BYTE *)(a3 + 16) = 0;
  sub_1000BA294(&qword_100BFDDC0);
  v18 = a1;
  v9 = swift_allocObject(&unk_100B88FF8, 25, 7);
  *(_QWORD *)(v9 + 16) = a1;
  *(_BYTE *)(v9 + 24) = a2;
  swift_bridgeObjectRetain_n(a1, 2);
  v10 = sub_1000BA294(&qword_100BFA190);
  v11 = sub_1000DBCE8();
  sub_10003D2DC(&qword_100BFA198, &qword_100BFA190);
  v13 = v12;
  sub_10000F1C8(&qword_100BFDDC8, type metadata accessor for CompactOverviewTableColumnView);
  v15 = v14;
  sub_10000F1C8(&qword_100BFA1A8, type metadata accessor for OverviewTableRowViewModel);
  return ForEach<>.init(_:content:)(&v18, sub_1006C5E08, v9, v10, &type metadata for String, v11, v13, v15, v16);
}

void sub_1006C5AE0(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, _QWORD, uint64_t);
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v36 = a2;
  v38 = a4;
  v6 = type metadata accessor for Font.TextStyle(0);
  v37 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BFA1B0);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for OverviewTableRowViewModel(0);
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v15);
  v17 = (char *)&v35 - v16;
  v18 = (int *)type metadata accessor for CompactOverviewTableColumnView(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004D3AD0(a1, (uint64_t)v17);
  sub_1004D3AD0(a1, (uint64_t)v14);
  if ((a3 & 1) != 0)
  {
    sub_1000215BC((uint64_t)v14, type metadata accessor for OverviewTableRowViewModel);
    v21 = 1;
  }
  else
  {
    sub_1002F720C(v36, (uint64_t)v11);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12) == 1)
    {
      sub_100021A14((uint64_t)v11, &qword_100BFA1B0);
      sub_1000215BC((uint64_t)v14, type metadata accessor for OverviewTableRowViewModel);
      v22 = 0;
    }
    else
    {
      v24 = *v11;
      v23 = v11[1];
      swift_bridgeObjectRetain();
      sub_1000215BC((uint64_t)v11, type metadata accessor for OverviewTableRowViewModel);
      if (v24 == *v14 && v23 == v14[1])
        v22 = 1;
      else
        v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v23, *v14);
      sub_1000215BC((uint64_t)v14, type metadata accessor for OverviewTableRowViewModel);
      swift_bridgeObjectRelease();
    }
    v21 = v22 ^ 1;
  }
  sub_1000DB648((uint64_t)v17, (uint64_t)v20, type metadata accessor for OverviewTableRowViewModel);
  v20[v18[5]] = v21 & 1;
  *(_QWORD *)&v20[v18[6]] = 0x4030000000000000;
  v26 = v18[7];
  v27 = v37;
  v28 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v37 + 104);
  v29 = v28(v8, enum case for Font.TextStyle.caption2(_:), v6);
  static Font.Weight.heavy.getter(v29);
  v30 = static Font.system(_:weight:)(v8);
  v31 = *(void (**)(char *, uint64_t))(v27 + 8);
  v31(v8, v6);
  *(_QWORD *)&v20[v26] = v30;
  v32 = v18[8];
  v33 = v28(v8, enum case for Font.TextStyle.body(_:), v6);
  static Font.Weight.heavy.getter(v33);
  v34 = static Font.system(_:weight:)(v8);
  v31(v8, v6);
  *(_QWORD *)&v20[v32] = v34;
  sub_1000DB648((uint64_t)v20, v38, type metadata accessor for CompactOverviewTableColumnView);
}

uint64_t sub_1006C5DD8@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;

  return sub_1006C5980(*(_QWORD *)v2, *(_BYTE *)(v2 + 8), a1, a2);
}

uint64_t sub_1006C5DE4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

void sub_1006C5E08(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_1006C5AE0(a1, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24), a2);
}

uint64_t type metadata accessor for CompactOverviewTableColumnView(uint64_t a1)
{
  uint64_t result;

  result = qword_100BFDE28;
  if (!qword_100BFDE28)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CompactOverviewTableColumnView);
  return result;
}

_QWORD *sub_1006C5E4C(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t EnumCaseMultiPayload;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = type metadata accessor for OverviewTableRowViewModel(0);
    v10 = *(int *)(v9 + 24);
    v11 = (_QWORD *)((char *)v4 + v10);
    v12 = (_QWORD *)((char *)a2 + v10);
    v13 = type metadata accessor for OverviewTableValueString(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v13))
    {
      v14 = sub_1000BA294(&qword_100BE7B38);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12);
      v17 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2 || (_DWORD)EnumCaseMultiPayload == 1)
      {
        v18 = *v12;
        v19 = v12[1];
        v20 = *((_BYTE *)v12 + 16);
        sub_100121DEC(v18, v19, v20);
        *v11 = v18;
        v11[1] = v19;
        *((_BYTE *)v11 + 16) = v20;
      }
      else
      {
        v21 = type metadata accessor for AttributedString(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v11, v12, v21);
        v22 = *(int *)(sub_1000BA294(&qword_100BF17E0) + 48);
        v23 = (uint64_t *)((char *)v11 + v22);
        v24 = (uint64_t *)((char *)v12 + v22);
        v25 = v24[1];
        *v23 = *v24;
        v23[1] = v25;
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload(v11, v13, v17);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v13);
    }
    *((_BYTE *)v4 + *(int *)(v9 + 28)) = *((_BYTE *)a2 + *(int *)(v9 + 28));
    v26 = a3[6];
    *((_BYTE *)v4 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *(_QWORD *)((char *)v4 + v26) = *(_QWORD *)((char *)a2 + v26);
    v27 = a3[8];
    *(_QWORD *)((char *)v4 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
    *(_QWORD *)((char *)v4 + v27) = *(_QWORD *)((char *)a2 + v27);
    swift_retain();
  }
  swift_retain();
  return v4;
}

double sub_1006C6024(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int EnumCaseMultiPayload;
  uint64_t v5;
  double result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = a1 + *(int *)(type metadata accessor for OverviewTableRowViewModel(0) + 24);
  v3 = type metadata accessor for OverviewTableValueString(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v2, 1, v3))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v2);
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      sub_100121E04(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_BYTE *)(v2 + 16));
    }
    else if (!EnumCaseMultiPayload)
    {
      v5 = type metadata accessor for AttributedString(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v2, v5);
      sub_1000BA294(&qword_100BF17E0);
      swift_bridgeObjectRelease();
    }
  }
  swift_release();
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

_QWORD *sub_1006C6108(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t EnumCaseMultiPayload;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = type metadata accessor for OverviewTableRowViewModel(0);
  v9 = *(int *)(v8 + 24);
  v10 = (_QWORD *)((char *)a1 + v9);
  v11 = (_QWORD *)((char *)a2 + v9);
  v12 = type metadata accessor for OverviewTableValueString(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12))
  {
    v13 = sub_1000BA294(&qword_100BE7B38);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11);
    v15 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2 || (_DWORD)EnumCaseMultiPayload == 1)
    {
      v16 = *v11;
      v17 = v11[1];
      v18 = *((_BYTE *)v11 + 16);
      sub_100121DEC(v16, v17, v18);
      *v10 = v16;
      v10[1] = v17;
      *((_BYTE *)v10 + 16) = v18;
    }
    else
    {
      v19 = type metadata accessor for AttributedString(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v10, v11, v19);
      v20 = *(int *)(sub_1000BA294(&qword_100BF17E0) + 48);
      v21 = (uint64_t *)((char *)v10 + v20);
      v22 = (uint64_t *)((char *)v11 + v20);
      v23 = v22[1];
      *v21 = *v22;
      v21[1] = v23;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload(v10, v12, v15);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
  }
  *((_BYTE *)a1 + *(int *)(v8 + 28)) = *((_BYTE *)a2 + *(int *)(v8 + 28));
  v24 = a3[6];
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  *(_QWORD *)((char *)a1 + v24) = *(_QWORD *)((char *)a2 + v24);
  v25 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v25) = *(_QWORD *)((char *)a2 + v25);
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *sub_1006C62B8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t EnumCaseMultiPayload;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = type metadata accessor for OverviewTableRowViewModel(0);
  v7 = *(int *)(v6 + 24);
  v8 = (uint64_t)a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for OverviewTableValueString(0);
  v11 = _s7Weather24LocationCompositionStateOwet_0(v8, 1, v10);
  v12 = _s7Weather24LocationCompositionStateOwet_0(v9, 1, v10);
  if (v11)
  {
    if (!v12)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9);
      v14 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2 || (_DWORD)EnumCaseMultiPayload == 1)
      {
        v15 = *(_QWORD *)v9;
        v16 = *(_QWORD *)(v9 + 8);
        v17 = *(_BYTE *)(v9 + 16);
        sub_100121DEC(v15, v16, v17);
        *(_QWORD *)v8 = v15;
        *(_QWORD *)(v8 + 8) = v16;
        *(_BYTE *)(v8 + 16) = v17;
      }
      else
      {
        v26 = type metadata accessor for AttributedString(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v8, v9, v26);
        v27 = *(int *)(sub_1000BA294(&qword_100BF17E0) + 48);
        v28 = (_QWORD *)(v8 + v27);
        v29 = (_QWORD *)(v9 + v27);
        *v28 = *v29;
        v28[1] = v29[1];
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload(v8, v10, v14);
      _s7Weather24LocationCompositionStateOwst_0(v8, 0, 1, v10);
      goto LABEL_18;
    }
LABEL_8:
    v18 = sub_1000BA294(&qword_100BE7B38);
    memcpy((void *)v8, (const void *)v9, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_18;
  }
  if (v12)
  {
    sub_1000215BC(v8, type metadata accessor for OverviewTableValueString);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    sub_1000215BC(v8, type metadata accessor for OverviewTableValueString);
    v19 = swift_getEnumCaseMultiPayload(v9);
    if (v19 == 2)
    {
      v30 = *(_QWORD *)v9;
      v31 = *(_QWORD *)(v9 + 8);
      v32 = *(_BYTE *)(v9 + 16);
      sub_100121DEC(v30, v31, v32);
      *(_QWORD *)v8 = v30;
      *(_QWORD *)(v8 + 8) = v31;
      *(_BYTE *)(v8 + 16) = v32;
      v23 = v8;
      v24 = v10;
      v25 = 2;
    }
    else if (v19 == 1)
    {
      v20 = *(_QWORD *)v9;
      v21 = *(_QWORD *)(v9 + 8);
      v22 = *(_BYTE *)(v9 + 16);
      sub_100121DEC(v20, v21, v22);
      *(_QWORD *)v8 = v20;
      *(_QWORD *)(v8 + 8) = v21;
      *(_BYTE *)(v8 + 16) = v22;
      v23 = v8;
      v24 = v10;
      v25 = 1;
    }
    else
    {
      v33 = type metadata accessor for AttributedString(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v8, v9, v33);
      v34 = *(int *)(sub_1000BA294(&qword_100BF17E0) + 48);
      v35 = (_QWORD *)(v8 + v34);
      v36 = (_QWORD *)(v9 + v34);
      *v35 = *v36;
      v35[1] = v36[1];
      swift_bridgeObjectRetain();
      v23 = v8;
      v24 = v10;
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v23, v24, v25);
  }
LABEL_18:
  *((_BYTE *)a1 + *(int *)(v6 + 28)) = *((_BYTE *)a2 + *(int *)(v6 + 28));
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_retain();
  swift_release();
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_1006C65CC(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = type metadata accessor for OverviewTableRowViewModel(0);
  v8 = *(int *)(v7 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for OverviewTableValueString(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v11))
  {
    v12 = sub_1000BA294(&qword_100BE7B38);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(v10))
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      v13 = type metadata accessor for AttributedString(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v9, v10, v13);
      v14 = sub_1000BA294(&qword_100BF17E0);
      *(_OWORD *)&v9[*(int *)(v14 + 48)] = *(_OWORD *)&v10[*(int *)(v14 + 48)];
      swift_storeEnumTagMultiPayload(v9, v11, 0);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v11);
  }
  *((_BYTE *)a1 + *(int *)(v7 + 28)) = *((_BYTE *)a2 + *(int *)(v7 + 28));
  v15 = a3[6];
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  *(_QWORD *)((char *)a1 + v15) = *(_QWORD *)((char *)a2 + v15);
  v16 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v16) = *(_QWORD *)((char *)a2 + v16);
  return a1;
}

_QWORD *sub_1006C6728(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = type metadata accessor for OverviewTableRowViewModel(0);
  v9 = *(int *)(v8 + 24);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for OverviewTableValueString(0);
  v13 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v12);
  v14 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12);
  if (!v13)
  {
    if (!v14)
    {
      if (a1 == a2)
        goto LABEL_14;
      sub_1000215BC((uint64_t)v10, type metadata accessor for OverviewTableValueString);
      if (!swift_getEnumCaseMultiPayload(v11))
      {
        v20 = type metadata accessor for AttributedString(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v10, v11, v20);
        v21 = sub_1000BA294(&qword_100BF17E0);
        *(_OWORD *)&v10[*(int *)(v21 + 48)] = *(_OWORD *)&v11[*(int *)(v21 + 48)];
        swift_storeEnumTagMultiPayload(v10, v12, 0);
        goto LABEL_14;
      }
      v15 = *(_QWORD *)(v12 - 8);
      goto LABEL_8;
    }
    sub_1000215BC((uint64_t)v10, type metadata accessor for OverviewTableValueString);
LABEL_7:
    v15 = *(_QWORD *)(sub_1000BA294(&qword_100BE7B38) - 8);
LABEL_8:
    memcpy(v10, v11, *(_QWORD *)(v15 + 64));
    goto LABEL_14;
  }
  if (v14)
    goto LABEL_7;
  if (swift_getEnumCaseMultiPayload(v11))
  {
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v16 = type metadata accessor for AttributedString(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v10, v11, v16);
    v17 = sub_1000BA294(&qword_100BF17E0);
    *(_OWORD *)&v10[*(int *)(v17 + 48)] = *(_OWORD *)&v11[*(int *)(v17 + 48)];
    swift_storeEnumTagMultiPayload(v10, v12, 0);
  }
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
LABEL_14:
  *((_BYTE *)a1 + *(int *)(v8 + 28)) = *((_BYTE *)a2 + *(int *)(v8 + 28));
  v18 = a3[6];
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_release();
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_release();
  return a1;
}

uint64_t sub_1006C6958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006C6964);
}

uint64_t sub_1006C6964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;

  v6 = sub_1000CD14C();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return _s7Weather24LocationCompositionStateOwet_0(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

uint64_t sub_1006C69D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006C69E4);
}

uint64_t sub_1006C69E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = sub_1000CD14C();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return _s7Weather24LocationCompositionStateOwst_0(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

uint64_t sub_1006C6A54(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for OverviewTableRowViewModel(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1009BEF70;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_1006C6AE4()
{
  sub_10003D2DC(&qword_100BFDE70, &qword_100BFDE78);
}

uint64_t sub_1006C6B10(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABD7D8, 1);
}

void sub_1006C6B20(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  char v59;
  uint64_t v60;
  uint64_t OpaqueTypeConformance2;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD v97[2];
  __int128 v98;
  char v99;
  _BYTE v100[24];
  uint64_t v101;
  __int128 v102;
  char v103;
  uint64_t v104;

  v96 = a1;
  sub_1000BA294(&qword_100BE7B38);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100088FDC();
  v93 = v3;
  v84 = type metadata accessor for AccessibilityChildBehavior(0);
  v83 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  sub_100088FDC();
  v82 = v4;
  v87 = sub_1000BA294(&qword_100BFDE80);
  v86 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  sub_100088FDC();
  v85 = v5;
  v92 = sub_1000BA294(&qword_100BFDE88);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_1000986FC();
  v95 = v7;
  __chkstk_darwin(v8);
  sub_1000BA30C();
  __chkstk_darwin(v9);
  sub_1000BA30C();
  __chkstk_darwin(v10);
  sub_1000BA30C();
  __chkstk_darwin(v11);
  v94 = (uint64_t)&v81 - v12;
  v13 = type metadata accessor for Divider(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000BA294(&qword_100BC5DD8);
  sub_1000B42B0();
  __chkstk_darwin(v18);
  v20 = (char *)&v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)&v81 - v22;
  sub_1000BA294(&qword_100BC5E00);
  sub_1000B42B0();
  __chkstk_darwin(v24);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v25);
  v27 = (char *)&v81 - v26;
  v28 = sub_1000DBCE8();
  v29 = 1;
  if (*(_BYTE *)(v1 + *(int *)(v28 + 20)) == 1)
  {
    v30 = v28;
    v31 = Divider.init()(v28);
    v32 = static Edge.Set.horizontal.getter(v31);
    v33 = sub_1000CD14C();
    v34 = 0.0;
    if (*(_BYTE *)(v1 + *(int *)(v33 + 28)) == 1)
      v34 = *(double *)(v1 + *(int *)(v30 + 24));
    v35 = EdgeInsets.init(_all:)(v34);
    v37 = v36;
    v39 = v38;
    v41 = v40;
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v20, v16, v13);
    v42 = &v20[*(int *)(v17 + 36)];
    *v42 = v32;
    *((double *)v42 + 1) = v35;
    *((_QWORD *)v42 + 2) = v37;
    *((_QWORD *)v42 + 3) = v39;
    *((_QWORD *)v42 + 4) = v41;
    v42[40] = 0;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    sub_1001A7244((uint64_t)v20, (uint64_t)v23, &qword_100BC5DD8);
    sub_1001A7244((uint64_t)v23, (uint64_t)v27, &qword_100BC5DD8);
    v29 = 0;
  }
  v81 = v27;
  v43 = _s7Weather24LocationCompositionStateOwst_0((uint64_t)v27, v29, 1, v17);
  v44 = static HorizontalAlignment.center.getter(v43);
  v45 = v1;
  sub_1006C7190(v1, (uint64_t)&v98);
  v46 = v99;
  v47 = *(_QWORD *)v100;
  v48 = v101;
  v49 = v102;
  v50 = v98;
  v51 = *(_OWORD *)&v100[8];
  v98 = (unint64_t)v44;
  v99 = 1;
  *(_OWORD *)v100 = v50;
  v100[16] = v46;
  v101 = v47;
  v102 = v51;
  v103 = v48;
  v104 = v49;
  v52 = v82;
  static AccessibilityChildBehavior.ignore.getter(v53);
  v54 = sub_1000BA294(&qword_100BCB230);
  sub_10003D2DC(&qword_100BCB228, &qword_100BCB230);
  v56 = v55;
  v57 = v85;
  View.accessibilityElement(children:)(v52, v54, v55);
  (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v52, v84);
  v58 = v102;
  v59 = v103;
  sub_1000D31B4(*(uint64_t *)v100, *(uint64_t *)&v100[8], v100[16]);
  swift_bridgeObjectRelease();
  sub_1000D31B4(v58, *((uint64_t *)&v58 + 1), v59);
  swift_bridgeObjectRelease();
  v60 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)&v98 = *(_QWORD *)(v1 + 16);
  *((_QWORD *)&v98 + 1) = v60;
  v97[0] = v54;
  v97[1] = v56;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v97, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v62 = sub_100114EF8();
  v63 = v89;
  v64 = v87;
  View.accessibilityLabel<A>(_:)(&v98, v87, &type metadata for String, OpaqueTypeConformance2, v62);
  (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v57, v64);
  v65 = sub_1000CD14C();
  v66 = v93;
  sub_1001A7210(v45 + *(int *)(v65 + 24), v93, &qword_100BE7B38);
  v67 = type metadata accessor for OverviewTableValueString(0);
  v68 = _s7Weather24LocationCompositionStateOwet_0(v66, 1, v67);
  v69 = (uint64_t)v81;
  if (v68 == 1)
  {
    sub_100021A14(v66, &qword_100BE7B38);
    v70 = 0;
    v71 = 0xE000000000000000;
  }
  else
  {
    v70 = sub_100953558();
    v71 = v72;
    sub_1000215BC(v66, type metadata accessor for OverviewTableValueString);
  }
  *(_QWORD *)&v98 = v70;
  *((_QWORD *)&v98 + 1) = v71;
  v73 = v91;
  v74 = v92;
  ModifiedContent<>.accessibilityValue<A>(_:)(&v98, v92, &type metadata for String, v62);
  swift_bridgeObjectRelease();
  sub_100075DD0(v63);
  v75 = v90;
  ModifiedContent<>.accessibilityRespondsToUserInteraction(_:)(0, v74);
  sub_100075DD0(v73);
  v76 = v94;
  sub_1001A7244(v75, v94, &qword_100BFDE88);
  v77 = v88;
  sub_1001A7210(v69, v88, &qword_100BC5E00);
  v78 = v95;
  sub_1001A7210(v76, v95, &qword_100BFDE88);
  v79 = v96;
  sub_1001A7210(v77, v96, &qword_100BC5E00);
  v80 = sub_1000BA294(&qword_100BFDE90);
  sub_1001A7210(v78, v79 + *(int *)(v80 + 48), &qword_100BFDE88);
  sub_100075DD0(v76);
  sub_100021A14(v69, &qword_100BC5E00);
  sub_100075DD0(v78);
  sub_100021A14(v77, &qword_100BC5E00);
}

double sub_1006C7190@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  double result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = sub_1006C72C4();
  v25 = v5;
  v26 = v4;
  v27 = v6;
  v8 = v7 & 1;
  v9 = sub_10056D7E0();
  v11 = v10;
  v13 = v12;
  v15 = v14 & 1;
  v16 = type metadata accessor for CompactOverviewTableColumnView(0);
  v17 = Text.font(_:)(*(_QWORD *)(a1 + *(int *)(v16 + 32)), v9, v11, v15, v13);
  v19 = v18;
  v21 = v20;
  v23 = v22 & 1;
  sub_1000D31B4(v9, v11, v15);
  swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v26;
  *(_QWORD *)(a2 + 8) = v25;
  *(_BYTE *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v27;
  *(_QWORD *)(a2 + 32) = v17;
  *(_QWORD *)(a2 + 40) = v19;
  *(_BYTE *)(a2 + 48) = v23;
  *(_QWORD *)(a2 + 56) = v21;
  sub_1000D55D4(v26, v25, v8);
  swift_bridgeObjectRetain();
  sub_1000D55D4(v17, v19, v23);
  swift_bridgeObjectRetain();
  sub_1000D31B4(v17, v19, v23);
  swift_bridgeObjectRelease();
  sub_1000D31B4(v26, v25, v8);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_1006C72C4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v21;

  v21 = String.uppercasedWithPreferredLocale()();
  v1 = sub_100114EF8();
  v2 = Text.init<A>(_:)(&v21, &type metadata for String, v1);
  v4 = v3;
  v6 = v5;
  v8 = v7 & 1;
  v9 = sub_1000DBCE8();
  v10 = Text.font(_:)(*(_QWORD *)(v0 + *(int *)(v9 + 28)), v2, v4, v8, v6);
  v12 = v11;
  v14 = v13;
  v16 = v15 & 1;
  sub_1000D31B4(v2, v4, v8);
  v17 = swift_bridgeObjectRelease();
  v18 = static Color.secondary.getter(v17);
  v19 = Text.foregroundColor(_:)(v18, v10, v12, v16, v14);
  swift_release();
  sub_1000D31B4(v10, v12, v16);
  swift_bridgeObjectRelease();
  return v19;
}

void sub_1006C73E0()
{
  sub_10003D2DC(&qword_100BFDE98, &qword_100BFDEA0);
}

uint64_t sub_1006C740C(char *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, uint64_t);
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t);
  int *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;

  v137 = a2;
  sub_1000BA294(&qword_100BC68A0);
  sub_10009D98C();
  __chkstk_darwin(v4);
  sub_100088FDC();
  v142 = v5;
  v6 = sub_10009876C();
  type metadata accessor for MonthlyAveragesChartModel(v6);
  sub_10009D98C();
  __chkstk_darwin(v7);
  sub_100088FDC();
  v141 = v8;
  v9 = sub_10009876C();
  v136 = type metadata accessor for LocationDetailsKind(v9);
  v134 = *(_QWORD *)(v136 - 8);
  sub_10009D98C();
  __chkstk_darwin(v10);
  sub_100088FDC();
  v135 = v11;
  v12 = sub_10009876C();
  v13 = type metadata accessor for LocationDetailEntity(v12);
  v139 = *(_QWORD *)(v13 - 8);
  v140 = v13;
  sub_10009D98C();
  __chkstk_darwin(v14);
  sub_1000986FC();
  v138 = v15;
  sub_10009D2A4();
  __chkstk_darwin(v16);
  sub_100079F7C();
  v152 = v17;
  v18 = sub_10009876C();
  v19 = type metadata accessor for LocationEntity(v18);
  v150 = *(_QWORD *)(v19 - 8);
  v151 = v19;
  sub_10009D98C();
  __chkstk_darwin(v20);
  sub_1000986FC();
  v133 = v21;
  sub_10009D2A4();
  __chkstk_darwin(v22);
  sub_100079F7C();
  v149 = v23;
  v24 = sub_10009876C();
  v25 = type metadata accessor for Calendar.Identifier(v24);
  sub_1000B43A4(v25, (uint64_t)&v154);
  v126 = v26;
  sub_10009D98C();
  __chkstk_darwin(v27);
  sub_1000986FC();
  v125 = v28;
  sub_10009D2A4();
  __chkstk_darwin(v29);
  sub_100079F7C();
  v123 = v30;
  v31 = sub_10009876C();
  v32 = type metadata accessor for TimeZone(v31);
  sub_1000B43A4(v32, (uint64_t)&v155);
  v128 = v33;
  sub_10009D98C();
  __chkstk_darwin(v34);
  sub_100088FDC();
  v122 = v35;
  v36 = sub_10009876C();
  v37 = type metadata accessor for Date(v36);
  sub_1000B43A4(v37, (uint64_t)&v153);
  v121 = v38;
  sub_10009D98C();
  __chkstk_darwin(v39);
  sub_100088FDC();
  v116 = v40;
  v41 = sub_1000BA294(&qword_100BCB108);
  sub_1000B43A4(v41, (uint64_t)&v150);
  v119 = v42;
  sub_10009D98C();
  __chkstk_darwin(v43);
  sub_100088FDC();
  v117 = v44;
  v45 = sub_10009876C();
  v46 = type metadata accessor for ConditionDetailPlatterViewModel(v45);
  sub_1000B43A4(v46, (uint64_t)&v146);
  sub_10009D98C();
  __chkstk_darwin(v47);
  sub_1000986FC();
  v132 = v48;
  sub_10009D2A4();
  __chkstk_darwin(v49);
  sub_100079F7C();
  v120 = v50;
  v51 = sub_10009876C();
  v52 = type metadata accessor for ArticlePlacementLocation(v51);
  v53 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v55 = (char *)&v114 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BA294(&qword_100BDAC90);
  sub_10009D98C();
  __chkstk_darwin(v56);
  sub_1000986FC();
  v130 = v57;
  sub_10009D2A4();
  __chkstk_darwin(v58);
  v60 = (char *)&v114 - v59;
  sub_1000BA294(&qword_100BC68B8);
  sub_10009D98C();
  __chkstk_darwin(v61);
  sub_1000986FC();
  v131 = v62;
  sub_10009D2A4();
  __chkstk_darwin(v63);
  v144 = (uint64_t)&v114 - v64;
  sub_10009D2A4();
  __chkstk_darwin(v65);
  v146 = (uint64_t)&v114 - v66;
  sub_10009D2A4();
  __chkstk_darwin(v67);
  v69 = (char *)&v114 - v68;
  type metadata accessor for PrecipitationAveragesHeroChartViewModel(0);
  sub_10009D98C();
  __chkstk_darwin(v70);
  sub_1000986FC();
  v143 = v71;
  sub_10009D2A4();
  __chkstk_darwin(v72);
  v74 = (char *)&v114 - v73;
  sub_1000DB418(v2 + 5, v2[8]);
  sub_1001FD9DC(a1, (uint64_t)v74);
  v145 = v74;
  v75 = *((_QWORD *)v74 + 8);
  v76 = *((_QWORD *)v74 + 9);
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRetain(v76);
  v147 = v69;
  v77 = (uint64_t)v69;
  v78 = v2;
  sub_1006C7C14((uint64_t)a1, v75, v76, v77);
  swift_bridgeObjectRelease(v75);
  swift_bridgeObjectRelease(v76);
  sub_1000DB418(v78 + 20, v78[23]);
  v115 = type metadata accessor for PrecipitationAveragesDetailInput(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v53 + 104))(v55, enum case for ArticlePlacementLocation.precipitationAveragesDetail(_:), v52);
  v148 = v60;
  v79 = v60;
  v80 = v116;
  sub_100500070((uint64_t)v55, v79);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v55, v52);
  v81 = type metadata accessor for PrecipitationAveragesHeroChartInput(0);
  v82 = v117;
  WeatherStatisticsModel.dailyPrecipitationStatistics.getter(v81);
  v83 = v118;
  DailyWeatherStatistics.baselineStartDate.getter(v118);
  v84 = v82;
  v85 = v121;
  v86 = (*(uint64_t (**)(uint64_t, uint64_t))(v119 + 8))(v84, v83);
  v87 = v122;
  v88 = Calendar.timeZone.getter(v86);
  v89 = v123;
  Calendar.identifier.getter(v88);
  v90 = v126;
  v91 = v125;
  v92 = v127;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v126 + 104))(v125, enum case for Calendar.Identifier.gregorian(_:), v127);
  v93 = v91;
  LOBYTE(v91) = static Calendar.Identifier.== infix(_:_:)(v89, v91);
  v94 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
  v94(v93, v92);
  v94(v89, v92);
  v95 = a1;
  v96 = v124;
  v97 = v120;
  sub_1006C8C2C(v80, (v91 & 1) == 0, v120);
  (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v87, v129);
  v98 = v85;
  v99 = *(void (**)(uint64_t, uint64_t))(v85 + 8);
  v100 = (int *)v115;
  v99(v80, v96);
  v101 = *(_QWORD *)&v95[v100[6]];
  if (v101)
  {
    sub_1000DB418(v78, v78[3]);
    sub_1007C7128(v101, v146);
  }
  else
  {
    _s7Weather24LocationCompositionStateOwst_0(v146, 1, 1, v114);
  }
  v102 = v149;
  static LocationEntity.makeFromLocation(_:name:)(v137, 0, 0);
  v103 = v133;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v150 + 16))(v133, v102, v151);
  (*(void (**)(uint64_t, char *, uint64_t))(v98 + 16))(v80, &v95[v100[9]], v96);
  v104 = v135;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v134 + 104))(v135, enum case for LocationDetailsKind.averages(_:), v136);
  LocationDetailEntity.init(location:date:kind:)(v103, v80, v104);
  sub_10000AB54((uint64_t)v145, v143, type metadata accessor for PrecipitationAveragesHeroChartViewModel);
  sub_10003773C((uint64_t)v147, v144, &qword_100BC68B8);
  sub_1000DB418(v78 + 15, v78[18]);
  sub_1008A7914((uint64_t)&v95[v100[5]], v141);
  v105 = v130;
  sub_10003773C((uint64_t)v148, v130, &qword_100BDAC90);
  sub_10035D148(v105, v142);
  v106 = v97;
  sub_10000AB54(v97, v132, type metadata accessor for ConditionDetailPlatterViewModel);
  v107 = v146;
  sub_10003773C(v146, v131, &qword_100BC68B8);
  v108 = v139;
  v109 = v152;
  v110 = v140;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v139 + 16))(v138, v152, v140);
  sub_1001EE09C();
  v112 = v111;
  (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v109, v110);
  (*(void (**)(uint64_t, uint64_t))(v150 + 8))(v149, v151);
  sub_100021A14(v107, &qword_100BC68B8);
  sub_1000215BC(v106, type metadata accessor for ConditionDetailPlatterViewModel);
  sub_100021A14((uint64_t)v148, &qword_100BDAC90);
  sub_100021A14((uint64_t)v147, &qword_100BC68B8);
  sub_1000215BC((uint64_t)v145, type metadata accessor for PrecipitationAveragesHeroChartViewModel);
  return v112;
}

uint64_t sub_1006C7C14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void (*v46)(void);
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(char *, unint64_t, uint64_t, __n128);
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  os_log_type_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __n128 v78;
  void (*v79)(char *, char *, uint64_t, __n128);
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  __n128 v84;
  char *v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  uint64_t v92;
  os_log_type_t v93;
  _BOOL4 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  os_log_type_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  void (*v104)(char *, uint64_t);
  uint64_t v105;
  uint64_t v106;
  __n128 v107;
  char *v108;
  void (*v109)(char *, char *, uint64_t);
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t, uint64_t);
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  NSObject *v121;
  uint64_t v122;
  os_log_type_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  void (*v131)(char *, uint64_t);
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  unint64_t v147;
  id v148;
  char *v149;
  uint64_t v150;
  id v151;
  char *v152;
  char *v153;
  id v154;
  Swift::String v155;
  Swift::String v156;
  Swift::String v157;
  void (*v158)(char *, uint64_t);
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void (*v162)(char *, uint64_t);
  int *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void (*v194)(char *, char *, uint64_t);
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t countAndFlagsBits;
  void (*v201)(char *, uint64_t);
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  Swift::String v207;

  v192 = a3;
  v199 = a2;
  countAndFlagsBits = a1;
  v198 = a4;
  v4 = type metadata accessor for PrecipitationAveragesDetailInput(0);
  v5 = __chkstk_darwin(v4);
  v194 = (void (*)(char *, char *, uint64_t))((char *)&v168 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __chkstk_darwin(v5);
  v188 = (uint64_t)&v168 - v8;
  __chkstk_darwin(v7);
  v185 = (char *)&v168 - v9;
  v180 = type metadata accessor for WeatherDescription(0);
  v179 = *(_QWORD *)(v180 - 8);
  __chkstk_darwin(v180);
  v178 = (char *)&v168 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_1000BA294(&qword_100BCB0A8);
  v176 = *(_QWORD *)(v177 - 8);
  v11 = __chkstk_darwin(v177);
  v174 = (char *)&v168 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v172 = (char *)&v168 - v13;
  v175 = type metadata accessor for TimeZone(0);
  v173 = *(_QWORD *)(v175 - 8);
  __chkstk_darwin(v175);
  v171 = (char *)&v168 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000BA294(&qword_100BCB0A0);
  __chkstk_darwin(v15);
  v183 = (uint64_t)&v168 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v17);
  v184 = (uint64_t)&v168 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = type metadata accessor for DetailChartDataElement(0);
  v193 = *(_QWORD *)(v196 - 8);
  v19 = __chkstk_darwin(v196);
  v187 = (char *)&v168 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v182 = (char *)&v168 - v22;
  v23 = __chkstk_darwin(v21);
  v186 = (char *)&v168 - v24;
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v168 - v26;
  v28 = __chkstk_darwin(v25);
  v190 = (char *)&v168 - v29;
  __chkstk_darwin(v28);
  v31 = (char *)&v168 - v30;
  v32 = type metadata accessor for Date(0);
  v33 = *(void (**)(char *, uint64_t))(v32 - 8);
  v34 = __chkstk_darwin(v32);
  v181 = (char *)&v168 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __chkstk_darwin(v34);
  v38 = (char *)&v168 - v37;
  __chkstk_darwin(v36);
  v40 = (char *)&v168 - v39;
  v41 = type metadata accessor for Calendar(0);
  v42 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v44 = (char *)&v168 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = countAndFlagsBits;
  v46 = *(void (**)(void))(v42 + 16);
  v203 = v44;
  v46();
  v191 = v4;
  v47 = v45 + *(int *)(v4 + 36);
  v201 = v33;
  v202 = v40;
  v48 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v33 + 2);
  v204 = v32;
  v49 = v32;
  v50 = v199;
  v48(v40, v47, v49);
  v51 = v198;
  v52 = *(_QWORD *)(v50 + 16);
  v197 = v41;
  v195 = v42;
  if (v52)
  {
    v189 = v31;
    v53 = v193;
    v169 = (*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
    v54 = v50 + v169;
    v55 = *(_QWORD *)(v193 + 72);
    v56 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v193 + 16);
    v57 = swift_bridgeObjectRetain(v50);
    v58 = v196;
    while (1)
    {
      v59 = v56(v27, v54, v58, v57);
      DetailChartDataElement.date.getter(v59);
      v60 = Calendar.isDate(_:inSameDayAs:)(v38, v202);
      v61 = (void (*)(char *, uint64_t))*((_QWORD *)v201 + 1);
      v61(v38, v204);
      if ((v60 & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v27, v58);
      v54 += v55;
      if (!--v52)
      {
        swift_bridgeObjectRelease(v199);
        v51 = v198;
        v42 = v195;
        goto LABEL_6;
      }
    }
    v78 = swift_bridgeObjectRelease(v199);
    v79 = *(void (**)(char *, char *, uint64_t, __n128))(v53 + 32);
    v80 = v190;
    v79(v190, v27, v58, v78);
    v194 = (void (*)(char *, char *, uint64_t))v79;
    ((void (*)(char *, char *, uint64_t))v79)(v189, v80, v58);
    v81 = *(_QWORD *)(v192 + 16);
    if (v81)
    {
      v82 = v58;
      v83 = v192 + v169;
      v84 = swift_bridgeObjectRetain(v192);
      v85 = v187;
      while (1)
      {
        v86 = v56(v85, v83, v82, v84);
        DetailChartDataElement.date.getter(v86);
        v87 = Calendar.isDate(_:inSameDayAs:)(v38, v202);
        v61(v38, v204);
        if ((v87 & 1) != 0)
          break;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v85, v82);
        v83 += v55;
        if (!--v81)
        {
          swift_bridgeObjectRelease(v192);
          goto LABEL_17;
        }
      }
      v107 = swift_bridgeObjectRelease(v192);
      v108 = v182;
      v109 = v194;
      ((void (*)(char *, char *, uint64_t, __n128))v194)(v182, v85, v82, v107);
      v110 = v186;
      v109(v186, v108, v82);
      v111 = v183;
      sub_1002F6F6C(v199, v183);
      v112 = _s7Weather24LocationCompositionStateOwet_0(v111, 1, v82);
      if ((_DWORD)v112 == 1)
      {
        sub_100021A14(v111, &qword_100BCB0A0);
        v113 = v184;
        _s7Weather24LocationCompositionStateOwst_0(v184, 1, 1, v204);
        v114 = v197;
        v115 = (uint64_t)v185;
      }
      else
      {
        v113 = v184;
        DetailChartDataElement.date.getter(v112);
        v116 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
        v116(v111, v196);
        v117 = v204;
        _s7Weather24LocationCompositionStateOwst_0(v113, 0, 1, v204);
        v118 = _s7Weather24LocationCompositionStateOwet_0(v113, 1, v117);
        v114 = v197;
        v115 = (uint64_t)v185;
        if (v118 != 1)
        {
          v137 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v201 + 4))(v181, v113, v204);
          v138 = v171;
          v201 = (void (*)(char *, uint64_t))v116;
          Calendar.timeZone.getter(v137);
          countAndFlagsBits = Date.formattedMonthAndDay(timeZone:)(v138);
          v140 = v139;
          DetailChartDataElement.date.getter(countAndFlagsBits);
          v199 = Date.formattedMonthAndDay(timeZone:)(v138);
          v142 = v141;
          v143 = type metadata accessor for UnitManager(0);
          v144 = static UnitManager.standard.getter(v143);
          v145 = (void *)UnitManager.precipitationRainfall.getter();
          swift_release(v144);
          DetailChartDataElement.value.getter(v146);
          v147 = sub_10012085C();
          v148 = v145;
          v149 = v172;
          v150 = Measurement.init(value:unit:)(v148, v147);
          DetailChartDataElement.value.getter(v150);
          v151 = v148;
          v152 = v174;
          Measurement.init(value:unit:)(v151, v147);
          sub_1000DB418((_QWORD *)(v170 + 80), *(_QWORD *)(v170 + 104));
          v153 = v178;
          sub_1007AE588(countAndFlagsBits, v140, v199, v142);
          swift_bridgeObjectRelease(v142);
          swift_bridgeObjectRelease(v140);
          v154 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
          v207._object = (void *)0x80000001009FD040;
          v155._countAndFlagsBits = 0x7972616D6D7553;
          v155._object = (void *)0xE700000000000000;
          v156._countAndFlagsBits = 0;
          v156._object = (void *)0xE000000000000000;
          v207._countAndFlagsBits = 0xD000000000000023;
          v157 = NSLocalizedString(_:tableName:bundle:value:comment:)(v155, (Swift::String_optional)0, (NSBundle)v154, v156, v207);
          countAndFlagsBits = v157._countAndFlagsBits;

          v158 = *(void (**)(char *, uint64_t))(v176 + 8);
          v159 = v177;
          v158(v152, v177);
          v158(v149, v159);
          v160 = v204;
          v61(v38, v204);
          (*(void (**)(char *, uint64_t))(v173 + 8))(v138, v175);
          v61(v181, v160);
          v161 = v196;
          v162 = v201;
          v201(v186, v196);
          v162(v189, v161);
          v163 = (int *)type metadata accessor for ConditionDetailPlatterViewModel(0);
          v164 = v198;
          v165 = v180;
          _s7Weather24LocationCompositionStateOwst_0(v198 + v163[6], 1, 1, v180);
          v166 = v164 + v163[7];
          (*(void (**)(uint64_t, char *, uint64_t))(v179 + 32))(v166, v153, v165);
          v167 = type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
          swift_storeEnumTagMultiPayload(v166, v167, 0);
          _s7Weather24LocationCompositionStateOwst_0(v164 + v163[8], 1, 1, v167);
          *(_QWORD *)v164 = 0;
          *(_QWORD *)(v164 + 8) = 0;
          *(_BYTE *)(v164 + 16) = 2;
          *(_QWORD *)(v164 + 24) = countAndFlagsBits;
          *(_QWORD *)(v164 + 32) = v157._object;
          *(_BYTE *)(v164 + v163[9]) = 0;
          *(_BYTE *)(v164 + v163[10]) = 0;
          v61(v202, v160);
          (*(void (**)(char *, uint64_t))(v195 + 8))(v203, v197);
          v77 = v164;
          v135 = 0;
          v76 = (uint64_t)v163;
          return _s7Weather24LocationCompositionStateOwst_0(v77, v135, 1, v76);
        }
      }
      sub_100021A14(v113, (uint64_t *)&unk_100BD35A0);
      if (qword_100BC2478 != -1)
        swift_once(&qword_100BC2478, sub_1006F38E8);
      v119 = type metadata accessor for Logger(0);
      sub_1000AECD4(v119, (uint64_t)qword_100CAF150);
      sub_10000AB54(countAndFlagsBits, v115, type metadata accessor for PrecipitationAveragesDetailInput);
      v121 = Logger.logObject.getter(v120);
      v123 = static os_log_type_t.error.getter(v121, v122);
      if (os_log_type_enabled(v121, v123))
      {
        v124 = swift_slowAlloc(22, -1);
        v125 = swift_slowAlloc(32, -1);
        *(_DWORD *)v124 = 141558275;
        v205 = 1752392040;
        v206 = v125;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v205, &v206);
        *(_WORD *)(v124 + 12) = 2081;
        v201 = (void (*)(char *, uint64_t))(v124 + 14);
        v126 = type metadata accessor for Location(0);
        sub_1002084DC();
        v127 = dispatch thunk of CustomStringConvertible.description.getter(v126);
        v129 = v128;
        v205 = sub_1000CE1C8(v127, v128, &v206);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v205, &v206);
        swift_bridgeObjectRelease(v129);
        sub_1000215BC(v115, type metadata accessor for PrecipitationAveragesDetailInput);
        _os_log_impl((void *)&_mh_execute_header, v121, v123, "Could not derive a start date, for creating platter view summary. location=%{private,mask.hash}s", (uint8_t *)v124, 0x16u);
        swift_arrayDestroy(v125, 1);
        swift_slowDealloc(v125, -1, -1);
        v130 = v124;
        v114 = v197;
        swift_slowDealloc(v130, -1, -1);

        v131 = *(void (**)(char *, uint64_t))(v53 + 8);
        v132 = v186;
      }
      else
      {

        sub_1000215BC(v115, type metadata accessor for PrecipitationAveragesDetailInput);
        v131 = *(void (**)(char *, uint64_t))(v53 + 8);
        v132 = v110;
      }
      v133 = v196;
      v131(v132, v196);
      v131(v189, v133);
      v134 = v195;
      v61(v202, v204);
      (*(void (**)(char *, uint64_t))(v134 + 8))(v203, v114);
      v76 = type metadata accessor for ConditionDetailPlatterViewModel(0);
      v77 = v198;
    }
    else
    {
LABEL_17:
      if (qword_100BC2478 != -1)
        swift_once(&qword_100BC2478, sub_1006F38E8);
      v88 = type metadata accessor for Logger(0);
      sub_1000AECD4(v88, (uint64_t)qword_100CAF150);
      v89 = v188;
      sub_10000AB54(countAndFlagsBits, v188, type metadata accessor for PrecipitationAveragesDetailInput);
      v91 = Logger.logObject.getter(v90);
      v93 = static os_log_type_t.error.getter(v91, v92);
      v94 = os_log_type_enabled(v91, v93);
      v95 = v197;
      v96 = v198;
      if (v94)
      {
        v97 = swift_slowAlloc(22, -1);
        v98 = swift_slowAlloc(32, -1);
        v201 = (void (*)(char *, uint64_t))v98;
        *(_DWORD *)v97 = 141558275;
        v205 = 1752392040;
        v206 = v98;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v205, &v206);
        *(_WORD *)(v97 + 12) = 2081;
        countAndFlagsBits = v97 + 14;
        v99 = v93;
        v100 = type metadata accessor for Location(0);
        sub_1002084DC();
        v101 = dispatch thunk of CustomStringConvertible.description.getter(v100);
        v103 = v102;
        v205 = sub_1000CE1C8(v101, v102, &v206);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v205, &v206);
        swift_bridgeObjectRelease(v103);
        sub_1000215BC(v89, type metadata accessor for PrecipitationAveragesDetailInput);
        _os_log_impl((void *)&_mh_execute_header, v91, v99, "Missing historical average precipitation accumulation up to today, for creating platter view summary. location=%{private,mask.hash}s", (uint8_t *)v97, 0x16u);
        v104 = v201;
        swift_arrayDestroy(v201, 1);
        swift_slowDealloc(v104, -1, -1);
        v105 = v97;
        v95 = v197;
        swift_slowDealloc(v105, -1, -1);

      }
      else
      {

        sub_1000215BC(v89, type metadata accessor for PrecipitationAveragesDetailInput);
      }
      (*(void (**)(char *, uint64_t))(v53 + 8))(v189, v196);
      v106 = v195;
      v61(v202, v204);
      (*(void (**)(char *, uint64_t))(v106 + 8))(v203, v95);
      v76 = type metadata accessor for ConditionDetailPlatterViewModel(0);
      v77 = v96;
    }
  }
  else
  {
LABEL_6:
    if (qword_100BC2478 != -1)
      swift_once(&qword_100BC2478, sub_1006F38E8);
    v62 = type metadata accessor for Logger(0);
    sub_1000AECD4(v62, (uint64_t)qword_100CAF150);
    v63 = v194;
    sub_10000AB54(countAndFlagsBits, (uint64_t)v194, type metadata accessor for PrecipitationAveragesDetailInput);
    v65 = Logger.logObject.getter(v64);
    v67 = static os_log_type_t.error.getter(v65, v66);
    if (os_log_type_enabled(v65, v67))
    {
      v68 = swift_slowAlloc(22, -1);
      v69 = swift_slowAlloc(32, -1);
      *(_DWORD *)v68 = 141558275;
      v205 = 1752392040;
      v206 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v205, &v206);
      *(_WORD *)(v68 + 12) = 2081;
      v70 = type metadata accessor for Location(0);
      sub_1002084DC();
      v71 = dispatch thunk of CustomStringConvertible.description.getter(v70);
      v73 = v72;
      v205 = sub_1000CE1C8(v71, v72, &v206);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v205, &v206);
      swift_bridgeObjectRelease(v73);
      sub_1000215BC((uint64_t)v63, type metadata accessor for PrecipitationAveragesDetailInput);
      _os_log_impl((void *)&_mh_execute_header, v65, v67, "Missing precipitation accumulation up to today, for creating platter view summary. location=%{private,mask.hash}s", (uint8_t *)v68, 0x16u);
      swift_arrayDestroy(v69, 1);
      swift_slowDealloc(v69, -1, -1);
      v74 = v68;
      v42 = v195;
      swift_slowDealloc(v74, -1, -1);
    }
    else
    {
      sub_1000215BC((uint64_t)v63, type metadata accessor for PrecipitationAveragesDetailInput);
    }

    v75 = v197;
    (*((void (**)(char *, uint64_t))v201 + 1))(v202, v204);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v203, v75);
    v76 = type metadata accessor for ConditionDetailPlatterViewModel(0);
    v77 = v51;
  }
  v135 = 1;
  return _s7Weather24LocationCompositionStateOwst_0(v77, v135, 1, v76);
}

void sub_1006C8C2C(uint64_t a1@<X0>, char a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  char *v53;
  double (*v54)(char *, uint64_t);
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  double v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  uint64_t v71;
  os_log_type_t v72;
  uint8_t *v73;
  id v74;
  Swift::String v75;
  Swift::String v76;
  Swift::String v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  void (*v88)(void);
  uint64_t *v89;
  uint64_t v90;
  __n128 v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  __n128 v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  __n128 v111;
  uint64_t v112;
  uint64_t v113;
  int *v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  void (*v123)(char *, uint64_t);
  void (*v124)(char *, uint64_t, uint64_t);
  uint64_t v125;
  void *object;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t countAndFlagsBits;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  Swift::String v145;

  v139 = a1;
  v132 = a3;
  v130 = type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
  __chkstk_darwin(v130);
  v131 = (char *)&v118 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000BA294(&qword_100BC3368);
  __chkstk_darwin(v5);
  v142 = (uint64_t)&v118 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BDCCB0);
  __chkstk_darwin(v7);
  v9 = (char *)&v118 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DateComponents(0);
  countAndFlagsBits = *(_QWORD *)(v10 - 8);
  v135 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  v14 = __chkstk_darwin(v13);
  v133 = (uint64_t)&v118 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v137 = (uint64_t)&v118 - v17;
  v18 = __chkstk_darwin(v16);
  v136 = (uint64_t)&v118 - v19;
  v20 = __chkstk_darwin(v18);
  v143 = (uint64_t)&v118 - v21;
  __chkstk_darwin(v20);
  v144 = (uint64_t)&v118 - v22;
  v141 = type metadata accessor for Calendar(0);
  v129 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v140 = (char *)&v118 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1000BA294(&qword_100BCCC50);
  v25 = __chkstk_darwin(v24);
  v120 = (char *)&v118 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v121 = (char *)&v118 - v28;
  v29 = __chkstk_darwin(v27);
  v31 = (char *)&v118 - v30;
  v32 = __chkstk_darwin(v29);
  v34 = (char *)&v118 - v33;
  __chkstk_darwin(v32);
  v36 = (char *)&v118 - v35;
  v37 = type metadata accessor for TimeZone(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = __chkstk_darwin(v37);
  v118 = (char *)&v118 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __chkstk_darwin(v39);
  v119 = (char *)&v118 - v42;
  v43 = __chkstk_darwin(v41);
  v45 = (char *)&v118 - v44;
  __chkstk_darwin(v43);
  v47 = (char *)&v118 - v46;
  v48 = sub_1006C9784(a2);
  v127 = v49;
  v128 = v48;
  TimeZone.init(secondsFromGMT:)(0, v50);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v36, 1, v37) == 1)
  {
    __break(1u);
    goto LABEL_21;
  }
  v51 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
  v51(v47, v36, v37);
  v138 = Date.formattedYear(timeZone:)(v47);
  v139 = v52;
  v53 = v47;
  v54 = *(double (**)(char *, uint64_t))(v38 + 8);
  v55.n128_f64[0] = v54(v53, v37);
  TimeZone.init(secondsFromGMT:)(0, v55);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v34, 1, v37) == 1)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v124 = (void (*)(char *, uint64_t, uint64_t))v51;
  v51(v45, v34, v37);
  static Calendar.gregorianCalendar(with:)(v45);
  v123 = (void (*)(char *, uint64_t))v54;
  v54(v45, v37);
  v56 = v141;
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 1, 1, v141);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v31, 1, 1, v37);
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v9, v31, 0, 1, 0, 1, 1, 0);
  v57 = v144;
  Calendar.date(from:)(v12, v58);
  v59 = v135;
  v60 = *(void (**)(char *, uint64_t))(countAndFlagsBits + 8);
  v60(v12, v135);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 1, 1, v56);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v31, 1, 1, v37);
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v9, v31, 0, 1, 0, 1, 1, 0);
  v61 = v143;
  Calendar.date(from:)(v12, v62);
  v60(v12, v59);
  v63 = type metadata accessor for Date(0);
  v64 = _s7Weather24LocationCompositionStateOwet_0(v57, 1, v63);
  v65 = v61;
  v66 = v136;
  sub_10003773C(v65, v136, (uint64_t *)&unk_100BD35A0);
  v135 = v37;
  if (v64 == 1 || _s7Weather24LocationCompositionStateOwet_0(v66, 1, v63) == 1)
  {
    sub_100021A14(v66, (uint64_t *)&unk_100BD35A0);
    v67 = v138;
    if (qword_100BC2478 != -1)
      swift_once(&qword_100BC2478, sub_1006F38E8);
    v68 = type metadata accessor for Logger(0);
    v69 = sub_1000AECD4(v68, (uint64_t)qword_100CAF150);
    v70 = Logger.logObject.getter(v69);
    v72 = static os_log_type_t.error.getter(v70, v71);
    if (os_log_type_enabled(v70, v72))
    {
      v73 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v73 = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, v72, "Could not derive dates for describing average range in platter view summary.", v73, 2u);
      swift_slowDealloc(v73, -1, -1);
    }

  }
  else
  {
    sub_100021A14(v66, (uint64_t *)&unk_100BD35A0);
    v67 = v138;
  }
  v74 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v145._countAndFlagsBits = 0xD000000000000032;
  v145._object = (void *)0x8000000100A101F0;
  v136 = (uint64_t)"dispatchedEvents";
  v75._object = (void *)0x8000000100A101D0;
  v75._countAndFlagsBits = 0xD00000000000001BLL;
  v76._countAndFlagsBits = 0;
  v76._object = (void *)0xE000000000000000;
  v77 = NSLocalizedString(_:tableName:bundle:value:comment:)(v75, (Swift::String_optional)0, (NSBundle)v74, v76, v145);
  countAndFlagsBits = v77._countAndFlagsBits;
  object = v77._object;

  v78 = type metadata accessor for WeatherDescription(0);
  _s7Weather24LocationCompositionStateOwst_0(v142, 1, 1, v78);
  v79 = sub_1000BA294(&qword_100BCE380);
  v80 = type metadata accessor for WeatherDescription.Argument(0);
  v81 = *(_QWORD *)(v80 - 8);
  v82 = *(_QWORD *)(v81 + 72);
  v83 = *(unsigned __int8 *)(v81 + 80);
  v84 = (v83 + 32) & ~v83;
  v85 = swift_allocObject(v79, v84 + 5 * v82, v83 | 7);
  *(_OWORD *)(v85 + 16) = xmmword_1009891E0;
  v125 = v85;
  v86 = (uint64_t *)(v85 + v84);
  v87 = v139;
  *v86 = v67;
  v86[1] = v87;
  v88 = *(void (**)(void))(v81 + 104);
  ((void (*)(uint64_t *, _QWORD, uint64_t))v88)(v86, enum case for WeatherDescription.Argument.string(_:), v80);
  v89 = (uint64_t *)((char *)v86 + v82);
  *v89 = v67;
  v89[1] = v87;
  v88();
  v90 = v137;
  sub_10003773C(v144, v137, (uint64_t *)&unk_100BD35A0);
  LODWORD(v79) = _s7Weather24LocationCompositionStateOwet_0(v90, 1, v63);
  swift_bridgeObjectRetain_n(v87, 2);
  v122 = v63;
  if ((_DWORD)v79 != 1)
  {
    v94 = (uint64_t)v121;
    TimeZone.init(secondsFromGMT:)(0, v91);
    v95 = v135;
    if (_s7Weather24LocationCompositionStateOwet_0(v94, 1, v135) != 1)
    {
      v96 = v119;
      v124(v119, v94, v95);
      v97 = v137;
      v92 = Date.formattedMonthAndDay(timeZone:)(v96);
      v93 = v98;
      v123(v96, v95);
      v63 = v122;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v122 - 8) + 8))(v97, v122);
      v67 = v138;
      goto LABEL_15;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  sub_100021A14(v90, (uint64_t *)&unk_100BD35A0);
  v92 = 0;
  v93 = 0xE000000000000000;
LABEL_15:
  v99 = (uint64_t *)((char *)v86 + 2 * v82);
  *v99 = v92;
  v99[1] = v93;
  v88();
  v100 = v133;
  sub_10003773C(v143, v133, (uint64_t *)&unk_100BD35A0);
  if (_s7Weather24LocationCompositionStateOwet_0(v100, 1, v63) == 1)
  {
    sub_100021A14(v100, (uint64_t *)&unk_100BD35A0);
    v102 = 0;
    v103 = 0xE000000000000000;
LABEL_19:
    v108 = (uint64_t *)((char *)v86 + 3 * v82);
    *v108 = v102;
    v108[1] = v103;
    v88();
    v109 = (uint64_t *)((char *)v86 + 4 * v82);
    v110 = v139;
    *v109 = v67;
    v109[1] = v110;
    v111.n128_f64[0] = ((double (*)(void))v88)();
    v112 = (uint64_t)v131;
    WeatherDescription.init(format:_:)(v128, v127, v125, v111);
    sub_100021A14(v143, (uint64_t *)&unk_100BD35A0);
    (*(void (**)(char *, uint64_t))(v129 + 8))(v140, v141);
    v113 = v130;
    swift_storeEnumTagMultiPayload(v112, v130, 0);
    v114 = (int *)type metadata accessor for ConditionDetailPlatterViewModel(0);
    v115 = v132;
    _s7Weather24LocationCompositionStateOwst_0(v132 + v114[8], 1, 1, v113);
    v116 = v136 | 0x8000000000000000;
    *(_QWORD *)v115 = 0xD00000000000001BLL;
    *(_QWORD *)(v115 + 8) = v116;
    *(_BYTE *)(v115 + 16) = 0;
    v117 = object;
    *(_QWORD *)(v115 + 24) = countAndFlagsBits;
    *(_QWORD *)(v115 + 32) = v117;
    sub_1000F6C3C(v142, v115 + v114[6]);
    sub_1003A99D8(v112, v115 + v114[7]);
    *(_BYTE *)(v115 + v114[9]) = 0;
    *(_BYTE *)(v115 + v114[10]) = 0;
    sub_100021A14(v144, (uint64_t *)&unk_100BD35A0);
    return;
  }
  v104 = (uint64_t)v120;
  TimeZone.init(secondsFromGMT:)(0, v101);
  v105 = v135;
  if (_s7Weather24LocationCompositionStateOwet_0(v104, 1, v135) != 1)
  {
    v106 = v118;
    v124(v118, v104, v105);
    v102 = Date.formattedMonthAndDay(timeZone:)(v106);
    v103 = v107;
    v123(v106, v105);
    (*(void (**)(uint64_t))(*(_QWORD *)(v122 - 8) + 8))(v100);
    v67 = v138;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
}

uint64_t sub_1006C9784(char a1)
{
  objc_class *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  NSBundle v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t countAndFlagsBits;
  unint64_t v11;

  v2 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  if ((a1 & 1) != 0)
  {
    v3 = 0x1000000000000279;
    v4 = 0xD00000000000018CLL;
    v11 = 0x8000000100A10790;
    v5 = 0x8000000100A10600;
    v6.super.isa = v2;
    v7 = 0;
    v8 = 0xE000000000000000;
  }
  else
  {
    v11 = 0x8000000100A103A0;
    v5 = 0x8000000100A10230;
    v4 = 0xD00000000000016ELL;
    v6.super.isa = v2;
    v7 = 0;
    v8 = 0xE000000000000000;
    v3 = 0x100000000000025BLL;
  }
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v4, (Swift::String_optional)0, v6, *(Swift::String *)&v7, *(Swift::String *)&v3)._countAndFlagsBits;

  return countAndFlagsBits;
}

ValueMetadata *type metadata accessor for PrecipitationAveragesDetailViewModelFactory()
{
  return &type metadata for PrecipitationAveragesDetailViewModelFactory;
}

uint64_t sub_1006C989C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006C98A8);
}

uint64_t sub_1006C98A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1000BC1E8();
  return _s7Weather24LocationCompositionStateOwet_0(v1, v0, v2);
}

uint64_t sub_1006C98D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006C98DC);
}

uint64_t sub_1006C98DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1000BC1E8();
  return _s7Weather24LocationCompositionStateOwst_0(v1, v0, v0, v2);
}

uint64_t type metadata accessor for VFXTestViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100BFDF00;
  if (!qword_100BFDF00)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for VFXTestViewModel);
  return result;
}

uint64_t sub_1006C9940()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;

  v1 = v0;
  v2 = type metadata accessor for CloudAltitudeKind(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100098728();
  v6 = v5 - v4;
  v7 = type metadata accessor for WeatherConditionGradientModel.PresentationContext(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100098728();
  v11 = v10 - v9;
  v12 = type metadata accessor for Elevation(0);
  __chkstk_darwin(v12);
  sub_100098728();
  v15 = v14 - v13;
  v16 = type metadata accessor for WeatherCondition(0);
  __chkstk_darwin(v16);
  sub_100098728();
  v19 = v18 - v17;
  v21 = ((__n128 (*)(uint64_t, uint64_t))*(_QWORD *)(v20 + 16))(v18 - v17, v1);
  v21.n128_u64[0] = 0x4056800000000000;
  Elevation.init(_:isPM:)(0, v21);
  v22 = enum case for WeatherConditionGradientModel.AnimationContext.vfx(_:);
  v23 = type metadata accessor for WeatherConditionGradientModel.AnimationContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v11, v22, v23);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v11, enum case for WeatherConditionGradientModel.PresentationContext.fullScreen(_:), v7);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v6, enum case for CloudAltitudeKind.low(_:), v2);
  return WeatherConditionGradientModel.init(conditionKind:elevation:isDaylight:presentation:cloudCover:cloudKind:)(v19, v15, 1, v11, v6, 0.5);
}

uint64_t sub_1006C9AE8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  a1[3] = sub_1000BA294(&qword_100BFDF40);
  a1[4] = sub_1006C9BF4();
  sub_10005F164(a1);
  v3 = type metadata accessor for VFXTestViewModel(0);
  return ShortDescription.init(name:_:)(0xD000000000000010, 0x80000001009BF030, v2, v3);
}

uint64_t sub_1006C9B84@<X0>(_QWORD *a1@<X8>)
{
  return sub_1006C9AE8(a1);
}

uint64_t sub_1006C9B98(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1006C9C38(&qword_100BFDF50, (uint64_t)&unk_1009BF08C);
  return ShortDescribable.description.getter(a1, v2);
}

uint64_t sub_1006C9BD0()
{
  return sub_1006C9C38(&qword_100BFDF38, (uint64_t)&unk_1009BF064);
}

unint64_t sub_1006C9BF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFDF48;
  if (!qword_100BFDF48)
  {
    v1 = sub_100075EB0(&qword_100BFDF40);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFDF48);
  }
  return result;
}

uint64_t sub_1006C9C38(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for VFXTestViewModel(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *sub_1006C9C78(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for ConditionDetailChartHeaderStringModel(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = type metadata accessor for ConditionDetailChartHeaderViewModel(0);
    *((_BYTE *)a1 + *(int *)(v8 + 20)) = *((_BYTE *)a2 + *(int *)(v8 + 20));
    *((_BYTE *)a1 + *(int *)(v8 + 24)) = *((_BYTE *)a2 + *(int *)(v8 + 24));
    v9 = *(int *)(a3 + 24);
    *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
    *(_QWORD *)((char *)a1 + v9) = *(_QWORD *)((char *)a2 + v9);
  }
  return a1;
}

uint64_t sub_1006C9D28(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ConditionDetailChartHeaderStringModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1006C9D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for ConditionDetailChartHeaderStringModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = type metadata accessor for ConditionDetailChartHeaderViewModel(0);
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = *(_BYTE *)(a2 + *(int *)(v7 + 20));
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  v8 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  return a1;
}

uint64_t sub_1006C9DE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for ConditionDetailChartHeaderStringModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = type metadata accessor for ConditionDetailChartHeaderViewModel(0);
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = *(_BYTE *)(a2 + *(int *)(v7 + 20));
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1006C9E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for ConditionDetailChartHeaderStringModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = type metadata accessor for ConditionDetailChartHeaderViewModel(0);
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = *(_BYTE *)(a2 + *(int *)(v7 + 20));
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  v8 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  return a1;
}

uint64_t sub_1006C9EEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for ConditionDetailChartHeaderStringModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = type metadata accessor for ConditionDetailChartHeaderViewModel(0);
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = *(_BYTE *)(a2 + *(int *)(v7 + 20));
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  v8 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  return a1;
}

uint64_t sub_1006C9F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006C9F7C);
}

uint64_t sub_1006C9F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000C61F8();
  return _s7Weather24LocationCompositionStateOwet_0(a1, a2, v4);
}

uint64_t sub_1006C9FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006C9FB8);
}

uint64_t sub_1006C9FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000C61F8();
  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ConditionDetailChartHeaderView(uint64_t a1)
{
  uint64_t result;

  result = qword_100BFDFB0;
  if (!qword_100BFDFB0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ConditionDetailChartHeaderView);
  return result;
}

uint64_t sub_1006CA024(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for ConditionDetailChartHeaderViewModel(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1006CA09C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABD88C, 1);
}

void sub_1006CA0AC()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)sub_1006CA0E0 + 4 * byte_1009BF0F0[*(unsigned __int8 *)(v0 + *(int *)(sub_1000C61F8() + 20))];
  __asm { BR              X10 }
}

double sub_1006CA0E0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  double result;

  if (qword_100BC1FE8 != -1)
    swift_once(&qword_100BC1FE8, sub_1003B54C8);
  v1 = qword_100CAE700;
  v0[3] = type metadata accessor for DefaultChartHeaderStyle();
  sub_10000F1C8(&qword_100BFE040, (uint64_t (*)(uint64_t))type metadata accessor for DefaultChartHeaderStyle);
  v0[4] = v2;
  *v0 = v1;
  *(_QWORD *)&result = swift_retain().n128_u64[0];
  return result;
}

uint64_t sub_1006CA2B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t (*v26)(_QWORD);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;

  v1 = v0;
  type metadata accessor for ConditionDetailChartHeaderView(0);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_10009883C();
  v5 = v3 - v4;
  __chkstk_darwin(v6);
  v8 = (char *)&v35 - v7;
  __chkstk_darwin(v9);
  v11 = (char *)&v35 - v10;
  sub_1000BA294(&qword_100BD8A00);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100098728();
  v15 = v14 - v13;
  sub_1000C61F8();
  sub_1000B42B0();
  __chkstk_darwin(v16);
  sub_10009883C();
  v19 = v17 - v18;
  __chkstk_darwin(v20);
  v22 = (char *)&v35 - v21;
  __chkstk_darwin(v23);
  v25 = (char *)&v35 - v24;
  sub_10000AB54(v1, (uint64_t)&v35 - v24, v26);
  ConditionDetailChartHeaderStringModel.title2.getter();
  type metadata accessor for ConditionDetailChartHeaderStringModel(0);
  sub_1000C0A80((uint64_t)v25);
  v27 = type metadata accessor for AttributedString(0);
  LODWORD(v25) = _s7Weather24LocationCompositionStateOwet_0(v15, 1, v27);
  sub_100021A14(v15, &qword_100BD8A00);
  sub_10000AB54(v1, (uint64_t)v11, type metadata accessor for ConditionDetailChartHeaderView);
  if ((_DWORD)v25 != 1)
  {
    sub_1000215BC((uint64_t)v11, type metadata accessor for ConditionDetailChartHeaderView);
    sub_10000AB54(v1, (uint64_t)v8, type metadata accessor for ConditionDetailChartHeaderView);
    goto LABEL_7;
  }
  sub_10000AB54((uint64_t)v11, (uint64_t)v22, type metadata accessor for ConditionDetailChartHeaderViewModel);
  ConditionDetailChartHeaderStringModel.title3.getter();
  v29 = v28;
  sub_1000215BC((uint64_t)v11, type metadata accessor for ConditionDetailChartHeaderView);
  sub_1000C0A80((uint64_t)v22);
  sub_1000986C4();
  sub_10000AB54(v1, (uint64_t)v8, type metadata accessor for ConditionDetailChartHeaderView);
  if (v29)
  {
LABEL_7:
    sub_1000215BC((uint64_t)v8, type metadata accessor for ConditionDetailChartHeaderView);
    sub_10000AB54(v1, v5, type metadata accessor for ConditionDetailChartHeaderView);
    goto LABEL_8;
  }
  sub_10000AB54((uint64_t)v8, (uint64_t)v22, type metadata accessor for ConditionDetailChartHeaderViewModel);
  ConditionDetailChartHeaderStringModel.symbolName.getter();
  v31 = v30;
  sub_1000215BC((uint64_t)v8, type metadata accessor for ConditionDetailChartHeaderView);
  sub_1000C0A80((uint64_t)v22);
  sub_1000986C4();
  sub_10000AB54(v1, v5, type metadata accessor for ConditionDetailChartHeaderView);
  if (v31)
  {
LABEL_8:
    sub_1000215BC(v5, type metadata accessor for ConditionDetailChartHeaderView);
    return 0;
  }
  sub_10000AB54(v5, v19, type metadata accessor for ConditionDetailChartHeaderViewModel);
  ConditionDetailChartHeaderStringModel.subtitle.getter();
  v33 = v32;
  sub_1000215BC(v5, type metadata accessor for ConditionDetailChartHeaderView);
  sub_1000C0A80(v19);
  if (!v33)
    return 1;
  sub_1000986C4();
  return 0;
}

void sub_1006CA59C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t);
  uint64_t OpaqueTypeConformance2;
  unint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  Swift::String v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  Swift::String v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(_QWORD);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD v106[2];
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;

  v104 = a1;
  sub_1000BA294(&qword_100BD8A00);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100088FDC();
  v100 = v3;
  v4 = type metadata accessor for AttributedString(0);
  v5 = *(_QWORD *)(v4 - 8);
  v97 = v4;
  v98 = v5;
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v96 = v7;
  v103 = type metadata accessor for AutomationInfo(0);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100088FDC();
  v102 = v9;
  sub_1000C61F8();
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_10009883C();
  v101 = v11 - v12;
  __chkstk_darwin(v13);
  v15 = (char *)&v91 - v14;
  v93 = (void (*)(_QWORD))type metadata accessor for AccessibilityChildBehavior(0);
  v92 = *((_QWORD *)v93 - 1);
  sub_10009D98C();
  __chkstk_darwin(v16);
  sub_100098728();
  v19 = v18 - v17;
  sub_1000BA294(&qword_100BFDFF0);
  sub_1000B42B0();
  __chkstk_darwin(v20);
  sub_100098728();
  v23 = v22 - v21;
  v24 = sub_1000BA294(&qword_100BFDFF8);
  sub_10009D98C();
  __chkstk_darwin(v25);
  sub_100098728();
  v28 = v27 - v26;
  v94 = sub_1000BA294(&qword_100BFE000);
  v95 = *(_QWORD *)(v94 - 8);
  sub_10009D98C();
  __chkstk_darwin(v29);
  sub_100088FDC();
  v91 = v30;
  sub_1000BA294(&qword_100BD9B58);
  sub_1000B42B0();
  __chkstk_darwin(v31);
  sub_100088FDC();
  v105 = v32;
  sub_1000BA294(&qword_100BD9B60);
  sub_1000B42B0();
  __chkstk_darwin(v33);
  sub_100088FDC();
  v99 = v34;
  v35 = type metadata accessor for ConditionDetailChartHeaderView(0);
  *(_QWORD *)v23 = *(_QWORD *)(v1 + *(int *)(v35 + 20));
  *(_QWORD *)(v23 + 8) = 0;
  *(_BYTE *)(v23 + 16) = 0;
  v36 = sub_1000BA294(&qword_100BFE008);
  sub_1006CAC0C(v1, (double *)(v23 + *(int *)(v36 + 44)));
  sub_1006CA0AC();
  v37 = *((_QWORD *)&v110 + 1);
  v38 = v111;
  sub_1000DB418(&v109, *((uint64_t *)&v110 + 1));
  v39 = dispatch thunk of ConditionDetailChartHeaderStyleType.preferredHeight.getter(v37, v38)
      * *(double *)(v1 + *(int *)(v35 + 24));
  v40 = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v109);
  static Alignment.center.getter(v40);
  _FrameLayout.init(width:height:alignment:)(0, 1, *(_QWORD *)&v39, 0);
  sub_100037794(v23, v28, &qword_100BFDFF0);
  v41 = v24;
  v42 = (_OWORD *)(v28 + *(int *)(v24 + 36));
  v43 = v110;
  *v42 = v109;
  v42[1] = v43;
  v42[2] = v111;
  sub_100021A14(v23, &qword_100BFDFF0);
  static AccessibilityChildBehavior.ignore.getter(v44);
  v45 = sub_1006CDAE8();
  v46 = v91;
  View.accessibilityElement(children:)(v19, v41, v45);
  (*(void (**)(uint64_t, void (*)(_QWORD)))(v92 + 8))(v19, v93);
  sub_100021A14(v28, &qword_100BFDFF8);
  v47 = v1;
  sub_10000AB54(v1, (uint64_t)v15, type metadata accessor for ConditionDetailChartHeaderViewModel);
  v48 = ConditionDetailChartHeaderStringModel.accessibilityDescription.getter();
  v50 = v49;
  v51 = type metadata accessor for ConditionDetailChartHeaderStringModel(0);
  v93 = *(void (**)(_QWORD))(*(_QWORD *)(v51 - 8) + 8);
  v52 = sub_100098FCC();
  v53(v52);
  v107 = v48;
  v108 = v50;
  v106[0] = v41;
  v106[1] = v45;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v106, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v55 = sub_100114EF8();
  v56 = v94;
  View.accessibilityLabel<A>(_:)(&v107, v94, &type metadata for String, OpaqueTypeConformance2, v55);
  v57 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, __n128))(v95 + 8))(v46, v56, v57);
  sub_10000AB54(v1, (uint64_t)v15, type metadata accessor for ConditionDetailChartHeaderViewModel);
  v58 = v96;
  ConditionDetailChartHeaderStringModel.title1.getter();
  v59 = sub_100098FCC();
  v60 = v93;
  v93(v59);
  sub_10000F1C8(qword_100BE5210, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString);
  v61 = v97;
  v62 = dispatch thunk of CustomStringConvertible.description.getter(v97);
  v64 = v63;
  (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v58, v61);
  v107 = v62;
  v108 = v64;
  swift_bridgeObjectRetain();
  sub_1000DF8C8();
  swift_bridgeObjectRelease();
  sub_10000AB54(v1, (uint64_t)v15, type metadata accessor for ConditionDetailChartHeaderViewModel);
  v65 = v100;
  ConditionDetailChartHeaderStringModel.title2.getter();
  v66 = sub_100098FCC();
  v60(v66);
  v67 = (void (*)(uint64_t, uint64_t))v60;
  v68 = v65;
  sub_100490820();
  v70 = v69;
  v72 = v71;
  sub_100021A14(v68, &qword_100BD8A00);
  sub_1000D1A68();
  v73._countAndFlagsBits = v70;
  v73._object = v72;
  String.append(_:)(v73);
  swift_bridgeObjectRelease();
  sub_1000986E8();
  swift_bridgeObjectRetain();
  sub_1000DF8C8();
  sub_1000986E8();
  v74 = v101;
  sub_10000AB54(v1, v101, type metadata accessor for ConditionDetailChartHeaderViewModel);
  v75 = ConditionDetailChartHeaderStringModel.title3.getter();
  v77 = v76;
  v67(v74, v51);
  if (v77)
    v78 = v75;
  else
    v78 = 0;
  if (!v77)
    v77 = (void *)0xE000000000000000;
  sub_1000D1A68();
  v79._countAndFlagsBits = v78;
  v79._object = v77;
  String.append(_:)(v79);
  swift_bridgeObjectRelease();
  sub_1000986E8();
  v80 = v107;
  v81 = v108;
  sub_10000AB54(v47, (uint64_t)v15, type metadata accessor for ConditionDetailChartHeaderViewModel);
  v82 = ConditionDetailChartHeaderStringModel.subtitle.getter();
  v84 = v83;
  v85 = sub_100098FCC();
  ((void (*)(uint64_t))v67)(v85);
  v86 = v102;
  *v102 = v80;
  v86[1] = v81;
  v86[2] = v82;
  v86[3] = v84;
  v87 = (uint64_t)v86;
  v88 = type metadata accessor for AutomationCellInfo(0);
  swift_storeEnumTagMultiPayload(v87, v88, 9);
  swift_storeEnumTagMultiPayload(v87, v103, 1);
  v89 = v99;
  v90 = v105;
  sub_100335520();
  sub_1000215BC(v87, type metadata accessor for AutomationInfo);
  sub_100021A14(v90, &qword_100BD9B58);
  sub_1000F111C(v89, v104, &qword_100BD9B60);
}

void sub_1006CAC0C(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t KeyPath;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double *v67;
  uint64_t v68;
  char *v69;
  _QWORD v70[2];
  uint64_t v71;
  uint64_t v72;
  double *v73;
  uint64_t v74;
  _QWORD v75[3];
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v73 = a2;
  v71 = sub_1000BA294(&qword_100BFE048);
  __chkstk_darwin(v71);
  v4 = (char *)v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000BA294(&qword_100BFE050);
  __chkstk_darwin(v5);
  v7 = (char *)v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttributedString(0);
  __chkstk_darwin(v8);
  v10 = (char *)v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ConditionDetailChartHeaderViewModel(0);
  __chkstk_darwin(v11);
  v13 = (char *)v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000BA294(&qword_100BFE058);
  __chkstk_darwin(v14);
  v72 = (uint64_t)v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v74 = (uint64_t)v70 - v17;
  sub_1006CA0AC();
  v19 = v81;
  v18 = v82;
  sub_1000DB418(&v78, v81);
  v20 = dispatch thunk of ConditionDetailChartHeaderStyleType.topPadding.getter(v19, v18);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v78);
  if ((sub_1006CA2B0() & 1) != 0)
  {
    sub_10000AB54(a1, (uint64_t)v13, type metadata accessor for ConditionDetailChartHeaderViewModel);
    ConditionDetailChartHeaderStringModel.title1.getter();
    v21 = type metadata accessor for ConditionDetailChartHeaderStringModel(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v13, v21);
    v22 = Text.init(_:)(v10);
    v24 = v23;
    v26 = v25;
    v28 = v27 & 1;
    sub_1006CA0AC();
    v70[0] = v5;
    v30 = v81;
    v29 = v82;
    sub_1000DB418(&v78, v81);
    v31 = dispatch thunk of ConditionDetailChartHeaderStyleType.title1Font.getter(v30, v29);
    v32 = Text.font(_:)(v31, v22, v24, v28, v26);
    v34 = v33;
    v36 = v35;
    v70[1] = a1;
    v38 = v37 & 1;
    sub_1000D31B4(v22, v24, v28);
    swift_release();
    swift_bridgeObjectRelease();
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v78);
    sub_1006CA0AC();
    v39 = v81;
    v40 = v82;
    sub_1000DB418(&v78, v81);
    v41 = dispatch thunk of ConditionDetailChartHeaderStyleType.title1Color.getter(v39, v40);
    v42 = Text.foregroundColor(_:)(v41, v32, v34, v38, v36);
    v44 = v43;
    LOBYTE(v26) = v45;
    v47 = v46;
    sub_1000D31B4(v32, v34, v38);
    swift_release();
    swift_bridgeObjectRelease();
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v78);
    KeyPath = swift_getKeyPath(&unk_1009BF170);
    *(_QWORD *)v7 = v42;
    *((_QWORD *)v7 + 1) = v44;
    v7[16] = v26 & 1;
    *((_QWORD *)v7 + 3) = v47;
    *((_QWORD *)v7 + 4) = KeyPath;
    *((_QWORD *)v7 + 5) = 0x3FE0000000000000;
    swift_storeEnumTagMultiPayload(v7, v70[0], 0);
    v49 = sub_1000BA294(&qword_100BDB4F8);
    v50 = sub_1003730F4();
    sub_10003D2DC(&qword_100BFE060, &qword_100BFE048);
    _ConditionalContent<>.init(storage:)(v7, v49, v71, v50, v51);
  }
  else
  {
    sub_1006CB150((uint64_t)v4);
    sub_100037794((uint64_t)v4, (uint64_t)v7, &qword_100BFE048);
    swift_storeEnumTagMultiPayload(v7, v5, 1);
    v52 = sub_1000BA294(&qword_100BDB4F8);
    v53 = sub_1003730F4();
    sub_10003D2DC(&qword_100BFE060, &qword_100BFE048);
    _ConditionalContent<>.init(storage:)(v7, v52, v71, v53, v54);
    sub_100021A14((uint64_t)v4, &qword_100BFE048);
  }
  sub_1006CA0AC();
  v55 = v76;
  v56 = v77;
  sub_1000DB418(v75, v76);
  v57 = dispatch thunk of ConditionDetailChartHeaderStyleType.bottomPadding.getter(v55, v56);
  v59 = v58;
  static Alignment.center.getter(v57);
  _FrameLayout.init(width:height:alignment:)(0, 1, v59, 0);
  v71 = v78;
  v60 = v79;
  v61 = v80;
  v62 = v81;
  v63 = v82;
  v64 = v83;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v75);
  v65 = v74;
  v66 = v72;
  sub_100037794(v74, v72, &qword_100BFE058);
  v67 = v73;
  *v73 = v20;
  *((_BYTE *)v67 + 8) = 0;
  v68 = sub_1000BA294(&qword_100BFE068);
  sub_100037794(v66, (uint64_t)v67 + *(int *)(v68 + 48), &qword_100BFE058);
  v69 = (char *)v67 + *(int *)(v68 + 64);
  *(_QWORD *)v69 = 0;
  v69[8] = 1;
  *((_QWORD *)v69 + 2) = v71;
  v69[24] = v60;
  *((_QWORD *)v69 + 4) = v61;
  v69[40] = v62;
  *((_QWORD *)v69 + 6) = v63;
  *((_QWORD *)v69 + 7) = v64;
  sub_100021A14(v65, &qword_100BFE058);
  sub_100021A14(v66, &qword_100BFE058);
}

void sub_1006CB150(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  __n128 v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[136];
  __n128 v40;
  _BYTE v41[136];
  _BYTE v42[144];

  v2 = v1;
  v38 = a1;
  v3 = type metadata accessor for ConditionDetailChartHeaderViewModel(0);
  __chkstk_darwin(v3);
  v5 = &v39[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = sub_1000BA294(&qword_100BFE070);
  __chkstk_darwin(v6);
  v8 = &v39[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = sub_1000BA294(&qword_100BFE078);
  __chkstk_darwin(v9);
  v11 = &v39[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v12);
  v14 = &v39[-v13 - 8];
  v16 = __chkstk_darwin(v15);
  v18 = &v39[-v17 - 8];
  *(_QWORD *)v8 = static VerticalAlignment.firstTextBaseline.getter(v16);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 0;
  v19 = sub_1000BA294(&qword_100BFE080);
  v20 = sub_1006CB498(v2, &v8[*(int *)(v19 + 44)]);
  v21 = static Edge.Set.bottom.getter(v20);
  v22 = EdgeInsets.init(_all:)(1.0);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  sub_100037794((uint64_t)v8, (uint64_t)v14, &qword_100BFE070);
  v29 = (double *)&v14[*(int *)(v9 + 36)];
  *(_BYTE *)v29 = v21;
  v29[1] = v22;
  *((_QWORD *)v29 + 2) = v24;
  *((_QWORD *)v29 + 3) = v26;
  *((_QWORD *)v29 + 4) = v28;
  *((_BYTE *)v29 + 40) = 0;
  sub_100021A14((uint64_t)v8, &qword_100BFE070);
  sub_1000F111C((uint64_t)v14, (uint64_t)v18, &qword_100BFE078);
  sub_10000AB54(v2, (uint64_t)v5, type metadata accessor for ConditionDetailChartHeaderViewModel);
  v30 = (uint64_t *)ConditionDetailChartHeaderStringModel.subtitle.getter();
  v32 = v31;
  v33 = type metadata accessor for ConditionDetailChartHeaderStringModel(0);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v5, v33);
  if (v32)
  {
    v35 = static Axis.Set.horizontal.getter(v34);
    sub_1006CD278(v30, v32, v2, (uint64_t)v39);
    swift_bridgeObjectRelease();
    memcpy((char *)&v40.n128_i16[3] + 1, v39, 0x80uLL);
    v41[0] = v35;
    memcpy(&v41[1], &v40, 0x87uLL);
    LocationSearchEntityFromStringResolver.init()();
  }
  else
  {
    sub_1006CDB74(v41);
  }
  sub_1000F111C((uint64_t)v41, (uint64_t)v42, &qword_100BFE088);
  sub_100037794((uint64_t)v18, (uint64_t)v11, &qword_100BFE078);
  sub_1000F111C((uint64_t)v42, (uint64_t)v39, &qword_100BFE088);
  v36 = v38;
  sub_100037794((uint64_t)v11, v38, &qword_100BFE078);
  v37 = v36 + *(int *)(sub_1000BA294(&qword_100BFE090) + 48);
  sub_1000F111C((uint64_t)v39, (uint64_t)&v40, &qword_100BFE088);
  sub_1000F111C((uint64_t)&v40, v37, &qword_100BFE088);
  sub_1006CDC54(&v40);
  sub_100021A14((uint64_t)v18, &qword_100BFE078);
  sub_1000F111C((uint64_t)v39, (uint64_t)v41, &qword_100BFE088);
  sub_1006CDC54((__n128 *)v41);
  sub_100021A14((uint64_t)v11, &qword_100BFE078);
}

uint64_t sub_1006CB498@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t (*v26)(_QWORD);
  char v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t KeyPath;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  void *v90;
  uint64_t v91;
  _BYTE v92[312];
  __n128 v93[19];
  _BYTE v94[306];
  uint64_t v95;
  unsigned __int8 v96;
  uint64_t v97;
  unsigned __int8 v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE v101[306];

  v80 = sub_1000BA294(&qword_100BCF148);
  __chkstk_darwin(v80);
  v85 = (uint64_t *)((char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for Image.Scale(0);
  v83 = *(_QWORD *)(v5 - 8);
  v84 = v5;
  __chkstk_darwin(v5);
  v82 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BDD818);
  __chkstk_darwin(v7);
  v78 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_1000BA294(&qword_100BCF140);
  __chkstk_darwin(v79);
  v86 = (uint64_t *)((char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v81 = sub_1000BA294(&qword_100BD63E0);
  __chkstk_darwin(v81);
  v11 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v87 = (uint64_t)&v72 - v13;
  v14 = sub_1000BA294(&qword_100BFE098);
  __chkstk_darwin(v14);
  v16 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v72 - v18;
  v20 = type metadata accessor for ConditionDetailChartHeaderViewModel(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v72 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v72 - v24;
  v91 = a1;
  sub_10000AB54(a1, (uint64_t)&v72 - v24, v26);
  v27 = ConditionDetailChartHeaderStringModel.reverseChartTitle.getter();
  v28 = type metadata accessor for ConditionDetailChartHeaderStringModel(0);
  v29 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 8);
  v29(v25, v28);
  v89 = v19;
  v90 = a2;
  v88 = v11;
  if ((v27 & 1) != 0)
  {
    sub_1006CBC38((uint64_t)v92);
    memcpy(v94, v92, 0xE0uLL);
    sub_1006CE358((uint64_t)v94);
    sub_1000F111C((uint64_t)v94, (uint64_t)v93, &qword_100BFE0A0);
    v30 = sub_1000BA294(&qword_100BFE0A8);
    v31 = sub_1000BA294(&qword_100BFE0B0);
    sub_10003D2DC(&qword_100BFE0B8, &qword_100BFE0A8);
    v33 = v32;
    sub_10003D2DC(&qword_100BFE0C0, &qword_100BFE0B0);
    v35 = v34;
    v36 = v30;
    v37 = v31;
  }
  else
  {
    sub_1006CC488(v92);
    memcpy(v94, v92, 0x131uLL);
    sub_1006CDD60((uint64_t)v94);
    sub_1000F111C((uint64_t)v94, (uint64_t)v93, &qword_100BFE0A0);
    v38 = sub_1000BA294(&qword_100BFE0A8);
    v39 = sub_1000BA294(&qword_100BFE0B0);
    sub_10003D2DC(&qword_100BFE0B8, &qword_100BFE0A8);
    v33 = v40;
    sub_10003D2DC(&qword_100BFE0C0, &qword_100BFE0B0);
    v35 = v41;
    v36 = v38;
    v37 = v39;
  }
  _ConditionalContent<>.init(storage:)(v93, v36, v37, v33, v35);
  sub_10000AB54(v91, (uint64_t)v22, type metadata accessor for ConditionDetailChartHeaderViewModel);
  v42 = ConditionDetailChartHeaderStringModel.symbolName.getter();
  v44 = v43;
  v45 = ((uint64_t (*)(char *, uint64_t))v29)(v22, v28);
  if (v44)
  {
    static Alignment.center.getter(v45);
    _FrameLayout.init(width:height:alignment:)(0x4010000000000000, 0, 0, 1);
    v77 = v95;
    v46 = v97;
    v75 = v98;
    v76 = v96;
    v73 = v100;
    v74 = v99;
    v47 = Image.init(systemName:)(v42, v44);
    v48 = (uint64_t)v78;
    static Image.TemplateRenderingMode.macSafeOriginal.getter();
    v49 = type metadata accessor for Image.TemplateRenderingMode(0);
    _s7Weather24LocationCompositionStateOwst_0(v48, 0, 1, v49);
    v50 = Image.renderingMode(_:)(v48, v47);
    swift_release();
    sub_100021A14(v48, &qword_100BDD818);
    v52 = v82;
    v51 = v83;
    v53 = v84;
    (*(void (**)(char *, _QWORD, uint64_t))(v83 + 104))(v82, enum case for Image.Scale.small(_:), v84);
    KeyPath = swift_getKeyPath(&unk_1009BF1A0);
    v55 = v85;
    (*(void (**)(char *, char *, uint64_t))(v51 + 16))((char *)v85 + *(int *)(v80 + 28), v52, v53);
    *v55 = KeyPath;
    v56 = v86;
    sub_100037794((uint64_t)v55, (uint64_t)v86 + *(int *)(v79 + 36), &qword_100BCF148);
    *v56 = v50;
    swift_retain();
    sub_100021A14((uint64_t)v55, &qword_100BCF148);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v53);
    swift_release();
    sub_1006CA0AC();
    v57 = *(_QWORD *)&v94[24];
    v58 = *(_QWORD *)&v94[32];
    sub_1000DB418(v94, *(uint64_t *)&v94[24]);
    v59 = dispatch thunk of ConditionDetailChartHeaderStyleType.title1Font.getter(v57, v58);
    v60 = swift_getKeyPath(&unk_1009BF1D0);
    v61 = (uint64_t)v88;
    sub_100037794((uint64_t)v56, (uint64_t)v88, &qword_100BCF140);
    v62 = (uint64_t *)(v61 + *(int *)(v81 + 36));
    *v62 = v60;
    v62[1] = v59;
    sub_100021A14((uint64_t)v56, &qword_100BCF140);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v94);
    v63 = v87;
    sub_1000F111C(v61, v87, &qword_100BD63E0);
    sub_100037794(v63, v61, &qword_100BD63E0);
    *(_QWORD *)v16 = 0;
    v16[8] = 1;
    *((_QWORD *)v16 + 2) = v77;
    v16[24] = v76;
    *((_QWORD *)v16 + 4) = v46;
    v16[40] = v75;
    v64 = v73;
    *((_QWORD *)v16 + 6) = v74;
    *((_QWORD *)v16 + 7) = v64;
    v65 = sub_1000BA294(&qword_100BFE0D8);
    sub_100037794(v61, (uint64_t)&v16[*(int *)(v65 + 48)], &qword_100BD63E0);
    sub_100021A14(v63, &qword_100BD63E0);
    sub_100021A14(v61, &qword_100BD63E0);
    v66 = sub_1000BA294(&qword_100BFE0C8);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v16, 0, 1, v66);
    v67 = (uint64_t)v89;
    sub_1000F111C((uint64_t)v16, (uint64_t)v89, &qword_100BFE098);
  }
  else
  {
    v68 = sub_1000BA294(&qword_100BFE0C8);
    v67 = (uint64_t)v89;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v89, 1, 1, v68);
  }
  memcpy(v92, v101, 0x132uLL);
  sub_100037794(v67, (uint64_t)v16, &qword_100BFE098);
  memcpy(v93, v92, 0x132uLL);
  v69 = v90;
  memcpy(v90, v92, 0x132uLL);
  v70 = sub_1000BA294(&qword_100BFE0D0);
  sub_100037794((uint64_t)v16, (uint64_t)v69 + *(int *)(v70 + 48), &qword_100BFE098);
  sub_1006CE008(v93);
  sub_100021A14(v67, &qword_100BFE098);
  sub_100021A14((uint64_t)v16, &qword_100BFE098);
  memcpy(v94, v92, sizeof(v94));
  return sub_1006CE008((__n128 *)v94);
}

double sub_1006CBC38@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(_QWORD);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  char v123;
  void (*v124)(char *, uint64_t, __n128);
  __n128 v125;
  __int128 v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  void (*v149)(char *);
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  char *v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD v179[7];
  unsigned __int8 v180;
  uint64_t v181;
  unsigned __int8 v182;
  uint64_t v183;
  uint64_t v184;
  void (*v185)(char *);
  unsigned __int8 v186;
  uint64_t v187;
  unsigned __int8 v188;
  __int128 v189;

  v2 = v1;
  v143 = a1;
  v3 = sub_1000BA294(&qword_100BD8A00);
  __chkstk_darwin(v3);
  v146 = (uint64_t)&v127 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = type metadata accessor for AttributedString(0);
  v142 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148);
  v141 = (char *)&v127 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v127 - v7;
  v9 = type metadata accessor for ConditionDetailChartHeaderViewModel(0);
  __chkstk_darwin(v9);
  v145 = (uint64_t)&v127 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v127 - v12;
  __chkstk_darwin(v14);
  v16 = (char *)&v127 - v15;
  sub_10000AB54(v1, (uint64_t)&v127 - v15, v17);
  v18 = ConditionDetailChartHeaderStringModel.title3.getter();
  v20 = v19;
  v21 = type metadata accessor for ConditionDetailChartHeaderStringModel(0);
  v149 = *(void (**)(char *))(*(_QWORD *)(v21 - 8) + 8);
  v150 = v21;
  v149(v16);
  v151 = v2;
  v147 = v8;
  if (v20)
  {
    v152 = v18;
    v153 = v20;
    v22 = sub_100114EF8();
    v23 = Text.init<A>(_:)(&v152, &type metadata for String, v22);
    v25 = v24;
    v144 = v13;
    v27 = v26;
    v29 = v28 & 1;
    sub_1006CA0AC();
    v30 = v155;
    v31 = v156;
    sub_1000DB418(&v152, v155);
    v32 = dispatch thunk of ConditionDetailChartHeaderStyleType.title3Font.getter(v30, v31);
    v33 = Text.font(_:)(v32, v23, v25, v29, v27);
    v35 = v34;
    v37 = v36;
    v39 = v38 & 1;
    v40 = v23;
    v2 = v151;
    sub_1000D31B4(v40, v25, v29);
    swift_release();
    swift_bridgeObjectRelease();
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v152);
    sub_1006CA0AC();
    v41 = v155;
    v42 = v156;
    sub_1000DB418(&v152, v155);
    v43 = v41;
    v8 = v147;
    v44 = v42;
    v13 = v144;
    v45 = dispatch thunk of ConditionDetailChartHeaderStyleType.title3Color.getter(v43, v44);
    v46 = Text.foregroundColor(_:)(v45, v33, v35, v39, v37);
    v139 = v47;
    v140 = v46;
    v137 = v48 & 1;
    v138 = v49;
    sub_1000D31B4(v33, v35, v39);
    swift_release();
    swift_bridgeObjectRelease();
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v152);
  }
  else
  {
    v139 = 0;
    v140 = 0;
    v137 = 0;
    v138 = 0;
  }
  sub_1006CA0AC();
  v50 = v155;
  v51 = v156;
  sub_1000DB418(&v152, v155);
  v52 = dispatch thunk of ConditionDetailChartHeaderStyleType.title3LeadingPadding.getter(v50, v51);
  v54 = v53;
  static Alignment.center.getter(v52);
  _FrameLayout.init(width:height:alignment:)(v54, 0, 0, 1);
  v136 = v179[6];
  v135 = v180;
  v134 = v181;
  v133 = v182;
  v131 = v184;
  v132 = v183;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v152);
  sub_10000AB54(v2, (uint64_t)v13, type metadata accessor for ConditionDetailChartHeaderViewModel);
  ConditionDetailChartHeaderStringModel.title1.getter();
  ((void (*)(char *, uint64_t))v149)(v13, v150);
  v55 = Text.init(_:)(v8);
  v57 = v56;
  v59 = v58;
  v61 = v60 & 1;
  sub_1006CA0AC();
  v62 = v155;
  v63 = v156;
  sub_1000DB418(&v152, v155);
  v64 = dispatch thunk of ConditionDetailChartHeaderStyleType.title1Font.getter(v62, v63);
  v65 = Text.font(_:)(v64, v55, v57, v61, v59);
  v67 = v66;
  v69 = v68;
  v71 = v70 & 1;
  sub_1000D31B4(v55, v57, v61);
  swift_release();
  swift_bridgeObjectRelease();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v152);
  sub_1006CA0AC();
  v72 = v155;
  v73 = v156;
  sub_1000DB418(&v152, v155);
  v74 = v151;
  v75 = dispatch thunk of ConditionDetailChartHeaderStyleType.title1Color.getter(v72, v73);
  v76 = Text.foregroundColor(_:)(v75, v65, v67, v71, v69);
  v130 = v77;
  v129 = v78;
  v144 = v79;
  sub_1000D31B4(v65, v67, v71);
  swift_release();
  swift_bridgeObjectRelease();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v152);
  v80 = v145;
  sub_10000AB54(v74, v145, type metadata accessor for ConditionDetailChartHeaderViewModel);
  v81 = v146;
  ConditionDetailChartHeaderStringModel.title2.getter();
  ((void (*)(uint64_t, uint64_t))v149)(v80, v150);
  v82 = v148;
  if (_s7Weather24LocationCompositionStateOwet_0(v81, 1, v148) == 1)
  {
    sub_100021A14(v81, &qword_100BD8A00);
    v83 = 0;
    v84 = 0;
    v85 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = 0uLL;
  }
  else
  {
    v93 = v141;
    v94 = v142;
    (*(void (**)(char *, uint64_t, uint64_t))(v142 + 32))(v141, v81, v82);
    sub_1006CA0AC();
    v95 = v155;
    v96 = v156;
    sub_1000DB418(&v152, v155);
    v97 = dispatch thunk of ConditionDetailChartHeaderStyleType.title2LeadingPadding.getter(v95, v96);
    v99 = v98;
    static Alignment.center.getter(v97);
    _FrameLayout.init(width:height:alignment:)(v99, 0, 0, 1);
    v149 = v185;
    v146 = v186;
    v145 = v187;
    v128 = v188;
    v127 = v189;
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v152);
    v100 = v147;
    (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v147, v93, v82);
    v101 = Text.init(_:)(v100);
    v103 = v102;
    v105 = v104;
    v107 = v106 & 1;
    sub_1006CA0AC();
    v108 = v155;
    v109 = v156;
    sub_1000DB418(&v152, v155);
    v110 = dispatch thunk of ConditionDetailChartHeaderStyleType.title2Font.getter(v108, v109);
    v111 = Text.font(_:)(v110, v101, v103, v107, v105);
    v113 = v112;
    v147 = v114;
    v150 = v76;
    v116 = v115 & 1;
    sub_1000D31B4(v101, v103, v107);
    swift_release();
    swift_bridgeObjectRelease();
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v152);
    sub_1006CA0AC();
    v117 = v155;
    v118 = v156;
    sub_1000DB418(&v152, v155);
    v119 = dispatch thunk of ConditionDetailChartHeaderStyleType.title2Color.getter(v117, v118);
    v88 = Text.foregroundColor(_:)(v119, v111, v113, v116, v147);
    v89 = v120;
    v91 = v121;
    v90 = v122 & 1;
    v123 = v116;
    v76 = v150;
    sub_1000D31B4(v111, v113, v123);
    swift_release();
    swift_bridgeObjectRelease();
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v152);
    LOBYTE(v152) = v90;
    sub_1000D55D4(v88, v89, v90);
    v124 = *(void (**)(char *, uint64_t, __n128))(v142 + 8);
    v125 = swift_bridgeObjectRetain();
    v124(v141, v148, v125);
    sub_1000D31B4(v88, v89, v152);
    swift_bridgeObjectRelease();
    v92 = v127;
    v87 = v128;
    v86 = v145;
    v85 = v146;
    v84 = (uint64_t)v149;
    v83 = 1;
  }
  v175 = v140;
  v176 = v139;
  v177 = v137;
  v178 = v138;
  v168 = 1;
  v169 = v136;
  v170 = v135;
  v171 = v134;
  v172 = v133;
  v173 = v132;
  v174 = v131;
  v179[0] = &v175;
  v179[1] = &v167;
  v163 = v76;
  v164 = v130;
  v165 = v129 & 1;
  v166 = v144;
  v167 = 0;
  v152 = 0;
  v153 = v83;
  v154 = v84;
  v155 = v85;
  v156 = v86;
  v157 = v87;
  v158 = v92;
  v159 = v88;
  v160 = v89;
  v161 = v90;
  v162 = v91;
  v179[2] = &v163;
  v179[3] = &v152;
  sub_10035EA70((uint64_t)v179, v143);
  sub_1006CE298(v152, v153, v154, v155, v156, v157, v158, *((uint64_t *)&v158 + 1), v159, v160, v161, v162);
  sub_1000D31B4(v163, v164, v165);
  swift_bridgeObjectRelease();
  return sub_10010F9B0(v175, v176, v177, v178);
}

void sub_1006CC488(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(_QWORD);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t KeyPath;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  char *v61;
  __n128 v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char v95;
  char *v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  __n128 v108;
  void (*v109)(char *, uint64_t, __n128);
  __n128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  double v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  double v151;
  BOOL v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  int v175;
  int v176;
  int v177;
  void *v178;
  void (*v179)(char *, uint64_t);
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _BYTE v197[7];
  char v198;
  _BYTE v199[7];
  char v200;
  _BYTE v201[7];
  char v202;
  _BYTE v203[7];
  char v204;
  _BYTE v205[7];
  char v206;
  _DWORD v207[2];
  _DWORD v208[2];
  _BYTE v209[147];
  __n128 v210[9];
  _QWORD v211[39];
  __n128 v212[9];
  _QWORD v213[22];
  unsigned __int8 v214;
  uint64_t v215;
  unsigned __int8 v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned __int8 v220;
  char *v221;
  unsigned __int8 v222;
  uint64_t v223;
  void (*v224)(char *, uint64_t);

  v2 = v1;
  v178 = a1;
  v3 = type metadata accessor for Text.Scale(0);
  v171 = *(_QWORD *)(v3 - 8);
  v172 = v3;
  __chkstk_darwin(v3);
  v168 = (char *)&v168 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = type metadata accessor for AttributedString.CharacterView(0);
  __chkstk_darwin(v182);
  v170 = (char *)&v168 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100BD8A00);
  __chkstk_darwin(v6);
  v193 = (uint64_t)&v168 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = type metadata accessor for AttributedString(0);
  v181 = *(_QWORD *)(v194 - 8);
  __chkstk_darwin(v194);
  v174 = (char *)&v168 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v168 - v10;
  v12 = type metadata accessor for ConditionDetailChartHeaderViewModel(0);
  __chkstk_darwin(v12);
  v173 = (char *)&v168 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v192 = (uint64_t)&v168 - v15;
  __chkstk_darwin(v16);
  v18 = (char *)&v168 - v17;
  sub_10000AB54(v2, (uint64_t)&v168 - v17, v19);
  ConditionDetailChartHeaderStringModel.title1.getter();
  v20 = type metadata accessor for ConditionDetailChartHeaderStringModel(0);
  v179 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8);
  v180 = v20;
  v179(v18, v20);
  v169 = v11;
  v21 = Text.init(_:)(v11);
  v23 = v22;
  v25 = v24;
  v27 = v26 & 1;
  sub_1006CA0AC();
  v28 = v211[3];
  v29 = v211[4];
  sub_1000DB418(v211, v211[3]);
  v30 = dispatch thunk of ConditionDetailChartHeaderStyleType.title1Font.getter(v28, v29);
  v31 = Text.font(_:)(v30, v21, v23, v27, v25);
  v33 = v32;
  v35 = v34;
  v37 = v36 & 1;
  sub_1000D31B4(v21, v23, v27);
  swift_release();
  swift_bridgeObjectRelease();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v211);
  v38 = v196;
  sub_1006CA0AC();
  v39 = v211[3];
  v40 = v211[4];
  sub_1000DB418(v211, v211[3]);
  v41 = v39;
  v42 = v180;
  v43 = dispatch thunk of ConditionDetailChartHeaderStyleType.title1Color.getter(v41, v40);
  v189 = Text.foregroundColor(_:)(v43, v31, v33, v37, v35);
  v190 = v44;
  v191 = v45;
  v177 = v46;
  v47 = v33;
  v48 = (void (*)(uint64_t, uint64_t))v179;
  LOBYTE(v46) = v37;
  v49 = v194;
  sub_1000D31B4(v31, v47, v46);
  swift_release();
  swift_bridgeObjectRelease();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v211);
  LODWORD(v31) = sub_1006CA2B0();
  KeyPath = swift_getKeyPath(&unk_1009BF170);
  v175 = sub_1006CA2B0();
  v51 = v192;
  sub_10000AB54(v38, v192, type metadata accessor for ConditionDetailChartHeaderViewModel);
  v52 = v193;
  ConditionDetailChartHeaderStringModel.title2.getter();
  v48(v51, v42);
  v53 = _s7Weather24LocationCompositionStateOwet_0(v52, 1, v49);
  v195 = KeyPath;
  v176 = v31;
  if (v53 == 1)
  {
    sub_100021A14(v52, &qword_100BD8A00);
    v182 = 0;
    v183 = 0;
    v187 = 0;
    v188 = 0;
    v185 = 0;
    v186 = 0;
    v184 = 0;
    v181 = 0;
    v193 = 0;
    v194 = 0;
    v192 = 0;
    LODWORD(v174) = 0;
    v54 = (uint64_t)v173;
    goto LABEL_11;
  }
  v55 = v181;
  v56 = v174;
  (*(void (**)(char *, uint64_t, uint64_t))(v181 + 32))(v174, v52, v49);
  sub_1006CA0AC();
  v57 = v211[3];
  v58 = v211[4];
  sub_1000DB418(v211, v211[3]);
  v59 = dispatch thunk of ConditionDetailChartHeaderStyleType.title2LeadingPadding.getter(v57, v58);
  static Alignment.center.getter(v60);
  _FrameLayout.init(width:height:alignment:)(*(_QWORD *)&v59, 0, 0, 1);
  v187 = v214;
  v188 = v213[21];
  v185 = v216;
  v186 = v215;
  v183 = v218;
  v184 = v217;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v211);
  v61 = v170;
  AttributedString.characters.getter(v62);
  sub_10000F1C8(&qword_100BCB0B0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.CharacterView);
  v170 = (char *)String.init<A>(_:)(v61, v182);
  v192 = v63;
  v64 = v169;
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v169, v56, v49);
  v65 = Text.init(_:)(v64);
  v67 = v66;
  v69 = v68;
  v71 = v70 & 1;
  sub_1006CA0AC();
  v72 = v211[3];
  v73 = v211[4];
  sub_1000DB418(v211, v211[3]);
  v74 = dispatch thunk of ConditionDetailChartHeaderStyleType.title2Font.getter(v72, v73);
  v75 = Text.font(_:)(v74, v65, v67, v71, v69);
  v77 = v76;
  v193 = v78;
  v80 = v79 & 1;
  sub_1000D31B4(v65, v67, v71);
  swift_release();
  swift_bridgeObjectRelease();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v211);
  sub_1006CA0AC();
  v81 = v211[3];
  v82 = v211[4];
  sub_1000DB418(v211, v211[3]);
  v83 = dispatch thunk of ConditionDetailChartHeaderStyleType.title2Color.getter(v81, v82);
  v84 = Text.foregroundColor(_:)(v83, v75, v77, v80, v193);
  v86 = v85;
  LODWORD(v182) = v87;
  v89 = v88;
  sub_1000D31B4(v75, v77, v80);
  swift_release();
  swift_bridgeObjectRelease();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v211);
  sub_1006CA0AC();
  v90 = v211[3];
  v91 = v211[4];
  sub_1000DB418(v211, v211[3]);
  v92 = v86;
  if ((dispatch thunk of ConditionDetailChartHeaderStyleType.applySecondaryTextScaleToTitle2.getter(v90, v91) & 1) != 0)
  {
    v93 = v170;
    v94 = v192;
    v95 = String.isPercentSymbol.getter(v170, v192);
    v54 = (uint64_t)v173;
    v96 = v168;
    if ((v95 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v97 = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v211);
LABEL_9:
      static Text.Scale.secondary.getter(v97);
      goto LABEL_10;
    }
    v98 = String.containsOnlyPunctuationCharacters.getter(v93, v94);
    swift_bridgeObjectRelease();
    v97 = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v211);
    if ((v98 & 1) == 0)
      goto LABEL_9;
  }
  else
  {
    swift_bridgeObjectRelease();
    v97 = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v211);
    v54 = (uint64_t)v173;
    v96 = v168;
  }
  static Text.Scale.default.getter(v97);
LABEL_10:
  v99 = v182 & 1;
  v182 = 1;
  v100 = Text.textScale(_:isEnabled:)(v96, 1, v84, v92, v99, v89);
  v102 = v101;
  v104 = v103;
  v105 = v84;
  v107 = v106 & 1;
  sub_1000D31B4(v105, v92, v99);
  v108 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, __n128))(v171 + 8))(v96, v172, v108);
  LOBYTE(v211[0]) = v107;
  v192 = v107;
  sub_1000D55D4(v100, v102, v107);
  v109 = *(void (**)(char *, uint64_t, __n128))(v181 + 8);
  v110 = swift_bridgeObjectRetain();
  v109(v174, v194, v110);
  v181 = v100;
  v194 = v102;
  sub_1000D31B4(v100, v102, v211[0]);
  v193 = v104;
  swift_bridgeObjectRelease();
  LODWORD(v174) = 257;
  v48 = (void (*)(uint64_t, uint64_t))v179;
  v42 = v180;
LABEL_11:
  sub_10000AB54(v196, v54, type metadata accessor for ConditionDetailChartHeaderViewModel);
  v111 = ConditionDetailChartHeaderStringModel.title3.getter();
  v113 = v112;
  v48(v54, v42);
  if (v113)
  {
    sub_1006CA0AC();
    v114 = v211[3];
    v115 = v211[4];
    sub_1000DB418(v211, v211[3]);
    v116 = dispatch thunk of ConditionDetailChartHeaderStyleType.title3LeadingPadding.getter(v114, v115);
    static Alignment.center.getter(v117);
    _FrameLayout.init(width:height:alignment:)(*(_QWORD *)&v116, 0, 0, 1);
    LODWORD(v171) = v220;
    v172 = v219;
    v173 = v221;
    LODWORD(v170) = v222;
    v179 = v224;
    v180 = v223;
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v211);
    v211[0] = v111;
    v211[1] = v113;
    v118 = sub_100114EF8();
    v119 = Text.init<A>(_:)(v211, &type metadata for String, v118);
    v121 = v120;
    v123 = v122;
    v125 = v124 & 1;
    sub_1006CA0AC();
    v126 = v211[3];
    v127 = v211[4];
    sub_1000DB418(v211, v211[3]);
    v128 = dispatch thunk of ConditionDetailChartHeaderStyleType.title3Font.getter(v126, v127);
    v129 = Text.font(_:)(v128, v119, v121, v125, v123);
    v131 = v130;
    v169 = v132;
    v134 = v133 & 1;
    sub_1000D31B4(v119, v121, v125);
    swift_release();
    swift_bridgeObjectRelease();
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v211);
    sub_1006CA0AC();
    v135 = v211[3];
    v136 = v211[4];
    sub_1000DB418(v211, v211[3]);
    v137 = dispatch thunk of ConditionDetailChartHeaderStyleType.title3Color.getter(v135, v136);
    v138 = Text.foregroundColor(_:)(v137, v129, v131, v134, v169);
    v140 = v139;
    v142 = v141;
    LOBYTE(v125) = v143 & 1;
    sub_1000D31B4(v129, v131, v134);
    swift_release();
    swift_bridgeObjectRelease();
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v211);
    v144 = swift_getKeyPath(&unk_1009BF200);
    v145 = swift_getKeyPath(&unk_1009BF170);
    v146 = swift_getKeyPath(&unk_1009BF230);
    v206 = 1;
    v147 = v171;
    v204 = v171;
    LOBYTE(v134) = (_BYTE)v170;
    v202 = (char)v170;
    v200 = v125;
    v198 = 0;
    v212[0].n128_u32[0] = *(_DWORD *)v205;
    *(unsigned __int32 *)((char *)v212[0].n128_u32 + 3) = *(_DWORD *)&v205[3];
    v210[0].n128_u32[0] = *(_DWORD *)v203;
    *(unsigned __int32 *)((char *)v210[0].n128_u32 + 3) = *(_DWORD *)&v203[3];
    *(_DWORD *)&v209[3] = *(_DWORD *)&v201[3];
    *(_DWORD *)v209 = *(_DWORD *)v201;
    LODWORD(v169) = v125;
    *(_DWORD *)((char *)v208 + 3) = *(_DWORD *)&v199[3];
    v208[0] = *(_DWORD *)v199;
    LODWORD(v196) = 0;
    *(_DWORD *)((char *)v207 + 3) = *(_DWORD *)&v197[3];
    v207[0] = *(_DWORD *)v197;
    sub_1000D55D4(v138, v140, v125);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1000D31B4(v138, v140, v125);
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v211[0] = 0;
    LOBYTE(v211[1]) = 1;
    *(_DWORD *)((char *)&v211[1] + 1) = v212[0].n128_u32[0];
    HIDWORD(v211[1]) = *(unsigned __int32 *)((char *)v212[0].n128_u32 + 3);
    v211[2] = v172;
    LOBYTE(v211[3]) = v147;
    *(_DWORD *)((char *)&v211[3] + 1) = v210[0].n128_u32[0];
    HIDWORD(v211[3]) = *(unsigned __int32 *)((char *)v210[0].n128_u32 + 3);
    v211[4] = v173;
    LOBYTE(v211[5]) = v134;
    *(_DWORD *)((char *)&v211[5] + 1) = *(_DWORD *)v209;
    HIDWORD(v211[5]) = *(_DWORD *)&v209[3];
    v211[6] = v180;
    v211[7] = v179;
    v211[8] = v138;
    v211[9] = v140;
    LOBYTE(v211[10]) = (_BYTE)v169;
    HIDWORD(v211[10]) = *(_DWORD *)((char *)v208 + 3);
    *(_DWORD *)((char *)&v211[10] + 1) = v208[0];
    v211[11] = v142;
    v211[12] = v144;
    v211[13] = 1;
    LOBYTE(v211[14]) = v196;
    HIDWORD(v211[14]) = *(_DWORD *)((char *)v207 + 3);
    *(_DWORD *)((char *)&v211[14] + 1) = v207[0];
    v211[15] = v145;
    v211[16] = 0x3FE6666666666666;
    v211[17] = v146;
    LOBYTE(v211[18]) = 1;
    LocationSearchEntityFromStringResolver.init()();
  }
  else
  {
    sub_1006CE360(v211);
  }
  sub_1000F111C((uint64_t)v211, (uint64_t)v213, &qword_100BFE0E0);
  v149 = v189;
  v148 = v190;
  v150 = v177 & 1;
  if ((v176 & 1) != 0)
    v151 = 0.5;
  else
    v151 = 1.0;
  v152 = (v175 & 1) == 0;
  sub_1000F111C((uint64_t)v213, (uint64_t)v209, &qword_100BFE0E0);
  sub_1000F111C((uint64_t)v209, (uint64_t)v210, &qword_100BFE0E0);
  v211[0] = v149;
  v153 = v191;
  v211[1] = v191;
  LOBYTE(v211[2]) = v150;
  LODWORD(v196) = v150;
  v211[3] = v148;
  v211[4] = v195;
  *(double *)&v211[5] = v151;
  LOWORD(v211[6]) = v152;
  v211[7] = 0;
  v211[8] = v182;
  v211[9] = v188;
  v211[10] = v187;
  v211[11] = v186;
  v211[12] = v185;
  v211[13] = v184;
  v211[14] = v183;
  v211[15] = v181;
  v154 = v193;
  v155 = v194;
  v211[16] = v194;
  v156 = v192;
  v211[17] = v192;
  v211[18] = v193;
  LOWORD(v211[19]) = (_WORD)v174;
  sub_1000F111C((uint64_t)v210, (uint64_t)&v211[20], &qword_100BFE0E0);
  memcpy(v178, v211, 0x131uLL);
  sub_1000F111C((uint64_t)v209, (uint64_t)v212, &qword_100BFE0E0);
  sub_1000D55D4(v149, v153, v150);
  swift_bridgeObjectRetain();
  swift_retain();
  v166 = v156;
  v167 = v154;
  v165 = v155;
  v157 = v181;
  v158 = v182;
  v159 = v183;
  v161 = v187;
  v160 = v188;
  v163 = v185;
  v162 = v186;
  v164 = v184;
  sub_10036A88C(0, v182, v188, v187, v186, v185, v184, v183, v181, v165, v166, v167);
  sub_1006CE368(v210);
  sub_1006CE368(v212);
  sub_1006CE298(0, v158, v160, v161, v162, v163, v164, v159, v157, v194, v192, v193);
  sub_1000D31B4(v189, v191, v196);
  swift_release();
  swift_bridgeObjectRelease();
}

double sub_1006CD278@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  __n128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  double result;
  unsigned int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t v129;
  void (*v130)(char *, uint64_t);
  void (*v131)(char *);
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t *v153;
  uint64_t *v154;
  uint64_t v155;

  v134 = a3;
  v127 = a2;
  v128 = a1;
  v126 = a4;
  v7 = type metadata accessor for ConditionDetailChartHeaderViewModel(0);
  __chkstk_darwin(v7);
  v121 = (uint64_t)&v116 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Font.TextStyle(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v116 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = a1;
  v152 = a2;
  v13 = sub_100114EF8();
  v132 = v13;
  swift_bridgeObjectRetain();
  v14 = Text.init<A>(_:)(&v151, &type metadata for String, v13);
  v16 = v15;
  v125 = v17;
  v19 = v18 & 1;
  v131 = *(void (**)(char *))(v10 + 104);
  v116 = enum case for Font.TextStyle.subheadline(_:);
  v133 = v9;
  v131(v12);
  v129 = *(int *)(v7 + 20);
  sub_100882E78(*(_BYTE *)(a3 + v129));
  v21 = (uint64_t)v154;
  v20 = v155;
  sub_1000DB418(&v151, (uint64_t)v154);
  dispatch thunk of ConditionDetailChartHeaderStyleType.subtitleFontWeight.getter(v21, v20);
  v22 = static Font.system(_:weight:)(v12);
  v130 = *(void (**)(char *, uint64_t))(v10 + 8);
  v130(v12, v9);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v151);
  v23 = Text.font(_:)(v22, v14, v16, v19, v125);
  v25 = v24;
  LOBYTE(v10) = v26;
  v28 = v27;
  swift_release();
  sub_1000D31B4(v14, v16, v19);
  v29 = swift_bridgeObjectRelease();
  v30 = static Color.secondary.getter(v29);
  v124 = Text.foregroundColor(_:)(v30, v23, v25, v10 & 1, v28);
  v123 = v31;
  v122 = v32;
  v125 = v33;
  swift_release();
  sub_1000D31B4(v23, v25, v10 & 1);
  swift_bridgeObjectRelease();
  v151 = v128;
  v152 = v127;
  swift_bridgeObjectRetain();
  v34 = Text.init<A>(_:)(&v151, &type metadata for String, v132);
  v36 = v35;
  v38 = v37;
  v40 = v39 & 1;
  v41 = v133;
  ((void (*)(char *, _QWORD, uint64_t))v131)(v12, enum case for Font.TextStyle.footnote(_:), v133);
  sub_100882E78(*(_BYTE *)(v134 + v129));
  v42 = (uint64_t)v154;
  v43 = v155;
  sub_1000DB418(&v151, (uint64_t)v154);
  dispatch thunk of ConditionDetailChartHeaderStyleType.subtitleFontWeight.getter(v42, v43);
  v44 = static Font.system(_:weight:)(v12);
  v130(v12, v41);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v151);
  v45 = Text.font(_:)(v44, v34, v36, v40, v38);
  v47 = v46;
  LOBYTE(v41) = v48;
  v50 = v49;
  swift_release();
  sub_1000D31B4(v34, v36, v40);
  v51 = swift_bridgeObjectRelease();
  v52 = static Color.secondary.getter(v51);
  v119 = Text.foregroundColor(_:)(v52, v45, v47, v41 & 1, v50);
  v118 = v53;
  v117 = v54;
  v120 = v55;
  swift_release();
  sub_1000D31B4(v45, v47, v41 & 1);
  swift_bridgeObjectRelease();
  v151 = v128;
  v152 = v127;
  swift_bridgeObjectRetain();
  v56 = Text.init<A>(_:)(&v151, &type metadata for String, v132);
  v58 = v57;
  v60 = v59;
  v62 = v61 & 1;
  v63 = v133;
  ((void (*)(char *, _QWORD, uint64_t))v131)(v12, enum case for Font.TextStyle.caption2(_:), v133);
  sub_100882E78(*(_BYTE *)(v134 + v129));
  v64 = (uint64_t)v154;
  v65 = v155;
  sub_1000DB418(&v151, (uint64_t)v154);
  dispatch thunk of ConditionDetailChartHeaderStyleType.subtitleFontWeight.getter(v64, v65);
  v66 = static Font.system(_:weight:)(v12);
  v130(v12, v63);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v151);
  v67 = Text.font(_:)(v66, v56, v58, v62, v60);
  v69 = v68;
  LOBYTE(v65) = v70;
  v72 = v71;
  swift_release();
  LOBYTE(v66) = v65 & 1;
  sub_1000D31B4(v56, v58, v62);
  v73 = swift_bridgeObjectRelease();
  v74 = static Color.secondary.getter(v73);
  v75 = Text.foregroundColor(_:)(v74, v67, v69, v65 & 1, v72);
  v77 = v76;
  LODWORD(v128) = v78;
  v80 = v79;
  swift_release();
  v81 = v67;
  v82 = v134;
  sub_1000D31B4(v81, v69, v66);
  swift_bridgeObjectRelease();
  v83 = v121;
  sub_10000AB54(v82, v121, type metadata accessor for ConditionDetailChartHeaderViewModel);
  v84 = ConditionDetailChartHeaderStringModel.subtitleTruncationAlternative.getter();
  v86 = v85;
  v87 = type metadata accessor for ConditionDetailChartHeaderStringModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 8))(v83, v87);
  if (v86)
  {
    v151 = (uint64_t *)v84;
    v152 = (uint64_t *)v86;
    v88 = Text.init<A>(_:)(&v151, &type metadata for String, v132);
    v90 = v89;
    v92 = v91;
    v127 = (uint64_t *)v75;
    v94 = v93 & 1;
    v132 = v80;
    v95 = v133;
    ((void (*)(char *, _QWORD, uint64_t))v131)(v12, v116, v133);
    sub_100882E78(*(_BYTE *)(v82 + v129));
    v96 = (uint64_t)v154;
    v97 = v155;
    sub_1000DB418(&v151, (uint64_t)v154);
    dispatch thunk of ConditionDetailChartHeaderStyleType.subtitleFontWeight.getter(v96, v97);
    v98 = static Font.system(_:weight:)(v12);
    v130(v12, v95);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v151);
    v99 = Text.font(_:)(v98, v88, v90, v94, v92);
    v101 = v100;
    LOBYTE(v96) = v102;
    v104 = v103;
    swift_release();
    v134 = v77;
    v105 = v96 & 1;
    sub_1000D31B4(v88, v90, v94);
    v106 = swift_bridgeObjectRelease();
    v107 = static Color.secondary.getter(v106);
    v108 = Text.foregroundColor(_:)(v107, v99, v101, v96 & 1, v104);
    v86 = v109;
    LOBYTE(v94) = v110;
    v112 = v111;
    swift_release();
    v113 = v94 & 1;
    v75 = (uint64_t)v127;
    v114 = v105;
    v77 = v134;
    sub_1000D31B4(v99, v101, v114);
    v80 = v132;
    swift_bridgeObjectRelease();
  }
  else
  {
    v108 = 0;
    v113 = 0;
    v112 = 0;
  }
  v147 = v124;
  v148 = v123;
  v149 = v122 & 1;
  v150 = v125;
  v143 = v119;
  v144 = v118;
  v145 = v117 & 1;
  v146 = v120;
  v151 = &v147;
  v152 = &v143;
  v139 = v75;
  v140 = v77;
  v141 = v128 & 1;
  v142 = v80;
  v135 = v108;
  v136 = v86;
  v137 = v113;
  v138 = v112;
  v153 = &v139;
  v154 = &v135;
  sub_10035EB84((uint64_t)&v151, v126);
  sub_10010F9B0(v135, v136, v137, v138);
  sub_1000D31B4(v139, v140, v141);
  swift_bridgeObjectRelease();
  sub_1000D31B4(v143, v144, v145);
  swift_bridgeObjectRelease();
  sub_1000D31B4(v147, v148, v149);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

unint64_t sub_1006CDAE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFE010;
  if (!qword_100BFE010)
  {
    v1 = sub_100075EB0(&qword_100BFDFF8);
    sub_10003D2DC(&qword_100BFE018, &qword_100BFDFF0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFE010);
  }
  return result;
}

void sub_1006CDB74(void *a1)
{
  bzero(a1, 0x88uLL);
}

double sub_1006CDB7C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17)
{
  char v19;
  double result;

  if (a5)
  {
    v19 = a8 & 1;
    sub_1000D55D4(a2, a3, a4 & 1);
    swift_bridgeObjectRetain();
    sub_1000D55D4(a6, a7, v19);
    swift_bridgeObjectRetain();
    sub_1000D55D4(a10, a11, a12 & 1);
    swift_bridgeObjectRetain();
    return sub_10010F980(a14, a15, a16, a17);
  }
  return result;
}

uint64_t sub_1006CDC54(__n128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  sub_1000BB3A0(a1);
  sub_1000CD154(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return v1;
}

double sub_1006CDC88(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17)
{
  char v19;
  double result;

  if (a5)
  {
    v19 = a8 & 1;
    sub_1000D31B4(a2, a3, a4 & 1);
    swift_bridgeObjectRelease();
    sub_1000D31B4(a6, a7, v19);
    swift_bridgeObjectRelease();
    sub_1000D31B4(a10, a11, a12 & 1);
    swift_bridgeObjectRelease();
    return sub_10010F9B0(a14, a15, a16, a17);
  }
  return result;
}

uint64_t sub_1006CDD60(uint64_t result)
{
  *(_BYTE *)(result + 305) = 1;
  return result;
}

double sub_1006CDD6C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,char a40)
{
  if ((a40 & 1) != 0)
  {
    sub_1000D55D4(a1, a2, a3 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10036A88C(a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
    return sub_1006CDF98(a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32);
  }
  else
  {
    sub_10010F980(a1, a2, a3, a4);
    sub_1000D55D4(a13, a14, a15 & 1);
    swift_bridgeObjectRetain();
    return sub_10036A88C(a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28);
  }
}

double sub_1006CDF98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  double result;

  if (a12)
  {
    sub_1000D55D4(a9, a10, a11 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    *(_QWORD *)&result = swift_retain().n128_u64[0];
  }
  return result;
}

uint64_t sub_1006CE008(__n128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  sub_1000BB3A0(a1);
  sub_1000CD154(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return v1;
}

double sub_1006CE074(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,char a40)
{
  if ((a40 & 1) != 0)
  {
    sub_1000D31B4(a1, a2, a3 & 1);
    swift_release();
    swift_bridgeObjectRelease();
    sub_1006CE298(a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
    return sub_1006CE2D8(a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32);
  }
  else
  {
    sub_10010F9B0(a1, a2, a3, a4);
    sub_1000D31B4(a13, a14, a15 & 1);
    swift_bridgeObjectRelease();
    return sub_1006CE298(a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28);
  }
}

double sub_1006CE298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  double result;

  if (a12)
  {
    sub_1000D31B4(a9, a10, a11 & 1);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  }
  return result;
}

double sub_1006CE2D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  double result;

  if (a12)
  {
    sub_1000D31B4(a9, a10, a11 & 1);
    swift_release();
    swift_release();
    swift_release();
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  }
  return result;
}

uint64_t sub_1006CE358(uint64_t result)
{
  *(_BYTE *)(result + 305) = 0;
  return result;
}

void sub_1006CE360(void *a1)
{
  bzero(a1, 0x91uLL);
}

uint64_t sub_1006CE368(__n128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  sub_1000BB3A0(a1);
  sub_1000CD154(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return v1;
}

uint64_t sub_1006CE3AC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.allowsTightening.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1006CE3D8(unsigned __int8 *a1)
{
  return EnvironmentValues.allowsTightening.setter(*a1);
}

unint64_t sub_1006CE400()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFE0E8;
  if (!qword_100BFE0E8)
  {
    v1 = sub_100075EB0(&qword_100BD9B60);
    sub_1006CE484();
    sub_10000F1C8((unint64_t *)&qword_100BC6768, type metadata accessor for AutomationInfoViewModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFE0E8);
  }
  return result;
}

unint64_t sub_1006CE484()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100BFE0F0;
  if (!qword_100BFE0F0)
  {
    v1 = sub_100075EB0(&qword_100BD9B58);
    v2[0] = sub_100075EB0(&qword_100BFDFF8);
    v2[1] = sub_1006CDAE8();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10000F1C8((unint64_t *)&qword_100BC4E48, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFE0F0);
  }
  return result;
}

uint64_t sub_1006CE530@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v12;

  v4 = type metadata accessor for ArticlePlacementLocation(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DetailCondition(0);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 88))(a1, v8);
  if ((_DWORD)v9 == enum case for DetailCondition.conditions(_:))
  {
    sub_1000BC8CC(v9, enum case for ArticlePlacementLocation.temperatureDetail(_:));
    sub_1000BB3C8();
LABEL_16:
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
    return _s7Weather24LocationCompositionStateOwst_0(a2, 0, 1, v4);
  }
  if ((_DWORD)v9 == enum case for DetailCondition.humidity(_:))
  {
    v10 = (unsigned int *)&enum case for ArticlePlacementLocation.humidityDetail(_:);
LABEL_15:
    sub_1000BC8CC(v9, *v10);
    goto LABEL_16;
  }
  if ((_DWORD)v9 == enum case for DetailCondition.pressure(_:))
  {
    v10 = (unsigned int *)&enum case for ArticlePlacementLocation.pressureDetail(_:);
    goto LABEL_15;
  }
  if ((_DWORD)v9 == enum case for DetailCondition.precipitationTotal(_:))
  {
    v10 = (unsigned int *)&enum case for ArticlePlacementLocation.precipitationDetail(_:);
    goto LABEL_15;
  }
  if ((_DWORD)v9 == enum case for DetailCondition.uvIndex(_:))
  {
    v10 = (unsigned int *)&enum case for ArticlePlacementLocation.uvIndexDetail(_:);
    goto LABEL_15;
  }
  if ((_DWORD)v9 == enum case for DetailCondition.visibility(_:))
  {
    v10 = (unsigned int *)&enum case for ArticlePlacementLocation.visibilityDetail(_:);
    goto LABEL_15;
  }
  if ((_DWORD)v9 == enum case for DetailCondition.wind(_:))
  {
    v10 = (unsigned int *)&enum case for ArticlePlacementLocation.windDetail(_:);
    goto LABEL_15;
  }
  sub_1000BB3C8();
  return _s7Weather24LocationCompositionStateOwst_0(a2, 1, 1, v4);
}

uint64_t sub_1006CE70C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  _OWORD v9[2];
  uint64_t v10;

  v2 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(uint64_t (**)(uint64_t))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  swift_retain();
  sub_10005C9C8((uint64_t)v4);
  v7 = type metadata accessor for LocationsAction(0);
  swift_storeEnumTagMultiPayload(v4, v7, 0);
  swift_storeEnumTagMultiPayload(v4, v2, 3);
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  sub_1000A5EBC((uint64_t)v4, (uint64_t)v9, v5);
  sub_100021A14((uint64_t)v9, (uint64_t *)&unk_100BFFA10);
  sub_1000215BC((uint64_t)v4, type metadata accessor for MainAction);
  return swift_release(v6);
}

uint64_t sub_1006CE800(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v3 = v1[16];
  v4 = v1[17];
  sub_1000DB418(v1 + 13, v3);
  v5 = dispatch thunk of LocationMetadataManagerType.resolveAddress(for:)(a1, v3, v4);
  v6 = (void *)zalgo.getter();
  v7 = Promise.then<A>(on:closure:)(v6, LocationSearchEntityFromStringResolver.init(), 0, (char *)&type metadata for () + 8);
  swift_release(v5);

  return v7;
}

void sub_1006CE884()
{
  uint64_t v0;

  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 32));
  swift_release();
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 104));

  sub_10004A298();
}

uint64_t sub_1006CE8D0()
{
  uint64_t v0;

  sub_1006CE884();
  return swift_deallocClassInstance(v0, 152, 7);
}

void sub_1006CE8F0()
{
  uint64_t v0;

  sub_1000DD238();
  v0 = sub_1000DDE44();
  dispatch thunk of LocationManagerType.removeObserver(_:)(v0);
  sub_100079F70();
}

uint64_t sub_1006CE918(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  if (qword_100BC24A0 != -1)
    swift_once(&qword_100BC24A0, sub_1001596C4);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_1000AECD4(v3, (uint64_t)qword_100CAF1C8);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Current location updated, confirm address", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  return sub_1006CE800(a2);
}

uint64_t sub_1006CEA08(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  if (qword_100BC24A0 != -1)
    swift_once(&qword_100BC24A0, sub_1001596C4);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_1000AECD4(v3, (uint64_t)qword_100CAF1C8);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Current location updated, post sync", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  swift_retain();
  asyncMain(block:)(sub_1006CECCC, a2);
  return swift_release(a2);
}

void sub_1006CEB08(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  NSObject *oslog;
  uint64_t v11;
  uint64_t v12;

  if (qword_100BC24A0 != -1)
    swift_once(&qword_100BC24A0, sub_1001596C4);
  v3 = type metadata accessor for Logger(0);
  sub_1000AECD4(v3, (uint64_t)qword_100CAF1C8);
  sub_1000B47AC();
  v4 = sub_1000B47AC();
  oslog = Logger.logObject.getter(v4);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = (uint8_t *)sub_100098710(12);
    v7 = sub_100098710(32);
    v11 = a2;
    v12 = v7;
    *(_DWORD *)v6 = 136446210;
    sub_1000B47AC();
    sub_1000BA294(&qword_100BD7910);
    v8 = String.init<A>(describing:)(&v11);
    v11 = sub_1000CE1C8(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12);
    swift_bridgeObjectRelease();
    sub_1000B47A4();
    sub_1000B47A4();
    _os_log_impl((void *)&_mh_execute_header, oslog, v5, "location update failed with error: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1);
    sub_1000986F0(v7);
    sub_1000986F0((uint64_t)v6);

  }
  else
  {
    sub_1000B47A4();
    sub_1000B47A4();

  }
}

uint64_t sub_1006CECB0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  return LocationManagerObserver.authorizationDidChange(_:authorizationStatus:)(a1, a2, *v2);
}

void sub_1006CECB8(uint64_t a1, uint64_t a2)
{
  sub_1006CEB08(a1, a2);
}

uint64_t sub_1006CECD0()
{
  uint64_t v0;

  return sub_1006CE918(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t type metadata accessor for NoAqiSevereNhpNewsContentView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NoAqiSevereNhpNewsContentView);
}

uint64_t sub_1006CECF4(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100ABD92C, 1);
}

uint64_t sub_1006CED28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  void *v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD, _QWORD);
  uint64_t WitnessTable;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, char *, uint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t (*v52)(_QWORD, _QWORD);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  _QWORD v64[2];
  _QWORD v65[2];
  _QWORD v66[4];
  _BYTE v67[520];
  _QWORD v68[66];

  v63 = a4;
  v56 = a3;
  v61 = a7;
  v68[0] = a5;
  v68[1] = a5;
  v68[2] = a5;
  v68[3] = a5;
  v10 = a2;
  v11 = a2 & 0x100;
  v68[4] = a5;
  v68[5] = a5;
  v68[6] = a5;
  v68[7] = a5;
  v12 = sub_1000BA3E0(a1, a2, (uint64_t)v68);
  v54 = sub_1000AE86C(v12);
  v13 = type metadata accessor for Group(0, v54);
  v14 = *(_QWORD *)(v13 - 8);
  v57 = v13;
  v58 = v14;
  __chkstk_darwin(v13);
  sub_1000986FC();
  v60 = v15;
  __chkstk_darwin(v16);
  v59 = (char *)&v49 - v17;
  v68[0] = a5;
  v68[1] = a5;
  v68[2] = a5;
  v68[3] = type metadata accessor for Optional(255, a5);
  v68[4] = a5;
  v68[5] = a5;
  v68[6] = a5;
  v68[7] = a5;
  v19 = sub_1000BA3E0(v68[3], v18, (uint64_t)v68);
  v52 = (uint64_t (*)(_QWORD, _QWORD))sub_1000AE86C(v19);
  v55 = type metadata accessor for Group(0, v52);
  v53 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  sub_1000986FC();
  v21 = v20;
  __chkstk_darwin(v22);
  v62 = (char *)&v49 - v23;
  if (v10)
  {
    if (v10 == 1)
    {
      if (v11)
      {
        v24 = &unk_100BEC8C8;
        goto LABEL_11;
      }
    }
    else if (v11)
    {
      v24 = &unk_100BECCD8;
      goto LABEL_11;
    }
    v24 = &unk_100BECAD0;
    goto LABEL_11;
  }
  if (v11)
    v24 = &unk_100BEC4B8;
  else
    v24 = &unk_100BEC6C0;
LABEL_11:
  memcpy(v68, v24, 0x208uLL);
  v25 = memcpy(v67, v68, sizeof(v67));
  v51 = &v49;
  __chkstk_darwin(v25);
  *(&v49 - 8) = a5;
  *(&v49 - 7) = a6;
  v49 = a1;
  *(&v49 - 6) = a1;
  *((_BYTE *)&v49 - 40) = v10;
  HIDWORD(v50) = v11 >> 8;
  *((_BYTE *)&v49 - 39) = BYTE1(v11);
  v26 = v63;
  *(&v49 - 4) = v56;
  *(&v49 - 3) = v26;
  *(&v49 - 2) = (uint64_t)v67;
  v27 = v52;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v52);
  Group<A>.init(content:)(sub_1006D02C0, &v49 - 10, v27, WitnessTable);
  v66[3] = WitnessTable;
  v29 = v55;
  v51 = (uint64_t *)swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v55);
  sub_1000B2074(v21, v29, v51);
  v30 = v53;
  v52 = *(uint64_t (**)(_QWORD, _QWORD))(v53 + 8);
  v31 = v52(v21, v29);
  __chkstk_darwin(v31);
  *(&v49 - 8) = a5;
  *(&v49 - 7) = a6;
  *(&v49 - 6) = v49;
  *((_BYTE *)&v49 - 40) = v10;
  *((_BYTE *)&v49 - 39) = BYTE4(v50);
  v32 = v63;
  *(&v49 - 4) = v33;
  *(&v49 - 3) = v32;
  *(&v49 - 2) = (uint64_t)v67;
  v34 = v54;
  v35 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v54);
  v36 = v60;
  Group<A>.init(content:)(sub_1006D02CC, &v49 - 10, v34, v35);
  v66[2] = v35;
  v37 = v57;
  v38 = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v57);
  v39 = (uint64_t)v59;
  sub_1000B2074(v36, v37, v38);
  v40 = v58;
  sub_1000C3530(v36);
  v41 = *(void (**)(uint64_t, char *, uint64_t))(v30 + 16);
  v42 = v62;
  v41(v21, v62, v29);
  v66[0] = v21;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v36, v39, v37);
  v66[1] = v36;
  v65[0] = v29;
  v65[1] = v37;
  v64[0] = v51;
  v64[1] = v38;
  sub_10052800C((uint64_t)v66, 2, (uint64_t)v65, (uint64_t)v64, v43, v44, v45, v46, v49, v50, (uint64_t)v51, (uint64_t)v52, v53, v54, v55, v56, v57, v58);
  sub_1000C3530(v39);
  v47 = v52;
  v52(v42, v29);
  sub_1000C3530(v36);
  return v47(v21, v29);
}

uint64_t sub_1006CF140@<X0>(uint64_t a1@<X0>, void (*a2)(char *, _QWORD, _QWORD, _QWORD, _QWORD)@<X2>, _QWORD *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  void (*v51)(char *, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(_QWORD, _QWORD);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  char *v68;
  void (*v69)(char *, uint64_t);
  char *v70;
  void (*v71)(char *, _QWORD, _QWORD, _QWORD, _QWORD);
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  char *v74;
  void (*v75)(char *, char *, uint64_t);
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t);
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  void (*v110)(char *, _QWORD, _QWORD, _QWORD, _QWORD);
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD v119[8];
  _QWORD v120[8];
  _QWORD v121[8];
  _BYTE v122[24];
  _BYTE v123[40];
  _QWORD v124[4];
  char v125;

  v92 = a5;
  v98 = a6;
  v10 = sub_1000BA294(&qword_100BC4A98);
  __chkstk_darwin(v10);
  v94 = (uint64_t *)((char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v109 = type metadata accessor for Optional(0, a4);
  v103 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v116 = (uint64_t)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v113 = (uint64_t)&v91 - v14;
  v93 = type metadata accessor for LocationComponentContainerViewModel(0);
  __chkstk_darwin(v93);
  v91 = (uint64_t)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v91 - v17;
  v100 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(v19);
  v97 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v96 = (char *)&v91 - v22;
  __chkstk_darwin(v23);
  v108 = (char *)&v91 - v24;
  __chkstk_darwin(v25);
  v107 = (char *)&v91 - v26;
  __chkstk_darwin(v27);
  v106 = (char *)&v91 - v28;
  __chkstk_darwin(v29);
  v105 = (char *)&v91 - v30;
  __chkstk_darwin(v31);
  v104 = (char *)&v91 - v32;
  __chkstk_darwin(v33);
  v95 = (uint64_t)&v91 - v34;
  __chkstk_darwin(v35);
  v102 = (char *)&v91 - v36;
  __chkstk_darwin(v37);
  v115 = (char *)&v91 - v38;
  __chkstk_darwin(v39);
  v112 = (char *)&v91 - v40;
  __chkstk_darwin(v41);
  v111 = (char *)&v91 - v42;
  __chkstk_darwin(v43);
  v45 = (char *)&v91 - v44;
  __chkstk_darwin(v46);
  v48 = (char *)&v91 - v47;
  v117 = a1;
  sub_100080E30(a1 + OBJC_IVAR____TtCV7Weather25NoAqiSevereNhpNewsContent8_Storage_severeAlert, (uint64_t)v18);
  a2(v18, a3[45], a3[46], a3[47], a3[48]);
  sub_100080DF4((uint64_t)v18);
  v101 = v48;
  v49 = v92;
  sub_1000B2074(v45, a4, v92);
  v50 = *(void (**)(char *, uint64_t))(v100 + 8);
  v50(v45, a4);
  sub_100080E30(a1 + OBJC_IVAR____TtCV7Weather25NoAqiSevereNhpNewsContent8_Storage_nextHourPrecipitation, (uint64_t)v18);
  a2(v18, a3[33], a3[34], a3[35], a3[36]);
  v51 = a2;
  sub_100080DF4((uint64_t)v18);
  sub_1000B2074(v45, a4, v49);
  v50(v45, a4);
  v52 = v117;
  sub_100080E30(v117 + OBJC_IVAR____TtCV7Weather25NoAqiSevereNhpNewsContent8_Storage_newsArticle, (uint64_t)v18);
  v53 = a3[29];
  v54 = a3[30];
  v55 = a3[31];
  v56 = a3[32];
  v110 = v51;
  v51(v18, v53, v54, v55, v56);
  sub_100080DF4((uint64_t)v18);
  sub_1000B2074(v45, a4, v49);
  v114 = v45;
  v99 = (void (*)(uint64_t, uint64_t))v50;
  v50(v45, a4);
  v57 = v52 + OBJC_IVAR____TtCV7Weather25NoAqiSevereNhpNewsContent8_Storage_map;
  swift_beginAccess(v57, v122, 0, 0);
  v58 = v57;
  v59 = (void (*)(_QWORD, _QWORD))v94;
  sub_1001A1D04(v58, (uint64_t)v94);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v59, 1, v93) == 1)
  {
    sub_1001A1D4C((uint64_t)v59);
  }
  else
  {
    v60 = (uint64_t)v59;
    v61 = v91;
    sub_1001A1D8C(v60, v91);
    sub_1001A1DD0((uint64_t)(a3 + 20), (uint64_t)v123);
    sub_1001A1DD0((uint64_t)v123, (uint64_t)v124);
    if (v125 != 1)
    {
      v63 = v115;
      v110((char *)v61, v124[0], v124[1], v124[2], v124[3]);
      sub_100080DF4(v61);
      v64 = (uint64_t)v114;
      sub_1000B2074(v63, a4, v49);
      v65 = v99;
      v99((uint64_t)v63, a4);
      sub_1000B1100(v64, a4, v116);
      v65(v64, a4);
      v62 = 0;
      goto LABEL_7;
    }
    sub_100080DF4(v61);
  }
  v62 = 1;
LABEL_7:
  v66 = v116;
  _s7Weather24LocationCompositionStateOwst_0(v116, v62, 1, a4);
  sub_100158984(v66, a4, v113);
  v94 = *(uint64_t **)(v103 + 8);
  ((void (*)(uint64_t, uint64_t))v94)(v66, v109);
  v67 = v117;
  sub_100080E30(*(_QWORD *)(v117 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, (uint64_t)v18);
  v68 = v115;
  v110(v18, a3[12], a3[13], a3[14], a3[15]);
  sub_100080DF4((uint64_t)v18);
  sub_1000B2074(v68, a4, v49);
  v69 = (void (*)(char *, uint64_t))v99;
  v99((uint64_t)v68, a4);
  sub_100080E30(*(_QWORD *)(v67 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, (uint64_t)v18);
  v70 = v102;
  v71 = v110;
  v110(v18, a3[4], a3[5], a3[6], a3[7]);
  sub_100080DF4((uint64_t)v18);
  sub_1000B2074(v70, a4, v49);
  v69(v70, a4);
  sub_100080E30(*(_QWORD *)(v117 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex, (uint64_t)v18);
  v72 = (void (*)(uint64_t, uint64_t))v69;
  v73 = v95;
  v71(v18, a3[53], a3[54], a3[55], a3[56]);
  sub_100080DF4((uint64_t)v18);
  sub_1000B2074(v73, a4, v49);
  v72(v73, a4);
  sub_100080E30(*(_QWORD *)(v117 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, (uint64_t)v18);
  v74 = v104;
  v71(v18, a3[49], a3[50], a3[51], a3[52]);
  sub_100080DF4((uint64_t)v18);
  sub_1000B2074(v74, a4, v49);
  v72((uint64_t)v74, a4);
  v75 = *(void (**)(char *, char *, uint64_t))(v100 + 16);
  v75(v74, v101, a4);
  v121[0] = v74;
  v76 = v105;
  v75(v105, v111, a4);
  v121[1] = v76;
  v77 = v106;
  v75(v106, v112, a4);
  v121[2] = v77;
  v78 = v116;
  v79 = v109;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v103 + 16))(v116, v113, v109);
  v121[3] = v78;
  v80 = v107;
  v75(v107, v114, a4);
  v121[4] = v80;
  v81 = v108;
  v75(v108, v115, a4);
  v121[5] = v81;
  v82 = (uint64_t)v96;
  v83 = v102;
  v75(v96, v102, a4);
  v121[6] = v82;
  v84 = (uint64_t)v97;
  v75(v97, (char *)v73, a4);
  v121[7] = v84;
  v120[0] = a4;
  v120[1] = a4;
  v120[2] = a4;
  v120[3] = v79;
  v120[4] = a4;
  v120[5] = a4;
  v120[6] = a4;
  v120[7] = a4;
  v119[0] = v49;
  v119[1] = v49;
  v119[2] = v49;
  v118 = v49;
  v119[3] = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v79);
  v119[4] = v49;
  v119[5] = v49;
  v119[6] = v49;
  v119[7] = v49;
  sub_10052800C((uint64_t)v121, 8, (uint64_t)v120, (uint64_t)v119, v85, v86, v87, v88, v91, v92, v93, (uint64_t)v94, v95, (uint64_t)v96, (uint64_t)v97, v98, (uint64_t)v99, v100);
  v72(v73, a4);
  v72((uint64_t)v83, a4);
  v72((uint64_t)v115, a4);
  v72((uint64_t)v114, a4);
  v89 = (void (*)(uint64_t, uint64_t))v94;
  ((void (*)(uint64_t, uint64_t))v94)(v113, v79);
  v72((uint64_t)v112, a4);
  v72((uint64_t)v111, a4);
  v72((uint64_t)v101, a4);
  v72(v84, a4);
  v72(v82, a4);
  v72((uint64_t)v108, a4);
  v72((uint64_t)v107, a4);
  v89(v116, v79);
  v72((uint64_t)v106, a4);
  v72((uint64_t)v105, a4);
  return ((uint64_t (*)(char *, uint64_t))v72)(v104, a4);
}

uint64_t sub_1006CFA50@<X0>(uint64_t a1@<X0>, void (*a2)(char *, _QWORD, _QWORD, _QWORD, _QWORD)@<X2>, _QWORD *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  _QWORD v93[8];
  _QWORD v94[8];
  _QWORD v95[8];

  v78 = a6;
  v11 = type metadata accessor for LocationComponentContainerViewModel(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(v14);
  v77 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v76 = (char *)&v74 - v17;
  __chkstk_darwin(v18);
  v92 = (char *)&v74 - v19;
  __chkstk_darwin(v20);
  v91 = (char *)&v74 - v21;
  __chkstk_darwin(v22);
  v89 = (char *)&v74 - v23;
  __chkstk_darwin(v24);
  v87 = (char *)&v74 - v25;
  __chkstk_darwin(v26);
  v86 = (char *)&v74 - v27;
  __chkstk_darwin(v28);
  v85 = (char *)&v74 - v29;
  __chkstk_darwin(v30);
  v75 = (uint64_t)&v74 - v31;
  __chkstk_darwin(v32);
  v83 = (char *)&v74 - v33;
  __chkstk_darwin(v34);
  v81 = (char *)&v74 - v35;
  __chkstk_darwin(v36);
  v79 = (char *)&v74 - v37;
  __chkstk_darwin(v38);
  v80 = (char *)&v74 - v39;
  __chkstk_darwin(v40);
  v42 = (char *)&v74 - v41;
  __chkstk_darwin(v43);
  v45 = (char *)&v74 - v44;
  __chkstk_darwin(v46);
  v88 = (char *)&v74 - v47;
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind, (uint64_t)v13);
  a2(v13, a3[61], a3[62], a3[63], a3[64]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v45, a4, a5);
  v48 = *(void (**)(char *, uint64_t))(v90 + 8);
  v84 = v45;
  v48(v45, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)v13);
  a2(v13, a3[41], a3[42], a3[43], a3[44]);
  sub_100080DF4((uint64_t)v13);
  v49 = a5;
  sub_1000B2074(v42, a4, a5);
  v82 = v42;
  v48(v42, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike, (uint64_t)v13);
  v50 = (uint64_t)v80;
  a2(v13, a3[8], a3[9], a3[10], a3[11]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v50, a4, v49);
  v48((char *)v50, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)v13);
  v51 = (uint64_t)v79;
  a2(v13, a3[16], a3[17], a3[18], a3[19]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v51, a4, v49);
  v48((char *)v51, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility, (uint64_t)v13);
  v52 = (uint64_t)v81;
  a2(v13, a3[57], a3[58], a3[59], a3[60]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v52, a4, v49);
  v48((char *)v52, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, (uint64_t)v13);
  v53 = (uint64_t)v83;
  a2(v13, a3[37], a3[38], a3[39], a3[40]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v53, a4, v49);
  v48((char *)v53, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, (uint64_t)v13);
  v54 = v75;
  a2(v13, a3[25], a3[26], a3[27], a3[28]);
  sub_100080DF4((uint64_t)v13);
  v55 = v54;
  v74 = v49;
  sub_1000B2074(v54, a4, v49);
  v48((char *)v54, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, (uint64_t)v13);
  v56 = v85;
  a2(v13, *a3, a3[1], a3[2], a3[3]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v56, a4, v49);
  v48(v56, a4);
  v57 = *(void (**)(char *, char *, uint64_t))(v90 + 16);
  v57(v56, v88, a4);
  v95[0] = v56;
  v58 = v86;
  v57(v86, v84, a4);
  v95[1] = v58;
  v59 = v87;
  v57(v87, v82, a4);
  v95[2] = v59;
  v60 = v89;
  v61 = (uint64_t)v80;
  v57(v89, v80, a4);
  v95[3] = v60;
  v62 = v91;
  v63 = (uint64_t)v79;
  v57(v91, v79, a4);
  v95[4] = v62;
  v64 = v92;
  v65 = (uint64_t)v81;
  v57(v92, v81, a4);
  v95[5] = v64;
  v66 = (uint64_t)v76;
  v67 = (uint64_t)v83;
  v57(v76, v83, a4);
  v95[6] = v66;
  v68 = (uint64_t)v77;
  v57(v77, (char *)v55, a4);
  v95[7] = v68;
  v94[0] = a4;
  v94[1] = a4;
  v94[2] = a4;
  v94[3] = a4;
  v94[4] = a4;
  v94[5] = a4;
  v94[6] = a4;
  v94[7] = a4;
  v93[0] = v74;
  v93[1] = v74;
  v93[2] = v74;
  v93[3] = v74;
  v93[4] = v74;
  v93[5] = v74;
  v93[6] = v74;
  v93[7] = v74;
  sub_10052800C((uint64_t)v95, 8, (uint64_t)v94, (uint64_t)v93, v69, v70, v71, v72, v74, v75, (uint64_t)v76, (uint64_t)v77, v78, (uint64_t)v79, (uint64_t)v80, (uint64_t)v81, (uint64_t)v82, (uint64_t)v83);
  v48((char *)v55, a4);
  v48((char *)v67, a4);
  v48((char *)v65, a4);
  v48((char *)v63, a4);
  v48((char *)v61, a4);
  v48(v82, a4);
  v48(v84, a4);
  v48(v88, a4);
  v48((char *)v68, a4);
  v48((char *)v66, a4);
  v48(v92, a4);
  v48(v91, a4);
  v48(v89, a4);
  v48(v87, a4);
  v48(v86, a4);
  return ((uint64_t (*)(char *, uint64_t))v48)(v85, a4);
}

uint64_t sub_1006D0294@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;

  if (*(_BYTE *)(v2 + 9))
    v3 = 256;
  else
    v3 = 0;
  return sub_1006CED28(*(_QWORD *)v2, v3 | *(unsigned __int8 *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t sub_1006D02C0()
{
  return sub_1001A1CD4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1006CF140);
}

uint64_t sub_1006D02CC()
{
  return sub_1001A1CD4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1006CFA50);
}

uint64_t sub_1006D02D8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = *(_QWORD *)(v1 + 56);
  sub_100043CA8(v1 + 16, (uint64_t)(a1 + 2));
  v4 = *(_QWORD *)(v1 + 64);
  swift_retain();
  swift_retain();
  v5 = sub_1000BA294(&qword_100BC45E8);
  v6 = sub_1006D036C();
  result = ObservedObject.init(wrappedValue:)(v3, v5, v6);
  *a1 = result;
  a1[1] = v8;
  a1[7] = v4;
  return result;
}

uint64_t type metadata accessor for NextHourPrecipitationDetailModule()
{
  return objc_opt_self(_TtC7Weather33NextHourPrecipitationDetailModule);
}

unint64_t sub_1006D036C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC45F0;
  if (!qword_100BC45F0)
  {
    v1 = sub_100075EB0(&qword_100BC45E8);
    result = swift_getWitnessTable(&unk_1009D9950, v1);
    atomic_store(result, (unint64_t *)&qword_100BC45F0);
  }
  return result;
}

uint64_t sub_1006D03B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  KeyPath = swift_getKeyPath(&unk_1009BF620);
  v7 = sub_1000BA294(&qword_100BFE418);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  result = sub_1000BA294(&qword_100BFE420);
  v9 = a2 + *(int *)(result + 36);
  *(_QWORD *)v9 = KeyPath;
  *(double *)(v9 + 8) = a3;
  return result;
}

double sub_1006D0434()
{
  double v1;

  sub_1006D04A4();
  EnvironmentValues.subscript.getter(&_s29InteractiveMapCornerRadiusKeyVN, &_s29InteractiveMapCornerRadiusKeyVN);
  return v1;
}

uint64_t sub_1006D046C(double a1)
{
  double v2;

  v2 = a1;
  sub_1006D04A4();
  return EnvironmentValues.subscript.setter(&v2, &_s29InteractiveMapCornerRadiusKeyVN, &_s29InteractiveMapCornerRadiusKeyVN);
}

unint64_t sub_1006D04A4()
{
  unint64_t result;

  result = qword_100BFE390[0];
  if (!qword_100BFE390[0])
  {
    result = swift_getWitnessTable(&unk_1009BF598, &_s29InteractiveMapCornerRadiusKeyVN);
    atomic_store(result, qword_100BFE390);
  }
  return result;
}

ValueMetadata *_s29InteractiveMapCornerRadiusKeyVMa()
{
  return &_s29InteractiveMapCornerRadiusKeyVN;
}

ValueMetadata *type metadata accessor for InteractiveMapTransitionModifier()
{
  return &type metadata for InteractiveMapTransitionModifier;
}

uint64_t sub_1006D0500(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100ABDABC, 1);
}

uint64_t sub_1006D0534@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double *v2;

  return sub_1006D03B0(a1, a2, *v2);
}

void sub_1006D053C()
{
  qword_100BFE388 = 0;
}

uint64_t *sub_1006D0548()
{
  if (qword_100BC23C0 != -1)
    swift_once(&qword_100BC23C0, sub_1006D053C);
  return &qword_100BFE388;
}

double sub_1006D0588@<D0>(uint64_t *a1@<X8>)
{
  uint64_t *v2;
  double result;

  v2 = sub_1006D0548();
  result = *(double *)v2;
  *a1 = *v2;
  return result;
}

uint64_t sub_1006D05B0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABDA94, 1);
}

unint64_t sub_1006D05CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFE428;
  if (!qword_100BFE428)
  {
    v1 = sub_100075EB0(&qword_100BFE420);
    sub_10005F124(&qword_100BFE430, &qword_100BFE418, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_10005F124(&qword_100BCDE00, &qword_100BCDE08, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFE428);
  }
  return result;
}

uint64_t sub_1006D0668(uint64_t a1)
{
  return sub_1000BC8DC(a1, 30, 0x8000000100A10BE0, &qword_100CAEF98);
}

uint64_t sub_1006D0688(uint64_t a1)
{
  return sub_1000BC8DC(a1, 33, 0x8000000100A10BB0, &qword_100CAEFA0);
}

uint64_t sub_1006D06A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  char v18;

  v7 = type metadata accessor for Access(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100098728();
  v11 = v10 - v9;
  v12 = type metadata accessor for Domain(0);
  __chkstk_darwin(v12);
  sub_100098728();
  v15 = v14 - v13;
  static Domain.weatherInternal.getter();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v11, enum case for Access.public(_:), v7);
  v18 = 0;
  v16 = sub_1000BA294(&qword_100BD0228);
  sub_1000860C4(v16);
  result = Setting.init(_:defaultValue:domain:access:)(a2, a3, &v18, v15, v11);
  *a4 = result;
  return result;
}

uint64_t sub_1006D07A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v0 = type metadata accessor for Access(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_100098728();
  v4 = v3 - v2;
  v5 = type metadata accessor for Domain(0);
  __chkstk_darwin(v5);
  sub_100098728();
  v8 = v7 - v6;
  static Domain.weatherInternal.getter();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 104))(v4, enum case for Access.public(_:), v0);
  v11 = 0x4024000000000000;
  v9 = sub_1000BA294(&qword_100BDEBF0);
  sub_1000860C4(v9);
  result = Setting.init(_:defaultValue:domain:access:)(0xD000000000000023, 0x8000000100A10B80, &v11, v8, v4);
  qword_100CAEFA8 = result;
  return result;
}

uint64_t sub_1006D0898()
{
  return type metadata accessor for FrameContainer(0);
}

double sub_1006D08A0()
{
  double result;

  result = 0.0;
  xmmword_100BFE438 = 0u;
  *(_OWORD *)&qword_100BFE448 = 0u;
  return result;
}

_BYTE *sub_1006D08B4()
{
  if (qword_100BC23E0 != -1)
    swift_once(&qword_100BC23E0, sub_1006D08A0);
  return ymmword_100BFE438;
}

BOOL sub_1006D08F4(CGFloat *a1, void (*a2)(_QWORD *__return_ptr))
{
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  _BOOL8 result;
  _QWORD v8[4];
  CGRect v9;

  a2(v8);
  v3 = *(double *)v8;
  v4 = *(double *)&v8[1];
  v5 = *(double *)&v8[2];
  v6 = *(double *)&v8[3];
  if (qword_100BC23E0 != -1)
    swift_once(&qword_100BC23E0, sub_1006D08A0);
  v9.origin.x = v3;
  v9.origin.y = v4;
  v9.size.width = v5;
  v9.size.height = v6;
  result = CGRectEqualToRect(v9, *(CGRect *)ymmword_100BFE438);
  if (!result)
  {
    *a1 = v3;
    a1[1] = v4;
    a1[2] = v5;
    a1[3] = v6;
  }
  return result;
}

__n128 sub_1006D0994@<Q0>(_OWORD *a1@<X8>)
{
  _BYTE *v2;
  __n128 result;
  __int128 v4;

  v2 = sub_1006D08B4();
  result = *(__n128 *)v2;
  v4 = *((_OWORD *)v2 + 1);
  *a1 = *(_OWORD *)v2;
  a1[1] = v4;
  return result;
}

void sub_1006D09C0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = static Color.clear.getter();
  v5 = GeometryProxy.frame(in:)(a1);
  *(_QWORD *)a2 = v4;
  *(double *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 32) = v8;
}

ValueMetadata *type metadata accessor for LocationComponentFramePreferenceKey()
{
  return &type metadata for LocationComponentFramePreferenceKey;
}

uint64_t sub_1006D0A18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MoonComponent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1006D0A5C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;

  v1 = *(void **)(v0 + 24);
  if (!v1)
  {
    v2 = v0;
    v3 = objc_msgSend((id)objc_opt_self(UIFontMetrics), "defaultMetrics");
    objc_msgSend((id)objc_opt_self(UIFont), "wu_systemUsesExuberatedLineHeight");
    sub_100098FF0();
    v4 = (void *)sub_1000D1A74();
    v5 = sub_1000C67B0((uint64_t)v4, "scaledFontForFont:");

    *(_QWORD *)(v2 + 24) = v5;
    v6 = v5;
    sub_1000C6200();
  }
  v7 = v1;
  sub_1000C612C();
}

void sub_1006D0B34()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;

  v1 = *(void **)(v0 + 40);
  if (!v1)
  {
    v2 = v0;
    v3 = objc_msgSend((id)objc_opt_self(UIFontMetrics), "defaultMetrics");
    objc_msgSend((id)objc_opt_self(UIFont), "wu_systemUsesExuberatedLineHeight");
    sub_100098FF0();
    v4 = (void *)sub_1000D1A74();
    v5 = sub_1000C67B0((uint64_t)v4, "scaledFontForFont:");

    *(_QWORD *)(v2 + 40) = v5;
    v6 = v5;
    sub_1000C6200();
  }
  v7 = v1;
  sub_1000C612C();
}

id sub_1006D0C04()
{
  __int128 *v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  NSString *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  id v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  char v93;

  v2 = (void *)*((_QWORD *)v0 + 2);
  if (v2)
  {
    v3 = (id)*((_QWORD *)v0 + 2);
  }
  else
  {
    sub_1000BC8E4();
    v92 = *v0;
    *(_OWORD *)(v4 + 24) = *(__int128 *)((char *)v0 + 24);
    *(_OWORD *)(v4 + 40) = *(__int128 *)((char *)v0 + 40);
    sub_1000BB3E0();
    v5 = objc_opt_self(UIFontDescriptor);
    v13 = sub_1000DBCF0(v5, v6, v7, v8, v9, v10, v11, v12, v56, v58, v60, v62, v64, v66, v68, v70, v72, v74, v76,
            v78,
            v80,
            v82,
            v84,
            v86,
            v88,
            v90,
            v92);
    v3 = sub_1000D9850(v13, "preferredFontDescriptorWithTextStyle:");
    if (sub_1000D1F78(v3, "fontDescriptorWithSymbolicTraits:"))
    {
      sub_1000B4CD4();
      v3 = v1;
    }
    v14 = sub_1000BA294(&qword_100BE5EF0);
    v22 = sub_1000DB084(v14, v15, v16, v17, v18, v19, v20, v21, v57, v59);
    *(_OWORD *)(v22 + 16) = xmmword_10097CA50;
    *(_QWORD *)(v22 + 32) = UIFontDescriptorTraitsAttribute;
    v23 = sub_1000BA294(&qword_100BE5EF8);
    v27 = (__n128 *)sub_1000DA770(v23, v24, v25, v26);
    sub_1000D9214(v27, v28, v29, v30, v31, v32, v33, v34, v35);
    sub_1000CD160(v36);
    sub_100051B90(&qword_100BC2CD0, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_10097D574);
    sub_1000D02B0();
    v37 = UIFontWeightTrait;
    sub_1000DDE5C();
    v38 = sub_1000BA294(&qword_100BE5F00);
    sub_1000DD258(v38);
    v40 = v39;
    sub_100051B90(&qword_100BC2CE0, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_10097D530);
    sub_1000C2F08();
    sub_1000C3F24();
    sub_1000DA154();
    v42 = sub_1000E73B4(v41, "fontDescriptorByAddingAttributes:");
    sub_1000B4CD4();

    v43 = (void *)objc_opt_self(UIFont);
    v44 = sub_1000DF8D4(v43, "fontWithDescriptor:size:");
    sub_10009D7B4();
    sub_1000BD66C(v45, v46, v47, v48, v49, v50, v51, v52, 1, 2, v61, v63, v65, v67, v69, v71, v73, v75, v77,
      v79,
      v81,
      v83,
      v85,
      v87,
      v89,
      v91,
      v93);
    *((_QWORD *)v0 + 2) = v3;
    v53 = v3;
    sub_1000C6200();
  }
  v54 = v2;
  return v3;
}

void sub_1006D0E58()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  NSString *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;

  v2 = *(void **)v0;
  if (!*(_QWORD *)v0)
  {
    sub_1000BC8E4();
    *(_OWORD *)(v3 + 8) = *(_OWORD *)(v0 + 8);
    *(_OWORD *)(v3 + 24) = *(_OWORD *)(v0 + 24);
    *(_OWORD *)(v3 + 40) = *(_OWORD *)(v0 + 40);
    sub_1000BB3E0();
    v4 = objc_opt_self(UIFontDescriptor);
    v12 = sub_1000DBCF0(v4, v5, v6, v7, v8, v9, v10, v11, v55, v57, v59, v61, v63, v65, v67, v69, v71, v73, v75,
            v77,
            v79,
            v81,
            v83,
            v85,
            v87,
            v89,
            0);
    v13 = sub_1000D9850(v12, "preferredFontDescriptorWithTextStyle:");
    if (sub_1000D1F78(v13, "fontDescriptorWithSymbolicTraits:"))
    {
      sub_1000B4CD4();
      v13 = v1;
    }
    v14 = sub_1000BA294(&qword_100BE5EF0);
    v22 = sub_1000DB084(v14, v15, v16, v17, v18, v19, v20, v21, v56, v58);
    *(_OWORD *)(v22 + 16) = xmmword_10097CA50;
    *(_QWORD *)(v22 + 32) = UIFontDescriptorTraitsAttribute;
    v23 = sub_1000BA294(&qword_100BE5EF8);
    v27 = (__n128 *)sub_1000DA770(v23, v24, v25, v26);
    sub_1000D9214(v27, v28, v29, v30, v31, v32, v33, v34, v35);
    sub_1000CD160(v36);
    sub_100051B90(&qword_100BC2CD0, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_10097D574);
    sub_1000D02B0();
    v37 = UIFontWeightTrait;
    sub_1000DDE5C();
    v38 = sub_1000BA294(&qword_100BE5F00);
    sub_1000DD258(v38);
    v40 = v39;
    sub_100051B90(&qword_100BC2CE0, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_10097D530);
    sub_1000C2F08();
    sub_1000C3F24();
    sub_1000DA154();
    v42 = sub_1000E73B4(v41, "fontDescriptorByAddingAttributes:");
    sub_1000B4CD4();

    v43 = (void *)objc_opt_self(UIFont);
    v44 = sub_1000DF8D4(v43, "fontWithDescriptor:size:");
    sub_10009D7B4();
    sub_1000BD66C(v45, v46, v47, v48, v49, v50, v51, v52, 1, 2, v60, v62, v64, v66, v68, v70, v72, v74, v76,
      v78,
      v80,
      v82,
      v84,
      v86,
      v88,
      v90,
      v91);
    *(_QWORD *)v0 = v13;
    v53 = v13;
    sub_1000C6200();
  }
  v54 = v2;
  sub_1000C4DB4();
}

void sub_1006D1094()
{
  uint64_t v0;
  double v1;
  id v2;

  if ((*(_BYTE *)(v0 + 64) & 1) != 0)
  {
    sub_1006D0A5C();
    objc_msgSend(v2, "capHeight");
    sub_1000CFEC8();
    *(double *)(v0 + 56) = round(v1);
    *(_BYTE *)(v0 + 64) = 0;
  }
  sub_1000C585C();
}

void sub_1006D10E0()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  if ((*(_BYTE *)(v0 + 112) & 1) != 0)
  {
    sub_1006D0A5C();
    objc_msgSend(v2, "_scaledValueForValue:", 0.75);
    sub_1000CFEC8();
    *(_QWORD *)(v0 + 104) = v1;
    *(_BYTE *)(v0 + 112) = 0;
  }
  sub_1000C585C();
}

void sub_1006D1130()
{
  uint64_t v0;
  void *v1;
  void *v2;
  char v3;
  __int128 v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  NSString *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;

  v2 = *(void **)(v0 + 8);
  if (!v2)
  {
    sub_1000BC8E4();
    v93 = v3;
    v4 = *(_OWORD *)(v0 + 32);
    v5[1] = *(_OWORD *)(v0 + 16);
    v5[2] = v4;
    v5[3] = *(_OWORD *)(v0 + 48);
    sub_1000BB3E0();
    v6 = objc_opt_self(UIFontDescriptor);
    v14 = sub_1000DBCF0(v6, v7, v8, v9, v10, v11, v12, v13, v57, v59, v61, v63, v65, v67, v69, v71, v73, v75, v77,
            v79,
            v81,
            v83,
            v85,
            v87,
            v89,
            v91,
            v93);
    v15 = sub_1000D9850(v14, "preferredFontDescriptorWithTextStyle:");
    if (sub_1000D1F78(v15, "fontDescriptorWithSymbolicTraits:"))
    {
      sub_1000B4CD4();
      v15 = v1;
    }
    v16 = sub_1000BA294(&qword_100BE5EF0);
    v24 = sub_1000DB084(v16, v17, v18, v19, v20, v21, v22, v23, v58, v60);
    *(_OWORD *)(v24 + 16) = xmmword_10097CA50;
    *(_QWORD *)(v24 + 32) = UIFontDescriptorTraitsAttribute;
    v25 = sub_1000BA294(&qword_100BE5EF8);
    v29 = (__n128 *)sub_1000DA770(v25, v26, v27, v28);
    sub_1000D9214(v29, v30, v31, v32, v33, v34, v35, v36, v37);
    sub_1000CD160(v38);
    sub_100051B90(&qword_100BC2CD0, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_10097D574);
    sub_1000D02B0();
    v39 = UIFontWeightTrait;
    sub_1000DDE5C();
    v40 = sub_1000BA294(&qword_100BE5F00);
    sub_1000DD258(v40);
    v42 = v41;
    sub_100051B90(&qword_100BC2CE0, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_10097D530);
    sub_1000C2F08();
    sub_1000C3F24();
    sub_1000DA154();
    v44 = sub_1000E73B4(v43, "fontDescriptorByAddingAttributes:");
    sub_1000B4CD4();

    v45 = (void *)objc_opt_self(UIFont);
    v46 = sub_1000DF8D4(v45, "fontWithDescriptor:size:");
    sub_10009D7B4();
    sub_1000BD66C(v47, v48, v49, v50, v51, v52, v53, v54, 1, 2, v62, v64, v66, v68, v70, v72, v74, v76, v78,
      v80,
      v82,
      v84,
      v86,
      v88,
      v90,
      v92,
      v94);
    *(_QWORD *)(v0 + 8) = v15;
    v55 = v15;
    sub_1000C6200();
  }
  v56 = v2;
  sub_1000C4DB4();
}

void sub_1006D1360()
{
  uint64_t v0;
  double v1;
  id v2;

  if ((*(_BYTE *)(v0 + 96) & 1) != 0)
  {
    sub_1006D0E58();
    objc_msgSend(v2, "descender");
    sub_1000CFEC8();
    *(double *)(v0 + 88) = -v1;
    *(_BYTE *)(v0 + 96) = 0;
  }
  sub_1000C585C();
}

double sub_1006D13AC()
{
  uint64_t v0;
  double result;

  if ((*(_BYTE *)(v0 + 80) & 1) == 0)
    return *(double *)(v0 + 72);
  result = sub_1006D16F4();
  *(double *)(v0 + 72) = result;
  *(_BYTE *)(v0 + 80) = 0;
  return result;
}

double sub_1006D13DC()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 144) & 1) == 0)
    return *(double *)(v0 + 136);
  *(_QWORD *)(v0 + 136) = 0x3FD0000000000000;
  *(_BYTE *)(v0 + 144) = 0;
  return 0.25;
}

double sub_1006D1400()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 160) & 1) == 0)
    return *(double *)(v0 + 152);
  *(_QWORD *)(v0 + 152) = 0x4008000000000000;
  *(_BYTE *)(v0 + 160) = 0;
  return 3.0;
}

double sub_1006D1424()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 176) & 1) == 0)
    return *(double *)(v0 + 168);
  *(_QWORD *)(v0 + 168) = 0;
  *(_BYTE *)(v0 + 176) = 0;
  return 0.0;
}

double sub_1006D1444()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 128) & 1) == 0)
    return *(double *)(v0 + 120);
  *(_QWORD *)(v0 + 120) = 0x4010000000000000;
  *(_BYTE *)(v0 + 128) = 0;
  return 4.0;
}

void sub_1006D1468()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;

  v1 = *(void **)(v0 + 32);
  if (!v1)
  {
    v2 = v0;
    v3 = objc_msgSend((id)objc_opt_self(UIFontMetrics), "defaultMetrics");
    sub_100098FF0();
    v4 = (void *)sub_1000D1A74();
    v5 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithPreferredContentSizeCategory:", UIContentSizeCategoryAccessibilityMedium);
    v6 = sub_1000D13EC((uint64_t)v5, "scaledFontForFont:compatibleWithTraitCollection:");

    *(_QWORD *)(v2 + 32) = v6;
    v7 = v6;
    sub_1000C6200();
  }
  v8 = v1;
  sub_10004A2A0();
}

void sub_1006D154C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;

  v1 = *(void **)(v0 + 48);
  if (!v1)
  {
    v2 = v0;
    v3 = objc_msgSend((id)objc_opt_self(UIFontMetrics), "defaultMetrics");
    sub_100098FF0();
    v4 = (void *)sub_1000D1A74();
    v5 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithPreferredContentSizeCategory:", UIContentSizeCategoryAccessibilityMedium);
    v6 = sub_1000D13EC((uint64_t)v5, "scaledFontForFont:compatibleWithTraitCollection:");

    *(_QWORD *)(v2 + 48) = v6;
    v7 = v6;
    sub_1000C6200();
  }
  v8 = v1;
  sub_10004A2A0();
}

uint64_t sub_1006D162C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;

  v2 = *(void **)a1;
  v3 = *(void **)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  v5 = *(void **)(a1 + 24);
  v6 = *(void **)(a1 + 32);
  v7 = *(void **)(a1 + 40);
  v8 = *(id *)(a1 + 48);
  v9 = v2;
  v10 = v3;
  v11 = v4;
  v12 = v5;
  v13 = v6;
  v14 = v7;
  return a1;
}

uint64_t sub_1006D1690(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a1 + 16);
  v4 = *(void **)(a1 + 24);
  v5 = *(void **)(a1 + 32);
  v6 = *(void **)(a1 + 40);
  v7 = *(void **)(a1 + 48);

  return a1;
}

double sub_1006D16F4()
{
  void *v0;
  void *v1;
  double v2;
  double v3;
  double v4;
  void *v5;
  void *v6;
  double v7;
  double v8;

  sub_1006D1130();
  v1 = v0;
  objc_msgSend(v0, "lineHeight");
  v3 = v2;

  v4 = v3 + v3;
  sub_1006D1130();
  v6 = v5;
  objc_msgSend(v5, "descender");
  v8 = v7;

  return round(v4 + v8 + 16.0);
}

double sub_1006D1764(_QWORD *a1)
{
  double result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[9]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1[11]).n128_u64[0];
  return result;
}

uint64_t sub_1006D17A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_DWORD *)(a1 + 105) = *(_DWORD *)(a2 + 105);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t sub_1006D1850(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v14;
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  *(_BYTE *)(a1 + 107) = *(_BYTE *)(a2 + 107);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_BYTE *)(a1 + 109) = *(_BYTE *)(a2 + 109);
  *(_BYTE *)(a1 + 110) = *(_BYTE *)(a2 + 110);
  *(_BYTE *)(a1 + 111) = *(_BYTE *)(a2 + 111);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  return a1;
}

void *sub_1006D1984(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x72uLL);
}

uint64_t sub_1006D198C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_DWORD *)(a1 + 105) = *(_DWORD *)(a2 + 105);
  *(_BYTE *)(a1 + 109) = *(_BYTE *)(a2 + 109);
  *(_WORD *)(a1 + 110) = *(_WORD *)(a2 + 110);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  return a1;
}

uint64_t sub_1006D1A40(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 114))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1006D1A80(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 112) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 114) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 114) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for DiagnosticSummary.Location()
{
  sub_100098884();
}

void type metadata accessor for DiagnosticSummary.BundleVersion()
{
  sub_100098884();
}

double sub_1006D1AFC(_QWORD *a1)
{
  double result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1[11]).n128_u64[0];
  return result;
}

uint64_t sub_1006D1B44(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v7 = *(_QWORD *)(a2 + 80);
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 88) = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t sub_1006D1BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t sub_1006D1CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
  v12 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v12);
  return a1;
}

void type metadata accessor for DiagnosticSummary()
{
  sub_100098884();
}

uint64_t sub_1006D1D6C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0xD000000000000012)
  {
    v4 = 0x8000000100A10DA0;
    if (a2 == 0x8000000100A10DA0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100A10DA0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
    goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C61636F6CLL, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD000000000000012)
  {
    v8 = 0x8000000100A10DC0;
    if (a2 == 0x8000000100A10DC0)
      goto LABEL_18;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100A10DC0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_18:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0xD00000000000001CLL && a2 == 0x8000000100A10DE0)
  {
    v9 = 0x8000000100A10DE0;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x8000000100A10DE0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_24;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x8000000100A10E00)
  {
    v10 = 0x8000000100A10E00;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x8000000100A10E00, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_30;
  }
  if (a1 == 0xD000000000000020 && a2 == 0x8000000100A10E20)
  {
    swift_bridgeObjectRelease(0x8000000100A10E20);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000020, 0x8000000100A10E20, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1006D1FB0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1006D1FE8 + 4 * byte_1009BF7D0[a1]))(0xD000000000000012, 0x8000000100A10DA0);
}

uint64_t sub_1006D1FE8()
{
  return 0x656C61636F6CLL;
}

void sub_1006D2040()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  sub_1000996A0();
  sub_1000BA294(&qword_100BFE790);
  sub_10009C02C();
  __chkstk_darwin(v2);
  sub_1000B44C8();
  v3 = sub_1006D5578();
  sub_1000C37B4((uint64_t)&type metadata for DiagnosticSummary.Environment.CodingKeys, v4, v3);
  v5 = *(_QWORD *)v1;
  v6 = *(_QWORD *)(v1 + 8);
  v19 = 0;
  sub_1000BC254(v5, v6, (uint64_t)&v19);
  if (!v0)
  {
    v7 = *(_QWORD *)(v1 + 16);
    v8 = *(_QWORD *)(v1 + 24);
    v18 = 1;
    sub_1000BC254(v7, v8, (uint64_t)&v18);
    sub_100109A60();
    sub_1000C2F20(v9, (uint64_t)&v17);
    v10 = *(unsigned __int8 *)(v1 + 33);
    v16 = 3;
    sub_1000C2F20(v10, (uint64_t)&v16);
    v11 = *(_QWORD *)(v1 + 40);
    v12 = *(_QWORD *)(v1 + 48);
    v15 = 4;
    sub_1000BC254(v11, v12, (uint64_t)&v15);
    v13 = *(unsigned __int8 *)(v1 + 56);
    v14 = 5;
    sub_1000C2F20(v13, (uint64_t)&v14);
  }
  sub_10009894C();
  sub_1000C1FB4();
  sub_100089054();
}

void sub_1006D2154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, char a11, char a12, char a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  sub_100099310();
  a25 = v27;
  a26 = v28;
  v30 = v29;
  v32 = v31;
  v33 = sub_1000BA294(&qword_100BFE7C8);
  sub_100098B6C();
  __chkstk_darwin(v34);
  sub_1000DB418(v30, v30[3]);
  v35 = sub_1006D5578();
  sub_1000C67BC((uint64_t)&type metadata for DiagnosticSummary.Environment.CodingKeys, v36, v35);
  if (v26)
  {
    sub_1000B4838();
  }
  else
  {
    a16 = 0;
    v37 = sub_1000D985C((uint64_t)&a16, v33);
    v39 = v38;
    sub_1000BD674(v37, v38);
    v50 = sub_1000D985C((uint64_t)&a15, v33);
    v51 = v37;
    sub_100109A60();
    v41 = v40;
    sub_10009D328(v42, v40);
    v52 = v41;
    v49 = sub_1000CD978((uint64_t)&a14, v33);
    a13 = 3;
    v48 = sub_1000CD978((uint64_t)&a13, v33);
    a12 = 4;
    v43 = sub_1000D985C((uint64_t)&a12, v33);
    v45 = v44;
    v47 = v43;
    a11 = 5;
    sub_10009D328(v43, v44);
    v46 = sub_1000CD978((uint64_t)&a11, v33);
    sub_1000DDE6C();
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v30);
    sub_10009934C();
    sub_10009895C();
    sub_100075DF4();
    *(_QWORD *)v32 = v51;
    *(_QWORD *)(v32 + 8) = v39;
    *(_QWORD *)(v32 + 16) = v50;
    *(_QWORD *)(v32 + 24) = v52;
    *(_BYTE *)(v32 + 32) = v49 & 1;
    *(_BYTE *)(v32 + 33) = v48 & 1;
    *(_QWORD *)(v32 + 40) = v47;
    *(_QWORD *)(v32 + 48) = v45;
    *(_BYTE *)(v32 + 56) = v46 & 1;
  }
  sub_1000B44B0();
}

unint64_t sub_1006D23B0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100B5B020, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_1006D23F8(char a1)
{
  if (!a1)
    return 0x6C62616C69617661;
  if (a1 == 1)
    return 0xD000000000000016;
  return 0x616C696176616E75;
}

uint64_t sub_1006D2460(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  char v17;

  if (a1 == 0x57746E6572727563 && a2 == 0xEE00726568746165)
  {
    v5 = 0xEE00726568746165;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x57746E6572727563, 0xEE00726568746165, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x726F46796C696164 && a2 == 0xED00007473616365)
  {
    v8 = 0xED00007473616365;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F46796C696164, 0xED00007473616365, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x6F46796C72756F68 && a2 == 0xEE00747361636572)
  {
    v10 = 0xEE00747361636572;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F46796C72756F68, 0xEE00747361636572, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0x696C617551726961 && a2 == 0xEA00000000007974)
  {
    v12 = 0xEA00000000007974;
    goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696C617551726961, 0xEA00000000007974, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3;
  }
  if (a1 == 0xD000000000000015)
  {
    v13 = 0x80000001009F0580;
    if (a2 == 0x80000001009F0580)
      goto LABEL_37;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000001009F0580, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v13);
    return 4;
  }
  if (a1 == 0x6557657265766573 && a2 == 0xED00007265687461)
  {
    v15 = 0xED00007265687461;
    goto LABEL_45;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6557657265766573, 0xED00007265687461, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_45:
    swift_bridgeObjectRelease(v15);
    return 5;
  }
  if (a1 == 0x4372656874616577 && a2 == 0xEE007365676E6168)
  {
    swift_bridgeObjectRelease(0xEE007365676E6168);
    return 6;
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4372656874616577, 0xEE007365676E6168, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v17 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_1006D27E8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1006D2828 + 4 * byte_1009BF7D6[a1]))(0x57746E6572727563, 0xEE00726568746165);
}

uint64_t sub_1006D2828()
{
  return 0x726F46796C696164;
}

uint64_t sub_1006D284C()
{
  return 0x6F46796C72756F68;
}

uint64_t sub_1006D2870()
{
  return 0x696C617551726961;
}

unint64_t sub_1006D288C()
{
  return 0xD000000000000015;
}

uint64_t sub_1006D28A8()
{
  return 0x6557657265766573;
}

uint64_t sub_1006D28CC()
{
  return 0x4372656874616577;
}

void sub_1006D28F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;

  sub_1000BA294(&qword_100BFE818);
  sub_10009C02C();
  __chkstk_darwin(v5);
  sub_1000B44C8();
  v6 = sub_1006D5A24();
  sub_1000C37B4((uint64_t)&type metadata for DiagnosticSummary.ProductAvailability.CodingKeys, v7, v6);
  v22 = a2;
  v21 = 0;
  v8 = sub_1006D5A9C();
  sub_1000B4634((uint64_t)&v22, (uint64_t)&v21, v2, (uint64_t)&unk_100B89B78, v8);
  if (!v3)
  {
    v20 = BYTE1(a2);
    v19 = 1;
    sub_1000B4634((uint64_t)&v20, (uint64_t)&v19, v2, (uint64_t)&unk_100B89B78, v8);
    v18 = BYTE2(a2);
    v17 = 2;
    sub_1000B4634((uint64_t)&v18, (uint64_t)&v17, v2, (uint64_t)&unk_100B89B78, v8);
    v16 = BYTE3(a2);
    v15 = 3;
    sub_1000B4634((uint64_t)&v16, (uint64_t)&v15, v2, (uint64_t)&unk_100B89B78, v8);
    v14 = BYTE4(a2);
    v13 = 4;
    sub_1000B4634((uint64_t)&v14, (uint64_t)&v13, v2, (uint64_t)&unk_100B89B78, v8);
    v12 = BYTE5(a2);
    v11 = 5;
    sub_1000B4634((uint64_t)&v12, (uint64_t)&v11, v2, (uint64_t)&unk_100B89B78, v8);
    v10 = BYTE6(a2);
    v9 = 6;
    sub_1000B4634((uint64_t)&v10, (uint64_t)&v9, v2, (uint64_t)&unk_100B89B78, v8);
  }
  sub_10009894C();
  sub_1000C1FB4();
  sub_100089054();
}

uint64_t sub_1006D2AD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[2];
  _BYTE v22[2];
  _BYTE v23[10];
  _BYTE v24[2];
  _BYTE v25[2];
  _BYTE v26[2];
  _BYTE v27[66];
  uint64_t v28;
  uint64_t v29;

  sub_100099310();
  v28 = v1;
  v29 = v2;
  v4 = v3;
  v5 = sub_1000BA294(&qword_100BFE800);
  __chkstk_darwin(v5);
  sub_100094EC4();
  v6 = v4[3];
  v7 = v4[4];
  sub_1000DB418(v4, v6);
  v8 = sub_1006D5A24();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DiagnosticSummary.ProductAvailability.CodingKeys, &type metadata for DiagnosticSummary.ProductAvailability.CodingKeys, v8, v6, v7);
  if (v0)
    return sub_1000998EC();
  v27[0] = 0;
  sub_1006D5A60();
  sub_1000BB408((uint64_t)&unk_100B89B78, (uint64_t)v27);
  v9 = v27[1];
  v26[0] = 1;
  sub_1000BB408((uint64_t)&unk_100B89B78, (uint64_t)v26);
  v10 = v26[1];
  v25[0] = 2;
  sub_1000BB408((uint64_t)&unk_100B89B78, (uint64_t)v25);
  v20 = v10;
  v11 = v25[1];
  v24[0] = 3;
  sub_1000BB408((uint64_t)&unk_100B89B78, (uint64_t)v24);
  v19 = v11;
  v12 = v24[1];
  v23[0] = 4;
  sub_1000BB408((uint64_t)&unk_100B89B78, (uint64_t)v23);
  v18 = v12;
  v13 = v23[1];
  v22[0] = 5;
  sub_1000BB408((uint64_t)&unk_100B89B78, (uint64_t)v22);
  v17 = v13;
  v14 = v22[1];
  v21[0] = 6;
  sub_1000BB408((uint64_t)&unk_100B89B78, (uint64_t)v21);
  sub_1000BAE28();
  v15 = v21[1];
  sub_1000998EC();
  return v9 | (v20 << 8) | (v19 << 16) | (v18 << 24) | (v17 << 32) | (v14 << 40) | (v15 << 48);
}

uint64_t sub_1006D2CF0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  char v11;

  if (a1 == 0x6574617473 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574617473, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1702125924, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 6645601 && a2 == 0xE300000000000000)
  {
    v10 = 0xE300000000000000;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(6645601, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100A10E50)
  {
    swift_bridgeObjectRelease(0x8000000100A10E50);
    return 3;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100A10E50, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1006D2E74(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1006D2EA4 + 4 * byte_1009BF7DD[a1]))(0x6574617473, 0xE500000000000000);
}

uint64_t sub_1006D2EA4()
{
  return 1702125924;
}

uint64_t sub_1006D2EB4()
{
  return 6645601;
}

unint64_t sub_1006D2EC4()
{
  return 0xD000000000000014;
}

void sub_1006D2EE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _DWORD v12[2];
  char v13;
  char v14;

  sub_1000996A0();
  sub_1000BA294(&qword_100BFE7B8);
  sub_10009C02C();
  __chkstk_darwin(v3);
  sub_1000B44C8();
  v4 = sub_1006D55B4();
  sub_1000C37B4((uint64_t)&type metadata for DiagnosticSummary.WeatherData.CodingKeys, v5, v4);
  v6 = *(_QWORD *)v2;
  v7 = *(_QWORD *)(v2 + 8);
  v14 = 0;
  sub_1000BC254(v6, v7, (uint64_t)&v14);
  if (!v1)
  {
    v8 = *(_QWORD *)(v2 + 16);
    v9 = *(_QWORD *)(v2 + 24);
    v13 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v8, v9, &v13, v0);
    sub_100109A60();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v12[0] = *(_DWORD *)(v2 + 41);
    *(_DWORD *)((char *)v12 + 3) = *(_DWORD *)(v2 + 44);
    v11 = 3;
    v10 = sub_1006D562C();
    sub_1000B4634((uint64_t)v12, (uint64_t)&v11, v0, (uint64_t)&unk_100B89A38, v10);
  }
  sub_10009894C();
  sub_1000C1FB4();
  sub_100089054();
}

void sub_1006D2FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, __int16 a11, char a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  __int16 v49;
  char v50;

  sub_100099310();
  a24 = v26;
  a25 = v27;
  v29 = v28;
  v31 = v30;
  v32 = sub_1000BA294(&qword_100BFE7A0);
  sub_100098B6C();
  __chkstk_darwin(v33);
  v34 = v29[3];
  v35 = v29[4];
  sub_1000DB418(v29, v34);
  v36 = sub_1006D55B4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DiagnosticSummary.WeatherData.CodingKeys, &type metadata for DiagnosticSummary.WeatherData.CodingKeys, v36, v34, v35);
  if (v25)
  {
    sub_1000998EC();
  }
  else
  {
    a15 = 0;
    v37 = KeyedDecodingContainer.decode(_:forKey:)(&a15, v32);
    v39 = v38;
    v47 = v37;
    sub_1000BD674(v37, v38);
    v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&a14, v32);
    v42 = v41;
    v46 = v40;
    sub_100109A60();
    sub_1000989F8();
    v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&a13, v32);
    a10 = v44;
    v45 = v43;
    a12 = 3;
    sub_1006D55F0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&unk_100B89A38, &a12, v32);
    sub_1000D1A7C();
    sub_1000998EC();
    swift_bridgeObjectRelease();
    sub_10009D2E0();
    *(_QWORD *)v31 = v47;
    *(_QWORD *)(v31 + 8) = v39;
    *(_QWORD *)(v31 + 16) = v46;
    *(_QWORD *)(v31 + 24) = v42;
    *(_QWORD *)(v31 + 32) = v45;
    *(_BYTE *)(v31 + 40) = a10 & 1;
    *(_DWORD *)(v31 + 41) = v48;
    *(_WORD *)(v31 + 45) = v49;
    *(_BYTE *)(v31 + 47) = v50;
  }
  sub_1000B44B0();
}

uint64_t sub_1006D31F8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  char v16;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v5 = 0xEA00000000007265;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x7461446C61636F6CLL && a2 == 0xE900000000000065)
  {
    v10 = 0xE900000000000065;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461446C61636F6CLL, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0x616E6964726F6F63 && a2 == 0xEA00000000006574)
  {
    v12 = 0xEA00000000006574;
    goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x616E6964726F6F63, 0xEA00000000006574, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3;
  }
  if (a1 == 0x4472656874616577 && a2 == 0xEB00000000617461)
  {
    v14 = 0xEB00000000617461;
    goto LABEL_40;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4472656874616577, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_40:
    swift_bridgeObjectRelease(v14);
    return 4;
  }
  if (a1 == 0xD00000000000001CLL && a2 == 0x8000000100A10D60)
  {
    v15 = 0x8000000100A10D60;
LABEL_46:
    swift_bridgeObjectRelease(v15);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x8000000100A10D60, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_46;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x8000000100A10D80)
  {
    swift_bridgeObjectRelease(0x8000000100A10D80);
    return 6;
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x8000000100A10D80, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_1006D34E0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1006D351C + 4 * byte_1009BF7E1[a1]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_1006D351C()
{
  return 1701667182;
}

uint64_t sub_1006D352C()
{
  return 0x7461446C61636F6CLL;
}

uint64_t sub_1006D3548()
{
  return 0x616E6964726F6F63;
}

uint64_t sub_1006D3564()
{
  return 0x4472656874616577;
}

unint64_t sub_1006D3584()
{
  return 0xD00000000000001CLL;
}

unint64_t sub_1006D35A4()
{
  return 0xD00000000000001ALL;
}

void sub_1006D35C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[3];
  char v20;

  sub_1000996A0();
  sub_1000BA294(&qword_100BFE6F0);
  sub_10009C02C();
  __chkstk_darwin(v3);
  sub_1000B44C8();
  v4 = sub_1006D4CC4();
  sub_1000C37B4((uint64_t)&type metadata for DiagnosticSummary.Location.CodingKeys, v5, v4);
  v6 = *(_QWORD *)v2;
  v7 = *(_QWORD *)(v2 + 8);
  LOBYTE(v19[0]) = 0;
  sub_1000BC254(v6, v7, (uint64_t)v19);
  if (!v1)
  {
    v8 = *(_QWORD *)(v2 + 16);
    v9 = *(_QWORD *)(v2 + 24);
    LOBYTE(v19[0]) = 1;
    sub_1000BC254(v8, v9, (uint64_t)v19);
    v10 = *(_QWORD *)(v2 + 32);
    v11 = *(_QWORD *)(v2 + 40);
    LOBYTE(v19[0]) = 2;
    sub_1000BC254(v10, v11, (uint64_t)v19);
    v19[0] = *(_OWORD *)(v2 + 48);
    v20 = 3;
    type metadata accessor for CLLocationCoordinate2D(0);
    v13 = v12;
    v14 = sub_1006D4D3C(&qword_100BF8800, (uint64_t)&protocol conformance descriptor for CLLocationCoordinate2D);
    sub_1000B4634((uint64_t)v19, (uint64_t)&v20, v0, v13, v14);
    v15 = *(_OWORD *)(v2 + 80);
    v19[0] = *(_OWORD *)(v2 + 64);
    v19[1] = v15;
    v19[2] = *(_OWORD *)(v2 + 96);
    v20 = 4;
    v16 = sub_1006D4D7C();
    sub_1000B4634((uint64_t)v19, (uint64_t)&v20, v0, (uint64_t)&unk_100B89800, v16);
    v17 = *(unsigned __int8 *)(v2 + 112);
    LOBYTE(v19[0]) = 5;
    sub_1000C2F20(v17, (uint64_t)v19);
    v18 = *(unsigned __int8 *)(v2 + 113);
    LOBYTE(v19[0]) = 6;
    sub_1000C2F20(v18, (uint64_t)v19);
  }
  sub_10009894C();
  sub_1000C1FB4();
  sub_100089054();
}

void sub_1006D374C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint8x8_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  __int32 v46;
  char v47;
  char v48;
  char v49;
  _BYTE v50[9];

  v6 = sub_1000BA294(&qword_100BFE6D8);
  sub_100098B6C();
  __chkstk_darwin(v7);
  sub_1000DB418(a1, a1[3]);
  v8 = sub_1006D4CC4();
  sub_1000C67BC((uint64_t)&type metadata for DiagnosticSummary.Location.CodingKeys, v9, v8);
  if (v2)
  {
    sub_1000B4838();
    return;
  }
  LOBYTE(v40) = 0;
  v10 = sub_1000D985C((uint64_t)&v40, v6);
  v12 = v11;
  v38 = v10;
  LOBYTE(v40) = 1;
  sub_10009D328(v10, v11);
  v13 = sub_1000D985C((uint64_t)&v40, v6);
  v15 = v14;
  v37 = v13;
  LOBYTE(v40) = 2;
  sub_10009D328(v13, v14);
  v34 = sub_1000D985C((uint64_t)&v40, v6);
  v17 = v16;
  type metadata accessor for CLLocationCoordinate2D(0);
  v35 = v18;
  v50[0] = 3;
  v19 = sub_1006D4D3C(&qword_100BF87E0, (uint64_t)&protocol conformance descriptor for CLLocationCoordinate2D);
  v39 = v17;
  sub_1000989F8();
  sub_1000CF9B0(v35, (uint64_t)v50, v6, v35);
  if (v19)
  {
    sub_1000BAC2C();
    sub_100075DF4();
    sub_10009934C();
    sub_1000D0ADC();
    v22 = 0;
  }
  else
  {
    v20 = v40;
    v21 = v41;
    v50[0] = 4;
    sub_1006D4D00();
    sub_1000CF9B0((uint64_t)&unk_100B89800, (uint64_t)v50, v6, (uint64_t)&unk_100B89800);
    v23 = v41;
    v29 = v42;
    v30 = v40;
    v28 = v44;
    v27 = v45;
    v3.i32[0] = v46;
    v32 = v48;
    v33 = v47;
    v31 = v49;
    LOBYTE(v40) = 5;
    v36 = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24 = sub_1000CD978((uint64_t)&v40, v6);
    if (!v23)
    {
      v26 = v24;
      LOBYTE(v40) = 6;
      v25 = sub_1000CD978((uint64_t)&v40, v6);
      sub_1000BAC2C();
      sub_1000B4838();
      sub_10009D2E0();
      sub_100098964();
      sub_10009895C();
      sub_10009934C();
      sub_100075DF4();
      *(_QWORD *)a2 = v38;
      *(_QWORD *)(a2 + 8) = v12;
      *(_QWORD *)(a2 + 16) = v37;
      *(_QWORD *)(a2 + 24) = v15;
      *(_QWORD *)(a2 + 32) = v34;
      *(_QWORD *)(a2 + 40) = v39;
      *(_QWORD *)(a2 + 48) = v20;
      *(_QWORD *)(a2 + 56) = v21;
      *(_QWORD *)(a2 + 64) = v30;
      *(_QWORD *)(a2 + 72) = 0;
      *(_QWORD *)(a2 + 80) = v29;
      *(_QWORD *)(a2 + 88) = v36;
      *(_QWORD *)(a2 + 96) = v28;
      *(_BYTE *)(a2 + 104) = v27;
      *(_DWORD *)(a2 + 105) = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
      *(_BYTE *)(a2 + 109) = v33;
      *(_BYTE *)(a2 + 110) = v32;
      *(_BYTE *)(a2 + 111) = v31;
      *(_BYTE *)(a2 + 112) = v26 & 1;
      *(_BYTE *)(a2 + 113) = v25 & 1;
      return;
    }
    sub_1000BAC2C();
    sub_100075DF4();
    sub_10009934C();
    sub_1000D0ADC();
    sub_1000CC8C8();
    sub_100098964();
    v22 = 1;
  }
  sub_1000B4838();
  sub_100075DF4();
  sub_10009934C();
  sub_1000D0ADC();
  if ((v22 & 1) != 0)
  {
    sub_100098964();
    sub_1000CC8C8();
  }
}

uint64_t sub_1006D3B1C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1006D3BF8(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E6F6973726576;
  else
    return 1701667182;
}

void sub_1006D3C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  sub_100099310();
  a22 = v25;
  a23 = v26;
  v40 = v27;
  v41 = v28;
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v35 = sub_1000BA294(&qword_100BFE710);
  v36 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  sub_100094EC4();
  v38 = v34[3];
  v37 = v34[4];
  sub_1000DB418(v34, v38);
  v39 = sub_1006D4DB8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DiagnosticSummary.BundleVersion.CodingKeys, &type metadata for DiagnosticSummary.BundleVersion.CodingKeys, v39, v38, v37);
  a13 = 0;
  sub_100099C6C(v32, v30, (uint64_t)&a13);
  if (!v23)
  {
    a12 = 1;
    sub_100099C6C(v40, v41, (uint64_t)&a12);
  }
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v24, v35);
  sub_1000B44B0();
}

uint64_t sub_1006D3D0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  sub_100099310();
  v12 = v1;
  v13 = v2;
  v4 = v3;
  sub_1000BA294(&qword_100BFE700);
  sub_100098B6C();
  __chkstk_darwin(v5);
  v6 = v4[3];
  v7 = v4[4];
  sub_1000DB418(v4, v6);
  v8 = sub_1006D4DB8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DiagnosticSummary.BundleVersion.CodingKeys, &type metadata for DiagnosticSummary.BundleVersion.CodingKeys, v8, v6, v7);
  if (v0)
  {
    sub_1000B4838();
  }
  else
  {
    HIBYTE(v11) = 0;
    v7 = sub_1000D0E38((uint64_t)&v11 + 1);
    sub_1000BD674(v7, v10);
    sub_1000D0E38((uint64_t)&v11);
    sub_1000CCE48();
    swift_bridgeObjectRetain();
    sub_1000B4838();
    sub_100098964();
    sub_10009934C();
  }
  return v7;
}

uint64_t sub_1006D3E48(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  char v12;

  if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1702125924, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6D6E6F7269766E65 && a2 == 0xEB00000000746E65)
  {
    v8 = 0xEB00000000746E65;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D6E6F7269766E65, 0xEB00000000746E65, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE900000000000073)
  {
    v10 = 0xE900000000000073;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xE900000000000073, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0x736E6F6973726576 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 3;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x736E6F6973726576, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1006D4008(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1006D4034 + 4 * byte_1009BF7E8[a1]))(1702125924, 0xE400000000000000);
}

uint64_t sub_1006D4034()
{
  return 0x6D6E6F7269766E65;
}

uint64_t sub_1006D4054()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_1006D4070()
{
  return 0x736E6F6973726576;
}

void sub_1006D4088()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[2];
  _BYTE v24[25];

  sub_1000996A0();
  sub_1000BA294(&qword_100BFE690);
  sub_10009C02C();
  __chkstk_darwin(v2);
  sub_1000B44C8();
  v3 = sub_1006D4BD4();
  sub_1000C37B4((uint64_t)&type metadata for DiagnosticSummary.CodingKeys, v4, v3);
  v5 = *(_QWORD *)v1;
  v6 = *(_QWORD *)(v1 + 8);
  LOBYTE(v23[0]) = 0;
  sub_1000BC254(v5, v6, (uint64_t)v23);
  if (!v0)
  {
    v7 = *(_OWORD *)(v1 + 32);
    v23[0] = *(_OWORD *)(v1 + 16);
    v23[1] = v7;
    *(_OWORD *)v24 = *(_OWORD *)(v1 + 48);
    *(_OWORD *)&v24[9] = *(_OWORD *)(v1 + 57);
    sub_1006D4C10();
    v8 = sub_1000C6C2C();
    sub_1000B4634(v8, v9, v10, v11, v12);
    *(_QWORD *)&v23[0] = *(_QWORD *)(v1 + 80);
    v13 = sub_1000BA294(&qword_100BFE6A8);
    sub_100121C78(&qword_100BFE6B0, &qword_100BFE6A8, (void (*)(void))sub_1006D4C4C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v14 = sub_1000C6C2C();
    sub_1000B4634(v14, v15, v16, v13, v17);
    *(_QWORD *)&v23[0] = *(_QWORD *)(v1 + 88);
    v18 = sub_1000BA294(&qword_100BFE6C0);
    sub_100121C78(&qword_100BFE6C8, &qword_100BFE6C0, (void (*)(void))sub_1006D4C88, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v19 = sub_1000C6C2C();
    sub_1000B4634(v19, v20, v21, v18, v22);
  }
  sub_10009894C();
  sub_1000C1FB4();
  sub_100089054();
}

void sub_1006D420C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, __int16 a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[4];
  char v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;

  sub_100099310();
  a23 = v25;
  a24 = v26;
  v28 = v27;
  v30 = v29;
  v31 = sub_1000BA294(&qword_100BFE718);
  __chkstk_darwin(v31);
  v32 = v28[3];
  v33 = v28[4];
  sub_1000DB418(v28, v32);
  v34 = sub_1006D4BD4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DiagnosticSummary.CodingKeys, &type metadata for DiagnosticSummary.CodingKeys, v34, v32, v33);
  if (v24)
  {
    sub_1000998EC();
  }
  else
  {
    LOBYTE(v60[0]) = 0;
    v35 = KeyedDecodingContainer.decode(_:forKey:)(v60, v31);
    v37 = v36;
    v59 = v35;
    a14 = 1;
    v38 = sub_1006D4DF4();
    sub_1000878DC();
    sub_1000DAAE0((uint64_t)&unk_100B89888, (uint64_t)&a14, v31, (uint64_t)&unk_100B89888);
    v39 = v38;
    if (v38)
    {
      sub_1000DBB88();
      sub_10009895C();
      v40 = 0;
    }
    else
    {
      v41 = v60[1];
      v54 = v60[0];
      v55 = v37;
      v53 = v60[2];
      v42 = v60[3];
      a10 = v61;
      v52 = v62;
      v43 = v64;
      v51 = v63;
      v50 = v65;
      v44 = sub_1000BA294(&qword_100BFE6A8);
      a14 = 2;
      sub_100121C78(&qword_100BFE728, &qword_100BFE6A8, (void (*)(void))sub_1006D4E30, (uint64_t)&protocol conformance descriptor for <A> [A]);
      v58 = v41;
      sub_1000989F8();
      v57 = v42;
      v39 = 0;
      swift_bridgeObjectRetain();
      v56 = v43;
      sub_1000878DC();
      KeyedDecodingContainer.decode<A>(_:forKey:)(v44, &a14, v31);
      v45 = v60[0];
      v46 = sub_1000BA294(&qword_100BFE6C0);
      a14 = 3;
      v47 = sub_100121C78(&qword_100BFE738, &qword_100BFE6C0, (void (*)(void))sub_1006D4E6C, (uint64_t)&protocol conformance descriptor for <A> [A]);
      v49 = v45;
      sub_1000989F8();
      sub_1000DAAE0(v46, (uint64_t)&a14, v31, v46);
      if (!v47)
      {
        sub_1000DBB88();
        v48 = v60[0];
        sub_1000878DC();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1000989F8();
        sub_10009895C();
        sub_100098964();
        sub_1000CC8C8();
        sub_10009D2E0();
        sub_1000998EC();
        sub_1000986C4();
        swift_bridgeObjectRelease();
        sub_100098964();
        sub_1000CC8C8();
        sub_10009D2E0();
        sub_10009895C();
        *(_QWORD *)v30 = v59;
        *(_QWORD *)(v30 + 8) = v55;
        *(_QWORD *)(v30 + 16) = v54;
        *(_QWORD *)(v30 + 24) = v58;
        *(_QWORD *)(v30 + 32) = v53;
        *(_QWORD *)(v30 + 40) = v57;
        *(_BYTE *)(v30 + 48) = a10;
        *(_BYTE *)(v30 + 49) = v52;
        *(_QWORD *)(v30 + 56) = v51;
        *(_QWORD *)(v30 + 64) = v56;
        *(_BYTE *)(v30 + 72) = v50;
        *(_QWORD *)(v30 + 80) = v49;
        *(_QWORD *)(v30 + 88) = v48;
        goto LABEL_4;
      }
      sub_1000DBB88();
      sub_10009895C();
      sub_100098964();
      sub_1000CC8C8();
      sub_10009934C();
      swift_bridgeObjectRelease();
      v40 = 1;
    }
    sub_1000998EC();
    sub_10009895C();
    if (!v39)
    {
      sub_100098964();
      sub_1000CC8C8();
      sub_10009934C();
    }
    if (v40)
      swift_bridgeObjectRelease();
  }
LABEL_4:
  sub_1000B44B0();
}

uint64_t sub_1006D459C()
{
  unsigned __int8 *v0;

  return sub_1006D1FB0(*v0);
}

uint64_t sub_1006D45A4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1006D1D6C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006D45C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006D5578();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006D45F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006D5578();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1006D4618@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>)
{
  uint64_t v9;
  double result;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[25];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t vars0;
  uint64_t vars8;

  sub_1006D2154(a1, a2, a3, a4, a5, a6, a7, a8, v12, v14, SBYTE2(v14), SBYTE3(v14), SBYTE4(v14), SBYTE5(v14), SBYTE6(v14), SHIBYTE(v14), v15, v17, v18,
    v20,
    v21,
    v22,
    v23,
    v24,
    vars0,
    vars8);
  if (!v9)
  {
    *a9 = v13;
    a9[1] = v16;
    a9[2] = *(_OWORD *)v19;
    result = *(double *)&v19[9];
    *(_OWORD *)((char *)a9 + 41) = *(_OWORD *)&v19[9];
  }
  return result;
}

void sub_1006D4660()
{
  sub_1006D2040();
}

void sub_1006D4674(unsigned __int8 *a1, char *a2)
{
  sub_10068B074(*a1, *a2);
}

void sub_1006D4680()
{
  sub_1004A764C();
}

double sub_1006D4688(uint64_t a1)
{
  char *v1;

  return sub_1001D8A30(a1, *v1);
}

void sub_1006D4690(uint64_t a1)
{
  sub_1001D9EDC(a1);
}

unint64_t sub_1006D4698@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1006D23B0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1006D46C4@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1006D23F8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1006D46EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1006D5D6C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1006D4748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1006D5D6C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1006D4794()
{
  unsigned __int8 *v0;

  return sub_1006D27E8(*v0);
}

uint64_t sub_1006D479C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1006D2460(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006D47C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006D5A24();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006D47E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006D5A24();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006D4810@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_1006D2AD8();
  if (!v1)
  {
    *(_WORD *)a1 = result;
    *(_BYTE *)(a1 + 2) = BYTE2(result);
    *(_BYTE *)(a1 + 3) = BYTE3(result);
    *(_BYTE *)(a1 + 4) = BYTE4(result);
    *(_BYTE *)(a1 + 5) = BYTE5(result);
    *(_BYTE *)(a1 + 6) = BYTE6(result);
  }
  return result;
}

void sub_1006D4868(uint64_t a1)
{
  unsigned __int16 *v1;

  sub_1006D28F0(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v1 + 3) << 24));
}

uint64_t sub_1006D4890()
{
  unsigned __int8 *v0;

  return sub_1006D2E74(*v0);
}

uint64_t sub_1006D4898@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1006D2CF0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006D48BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006D55B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006D48E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006D55B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

#error "1006D4924: call analysis failed (funcsize=16)"

void sub_1006D494C()
{
  sub_1006D2EE0();
}

uint64_t sub_1006D4960()
{
  unsigned __int8 *v0;

  return sub_1006D34E0(*v0);
}

uint64_t sub_1006D4968@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1006D31F8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006D498C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006D4CC4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006D49B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006D4CC4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1006D49DC(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  _BYTE __src[120];

  sub_1006D374C(a1, (uint64_t)__src);
  if (!v2)
    memcpy(a2, __src, 0x72uLL);
}

void sub_1006D4A24()
{
  sub_1006D35C0();
}

uint64_t sub_1006D4A38()
{
  char *v0;

  return sub_1006D3BF8(*v0);
}

uint64_t sub_1006D4A40@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1006D3B1C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006D4A64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006D4DB8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006D4A8C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006D4DB8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006D4AB4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_1006D3D0C();
  if (!v1)
  {
    *a1 = result;
    a1[1] = v4;
    a1[2] = v5;
    a1[3] = v6;
  }
  return result;
}

#error "1006D4AF0: call analysis failed (funcsize=7)"

uint64_t sub_1006D4AFC()
{
  unsigned __int8 *v0;

  return sub_1006D4008(*v0);
}

uint64_t sub_1006D4B04@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1006D3E48(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006D4B28(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006D4BD4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006D4B50(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006D4BD4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1006D4B78(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v9;
  uint64_t v11[12];

  sub_1006D420C(a1, a2, a3, a4, a5, a6, a7, a8, v11[0], v11[1], SWORD1(v11[1]), SWORD2(v11[1]), SBYTE6(v11[1]), SHIBYTE(v11[1]), v11[2], v11[3], v11[4], v11[5], v11[6],
    v11[7],
    v11[8],
    v11[9],
    v11[10],
    v11[11]);
  if (!v9)
    memcpy(a9, v11, 0x60uLL);
}

void sub_1006D4BC0()
{
  sub_1006D4088();
}

unint64_t sub_1006D4BD4()
{
  unint64_t result;

  result = qword_100BFE698;
  if (!qword_100BFE698)
  {
    result = swift_getWitnessTable(&unk_1009BFCD0, &type metadata for DiagnosticSummary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFE698);
  }
  return result;
}

unint64_t sub_1006D4C10()
{
  unint64_t result;

  result = qword_100BFE6A0;
  if (!qword_100BFE6A0)
  {
    result = swift_getWitnessTable(&unk_1009BFCA8, &unk_100B89888);
    atomic_store(result, (unint64_t *)&qword_100BFE6A0);
  }
  return result;
}

unint64_t sub_1006D4C4C()
{
  unint64_t result;

  result = qword_100BFE6B8;
  if (!qword_100BFE6B8)
  {
    result = swift_getWitnessTable(&unk_1009BF8CC, &unk_100B894B0);
    atomic_store(result, (unint64_t *)&qword_100BFE6B8);
  }
  return result;
}

unint64_t sub_1006D4C88()
{
  unint64_t result;

  result = qword_100BFE6D0;
  if (!qword_100BFE6D0)
  {
    result = swift_getWitnessTable(&unk_1009BF87C, &unk_100B89548);
    atomic_store(result, (unint64_t *)&qword_100BFE6D0);
  }
  return result;
}

unint64_t sub_1006D4CC4()
{
  unint64_t result;

  result = qword_100BFE6E0;
  if (!qword_100BFE6E0)
  {
    result = swift_getWitnessTable(&unk_1009BFC58, &type metadata for DiagnosticSummary.Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFE6E0);
  }
  return result;
}

unint64_t sub_1006D4D00()
{
  unint64_t result;

  result = qword_100BFE6E8;
  if (!qword_100BFE6E8)
  {
    result = swift_getWitnessTable(&unk_1009BFC30, &unk_100B89800);
    atomic_store(result, (unint64_t *)&qword_100BFE6E8);
  }
  return result;
}

uint64_t sub_1006D4D3C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CLLocationCoordinate2D(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1006D4D7C()
{
  unint64_t result;

  result = qword_100BFE6F8;
  if (!qword_100BFE6F8)
  {
    result = swift_getWitnessTable(&unk_1009BFC08, &unk_100B89800);
    atomic_store(result, (unint64_t *)&qword_100BFE6F8);
  }
  return result;
}

unint64_t sub_1006D4DB8()
{
  unint64_t result;

  result = qword_100BFE708;
  if (!qword_100BFE708)
  {
    result = swift_getWitnessTable(&unk_1009BFBB8, &type metadata for DiagnosticSummary.BundleVersion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFE708);
  }
  return result;
}

unint64_t sub_1006D4DF4()
{
  unint64_t result;

  result = qword_100BFE720;
  if (!qword_100BFE720)
  {
    result = swift_getWitnessTable(&unk_1009BFB90, &unk_100B89888);
    atomic_store(result, (unint64_t *)&qword_100BFE720);
  }
  return result;
}

unint64_t sub_1006D4E30()
{
  unint64_t result;

  result = qword_100BFE730;
  if (!qword_100BFE730)
  {
    result = swift_getWitnessTable(&unk_1009BF8F4, &unk_100B894B0);
    atomic_store(result, (unint64_t *)&qword_100BFE730);
  }
  return result;
}

unint64_t sub_1006D4E6C()
{
  unint64_t result;

  result = qword_100BFE740;
  if (!qword_100BFE740)
  {
    result = swift_getWitnessTable(&unk_1009BF8A4, &unk_100B89548);
    atomic_store(result, (unint64_t *)&qword_100BFE740);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DiagnosticSummary.BundleVersion.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1006D4EF4 + 4 * byte_1009BF7F1[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1006D4F28 + 4 * byte_1009BF7EC[v4]))();
}

uint64_t sub_1006D4F28(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006D4F30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1006D4F38);
  return result;
}

uint64_t sub_1006D4F44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1006D4F4CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1006D4F50(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006D4F58(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DiagnosticSummary.BundleVersion.CodingKeys()
{
  return &type metadata for DiagnosticSummary.BundleVersion.CodingKeys;
}

ValueMetadata *type metadata accessor for DiagnosticSummary.Location.CodingKeys()
{
  return &type metadata for DiagnosticSummary.Location.CodingKeys;
}

ValueMetadata *type metadata accessor for DiagnosticSummary.CodingKeys()
{
  return &type metadata for DiagnosticSummary.CodingKeys;
}

uint64_t sub_1006D4FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 41) = *(_DWORD *)(a2 + 41);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_1006D4FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_BYTE *)(a1 + 45) = *(_BYTE *)(a2 + 45);
  *(_BYTE *)(a1 + 46) = *(_BYTE *)(a2 + 46);
  *(_BYTE *)(a1 + 47) = *(_BYTE *)(a2 + 47);
  return a1;
}

uint64_t sub_1006D50B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 41) = *(_DWORD *)(a2 + 41);
  *(_BYTE *)(a1 + 45) = *(_BYTE *)(a2 + 45);
  *(_WORD *)(a1 + 46) = *(_WORD *)(a2 + 46);
  return a1;
}

void type metadata accessor for DiagnosticSummary.WeatherData()
{
  sub_100098884();
}

uint64_t sub_1006D5128(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t sub_1006D518C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t sub_1006D5230(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t sub_1006D529C(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 57))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1006D52DC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for DiagnosticSummary.Environment()
{
  sub_100098884();
}

unint64_t sub_1006D533C()
{
  unint64_t result;

  result = qword_100BFE748;
  if (!qword_100BFE748)
  {
    result = swift_getWitnessTable(&unk_1009BF9F8, &type metadata for DiagnosticSummary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFE748);
  }
  return result;
}

unint64_t sub_1006D537C()
{
  unint64_t result;

  result = qword_100BFE750;
  if (!qword_100BFE750)
  {
    result = swift_getWitnessTable(&unk_1009BFAB0, &type metadata for DiagnosticSummary.Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFE750);
  }
  return result;
}

unint64_t sub_1006D53BC()
{
  unint64_t result;

  result = qword_100BFE758;
  if (!qword_100BFE758)
  {
    result = swift_getWitnessTable(&unk_1009BFB68, &type metadata for DiagnosticSummary.BundleVersion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFE758);
  }
  return result;
}

unint64_t sub_1006D53FC()
{
  unint64_t result;

  result = qword_100BFE760;
  if (!qword_100BFE760)
  {
    result = swift_getWitnessTable(&unk_1009BFAD8, &type metadata for DiagnosticSummary.BundleVersion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFE760);
  }
  return result;
}

unint64_t sub_1006D543C()
{
  unint64_t result;

  result = qword_100BFE768;
  if (!qword_100BFE768)
  {
    result = swift_getWitnessTable(&unk_1009BFB00, &type metadata for DiagnosticSummary.BundleVersion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFE768);
  }
  return result;
}

unint64_t sub_1006D547C()
{
  unint64_t result;

  result = qword_100BFE770;
  if (!qword_100BFE770)
  {
    result = swift_getWitnessTable(&unk_1009BFA20, &type metadata for DiagnosticSummary.Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFE770);
  }
  return result;
}

unint64_t sub_1006D54BC()
{
  unint64_t result;

  result = qword_100BFE778;
  if (!qword_100BFE778)
  {
    result = swift_getWitnessTable(&unk_1009BFA48, &type metadata for DiagnosticSummary.Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFE778);
  }
  return result;
}

unint64_t sub_1006D54FC()
{
  unint64_t result;

  result = qword_100BFE780;
  if (!qword_100BFE780)
  {
    result = swift_getWitnessTable(&unk_1009BF968, &type metadata for DiagnosticSummary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFE780);
  }
  return result;
}

unint64_t sub_1006D553C()
{
  unint64_t result;

  result = qword_100BFE788;
  if (!qword_100BFE788)
  {
    result = swift_getWitnessTable(&unk_1009BF990, &type metadata for DiagnosticSummary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFE788);
  }
  return result;
}

unint64_t sub_1006D5578()
{
  unint64_t result;

  result = qword_100BFE798;
  if (!qword_100BFE798)
  {
    result = swift_getWitnessTable(&unk_1009BFF44, &type metadata for DiagnosticSummary.Environment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFE798);
  }
  return result;
}

unint64_t sub_1006D55B4()
{
  unint64_t result;

  result = qword_100BFE7A8;
  if (!qword_100BFE7A8)
  {
    result = swift_getWitnessTable(&unk_1009BFEF4, &type metadata for DiagnosticSummary.WeatherData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFE7A8);
  }
  return result;
}

unint64_t sub_1006D55F0()
{
  unint64_t result;

  result = qword_100BFE7B0;
  if (!qword_100BFE7B0)
  {
    result = swift_getWitnessTable(&unk_1009BFECC, &unk_100B89A38);
    atomic_store(result, (unint64_t *)&qword_100BFE7B0);
  }
  return result;
}

unint64_t sub_1006D562C()
{
  unint64_t result;

  result = qword_100BFE7C0;
  if (!qword_100BFE7C0)
  {
    result = swift_getWitnessTable(&unk_1009BFEA4, &unk_100B89A38);
    atomic_store(result, (unint64_t *)&qword_100BFE7C0);
  }
  return result;
}

uint64_t _s7Weather17DiagnosticSummaryV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1006D56B4 + 4 * byte_1009BF7FB[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1006D56E8 + 4 * byte_1009BF7F6[v4]))();
}

uint64_t sub_1006D56E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006D56F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1006D56F8);
  return result;
}

uint64_t sub_1006D5704(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1006D570CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1006D5710(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006D5718(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DiagnosticSummary.WeatherData.CodingKeys()
{
  return &type metadata for DiagnosticSummary.WeatherData.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for DiagnosticSummary.Environment.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1006D5780 + 4 * byte_1009BF805[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1006D57B4 + 4 * byte_1009BF800[v4]))();
}

uint64_t sub_1006D57B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006D57BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1006D57C4);
  return result;
}

uint64_t sub_1006D57D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1006D57D8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1006D57DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006D57E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DiagnosticSummary.Environment.CodingKeys()
{
  return &type metadata for DiagnosticSummary.Environment.CodingKeys;
}

_DWORD *sub_1006D5800(_DWORD *result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_DWORD *)((char *)result + 3) = *(int *)((char *)a2 + 3);
  *result = v2;
  return result;
}

uint64_t sub_1006D5814(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;

  if (a2)
  {
    if (a2 >= 0xFE && a1[7])
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *a1;
      v4 = v3 >= 3;
      v2 = v3 - 3;
      if (!v4)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1006D5850(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 6) = 0;
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 7) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 7) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 2;
  }
  return result;
}

void type metadata accessor for DiagnosticSummary.ProductAvailability()
{
  sub_100098884();
}

unint64_t sub_1006D58A8()
{
  unint64_t result;

  result = qword_100BFE7D0;
  if (!qword_100BFE7D0)
  {
    result = swift_getWitnessTable(&unk_1009BFDC4, &type metadata for DiagnosticSummary.Environment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFE7D0);
  }
  return result;
}

unint64_t sub_1006D58E8()
{
  unint64_t result;

  result = qword_100BFE7D8;
  if (!qword_100BFE7D8)
  {
    result = swift_getWitnessTable(&unk_1009BFE7C, &type metadata for DiagnosticSummary.WeatherData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFE7D8);
  }
  return result;
}

unint64_t sub_1006D5928()
{
  unint64_t result;

  result = qword_100BFE7E0;
  if (!qword_100BFE7E0)
  {
    result = swift_getWitnessTable(&unk_1009BFDEC, &type metadata for DiagnosticSummary.WeatherData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFE7E0);
  }
  return result;
}

unint64_t sub_1006D5968()
{
  unint64_t result;

  result = qword_100BFE7E8;
  if (!qword_100BFE7E8)
  {
    result = swift_getWitnessTable(&unk_1009BFE14, &type metadata for DiagnosticSummary.WeatherData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFE7E8);
  }
  return result;
}

unint64_t sub_1006D59A8()
{
  unint64_t result;

  result = qword_100BFE7F0;
  if (!qword_100BFE7F0)
  {
    result = swift_getWitnessTable(&unk_1009BFD34, &type metadata for DiagnosticSummary.Environment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFE7F0);
  }
  return result;
}

unint64_t sub_1006D59E8()
{
  unint64_t result;

  result = qword_100BFE7F8;
  if (!qword_100BFE7F8)
  {
    result = swift_getWitnessTable(&unk_1009BFD5C, &type metadata for DiagnosticSummary.Environment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFE7F8);
  }
  return result;
}

unint64_t sub_1006D5A24()
{
  unint64_t result;

  result = qword_100BFE808;
  if (!qword_100BFE808)
  {
    result = swift_getWitnessTable(&unk_1009C0164, &type metadata for DiagnosticSummary.ProductAvailability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFE808);
  }
  return result;
}

unint64_t sub_1006D5A60()
{
  unint64_t result;

  result = qword_100BFE810;
  if (!qword_100BFE810)
  {
    result = swift_getWitnessTable(&unk_1009C013C, &unk_100B89B78);
    atomic_store(result, (unint64_t *)&qword_100BFE810);
  }
  return result;
}

unint64_t sub_1006D5A9C()
{
  unint64_t result;

  result = qword_100BFE820;
  if (!qword_100BFE820)
  {
    result = swift_getWitnessTable(&unk_1009C0114, &unk_100B89B78);
    atomic_store(result, (unint64_t *)&qword_100BFE820);
  }
  return result;
}

uint64_t _s7Weather17DiagnosticSummaryV8LocationV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1006D5B24 + 4 * byte_1009BF80F[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1006D5B58 + 4 * byte_1009BF80A[v4]))();
}

uint64_t sub_1006D5B58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006D5B60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1006D5B68);
  return result;
}

uint64_t sub_1006D5B74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1006D5B7CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1006D5B80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006D5B88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DiagnosticSummary.ProductAvailability.CodingKeys()
{
  return &type metadata for DiagnosticSummary.ProductAvailability.CodingKeys;
}

uint64_t sub_1006D5BA4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1006D5BF0 + 4 * byte_1009BF819[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1006D5C24 + 4 * byte_1009BF814[v4]))();
}

uint64_t sub_1006D5C24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006D5C2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1006D5C34);
  return result;
}

uint64_t sub_1006D5C40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1006D5C48);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1006D5C4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006D5C54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for DiagnosticSummary.ProductAvailabilityState()
{
  sub_100098884();
}

unint64_t sub_1006D5C70()
{
  unint64_t result;

  result = qword_100BFE828;
  if (!qword_100BFE828)
  {
    result = swift_getWitnessTable(&unk_1009C0034, &unk_100B89B78);
    atomic_store(result, (unint64_t *)&qword_100BFE828);
  }
  return result;
}

unint64_t sub_1006D5CB0()
{
  unint64_t result;

  result = qword_100BFE830;
  if (!qword_100BFE830)
  {
    result = swift_getWitnessTable(&unk_1009C00EC, &type metadata for DiagnosticSummary.ProductAvailability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFE830);
  }
  return result;
}

unint64_t sub_1006D5CF0()
{
  unint64_t result;

  result = qword_100BFE838;
  if (!qword_100BFE838)
  {
    result = swift_getWitnessTable(&unk_1009C005C, &type metadata for DiagnosticSummary.ProductAvailability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFE838);
  }
  return result;
}

unint64_t sub_1006D5D30()
{
  unint64_t result;

  result = qword_100BFE840;
  if (!qword_100BFE840)
  {
    result = swift_getWitnessTable(&unk_1009C0084, &type metadata for DiagnosticSummary.ProductAvailability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFE840);
  }
  return result;
}

unint64_t sub_1006D5D6C()
{
  unint64_t result;

  result = qword_100BFE848;
  if (!qword_100BFE848)
  {
    result = swift_getWitnessTable(&unk_1009BFFBC, &unk_100B89B78);
    atomic_store(result, (unint64_t *)&qword_100BFE848);
  }
  return result;
}

uint64_t sub_1006D5DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[6];
  char v8;

  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3;
  v7[3] = a4;
  v7[4] = sub_1006D5DF4;
  v7[5] = 0;
  v8 = 0;
  return View.modifier<A>(_:)(v7, a5, &type metadata for TrackVisibilityModifier, a6);
}

uint64_t sub_1006D5DF4()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for VisibilityStateHolder();
  result = swift_allocObject(v0, 17, 7);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

void sub_1006D5E1C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  double (**v19)();
  uint64_t v20;
  __int128 v21;
  char *v22;
  void *v23;
  id v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  double (**v35)(uint64_t);
  void (*v36)(char *, uint64_t);
  id v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  double (**v42)(uint64_t);
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  char v52;

  v3 = v2;
  v48 = a2;
  v5 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v46 = *(_QWORD *)(v5 - 8);
  v47 = v5;
  __chkstk_darwin(v5);
  v44 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BFE910);
  __chkstk_darwin(v7);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BFE918);
  __chkstk_darwin(v10);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_1000BA294(&qword_100BFE920);
  __chkstk_darwin(v45);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v3 + 8);
  v49 = *(_QWORD *)(v3 + 24);
  v51 = *(_OWORD *)(v3 + 32);
  v52 = *(_BYTE *)(v3 + 48);
  v16 = swift_allocObject(&unk_100B89D40, 65, 7);
  v17 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v16 + 16) = *(_OWORD *)v3;
  *(_OWORD *)(v16 + 32) = v17;
  *(_OWORD *)(v16 + 48) = *(_OWORD *)(v3 + 32);
  *(_BYTE *)(v16 + 64) = *(_BYTE *)(v3 + 48);
  v18 = sub_1000BA294(&qword_100BFE928);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v9, a1, v18);
  v19 = (double (**)())&v9[*(int *)(v7 + 36)];
  *v19 = sub_1006D69F0;
  v19[1] = (double (*)())v16;
  v19[2] = 0;
  v19[3] = 0;
  v20 = swift_allocObject(&unk_100B89D68, 65, 7);
  v21 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v20 + 16) = *(_OWORD *)v3;
  *(_OWORD *)(v20 + 32) = v21;
  *(_OWORD *)(v20 + 48) = *(_OWORD *)(v3 + 32);
  *(_BYTE *)(v20 + 64) = *(_BYTE *)(v3 + 48);
  sub_10007EBC8((uint64_t)v9, (uint64_t)v12, &qword_100BFE910);
  v22 = &v12[*(int *)(v10 + 36)];
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = sub_1006D69FC;
  *((_QWORD *)v22 + 3) = v20;
  v50 = v15;
  swift_retain();
  swift_retain();
  sub_1006D6A04((uint64_t *)&v51);
  swift_retain();
  swift_retain();
  sub_1006D6A04((uint64_t *)&v51);
  sub_100021AA4((uint64_t)v9, &qword_100BFE910);
  v23 = (void *)objc_opt_self(NSNotificationCenter);
  v24 = objc_msgSend(v23, "defaultCenter");
  v25 = v44;
  NSNotificationCenter.publisher(for:object:)(UIApplicationDidEnterBackgroundNotification, 0);

  v26 = swift_allocObject(&unk_100B89D90, 65, 7);
  v27 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v26 + 16) = *(_OWORD *)v3;
  *(_OWORD *)(v26 + 32) = v27;
  *(_OWORD *)(v26 + 48) = *(_OWORD *)(v3 + 32);
  *(_BYTE *)(v26 + 64) = *(_BYTE *)(v3 + 48);
  v28 = (uint64_t)v14;
  sub_10007EBC8((uint64_t)v12, (uint64_t)v14, &qword_100BFE918);
  v30 = v45;
  v29 = v46;
  v31 = &v14[*(int *)(v45 + 52)];
  v43 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  v32 = v25;
  v33 = v25;
  v34 = v47;
  v43(v31, v32, v47);
  v35 = (double (**)(uint64_t))(v28 + *(int *)(v30 + 56));
  *v35 = sub_1006D6A38;
  v35[1] = (double (*)(uint64_t))v26;
  swift_retain();
  swift_retain();
  sub_1006D6A04((uint64_t *)&v51);
  v36 = *(void (**)(char *, uint64_t))(v29 + 8);
  v36(v33, v34);
  sub_100021AA4((uint64_t)v12, &qword_100BFE918);
  v37 = objc_msgSend(v23, "defaultCenter");
  NSNotificationCenter.publisher(for:object:)(UIApplicationWillEnterForegroundNotification, 0);

  v38 = swift_allocObject(&unk_100B89DB8, 65, 7);
  v39 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v38 + 16) = *(_OWORD *)v3;
  *(_OWORD *)(v38 + 32) = v39;
  *(_OWORD *)(v38 + 48) = *(_OWORD *)(v3 + 32);
  *(_BYTE *)(v38 + 64) = *(_BYTE *)(v3 + 48);
  v40 = v48;
  sub_10007EBC8(v28, v48, &qword_100BFE920);
  v41 = sub_1000BA294(&qword_100BFE930);
  v43((char *)(v40 + *(int *)(v41 + 52)), v33, v34);
  v42 = (double (**)(uint64_t))(v40 + *(int *)(v41 + 56));
  *v42 = sub_1006D6A7C;
  v42[1] = (double (*)(uint64_t))v38;
  swift_retain();
  swift_retain();
  sub_1006D6A04((uint64_t *)&v51);
  v36(v33, v34);
  sub_100021AA4(v28, &qword_100BFE920);
}

double sub_1006D6278(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(unsigned __int8 *)(a1 + 48);
  v5 = type metadata accessor for VisibilityStateHolder();
  sub_10000F1C8(&qword_100BFE938, (uint64_t (*)(uint64_t))type metadata accessor for VisibilityStateHolder);
  StateObject.wrappedValue.getter(v2, v3, v4, v5, v6);
  sub_1006D64E8(1, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(void (**)(__n128))(a1 + 16));
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

double sub_1006D6304(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(unsigned __int8 *)(a1 + 48);
  v5 = type metadata accessor for VisibilityStateHolder();
  sub_10000F1C8(&qword_100BFE938, (uint64_t (*)(uint64_t))type metadata accessor for VisibilityStateHolder);
  StateObject.wrappedValue.getter(v2, v3, v4, v5, v6);
  sub_1006D64E8(0, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(void (**)(__n128))(a1 + 16));
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

double sub_1006D6390(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(unsigned __int8 *)(a2 + 48);
  v6 = type metadata accessor for VisibilityStateHolder();
  sub_10000F1C8(&qword_100BFE938, (uint64_t (*)(uint64_t))type metadata accessor for VisibilityStateHolder);
  StateObject.wrappedValue.getter(v3, v4, v5, v6, v7);
  sub_1006D64E8(0, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(void (**)(__n128))(a2 + 16));
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

double sub_1006D641C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(unsigned __int8 *)(a2 + 48);
  v6 = type metadata accessor for VisibilityStateHolder();
  sub_10000F1C8(&qword_100BFE938, (uint64_t (*)(uint64_t))type metadata accessor for VisibilityStateHolder);
  StateObject.wrappedValue.getter(v3, v4, v5, v6, v7);
  sub_1006D64E8(1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(void (**)(__n128))(a2 + 16));
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_1006D64A8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1006D5E1C(a1, a2);
}

void sub_1006D64E8(char a1, uint64_t a2, uint64_t a3, void (*a4)(__n128))
{
  uint64_t v4;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD aBlock[6];

  v38 = a2;
  v39 = a3;
  v7 = a1 & 1;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v42 = *(_QWORD *)(v8 - 8);
  v43 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v40 = *(_QWORD *)(v11 - 8);
  v41 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchTime(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v36 - v21;
  if (*(unsigned __int8 *)(v4 + 16) != v7)
  {
    *(_BYTE *)(v4 + 16) = v7;
    if ((a1 & 1) != 0)
    {
      v23 = v19;
      v24 = sub_10009FFE0();
      v25 = (void *)static OS_dispatch_queue.main.getter(v24);
      static DispatchTime.now()(v25);
      + infix(_:_:)(v17);
      v37 = *(void (**)(char *, uint64_t))(v15 + 8);
      v26 = v23;
      v37(v17, v23);
      v27 = swift_allocObject(&unk_100B89C68, 32, 7);
      v28 = v39;
      *(_QWORD *)(v27 + 16) = v38;
      *(_QWORD *)(v27 + 24) = v28;
      aBlock[4] = sub_100410228;
      aBlock[5] = v27;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100121D84;
      aBlock[3] = &unk_100B89C80;
      v29 = _Block_copy(aBlock);
      swift_retain();
      v30 = swift_release();
      static DispatchQoS.unspecified.getter(v30);
      aBlock[0] = _swiftEmptyArrayStorage;
      sub_10000F1C8((unint64_t *)&qword_100BFFA20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      v32 = v31;
      v33 = sub_1000BA294(&qword_100BD4F10);
      sub_10003D2DC((unint64_t *)&qword_100BFFA30, &qword_100BD4F10);
      v34 = v43;
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v33, v35, v43, v32);
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v22, v13, v10, v29);
      _Block_release(v29);

      (*(void (**)(char *, uint64_t))(v42 + 8))(v10, v34);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v13, v41);
      v37(v22, v26);
    }
    else
    {
      a4(v20);
    }
  }
}

uint64_t type metadata accessor for VisibilityStateHolder()
{
  return objc_opt_self(_TtC7WeatherP33_2BE3E2F35063A222B05D50360BF5465021VisibilityStateHolder);
}

uint64_t sub_1006D67D8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for VisibilityStateHolder();
  result = ObservableObject<>.objectWillChange.getter(v2);
  *a1 = result;
  return result;
}

uint64_t sub_1006D6814()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t destroy for TrackVisibilityModifier(uint64_t a1)
{
  swift_release();
  swift_release();
  return sub_1000BF398(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t initializeWithCopy for TrackVisibilityModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_BYTE *)(a2 + 48);
  swift_retain();
  swift_retain();
  sub_100037094(v3, v4);
  *(_QWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 48) = v5;
  return a1;
}

uint64_t assignWithCopy for TrackVisibilityModifier(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  v5 = v2[3];
  *(_QWORD *)(a1 + 16) = v2[2];
  *(_QWORD *)(a1 + 24) = v5;
  swift_retain();
  swift_release();
  v6 = v2[4];
  v7 = v2[5];
  LOBYTE(v2) = *((_BYTE *)v2 + 48);
  sub_100037094(v6, v7);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = (_BYTE)v2;
  sub_1000BF398(v8, v9);
  return a1;
}

uint64_t assignWithTake for TrackVisibilityModifier(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  v4 = *(_BYTE *)(a2 + 48);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = v4;
  sub_1000BF398(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for TrackVisibilityModifier()
{
  return &type metadata for TrackVisibilityModifier;
}

uint64_t sub_1006D69DC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABDDDC, 1);
}

double sub_1006D69F0()
{
  uint64_t v0;

  return sub_1006D6278(v0 + 16);
}

double sub_1006D69FC()
{
  uint64_t v0;

  return sub_1006D6304(v0 + 16);
}

uint64_t *sub_1006D6A04(uint64_t *a1)
{
  sub_100037094(*a1, a1[1]);
  return a1;
}

double sub_1006D6A38(uint64_t a1)
{
  uint64_t v1;

  return sub_1006D6390(a1, v1 + 16);
}

uint64_t sub_1006D6A44()
{
  uint64_t v0;

  swift_release();
  swift_release();
  sub_1000BF398(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 65, 7);
}

double sub_1006D6A7C(uint64_t a1)
{
  uint64_t v1;

  return sub_1006D641C(a1, v1 + 16);
}

void sub_1006D6A84()
{
  sub_10003D2DC(&qword_100BFE940, &qword_100BFE930);
}

_QWORD *sub_1006D6AB0()
{
  _QWORD *v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 2);
  swift_release();
  swift_release();
  swift_unknownObjectRelease(v0[9]);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 11);
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 17);
  return v0;
}

uint64_t sub_1006D6AFC()
{
  uint64_t v0;

  sub_1006D6AB0();
  return swift_deallocClassInstance(v0, 176, 7);
}

uint64_t sub_1006D6B1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = type metadata accessor for Location(0);
  v3 = sub_100051B90(&qword_100BC35B0, (uint64_t (*)(uint64_t))&type metadata accessor for Location, (uint64_t)&protocol conformance descriptor for Location);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  type metadata accessor for LocationPeakTimeCalculator.CacheKey(0);
  v4 = type metadata accessor for Date(0);
  v5 = sub_100051B90((unint64_t *)&qword_100BC3588, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  return dispatch thunk of Hashable.hash(into:)(a1, v4, v5);
}

uint64_t sub_1006D6BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((static Location.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v4 = *(int *)(type metadata accessor for LocationPeakTimeCalculator.CacheKey(0) + 20);
  return static Date.== infix(_:_:)(a1 + v4, a2 + v4);
}

Swift::Int sub_1006D6C0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  v0 = type metadata accessor for Location(0);
  v1 = sub_100051B90(&qword_100BC35B0, (uint64_t (*)(uint64_t))&type metadata accessor for Location, (uint64_t)&protocol conformance descriptor for Location);
  dispatch thunk of Hashable.hash(into:)(v5, v0, v1);
  type metadata accessor for LocationPeakTimeCalculator.CacheKey(0);
  v2 = type metadata accessor for Date(0);
  v3 = sub_100051B90((unint64_t *)&qword_100BC3588, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v5, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_1006D6CCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v43 = a3;
  v5 = type metadata accessor for TimeZone(0);
  v39 = *(_QWORD *)(v5 - 8);
  v40 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100098778();
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v12);
  sub_1000986FC();
  v41 = v13;
  __chkstk_darwin(v14);
  v16 = (char *)&v38 - v15;
  v17 = type metadata accessor for LocationPeakTimeCalculator.CacheKey(0);
  __chkstk_darwin(v17);
  sub_1000986FC();
  v42 = v18;
  __chkstk_darwin(v19);
  v21 = (char *)&v38 - v20;
  v22 = type metadata accessor for Location(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v21, a1, v22);
  v23 = &v21[*(int *)(v17 + 20)];
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v38(v23, a2, v8);
  Cache.subscript.getter(v21);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v8) == 1)
  {
    v24 = sub_1001C8EF4((uint64_t)v16);
    v25 = Location.coordinate.getter(v24);
    Location.coordinate.getter(v26);
    v28 = v27;
    Location.timeZone.getter(v29);
    Date.startOfDay(timeZone:)(v7);
    v30 = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v7, v40);
    v31 = Date.timeIntervalSinceReferenceDate.getter(v30);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v32 = objc_msgSend(objc_allocWithZone((Class)GEOSolarEventCalculator), "initWithLocation:time:altitudeInDegrees:accuracy:", v25, v28, v31, GEOAlmanacAltitudeSunset, 60.0);
    v33 = objc_msgSend(v32, "nextEventOfType:", 16);
    v34 = v43;
    Date.init(timeIntervalSinceReferenceDate:)(v33);
    v35 = v42;
    sub_1006D7120((uint64_t)v21, v42);
    v36 = v41;
    v38((char *)v41, v34, v8);
    _s7Weather24LocationCompositionStateOwst_0(v36, 0, 1, v8);
    Cache.subscript.setter(v36, v35);

    return sub_1006D7164((uint64_t)v21);
  }
  else
  {
    sub_1006D7164((uint64_t)v21);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v43, v16, v8);
  }
}

uint64_t type metadata accessor for LocationPeakTimeCalculator()
{
  return objc_opt_self(_TtC7Weather26LocationPeakTimeCalculator);
}

uint64_t sub_1006D6FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006D6FF8);
}

uint64_t sub_1006D6FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1000988EC();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = v4;
  }
  else
  {
    v7 = sub_100098778();
    v8 = v4 + *(int *)(a3 + 20);
  }
  return _s7Weather24LocationCompositionStateOwet_0(v8, v3, v7);
}

uint64_t sub_1006D7050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006D705C);
}

uint64_t sub_1006D705C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = sub_1000988EC();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = v5;
  }
  else
  {
    v9 = sub_100098778();
    v10 = v5 + *(int *)(a4 + 20);
  }
  return _s7Weather24LocationCompositionStateOwst_0(v10, v4, v4, v9);
}

uint64_t type metadata accessor for LocationPeakTimeCalculator.CacheKey(uint64_t a1)
{
  uint64_t result;

  result = qword_100BFEB10;
  if (!qword_100BFEB10)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationPeakTimeCalculator.CacheKey);
  return result;
}

uint64_t sub_1006D70F4()
{
  return sub_100051B90(&qword_100BFEB48, type metadata accessor for LocationPeakTimeCalculator.CacheKey, (uint64_t)&unk_1009C0374);
}

uint64_t sub_1006D7120(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocationPeakTimeCalculator.CacheKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1006D7164(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LocationPeakTimeCalculator.CacheKey(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for MoonScrubberGradientMask()
{
  return &type metadata for MoonScrubberGradientMask;
}

uint64_t sub_1006D71B0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABDF2C, 1);
}

void sub_1006D71C0(uint64_t a1@<X8>)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;

  v2 = static VerticalAlignment.center.getter();
  v3 = static UnitPoint.trailing.getter();
  v5 = v4;
  v6 = static UnitPoint.leading.getter();
  v8 = v7;
  v9 = static UnitPoint.leading.getter();
  v11 = v10;
  v12 = static UnitPoint.trailing.getter();
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(double *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v5;
  *(double *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 1;
  *(double *)(a1 + 72) = v9;
  *(_QWORD *)(a1 + 80) = v11;
  *(double *)(a1 + 88) = v12;
  *(_QWORD *)(a1 + 96) = v13;
  *(_BYTE *)(a1 + 104) = 1;
}

ValueMetadata *type metadata accessor for GradientMask()
{
  return &type metadata for GradientMask;
}

unint64_t sub_1006D7264()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFEB50;
  if (!qword_100BFEB50)
  {
    v1 = sub_100075EB0(&qword_100BFEB58);
    sub_10005F124(&qword_100BFEB60, &qword_100BFEB68, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_10063D8A8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFEB50);
  }
  return result;
}

uint64_t sub_1006D72E8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABDF54, 1);
}

uint64_t sub_1006D72F8@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;

  v39 = a1;
  v9 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for BlendMode(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_1000BA294(&qword_100BFEB70);
  __chkstk_darwin(v38);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000BA294(&qword_100BC42C8);
  v19 = swift_allocObject(v18, 48, 7);
  *(_OWORD *)(v19 + 16) = xmmword_10097DA20;
  v20 = static Color.clear.getter(v19);
  *(_QWORD *)(v19 + 32) = v20;
  v21 = static Color.white.getter(v20);
  *(_QWORD *)(v19 + 40) = v21;
  v44 = v19;
  specialized Array._endMutation()(v21);
  Gradient.init(colors:)(v44);
  v23 = LinearGradient.init(gradient:startPoint:endPoint:)(&v40, v22, a2, a3, a4, a5);
  v24 = v40;
  v37 = v41;
  v25 = v42;
  v26 = v43;
  static Alignment.center.getter(v23);
  _FrameLayout.init(width:height:alignment:)(0x4044000000000000, 0, 0, 1);
  v27 = v44;
  v28 = v45;
  v29 = v47;
  v35 = v48;
  v36 = v46;
  v34 = v49;
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for BlendMode.destinationOut(_:), v12);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v11, v15, v12);
  sub_1003A7884((uint64_t)v11, (uint64_t)&v17[*(int *)(v38 + 36)]);
  *(_QWORD *)v17 = v24;
  *(_OWORD *)(v17 + 8) = v37;
  *((_QWORD *)v17 + 3) = v25;
  *((_QWORD *)v17 + 4) = v26;
  *((_WORD *)v17 + 20) = 0;
  *((_QWORD *)v17 + 6) = v27;
  v17[56] = v28;
  *((_QWORD *)v17 + 8) = v36;
  v17[72] = v29;
  v30 = v34;
  *((_QWORD *)v17 + 10) = v35;
  *((_QWORD *)v17 + 11) = v30;
  swift_bridgeObjectRetain();
  sub_1003A78C8((uint64_t)v11);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  sub_100158858(&v40);
  v31 = v39;
  sub_1006D759C((uint64_t)v17, v39);
  *(_BYTE *)(v31 + *(int *)(sub_1000BA294(&qword_100BFEB78) + 36)) = 0;
  return sub_1006D75E4((uint64_t)v17);
}

uint64_t sub_1006D7590@<X0>(uint64_t a1@<X8>)
{
  double *v1;

  return sub_1006D72F8(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1006D759C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BFEB70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1006D75E4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BFEB70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1006D7628()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFEB80;
  if (!qword_100BFEB80)
  {
    v1 = sub_100075EB0(&qword_100BFEB78);
    sub_1006D7694();
    sub_1005ABD50();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFEB80);
  }
  return result;
}

unint64_t sub_1006D7694()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFEB88;
  if (!qword_100BFEB88)
  {
    v1 = sub_100075EB0(&qword_100BFEB70);
    sub_1006D7700();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFEB88);
  }
  return result;
}

unint64_t sub_1006D7700()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFEB90;
  if (!qword_100BFEB90)
  {
    v1 = sub_100075EB0(&qword_100BFEB98);
    sub_10005F124(&qword_100BFEBA0, &qword_100BFEBA8, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFEB90);
  }
  return result;
}

void sub_1006D7784()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  id v16;
  id v17;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v5 = (void *)UIApplication.maybeWindow.getter();

  sub_1006D7A68();
  v6 = sub_1006D798C(0xD00000000000001CLL, 0x8000000100A07DB0);
  if (v6)
  {
    if (v5)
    {
      v17 = v6;
      v16 = v5;
      v7 = objc_msgSend(v16, "rootViewController");
      if (v7)
      {
        v8 = v7;
        v9 = sub_1006D79F8(v7);
        if (v9)
        {
          v10 = v9;
          objc_msgSend(v17, "setPresentingViewController:", v9);
          objc_msgSend(v17, "setDarkMode:", 1);
          objc_msgSend(v17, "present");

        }
        else
        {

        }
      }

      v6 = v16;
    }

  }
  else
  {
    v11 = static Logger.privacy.getter(0);
    v12 = Logger.logObject.getter(v11);
    v14 = static os_log_type_t.error.getter(v12, v13);
    if (os_log_type_enabled(v12, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v14, "Failed to find privacy bundle for Weather", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
}

id sub_1006D798C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSString v4;
  id v5;

  if (a2)
  {
    v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v4 = 0;
  }
  v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(v2), "presenterForPrivacySplashWithIdentifier:", v4);

  return v5;
}

void *sub_1006D79F8(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;

  v1 = a1;
  v2 = objc_msgSend(a1, "presentedViewController");
  if (v2)
  {
    v3 = v2;
    v1 = (void *)sub_1006D79F8();

  }
  else
  {
    v4 = v1;
  }
  return v1;
}

uint64_t type metadata accessor for PrivacySplashPresenter()
{
  return objc_opt_self(_TtC7Weather22PrivacySplashPresenter);
}

unint64_t sub_1006D7A68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFEC48;
  if (!qword_100BFEC48)
  {
    v1 = objc_opt_self(OBPrivacyPresenter);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100BFEC48);
  }
  return result;
}

ValueMetadata *type metadata accessor for TemperatureComparisonTextBuilder()
{
  return &type metadata for TemperatureComparisonTextBuilder;
}

NSObject *sub_1006D7AB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  id v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  __int16 v62;
  _QWORD v63[2];
  uint64_t v64;
  char *v65;

  v2 = sub_1000BA294(&qword_100BC4E68);
  v63[1] = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)v63 - v6;
  v8 = sub_1000BA294(&qword_100BCB720);
  __chkstk_darwin(v8);
  v10 = (char *)v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)v63 - v12;
  v14 = type metadata accessor for ConditionUnits(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (int *)type metadata accessor for PastDataComparisonTextContext(0);
  v19 = a1 + v18[9];
  v64 = v15;
  v65 = v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v19, v14);
  sub_100326438(a1 + v18[12], (uint64_t)v13);
  v20 = type metadata accessor for ExtremaResult(0);
  v21 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v20);
  if ((_DWORD)v21 == 1)
    goto LABEL_4;
  v63[0] = v14;
  ExtremaResult.maxValue.getter(v21);
  v22 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8);
  v22(v13, v20);
  sub_100326438(a1 + v18[10], (uint64_t)v10);
  v23 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v20);
  if ((_DWORD)v23 == 1)
  {
    v13 = v10;
    v14 = v63[0];
LABEL_4:
    sub_100326480((uint64_t)v13);
    if (qword_100BC2450 != -1)
      swift_once(&qword_100BC2450, sub_1006F3844);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_1000AECD4(v24, (uint64_t)qword_100CAF0E8);
    v26 = Logger.logObject.getter(v25);
    v28 = static os_log_type_t.error.getter(v26, v27);
    if (os_log_type_enabled(v26, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v28, "Missing extrema values for building temperature comparison text", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    LocalizedStringKey.init(stringLiteral:)(0, 0xE000000000000000);
    v62 = 256;
    v61 = 0;
    sub_1000C38A4();
    v37 = 0;
    goto LABEL_9;
  }
  ExtremaResult.maxValue.getter(v23);
  v39 = ((uint64_t (*)(char *, uint64_t))v22)(v10, v20);
  v40 = v65;
  v41 = ConditionUnits.temperature.getter(v39);
  v42 = sub_100113B0C();
  Measurement.init(value:unit:)(v41, v42);
  v43 = (void *)objc_opt_self(NSUnitTemperature);
  v44 = objc_msgSend(v43, "fahrenheit");
  sub_1000C4DD0((uint64_t)v44);

  sub_10009554C((uint64_t)v4);
  sub_1000DD268();
  v46 = v45;
  v47 = sub_10009554C((uint64_t)v7);
  v26 = v40;
  v48 = ConditionUnits.temperature.getter(v47);
  Measurement.init(value:unit:)(v48, v42);
  v49 = objc_msgSend(v43, "fahrenheit");
  sub_1000C4DD0((uint64_t)v49);

  sub_10009554C((uint64_t)v4);
  sub_1000DD268();
  v51 = v50;
  sub_10009554C((uint64_t)v7);
  v52 = round(v51) - round(v46);
  if (v52 >= 5.0)
  {
    LocalizedStringKey.init(stringLiteral:)(0xD000000000000034, 0x8000000100A11130);
    sub_1000C38A4();
    Text.init(_:tableName:bundle:comment:)(v53, v54, v55, v56, v57, v58, v59, v60, 140, 0);
    sub_1000BC908();
    v14 = v63[0];
    goto LABEL_10;
  }
  v14 = v63[0];
  if (v52 <= -5.0)
  {
    sub_1000BA87C((uint64_t)"The high temperature today is lower than yesterday.");
    v62 = 0;
    v61 = 139;
  }
  else
  {
    sub_1000BA87C((uint64_t)"The high temperature today is similar to yesterday.");
    v62 = 0;
    v61 = 126;
  }
  sub_1000C38A4();
LABEL_9:
  Text.init(_:tableName:bundle:comment:)(v30, v31, v32, v33, v34, v35, v36, v37, v61, v62);
  sub_1000BC908();
LABEL_10:
  (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v14);
  return v26;
}

NSObject *sub_1006D7F54(uint64_t a1)
{
  return sub_1006D7AB4(a1);
}

void sub_1006D7F74(char a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94[32];

  v93 = a3;
  v5 = type metadata accessor for TipPriorityQueue.GridEntry(0);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_1000986FC();
  v92 = v7;
  __chkstk_darwin(v8);
  v91 = (uint64_t)&v68 - v9;
  __chkstk_darwin(v10);
  v90 = (uint64_t)&v68 - v11;
  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100098728();
  v15 = v14 - v13;
  type metadata accessor for LocationComponentViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v68 - v20;
  sub_1000BA294(&qword_100BCC760);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  sub_1000986FC();
  v89 = v23;
  __chkstk_darwin(v24);
  v26 = (char *)&v68 - v25;
  __chkstk_darwin(v27);
  v29 = (char *)&v68 - v28;
  __chkstk_darwin(v30);
  v32 = (char *)&v68 - v31;
  if (a1)
  {
    if (a1 == 1)
    {
      if ((a2 & 1) != 0)
      {
        v33 = &qword_100BFF020;
        goto LABEL_11;
      }
    }
    else if ((a2 & 1) != 0)
    {
      v33 = &qword_100BFF3F0;
      goto LABEL_11;
    }
    v33 = &qword_100BFF208;
  }
  else if ((a2 & 1) != 0)
  {
    v33 = &qword_100BFEC50;
  }
  else
  {
    v33 = &qword_100BFEE38;
  }
LABEL_11:
  v34 = *((_BYTE *)v33 + 224);
  v76 = *v33;
  v75 = v33[1];
  v74 = v33[2];
  v73 = v33[3];
  v35 = v33[8];
  v79 = v33[9];
  v80 = v35;
  v36 = v33[10];
  v77 = v33[11];
  v78 = v36;
  v37 = v33[24];
  v72 = v33[25];
  v71 = v33[26];
  v70 = v33[27];
  v38 = v33[49];
  v83 = v33[50];
  v84 = v38;
  v39 = v33[51];
  v81 = v33[52];
  v82 = v39;
  v40 = v33[57];
  v87 = v33[58];
  v88 = v40;
  v41 = v93 + OBJC_IVAR____TtCV7Weather17MinorAlertContent8_Storage_map;
  v43 = v33[59];
  v42 = v33[60];
  v85 = v43;
  v86 = v42;
  sub_1000992EC(v93 + OBJC_IVAR____TtCV7Weather17MinorAlertContent8_Storage_map, (uint64_t)v94);
  sub_10003773C(v41, v15, &qword_100BC4A98);
  v44 = sub_1000878BC();
  if (_s7Weather24LocationCompositionStateOwet_0(v15, 1, v44) == 1)
  {
    sub_100021A14(v15, &qword_100BC4A98);
LABEL_16:
    v45 = 1;
    goto LABEL_17;
  }
  v69 = v37;
  sub_10009D3BC(v15 + *(int *)(v44 + 20), (uint64_t)v18);
  sub_1000215BC(v15, type metadata accessor for LocationComponentContainerViewModel);
  sub_10007C77C((uint64_t)v18, (uint64_t)v21, type metadata accessor for LocationComponentViewModel);
  if ((v34 & 1) != 0)
  {
    sub_1000215BC((uint64_t)v21, type metadata accessor for LocationComponentViewModel);
    goto LABEL_16;
  }
  sub_10007C77C((uint64_t)v21, (uint64_t)v29, type metadata accessor for LocationComponentViewModel);
  v45 = 0;
  v46 = &v29[*(int *)(v5 + 20)];
  v47 = v72;
  *(_QWORD *)v46 = v69;
  *((_QWORD *)v46 + 1) = v47;
  v48 = v70;
  *((_QWORD *)v46 + 2) = v71;
  *((_QWORD *)v46 + 3) = v48;
LABEL_17:
  sub_1000988B8((uint64_t)v29, v45);
  sub_1002228F0((uint64_t)v29, (uint64_t)v32);
  sub_10009D3BC(v93 + *(int *)(v44 + 20) + OBJC_IVAR____TtCV7Weather17MinorAlertContent8_Storage_airQuality, (uint64_t)v26);
  v49 = &v26[*(int *)(v5 + 20)];
  v50 = v75;
  *(_QWORD *)v49 = v76;
  *((_QWORD *)v49 + 1) = v50;
  v51 = v73;
  *((_QWORD *)v49 + 2) = v74;
  *((_QWORD *)v49 + 3) = v51;
  sub_1000988B8((uint64_t)v26, 0);
  v52 = sub_10009D3C4(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast);
  v53 = v90;
  sub_10009D3BC(v52, v90);
  v54 = (uint64_t *)(v53 + *(int *)(v5 + 20));
  v55 = v79;
  *v54 = v80;
  v54[1] = v55;
  v56 = v77;
  v54[2] = v78;
  v54[3] = v56;
  v57 = v89;
  sub_10003773C((uint64_t)v32, v89, &qword_100BCC760);
  v58 = sub_10009D3C4(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex);
  v59 = v91;
  sub_10009D3BC(v58, v91);
  v60 = (uint64_t *)(v59 + *(int *)(v5 + 20));
  v61 = v83;
  *v60 = v84;
  v60[1] = v61;
  v62 = v81;
  v60[2] = v82;
  v60[3] = v62;
  v63 = sub_10009D3C4(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind);
  v64 = v92;
  sub_10009D3BC(v63, v92);
  v65 = (uint64_t *)(v64 + *(int *)(v5 + 20));
  v66 = v87;
  *v65 = v88;
  v65[1] = v66;
  v67 = v86;
  v65[2] = v85;
  v65[3] = v67;
  sub_10087CED0((uint64_t)v26, v53, v57, v59, v64);
  sub_100021A14((uint64_t)v32, &qword_100BCC760);
  sub_100098640();
}

void sub_1006D8470(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;
  __n128 *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 *v38;
  uint64_t v39;
  uint64_t v40;
  __n128 *v41;
  uint64_t v42;
  uint64_t v43;
  __n128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __n128 *v59;
  __n128 *v60;
  uint64_t v61;
  uint64_t v62;
  __n128 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __n128 *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __n128 *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __n128 *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __n128 *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __n128 *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __n128 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  _BYTE v106[24];

  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100098728();
  v6 = v5 - v4;
  v7 = sub_1000878BC();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10009E540();
  v9 = a1;
  v10 = a1 + OBJC_IVAR____TtCV7Weather17MinorAlertContent8_Storage_map;
  sub_1000992EC(a1 + OBJC_IVAR____TtCV7Weather17MinorAlertContent8_Storage_map, (uint64_t)v106);
  sub_10003773C(v10, v6, &qword_100BC4A98);
  if (_s7Weather24LocationCompositionStateOwet_0(v6, 1, v7) == 1)
  {
    sub_100021A14(v6, &qword_100BC4A98);
    v11 = sub_1000BA294(&qword_100BCC750);
    v12 = swift_allocObject(v11, 248, 7);
    *(_OWORD *)(v12 + 16) = xmmword_10098E040;
    v13 = sub_1000BA294(&qword_100BCC758);
    v14 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v15 = *(_QWORD *)(v8 + 72);
    v16 = v13;
    v17 = (__n128 *)sub_1000BA6B8(v13);
    v18 = sub_100099954(v17, (__n128)xmmword_10097CA50);
    sub_10009F7F4(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, (uint64_t)v18 + v14);
    *(_QWORD *)(v12 + 32) = sub_1000B4580();
    *(_QWORD *)(v12 + 40) = v19;
    *(_QWORD *)(v12 + 48) = v20;
    v21 = (__n128 *)sub_1000BA6B8(v16);
    sub_1000D1ED8(v21);
    sub_10009F7F4(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v22);
    *(_QWORD *)(v12 + 56) = sub_1000B4580();
    *(_QWORD *)(v12 + 64) = v23;
    *(_QWORD *)(v12 + 72) = v24;
    v25 = (__n128 *)sub_1000BA6B8(v16);
    sub_1000D1ED8(v25);
    sub_10009F7F4(a1 + OBJC_IVAR____TtCV7Weather17MinorAlertContent8_Storage_airQuality, v26);
    *(_QWORD *)(v12 + 80) = sub_1000B4580();
    *(_QWORD *)(v12 + 88) = v27;
    *(_QWORD *)(v12 + 96) = v28;
    v29 = (__n128 *)sub_1000BA6B8(v16);
    sub_1000D1ED8(v29);
    sub_10009F7F4(a1 + OBJC_IVAR____TtCV7Weather17MinorAlertContent8_Storage_severeAlert, v30);
    *(_QWORD *)(v12 + 104) = sub_100080C44((uint64_t)v29);
    *(_QWORD *)(v12 + 112) = v31;
    *(_QWORD *)(v12 + 120) = v32;
    v33 = (__n128 *)sub_1000C2514(v16, v14 + 2 * v15);
    v34 = (char *)sub_100099954(v33, (__n128)xmmword_10097DA20) + v14;
    v35 = *(_QWORD *)(a1 + 16);
    sub_10009F7F4(v35 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex, (uint64_t)v34);
    sub_10009F7F4(v35 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, (uint64_t)&v34[v15]);
    *(_QWORD *)(v12 + 128) = sub_1000B4580();
    *(_QWORD *)(v12 + 136) = v36;
    *(_QWORD *)(v12 + 144) = v37;
    v38 = (__n128 *)sub_1000BA6B8(v16);
    sub_1000B46B8(v38);
    sub_100095B78(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind, (uint64_t)v34, type metadata accessor for LocationComponentContainerViewModel);
    sub_100098B48(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)&v34[v15]);
    *(_QWORD *)(v12 + 152) = sub_1000B4580();
    *(_QWORD *)(v12 + 160) = v39;
    *(_QWORD *)(v12 + 168) = v40;
    v41 = (__n128 *)sub_1000BA6B8(v16);
    sub_1000B46B8(v41);
    sub_100098A1C(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike, (uint64_t)v34);
    sub_100098A1C(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)&v34[v15]);
    *(_QWORD *)(v12 + 176) = sub_1000B4580();
    *(_QWORD *)(v12 + 184) = v42;
    *(_QWORD *)(v12 + 192) = v43;
    v44 = (__n128 *)sub_1000BA6B8(v16);
    sub_1000B46B8(v44);
    sub_100098B48(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility, (uint64_t)v34);
    sub_100098B48(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, (uint64_t)&v34[v15]);
    *(_QWORD *)(v12 + 200) = sub_1000B4580();
    *(_QWORD *)(v12 + 208) = v45;
    *(_QWORD *)(v12 + 216) = v46;
    v47 = sub_1000BA6B8(v16);
    *(_OWORD *)(v47 + 16) = v105;
    v48 = *(_QWORD *)(a1 + 16);
    sub_10009D3BC(v48 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, v47 + v14);
    sub_10009D3BC(v48 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, v47 + v14 + v15);
    *(_QWORD *)(v12 + 224) = sub_100080C44(v47);
    *(_QWORD *)(v12 + 232) = v49;
    *(_QWORD *)(v12 + 240) = v50;
  }
  else
  {
    sub_10007C77C(v6, v1, type metadata accessor for LocationComponentContainerViewModel);
    v51 = sub_1000BA294(&qword_100BCC750);
    v52 = swift_allocObject(v51, 272, 7);
    *(_OWORD *)(v52 + 16) = xmmword_10097FA60;
    v53 = sub_1000BA294(&qword_100BCC758);
    v54 = *(_QWORD *)(v8 + 72);
    v55 = *(unsigned __int8 *)(v8 + 80);
    v56 = (v55 + 32) & ~v55;
    v104 = v1;
    v57 = v55 | 7;
    v58 = v53;
    v59 = (__n128 *)swift_allocObject(v53, v56 + v54, v55 | 7);
    v60 = sub_100099954(v59, (__n128)xmmword_10097CA50);
    sub_1000B4590(*(_QWORD *)(v9 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, (uint64_t)v60 + v56);
    *(_QWORD *)(v52 + 32) = sub_1000B4588();
    *(_QWORD *)(v52 + 40) = v61;
    *(_QWORD *)(v52 + 48) = v62;
    v63 = (__n128 *)sub_1000BA5D8();
    sub_100098A38(v63);
    sub_1000B4590(*(_QWORD *)(v9 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v64);
    *(_QWORD *)(v52 + 56) = sub_1000B4588();
    *(_QWORD *)(v52 + 64) = v65;
    *(_QWORD *)(v52 + 72) = v66;
    v67 = (__n128 *)sub_1000BA5D8();
    sub_100098A38(v67);
    sub_1000B4590(v9 + OBJC_IVAR____TtCV7Weather17MinorAlertContent8_Storage_airQuality, v68);
    *(_QWORD *)(v52 + 80) = sub_1000B4588();
    *(_QWORD *)(v52 + 88) = v69;
    *(_QWORD *)(v52 + 96) = v70;
    v71 = (__n128 *)sub_1000BA5D8();
    sub_100098A38(v71);
    sub_1000B4590(v1, v72);
    *(_QWORD *)(v52 + 104) = sub_1000B4588();
    *(_QWORD *)(v52 + 112) = v73;
    *(_QWORD *)(v52 + 120) = v74;
    v75 = (__n128 *)sub_1000BA5D8();
    sub_100098A38(v75);
    sub_1000B4590(v9 + OBJC_IVAR____TtCV7Weather17MinorAlertContent8_Storage_severeAlert, v76);
    *(_QWORD *)(v52 + 128) = sub_1000B4580();
    *(_QWORD *)(v52 + 136) = v77;
    *(_QWORD *)(v52 + 144) = v78;
    v79 = v9;
    v80 = (__n128 *)swift_allocObject(v58, v56 + 2 * v54, v57);
    v81 = (char *)sub_100099954(v80, (__n128)xmmword_10097DA20) + v56;
    v82 = *(_QWORD *)(v79 + 16);
    v102 = v79;
    sub_1000B4590(v82 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex, (uint64_t)v81);
    v103 = v54;
    sub_1000B4590(v82 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, (uint64_t)&v81[v54]);
    *(_QWORD *)(v52 + 152) = sub_1000B4588();
    *(_QWORD *)(v52 + 160) = v83;
    *(_QWORD *)(v52 + 168) = v84;
    v85 = (__n128 *)sub_1000C2514(v58, v56 + 2 * v54);
    sub_1000C52D8(v85);
    v86 = *(_QWORD *)(v79 + 16);
    sub_1000B4590(v86 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind, (uint64_t)v81);
    sub_1000B4590(v86 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)&v81[v54]);
    *(_QWORD *)(v52 + 176) = sub_1000B4588();
    *(_QWORD *)(v52 + 184) = v87;
    *(_QWORD *)(v52 + 192) = v88;
    v89 = v56 + 2 * v54;
    v90 = (__n128 *)sub_1000C2514(v58, v89);
    sub_1000C52D8(v90);
    v91 = *(_QWORD *)(v102 + 16);
    sub_1000B4590(v91 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike, (uint64_t)v81);
    sub_100098A1C(v91 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)&v81[v54]);
    *(_QWORD *)(v52 + 200) = sub_1000B4588();
    *(_QWORD *)(v52 + 208) = v92;
    *(_QWORD *)(v52 + 216) = v93;
    v94 = (__n128 *)sub_1000C2514(v58, v89);
    sub_1000C52D8(v94);
    v95 = *(_QWORD *)(v102 + 16);
    sub_100095B78(v95 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility, (uint64_t)v81, type metadata accessor for LocationComponentContainerViewModel);
    sub_100095B78(v95 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, (uint64_t)&v81[v54], type metadata accessor for LocationComponentContainerViewModel);
    *(_QWORD *)(v52 + 224) = sub_1000B4588();
    *(_QWORD *)(v52 + 232) = v96;
    *(_QWORD *)(v52 + 240) = v97;
    v98 = swift_allocObject(v58, v89, v57);
    *(_OWORD *)(v98 + 16) = v105;
    v99 = *(_QWORD *)(v102 + 16);
    sub_100098B48(v99 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, v98 + v56);
    sub_100098B48(v99 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, v98 + v56 + v103);
    *(_QWORD *)(v52 + 248) = sub_100080C44(v98);
    *(_QWORD *)(v52 + 256) = v100;
    *(_QWORD *)(v52 + 264) = v101;
    sub_1000215BC(v104, type metadata accessor for LocationComponentContainerViewModel);
  }
  sub_100098640();
}

void sub_1006D8BB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = sub_1000878BC();
  sub_1000B42B0();
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v16 - v7;
  type metadata accessor for LocationViewComponent(0);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_10009E540();
  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = v12 - v11;
  v14 = *(_QWORD *)(a1 + 16);
  swift_retain();
  sub_100520630();
  v17 = v15;
  swift_release(v14);
  sub_1000C5D34(OBJC_IVAR____TtCV7Weather31LocationMinorAlertConfiguration8_Storage_map);
  sub_1000C661C();
  sub_100098B50();
  _s7Weather24LocationCompositionStateOwst_0(v13, 0, 1, v2);
  sub_1000C5D34(OBJC_IVAR____TtCV7Weather31LocationMinorAlertConfiguration8_Storage_airQuality);
  sub_1000C661C();
  sub_100098B50();
  sub_1000C5D34(OBJC_IVAR____TtCV7Weather31LocationMinorAlertConfiguration8_Storage_severeAlert);
  sub_1000C661C();
  sub_100098B50();
  sub_1001EB804(v17, v13, (uint64_t)v8, (uint64_t)v6);
  sub_100098640();
}

uint64_t sub_1006D8D20@<X0>(char a1@<W0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  v4 = sub_1000BA294(&qword_100BFF5E0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  if ((a1 & 1) != 0)
  {
    v10 = 0x8000000100A11200;
    v9 = 0xD000000000000016;
  }
  else
  {
    v9 = 0x657373696D736964;
    v10 = 0xED0000776F6C4664;
  }
  ShortDescription.init(name:_:)(v9, v10, v8, &type metadata for UnitsConfigurationViewAction);
  a2[3] = v4;
  a2[4] = sub_1006D8EAC();
  v11 = sub_10005F164(a2);
  return (*(uint64_t (**)(_QWORD *, char *, uint64_t))(v5 + 32))(v11, v7, v4);
}

uint64_t sub_1006D8E3C@<X0>(_QWORD *a1@<X8>)
{
  char *v1;

  return sub_1006D8D20(*v1, a1);
}

uint64_t sub_1006D8E44(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006D8EF0();
  return ShortDescribable.description.getter(a1, v2);
}

unint64_t sub_1006D8E70()
{
  unint64_t result;

  result = qword_100BFF5D8;
  if (!qword_100BFF5D8)
  {
    result = swift_getWitnessTable(&unk_1009C055C, &type metadata for UnitsConfigurationViewAction);
    atomic_store(result, (unint64_t *)&qword_100BFF5D8);
  }
  return result;
}

unint64_t sub_1006D8EAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFF5E8;
  if (!qword_100BFF5E8)
  {
    v1 = sub_100075EB0(&qword_100BFF5E0);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFF5E8);
  }
  return result;
}

unint64_t sub_1006D8EF0()
{
  unint64_t result;

  result = qword_100BFF5F0;
  if (!qword_100BFF5F0)
  {
    result = swift_getWitnessTable(&unk_1009C0584, &type metadata for UnitsConfigurationViewAction);
    atomic_store(result, (unint64_t *)&qword_100BFF5F0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for UnitsConfigurationViewAction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1006D8F78 + 4 * byte_1009C0555[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1006D8FAC + 4 * byte_1009C0550[v4]))();
}

uint64_t sub_1006D8FAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006D8FB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1006D8FBCLL);
  return result;
}

uint64_t sub_1006D8FC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1006D8FD0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1006D8FD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006D8FDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UnitsConfigurationViewAction()
{
  return &type metadata for UnitsConfigurationViewAction;
}

unint64_t sub_1006D8FFC()
{
  unint64_t result;

  result = qword_100BFF5F8[0];
  if (!qword_100BFF5F8[0])
  {
    result = swift_getWitnessTable(&unk_1009C0620, &type metadata for UnitsConfigurationViewAction);
    atomic_store(result, qword_100BFF5F8);
  }
  return result;
}

uint64_t *sub_1006D9038()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1000BA8B8((uint64_t)v0 + *(_QWORD *)(*v0 + 112), *(_QWORD *)(*v0 + 80));
  sub_1000BA8B8((uint64_t)v0 + *(_QWORD *)(*v0 + 120), *(_QWORD *)(v1 + 88));
  return v0;
}

uint64_t sub_1006D907C()
{
  uint64_t v0;

  sub_1006D9038();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t *sub_1006D90A0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = type metadata accessor for Elevation(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v15);
  }
  return a1;
}

double sub_1006D914C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;

  v4 = type metadata accessor for Elevation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24) + 8)).n128_u64[0];
  return result;
}

uint64_t sub_1006D91A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = type metadata accessor for Elevation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  return a1;
}

uint64_t sub_1006D9224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for Elevation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

uint64_t sub_1006D92CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Elevation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_1006D9330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for Elevation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = *(int *)(a3 + 24);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  return a1;
}

uint64_t sub_1006D93B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006D93C4);
}

uint64_t sub_1006D93C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;

  v6 = type metadata accessor for Elevation(0);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return _s7Weather24LocationCompositionStateOwet_0(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

uint64_t sub_1006D9440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006D944C);
}

uint64_t sub_1006D944C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = type metadata accessor for Elevation(0);
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return _s7Weather24LocationCompositionStateOwst_0(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for ElevationData(uint64_t a1)
{
  uint64_t result;

  result = qword_100BFF6F8;
  if (!qword_100BFF6F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ElevationData);
  return result;
}

uint64_t sub_1006D94FC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for Elevation(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1009C0758;
    v4[2] = &unk_1009C0758;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

BOOL sub_1006D9570(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  _BOOL8 result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v38 = a1[6];
  v36 = a1[8];
  v37 = a1[7];
  v32 = a1[10];
  v31 = a1[11];
  v27 = a1[13];
  v28 = a1[12];
  v10 = a2[1];
  v11 = a2[2];
  v12 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = a2[6];
  v16 = a2[7];
  v34 = a2[8];
  v35 = a1[9];
  v33 = a2[9];
  v29 = a2[11];
  v30 = a2[10];
  v17 = v4 == *a2 && v5 == v10;
  v25 = a2[12];
  v26 = a2[13];
  result = 0;
  if (v17 || (sub_100099264(v4, v5, *a2, v10) & 1) != 0)
  {
    v18 = v6 == v11 && v7 == v12;
    if (v18 || (sub_100099264(v6, v7, v11, v12) & 1) != 0)
    {
      v19 = v8 == v13 && v9 == v14;
      if (v19 || (sub_100099264(v8, v9, v13, v14) & 1) != 0)
      {
        v20 = v38 == v15 && v37 == v16;
        if (v20 || (sub_100099264(v38, v37, v15, v16) & 1) != 0)
        {
          v21 = v36 == v34 && v35 == v33;
          if (v21 || (sub_100099264(v36, v35, v34, v33) & 1) != 0)
          {
            v22 = v32 == v30 && v31 == v29;
            if (v22 || (sub_100099264(v32, v31, v30, v29) & 1) != 0)
            {
              v23 = v28 == v25 && v27 == v26;
              if (v23 || (sub_100099264(v28, v27, v25, v26) & 1) != 0)
                return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1006D9730@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v5 = sub_1000BA294(&qword_100BFF738);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1000DB418(a1, v9);
  v11 = sub_1006D98C4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PrecipitationTotalComponent.CodingKeys, &type metadata for PrecipitationTotalComponent.CodingKeys, v11, v9, v10);
  if (v2)
    return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  sub_1006D9900();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for PrecipitationTotalComponentPreprocessedDataModel, v12, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v23 = v26;
  v24 = v25;
  v22 = v27;
  v21 = v28;
  v20 = v29;
  v19 = v30;
  v13 = v31;
  v14 = v32;
  result = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  v16 = v23;
  *(_OWORD *)a2 = v24;
  *(_OWORD *)(a2 + 16) = v16;
  v17 = v21;
  *(_OWORD *)(a2 + 32) = v22;
  *(_OWORD *)(a2 + 48) = v17;
  v18 = v19;
  *(_OWORD *)(a2 + 64) = v20;
  *(_OWORD *)(a2 + 80) = v18;
  *(_QWORD *)(a2 + 96) = v13;
  *(_QWORD *)(a2 + 104) = v14;
  return result;
}

unint64_t sub_1006D98C4()
{
  unint64_t result;

  result = qword_100BFF740;
  if (!qword_100BFF740)
  {
    result = swift_getWitnessTable(&unk_1009C08DC, &type metadata for PrecipitationTotalComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFF740);
  }
  return result;
}

unint64_t sub_1006D9900()
{
  unint64_t result;

  result = qword_100BFF748;
  if (!qword_100BFF748)
  {
    result = swift_getWitnessTable(&unk_100996CE4, &type metadata for PrecipitationTotalComponentPreprocessedDataModel);
    atomic_store(result, (unint64_t *)&qword_100BFF748);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PrecipitationTotalComponent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1006D997C + 4 * byte_1009C0770[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1006D999C + 4 * byte_1009C0775[v4]))();
}

_BYTE *sub_1006D997C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1006D999C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1006D99A4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1006D99AC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1006D99B4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1006D99BC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PrecipitationTotalComponent.CodingKeys()
{
  return &type metadata for PrecipitationTotalComponent.CodingKeys;
}

ValueMetadata *type metadata accessor for PrecipitationTotalComponent()
{
  return &type metadata for PrecipitationTotalComponent;
}

uint64_t sub_1006D99E8(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000010 && a2 == 0x80000001009FC430)
  {
    swift_bridgeObjectRelease(0x80000001009FC430);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001009FC430, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

unint64_t sub_1006D9A6C()
{
  return 0xD000000000000010;
}

uint64_t sub_1006D9A88(_QWORD *a1)
{
  const void *v1;
  const void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE __dst[112];

  v2 = v1;
  v4 = sub_1000BA294(&qword_100BFF768);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &__dst[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1006D98C4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PrecipitationTotalComponent.CodingKeys, &type metadata for PrecipitationTotalComponent.CodingKeys, v10, v8, v9);
  memcpy(__dst, v2, sizeof(__dst));
  sub_1006D9D28();
  KeyedEncodingContainer.encode<A>(_:forKey:)(__dst, v11, v4, &type metadata for PrecipitationTotalComponentPreprocessedDataModel);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1006D9B90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1006D99E8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1006D9BB8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006D98C4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006D9BE0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006D98C4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1006D9C08@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  _BYTE v5[112];

  result = (void *)sub_1006D9730(a1, (uint64_t)v5);
  if (!v2)
    return memcpy(a2, v5, 0x70uLL);
  return result;
}

uint64_t sub_1006D9C50(_QWORD *a1)
{
  return sub_1006D9A88(a1);
}

unint64_t sub_1006D9C6C()
{
  unint64_t result;

  result = qword_100BFF750;
  if (!qword_100BFF750)
  {
    result = swift_getWitnessTable(&unk_1009C08B4, &type metadata for PrecipitationTotalComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFF750);
  }
  return result;
}

unint64_t sub_1006D9CAC()
{
  unint64_t result;

  result = qword_100BFF758;
  if (!qword_100BFF758)
  {
    result = swift_getWitnessTable(&unk_1009C0824, &type metadata for PrecipitationTotalComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFF758);
  }
  return result;
}

unint64_t sub_1006D9CEC()
{
  unint64_t result;

  result = qword_100BFF760;
  if (!qword_100BFF760)
  {
    result = swift_getWitnessTable(&unk_1009C084C, &type metadata for PrecipitationTotalComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFF760);
  }
  return result;
}

unint64_t sub_1006D9D28()
{
  unint64_t result;

  result = qword_100BFF770;
  if (!qword_100BFF770)
  {
    result = swift_getWitnessTable(&unk_100996CBC, &type metadata for PrecipitationTotalComponentPreprocessedDataModel);
    atomic_store(result, (unint64_t *)&qword_100BFF770);
  }
  return result;
}

double destroy for AirPollutantTableView(uint64_t a1)
{
  double result;

  sub_1000B15F8(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  swift_bridgeObjectRelease();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for AirPollutantTableView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_10008D47C(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AirPollutantTableView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_10008D47C(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_1000B15F8(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AirPollutantTableView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_1000B15F8(v6, v7);
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AirPollutantTableView()
{
  return &type metadata for AirPollutantTableView;
}

uint64_t sub_1006D9EF8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABE18C, 1);
}

double sub_1006D9F08@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double result;
  __int128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 v21;
  char v22;

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  sub_10008D47C(*(_QWORD *)v1, v4);
  sub_100109B54();
  v6 = v5;
  sub_1000B15F8(v3, v4);
  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(_QWORD *)(v1 + 24);
  v9 = *(_QWORD *)(v1 + 32);
  if ((v6 & 1) != 0)
  {
    v15 = v7;
    v16 = v8;
    v17 = v9;
    v18 = 0x4028000000000000;
    v19 = 0;
  }
  else
  {
    v15 = v7;
    v16 = v8;
    v17 = v9;
    v18 = 0x4026000000000000;
    v19 = 1;
  }
  v10 = sub_1006DB770();
  v11 = sub_1006DB7AC();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ConditionalContent<>.init(storage:)(&v15, &type metadata for AirPollutantTableStackView, &type metadata for AirPollutantTableGridView, v10, v11);
  result = *(double *)&v20;
  v13 = v21;
  v14 = v22;
  *(_OWORD *)a1 = v20;
  *(_OWORD *)(a1 + 16) = v13;
  *(_BYTE *)(a1 + 32) = v14;
  return result;
}

void sub_1006D9FF8(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = sub_1000BA294(&qword_100BFF7D8);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = static HorizontalAlignment.leading.getter(v11);
  v14 = static VerticalAlignment.firstTextBaseline.getter(v13);
  *(_QWORD *)v10 = v12;
  *((_QWORD *)v10 + 1) = v14;
  *((_QWORD *)v10 + 2) = 0x4030000000000000;
  v10[24] = 0;
  *((double *)v10 + 4) = a4;
  v10[40] = 0;
  sub_1000BA294(&qword_100BFF7E0);
  v25 = a3;
  KeyPath = swift_getKeyPath(&unk_1009C0A88);
  v16 = swift_allocObject(&unk_100B8A500, 48, 7);
  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = a2;
  *(_QWORD *)(v16 + 32) = a3;
  *(double *)(v16 + 40) = a4;
  swift_bridgeObjectRetain_n(a3, 2);
  swift_bridgeObjectRetain();
  v17 = sub_1000BA294(&qword_100BFF7A0);
  v18 = sub_1000BA294(&qword_100BFF7E8);
  sub_10003D310(&qword_100BFF7B0, &qword_100BFF7A0, (uint64_t)&protocol conformance descriptor for [A]);
  v20 = v19;
  v21 = sub_1006DB98C();
  sub_10003D310(&qword_100BFF7F0, &qword_100BFF7E8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v23 = ForEach<>.init(_:id:content:)(&v25, KeyPath, sub_1006DBA04, v16, v17, v18, v20, v21, v22);
  static Alignment.center.getter(v23);
  sub_100946608();
  sub_100021AA4((uint64_t)v10, &qword_100BFF7D8);
}

void sub_1006DA208(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  id v48;
  uint64_t v49;
  id v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  char *v57;
  __n128 v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *object;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[5];
  char v84[8];
  uint64_t v85;
  Swift::String v86;
  _BYTE v87[24];
  _QWORD v88[5];

  v78 = a2;
  v82 = a3;
  v75 = type metadata accessor for Divider(0);
  v74 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v73 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_1000BA294(&qword_100BFF7F8);
  __chkstk_darwin(v79);
  v72 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100BFF800);
  __chkstk_darwin(v6);
  v81 = (uint64_t)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v80 = (uint64_t)&v66 - v9;
  v10 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000BA294(&qword_100BFF808);
  __chkstk_darwin(v13);
  v15 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000BA294(&qword_100BFF810);
  __chkstk_darwin(v16);
  v18 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v66 - v20;
  v22 = *(_OWORD *)(a1 + 16);
  v86 = *(Swift::String *)a1;
  *(_OWORD *)v87 = v22;
  v71 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v87[16] = v71;
  v70 = *(_QWORD *)a1;
  v69 = *(_QWORD *)(a1 + 8);
  v68 = *(void **)(a1 + 16);
  v67 = *(_QWORD *)(a1 + 24);
  v15[8] = 1;
  v23 = (uint64_t)&v15[*(int *)(v13 + 36)];
  *(_QWORD *)v15 = 0;
  sub_1006DA808(&v86._countAndFlagsBits, v23);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(2, 2);
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v24);
  object = v86._object;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v86);
  v25._countAndFlagsBits = 8236;
  v25._object = (void *)0xE200000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v25);
  v76 = *(_QWORD *)&v87[16];
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)&v87[8]);
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v26);
  v27 = LocalizedStringKey.init(stringInterpolation:)(v12);
  v31 = Text.init(_:tableName:bundle:comment:)(v27, v29, v28 & 1, v30, 0, 0, 0, 0, 0, 256);
  v33 = v32;
  v35 = v34;
  v37 = v36 & 1;
  sub_10003D310(&qword_100BFF818, &qword_100BFF808, (uint64_t)&protocol conformance descriptor for GridRow<A>);
  View.accessibilityLabel(_:)(v31, v33, v37, v35, v13, v38);
  v39 = v37;
  v40 = (uint64_t)v21;
  sub_1000D31B4(v31, v33, v39);
  swift_bridgeObjectRelease();
  sub_100021AA4((uint64_t)v15, &qword_100BFF808);
  sub_1000787D4((uint64_t)v18, (uint64_t)v21, &qword_100BFF810);
  v41 = *(void **)v87;
  sub_10020CCD0(v78, v83);
  v42 = v83[0];
  v43 = v83[1];
  v45 = (void *)v83[2];
  v44 = v83[3];
  v46 = v83[4];
  sub_1000787D4((uint64_t)v83, (uint64_t)v84, &qword_100BFF7C8);
  if (!v85)
  {
    swift_bridgeObjectRetain();
    v56 = v41;
    swift_bridgeObjectRetain();
    sub_1006DB9C8(v70, v69, v68, v67, v71);
    sub_1006DB9C8(v42, v43, v45, v44, v46);
    goto LABEL_5;
  }
  v88[0] = v42;
  v88[1] = v43;
  v88[2] = v45;
  v88[3] = v44;
  v88[4] = v46;
  v47 = object;
  swift_bridgeObjectRetain_n(object, 2);
  v48 = v41;
  v49 = v76;
  swift_bridgeObjectRetain_n(v76, 2);
  v50 = v48;
  v51 = sub_1004196FC(&v86._countAndFlagsBits, v88);
  swift_bridgeObjectRelease_n(v49, 2);

  swift_bridgeObjectRelease_n(v47, 2);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  if ((v51 & 1) == 0)
  {
LABEL_5:
    v57 = v73;
    Divider.init()(v52);
    v59 = static Axis.Set.horizontal.getter(v58);
    v60 = v74;
    v61 = (uint64_t)v72;
    v62 = v75;
    (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v72, v57, v75);
    v55 = v79;
    *(_BYTE *)(v61 + *(int *)(v79 + 36)) = v59;
    (*(void (**)(char *, uint64_t))(v60 + 8))(v57, v62);
    v54 = v80;
    sub_1000787D4(v61, v80, &qword_100BFF7F8);
    v53 = 0;
    goto LABEL_6;
  }
  v53 = 1;
  v54 = v80;
  v55 = v79;
LABEL_6:
  _s7Weather24LocationCompositionStateOwst_0(v54, v53, 1, v55);
  sub_100037768(v40, (uint64_t)v18, &qword_100BFF810);
  v63 = v81;
  sub_100037768(v54, v81, &qword_100BFF800);
  v64 = v82;
  sub_100037768((uint64_t)v18, v82, &qword_100BFF810);
  v65 = sub_1000BA294(&qword_100BFF820);
  sub_100037768(v63, v64 + *(int *)(v65 + 48), &qword_100BFF800);
  sub_100021AA4(v54, &qword_100BFF800);
  sub_100021AA4(v40, &qword_100BFF810);
  sub_100021AA4(v63, &qword_100BFF800);
  sub_100021AA4((uint64_t)v18, &qword_100BFF810);
}

void sub_1006DA808(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t *v72;
  uint64_t v73;
  id v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  unint64_t v82;
  uint64_t v83;
  char v84;
  unint64_t v85;
  uint64_t v86;
  char v87;

  v72 = a1;
  v77 = a2;
  v2 = sub_1000BA294(&qword_100BFF828);
  __chkstk_darwin(v2);
  v76 = (uint64_t)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v75 = (char *)&v72 - v5;
  v6 = sub_1000BA294(&qword_100BD8A00);
  __chkstk_darwin(v6);
  v8 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AttributedText(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000BA294(&qword_100BFF830);
  __chkstk_darwin(v13);
  v15 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000BA294(&qword_100BFF838);
  __chkstk_darwin(v16);
  v78 = (uint64_t)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v72 - v19;
  v73 = (uint64_t)&v72 - v19;
  v74 = (id)objc_opt_self(UIColor);
  v21 = objc_msgSend(v74, "secondaryLabelColor");
  v82 = sub_1000ADFCC();
  v79 = (uint64_t)v21;
  v22 = NSAttributedString.addingAttribute(_:value:)(NSForegroundColorAttributeName, &v79);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v79);
  v23 = type metadata accessor for AttributedString(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 1, 1, v23);
  v24 = AttributedText.init(_:accessibilityAttributedText:onInteraction:)(v22, v8, static LocationSearchEntityFromStringResolver.__derived_struct_equals(_:_:), 0);
  v25 = static HorizontalAlignment.leading.getter(v24);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v15, v12, v9);
  *(_QWORD *)&v15[*(int *)(v13 + 36)] = v25;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v26 = sub_1006DBA14();
  v27 = v78;
  View.accessibilityHidden(_:)(1, v13, v26);
  sub_100021AA4((uint64_t)v15, &qword_100BFF830);
  sub_1000787D4(v27, (uint64_t)v20, &qword_100BFF838);
  v29 = static VerticalAlignment.center.getter(v28);
  v30 = v72;
  sub_1006DAD74(v72, (uint64_t)&v79);
  v31 = v79;
  v32 = v80;
  LOBYTE(v8) = v81;
  v33 = v82;
  v34 = v83;
  v35 = v84;
  v79 = v29;
  v80 = 0;
  v81 = 1;
  v82 = v31;
  v83 = v32;
  v84 = (char)v8;
  v85 = v33;
  v86 = v34;
  v87 = v35;
  v36 = sub_1000BA294(&qword_100BFF858);
  sub_10003D310(&qword_100BFF860, &qword_100BFF858, (uint64_t)&protocol conformance descriptor for HStack<A>);
  v37 = (uint64_t)v75;
  View.accessibilityHidden(_:)(1, v36, v38);
  sub_1000D31B4(v31, v32, (char)v8);
  swift_bridgeObjectRelease();
  v39 = v30[4];
  v79 = v30[3];
  v80 = v39;
  v40 = sub_100114EF8();
  swift_bridgeObjectRetain();
  v41 = Text.init<A>(_:)(&v79, &type metadata for String, v40);
  v43 = v42;
  v45 = v44;
  v47 = v46 & 1;
  v48 = static Font.body.getter(v41);
  v49 = Text.font(_:)(v48, v41, v43, v47, v45);
  v51 = v50;
  v53 = v52;
  v55 = v54;
  swift_release();
  sub_1000D31B4(v41, v43, v47);
  v56 = objc_msgSend(v74, "secondaryLabelColor", swift_bridgeObjectRelease().n128_f64[0]);
  v79 = Color.init(_:)(v56);
  v57 = Text.foregroundStyle<A>(_:)(&v79, v49, v51, v53 & 1, v55, &type metadata for Color, &protocol witness table for Color);
  v59 = v58;
  v61 = v60;
  LOBYTE(v47) = v62 & 1;
  sub_1000D31B4(v49, v51, v53 & 1);
  swift_release();
  v63 = swift_bridgeObjectRelease();
  v74 = (id)static HorizontalAlignment.trailing.getter(v63);
  v64 = v73;
  v65 = v78;
  sub_100037768(v73, v78, &qword_100BFF838);
  v66 = v76;
  sub_100037768(v37, v76, &qword_100BFF828);
  v67 = v65;
  v68 = v77;
  sub_100037768(v67, v77, &qword_100BFF838);
  v69 = sub_1000BA294(&qword_100BFF868);
  sub_100037768(v66, v68 + *(int *)(v69 + 48), &qword_100BFF828);
  v70 = v68 + *(int *)(v69 + 64);
  *(_QWORD *)v70 = v57;
  *(_QWORD *)(v70 + 8) = v59;
  *(_BYTE *)(v70 + 16) = v47;
  v71 = v74;
  *(_QWORD *)(v70 + 24) = v61;
  *(_QWORD *)(v70 + 32) = v71;
  sub_1000D55D4(v57, v59, v47);
  swift_bridgeObjectRetain();
  sub_100021AA4(v37, &qword_100BFF828);
  sub_100021AA4(v64, &qword_100BFF838);
  sub_1000D31B4(v57, v59, v47);
  swift_bridgeObjectRelease();
  sub_100021AA4(v66, &qword_100BFF828);
  sub_100021AA4(v78, &qword_100BFF838);
}

double sub_1006DAD74@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  double result;
  _QWORD v28[2];

  v4 = type metadata accessor for Font.TextStyle(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  v9 = a1[1];
  v28[0] = v8;
  v28[1] = v9;
  v10 = sub_100114EF8();
  swift_bridgeObjectRetain();
  v11 = Text.init<A>(_:)(v28, &type metadata for String, v10);
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  v18 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Font.TextStyle.body(_:), v4);
  static Font.Weight.semibold.getter(v18);
  v19 = static Font.system(_:weight:)(v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v20 = Text.font(_:)(v19, v11, v13, v17, v15);
  v22 = v21;
  LOBYTE(v5) = v23;
  v25 = v24;
  swift_release();
  sub_1000D31B4(v11, v13, v17);
  swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v20;
  *(_QWORD *)(a2 + 8) = v22;
  *(_BYTE *)(a2 + 16) = v5 & 1;
  *(_QWORD *)(a2 + 24) = v25;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  sub_1000D55D4(v20, v22, v5 & 1);
  swift_bridgeObjectRetain();
  sub_1000D31B4(v20, v22, v5 & 1);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_1006DAEF8()
{
  uint64_t v0;

  sub_1006D9FF8(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_1006DAF08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;

  *(_QWORD *)a4 = static HorizontalAlignment.leading.getter(a1);
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  sub_1000BA294(&qword_100BFF798);
  v19 = a3;
  KeyPath = swift_getKeyPath(&unk_1009C0A88);
  v11 = swift_allocObject(&unk_100B8A4D8, 48, 7);
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  *(_QWORD *)(v11 + 32) = a3;
  *(double *)(v11 + 40) = a5;
  swift_bridgeObjectRetain_n(a3, 2);
  swift_bridgeObjectRetain();
  v12 = sub_1000BA294(&qword_100BFF7A0);
  v13 = sub_1000BA294(&qword_100BFF7A8);
  sub_10003D310(&qword_100BFF7B0, &qword_100BFF7A0, (uint64_t)&protocol conformance descriptor for [A]);
  v15 = v14;
  v16 = sub_1006DB98C();
  sub_10003D310(&qword_100BFF7C0, &qword_100BFF7A8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  return ForEach<>.init(_:id:content:)(&v19, KeyPath, sub_1006DB97C, v11, v12, v13, v15, v16, v17);
}

void sub_1006DB05C(__int128 *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  char *v66;
  uint64_t v67;
  char v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  _QWORD v109[5];
  char v110[8];
  uint64_t v111;
  __int128 v112;
  _BYTE v113[24];
  __int128 v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;

  v98 = a2;
  v97 = type metadata accessor for Divider(0);
  v96 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v95 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_1000BA294(&qword_100BC5DD8);
  __chkstk_darwin(v105);
  v94 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BC5E00);
  __chkstk_darwin(v9);
  v107 = (uint64_t)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v106 = (uint64_t)&v88 - v12;
  v13 = type metadata accessor for Font.TextStyle(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[1];
  v112 = *a1;
  *(_OWORD *)v113 = v17;
  v93 = *((_QWORD *)a1 + 4);
  *(_QWORD *)&v113[16] = v93;
  v92 = *(_QWORD *)a1;
  v91 = *((_QWORD *)a1 + 1);
  v90 = (void *)*((_QWORD *)a1 + 2);
  v89 = *((_QWORD *)a1 + 3);
  v119 = v112;
  v114 = *a1;
  v18 = sub_100114EF8();
  swift_bridgeObjectRetain();
  v19 = Text.init<A>(_:)(&v114, &type metadata for String, v18);
  v21 = v20;
  v23 = v22;
  v25 = v24 & 1;
  v26 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for Font.TextStyle.body(_:), v13);
  static Font.Weight.medium.getter(v26);
  v27 = static Font.system(_:weight:)(v16);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v103 = Text.font(_:)(v27, v19, v21, v25, v23);
  v102 = v28;
  v101 = v29;
  v104 = v30;
  swift_release();
  sub_1000D31B4(v19, v21, v25);
  swift_bridgeObjectRelease();
  v118 = *(_OWORD *)&v113[8];
  v114 = *(_OWORD *)&v113[8];
  swift_bridgeObjectRetain();
  v31 = Text.init<A>(_:)(&v114, &type metadata for String, v18);
  v33 = v32;
  v35 = v34;
  v37 = v36 & 1;
  v38 = static Font.body.getter(v31);
  v39 = Text.font(_:)(v38, v31, v33, v37, v35);
  v41 = v40;
  LOBYTE(v25) = v42;
  v44 = v43;
  swift_release();
  v45 = v25 & 1;
  sub_1000D31B4(v31, v33, v37);
  swift_bridgeObjectRelease();
  v46 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  *(_QWORD *)&v114 = Color.init(_:)(v46);
  v47 = Text.foregroundStyle<A>(_:)(&v114, v39, v41, v45, v44, &type metadata for Color, &protocol witness table for Color);
  v99 = v48;
  v50 = v49;
  v100 = v51;
  sub_1000D31B4(v39, v41, v45);
  swift_release();
  swift_bridgeObjectRelease();
  v52 = *(void **)v113;
  sub_10020CCD0(v98, v109);
  v53 = v109[0];
  v54 = v109[1];
  v55 = (void *)v109[2];
  v56 = v109[3];
  v57 = v109[4];
  sub_1000787D4((uint64_t)v109, (uint64_t)v110, &qword_100BFF7C8);
  if (!v111)
  {
    sub_1002BDF74((uint64_t)&v119);
    sub_1002BDF74((uint64_t)&v118);
    v65 = v52;
    sub_1006DB9C8(v92, v91, v90, v89, v93);
    sub_1006DB9C8(v53, v54, v55, v56, v57);
    goto LABEL_5;
  }
  *(_QWORD *)&v114 = v53;
  *((_QWORD *)&v114 + 1) = v54;
  v115 = v55;
  v116 = v56;
  v117 = v57;
  sub_1002BDF74((uint64_t)&v119);
  sub_1002BDF74((uint64_t)&v118);
  v58 = v52;
  sub_1002BDF74((uint64_t)&v119);
  sub_1002BDF74((uint64_t)&v118);
  v59 = v58;
  v60 = sub_1004196FC((uint64_t *)&v112, &v114);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_100121AA8((uint64_t)&v119);

  sub_100121AA8((uint64_t)&v118);
  sub_100121AA8((uint64_t)&v119);

  v61 = sub_100121AA8((uint64_t)&v118);
  if ((v60 & 1) == 0)
  {
LABEL_5:
    v66 = v95;
    v67 = Divider.init()(v61);
    v68 = static Edge.Set.vertical.getter(v67);
    v69 = EdgeInsets.init(_all:)(a4);
    v71 = v70;
    v73 = v72;
    v75 = v74;
    v76 = v96;
    v77 = (uint64_t)v94;
    v78 = v97;
    (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v94, v66, v97);
    v64 = v105;
    v79 = v77 + *(int *)(v105 + 36);
    *(_BYTE *)v79 = v68;
    *(double *)(v79 + 8) = v69;
    *(_QWORD *)(v79 + 16) = v71;
    *(_QWORD *)(v79 + 24) = v73;
    *(_QWORD *)(v79 + 32) = v75;
    *(_BYTE *)(v79 + 40) = 0;
    (*(void (**)(char *, uint64_t))(v76 + 8))(v66, v78);
    v63 = v106;
    sub_1000787D4(v77, v106, &qword_100BC5DD8);
    v62 = 0;
    goto LABEL_6;
  }
  v62 = 1;
  v63 = v106;
  v64 = v105;
LABEL_6:
  _s7Weather24LocationCompositionStateOwst_0(v63, v62, 1, v64);
  v80 = v50 & 1;
  v81 = v101 & 1;
  v108 = v101 & 1;
  v82 = v107;
  sub_100037768(v63, v107, &qword_100BC5E00);
  v83 = v103;
  v84 = v102;
  *(_QWORD *)a3 = v103;
  *(_QWORD *)(a3 + 8) = v84;
  *(_BYTE *)(a3 + 16) = v81;
  *(_QWORD *)(a3 + 24) = v104;
  *(_QWORD *)(a3 + 32) = v47;
  v85 = v99;
  *(_QWORD *)(a3 + 40) = v99;
  *(_BYTE *)(a3 + 48) = v80;
  v106 = v47;
  *(_QWORD *)(a3 + 56) = v100;
  v86 = sub_1000BA294(&qword_100BFF7D0);
  sub_100037768(v82, a3 + *(int *)(v86 + 64), &qword_100BC5E00);
  sub_1000D55D4(v83, v84, v81);
  swift_bridgeObjectRetain();
  v87 = v106;
  sub_1000D55D4(v106, v85, v80);
  swift_bridgeObjectRetain();
  sub_100021AA4(v63, &qword_100BC5E00);
  sub_100021AA4(v82, &qword_100BC5E00);
  sub_1000D31B4(v87, v85, v80);
  swift_bridgeObjectRelease();
  sub_1000D31B4(v83, v84, v108);
  swift_bridgeObjectRelease();
}

uint64_t sub_1006DB760@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1006DAF08(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), a1, *(double *)(v1 + 24));
}

unint64_t sub_1006DB770()
{
  unint64_t result;

  result = qword_100BFF778;
  if (!qword_100BFF778)
  {
    result = swift_getWitnessTable(&unk_1009C0A2C, &type metadata for AirPollutantTableStackView);
    atomic_store(result, (unint64_t *)&qword_100BFF778);
  }
  return result;
}

unint64_t sub_1006DB7AC()
{
  unint64_t result;

  result = qword_100BFF780;
  if (!qword_100BFF780)
  {
    result = swift_getWitnessTable(&unk_1009C09DC, &type metadata for AirPollutantTableGridView);
    atomic_store(result, (unint64_t *)&qword_100BFF780);
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPollutantTableGridView()
{
  return &type metadata for AirPollutantTableGridView;
}

void _s7Weather25AirPollutantTableGridViewVwcp_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10004A298();
}

_QWORD *_s7Weather25AirPollutantTableGridViewVwca_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  sub_1000C3F38(a1, a2);
  v3[1] = *(_QWORD *)(v4 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v3[2] = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v3[3] = *(_QWORD *)(v2 + 24);
  return v3;
}

void _s7Weather25AirPollutantTableGridViewVwta_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  sub_1000C3F38(a1, a2);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v3 + 8) = *(_OWORD *)(v2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(v2 + 24);
  sub_10004A298();
}

ValueMetadata *type metadata accessor for AirPollutantTableStackView()
{
  return &type metadata for AirPollutantTableStackView;
}

unint64_t sub_1006DB8EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFF788;
  if (!qword_100BFF788)
  {
    v1 = sub_100075EB0(&qword_100BFF790);
    sub_1006DB770();
    sub_1006DB7AC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFF788);
  }
  return result;
}

uint64_t sub_1006DB958(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABE1DC, 1);
}

uint64_t sub_1006DB968(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABE1B4, 1);
}

void sub_1006DB97C(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_1006DB05C(a1, *(_QWORD *)(v2 + 32), a2, *(double *)(v2 + 40));
}

unint64_t sub_1006DB98C()
{
  unint64_t result;

  result = qword_100BFF7B8;
  if (!qword_100BFF7B8)
  {
    result = swift_getWitnessTable(&unk_10099EF78, &type metadata for AirPollutantTableViewModel.Row);
    atomic_store(result, (unint64_t *)&qword_100BFF7B8);
  }
  return result;
}

double sub_1006DB9C8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  double result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);

    *(_QWORD *)&result = swift_bridgeObjectRelease(a5).n128_u64[0];
  }
  return result;
}

void sub_1006DBA04(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_1006DA208(a1, *(_QWORD *)(v2 + 32), a2);
}

unint64_t sub_1006DBA14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFF840;
  if (!qword_100BFF840)
  {
    v1 = sub_100075EB0(&qword_100BFF830);
    sub_1006DBA80();
    sub_1006DBAC0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFF840);
  }
  return result;
}

unint64_t sub_1006DBA80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFF848;
  if (!qword_100BFF848)
  {
    v1 = type metadata accessor for AttributedText(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for AttributedText, v1);
    atomic_store(result, (unint64_t *)&qword_100BFF848);
  }
  return result;
}

unint64_t sub_1006DBAC0()
{
  unint64_t result;

  result = qword_100BFF850;
  if (!qword_100BFF850)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _GridAlignmentModifier, &type metadata for _GridAlignmentModifier);
    atomic_store(result, (unint64_t *)&qword_100BFF850);
  }
  return result;
}

void sub_1006DBAFC()
{
  sub_10003D310(&qword_100BFF870, &qword_100BFF878, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

unint64_t sub_1006DBB2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFF880;
  if (!qword_100BFF880)
  {
    v1 = sub_100075EB0(&qword_100BFF888);
    sub_10003D310((unint64_t *)&unk_100BFF890, &qword_100BFF7D8, (uint64_t)&protocol conformance descriptor for Grid<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFF880);
  }
  return result;
}

void sub_1006DBBB0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain();
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);
  sub_1000D9868(v7);
}

void StubLocalSearchRequestService.Errors.hash(into:)()
{
  Hasher._combine(_:)(0);
  sub_10004A298();
}

uint64_t sub_1006DBC28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v13;

  *(_WORD *)(v5 + 32) = 5033;
  type metadata accessor for MockServer(0);
  *(_QWORD *)(v5 + 40) = static MockServer.shared.getter();
  *(_OWORD *)(v5 + 64) = xmmword_1009C0AA0;
  v11 = type metadata accessor for SettingReader(0);
  static SettingReader.shared.getter(v11);
  if (qword_100BC2140 != -1)
    swift_once(&qword_100BC2140, sub_1004EBA28);
  SettingReader.read<A>(_:)(&v13);
  sub_10009880C();
  *(_BYTE *)(v5 + 120) = v13;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  *(_QWORD *)(v5 + 48) = a3;
  *(_QWORD *)(v5 + 56) = a4;
  sub_10003C800(a5, v5 + 80);
  return v5;
}

void sub_1006DBD10(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  type metadata accessor for WeatherMapOverlayKind(0);
  sub_10009D98C();
  __chkstk_darwin(v2);
  sub_100088FDC();
  v3 = type metadata accessor for WeatherCondition(0);
  __chkstk_darwin(v3);
  sub_100098728();
  v5 = type metadata accessor for ConditionCode(0, v4);
  __chkstk_darwin(v5);
  sub_100098728();
  v6 = type metadata accessor for Logger(0);
  v17 = *(_QWORD *)(v6 - 8);
  v18 = v6;
  sub_10009D98C();
  __chkstk_darwin(v7);
  v8 = sub_1000BD684();
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)sub_100098710(12);
    v20 = sub_100098710(32);
    *(_DWORD *)v11 = 136446210;
    v12 = sub_100281014(a1);
    v14 = sub_1000DC7B8(v12, v13);
    v15 = sub_100099A3C(v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v15, v16);
    swift_bridgeObjectRelease();
    sub_10009D7A0((void *)&_mh_execute_header, v9, v10, "Run test %{public}s", v11);
    swift_arrayDestroy(v20, 1);
    sub_1000986F0(v20);
    sub_1000986F0((uint64_t)v11);
  }

  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v1, v18);
  __asm { BR              X10 }
}

void sub_1006DBF0C()
{
  sub_1006DC25C(0);
  sub_100098640();
}

void sub_1006DC23C()
{
  sub_1006DEED4(31);
  JUMPOUT(0x1006DC230);
}

void sub_1006DC24C()
{
  sub_1006DEFC4(32);
  JUMPOUT(0x1006DC230);
}

void sub_1006DC25C(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD v22[4];
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 aBlock;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v33 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v31 = *(_QWORD *)(v7 - 8);
  v32 = v7;
  __chkstk_darwin(v7);
  v30 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for DispatchTime(0);
  v28 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v27 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v29 = (char *)v22 - v11;
  v25 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v25);
  v26 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for Settings.VFX.AnimatedBackgrounds.AnimationKind(0);
  __chkstk_darwin(v37);
  v14 = __chkstk_darwin(v13);
  v36 = (char *)v22 - v15;
  v16 = type metadata accessor for ConditionCode(0, v14);
  __chkstk_darwin(v16);
  v35 = sub_100281014(a1);
  v18 = v17;
  if (objc_msgSend((id)objc_opt_self(RPTTestRunner), "isRecapAvailable"))
  {
    v24 = v18;
    v34 = v2;
    v22[2] = v5;
    v22[3] = v4;
    v19 = type metadata accessor for SettingReader(0);
    v20 = static SettingReader.shared.getter(v19);
    if (qword_100BC2138 != -1)
      swift_once(&qword_100BC2138, sub_1004EB7A4);
    SettingReader.read<A>(_:)(&aBlock);
    swift_release(v20);
    v21 = (char *)&loc_1006DC4CC + *((int *)qword_1006DC960 + aBlock);
    v23 = a1;
    __asm { BR              X11 }
  }
  swift_bridgeObjectRelease();
  sub_1006DF4C0(a1, (uint64_t (*)(void))&static os_log_type_t.error.getter, "Failed test: %{public}s", (SEL *)&selRef_failedTest_);
}

uint64_t sub_1006DC97C(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  __n128 v29;
  char v30;
  __n128 v31;
  void (*v32)(char *, uint64_t);
  id v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  char *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  __n128 v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t (*v52)(_QWORD *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  __int128 aBlock;
  __int128 v67;
  double (*v68)();
  uint64_t v69;

  v3 = v2;
  v65 = a1;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v62 = *(_QWORD *)(v5 - 8);
  v63 = v5;
  __chkstk_darwin(v5);
  v61 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v59 = *(_QWORD *)(v7 - 8);
  v60 = v7;
  __chkstk_darwin(v7);
  v58 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for DispatchTime(0);
  v56 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v57 = (char *)&v54 - v12;
  v55 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v55);
  v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Settings.VFX.AnimatedBackgrounds.AnimationKind(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v19);
  v22 = (uint64_t *)((char *)&v54 - v21);
  StubPPTWeatherDataManager.setupStubData(for:)(a2, v20);
  sub_100804658();
  v23 = type metadata accessor for SettingReader(0);
  v24 = static SettingReader.shared.getter(v23);
  v25 = ((uint64_t (*)(void))static Settings.VFX.animatedBackgrounds.getter)();
  v26 = Settings.VFX.AnimatedBackgrounds.locationAnimationKind.getter();
  swift_release(v25);
  SettingReader.read<A>(_:)(v22);
  swift_release(v24);
  v27 = swift_release(v26);
  v28 = static Settings.VFX.animatedBackgrounds.getter(v27);
  v30 = dispatch thunk of SettingGroup.isEnabled.getter(v28, v29);
  v31 = swift_release(v28);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v16 + 104))(v18, enum case for Settings.VFX.AnimatedBackgrounds.AnimationKind.mica(_:), v15, v31);
  LOBYTE(v28) = sub_10011E9F0((uint64_t)v22, (uint64_t)v18);
  v32 = *(void (**)(char *, uint64_t))(v16 + 8);
  v32(v18, v15);
  if ((v28 & 1) != 0 && (v30 & 1) != 0)
  {
    v33 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    LOBYTE(aBlock) = 0;
    NSUserDefaults.set<A>(_:for:)(&aBlock, 0xD000000000000027, 0x8000000100A0AB00, &type metadata for Bool);

    v34 = *(uint64_t (**)(uint64_t))(v3 + 16);
    v35 = *(_QWORD *)(v3 + 24);
    v36 = type metadata accessor for PerformanceTestAction(0);
    swift_storeEnumTagMultiPayload(v14, v36, 5);
    swift_storeEnumTagMultiPayload(v14, v55, 17);
    v68 = 0;
    aBlock = 0u;
    v67 = 0u;
    swift_retain();
    sub_1000A5EBC((uint64_t)v14, (uint64_t)&aBlock, v34);
    sub_100021A14((uint64_t)&aBlock, (uint64_t *)&unk_100BFFA10);
    sub_1000215BC((uint64_t)v14, type metadata accessor for MainAction);
    swift_release(v35);
    v37 = sub_1000A0794(0, (unint64_t *)&qword_100BC29A0, OS_dispatch_queue_ptr);
    v38 = static OS_dispatch_queue.main.getter(v37);
    v55 = (uint64_t)v32;
    v39 = (void *)v38;
    static DispatchTime.now()(v38);
    v40 = v57;
    + infix(_:_:)(v10);
    v56 = *(_QWORD *)(v56 + 8);
    ((void (*)(char *, uint64_t))v56)(v10, v64);
    v41 = swift_allocObject(&unk_100B8A818, 26, 7);
    *(_QWORD *)(v41 + 16) = v3;
    *(_BYTE *)(v41 + 24) = v65;
    *(_BYTE *)(v41 + 25) = 1;
    v68 = sub_1006E475C;
    v69 = v41;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v67 = sub_100121D84;
    *((_QWORD *)&v67 + 1) = &unk_100B8A830;
    v42 = _Block_copy(&aBlock);
    v43 = v69;
    swift_retain();
    v44 = swift_release(v43);
    v45 = v58;
    static DispatchQoS.unspecified.getter(v44);
    *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
    sub_100086DA4((unint64_t *)&qword_100BFFA20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v47 = v46;
    v48 = sub_1000BA294(&qword_100BD4F10);
    v49 = sub_100121014();
    v50 = v61;
    v51 = v63;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v48, v49, v63, v47);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v40, v45, v50, v42);
    _Block_release(v42);

    v52 = (uint64_t (*)(_QWORD *, uint64_t))v55;
    (*(void (**)(char *, uint64_t))(v62 + 8))(v50, v51);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v45, v60);
    ((void (*)(char *, uint64_t))v56)(v40, v64);
    return v52(v22, v15);
  }
  else
  {
    sub_1006E0340(0, 0, v3, v65, 6u, (uint64_t)&unk_100B8A890, (uint64_t)sub_1006E477C, (uint64_t)&unk_100B8A8A8);
    return ((uint64_t (*)(_QWORD *, uint64_t))v32)(v22, v15);
  }
}

uint64_t sub_1006DCEAC(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  __n128 v30;
  char v31;
  __n128 v32;
  void (*v33)(char *, uint64_t);
  id v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  char *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  __n128 v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t (*v53)(_QWORD *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  __int128 aBlock;
  __int128 v68;
  double (*v69)();
  uint64_t v70;

  v3 = v2;
  v66 = a1;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v63 = *(_QWORD *)(v5 - 8);
  v64 = v5;
  __chkstk_darwin(v5);
  v62 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v60 = *(_QWORD *)(v7 - 8);
  v61 = v7;
  __chkstk_darwin(v7);
  v59 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for DispatchTime(0);
  v57 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v58 = (char *)&v55 - v12;
  v56 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v56);
  v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Settings.VFX.AnimatedBackgrounds.AnimationKind(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v19);
  v22 = (uint64_t *)((char *)&v55 - v21);
  StubPPTWeatherDataManager.setupStubData(for:)(a2, v20);
  sub_100804658();
  v23 = type metadata accessor for SettingReader(0);
  v24 = static SettingReader.shared.getter(v23);
  v26 = static Settings.VFX.animatedBackgrounds.getter(v25);
  v27 = Settings.VFX.AnimatedBackgrounds.locationAnimationKind.getter();
  swift_release(v26);
  SettingReader.read<A>(_:)(v22);
  swift_release(v24);
  v28 = swift_release(v27);
  v29 = static Settings.VFX.animatedBackgrounds.getter(v28);
  v31 = dispatch thunk of SettingGroup.isEnabled.getter(v29, v30);
  v32 = swift_release(v29);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v16 + 104))(v18, enum case for Settings.VFX.AnimatedBackgrounds.AnimationKind.mica(_:), v15, v32);
  LOBYTE(v29) = sub_10011E9F0((uint64_t)v22, (uint64_t)v18);
  v33 = *(void (**)(char *, uint64_t))(v16 + 8);
  v33(v18, v15);
  if ((v29 & 1) != 0 && (v31 & 1) != 0)
  {
    v34 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    LOBYTE(aBlock) = 0;
    NSUserDefaults.set<A>(_:for:)(&aBlock, 0xD000000000000027, 0x8000000100A0AB00, &type metadata for Bool);

    v35 = *(uint64_t (**)(uint64_t))(v3 + 16);
    v36 = *(_QWORD *)(v3 + 24);
    v37 = type metadata accessor for PerformanceTestAction(0);
    swift_storeEnumTagMultiPayload(v14, v37, 5);
    swift_storeEnumTagMultiPayload(v14, v56, 17);
    v69 = 0;
    aBlock = 0u;
    v68 = 0u;
    swift_retain();
    sub_1000A5EBC((uint64_t)v14, (uint64_t)&aBlock, v35);
    sub_100021A14((uint64_t)&aBlock, (uint64_t *)&unk_100BFFA10);
    sub_1000215BC((uint64_t)v14, type metadata accessor for MainAction);
    swift_release(v36);
    v38 = sub_1000A0794(0, (unint64_t *)&qword_100BC29A0, OS_dispatch_queue_ptr);
    v39 = static OS_dispatch_queue.main.getter(v38);
    v56 = (uint64_t)v33;
    v40 = (void *)v39;
    static DispatchTime.now()(v39);
    v41 = v58;
    + infix(_:_:)(v10);
    v57 = *(_QWORD *)(v57 + 8);
    ((void (*)(char *, uint64_t))v57)(v10, v65);
    v42 = swift_allocObject(&unk_100B8A958, 26, 7);
    *(_QWORD *)(v42 + 16) = v3;
    *(_BYTE *)(v42 + 24) = v66;
    *(_BYTE *)(v42 + 25) = 1;
    v69 = sub_1006E47B8;
    v70 = v42;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v68 = sub_100121D84;
    *((_QWORD *)&v68 + 1) = &unk_100B8A970;
    v43 = _Block_copy(&aBlock);
    v44 = v70;
    swift_retain();
    v45 = swift_release(v44);
    v46 = v59;
    static DispatchQoS.unspecified.getter(v45);
    *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
    sub_100086DA4((unint64_t *)&qword_100BFFA20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v48 = v47;
    v49 = sub_1000BA294(&qword_100BD4F10);
    v50 = sub_100121014();
    v51 = v62;
    v52 = v64;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v49, v50, v64, v48);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v41, v46, v51, v43);
    _Block_release(v43);

    v53 = (uint64_t (*)(_QWORD *, uint64_t))v56;
    (*(void (**)(char *, uint64_t))(v63 + 8))(v51, v52);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v46, v61);
    ((void (*)(char *, uint64_t))v57)(v41, v65);
    return v53(v22, v15);
  }
  else
  {
    sub_1006E0340(0, 0, v3, v66, 7u, (uint64_t)&unk_100B8A9D0, (uint64_t)sub_1006E47D8, (uint64_t)&unk_100B8A9E8);
    return ((uint64_t (*)(_QWORD *, uint64_t))v33)(v22, v15);
  }
}

uint64_t sub_1006DD3DC(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 aBlock;
  __int128 v46;
  uint64_t (*v47)();
  uint64_t v48;

  v3 = v2;
  v38 = a2;
  v4 = a1;
  v39 = a1;
  v41 = type metadata accessor for DispatchWorkItemFlags(0);
  v44 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v42 = *(_QWORD *)(v7 - 8);
  v43 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v37 - v14;
  v16 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1006DF4C0(v4, (uint64_t (*)(void))&static os_log_type_t.default.getter, "Started test: %{public}s", (SEL *)&selRef_startedTest_);
  v20 = *(uint64_t (**)(uint64_t))(v3 + 16);
  v19 = *(_QWORD *)(v3 + 24);
  v21 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v18, v38, v21);
  v22 = type metadata accessor for PerformanceTestAction(0);
  swift_storeEnumTagMultiPayload(v18, v22, 4);
  swift_storeEnumTagMultiPayload(v18, v16, 17);
  v47 = 0;
  aBlock = 0u;
  v46 = 0u;
  swift_retain();
  sub_1000A5EBC((uint64_t)v18, (uint64_t)&aBlock, v20);
  sub_100021A14((uint64_t)&aBlock, (uint64_t *)&unk_100BFFA10);
  sub_1000215BC((uint64_t)v18, type metadata accessor for MainAction);
  swift_release(v19);
  v23 = sub_1000A0794(0, (unint64_t *)&qword_100BC29A0, OS_dispatch_queue_ptr);
  v24 = (void *)static OS_dispatch_queue.main.getter(v23);
  static DispatchTime.now()(v24);
  + infix(_:_:)(v12);
  v25 = *(void (**)(char *, uint64_t))(v10 + 8);
  v26 = v40;
  v25(v12, v40);
  v27 = swift_allocObject(&unk_100B8ABD8, 25, 7);
  *(_QWORD *)(v27 + 16) = v3;
  *(_BYTE *)(v27 + 24) = v39;
  v47 = sub_1006E4E6C;
  v48 = v27;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v46 = sub_100121D84;
  *((_QWORD *)&v46 + 1) = &unk_100B8ABF0;
  v28 = _Block_copy(&aBlock);
  v29 = v48;
  swift_retain();
  v30 = swift_release(v29);
  static DispatchQoS.unspecified.getter(v30);
  *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
  sub_100086DA4((unint64_t *)&qword_100BFFA20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v32 = v31;
  v33 = sub_1000BA294(&qword_100BD4F10);
  v34 = sub_100121014();
  v35 = v41;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v33, v34, v41, v32);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v15, v9, v6, v28);
  _Block_release(v28);

  (*(void (**)(char *, uint64_t))(v44 + 8))(v6, v35);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v9, v43);
  return ((uint64_t (*)(char *, uint64_t))v25)(v15, v26);
}

void sub_1006DD774(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;

  v3 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v3);
  v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1006DF4C0(a1, (uint64_t (*)(void))&static os_log_type_t.default.getter, "Started test: %{public}s", (SEL *)&selRef_startedTest_);
  v6 = *(uint64_t (**)(uint64_t))(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = type metadata accessor for PerformanceTestAction(0);
  swift_storeEnumTagMultiPayload(v5, v8, 5);
  swift_storeEnumTagMultiPayload(v5, v3, 17);
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  swift_retain();
  sub_1000A5EBC((uint64_t)v5, (uint64_t)v9, v6);
  sub_100021A14((uint64_t)v9, (uint64_t *)&unk_100BFFA10);
  sub_1000215BC((uint64_t)v5, type metadata accessor for MainAction);
  swift_release(v7);
  sub_1006DF4C0(a1, (uint64_t (*)(void))&static os_log_type_t.default.getter, "Finished test: %{public}s", (SEL *)&selRef_finishedTest_);
}

void sub_1006DD8A8(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  v5 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v5);
  v7 = (_QWORD *)((char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1006DF4C0(a1, (uint64_t (*)(void))&static os_log_type_t.default.getter, "Started test: %{public}s", (SEL *)&selRef_startedTest_);
  v8 = *(uint64_t (**)(uint64_t))(v2 + 16);
  v9 = *(_QWORD *)(v2 + 24);
  *v7 = a2;
  v10 = type metadata accessor for PerformanceTestAction(0);
  swift_storeEnumTagMultiPayload(v7, v10, 1);
  swift_storeEnumTagMultiPayload(v7, v5, 17);
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  swift_retain();
  sub_1000A5EBC((uint64_t)v7, (uint64_t)v11, v8);
  sub_100021A14((uint64_t)v11, (uint64_t *)&unk_100BFFA10);
  sub_1000215BC((uint64_t)v7, type metadata accessor for MainAction);
  swift_release(v9);
  sub_1006DF4C0(a1, (uint64_t (*)(void))&static os_log_type_t.default.getter, "Finished test: %{public}s", (SEL *)&selRef_finishedTest_);
}

void sub_1006DD9EC(unsigned __int8 a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t (*v7)();
  double v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  Class isa;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  _QWORD v25[3];
  void *v26;
  uint64_t (*v27)();
  uint64_t v28;
  CGRect v29;

  sub_1006DF4C0(a1, (uint64_t (*)(void))&static os_log_type_t.default.getter, "Started test: %{public}s", (SEL *)&selRef_startedTest_);
  v2 = sub_100281014(a1);
  v4 = v3;
  v5 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  UIApplication.expectedWindow.getter(v25);

  v6 = v26;
  v7 = v27;
  sub_1000DB418(v25, (uint64_t)v26);
  v29.origin.x = dispatch thunk of WindowType.bounds.getter(v6, v7);
  v8 = CGRectGetHeight(v29) * 0.7;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v25);
  v9 = objc_allocWithZone((Class)RPTDirectionalSwipeTestParameters);
  v12 = sub_1006E43B8(v2, v4, 5, 6, 0, 0, v10, v11, 40.0, v8, 300.0, 10.0);
  v13 = (void *)objc_opt_self(RPTGroupScrollTestParameters);
  v14 = sub_100281014(a1);
  v16 = v15;
  v17 = sub_1000BA294(&qword_100BCB640);
  v18 = swift_allocObject(v17, 40, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1009898A0;
  *(_QWORD *)(v18 + 32) = v12;
  v25[0] = v18;
  specialized Array._endMutation()(v18);
  v19 = v12;
  sub_1000BA294(&qword_100BFFA40);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v21 = swift_allocObject(&unk_100B8A778, 24, 7);
  swift_weakInit(v21 + 16);
  v22 = swift_allocObject(&unk_100B8AC28, 25, 7);
  *(_QWORD *)(v22 + 16) = v21;
  *(_BYTE *)(v22 + 24) = a1;
  v27 = sub_1006E4D44;
  v28 = v22;
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 1107296256;
  v25[2] = sub_100121D84;
  v26 = &unk_100B8AC40;
  v23 = _Block_copy(v25);
  swift_release(v28);
  v24 = sub_1006E4690(v14, v16, (uint64_t)isa, (uint64_t)v23, v13);
  _Block_release(v23);

  objc_msgSend((id)objc_opt_self(RPTTestRunner), "runTestWithParameters:", v24);
}

void sub_1006DDC6C(unsigned __int8 a1)
{
  id v2;
  void *v3;
  uint64_t (*v4)();
  double x;
  double y;
  double width;
  double height;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  Class isa;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  _QWORD v27[3];
  void *v28;
  uint64_t (*v29)();
  uint64_t v30;
  CGRect v31;
  CGRect v32;

  sub_1006DF4C0(a1, (uint64_t (*)(void))&static os_log_type_t.default.getter, "Started test: %{public}s", (SEL *)&selRef_startedTest_);
  v2 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  UIApplication.expectedWindow.getter(v27);

  v3 = v28;
  v4 = v29;
  sub_1000DB418(v27, (uint64_t)v28);
  v31.origin.x = dispatch thunk of WindowType.bounds.getter(v3, v4);
  v32 = CGRectInset(v31, 10.0, 90.0);
  x = v32.origin.x;
  y = v32.origin.y;
  width = v32.size.width;
  height = v32.size.height;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v27);
  v9 = sub_100281014(a1);
  v11 = v10;
  v12 = objc_allocWithZone((Class)RPTDirectionalSwipeTestParameters);
  v14 = sub_1006E43B8(v9, v11, 3, 3, 0, 0, (uint64_t)v12, v13, x, y, width, height);
  v15 = (void *)objc_opt_self(RPTGroupScrollTestParameters);
  v16 = sub_100281014(a1);
  v18 = v17;
  v19 = sub_1000BA294(&qword_100BCB640);
  v20 = swift_allocObject(v19, 40, 7);
  *(_OWORD *)(v20 + 16) = xmmword_1009898A0;
  *(_QWORD *)(v20 + 32) = v14;
  v27[0] = v20;
  specialized Array._endMutation()(v20);
  v21 = v14;
  sub_1000BA294(&qword_100BFFA40);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v23 = swift_allocObject(&unk_100B8A778, 24, 7);
  swift_weakInit(v23 + 16);
  v24 = swift_allocObject(&unk_100B8AC78, 25, 7);
  *(_QWORD *)(v24 + 16) = v23;
  *(_BYTE *)(v24 + 24) = a1;
  v29 = sub_1006E4D44;
  v30 = v24;
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 1107296256;
  v27[2] = sub_100121D84;
  v28 = &unk_100B8AC90;
  v25 = _Block_copy(v27);
  swift_release(v30);
  v26 = sub_1006E4690(v16, v18, (uint64_t)isa, (uint64_t)v25, v15);
  _Block_release(v25);

  objc_msgSend((id)objc_opt_self(RPTTestRunner), "runTestWithParameters:", v26);
}

void sub_1006DDF00(int a1, int a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  void (*v50)(_BYTE *, uint64_t);
  void (*v51)(_QWORD);
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  double v61;
  double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  double v73;
  double v74;
  double v75;
  uint64_t v76;
  _BYTE *v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  double v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(_BYTE *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  double v94;
  double v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  double v103;
  double v104;
  double v105;
  uint64_t v106;
  void (*v107)(_BYTE *, uint64_t);
  uint64_t v108;
  _BYTE *v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  double v114;
  double v115;
  _BYTE *v116;
  __n128 v117;
  _QWORD *v118;
  uint64_t v119;
  void *v120;
  _BYTE *v121;
  _BYTE *v122;
  void (*v123)(_BYTE *, uint64_t);
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  __n128 v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  _BYTE *v134;
  uint64_t v135;
  _BYTE v136[4];
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  _QWORD *v142;
  uint64_t v143;
  _BYTE *v144;
  _BYTE *v145;
  _BYTE *v146;
  _BYTE *v147;
  uint64_t v148;
  _BYTE *v149;
  uint64_t v150;
  _BYTE *v151;
  uint64_t v152;
  uint64_t v153;
  _BYTE *v154;
  uint64_t v155;
  uint64_t v156;
  _BYTE *v157;
  _BYTE *v158;
  _BYTE *v159;
  void (*v160)(_QWORD);
  void (*v161)(_BYTE *, uint64_t);
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD aBlock[5];
  uint64_t v167;

  LODWORD(v161) = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v155 = *(_QWORD *)(v4 - 8);
  v156 = v4;
  __chkstk_darwin(v4);
  v154 = &v136[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v153 = type metadata accessor for DispatchQoS(0);
  v152 = *(_QWORD *)(v153 - 8);
  __chkstk_darwin(v153);
  v151 = &v136[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v150 = type metadata accessor for DispatchTime(0);
  v148 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v147 = &v136[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __chkstk_darwin(v8);
  v149 = &v136[-v10];
  v162 = type metadata accessor for ConditionCode(0, v9);
  v165 = *(_QWORD *)(v162 - 8);
  __chkstk_darwin(v162);
  v146 = &v136[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for Location.Identifier(0);
  v160 = *(void (**)(_QWORD))(v12 - 8);
  __chkstk_darwin(v12);
  v145 = &v136[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  v158 = &v136[-v15];
  __chkstk_darwin(v16);
  v159 = &v136[-v17];
  __chkstk_darwin(v18);
  v20 = &v136[-v19];
  v21 = type metadata accessor for SavedLocation(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v144 = &v136[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v24);
  v157 = &v136[-v25];
  __chkstk_darwin(v26);
  v28 = &v136[-v27];
  __chkstk_darwin(v29);
  v31 = &v136[-v30];
  sub_1006DF4C0(a1, (uint64_t (*)(void))&static os_log_type_t.default.getter, "Started test: %{public}s", (SEL *)&selRef_startedTest_);
  v32 = v2[13];
  v33 = v2[14];
  sub_1000DB418(v2 + 10, v32);
  v34 = dispatch thunk of SavedLocationsManagerType.savedLocations.getter(v32, v33);
  if (*(_QWORD *)(v34 + 16) < 5uLL)
  {
    swift_bridgeObjectRelease();
    sub_1006DF4C0(a1, (uint64_t (*)(void))&static os_log_type_t.error.getter, "Failed test: %{public}s", (SEL *)&selRef_failedTest_);
    return;
  }
  v141 = a1;
  v142 = v2;
  v140 = v2[6];
  v35 = sub_1000BA294(&qword_100BFFA50);
  v36 = sub_1000BA294(&qword_100BFFA58);
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(_QWORD *)(v37 + 72);
  v39 = *(unsigned __int8 *)(v37 + 80);
  v40 = (v39 + 32) & ~v39;
  v163 = v38;
  v41 = swift_allocObject(v35, v40 + 4 * v38, v39 | 7);
  *(_OWORD *)(v41 + 16) = xmmword_1009891D0;
  v139 = v41;
  v42 = v41 + v40;
  v164 = v36;
  v43 = v41 + v40 + *(int *)(v36 + 48);
  v44 = v34 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
  v45 = sub_1002423C8(v44, (uint64_t)v31);
  SavedLocation.identifier.getter(v45);
  sub_1000215BC((uint64_t)v31, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
  v47 = Location.Identifier.coordinate.getter(v46);
  v49 = v48;
  v50 = (void (*)(_BYTE *, uint64_t))*((_QWORD *)v160 + 1);
  v143 = v12;
  v50(v20, v12);
  sub_1006E01EC(v47, v49);
  v51 = *(void (**)(_QWORD))(v165 + 104);
  v160 = v51;
  if ((v161 & 1) != 0)
  {
    v52 = enum case for ConditionCode.clear(_:);
    v53 = v43;
    v54 = v162;
    ((void (*)(uint64_t, _QWORD, uint64_t))v51)(v53, enum case for ConditionCode.clear(_:), v162);
    if (*(_QWORD *)(v34 + 16) < 2uLL)
    {
      __break(1u);
    }
    else
    {
      v137 = v52;
      v55 = v42 + v163 + *(int *)(v164 + 48);
      v56 = *(_QWORD *)(v22 + 72);
      v57 = v44;
      v138 = v56;
      v58 = sub_1002423C8(v44 + v56, (uint64_t)v28);
      v59 = v159;
      SavedLocation.identifier.getter(v58);
      sub_1000215BC((uint64_t)v28, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
      v61 = Location.Identifier.coordinate.getter(v60);
      v63 = v62;
      v64 = v143;
      v161 = v50;
      v50(v59, v143);
      sub_1006E01EC(v61, v63);
      v65 = v55;
      v66 = (void (*)(uint64_t, uint64_t, uint64_t))v160;
      ((void (*)(uint64_t, _QWORD, uint64_t))v160)(v65, enum case for ConditionCode.snow(_:), v54);
      if (*(_QWORD *)(v34 + 16) >= 3uLL)
      {
        v67 = v42 + 2 * v163 + *(int *)(v164 + 48);
        v68 = v157;
        v69 = sub_1002423C8(v57 + 2 * v138, (uint64_t)v157);
        v70 = v64;
        v71 = v158;
        SavedLocation.identifier.getter(v69);
        sub_1000215BC((uint64_t)v68, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
        v73 = Location.Identifier.coordinate.getter(v72);
        v75 = v74;
        v161(v71, v70);
        sub_1006E01EC(v73, v75);
        v66(v67, enum case for ConditionCode.thunderstorms(_:), v54);
        if (*(_QWORD *)(v34 + 16) >= 4uLL)
        {
          v76 = v42 + 3 * v163 + *(int *)(v164 + 48);
          v77 = v144;
          sub_1002423C8(v57 + 3 * v138, (uint64_t)v144);
          swift_bridgeObjectRelease();
          v78 = v145;
          SavedLocation.identifier.getter(v79);
          sub_1000215BC((uint64_t)v77, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
          v81 = Location.Identifier.coordinate.getter(v80);
          v83 = v82;
          v161(v78, v70);
          sub_1006E01EC(v81, v83);
          v66(v76, enum case for ConditionCode.strongStorms(_:), v54);
          type metadata accessor for StubPPTWeatherDataManager.CoordinateString(0);
          sub_100086DA4((unint64_t *)&unk_100BFFA60, (uint64_t (*)(uint64_t))&type metadata accessor for StubPPTWeatherDataManager.CoordinateString, (uint64_t)&protocol conformance descriptor for StubPPTWeatherDataManager.CoordinateString);
          v84 = Dictionary.init(dictionaryLiteral:)(v139);
          v85 = v137;
LABEL_12:
          v116 = v146;
          v66((uint64_t)v146, v85, v54);
          StubPPTWeatherDataManager.setupStubData(for:defaultCondition:)(v84, v116);
          v117 = swift_bridgeObjectRelease();
          (*(void (**)(_BYTE *, uint64_t, __n128))(v165 + 8))(v116, v54, v117);
          v118 = v142;
          sub_100804658();
          v119 = sub_1000A0794(0, (unint64_t *)&qword_100BC29A0, OS_dispatch_queue_ptr);
          v120 = (void *)static OS_dispatch_queue.main.getter(v119);
          v121 = v147;
          static DispatchTime.now()(v120);
          v122 = v149;
          + infix(_:_:)(v121);
          v123 = *(void (**)(_BYTE *, uint64_t))(v148 + 8);
          v124 = v150;
          v123(v121, v150);
          v125 = swift_allocObject(&unk_100B8ACC8, 25, 7);
          *(_QWORD *)(v125 + 16) = v118;
          *(_BYTE *)(v125 + 24) = v141;
          aBlock[4] = sub_1006E4968;
          v167 = v125;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_100121D84;
          aBlock[3] = &unk_100B8ACE0;
          v126 = _Block_copy(aBlock);
          v127 = v167;
          swift_retain();
          v128 = swift_release(v127);
          v129 = v151;
          static DispatchQoS.unspecified.getter(v128);
          aBlock[0] = _swiftEmptyArrayStorage;
          sub_100086DA4((unint64_t *)&qword_100BFFA20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v131 = v130;
          v132 = sub_1000BA294(&qword_100BD4F10);
          v133 = sub_100121014();
          v134 = v154;
          v135 = v156;
          dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v132, v133, v156, v131);
          OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v122, v129, v134, v126);
          _Block_release(v126);

          (*(void (**)(_BYTE *, uint64_t))(v155 + 8))(v134, v135);
          (*(void (**)(_BYTE *, uint64_t))(v152 + 8))(v129, v153);
          v123(v122, v124);
          return;
        }
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v86 = v43;
  LODWORD(v161) = enum case for ConditionCode.cloudy(_:);
  v54 = v162;
  v51(v86);
  if (*(_QWORD *)(v34 + 16) < 2uLL)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v87 = v50;
  v88 = v42 + v163 + *(int *)(v164 + 48);
  v89 = *(_QWORD *)(v22 + 72);
  v90 = v44;
  v138 = v89;
  v91 = sub_1002423C8(v44 + v89, (uint64_t)v28);
  v92 = v159;
  SavedLocation.identifier.getter(v91);
  sub_1000215BC((uint64_t)v28, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
  v94 = Location.Identifier.coordinate.getter(v93);
  v96 = v95;
  v97 = v143;
  v87(v92, v143);
  sub_1006E01EC(v94, v96);
  ((void (*)(uint64_t, _QWORD, uint64_t))v160)(v88, v161, v54);
  if (*(_QWORD *)(v34 + 16) < 3uLL)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v98 = v42 + 2 * v163 + *(int *)(v164 + 48);
  v99 = v157;
  v100 = sub_1002423C8(v90 + 2 * v138, (uint64_t)v157);
  v101 = v158;
  SavedLocation.identifier.getter(v100);
  sub_1000215BC((uint64_t)v99, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
  v103 = Location.Identifier.coordinate.getter(v102);
  v105 = v104;
  v87(v101, v97);
  sub_1006E01EC(v103, v105);
  v106 = v98;
  v66 = (void (*)(uint64_t, uint64_t, uint64_t))v160;
  ((void (*)(uint64_t, _QWORD, uint64_t))v160)(v106, v161, v54);
  if (*(_QWORD *)(v34 + 16) >= 4uLL)
  {
    v107 = v87;
    v108 = v42 + 3 * v163 + *(int *)(v164 + 48);
    v109 = v144;
    sub_1002423C8(v90 + 3 * v138, (uint64_t)v144);
    swift_bridgeObjectRelease();
    v110 = v145;
    SavedLocation.identifier.getter(v111);
    sub_1000215BC((uint64_t)v109, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
    v113 = Location.Identifier.coordinate.getter(v112);
    v115 = v114;
    v107(v110, v97);
    sub_1006E01EC(v113, v115);
    v66(v108, enum case for ConditionCode.partlyCloudy(_:), v54);
    type metadata accessor for StubPPTWeatherDataManager.CoordinateString(0);
    sub_100086DA4((unint64_t *)&unk_100BFFA60, (uint64_t (*)(uint64_t))&type metadata accessor for StubPPTWeatherDataManager.CoordinateString, (uint64_t)&protocol conformance descriptor for StubPPTWeatherDataManager.CoordinateString);
    v84 = Dictionary.init(dictionaryLiteral:)(v139);
    v85 = enum case for ConditionCode.clear(_:);
    goto LABEL_12;
  }
LABEL_18:
  __break(1u);
}

void sub_1006DEA5C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t (*v23)();
  double v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t (*v34)();
  double v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  Class isa;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  uint64_t v53;
  id v54;
  __int128 aBlock;
  __int128 v56;
  uint64_t (*v57)();
  uint64_t v58;
  CGRect v59;
  CGRect v60;

  v3 = v2;
  v6 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = (void *)objc_opt_self(RPTTestRunner);
  if (objc_msgSend(v9, "isRecapAvailable"))
  {
    v11 = *(uint64_t (**)(uint64_t))(v3 + 16);
    v10 = *(_QWORD *)(v3 + 24);
    v12 = sub_1000BA294((uint64_t *)&unk_100BFFA70);
    v13 = (char *)v8 + *(int *)(v12 + 48);
    v54 = v9;
    v14 = *(int *)(v12 + 64);
    *v8 = 2;
    v15 = type metadata accessor for WeatherMapOverlayKind(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, a2, v15);
    *((_BYTE *)v8 + v14) = 1;
    v16 = type metadata accessor for PerformanceTestAction(0);
    swift_storeEnumTagMultiPayload(v8, v16, 3);
    swift_storeEnumTagMultiPayload(v8, v6, 17);
    v57 = 0;
    aBlock = 0u;
    v56 = 0u;
    swift_retain();
    sub_1000A5EBC((uint64_t)v8, (uint64_t)&aBlock, v11);
    sub_100021A14((uint64_t)&aBlock, (uint64_t *)&unk_100BFFA10);
    sub_1000215BC((uint64_t)v8, type metadata accessor for MainAction);
    swift_release(v10);
    v17 = sub_100281014(a1);
    v19 = v18;
    v20 = (void *)objc_opt_self(UIApplication);
    v21 = objc_msgSend(v20, "sharedApplication");
    UIApplication.expectedWindow.getter(&aBlock);

    v22 = *((_QWORD *)&v56 + 1);
    v23 = v57;
    sub_1000DB418(&aBlock, *((uint64_t *)&v56 + 1));
    v59.origin.x = dispatch thunk of WindowType.bounds.getter(v22, v23);
    v24 = CGRectGetHeight(v59) * 0.7;
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&aBlock);
    v25 = objc_allocWithZone((Class)RPTDirectionalSwipeTestParameters);
    v28 = sub_1006E43B8(v17, v19, 3, 6, 0, 0, v26, v27, 40.0, v24, 300.0, 10.0);
    v29 = sub_100281014(a1);
    v31 = v30;
    v32 = objc_msgSend(v20, "sharedApplication");
    UIApplication.expectedWindow.getter(&aBlock);

    v33 = *((_QWORD *)&v56 + 1);
    v34 = v57;
    sub_1000DB418(&aBlock, *((uint64_t *)&v56 + 1));
    v60.origin.x = dispatch thunk of WindowType.bounds.getter(v33, v34);
    v35 = CGRectGetHeight(v60) * 0.7;
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&aBlock);
    v36 = objc_allocWithZone((Class)RPTDirectionalSwipeTestParameters);
    v39 = sub_1006E43B8(v29, v31, 6, 5, 0, 0, v37, v38, 40.0, v35, 300.0, 10.0);
    v40 = (void *)objc_opt_self(RPTGroupScrollTestParameters);
    v41 = sub_100281014(a1);
    v43 = v42;
    v44 = sub_1000BA294(&qword_100BCB640);
    v45 = swift_allocObject(v44, 56, 7);
    *(_OWORD *)(v45 + 16) = xmmword_1009C0AB0;
    *(_QWORD *)(v45 + 32) = v28;
    *(_QWORD *)(v45 + 40) = v39;
    *(_QWORD *)(v45 + 48) = v28;
    *(_QWORD *)&aBlock = v45;
    specialized Array._endMutation()(v45);
    v46 = v28;
    v47 = v39;
    sub_1000BA294(&qword_100BFFA40);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v49 = swift_allocObject(&unk_100B8A778, 24, 7);
    swift_weakInit(v49 + 16);
    v50 = swift_allocObject(&unk_100B8AD18, 25, 7);
    *(_QWORD *)(v50 + 16) = v49;
    *(_BYTE *)(v50 + 24) = a1;
    v57 = sub_1006E49A4;
    v58 = v50;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v56 = sub_100121D84;
    *((_QWORD *)&v56 + 1) = &unk_100B8AD30;
    v51 = _Block_copy(&aBlock);
    swift_release(v58);
    v52 = sub_1006E4690(v41, v43, (uint64_t)isa, (uint64_t)v51, v40);
    _Block_release(v51);

    objc_msgSend(v54, "runTestWithParameters:", v52);
  }
  else
  {
    sub_1006DF4C0(a1, (uint64_t (*)(void))&static os_log_type_t.error.getter, "Failed test: %{public}s", (SEL *)&selRef_failedTest_);
  }
}

void sub_1006DEED4(char a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = sub_1000BA294(&qword_100BC30C8);
  __chkstk_darwin(v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v4, 1, 1, v5);
  v6 = swift_allocObject(&unk_100B8A778, 24, 7);
  swift_weakInit(v6 + 16);
  v7 = swift_allocObject(&unk_100B8AD68, 25, 7);
  *(_QWORD *)(v7 + 16) = v6;
  *(_BYTE *)(v7 + 24) = a1;
  sub_1006E1CC4((uint64_t)v4, (uint64_t)&unk_100BFFA88, v7);
  swift_release();
  sub_100021A14((uint64_t)v4, &qword_100BC30C8);
}

uint64_t sub_1006DEFC4(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  __n128 v21;
  __n128 v22;
  uint64_t v23;
  __n128 v24;
  char v25;
  __n128 v26;
  char v27;
  void (*v28)(char *, uint64_t);
  id v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void *v35;
  __n128 v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  void *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  __int128 aBlock;
  __int128 v59;
  double (*v60)();
  uint64_t v61;

  v2 = v1;
  v57 = a1;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v54 = *(_QWORD *)(v3 - 8);
  v55 = v3;
  __chkstk_darwin(v3);
  v53 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v51 = *(_QWORD *)(v5 - 8);
  v52 = v5;
  __chkstk_darwin(v5);
  v50 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for DispatchTime(0);
  v48 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v49 = (char *)&v46 - v10;
  v47 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v47);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Settings.VFX.AnimatedBackgrounds.AnimationKind(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (uint64_t *)((char *)&v46 - v18);
  sub_100804658();
  v20 = type metadata accessor for SettingReader(0);
  static SettingReader.shared.getter(v20);
  static Settings.VFX.animatedBackgrounds.getter(v21);
  Settings.VFX.AnimatedBackgrounds.locationAnimationKind.getter();
  swift_release();
  SettingReader.read<A>(_:)(v19);
  swift_release();
  v22 = swift_release();
  v23 = static Settings.VFX.animatedBackgrounds.getter(v22);
  v25 = dispatch thunk of SettingGroup.isEnabled.getter(v23, v24);
  v26 = swift_release();
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v14 + 104))(v16, enum case for Settings.VFX.AnimatedBackgrounds.AnimationKind.mica(_:), v13, v26);
  v27 = sub_10011E9F0((uint64_t)v19, (uint64_t)v16);
  v28 = *(void (**)(char *, uint64_t))(v14 + 8);
  v28(v16, v13);
  if ((v27 & 1) != 0 && (v25 & 1) != 0)
  {
    v29 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    LOBYTE(aBlock) = 0;
    NSUserDefaults.set<A>(_:for:)(&aBlock, 0xD000000000000027, 0x8000000100A0AB00, &type metadata for Bool);

    v30 = *(uint64_t (**)(uint64_t))(v2 + 16);
    v31 = type metadata accessor for PerformanceTestAction(0);
    swift_storeEnumTagMultiPayload(v12, v31, 5);
    swift_storeEnumTagMultiPayload(v12, v47, 17);
    v60 = 0;
    aBlock = 0u;
    v59 = 0u;
    swift_retain();
    sub_1000A5EBC((uint64_t)v12, (uint64_t)&aBlock, v30);
    sub_100021A14((uint64_t)&aBlock, (uint64_t *)&unk_100BFFA10);
    sub_1000215BC((uint64_t)v12, type metadata accessor for MainAction);
    swift_release();
    v32 = sub_1000A0794(0, (unint64_t *)&qword_100BC29A0, OS_dispatch_queue_ptr);
    v47 = static OS_dispatch_queue.main.getter(v32);
    static DispatchTime.now()(v47);
    v33 = v49;
    + infix(_:_:)(v8);
    v48 = *(_QWORD *)(v48 + 8);
    ((void (*)(char *, uint64_t))v48)(v8, v56);
    v34 = swift_allocObject(&unk_100B8AF98, 26, 7);
    *(_QWORD *)(v34 + 16) = v2;
    *(_BYTE *)(v34 + 24) = v57;
    *(_BYTE *)(v34 + 25) = 1;
    v60 = sub_1006E4C40;
    v61 = v34;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v59 = sub_100121D84;
    *((_QWORD *)&v59 + 1) = &unk_100B8AFB0;
    v35 = _Block_copy(&aBlock);
    swift_retain();
    v36 = swift_release();
    v37 = v50;
    static DispatchQoS.unspecified.getter(v36);
    *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
    sub_100086DA4((unint64_t *)&qword_100BFFA20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v39 = v38;
    v40 = sub_1000BA294(&qword_100BD4F10);
    v41 = sub_100121014();
    v42 = v53;
    v43 = v55;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v40, v41, v55, v39);
    v44 = (void *)v47;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v33, v37, v42, v35);
    _Block_release(v35);

    (*(void (**)(char *, uint64_t))(v54 + 8))(v42, v43);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v37, v52);
    ((void (*)(char *, uint64_t))v48)(v33, v56);
  }
  else
  {
    sub_1006E1E7C(0, 0, v2, v57);
  }
  return ((uint64_t (*)(_QWORD *, uint64_t))v28)(v19, v13);
}

void sub_1006DF4C0(unsigned __int8 a1, uint64_t (*a2)(void), const char *a3, SEL *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = sub_1000BD684();
  v12 = Logger.logObject.getter(v11);
  v13 = a2();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)sub_100098710(12);
    v23 = sub_100098710(32);
    *(_DWORD *)v14 = 136446210;
    v15 = sub_100281014(a1);
    v17 = sub_1000DC7B8(v15, v16);
    v18 = sub_100099A3C(v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v18, v19);
    swift_bridgeObjectRelease();
    sub_10009D7A0((void *)&_mh_execute_header, v12, v13, a3, v14);
    sub_1000E73C0();
    sub_1000986F0(v23);
    sub_1000986F0((uint64_t)v14);
  }

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v4, v9);
  v20 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v21 = sub_100281014(a1);
  sub_1006E4644(v21, v22, v20, a4);

  sub_100098640();
}

uint64_t sub_1006DF654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  __n128 v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 aBlock;
  __int128 v56;
  void (*v57)();
  uint64_t v58;

  v48 = a7;
  v49 = a2;
  v46 = a1;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v53 = *(_QWORD *)(v10 - 8);
  v54 = v10;
  __chkstk_darwin(v10);
  v47 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v51 = *(_QWORD *)(v12 - 8);
  v52 = v12;
  __chkstk_darwin(v12);
  v45 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for DispatchTime(0);
  v14 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v45 - v18;
  v20 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100804658();
  v23 = *(uint64_t (**)(uint64_t))(a3 + 16);
  v24 = *(_QWORD *)(a3 + 24);
  v25 = type metadata accessor for PerformanceTestAction(0);
  swift_storeEnumTagMultiPayload(v22, v25, 5);
  swift_storeEnumTagMultiPayload(v22, v20, 17);
  v57 = 0;
  aBlock = 0u;
  v56 = 0u;
  swift_retain();
  sub_1000A5EBC((uint64_t)v22, (uint64_t)&aBlock, v23);
  sub_100021A14((uint64_t)&aBlock, (uint64_t *)&unk_100BFFA10);
  sub_1000215BC((uint64_t)v22, type metadata accessor for MainAction);
  swift_release(v24);
  v26 = sub_1000A0794(0, (unint64_t *)&qword_100BC29A0, OS_dispatch_queue_ptr);
  v27 = (void *)static OS_dispatch_queue.main.getter(v26);
  static DispatchTime.now()(v27);
  + infix(_:_:)(v16);
  v28 = *(void (**)(char *, uint64_t))(v14 + 8);
  v29 = v50;
  v28(v16, v50);
  v30 = swift_allocObject(&unk_100B8A728, 64, 7);
  *(_QWORD *)(v30 + 16) = a3;
  *(_BYTE *)(v30 + 24) = a5;
  *(_QWORD *)(v30 + 32) = a6;
  v31 = v48;
  v32 = v49;
  v33 = v46;
  *(_QWORD *)(v30 + 40) = v48;
  *(_QWORD *)(v30 + 48) = v33;
  *(_QWORD *)(v30 + 56) = v32;
  v57 = sub_1006E45E0;
  v58 = v30;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v56 = sub_100121D84;
  *((_QWORD *)&v56 + 1) = &unk_100B8A740;
  v34 = _Block_copy(&aBlock);
  v35 = v58;
  swift_retain();
  swift_bridgeObjectRetain(v31);
  sub_1000FDC6C(v33, v32);
  v36 = swift_release(v35);
  v37 = v45;
  static DispatchQoS.unspecified.getter(v36);
  *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
  sub_100086DA4((unint64_t *)&qword_100BFFA20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v39 = v38;
  v40 = sub_1000BA294(&qword_100BD4F10);
  v41 = sub_100121014();
  v42 = v47;
  v43 = v54;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v40, v41, v54, v39);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v19, v37, v42, v34);
  _Block_release(v34);

  (*(void (**)(char *, uint64_t))(v53 + 8))(v42, v43);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v37, v52);
  return ((uint64_t (*)(char *, uint64_t))v28)(v19, v29);
}

void sub_1006DFA0C(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v10;
  void *v11;
  void (*v12)();
  double x;
  double y;
  double width;
  double height;
  double v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  double v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  Class isa;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  id v39;
  _QWORD aBlock[3];
  void *v42;
  void (*v43)();
  uint64_t v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;

  sub_1006DF4C0(a2, (uint64_t (*)(void))&static os_log_type_t.default.getter, "Started test: %{public}s", (SEL *)&selRef_startedTest_);
  v10 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  UIApplication.expectedWindow.getter(aBlock);

  v11 = v42;
  v12 = v43;
  sub_1000DB418(aBlock, (uint64_t)v42);
  v45.origin.x = dispatch thunk of WindowType.bounds.getter(v11, v12);
  v46 = CGRectInset(v45, 10.0, 120.0);
  x = v46.origin.x;
  y = v46.origin.y;
  width = v46.size.width;
  height = v46.size.height;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(aBlock);
  v47.origin.x = x;
  v47.origin.y = y;
  v47.size.width = width;
  v47.size.height = height;
  v17 = CGRectGetHeight(v47) * 3.0;
  v18 = objc_allocWithZone((Class)RPTScrollViewTestParameters);
  swift_bridgeObjectRetain(a4);
  v22 = sub_1006E42A4(a3, a4, 1, 0, 0, v19, v20, v21, x, y, width, height, v17);
  v48.origin.x = x;
  v48.origin.y = y;
  v48.size.width = width;
  v48.size.height = height;
  v23 = CGRectGetHeight(v48) * 3.0;
  v24 = objc_allocWithZone((Class)RPTScrollViewTestParameters);
  swift_bridgeObjectRetain(a4);
  v28 = sub_1006E42A4(a3, a4, 0, 0, 0, v25, v26, v27, x, y, width, height, v23);
  v29 = (void *)objc_opt_self(RPTGroupScrollTestParameters);
  v30 = sub_1000BA294(&qword_100BCB640);
  v31 = swift_allocObject(v30, 48, 7);
  *(_OWORD *)(v31 + 16) = xmmword_1009890E0;
  *(_QWORD *)(v31 + 32) = v22;
  *(_QWORD *)(v31 + 40) = v28;
  aBlock[0] = v31;
  specialized Array._endMutation()(v31);
  v32 = v22;
  v33 = v28;
  sub_1000BA294(&qword_100BFFA40);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v35 = swift_allocObject(&unk_100B8A778, 24, 7);
  swift_weakInit(v35 + 16);
  v36 = swift_allocObject(&unk_100B8A7A0, 48, 7);
  *(_QWORD *)(v36 + 16) = v35;
  *(_BYTE *)(v36 + 24) = a2;
  *(_QWORD *)(v36 + 32) = a5;
  *(_QWORD *)(v36 + 40) = a6;
  v43 = sub_1006E4614;
  v44 = v36;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100121D84;
  v42 = &unk_100B8A7B8;
  v37 = _Block_copy(aBlock);
  v38 = v44;
  sub_1000FDC6C(a5, a6);
  swift_release(v38);
  v39 = sub_1006E4700(a3, a4, (uint64_t)isa, (uint64_t)v37, v29);
  _Block_release(v37);

  objc_msgSend((id)objc_opt_self(RPTTestRunner), "runTestWithParameters:", v39);
}

double sub_1006DFD48(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v12;
  double result;

  v12 = swift_allocObject(&unk_100B8A700, 17, 7);
  *(_BYTE *)(v12 + 16) = a6;
  sub_1006DF654((uint64_t)sub_1006E459C, v12, a1, a2, a3, a4, a5);
  *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  return result;
}

void sub_1006DFDD4(unsigned __int8 a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  void (*v12)();
  double x;
  double y;
  double width;
  double height;
  double v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  double v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  Class isa;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  _QWORD aBlock[3];
  void *v42;
  void (*v43)();
  uint64_t v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;

  v6 = sub_100281014(a1);
  v8 = v7;
  v9 = (void *)objc_opt_self(RPTTestRunner);
  if (objc_msgSend(v9, "isRecapAvailable"))
  {
    sub_1006DF4C0(a1, (uint64_t (*)(void))&static os_log_type_t.default.getter, "Started test: %{public}s", (SEL *)&selRef_startedTest_);
    v10 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
    UIApplication.expectedWindow.getter(aBlock);

    v40 = a3;
    v11 = v42;
    v12 = v43;
    sub_1000DB418(aBlock, (uint64_t)v42);
    v45.origin.x = dispatch thunk of WindowType.bounds.getter(v11, v12);
    v46 = CGRectInset(v45, 10.0, 90.0);
    x = v46.origin.x;
    y = v46.origin.y;
    width = v46.size.width;
    height = v46.size.height;
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(aBlock);
    swift_bridgeObjectRetain(v8);
    v47.origin.x = x;
    v47.origin.y = y;
    v47.size.width = width;
    v47.size.height = height;
    v17 = CGRectGetHeight(v47) * 3.0;
    v18 = objc_allocWithZone((Class)RPTScrollViewTestParameters);
    v22 = sub_1006E42A4(v6, v8, 1, 0, 0, v19, v20, v21, x, y, width, height, v17);
    swift_bridgeObjectRetain(v8);
    v48.origin.x = x;
    v48.origin.y = y;
    v48.size.width = width;
    v48.size.height = height;
    v23 = CGRectGetHeight(v48) * 3.0;
    v24 = objc_allocWithZone((Class)RPTScrollViewTestParameters);
    v28 = sub_1006E42A4(v6, v8, 0, 0, 0, v25, v26, v27, x, y, width, height, v23);
    v39 = (void *)objc_opt_self(RPTGroupScrollTestParameters);
    v29 = sub_1000BA294(&qword_100BCB640);
    v30 = swift_allocObject(v29, 48, 7);
    *(_OWORD *)(v30 + 16) = xmmword_1009890E0;
    *(_QWORD *)(v30 + 32) = v22;
    *(_QWORD *)(v30 + 40) = v28;
    aBlock[0] = v30;
    specialized Array._endMutation()(v30);
    v31 = v22;
    v32 = v28;
    sub_1000BA294(&qword_100BFFA40);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v34 = swift_allocObject(&unk_100B8A778, 24, 7);
    swift_weakInit(v34 + 16);
    v35 = swift_allocObject(&unk_100B8A908, 48, 7);
    *(_QWORD *)(v35 + 16) = v34;
    *(_BYTE *)(v35 + 24) = a1;
    *(_QWORD *)(v35 + 32) = a2;
    *(_QWORD *)(v35 + 40) = v40;
    v43 = sub_1006E4D48;
    v44 = v35;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100121D84;
    v42 = &unk_100B8A920;
    v36 = _Block_copy(aBlock);
    v37 = v44;
    sub_1000FDC6C((uint64_t)a2, v40);
    swift_release(v37);
    v38 = sub_1006E4690(v6, v8, (uint64_t)isa, (uint64_t)v36, v39);
    _Block_release(v36);

    objc_msgSend(v9, "runTestWithParameters:", v38);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1006DF4C0(a1, (uint64_t (*)(void))&static os_log_type_t.error.getter, "Failed test: %{public}s", (SEL *)&selRef_failedTest_);
    if (a2)
      a2();
  }
}

double sub_1006E016C(uint64_t a1, int a2, char a3)
{
  uint64_t v6;
  double result;

  v6 = swift_allocObject(&unk_100B8A868, 17, 7);
  *(_BYTE *)(v6 + 16) = a3;
  sub_1006E0340((uint64_t)sub_1006E4E0C, v6, a1, a2, 6u, (uint64_t)&unk_100B8A890, (uint64_t)sub_1006E477C, (uint64_t)&unk_100B8A8A8);
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

uint64_t sub_1006E01EC(double a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = sub_1000BA294(&qword_100BC3C38);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_10097CA50;
  *(_QWORD *)(v5 + 56) = &type metadata for Double;
  *(_QWORD *)(v5 + 64) = &protocol witness table for Double;
  *(double *)(v5 + 32) = a1;
  v6 = String.init(format:_:)(1714564645, 0xE400000000000000, v5);
  v8 = v7;
  v9 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10097CA50;
  *(_QWORD *)(v9 + 56) = &type metadata for Double;
  *(_QWORD *)(v9 + 64) = &protocol witness table for Double;
  *(double *)(v9 + 32) = a2;
  v10 = String.init(format:_:)(1714564645, 0xE400000000000000, v9);
  return StubPPTWeatherDataManager.CoordinateString.init(latitude:longitude:)(v6, v8, v10, v11);
}

uint64_t sub_1006E02D8(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = a1 + 16;
  sub_1000992EC(a1 + 16, (uint64_t)v5);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    sub_1006DF4C0(a2, (uint64_t (*)(void))&static os_log_type_t.default.getter, "Finished test: %{public}s", (SEL *)&selRef_finishedTest_);
    return sub_10009880C();
  }
  return result;
}

void sub_1006E0340(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void (*v32)(_BYTE *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[4];
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 aBlock;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;

  v50 = a7;
  v51 = a8;
  v46 = a6;
  v47 = a1;
  v45 = a5;
  v49 = a4;
  v48 = a2;
  v53 = type metadata accessor for DispatchWorkItemFlags(0);
  v56 = *(_QWORD *)(v53 - 8);
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_100088FDC();
  v52 = v10;
  v11 = type metadata accessor for DispatchQoS(0);
  v54 = *(_QWORD *)(v11 - 8);
  v55 = v11;
  sub_10009D98C();
  __chkstk_darwin(v12);
  sub_100098728();
  v15 = v14 - v13;
  v16 = type metadata accessor for DispatchTime(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = &v44[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v20);
  v22 = &v44[-v21];
  v23 = type metadata accessor for MainAction(0);
  sub_10009D98C();
  __chkstk_darwin(v24);
  sub_100098728();
  v27 = v26 - v25;
  v28 = *(uint64_t (**)(uint64_t))(a3 + 16);
  v29 = type metadata accessor for PerformanceTestAction(0);
  swift_storeEnumTagMultiPayload(v27, v29, v45);
  swift_storeEnumTagMultiPayload(v27, v23, 17);
  v59 = 0;
  aBlock = 0u;
  v58 = 0u;
  swift_retain();
  sub_1000A5EBC(v27, (uint64_t)&aBlock, v28);
  sub_100021A14((uint64_t)&aBlock, (uint64_t *)&unk_100BFFA10);
  sub_1000215BC(v27, type metadata accessor for MainAction);
  sub_10009880C();
  v30 = sub_1000A0794(0, (unint64_t *)&qword_100BC29A0, OS_dispatch_queue_ptr);
  v31 = (void *)static OS_dispatch_queue.main.getter(v30);
  static DispatchTime.now()(v31);
  + infix(_:_:)(v19);
  v32 = *(void (**)(_BYTE *, uint64_t))(v17 + 8);
  v32(v19, v16);
  v33 = swift_allocObject(v46, 48, 7);
  *(_QWORD *)(v33 + 16) = a3;
  *(_BYTE *)(v33 + 24) = v49;
  v35 = v47;
  v34 = v48;
  *(_QWORD *)(v33 + 32) = v47;
  *(_QWORD *)(v33 + 40) = v34;
  v59 = v50;
  v60 = v33;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v58 = sub_100121D84;
  *((_QWORD *)&v58 + 1) = v51;
  v36 = _Block_copy(&aBlock);
  swift_retain();
  sub_1000FDC6C(v35, v34);
  sub_10009880C();
  static DispatchQoS.unspecified.getter(v37);
  *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
  sub_100086DA4((unint64_t *)&qword_100BFFA20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v39 = v38;
  v40 = sub_1000BA294(&qword_100BD4F10);
  v41 = sub_100121014();
  v43 = v52;
  v42 = v53;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v40, v41, v53, v39);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v22, v15, v43, v36);
  _Block_release(v36);

  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v43, v42);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v15, v55);
  v32(v22, v16);
  sub_100098640();
}

double sub_1006E0660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, double))
{
  uint64_t v12;
  double v13;
  double result;

  v12 = swift_allocObject(a5, 32, 7);
  *(_QWORD *)(v12 + 16) = a3;
  *(_QWORD *)(v12 + 24) = a4;
  v13 = sub_1000FDC6C(a3, a4);
  a7(a2, a6, v12, v13);
  *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  return result;
}

void sub_1006E06E4(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t (*v14)();
  void *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  void *v28;
  uint64_t (*v29)();
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  void *v44;
  _QWORD *v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD aBlock[3];
  void *v51;
  uint64_t (*v52)();
  _QWORD *v53;

  v4 = v3;
  v8 = sub_100281014(a1);
  v10 = v9;
  v11 = (void *)objc_opt_self(RPTTestRunner);
  if (objc_msgSend(v11, "isRecapAvailable"))
  {
    v49 = a3;
    sub_1006DF4C0(a1, (uint64_t (*)(void))&static os_log_type_t.default.getter, "Started test: %{public}s", (SEL *)&selRef_startedTest_);
    v12 = (void *)objc_opt_self(UIApplication);
    v13 = objc_msgSend(v12, "sharedApplication", swift_bridgeObjectRetain(v10).n128_f64[0]);
    UIApplication.expectedWindow.getter(aBlock);

    v48 = a2;
    v15 = v51;
    v14 = v52;
    sub_1000DB418(aBlock, (uint64_t)v51);
    v16 = dispatch thunk of WindowType.bounds.getter(v15, v14);
    v18 = v17;
    v20 = v19;
    v22 = v21;
    v23 = objc_allocWithZone((Class)RPTDirectionalSwipeTestParameters);
    v26 = sub_1006E43B8(v8, v10, 1, 6, 0, 0, v24, v25, v16, v18, v20, v22);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(aBlock);
    v27 = objc_msgSend(v12, "sharedApplication");
    UIApplication.expectedWindow.getter(aBlock);

    v28 = v51;
    v29 = v52;
    sub_1000DB418(aBlock, (uint64_t)v51);
    v30 = dispatch thunk of WindowType.bounds.getter(v28, v29);
    v32 = v31;
    v34 = v33;
    v36 = v35;
    v37 = objc_allocWithZone((Class)RPTDirectionalSwipeTestParameters);
    v40 = sub_1006E43B8(v8, v10, 1, 5, 0, 0, v38, v39, v30, v32, v34, v36);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(aBlock);
    v41 = swift_allocObject(&unk_100B8AA48, 64, 7);
    *(_QWORD *)(v41 + 16) = v40;
    *(_QWORD *)(v41 + 24) = v26;
    *(_QWORD *)(v41 + 32) = v4;
    *(_BYTE *)(v41 + 40) = a1;
    *(_QWORD *)(v41 + 48) = v48;
    *(_QWORD *)(v41 + 56) = v49;
    v42 = sub_1000A0794(0, &qword_100BFFA48, RPTTestRunner_ptr);
    v43 = (_QWORD *)swift_allocObject(&unk_100B8AA70, 64, 7);
    v43[2] = 0x3FF0000000000000;
    v43[3] = v42;
    v43[4] = 2;
    v43[5] = v26;
    v43[6] = sub_1006E4888;
    v43[7] = v41;
    v52 = sub_1006E48A0;
    v53 = v43;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1006DBBB0;
    v51 = &unk_100B8AA88;
    v44 = _Block_copy(aBlock);
    v45 = v53;
    v46 = v26;
    v47 = v40;
    swift_retain();
    sub_1000FDC6C(v48, v49);
    swift_retain();
    objc_msgSend(v11, "runTestWithParameters:resultHandler:", v46, v44, swift_release(v45).n128_f64[0]);
    _Block_release(v44);

    swift_release(v41);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1006DF4C0(a1, (uint64_t (*)(void))&static os_log_type_t.error.getter, "Failed test: %{public}s", (SEL *)&selRef_failedTest_);
  }
}

double sub_1006E0A50(uint64_t a1, int a2, char a3)
{
  uint64_t v6;
  double result;

  v6 = swift_allocObject(&unk_100B8A9A8, 17, 7);
  *(_BYTE *)(v6 + 16) = a3;
  sub_1006E0340((uint64_t)sub_1006E4E0C, v6, a1, a2, 7u, (uint64_t)&unk_100B8A9D0, (uint64_t)sub_1006E47D8, (uint64_t)&unk_100B8A9E8);
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

double sub_1006E0AD0(void *a1, void *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  id v18;
  id v19;
  double result;
  _QWORD v21[5];
  _QWORD *v22;

  v12 = swift_allocObject(&unk_100B8AAC0, 56, 7);
  *(_QWORD *)(v12 + 16) = a2;
  *(_QWORD *)(v12 + 24) = a3;
  *(_BYTE *)(v12 + 32) = a4;
  *(_QWORD *)(v12 + 40) = a5;
  *(_QWORD *)(v12 + 48) = a6;
  v13 = sub_1000A0794(0, &qword_100BFFA48, RPTTestRunner_ptr);
  v14 = (void *)objc_opt_self(RPTTestRunner);
  v15 = (_QWORD *)swift_allocObject(&unk_100B8AAE8, 64, 7);
  v15[2] = 0x3FF0000000000000;
  v15[3] = v13;
  v15[4] = 4;
  v15[5] = a1;
  v15[6] = sub_1006E48DC;
  v15[7] = v12;
  v21[4] = sub_1006E48A0;
  v22 = v15;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256;
  v21[2] = sub_1006DBBB0;
  v21[3] = &unk_100B8AB00;
  v16 = _Block_copy(v21);
  v17 = v22;
  v18 = a2;
  swift_retain();
  sub_1000FDC6C(a5, a6);
  v19 = a1;
  swift_retain();
  objc_msgSend(v14, "runTestWithParameters:resultHandler:", v19, v16, swift_release(v17).n128_f64[0]);
  _Block_release(v16);
  *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  return result;
}

double sub_1006E0C48(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  id v16;
  double result;
  _QWORD v18[5];
  _QWORD *v19;

  v9 = swift_allocObject(&unk_100B8A778, 24, 7);
  swift_weakInit(v9 + 16);
  v10 = swift_allocObject(&unk_100B8AB38, 48, 7);
  *(_QWORD *)(v10 + 16) = v9;
  *(_BYTE *)(v10 + 24) = a3;
  *(_QWORD *)(v10 + 32) = a4;
  *(_QWORD *)(v10 + 40) = a5;
  v11 = sub_1000A0794(0, &qword_100BFFA48, RPTTestRunner_ptr);
  v12 = (void *)objc_opt_self(RPTTestRunner);
  v13 = (_QWORD *)swift_allocObject(&unk_100B8AB60, 64, 7);
  v13[2] = 0x3FF0000000000000;
  v13[3] = v11;
  v13[4] = 2;
  v13[5] = a1;
  v13[6] = sub_1006E4D48;
  v13[7] = v10;
  v18[4] = sub_1006E48A0;
  v19 = v13;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  v18[2] = sub_1006DBBB0;
  v18[3] = &unk_100B8AB78;
  v14 = _Block_copy(v18);
  v15 = v19;
  swift_retain();
  sub_1000FDC6C(a4, a5);
  v16 = a1;
  swift_retain();
  objc_msgSend(v12, "runTestWithParameters:resultHandler:", v16, v14, swift_release(v15).n128_f64[0]);
  _Block_release(v14);
  swift_release(v9);
  *(_QWORD *)&result = swift_release(v10).n128_u64[0];
  return result;
}

void sub_1006E0DDC(uint64_t a1, unsigned __int8 a2, void (*a3)(__n128))
{
  uint64_t v5;
  uint64_t Strong;
  __n128 v7;
  uint64_t v8;
  _BYTE v9[24];

  v5 = a1 + 16;
  sub_1000992EC(a1 + 16, (uint64_t)v9);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    v8 = Strong;
    sub_1006DF4C0(a2, (uint64_t (*)(void))&static os_log_type_t.default.getter, "Finished test: %{public}s", (SEL *)&selRef_finishedTest_);
    v7 = swift_release(v8);
  }
  if (a3)
    a3(v7);
}

uint64_t sub_1006E0E68(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_BYTE *)(v3 + 257) = a3;
  *(_QWORD *)(v3 + 104) = a2;
  v4 = type metadata accessor for Logger(0);
  *(_QWORD *)(v3 + 112) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 120) = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 128) = swift_task_alloc(v6);
  *(_QWORD *)(v3 + 136) = swift_task_alloc(v6);
  return swift_task_switch(sub_1006E0EDC, 0, 0);
}

uint64_t sub_1006E0EDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 104) + 16;
  sub_1000992EC(v1, v0 + 56);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 144) = Strong;
  if (Strong)
  {
    *(_BYTE *)(v0 + 258) = sub_1006E18DC() & 1;
    v3 = (_QWORD *)swift_task_alloc(dword_100BFFAAC);
    *(_QWORD *)(v0 + 152) = v3;
    *v3 = v0;
    v3[1] = sub_1006E10B0;
    return sub_1006E1A74();
  }
  else
  {
    v5 = *(NSObject **)(v0 + 136);
    v6 = sub_1000DB08C();
    Logger.logObject.getter(v6);
    v7 = sub_1000B26E0();
    v8 = os_log_type_enabled(v5, v7);
    v9 = *(_QWORD *)(v0 + 136);
    v10 = *(_QWORD *)(v0 + 112);
    v11 = *(_QWORD *)(v0 + 120);
    if (v8)
    {
      v12 = (uint8_t *)sub_100098710(12);
      v13 = sub_100098710(32);
      v16 = v13;
      *(_DWORD *)v12 = 136446210;
      v14 = String.init<A>(describing:)(v13);
      *(_QWORD *)(v0 + 80) = sub_1000CE1C8(v14, v15, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);
      swift_bridgeObjectRelease();
      sub_10009D7A0((void *)&_mh_execute_header, v5, v7, "Failed to run list view to location view transition test with error: %{public}s", v12);
      swift_arrayDestroy(v13, 1);
      sub_1000986F0(v13);
      sub_1000986F0((uint64_t)v12);

    }
    else
    {

    }
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    swift_task_dealloc(*(_QWORD *)(v0 + 136));
    sub_1000B30A8();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1006E10B0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*v1 + 152);
  v3 = *v1;
  *(_QWORD *)(v3 + 160) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    sub_10003BC90();
    return sub_1000BA5E8();
  }
  else
  {
    v5 = (_QWORD *)swift_task_alloc(dword_100BFFABC);
    *(_QWORD *)(v3 + 168) = v5;
    *v5 = v3;
    v5[1] = sub_1006E1134;
    return sub_1006E1B04(2);
  }
}

uint64_t sub_1006E1134()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*v1 + 168);
  v3 = *v1;
  *(_QWORD *)(v3 + 176) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    sub_10003BC90();
    return sub_1000BA5E8();
  }
  else
  {
    v5 = (_QWORD *)swift_task_alloc(dword_100BFFAAC);
    *(_QWORD *)(v3 + 184) = v5;
    *v5 = v3;
    v5[1] = sub_1006E11B4;
    return sub_1006E1A74();
  }
}

uint64_t sub_1006E11B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = v0;
  swift_task_dealloc(v2);
  sub_10003BC90();
  return sub_1000BA3F4();
}

uint64_t sub_1006E120C()
{
  _QWORD *v0;
  uint64_t v1;

  v0[25] = objc_opt_self(UIApplication);
  v1 = type metadata accessor for MainActor(0);
  v0[26] = v1;
  v0[27] = static MainActor.shared.getter(v1);
  sub_100099AB8();
  return sub_1000BA5E8();
}

uint64_t sub_1006E1278()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 224) = objc_msgSend(*(id *)(v0 + 200), "sharedApplication", swift_release().n128_f64[0]);
  sub_10003BC90();
  return sub_1000BA3F4();
}

uint64_t sub_1006E12C8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 232) = static MainActor.shared.getter(a1);
  sub_100099AB8();
  return sub_1000BA5E8();
}

uint64_t sub_1006E1318()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 224);
  swift_release();
  UIApplication.expectedWindow.getter((_QWORD *)(v0 + 16));

  sub_10003BC90();
  return sub_1000BA5E8();
}

uint64_t sub_1006E1358()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  _QWORD *v4;
  CGRect v6;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  sub_1000DB418((_QWORD *)(v0 + 16), v1);
  v6.origin.x = dispatch thunk of WindowType.bounds.getter(v1, v2);
  v3 = CGRectGetWidth(v6) * 0.5;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  v4 = (_QWORD *)swift_task_alloc(dword_100BFFAC4);
  *(_QWORD *)(v0 + 240) = v4;
  *v4 = v0;
  v4[1] = sub_1006E13FC;
  return sub_1006E1B70(*(_BYTE *)(v0 + 257), v3, 200.0);
}

uint64_t sub_1006E13FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  sub_10003BC90();
  return sub_1000BA3F4();
}

uint64_t sub_1006E1454()
{
  uint64_t v0;
  char v1;
  id v2;

  v1 = *(_BYTE *)(v0 + 258);
  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  *(_BYTE *)(v0 + 256) = v1;
  NSUserDefaults.set<A>(_:for:)(v0 + 256, 0xD000000000000027, 0x8000000100A0AB00, &type metadata for Bool);

  swift_release();
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  sub_1000B30A8();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

#error "1006E15BC: call analysis failed (funcsize=59)"

#error "1006E16B4: call analysis failed (funcsize=59)"

#error "1006E17AC: call analysis failed (funcsize=59)"

#error "1006E18A4: call analysis failed (funcsize=59)"

uint64_t sub_1006E18DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __n128 v8;
  __n128 v9;
  uint64_t v10;
  __n128 v11;
  char v12;
  __n128 v13;
  char v14;
  void (*v15)(_BYTE *, uint64_t);
  id v16;
  _BYTE v18[15];
  char v19;

  v0 = type metadata accessor for Settings.VFX.AnimatedBackgrounds.AnimationKind(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v18[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v6 = &v18[-v5];
  v7 = type metadata accessor for SettingReader(0);
  static SettingReader.shared.getter(v7);
  static Settings.VFX.animatedBackgrounds.getter(v8);
  Settings.VFX.AnimatedBackgrounds.locationAnimationKind.getter();
  swift_release();
  SettingReader.read<A>(_:)(v6);
  swift_release();
  v9 = swift_release();
  v10 = static Settings.VFX.animatedBackgrounds.getter(v9);
  v12 = dispatch thunk of SettingGroup.isEnabled.getter(v10, v11);
  v13 = swift_release();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, __n128))(v1 + 104))(v3, enum case for Settings.VFX.AnimatedBackgrounds.AnimationKind.mica(_:), v0, v13);
  v14 = sub_10011E9F0((uint64_t)v6, (uint64_t)v3);
  v15 = *(void (**)(_BYTE *, uint64_t))(v1 + 8);
  v15(v3, v0);
  if ((v14 & 1) != 0 && (v12 & 1) != 0)
  {
    v16 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v19 = 0;
    NSUserDefaults.set<A>(_:for:)(&v19, 0xD000000000000027, 0x8000000100A0AB00, &type metadata for Bool);

  }
  v15(v6, v0);
  return v12 & 1;
}

uint64_t sub_1006E1A74()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 80) = v0;
  return swift_task_switch(sub_1006E1A8C, 0, 0);
}

uint64_t sub_1006E1A8C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[10];
  v0[2] = v0;
  v0[3] = sub_1006E1AD0;
  v2 = sub_1000CF9BC();
  sub_1006E262C(v2, v1);
  return sub_1000D0E48();
}

uint64_t sub_1006E1AD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000C6C3C();
  if (v0)
    swift_willThrow(v2, v3);
  return sub_1000DA160(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1006E1B04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = v1;
  return swift_task_switch(sub_1006E1B1C, 0, 0);
}

uint64_t sub_1006E1B1C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v0[10];
  v1 = v0[11];
  v0[2] = v0;
  v0[3] = sub_1006E1AD0;
  v3 = sub_1000CF9BC();
  sub_1006E2B10(v3, v1, v2);
  return swift_continuation_await(v0 + 2);
}

uint64_t sub_1006E1B70(char a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 104) = v3;
  *(double *)(v4 + 88) = a2;
  *(double *)(v4 + 96) = a3;
  *(_BYTE *)(v4 + 120) = a1;
  return swift_task_switch(sub_1006E1B90, 0, 0);
}

uint64_t sub_1006E1B90()
{
  uint64_t v0;

  swift_weakInit(v0 + 80);
  sub_10003BC90();
  return sub_1000BA3F4();
}

uint64_t sub_1006E1BC4()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  double v3;
  char v4;
  uint64_t v5;

  v1 = v0 + 80;
  v3 = *(double *)(v0 + 88);
  v2 = *(double *)(v0 + 96);
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_1006E1C24;
  v4 = *(_BYTE *)(v0 + 120);
  v5 = sub_1000CF9BC();
  sub_1006E3014(v5, v1, v4, v3, v2);
  return sub_1000D0E48();
}

uint64_t sub_1006E1C24(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *v2;
  v4 = *(_QWORD *)(v3 + 48);
  *(_QWORD *)(v3 + 112) = v4;
  if (v4)
  {
    swift_willThrow(a1, a2);
    sub_10003BC90();
    return swift_task_switch(v5, v6, v7);
  }
  else
  {
    swift_weakDestroy(v3 + 80);
    return sub_1000DA160(*(uint64_t (**)(void))(v3 + 8));
  }
}

uint64_t sub_1006E1C98()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 80);
  return sub_1000950D8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1006E1CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD v22[4];

  v6 = sub_1000BA294(&qword_100BC30C8);
  __chkstk_darwin(v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100120F64(a1, (uint64_t)v8);
  v9 = (_QWORD *)swift_allocObject(&unk_100B8AD90, 48, 7);
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = a2;
  v9[5] = a3;
  v10 = type metadata accessor for TaskPriority(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v10) == 1)
  {
    sub_100021A14((uint64_t)v8, &qword_100BC30C8);
    v12 = 0;
    v13 = 0;
    v14 = 7168;
  }
  else
  {
    v15 = TaskPriority.rawValue.getter(v11);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
    v14 = v15 | 0x1C00;
    v16 = v9[2];
    if (v16)
    {
      ObjectType = swift_getObjectType(v16);
      swift_unknownObjectRetain(v16);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType);
      v13 = v18;
      swift_unknownObjectRelease(v16);
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
  }
  v19 = swift_allocObject(&unk_100B8ADB8, 32, 7);
  *(_QWORD *)(v19 + 16) = &unk_100BFFA98;
  *(_QWORD *)(v19 + 24) = v9;
  if (v13 | v12)
  {
    v22[0] = 0;
    v22[1] = 0;
    v20 = v22;
    v22[2] = v12;
    v22[3] = v13;
  }
  else
  {
    v20 = 0;
  }
  return swift_task_create(v14, v20, &type metadata for () + 1, &unk_100BFFAA0, v19);
}

uint64_t sub_1006E1E7C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void (*v23)(char *, uint64_t);
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 aBlock;
  __int128 v42;
  uint64_t (*v43)();
  uint64_t v44;

  v36 = a4;
  v37 = type metadata accessor for DispatchWorkItemFlags(0);
  v40 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v38 = *(_QWORD *)(v7 - 8);
  v39 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v35 - v14;
  v16 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(uint64_t (**)(uint64_t))(a3 + 16);
  v20 = type metadata accessor for PerformanceTestAction(0);
  swift_storeEnumTagMultiPayload(v18, v20, 6);
  swift_storeEnumTagMultiPayload(v18, v16, 17);
  v43 = 0;
  aBlock = 0u;
  v42 = 0u;
  swift_retain();
  sub_1000A5EBC((uint64_t)v18, (uint64_t)&aBlock, v19);
  sub_100021A14((uint64_t)&aBlock, (uint64_t *)&unk_100BFFA10);
  sub_1000215BC((uint64_t)v18, type metadata accessor for MainAction);
  swift_release();
  v21 = sub_1000A0794(0, (unint64_t *)&qword_100BC29A0, OS_dispatch_queue_ptr);
  v22 = (void *)static OS_dispatch_queue.main.getter(v21);
  static DispatchTime.now()(v22);
  + infix(_:_:)(v12);
  v23 = *(void (**)(char *, uint64_t))(v10 + 8);
  v24 = v12;
  v25 = v35;
  v23(v24, v35);
  v26 = swift_allocObject(&unk_100B8B010, 25, 7);
  *(_QWORD *)(v26 + 16) = a3;
  *(_BYTE *)(v26 + 24) = v36;
  v43 = sub_1006E4C5C;
  v44 = v26;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v42 = sub_100121D84;
  *((_QWORD *)&v42 + 1) = &unk_100B8B028;
  v27 = _Block_copy(&aBlock);
  swift_retain();
  v28 = swift_release();
  static DispatchQoS.unspecified.getter(v28);
  *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
  sub_100086DA4((unint64_t *)&qword_100BFFA20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v30 = v29;
  v31 = sub_1000BA294(&qword_100BD4F10);
  v32 = sub_100121014();
  v33 = v37;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v31, v32, v37, v30);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v15, v9, v6, v27);
  _Block_release(v27);

  (*(void (**)(char *, uint64_t))(v40 + 8))(v6, v33);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v39);
  return ((uint64_t (*)(char *, uint64_t))v23)(v15, v25);
}

uint64_t sub_1006E21C8(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t (*v16)();
  double v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void *v25;
  __n128 v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD aBlock[3];
  void *v42;
  uint64_t (*v43)();
  uint64_t v44;
  CGRect v45;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v40 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v37 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v38 = *(_QWORD *)(v6 - 8);
  v39 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for DispatchTime(0);
  v9 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v35 = (char *)&v35 - v13;
  sub_1006DF4C0(a2, (uint64_t (*)(void))&static os_log_type_t.default.getter, "Started test: %{public}s", (SEL *)&selRef_startedTest_);
  v14 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  UIApplication.expectedWindow.getter(aBlock);

  v15 = v42;
  v16 = v43;
  sub_1000DB418(aBlock, (uint64_t)v42);
  v45.origin.x = dispatch thunk of WindowType.bounds.getter(v15, v16);
  v17 = CGRectGetWidth(v45) * 0.5;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(aBlock);
  v18 = objc_allocWithZone((Class)type metadata accessor for FastScrollParameters());
  v19 = sub_1006E3C54(v17, 400.0, 200.0, 0.1);
  objc_msgSend((id)objc_opt_self(RPTTestRunner), "runTestWithParameters:", v19);
  v20 = sub_1000A0794(0, (unint64_t *)&qword_100BC29A0, OS_dispatch_queue_ptr);
  v21 = (void *)static OS_dispatch_queue.main.getter(v20);
  static DispatchTime.now()(v21);
  + infix(_:_:)(v11);
  v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v23 = v36;
  v22(v11, v36);
  v24 = swift_allocObject(&unk_100B8B060, 25, 7);
  *(_QWORD *)(v24 + 16) = a1;
  *(_BYTE *)(v24 + 24) = a2;
  v43 = sub_1006E4E6C;
  v44 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100121D84;
  v42 = &unk_100B8B078;
  v25 = _Block_copy(aBlock);
  swift_retain();
  v26 = swift_release();
  v27 = v8;
  static DispatchQoS.unspecified.getter(v26);
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100086DA4((unint64_t *)&qword_100BFFA20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v29 = v28;
  v30 = sub_1000BA294(&qword_100BD4F10);
  v31 = sub_100121014();
  v32 = v37;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v30, v31, v4, v29);
  v33 = v35;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v35, v27, v32, v25);
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v40 + 8))(v32, v4);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v27, v39);
  return ((uint64_t (*)(char *, uint64_t))v22)(v33, v23);
}

double sub_1006E2550(uint64_t a1, int a2, char a3)
{
  uint64_t v6;
  double result;

  v6 = swift_allocObject(&unk_100B8AFE8, 17, 7);
  *(_BYTE *)(v6 + 16) = a3;
  sub_1006E1E7C((uint64_t)sub_1006E4E0C, v6, a1, a2);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_1006E25B4(char a1)
{
  id v2;
  char v3;

  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3 = a1;
  NSUserDefaults.set<A>(_:for:)(&v3, 0xD000000000000027, 0x8000000100A0AB00, &type metadata for Bool);

}

void sub_1006E262C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  void *v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  void **aBlock;
  uint64_t v52;
  uint64_t (*v53)(uint64_t);
  void *v54;
  void *v55;
  uint64_t v56;

  v49 = a1;
  v3 = type metadata accessor for DispatchTime(0);
  v47 = *(_QWORD *)(v3 - 8);
  v48 = v3;
  __chkstk_darwin(v3);
  v45 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v46 = (char *)&v36 - v6;
  v7 = type metadata accessor for DispatchQoS.QoSClass(0);
  v43 = *(_QWORD *)(v7 - 8);
  v44 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v39 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000A0794(0, (unint64_t *)&qword_100BC29A0, OS_dispatch_queue_ptr);
  v17 = (void *)static OS_dispatch_queue.main.getter(v16);
  v55 = sub_1006E4C0C;
  v56 = a2;
  aBlock = _NSConcreteStackBlock;
  v52 = 1107296256;
  v53 = sub_100088F7C;
  v54 = &unk_100B8AF10;
  v18 = _Block_copy(&aBlock);
  v19 = swift_retain();
  static DispatchQoS.unspecified.getter(v19);
  v50 = _swiftEmptyArrayStorage;
  sub_100086DA4((unint64_t *)&qword_100BFFA20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = v20;
  v42 = v20;
  v22 = sub_1000BA294(&qword_100BD4F10);
  v41 = v22;
  v40 = sub_100121014();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v50, v22, v40, v10, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v18);
  _Block_release(v18);

  v39 = *(_QWORD *)(v39 + 8);
  ((void (*)(char *, uint64_t))v39)(v12, v10);
  v38 = *(void (**)(char *, uint64_t))(v13 + 8);
  v23 = v37;
  v38(v15, v37);
  v24 = swift_release();
  v26 = v43;
  v25 = v44;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v43 + 104))(v9, enum case for DispatchQoS.QoSClass.default(_:), v44, v24);
  v27 = (void *)static OS_dispatch_queue.global(qos:)(v9);
  v28 = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v9, v25);
  v29 = v45;
  static DispatchTime.now()(v28);
  v30 = v46;
  + infix(_:_:)(v29);
  v31 = v48;
  v32 = *(void (**)(char *, uint64_t))(v47 + 8);
  v32(v29, v48);
  v33 = swift_allocObject(&unk_100B8AF48, 24, 7);
  *(_QWORD *)(v33 + 16) = v49;
  v55 = sub_10024A21C;
  v56 = v33;
  aBlock = _NSConcreteStackBlock;
  v52 = 1107296256;
  v53 = sub_100088F7C;
  v54 = &unk_100B8AF60;
  v34 = _Block_copy(&aBlock);
  static DispatchQoS.unspecified.getter(v35);
  v50 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v50, v41, v40, v10, v42);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v30, v15, v12, v34);
  _Block_release(v34);

  ((void (*)(char *, uint64_t))v39)(v12, v10);
  v38(v15, v23);
  v32(v30, v31);
  swift_release();
}

double sub_1006E2A24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  double result;
  _OWORD v8[2];
  uint64_t v9;

  v2 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v2);
  v4 = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(uint64_t (**)(uint64_t))(a1 + 16);
  v6 = type metadata accessor for PerformanceTestAction(0);
  swift_storeEnumTagMultiPayload(v4, v6, 5);
  swift_storeEnumTagMultiPayload(v4, v2, 17);
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  swift_retain();
  sub_1000A5EBC((uint64_t)v4, (uint64_t)v8, v5);
  sub_100021A14((uint64_t)v8, (uint64_t *)&unk_100BFFA10);
  sub_1000215BC((uint64_t)v4, type metadata accessor for MainAction);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_1006E2B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  __n128 v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  void **aBlock;
  uint64_t v55;
  uint64_t (*v56)(uint64_t);
  void *v57;
  void *v58;
  uint64_t v59;

  v52 = a1;
  v5 = type metadata accessor for DispatchTime(0);
  v50 = *(_QWORD *)(v5 - 8);
  v51 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v49 = (char *)&v39 - v9;
  v10 = type metadata accessor for DispatchQoS.QoSClass(0);
  v47 = *(_QWORD *)(v10 - 8);
  v48 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchWorkItemFlags(0);
  v46 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for DispatchQoS(0);
  v16 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_1000A0794(0, (unint64_t *)&qword_100BC29A0, OS_dispatch_queue_ptr);
  v19 = (void *)static OS_dispatch_queue.main.getter(v44);
  v20 = swift_allocObject(&unk_100B8AE80, 32, 7);
  *(_QWORD *)(v20 + 16) = a2;
  *(_QWORD *)(v20 + 24) = a3;
  v58 = sub_1006E4BF8;
  v59 = v20;
  aBlock = _NSConcreteStackBlock;
  v55 = 1107296256;
  v56 = sub_100088F7C;
  v57 = &unk_100B8AE98;
  v21 = _Block_copy(&aBlock);
  v22 = swift_retain();
  static DispatchQoS.unspecified.getter(v22);
  v53 = _swiftEmptyArrayStorage;
  sub_100086DA4((unint64_t *)&qword_100BFFA20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = v23;
  v43 = v23;
  v25 = sub_1000BA294(&qword_100BD4F10);
  v42 = v25;
  v41 = sub_100121014();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v53, v25, v41, v13, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v18, v15, v21);
  _Block_release(v21);

  v46 = *(_QWORD *)(v46 + 8);
  ((void (*)(char *, uint64_t))v46)(v15, v13);
  v40 = *(void (**)(char *, uint64_t))(v16 + 8);
  v26 = v45;
  v40(v18, v45);
  v27 = swift_release();
  v29 = v47;
  v28 = v48;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v47 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v48, v27);
  v30 = (void *)static OS_dispatch_queue.global(qos:)(v12);
  v31 = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v12, v28);
  static DispatchTime.now()(v31);
  v32 = v49;
  + infix(_:_:)(v7);
  v33 = *(void (**)(char *, uint64_t))(v50 + 8);
  v34 = v7;
  v35 = v51;
  v33(v34, v51);
  v36 = swift_allocObject(&unk_100B8AED0, 24, 7);
  *(_QWORD *)(v36 + 16) = v52;
  v58 = sub_1006E4D68;
  v59 = v36;
  aBlock = _NSConcreteStackBlock;
  v55 = 1107296256;
  v56 = sub_100088F7C;
  v57 = &unk_100B8AEE8;
  v37 = _Block_copy(&aBlock);
  static DispatchQoS.unspecified.getter(v38);
  v53 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v53, v42, v41, v13, v43);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v32, v18, v15, v37);
  _Block_release(v37);

  ((void (*)(char *, uint64_t))v46)(v15, v13);
  v40(v18, v26);
  v33(v32, v35);
  swift_release();
}

double sub_1006E2F20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  double result;
  _OWORD v10[2];
  uint64_t v11;

  v4 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v4);
  v6 = (_QWORD *)((char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(uint64_t (**)(uint64_t))(a1 + 16);
  *v6 = a2;
  v8 = type metadata accessor for PerformanceTestAction(0);
  swift_storeEnumTagMultiPayload(v6, v8, 1);
  swift_storeEnumTagMultiPayload(v6, v4, 17);
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  swift_retain();
  sub_1000A5EBC((uint64_t)v6, (uint64_t)v10, v7);
  sub_100021A14((uint64_t)v10, (uint64_t *)&unk_100BFFA10);
  sub_1000215BC((uint64_t)v6, type metadata accessor for MainAction);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_1006E3014(uint64_t a1, uint64_t a2, char a3, double a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[6];
  _BYTE v30[24];

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000A0794(0, (unint64_t *)&qword_100BC29A0, OS_dispatch_queue_ptr);
  v17 = (void *)static OS_dispatch_queue.main.getter(v16);
  v18 = swift_allocObject(&unk_100B8A778, 24, 7);
  swift_beginAccess(a2, v30, 0, 0);
  swift_weakLoadStrong(a2);
  swift_weakInit(v18 + 16);
  swift_release();
  v19 = swift_allocObject(&unk_100B8ADE0, 56, 7);
  *(_QWORD *)(v19 + 16) = v18;
  *(_BYTE *)(v19 + 24) = a3;
  *(double *)(v19 + 32) = a4;
  *(double *)(v19 + 40) = a5;
  *(_QWORD *)(v19 + 48) = a1;
  aBlock[4] = sub_1006E4B9C;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100088F7C;
  aBlock[3] = &unk_100B8ADF8;
  v20 = _Block_copy(aBlock);
  v21 = swift_retain();
  static DispatchQoS.unspecified.getter(v21);
  v28 = _swiftEmptyArrayStorage;
  sub_100086DA4((unint64_t *)&qword_100BFFA20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = v22;
  v24 = sub_1000BA294(&qword_100BD4F10);
  v25 = sub_100121014();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v24, v25, v10, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v26);
  swift_release();
  swift_release();
}

void sub_1006E328C(uint64_t a1, int a2, uint64_t a3, double a4, double a5)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t Strong;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint8_t *v33;
  _QWORD *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  uint8_t *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  __n128 v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t aBlock;
  unint64_t v70[5];
  char v71[32];

  v67 = type metadata accessor for DispatchWorkItemFlags(0);
  v65 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v66 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for DispatchTime(0);
  v15 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v53 - v19;
  v21 = type metadata accessor for Logger(0);
  v62 = *(_QWORD *)(v21 - 8);
  v63 = (void (*)(char *, uint64_t))v21;
  __chkstk_darwin(v21);
  v23 = (char *)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v71, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v58 = a3;
    v59 = v13;
    v60 = v12;
    v61 = v11;
    v56 = Strong;
    sub_1006DF4C0(a2, (uint64_t (*)(void))&static os_log_type_t.default.getter, "Started test: %{public}s", (SEL *)&selRef_startedTest_);
    v25 = objc_allocWithZone((Class)type metadata accessor for TapParameters());
    v26 = sub_1006E38A0(a4, a5);
    v27 = (void *)objc_opt_self(RPTTestRunner);
    v55 = v26;
    v28 = static Logger.automation.getter(objc_msgSend(v27, "runTestWithParameters:", v26));
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter(v29);
    v31 = os_log_type_enabled(v29, v30);
    v57 = a2;
    if (v31)
    {
      v32 = swift_slowAlloc(12, -1);
      v54 = v15;
      v33 = (uint8_t *)v32;
      v34 = (_QWORD *)swift_slowAlloc(32, -1);
      *(_DWORD *)v33 = 136446210;
      v53 = v33 + 4;
      v68 = v34;
      aBlock = 40;
      v70[0] = 0xE100000000000000;
      v35._countAndFlagsBits = Double.description.getter(a4);
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      v36._countAndFlagsBits = 44;
      v36._object = (void *)0xE100000000000000;
      String.append(_:)(v36);
      v37._countAndFlagsBits = Double.description.getter(a5);
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      v38._countAndFlagsBits = 41;
      v38._object = (void *)0xE100000000000000;
      String.append(_:)(v38);
      aBlock = sub_1000CE1C8(aBlock, v70[0], (uint64_t *)&v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v70);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Tap at %{public}s", v33, 0xCu);
      swift_arrayDestroy(v34, 1);
      swift_slowDealloc(v34, -1, -1);
      v39 = v33;
      v15 = v54;
      swift_slowDealloc(v39, -1, -1);
    }

    (*(void (**)(char *, _QWORD))(v62 + 8))(v23, v63);
    v40 = sub_1000A0794(0, (unint64_t *)&qword_100BC29A0, OS_dispatch_queue_ptr);
    v41 = (void *)static OS_dispatch_queue.main.getter(v40);
    static DispatchTime.now()(v41);
    + infix(_:_:)(v17);
    v63 = *(void (**)(char *, uint64_t))(v15 + 8);
    v42 = v64;
    v63(v17, v64);
    v43 = swift_allocObject(&unk_100B8AE30, 40, 7);
    *(_QWORD *)(v43 + 16) = v56;
    *(_BYTE *)(v43 + 24) = v57;
    *(_QWORD *)(v43 + 32) = v58;
    v70[3] = (unint64_t)sub_1006E4BD0;
    v70[4] = v43;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v70[0] = 1107296256;
    v70[1] = (unint64_t)sub_100088F7C;
    v70[2] = (unint64_t)&unk_100B8AE48;
    v44 = _Block_copy(&aBlock);
    v45 = swift_retain();
    v46 = v66;
    static DispatchQoS.unspecified.getter(v45);
    v68 = _swiftEmptyArrayStorage;
    sub_100086DA4((unint64_t *)&qword_100BFFA20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v48 = v47;
    v49 = sub_1000BA294(&qword_100BD4F10);
    v50 = sub_100121014();
    v51 = v61;
    v52 = v67;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v68, v49, v50, v67, v48);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v20, v46, v51, v44);
    _Block_release(v44);

    swift_release();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v51, v52);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v46, v60);
    v63(v20, v42);
    swift_release();
  }
}

uint64_t sub_1006E37E4(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  sub_1006DF4C0(a2, (uint64_t (*)(void))&static os_log_type_t.default.getter, "Finished test: %{public}s", (SEL *)&selRef_finishedTest_);
  return swift_continuation_throwingResume(a3);
}

uint64_t sub_1006E382C()
{
  uint64_t v0;

  sub_10009884C();
  swift_release();
  swift_release();
  sub_1000C22E0();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 80));
  return v0;
}

uint64_t sub_1006E3860()
{
  uint64_t v0;

  sub_1006E382C();
  return swift_deallocClassInstance(v0, 121, 7);
}

uint64_t type metadata accessor for LegacyPerformanceTestRunner()
{
  return objc_opt_self(_TtC7Weather27LegacyPerformanceTestRunner);
}

id sub_1006E38A0(double a1, double a2)
{
  char *v2;
  objc_class *ObjectType;
  char *v6;
  char *v7;
  double *v8;
  objc_super v10;

  ObjectType = (objc_class *)swift_getObjectType(v2);
  v6 = &v2[OBJC_IVAR____TtC7WeatherP33_4025464B1BDEC98D863ED8B5370ABB4913TapParameters_completionHandler];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v7 = &v2[OBJC_IVAR____TtC7WeatherP33_4025464B1BDEC98D863ED8B5370ABB4913TapParameters_testName];
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  v8 = (double *)&v2[OBJC_IVAR____TtC7WeatherP33_4025464B1BDEC98D863ED8B5370ABB4913TapParameters_point];
  *v8 = a1;
  v8[1] = a2;
  v10.receiver = v2;
  v10.super_class = ObjectType;
  return objc_msgSendSuper2(&v10, "init");
}

uint64_t sub_1006E3928()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7WeatherP33_4025464B1BDEC98D863ED8B5370ABB4913TapParameters_completionHandler);
  sub_1000FDC6C(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC7WeatherP33_4025464B1BDEC98D863ED8B5370ABB4913TapParameters_completionHandler + 8));
  return v1;
}

void (*sub_1006E3A30())(void *a1)
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(&unk_100B8A638, 24, 7);
  swift_unknownObjectWeakInit(v1 + 16, v0);
  return sub_1006E44D8;
}

void sub_1006E3A78(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Strong;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  _BYTE v15[24];

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v15, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v9 = (void *)Strong;
    objc_msgSend(a1, "pointerOrFingerTap:", *(double *)(Strong + OBJC_IVAR____TtC7WeatherP33_4025464B1BDEC98D863ED8B5370ABB4913TapParameters_point), *(double *)(Strong + OBJC_IVAR____TtC7WeatherP33_4025464B1BDEC98D863ED8B5370ABB4913TapParameters_point + 8));

  }
  else
  {
    v10 = static Logger.automation.getter();
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failed to run tap due to instance deallocated", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

void sub_1006E3BD0()
{
  _swift_stdlib_reportUnimplementedInitializer("Weather.TapParameters", 21, "init()", 6, 0);
  __break(1u);
}

uint64_t type metadata accessor for TapParameters()
{
  return objc_opt_self(_TtC7WeatherP33_4025464B1BDEC98D863ED8B5370ABB4913TapParameters);
}

id sub_1006E3C54(double a1, double a2, double a3, double a4)
{
  char *v4;
  objc_class *ObjectType;
  char *v10;
  char *v11;
  double *v12;
  objc_super v14;

  ObjectType = (objc_class *)swift_getObjectType(v4);
  v10 = &v4[OBJC_IVAR____TtC7WeatherP33_4025464B1BDEC98D863ED8B5370ABB4920FastScrollParameters_completionHandler];
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  v11 = &v4[OBJC_IVAR____TtC7WeatherP33_4025464B1BDEC98D863ED8B5370ABB4920FastScrollParameters_testName];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  v12 = (double *)&v4[OBJC_IVAR____TtC7WeatherP33_4025464B1BDEC98D863ED8B5370ABB4920FastScrollParameters_point];
  *v12 = a1;
  v12[1] = a2;
  *(double *)&v4[OBJC_IVAR____TtC7WeatherP33_4025464B1BDEC98D863ED8B5370ABB4920FastScrollParameters_distance] = a3;
  *(double *)&v4[OBJC_IVAR____TtC7WeatherP33_4025464B1BDEC98D863ED8B5370ABB4920FastScrollParameters_duration] = a4;
  v14.receiver = v4;
  v14.super_class = ObjectType;
  return objc_msgSendSuper2(&v14, "init");
}

id sub_1006E3D04(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = sub_1000DB364(a1, a2, a3);
  if (!v4)
    return sub_1000996B0(0);
  v23 = v4;
  v24 = v5;
  v22 = v3;
  v12 = sub_1000D0AE4(v4, v5, v6, v7, v8, v9, v10, v11, (uint64_t)_NSConcreteStackBlock);
  sub_1000C1988((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19, v21, 1107296256, (uint64_t)sub_100121D84, v22, v23, v24);
  return sub_1000996B0(v12);
}

uint64_t sub_1006E3D64()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC7WeatherP33_4025464B1BDEC98D863ED8B5370ABB4920FastScrollParameters_completionHandler);
  sub_1000FDC6C(v1, *(_QWORD *)(v0+ OBJC_IVAR____TtC7WeatherP33_4025464B1BDEC98D863ED8B5370ABB4920FastScrollParameters_completionHandler+ 8));
  return v1;
}

uint64_t sub_1006E3E30(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (uint64_t *)(v3 + *a3);
  v5 = *v4;
  v6 = v4[1];
  *v4 = a1;
  v4[1] = a2;
  return sub_1000BF8D0(v5, v6);
}

id sub_1006E3E58(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  NSString v4;

  sub_1006E3EA0(a3);
  if (v3)
  {
    v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = 0;
  }
  return v4;
}

uint64_t sub_1006E3EA0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *a1);
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

void sub_1006E3EE0(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  if (a3)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    v8 = v7;
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  v9 = a1;
  sub_1006E3F48(v6, v8, a4);
  sub_1000D9868(v9);
}

double sub_1006E3F48(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  double result;

  v4 = (_QWORD *)(v3 + *a3);
  v5 = v4[1];
  *v4 = a1;
  v4[1] = a2;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

void (*sub_1006E3F84())(void *a1)
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(&unk_100B8A598, 24, 7);
  swift_unknownObjectWeakInit(v1 + 16, v0);
  return sub_1006E429C;
}

void sub_1006E3FCC(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Strong;
  char *v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  _BYTE v17[24];

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v17, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v9 = (char *)Strong;
    v10 = (double *)(Strong + OBJC_IVAR____TtC7WeatherP33_4025464B1BDEC98D863ED8B5370ABB4920FastScrollParameters_point);
    objc_msgSend(a1, "pointerOrFingerTapDown:", *(double *)(Strong + OBJC_IVAR____TtC7WeatherP33_4025464B1BDEC98D863ED8B5370ABB4920FastScrollParameters_point), *(double *)(Strong + OBJC_IVAR____TtC7WeatherP33_4025464B1BDEC98D863ED8B5370ABB4920FastScrollParameters_point + 8));
    v11 = OBJC_IVAR____TtC7WeatherP33_4025464B1BDEC98D863ED8B5370ABB4920FastScrollParameters_distance;
    objc_msgSend(a1, "pointerOrFingerMoveToPoint:duration:", *v10, v10[1]- *(double *)&v9[OBJC_IVAR____TtC7WeatherP33_4025464B1BDEC98D863ED8B5370ABB4920FastScrollParameters_distance], *(double *)&v9[OBJC_IVAR____TtC7WeatherP33_4025464B1BDEC98D863ED8B5370ABB4920FastScrollParameters_duration]);
    objc_msgSend(a1, "pointerOrFingerTapUp:", *v10, v10[1] - *(double *)&v9[v11]);

  }
  else
  {
    v12 = static Logger.automation.getter();
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Failed to run scroll due to instance deallocated", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

id sub_1006E4170(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = sub_1000DB364(a1, a2, a3);
  v23 = v4;
  v21 = v3;
  v11 = sub_1000D0AE4(v22, v4, v5, v6, v7, v8, v9, v10, (uint64_t)_NSConcreteStackBlock);
  sub_1000C1988((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18, v20, 1107296256, (uint64_t)sub_1008A98DC, v21, v22, v23);
  return sub_1000996B0(v11);
}

void sub_1006E41C4()
{
  _swift_stdlib_reportUnimplementedInitializer("Weather.FastScrollParameters", 28, "init()", 6, 0);
  __break(1u);
}

double sub_1006E4224(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  double result;

  sub_1000BF8D0(*(_QWORD *)(a1 + *a3), *(_QWORD *)(a1 + *a3 + 8));
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t type metadata accessor for FastScrollParameters()
{
  return objc_opt_self(_TtC7WeatherP33_4025464B1BDEC98D863ED8B5370ABB4920FastScrollParameters);
}

uint64_t sub_1006E4280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_unknownObjectWeakDestroy(v0 + 16);
  v1 = sub_1000BB2E4();
  return swift_deallocObject(v1, v2, v3);
}

void sub_1006E429C(void *a1)
{
  uint64_t v1;

  sub_1006E3FCC(a1, v1);
}

id sub_1006E42A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13)
{
  void *v13;
  NSString v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v33;
  uint64_t v34;

  if (!a2)
  {
    v22 = 0;
    if (a4)
      goto LABEL_3;
LABEL_5:
    v23 = 0;
    goto LABEL_6;
  }
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!a4)
    goto LABEL_5;
LABEL_3:
  v34 = a5;
  v23 = sub_1000D0AE4(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)_NSConcreteStackBlock);
  sub_1000C1988((uint64_t)v23, v24, v25, v26, v27, v28, v29, v30, v33, 1107296256, (uint64_t)sub_100121D84, (uint64_t)&unk_100B8A7E0, a4, v34);
LABEL_6:
  v31 = objc_msgSend(v13, "initWithTestName:scrollBounds:amplitude:direction:completionHandler:", v22, a3, v23, a9, a10, a11, a12, a13);
  _Block_release(v23);

  return v31;
}

id sub_1006E43B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  void *v12;
  void *v13;
  NSString v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v33;
  uint64_t v34;

  v13 = v12;
  if (!a2)
  {
    v22 = 0;
    if (a5)
      goto LABEL_3;
LABEL_5:
    v23 = 0;
    goto LABEL_6;
  }
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!a5)
    goto LABEL_5;
LABEL_3:
  v34 = a6;
  v23 = sub_1000D0AE4(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)_NSConcreteStackBlock);
  sub_1000C1988((uint64_t)v23, v24, v25, v26, v27, v28, v29, v30, v33, 1107296256, (uint64_t)sub_100121D84, (uint64_t)&unk_100B8ABA0, a5, v34);
LABEL_6:
  v31 = objc_msgSend(v13, "initWithTestName:scrollingBounds:swipeCount:direction:completionHandler:", v22, a3, a4, v23, a9, a10, a11, a12);
  _Block_release(v23);

  return v31;
}

uint64_t sub_1006E44D0()
{
  uint64_t v0;

  return sub_10081C534(*(_QWORD *)(v0 + 16));
}

void sub_1006E44D8(void *a1)
{
  uint64_t v1;

  sub_1006E3A78(a1, v1);
}

uint64_t sub_1006E44E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  _Block_release(*(const void **)(v0 + 16));
  v1 = sub_1000BB2E4();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1006E44FC(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v8 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  v6 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = sub_10068EF0C;
  return v8(a1);
}

uint64_t sub_1006E4560()
{
  return sub_1006E4A38((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 49);
}

double sub_1006E4578()
{
  uint64_t v0;

  return sub_1006DFD48(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(_BYTE *)(v0 + 25), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
}

uint64_t sub_1006E4590()
{
  uint64_t v0;

  return sub_100099AB0(v0, 17);
}

void sub_1006E459C()
{
  uint64_t v0;

  sub_1006E25B4(*(_BYTE *)(v0 + 16));
}

uint64_t sub_1006E45B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10009C0B4();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 48))
    sub_1000C22E0();
  v1 = sub_1000BF274();
  return swift_deallocObject(v1, v2, v3);
}

void sub_1006E45E0()
{
  uint64_t v0;

  sub_1006DFA0C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_1006E45F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_weakDestroy(v0 + 16);
  v1 = sub_1000BB2E4();
  return swift_deallocObject(v1, v2, v3);
}

void sub_1006E4614()
{
  uint64_t v0;
  unsigned __int8 v1;
  void (*v2)(__n128);

  v0 = sub_1000DAD60();
  sub_1006E0DDC(v0, v1, v2);
}

void sub_1006E462C(uint64_t a1, uint64_t a2, void *a3)
{
  sub_1006E4644(a1, a2, a3, (SEL *)&selRef_startedTest_);
}

void sub_1006E4638(uint64_t a1, uint64_t a2, void *a3)
{
  sub_1006E4644(a1, a2, a3, (SEL *)&selRef_finishedTest_);
}

void sub_1006E4644(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  NSString v6;

  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(a3, *a4, v6, swift_bridgeObjectRelease().n128_f64[0]);
  sub_1000D9868(v6);
}

id sub_1006E4690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSString v9;
  id v10;

  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(a5, "newWithTestName:parameters:completionHandler:", v9, a3, a4, swift_bridgeObjectRelease(a2).n128_f64[0]);

  return v10;
}

id sub_1006E4700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSString v8;
  id v9;

  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(a5, "newWithTestName:parameters:completionHandler:", v8, a3, a4);

  return v9;
}

double sub_1006E475C()
{
  uint64_t v0;

  return sub_1006E016C(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(_BYTE *)(v0 + 25));
}

uint64_t sub_1006E476C()
{
  uint64_t v0;

  return sub_100099AB0(v0, 17);
}

double sub_1006E477C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_1000DAD60();
  return sub_1006E0660(v0, v1, v2, v3, (uint64_t)&unk_100B8A8E0, (uint64_t)sub_1006E47B0, (void (*)(uint64_t, uint64_t, uint64_t, double))sub_1006DFDD4);
}

double sub_1006E47B8()
{
  uint64_t v0;

  return sub_1006E0A50(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(_BYTE *)(v0 + 25));
}

uint64_t sub_1006E47C8()
{
  uint64_t v0;

  return sub_100099AB0(v0, 17);
}

double sub_1006E47D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_1000DAD60();
  return sub_1006E0660(v0, v1, v2, v3, (uint64_t)&unk_100B8AA20, (uint64_t)sub_1006E47B0, (void (*)(uint64_t, uint64_t, uint64_t, double))sub_1006E06E4);
}

uint64_t sub_1006E480C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(v0 + 16))
    sub_10009884C();
  v1 = sub_10009DB58();
  return swift_deallocObject(v1, v2, v3);
}

void sub_1006E482C()
{
  uint64_t v0;
  void (*v1)(void);

  v1 = *(void (**)(void))(v0 + 16);
  if (v1)
    v1();
  sub_10004A298();
}

uint64_t sub_1006E4850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release();
  if (*(_QWORD *)(v0 + 48))
    sub_1000C22E0();
  v1 = sub_1000BF274();
  return swift_deallocObject(v1, v2, v3);
}

double sub_1006E4888()
{
  uint64_t v0;

  return sub_1006E0AD0(*(void **)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_1006E48A4()
{
  uint64_t v0;

  sub_10009884C();
  if (*(_QWORD *)(v0 + 40))
    swift_release();
  return swift_deallocObject(v0, 56, 7);
}

double sub_1006E48DC()
{
  uint64_t v0;

  return sub_1006E0C48(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_1006E48F4()
{
  uint64_t v0;

  sub_10009C0B4();
  if (*(_QWORD *)(v0 + 32))
    swift_release();
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1006E4928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  sub_1000C22E0();
  v1 = sub_1000BF274();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1006E4948()
{
  uint64_t v0;

  sub_10009C0B4();
  return swift_deallocObject(v0, 25, 7);
}

void sub_1006E4968()
{
  uint64_t v0;

  sub_1006DF4C0(*(_BYTE *)(v0 + 24), (uint64_t (*)(void))&static os_log_type_t.default.getter, "Finished test: %{public}s", (SEL *)&selRef_finishedTest_);
  sub_10004A298();
}

uint64_t sub_1006E49A4()
{
  uint64_t v0;

  return sub_1006E02D8(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1006E49C0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_BYTE *)(v0 + 24);
  v3 = (_QWORD *)swift_task_alloc(dword_100BFFA84);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100445EA4;
  v4 = sub_1000C6F3C();
  return sub_1006E0E68(v4, v5, v2);
}

uint64_t sub_1006E4A20()
{
  return sub_1006E4A38((void (*)(_QWORD))&_swift_unknownObjectRelease, (void (*)(_QWORD))&_swift_release, 48);
}

uint64_t sub_1006E4A38(void (*a1)(_QWORD), void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v3;

  a1(*(_QWORD *)(v3 + 16));
  a2(*(_QWORD *)(v3 + 40));
  return swift_deallocObject(v3, a3, 7);
}

uint64_t sub_1006E4A80()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v1 = (_QWORD *)swift_task_alloc(dword_100BFFA94);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10068EF0C;
  v2 = sub_1000C6F3C();
  return v3(v2);
}

uint64_t sub_1006E4AFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10009884C();
  v0 = sub_10009DB58();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1006E4B14()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v1 = (_QWORD *)swift_task_alloc(dword_100BFC614);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100446958;
  v2 = sub_1000C6F3C();
  return v3(v2);
}

uint64_t sub_1006E4B7C()
{
  uint64_t v0;

  sub_10009C0B4();
  return swift_deallocObject(v0, 56, 7);
}

void sub_1006E4B9C()
{
  uint64_t v0;

  sub_1006E328C(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(_QWORD *)(v0 + 48), *(double *)(v0 + 32), *(double *)(v0 + 40));
}

uint64_t sub_1006E4BB0()
{
  uint64_t v0;

  sub_10009C0B4();
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1006E4BD0()
{
  uint64_t v0;

  return sub_1006E37E4(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1006E4BE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10009C0B4();
  v0 = sub_10009DB58();
  return swift_deallocObject(v0, v1, v2);
}

double sub_1006E4BF8()
{
  uint64_t v0;

  return sub_1006E2F20(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1006E4C00()
{
  uint64_t v0;

  return sub_100099AB0(v0, 24);
}

double sub_1006E4C0C()
{
  uint64_t v0;

  return sub_1006E2A24(v0);
}

uint64_t sub_1006E4C14()
{
  uint64_t v0;

  return sub_100099AB0(v0, 24);
}

uint64_t sub_1006E4C20()
{
  uint64_t v0;

  sub_10009C0B4();
  return swift_deallocObject(v0, 26, 7);
}

double sub_1006E4C40()
{
  uint64_t v0;

  return sub_1006E2550(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(_BYTE *)(v0 + 25));
}

uint64_t sub_1006E4C50()
{
  uint64_t v0;

  return sub_100099AB0(v0, 17);
}

uint64_t sub_1006E4C5C()
{
  uint64_t v0;

  return sub_1006E21C8(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t storeEnumTagSinglePayload for LegacyPerformanceTestRunner.LegacyPerformanceTestError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1006E4CA8 + 4 * byte_1009C0AF1[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1006E4CC8 + 4 * byte_1009C0AF6[v4]))();
}

_BYTE *sub_1006E4CA8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1006E4CC8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1006E4CD0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1006E4CD8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1006E4CE0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1006E4CE8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LegacyPerformanceTestRunner.LegacyPerformanceTestError()
{
  return &type metadata for LegacyPerformanceTestRunner.LegacyPerformanceTestError;
}

unint64_t sub_1006E4D08()
{
  unint64_t result;

  result = qword_100BFFAC8;
  if (!qword_100BFFAC8)
  {
    result = swift_getWitnessTable(&unk_1009C0C6C, &type metadata for LegacyPerformanceTestRunner.LegacyPerformanceTestError);
    atomic_store(result, (unint64_t *)&qword_100BFFAC8);
  }
  return result;
}

id sub_1006E4E70()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC7Weather47DebugNotificationDeliveryScheduleViewController____lazy_storage___dateFormatter;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC7Weather47DebugNotificationDeliveryScheduleViewController____lazy_storage___dateFormatter);
  if (v2)
  {
    v3 = *(id *)(v0
               + OBJC_IVAR____TtC7Weather47DebugNotificationDeliveryScheduleViewController____lazy_storage___dateFormatter);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
    objc_msgSend(v4, "setDateStyle:", 1);
    objc_msgSend(v4, "setTimeStyle:", 1);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

uint64_t sub_1006E4F08()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  objc_super v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_1000986AC();
  v23 = v2;
  v24 = v3;
  v5 = v4;
  v6 = type metadata accessor for PrecipitationNotification(0);
  v18 = *(_QWORD *)(v6 - 8);
  sub_10009D98C();
  __chkstk_darwin(v7);
  sub_100094EC4();
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Weather47DebugNotificationDeliveryScheduleViewController____lazy_storage___dateFormatter] = 0;
  v8 = &v0[OBJC_IVAR____TtC7Weather47DebugNotificationDeliveryScheduleViewController_deliverySchedule];
  v9 = type metadata accessor for DeliveryScheduleEntity(0);
  v19 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v8, v5, v9);
  v10 = type metadata accessor for JSONDecoder(0);
  v11 = sub_1000860C4(v10);
  v12 = v0;
  JSONDecoder.init()();
  ((void (*)(void))DeliveryScheduleEntity.notification.getter)();
  dispatch thunk of Column.value.getter(&v21);
  sub_10009880C();
  v13 = v22;
  if (v22 >> 60 == 15)
  {
    __break(1u);
    result = swift_unexpectedError(v11, "Weather/DebugNotificationDeliveryScheduleViewController.swift", 61, 1, 30);
    __break(1u);
  }
  else
  {
    v14 = v21;
    v15 = sub_100051B90(&qword_100BFFB28, (uint64_t (*)(uint64_t))&type metadata accessor for PrecipitationNotification, (uint64_t)&protocol conformance descriptor for PrecipitationNotification);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v6, v14, v13, v6, v15);
    swift_release();
    sub_1002BD0D4(v14, v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(&v12[OBJC_IVAR____TtC7Weather47DebugNotificationDeliveryScheduleViewController_notification], v1, v6);

    v20.receiver = v12;
    v20.super_class = (Class)sub_1000D9224();
    v16 = objc_msgSendSuper2(&v20, "initWithStyle:", 2);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v5, v9);
    return (uint64_t)v16;
  }
  return result;
}

void sub_1006E50D4()
{
  char *v0;

  *(_QWORD *)&v0[OBJC_IVAR____TtC7Weather47DebugNotificationDeliveryScheduleViewController____lazy_storage___dateFormatter] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x706F2D6F6ELL, 0xE500000000000000, "Weather/DebugNotificationDeliveryScheduleViewController.swift", 61, 2);
  __break(1u);
}

void sub_1006E514C()
{
  void *v0;
  uint64_t v1;
  id v2;
  void *v3;
  unint64_t v4;
  NSString v5;
  objc_super v6;

  v6.receiver = v0;
  v6.super_class = (Class)sub_1000D9224();
  objc_msgSendSuper2(&v6, "viewDidLoad");
  v2 = objc_msgSend(v0, "tableView");
  if (v2)
  {
    v3 = v2;
    v4 = sub_1003E9A38();
    swift_getObjCClassFromMetadata(v4);
    v5 = sub_1000C2938();
    objc_msgSend(v3, "registerClass:forCellReuseIdentifier:", v1, v5);

    sub_1001207F8(0xD000000000000011, 0x8000000100A115B0, v0);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1006E5240(uint64_t a1, unint64_t a2)
{
  if (a2 > 2)
    return 0;
  else
    return qword_1009C0CF0[a2];
}

unint64_t sub_1006E5278(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 0x6163696669746F4ELL;
  v3 = 0x656C756465686353;
  if (a2)
    v3 = 0;
  if (a2 != 1)
    v2 = v3;
  if (a2 == 2)
    return 0xD000000000000012;
  else
    return v2;
}

id sub_1006E532C()
{
  void *v0;
  NSString v1;
  Class isa;
  id v3;
  __n128 v4;
  __n128 v5;
  __n128 v6;

  v1 = sub_1000C2938();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v3 = objc_msgSend(v0, "dequeueReusableCellWithIdentifier:forIndexPath:", v1, isa);

  if (IndexPath.section.getter(v4))
  {
    if (IndexPath.section.getter(v5) == 1)
    {
      IndexPath.row.getter(v6);
      sub_1006E5870();
    }
    else if (IndexPath.section.getter(v6) == 2)
    {
      sub_1006E5C4C();
    }
  }
  else
  {
    IndexPath.row.getter(v5);
    sub_1006E54B0();
  }
  return v3;
}

void sub_1006E54B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  char v19;
  void *v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  id v22;
  id v23;
  void *v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  id v31;
  _QWORD *v32;
  _QWORD v34[5];

  sub_1000986AC();
  v2 = v1;
  v4 = v3;
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_10009D98C();
  __chkstk_darwin(v5);
  v7 = (_QWORD *)((char *)&v34[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  v10 = (_QWORD *)((char *)&v34[-1] - v9);
  __chkstk_darwin(v11);
  v13 = (_QWORD *)((char *)&v34[-1] - v12);
  v14 = sub_1000B46F8();
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  sub_1000BBF38();
  switch(v2)
  {
    case 0:
      v16 = sub_1000BA734();
      v17 = DeliveryScheduleEntity.id.getter(v16);
      goto LABEL_8;
    case 1:
      v28 = sub_1000BA734();
      v17 = DeliveryScheduleEntity.state.getter(v28);
LABEL_8:
      v34[0] = v17;
      v29 = sub_1000BA294(&qword_100BE8E48);
      sub_1004E3F84();
      v27 = dispatch thunk of CustomStringConvertible.description.getter(v29);
      swift_release();
      break;
    case 2:
      sub_1000BA734();
      v18 = sub_1000CD984();
      DeliveryScheduleEntity.created.getter();
      dispatch thunk of Column.value.getter(v13);
      sub_10009880C();
      sub_100098778();
      sub_1000B4744((uint64_t)v13);
      if (v19)
      {
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
        JUMPOUT(0x1006E585CLL);
      }
      v20 = v13;
      Date._bridgeToObjectiveC()();
      sub_1000DF8F4();
      sub_1000BDD1C((uint64_t)v13, v21);
      v22 = sub_1000CC90C(v18, "stringFromDate:");
      goto LABEL_11;
    case 3:
      sub_1000BA734();
      v18 = sub_1000CD984();
      DeliveryScheduleEntity.modified.getter();
      dispatch thunk of Column.value.getter(v10);
      sub_10009880C();
      sub_100098778();
      sub_1000B4744((uint64_t)v10);
      if (v19)
        goto LABEL_16;
      v20 = v10;
      Date._bridgeToObjectiveC()();
      sub_1000DF8F4();
      sub_1000BDD1C((uint64_t)v10, v30);
      v22 = sub_1000CC90C(v18, "stringFromDate:");
LABEL_11:
      v31 = v22;

      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      break;
    case 4:
      sub_1000BA734();
      v23 = sub_1000CD984();
      DeliveryScheduleEntity.date.getter();
      dispatch thunk of Column.value.getter(v7);
      sub_10009880C();
      sub_100098778();
      sub_1000B4744((uint64_t)v7);
      if (v19)
        goto LABEL_15;
      v24 = v7;
      Date._bridgeToObjectiveC()();
      sub_1000DF8F4();
      sub_1000BDD1C((uint64_t)v7, v25);
      v26 = sub_1000CC90C(v23, "stringFromDate:");

      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      break;
    default:
      goto LABEL_13;
  }
  UIListContentConfiguration.secondaryText.setter(v27);
LABEL_13:
  v34[3] = v14;
  v34[4] = &protocol witness table for UIListContentConfiguration;
  v32 = sub_10005F164(v34);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v15 + 16))(v32, v0, v14);
  UITableViewCell.contentConfiguration.setter(v34);
  objc_msgSend(v4, "setSelectionStyle:", 0);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v0, v14);
  sub_100098640();
}

void sub_1006E5870()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  Class isa;
  id v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[5];

  sub_1000986AC();
  v3 = v2;
  v4 = sub_100098778();
  v32 = *(_QWORD *)(v4 - 8);
  v33 = v4;
  sub_10009D98C();
  __chkstk_darwin(v5);
  v6 = sub_1000C4668();
  v7 = type metadata accessor for ForecastSummary.Intensity(v6);
  v31 = *(_QWORD *)(v7 - 8);
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_100098728();
  v11 = v10 - v9;
  v12 = type metadata accessor for PrecipitationType(0);
  v34 = *(_QWORD *)(v12 - 8);
  sub_10009D98C();
  __chkstk_darwin(v13);
  sub_100098728();
  v16 = v15 - v14;
  v17 = type metadata accessor for PrecipitationNotification.Kind(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  sub_100098728();
  v21 = v20 - v19;
  v22 = sub_1000B46F8();
  v35 = *(_QWORD *)(v22 - 8);
  v36 = v22;
  sub_10009D98C();
  __chkstk_darwin(v23);
  sub_1000BBF38();
  switch(v3)
  {
    case 0:
      v24 = sub_1000BA734();
      v25 = PrecipitationNotification.identifier.getter(v24);
      goto LABEL_10;
    case 1:
      sub_1000BA734();
      sub_1000D13FC();
      PrecipitationNotification.kind.getter();
      _print_unlocked<A, B>(_:_:)(v21, v37, v17, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v21, v17);
      goto LABEL_8;
    case 2:
      sub_1000BA734();
      sub_1000D13FC();
      PrecipitationNotification.starting.getter();
      goto LABEL_6;
    case 3:
      sub_1000BA734();
      sub_1000D13FC();
      PrecipitationNotification.stopping.getter();
LABEL_6:
      _print_unlocked<A, B>(_:_:)(v16, v37, v12, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v16, v12);
      goto LABEL_8;
    case 4:
      sub_1000BA734();
      sub_1000D13FC();
      PrecipitationNotification.intensity.getter();
      _print_unlocked<A, B>(_:_:)(v11, v37, v7, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v11, v7);
LABEL_8:
      v25 = v37[0];
      goto LABEL_10;
    case 5:
      sub_1000BA734();
      v26 = sub_1006E4E70();
      PrecipitationNotification.date.getter();
      isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v1, v33);
      v28 = sub_1000CC90C(v26, "stringFromDate:");

      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
LABEL_10:
      UIListContentConfiguration.secondaryText.setter(v25);
      break;
    default:
      break;
  }
  v37[3] = v36;
  v37[4] = &protocol witness table for UIListContentConfiguration;
  v29 = sub_10005F164(v37);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v35 + 16))(v29, v0, v36);
  v30 = UITableViewCell.contentConfiguration.setter(v37);
  sub_100098FF8(v30, "setSelectionStyle:");
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v0, v36);
  sub_100098640();
}

void sub_1006E5C4C()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t HourForecast;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __n128 v20;
  __n128 v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[6];

  sub_1000986AC();
  type metadata accessor for String.Encoding(0, v1);
  sub_10009D98C();
  __chkstk_darwin(v2);
  sub_100094EC4();
  v3 = sub_1000B46F8();
  v26 = *(_QWORD *)(v3 - 8);
  v27 = v3;
  sub_10009D98C();
  __chkstk_darwin(v4);
  sub_100098728();
  v7 = v6 - v5;
  HourForecast = type metadata accessor for NextHourForecast(0);
  __chkstk_darwin(HourForecast);
  v9 = sub_1000C4668();
  type metadata accessor for JSONEncoder.OutputFormatting(v9);
  sub_10009D98C();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = v12 - v11;
  v14 = type metadata accessor for JSONEncoder(0);
  sub_1000860C4(v14);
  JSONEncoder.init()();
  static JSONEncoder.OutputFormatting.prettyPrinted.getter();
  v15 = dispatch thunk of JSONEncoder.outputFormatting.setter(v13);
  PrecipitationNotification.forecast.getter(v15);
  v16 = sub_100051B90(&qword_100BFFB20, (uint64_t (*)(uint64_t))&type metadata accessor for NextHourForecast, (uint64_t)&protocol conformance descriptor for NextHourForecast);
  v17 = dispatch thunk of JSONEncoder.encode<A>(_:)(v0, HourForecast, v16);
  v19 = v18;
  sub_1000DA170();
  static UIListContentConfiguration.cell()(v20);
  static String.Encoding.utf8.getter(v21);
  v22 = String.init(data:encoding:)(v17);
  UIListContentConfiguration.text.setter(v22);
  v28[3] = v27;
  v28[4] = &protocol witness table for UIListContentConfiguration;
  v23 = sub_10005F164(v28);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v26 + 16))(v23, v7, v27);
  v24 = UITableViewCell.contentConfiguration.setter(v28);
  sub_100098FF8(v24, "setSelectionStyle:");
  sub_10021D04C(v17, v19);
  v25 = swift_release();
  (*(void (**)(uint64_t, uint64_t, __n128))(v26 + 8))(v7, v27, v25);
  sub_100098640();
}

void sub_1006E5E48()
{
  _swift_stdlib_reportUnimplementedInitializer("Weather.DebugNotificationDeliveryScheduleViewController", 55, "init(style:)", 12, 0);
  __break(1u);
}

void sub_1006E5E80()
{
  _swift_stdlib_reportUnimplementedInitializer("Weather.DebugNotificationDeliveryScheduleViewController", 55, "init(nibName:bundle:)", 21, 0);
  __break(1u);
}

id sub_1006E5ED0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)sub_1000D9224();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DebugNotificationDeliveryScheduleViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_100BFFB10;
  if (!qword_100BFFB10)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DebugNotificationDeliveryScheduleViewController);
  return result;
}

uint64_t sub_1006E5F90(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for DeliveryScheduleEntity(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for PrecipitationNotification(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = "\b";
      result = swift_updateClassMetadata2(a1, 256, 3, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

_QWORD *sub_1006E6020(char *a1, char *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  _QWORD *v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  char *v49;
  int *v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  char *v66;
  int *v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t, uint64_t);
  id v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  int *v97;
  int *v98;
  char *v99;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v14 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v6 = type metadata accessor for Location.Identifier(0);
    v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    v8 = (int *)type metadata accessor for LocationViewModel(0);
    v9 = v8[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&a2[v9], 1, v6))
    {
      v12 = sub_1000BA294(&qword_100BCD680);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v7(v10, v11, v6);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v6);
    }
    v15 = v8[6];
    v16 = &a1[v15];
    v17 = &a2[v15];
    v18 = *(_QWORD *)&a2[v15 + 8];
    *(_QWORD *)v16 = *(_QWORD *)&a2[v15];
    *((_QWORD *)v16 + 1) = v18;
    v19 = *(_QWORD *)&a2[v15 + 16];
    v20 = *(_QWORD *)&a2[v15 + 24];
    v21 = *(_QWORD *)&a2[v15 + 32];
    v22 = *(_QWORD *)&a2[v15 + 40];
    v23 = a2[v15 + 48];
    swift_bridgeObjectRetain();
    sub_100176D88(v19, v20, v21, v22, v23);
    *((_QWORD *)v16 + 2) = v19;
    *((_QWORD *)v16 + 3) = v20;
    *((_QWORD *)v16 + 4) = v21;
    *((_QWORD *)v16 + 5) = v22;
    v16[48] = v23;
    v24 = *((_QWORD *)v17 + 8);
    *((_QWORD *)v16 + 7) = *((_QWORD *)v17 + 7);
    *((_QWORD *)v16 + 8) = v24;
    v25 = *((_QWORD *)v17 + 10);
    *((_QWORD *)v16 + 9) = *((_QWORD *)v17 + 9);
    *((_QWORD *)v16 + 10) = v25;
    v26 = *((_QWORD *)v17 + 12);
    *((_QWORD *)v16 + 11) = *((_QWORD *)v17 + 11);
    *((_QWORD *)v16 + 12) = v26;
    v27 = *((_QWORD *)v17 + 14);
    *((_QWORD *)v16 + 13) = *((_QWORD *)v17 + 13);
    *((_QWORD *)v16 + 14) = v27;
    v28 = *((_QWORD *)v17 + 16);
    *((_QWORD *)v16 + 15) = *((_QWORD *)v17 + 15);
    *((_QWORD *)v16 + 16) = v28;
    v16[136] = v17[136];
    *(_WORD *)(v16 + 137) = *(_WORD *)(v17 + 137);
    v29 = *((_QWORD *)v17 + 19);
    *((_QWORD *)v16 + 18) = *((_QWORD *)v17 + 18);
    *((_QWORD *)v16 + 19) = v29;
    v16[160] = v17[160];
    v16[161] = v17[161];
    *(_QWORD *)&a1[v8[7]] = *(_QWORD *)&a2[v8[7]];
    *(_QWORD *)&a1[v8[8]] = *(_QWORD *)&a2[v8[8]];
    v98 = v8;
    v99 = a2;
    v30 = v8[9];
    v31 = a1;
    v32 = &a1[v30];
    v33 = &a2[v30];
    v34 = type metadata accessor for LocationFooterViewModel(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v35 = (int *)v34;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v33, 1, v34))
    {
      v36 = sub_1000BA294(&qword_100BCD690);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      v38 = v8;
      v37 = v99;
      v14 = v31;
    }
    else
    {
      *v32 = *v33;
      *(_WORD *)(v32 + 1) = *(_WORD *)(v33 + 1);
      v39 = *((_QWORD *)v33 + 2);
      *((_QWORD *)v32 + 1) = *((_QWORD *)v33 + 1);
      *((_QWORD *)v32 + 2) = v39;
      v40 = *(int *)(v34 + 32);
      v41 = v32;
      v42 = &v32[v40];
      v43 = &v33[v40];
      v44 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v43, 1, v44))
      {
        v45 = sub_1000BA294(&qword_100BD4280);
        memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v42, 0, 1, v44);
      }
      v14 = v31;
      v97 = v35;
      v46 = v35[9];
      v47 = (uint64_t)v41;
      v48 = &v41[v46];
      v49 = &v33[v46];
      *v48 = v33[v46];
      *((_QWORD *)v48 + 1) = *(_QWORD *)&v33[v46 + 8];
      v50 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
      v51 = v50[6];
      v52 = &v48[v51];
      v53 = &v49[v51];
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v53, 1, v44))
      {
        v54 = sub_1000BA294(&qword_100BD4280);
        memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v52, v53, v44);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v52, 0, 1, v44);
      }
      v55 = v50[7];
      v56 = &v48[v55];
      v57 = &v49[v55];
      v58 = v57[1];
      *v56 = *v57;
      v56[1] = v58;
      *(_QWORD *)&v48[v50[8]] = *(_QWORD *)&v49[v50[8]];
      v41[v97[10]] = v33[v97[10]];
      v59 = v97[11];
      v60 = &v41[v59];
      v61 = &v33[v59];
      v62 = type metadata accessor for LocationOfInterest(0);
      swift_bridgeObjectRetain();
      swift_retain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v61, 1, v62))
      {
        v63 = sub_1000BA294(&qword_100BC3118);
        memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v60, v61, v62);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v60, 0, 1, v62);
      }
      v41[v97[12]] = v33[v97[12]];
      v41[v97[13]] = v33[v97[13]];
      v64 = v97[14];
      v65 = &v41[v64];
      v66 = &v33[v64];
      v67 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v66, 1, (uint64_t)v67))
      {
        v68 = sub_1000BA294(&qword_100BCD688);
        memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
      }
      else
      {
        *v65 = *v66;
        v69 = v67[5];
        v70 = &v65[v69];
        v71 = &v66[v69];
        v72 = type metadata accessor for Location(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v72 - 8) + 16))(v70, v71, v72);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(&v65[v67[6]], &v66[v67[6]], v62);
        v65[v67[7]] = v66[v67[7]];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v65, 0, 1, (uint64_t)v67);
      }
      v38 = v98;
      _s7Weather24LocationCompositionStateOwst_0(v47, 0, 1, (uint64_t)v97);
      v37 = v99;
    }
    *((_BYTE *)v14 + v38[10]) = *((_BYTE *)v37 + v38[10]);
    *((_BYTE *)v14 + v38[11]) = *((_BYTE *)v37 + v38[11]);
    *((_BYTE *)v14 + v38[12]) = *((_BYTE *)v37 + v38[12]);
    *((_BYTE *)v14 + v38[13]) = *((_BYTE *)v37 + v38[13]);
    *((_BYTE *)v14 + v38[14]) = *((_BYTE *)v37 + v38[14]);
    v73 = v38[15];
    v74 = *(void **)((char *)v37 + v73);
    *(_QWORD *)((char *)v14 + v73) = v74;
    *((_BYTE *)v14 + v38[16]) = *((_BYTE *)v37 + v38[16]);
    *((_BYTE *)v14 + v38[17]) = *((_BYTE *)v37 + v38[17]);
    *((_BYTE *)v14 + v38[18]) = *((_BYTE *)v37 + v38[18]);
    v75 = v38[19];
    v76 = (uint64_t)v14 + v75;
    v77 = (uint64_t)v37 + v75;
    v78 = type metadata accessor for Date(0);
    v79 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 16);
    v80 = v74;
    v79(v76, v77, v78);
    v81 = v38[20];
    v82 = (char *)v14 + v81;
    v83 = (char *)v37 + v81;
    v84 = type metadata accessor for ForegroundEffect(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v83, 1, v84))
    {
      v85 = sub_1000BA294(&qword_100BC5B30);
      memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 16))(v82, v83, v84);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v82, 0, 1, v84);
    }
    *((_BYTE *)v14 + v38[21]) = *((_BYTE *)v37 + v38[21]);
    *(_QWORD *)((char *)v14 + v38[22]) = *(_QWORD *)((char *)v37 + v38[22]);
    *((_BYTE *)v14 + v38[23]) = *((_BYTE *)v37 + v38[23]);
    v86 = v38[24];
    v87 = (uint64_t)v14 + v86;
    v88 = (uint64_t)v37 + v86;
    v89 = type metadata accessor for LocationEntity(0);
    v90 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v89 - 8) + 16);
    v91 = swift_bridgeObjectRetain();
    v90(v87, v88, v89, v91);
    v92 = *(int *)(a3 + 20);
    v93 = (_QWORD *)((char *)v14 + v92);
    v94 = (_QWORD *)((char *)v37 + v92);
    v95 = v94[1];
    *v93 = *v94;
    v93[1] = v95;
  }
  swift_retain();
  return v14;
}

uint64_t sub_1006E6728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  int *v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  int *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v57;
  uint64_t v58;
  _BYTE *__dst;
  _BYTE *__dsta;

  v6 = type metadata accessor for Location.Identifier(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = (int *)type metadata accessor for LocationViewModel(0);
  v9 = v8[5];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  if (_s7Weather24LocationCompositionStateOwet_0(a2 + v9, 1, v6))
  {
    v12 = sub_1000BA294(&qword_100BCD680);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v10, (uint64_t)v11, v6);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v6);
  }
  memcpy((void *)(a1 + v8[6]), (const void *)(a2 + v8[6]), 0xA2uLL);
  *(_QWORD *)(a1 + v8[7]) = *(_QWORD *)(a2 + v8[7]);
  *(_QWORD *)(a1 + v8[8]) = *(_QWORD *)(a2 + v8[8]);
  v13 = v8[9];
  v14 = (_BYTE *)(a1 + v13);
  v15 = (_BYTE *)(a2 + v13);
  v16 = type metadata accessor for LocationFooterViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v16))
  {
    v17 = sub_1000BA294(&qword_100BCD690);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v58 = a3;
    *v14 = *v15;
    *(_WORD *)(v14 + 1) = *(_WORD *)(v15 + 1);
    *(_OWORD *)(v14 + 8) = *(_OWORD *)(v15 + 8);
    v18 = *(int *)(v16 + 32);
    v19 = &v14[v18];
    v20 = &v15[v18];
    v21 = type metadata accessor for URL(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v20, 1, v21))
    {
      v22 = sub_1000BA294(&qword_100BD4280);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v19, 0, 1, v21);
    }
    v57 = (int *)v16;
    v23 = *(int *)(v16 + 36);
    v24 = &v14[v23];
    v25 = &v15[v23];
    *v24 = v15[v23];
    *((_QWORD *)v24 + 1) = *(_QWORD *)&v15[v23 + 8];
    v26 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
    v27 = v26[6];
    __dst = &v24[v27];
    v28 = &v25[v27];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v25[v27], 1, v21))
    {
      v29 = sub_1000BA294(&qword_100BD4280);
      memcpy(__dst, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(__dst, v28, v21);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v21);
    }
    *(_OWORD *)&v24[v26[7]] = *(_OWORD *)&v25[v26[7]];
    *(_QWORD *)&v24[v26[8]] = *(_QWORD *)&v25[v26[8]];
    v14[v57[10]] = v15[v57[10]];
    v30 = v57[11];
    v31 = &v14[v30];
    v32 = &v15[v30];
    v33 = type metadata accessor for LocationOfInterest(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v32, 1, v33))
    {
      v34 = sub_1000BA294(&qword_100BC3118);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v31, 0, 1, v33);
    }
    v14[v57[12]] = v15[v57[12]];
    v14[v57[13]] = v15[v57[13]];
    v35 = v57[14];
    v36 = &v14[v35];
    v37 = &v15[v35];
    v38 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v37, 1, (uint64_t)v38))
    {
      v39 = sub_1000BA294(&qword_100BCD688);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      *v36 = *v37;
      v40 = v38[5];
      v41 = &v36[v40];
      __dsta = &v37[v40];
      v42 = type metadata accessor for Location(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v41, __dsta, v42);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(&v36[v38[6]], &v37[v38[6]], v33);
      v36[v38[7]] = v37[v38[7]];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v36, 0, 1, (uint64_t)v38);
    }
    a3 = v58;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 0, 1, (uint64_t)v57);
  }
  *(_BYTE *)(a1 + v8[10]) = *(_BYTE *)(a2 + v8[10]);
  *(_BYTE *)(a1 + v8[11]) = *(_BYTE *)(a2 + v8[11]);
  *(_BYTE *)(a1 + v8[12]) = *(_BYTE *)(a2 + v8[12]);
  *(_BYTE *)(a1 + v8[13]) = *(_BYTE *)(a2 + v8[13]);
  *(_BYTE *)(a1 + v8[14]) = *(_BYTE *)(a2 + v8[14]);
  *(_QWORD *)(a1 + v8[15]) = *(_QWORD *)(a2 + v8[15]);
  *(_BYTE *)(a1 + v8[16]) = *(_BYTE *)(a2 + v8[16]);
  *(_BYTE *)(a1 + v8[17]) = *(_BYTE *)(a2 + v8[17]);
  *(_BYTE *)(a1 + v8[18]) = *(_BYTE *)(a2 + v8[18]);
  v43 = v8[19];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
  v47 = v8[20];
  v48 = (void *)(a1 + v47);
  v49 = (const void *)(a2 + v47);
  v50 = type metadata accessor for ForegroundEffect(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v49, 1, v50))
  {
    v51 = sub_1000BA294(&qword_100BC5B30);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v48, v49, v50);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v48, 0, 1, v50);
  }
  *(_BYTE *)(a1 + v8[21]) = *(_BYTE *)(a2 + v8[21]);
  *(_QWORD *)(a1 + v8[22]) = *(_QWORD *)(a2 + v8[22]);
  *(_BYTE *)(a1 + v8[23]) = *(_BYTE *)(a2 + v8[23]);
  v52 = v8[24];
  v53 = a1 + v52;
  v54 = a2 + v52;
  v55 = type metadata accessor for LocationEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v53, v54, v55);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1006E6CCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  int *v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  int v37;
  uint64_t v38;
  void *v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  void *v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const void *v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  const void *v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  void *v62;
  const void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  int *v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  const void *v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  int v108;
  size_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  const void *v119;
  uint64_t v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _BYTE *v126;
  _BYTE *v127;
  int *v128;
  int v129;
  int v130;
  uint64_t v131;
  _BYTE *v132;
  _BYTE *v133;
  uint64_t v134;
  uint64_t v135;
  _BYTE *v136;
  _BYTE *v137;
  uint64_t v138;
  uint64_t v139;
  void *__dst;
  _BYTE *__dstb;
  char *__dsta;
  int *v143;
  int *v144;
  uint64_t v145;
  uint64_t v146;

  v6 = type metadata accessor for Location.Identifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = (int *)type metadata accessor for LocationViewModel(0);
  v10 = v9[5];
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  v13 = _s7Weather24LocationCompositionStateOwet_0(a1 + v10, 1, v6);
  v14 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v6);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v11, v12, v6);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v11, v6);
LABEL_6:
    v15 = sub_1000BA294(&qword_100BCD680);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v8((uint64_t)v11, (uint64_t)v12, v6);
LABEL_7:
  v16 = v9[6];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_QWORD *)(a2 + v16 + 8);
  *(_QWORD *)v17 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(v17 + 8) = v19;
  swift_bridgeObjectRelease();
  v20 = *(_BYTE *)(v18 + 48);
  v21 = *(_QWORD *)(v17 + 16);
  v22 = *(_QWORD *)(v17 + 24);
  v23 = *(_QWORD *)(v17 + 32);
  v24 = *(_QWORD *)(v17 + 40);
  v25 = *(_OWORD *)(v18 + 32);
  *(_OWORD *)(v17 + 16) = *(_OWORD *)(v18 + 16);
  *(_OWORD *)(v17 + 32) = v25;
  v26 = *(_BYTE *)(v17 + 48);
  *(_BYTE *)(v17 + 48) = v20;
  sub_100176DD4(v21, v22, v23, v24, v26);
  v27 = *(_QWORD *)(v18 + 64);
  *(_QWORD *)(v17 + 56) = *(_QWORD *)(v18 + 56);
  *(_QWORD *)(v17 + 64) = v27;
  swift_bridgeObjectRelease();
  v28 = *(_QWORD *)(v18 + 80);
  *(_QWORD *)(v17 + 72) = *(_QWORD *)(v18 + 72);
  *(_QWORD *)(v17 + 80) = v28;
  swift_bridgeObjectRelease();
  v29 = *(_QWORD *)(v18 + 96);
  *(_QWORD *)(v17 + 88) = *(_QWORD *)(v18 + 88);
  *(_QWORD *)(v17 + 96) = v29;
  swift_bridgeObjectRelease();
  v30 = *(_QWORD *)(v18 + 112);
  *(_QWORD *)(v17 + 104) = *(_QWORD *)(v18 + 104);
  *(_QWORD *)(v17 + 112) = v30;
  swift_bridgeObjectRelease();
  v31 = *(_QWORD *)(v18 + 128);
  *(_QWORD *)(v17 + 120) = *(_QWORD *)(v18 + 120);
  *(_QWORD *)(v17 + 128) = v31;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v17 + 136) = *(_BYTE *)(v18 + 136);
  *(_BYTE *)(v17 + 137) = *(_BYTE *)(v18 + 137);
  *(_BYTE *)(v17 + 138) = *(_BYTE *)(v18 + 138);
  v32 = *(_QWORD *)(v18 + 152);
  *(_QWORD *)(v17 + 144) = *(_QWORD *)(v18 + 144);
  *(_QWORD *)(v17 + 152) = v32;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v17 + 160) = *(_BYTE *)(v18 + 160);
  *(_BYTE *)(v17 + 161) = *(_BYTE *)(v18 + 161);
  *(_QWORD *)(a1 + v9[7]) = *(_QWORD *)(a2 + v9[7]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v9[8]) = *(_QWORD *)(a2 + v9[8]);
  swift_release();
  v33 = v9[9];
  v34 = a1 + v33;
  v35 = a2 + v33;
  v36 = (int *)type metadata accessor for LocationFooterViewModel(0);
  LODWORD(v17) = _s7Weather24LocationCompositionStateOwet_0(v34, 1, (uint64_t)v36);
  v37 = _s7Weather24LocationCompositionStateOwet_0(v35, 1, (uint64_t)v36);
  if ((_DWORD)v17)
  {
    if (!v37)
    {
      *(_BYTE *)v34 = *(_BYTE *)v35;
      *(_WORD *)(v34 + 1) = *(_WORD *)(v35 + 1);
      *(_OWORD *)(v34 + 8) = *(_OWORD *)(v35 + 8);
      v38 = v36[8];
      v39 = (void *)(v34 + v38);
      v40 = (const void *)(v35 + v38);
      v41 = type metadata accessor for URL(0);
      v145 = a3;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v40, 1, v41))
      {
        v42 = sub_1000BA294(&qword_100BD4280);
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v39, v40, v41);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v39, 0, 1, v41);
      }
      v143 = v36;
      v53 = v36[9];
      v54 = v34 + v53;
      v55 = v35 + v53;
      *(_BYTE *)v54 = *(_BYTE *)(v35 + v53);
      *(_QWORD *)(v54 + 8) = *(_QWORD *)(v35 + v53 + 8);
      v56 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
      v57 = v56[6];
      __dst = (void *)(v54 + v57);
      v58 = (const void *)(v55 + v57);
      if (_s7Weather24LocationCompositionStateOwet_0(v55 + v57, 1, v41))
      {
        v59 = sub_1000BA294(&qword_100BD4280);
        memcpy(__dst, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(__dst, v58, v41);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v41);
      }
      *(_OWORD *)(v54 + v56[7]) = *(_OWORD *)(v55 + v56[7]);
      *(_QWORD *)(v54 + v56[8]) = *(_QWORD *)(v55 + v56[8]);
      v60 = v143;
      *(_BYTE *)(v34 + v143[10]) = *(_BYTE *)(v35 + v143[10]);
      v61 = v143[11];
      v62 = (void *)(v34 + v61);
      v63 = (const void *)(v35 + v61);
      v64 = type metadata accessor for LocationOfInterest(0);
      a3 = v145;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v63, 1, v64))
      {
        v65 = sub_1000BA294(&qword_100BC3118);
        memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v64 - 8) + 32))(v62, v63, v64);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v62, 0, 1, v64);
      }
      *(_BYTE *)(v34 + v143[12]) = *(_BYTE *)(v35 + v143[12]);
      *(_BYTE *)(v34 + v143[13]) = *(_BYTE *)(v35 + v143[13]);
      v66 = v143[14];
      v67 = (_BYTE *)(v34 + v66);
      v68 = (_BYTE *)(v35 + v66);
      v69 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v68, 1, (uint64_t)v69))
      {
        v70 = sub_1000BA294(&qword_100BCD688);
        memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
      }
      else
      {
        *v67 = *v68;
        v71 = v69[5];
        v72 = &v67[v71];
        __dstb = &v68[v71];
        v73 = type metadata accessor for Location(0);
        v74 = v72;
        a3 = v145;
        v60 = v143;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v74, __dstb, v73);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v64 - 8) + 32))(&v67[v69[6]], &v68[v69[6]], v64);
        v67[v69[7]] = v68[v69[7]];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v67, 0, 1, (uint64_t)v69);
      }
      v75 = v34;
      v76 = (uint64_t)v60;
      goto LABEL_30;
    }
    goto LABEL_13;
  }
  if (v37)
  {
    sub_1000B56C0(v34, type metadata accessor for LocationFooterViewModel);
LABEL_13:
    v43 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BCD690) - 8) + 64);
    v44 = (void *)v34;
    v45 = (const void *)v35;
LABEL_14:
    memcpy(v44, v45, v43);
    goto LABEL_31;
  }
  v146 = a3;
  *(_BYTE *)v34 = *(_BYTE *)v35;
  *(_BYTE *)(v34 + 1) = *(_BYTE *)(v35 + 1);
  *(_BYTE *)(v34 + 2) = *(_BYTE *)(v35 + 2);
  v46 = *(_QWORD *)(v35 + 16);
  *(_QWORD *)(v34 + 8) = *(_QWORD *)(v35 + 8);
  *(_QWORD *)(v34 + 16) = v46;
  swift_bridgeObjectRelease();
  v47 = v36[8];
  v48 = (void *)(v34 + v47);
  v49 = (const void *)(v35 + v47);
  v50 = type metadata accessor for URL(0);
  v51 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v48, 1, v50);
  v52 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v49, 1, v50);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v48, v49, v50);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v48, 0, 1, v50);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v101 = *(_QWORD *)(v50 - 8);
  if (v52)
  {
    (*(void (**)(void *, uint64_t))(v101 + 8))(v48, v50);
LABEL_41:
    v102 = sub_1000BA294(&qword_100BD4280);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, const void *, uint64_t))(v101 + 40))(v48, v49, v50);
LABEL_42:
  v103 = v36[9];
  v104 = v34 + v103;
  v105 = (char *)(v35 + v103);
  *(_BYTE *)v104 = *(_BYTE *)(v35 + v103);
  *(_QWORD *)(v104 + 8) = *(_QWORD *)(v35 + v103 + 8);
  swift_bridgeObjectRelease();
  __dsta = v105;
  v144 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
  v106 = v144[6];
  v107 = &v105[v106];
  v139 = v104 + v106;
  LODWORD(v105) = _s7Weather24LocationCompositionStateOwet_0(v104 + v106, 1, v50);
  v108 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v107, 1, v50);
  if ((_DWORD)v105)
  {
    if (v108)
    {
      v109 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD4280) - 8) + 64);
      v110 = (void *)v139;
LABEL_47:
      memcpy(v110, v107, v109);
      goto LABEL_51;
    }
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v139, v107, v50);
    _s7Weather24LocationCompositionStateOwst_0(v139, 0, 1, v50);
  }
  else
  {
    v111 = *(_QWORD *)(v50 - 8);
    if (v108)
    {
      (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v139, v50);
      v109 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD4280) - 8) + 64);
      v110 = (void *)v139;
      goto LABEL_47;
    }
    (*(void (**)(uint64_t, char *, uint64_t))(v111 + 40))(v139, v107, v50);
  }
LABEL_51:
  v112 = v144[7];
  v113 = (_QWORD *)(v104 + v112);
  v114 = &__dsta[v112];
  v116 = *(_QWORD *)v114;
  v115 = *((_QWORD *)v114 + 1);
  *v113 = v116;
  v113[1] = v115;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v104 + v144[8]) = *(_QWORD *)&__dsta[v144[8]];
  swift_release();
  *(_BYTE *)(v34 + v36[10]) = *(_BYTE *)(v35 + v36[10]);
  v117 = v36[11];
  v118 = (void *)(v34 + v117);
  v119 = (const void *)(v35 + v117);
  v120 = type metadata accessor for LocationOfInterest(0);
  v121 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v118, 1, v120);
  v122 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v119, 1, v120);
  if (v121)
  {
    if (!v122)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v120 - 8) + 32))(v118, v119, v120);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v118, 0, 1, v120);
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  v123 = *(_QWORD *)(v120 - 8);
  if (v122)
  {
    (*(void (**)(void *, uint64_t))(v123 + 8))(v118, v120);
LABEL_56:
    v124 = sub_1000BA294(&qword_100BC3118);
    memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
    goto LABEL_57;
  }
  (*(void (**)(void *, const void *, uint64_t))(v123 + 40))(v118, v119, v120);
LABEL_57:
  *(_BYTE *)(v34 + v36[12]) = *(_BYTE *)(v35 + v36[12]);
  *(_BYTE *)(v34 + v36[13]) = *(_BYTE *)(v35 + v36[13]);
  v125 = v36[14];
  v126 = (_BYTE *)(v34 + v125);
  v127 = (_BYTE *)(v35 + v125);
  v128 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
  v129 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v126, 1, (uint64_t)v128);
  v130 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v127, 1, (uint64_t)v128);
  a3 = v146;
  if (v129)
  {
    if (!v130)
    {
      *v126 = *v127;
      v131 = v128[5];
      v132 = &v126[v131];
      v133 = &v127[v131];
      v134 = type metadata accessor for Location(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v134 - 8) + 32))(v132, v133, v134);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v120 - 8) + 32))(&v126[v128[6]], &v127[v128[6]], v120);
      v126[v128[7]] = v127[v128[7]];
      v75 = (uint64_t)v126;
      v76 = (uint64_t)v128;
LABEL_30:
      _s7Weather24LocationCompositionStateOwst_0(v75, 0, 1, v76);
      goto LABEL_31;
    }
    goto LABEL_62;
  }
  if (v130)
  {
    sub_1000B56C0((uint64_t)v126, type metadata accessor for HomeAndWorkRefinementRowViewModel);
LABEL_62:
    v43 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BCD688) - 8) + 64);
    v44 = v126;
    v45 = v127;
    goto LABEL_14;
  }
  *v126 = *v127;
  v135 = v128[5];
  v136 = &v126[v135];
  v137 = &v127[v135];
  v138 = type metadata accessor for Location(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v138 - 8) + 40))(v136, v137, v138);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v120 - 8) + 40))(&v126[v128[6]], &v127[v128[6]], v120);
  v126[v128[7]] = v127[v128[7]];
LABEL_31:
  *(_BYTE *)(a1 + v9[10]) = *(_BYTE *)(a2 + v9[10]);
  *(_BYTE *)(a1 + v9[11]) = *(_BYTE *)(a2 + v9[11]);
  *(_BYTE *)(a1 + v9[12]) = *(_BYTE *)(a2 + v9[12]);
  *(_BYTE *)(a1 + v9[13]) = *(_BYTE *)(a2 + v9[13]);
  *(_BYTE *)(a1 + v9[14]) = *(_BYTE *)(a2 + v9[14]);
  v77 = v9[15];
  v78 = *(void **)(a1 + v77);
  *(_QWORD *)(a1 + v77) = *(_QWORD *)(a2 + v77);

  *(_BYTE *)(a1 + v9[16]) = *(_BYTE *)(a2 + v9[16]);
  *(_BYTE *)(a1 + v9[17]) = *(_BYTE *)(a2 + v9[17]);
  *(_BYTE *)(a1 + v9[18]) = *(_BYTE *)(a2 + v9[18]);
  v79 = v9[19];
  v80 = a1 + v79;
  v81 = a2 + v79;
  v82 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 40))(v80, v81, v82);
  v83 = v9[20];
  v84 = (void *)(a1 + v83);
  v85 = (const void *)(a2 + v83);
  v86 = type metadata accessor for ForegroundEffect(0);
  v87 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v84, 1, v86);
  v88 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v85, 1, v86);
  if (!v87)
  {
    v89 = *(_QWORD *)(v86 - 8);
    if (!v88)
    {
      (*(void (**)(void *, const void *, uint64_t))(v89 + 40))(v84, v85, v86);
      goto LABEL_37;
    }
    (*(void (**)(void *, uint64_t))(v89 + 8))(v84, v86);
    goto LABEL_36;
  }
  if (v88)
  {
LABEL_36:
    v90 = sub_1000BA294(&qword_100BC5B30);
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v86 - 8) + 32))(v84, v85, v86);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v84, 0, 1, v86);
LABEL_37:
  *(_BYTE *)(a1 + v9[21]) = *(_BYTE *)(a2 + v9[21]);
  *(_QWORD *)(a1 + v9[22]) = *(_QWORD *)(a2 + v9[22]);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + v9[23]) = *(_BYTE *)(a2 + v9[23]);
  v91 = v9[24];
  v92 = a1 + v91;
  v93 = a2 + v91;
  v94 = type metadata accessor for LocationEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 40))(v92, v93, v94);
  v95 = *(int *)(a3 + 20);
  v96 = (_QWORD *)(a1 + v95);
  v97 = (uint64_t *)(a2 + v95);
  v99 = *v97;
  v98 = v97[1];
  *v96 = v99;
  v96[1] = v98;
  swift_release();
  return a1;
}

uint64_t sub_1006E7878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006E7884);
}

uint64_t sub_1006E7884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;

  v6 = type metadata accessor for LocationViewModel(0);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return _s7Weather24LocationCompositionStateOwet_0(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

uint64_t sub_1006E7900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006E790C);
}

uint64_t sub_1006E790C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = type metadata accessor for LocationViewModel(0);
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return _s7Weather24LocationCompositionStateOwst_0(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1006E7984()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t active;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char *v28;
  uint64_t v29;

  v1 = type metadata accessor for ForegroundEffectConfigurationView(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Location.Identifier(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v28 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BCD780);
  __chkstk_darwin(v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  active = type metadata accessor for ActiveLocationModel(0);
  __chkstk_darwin(active);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000BA294(&qword_100BCD680);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v28 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v28 - v17, v0, v4);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v18, 0, 1, v4);
  v19 = *(int *)(v1 + 20);
  v29 = v0;
  v20 = *(_QWORD *)(v0 + v19 + 8);
  swift_retain();
  sub_10006BDA4();
  swift_release(v20);
  v21 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_10006F614((uint64_t)v18, (uint64_t)v9);
  sub_100019258((uint64_t)v12, v21);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v4) != 1)
  {
    sub_10006F614((uint64_t)v9, (uint64_t)v16);
    if (_s7Weather24LocationCompositionStateOwet_0(v21, 1, v4) != 1)
    {
      v22 = v28;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v28, v21, v4);
      v23 = sub_100062598();
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v22, v4, v23);
      v25 = *(void (**)(char *, uint64_t))(v5 + 8);
      v25(v22, v4);
      sub_100021A3C((uint64_t)v18, &qword_100BCD680);
      v25(v16, v4);
      sub_100021A3C((uint64_t)v9, &qword_100BCD680);
      sub_1001263F4(v29, (uint64_t)v3);
      if ((v24 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v26 = v3[*(int *)(type metadata accessor for LocationViewModel(0) + 68)];
      goto LABEL_10;
    }
    sub_100021A3C((uint64_t)v18, &qword_100BCD680);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v16, v4);
LABEL_6:
    sub_100021A3C((uint64_t)v9, &qword_100BCD780);
    sub_1001263F4(v29, (uint64_t)v3);
    goto LABEL_9;
  }
  sub_100021A3C((uint64_t)v18, &qword_100BCD680);
  if (_s7Weather24LocationCompositionStateOwet_0(v21, 1, v4) != 1)
    goto LABEL_6;
  sub_100021A3C((uint64_t)v9, &qword_100BCD680);
  sub_1001263F4(v29, (uint64_t)v3);
LABEL_8:
  v26 = 1;
LABEL_10:
  sub_1000B56C0((uint64_t)v3, type metadata accessor for ForegroundEffectConfigurationView);
  return v26;
}

double destroy for SearchViewModel(uint64_t a1)
{
  return sub_10019DFF0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 96));
}

uint64_t initializeWithCopy for SearchViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_BYTE *)(a2 + 96);
  sub_10019E0F8(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_BYTE *)(a1 + 96) = v16;
  return a1;
}

uint64_t assignWithCopy for SearchViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v25 = *(_QWORD *)(a2 + 72);
  v26 = *(_QWORD *)(a2 + 80);
  v27 = *(_QWORD *)(a2 + 88);
  v28 = *(_BYTE *)(a2 + 96);
  sub_10019E0F8(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v25, v26, v27, v28);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 80);
  v22 = *(_QWORD *)(a1 + 88);
  v23 = *(_BYTE *)(a1 + 96);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v25;
  *(_QWORD *)(a1 + 80) = v26;
  *(_QWORD *)(a1 + 88) = v27;
  *(_BYTE *)(a1 + 96) = v28;
  sub_10019DFF0(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, v22, v23);
  return a1;
}

uint64_t assignWithTake for SearchViewModel(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v3 = *(_BYTE *)(a2 + 96);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a1 + 88);
  v15 = *(_BYTE *)(a1 + 96);
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  v18 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v18;
  *(_BYTE *)(a1 + 96) = v3;
  sub_10019DFF0(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchViewModel(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFD && *(_BYTE *)(a1 + 97))
    {
      v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 96);
      if (v3 <= 3)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchViewModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 97) = 0;
    if (a2)
      *(_BYTE *)(result + 96) = -(char)a2;
  }
  return result;
}

uint64_t sub_1006E8010(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 96) <= 2u)
    return *(unsigned __int8 *)(a1 + 96);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_1006E8028(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    LOBYTE(a2) = 3;
    *(_QWORD *)(result + 88) = 0;
  }
  *(_BYTE *)(result + 96) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SearchViewModel()
{
  return &type metadata for SearchViewModel;
}

void sub_1006E806C(const void *a1)
{
  _QWORD v1[12];

  sub_10019E094(a1, v1);
  __asm { BR              X10 }
}

uint64_t sub_1006E80BC()
{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  BOOL v11;
  char v12;
  char v13;
  uint64_t v16;
  _QWORD v17[12];
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = v19;
  v3 = v20;
  v2 = v21;
  v4 = v22;
  sub_10019E094(v0, v17);
  if (!v18
    && (v16 = v2, v6 = v17[2], v5 = v17[3], v7 = v17[4], v8 = v17[5], sub_10094907C(), (v9 & 1) != 0)
    && (sub_100949098(), (v10 & 1) != 0))
  {
    v11 = v1 == v6 && v3 == v5;
    if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v1, v3, v6, v5, 0), v13 = 0, (v12 & 1) != 0))
    {
      if (v16 == v7 && v4 == v8)
        v13 = 1;
      else
        v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v4, v7, v8, 0);
    }
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_1006E82D8(const void *a1, const void *a2)
{
  char v3;
  _BYTE v5[104];
  _BYTE v6[104];

  sub_10019E094(a1, v5);
  sub_10019E094(a2, v6);
  sub_1006E806C(v5);
  return v3 & 1;
}

uint64_t *sub_1006E8320(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v7 = type metadata accessor for CurrentLocation(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v7))
    {
      v8 = sub_1000BA294((uint64_t *)&unk_100C0D170);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
LABEL_14:
      v17 = a3[6];
      *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
      *(uint64_t *)((char *)a1 + v17) = *(uint64_t *)((char *)a2 + v17);
      v18 = a3[8];
      *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
      *(uint64_t *)((char *)a1 + v18) = *(uint64_t *)((char *)a2 + v18);
      v19 = a3[10];
      *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
      *(uint64_t *)((char *)a1 + v19) = *(uint64_t *)((char *)a2 + v19);
      v20 = a3[12];
      *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
      v21 = (char *)a1 + v20;
      v24 = *(uint64_t *)((char *)a2 + v20 + 8);
      v25 = *(uint64_t *)((char *)a2 + v20);
      v23 = *((_BYTE *)a2 + v20 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100163980(v25, v24, v23);
      *(_QWORD *)v21 = v25;
      *((_QWORD *)v21 + 1) = v24;
      v21[16] = v23;
      *(uint64_t *)((char *)a1 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
      swift_bridgeObjectRetain();
      return a1;
    }
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    if (EnumCaseMultiPayload == 2)
    {
      v15 = type metadata accessor for Location(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
      v12 = a1;
      v13 = v7;
      v14 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v16 = type metadata accessor for Location(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a1, a2, v16);
      v12 = a1;
      v13 = v7;
      v14 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        goto LABEL_13;
      }
      v11 = type metadata accessor for Location(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v12 = a1;
      v13 = v7;
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v13, v14);
LABEL_13:
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v7);
    goto LABEL_14;
  }
  v9 = *a2;
  *a1 = *a2;
  a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

char *sub_1006E8584(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;

  v6 = type metadata accessor for CurrentLocation(0);
  v7 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 1, v6);
  v8 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
      if (EnumCaseMultiPayload == 2)
      {
        v20 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(a1, a2, v20);
        v11 = a1;
        v12 = v6;
        v13 = 2;
      }
      else if (EnumCaseMultiPayload == 1)
      {
        v21 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(a1, a2, v21);
        v11 = a1;
        v12 = v6;
        v13 = 1;
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
          goto LABEL_20;
        }
        v10 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        v11 = a1;
        v12 = v6;
        v13 = 0;
      }
      swift_storeEnumTagMultiPayload(v11, v12, v13);
LABEL_20:
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_24;
    }
  }
  else
  {
    if (!v8)
    {
      if (a1 == a2)
        goto LABEL_24;
      sub_1000215BC((uint64_t)a1, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
      v15 = swift_getEnumCaseMultiPayload(a2);
      if (v15 == 2)
      {
        v22 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(a1, a2, v22);
        v17 = a1;
        v18 = v6;
        v19 = 2;
      }
      else if (v15 == 1)
      {
        v23 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(a1, a2, v23);
        v17 = a1;
        v18 = v6;
        v19 = 1;
      }
      else
      {
        if (v15)
        {
          v14 = *(_QWORD *)(v6 - 8);
          goto LABEL_10;
        }
        v16 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a1, a2, v16);
        v17 = a1;
        v18 = v6;
        v19 = 0;
      }
      swift_storeEnumTagMultiPayload(v17, v18, v19);
      goto LABEL_24;
    }
    sub_1000215BC((uint64_t)a1, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
  }
  v14 = *(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100C0D170) - 8);
LABEL_10:
  memcpy(a1, a2, *(_QWORD *)(v14 + 64));
LABEL_24:
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24 = a3[12];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = *(_QWORD *)v26;
  v28 = *((_QWORD *)v26 + 1);
  v29 = v26[16];
  sub_100163980(*(_QWORD *)v26, v28, v29);
  v30 = *(_QWORD *)v25;
  v31 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v25 = v27;
  *((_QWORD *)v25 + 1) = v28;
  v32 = v25[16];
  v25[16] = v29;
  sub_1001639C8(v30, v31, v32);
  *(_QWORD *)&a1[a3[13]] = *(_QWORD *)&a2[a3[13]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_1006E88FC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  v6 = type metadata accessor for CurrentLocation(0);
  if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    if (EnumCaseMultiPayload == 2)
    {
      v13 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
      v10 = a1;
      v11 = v6;
      v12 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v14 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
      v10 = a1;
      v11 = v6;
      v12 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        goto LABEL_11;
      }
      v9 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = a1;
      v11 = v6;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
LABEL_11:
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
    goto LABEL_12;
  }
  v7 = sub_1000BA294((uint64_t *)&unk_100C0D170);
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
LABEL_12:
  v15 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v15] = *(_QWORD *)&a2[v15];
  v16 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_QWORD *)&a1[v16] = *(_QWORD *)&a2[v16];
  v17 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  *(_QWORD *)&a1[v17] = *(_QWORD *)&a2[v17];
  v18 = a3[12];
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  v19 = &a1[v18];
  v20 = &a2[v18];
  *(_OWORD *)v19 = *(_OWORD *)v20;
  v19[16] = v20[16];
  *(_QWORD *)&a1[a3[13]] = *(_QWORD *)&a2[a3[13]];
  return a1;
}

char *sub_1006E8AB8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;

  v6 = type metadata accessor for CurrentLocation(0);
  v7 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 1, v6);
  v8 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
      if (EnumCaseMultiPayload == 2)
      {
        v20 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(a1, a2, v20);
        v11 = a1;
        v12 = v6;
        v13 = 2;
      }
      else if (EnumCaseMultiPayload == 1)
      {
        v21 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(a1, a2, v21);
        v11 = a1;
        v12 = v6;
        v13 = 1;
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
          goto LABEL_20;
        }
        v10 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
        v11 = a1;
        v12 = v6;
        v13 = 0;
      }
      swift_storeEnumTagMultiPayload(v11, v12, v13);
LABEL_20:
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_24;
    }
  }
  else
  {
    if (!v8)
    {
      if (a1 == a2)
        goto LABEL_24;
      sub_1000215BC((uint64_t)a1, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
      v15 = swift_getEnumCaseMultiPayload(a2);
      if (v15 == 2)
      {
        v22 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(a1, a2, v22);
        v17 = a1;
        v18 = v6;
        v19 = 2;
      }
      else if (v15 == 1)
      {
        v23 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(a1, a2, v23);
        v17 = a1;
        v18 = v6;
        v19 = 1;
      }
      else
      {
        if (v15)
        {
          v14 = *(_QWORD *)(v6 - 8);
          goto LABEL_10;
        }
        v16 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a1, a2, v16);
        v17 = a1;
        v18 = v6;
        v19 = 0;
      }
      swift_storeEnumTagMultiPayload(v17, v18, v19);
      goto LABEL_24;
    }
    sub_1000215BC((uint64_t)a1, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
  }
  v14 = *(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100C0D170) - 8);
LABEL_10:
  memcpy(a1, a2, *(_QWORD *)(v14 + 64));
LABEL_24:
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  swift_bridgeObjectRelease();
  v24 = a3[12];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = v26[16];
  v28 = *(_QWORD *)v25;
  v29 = *((_QWORD *)v25 + 1);
  *(_OWORD *)v25 = *(_OWORD *)v26;
  v30 = v25[16];
  v25[16] = v27;
  sub_1001639C8(v28, v29, v30);
  *(_QWORD *)&a1[a3[13]] = *(_QWORD *)&a2[a3[13]];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1006E8DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;

  v6 = sub_1000BA294((uint64_t *)&unk_100C0D170);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return _s7Weather24LocationCompositionStateOwet_0(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

void sub_1006E8E54(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;

  v8 = sub_1000BA294((uint64_t *)&unk_100C0D170);
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    _s7Weather24LocationCompositionStateOwst_0(a1, a2, a2, v8);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
    sub_100079F70();
  }
}

void sub_1006E8EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __n128 v29;
  uint64_t v30;
  void (*v31)(void (*)(char *, uint64_t), unint64_t, uint64_t, __n128);
  char v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v4 = v3;
  v59 = a3;
  v7 = type metadata accessor for LocationModel(0);
  v60 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (void (*)(char *, uint64_t))((char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_1000BA294(&qword_100C0B8D0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v46 - v14;
  v16 = sub_1000BA294(&qword_100BC3118);
  __chkstk_darwin(v16);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for LocationOfInterest(0);
  v53 = *(_QWORD *)(v56 - 8);
  v19 = __chkstk_darwin(v56);
  v52 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v47 = (char *)&v46 - v21;
  v51 = *(_QWORD *)(a1 + 16);
  if (v51)
  {
    v22 = *(_QWORD *)(type metadata accessor for SavedLocation(0) - 8);
    v23 = a1 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
    v48 = *(_QWORD *)(v22 + 72);
    v49 = v23;
    v46 = a1;
    swift_bridgeObjectRetain(a1);
    v24 = 0;
    v57 = _swiftEmptyArrayStorage;
    v54 = v18;
    v55 = v15;
    v50 = v13;
    while (1)
    {
      v25 = *(_QWORD *)(a2 + 16);
      v58 = v24;
      if (v25)
        break;
      v33 = 1;
LABEL_12:
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, v33, 1, v7);
      sub_100037768((uint64_t)v15, (uint64_t)v13, &qword_100C0B8D0);
      v35 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v7);
      if ((_DWORD)v35 == 1)
      {
        sub_100021A14((uint64_t)v15, &qword_100C0B8D0);
        sub_100021A14((uint64_t)v13, &qword_100C0B8D0);
        v36 = v56;
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v18, 1, 1, v56);
      }
      else
      {
        LocationModel.locationOfInterest.getter(v35);
        sub_100021A14((uint64_t)v15, &qword_100C0B8D0);
        (*(void (**)(char *, uint64_t))(v60 + 8))(v13, v7);
        v36 = v56;
      }
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v18, 1, v36) == 1)
      {
        sub_100021A14((uint64_t)v18, &qword_100BC3118);
      }
      else
      {
        v37 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
        v38 = v47;
        v37(v47, v18, v36);
        v37(v52, v38, v36);
        v39 = v57;
        if ((swift_isUniquelyReferenced_nonNull_native(v57) & 1) == 0)
        {
          sub_1005FEB60();
          v39 = v44;
        }
        v41 = v39[2];
        v40 = v39[3];
        v57 = v39;
        if (v41 >= v40 >> 1)
        {
          sub_1005FEB60();
          v57 = v45;
        }
        v42 = v56;
        v43 = (char *)v57;
        v57[2] = v41 + 1;
        v37(&v43[((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))+ *(_QWORD *)(v53 + 72) * v41], v52, v42);
        v18 = v54;
        v15 = v55;
      }
      v24 = v58 + 1;
      if (v58 + 1 == v51)
      {
        swift_bridgeObjectRelease(a2);
        swift_bridgeObjectRelease(v46);
        goto LABEL_25;
      }
    }
    v26 = v49 + v48 * v24;
    v27 = v60;
    v28 = a2 + ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80));
    v29 = swift_bridgeObjectRetain(a2);
    v30 = *(_QWORD *)(v27 + 72);
    v31 = *(void (**)(void (*)(char *, uint64_t), unint64_t, uint64_t, __n128))(v27 + 16);
    while (1)
    {
      v31(v9, v28, v7, v29);
      v32 = sub_1005ED468(v9, v26, a2, v59);
      if (v4)
        break;
      v4 = 0;
      if ((v32 & 1) != 0)
      {
        v34 = swift_bridgeObjectRelease(a2);
        v15 = v55;
        (*(void (**)(char *, void (*)(char *, uint64_t), uint64_t, __n128))(v60 + 32))(v55, v9, v7, v34);
        v33 = 0;
        v13 = v50;
        goto LABEL_11;
      }
      (*(void (**)(_QWORD, uint64_t))(v60 + 8))(v9, v7);
      v28 += v30;
      if (!--v25)
      {
        swift_bridgeObjectRelease(a2);
        v33 = 1;
        v13 = v50;
        v15 = v55;
LABEL_11:
        v18 = v54;
        goto LABEL_12;
      }
    }
    (*(void (**)(_QWORD, uint64_t))(v60 + 8))(v9, v7);
    swift_bridgeObjectRelease(a2);
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease(a2);
LABEL_25:
    swift_bridgeObjectRelease(v59);
  }
}

void sub_1006E9378(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v5 = type metadata accessor for SavedLocation(0);
  v21 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v22 = (uint64_t)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v19 - v8;
  v10 = _swiftEmptyArrayStorage;
  v23 = _swiftEmptyArrayStorage;
  v20 = *(_QWORD *)(a1 + 16);
  if (v20)
  {
    v19 = v2;
    v11 = 0;
    while (v11 < *(_QWORD *)(a1 + 16))
    {
      v12 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
      v13 = *(_QWORD *)(v21 + 72);
      v14 = a1;
      sub_100080C0C(a1 + v12 + v13 * v11, (uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
      v15 = *(_QWORD *)(a2 + 16);
      if (v15)
      {
        v16 = a2 + v12;
        v17 = swift_bridgeObjectRetain(a2);
        while ((static SavedLocation.== infix(_:_:)(v16, v9, v17) & 1) == 0)
        {
          v16 += v13;
          if (!--v15)
          {
            swift_bridgeObjectRelease();
            goto LABEL_9;
          }
        }
        swift_bridgeObjectRelease();
        sub_1000215BC((uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
      }
      else
      {
LABEL_9:
        sub_10007802C((uint64_t)v9, v22, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
        if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
          sub_10011ED3C();
        v10 = v23;
        v18 = v23[2];
        if (v18 >= v23[3] >> 1)
        {
          sub_10011ED3C();
          v10 = v23;
        }
        v10[2] = v18 + 1;
        sub_10007802C(v22, (uint64_t)v10 + v12 + v18 * v13, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
      }
      ++v11;
      a1 = v14;
      if (v11 == v20)
        goto LABEL_16;
    }
    __break(1u);
  }
  else
  {
LABEL_16:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

_QWORD *sub_1006E95A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v12 = type metadata accessor for Location.Identifier(0);
  v3 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_100098694();
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    sub_100605C7C();
    type metadata accessor for LocationModel(0);
    sub_1000BBD24();
    v7 = a1 + v6;
    v9 = *(_QWORD *)(v8 + 72);
    do
    {
      LocationModel.identifier.getter(v5);
      v10 = _swiftEmptyArrayStorage[2];
      if (v10 >= _swiftEmptyArrayStorage[3] >> 1)
        sub_100605C7C();
      _swiftEmptyArrayStorage[2] = v10 + 1;
      v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 32))((char *)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v10, v1, v12);
      v7 += v9;
      --v4;
    }
    while (v4);
  }
  return _swiftEmptyArrayStorage;
}

void sub_1006E96DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000986AC();
  v3 = v2;
  sub_1000DA9E8();
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100094EC4();
  sub_100037768(v3, v1, (uint64_t *)&unk_100C0D170);
  v5 = sub_1000E73D0();
  v6 = *(_QWORD *)(v0 + *(int *)(v5 + 28));
  v7 = *(_QWORD *)(v0 + *(int *)(v5 + 48));
  sub_1000878DC();
  sub_10009EF94();
  swift_bridgeObjectRetain(v6);
  sub_1000BE7F4(v7);
  sub_1000989F8();
  sub_1006EA08C();
  sub_100098640();
}

void sub_1006E97A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, char *, uint64_t, __n128);
  __n128 v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  char v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;

  sub_1000986AC();
  v85 = v1;
  v82 = *(_QWORD *)(sub_1000DB35C() - 8);
  sub_10009D98C();
  __chkstk_darwin(v2);
  sub_100088FDC();
  v97 = v3;
  sub_1000BA294(&qword_100BC35F8);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_10009883C();
  v7 = v5 - v6;
  __chkstk_darwin(v8);
  v10 = (char *)&v82 - v9;
  v11 = type metadata accessor for Location(0);
  v100 = *(_QWORD *)(v11 - 8);
  sub_10009D98C();
  __chkstk_darwin(v12);
  sub_1000986FC();
  v96 = v13;
  sub_10009D2A4();
  __chkstk_darwin(v14);
  sub_1000860D0();
  v91 = v15;
  sub_10009D2A4();
  __chkstk_darwin(v16);
  sub_1000860D0();
  v95 = v17;
  sub_10009D2A4();
  __chkstk_darwin(v18);
  sub_100079F7C();
  v90 = v19;
  v20 = sub_1000CDDC8();
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  sub_1000986FC();
  v94 = v22;
  sub_10009D2A4();
  __chkstk_darwin(v23);
  v25 = (char *)&v82 - v24;
  __chkstk_darwin(v26);
  v28 = (char *)&v82 - v27;
  __chkstk_darwin(v29);
  v31 = (char *)&v82 - v30;
  v83 = sub_1000E73D0();
  v84 = v0;
  v32 = *(_QWORD *)(v0 + *(int *)(v83 + 24));
  v102 = _swiftEmptyArrayStorage;
  v33 = *(_QWORD **)(v32 + 16);
  sub_1000989F8();
  v98 = v10;
  v99 = v7;
  v101 = v11;
  v93 = v33;
  if (v33)
  {
    v34 = 0;
    v92 = enum case for LocationModel.current(_:);
    v86 = enum case for LocationModel.saved(_:);
    v88 = v32;
    v89 = v25;
    v87 = v31;
    while (v34 < *(_QWORD *)(v32 + 16))
    {
      v35 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
      v36 = *(_QWORD *)(v21 + 72);
      sub_1000C22E8((uint64_t)v31, v32 + v35 + v36 * v34);
      sub_1000C22E8((uint64_t)v28, (uint64_t)v31);
      v37 = (*(uint64_t (**)(char *, uint64_t))(v21 + 88))(v28, v20);
      if (v37 == v92)
      {
        sub_1000B3274((uint64_t)v28, *(uint64_t (**)(uint64_t, uint64_t))(v21 + 96));
        v38 = sub_1000BA294(&qword_100BC3488);
        sub_100021A14((uint64_t)&v28[*(int *)(v38 + 48)], &qword_100BC3118);
        sub_1000215BC((uint64_t)v28, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
        sub_1000B3274((uint64_t)v31, *(uint64_t (**)(uint64_t, uint64_t))(v21 + 8));
      }
      else
      {
        if (v37 == v86)
        {
          sub_1000B3274((uint64_t)v28, *(uint64_t (**)(uint64_t, uint64_t))(v21 + 96));
          v39 = sub_1000BA294(&qword_100BC3480);
          sub_100021A14((uint64_t)&v28[*(int *)(v39 + 48)], &qword_100BC3118);
          sub_1000215BC((uint64_t)v28, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
        }
        else
        {
          sub_1000B3274((uint64_t)v28, *(uint64_t (**)(uint64_t, uint64_t))(v21 + 8));
        }
        sub_1000C22E8((uint64_t)v25, (uint64_t)v31);
        v40 = v102;
        if ((sub_100109A6C() & 1) == 0)
        {
          sub_1000DAD70();
          v40 = v102;
        }
        v41 = v40[2];
        if (v41 >= v40[3] >> 1)
        {
          sub_1000DAD70();
          v40 = v102;
        }
        v40[2] = v41 + 1;
        v25 = v89;
        sub_1000C22E8((uint64_t)v40 + v35 + v41 * v36, (uint64_t)v89);
        v102 = v40;
        v31 = v87;
        v32 = v88;
      }
      ++v34;
      v10 = v98;
      v7 = v99;
      v11 = v101;
      if (v93 == (_QWORD *)v34)
      {
        v42 = v102;
        goto LABEL_17;
      }
    }
    __break(1u);
  }
  else
  {
    v42 = _swiftEmptyArrayStorage;
LABEL_17:
    sub_1000986C4();
    v43 = v42[2];
    if (v43)
    {
      sub_100098AC8();
      v45 = (char *)v42 + v44;
      v46 = *(_QWORD *)(v21 + 72);
      v47 = *(uint64_t (**)(uint64_t, char *, uint64_t, __n128))(v21 + 16);
      v93 = v42;
      v48 = swift_retain();
      v49 = _swiftEmptyArrayStorage;
      do
      {
        v50 = v94;
        v51 = v47(v94, v45, v20, v48);
        LocationModel.location.getter(v51);
        sub_1000B3274(v50, *(uint64_t (**)(uint64_t, uint64_t))(v21 + 8));
        sub_100088FC8((uint64_t)v10, 1, v11);
        if (v52)
        {
          sub_100021A14((uint64_t)v10, &qword_100BC35F8);
        }
        else
        {
          v53 = v90;
          sub_1000F4158(v90, (uint64_t)v10);
          sub_1000F4158(v95, v53);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v49);
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_10009ADAC();
            v49 = v58;
          }
          v56 = v49[2];
          v55 = v49[3];
          if (v56 >= v55 >> 1)
          {
            sub_1000C67D4(v55);
            sub_10009ADAC();
            v49 = v59;
          }
          v49[2] = v56 + 1;
          v57 = (uint64_t)v49
              + ((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80))
              + *(_QWORD *)(v100 + 72) * v56;
          v11 = v101;
          sub_1000F4158(v57, v95);
          v10 = v98;
        }
        v45 += v46;
        --v43;
      }
      while (v43);
      swift_release_n(v93, 2);
      v7 = v99;
    }
    else
    {
      swift_release(v42);
      v49 = _swiftEmptyArrayStorage;
    }
    v60 = *(_QWORD *)(*(_QWORD *)(v84 + *(int *)(v83 + 20)) + 16);
    if (v60)
    {
      sub_100098AC8();
      v63 = (uint64_t)&v61[v62];
      v65 = *(_QWORD *)(v64 + 72);
      v98 = v61;
      swift_bridgeObjectRetain(v61);
      v66 = _swiftEmptyArrayStorage;
      v67 = v91;
      do
      {
        v68 = v97;
        sub_100080C0C(v63, v97, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
        SavedLocation.location.getter(v69);
        sub_1000215BC(v68, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
        v70 = v101;
        sub_100088FC8(v7, 1, v101);
        if (v52)
        {
          sub_100021A14(v7, &qword_100BC35F8);
        }
        else
        {
          v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v100 + 32);
          v71(v67, v7, v70);
          v71(v96, v67, v70);
          v72 = swift_isUniquelyReferenced_nonNull_native(v66);
          if ((v72 & 1) == 0)
          {
            sub_1000BDB4C();
            sub_10009ADAC();
            v66 = v77;
          }
          v74 = v66[2];
          v73 = v66[3];
          if (v74 >= v73 >> 1)
          {
            sub_1000C67D4(v73);
            sub_10009ADAC();
            v66 = v78;
          }
          v66[2] = v74 + 1;
          sub_1000EB0DC();
          ((void (*)(unint64_t, uint64_t))v71)(v75 + v76 * v74, v96);
          v7 = v99;
        }
        v63 += v65;
        --v60;
      }
      while (v60);
      swift_bridgeObjectRelease(v98);
    }
    sub_1005FCA1C();
    v80 = sub_1006ED598((uint64_t)v49, v79);
    swift_bridgeObjectRelease(v49);
    v81 = sub_1006ED184((uint64_t)v80);
    swift_release(v80);
    sub_1002F6F60((uint64_t)v81, v85);
    swift_release(v81);
    sub_100098640();
  }
}

void sub_1006E9E18()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  int v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_BYTE *, _BYTE *, uint64_t);
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE v24[12];
  int v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE *v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;

  sub_1000986AC();
  v2 = type metadata accessor for LocationModel(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_1000C0CD0();
  v5 = __chkstk_darwin(v4);
  v7 = &v24[-v6];
  __chkstk_darwin(v5);
  v9 = &v24[-v8];
  v10 = *(_QWORD *)(v0 + *(int *)(sub_1000E73D0() + 24));
  v31 = _swiftEmptyArrayStorage;
  v11 = *(_QWORD *)(v10 + 16);
  swift_bridgeObjectRetain(v10);
  v30 = v11;
  if (v11)
  {
    v12 = 0;
    v29 = enum case for LocationModel.current(_:);
    v25 = enum case for LocationModel.saved(_:);
    v27 = v10;
    v28 = v1;
    v26 = v9;
    while (v12 < *(_QWORD *)(v10 + 16))
    {
      v13 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      v14 = *(_QWORD *)(v3 + 72);
      sub_1000B31B0((uint64_t)v9, v10 + v13 + v14 * v12);
      sub_1000B31B0((uint64_t)v7, (uint64_t)v9);
      v15 = sub_100099C00();
      v17 = v16(v15);
      if (v17 == v29)
      {
        sub_1000DCA28();
        v18 = sub_1000BA294(&qword_100BC3488);
        sub_100021A14((uint64_t)&v7[*(int *)(v18 + 48)], &qword_100BC3118);
        sub_1000215BC((uint64_t)v7, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
        (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v9, v2);
      }
      else
      {
        if (v17 != v25)
          goto LABEL_15;
        sub_1000DCA28();
        v19 = sub_1000BA294(&qword_100BC3480);
        sub_100021A14((uint64_t)&v7[*(int *)(v19 + 48)], &qword_100BC3118);
        sub_1000215BC((uint64_t)v7, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
        v20 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 32);
        v20(v1, v9, v2);
        v21 = v31;
        if ((sub_100109A6C() & 1) == 0)
        {
          sub_1000DAD70();
          v21 = v31;
        }
        v22 = v21[2];
        if (v22 >= v21[3] >> 1)
        {
          sub_1000DAD70();
          v21 = v31;
        }
        v21[2] = v22 + 1;
        v23 = (unint64_t)v21 + v13 + v22 * v14;
        v1 = v28;
        v20((_BYTE *)v23, v28, v2);
        v31 = v21;
        v9 = v26;
        v10 = v27;
      }
      if (v30 == ++v12)
        goto LABEL_13;
    }
    __break(1u);
LABEL_15:
    _diagnoseUnexpectedEnumCase<A>(type:)(v2, v2);
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease(v10);
    sub_100098640();
  }
}

void sub_1006EA08C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __n128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double (*v91)(unint64_t, uint64_t, uint64_t);
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t, uint64_t);
  uint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __n128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  unint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __n128 v120;
  void (*v121)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v122;
  int v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  __n128 v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  BOOL v139;
  char v140;
  unint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(uint64_t, uint64_t, uint64_t);
  uint64_t v151;
  void (*v152)(uint64_t, uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  char v163;
  unint64_t v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  double v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t (*v174)(uint64_t, uint64_t, uint64_t);
  uint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _BOOL8 v200;
  unint64_t v201;
  Swift::Bool v202;
  unint64_t v203;
  char v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  double v208;
  _QWORD *v209;
  _QWORD *v210;
  int *v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  _QWORD *v215;
  _QWORD *v216;
  _QWORD *v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  void (*v227)(uint64_t, uint64_t, uint64_t);
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  _QWORD *v257;
  _QWORD *v258;
  _QWORD *v259;

  sub_1000986AC();
  v256 = v2;
  LODWORD(v255) = v3;
  v253 = v4;
  v251 = v5;
  v225 = v6;
  v240 = v7;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v228 = *(_QWORD *)(sub_1000DB35C() - 8);
  sub_10009D98C();
  __chkstk_darwin(v14);
  sub_1000986FC();
  v250 = v15;
  sub_10009D2A4();
  __chkstk_darwin(v16);
  sub_100079F7C();
  v254 = v17;
  sub_1000BA294(&qword_100BC35F8);
  sub_1000B42B0();
  __chkstk_darwin(v18);
  sub_1000986FC();
  v233 = v19;
  sub_10009D2A4();
  __chkstk_darwin(v20);
  sub_1000860D0();
  v220 = v21;
  sub_10009D2A4();
  __chkstk_darwin(v22);
  sub_100079F7C();
  v229 = v23;
  v24 = type metadata accessor for Location(0);
  v25 = *(_QWORD *)(v24 - 8);
  v247 = v24;
  v248 = v25;
  sub_10009D98C();
  __chkstk_darwin(v26);
  sub_1000986FC();
  v242 = v27;
  sub_10009D2A4();
  __chkstk_darwin(v28);
  sub_1000860D0();
  v243 = v29;
  sub_10009D2A4();
  __chkstk_darwin(v30);
  sub_1000860D0();
  v238 = v31;
  sub_10009D2A4();
  __chkstk_darwin(v32);
  sub_1000860D0();
  v231 = v33;
  sub_10009D2A4();
  __chkstk_darwin(v34);
  sub_1000860D0();
  v232 = v35;
  sub_10009D2A4();
  __chkstk_darwin(v36);
  sub_1000860D0();
  v239 = v37;
  sub_10009D2A4();
  __chkstk_darwin(v38);
  sub_1000860D0();
  v219 = v39;
  sub_10009D2A4();
  __chkstk_darwin(v40);
  sub_100079F7C();
  v230 = v41;
  sub_1000BA294(&qword_100C0B8D0);
  sub_1000B42B0();
  __chkstk_darwin(v42);
  sub_1000986FC();
  v235 = v43;
  sub_10009D2A4();
  __chkstk_darwin(v44);
  sub_1000860D0();
  v234 = v45;
  sub_10009D2A4();
  __chkstk_darwin(v46);
  sub_100079F7C();
  v227 = v47;
  v48 = sub_1000CDDC8();
  sub_100099300();
  __chkstk_darwin(v49);
  sub_1000986FC();
  v244 = v50;
  sub_10009D2A4();
  v52 = __chkstk_darwin(v51);
  v54 = (char *)&v219 - v53;
  __chkstk_darwin(v52);
  sub_1000860D0();
  v252 = v55;
  sub_10009D2A4();
  __chkstk_darwin(v56);
  sub_1000860D0();
  v249 = v57;
  sub_10009D2A4();
  __chkstk_darwin(v58);
  sub_100079F7C();
  v241 = v59;
  v237 = type metadata accessor for Location.Identifier(0);
  v236 = *(_QWORD *)(v237 - 8);
  sub_10009D98C();
  __chkstk_darwin(v60);
  sub_1000986FC();
  v245 = v61;
  sub_10009D2A4();
  __chkstk_darwin(v62);
  sub_100079F7C();
  v221 = v63;
  sub_1000BA294((uint64_t *)&unk_100C0D170);
  sub_1000B42B0();
  __chkstk_darwin(v64);
  sub_100098728();
  v67 = v66 - v65;
  v68 = type metadata accessor for CurrentLocation(0);
  sub_1000B42B0();
  __chkstk_darwin(v69);
  sub_10007A130();
  sub_1000CDC2C(v11, v13);
  v70 = (int *)sub_1000E73D0();
  *(_QWORD *)(v13 + v70[5]) = v9;
  v71 = v13 + v70[12];
  v72 = v253;
  *(_QWORD *)v71 = v251;
  *(_QWORD *)(v71 + 8) = v72;
  *(_BYTE *)(v71 + 16) = v255;
  v222 = v70;
  v73 = v70[13];
  v224 = v13;
  *(_QWORD *)(v13 + v73) = v256;
  v258 = &_swiftEmptyDictionarySingleton;
  v259 = &_swiftEmptyDictionarySingleton;
  v223 = v11;
  sub_1000CDC2C(v11, v67);
  sub_100088FC8(v67, 1, v68);
  v226 = v9;
  if (v74)
  {
    sub_10003BCC8();
    sub_100021A14(v67, (uint64_t *)&unk_100C0D170);
    v246 = _swiftEmptyArrayStorage;
    v251 = _swiftEmptyArrayStorage;
    v75 = v9;
    goto LABEL_12;
  }
  sub_10007802C(v67, v1, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
  v76 = sub_10003BCC8();
  v77 = v221;
  CurrentLocation.identifier.getter(v76);
  sub_10009AD84();
  v80 = v78[2];
  v79 = v78[3];
  v246 = v78;
  v81 = v80 + 1;
  if (v80 >= v79 >> 1)
    goto LABEL_83;
  while (1)
  {
    v82 = v229;
    v83 = v241;
    v84 = (uint64_t)v227;
    v246[2] = v81;
    sub_1000BEFA8();
    sub_1000ED340(v86 + *(_QWORD *)(v85 + 72) * v80, v77, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v85 + 32));
    sub_1006EB748(v240, v1, v83);
    CurrentLocation.id.getter(v87);
    sub_100099B30(v84, v83, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16));
    sub_10009E61C(v84, 0);
    sub_100099C00();
    sub_10001A16C();
    CurrentLocation.location.getter(v88);
    v89 = v247;
    sub_100088FC8(v82, 1, v247);
    if (v74)
    {
      sub_1000BE774(v83, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
      sub_1000215BC(v1, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
      sub_100021A14(v82, &qword_100BC35F8);
      v251 = _swiftEmptyArrayStorage;
    }
    else
    {
      v90 = v248;
      v91 = *(double (**)(unint64_t, uint64_t, uint64_t))(v248 + 32);
      v92 = v230;
      sub_1000B31B0(v230, v82);
      v93 = *(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 16);
      v94 = v219;
      v93(v219, v92, v89);
      sub_10009ADAC();
      v97 = v95[2];
      v96 = v95[3];
      v251 = v95;
      v256 = (char *)v93;
      if (v97 >= v96 >> 1)
      {
        sub_1000C1070();
        v251 = v218;
      }
      v251[2] = v97 + 1;
      v98 = v248;
      sub_1000BEFA8();
      v100 = v94;
      v101 = v247;
      v102.n128_f64[0] = v91(v99 + *(_QWORD *)(v98 + 72) * v97, v100, v247);
      v255 = CurrentLocation.id.getter(v102);
      v103 = v220;
      v104 = v230;
      ((void (*)(uint64_t, uint64_t, uint64_t))v256)(v220, v230, v101);
      _s7Weather24LocationCompositionStateOwst_0(v103, 0, 1, v101);
      sub_100121C20();
      (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v104, v101);
      sub_1000BE774(v241, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
      sub_1000215BC(v1, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
    }
    v75 = v226;
LABEL_12:
    v105 = v254;
    v230 = *(_QWORD *)(v75 + 16);
    if (v230)
    {
      sub_100098AC8();
      v229 = v106 + v107;
      LODWORD(v253) = enum case for LocationModel.current(_:);
      LODWORD(v255) = enum case for LocationModel.saved(_:);
      v228 = *(_QWORD *)(v108 + 72);
      swift_bridgeObjectRetain(v106);
      v109 = 0;
      while (1)
      {
        v241 = v109;
        sub_100080C0C(v229 + v228 * v109, v105, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
        SavedLocation.identifier.getter(v110);
        v111 = v246;
        if ((swift_isUniquelyReferenced_nonNull_native(v246) & 1) == 0)
        {
          sub_1000AE9C0();
          v111 = v176;
        }
        v112 = v111[2];
        if (v112 >= v111[3] >> 1)
        {
          sub_1000AE9C0();
          v111 = v177;
        }
        v113 = v253;
        v111[2] = v112 + 1;
        sub_100098AC8();
        sub_1000ED340((uint64_t)v111 + v114 + *(_QWORD *)(v115 + 72) * v112, v245, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v115 + 32));
        v116 = *(_QWORD *)(v240 + 16);
        v246 = v111;
        if (v116)
        {
          sub_100098AC8();
          v119 = v117 + v118;
          v120 = swift_bridgeObjectRetain(v117);
          v256 = *(char **)(v0 + 72);
          v121 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 16);
          v122 = v252;
          do
          {
            v121(v122, v119, v48, v120);
            ((void (*)(char *, uint64_t, uint64_t))v121)(v54, v122, v48);
            v123 = (*(uint64_t (**)(char *, uint64_t))(v0 + 88))(v54, v48);
            if (v123 == v113)
            {
              sub_1000BE774((uint64_t)v54, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 96));
              v124 = sub_1000BA294(&qword_100BC3488);
              sub_100098BAC((uint64_t)&v54[*(int *)(v124 + 48)]);
              sub_1000215BC((uint64_t)v54, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
            }
            else if (v123 == (_DWORD)v255)
            {
              sub_1000BE774((uint64_t)v54, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 96));
              v125 = &v54[*(int *)(sub_1000BA294(&qword_100BC3480) + 48)];
              v126 = v250;
              sub_10007802C((uint64_t)v54, v250, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
              v128 = static SavedLocation.== infix(_:_:)(v126, v254, v127);
              v129 = v126;
              v113 = v253;
              sub_1000215BC(v129, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
              v130 = (uint64_t)v125;
              v122 = v252;
              sub_100098BAC(v130);
              if ((v128 & 1) != 0)
              {
                sub_1000FC6B8();
                v171 = v234;
                v172 = sub_100099C00();
                sub_100099B30(v172, v173, v174);
                v175 = 0;
                goto LABEL_29;
              }
            }
            else
            {
              sub_1000BE774((uint64_t)v54, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
            }
            sub_1000BE774(v122, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
            v119 += (uint64_t)v256;
            --v116;
          }
          while (v116);
          sub_1000FC6B8();
        }
        v175 = 1;
        v171 = v234;
LABEL_29:
        sub_10009E61C(v171, v175);
        v131 = sub_1000BA294(&qword_100BC3480);
        v132 = v249 + *(int *)(v131 + 48);
        sub_100080C0C(v254, v249, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
        v133 = v235;
        sub_100037768(v171, v235, &qword_100C0B8D0);
        v134 = sub_100088FC8(v133, 1, v48);
        if (v74)
        {
          sub_100098BAC(v171);
          sub_100098BAC(v133);
          v135 = type metadata accessor for LocationOfInterest(0);
          _s7Weather24LocationCompositionStateOwst_0(v132, 1, 1, v135);
        }
        else
        {
          LocationModel.locationOfInterest.getter(v134);
          sub_100098BAC(v171);
          sub_1000BE774(v133, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
        }
        v81 = v249;
        v136 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v0 + 104))(v249, v255, v48);
        v1 = SavedLocation.id.getter(v136);
        sub_100099B30(v244, v81, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16));
        v80 = (unint64_t)v259;
        v77 = sub_100109A6C();
        v257 = (_QWORD *)v80;
        v259 = (_QWORD *)0x8000000000000000;
        sub_1000DA784();
        sub_10011DD3C();
        if (v139)
        {
          __break(1u);
          goto LABEL_78;
        }
        v81 = v137;
        v140 = v138;
        sub_1000BA294(&qword_100BC3608);
        if (sub_1000C6F4C())
        {
          v141 = sub_1000DA784();
          if ((v140 & 1) != (v142 & 1))
            goto LABEL_84;
          v81 = v141;
        }
        v80 = (unint64_t)v257;
        if ((v140 & 1) != 0)
        {
          sub_100099B30(v257[7] + *(_QWORD *)(v0 + 72) * v81, v244, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 40));
        }
        else
        {
          sub_1000D9878();
          sub_100099B30(v143 + *(_QWORD *)(v0 + 72) * v81, v244, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 32));
          v144 = *(_QWORD *)(v80 + 16);
          v139 = __OFADD__(v144, 1);
          v145 = v144 + 1;
          if (v139)
            goto LABEL_79;
          *(_QWORD *)(v80 + 16) = v145;
          sub_1000878DC();
        }
        v259 = v257;
        sub_10009895C();
        sub_1000986E8();
        v146 = v233;
        v105 = v254;
        SavedLocation.location.getter(v147);
        v148 = v247;
        sub_100088FC8(v146, 1, v247);
        if (v74)
        {
          sub_1000BE774(v249, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
          sub_1000215BC(v105, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
          sub_100021A14(v146, &qword_100BC35F8);
        }
        else
        {
          v149 = v248;
          v150 = *(void (**)(uint64_t, uint64_t, uint64_t))(v248 + 32);
          v151 = v239;
          v150(v239, v146, v148);
          v152 = *(void (**)(uint64_t, uint64_t, uint64_t))(v149 + 16);
          sub_1000F3DFC(v232, v151);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v251);
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_1000996BC();
            v251 = v178;
          }
          v154 = v251[2];
          v81 = v154 + 1;
          if (v154 >= v251[3] >> 1)
          {
            sub_1000C1070();
            v251 = v179;
          }
          v251[2] = v81;
          sub_100098AC8();
          v256 = *(char **)(v157 + 72);
          v227 = v150;
          v158 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v150)(v156 + v155 + (_QWORD)v256 * v154, v232, v148);
          v159 = SavedLocation.id.getter(v158);
          v160 = v148;
          v1 = v159;
          v152(v231, v239, v160);
          v80 = (unint64_t)v258;
          v77 = sub_100109A6C();
          v257 = (_QWORD *)v80;
          v258 = (_QWORD *)0x8000000000000000;
          sub_1000DA784();
          sub_10011DD3C();
          if (v139)
            goto LABEL_80;
          v81 = v161;
          v163 = v162;
          sub_1000BA294(&qword_100BC3600);
          if (sub_1000C6F4C())
          {
            v164 = sub_1000DA784();
            if ((v163 & 1) != (v165 & 1))
            {
LABEL_84:
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
              __break(1u);
              return;
            }
            v81 = v164;
          }
          v80 = (unint64_t)v257;
          if ((v163 & 1) != 0)
          {
            v1 = v247;
            v166 = v248;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v248 + 40))(v257[7] + v81 * (_QWORD)v256, v231, v247);
          }
          else
          {
            sub_1000D9878();
            v1 = v247;
            v227(v167 + v81 * (_QWORD)v256, v231, v247);
            v168 = *(_QWORD *)(v80 + 16);
            v139 = __OFADD__(v168, 1);
            v169 = v168 + 1;
            if (v139)
              goto LABEL_82;
            *(_QWORD *)(v80 + 16) = v169;
            sub_1000878DC();
            v166 = v248;
          }
          v258 = v257;
          sub_10009895C();
          v170 = sub_1000986E8();
          (*(void (**)(uint64_t, uint64_t, double))(v166 + 8))(v239, v1, v170);
          sub_1000BE774(v249, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
          v105 = v254;
          sub_1000215BC(v254, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
        }
        v109 = v241 + 1;
        if (v241 + 1 == v230)
        {
          v180 = v226;
          sub_1000986C4();
          goto LABEL_59;
        }
      }
    }
    v180 = v75;
LABEL_59:
    sub_1000989F8();
    v181 = v240;
    sub_10009EF94();
    sub_1006E8EC4(v180, v181, v180);
    v183 = v182;
    sub_1000986C4();
    v184 = *(char **)(v183 + 16);
    v185 = v248;
    if (!v184)
      break;
    v254 = 0;
    type metadata accessor for LocationOfInterest(0);
    sub_1000BBD24();
    v54 = (char *)(v183 + v186);
    v255 = *(_QWORD *)(v187 + 72);
    v253 = v183;
    v188 = sub_10009EF94();
    while (1)
    {
      LocationOfInterest.location.getter(v188);
      sub_10011DBD0(v243);
      if ((swift_isUniquelyReferenced_nonNull_native(v251) & 1) == 0)
      {
        sub_1000996BC();
        v251 = v209;
      }
      v190 = v251[2];
      v189 = v251[3];
      v256 = v184;
      if (v190 >= v189 >> 1)
      {
        sub_1000C67D4(v189);
        sub_10009ADAC();
        v251 = v210;
      }
      v251[2] = v190 + 1;
      sub_1000BEFA8();
      v48 = *(_QWORD *)(v185 + 72);
      v192 = v191 + v48 * v190;
      v77 = *(_QWORD *)(v185 + 32);
      v193 = sub_1000F3DFC(v192, v243);
      v194 = Location.id.getter(v193);
      v196 = v195;
      sub_10011DBD0(v242);
      v80 = (unint64_t)v258;
      v1 = sub_100109A6C();
      v257 = (_QWORD *)v80;
      v258 = (_QWORD *)0x8000000000000000;
      v197 = sub_1000EFA3C();
      v199 = *(_QWORD *)(v80 + 16);
      v200 = (v198 & 1) == 0;
      v81 = v199 + v200;
      if (__OFADD__(v199, v200))
        break;
      v201 = v197;
      v0 = v198;
      sub_1000BA294(&qword_100BC3600);
      v80 = (unint64_t)&v257;
      v202 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v1, v81);
      v1 = v247;
      if (v202)
      {
        v80 = (unint64_t)v257;
        v203 = sub_1000EFA3C();
        if ((v0 & 1) != (v204 & 1))
          goto LABEL_84;
        v201 = v203;
      }
      v81 = (uint64_t)v257;
      if ((v0 & 1) != 0)
      {
        v185 = v248;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v248 + 40))(v257[7] + v201 * v48, v242, v1);
      }
      else
      {
        v257[(v201 >> 6) + 8] |= 1 << v201;
        v205 = (uint64_t *)(*(_QWORD *)(v81 + 48) + 16 * v201);
        *v205 = v194;
        v205[1] = v196;
        sub_1000F3DFC(*(_QWORD *)(v81 + 56) + v201 * v48, v242);
        v206 = *(_QWORD *)(v81 + 16);
        v139 = __OFADD__(v206, 1);
        v207 = v206 + 1;
        if (v139)
          goto LABEL_81;
        *(_QWORD *)(v81 + 16) = v207;
        sub_1000878DC();
        v185 = v248;
      }
      v258 = v257;
      sub_10009895C();
      v208 = sub_1000986E8();
      v188 = (*(uint64_t (**)(uint64_t, uint64_t, double))(v185 + 8))(v238, v1, v208);
      v54 += v255;
      v184 = v256 - 1;
      if (v256 == (char *)1)
      {
        swift_bridgeObjectRelease_n(v253, 2);
        goto LABEL_76;
      }
    }
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    sub_10009AD84();
    v246 = v217;
  }
  sub_1000986E8();
LABEL_76:
  v211 = v222;
  v212 = v224;
  v213 = v240;
  *(_QWORD *)(v224 + v222[6]) = v240;
  v214 = v251;
  *(_QWORD *)(v212 + v211[8]) = v251;
  sub_1000878DC();
  sub_100094EDC();
  v215 = sub_1006E95A0(v213);
  sub_100021A14(v223, (uint64_t *)&unk_100C0D170);
  sub_10009895C();
  swift_bridgeObjectRelease(v246);
  *(_QWORD *)(v212 + v211[9]) = v215;
  v216 = v258;
  *(_QWORD *)(v212 + v211[10]) = v259;
  swift_bridgeObjectRelease(v214);
  *(_QWORD *)(v212 + v211[11]) = v216;
  *(_QWORD *)(v212 + v211[7]) = v225;
  sub_100098640();
}

void sub_1006EB120()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000986AC();
  v2 = v1;
  sub_1000BA294((uint64_t *)&unk_100C0D170);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100098728();
  sub_100037768(v0, v5 - v4, (uint64_t *)&unk_100C0D170);
  v6 = *(_QWORD *)(v0 + *(int *)(sub_1000E73D0() + 48));
  swift_bridgeObjectRetain(v2);
  sub_1000989F8();
  sub_100094EDC();
  sub_1000BE7F4(v6);
  sub_10009EF94();
  sub_1006EA08C();
  sub_100098640();
}

void sub_1006EB1F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1000986AC();
  v2 = v0;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  sub_1000BA294((uint64_t *)&unk_100C0D170);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100094EC4();
  sub_1000CDC2C(v2, v1);
  v12 = *(_QWORD *)(v2 + *(int *)(sub_1000E73D0() + 20));
  v13 = v10;
  if (v6 < 2u)
    goto LABEL_4;
  if (v6 == 2)
  {
    v13 = v8;
LABEL_4:
    swift_bridgeObjectRetain(v13);
  }
  sub_100163980(v10, v8, v6);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v4);
  sub_10003BCC8();
  sub_1006EA08C();
  sub_100098640();
}

void sub_1006EB2E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, char *, uint64_t);
  __n128 v26;
  _QWORD *v27;
  void (*v28)(uint64_t, char *, uint64_t);
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  char v35;
  uint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  int v51;
  uint64_t v52;
  void (*v53)(uint64_t, char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  sub_1000986AC();
  sub_1000BA294(&qword_100BC61F0);
  sub_1000B42B0();
  __chkstk_darwin(v1);
  sub_100098728();
  v4 = v3 - v2;
  v5 = sub_1000DB35C();
  v49 = *(_QWORD *)(v5 - 8);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_1000986FC();
  v56 = v7;
  sub_10009D2A4();
  __chkstk_darwin(v8);
  sub_1000860D0();
  v48 = v9;
  sub_10009D2A4();
  __chkstk_darwin(v10);
  sub_100079F7C();
  v47 = v11;
  v12 = sub_1000CDDC8();
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_10009883C();
  v16 = v14 - v15;
  __chkstk_darwin(v17);
  v19 = (char *)&v44 - v18;
  v20 = sub_1000E73D0();
  v21 = *(_QWORD *)(*(_QWORD *)(v0 + *(int *)(v20 + 24)) + 16);
  if (v21)
  {
    v45 = v20;
    v46 = v0;
    sub_100098AC8();
    v24 = v23 + v22;
    v25 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 16);
    v52 = *(_QWORD *)(v13 + 72);
    v53 = v25;
    v51 = enum case for LocationModel.saved(_:);
    v44 = v23;
    v26 = swift_bridgeObjectRetain(v23);
    v27 = _swiftEmptyArrayStorage;
    v54 = v13;
    v55 = v5;
    do
    {
      v28 = v53;
      ((void (*)(char *, uint64_t, uint64_t, __n128))v53)(v19, v24, v12, v26);
      v28(v16, v19, v12);
      v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 88))(v16, v12);
      if (v29 == v51)
      {
        (*(void (**)(uint64_t, uint64_t))(v13 + 96))(v16, v12);
        v30 = v16 + *(int *)(sub_1000BA294(&qword_100BC3480) + 48);
        v50 = v27;
        v31 = v13;
        v32 = v48;
        sub_10007802C(v16, v48, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
        v33 = v30;
        v5 = v55;
        sub_100021A14(v33, &qword_100BC3118);
        sub_10007802C(v32, v4, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
        sub_1000C4638(v4, 0);
        v27 = v50;
        (*(void (**)(char *, uint64_t))(v31 + 8))(v19, v12);
      }
      else
      {
        v34 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
        v34(v16, v12);
        sub_1000C4638(v4, 1);
        v34((uint64_t)v19, v12);
      }
      sub_100088FC8(v4, 1, v5);
      if (v35)
      {
        sub_100021A14(v4, &qword_100BC61F0);
      }
      else
      {
        v36 = v47;
        sub_10007802C(v4, v47, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
        sub_10007802C(v36, v56, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v27);
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1000BDB4C();
          sub_100119A2C();
          v27 = v41;
        }
        v38 = v27[2];
        if (v38 >= v27[3] >> 1)
        {
          sub_100119A2C();
          v27 = v42;
        }
        v27[2] = v38 + 1;
        sub_1000EB0DC();
        sub_10007802C(v56, v39 + v40 * v38, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
        v5 = v55;
      }
      v24 += v52;
      --v21;
      v13 = v54;
    }
    while (v21);
    swift_bridgeObjectRelease();
    v20 = v45;
    v0 = v46;
  }
  else
  {
    v27 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v20 + 20)));
  sub_1006E9378(v43, (uint64_t)v27);
  sub_100098640();
}

void sub_1006EB624(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  int *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  swift_bridgeObjectRelease();
  sub_100037768(a1, a8, (uint64_t *)&unk_100C0D170);
  v18 = (int *)sub_1000E73D0();
  *(_QWORD *)(a8 + v18[5]) = a2;
  *(_QWORD *)(a8 + v18[6]) = a3;
  *(_QWORD *)(a8 + v18[7]) = a4;
  *(_QWORD *)(a8 + v18[8]) = a5;
  v19 = sub_100094EDC();
  v20 = sub_1006E95A0(v19);
  sub_100021A14(a1, (uint64_t *)&unk_100C0D170);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a8 + v18[9]) = v20;
  *(_QWORD *)(a8 + v18[10]) = a6;
  *(_QWORD *)(a8 + v18[11]) = a7;
  v21 = a8 + v18[12];
  *(_QWORD *)v21 = a9;
  *(_QWORD *)(v21 + 8) = a10;
  *(_BYTE *)(v21 + 16) = a11;
  *(_QWORD *)(a8 + v18[13]) = a12;
}

uint64_t sub_1006EB748@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, __n128);
  __n128 v24;
  int v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t, uint64_t, __n128);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;

  v51 = a2;
  v5 = type metadata accessor for CurrentLocation(0);
  __chkstk_darwin(v5);
  v50 = (uint64_t)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocationModel(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v44 - v12;
  v14 = sub_1000BA294(&qword_100C0B8D0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v47 = (char *)&v44 - v18;
  v19 = *(_QWORD *)(a1 + 16);
  if (v19)
  {
    v45 = v17;
    v46 = a3;
    v20 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v21 = enum case for LocationModel.current(_:);
    v49 = enum case for LocationModel.saved(_:);
    v22 = *(_QWORD *)(v8 + 72);
    v23 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16);
    v44 = a1;
    v24 = swift_bridgeObjectRetain(a1);
    v48 = v21;
    do
    {
      v23(v13, v20, v7, v24);
      ((void (*)(char *, char *, uint64_t))v23)(v11, v13, v7);
      v25 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v11, v7);
      if (v25 == v21)
      {
        (*(void (**)(char *, uint64_t))(v8 + 96))(v11, v7);
        v52 = &v11[*(int *)(sub_1000BA294(&qword_100BC3488) + 48)];
        v26 = (uint64_t)v11;
        v27 = v11;
        v28 = v23;
        v29 = v7;
        v30 = v13;
        v31 = v22;
        v32 = v8;
        v33 = v50;
        sub_10007802C(v26, v50, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
        v34 = static CurrentLocation.== infix(_:_:)(v33, v51);
        v35 = v33;
        v8 = v32;
        v22 = v31;
        v13 = v30;
        v7 = v29;
        v23 = v28;
        v11 = v27;
        sub_1000215BC(v35, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
        v21 = v48;
        sub_100021A14((uint64_t)v52, &qword_100BC3118);
        if ((v34 & 1) != 0)
        {
          v37 = swift_bridgeObjectRelease(v44);
          v38 = (uint64_t)v47;
          (*(void (**)(char *, char *, uint64_t, __n128))(v8 + 32))(v47, v13, v7, v37);
          v39 = 0;
          v17 = v45;
          a3 = v46;
          goto LABEL_13;
        }
      }
      else if (v25 == v49)
      {
        (*(void (**)(char *, uint64_t))(v8 + 96))(v11, v7);
        v36 = sub_1000BA294(&qword_100BC3480);
        sub_100021A14((uint64_t)&v11[*(int *)(v36 + 48)], &qword_100BC3118);
        sub_1000215BC((uint64_t)v11, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      }
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
      v20 += v22;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease(v44);
    v39 = 1;
    v17 = v45;
    a3 = v46;
  }
  else
  {
    v39 = 1;
  }
  v38 = (uint64_t)v47;
LABEL_13:
  _s7Weather24LocationCompositionStateOwst_0(v38, v39, 1, v7);
  v40 = a3 + *(int *)(sub_1000BA294(&qword_100BC3488) + 48);
  sub_100080C0C(v51, a3, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
  sub_100037768(v38, (uint64_t)v17, &qword_100C0B8D0);
  v41 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v17, 1, v7);
  if ((_DWORD)v41 == 1)
  {
    sub_100021A14(v38, &qword_100C0B8D0);
    sub_100021A14((uint64_t)v17, &qword_100C0B8D0);
    v42 = type metadata accessor for LocationOfInterest(0);
    _s7Weather24LocationCompositionStateOwst_0(v40, 1, 1, v42);
  }
  else
  {
    LocationModel.locationOfInterest.getter(v41);
    sub_100021A14(v38, &qword_100C0B8D0);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v17, v7);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(a3, enum case for LocationModel.current(_:), v7);
}

uint64_t sub_1006EBB64(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;

  if (a1 == 0x746E6572727563 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E6572727563, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6465766173 && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6465766173, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 7105633 && a2 == 0xE300000000000000)
  {
    v10 = 0xE300000000000000;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7105633, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100A115D0)
  {
    v11 = 0x8000000100A115D0;
LABEL_30:
    swift_bridgeObjectRelease(v11);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100A115D0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_30;
  }
  if (a1 == 0xD000000000000018)
  {
    v12 = 0x8000000100A115F0;
    if (a2 == 0x8000000100A115F0)
      goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000100A115F0, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_35:
    swift_bridgeObjectRelease(v12);
    return 4;
  }
  if (a1 == 0x746E6564496C6C61 && a2 == 0xEE00737265696669)
  {
    v14 = 0xEE00737265696669;
    goto LABEL_43;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E6564496C6C61, 0xEE00737265696669, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_43:
    swift_bridgeObjectRelease(v14);
    return 5;
  }
  if (a1 == 0x64657070616DLL && a2 == 0xE600000000000000)
  {
    v16 = 0xE600000000000000;
    goto LABEL_51;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64657070616DLL, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_51:
    swift_bridgeObjectRelease(v16);
    return 6;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x8000000100A11610)
  {
    v17 = 0x8000000100A11610;
LABEL_57:
    swift_bridgeObjectRelease(v17);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100A11610, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_57;
  }
  if (a1 == 0xD000000000000018)
  {
    v18 = 0x8000000100A11630;
    if (a2 == 0x8000000100A11630)
      goto LABEL_62;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000100A11630, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
LABEL_62:
    swift_bridgeObjectRelease(v18);
    return 8;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x8000000100A11650)
  {
    swift_bridgeObjectRelease(0x8000000100A11650);
    return 9;
  }
  else
  {
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000100A11650, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v19 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t sub_1006EBF34(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1006EBF68 + 4 * byte_1009C0DE0[a1]))(0x746E6572727563, 0xE700000000000000);
}

uint64_t sub_1006EBF68()
{
  return 0x6465766173;
}

uint64_t sub_1006EBF7C()
{
  return 7105633;
}

unint64_t sub_1006EBF8C()
{
  return 0xD000000000000013;
}

unint64_t sub_1006EC008()
{
  return 0xD000000000000018;
}

uint64_t sub_1006EC030()
{
  unsigned __int8 *v0;

  return sub_1006EBF34(*v0);
}

uint64_t sub_1006EC038@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1006EBB64(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006EC05C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006EF044();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006EC084(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006EF044();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1006EC0AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_1000986AC();
  v2 = sub_1000DB35C();
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100099864();
  v4 = *(_QWORD *)(v0 + *(int *)(sub_1000E73D0() + 20));
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    sub_100094EDC();
    sub_10009AAB0();
    sub_100098AC8();
    v7 = v4 + v6;
    v18 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_100080C0C(v7, v1, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
      v9 = SavedLocation.id.getter(v8);
      v11 = v10;
      sub_1000215BC(v1, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_10009AAB0();
      v12 = _swiftEmptyArrayStorage[2];
      if (v12 >= _swiftEmptyArrayStorage[3] >> 1)
        sub_10009AAB0();
      _swiftEmptyArrayStorage[2] = v12 + 1;
      v13 = &_swiftEmptyArrayStorage[2 * v12];
      v13[4] = v9;
      v13[5] = v11;
      v7 += v18;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  sub_100120C2C((uint64_t)_swiftEmptyArrayStorage);
  v15 = v14;
  v16 = Location.id.getter(v14);
  sub_100120D14(v16, v17, v15);
  sub_1000986C4();
  sub_1000986E8();
  sub_100098640();
}

void sub_1006EC234(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  uint64_t v17;

  sub_1000BA294(&qword_100BC3118);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100094EC4();
  v8 = type metadata accessor for LocationModel(0);
  sub_100099300();
  __chkstk_darwin(v9);
  sub_100098694();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, a1, v8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 88))(v2, v8);
  if (v10 == enum case for LocationModel.current(_:))
  {
    sub_100098B40(v2, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 96));
    v11 = sub_1000BA294(&qword_100BC3488);
    sub_1000787D4(v2 + *(int *)(v11 + 48), v3, &qword_100BC3118);
    sub_1006EB2E8();
    v13 = *(_QWORD *)(v12 + 16);
    swift_bridgeObjectRelease();
    if (v13)
    {
      sub_1000787D4(v3, a2, &qword_100BC3118);
    }
    else
    {
      sub_100021A14(v3, &qword_100BC3118);
      v17 = sub_1000AE824();
      sub_1000BAC70(v17);
    }
    v15 = (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation;
    goto LABEL_9;
  }
  if (v10 == enum case for LocationModel.saved(_:))
  {
    sub_100098B40(v2, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 96));
    v14 = sub_1000BA294(&qword_100BC3480);
    sub_1000787D4(v2 + *(int *)(v14 + 48), a2, &qword_100BC3118);
    v15 = (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation;
LABEL_9:
    sub_1000215BC(v2, v15);
    goto LABEL_10;
  }
  v16 = sub_1000AE824();
  sub_1000BAC70(v16);
  sub_100098B40(v2, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
LABEL_10:
  sub_100089054();
}

uint64_t sub_1006EC3CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;

  v37 = sub_1000AE824();
  v3 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  sub_100098728();
  v6 = v5 - v4;
  v38 = type metadata accessor for LocationOfInterestType(0);
  v7 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  sub_10009883C();
  v10 = v8 - v9;
  __chkstk_darwin(v11);
  sub_100079F7C();
  v33 = v13;
  v14 = *(_QWORD *)(a2 + 16);
  v15 = (char *)_swiftEmptyArrayStorage;
  if (v14)
  {
    v39 = (char *)_swiftEmptyArrayStorage;
    sub_100605B5C();
    sub_100098AC8();
    v17 = a2 + v16;
    v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    v35 = *(_QWORD *)(v3 + 72);
    v36 = v3;
    do
    {
      v18 = v34(v6, v17, v37);
      LocationOfInterest.type.getter(v18);
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v37);
      v15 = v39;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100605B5C();
        v15 = v39;
      }
      v19 = *((_QWORD *)v15 + 2);
      if (v19 >= *((_QWORD *)v15 + 3) >> 1)
      {
        sub_100605B5C();
        v15 = v39;
      }
      *((_QWORD *)v15 + 2) = v19 + 1;
      sub_100098AC8();
      v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 32))(&v15[v20 + *(_QWORD *)(v7 + 72) * v19], v10, v38);
      v39 = v15;
      v3 = v36;
      v17 += v35;
      --v14;
    }
    while (v14);
  }
  LocationOfInterest.type.getter(v12);
  v22 = *((_QWORD *)v15 + 2);
  if (v22)
  {
    sub_100098AC8();
    v24 = &v15[v23];
    v25 = *(_QWORD *)(v7 + 72);
    sub_10000F1C8(&qword_100BC3140, (uint64_t (*)(uint64_t))&type metadata accessor for LocationOfInterestType);
    v27 = v26;
    swift_bridgeObjectRetain();
    v28 = v22 - 1;
    do
    {
      v29 = v28;
      v30 = dispatch thunk of static Equatable.== infix(_:_:)(v24, v33, v38, v27);
      if ((v30 & 1) != 0)
        break;
      v28 = v29 - 1;
      v24 += v25;
    }
    while (v29);
    v31 = v30 ^ 1;
    v21 = swift_bridgeObjectRelease();
  }
  else
  {
    v31 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, __n128))(v7 + 8))(v33, v38, v21);
  swift_bridgeObjectRelease();
  return v31 & 1;
}

void sub_1006EC65C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 *v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t);
  __int128 v25;
  char v26;
  char v27;

  v3 = v1;
  v5 = sub_1000BA294(&qword_100BFFD48);
  sub_100099300();
  __chkstk_darwin(v6);
  sub_100079FBC();
  v7 = a1[3];
  v8 = a1[4];
  sub_1000DB418(a1, v7);
  v9 = sub_1006EF044();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LocationsState.CodingKeys, &type metadata for LocationsState.CodingKeys, v9, v7, v8);
  LOBYTE(v25) = 0;
  v10 = type metadata accessor for CurrentLocation(0);
  sub_10000F1C8(&qword_100BFFD50, (uint64_t (*)(uint64_t))&type metadata accessor for CurrentLocation);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3, &v25, v5, v10, v11);
  if (!v2)
  {
    v12 = (int *)type metadata accessor for LocationsState(0);
    sub_1000BD6A0(v12[5]);
    v27 = 1;
    sub_1000BA294(&qword_100BF7410);
    v13 = sub_1006EF4B4();
    sub_1000BC950(v13);
    sub_1000BD6A0(v12[6]);
    v27 = 2;
    sub_1000BA294(&qword_100BFFCD0);
    v14 = sub_1006EF530();
    sub_1000BC950(v14);
    sub_1000BD6A0(v12[7]);
    v27 = 3;
    sub_1000BA294(&qword_100BC5E18);
    v15 = sub_100555324();
    sub_1000BC950(v15);
    sub_1000BD6A0(v12[8]);
    v27 = 4;
    sub_1000BA294(&qword_100BFFCE8);
    v16 = sub_1006EF5AC();
    sub_1000BC950(v16);
    sub_1000BD6A0(v12[9]);
    v27 = 5;
    sub_1000BA294(&qword_100BFFCF8);
    v17 = sub_1006EF628();
    sub_1000BC950(v17);
    sub_1000BD6A0(v12[10]);
    v27 = 6;
    sub_1000BA294(&qword_100BFFD08);
    v18 = sub_1006EF6A4();
    sub_1000BC950(v18);
    sub_1000BD6A0(v12[11]);
    v27 = 7;
    sub_1000BA294(&qword_100BFFD18);
    v19 = sub_1006EF728();
    sub_1000BC950(v19);
    v20 = (__int128 *)(v3 + v12[12]);
    v21 = *((_BYTE *)v20 + 16);
    v25 = *v20;
    v26 = v21;
    v27 = 8;
    sub_1006EF7AC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v25, &v27, v5, &type metadata for LocationsOfInterestState);
    sub_1000BD6A0(v12[13]);
    v27 = 9;
    sub_1000BA294(&qword_100BFFD30);
    v22 = sub_1006EF7E8();
    sub_1000BC950(v22);
  }
  v23 = sub_100099C00();
  v24(v23);
  sub_100089054();
}

void sub_1006EC928(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  __int128 v18;
  char v19;
  int v20;
  char v21;

  sub_1000BA294((uint64_t *)&unk_100C0D170);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_10007A130();
  v15 = sub_1000BA294(&qword_100BFFCA8);
  __chkstk_darwin(v15);
  sub_100098728();
  v17 = (int *)type metadata accessor for LocationsState(0);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100088FDC();
  v16 = v8;
  v10 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v10);
  v11 = sub_1006EF044();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LocationsState.CodingKeys, &type metadata for LocationsState.CodingKeys, v11, v10, v9);
  if (v2)
  {
    sub_1000C52EC();
  }
  else
  {
    v12 = type metadata accessor for CurrentLocation(0);
    LOBYTE(v18) = 0;
    sub_10000F1C8(&qword_100BFFCB8, (uint64_t (*)(uint64_t))&type metadata accessor for CurrentLocation);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v12, &v18, v15, v12);
    sub_1000787D4(v3, v16, (uint64_t *)&unk_100C0D170);
    sub_1000BA294(&qword_100BF7410);
    v21 = 1;
    sub_1006EF080();
    sub_1000BB460();
    *(_QWORD *)(v16 + v17[5]) = v18;
    sub_1000BA294(&qword_100BFFCD0);
    v21 = 2;
    sub_1006EF0FC();
    sub_1000BB460();
    *(_QWORD *)(v16 + v17[6]) = v18;
    sub_1000BA294(&qword_100BC5E18);
    v21 = 3;
    sub_1006EF178();
    sub_1000BB460();
    *(_QWORD *)(v16 + v17[7]) = v18;
    sub_1000BA294(&qword_100BFFCE8);
    v21 = 4;
    sub_1006EF1F4();
    sub_1000BB460();
    *(_QWORD *)(v16 + v17[8]) = v18;
    sub_1000BA294(&qword_100BFFCF8);
    v21 = 5;
    sub_1006EF270();
    sub_1000BB460();
    *(_QWORD *)(v16 + v17[9]) = v18;
    sub_1000BA294(&qword_100BFFD08);
    v21 = 6;
    sub_1006EF2EC();
    sub_1000BB460();
    v20 = 1;
    *(_QWORD *)(v16 + v17[10]) = v18;
    sub_1000BA294(&qword_100BFFD18);
    v21 = 7;
    sub_1006EF370();
    sub_1000BB460();
    *(_QWORD *)(v16 + v17[11]) = v18;
    v21 = 8;
    sub_1006EF3F4();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for LocationsOfInterestState, &v21, v15);
    v13 = v19;
    v14 = v16 + v17[12];
    *(_OWORD *)v14 = v18;
    *(_BYTE *)(v14 + 16) = v13;
    sub_1000BA294(&qword_100BFFD30);
    v21 = 9;
    sub_1006EF430();
    sub_1000BB460();
    sub_1000CE008();
    *(_QWORD *)(v16 + v17[13]) = v18;
    sub_100080C0C(v16, a2, type metadata accessor for LocationsState);
    sub_1000C52EC();
    sub_1000215BC(v16, type metadata accessor for LocationsState);
  }
}

void sub_1006ECEA0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1006EC928(a1, a2);
}

void sub_1006ECEB4(_QWORD *a1)
{
  sub_1006EC65C(a1);
}

void sub_1006ECEC8(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  a1[3] = sub_1000BA294(&qword_100BFFDA8);
  sub_10003D2DC(&qword_100BFFDB0, &qword_100BFFDA8);
  a1[4] = v3;
  sub_10005F164(a1);
  v4 = sub_1000E73D0();
  ShortDescription.init(name:_:)(0x6E6F697461636F4CLL, 0xEE00657461745373, v2, v4);
  sub_100079F70();
}

void sub_1006ECF80(_QWORD *a1@<X8>)
{
  sub_1006ECEC8(a1);
}

uint64_t sub_1006ECF94(uint64_t a1)
{
  uint64_t v2;

  sub_10000F1C8(&qword_100BFFDB8, type metadata accessor for LocationsState);
  return ShortDescribable.description.getter(a1, v2);
}

void sub_1006ECFD4()
{
  sub_1006B4F50();
}

void sub_1006ECFE8(uint64_t a1)
{
  sub_1006B49E8(a1);
}

void sub_1006ECFFC()
{
  sub_10000F1C8(&qword_100BFFC90, type metadata accessor for LocationsState);
}

_QWORD *sub_1006ED028(uint64_t a1)
{
  return sub_1006ED060(a1, &qword_100BF6820, (uint64_t)&qword_100BCC820, (uint64_t (*)(uint64_t *, char *, uint64_t, uint64_t))sub_1006EDF6C);
}

_QWORD *sub_1006ED044(uint64_t a1)
{
  return sub_1006ED060(a1, &qword_100BF6818, (uint64_t)&qword_100BCF320, (uint64_t (*)(uint64_t *, char *, uint64_t, uint64_t))sub_1006EE27C);
}

_QWORD *sub_1006ED060(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t *, char *, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return _swiftEmptyArrayStorage;
  v7 = sub_1000BA294(a2);
  v8 = *(_QWORD *)(sub_1000DA9E8() - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = (_QWORD *)swift_allocObject(v7, v11 + v9 * v4, v10 | 7);
  result = (_QWORD *)j__malloc_size(v12);
  if (v9)
  {
    if ((_QWORD *)((char *)result - v11) != (_QWORD *)0x8000000000000000 || v9 != -1)
    {
      v12[2] = v4;
      v12[3] = 2 * (((uint64_t)result - v11) / v9);
      sub_1000DA9E8();
      sub_100098AC8();
      v16 = a4(&v18, (char *)v12 + v15, v4, a1);
      v17 = v18;
      sub_1000989F8();
      sub_100163978(v17);
      if (v16 == v4)
        return v12;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1006ED184(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_1000BA294(&qword_100BE0D10);
  v4 = *(_QWORD *)(type metadata accessor for Location(0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_QWORD *)j__malloc_size(v8);
  if (v5)
  {
    if ((_QWORD *)((char *)result - v7) != (_QWORD *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      v11 = sub_1006EE60C(&v13, (uint64_t)v8 + v7, v1, a1);
      v12 = v13;
      swift_bridgeObjectRetain(a1);
      sub_100163978(v12);
      if (v11 == v1)
        return v8;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1006ED29C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_1000BA294(&qword_100BD1100);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100099864();
  sub_1000BA294(&qword_100BFFC98);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100079FBC();
  v6 = *a1;
  v22 = a1[1];
  v23 = v6;
  v7 = sub_1000DA9E8();
  sub_10003D2DC((unint64_t *)&qword_100BCBA00, &qword_100BCB9F8);
  v9 = dispatch thunk of Collection.distance(from:to:)(&v23, &v22, v7, v8);
  if (v9)
  {
    v10 = v9;
    if (v9 <= 0)
    {
      v16 = _swiftEmptyArrayStorage;
    }
    else
    {
      v11 = sub_1000BA294(&qword_100BF6570);
      v12 = *(_QWORD *)(type metadata accessor for HourWeather(0) - 8);
      v13 = *(_QWORD *)(v12 + 72);
      v14 = *(unsigned __int8 *)(v12 + 80);
      v15 = (v14 + 32) & ~v14;
      v16 = (_QWORD *)swift_allocObject(v11, v15 + v13 * v10, v14 | 7);
      v17 = j__malloc_size(v16);
      if (!v13)
      {
LABEL_13:
        __break(1u);
LABEL_14:
        __break(1u);
        return;
      }
      if (v17 - v15 == 0x8000000000000000 && v13 == -1)
        goto LABEL_14;
      v16[2] = v10;
      v16[3] = 2 * ((uint64_t)(v17 - v15) / v13);
    }
    type metadata accessor for HourWeather(0);
    sub_100098AC8();
    v20 = (char *)v16 + v19;
    sub_100037768((uint64_t)a1, v1, &qword_100BD1100);
    v21 = sub_1006EE8D4(v2, v20, v10);
    sub_100021A14(v2, &qword_100BFFC98);
    if (v21 == v10)
      return;
    __break(1u);
    goto LABEL_13;
  }
}

void sub_1006ED464()
{
  sub_1006ED49C();
}

void sub_1006ED480()
{
  sub_1006ED49C();
}

void sub_1006ED49C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t (*v3)(_QWORD);
  void (*v4)(uint64_t, uint64_t, char *);
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, char *);
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  size_t v18;
  uint64_t v20;
  uint64_t v21;

  sub_1000986AC();
  v6 = v5 >> 1;
  v7 = (v5 >> 1) - v1;
  if (__OFSUB__(v5 >> 1, v1))
  {
    __break(1u);
    goto LABEL_16;
  }
  if (!v7)
    goto LABEL_14;
  v8 = v4;
  v9 = v3;
  v10 = v1;
  v11 = v0;
  if (v7 > 0)
  {
    v12 = sub_1000BA294(v2);
    v13 = *(_QWORD *)(v9(0) - 8);
    v14 = *(_QWORD *)(v13 + 72);
    v15 = *(unsigned __int8 *)(v13 + 80);
    v16 = (v15 + 32) & ~v15;
    v17 = (_QWORD *)swift_allocObject(v12, v16 + v14 * v7, v15 | 7);
    v18 = j__malloc_size(v17);
    if (v14)
    {
      if (v18 - v16 != 0x8000000000000000 || v14 != -1)
      {
        v17[2] = v7;
        v17[3] = 2 * ((uint64_t)(v18 - v16) / v14);
        goto LABEL_12;
      }
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v17 = _swiftEmptyArrayStorage;
LABEL_12:
  if (v6 != v10)
  {
    v9(0);
    sub_1000BBD24();
    v8(v11 + *(_QWORD *)(v21 + 72) * v10, v7, (char *)v17 + v20);
LABEL_14:
    sub_100098640();
    return;
  }
LABEL_18:
  __break(1u);
}

void *sub_1006ED598(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __n128 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t, __n128);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t isStackAllocationSafe;
  char v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;

  v4 = type metadata accessor for Location(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v39 - v9;
  if (*(_QWORD *)(a2 + 16))
  {
    v41 = a1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = swift_bridgeObjectRetain(a1);
    if (v11)
    {
      v13 = 0;
      v39 = v5;
      v40 = (char *)(a2 + 56);
      while (1)
      {
        if (v13 >= v11)
          __break(1u);
        v14 = *(_QWORD *)(v5 + 72);
        v15 = a1
            + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
            + v14 * v13;
        v42 = v13 + 1;
        v16 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16);
        v16(v10, v15, v4, v12);
        v17 = *(_QWORD *)(a2 + 40);
        sub_10000F1C8(&qword_100BC35B0, (uint64_t (*)(uint64_t))&type metadata accessor for Location);
        v19 = dispatch thunk of Hashable._rawHashValue(seed:)(v17, v4, v18);
        v20 = a2;
        v21 = -1 << *(_BYTE *)(a2 + 32);
        v22 = v5;
        v23 = v19 & ~v21;
        if (((*(_QWORD *)&v40[(v23 >> 3) & 0xFFFFFFFFFFFFF8] >> v23) & 1) != 0)
          break;
        v27 = *(void (**)(char *, uint64_t))(v22 + 8);
LABEL_11:
        v27(v10, v4);
        a1 = v41;
        v13 = v42;
        v11 = *(_QWORD *)(v41 + 16);
        a2 = v20;
        v5 = v39;
        if (v42 == v11)
          goto LABEL_12;
      }
      v24 = ~v21;
      while (1)
      {
        ((void (*)(char *, unint64_t, uint64_t))v16)(v7, *(_QWORD *)(v20 + 48) + v23 * v14, v4);
        sub_10000F1C8((unint64_t *)&qword_100BC35B8, (uint64_t (*)(uint64_t))&type metadata accessor for Location);
        v26 = dispatch thunk of static Equatable.== infix(_:_:)(v7, v10, v4, v25);
        v27 = *(void (**)(char *, uint64_t))(v39 + 8);
        v27(v7, v4);
        if ((v26 & 1) != 0)
          break;
        v23 = (v23 + 1) & v24;
        if (((*(_QWORD *)&v40[(v23 >> 3) & 0xFFFFFFFFFFFFF8] >> v23) & 1) == 0)
          goto LABEL_11;
      }
      isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v27)(v10, v4);
      v29 = *(_BYTE *)(v20 + 32);
      v30 = v29 & 0x3F;
      v31 = (1 << v29) + 63;
      v32 = v31 >> 6;
      v33 = 8 * (v31 >> 6);
      if (v30 <= 0xD
        || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v31 >> 6), 8),
            (_DWORD)isStackAllocationSafe))
      {
        __chkstk_darwin(isStackAllocationSafe);
        memcpy((char *)&v39 - ((v33 + 15) & 0x3FFFFFFFFFFFFFF0), v40, v33);
        sub_1006ED950((unint64_t *)((char *)&v39 - ((v33 + 15) & 0x3FFFFFFFFFFFFFF0)), v32, v20, v23, &v41);
        v35 = v34;
        swift_release(v20);
        swift_bridgeObjectRelease(v41);
      }
      else
      {
        v36 = (void *)swift_slowAlloc(v33, -1);
        memcpy(v36, v40, v33);
        sub_1006ED950((unint64_t *)v36, v32, v20, v23, &v41);
        v35 = v37;
        swift_release(v20);
        swift_bridgeObjectRelease(v41);
        swift_slowDealloc(v36, -1, -1);
      }
      return (void *)v35;
    }
    else
    {
LABEL_12:
      swift_bridgeObjectRelease(a1);
    }
  }
  else
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
  return (void *)a2;
}

void sub_1006ED950(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(uint64_t, unint64_t, uint64_t, __n128);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v44 = a2;
  v9 = type metadata accessor for Location(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v44 - v17;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v21 = *(unint64_t *)((char *)a1 + v20);
  v45 = a1;
  *(unint64_t *)((char *)a1 + v20) = v21 & ((-1 << a4) - 1);
  v22 = v19 - 1;
  v23 = *a5;
  v24 = a5[1];
  v25 = *(_QWORD *)(*a5 + 16);
  v46 = v22;
  if (v24 == v25)
  {
LABEL_2:
    swift_retain();
    sub_1006EDC74(v45, v44, v46, a3);
    return;
  }
  v48 = v15;
  v49 = a3 + 56;
  v51 = v10;
  v26 = v15;
  v47 = a5;
  while (v24 < v25)
  {
    v27 = v23 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v50 = *(_QWORD *)(v10 + 72);
    v28 = v18;
    v29 = *(void (**)(uint64_t, unint64_t, uint64_t, __n128))(v10 + 16);
    v29(v26, v27 + v50 * v24, v9, v16);
    a5[1] = v24 + 1;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v28, v26, v9);
    v30 = *(_QWORD *)(a3 + 40);
    sub_10000F1C8(&qword_100BC35B0, (uint64_t (*)(uint64_t))&type metadata accessor for Location);
    v31 = v28;
    v33 = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v9, v32);
    v34 = a3;
    v35 = -1 << *(_BYTE *)(a3 + 32);
    v36 = v33 & ~v35;
    if (((*(_QWORD *)(v49 + ((v36 >> 3) & 0xFFFFFFFFFFFFF8)) >> v36) & 1) == 0)
    {
      v40 = *(void (**)(char *, uint64_t))(v51 + 8);
LABEL_11:
      v18 = v31;
      v40(v31, v9);
LABEL_12:
      a3 = v34;
      v10 = v51;
      v26 = v48;
      goto LABEL_13;
    }
    v37 = ~v35;
    while (1)
    {
      ((void (*)(char *, unint64_t, uint64_t))v29)(v12, *(_QWORD *)(v34 + 48) + v36 * v50, v9);
      sub_10000F1C8((unint64_t *)&qword_100BC35B8, (uint64_t (*)(uint64_t))&type metadata accessor for Location);
      v39 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v31, v9, v38);
      v40 = *(void (**)(char *, uint64_t))(v51 + 8);
      v40(v12, v9);
      if ((v39 & 1) != 0)
        break;
      v36 = (v36 + 1) & v37;
      if (((*(_QWORD *)(v49 + ((v36 >> 3) & 0xFFFFFFFFFFFFF8)) >> v36) & 1) == 0)
        goto LABEL_11;
    }
    v18 = v31;
    v40(v31, v9);
    v41 = (v36 >> 3) & 0x1FFFFFFFFFFFFFF8;
    v42 = *(unint64_t *)((char *)v45 + v41);
    *(unint64_t *)((char *)v45 + v41) = v42 & ~(1 << v36);
    if ((v42 & (1 << v36)) == 0)
      goto LABEL_12;
    v43 = v46 - 1;
    v10 = v51;
    v26 = v48;
    if (__OFSUB__(v46, 1))
      goto LABEL_20;
    a3 = v34;
    --v46;
    if (!v43)
      return;
LABEL_13:
    a5 = v47;
    v23 = *v47;
    v24 = v47[1];
    v25 = *(_QWORD *)(*v47 + 16);
    if (v24 == v25)
      goto LABEL_2;
  }
  __break(1u);
LABEL_20:
  __break(1u);
}

uint64_t sub_1006EDC74(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;

  v8 = type metadata accessor for Location(0);
  __chkstk_darwin(v8);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release(a4);
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  v40 = v9;
  sub_1000BA294(&qword_100BF6518);
  result = static _SetStorage.allocate(capacity:)(a3);
  v12 = result;
  v38 = a1;
  v39 = a2;
  if (a2 < 1)
    v14 = 0;
  else
    v14 = *a1;
  v15 = 0;
  v16 = result + 56;
  v17 = v40;
  while (1)
  {
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v19 = v18 | (v15 << 6);
    }
    else
    {
      v20 = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_40;
      if (v20 >= v39)
      {
LABEL_36:
        swift_release(a4);
        return v12;
      }
      v21 = v38[v20];
      ++v15;
      if (!v21)
      {
        v15 = v20 + 1;
        if (v20 + 1 >= v39)
          goto LABEL_36;
        v21 = v38[v15];
        if (!v21)
        {
          v15 = v20 + 2;
          if (v20 + 2 >= v39)
            goto LABEL_36;
          v21 = v38[v15];
          if (!v21)
          {
            v22 = v20 + 3;
            if (v22 >= v39)
              goto LABEL_36;
            v21 = v38[v22];
            if (!v21)
            {
              while (1)
              {
                v15 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_41;
                if (v15 >= v39)
                  goto LABEL_36;
                v21 = v38[v15];
                ++v22;
                if (v21)
                  goto LABEL_24;
              }
            }
            v15 = v22;
          }
        }
      }
LABEL_24:
      v14 = (v21 - 1) & v21;
      v19 = __clz(__rbit64(v21)) + (v15 << 6);
    }
    v23 = a4;
    v24 = *(_QWORD *)(a4 + 48);
    v25 = *(_QWORD *)(v17 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v11, v24 + v25 * v19, v8);
    v26 = *(_QWORD *)(v12 + 40);
    sub_10000F1C8(&qword_100BC35B0, (uint64_t (*)(uint64_t))&type metadata accessor for Location);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v8, v27);
    v28 = -1 << *(_BYTE *)(v12 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) == 0)
      break;
    v31 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    v17 = v40;
LABEL_34:
    *(_QWORD *)(v16 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v17 + 32))(*(_QWORD *)(v12 + 48) + v31 * v25, v11, v8);
    ++*(_QWORD *)(v12 + 16);
    if (__OFSUB__(a3--, 1))
      goto LABEL_39;
    a4 = v23;
    if (!a3)
      goto LABEL_36;
  }
  v32 = 0;
  v33 = (unint64_t)(63 - v28) >> 6;
  v17 = v40;
  while (++v30 != v33 || (v32 & 1) == 0)
  {
    v34 = v30 == v33;
    if (v30 == v33)
      v30 = 0;
    v32 |= v34;
    v35 = *(_QWORD *)(v16 + 8 * v30);
    if (v35 != -1)
    {
      v31 = __clz(__rbit64(~v35)) + (v30 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void sub_1006EDF6C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v8 = sub_1000BA294(&qword_100BCC820);
  v37 = *(_QWORD *)(v8 - 8);
  v38 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v31 - v12;
  v14 = *(_QWORD *)(a4 + 64);
  v36 = a4 + 64;
  v15 = -1 << *(_BYTE *)(a4 + 32);
  if (-v15 < 64)
    v16 = ~(-1 << -(char)v15);
  else
    v16 = -1;
  v17 = v16 & v14;
  if (!a2)
  {
    v18 = 0;
LABEL_38:
    v30 = v36;
    *a1 = a4;
    a1[1] = v30;
    a1[2] = ~v15;
    a1[3] = v18;
    a1[4] = v17;
    return;
  }
  if (!a3)
  {
    v18 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v33 = -1 << *(_BYTE *)(a4 + 32);
  v34 = a1;
  v18 = 0;
  v19 = 0;
  v35 = (unint64_t)(63 - v15) >> 6;
  v32 = v35 - 1;
  v20 = a3;
  if (!v17)
    goto LABEL_9;
LABEL_8:
  v21 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  v22 = v21 | (v18 << 6);
  while (1)
  {
    ++v19;
    v26 = *(_QWORD *)(a4 + 48);
    v27 = type metadata accessor for Date(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v10, v26 + *(_QWORD *)(*(_QWORD *)(v27 - 8) + 72) * v22, v27);
    v28 = *(_QWORD *)(a4 + 56);
    v29 = type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity(0);
    sub_100080C0C(v28 + *(_QWORD *)(*(_QWORD *)(v29 - 8) + 72) * v22, (uint64_t)&v10[*(int *)(v38 + 48)], type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity);
    sub_1000787D4((uint64_t)v10, (uint64_t)v13, &qword_100BCC820);
    sub_1000787D4((uint64_t)v13, a2, &qword_100BCC820);
    if (v19 == v20)
      goto LABEL_37;
    a2 += *(_QWORD *)(v37 + 72);
    if (v17)
      goto LABEL_8;
LABEL_9:
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v23 >= v35)
      goto LABEL_33;
    v24 = *(_QWORD *)(v36 + 8 * v23);
    if (!v24)
      break;
LABEL_18:
    v17 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v23 << 6);
    v18 = v23;
  }
  v18 += 2;
  if (v23 + 1 >= v35)
  {
    v17 = 0;
    v18 = v23;
    goto LABEL_37;
  }
  v24 = *(_QWORD *)(v36 + 8 * v18);
  if (v24)
    goto LABEL_14;
  v25 = v23 + 2;
  if (v23 + 2 >= v35)
    goto LABEL_33;
  v24 = *(_QWORD *)(v36 + 8 * v25);
  if (v24)
    goto LABEL_17;
  v18 = v23 + 3;
  if (v23 + 3 >= v35)
  {
    v17 = 0;
    v18 = v23 + 2;
    goto LABEL_37;
  }
  v24 = *(_QWORD *)(v36 + 8 * v18);
  if (v24)
  {
LABEL_14:
    v23 = v18;
    goto LABEL_18;
  }
  v25 = v23 + 4;
  if (v23 + 4 >= v35)
  {
LABEL_33:
    v17 = 0;
LABEL_37:
    v15 = v33;
    a1 = v34;
    goto LABEL_38;
  }
  v24 = *(_QWORD *)(v36 + 8 * v25);
  if (v24)
  {
LABEL_17:
    v23 = v25;
    goto LABEL_18;
  }
  while (1)
  {
    v23 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v23 >= v35)
    {
      v17 = 0;
      v18 = v32;
      goto LABEL_37;
    }
    v24 = *(_QWORD *)(v36 + 8 * v23);
    ++v25;
    if (v24)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
}

void sub_1006EE27C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t i;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v49 = sub_1000BA294(&qword_100BCF320);
  v46 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v47 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v48 = (uint64_t)&v39 - v10;
  v50 = a4;
  v11 = *(_QWORD *)(a4 + 64);
  v44 = a4 + 64;
  v42 = -1 << *(_BYTE *)(a4 + 32);
  if (-v42 < 64)
    v12 = ~(-1 << -(char)v42);
  else
    v12 = -1;
  v13 = v12 & v11;
  if (!a2)
  {
    v14 = 0;
LABEL_36:
    v37 = ~v42;
    v38 = v44;
    *a1 = v50;
    a1[1] = v38;
    a1[2] = v37;
    a1[3] = v14;
    a1[4] = v13;
    return;
  }
  if (!a3)
  {
    v14 = 0;
    goto LABEL_36;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v45 = a3;
  v14 = 0;
  v15 = 0;
  v43 = (unint64_t)(63 - v42) >> 6;
  v40 = v43 - 1;
  v41 = a1;
  if (!v13)
    goto LABEL_9;
LABEL_8:
  v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  v17 = v14;
  for (i = v16 | (v14 << 6); ; i = __clz(__rbit64(v19)) + (v17 << 6))
  {
    ++v15;
    v21 = v50;
    v22 = *(_QWORD *)(v50 + 48);
    v23 = type metadata accessor for Date(0);
    v24 = v47;
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v47, v22 + *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * i, v23);
    v25 = *(_QWORD *)(v21 + 56) + 80 * i;
    v26 = *(_QWORD *)(v25 + 8);
    v27 = *(_QWORD *)(v25 + 16);
    v28 = *(_QWORD *)(v25 + 24);
    v29 = *(_QWORD *)(v25 + 32);
    v30 = *(_QWORD *)(v25 + 40);
    v31 = *(_QWORD *)(v25 + 48);
    v32 = *(_QWORD *)(v25 + 56);
    v33 = &v24[*(int *)(v49 + 48)];
    v34 = *(_OWORD *)(v25 + 64);
    *(_QWORD *)v33 = *(_QWORD *)v25;
    *((_QWORD *)v33 + 1) = v26;
    *((_QWORD *)v33 + 2) = v27;
    *((_QWORD *)v33 + 3) = v28;
    *((_QWORD *)v33 + 4) = v29;
    *((_QWORD *)v33 + 5) = v30;
    *((_QWORD *)v33 + 6) = v31;
    *((_QWORD *)v33 + 7) = v32;
    *((_OWORD *)v33 + 4) = v34;
    v35 = (uint64_t)v24;
    v36 = v48;
    sub_1000787D4(v35, v48, &qword_100BCF320);
    sub_1000787D4(v36, a2, &qword_100BCF320);
    if (v15 == v45)
    {
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v32);
      a1 = v41;
      v14 = v17;
      goto LABEL_36;
    }
    a2 += *(_QWORD *)(v46 + 72);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v32);
    v14 = v17;
    if (v13)
      goto LABEL_8;
LABEL_9:
    v17 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v43)
      goto LABEL_33;
    v19 = *(_QWORD *)(v44 + 8 * v17);
    if (!v19)
      break;
LABEL_18:
    v13 = (v19 - 1) & v19;
  }
  v14 += 2;
  if (v17 + 1 >= v43)
  {
    v13 = 0;
    v14 = v17;
    goto LABEL_35;
  }
  v19 = *(_QWORD *)(v44 + 8 * v14);
  if (v19)
    goto LABEL_14;
  v20 = v17 + 2;
  if (v17 + 2 >= v43)
    goto LABEL_33;
  v19 = *(_QWORD *)(v44 + 8 * v20);
  if (v19)
    goto LABEL_17;
  v14 = v17 + 3;
  if (v17 + 3 >= v43)
  {
    v13 = 0;
    v14 = v17 + 2;
    goto LABEL_35;
  }
  v19 = *(_QWORD *)(v44 + 8 * v14);
  if (v19)
  {
LABEL_14:
    v17 = v14;
    goto LABEL_18;
  }
  v20 = v17 + 4;
  if (v17 + 4 >= v43)
  {
LABEL_33:
    v13 = 0;
LABEL_35:
    a1 = v41;
    goto LABEL_36;
  }
  v19 = *(_QWORD *)(v44 + 8 * v20);
  if (v19)
  {
LABEL_17:
    v17 = v20;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v17 >= v43)
    {
      v13 = 0;
      v14 = v40;
      a1 = v41;
      goto LABEL_36;
    }
    v19 = *(_QWORD *)(v44 + 8 * v17);
    ++v20;
    if (v19)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
}

uint64_t sub_1006EE60C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v8 = type metadata accessor for Location(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v10);
  v15 = (char *)&v32 - v14;
  v39 = a4;
  v18 = *(_QWORD *)(a4 + 56);
  v17 = a4 + 56;
  v16 = v18;
  v37 = v17;
  v19 = -1 << *(_BYTE *)(v17 - 24);
  if (-v19 < 64)
    v20 = ~(-1 << -(char)v19);
  else
    v20 = -1;
  v21 = v20 & v16;
  if (!a2)
  {
    v22 = 0;
    a3 = 0;
LABEL_38:
    v31 = v37;
    *a1 = v39;
    a1[1] = v31;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v34 = -1 << *(_BYTE *)(v17 - 24);
  v35 = a1;
  v22 = 0;
  v23 = 0;
  v36 = (unint64_t)(63 - v19) >> 6;
  v33 = v36 - 1;
  v38 = a3;
  if (!v21)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    v29 = *(_QWORD *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v12, *(_QWORD *)(v39 + 48) + v29 * v25, v8);
    v30 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v30(v15, v12, v8);
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v15, v8);
    a3 = v38;
    if (v23 == v38)
      goto LABEL_37;
    a2 += v29;
    if (v21)
      goto LABEL_8;
LABEL_9:
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v36)
      goto LABEL_32;
    v27 = *(_QWORD *)(v37 + 8 * v26);
    if (!v27)
      break;
LABEL_18:
    v21 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v22 = v26;
  }
  v22 += 2;
  if (v26 + 1 >= v36)
  {
    v21 = 0;
    v22 = v26;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v37 + 8 * v22);
  if (v27)
    goto LABEL_14;
  v28 = v26 + 2;
  if (v26 + 2 >= v36)
    goto LABEL_32;
  v27 = *(_QWORD *)(v37 + 8 * v28);
  if (v27)
    goto LABEL_17;
  v22 = v26 + 3;
  if (v26 + 3 >= v36)
  {
    v21 = 0;
    v22 = v26 + 2;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v37 + 8 * v22);
  if (v27)
  {
LABEL_14:
    v26 = v22;
    goto LABEL_18;
  }
  v28 = v26 + 4;
  if (v26 + 4 >= v36)
  {
LABEL_32:
    v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    v19 = v34;
    a1 = v35;
    goto LABEL_38;
  }
  v27 = *(_QWORD *)(v37 + 8 * v28);
  if (v27)
  {
LABEL_17:
    v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v36)
    {
      v21 = 0;
      v22 = v33;
      goto LABEL_36;
    }
    v27 = *(_QWORD *)(v37 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1006EE8D4(uint64_t a1, char *a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(_QWORD *, _QWORD);
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  void (*v49)(char *, char *, uint64_t);
  char *v50;
  uint64_t result;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char v64[16];
  char *v65;
  uint64_t (*v66)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>);
  char *v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[3];
  char v73;

  v4 = v3;
  v56 = a1;
  v7 = type metadata accessor for HourWeather(0);
  v8 = *(char **)(v7 - 8);
  v60 = v7;
  v61 = v8;
  v9 = __chkstk_darwin(v7);
  v59 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v58 = (char *)&v52 - v11;
  v12 = sub_1000BA294(&qword_100BD1100);
  __chkstk_darwin(v12);
  v57 = (uint64_t)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_1000BA294(&qword_100BFFC98);
  v14 = __chkstk_darwin(v62);
  v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (uint64_t *)((char *)&v52 - v17);
  v19 = sub_1000BA294(&qword_100BCB9F8);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = a2;
  v70 = a3;
  v52 = a3;
  v63 = v12;
  v24 = *(int *)(v12 + 40);
  v25 = v21;
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v23, &v4[v24], v21);
  v65 = v4;
  v66 = sub_1006EEFE4;
  v67 = &v68;
  sub_10003D2DC(&qword_100BCE800, &qword_100BCB9F8);
  v27 = v26;
  v28 = sub_1000BA294(&qword_100BFFCA0);
  dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)(v72, sub_1006EF028, v64, v28, v25, v27);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v25);
  if ((v73 & 1) == 0)
  {
    v34 = v72[2];
    v71 = *(_QWORD *)v4;
    sub_10003D2DC((unint64_t *)&qword_100BCBA00, &qword_100BCB9F8);
    dispatch thunk of Collection.index(_:offsetBy:)(v72, &v71, v34, v25, v35);
    v36 = v56;
    sub_1000787D4((uint64_t)v4, v56, &qword_100BD1100);
    *(_QWORD *)(v36 + *(int *)(v62 + 36)) = v72[0];
    return v34;
  }
  sub_100037768((uint64_t)v4, (uint64_t)v16, &qword_100BD1100);
  v29 = *(_QWORD *)v4;
  sub_100021A14((uint64_t)v4, &qword_100BD1100);
  v30 = v62;
  *(_QWORD *)&v16[*(int *)(v62 + 36)] = v29;
  sub_1000787D4((uint64_t)v16, (uint64_t)v18, &qword_100BFFC98);
  if (!a2)
  {
    sub_1000787D4((uint64_t)v18, v56, &qword_100BFFC98);
    return 0;
  }
  v55 = v25;
  if (!v52)
  {
LABEL_13:
    sub_1000787D4((uint64_t)v18, v56, &qword_100BFFC98);
    return v52;
  }
  v31 = v52;
  if ((v52 & 0x8000000000000000) == 0)
  {
    v62 = (uint64_t)v18 + *(int *)(v30 + 36);
    v32 = v18[1];
    v33 = v61;
    if (*(_QWORD *)v62 == v32)
    {
      v34 = 0;
LABEL_12:
      sub_1000787D4((uint64_t)v18, v56, &qword_100BFFC98);
      return v34;
    }
    sub_10003D2DC((unint64_t *)&qword_100BCBA00, &qword_100BCB9F8);
    v54 = v37;
    v34 = 0;
    v53 = v31 - 1;
    v38 = v55;
    v39 = v37;
    v40 = v59;
    v41 = v60;
    while (1)
    {
      v61 = a2;
      v72[0] = *v18;
      v72[1] = v32;
      v42 = v62;
      dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)(v62, v72, v38, v39);
      v43 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v72, v42, v38, v39);
      (*((void (**)(char *))v33 + 2))(v40);
      v43(v72, 0);
      v44 = (uint64_t)v18;
      v45 = v18;
      v46 = v57;
      sub_100037768(v44, v57, &qword_100BD1100);
      dispatch thunk of Collection.formIndex(after:)(v42, v38, v39);
      v47 = v46;
      v18 = v45;
      v48 = v61;
      sub_100021A14(v47, &qword_100BD1100);
      v49 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v33 + 4);
      v50 = v58;
      v49(v58, v40, v41);
      v49(v48, v50, v41);
      if (v53 == v34)
        goto LABEL_13;
      a2 = &v48[*((_QWORD *)v33 + 9)];
      v32 = v18[1];
      ++v34;
      if (*(_QWORD *)v62 == v32)
        goto LABEL_12;
    }
  }
  __break(1u);
  swift_errorRelease(v29);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v30, v31);
  __break(1u);
  return result;
}

_QWORD *sub_1006EEDF8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, uint64_t, _QWORD *))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[8];

  sub_1000BA294(&qword_100BD1100);
  v8 = sub_1000BA294(&qword_100BCB9F8);
  sub_10003D2DC((unint64_t *)&qword_100BCBA00, &qword_100BCB9F8);
  v10 = v9;
  dispatch thunk of Collection.startIndex.getter(v8, v9);
  v11 = dispatch thunk of Collection.distance(from:to:)(v16, a3, v8, v10);
  result = (_QWORD *)dispatch thunk of Collection.distance(from:to:)(a3, a3 + 8, v8, v10);
  if (__OFADD__(v11, result))
  {
    __break(1u);
    goto LABEL_9;
  }
  v13 = result;
  if ((uint64_t)result + v11 < v11)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  v14 = 0;
  if (a1)
    v14 = a1 + *(_QWORD *)(*(_QWORD *)(type metadata accessor for HourWeather(0) - 8) + 72) * v11;
  result = a4(&v15, v14, v13);
  if (!v4)
    return (_QWORD *)v15;
  return result;
}

uint64_t sub_1006EEF20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1;
  if (a2 && a4)
  {
    if (a2 >= a4)
      v5 = a4;
    else
      v5 = a2;
    sub_1000ED3CC(a1, v5);
    v4 += *(_QWORD *)(*(_QWORD *)(type metadata accessor for HourWeather(0) - 8) + 72) * v5;
  }
  else if (a1)
  {
    type metadata accessor for HourWeather(0);
  }
  return v4;
}

uint64_t sub_1006EEFB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = sub_1006EEF20(a1, a2, a3, a4);
  if (!v5)
  {
    *a5 = result;
    a5[1] = v8;
    a5[2] = v9;
  }
  return result;
}

uint64_t sub_1006EEFE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1006EEFB8(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a3);
}

_QWORD *sub_1006EEFFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *(*a4)(uint64_t *__return_ptr, uint64_t, _QWORD *)@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;

  result = sub_1006EEDF8(a1, a2, a3, a4);
  if (!v5)
  {
    *a5 = result;
    a5[1] = v8;
    a5[2] = v9;
  }
  return result;
}

_QWORD *sub_1006EF028@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  return sub_1006EEFFC(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, _QWORD *))(v3 + 24), a3);
}

unint64_t sub_1006EF044()
{
  unint64_t result;

  result = qword_100BFFCB0;
  if (!qword_100BFFCB0)
  {
    result = swift_getWitnessTable(&unk_1009C1004, &type metadata for LocationsState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFFCB0);
  }
  return result;
}

unint64_t sub_1006EF080()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFFCC0;
  if (!qword_100BFFCC0)
  {
    v1 = sub_100075EB0(&qword_100BF7410);
    sub_10000F1C8(&qword_100BFFCC8, (uint64_t (*)(uint64_t))&type metadata accessor for SavedLocation);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100BFFCC0);
  }
  return result;
}

unint64_t sub_1006EF0FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFFCD8;
  if (!qword_100BFFCD8)
  {
    v1 = sub_100075EB0(&qword_100BFFCD0);
    sub_10000F1C8(&qword_100BDDD08, (uint64_t (*)(uint64_t))&type metadata accessor for LocationModel);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100BFFCD8);
  }
  return result;
}

unint64_t sub_1006EF178()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFFCE0;
  if (!qword_100BFFCE0)
  {
    v1 = sub_100075EB0(&qword_100BC5E18);
    sub_10000F1C8(&qword_100BEA8D8, (uint64_t (*)(uint64_t))&type metadata accessor for LocationOfInterest);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100BFFCE0);
  }
  return result;
}

unint64_t sub_1006EF1F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFFCF0;
  if (!qword_100BFFCF0)
  {
    v1 = sub_100075EB0(&qword_100BFFCE8);
    sub_10000F1C8(&qword_100BCF3E8, (uint64_t (*)(uint64_t))&type metadata accessor for Location);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100BFFCF0);
  }
  return result;
}

unint64_t sub_1006EF270()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFFD00;
  if (!qword_100BFFD00)
  {
    v1 = sub_100075EB0(&qword_100BFFCF8);
    sub_10000F1C8(&qword_100BDDCC0, (uint64_t (*)(uint64_t))&type metadata accessor for Location.Identifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100BFFD00);
  }
  return result;
}

unint64_t sub_1006EF2EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFFD10;
  if (!qword_100BFFD10)
  {
    v1 = sub_100075EB0(&qword_100BFFD08);
    sub_10000F1C8(&qword_100BDDD08, (uint64_t (*)(uint64_t))&type metadata accessor for LocationModel);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100BFFD10);
  }
  return result;
}

unint64_t sub_1006EF370()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFFD20;
  if (!qword_100BFFD20)
  {
    v1 = sub_100075EB0(&qword_100BFFD18);
    sub_10000F1C8(&qword_100BCF3E8, (uint64_t (*)(uint64_t))&type metadata accessor for Location);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100BFFD20);
  }
  return result;
}

unint64_t sub_1006EF3F4()
{
  unint64_t result;

  result = qword_100BFFD28;
  if (!qword_100BFFD28)
  {
    result = swift_getWitnessTable(&unk_1009DA26C, &type metadata for LocationsOfInterestState);
    atomic_store(result, (unint64_t *)&qword_100BFFD28);
  }
  return result;
}

unint64_t sub_1006EF430()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFFD38;
  if (!qword_100BFFD38)
  {
    v1 = sub_100075EB0(&qword_100BFFD30);
    sub_10000F1C8(&qword_100BFFD40, (uint64_t (*)(uint64_t))&type metadata accessor for LocationDisplayContext);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100BFFD38);
  }
  return result;
}

unint64_t sub_1006EF4B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFFD58;
  if (!qword_100BFFD58)
  {
    v1 = sub_100075EB0(&qword_100BF7410);
    sub_10000F1C8(&qword_100BFFD60, (uint64_t (*)(uint64_t))&type metadata accessor for SavedLocation);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100BFFD58);
  }
  return result;
}

unint64_t sub_1006EF530()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFFD68;
  if (!qword_100BFFD68)
  {
    v1 = sub_100075EB0(&qword_100BFFCD0);
    sub_10000F1C8(&qword_100BDDDB8, (uint64_t (*)(uint64_t))&type metadata accessor for LocationModel);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100BFFD68);
  }
  return result;
}

unint64_t sub_1006EF5AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFFD70;
  if (!qword_100BFFD70)
  {
    v1 = sub_100075EB0(&qword_100BFFCE8);
    sub_10000F1C8(&qword_100BCF410, (uint64_t (*)(uint64_t))&type metadata accessor for Location);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100BFFD70);
  }
  return result;
}

unint64_t sub_1006EF628()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFFD78;
  if (!qword_100BFFD78)
  {
    v1 = sub_100075EB0(&qword_100BFFCF8);
    sub_10000F1C8(&qword_100BDDDB0, (uint64_t (*)(uint64_t))&type metadata accessor for Location.Identifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100BFFD78);
  }
  return result;
}

unint64_t sub_1006EF6A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFFD80;
  if (!qword_100BFFD80)
  {
    v1 = sub_100075EB0(&qword_100BFFD08);
    sub_10000F1C8(&qword_100BDDDB8, (uint64_t (*)(uint64_t))&type metadata accessor for LocationModel);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100BFFD80);
  }
  return result;
}

unint64_t sub_1006EF728()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFFD88;
  if (!qword_100BFFD88)
  {
    v1 = sub_100075EB0(&qword_100BFFD18);
    sub_10000F1C8(&qword_100BCF410, (uint64_t (*)(uint64_t))&type metadata accessor for Location);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100BFFD88);
  }
  return result;
}

unint64_t sub_1006EF7AC()
{
  unint64_t result;

  result = qword_100BFFD90;
  if (!qword_100BFFD90)
  {
    result = swift_getWitnessTable(&unk_1009DA244, &type metadata for LocationsOfInterestState);
    atomic_store(result, (unint64_t *)&qword_100BFFD90);
  }
  return result;
}

unint64_t sub_1006EF7E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFFD98;
  if (!qword_100BFFD98)
  {
    v1 = sub_100075EB0(&qword_100BFFD30);
    sub_10000F1C8(&qword_100BFFDA0, (uint64_t (*)(uint64_t))&type metadata accessor for LocationDisplayContext);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100BFFD98);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LocationsState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1006EF8B8 + 4 * byte_1009C0DEF[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1006EF8EC + 4 * byte_1009C0DEA[v4]))();
}

uint64_t sub_1006EF8EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006EF8F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1006EF8FCLL);
  return result;
}

uint64_t sub_1006EF908(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1006EF910);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1006EF914(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006EF91C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocationsState.CodingKeys()
{
  return &type metadata for LocationsState.CodingKeys;
}

unint64_t sub_1006EF93C()
{
  unint64_t result;

  result = qword_100BFFDC0;
  if (!qword_100BFFDC0)
  {
    result = swift_getWitnessTable(&unk_1009C0FDC, &type metadata for LocationsState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFFDC0);
  }
  return result;
}

unint64_t sub_1006EF97C()
{
  unint64_t result;

  result = qword_100BFFDC8;
  if (!qword_100BFFDC8)
  {
    result = swift_getWitnessTable(&unk_1009C0F4C, &type metadata for LocationsState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFFDC8);
  }
  return result;
}

unint64_t sub_1006EF9BC()
{
  unint64_t result;

  result = qword_100BFFDD0;
  if (!qword_100BFFDD0)
  {
    result = swift_getWitnessTable(&unk_1009C0F74, &type metadata for LocationsState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFFDD0);
  }
  return result;
}

uint64_t *sub_1006EF9F8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char v36;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for SunriseSunsetViewModel(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v10) == 1)
    {
      v12 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
      v13 = v9;
      v14 = v11;
      v15 = 1;
    }
    else
    {
      *v9 = *v10;
      swift_retain();
      v13 = v9;
      v14 = v11;
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v14, v15);
    v17 = a3[6];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = *(_QWORD *)v19;
    v21 = v19[8];
    sub_10008D47C(*(_QWORD *)v19, v21);
    *(_QWORD *)v18 = v20;
    v18[8] = v21;
    v22 = a3[7];
    v23 = (char *)a1 + v22;
    v24 = (char *)a2 + v22;
    v25 = *(_QWORD *)v24;
    v26 = v24[8];
    sub_10008D47C(*(_QWORD *)v24, v26);
    *(_QWORD *)v23 = v25;
    v23[8] = v26;
    v27 = a3[8];
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    v30 = *(_QWORD *)v29;
    v31 = v29[8];
    sub_10008D47C(*(_QWORD *)v29, v31);
    *(_QWORD *)v28 = v30;
    v28[8] = v31;
    v32 = a3[9];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = *(_QWORD *)v34;
    v36 = v34[8];
    sub_10008D47C(*(_QWORD *)v34, v36);
    *(_QWORD *)v33 = v35;
    v33[8] = v36;
  }
  return a1;
}

uint64_t sub_1006EFB98(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for SunriseSunsetViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v5) == 1)
  {
    v6 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  sub_1000B15F8(*(_QWORD *)(a1 + a2[6]), *(_BYTE *)(a1 + a2[6] + 8));
  sub_1000B15F8(*(_QWORD *)(a1 + a2[7]), *(_BYTE *)(a1 + a2[7] + 8));
  sub_1000B15F8(*(_QWORD *)(a1 + a2[8]), *(_BYTE *)(a1 + a2[8] + 8));
  return sub_1000B15F8(*(_QWORD *)(a1 + a2[9]), *(_BYTE *)(a1 + a2[9] + 8));
}

uint64_t sub_1006EFC78(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  v6 = type metadata accessor for SunriseSunsetViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v9) == 1)
  {
    v11 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
    v12 = v8;
    v13 = v10;
    v14 = 1;
  }
  else
  {
    *v8 = *v9;
    swift_retain();
    v12 = v8;
    v13 = v10;
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(v12, v13, v14);
  v15 = a3[6];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_QWORD *)v17;
  v19 = *(_BYTE *)(v17 + 8);
  sub_10008D47C(*(_QWORD *)v17, v19);
  *(_QWORD *)v16 = v18;
  *(_BYTE *)(v16 + 8) = v19;
  v20 = a3[7];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_QWORD *)v22;
  v24 = *(_BYTE *)(v22 + 8);
  sub_10008D47C(*(_QWORD *)v22, v24);
  *(_QWORD *)v21 = v23;
  *(_BYTE *)(v21 + 8) = v24;
  v25 = a3[8];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = *(_QWORD *)v27;
  v29 = *(_BYTE *)(v27 + 8);
  sub_10008D47C(*(_QWORD *)v27, v29);
  *(_QWORD *)v26 = v28;
  *(_BYTE *)(v26 + 8) = v29;
  v30 = a3[9];
  v31 = a1 + v30;
  v32 = a2 + v30;
  v33 = *(_QWORD *)v32;
  v34 = *(_BYTE *)(v32 + 8);
  sub_10008D47C(*(_QWORD *)v32, v34);
  *(_QWORD *)v31 = v33;
  *(_BYTE *)(v31 + 8) = v34;
  return a1;
}

uint64_t sub_1006EFDEC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;

  v6 = type metadata accessor for SunriseSunsetViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  if (a1 != a2)
  {
    v7 = a3[5];
    v8 = (_QWORD *)(a1 + v7);
    v9 = (_QWORD *)(a2 + v7);
    sub_100021A14(a1 + v7, &qword_100BC37D8);
    v10 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v9) == 1)
    {
      v11 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
      v12 = v8;
      v13 = v10;
      v14 = 1;
    }
    else
    {
      *v8 = *v9;
      swift_retain();
      v12 = v8;
      v13 = v10;
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v13, v14);
  }
  v15 = a3[6];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_QWORD *)v17;
  v19 = *(_BYTE *)(v17 + 8);
  sub_10008D47C(*(_QWORD *)v17, v19);
  v20 = *(_QWORD *)v16;
  v21 = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v16 = v18;
  *(_BYTE *)(v16 + 8) = v19;
  sub_1000B15F8(v20, v21);
  v22 = a3[7];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = *(_QWORD *)v24;
  v26 = *(_BYTE *)(v24 + 8);
  sub_10008D47C(*(_QWORD *)v24, v26);
  v27 = *(_QWORD *)v23;
  v28 = *(_BYTE *)(v23 + 8);
  *(_QWORD *)v23 = v25;
  *(_BYTE *)(v23 + 8) = v26;
  sub_1000B15F8(v27, v28);
  v29 = a3[8];
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = *(_QWORD *)v31;
  v33 = *(_BYTE *)(v31 + 8);
  sub_10008D47C(*(_QWORD *)v31, v33);
  v34 = *(_QWORD *)v30;
  v35 = *(_BYTE *)(v30 + 8);
  *(_QWORD *)v30 = v32;
  *(_BYTE *)(v30 + 8) = v33;
  sub_1000B15F8(v34, v35);
  v36 = a3[9];
  v37 = a1 + v36;
  v38 = a2 + v36;
  v39 = *(_QWORD *)v38;
  v40 = *(_BYTE *)(v38 + 8);
  sub_10008D47C(*(_QWORD *)v38, v40);
  v41 = *(_QWORD *)v37;
  v42 = *(_BYTE *)(v37 + 8);
  *(_QWORD *)v37 = v39;
  *(_BYTE *)(v37 + 8) = v40;
  sub_1000B15F8(v41, v42);
  return a1;
}

uint64_t sub_1006EFFA8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for SunriseSunsetViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v9) == 1)
  {
    v11 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = a1 + v12;
  v15 = a2 + v12;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  v16 = a1 + v13;
  v17 = a2 + v13;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = a3[8];
  v19 = a3[9];
  v20 = a1 + v18;
  v21 = a2 + v18;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  v22 = a1 + v19;
  v23 = a2 + v19;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  return a1;
}

uint64_t sub_1006F00E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v6 = type metadata accessor for SunriseSunsetViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  if (a1 != a2)
  {
    v7 = a3[5];
    v8 = (void *)(a1 + v7);
    v9 = (const void *)(a2 + v7);
    sub_100021A14(a1 + v7, &qword_100BC37D8);
    v10 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v9) == 1)
    {
      v11 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = (uint64_t *)(a2 + v12);
  v15 = *v14;
  LOBYTE(v14) = *((_BYTE *)v14 + 8);
  v16 = *(_QWORD *)v13;
  v17 = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v13 = v15;
  *(_BYTE *)(v13 + 8) = (_BYTE)v14;
  sub_1000B15F8(v16, v17);
  v18 = a3[7];
  v19 = a1 + v18;
  v20 = (uint64_t *)(a2 + v18);
  v21 = *v20;
  LOBYTE(v20) = *((_BYTE *)v20 + 8);
  v22 = *(_QWORD *)v19;
  v23 = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v19 = v21;
  *(_BYTE *)(v19 + 8) = (_BYTE)v20;
  sub_1000B15F8(v22, v23);
  v24 = a3[8];
  v25 = a1 + v24;
  v26 = (uint64_t *)(a2 + v24);
  v27 = *v26;
  LOBYTE(v26) = *((_BYTE *)v26 + 8);
  v28 = *(_QWORD *)v25;
  v29 = *(_BYTE *)(v25 + 8);
  *(_QWORD *)v25 = v27;
  *(_BYTE *)(v25 + 8) = (_BYTE)v26;
  sub_1000B15F8(v28, v29);
  v30 = a3[9];
  v31 = a1 + v30;
  v32 = (uint64_t *)(a2 + v30);
  v33 = *v32;
  LOBYTE(v32) = *((_BYTE *)v32 + 8);
  v34 = *(_QWORD *)v31;
  v35 = *(_BYTE *)(v31 + 8);
  *(_QWORD *)v31 = v33;
  *(_BYTE *)(v31 + 8) = (_BYTE)v32;
  sub_1000B15F8(v34, v35);
  return a1;
}

uint64_t sub_1006F0268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006F0274);
}

uint64_t sub_1006F0274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v11;

  v6 = sub_1000E73D8();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = v4;
    return _s7Weather24LocationCompositionStateOwet_0(v8, v3, v7);
  }
  v9 = sub_1000BA294((uint64_t *)&unk_100C09CA0);
  if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v9;
    v8 = v4 + *(int *)(a3 + 20);
    return _s7Weather24LocationCompositionStateOwet_0(v8, v3, v7);
  }
  v11 = *(unsigned __int8 *)(v4 + *(int *)(a3 + 24) + 8);
  if (v11 > 1)
    return (v11 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_1006F030C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006F0318);
}

uint64_t sub_1006F0318(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = sub_1000E73D8();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = v5;
    return _s7Weather24LocationCompositionStateOwst_0(v10, v4, v4, v9);
  }
  result = sub_1000BA294((uint64_t *)&unk_100C09CA0);
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
  {
    v9 = result;
    v10 = v5 + *(int *)(a4 + 20);
    return _s7Weather24LocationCompositionStateOwst_0(v10, v4, v4, v9);
  }
  *(_BYTE *)(v5 + *(int *)(a4 + 24) + 8) = -(char)v4;
  return result;
}

uint64_t sub_1006F03B0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABE464, 1);
}

void sub_1006F03C0(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;

  v124 = a1;
  v103 = sub_1000BA294(&qword_100BFFE78);
  sub_1000B42B0();
  __chkstk_darwin(v1);
  sub_100088FDC();
  v101 = v2;
  v106 = sub_1000BA294(&qword_100BFFE80);
  v104 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  sub_100088FDC();
  v102 = v3;
  sub_1000BA294(&qword_100BD9A58);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100088FDC();
  v107 = v5;
  v123 = sub_1000BA294(&qword_100BD9A60);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_1000986FC();
  v105 = v7;
  __chkstk_darwin(v8);
  v108 = (char *)&v101 - v9;
  v121 = sub_1000BA294(&qword_100BFFE88);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100088FDC();
  v122 = v11;
  v118 = type metadata accessor for AutomationInfo(0);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100088FDC();
  v119 = v13;
  v14 = type metadata accessor for AccessibilityChildBehavior(0);
  v116 = *(_QWORD *)(v14 - 8);
  v117 = v14;
  __chkstk_darwin(v14);
  sub_100088FDC();
  v115 = v15;
  v109 = sub_1000BA294(&qword_100BFFE90);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  sub_100098728();
  v19 = v18 - v17;
  v112 = sub_1000BA294(&qword_100BFFE98);
  v110 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  sub_100098728();
  v22 = v21 - v20;
  sub_1000BA294(&qword_100BD9A68);
  sub_1000B42B0();
  __chkstk_darwin(v23);
  sub_100088FDC();
  v113 = v24;
  v120 = sub_1000BA294(&qword_100BD9A70);
  sub_1000B42B0();
  __chkstk_darwin(v25);
  sub_1000986FC();
  v111 = v26;
  __chkstk_darwin(v27);
  v114 = (char *)&v101 - v28;
  v29 = type metadata accessor for ContentSizeCategory(0);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v32 = (char *)&v101 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v35 = (char *)&v101 - v34;
  type metadata accessor for SunriseSunsetComponentView(0);
  sub_1000B42B0();
  __chkstk_darwin(v36);
  sub_100098728();
  v39 = v38 - v37;
  v40 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v41 = objc_msgSend(v40, "userInterfaceIdiom");

  v42 = v125;
  v43 = sub_1006F2BFC(v125, v39);
  if (!v41)
    goto LABEL_43;
  sub_100109D64();
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v32, v35, v29);
  v44 = (*(uint64_t (**)(char *, uint64_t))(v30 + 88))(v32, v29);
  if (v44 == enum case for ContentSizeCategory.extraSmall(_:)
    || v44 == enum case for ContentSizeCategory.small(_:)
    || v44 == enum case for ContentSizeCategory.medium(_:)
    || v44 == enum case for ContentSizeCategory.large(_:)
    || v44 == enum case for ContentSizeCategory.extraLarge(_:)
    || v44 == enum case for ContentSizeCategory.extraExtraLarge(_:)
    || v44 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
  {
LABEL_42:
    v43 = sub_100099604((uint64_t)v35);
LABEL_43:
    sub_100098AD4(v43, type metadata accessor for SunriseSunsetComponentView);
    *(_QWORD *)v19 = static HorizontalAlignment.leading.getter(v83);
    *(_QWORD *)(v19 + 8) = 0;
    *(_BYTE *)(v19 + 16) = 0;
    v84 = sub_1000BA294(&qword_100BFFEA0);
    sub_1006F0BD8(v42, v19 + *(int *)(v84 + 44));
    v85 = v115;
    static AccessibilityChildBehavior.combine.getter(v86);
    sub_10027248C((uint64_t)&unk_100BFFEA8);
    v88 = v87;
    v89 = v109;
    View.accessibilityElement(children:)(v85, v109, v87);
    (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v85, v117);
    sub_1000DD2A8();
    v126 = v89;
    v127 = v88;
    v91 = sub_1000D1A8C(v90, (uint64_t)&opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>);
    v92 = v112;
    v93 = v113;
    View.accessibilityRespondsToUserInteraction(_:)(1, v112, v91);
    (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v22, v92);
    v94 = type metadata accessor for AutomationCellInfo(0);
    sub_1000DDE7C(v94);
    sub_1000DA180();
    v95 = v111;
    sub_10033553C();
    sub_100098AD4(v96, type metadata accessor for AutomationInfo);
    sub_100021A14(v93, &qword_100BD9A68);
    v97 = v95;
    v98 = (uint64_t)v114;
    sub_100099004(v97);
    v80 = v122;
    sub_1000C4DE0(v98);
    swift_storeEnumTagMultiPayload(v80, v121, 0);
    sub_1006F2D0C((uint64_t)&unk_100BFFEB0);
    v82 = v99;
    goto LABEL_44;
  }
  if (v44 != enum case for ContentSizeCategory.accessibilityMedium(_:)
    && v44 != enum case for ContentSizeCategory.accessibilityLarge(_:)
    && v44 != enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
    && v44 != enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
    && v44 != enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
  {
    sub_100099604((uint64_t)v32);
    goto LABEL_42;
  }
  v55 = sub_100099604((uint64_t)v35);
  sub_100098AD4(v55, type metadata accessor for SunriseSunsetComponentView);
  v57 = static Axis.Set.horizontal.getter(v56);
  v58 = v57;
  v59 = static Axis.Set.vertical.getter(v57);
  v60 = Axis.Set.init(rawValue:)(0);
  v61 = Axis.Set.init(rawValue:)(v60);
  if (Axis.Set.init(rawValue:)(v61 & v58) != v58)
    v60 = Axis.Set.init(rawValue:)(v60 | v58);
  v62 = Axis.Set.init(rawValue:)(v60);
  if (Axis.Set.init(rawValue:)(v62 & v59) != v59)
    LOBYTE(v60) = Axis.Set.init(rawValue:)(v60 | v59);
  v63 = (uint64_t)v101;
  *v101 = v60;
  v64 = sub_1000BA294(&qword_100BFFED8);
  sub_1006F1D88(v63 + *(int *)(v64 + 44));
  v65 = v115;
  static AccessibilityChildBehavior.combine.getter(v66);
  sub_10027248C((uint64_t)&unk_100BFFED0);
  v68 = v67;
  v69 = v102;
  v70 = v103;
  View.accessibilityElement(children:)(v65, v103, v67);
  (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v65, v117);
  sub_100021A14(v63, &qword_100BFFE78);
  v126 = v70;
  v127 = v68;
  v72 = sub_1000D1A8C(v71, (uint64_t)&opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>);
  v73 = v107;
  v74 = v106;
  View.accessibilityRespondsToUserInteraction(_:)(1, v106, v72);
  (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v69, v74);
  v75 = type metadata accessor for AutomationCellInfo(0);
  sub_1000DDE7C(v75);
  sub_1000DA180();
  v76 = v105;
  sub_100335558();
  sub_100098AD4(v77, type metadata accessor for AutomationInfo);
  sub_100021A14(v73, &qword_100BD9A58);
  v78 = v76;
  v79 = (uint64_t)v108;
  sub_100099004(v78);
  v80 = v122;
  sub_1000C4DE0(v79);
  swift_storeEnumTagMultiPayload(v80, v121, 1);
  sub_1006F2D0C((uint64_t)&unk_100BFFEB0);
  v82 = v81;
LABEL_44:
  sub_1006F2D0C((uint64_t)&unk_100BFFEC0);
  _ConditionalContent<>.init(storage:)(v80, v120, v123, v82, v100);
  sub_1000DD2A8();
}

void sub_1006F0BD8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  int v51;
  void (*v58)(char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  __int16 v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;

  v135 = a2;
  v3 = sub_1000BA294(&qword_100BFFF08);
  __chkstk_darwin(v3);
  v136 = (uint64_t)&v119 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v134 = (char *)&v119 - v6;
  v124 = sub_1000BA294(&qword_100BFFF98);
  __chkstk_darwin(v124);
  v129 = (uint64_t)&v119 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_1000BA294(&qword_100BFFFA0);
  __chkstk_darwin(v128);
  v123 = (char *)&v119 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v121 = (char *)&v119 - v10;
  v125 = sub_1000BA294(&qword_100BFFFA8);
  __chkstk_darwin(v125);
  v120 = (uint64_t)&v119 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v122 = (uint64_t)&v119 - v13;
  v14 = sub_1000BA294(&qword_100BFFFB0);
  __chkstk_darwin(v14);
  v127 = (uint64_t)&v119 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v126 = (char *)&v119 - v17;
  v18 = type metadata accessor for ContentSizeCategory(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v130 = (char *)&v119 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)&v119 - v22;
  v24 = sub_1000BA294(&qword_100BFFFB8);
  __chkstk_darwin(v24);
  v133 = (char *)&v119 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v132 = (char *)&v119 - v27;
  v28 = sub_1000BA294(&qword_100BFFF10);
  __chkstk_darwin(v28);
  v30 = (char *)&v119 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v33 = (char *)&v119 - v32;
  v34 = sub_1000BA294(&qword_100BFFF18);
  __chkstk_darwin(v34);
  v131 = (uint64_t)&v119 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v38 = (char *)&v119 - v37;
  __chkstk_darwin(v39);
  v41 = (char *)&v119 - v40;
  *(_QWORD *)v38 = static VerticalAlignment.center.getter(v42);
  *((_QWORD *)v38 + 1) = 0;
  v38[16] = 1;
  v43 = (uint64_t)&v38[*(int *)(sub_1000BA294(&qword_100BFFF20) + 44)];
  sub_1006F15B0((uint64_t)v33);
  sub_100037768((uint64_t)v33, (uint64_t)v30, &qword_100BFFF10);
  sub_100037768((uint64_t)v30, v43, &qword_100BFFF10);
  v44 = v43 + *(int *)(sub_1000BA294(&qword_100BFFF28) + 48);
  *(_QWORD *)v44 = 0;
  *(_BYTE *)(v44 + 8) = 0;
  sub_100021A14((uint64_t)v33, &qword_100BFFF10);
  sub_100021A14((uint64_t)v30, &qword_100BFFF10);
  v45 = (uint64_t)v38;
  v46 = a1;
  v47 = (uint64_t)v41;
  v48 = (uint64_t)v41;
  v49 = v130;
  sub_1000787D4(v45, v48, &qword_100BFFF18);
  v50 = type metadata accessor for SunriseSunsetComponentView(0);
  sub_100109D64();
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v49, v23, v18);
  v51 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v49, v18);
  if (v51 == enum case for ContentSizeCategory.extraSmall(_:)
    || v51 == enum case for ContentSizeCategory.small(_:)
    || v51 == enum case for ContentSizeCategory.medium(_:)
    || v51 == enum case for ContentSizeCategory.large(_:)
    || v51 == enum case for ContentSizeCategory.extraLarge(_:)
    || v51 == enum case for ContentSizeCategory.extraExtraLarge(_:)
    || v51 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
  {
    v58 = *(void (**)(char *, uint64_t))(v19 + 8);
  }
  else
  {
    v58 = *(void (**)(char *, uint64_t))(v19 + 8);
    if (v51 == enum case for ContentSizeCategory.accessibilityMedium(_:)
      || v51 == enum case for ContentSizeCategory.accessibilityLarge(_:)
      || v51 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
      || v51 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
      || v51 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
    {
      v58(v23, v18);
      v64 = (uint64_t)v132;
      v63 = (uint64_t)v133;
LABEL_38:
      v70 = sub_1000BA294(&qword_100BFFFC0);
      v71 = _s7Weather24LocationCompositionStateOwst_0(v64, 1, 1, v70);
      v72 = (uint64_t)v134;
      goto LABEL_46;
    }
    v58(v49, v18);
  }
  v64 = (uint64_t)v132;
  v63 = (uint64_t)v133;
  v58(v23, v18);
  v65 = v46 + *(int *)(v50 + 24);
  v66 = *(_QWORD *)v65;
  v67 = *(_BYTE *)(v65 + 8);
  sub_10008D47C(*(_QWORD *)v65, v67);
  sub_100109D8C();
  v69 = v68;
  sub_1000B15F8(v66, v67);
  if ((v69 & 0x100) == 0)
    goto LABEL_38;
  v73 = v63;
  v74 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v75 = objc_msgSend(v74, "userInterfaceIdiom");

  if (v75)
  {
    v76 = (uint64_t)v123;
    sub_1006F196C();
    v77 = &qword_100BFFFA0;
    v78 = v129;
    sub_100037768(v76, v129, &qword_100BFFFA0);
    swift_storeEnumTagMultiPayload(v78, v124, 1);
    sub_100345634((uint64_t)&unk_100BFFFD0);
    v80 = v79;
    v81 = sub_1006F2F3C();
    v82 = (uint64_t)v126;
    _ConditionalContent<>.init(storage:)(v78, v125, v128, v80, v81);
    v83 = v76;
  }
  else
  {
    v84 = (uint64_t)v121;
    sub_1006F196C();
    v85 = v46 + *(int *)(v50 + 32);
    v86 = *(_QWORD *)v85;
    v87 = *(unsigned __int8 *)(v85 + 8);
    sub_10008D47C(*(_QWORD *)v85, *(_BYTE *)(v85 + 8));
    sub_10010BCB4();
    v89 = v88;
    sub_1000B15F8(v86, v87);
    v90 = v89 & 1;
    if ((v89 & 1) != 0)
      v91 = 0;
    else
      v91 = 0x4010000000000000;
    v92 = v120;
    sub_100037768(v84, v120, &qword_100BFFFA0);
    v93 = v125;
    v94 = v92 + *(int *)(v125 + 36);
    *(_QWORD *)v94 = v91;
    *(_BYTE *)(v94 + 8) = v90;
    *(_BYTE *)(v94 + 9) = 0;
    sub_100021A14(v84, &qword_100BFFFA0);
    v77 = &qword_100BFFFA8;
    v95 = v92;
    v96 = v122;
    sub_1000787D4(v95, v122, &qword_100BFFFA8);
    v97 = v129;
    sub_100037768(v96, v129, &qword_100BFFFA8);
    swift_storeEnumTagMultiPayload(v97, v124, 0);
    sub_100345634((uint64_t)&unk_100BFFFD0);
    v99 = v98;
    v100 = sub_1006F2F3C();
    v82 = (uint64_t)v126;
    _ConditionalContent<>.init(storage:)(v97, v93, v128, v99, v100);
    v83 = v96;
  }
  sub_100021A14(v83, v77);
  v72 = (uint64_t)v134;
  v101 = v127;
  sub_100037768(v82, v127, &qword_100BFFFB0);
  *(_QWORD *)v73 = 0;
  *(_BYTE *)(v73 + 8) = 1;
  v102 = sub_1000BA294(&qword_100C00008);
  sub_100037768(v101, v73 + *(int *)(v102 + 48), &qword_100BFFFB0);
  v103 = v73 + *(int *)(v102 + 64);
  *(_QWORD *)v103 = 0;
  *(_BYTE *)(v103 + 8) = 1;
  v104 = v82;
  v63 = v73;
  sub_100021A14(v104, &qword_100BFFFB0);
  sub_100021A14(v101, &qword_100BFFFB0);
  v105 = sub_1000BA294(&qword_100BFFFC0);
  _s7Weather24LocationCompositionStateOwst_0(v73, 0, 1, v105);
  sub_1000787D4(v73, v64, &qword_100BFFFB8);
LABEL_46:
  v106 = SunriseSunsetViewModel.description.getter(v71);
  v108 = v107;
  swift_bridgeObjectRelease();
  v110 = HIBYTE(v108) & 0xF;
  if ((v108 & 0x2000000000000000) == 0)
    v110 = v106 & 0xFFFFFFFFFFFFLL;
  v111 = 1;
  if (v110)
  {
    *(_QWORD *)v72 = static VerticalAlignment.center.getter(v109);
    *(_QWORD *)(v72 + 8) = 0;
    *(_BYTE *)(v72 + 16) = 1;
    v112 = sub_1000BA294(&qword_100BFFF30);
    sub_1006F2574(v72 + *(int *)(v112 + 44));
    v111 = 0;
  }
  v113 = sub_1000BA294(&qword_100BFFF38);
  _s7Weather24LocationCompositionStateOwst_0(v72, v111, 1, v113);
  v114 = v131;
  sub_100037768(v47, v131, &qword_100BFFF18);
  sub_100037768(v64, v63, &qword_100BFFFB8);
  v115 = v136;
  sub_100037768(v72, v136, &qword_100BFFF08);
  v116 = v63;
  v117 = v135;
  sub_100037768(v114, v135, &qword_100BFFF18);
  v118 = sub_1000BA294(&qword_100BFFFC8);
  sub_100037768(v116, v117 + *(int *)(v118 + 48), &qword_100BFFFB8);
  sub_100037768(v115, v117 + *(int *)(v118 + 64), &qword_100BFFF08);
  sub_100021A14(v72, &qword_100BFFF08);
  sub_100021A14(v64, &qword_100BFFFB8);
  sub_100021A14(v47, &qword_100BFFF18);
  sub_100021A14(v115, &qword_100BFFF08);
  sub_100021A14(v116, &qword_100BFFFB8);
  sub_100021A14(v114, &qword_100BFFF18);
}

double sub_1006F15B0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t *v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  double result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[2];
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;

  v2 = v1;
  v51 = a1;
  v50 = type metadata accessor for SunriseSunsetComponentView(0);
  __chkstk_darwin(v50);
  v4 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.sunriseSunset.getter(v7);
  v10 = sub_1006F2BFC(v1, (uint64_t)v4);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(12, -1);
    v49 = v6;
    v14 = (uint8_t *)v13;
    v15 = swift_slowAlloc(32, -1);
    v48 = v5;
    v16 = v15;
    v54[0] = v15;
    *(_DWORD *)v14 = 136446210;
    v17 = ((uint64_t (*)(void))SunriseSunsetViewModel.title.getter)();
    v52 = sub_1000CE1C8(v17, v18, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
    swift_bridgeObjectRelease();
    sub_1000215BC((uint64_t)v4, type metadata accessor for SunriseSunsetComponentView);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "SunriseSunsetComponentView: next sun event is %{public}s", v14, 0xCu);
    swift_arrayDestroy(v16, 1);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    v19 = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v9, v48);
  }
  else
  {
    sub_1000215BC((uint64_t)v4, type metadata accessor for SunriseSunsetComponentView);

    v19 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  v20 = SunriseSunsetViewModel.title.getter(v19);
  v22 = v21;
  v23 = SunriseSunsetViewModel.timePeriodSymbols.getter();
  v24 = sub_1006F2644(v20, v22, v23);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath(&unk_1009C1118);
  v32 = static Edge.Set.horizontal.getter(KeyPath);
  v33 = v2 + *(int *)(v50 + 28);
  v34 = *(_QWORD *)v33;
  LOBYTE(v22) = *(_BYTE *)(v33 + 8);
  sub_10008D47C(*(_QWORD *)v33, v22);
  sub_100109B54();
  v36 = v35;
  sub_1000B15F8(v34, v22);
  if ((v36 & 1) != 0)
  {
    if (qword_100BC1EB0 != -1)
      swift_once(&qword_100BC1EB0, sub_1002425A4);
    v37 = &qword_100CAE530;
  }
  else
  {
    if (qword_100BC1EB8 != -1)
      swift_once(&qword_100BC1EB8, sub_100129188);
    v37 = &qword_100CAE538;
  }
  v38 = EdgeInsets.init(_all:)(*(double *)v37);
  v54[0] = v24;
  v54[1] = v26;
  v55 = v28 & 1;
  v56 = v30;
  v57 = KeyPath;
  v58 = 0x3FE0000000000000;
  v59 = v32;
  v60 = v38;
  v61 = v39;
  v62 = v40;
  v63 = v41;
  v64 = 0;
  v52 = SunriseSunsetViewModel.title.getter(v42);
  v53 = v43;
  v44 = sub_1000BA294(&qword_100BFFF68);
  v45 = sub_1006F2E54();
  v46 = sub_100114EF8();
  View.accessibilityLabel<A>(_:)(&v52, v44, &type metadata for String, v45, v46);
  swift_bridgeObjectRelease();
  sub_1000D31B4(v24, v26, v28 & 1);
  swift_release();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_1006F196C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;

  v1 = v0;
  v2 = type metadata accessor for SunriseSunsetViewModel(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SunriseSunsetChartView(0, v4);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000BA294(&qword_100BFFFE8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))(v6, v1, v2, v12);
  SunriseSunsetChartView.init(model:)(v6);
  KeyPath = swift_getKeyPath(&unk_1009C1148);
  v16 = v1 + *(int *)(type metadata accessor for SunriseSunsetComponentView(0) + 36);
  v17 = *(_QWORD *)v16;
  LOBYTE(v6) = *(_BYTE *)(v16 + 8);
  sub_10008D47C(*(_QWORD *)v16, (char)v6);
  sub_100109B54();
  LOBYTE(v3) = v18;
  v19 = sub_1000B15F8(v17, (char)v6);
  if ((v3 & 1) != 0)
    static Color.white.getter(v19);
  else
    static Color.black.getter(v19);
  v20 = Color.opacity(_:)(0.2);
  v21 = swift_release();
  (*(void (**)(char *, char *, uint64_t, __n128))(v8 + 16))(v14, v10, v7, v21);
  v22 = (uint64_t *)&v14[*(int *)(v11 + 36)];
  *v22 = KeyPath;
  v22[1] = v20;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v23 = sub_1006F2FC0();
  View.accessibilityHidden(_:)(1, v11, v23);
  sub_100021A14((uint64_t)v14, &qword_100BFFFE8);
}

double sub_1006F1B54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t *v18;
  char v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  double result;
  uint64_t v30;
  _QWORD v31[4];
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  v1 = SunriseSunsetViewModel.description.getter();
  v3 = v2;
  v4 = SunriseSunsetViewModel.timePeriodSymbols.getter();
  v5 = sub_1006F2958(v1, v3, v4);
  v7 = v6;
  v9 = v8;
  v30 = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath(&unk_1009C10E8);
  v12 = swift_getKeyPath(&unk_1009C1118);
  v13 = static Edge.Set.horizontal.getter(v12);
  v14 = v0 + *(int *)(type metadata accessor for SunriseSunsetComponentView(0) + 28);
  v15 = *(_QWORD *)v14;
  v16 = *(_BYTE *)(v14 + 8);
  sub_10008D47C(*(_QWORD *)v14, v16);
  sub_100109B54();
  LOBYTE(v1) = v17;
  sub_1000B15F8(v15, v16);
  if ((v1 & 1) != 0)
  {
    if (qword_100BC1EB0 != -1)
      swift_once(&qword_100BC1EB0, sub_1002425A4);
    v18 = &qword_100CAE530;
  }
  else
  {
    if (qword_100BC1EB8 != -1)
      swift_once(&qword_100BC1EB8, sub_100129188);
    v18 = &qword_100CAE538;
  }
  v19 = v9 & 1;
  v20 = EdgeInsets.init(_all:)(*(double *)v18);
  v31[2] = v5;
  v31[3] = v7;
  v32 = v19;
  v33 = v30;
  v34 = KeyPath;
  v35 = 1;
  v36 = 0;
  v37 = v12;
  v38 = 0x3FE0000000000000;
  v39 = v13;
  v40 = v20;
  v41 = v21;
  v42 = v22;
  v43 = v23;
  v44 = 0;
  v31[0] = SunriseSunsetViewModel.description.getter();
  v31[1] = v24;
  v25 = sub_1000BA294(&qword_100BFFF58);
  sub_100345634((uint64_t)&unk_100BFFF60);
  v27 = v26;
  v28 = sub_100114EF8();
  View.accessibilityLabel<A>(_:)(v31, v25, &type metadata for String, v27, v28);
  swift_bridgeObjectRelease();
  sub_1000D31B4(v5, v7, v19);
  swift_release();
  swift_release();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_1006F1D88(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = sub_1000BA294(&qword_100BFFEE0);
  __chkstk_darwin(v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v19 - v6;
  v8 = sub_1000BA294(&qword_100BFFEE8);
  __chkstk_darwin(v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v19 - v13;
  *(_QWORD *)v14 = static VerticalAlignment.lastTextBaseline.getter(v12);
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 0;
  v15 = sub_1000BA294(&qword_100BFFEF0);
  sub_1006F1F44((uint64_t)&v14[*(int *)(v15 + 44)]);
  *(_QWORD *)v7 = static HorizontalAlignment.leading.getter(v16);
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 0;
  v17 = sub_1000BA294(&qword_100BFFEF8);
  sub_1006F226C((uint64_t)&v7[*(int *)(v17 + 44)]);
  sub_100037768((uint64_t)v14, (uint64_t)v10, &qword_100BFFEE8);
  sub_100037768((uint64_t)v7, (uint64_t)v4, &qword_100BFFEE0);
  sub_100037768((uint64_t)v10, a1, &qword_100BFFEE8);
  v18 = sub_1000BA294(&qword_100BFFF00);
  sub_100037768((uint64_t)v4, a1 + *(int *)(v18 + 48), &qword_100BFFEE0);
  sub_100021A14((uint64_t)v7, &qword_100BFFEE0);
  sub_100021A14((uint64_t)v14, &qword_100BFFEE8);
  sub_100021A14((uint64_t)v4, &qword_100BFFEE0);
  sub_100021A14((uint64_t)v10, &qword_100BFFEE8);
}

void sub_1006F1F44(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = a1;
  v1 = sub_1000BA294(&qword_100BFFF48);
  __chkstk_darwin(v1);
  v3 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_1000BA294(&qword_100BFFF78);
  __chkstk_darwin(v32);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100BFFF80);
  __chkstk_darwin(v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v32 - v10;
  v12 = sub_1000BA294(&qword_100BFFF10);
  __chkstk_darwin(v12);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000BA294(&qword_100BFFF88);
  __chkstk_darwin(v15);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v32 - v19;
  sub_1006F15B0((uint64_t)v14);
  sub_100037768((uint64_t)v14, (uint64_t)v17, &qword_100BFFF10);
  *(_WORD *)&v17[*(int *)(v15 + 36)] = 257;
  sub_100021A14((uint64_t)v14, &qword_100BFFF10);
  sub_1000787D4((uint64_t)v17, (uint64_t)v20, &qword_100BFFF88);
  v22 = SunriseSunsetViewModel.description.getter(v21);
  v24 = v23;
  swift_bridgeObjectRelease();
  v25 = HIBYTE(v24) & 0xF;
  if ((v24 & 0x2000000000000000) == 0)
    v25 = v22 & 0xFFFFFFFFFFFFLL;
  if (v25)
  {
    sub_1006F1B54();
    sub_100037768((uint64_t)v3, (uint64_t)v5, &qword_100BFFF48);
    v26 = v32;
    *(_WORD *)&v5[*(int *)(v32 + 36)] = 257;
    sub_100021A14((uint64_t)v3, &qword_100BFFF48);
    sub_1000787D4((uint64_t)v5, (uint64_t)v11, &qword_100BFFF78);
    v27 = 0;
    v28 = v26;
  }
  else
  {
    v27 = 1;
    v28 = v32;
  }
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, v27, 1, v28);
  sub_100037768((uint64_t)v20, (uint64_t)v17, &qword_100BFFF88);
  sub_100037768((uint64_t)v11, (uint64_t)v8, &qword_100BFFF80);
  v29 = v33;
  sub_100037768((uint64_t)v17, v33, &qword_100BFFF88);
  v30 = sub_1000BA294(&qword_100BFFF90);
  sub_100037768((uint64_t)v8, v29 + *(int *)(v30 + 48), &qword_100BFFF80);
  v31 = v29 + *(int *)(v30 + 64);
  *(_QWORD *)v31 = 0;
  *(_BYTE *)(v31 + 8) = 0;
  sub_100021A14((uint64_t)v11, &qword_100BFFF80);
  sub_100021A14((uint64_t)v20, &qword_100BFFF88);
  sub_100021A14((uint64_t)v8, &qword_100BFFF80);
  sub_100021A14((uint64_t)v17, &qword_100BFFF88);
}

void sub_1006F226C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v36 = a1;
  v1 = sub_1000BA294(&qword_100BFFF08);
  __chkstk_darwin(v1);
  v37 = (uint64_t)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v5 = (char *)&v36 - v4;
  v6 = sub_1000BA294(&qword_100BFFF10);
  __chkstk_darwin(v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - v10;
  v12 = sub_1000BA294(&qword_100BFFF18);
  __chkstk_darwin(v12);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v36 - v16;
  __chkstk_darwin(v18);
  v20 = (char *)&v36 - v19;
  *(_QWORD *)v17 = static VerticalAlignment.center.getter(v21);
  *((_QWORD *)v17 + 1) = 0;
  v22 = 1;
  v17[16] = 1;
  v23 = (uint64_t)&v17[*(int *)(sub_1000BA294(&qword_100BFFF20) + 44)];
  sub_1006F15B0((uint64_t)v11);
  sub_100037768((uint64_t)v11, (uint64_t)v8, &qword_100BFFF10);
  sub_100037768((uint64_t)v8, v23, &qword_100BFFF10);
  v24 = v23 + *(int *)(sub_1000BA294(&qword_100BFFF28) + 48);
  *(_QWORD *)v24 = 0;
  *(_BYTE *)(v24 + 8) = 0;
  sub_100021A14((uint64_t)v11, &qword_100BFFF10);
  sub_100021A14((uint64_t)v8, &qword_100BFFF10);
  sub_1000787D4((uint64_t)v17, (uint64_t)v20, &qword_100BFFF18);
  v26 = SunriseSunsetViewModel.description.getter(v25);
  v28 = v27;
  swift_bridgeObjectRelease();
  v30 = HIBYTE(v28) & 0xF;
  if ((v28 & 0x2000000000000000) == 0)
    v30 = v26 & 0xFFFFFFFFFFFFLL;
  if (v30)
  {
    *(_QWORD *)v5 = static VerticalAlignment.center.getter(v29);
    *((_QWORD *)v5 + 1) = 0;
    v5[16] = 1;
    v31 = sub_1000BA294(&qword_100BFFF30);
    sub_1006F2574((uint64_t)&v5[*(int *)(v31 + 44)]);
    v22 = 0;
  }
  v32 = sub_1000BA294(&qword_100BFFF38);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v5, v22, 1, v32);
  sub_100037768((uint64_t)v20, (uint64_t)v14, &qword_100BFFF18);
  v33 = v37;
  sub_100037768((uint64_t)v5, v37, &qword_100BFFF08);
  v34 = v36;
  sub_100037768((uint64_t)v14, v36, &qword_100BFFF18);
  v35 = sub_1000BA294(&qword_100BFFF40);
  sub_100037768(v33, v34 + *(int *)(v35 + 48), &qword_100BFFF08);
  sub_100021A14((uint64_t)v5, &qword_100BFFF08);
  sub_100021A14((uint64_t)v20, &qword_100BFFF18);
  sub_100021A14(v33, &qword_100BFFF08);
  sub_100021A14((uint64_t)v14, &qword_100BFFF18);
}

void sub_1006F2574(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  sub_1000BA294(&qword_100BFFF48);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v9 - v6;
  sub_1006F1B54();
  sub_100037768((uint64_t)v7, (uint64_t)v4, &qword_100BFFF48);
  sub_1000C4DE0((uint64_t)v4);
  v8 = a1 + *(int *)(sub_1000BA294(&qword_100BFFF50) + 48);
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 0;
  sub_100021A14((uint64_t)v7, &qword_100BFFF48);
  sub_1000DD2A8();
}

uint64_t sub_1006F2644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  BOOL v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  __n128 v41;
  char *v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;

  v4 = v3;
  v51 = a2;
  v52 = a3;
  v50 = a1;
  v5 = type metadata accessor for TypesettingLanguageAwareLineHeightRatio(0);
  v54 = *(_QWORD *)(v5 - 8);
  v55 = v5;
  __chkstk_darwin(v5);
  v53 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TimeStyle(0);
  v48 = *(_QWORD *)(v7 - 8);
  v49 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Font.Leading(0);
  v46 = *(_QWORD *)(v10 - 8);
  v47 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ContentSizeCategory(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v46 - v18;
  v20 = type metadata accessor for SunriseSunsetComponentView(0);
  sub_100109D64();
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for ContentSizeCategory.extraExtraLarge(_:), v13);
  v21 = sub_1004F5D00((uint64_t)v19, (uint64_t)v16);
  v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v16, v13);
  v22(v19, v13);
  v23 = v4 + *(int *)(v20 + 28);
  v24 = *(_QWORD *)v23;
  LOBYTE(v14) = *(_BYTE *)(v23 + 8);
  sub_10008D47C(*(_QWORD *)v23, v14);
  sub_100109B54();
  v26 = v25;
  v27 = sub_1000B15F8(v24, v14);
  if (!v21)
  {
    if ((v26 & 1) == 0)
    {
      v28 = static Font.largeTitle.getter(v27);
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  if ((v26 & 1) != 0)
  {
LABEL_5:
    v28 = static Font.title2.getter(v27);
    goto LABEL_7;
  }
  v28 = static Font.title.getter(v27);
LABEL_7:
  v29 = v28;
  v31 = v46;
  v30 = v47;
  (*(void (**)(char *, _QWORD, uint64_t))(v46 + 104))(v12, enum case for Font.Leading.tight(_:), v47);
  v32 = Font.leading(_:)(v12, v29);
  v33 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v31 + 8))(v12, v30, v33);
  type metadata accessor for Style(0);
  static Style.componentTime.getter();
  v34 = TimeStyle.formatTime(_:periodSymbols:font:)(v50, v51, v52, v32);
  v36 = v35;
  v38 = v37;
  v40 = v39 & 1;
  v41.n128_f64[0] = (*(double (**)(char *, uint64_t))(v48 + 8))(v9, v49);
  v42 = v53;
  static TypesettingLanguageAwareLineHeightRatio.disable.getter(v41);
  v43 = Text.typesettingLanguageAwareLineHeightRatio(_:isEnabled:)(v42, 1, v34, v36, v40, v38);
  sub_1000D31B4(v34, v36, v40);
  swift_release();
  v44 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, __n128))(v54 + 8))(v42, v55, v44);
  return v43;
}

uint64_t sub_1006F2958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  BOOL v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = v3;
  v38 = a2;
  v39 = a3;
  v37 = a1;
  v5 = type metadata accessor for TimeStyle(0);
  v40 = *(_QWORD *)(v5 - 8);
  v41 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Font.Leading(0);
  v35 = *(_QWORD *)(v8 - 8);
  v36 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ContentSizeCategory(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v35 - v16;
  v18 = type metadata accessor for SunriseSunsetComponentView(0);
  sub_100109D64();
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for ContentSizeCategory.extraExtraLarge(_:), v11);
  v19 = sub_1004F5D00((uint64_t)v17, (uint64_t)v14);
  v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  v20(v14, v11);
  v20(v17, v11);
  v21 = v4 + *(int *)(v18 + 28);
  v22 = *(_QWORD *)v21;
  LOBYTE(v17) = *(_BYTE *)(v21 + 8);
  sub_10008D47C(*(_QWORD *)v21, (char)v17);
  sub_100109B54();
  v24 = v23;
  v25 = sub_1000B15F8(v22, (char)v17);
  if (!v19)
  {
    if ((v24 & 1) == 0)
    {
      v26 = static Font.subheadline.getter(v25);
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  if ((v24 & 1) != 0)
  {
LABEL_5:
    v26 = static Font.footnote.getter(v25);
    goto LABEL_7;
  }
  v26 = static Font.caption2.getter(v25);
LABEL_7:
  v27 = v26;
  v29 = v35;
  v28 = v36;
  (*(void (**)(char *, _QWORD, uint64_t))(v35 + 104))(v10, enum case for Font.Leading.tight(_:), v36);
  v30 = Font.leading(_:)(v10, v27);
  v31 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v29 + 8))(v10, v28, v31);
  type metadata accessor for Style(0);
  static Style.componentTime.getter();
  v32 = TimeStyle.formatTime(_:periodSymbols:font:)(v37, v38, v39, v30);
  v33 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v40 + 8))(v7, v41, v33);
  return v32;
}

uint64_t sub_1006F2BD0(_QWORD *a1)
{
  __n128 v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.sunriseSunsetNightLineColor.setter(v1);
}

uint64_t sub_1006F2BFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SunriseSunsetComponentView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1006F2C40()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_100BFFEB8;
  if (!qword_100BFFEB8)
  {
    v1 = sub_100075EB0(&qword_100BD9A68);
    v2 = sub_100075EB0(&qword_100BFFE90);
    sub_10027248C((uint64_t)&unk_100BFFEA8);
    v4[0] = v2;
    v4[1] = v3;
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10007A100((uint64_t)&qword_100BC4E48);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFFEB8);
  }
  return result;
}

void sub_1006F2D0C(uint64_t a1)
{
  unint64_t *v1;
  void (*v2)(void);
  uint64_t *v3;
  uint64_t v4;

  if (!sub_10009987C(a1))
  {
    v4 = sub_1000B4444(0, v3);
    v2();
    sub_10007A100((uint64_t)&qword_100BC6768);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4), v1);
  }
  sub_100099960();
}

unint64_t sub_1006F2D78()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_100BFFEC8;
  if (!qword_100BFFEC8)
  {
    v1 = sub_100075EB0(&qword_100BD9A58);
    v2 = sub_100075EB0(&qword_100BFFE78);
    sub_10027248C((uint64_t)&unk_100BFFED0);
    v4[0] = v2;
    v4[1] = v3;
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10007A100((uint64_t)&qword_100BC4E48);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFFEC8);
  }
  return result;
}

unint64_t sub_1006F2E54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFFF70;
  if (!qword_100BFFF70)
  {
    v1 = sub_100075EB0(&qword_100BFFF68);
    sub_1006F2EE0((uint64_t)&qword_100BDB4F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFFF70);
  }
  return result;
}

void sub_1006F2EE0(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t *v3;

  if (!sub_10009987C(a1))
  {
    sub_1000AE8E8(0, v3);
    sub_10027248C(v2);
    atomic_store(sub_100098C44((uint64_t)&protocol conformance descriptor for <> ModifiedContent<A, B>), v1);
  }
  sub_100099960();
}

unint64_t sub_1006F2F3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFFFD8;
  if (!qword_100BFFFD8)
  {
    v1 = sub_100075EB0(&qword_100BFFFA0);
    sub_1006F2FC0();
    sub_10007A100((uint64_t)&qword_100BC4E48);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFFFD8);
  }
  return result;
}

unint64_t sub_1006F2FC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFFFE0;
  if (!qword_100BFFFE0)
  {
    v1 = sub_100075EB0(&qword_100BFFFE8);
    sub_10007A100((uint64_t)&unk_100BFFFF0);
    sub_10027248C((uint64_t)&unk_100BFFFF8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFFFE0);
  }
  return result;
}

uint64_t sub_1006F305C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.sunriseSunsetNightLineColor.getter();
  *a1 = result;
  return result;
}

unint64_t sub_1006F308C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00010;
  if (!qword_100C00010)
  {
    v1 = sub_100075EB0(&qword_100C00018);
    sub_1006F2D0C((uint64_t)&unk_100BFFEB0);
    sub_1006F2D0C((uint64_t)&unk_100BFFEC0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00010);
  }
  return result;
}

uint64_t Date.urlRepresentationParameter.getter()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_1006F3140, 0, 0);
}

uint64_t sub_1006F3140()
{
  uint64_t v0;
  id v1;
  Class isa;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = objc_msgSend(objc_allocWithZone((Class)NSISO8601DateFormatter), "init");
  objc_msgSend(v1, "setFormatOptions:", 1907);
  isa = Date._bridgeToObjectiveC()().super.isa;
  v3 = objc_msgSend(v1, "stringFromDate:", isa);

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  return sub_1000BB484(v4, v6, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1006F31E8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100C00024);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1006F322C;
  return Date.urlRepresentationParameter.getter();
}

uint64_t sub_1006F322C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc(*(_QWORD *)(*v2 + 16));
  return sub_1000BB484(a1, a2, *(uint64_t (**)(void))(v6 + 8));
}

uint64_t sub_1006F3280()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    sub_1006F32D0();

  swift_release();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 56));
  sub_1000BF8D0(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  return v0;
}

void sub_1006F32D0()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  const __SCPreferences *prefs;

  v1 = (void *)v0[2];
  if (v1)
  {
    prefs = v1;
    UnfairLock.lock()();
    v2 = (void *)v0[5];
    v0[5] = 0;

    v3 = v0[7];
    v0[7] = 0;
    swift_unknownObjectRelease(v3);
    SCPreferencesSetDispatchQueue(prefs, 0);
    SCPreferencesSetCallback(prefs, 0, 0);
    UnfairLock.unlock()();

  }
}

uint64_t sub_1006F3358()
{
  uint64_t v0;

  sub_1006F3280();
  return swift_deallocClassInstance(v0, 80, 7);
}

void sub_1006F3378(const __SCPreferences *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  NSObject *oslog;

  if (a3)
  {
    swift_retain();
    sub_100020A3C(a1);
    swift_release(a3);
  }
  else
  {
    if (qword_100BC2498 != -1)
      swift_once(&qword_100BC2498, sub_100159704);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_1000AECD4(v5, (uint64_t)qword_100CAF1B0);
    oslog = Logger.logObject.getter(v6);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Missing context", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

  }
}

void sub_1006F3474(void *a1, uint64_t a2, uint64_t a3)
{
  const __SCPreferences *v5;

  v5 = a1;
  sub_1006F3378(v5, a2, a3);

}

NSString sub_1006F34BC()
{
  uint64_t v0;
  uint64_t v1;
  NSString v2;
  uint64_t v4;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0xE000000000000000;
  swift_retain();
  v4 = v0;
  v1 = type metadata accessor for AirplaneModeMonitor();
  _print_unlocked<A, B>(_:_:)(&v4, v5, v1, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  swift_release();
  v2 = String._bridgeToObjectiveC()();

  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1006F3540()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1006F3564()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1006F3590()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_1006F35B4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(unsigned __int8 *)(v0 + 32));
}

uint64_t sub_1006F35E4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  a1[3] = sub_1000BA294(&qword_100C00108);
  a1[4] = sub_1006F36D4();
  sub_10005F164(a1);
  return ShortDescription.init(name:_:)(0, 0, v2, &type metadata for VFXTestViewAction);
}

uint64_t sub_1006F366C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006F3718();
  return ShortDescribable.description.getter(a1, v2);
}

unint64_t sub_1006F3698()
{
  unint64_t result;

  result = qword_100C00100;
  if (!qword_100C00100)
  {
    result = swift_getWitnessTable(&unk_1009C1210, &type metadata for VFXTestViewAction);
    atomic_store(result, (unint64_t *)&qword_100C00100);
  }
  return result;
}

unint64_t sub_1006F36D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00110;
  if (!qword_100C00110)
  {
    v1 = sub_100075EB0(&qword_100C00108);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00110);
  }
  return result;
}

unint64_t sub_1006F3718()
{
  unint64_t result;

  result = qword_100C00118;
  if (!qword_100C00118)
  {
    result = swift_getWitnessTable(&unk_1009C1238, &type metadata for VFXTestViewAction);
    atomic_store(result, (unint64_t *)&qword_100C00118);
  }
  return result;
}

ValueMetadata *type metadata accessor for VFXTestViewAction()
{
  return &type metadata for VFXTestViewAction;
}

uint64_t sub_1006F3764(uint64_t a1)
{
  return sub_1000C4DEC(a1, qword_100CAEFB0, 0x6569766552707041, 119);
}

uint64_t sub_1006F3784(uint64_t a1)
{
  return sub_1000BC970(a1, qword_100CAEFE0, 1953720652);
}

uint64_t sub_1006F3798(uint64_t a1)
{
  return sub_1000BB48C(a1, qword_100CAF040, 19, 0x8000000100A117D0);
}

uint64_t sub_1006F37B8(uint64_t a1)
{
  return sub_100040308(a1, qword_100CAF070, 0x686372616553, 0xE600000000000000);
}

uint64_t sub_1006F37D4(uint64_t a1)
{
  return sub_1000BB48C(a1, qword_100CAF088, 16, 0x8000000100A0E120);
}

uint64_t sub_1006F37F4(uint64_t a1)
{
  return sub_1000B4CF8(a1, qword_100CAF0B8, 0x6163696669746F4ELL, 0x736E6F6974);
}

uint64_t sub_1006F381C(uint64_t a1)
{
  return sub_1000B4CF8(a1, qword_100CAF0D0, 0x655774726F706552, 0x7265687461);
}

uint64_t sub_1006F3844(uint64_t a1)
{
  return sub_100040308(a1, qword_100CAF0E8, 0x69566C6961746544, 0xEA00000000007765);
}

uint64_t sub_1006F3868()
{
  uint64_t result;

  sub_100120350();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000011, 0x80000001009F0D20, 0x6D61726665726957, 0xE900000000000065);
  qword_100CAF118 = result;
  return result;
}

uint64_t sub_1006F38C8(uint64_t a1)
{
  return sub_1000BB48C(a1, qword_100CAF138, 19, 0x8000000100A11830);
}

uint64_t sub_1006F38E8(uint64_t a1)
{
  return sub_1000BB48C(a1, qword_100CAF150, 21, 0x8000000100A11810);
}

uint64_t sub_1006F3908(uint64_t a1)
{
  return sub_1000C2F58(a1, qword_100CAF1E0, 5001813);
}

uint64_t sub_1006F391C(uint64_t a1)
{
  return sub_1000C3F4C(a1, qword_100CAF1F8, 0x6974634172657355, 2037672310);
}

uint64_t sub_1006F3940(uint64_t a1)
{
  return sub_1000C4DEC(a1, qword_100CAF210, 0x74756374726F6873, 115);
}

uint64_t sub_1006F3960(uint64_t a1)
{
  return sub_1000DDE90(a1, qword_100CAF228, 0x7463617265746E69, 7237481);
}

uint64_t sub_1006F3984(uint64_t a1)
{
  return sub_100040308(a1, qword_100CAF240, 0x6775626544, 0xE500000000000000);
}

uint64_t sub_1006F39A0(uint64_t a1)
{
  return sub_1000C2F58(a1, qword_100CAF270, 5525584);
}

uint64_t sub_1006F39B4(uint64_t a1)
{
  return sub_1000C4DEC(a1, qword_100CAF2D0, 0x656974696C697455, 115);
}

_QWORD *sub_1006F39D4(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _BYTE *v52;
  int *v53;
  uint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t, uint64_t);
  id v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v98;
  int *v100;
  char *v101;
  int *v102;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v14 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Location.Identifier(0);
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&a2[v9], 1, v7))
    {
      v12 = sub_1000BA294(&qword_100BCD680);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v7);
    }
    v15 = a3[6];
    v16 = &a1[v15];
    v17 = &a2[v15];
    v18 = *(_QWORD *)&a2[v15 + 8];
    *(_QWORD *)v16 = *(_QWORD *)&a2[v15];
    *((_QWORD *)v16 + 1) = v18;
    v19 = *(_QWORD *)&a2[v15 + 16];
    v20 = *(_QWORD *)&a2[v15 + 24];
    v21 = *(_QWORD *)&a2[v15 + 32];
    v22 = *(_QWORD *)&a2[v15 + 40];
    v23 = a2[v15 + 48];
    swift_bridgeObjectRetain();
    sub_100176D88(v19, v20, v21, v22, v23);
    *((_QWORD *)v16 + 2) = v19;
    *((_QWORD *)v16 + 3) = v20;
    *((_QWORD *)v16 + 4) = v21;
    *((_QWORD *)v16 + 5) = v22;
    v16[48] = v23;
    v24 = *((_QWORD *)v17 + 8);
    *((_QWORD *)v16 + 7) = *((_QWORD *)v17 + 7);
    *((_QWORD *)v16 + 8) = v24;
    v25 = *((_QWORD *)v17 + 10);
    *((_QWORD *)v16 + 9) = *((_QWORD *)v17 + 9);
    *((_QWORD *)v16 + 10) = v25;
    v26 = *((_QWORD *)v17 + 12);
    *((_QWORD *)v16 + 11) = *((_QWORD *)v17 + 11);
    *((_QWORD *)v16 + 12) = v26;
    v27 = *((_QWORD *)v17 + 14);
    *((_QWORD *)v16 + 13) = *((_QWORD *)v17 + 13);
    *((_QWORD *)v16 + 14) = v27;
    v28 = *((_QWORD *)v17 + 16);
    *((_QWORD *)v16 + 15) = *((_QWORD *)v17 + 15);
    *((_QWORD *)v16 + 16) = v28;
    v16[136] = v17[136];
    *(_WORD *)(v16 + 137) = *(_WORD *)(v17 + 137);
    v29 = *((_QWORD *)v17 + 18);
    v30 = *((_QWORD *)v17 + 19);
    v16[160] = v17[160];
    v16[161] = v17[161];
    v31 = a3[7];
    v32 = a3[8];
    v33 = *(_QWORD *)&a2[v31];
    *((_QWORD *)v16 + 18) = v29;
    *((_QWORD *)v16 + 19) = v30;
    *(_QWORD *)&a1[v31] = v33;
    *(_QWORD *)&a1[v32] = *(_QWORD *)&a2[v32];
    v101 = a2;
    v102 = a3;
    v34 = a3[9];
    v35 = a1;
    v36 = &a1[v34];
    v37 = &a2[v34];
    v38 = type metadata accessor for LocationFooterViewModel(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v39 = (int *)v38;
    swift_bridgeObjectRetain();
    swift_retain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v37, 1, v38))
    {
      v40 = sub_1000BA294(&qword_100BCD690);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      v41 = v101;
      v14 = v35;
    }
    else
    {
      *v36 = *v37;
      *(_WORD *)(v36 + 1) = *(_WORD *)(v37 + 1);
      v42 = *((_QWORD *)v37 + 2);
      *((_QWORD *)v36 + 1) = *((_QWORD *)v37 + 1);
      *((_QWORD *)v36 + 2) = v42;
      v43 = *(int *)(v38 + 32);
      v44 = &v36[v43];
      v45 = v37;
      v46 = &v37[v43];
      v47 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v46, 1, v47))
      {
        v48 = sub_1000BA294(&qword_100BD4280);
        memcpy(v44, v46, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v44, v46, v47);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v44, 0, 1, v47);
      }
      v14 = v35;
      v100 = v39;
      v49 = v39[9];
      v50 = (uint64_t)v36;
      v51 = &v36[v49];
      v52 = &v45[v49];
      *v51 = v45[v49];
      *((_QWORD *)v51 + 1) = *(_QWORD *)&v45[v49 + 8];
      v53 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
      v54 = v53[6];
      v55 = &v51[v54];
      v56 = &v52[v54];
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v56, 1, v47))
      {
        v57 = sub_1000BA294(&qword_100BD4280);
        memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v55, v56, v47);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v55, 0, 1, v47);
      }
      v58 = v53[7];
      v59 = &v51[v58];
      v60 = &v52[v58];
      v61 = v60[1];
      *v59 = *v60;
      v59[1] = v61;
      *(_QWORD *)&v51[v53[8]] = *(_QWORD *)&v52[v53[8]];
      *(_BYTE *)(v50 + v100[10]) = v45[v100[10]];
      v62 = v100[11];
      v63 = (void *)(v50 + v62);
      v64 = &v45[v62];
      v65 = type metadata accessor for LocationOfInterest(0);
      swift_bridgeObjectRetain();
      swift_retain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v64, 1, v65))
      {
        v66 = sub_1000BA294(&qword_100BC3118);
        memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, _BYTE *, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v63, v64, v65);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v63, 0, 1, v65);
      }
      *(_BYTE *)(v50 + v100[12]) = v45[v100[12]];
      *(_BYTE *)(v50 + v100[13]) = v45[v100[13]];
      v67 = v100[14];
      v68 = (_BYTE *)(v50 + v67);
      v69 = &v45[v67];
      v70 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v69, 1, (uint64_t)v70))
      {
        v71 = sub_1000BA294(&qword_100BCD688);
        memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
      }
      else
      {
        *v68 = *v69;
        v72 = v70[5];
        v73 = &v68[v72];
        v74 = &v69[v72];
        v75 = type metadata accessor for Location(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v75 - 8) + 16))(v73, v74, v75);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(&v68[v70[6]], &v69[v70[6]], v65);
        v68[v70[7]] = v69[v70[7]];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v68, 0, 1, (uint64_t)v70);
      }
      v41 = v101;
      _s7Weather24LocationCompositionStateOwst_0(v50, 0, 1, (uint64_t)v100);
    }
    v76 = v102[11];
    *((_BYTE *)v14 + v102[10]) = *((_BYTE *)v41 + v102[10]);
    *((_BYTE *)v14 + v76) = *((_BYTE *)v41 + v76);
    v77 = v102[13];
    *((_BYTE *)v14 + v102[12]) = *((_BYTE *)v41 + v102[12]);
    *((_BYTE *)v14 + v77) = *((_BYTE *)v41 + v77);
    v78 = v102[15];
    *((_BYTE *)v14 + v102[14]) = *((_BYTE *)v41 + v102[14]);
    v79 = *(void **)((char *)v41 + v78);
    *(_QWORD *)((char *)v14 + v78) = v79;
    v80 = v102[17];
    *((_BYTE *)v14 + v102[16]) = *((_BYTE *)v41 + v102[16]);
    *((_BYTE *)v14 + v80) = *((_BYTE *)v41 + v80);
    v81 = v102[19];
    *((_BYTE *)v14 + v102[18]) = *((_BYTE *)v41 + v102[18]);
    v82 = (uint64_t)v14 + v81;
    v83 = (uint64_t)v41 + v81;
    v84 = type metadata accessor for Date(0);
    v85 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 16);
    v86 = v79;
    v85(v82, v83, v84);
    v87 = v102[20];
    v88 = (char *)v14 + v87;
    v89 = (char *)v41 + v87;
    v90 = type metadata accessor for ForegroundEffect(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v89, 1, v90))
    {
      v91 = sub_1000BA294(&qword_100BC5B30);
      memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 16))(v88, v89, v90);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v88, 0, 1, v90);
    }
    v92 = v102[22];
    *((_BYTE *)v14 + v102[21]) = *((_BYTE *)v41 + v102[21]);
    *(_QWORD *)((char *)v14 + v92) = *(_QWORD *)((char *)v41 + v92);
    v93 = v102[24];
    *((_BYTE *)v14 + v102[23]) = *((_BYTE *)v41 + v102[23]);
    v94 = (uint64_t)v14 + v93;
    v95 = (uint64_t)v41 + v93;
    v96 = type metadata accessor for LocationEntity(0);
    v97 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v96 - 8) + 16);
    v98 = swift_bridgeObjectRetain();
    v97(v94, v95, v96, v98);
  }
  return v14;
}

uint64_t sub_1006F4090(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  void *v10;
  const void *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  int v32;
  uint64_t v33;
  void *v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  void *v39;
  const void *v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  void *v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  const void *v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  const void *v101;
  int v102;
  int v103;
  size_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  void *v111;
  const void *v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  _BYTE *v120;
  int *v121;
  int v122;
  int v123;
  uint64_t v124;
  _BYTE *v125;
  _BYTE *v126;
  uint64_t v127;
  uint64_t v128;
  _BYTE *v129;
  _BYTE *v130;
  uint64_t v131;
  uint64_t v132;
  void *__dst;
  uint64_t v134;
  int *v135;
  int *v136;
  int *v137;

  v6 = type metadata accessor for Location.Identifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = _s7Weather24LocationCompositionStateOwet_0(a1 + v9, 1, v6);
  v13 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v10, v11, v6);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    v14 = sub_1000BA294(&qword_100BCD680);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v8((uint64_t)v10, (uint64_t)v11, v6);
LABEL_7:
  v15 = a3[6];
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_QWORD *)v16 = *(_QWORD *)(a2 + v15);
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(a2 + v15 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(v17 + 16);
  v19 = *(_QWORD *)(v17 + 24);
  v20 = *(_QWORD *)(v17 + 32);
  v21 = *(_QWORD *)(v17 + 40);
  v22 = *(_BYTE *)(v17 + 48);
  sub_100176D88(v18, v19, v20, v21, v22);
  v23 = *(_QWORD *)(v16 + 16);
  v24 = *(_QWORD *)(v16 + 24);
  v25 = *(_QWORD *)(v16 + 32);
  v26 = *(_QWORD *)(v16 + 40);
  *(_QWORD *)(v16 + 16) = v18;
  *(_QWORD *)(v16 + 24) = v19;
  *(_QWORD *)(v16 + 32) = v20;
  *(_QWORD *)(v16 + 40) = v21;
  v27 = *(_BYTE *)(v16 + 48);
  *(_BYTE *)(v16 + 48) = v22;
  sub_100176DD4(v23, v24, v25, v26, v27);
  *(_QWORD *)(v16 + 56) = *(_QWORD *)(v17 + 56);
  *(_QWORD *)(v16 + 64) = *(_QWORD *)(v17 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v16 + 72) = *(_QWORD *)(v17 + 72);
  *(_QWORD *)(v16 + 80) = *(_QWORD *)(v17 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v16 + 88) = *(_QWORD *)(v17 + 88);
  *(_QWORD *)(v16 + 96) = *(_QWORD *)(v17 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v16 + 104) = *(_QWORD *)(v17 + 104);
  *(_QWORD *)(v16 + 112) = *(_QWORD *)(v17 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v16 + 120) = *(_QWORD *)(v17 + 120);
  *(_QWORD *)(v16 + 128) = *(_QWORD *)(v17 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v16 + 136) = *(_BYTE *)(v17 + 136);
  *(_BYTE *)(v16 + 137) = *(_BYTE *)(v17 + 137);
  *(_BYTE *)(v16 + 138) = *(_BYTE *)(v17 + 138);
  *(_QWORD *)(v16 + 144) = *(_QWORD *)(v17 + 144);
  *(_QWORD *)(v16 + 152) = *(_QWORD *)(v17 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v16 + 160) = *(_BYTE *)(v17 + 160);
  *(_BYTE *)(v16 + 161) = *(_BYTE *)(v17 + 161);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_retain();
  swift_release();
  v28 = a3[9];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = (int *)type metadata accessor for LocationFooterViewModel(0);
  LODWORD(v21) = _s7Weather24LocationCompositionStateOwet_0(v29, 1, (uint64_t)v31);
  v32 = _s7Weather24LocationCompositionStateOwet_0(v30, 1, (uint64_t)v31);
  if ((_DWORD)v21)
  {
    if (!v32)
    {
      *(_BYTE *)v29 = *(_BYTE *)v30;
      *(_BYTE *)(v29 + 1) = *(_BYTE *)(v30 + 1);
      *(_BYTE *)(v29 + 2) = *(_BYTE *)(v30 + 2);
      *(_QWORD *)(v29 + 8) = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v29 + 16) = *(_QWORD *)(v30 + 16);
      v33 = v31[8];
      v134 = v29;
      v34 = (void *)(v29 + v33);
      v35 = (const void *)(v30 + v33);
      v36 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v35, 1, v36))
      {
        v37 = sub_1000BA294(&qword_100BD4280);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v34, 0, 1, v36);
      }
      v136 = v31;
      v47 = v31[9];
      v48 = v134 + v47;
      v49 = v30 + v47;
      *(_BYTE *)v48 = *(_BYTE *)(v30 + v47);
      *(_QWORD *)(v48 + 8) = *(_QWORD *)(v30 + v47 + 8);
      v50 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
      v51 = v50[6];
      __dst = (void *)(v48 + v51);
      v52 = (const void *)(v49 + v51);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v52, 1, v36))
      {
        v53 = sub_1000BA294(&qword_100BD4280);
        memcpy(__dst, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(__dst, v52, v36);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v36);
      }
      v54 = v50[7];
      v55 = (_QWORD *)(v48 + v54);
      v56 = (_QWORD *)(v49 + v54);
      *v55 = *v56;
      v55[1] = v56[1];
      *(_QWORD *)(v48 + v50[8]) = *(_QWORD *)(v49 + v50[8]);
      *(_BYTE *)(v134 + v31[10]) = *(_BYTE *)(v30 + v31[10]);
      v57 = v31[11];
      v58 = (void *)(v134 + v57);
      v59 = (const void *)(v30 + v57);
      v60 = type metadata accessor for LocationOfInterest(0);
      swift_bridgeObjectRetain();
      swift_retain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v59, 1, v60))
      {
        v61 = sub_1000BA294(&qword_100BC3118);
        memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v58, v59, v60);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v58, 0, 1, v60);
      }
      *(_BYTE *)(v134 + v31[12]) = *(_BYTE *)(v30 + v31[12]);
      *(_BYTE *)(v134 + v31[13]) = *(_BYTE *)(v30 + v31[13]);
      v62 = v31[14];
      v63 = (_BYTE *)(v134 + v62);
      v64 = (_BYTE *)(v30 + v62);
      v65 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v64, 1, (uint64_t)v65))
      {
        v66 = sub_1000BA294(&qword_100BCD688);
        memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      }
      else
      {
        *v63 = *v64;
        v67 = v65[5];
        v68 = &v63[v67];
        v69 = &v64[v67];
        v70 = type metadata accessor for Location(0);
        v71 = v68;
        v31 = v136;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v71, v69, v70);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(&v63[v65[6]], &v64[v65[6]], v60);
        v63[v65[7]] = v64[v65[7]];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v63, 0, 1, (uint64_t)v65);
      }
      v72 = v134;
      v73 = (uint64_t)v31;
      goto LABEL_30;
    }
    goto LABEL_13;
  }
  if (v32)
  {
    sub_1000215BC(v29, type metadata accessor for LocationFooterViewModel);
LABEL_13:
    v38 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BCD690) - 8) + 64);
    v39 = (void *)v29;
    v40 = (const void *)v30;
LABEL_14:
    memcpy(v39, v40, v38);
    goto LABEL_31;
  }
  *(_BYTE *)v29 = *(_BYTE *)v30;
  *(_BYTE *)(v29 + 1) = *(_BYTE *)(v30 + 1);
  *(_BYTE *)(v29 + 2) = *(_BYTE *)(v30 + 2);
  *(_QWORD *)(v29 + 8) = *(_QWORD *)(v30 + 8);
  *(_QWORD *)(v29 + 16) = *(_QWORD *)(v30 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v41 = v31[8];
  v42 = (void *)(v29 + v41);
  v43 = (const void *)(v30 + v41);
  v44 = type metadata accessor for URL(0);
  v45 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v42, 1, v44);
  v46 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v43, 1, v44);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v42, 0, 1, v44);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v95 = *(_QWORD *)(v44 - 8);
  if (v46)
  {
    (*(void (**)(void *, uint64_t))(v95 + 8))(v42, v44);
LABEL_41:
    v96 = sub_1000BA294(&qword_100BD4280);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, const void *, uint64_t))(v95 + 24))(v42, v43, v44);
LABEL_42:
  v137 = v31;
  v97 = v31[9];
  v98 = v29 + v97;
  v99 = v30 + v97;
  *(_BYTE *)v98 = *(_BYTE *)(v30 + v97);
  *(_QWORD *)(v98 + 8) = *(_QWORD *)(v30 + v97 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v135 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
  v100 = v135[6];
  v101 = (const void *)(v99 + v100);
  v132 = v98 + v100;
  v102 = _s7Weather24LocationCompositionStateOwet_0(v98 + v100, 1, v44);
  v103 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v101, 1, v44);
  if (v102)
  {
    if (v103)
    {
      v104 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD4280) - 8) + 64);
      v105 = (void *)v132;
LABEL_47:
      memcpy(v105, v101, v104);
      goto LABEL_51;
    }
    (*(void (**)(uint64_t, const void *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v132, v101, v44);
    _s7Weather24LocationCompositionStateOwst_0(v132, 0, 1, v44);
  }
  else
  {
    v106 = *(_QWORD *)(v44 - 8);
    if (v103)
    {
      (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v132, v44);
      v104 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD4280) - 8) + 64);
      v105 = (void *)v132;
      goto LABEL_47;
    }
    (*(void (**)(uint64_t, const void *, uint64_t))(v106 + 24))(v132, v101, v44);
  }
LABEL_51:
  v107 = v135[7];
  v108 = (_QWORD *)(v98 + v107);
  v109 = (_QWORD *)(v99 + v107);
  *v108 = *v109;
  v108[1] = v109[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v98 + v135[8]) = *(_QWORD *)(v99 + v135[8]);
  swift_retain();
  swift_release();
  *(_BYTE *)(v29 + v137[10]) = *(_BYTE *)(v30 + v137[10]);
  v110 = v137[11];
  v111 = (void *)(v29 + v110);
  v112 = (const void *)(v30 + v110);
  v113 = type metadata accessor for LocationOfInterest(0);
  v114 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v111, 1, v113);
  v115 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v112, 1, v113);
  if (v114)
  {
    if (!v115)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v113 - 8) + 16))(v111, v112, v113);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v111, 0, 1, v113);
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  v116 = *(_QWORD *)(v113 - 8);
  if (v115)
  {
    (*(void (**)(void *, uint64_t))(v116 + 8))(v111, v113);
LABEL_56:
    v117 = sub_1000BA294(&qword_100BC3118);
    memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
    goto LABEL_57;
  }
  (*(void (**)(void *, const void *, uint64_t))(v116 + 24))(v111, v112, v113);
LABEL_57:
  *(_BYTE *)(v29 + v137[12]) = *(_BYTE *)(v30 + v137[12]);
  *(_BYTE *)(v29 + v137[13]) = *(_BYTE *)(v30 + v137[13]);
  v118 = v137[14];
  v119 = (_BYTE *)(v29 + v118);
  v120 = (_BYTE *)(v30 + v118);
  v121 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
  v122 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v119, 1, (uint64_t)v121);
  v123 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v120, 1, (uint64_t)v121);
  if (v122)
  {
    if (!v123)
    {
      *v119 = *v120;
      v124 = v121[5];
      v125 = &v119[v124];
      v126 = &v120[v124];
      v127 = type metadata accessor for Location(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v127 - 8) + 16))(v125, v126, v127);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v113 - 8) + 16))(&v119[v121[6]], &v120[v121[6]], v113);
      v119[v121[7]] = v120[v121[7]];
      v72 = (uint64_t)v119;
      v73 = (uint64_t)v121;
LABEL_30:
      _s7Weather24LocationCompositionStateOwst_0(v72, 0, 1, v73);
      goto LABEL_31;
    }
    goto LABEL_62;
  }
  if (v123)
  {
    sub_1000215BC((uint64_t)v119, type metadata accessor for HomeAndWorkRefinementRowViewModel);
LABEL_62:
    v38 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BCD688) - 8) + 64);
    v39 = v119;
    v40 = v120;
    goto LABEL_14;
  }
  *v119 = *v120;
  v128 = v121[5];
  v129 = &v119[v128];
  v130 = &v120[v128];
  v131 = type metadata accessor for Location(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v131 - 8) + 24))(v129, v130, v131);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v113 - 8) + 24))(&v119[v121[6]], &v120[v121[6]], v113);
  v119[v121[7]] = v120[v121[7]];
LABEL_31:
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  v74 = a3[15];
  v75 = *(void **)(a2 + v74);
  v76 = *(void **)(a1 + v74);
  *(_QWORD *)(a1 + v74) = v75;
  v77 = v75;

  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  v78 = a3[19];
  v79 = a1 + v78;
  v80 = a2 + v78;
  v81 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 24))(v79, v80, v81);
  v82 = a3[20];
  v83 = (void *)(a1 + v82);
  v84 = (const void *)(a2 + v82);
  v85 = type metadata accessor for ForegroundEffect(0);
  v86 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v83, 1, v85);
  v87 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v84, 1, v85);
  if (!v86)
  {
    v88 = *(_QWORD *)(v85 - 8);
    if (!v87)
    {
      (*(void (**)(void *, const void *, uint64_t))(v88 + 24))(v83, v84, v85);
      goto LABEL_37;
    }
    (*(void (**)(void *, uint64_t))(v88 + 8))(v83, v85);
    goto LABEL_36;
  }
  if (v87)
  {
LABEL_36:
    v89 = sub_1000BA294(&qword_100BC5B30);
    memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v85 - 8) + 16))(v83, v84, v85);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v83, 0, 1, v85);
LABEL_37:
  *(_BYTE *)(a1 + a3[21]) = *(_BYTE *)(a2 + a3[21]);
  *(_QWORD *)(a1 + a3[22]) = *(_QWORD *)(a2 + a3[22]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[23]) = *(_BYTE *)(a2 + a3[23]);
  v90 = a3[24];
  v91 = a1 + v90;
  v92 = a2 + v90;
  v93 = type metadata accessor for LocationEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 24))(v91, v92, v93);
  return a1;
}

uint64_t sub_1006F4D38(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  int *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int *v62;
  _BYTE *__dst;
  _BYTE *__dsta;

  v6 = type metadata accessor for Location.Identifier(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  if (_s7Weather24LocationCompositionStateOwet_0(a2 + v8, 1, v6))
  {
    v11 = sub_1000BA294(&qword_100BCD680);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v6);
  }
  memcpy((void *)(a1 + a3[6]), (const void *)(a2 + a3[6]), 0xA2uLL);
  v12 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  v13 = a3[9];
  v14 = (_BYTE *)(a1 + v13);
  v15 = (_BYTE *)(a2 + v13);
  v16 = type metadata accessor for LocationFooterViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v16))
  {
    v17 = sub_1000BA294(&qword_100BCD690);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v14 = *v15;
    *(_WORD *)(v14 + 1) = *(_WORD *)(v15 + 1);
    *(_OWORD *)(v14 + 8) = *(_OWORD *)(v15 + 8);
    v18 = *(int *)(v16 + 32);
    v19 = &v14[v18];
    v20 = &v15[v18];
    v21 = type metadata accessor for URL(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v20, 1, v21))
    {
      v22 = sub_1000BA294(&qword_100BD4280);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v19, 0, 1, v21);
    }
    v62 = (int *)v16;
    v23 = *(int *)(v16 + 36);
    v24 = &v14[v23];
    v25 = &v15[v23];
    *v24 = v15[v23];
    *((_QWORD *)v24 + 1) = *(_QWORD *)&v15[v23 + 8];
    v26 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
    v27 = v26[6];
    __dst = &v24[v27];
    v28 = &v25[v27];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v25[v27], 1, v21))
    {
      v29 = sub_1000BA294(&qword_100BD4280);
      memcpy(__dst, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(__dst, v28, v21);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v21);
    }
    *(_OWORD *)&v24[v26[7]] = *(_OWORD *)&v25[v26[7]];
    *(_QWORD *)&v24[v26[8]] = *(_QWORD *)&v25[v26[8]];
    v14[v62[10]] = v15[v62[10]];
    v30 = v62[11];
    v31 = &v14[v30];
    v32 = &v15[v30];
    v33 = type metadata accessor for LocationOfInterest(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v32, 1, v33))
    {
      v34 = sub_1000BA294(&qword_100BC3118);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v31, 0, 1, v33);
    }
    v14[v62[12]] = v15[v62[12]];
    v14[v62[13]] = v15[v62[13]];
    v35 = v62[14];
    v36 = &v14[v35];
    v37 = &v15[v35];
    v38 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v37, 1, (uint64_t)v38))
    {
      v39 = sub_1000BA294(&qword_100BCD688);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      *v36 = *v37;
      v40 = v38[5];
      v41 = &v36[v40];
      __dsta = &v37[v40];
      v42 = type metadata accessor for Location(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v41, __dsta, v42);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(&v36[v38[6]], &v37[v38[6]], v33);
      v36[v38[7]] = v37[v38[7]];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v36, 0, 1, (uint64_t)v38);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 0, 1, (uint64_t)v62);
  }
  v43 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v43) = *(_BYTE *)(a2 + v43);
  v44 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v44) = *(_BYTE *)(a2 + v44);
  v45 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_QWORD *)(a1 + v45) = *(_QWORD *)(a2 + v45);
  v46 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + v46) = *(_BYTE *)(a2 + v46);
  v47 = a3[19];
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v48, v49, v50);
  v51 = a3[20];
  v52 = (void *)(a1 + v51);
  v53 = (const void *)(a2 + v51);
  v54 = type metadata accessor for ForegroundEffect(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v53, 1, v54))
  {
    v55 = sub_1000BA294(&qword_100BC5B30);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(v52, v53, v54);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v52, 0, 1, v54);
  }
  v56 = a3[22];
  *(_BYTE *)(a1 + a3[21]) = *(_BYTE *)(a2 + a3[21]);
  *(_QWORD *)(a1 + v56) = *(_QWORD *)(a2 + v56);
  v57 = a3[24];
  *(_BYTE *)(a1 + a3[23]) = *(_BYTE *)(a2 + a3[23]);
  v58 = a1 + v57;
  v59 = a2 + v57;
  v60 = type metadata accessor for LocationEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 32))(v58, v59, v60);
  return a1;
}

uint64_t sub_1006F529C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  sub_100098AA0();
  sub_100088FF0();
  if (v9)
  {
    v7 = v6;
    v8 = a1;
    return _s7Weather24LocationCompositionStateOwet_0(v8, a2, v7);
  }
  sub_1000BA294(&qword_100BCD680);
  sub_100088FF0();
  if (v9)
  {
    v7 = v10;
    v11 = a3[5];
LABEL_20:
    v8 = a1 + v11;
    return _s7Weather24LocationCompositionStateOwet_0(v8, a2, v7);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    sub_1000BA294(&qword_100BCD690);
    sub_100088FF0();
    if (v9)
    {
      v7 = v14;
      v11 = a3[9];
    }
    else
    {
      sub_100098778();
      sub_100088FF0();
      if (v15)
      {
        v7 = v16;
        v11 = a3[19];
      }
      else
      {
        sub_1000BA294(&qword_100BC5B30);
        sub_100088FF0();
        if (v17)
        {
          v7 = v18;
          v11 = a3[20];
        }
        else
        {
          v7 = sub_1000D02E0();
          v11 = a3[24];
        }
      }
    }
    goto LABEL_20;
  }
  v12 = *(_QWORD *)(a1 + a3[6] + 8);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

void sub_1006F53A4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  sub_100098AA0();
  sub_10009D2E8();
  if (v11)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    sub_1000BA294(&qword_100BCD680);
    sub_10009D2E8();
    if (v11)
    {
      v9 = v12;
      v13 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[6] + 8) = (a2 - 1);
        return;
      }
      sub_1000BA294(&qword_100BCD690);
      sub_10009D2E8();
      if (v11)
      {
        v9 = v14;
        v13 = a4[9];
      }
      else
      {
        sub_100098778();
        sub_10009D2E8();
        if (v15)
        {
          v9 = v16;
          v13 = a4[19];
        }
        else
        {
          sub_1000BA294(&qword_100BC5B30);
          sub_10009D2E8();
          if (v17)
          {
            v9 = v18;
            v13 = a4[20];
          }
          else
          {
            v9 = sub_1000D02E0();
            v13 = a4[24];
          }
        }
      }
    }
    v10 = a1 + v13;
  }
  _s7Weather24LocationCompositionStateOwst_0(v10, a2, a2, v9);
}

unint64_t sub_1006F54A8(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100B5B088, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t sub_1006F54F0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1006F5520 + 4 * byte_1009C1290[a1]))(0x7974706D65, 0xE500000000000000);
}

uint64_t sub_1006F5520()
{
  return 0x7469577974706D65;
}

uint64_t sub_1006F5544()
{
  return 0x656E696C66666FLL;
}

uint64_t sub_1006F555C()
{
  return 0x6574616C75706F70;
}

void sub_1006F5578(char *a1)
{
  sub_10008582C(*a1);
}

void sub_1006F5584()
{
  unsigned __int8 *v0;

  sub_1004A7658(*v0);
}

void sub_1006F558C(uint64_t a1)
{
  char *v1;

  sub_1001D8990(a1, *v1);
}

void sub_1006F5594(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1001D9F28(a1, *v1);
}

unint64_t sub_1006F559C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1006F54A8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1006F55C8@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1006F54F0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

_QWORD *sub_1006F55F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  const char *v56;
  const char *v57;
  char *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;

  v68 = type metadata accessor for LocationComponentViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  v3 = sub_1000BA8E0();
  v67 = type metadata accessor for LocationComponentContainerViewModel(v3);
  v46 = *(_QWORD *)(v67 - 8);
  sub_10009D98C();
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v45 - v8;
  v10 = *(_QWORD *)(v0 + *(int *)(sub_1000CFED0() + 28));
  v49 = *(_QWORD *)(v10 + 16);
  if (!v49)
    return _swiftEmptyArrayStorage;
  v48 = v10 + 32;
  swift_bridgeObjectRetain(v10);
  v12 = 0;
  v59 = xmmword_10097CA50;
  v66 = "notificationsOptIn";
  v57 = "nextHourPrecipitation";
  v58 = "sLike";
  v56 = "feelsLikeApparent";
  v13 = _swiftEmptyArrayStorage;
  v54 = v9;
  v47 = v11;
  do
  {
    if (v12 >= *(_QWORD *)(v11 + 16))
    {
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25);
      __break(1u);
      JUMPOUT(0x1006F5EE8);
    }
    v14 = (_QWORD *)(v48 + 24 * v12);
    v15 = *v14;
    v16 = *(_QWORD *)(*v14 + 16);
    if (v16)
    {
      v52 = v13;
      v53 = v12;
      v17 = v14[2];
      v71 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain_n(v15, 2);
      v50 = v17;
      sub_1000989F8();
      sub_10011ECA0();
      v18 = 0;
      v19 = *(unsigned __int8 *)(v46 + 80);
      v20 = (v19 + 32) & ~v19;
      v51 = v15;
      v62 = v15 + v20;
      v63 = v20;
      v69 = *(_QWORD *)(v46 + 72);
      v60 = v19 | 7;
      v61 = v69 + v20;
      v55 = v16;
      do
      {
        v65 = v18;
        sub_10000AB54(v62 + v69 * v18, (uint64_t)v9, type metadata accessor for LocationComponentContainerViewModel);
        v21 = sub_1000BA294(&qword_100BCC758);
        v22 = swift_allocObject(v21, v61, v60);
        *(_OWORD *)(v22 + 16) = v59;
        v23 = v22 + v63;
        sub_10000AB54((uint64_t)v9, v22 + v63, type metadata accessor for LocationComponentContainerViewModel);
        v64 = v22;
        if (*(_QWORD *)(v22 + 16))
        {
          v70 = _swiftEmptyArrayStorage;
          sub_10009AAB0();
          sub_10000AB54(v23, (uint64_t)v7, type metadata accessor for LocationComponentContainerViewModel);
          sub_10000AB54((uint64_t)&v7[*(int *)(v67 + 20)], v1, type metadata accessor for LocationComponentViewModel);
          v24 = (char *)&loc_1006F589C
              + *((int *)qword_1006F5EE8 + swift_getEnumCaseMultiPayload(v1, v68));
          __asm { BR              X9 }
        }
        v70 = _swiftEmptyArrayStorage;
        v25 = sub_1000BA294(&qword_100BF1280);
        sub_10003D2DC((unint64_t *)&qword_100BD35B0, &qword_100BF1280);
        v27 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v25, v26);
        v29 = v28;
        swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
        sub_1000215BC((uint64_t)v9, type metadata accessor for LocationComponentContainerViewModel);
        v30 = v71;
        if ((swift_isUniquelyReferenced_nonNull_native(v71) & 1) == 0)
        {
          sub_10011ECA0();
          v30 = v71;
        }
        v31 = v65;
        v32 = v30[2];
        if (v32 >= v30[3] >> 1)
        {
          sub_10011ECA0();
          v31 = v65;
          v30 = v71;
        }
        v18 = v31 + 1;
        v30[2] = v32 + 1;
        v33 = &v30[3 * v32];
        v33[4] = v64;
        v33[5] = v27;
        v33[6] = v29;
      }
      while (v18 != v16);
      swift_bridgeObjectRelease(v50);
      swift_bridgeObjectRelease_n(v51, 2);
      v12 = v53;
      v13 = v52;
    }
    else
    {
      v30 = _swiftEmptyArrayStorage;
    }
    v34 = v30[2];
    v35 = v13[2];
    if (__OFADD__(v35, v34))
      goto LABEL_34;
    if (!swift_isUniquelyReferenced_nonNull_native(v13) || v35 + v34 > v13[3] >> 1)
    {
      sub_100080AC0();
      v13 = v36;
    }
    if (v30[2])
    {
      v37 = v13[2];
      if ((v13[3] >> 1) - v37 < v34)
        goto LABEL_36;
      v38 = (unint64_t)&v13[3 * v37 + 4];
      if ((unint64_t)(v30 + 4) < v38 + 24 * v34 && v38 < (unint64_t)&v30[3 * v34 + 4])
        goto LABEL_38;
      v40 = v13;
      swift_arrayInitWithCopy(v38);
      if (v34)
      {
        v41 = v13[2];
        v42 = __OFADD__(v41, v34);
        v43 = v41 + v34;
        if (v42)
          goto LABEL_37;
        v13[2] = v43;
      }
    }
    else
    {
      v40 = v13;
      if (v34)
        goto LABEL_35;
    }
    ++v12;
    sub_1000986C4();
    v13 = v40;
    v11 = v47;
  }
  while (v12 != v49);
  swift_bridgeObjectRelease(v47);
  return v40;
}

void sub_1006F5F38(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, char a10, char a11, unsigned __int8 a12, void *a13, unsigned __int8 a14, unsigned __int8 a15, unsigned __int8 a16, uint64_t a17, uint64_t a18, unsigned __int8 a19, uint64_t a20,char a21)
{
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121[4];
  void *v122;

  LODWORD(v103) = a7;
  LODWORD(v107) = a19;
  LODWORD(v99) = a16;
  LODWORD(v95) = a15;
  HIDWORD(v92) = a14;
  LODWORD(v92) = a12;
  v28 = sub_100098AA0();
  v116 = *(_QWORD *)(v28 - 8);
  v117 = v28;
  v120 = a1;
  (*(void (**)(uint64_t, uint64_t))(v116 + 16))(a9, a1);
  v29 = (int *)sub_1000CFED0();
  v119 = a2;
  sub_10003773C(a2, a9 + v29[5], &qword_100BCD680);
  sub_100099010((void *)(a9 + v29[6]), a3);
  *(_QWORD *)(a9 + v29[7]) = a4;
  *(_QWORD *)(a9 + v29[8]) = a5;
  v30 = a5;
  v118 = a6;
  sub_10003773C(a6, a9 + v29[9], &qword_100BCD690);
  *(_BYTE *)(a9 + v29[10]) = v103;
  *(_BYTE *)(a9 + v29[11]) = a8;
  *(_BYTE *)(a9 + v29[12]) = a10;
  *(_BYTE *)(a9 + v29[13]) = a11;
  *(_BYTE *)(a9 + v29[14]) = a12;
  *(_QWORD *)(a9 + v29[15]) = a13;
  *(_BYTE *)(a9 + v29[16]) = a14;
  *(_BYTE *)(a9 + v29[17]) = a15;
  *(_BYTE *)(a9 + v29[18]) = a16;
  v31 = a9 + v29[19];
  v32 = sub_100098778();
  v115 = *(_QWORD *)(v32 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v115 + 16))(v31, a17, v32);
  sub_10003773C(a18, a9 + v29[20], &qword_100BC5B30);
  *(_BYTE *)(a9 + v29[21]) = a19;
  v33 = a9 + v29[24];
  v34 = sub_1000D02E0();
  v35 = *(_QWORD *)(v34 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v33, a20, v34);
  *(_BYTE *)(a9 + v29[23]) = a21;
  v36 = (void *)objc_opt_self(UIDevice);
  v37 = v30 & 0xFFFFFFFFFFFFFFBLL;
  swift_retain();
  v111 = a13;
  sub_10003BCC8();
  v38 = objc_msgSend(v36, "currentDevice");
  v39 = objc_msgSend(v38, "userInterfaceIdiom");

  if (v39)
  {
    v100 = v37;
    v104 = v35;
    v40 = a17;
    v108 = v34;
    v122 = &_swiftEmptyDictionarySingleton;
    v41 = *(_QWORD *)(a4 + 16);
    if (v41)
    {
      sub_10003BCC8();
      v42 = 0;
      v96 = a4;
      v43 = (uint64_t *)(a4 + 48);
      v44 = v104;
      do
      {
        v45 = *(v43 - 1);
        v46 = *v43;
        v47 = *(v43 - 2);
        v121[0] = v42;
        v121[1] = v47;
        v121[2] = v45;
        v121[3] = v46;
        sub_1000989F8();
        sub_10003BCC8();
        sub_1006F6388((uint64_t)&v122, v121);
        v43 += 3;
        ++v42;
        sub_10009D2E0();
        sub_1000986C4();
      }
      while (v41 != v42);
      swift_release(v100);
      sub_1000C1FC0(v48, v49, v50, v51, v52, v53, v54, v55, v92, v96, v100, v104, v108, v111);
      v56.n128_f64[0] = sub_10009D2E0();
      v57 = v122;
      v40 = a17;
    }
    else
    {
      swift_release(v37);
      sub_1000C1FC0(v75, v76, v77, v78, v79, v80, v81, v82, v92, v95, v37, v104, v34, v111);
      v57 = &_swiftEmptyDictionarySingleton;
      v44 = v105;
    }
    v83 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v44 + 8))(a20, v109, v56);
    sub_100098898(v83, &qword_100BC5B30);
    (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v40, v32);
    sub_100021A14(v118, &qword_100BCD690);
    sub_100021A14(v119, &qword_100BCD680);
    sub_1000C17EC(v84, v85, v86, v87, v88, v89, v90, v91, v93, v97, v101, v105, v109, v112, v115, v116, v117, v118, v119,
      v120);
    sub_10009D2E0();
  }
  else
  {
    sub_10009D2E0();
    v57 = (void *)Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
    swift_release(v37);
    sub_1000C1FC0(v58, v59, v60, v61, v62, v63, v64, v65, v92, v95, v99, v103, v107, v111);
    v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(a20, v34);
    sub_100098898(v66, &qword_100BC5B30);
    (*(void (**)(uint64_t, uint64_t))(v115 + 8))(a17, v32);
    sub_100021A14(v118, &qword_100BCD690);
    sub_100021A14(v119, &qword_100BCD680);
    sub_1000C17EC(v67, v68, v69, v70, v71, v72, v73, v74, v94, v98, v102, v106, v110, v113, v115, v116, v117, v118, v119,
      v120);
  }
  *(_QWORD *)(a9 + v29[22]) = v57;
}

void sub_1006F6388(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[4];

  v5 = type metadata accessor for LocationComponentViewModel(0);
  __chkstk_darwin(v5);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a2;
  v8 = a2[1];
  v10 = *(_QWORD *)(v8 + 16);
  if (v10 == 2)
  {
    if (!__OFADD__(v9, 1))
    {
      if (v9 + 1 >= v9)
      {
        v21[3] = v2;
        v11 = type metadata accessor for LocationComponentContainerViewModel(0);
        v21[0] = *(_QWORD *)(v11 - 8);
        v12 = v8
            + ((*(unsigned __int8 *)(v21[0] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21[0] + 80));
        sub_10000AB54(v12 + *(int *)(v11 + 20), (uint64_t)v7, type metadata accessor for LocationComponentViewModel);
        sub_100080E74();
        v13 = a1;
        v15 = v14;
        sub_1000215BC((uint64_t)v7, type metadata accessor for LocationComponentViewModel);
        v21[1] = v13;
        sub_10016D8B4();
        swift_bridgeObjectRelease(v15);
        if (*(_QWORD *)(v8 + 16) >= 2uLL)
        {
          sub_10000AB54(v12 + *(_QWORD *)(v21[0] + 72) + *(int *)(v11 + 20), (uint64_t)v7, type metadata accessor for LocationComponentViewModel);
          sub_100080E74();
          v17 = v16;
          sub_1000215BC((uint64_t)v7, type metadata accessor for LocationComponentViewModel);
          sub_10016D8B4();
LABEL_10:
          swift_bridgeObjectRelease(v17);
          return;
        }
        goto LABEL_15;
      }
      goto LABEL_13;
    }
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v10 == 1)
  {
    if (!__OFADD__(v9, 1))
    {
      if (v9 + 1 >= v9)
      {
        v18 = type metadata accessor for LocationComponentContainerViewModel(0);
        v19 = *(unsigned __int8 *)(*(_QWORD *)(v18 - 8) + 80);
        sub_10000AB54(v8 + *(int *)(v18 + 20) + ((v19 + 32) & ~v19), (uint64_t)v7, type metadata accessor for LocationComponentViewModel);
        sub_100080E74();
        v17 = v20;
        sub_1000215BC((uint64_t)v7, type metadata accessor for LocationComponentViewModel);
        sub_10016D8B4();
        goto LABEL_10;
      }
      goto LABEL_14;
    }
    goto LABEL_12;
  }
LABEL_16:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002CLL, 0x8000000100A118B0, "Weather/LocationViewModel.swift", 31, 2);
  __break(1u);
}

uint64_t sub_1006F6630@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[176];
  _BYTE v13[168];

  v3 = sub_1000BA294(&qword_100BC31F0);
  inited = swift_initStackObject(v3, v12);
  *(_OWORD *)(inited + 16) = xmmword_10098B610;
  *(_QWORD *)(inited + 32) = 0x6E6F697461636F6CLL;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  *(_QWORD *)(inited + 48) = Location.Identifier.id.getter(inited);
  *(_QWORD *)(inited + 56) = v5;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 80) = 0x726564616568;
  *(_QWORD *)(inited + 88) = 0xE600000000000000;
  v6 = sub_1000CFED0();
  sub_100099010(v13, (const void *)(v1 + *(int *)(v6 + 24)));
  *(_QWORD *)(inited + 120) = &type metadata for LocationHeaderViewModel;
  v7 = swift_allocObject(&unk_100B8B560, 178, 7);
  *(_QWORD *)(inited + 96) = v7;
  sub_100099010((void *)(v7 + 16), v13);
  *(_QWORD *)(inited + 128) = 1937207154;
  *(_QWORD *)(inited + 136) = 0xE400000000000000;
  v8 = *(_QWORD *)(v1 + *(int *)(v6 + 28));
  *(_QWORD *)(inited + 168) = sub_1000BA294(&qword_100BFA9A0);
  *(_QWORD *)(inited + 144) = v8;
  sub_10003E610((uint64_t)v13);
  sub_1000989F8();
  v9 = Dictionary.init(dictionaryLiteral:)(inited);
  a1[3] = sub_1000BA294(&qword_100C00228);
  sub_10003D2DC(&qword_100C00230, &qword_100C00228);
  a1[4] = v10;
  sub_10005F164(a1);
  return ShortDescription.init(name:_:)(0xD000000000000011, 0x80000001009C1280, v9, v6);
}

uint64_t sub_1006F67D4(uint64_t a1)
{
  uint64_t v2;

  sub_10000F1C8(&qword_100C00238, type metadata accessor for LocationViewModel);
  return ShortDescribable.description.getter(a1, v2);
}

void sub_1006F6814()
{
  sub_10000F1C8(&qword_100C00210, type metadata accessor for LocationViewModel);
}

uint64_t sub_1006F6840()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_100176DD4(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, 178, 7);
}

uint64_t storeEnumTagSinglePayload for LocationViewModel.ContentStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1006F68F0 + 4 * byte_1009C1299[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1006F6924 + 4 * byte_1009C1294[v4]))();
}

uint64_t sub_1006F6924(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006F692C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1006F6934);
  return result;
}

uint64_t sub_1006F6940(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1006F6948);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1006F694C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006F6954(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocationViewModel.ContentStatus()
{
  return &type metadata for LocationViewModel.ContentStatus;
}

unint64_t sub_1006F6974()
{
  unint64_t result;

  result = qword_100C00240;
  if (!qword_100C00240)
  {
    result = swift_getWitnessTable(&unk_1009C1438, &type metadata for LocationViewModel.ContentStatus);
    atomic_store(result, (unint64_t *)&qword_100C00240);
  }
  return result;
}

_QWORD *sub_1006F69B0(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for CurrentWeather(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(_QWORD *)((char *)a1 + v8) = *(_QWORD *)((char *)a2 + v8);
    v11 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
    v12 = &v9[v11];
    v13 = &v10[v11];
    v14 = type metadata accessor for WeatherDescription(0);
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v14))
    {
      v15 = sub_1000BA294(&qword_100BC3368);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v14);
    }
    v17 = a3[6];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = sub_1000BA294(&qword_100BCB9F8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    v21 = a3[7];
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    v24 = sub_1000BA294(&qword_100BCB130);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
    v25 = a3[8];
    v26 = (char *)a1 + v25;
    v27 = (char *)a2 + v25;
    v28 = type metadata accessor for WeatherChanges(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v27, 1, v28))
    {
      v29 = sub_1000BA294(&qword_100BCCC48);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v26, 0, 1, v28);
    }
    v30 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *((_BYTE *)a1 + v30) = *((_BYTE *)a2 + v30);
  }
  return a1;
}

uint64_t sub_1006F6BCC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;

  v6 = type metadata accessor for CurrentWeather(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
  v11 = (void *)(v8 + v10);
  v12 = (const void *)(v9 + v10);
  v13 = type metadata accessor for WeatherDescription(0);
  v14 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v13);
  v15 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v13);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v16 = *(_QWORD *)(v13 - 8);
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v11, v13);
LABEL_6:
    v17 = sub_1000BA294(&qword_100BC3368);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v16 + 24))(v11, v12, v13);
LABEL_7:
  v18 = a3[6];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = sub_1000BA294(&qword_100BCB9F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
  v22 = a3[7];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = sub_1000BA294(&qword_100BCB130);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 24))(v23, v24, v25);
  v26 = a3[8];
  v27 = (void *)(a1 + v26);
  v28 = (const void *)(a2 + v26);
  v29 = type metadata accessor for WeatherChanges(0);
  v30 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v27, 1, v29);
  v31 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v28, 1, v29);
  if (!v30)
  {
    v32 = *(_QWORD *)(v29 - 8);
    if (!v31)
    {
      (*(void (**)(void *, const void *, uint64_t))(v32 + 24))(v27, v28, v29);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v32 + 8))(v27, v29);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    v33 = sub_1000BA294(&qword_100BCCC48);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v27, 0, 1, v29);
LABEL_13:
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_1006F6E58(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = type metadata accessor for CurrentWeather(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v10 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
  v11 = (void *)(v8 + v10);
  v12 = (const void *)(v9 + v10);
  v13 = type metadata accessor for WeatherDescription(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v13))
  {
    v14 = sub_1000BA294(&qword_100BC3368);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v13);
  }
  v15 = a3[6];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_1000BA294(&qword_100BCB9F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[7];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_1000BA294(&qword_100BCB130);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[8];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  v26 = type metadata accessor for WeatherChanges(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v25, 1, v26))
  {
    v27 = sub_1000BA294(&qword_100BCCC48);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v24, 0, 1, v26);
  }
  v28 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v28) = *(_BYTE *)(a2 + v28);
  return a1;
}

uint64_t sub_1006F7038(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for CurrentWeather(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRelease();
  v10 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
  v11 = (void *)(v8 + v10);
  v12 = (const void *)(v9 + v10);
  v13 = type metadata accessor for WeatherDescription(0);
  v14 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v13);
  v15 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v13);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v16 = *(_QWORD *)(v13 - 8);
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v11, v13);
LABEL_6:
    v17 = sub_1000BA294(&qword_100BC3368);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v16 + 40))(v11, v12, v13);
LABEL_7:
  v18 = a3[6];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = sub_1000BA294(&qword_100BCB9F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v19, v20, v21);
  v22 = a3[7];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = sub_1000BA294(&qword_100BCB130);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 40))(v23, v24, v25);
  v26 = a3[8];
  v27 = (void *)(a1 + v26);
  v28 = (const void *)(a2 + v26);
  v29 = type metadata accessor for WeatherChanges(0);
  v30 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v27, 1, v29);
  v31 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v28, 1, v29);
  if (!v30)
  {
    v32 = *(_QWORD *)(v29 - 8);
    if (!v31)
    {
      (*(void (**)(void *, const void *, uint64_t))(v32 + 40))(v27, v28, v29);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v32 + 8))(v27, v29);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    v33 = sub_1000BA294(&qword_100BCCC48);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v27, 0, 1, v29);
LABEL_13:
  v34 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v34) = *(_BYTE *)(a2 + v34);
  return a1;
}

uint64_t sub_1006F72B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006F72C4);
}

uint64_t sub_1006F72C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unsigned int v19;

  sub_1000BC660();
  sub_100088FF0();
  if (v9)
  {
    v7 = v6;
    v8 = v4;
    return _s7Weather24LocationCompositionStateOwet_0(v8, v3, v7);
  }
  type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0);
  sub_100088FF0();
  if (v9)
  {
    v7 = v10;
    v11 = a3[5];
LABEL_16:
    v8 = v4 + v11;
    return _s7Weather24LocationCompositionStateOwet_0(v8, v3, v7);
  }
  sub_1000BA294(&qword_100BCB9F8);
  sub_100088FF0();
  if (v12)
  {
    v7 = v13;
    v11 = a3[6];
    goto LABEL_16;
  }
  sub_1000BA294(&qword_100BCB130);
  sub_100088FF0();
  if (v14)
  {
    v7 = v15;
    v11 = a3[7];
    goto LABEL_16;
  }
  sub_1000BA294(&qword_100BCCC48);
  sub_100088FF0();
  if (v16)
  {
    v7 = v17;
    v11 = a3[8];
    goto LABEL_16;
  }
  v19 = *(unsigned __int8 *)(v4 + a3[9]);
  if (v19 >= 2)
    return ((v19 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_1006F73B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006F73C4);
}

void sub_1006F73C4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  sub_1000BC660();
  sub_10009D2E8();
  if (v10)
  {
    v8 = v7;
    v9 = v5;
  }
  else
  {
    type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0);
    sub_10009D2E8();
    if (v10)
    {
      v8 = v11;
      v12 = a4[5];
    }
    else
    {
      sub_1000BA294(&qword_100BCB9F8);
      sub_10009D2E8();
      if (v13)
      {
        v8 = v14;
        v12 = a4[6];
      }
      else
      {
        sub_1000BA294(&qword_100BCB130);
        sub_10009D2E8();
        if (v15)
        {
          v8 = v16;
          v12 = a4[7];
        }
        else
        {
          sub_1000BA294(&qword_100BCCC48);
          sub_10009D2E8();
          if (!v17)
          {
            *(_BYTE *)(v5 + a4[9]) = v4 + 1;
            return;
          }
          v8 = v18;
          v12 = a4[8];
        }
      }
    }
    v9 = v5 + v12;
  }
  _s7Weather24LocationCompositionStateOwst_0(v9, v4, v4, v8);
}

void sub_1006F74A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BD0C98)
  {
    v2 = type metadata accessor for WeatherChanges(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BD0C98);
  }
}

uint64_t sub_1006F74F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  void (*v50)(uint64_t, uint64_t);
  char v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  char *v60;

  v6 = type metadata accessor for WeatherChanges(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100094EC4();
  v8 = sub_1000BA294(&qword_100BD0D38);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100079FBC();
  sub_1000BA294(&qword_100BCCC48);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v53 - v14;
  __chkstk_darwin(v16);
  v18 = (char *)&v53 - v17;
  if ((static CurrentWeather.== infix(_:_:)(a1, a2) & 1) == 0)
    goto LABEL_13;
  v60 = v12;
  v19 = type metadata accessor for HourlyForecastComponent(0);
  if (!sub_100086FB8(a1 + *(int *)(v19 + 20), a2 + *(int *)(v19 + 20)))
    goto LABEL_13;
  v54 = v3;
  v55 = v7;
  v56 = v2;
  v57 = v6;
  v20 = *(int *)(v19 + 24);
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = type metadata accessor for HourWeather(0);
  v58 = a2;
  sub_1000CD184(&qword_100BD0C50);
  v59 = (int *)v19;
  v25 = v24;
  sub_1000CD184(&qword_100BD0C58);
  v27 = v26;
  sub_1000CD184(&qword_100BD0C60);
  if ((static Forecast.== infix(_:_:)(v21, v22, v23, v25, v27, v28) & 1) == 0)
    goto LABEL_13;
  v29 = v59[7];
  v30 = a1 + v29;
  v31 = v58 + v29;
  v32 = type metadata accessor for DayWeather(0);
  sub_1000CD184(&qword_100BD0C78);
  v34 = v33;
  sub_1000CD184(&qword_100BD0C80);
  v36 = v35;
  sub_1000CD184(&qword_100BD0C88);
  if ((static Forecast.== infix(_:_:)(v30, v31, v32, v34, v36, v37) & 1) == 0)
    goto LABEL_13;
  v38 = v59;
  sub_1006F8680(a1 + v59[8], (uint64_t)v18);
  v39 = v38[8];
  v40 = v58;
  sub_1006F8680(v58 + v39, (uint64_t)v15);
  v41 = v56;
  v42 = v56 + *(int *)(v8 + 48);
  sub_1006F8680((uint64_t)v18, v56);
  sub_1006F8680((uint64_t)v15, v42);
  v43 = v57;
  if (_s7Weather24LocationCompositionStateOwet_0(v41, 1, v57) != 1)
  {
    v45 = (uint64_t)v60;
    sub_1006F8680(v41, (uint64_t)v60);
    if (_s7Weather24LocationCompositionStateOwet_0(v42, 1, v43) != 1)
    {
      v46 = v54;
      v47 = v55;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 32))(v54, v42, v43);
      sub_10000F1C8(&qword_100BD0D58, (uint64_t (*)(uint64_t))&type metadata accessor for WeatherChanges);
      v49 = dispatch thunk of static Equatable.== infix(_:_:)(v45, v46, v43, v48);
      v50 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
      v50(v46, v43);
      sub_100021A14((uint64_t)v15, &qword_100BCCC48);
      sub_100021A14((uint64_t)v18, &qword_100BCCC48);
      v50(v45, v43);
      v44 = v58;
      sub_100021A14(v41, &qword_100BCCC48);
      if ((v49 & 1) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
    sub_100075DD0((uint64_t)v15);
    sub_100075DD0((uint64_t)v18);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v45, v43);
LABEL_10:
    sub_100021A14(v41, &qword_100BD0D38);
    goto LABEL_13;
  }
  v44 = v40;
  sub_100075DD0((uint64_t)v15);
  sub_100075DD0((uint64_t)v18);
  if (_s7Weather24LocationCompositionStateOwet_0(v42, 1, v43) != 1)
    goto LABEL_10;
  sub_100021A14(v41, &qword_100BCCC48);
LABEL_12:
  if (*(unsigned __int8 *)(a1 + v59[9]) == *(unsigned __int8 *)(v44 + v59[9]))
  {
    v51 = *(_BYTE *)(a1 + v59[10]) ^ *(_BYTE *)(v44 + v59[10]) ^ 1;
    return v51 & 1;
  }
LABEL_13:
  v51 = 0;
  return v51 & 1;
}

void sub_1006F793C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;

  v29 = a2;
  sub_1000BA294(&qword_100BCCC48);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100088FDC();
  v30 = v5;
  v35 = sub_1000BA294(&qword_100BCB130);
  v33 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  sub_100088FDC();
  v31 = v6;
  v36 = sub_1000BA294(&qword_100BCB9F8);
  v34 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  sub_100088FDC();
  v32 = v7;
  v8 = type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CurrentWeather(0);
  v39 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_1000BA294(&qword_100C00390);
  __chkstk_darwin(v37);
  sub_100094EC4();
  v40 = type metadata accessor for HourlyForecastComponent(0);
  sub_1000B42B0();
  __chkstk_darwin(v15);
  sub_100088FDC();
  v42 = a1;
  v43 = v16;
  v17 = a1[3];
  v18 = a1[4];
  sub_1000DB418(a1, v17);
  v19 = sub_1006F86C8();
  v41 = v2;
  v20 = v44;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for HourlyForecastComponent.CodingKeys, &type metadata for HourlyForecastComponent.CodingKeys, v19, v17, v18);
  v38 = v12;
  if (v20)
  {
    sub_10009EE88();
  }
  else
  {
    v21 = v8;
    v51 = 0;
    sub_10000F1C8(&qword_100BDC658, (uint64_t (*)(uint64_t))&type metadata accessor for CurrentWeather);
    v22 = v37;
    sub_1000DDEA0(v12, (uint64_t)&v51, v37, v12);
    v23 = v43;
    (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v43, v14, v12);
    v50 = 1;
    sub_10000F1C8(&qword_100C003A0, type metadata accessor for HourlyForecastComponentPreprocessedDataModel);
    v24 = (uint64_t)v11;
    sub_1000DDEA0(v21, (uint64_t)&v50, v22, v21);
    v25 = (int *)v40;
    sub_1006F8704(v24, v23 + *(int *)(v40 + 20));
    v49 = 2;
    sub_10003D2DC(&qword_100C003A8, &qword_100BCB9F8);
    sub_1000DDEA0(v36, (uint64_t)&v49, v22, v36);
    sub_1000DBD0C(v23 + v25[6], v34);
    v48 = 3;
    sub_10003D2DC(&qword_100C003B0, &qword_100BCB130);
    sub_1000DDEA0(v35, (uint64_t)&v48, v37, v35);
    sub_1000DBD0C(v23 + v25[7], v33);
    v26 = type metadata accessor for WeatherChanges(0);
    v47 = 4;
    sub_10000F1C8(&qword_100C003B8, (uint64_t (*)(uint64_t))&type metadata accessor for WeatherChanges);
    v27 = v30;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v26, &v47, v37, v26);
    sub_1006F8748(v27, v23 + v25[8]);
    v46 = 5;
    *(_BYTE *)(v23 + v25[9]) = sub_1000CD98C((uint64_t)&v46) & 1;
    v45 = 6;
    v28 = sub_1000CD98C((uint64_t)&v45);
    sub_1000BB494();
    *(_BYTE *)(v23 + v25[10]) = v28 & 1;
    sub_1006F8790(v23, v29);
    sub_10009EE88();
    sub_1000215BC(v23, type metadata accessor for HourlyForecastComponent);
  }
  sub_1000B44B0();
}

uint64_t sub_1006F7E98(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;
  unint64_t v11;
  unint64_t v13;
  unint64_t v15;
  char v17;

  if (a1 == 0x57746E6572727563 && a2 == 0xEE00726568746165)
  {
    v5 = 0xEE00726568746165;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x57746E6572727563, 0xEE00726568746165, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x80000001009FC430;
    if (a2 == 0x80000001009FC430)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001009FC430, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x6F46796C72756F68 && a2 == 0xEE00747361636572)
  {
    v9 = 0xEE00747361636572;
    goto LABEL_21;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F46796C72756F68, 0xEE00747361636572, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_21:
    swift_bridgeObjectRelease(v9);
    return 2;
  }
  if (a1 == 0x726F46796C696164 && a2 == 0xED00007473616365)
  {
    v11 = 0xED00007473616365;
    goto LABEL_29;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F46796C696164, 0xED00007473616365, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_29:
    swift_bridgeObjectRelease(v11);
    return 3;
  }
  if (a1 == 0x4372656874616577 && a2 == 0xEE007365676E6168)
  {
    v13 = 0xEE007365676E6168;
    goto LABEL_37;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4372656874616577, 0xEE007365676E6168, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v13);
    return 4;
  }
  if (a1 == 0x6F726548776F6873 && a2 == 0xEE00676E69727453)
  {
    v15 = 0xEE00676E69727453;
    goto LABEL_45;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F726548776F6873, 0xEE00676E69727453, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_45:
    swift_bridgeObjectRelease(v15);
    return 5;
  }
  if (a1 == 0x6E696C66664F7369 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease(0xE900000000000065);
    return 6;
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E696C66664F7369, 0xE900000000000065, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v17 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_1006F8220(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1006F8260 + 4 * byte_1009C14E0[a1]))(0x57746E6572727563, 0xEE00726568746165);
}

unint64_t sub_1006F8260()
{
  return 0xD000000000000010;
}

uint64_t sub_1006F827C()
{
  return 0x6F46796C72756F68;
}

uint64_t sub_1006F82A0()
{
  return 0x726F46796C696164;
}

uint64_t sub_1006F82C4()
{
  return 0x4372656874616577;
}

uint64_t sub_1006F82E8()
{
  return 0x6F726548776F6873;
}

uint64_t sub_1006F830C()
{
  return 0x6E696C66664F7369;
}

void sub_1006F8328(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;

  v4 = v1;
  v6 = sub_1000BA294(&qword_100C003C0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100079FBC();
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1006F86C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for HourlyForecastComponent.CodingKeys, &type metadata for HourlyForecastComponent.CodingKeys, v10, v8, v9);
  v34 = 0;
  v11 = type metadata accessor for CurrentWeather(0);
  sub_10000F1C8(&qword_100BDC670, (uint64_t (*)(uint64_t))&type metadata accessor for CurrentWeather);
  sub_1000C26D4(v4, (uint64_t)&v34, v6, v11, v12);
  if (!v2)
  {
    v13 = (int *)type metadata accessor for HourlyForecastComponent(0);
    v14 = v4 + v13[5];
    v33 = 1;
    v15 = type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0);
    sub_10000F1C8(&qword_100C003C8, type metadata accessor for HourlyForecastComponentPreprocessedDataModel);
    sub_1000C26D4(v14, (uint64_t)&v33, v6, v15, v16);
    v17 = v4 + v13[6];
    v32 = 2;
    v18 = sub_1000BA294(&qword_100BCB9F8);
    sub_10003D2DC(&qword_100C003D0, &qword_100BCB9F8);
    sub_1000C26D4(v17, (uint64_t)&v32, v6, v18, v19);
    v20 = v4 + v13[7];
    v31 = 3;
    v21 = sub_1000BA294(&qword_100BCB130);
    sub_10003D2DC(&qword_100C003D8, &qword_100BCB130);
    sub_1000C26D4(v20, (uint64_t)&v31, v6, v21, v22);
    v23 = v4 + v13[8];
    v30 = 4;
    v24 = type metadata accessor for WeatherChanges(0);
    sub_10000F1C8(&qword_100C003E0, (uint64_t (*)(uint64_t))&type metadata accessor for WeatherChanges);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v23, &v30, v6, v24, v25);
    v26 = *(unsigned __int8 *)(v4 + v13[9]);
    v29 = 5;
    sub_1000BC978(v26, (uint64_t)&v29);
    v27 = *(unsigned __int8 *)(v4 + v13[10]);
    v28 = 6;
    sub_1000BC978(v27, (uint64_t)&v28);
  }
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
  sub_1000B44B0();
}

uint64_t sub_1006F85D8()
{
  unsigned __int8 *v0;

  return sub_1006F8220(*v0);
}

uint64_t sub_1006F85E0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1006F7E98(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006F8604(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006F86C8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006F862C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006F86C8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1006F8654(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1006F793C(a1, a2);
}

void sub_1006F8668(_QWORD *a1)
{
  sub_1006F8328(a1);
}

uint64_t sub_1006F8680(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BCCC48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1006F86C8()
{
  unint64_t result;

  result = qword_100C00398;
  if (!qword_100C00398)
  {
    result = swift_getWitnessTable(&unk_1009C166C, &type metadata for HourlyForecastComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C00398);
  }
  return result;
}

uint64_t sub_1006F8704(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1006F8748(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BCCC48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1006F8790(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HourlyForecastComponent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for HourlyForecastComponent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1006F8820 + 4 * byte_1009C14EC[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1006F8854 + 4 * byte_1009C14E7[v4]))();
}

uint64_t sub_1006F8854(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006F885C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1006F8864);
  return result;
}

uint64_t sub_1006F8870(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1006F8878);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1006F887C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006F8884(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HourlyForecastComponent.CodingKeys()
{
  return &type metadata for HourlyForecastComponent.CodingKeys;
}

unint64_t sub_1006F88A4()
{
  unint64_t result;

  result = qword_100C003E8;
  if (!qword_100C003E8)
  {
    result = swift_getWitnessTable(&unk_1009C1644, &type metadata for HourlyForecastComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C003E8);
  }
  return result;
}

unint64_t sub_1006F88E4()
{
  unint64_t result;

  result = qword_100C003F0;
  if (!qword_100C003F0)
  {
    result = swift_getWitnessTable(&unk_1009C15B4, &type metadata for HourlyForecastComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C003F0);
  }
  return result;
}

unint64_t sub_1006F8924()
{
  unint64_t result;

  result = qword_100C003F8;
  if (!qword_100C003F8)
  {
    result = swift_getWitnessTable(&unk_1009C15DC, &type metadata for HourlyForecastComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C003F8);
  }
  return result;
}

unint64_t static LocalSearchRequestManager.dependencyKey.getter()
{
  return 0xD00000000000001DLL;
}

double sub_1006F897C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double refreshed;
  uint64_t v10;

  v1 = type metadata accessor for AppConfiguration(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v0[5];
  v6 = v0[6];
  sub_1000DB418(v0 + 2, v5);
  v7 = dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v5, v6);
  refreshed = AppConfiguration.reverseGeocodingRefreshTimeInterval.getter(v7);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return refreshed;
}

void sub_1006F8A2C(uint64_t a1@<X8>)
{
  uint64_t *v1;
  _BYTE v3[24];
  _BYTE v4[24];
  uint64_t v5;
  _BYTE v6[24];

  swift_beginAccess(v1 + 10, v6, 0, 0);
  sub_10007EBC8((uint64_t)(v1 + 10), (uint64_t)v4, &qword_100C00400);
  if (v5 == 1)
  {
    sub_100021AA4((uint64_t)v4, &qword_100C00400);
    sub_1006F8AF8(v1, a1);
    sub_10007EBC8(a1, (uint64_t)v4, &qword_100C004D8);
    swift_beginAccess(v1 + 10, v3, 33, 0);
    sub_1006F9EA4((uint64_t)v4, (uint64_t)(v1 + 10));
    swift_endAccess(v3);
  }
  else
  {
    sub_1006F9EEC((uint64_t)v4, a1);
  }
}

uint64_t sub_1006F8AF8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v16[16];
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v4 = *a1;
  v5 = type metadata accessor for Logger(0);
  v6 = __chkstk_darwin(v5);
  ((void (*)(_QWORD *__return_ptr, __n128))a1[15])(v17, v6);
  v7 = type metadata accessor for SettingReader(0);
  static SettingReader.shared.getter(v7);
  ((void (*)(void))static Settings.Geocoding.clearGeocodingCacheOnNextLaunch.getter)();
  SettingReader.read<A>(_:)(v16);
  swift_release();
  swift_release();
  v8 = v16[0];
  v9 = v18;
  v10 = v19;
  sub_1000DB418(v17, v18);
  if (v8 == 1)
  {
    v11 = dispatch thunk of GeocodeStoreType.deleteAllLocations(satisfying:)(static LocationSearchEntityFromStringResolver.__derived_struct_equals(_:_:), 0, v9, v10);
    v12 = static Settings.Geocoding.clearGeocodingCacheOnNextLaunch.getter(v11);
    v16[0] = 0;
    sub_10005329C(&qword_100C004E0, v13, (uint64_t (*)(uint64_t))type metadata accessor for LocalSearchRequestManager, (uint64_t)&protocol conformance descriptor for LocalSearchRequestManager);
    Updatable.save<A>(setting:value:)(v12, v16, v4, v14);
    swift_release();
  }
  else
  {
    dispatch thunk of GeocodeStoreType.deleteAllLocations(satisfying:)(sub_1006F9F34, a1, v9, v10);
  }
  sub_10003B59C((uint64_t)v17, a2);
  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v17);
}

BOOL sub_1006F8E00()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v12;
  uint64_t v13;
  double v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;

  v0 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v0);
  v2 = (char *)&v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v16 - v8;
  Location.lastRefreshDate.getter(v10);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v2, 1, v3) == 1)
  {
    sub_100021AA4((uint64_t)v2, (uint64_t *)&unk_100BD35A0);
    return 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
    v12 = sub_1006F897C();
    Date.init()(v13);
    v14 = Date.timeIntervalSince(_:)(v9);
    v15 = *(void (**)(char *, uint64_t))(v4 + 8);
    v15(v6, v3);
    v15(v9, v3);
    return v12 <= v14;
  }
}

void LocalSearchRequestManager.__allocating_init(service:store:appConfigurationManager:queue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  sub_100098740(v6, 144);
  LocalSearchRequestManager.init(service:store:appConfigurationManager:queue:)(a1, a2, a3, a4, a5, a6);
  sub_10009D300();
}

uint64_t LocalSearchRequestManager.init(service:store:appConfigurationManager:queue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;

  v7 = v6;
  v47 = a2;
  v48 = a3;
  v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v44 = *(_QWORD *)(v12 - 8);
  v45 = v12;
  __chkstk_darwin(v12);
  sub_100088FDC();
  v46 = v13;
  v42 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  sub_100088FDC();
  v43 = v15;
  type metadata accessor for DispatchQoS(0);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  sub_100088FDC();
  v41 = v17;
  v18 = type metadata accessor for PromiseDeduperFlags(0);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = _swiftEmptyArrayStorage;
  sub_10005329C(&qword_100BC2960, 255, v22, (uint64_t)&protocol conformance descriptor for PromiseDeduperFlags);
  v24 = v23;
  v25 = sub_1000BA294(&qword_100BC2968);
  sub_100081288(&qword_100BC2970, &qword_100BC2968);
  v26 = v24;
  v27 = (_QWORD *)a5;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v49, v25, v28, v18, v26);
  v29 = sub_1000BA294(&qword_100BC2978);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  *(_QWORD *)(v7 + 72) = PromiseDeduper.init(options:)(v21);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  *(_QWORD *)(v7 + 96) = 0;
  *(_OWORD *)(v7 + 104) = xmmword_10097CA60;
  v30 = v47;
  *(_QWORD *)(v7 + 56) = a1;
  *(_QWORD *)(v7 + 64) = v30;
  *(_QWORD *)(v7 + 120) = v48;
  *(_QWORD *)(v7 + 128) = a4;
  sub_10003B59C(a5, v7 + 16);
  if (!a6)
  {
    sub_10009FFE0();
    swift_unknownObjectRetain(a1);
    v31 = swift_retain();
    v32 = v41;
    static DispatchQoS.unspecified.getter(v31);
    v49 = _swiftEmptyArrayStorage;
    sub_10005329C((unint64_t *)&qword_100BC29A8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    v34 = v33;
    v35 = sub_1000BA294(&qword_100BC29B0);
    sub_100081288((unint64_t *)&qword_100BC29B8, &qword_100BC29B0);
    v36 = v43;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v49, v35, v37, v42, v34);
    v38 = v46;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v44 + 104))(v46, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v45);
    a6 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001DLL, 0x8000000100A11950, v32, v36, v38, 0);
    swift_unknownObjectRelease(a1);
    swift_release(a4);
  }
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v27);
  *(_QWORD *)(v7 + 136) = a6;
  return v7;
}

uint64_t LocalSearchRequestManager.performLocalSearch(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v5 = *v2;
  v6 = v2[17];
  v7 = (_QWORD *)sub_100098740((uint64_t)&unk_100B8B800, 40);
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = v2;
  type metadata accessor for Location(0);
  sub_1000DD2C8();
  swift_retain();
  v8 = firstly<A, B>(on:disposeOn:closure:)(v6, v2, sub_1006F93B8, v7, a1, v5);
  swift_release();
  return v8;
}

uint64_t sub_1006F9344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[6];
  _QWORD v6[2];

  v6[0] = a2;
  v6[1] = a3;
  v5[2] = a1;
  v5[3] = a2;
  v5[4] = a3;
  v5[5] = a4;
  return PromiseDeduper.promise(key:createBlock:)(v6, sub_1006F9F38, v5);
}

uint64_t sub_1006F9390()
{
  uint64_t v0;

  sub_1000B329C();
  swift_release();
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1006F93B8(uint64_t a1)
{
  uint64_t *v1;

  return sub_1006F9344(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1006F93D4(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ObjectType;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[3];
  uint64_t v48;

  v42 = *a4;
  v43 = a4;
  v7 = sub_1000BA294(&qword_100BC35F8);
  __chkstk_darwin(v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Location(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v36 - v15;
  v17 = type metadata accessor for SettingReader(0);
  static SettingReader.shared.getter(v17);
  static Settings.Geocoding.bypassGeocodingCache.getter();
  SettingReader.read<A>(_:)(v47);
  swift_release();
  v18 = a1;
  swift_release();
  if ((v47[0] & 1) != 0)
    goto LABEL_9;
  v36 = v13;
  v37 = v16;
  v38 = v11;
  v39 = a3;
  v40 = v10;
  v41 = a2;
  sub_1006F8A2C((uint64_t)v47);
  if (!v48)
  {
    sub_100021AA4((uint64_t)v47, &qword_100C004D8);
    v10 = v40;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 1, 1, v40);
    a3 = v39;
    goto LABEL_8;
  }
  sub_10003B59C((uint64_t)v47, (uint64_t)v44);
  sub_100021AA4((uint64_t)v47, &qword_100C004D8);
  v19 = a1;
  v21 = v45;
  v20 = v46;
  sub_1000DB418(v44, v45);
  a3 = v39;
  v22 = v21;
  v18 = v19;
  dispatch thunk of GeocodeStoreType.queryLocation(for:)(v41, v39, v22, v20);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v44);
  v10 = v40;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v40) == 1)
  {
LABEL_8:
    sub_100021AA4((uint64_t)v9, &qword_100BC35F8);
    a2 = v41;
    goto LABEL_9;
  }
  v23 = v37;
  v24 = v38;
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v37, v9, v10);
  if (!sub_1006F8E00())
  {
    v34 = v36;
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v36, v23, v10);
    v35 = sub_1000BA294(&qword_100BF5B10);
    swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
    v32 = Promise.init(value:)(v34);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v23, v10);
    return v32;
  }
  sub_1006F8A2C((uint64_t)v47);
  if (v48)
  {
    sub_10003B59C((uint64_t)v47, (uint64_t)v44);
    sub_100021AA4((uint64_t)v47, &qword_100C004D8);
    v25 = v45;
    v26 = v46;
    sub_1000DB418(v44, v45);
    v27 = v26;
    v18 = v19;
    dispatch thunk of GeocodeStoreType.deleteLocation(for:)(v41, a3, v25, v27);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v23, v10);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v44);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v23, v10);
    sub_100021AA4((uint64_t)v47, &qword_100C004D8);
  }
  v10 = v40;
  a2 = v41;
  a3 = v39;
LABEL_9:
  v28 = v18[8];
  ObjectType = swift_getObjectType(v18[7]);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 8))(a2, a3, ObjectType, v28);
  v30 = v18[17];
  v31 = swift_allocObject(&unk_100B8B890, 32, 7);
  *(_QWORD *)(v31 + 16) = a2;
  *(_QWORD *)(v31 + 24) = a3;
  swift_bridgeObjectRetain();
  v32 = Promise.then<A, B>(on:disposeOn:closure:)(v30, v43, sub_1006F9F48, v31, v10, v42);
  swift_release();
  swift_release();
  return v32;
}

void LocalSearchRequestManager.performLocalSearch(with:calloutTitle:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;

  v7 = *v3;
  v8 = v3[17];
  v9 = (_QWORD *)sub_100098740((uint64_t)&unk_100B8B828, 48);
  v9[2] = a2;
  v9[3] = a3;
  v9[4] = a1;
  v9[5] = v3;
  type metadata accessor for Location(0);
  sub_1000DD2C8();
  v10 = a1;
  swift_retain();
  firstly<A, B>(on:disposeOn:closure:)(v8, v3, sub_1006F988C, v9, a2, v7);
  swift_release();
  sub_10009D300();
}

uint64_t sub_1006F980C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[8];
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v6[2] = a2;
  v6[3] = a3;
  v6[4] = a1;
  v6[5] = a4;
  v6[6] = a5;
  return PromiseDeduper.promise(key:createBlock:)(v7, sub_1006F9E5C, v6);
}

uint64_t sub_1006F985C()
{
  uint64_t v0;

  sub_1000B329C();

  swift_release();
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1006F988C(uint64_t a1)
{
  uint64_t *v1;

  return sub_1006F980C(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1006F98A8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ObjectType;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD v45[3];
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  uint64_t v49;

  v42 = a4;
  v43 = a5;
  v44 = *a5;
  v8 = sub_1000BA294(&qword_100BC35F8);
  __chkstk_darwin(v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Location(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v36 - v16;
  v18 = type metadata accessor for SettingReader(0);
  static SettingReader.shared.getter(v18);
  static Settings.Geocoding.bypassGeocodingCache.getter();
  SettingReader.read<A>(_:)(v48);
  swift_release();
  v19 = v44;
  swift_release();
  if ((v48[0] & 1) != 0)
    goto LABEL_9;
  v36 = v14;
  v37 = v17;
  v38 = v12;
  v39 = a2;
  v40 = v11;
  v41 = a1;
  v20 = v19;
  sub_1006F8A2C((uint64_t)v48);
  if (!v49)
  {
    sub_100021AA4((uint64_t)v48, &qword_100C004D8);
    v11 = v40;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 1, 1, v40);
    a2 = v39;
    goto LABEL_8;
  }
  sub_10003B59C((uint64_t)v48, (uint64_t)v45);
  sub_100021AA4((uint64_t)v48, &qword_100C004D8);
  v22 = v46;
  v21 = v47;
  sub_1000DB418(v45, v46);
  a2 = v39;
  dispatch thunk of GeocodeStoreType.queryLocation(for:)(v41, v39, v22, v21);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v45);
  v11 = v40;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v40) == 1)
  {
LABEL_8:
    sub_100021AA4((uint64_t)v10, &qword_100BC35F8);
    v19 = v20;
    a1 = v41;
    goto LABEL_9;
  }
  v24 = v37;
  v23 = v38;
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v37, v10, v11);
  if (!sub_1006F8E00())
  {
    v34 = v36;
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v36, v24, v11);
    v35 = sub_1000BA294(&qword_100BF5B10);
    swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
    v32 = Promise.init(value:)(v34);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v11);
    return v32;
  }
  sub_1006F8A2C((uint64_t)v48);
  v25 = a3;
  if (v49)
  {
    sub_10003B59C((uint64_t)v48, (uint64_t)v45);
    sub_100021AA4((uint64_t)v48, &qword_100C004D8);
    v26 = v46;
    v27 = v47;
    sub_1000DB418(v45, v46);
    dispatch thunk of GeocodeStoreType.deleteLocation(for:)(v41, a2, v26, v27);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v11);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v45);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v11);
    sub_100021AA4((uint64_t)v48, &qword_100C004D8);
  }
  v19 = v20;
  v11 = v40;
  a1 = v41;
  a2 = v39;
  a3 = v25;
LABEL_9:
  v28 = a3[8];
  ObjectType = swift_getObjectType(a3[7]);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 16))(v42, a1, a2, ObjectType, v28);
  v30 = a3[17];
  v31 = swift_allocObject(&unk_100B8B868, 32, 7);
  *(_QWORD *)(v31 + 16) = a1;
  *(_QWORD *)(v31 + 24) = a2;
  swift_bridgeObjectRetain();
  v32 = Promise.then<A, B>(on:disposeOn:closure:)(v30, v43, sub_1006F9E8C, v31, v11, v19);
  swift_release();
  swift_release();
  return v32;
}

uint64_t sub_1006F9C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];
  uint64_t v20;
  uint64_t v21;

  v8 = type metadata accessor for Location(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1006F8A2C((uint64_t)v19);
  if (v20)
  {
    sub_10003B59C((uint64_t)v19, (uint64_t)v16);
    sub_100021AA4((uint64_t)v19, &qword_100C004D8);
    v21 = v4;
    v12 = v17;
    v13 = v18;
    sub_1000DB418(v16, v17);
    dispatch thunk of GeocodeStoreType.saveLocation(_:for:)(a1, a3, a4, v12, v13);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v16);
  }
  else
  {
    sub_100021AA4((uint64_t)v19, &qword_100C004D8);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v14 = sub_1000BA294(&qword_100BF5B10);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  return Promise.init(value:)(v11);
}

uint64_t LocalSearchRequestManager.deinit()
{
  uint64_t v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 56));
  swift_release();
  sub_100021AA4(v0 + 80, &qword_100C00400);
  swift_release();

  return v0;
}

uint64_t LocalSearchRequestManager.__deallocating_deinit()
{
  uint64_t v0;

  LocalSearchRequestManager.deinit();
  return swift_deallocClassInstance(v0, 144, 7);
}

void sub_1006F9E10(uint64_t a1, uint64_t a2)
{
  sub_10005329C(&qword_100C00408, a2, (uint64_t (*)(uint64_t))type metadata accessor for LocalSearchRequestManager, (uint64_t)&protocol conformance descriptor for LocalSearchRequestManager);
}

uint64_t type metadata accessor for LocalSearchRequestManager()
{
  return objc_opt_self(_TtC7Weather25LocalSearchRequestManager);
}

uint64_t sub_1006F9E5C()
{
  uint64_t v0;

  return sub_1006F98A8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD **)(v0 + 48));
}

uint64_t sub_1006F9E6C()
{
  uint64_t v0;

  sub_1000B329C();
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1006F9E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1006F9C60(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1006F9EA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100C00400);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1006F9EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100C004D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1006F9F38()
{
  uint64_t v0;

  return sub_1006F93D4(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD **)(v0 + 40));
}

uint64_t sub_1006F9F48(uint64_t a1, uint64_t a2)
{
  return sub_1006F9E8C(a1, a2);
}

uint64_t sub_1006F9F74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006F9F80);
}

uint64_t sub_1006F9F80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BC988();
  return _s7Weather24LocationCompositionStateOwet_0(a1, a2, v4);
}

uint64_t sub_1006F9FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006F9FBC);
}

uint64_t sub_1006F9FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BC988();
  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, a2, v4);
}

uint64_t type metadata accessor for WindComponentLargeContentView(uint64_t a1)
{
  return sub_100098190(a1, qword_100C00540, (uint64_t)&nominal type descriptor for WindComponentLargeContentView);
}

uint64_t sub_1006FA008(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABE6BC, 1);
}

void sub_1006FA018(_BYTE *a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  uint64_t v4;

  *a1 = static Axis.Set.horizontal.getter(a2);
  v4 = sub_1000BA294(&qword_100C00578);
  sub_1006FA058(v2, (uint64_t)&a1[*(int *)(v4 + 44)]);
}

void sub_1006FA058(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = sub_1000BA294(&qword_100C00580);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v19 - v8;
  v10 = type metadata accessor for WindCompassAndTableView(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v19 - v14;
  sub_100080C0C(a1, (uint64_t)&v19 - v14, type metadata accessor for WindComponentViewModel);
  *v9 = static Axis.Set.vertical.getter(v16);
  v17 = sub_1000BA294(&qword_100C00588);
  sub_1006FA1FC(a1, (uint64_t)&v9[*(int *)(v17 + 44)]);
  sub_100080C0C((uint64_t)v15, (uint64_t)v12, type metadata accessor for WindCompassAndTableView);
  sub_100037768((uint64_t)v9, (uint64_t)v6, &qword_100C00580);
  sub_100080C0C((uint64_t)v12, a2, type metadata accessor for WindCompassAndTableView);
  v18 = sub_1000BA294(&qword_100C00590);
  sub_100037768((uint64_t)v6, a2 + *(int *)(v18 + 48), &qword_100C00580);
  sub_100021A14((uint64_t)v9, &qword_100C00580);
  sub_1000215BC((uint64_t)v15, type metadata accessor for WindCompassAndTableView);
  sub_100021A14((uint64_t)v6, &qword_100C00580);
  sub_1000215BC((uint64_t)v12, type metadata accessor for WindCompassAndTableView);
}

void sub_1006FA1FC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for WindComponentViewModel(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for WindDataTableView(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v23 - v11;
  v13 = type metadata accessor for WindCompassAndTableView(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v23 - v17;
  sub_100080C0C(a1, (uint64_t)&v23 - v17, type metadata accessor for WindComponentViewModel);
  sub_100080C0C(a1, (uint64_t)v6, type metadata accessor for WindComponentViewModel);
  *(_QWORD *)v9 = swift_getKeyPath(&unk_1009C1840);
  v9[8] = 0;
  v19 = &v9[v7[5]];
  *(_QWORD *)v19 = swift_getKeyPath(&unk_1009C1868);
  v20 = sub_1000BA294(&qword_100BC68C8);
  swift_storeEnumTagMultiPayload(v19, v20, 0);
  v21 = &v9[v7[6]];
  *(_QWORD *)v21 = swift_getKeyPath(&unk_1009C1898);
  v21[8] = 0;
  sub_10007802C((uint64_t)v6, (uint64_t)&v9[v7[7]], type metadata accessor for WindComponentViewModel);
  sub_10007802C((uint64_t)v9, (uint64_t)v12, type metadata accessor for WindDataTableView);
  sub_100080C0C((uint64_t)v18, (uint64_t)v15, type metadata accessor for WindCompassAndTableView);
  sub_100080C0C((uint64_t)v12, (uint64_t)v9, type metadata accessor for WindDataTableView);
  sub_100080C0C((uint64_t)v15, a2, type metadata accessor for WindCompassAndTableView);
  v22 = sub_1000BA294(&qword_100C00598);
  sub_100080C0C((uint64_t)v9, a2 + *(int *)(v22 + 48), type metadata accessor for WindDataTableView);
  sub_1000215BC((uint64_t)v12, type metadata accessor for WindDataTableView);
  sub_1000215BC((uint64_t)v18, type metadata accessor for WindCompassAndTableView);
  sub_1000215BC((uint64_t)v9, type metadata accessor for WindDataTableView);
  sub_1000215BC((uint64_t)v15, type metadata accessor for WindCompassAndTableView);
}

uint64_t type metadata accessor for WindCompassAndTableView(uint64_t a1)
{
  return sub_100098190(a1, qword_100C00690, (uint64_t)&nominal type descriptor for WindCompassAndTableView);
}

uint64_t type metadata accessor for WindDataTableView(uint64_t a1)
{
  return sub_100098190(a1, qword_100C005F8, (uint64_t)&nominal type descriptor for WindDataTableView);
}

unint64_t sub_1006FA494(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  void (*v39)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_10008D47C(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = a3[5];
    v10 = (_QWORD *)(a1 + v9);
    v11 = (_QWORD *)(a2 + v9);
    v12 = sub_1000BA294(&qword_100BC68C8);
    if (swift_getEnumCaseMultiPayload(v11) == 1)
    {
      v13 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      *v10 = *v11;
      swift_retain();
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
    v16 = a3[6];
    v17 = a1 + v16;
    v18 = a2 + v16;
    v19 = *(_QWORD *)v18;
    v20 = *(_BYTE *)(v18 + 8);
    sub_10008D47C(*(_QWORD *)v18, v20);
    *(_QWORD *)v17 = v19;
    *(_BYTE *)(v17 + 8) = v20;
    v21 = a3[7];
    v22 = a1 + v21;
    v23 = a2 + v21;
    v24 = *(_QWORD *)(a2 + v21 + 8);
    *(_QWORD *)v22 = *(_QWORD *)(a2 + v21);
    *(_QWORD *)(v22 + 8) = v24;
    v25 = *(_QWORD *)(a2 + v21 + 24);
    *(_QWORD *)(v22 + 16) = *(_QWORD *)(a2 + v21 + 16);
    *(_QWORD *)(v22 + 24) = v25;
    v26 = *(_QWORD *)(a2 + v21 + 40);
    *(_QWORD *)(v22 + 32) = *(_QWORD *)(a2 + v21 + 32);
    *(_QWORD *)(v22 + 40) = v26;
    v27 = *(_QWORD *)(a2 + v21 + 56);
    *(_QWORD *)(v22 + 48) = *(_QWORD *)(a2 + v21 + 48);
    *(_QWORD *)(v22 + 56) = v27;
    v28 = *(_QWORD *)(a2 + v21 + 72);
    *(_QWORD *)(v22 + 64) = *(_QWORD *)(a2 + v21 + 64);
    *(_QWORD *)(v22 + 72) = v28;
    v29 = *(_QWORD *)(a2 + v21 + 88);
    *(_QWORD *)(v22 + 80) = *(_QWORD *)(a2 + v21 + 80);
    *(_QWORD *)(v22 + 88) = v29;
    v30 = *(_QWORD *)(a2 + v21 + 104);
    *(_QWORD *)(v22 + 96) = *(_QWORD *)(a2 + v21 + 96);
    *(_QWORD *)(v22 + 104) = v30;
    v31 = *(_QWORD *)(a2 + v21 + 120);
    *(_QWORD *)(v22 + 112) = *(_QWORD *)(a2 + v21 + 112);
    *(_QWORD *)(v22 + 120) = v31;
    v32 = *(_QWORD *)(a2 + v21 + 136);
    *(_QWORD *)(v22 + 128) = *(_QWORD *)(a2 + v21 + 128);
    *(_QWORD *)(v22 + 136) = v32;
    v33 = *(_QWORD *)(a2 + v21 + 152);
    *(_QWORD *)(v22 + 144) = *(_QWORD *)(a2 + v21 + 144);
    *(_QWORD *)(v22 + 152) = v33;
    v34 = *(_QWORD *)(a2 + v21 + 168);
    *(_QWORD *)(v22 + 160) = *(_QWORD *)(a2 + v21 + 160);
    *(_QWORD *)(v22 + 168) = v34;
    *(_OWORD *)(v22 + 176) = *(_OWORD *)(a2 + v21 + 176);
    *(_QWORD *)(v22 + 192) = *(_QWORD *)(a2 + v21 + 192);
    v42 = type metadata accessor for WindComponentViewModel(0);
    v35 = *(int *)(v42 + 68);
    v40 = v23 + v35;
    v41 = v22 + v35;
    v36 = type metadata accessor for WindComponentCompassViewModel(0);
    v39 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v36 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v37 = swift_bridgeObjectRetain();
    v39(v41, v40, v36, v37);
    *(_QWORD *)(v22 + *(int *)(v42 + 72)) = *(_QWORD *)(v23 + *(int *)(v42 + 72));
    swift_bridgeObjectRetain();
  }
  return a1;
}

double sub_1006FA708(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  sub_1000B15F8(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = a1 + a2[5];
  sub_1000BA294(&qword_100BC68C8);
  if (swift_getEnumCaseMultiPayload(v4) == 1)
  {
    v5 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  sub_1000B15F8(*(_QWORD *)(a1 + a2[6]), *(_BYTE *)(a1 + a2[6] + 8));
  v6 = a1 + a2[7];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = v6 + *(int *)(type metadata accessor for WindComponentViewModel(0) + 68);
  v8 = type metadata accessor for WindComponentCompassViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_1006FA840(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  void (*v37)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10008D47C(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = a3[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = sub_1000BA294(&qword_100BC68C8);
  if (swift_getEnumCaseMultiPayload(v10) == 1)
  {
    v12 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = 1;
  }
  else
  {
    *v9 = *v10;
    swift_retain();
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v13);
  v14 = a3[6];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = *(_QWORD *)v16;
  v18 = *(_BYTE *)(v16 + 8);
  sub_10008D47C(*(_QWORD *)v16, v18);
  *(_QWORD *)v15 = v17;
  *(_BYTE *)(v15 + 8) = v18;
  v19 = a3[7];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_QWORD *)(v21 + 8);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_QWORD *)(v20 + 8) = v22;
  v23 = *(_QWORD *)(v21 + 24);
  *(_QWORD *)(v20 + 16) = *(_QWORD *)(v21 + 16);
  *(_QWORD *)(v20 + 24) = v23;
  v24 = *(_QWORD *)(v21 + 40);
  *(_QWORD *)(v20 + 32) = *(_QWORD *)(v21 + 32);
  *(_QWORD *)(v20 + 40) = v24;
  v41 = a1;
  v25 = *(_QWORD *)(v21 + 56);
  *(_QWORD *)(v20 + 48) = *(_QWORD *)(v21 + 48);
  *(_QWORD *)(v20 + 56) = v25;
  v26 = *(_QWORD *)(v21 + 72);
  *(_QWORD *)(v20 + 64) = *(_QWORD *)(v21 + 64);
  *(_QWORD *)(v20 + 72) = v26;
  v27 = *(_QWORD *)(v21 + 88);
  *(_QWORD *)(v20 + 80) = *(_QWORD *)(v21 + 80);
  *(_QWORD *)(v20 + 88) = v27;
  v28 = *(_QWORD *)(v21 + 104);
  *(_QWORD *)(v20 + 96) = *(_QWORD *)(v21 + 96);
  *(_QWORD *)(v20 + 104) = v28;
  v29 = *(_QWORD *)(v21 + 120);
  *(_QWORD *)(v20 + 112) = *(_QWORD *)(v21 + 112);
  *(_QWORD *)(v20 + 120) = v29;
  v30 = *(_QWORD *)(v21 + 136);
  *(_QWORD *)(v20 + 128) = *(_QWORD *)(v21 + 128);
  *(_QWORD *)(v20 + 136) = v30;
  v31 = *(_QWORD *)(v21 + 152);
  *(_QWORD *)(v20 + 144) = *(_QWORD *)(v21 + 144);
  *(_QWORD *)(v20 + 152) = v31;
  v32 = *(_QWORD *)(v21 + 168);
  *(_QWORD *)(v20 + 160) = *(_QWORD *)(v21 + 160);
  *(_QWORD *)(v20 + 168) = v32;
  *(_OWORD *)(v20 + 176) = *(_OWORD *)(v21 + 176);
  *(_QWORD *)(v20 + 192) = *(_QWORD *)(v21 + 192);
  v40 = type metadata accessor for WindComponentViewModel(0);
  v33 = *(int *)(v40 + 68);
  v38 = v21 + v33;
  v39 = v20 + v33;
  v34 = type metadata accessor for WindComponentCompassViewModel(0);
  v37 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v34 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v35 = swift_bridgeObjectRetain();
  v37(v39, v38, v34, v35);
  *(_QWORD *)(v20 + *(int *)(v40 + 72)) = *(_QWORD *)(v21 + *(int *)(v40 + 72));
  swift_bridgeObjectRetain();
  return v41;
}

uint64_t sub_1006FAA88(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10008D47C(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1000B15F8(v8, v9);
  if (a1 != a2)
  {
    v10 = a3[5];
    v11 = (_QWORD *)(a1 + v10);
    v12 = (_QWORD *)(a2 + v10);
    sub_100021A14(a1 + v10, &qword_100BC68C8);
    v13 = sub_1000BA294(&qword_100BC68C8);
    if (swift_getEnumCaseMultiPayload(v12) == 1)
    {
      v14 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      *v11 = *v12;
      swift_retain();
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
  }
  v16 = a3[6];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_QWORD *)v18;
  v20 = *(_BYTE *)(v18 + 8);
  sub_10008D47C(*(_QWORD *)v18, v20);
  v21 = *(_QWORD *)v17;
  v22 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v17 = v19;
  *(_BYTE *)(v17 + 8) = v20;
  sub_1000B15F8(v21, v22);
  v23 = a3[7];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (_QWORD *)(a2 + v23);
  *v24 = *(_QWORD *)(a2 + v23);
  v24[1] = *(_QWORD *)(a2 + v23 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24[2] = v25[2];
  v24[3] = v25[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24[4] = v25[4];
  v24[5] = v25[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24[6] = v25[6];
  v24[7] = v25[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24[8] = v25[8];
  v24[9] = v25[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24[10] = v25[10];
  v24[11] = v25[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24[12] = v25[12];
  v24[13] = v25[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24[14] = v25[14];
  v24[15] = v25[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24[16] = v25[16];
  v24[17] = v25[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24[18] = v25[18];
  v24[19] = v25[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24[20] = v25[20];
  v24[21] = v25[21];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24[22] = v25[22];
  v24[23] = v25[23];
  v24[24] = v25[24];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v26 = type metadata accessor for WindComponentViewModel(0);
  v27 = *(int *)(v26 + 68);
  v28 = (char *)v24 + v27;
  v29 = (char *)v25 + v27;
  v30 = type metadata accessor for WindComponentCompassViewModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
  *(_QWORD *)((char *)v24 + *(int *)(v26 + 72)) = *(_QWORD *)((char *)v25 + *(int *)(v26 + 72));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1006FAD90(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[5];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_1000BA294(&qword_100BC68C8);
  if (swift_getEnumCaseMultiPayload(v8) == 1)
  {
    v10 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[6];
  v12 = a3[7];
  v13 = a1 + v11;
  v14 = a2 + v11;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  v15 = a1 + v12;
  v16 = a2 + v12;
  v17 = *(_OWORD *)(a2 + v12 + 16);
  *(_OWORD *)v15 = *(_OWORD *)(a2 + v12);
  *(_OWORD *)(v15 + 16) = v17;
  v18 = *(_OWORD *)(a2 + v12 + 48);
  *(_OWORD *)(v15 + 32) = *(_OWORD *)(a2 + v12 + 32);
  *(_OWORD *)(v15 + 48) = v18;
  v19 = *(_OWORD *)(a2 + v12 + 80);
  *(_OWORD *)(v15 + 64) = *(_OWORD *)(a2 + v12 + 64);
  *(_OWORD *)(v15 + 80) = v19;
  v20 = *(_OWORD *)(a2 + v12 + 112);
  *(_OWORD *)(v15 + 96) = *(_OWORD *)(a2 + v12 + 96);
  *(_OWORD *)(v15 + 112) = v20;
  v21 = *(_OWORD *)(a2 + v12 + 144);
  *(_OWORD *)(v15 + 128) = *(_OWORD *)(a2 + v12 + 128);
  *(_OWORD *)(v15 + 144) = v21;
  *(_OWORD *)(v15 + 160) = *(_OWORD *)(a2 + v12 + 160);
  *(_QWORD *)(v15 + 176) = *(_QWORD *)(a2 + v12 + 176);
  *(_OWORD *)(v15 + 184) = *(_OWORD *)(a2 + v12 + 184);
  v22 = type metadata accessor for WindComponentViewModel(0);
  v23 = *(int *)(v22 + 68);
  v24 = v15 + v23;
  v25 = v16 + v23;
  v26 = type metadata accessor for WindComponentCompassViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  *(_QWORD *)(v15 + *(int *)(v22 + 72)) = *(_QWORD *)(v16 + *(int *)(v22 + 72));
  return a1;
}

uint64_t sub_1006FAEF8(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1000B15F8(v8, v9);
  if ((uint64_t *)a1 != a2)
  {
    v10 = a3[5];
    v11 = (void *)(a1 + v10);
    v12 = (char *)a2 + v10;
    sub_100021A14(a1 + v10, &qword_100BC68C8);
    v13 = sub_1000BA294(&qword_100BC68C8);
    if (swift_getEnumCaseMultiPayload(v12) == 1)
    {
      v14 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  v15 = a3[6];
  v16 = a1 + v15;
  v17 = (uint64_t *)((char *)a2 + v15);
  v18 = *v17;
  LOBYTE(v17) = *((_BYTE *)v17 + 8);
  v19 = *(_QWORD *)v16;
  v20 = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v16 = v18;
  *(_BYTE *)(v16 + 8) = (_BYTE)v17;
  sub_1000B15F8(v19, v20);
  v21 = a3[7];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (uint64_t *)((char *)a2 + v21);
  v24 = *(uint64_t *)((char *)a2 + v21 + 8);
  *v22 = *(uint64_t *)((char *)a2 + v21);
  v22[1] = v24;
  swift_bridgeObjectRelease();
  v25 = v23[3];
  v22[2] = v23[2];
  v22[3] = v25;
  swift_bridgeObjectRelease();
  v26 = v23[5];
  v22[4] = v23[4];
  v22[5] = v26;
  swift_bridgeObjectRelease();
  v27 = v23[7];
  v22[6] = v23[6];
  v22[7] = v27;
  swift_bridgeObjectRelease();
  v28 = v23[9];
  v22[8] = v23[8];
  v22[9] = v28;
  swift_bridgeObjectRelease();
  v29 = v23[11];
  v22[10] = v23[10];
  v22[11] = v29;
  swift_bridgeObjectRelease();
  v30 = v23[13];
  v22[12] = v23[12];
  v22[13] = v30;
  swift_bridgeObjectRelease();
  v31 = v23[15];
  v22[14] = v23[14];
  v22[15] = v31;
  swift_bridgeObjectRelease();
  v32 = v23[17];
  v22[16] = v23[16];
  v22[17] = v32;
  swift_bridgeObjectRelease();
  v33 = v23[19];
  v22[18] = v23[18];
  v22[19] = v33;
  swift_bridgeObjectRelease();
  v34 = v23[21];
  v22[20] = v23[20];
  v22[21] = v34;
  swift_bridgeObjectRelease();
  v22[22] = v23[22];
  v35 = v23[24];
  v22[23] = v23[23];
  v22[24] = v35;
  swift_bridgeObjectRelease();
  v36 = type metadata accessor for WindComponentViewModel(0);
  v37 = *(int *)(v36 + 68);
  v38 = (char *)v22 + v37;
  v39 = (char *)v23 + v37;
  v40 = type metadata accessor for WindComponentCompassViewModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 40))(v38, v39, v40);
  *(_QWORD *)((char *)v22 + *(int *)(v36 + 72)) = *(_QWORD *)((char *)v23 + *(int *)(v36 + 72));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1006FB124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006FB130);
}

uint64_t sub_1006FB130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = sub_1000BA294(&qword_100BCD380);
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == (_DWORD)a2)
    {
      v9 = v8;
      v10 = *(int *)(a3 + 20);
    }
    else
    {
      v9 = sub_1000BC988();
      v10 = *(int *)(a3 + 28);
    }
    return _s7Weather24LocationCompositionStateOwet_0(a1 + v10, a2, v9);
  }
}

uint64_t sub_1006FB1C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006FB1CC);
}

uint64_t sub_1006FB1CC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  else
  {
    v8 = sub_1000BA294(&qword_100BCD380);
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
    {
      v9 = v8;
      v10 = *(int *)(a4 + 20);
    }
    else
    {
      v9 = sub_1000BC988();
      v10 = *(int *)(a4 + 28);
    }
    return _s7Weather24LocationCompositionStateOwst_0(v5 + v10, a2, a2, v9);
  }
  return result;
}

void sub_1006FB25C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = "\t";
  sub_100158B94(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = "\t";
    v4 = type metadata accessor for WindComponentViewModel(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

void sub_1006FB2EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v19;
  uint64_t v20;

  sub_1000DF904();
  v2 = sub_1000BC988();
  if ((*(_DWORD *)(*(_QWORD *)(v2 - 8) + 80) & 0x20000) != 0)
  {
    *(_QWORD *)v0 = *(_QWORD *)v1;
    swift_retain();
  }
  else
  {
    v3 = v2;
    v4 = *(_QWORD *)(v1 + 8);
    *(_QWORD *)v0 = *(_QWORD *)v1;
    *(_QWORD *)(v0 + 8) = v4;
    v5 = *(_QWORD *)(v1 + 24);
    *(_QWORD *)(v0 + 16) = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v0 + 24) = v5;
    v6 = *(_QWORD *)(v1 + 40);
    *(_QWORD *)(v0 + 32) = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v0 + 40) = v6;
    v7 = *(_QWORD *)(v1 + 56);
    *(_QWORD *)(v0 + 48) = *(_QWORD *)(v1 + 48);
    *(_QWORD *)(v0 + 56) = v7;
    v8 = *(_QWORD *)(v1 + 72);
    *(_QWORD *)(v0 + 64) = *(_QWORD *)(v1 + 64);
    *(_QWORD *)(v0 + 72) = v8;
    v9 = *(_QWORD *)(v1 + 88);
    *(_QWORD *)(v0 + 80) = *(_QWORD *)(v1 + 80);
    *(_QWORD *)(v0 + 88) = v9;
    v10 = *(_QWORD *)(v1 + 104);
    *(_QWORD *)(v0 + 96) = *(_QWORD *)(v1 + 96);
    *(_QWORD *)(v0 + 104) = v10;
    v11 = *(_QWORD *)(v1 + 120);
    *(_QWORD *)(v0 + 112) = *(_QWORD *)(v1 + 112);
    *(_QWORD *)(v0 + 120) = v11;
    v12 = *(_QWORD *)(v1 + 136);
    *(_QWORD *)(v0 + 128) = *(_QWORD *)(v1 + 128);
    *(_QWORD *)(v0 + 136) = v12;
    v13 = *(_QWORD *)(v1 + 152);
    *(_QWORD *)(v0 + 144) = *(_QWORD *)(v1 + 144);
    *(_QWORD *)(v0 + 152) = v13;
    v14 = *(_QWORD *)(v1 + 168);
    *(_QWORD *)(v0 + 160) = *(_QWORD *)(v1 + 160);
    *(_QWORD *)(v0 + 168) = v14;
    *(_OWORD *)(v0 + 176) = *(_OWORD *)(v1 + 176);
    *(_QWORD *)(v0 + 192) = *(_QWORD *)(v1 + 192);
    v15 = *(int *)(v2 + 68);
    v19 = v1 + v15;
    v20 = v0 + v15;
    v16 = sub_10009E584();
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v16 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = swift_bridgeObjectRetain();
    v18(v20, v19, v16, v17);
    sub_1000E73E8(*(_QWORD *)(v1 + *(int *)(v3 + 72)), *(int *)(v3 + 72));
  }
  sub_1000BDA2C();
}

double sub_1006FB46C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = a1 + *(int *)(sub_1000BC988() + 68);
  v3 = sub_10009E584();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_1006FB520()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_1000DF904();
  v3 = *(_QWORD *)(v2 + 8);
  *(_QWORD *)v4 = *(_QWORD *)v2;
  *(_QWORD *)(v4 + 8) = v3;
  v5 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v4 + 24) = v5;
  v6 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v4 + 40) = v6;
  v7 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v4 + 56) = v7;
  v8 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(v4 + 64) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v4 + 72) = v8;
  v9 = *(_QWORD *)(v2 + 88);
  *(_QWORD *)(v4 + 80) = *(_QWORD *)(v2 + 80);
  *(_QWORD *)(v4 + 88) = v9;
  v10 = *(_QWORD *)(v2 + 104);
  *(_QWORD *)(v4 + 96) = *(_QWORD *)(v2 + 96);
  *(_QWORD *)(v4 + 104) = v10;
  v11 = *(_QWORD *)(v2 + 120);
  *(_QWORD *)(v4 + 112) = *(_QWORD *)(v2 + 112);
  *(_QWORD *)(v4 + 120) = v11;
  v12 = *(_QWORD *)(v2 + 136);
  *(_QWORD *)(v4 + 128) = *(_QWORD *)(v2 + 128);
  *(_QWORD *)(v4 + 136) = v12;
  v13 = *(_QWORD *)(v2 + 152);
  *(_QWORD *)(v4 + 144) = *(_QWORD *)(v2 + 144);
  *(_QWORD *)(v4 + 152) = v13;
  v14 = *(_QWORD *)(v2 + 168);
  *(_QWORD *)(v4 + 160) = *(_QWORD *)(v2 + 160);
  *(_QWORD *)(v4 + 168) = v14;
  *(_OWORD *)(v4 + 176) = *(_OWORD *)(v2 + 176);
  *(_QWORD *)(v4 + 192) = *(_QWORD *)(v2 + 192);
  v21 = sub_1000BC988();
  v15 = *(int *)(v21 + 68);
  v19 = v1 + v15;
  v20 = v0 + v15;
  v16 = sub_10009E584();
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v16 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = swift_bridgeObjectRetain();
  v18(v20, v19, v16, v17);
  sub_1000E73E8(*(_QWORD *)(v1 + *(int *)(v21 + 72)), *(int *)(v21 + 72));
  sub_1000BDA2C();
}

void sub_1006FB674()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000DF904();
  *v3 = *v2;
  v0[1] = v2[1];
  swift_bridgeObjectRetain();
  sub_10003BC58();
  v0[2] = v1[2];
  v0[3] = v1[3];
  swift_bridgeObjectRetain();
  sub_10003BC58();
  v0[4] = v1[4];
  v0[5] = v1[5];
  swift_bridgeObjectRetain();
  sub_10003BC58();
  v0[6] = v1[6];
  v0[7] = v1[7];
  swift_bridgeObjectRetain();
  sub_10003BC58();
  v0[8] = v1[8];
  v0[9] = v1[9];
  swift_bridgeObjectRetain();
  sub_10003BC58();
  v0[10] = v1[10];
  v0[11] = v1[11];
  swift_bridgeObjectRetain();
  sub_10003BC58();
  v0[12] = v1[12];
  v0[13] = v1[13];
  swift_bridgeObjectRetain();
  sub_10003BC58();
  v0[14] = v1[14];
  v0[15] = v1[15];
  swift_bridgeObjectRetain();
  sub_10003BC58();
  v0[16] = v1[16];
  v0[17] = v1[17];
  swift_bridgeObjectRetain();
  sub_10003BC58();
  v0[18] = v1[18];
  v0[19] = v1[19];
  swift_bridgeObjectRetain();
  sub_10003BC58();
  v0[20] = v1[20];
  v0[21] = v1[21];
  swift_bridgeObjectRetain();
  sub_10003BC58();
  v0[22] = v1[22];
  v0[23] = v1[23];
  v0[24] = v1[24];
  swift_bridgeObjectRetain();
  sub_10003BC58();
  v4 = sub_1000BC988();
  v5 = sub_10009E584();
  sub_1000B4D0C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24));
  sub_1000E73E8(*(_QWORD *)((char *)v1 + *(int *)(v4 + 72)), *(int *)(v4 + 72));
  swift_bridgeObjectRelease();
  sub_10004A2A0();
}

void sub_1006FB830(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  v9 = sub_1000BC988();
  v10 = sub_10009E584();
  sub_1000B4D0C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32));
  *(_QWORD *)(a1 + *(int *)(v9 + 72)) = *(_QWORD *)(a2 + *(int *)(v9 + 72));
  sub_10004A2A0();
}

void sub_1006FB8CC()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1000DF904();
  v3 = v2[1];
  *v0 = *v2;
  v0[1] = v3;
  swift_bridgeObjectRelease();
  v4 = v1[3];
  v0[2] = v1[2];
  v0[3] = v4;
  swift_bridgeObjectRelease();
  v5 = v1[5];
  v0[4] = v1[4];
  v0[5] = v5;
  swift_bridgeObjectRelease();
  v6 = v1[7];
  v0[6] = v1[6];
  v0[7] = v6;
  swift_bridgeObjectRelease();
  v7 = v1[9];
  v0[8] = v1[8];
  v0[9] = v7;
  swift_bridgeObjectRelease();
  v8 = v1[11];
  v0[10] = v1[10];
  v0[11] = v8;
  swift_bridgeObjectRelease();
  v9 = v1[13];
  v0[12] = v1[12];
  v0[13] = v9;
  swift_bridgeObjectRelease();
  v10 = v1[15];
  v0[14] = v1[14];
  v0[15] = v10;
  swift_bridgeObjectRelease();
  v11 = v1[17];
  v0[16] = v1[16];
  v0[17] = v11;
  swift_bridgeObjectRelease();
  v12 = v1[19];
  v0[18] = v1[18];
  v0[19] = v12;
  swift_bridgeObjectRelease();
  v13 = v1[21];
  v0[20] = v1[20];
  v0[21] = v13;
  swift_bridgeObjectRelease();
  v0[22] = v1[22];
  v14 = v1[24];
  v0[23] = v1[23];
  v0[24] = v14;
  swift_bridgeObjectRelease();
  v15 = sub_1000BC988();
  v16 = sub_10009E584();
  sub_1000B4D0C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 40));
  *(_QWORD *)((char *)v0 + *(int *)(v15 + 72)) = *(_QWORD *)((char *)v1 + *(int *)(v15 + 72));
  swift_bridgeObjectRelease();
  sub_10004A2A0();
}

uint64_t sub_1006FB9F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006FD694);
}

uint64_t sub_1006FBA00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006FD690);
}

uint64_t sub_1006FBA0C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for WindComponentViewModel(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_1006FBA74()
{
  sub_10003D2DC(&qword_100C006C8, &qword_100C006D0);
}

uint64_t sub_1006FBAA0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABE70C, 1);
}

void sub_1006FBAB0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  v4 = sub_1000BA294(&qword_100C00760);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BD88B8);
  __chkstk_darwin(v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for HorizontalABWithB1x1RatioLayout(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v19 - v14);
  sub_100120350();
  *v15 = OS_os_log.init(subsystem:category:)(0xD000000000000011, 0x80000001009F0D20, 0xD00000000000001FLL, 0x80000001009FBA50);
  v16 = (_QWORD *)((char *)v15 + v10[5]);
  *v16 = swift_getKeyPath(&unk_1009C19D8);
  v17 = sub_1000BA294(&qword_100BC37D8);
  swift_storeEnumTagMultiPayload(v16, v17, 0);
  *(_QWORD *)((char *)v15 + v10[6]) = 0x4059000000000000;
  *(_QWORD *)((char *)v15 + v10[7]) = 0x4030000000000000;
  sub_10007802C((uint64_t)v15, (uint64_t)v12, type metadata accessor for HorizontalABWithB1x1RatioLayout);
  sub_100080C0C((uint64_t)v12, (uint64_t)v9, type metadata accessor for HorizontalABWithB1x1RatioLayout);
  sub_100037768((uint64_t)v9, a1, &qword_100BD88B8);
  sub_1006FBCD0(v2, (uint64_t)v6);
  sub_100021A14((uint64_t)v9, &qword_100BD88B8);
  v18 = sub_1000BA294(&qword_100C00768);
  sub_1000787D4((uint64_t)v6, a1 + *(int *)(v18 + 44), &qword_100C00760);
  sub_1000215BC((uint64_t)v12, type metadata accessor for HorizontalABWithB1x1RatioLayout);
}

void sub_1006FBCD0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = a2;
  v3 = type metadata accessor for WindComponentCompassViewModel(0);
  v31 = *(_QWORD *)(v3 - 8);
  v32 = v3;
  __chkstk_darwin(v3);
  v29 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for WeatherWindComponentCompassContainerView(0);
  __chkstk_darwin(v30);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v28 - v8;
  v10 = type metadata accessor for WindComponentViewModel(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for WindDataTableView(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v28 - v17;
  sub_100080C0C(a1, (uint64_t)v12, type metadata accessor for WindComponentViewModel);
  *(_QWORD *)v15 = swift_getKeyPath(&unk_1009C1840);
  v15[8] = 0;
  v19 = &v15[v13[5]];
  *(_QWORD *)v19 = swift_getKeyPath(&unk_1009C1868);
  v20 = sub_1000BA294(&qword_100BC68C8);
  swift_storeEnumTagMultiPayload(v19, v20, 0);
  v21 = &v15[v13[6]];
  *(_QWORD *)v21 = swift_getKeyPath(&unk_1009C1898);
  v21[8] = 0;
  sub_10007802C((uint64_t)v12, (uint64_t)&v15[v13[7]], type metadata accessor for WindComponentViewModel);
  sub_10007802C((uint64_t)v15, (uint64_t)v18, type metadata accessor for WindDataTableView);
  v22 = a1 + *(int *)(v10 + 68);
  v24 = v31;
  v23 = v32;
  v25 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v29, v22, v32);
  *(_QWORD *)v6 = swift_getKeyPath(&unk_1009C1A08);
  v6[8] = 0;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(&v6[*(int *)(v30 + 20)], v25, v23);
  sub_10007802C((uint64_t)v6, (uint64_t)v9, type metadata accessor for WeatherWindComponentCompassContainerView);
  sub_100080C0C((uint64_t)v18, (uint64_t)v15, type metadata accessor for WindDataTableView);
  sub_100080C0C((uint64_t)v9, (uint64_t)v6, type metadata accessor for WeatherWindComponentCompassContainerView);
  v26 = v33;
  sub_100080C0C((uint64_t)v15, v33, type metadata accessor for WindDataTableView);
  v27 = sub_1000BA294(&qword_100C00770);
  sub_100080C0C((uint64_t)v6, v26 + *(int *)(v27 + 48), type metadata accessor for WeatherWindComponentCompassContainerView);
  sub_1000215BC((uint64_t)v9, type metadata accessor for WeatherWindComponentCompassContainerView);
  sub_1000215BC((uint64_t)v18, type metadata accessor for WindDataTableView);
  sub_1000215BC((uint64_t)v6, type metadata accessor for WeatherWindComponentCompassContainerView);
  sub_1000215BC((uint64_t)v15, type metadata accessor for WindDataTableView);
}

uint64_t sub_1006FBFCC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABE6E4, 1);
}

uint64_t sub_1006FBFDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)a2 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  sub_1000BA294(&qword_100C006D8);
  return sub_1006FC020(v2);
}

uint64_t sub_1006FC020(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v2 = type metadata accessor for WindDataTableView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v6 = a1 + *(int *)(v5 + 28);
  v18 = *(_QWORD *)(v6 + *(int *)(type metadata accessor for WindComponentViewModel(0) + 72));
  KeyPath = swift_getKeyPath(&unk_1009C19B8);
  sub_100080C0C(a1, (uint64_t)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for WindDataTableView);
  v8 = *(unsigned __int8 *)(v3 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_100B8B908, v9 + v4, v8 | 7);
  sub_10007802C((uint64_t)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9, type metadata accessor for WindDataTableView);
  swift_bridgeObjectRetain();
  v11 = sub_1000BA294(&qword_100C006E0);
  v12 = sub_1000BA294(&qword_100C006E8);
  sub_10003D2DC(&qword_100C006F0, &qword_100C006E0);
  v14 = v13;
  sub_10003D2DC(&qword_100C006F8, &qword_100C006E8);
  return ForEach<>.init(_:id:content:)(&v18, KeyPath, sub_1006FD478, v10, v11, v12, v14, &protocol witness table for String, v15);
}

void sub_1006FC1A8(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  void *v55;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t OpaqueTypeConformance2;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  void *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD v126[2];
  _QWORD __src[14];

  v125 = a2;
  v113 = a3;
  v109 = type metadata accessor for PrimaryDividerStyle(0);
  v108 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v107 = (char *)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = type metadata accessor for Divider(0);
  v105 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v104 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_1000BA294(&qword_100BC6998);
  v103 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v102 = (char *)&v101 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BD8858);
  __chkstk_darwin(v7);
  v112 = (char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v111 = (char *)&v101 - v10;
  v11 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = type metadata accessor for AccessibilityChildBehavior(0);
  v122 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v118 = (uint64_t)&v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000BA294(&qword_100C00700);
  __chkstk_darwin(v15);
  v17 = (char *)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000BA294(&qword_100C00708);
  __chkstk_darwin(v18);
  v20 = (char *)&v101 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_1000BA294(&qword_100C00710);
  __chkstk_darwin(v117);
  v22 = (char *)&v101 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = sub_1000BA294(&qword_100C00718);
  v121 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin(v120);
  v116 = (char *)&v101 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1000BA294(&qword_100C00720);
  __chkstk_darwin(v24);
  v114 = (char *)&v101 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v119 = (char *)&v101 - v27;
  __chkstk_darwin(v28);
  v124 = (uint64_t)&v101 - v29;
  v30 = *a1;
  v115 = (void *)a1[1];
  v31 = (uint64_t)v115;
  v32 = a1[2];
  v33 = a1[3];
  *(_QWORD *)v17 = static VerticalAlignment.center.getter(v34);
  *((_QWORD *)v17 + 1) = 0;
  v17[16] = 0;
  v35 = sub_1000BA294(&qword_100C00728);
  sub_1006FCBA8(v30, v31, v32, v33, v125, (uint64_t *)&v17[*(int *)(v35 + 44)]);
  LOBYTE(a1) = static Edge.Set.vertical.getter(v36);
  v37 = EdgeInsets.init(_all:)(10.0);
  v39 = v38;
  v41 = v40;
  v43 = v42;
  sub_100037768((uint64_t)v17, (uint64_t)v20, &qword_100C00700);
  v44 = &v20[*(int *)(v18 + 36)];
  *v44 = (char)a1;
  *((double *)v44 + 1) = v37;
  *((_QWORD *)v44 + 2) = v39;
  *((_QWORD *)v44 + 3) = v41;
  *((_QWORD *)v44 + 4) = v43;
  v44[40] = 0;
  v45 = (void *)v33;
  sub_100021A14((uint64_t)v17, &qword_100C00700);
  v47 = static Alignment.center.getter(v46);
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(__src, 0, 1, 0, 1, 0, 1, 0x4044000000000000, 0, 0, 1, 0, 1, v47, v48);
  sub_100037768((uint64_t)v20, (uint64_t)v22, &qword_100C00708);
  v49 = v117;
  memcpy(&v22[*(int *)(v117 + 36)], __src, 0x70uLL);
  sub_100021A14((uint64_t)v20, &qword_100C00708);
  v50 = v118;
  static AccessibilityChildBehavior.ignore.getter(v51);
  v52 = sub_1006FD4C4();
  v53 = v116;
  View.accessibilityElement(children:)(v50, v49, v52);
  v54 = v50;
  v55 = v115;
  (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v54, v123);
  sub_100021A14((uint64_t)v22, &qword_100C00710);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(2, 2);
  v56._countAndFlagsBits = 0;
  v56._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v56);
  v118 = v30;
  v57._countAndFlagsBits = v30;
  v57._object = v55;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v57);
  v58._countAndFlagsBits = 8250;
  v58._object = (void *)0xE200000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v58);
  v122 = v32;
  v59._countAndFlagsBits = v32;
  v123 = (uint64_t)v45;
  v59._object = v45;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v59);
  v60._countAndFlagsBits = 0;
  v60._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v60);
  v61 = LocalizedStringKey.init(stringInterpolation:)(v13);
  v63 = v62;
  LOBYTE(v45) = v64;
  v66 = v65;
  v126[0] = v49;
  v126[1] = v52;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v126, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v68 = (uint64_t)v119;
  v69 = v120;
  View.accessibilityLabel(_:)(v61, v63, v45 & 1, v66, v120, OpaqueTypeConformance2);
  swift_bridgeObjectRelease();
  v70 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, __n128))(v121 + 8))(v53, v69, v70);
  sub_1000787D4(v68, v124, &qword_100C00720);
  v71 = v125 + *(int *)(type metadata accessor for WindDataTableView(0) + 28);
  v72 = type metadata accessor for WindComponentViewModel(0);
  v74 = sub_10020CD48(*(_QWORD *)(v71 + *(int *)(v72 + 72)));
  v76 = v75;
  v78 = v77;
  if (!v73)
  {
    swift_bridgeObjectRetain();
    v88 = v123;
    swift_bridgeObjectRetain();
    sub_10035D5AC(v118, (uint64_t)v55, v122, v88);
    sub_10035D5AC(v74, 0, v76, v78);
LABEL_16:
    v83 = v113;
    v84 = (uint64_t)v112;
    v85 = (uint64_t)v111;
    v86 = v110;
    goto LABEL_17;
  }
  v79 = v118 == v74 && v73 == v55;
  if (!v79 && (_stringCompareWithSmolCheck(_:_:expecting:)(v118, v55, v74) & 1) == 0)
  {
    swift_bridgeObjectRetain_n(v55, 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v55, 2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  if (v122 == v76 && v78 == v123)
  {
    swift_bridgeObjectRetain_n(v55, 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v55, 2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v87 = 1;
    v83 = v113;
    v84 = (uint64_t)v112;
    v85 = (uint64_t)v111;
    v86 = v110;
    goto LABEL_18;
  }
  v81 = _stringCompareWithSmolCheck(_:_:expecting:)(v122, v123, v76);
  swift_bridgeObjectRetain_n(v55, 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n(v55, 2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v83 = v113;
  v84 = (uint64_t)v112;
  v85 = (uint64_t)v111;
  v86 = v110;
  if ((v81 & 1) == 0)
  {
LABEL_17:
    v89 = v104;
    v90 = Divider.init()(v82);
    v91 = v107;
    static DividerStyle<>.primary.getter(v90);
    sub_10000F1C8(&qword_100BC69B0, (uint64_t (*)(uint64_t))&type metadata accessor for Divider);
    v93 = v92;
    sub_10000F1C8(&qword_100BC69B8, (uint64_t (*)(uint64_t))&type metadata accessor for PrimaryDividerStyle);
    v94 = v102;
    v95 = v106;
    v96 = v109;
    View.dividerStyle<A>(_:)(v91, v106, v109, v93, v97);
    (*(void (**)(char *, uint64_t))(v108 + 8))(v91, v96);
    (*(void (**)(char *, uint64_t))(v105 + 8))(v89, v95);
    (*(void (**)(uint64_t, char *, uint64_t))(v103 + 32))(v85, v94, v86);
    v87 = 0;
    goto LABEL_18;
  }
  v87 = 1;
LABEL_18:
  v98 = (uint64_t)v114;
  v99 = v124;
  _s7Weather24LocationCompositionStateOwst_0(v85, v87, 1, v86);
  sub_100037768(v99, v98, &qword_100C00720);
  sub_100037768(v85, v84, &qword_100BD8858);
  sub_100037768(v98, v83, &qword_100C00720);
  v100 = sub_1000BA294(&qword_100C00748);
  sub_100037768(v84, v83 + *(int *)(v100 + 48), &qword_100BD8858);
  sub_100021A14(v85, &qword_100BD8858);
  sub_100021A14(v99, &qword_100C00720);
  sub_100021A14(v84, &qword_100BD8858);
  sub_100021A14(v98, &qword_100C00720);
}

void sub_1006FCBA8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  void (*v71)(char *, uint64_t);
  double v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  char v77;
  char v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t);
  unsigned int v93;
  uint64_t (*v94)(char *);
  unint64_t v95;
  int v96;
  char *v97;
  int v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;

  v99 = a5;
  v102 = a4;
  v101 = a3;
  v118 = a6;
  v8 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v8);
  v117 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = type metadata accessor for BlendMode(0);
  v114 = *(_QWORD *)(v116 - 8);
  __chkstk_darwin(v116);
  v113 = (char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = type metadata accessor for WindDataTableView(0);
  __chkstk_darwin(v106);
  v97 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for ColorSchemeContrast(0);
  v104 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v103 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v100 = (char *)&v91 - v14;
  v110 = sub_1000BA294(&qword_100C00750);
  __chkstk_darwin(v110);
  v115 = (uint64_t)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v111 = (char *)&v91 - v17;
  __chkstk_darwin(v18);
  v112 = (uint64_t)&v91 - v19;
  v20 = type metadata accessor for Font.TextStyle(0);
  v21 = *(_QWORD *)(v20 - 8);
  v91 = v20;
  __chkstk_darwin(v20);
  v23 = (char *)&v91 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = a1;
  v120 = a2;
  v24 = sub_100114EF8();
  v95 = v24;
  swift_bridgeObjectRetain();
  v25 = Text.init<A>(_:)(&v119, &type metadata for String, v24);
  v27 = v26;
  v29 = v28;
  v31 = v30 & 1;
  v93 = enum case for Font.TextStyle.subheadline(_:);
  v94 = *(uint64_t (**)(char *))(v21 + 104);
  v32 = v94(v23);
  static Font.Weight.medium.getter(v32);
  v33 = static Font.system(_:weight:)(v23);
  v92 = *(void (**)(char *, uint64_t))(v21 + 8);
  v92(v23, v20);
  v34 = Text.font(_:)(v33, v25, v27, v31, v29);
  v36 = v35;
  LOBYTE(v20) = v37;
  v39 = v38;
  swift_release();
  sub_1000D31B4(v25, v27, v31);
  swift_bridgeObjectRelease();
  LODWORD(v119) = static HierarchicalShapeStyle.primary.getter(v40);
  v41 = Text.foregroundStyle<A>(_:)(&v119, v34, v36, v20 & 1, v39, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v107 = v42;
  v108 = v41;
  v96 = v43;
  v109 = v44;
  sub_1000D31B4(v34, v36, v20 & 1);
  swift_bridgeObjectRelease();
  v45 = v99;
  v46 = *(_QWORD *)v99;
  LOBYTE(v39) = *(_BYTE *)(v99 + 8);
  sub_10008D47C(*(_QWORD *)v99, v39);
  sub_10010BCB4();
  v98 = v47;
  sub_1000B15F8(v46, v39);
  v119 = v101;
  v120 = v102;
  swift_bridgeObjectRetain();
  v48 = Text.init<A>(_:)(&v119, &type metadata for String, v95);
  v50 = v49;
  v52 = v51;
  v54 = v53 & 1;
  v55 = v91;
  v56 = ((uint64_t (*)(char *, _QWORD, uint64_t))v94)(v23, v93, v91);
  static Font.Weight.medium.getter(v56);
  v57 = static Font.system(_:weight:)(v23);
  v58 = v23;
  v59 = (uint64_t)v97;
  v92(v58, v55);
  v60 = Text.font(_:)(v57, v48, v50, v54, v52);
  v62 = v61;
  LODWORD(v101) = v63;
  v102 = v64;
  swift_release();
  sub_1000D31B4(v48, v50, v54);
  v65 = v106;
  swift_bridgeObjectRelease();
  v66 = v100;
  sub_100114A94();
  v67 = v104;
  v68 = v103;
  v69 = v105;
  (*(void (**)(char *, _QWORD, uint64_t))(v104 + 104))(v103, enum case for ColorSchemeContrast.increased(_:), v105);
  v70 = v68;
  LOBYTE(v68) = static ColorSchemeContrast.== infix(_:_:)(v66, v68);
  v71 = *(void (**)(char *, uint64_t))(v67 + 8);
  v71(v70, v69);
  v71(v66, v69);
  sub_100080C0C(v45, v59, type metadata accessor for WindDataTableView);
  if ((v68 & 1) != 0)
  {
    sub_1000215BC(v59, type metadata accessor for WindDataTableView);
    v72 = 1.0;
  }
  else
  {
    v73 = v59 + *(int *)(v65 + 24);
    v74 = *(_QWORD *)v73;
    v75 = *(_BYTE *)(v73 + 8);
    sub_10008D47C(*(_QWORD *)v73, v75);
    sub_100109B54();
    v77 = v76;
    sub_1000B15F8(v74, v75);
    sub_1000215BC(v59, type metadata accessor for WindDataTableView);
    if ((v77 & 1) != 0)
      v72 = 1.0;
    else
      v72 = 0.27;
  }
  v78 = v101 & 1;
  LODWORD(v106) = v96 & 1;
  v80 = v113;
  v79 = v114;
  v81 = v116;
  (*(void (**)(char *, _QWORD, uint64_t))(v114 + 104))(v113, enum case for BlendMode.plusLighter(_:), v116);
  v82 = (uint64_t)v117;
  (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v117, v80, v81);
  v83 = (uint64_t)v111;
  sub_100080C0C(v82, (uint64_t)&v111[*(int *)(v110 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *(_QWORD *)v83 = v60;
  *(_QWORD *)(v83 + 8) = v62;
  *(_BYTE *)(v83 + 16) = v78;
  *(_QWORD *)(v83 + 24) = v102;
  *(double *)(v83 + 32) = v72;
  sub_1000D55D4(v60, v62, v78);
  swift_bridgeObjectRetain();
  sub_1000215BC(v82, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v80, v81);
  sub_1000D31B4(v60, v62, v78);
  swift_bridgeObjectRelease();
  v84 = v112;
  sub_1000787D4(v83, v112, &qword_100C00750);
  v85 = v115;
  sub_100037768(v84, v115, &qword_100C00750);
  v86 = v118;
  v88 = v107;
  v87 = v108;
  *v118 = v108;
  v86[1] = v88;
  v89 = v106;
  *((_BYTE *)v86 + 16) = v106;
  v86[3] = v109;
  *((_BYTE *)v86 + 32) = 0;
  *((_BYTE *)v86 + 33) = (v98 & 1) == 0;
  v86[5] = 0x4024000000000000;
  *((_BYTE *)v86 + 48) = 0;
  v90 = sub_1000BA294(&qword_100C00758);
  sub_100037768(v85, (uint64_t)v86 + *(int *)(v90 + 64), &qword_100C00750);
  sub_1000D55D4(v87, v88, v89);
  swift_bridgeObjectRetain();
  sub_100021A14(v84, &qword_100C00750);
  sub_100021A14(v85, &qword_100C00750);
  sub_1000D31B4(v87, v88, v89);
  swift_bridgeObjectRelease();
}

uint64_t sub_1006FD314()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = (int *)type metadata accessor for WindDataTableView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_1000B15F8(*(_QWORD *)(v0 + v4), *(_BYTE *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  sub_1000BA294(&qword_100BC68C8);
  if (swift_getEnumCaseMultiPayload(v7) == 1)
  {
    v8 = type metadata accessor for ColorSchemeContrast(0);
    sub_10003BC44(v8);
  }
  else
  {
    swift_release();
  }
  v9 = v3 | 7;
  v10 = v4 + v5;
  sub_1000B15F8(*(_QWORD *)(v6 + v1[6]), *(_BYTE *)(v6 + v1[6] + 8));
  v11 = v6 + v1[7];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = v11 + *(int *)(sub_1000BC988() + 68);
  v13 = sub_10009E584();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v10, v9);
}

void sub_1006FD478(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WindDataTableView(0) - 8) + 80);
  sub_1006FC1A8(a1, v2 + ((v5 + 16) & ~v5), a2);
}

unint64_t sub_1006FD4C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00730;
  if (!qword_100C00730)
  {
    v1 = sub_100075EB0(&qword_100C00710);
    sub_1006FD530();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00730);
  }
  return result;
}

unint64_t sub_1006FD530()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00738;
  if (!qword_100C00738)
  {
    v1 = sub_100075EB0(&qword_100C00708);
    sub_10003D2DC(&qword_100C00740, &qword_100C00700);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00738);
  }
  return result;
}

void sub_1006FD5C4()
{
  sub_10003D2DC(&qword_100C00778, &qword_100C00780);
}

unint64_t sub_1006FD5F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00788;
  if (!qword_100C00788)
  {
    v1 = sub_100075EB0(&qword_100C00768);
    sub_10003D2DC(&qword_100C00790, &qword_100BD88B8);
    sub_10003D2DC(&qword_100C00798, &qword_100C00760);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _VariadicView.Tree<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00788);
  }
  return result;
}

ValueMetadata *type metadata accessor for HomeAndWorkAddedTip()
{
  return &type metadata for HomeAndWorkAddedTip;
}

uint64_t sub_1006FD6A8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = LocalizedStringKey.init(stringLiteral:)(0x57202620656D6F48, 0xEB000000006B726FLL);
  return sub_1000C2638(v0, v2, v1 & 1, v3, v4, v5, v6, (uint64_t)"List view tip view title for home and work.");
}

uint64_t sub_1006FD704()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = LocalizedStringKey.init(stringLiteral:)(0x100000000000007CLL, 0x8000000100A11A40);
  return sub_1000C2638(v0, v2, v1 & 1, v3, v4, v5, v6, (uint64_t)"List view tip view message describing user can go to settings app to enable or disable home and work feature.");
}

_QWORD *sub_1006FD75C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = type metadata accessor for Tips.Action(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_1000BCED8();
  Tips.Action.init(id:perform:_:)(0x7465732D6E65706FLL, 0xED000073676E6974, LocationSearchEntityFromStringResolver.init(), 0, sub_1006FD868, 0);
  v3 = sub_1000BA294(&qword_100BC5028);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v3, v5 + *(_QWORD *)(v2 + 72), v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_10097CA50;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v6 + v5, v0, v1);
  v7 = sub_1002870AC(v6);
  swift_setDeallocating(v6);
  sub_10050047C();
  return v7;
}

uint64_t sub_1006FD868()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v0 = type metadata accessor for Font.TextStyle(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = LocalizedStringKey.init(stringLiteral:)(0x6553206F74206F47, 0xEE0073676E697474);
  v8 = Text.init(_:tableName:bundle:comment:)(v4, v6, v5 & 1, v7, 0, 0, 0, "Title of an action in a tip that redirect user to settings app.", 63, 2);
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  v15 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for Font.TextStyle.body(_:), v0);
  static Font.Weight.medium.getter(v15);
  v16 = static Font.system(_:weight:)(v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v17 = Text.font(_:)(v16, v8, v10, v14, v12);
  swift_release();
  sub_1000D31B4(v8, v10, v14);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t sub_1006FD9DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_1000BA294(&qword_100BC3130);
  sub_10004037C(v0, qword_100CAF300);
  sub_1000AECD4(v0, (uint64_t)qword_100CAF300);
  v5 = 0;
  v1 = sub_1000BA294(&qword_100BC5020);
  v2 = type metadata accessor for Tips.ParameterOption(0);
  v3 = swift_allocObject(v1, ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v2 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) | 7);
  *(_OWORD *)(v3 + 16) = xmmword_10097CA50;
  static Tips.ParameterOption.transient.getter();
  return Tips.Parameter.init<A>(_:_:_:_:)(&type metadata for HomeAndWorkAddedTip, 0x79616C707369642BLL, 0xEB00000000706954, &v5, v3, &type metadata for Bool, &type metadata for HomeAndWorkAddedTip, &protocol witness table for Bool, &protocol witness table for Bool);
}

uint64_t sub_1006FDAE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[24];

  v0 = sub_1000BA294(&qword_100BC3130);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_100098728();
  v4 = v3 - v2;
  v5 = type metadata accessor for Tips.Rule(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100098728();
  v9 = v8 - v7;
  if (qword_100BC2508 != -1)
    swift_once(&qword_100BC2508, sub_1006FD9DC);
  v10 = sub_1000AECD4(v0, (uint64_t)qword_100CAF300);
  swift_beginAccess(v10, v14, 0, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v4, v10, v0);
  Tips.Rule.init<A>(_:_:)(v4, sub_1001AD5F8, 0);
  v11 = static Tips.RuleBuilder.buildExpression(_:)(v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  v12 = static Tips.RuleBuilder.buildPartialBlock(first:)(v11);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1006FDC40()
{
  return sub_1006FD6A8();
}

uint64_t sub_1006FDC6C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = sub_100162DE0();
  result = Tip.id.getter(a1, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

unint64_t sub_1006FDCAC()
{
  unint64_t result;

  result = qword_100C007A0;
  if (!qword_100C007A0)
  {
    result = swift_getWitnessTable(&unk_1009C1A44, &type metadata for HomeAndWorkAddedTip);
    atomic_store(result, (unint64_t *)&qword_100C007A0);
  }
  return result;
}

void sub_1006FDCE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t (*v111)(_QWORD);
  char *v112;
  _QWORD v113[61];
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v135 = a3;
  v136 = a2;
  v113[58] = a1;
  sub_1000BA294(&qword_100BC5F40);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100088FDC();
  v5 = sub_1000987B4(v4);
  v128 = type metadata accessor for ViewState.SecondaryViewState(v5);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v113[36] = v7;
  sub_1000BA294(&qword_100BC35F8);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100088FDC();
  v115 = v9;
  sub_1000BA294(&qword_100BD0488);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100088FDC();
  v12 = sub_1000987B4(v11);
  v129 = type metadata accessor for ModalViewState(v12);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v14);
  sub_100079F7C();
  v16 = sub_1000987B4(v15);
  v131 = type metadata accessor for SearchViewState(v16);
  sub_1000B42B0();
  __chkstk_darwin(v17);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v18);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v19);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v20);
  sub_100079F7C();
  v22 = sub_1000987B4(v21);
  type metadata accessor for SearchLocation(v22);
  sub_1000B42B0();
  __chkstk_darwin(v23);
  sub_100088FDC();
  v25 = sub_1000987B4(v24);
  v114 = type metadata accessor for LocationOfInterest(v25);
  v113[60] = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114);
  sub_100088FDC();
  v27 = sub_1000987B4(v26);
  v117 = type metadata accessor for Location(v27);
  v116 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v28);
  sub_100079F7C();
  v113[31] = v29;
  sub_1000BA294(&qword_100BC5F60);
  sub_1000B42B0();
  __chkstk_darwin(v30);
  sub_100088FDC();
  v125 = v31;
  sub_1000BA294(&qword_100BC5F68);
  sub_1000B42B0();
  __chkstk_darwin(v32);
  sub_100088FDC();
  v126 = v33;
  sub_1000BA294(&qword_100BC5F70);
  sub_1000B42B0();
  __chkstk_darwin(v34);
  sub_100088FDC();
  v127 = v35;
  sub_1000BA294(&qword_100BC5F78);
  sub_1000B42B0();
  __chkstk_darwin(v36);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v37);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v38);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v39);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v40);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v41);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v42);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v43);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v44);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v45);
  sub_100079F7C();
  v121 = v46;
  sub_1000BA294(&qword_100BC5F80);
  sub_1000B42B0();
  __chkstk_darwin(v47);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v48);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v49);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v50);
  sub_100079F7C();
  v122 = v51;
  sub_1000BA294(&qword_100BC5F88);
  sub_1000B42B0();
  __chkstk_darwin(v52);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v53);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v54);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v55);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v56);
  sub_100079F7C();
  v118 = v57;
  sub_1000BA294(&qword_100BC5F90);
  sub_1000B42B0();
  __chkstk_darwin(v58);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v59);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v60);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v61);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v62);
  sub_100079F7C();
  v119 = v63;
  sub_1000BA294(&qword_100BC5F98);
  sub_1000B42B0();
  __chkstk_darwin(v64);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v65);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v66);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v67);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v68);
  sub_100079F7C();
  v124 = v69;
  sub_1000BA294(&qword_100BC5FA0);
  sub_1000B42B0();
  __chkstk_darwin(v70);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v71);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v72);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v73);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v74);
  sub_100079F7C();
  v130 = v75;
  sub_1000BA294(&qword_100BC5FA8);
  sub_1000B42B0();
  __chkstk_darwin(v76);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v77);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v78);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v79);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v80);
  sub_100079F7C();
  v132 = v81;
  sub_1000BA294(&qword_100BC5FB0);
  sub_1000B42B0();
  __chkstk_darwin(v82);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v83);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v84);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v85);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v86);
  sub_100079F7C();
  v134 = v87;
  v133 = type metadata accessor for ViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v88);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v89);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v90);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v91);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v92);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v93);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v94);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v95);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v96);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v97);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v98);
  sub_1000860D0();
  sub_1000BA30C();
  v100 = __chkstk_darwin(v99);
  __chkstk_darwin(v100);
  sub_1000860D0();
  v120 = v101;
  __chkstk_darwin(v102);
  v103 = type metadata accessor for CodableError(0);
  __chkstk_darwin(v103);
  v123 = type metadata accessor for SearchViewState.ViewState(0);
  sub_1000B42B0();
  v105 = __chkstk_darwin(v104);
  v106 = __chkstk_darwin(v105);
  __chkstk_darwin(v106);
  v107 = type metadata accessor for SearchViewAction(0);
  sub_1000B42B0();
  __chkstk_darwin(v108);
  v110 = (char *)v113 - ((v109 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100080C0C(v135, (uint64_t)v110, v111);
  v112 = (char *)&loc_1006FE684 + dword_100700BCC[swift_getEnumCaseMultiPayload(v110, v107)];
  __asm { BR              X10 }
}

uint64_t sub_1006FE694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v0, v2, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v0, v3);
  sub_1000916FC(v1, *(_QWORD *)(v5 - 208));
  *(_QWORD *)(v5 - 104) = sub_100700C24(v1, 0, 0);
  sub_1000215BC(v1, type metadata accessor for SearchViewState.ViewState);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v3);
  return *(_QWORD *)(v5 - 104);
}

uint64_t sub_100700C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;
  _BYTE v82[12];
  int v83;
  uint64_t v84;
  _BYTE *v85;
  _BYTE *v86;
  _BYTE *v87;
  _BYTE *v88;
  _BYTE *v89;
  _BYTE *v90;
  _BYTE *v91;
  _BYTE *v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  _BYTE *v96;
  _BYTE *v97;
  uint64_t v98;

  v93 = a2;
  v84 = a1;
  v4 = sub_1000BA294(&qword_100BC5F60);
  __chkstk_darwin(v4);
  v6 = &v82[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_1000BA294(&qword_100BC5F68);
  __chkstk_darwin(v7);
  v88 = &v82[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_1000BA294(&qword_100BC5F70);
  __chkstk_darwin(v9);
  v87 = &v82[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_1000BA294(&qword_100BC5F80);
  __chkstk_darwin(v11);
  v86 = &v82[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = sub_1000BA294(&qword_100BC5F88);
  __chkstk_darwin(v13);
  v91 = &v82[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = sub_1000BA294(&qword_100BC5F90);
  __chkstk_darwin(v15);
  v90 = &v82[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = sub_1000BA294(&qword_100BC5F98);
  __chkstk_darwin(v17);
  v89 = &v82[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = sub_1000BA294(&qword_100BC5FA0);
  __chkstk_darwin(v19);
  v97 = &v82[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = sub_1000BA294(&qword_100BC5FA8);
  __chkstk_darwin(v21);
  v96 = &v82[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = sub_1000BA294(&qword_100BC5FB0);
  __chkstk_darwin(v23);
  v94 = &v82[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25 = type metadata accessor for ViewState(0);
  __chkstk_darwin(v25);
  v85 = &v82[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v27);
  v29 = &v82[-v28];
  __chkstk_darwin(v30);
  v32 = (uint64_t *)&v82[-v31];
  __chkstk_darwin(v33);
  v35 = &v82[-v34];
  v36 = sub_1000BA294(&qword_100BC5F78);
  __chkstk_darwin(v36);
  v38 = (uint64_t *)&v82[-((v37 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v39);
  v41 = &v82[-v40];
  __chkstk_darwin(v42);
  v45 = (uint64_t *)&v82[-v44];
  v98 = v43;
  v95 = v25;
  v92 = v6;
  if (a3)
  {
    v46 = a3;
  }
  else
  {
    sub_100080C0C(v43 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, (uint64_t)v35, type metadata accessor for ViewState);
    sub_1003BD328((uint64_t)&v35[*(int *)(v25 + 32)], (uint64_t)v45);
    sub_1000215BC((uint64_t)v35, type metadata accessor for ViewState);
    v47 = type metadata accessor for SearchViewState(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v45, 1, v47) == 1)
    {
      sub_100021A14((uint64_t)v45, &qword_100BC5F78);
      v93 = 0;
      v46 = 0xE000000000000000;
    }
    else
    {
      v46 = v45[1];
      v93 = *v45;
      swift_bridgeObjectRetain();
      sub_1000215BC((uint64_t)v45, type metadata accessor for SearchViewState);
    }
  }
  v48 = v98 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view;
  sub_100080C0C(v98 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, (uint64_t)v32, type metadata accessor for ViewState);
  v49 = *v32;
  v50 = v95;
  if (*(uint64_t *)((char *)v32 + *(int *)(v95 + 36) + 8) == 1)
  {
    v51 = (void *)objc_opt_self(UIDevice);
    swift_bridgeObjectRetain();
    v52 = objc_msgSend(v51, "currentDevice", swift_retain().n128_f64[0]);
    objc_msgSend(v52, "userInterfaceIdiom");

    if (*((_BYTE *)v32 + *(int *)(v50 + 28)) == 1)
    {
      swift_release();
      sub_1000215BC((uint64_t)v32, type metadata accessor for ViewState);
      v53 = type metadata accessor for ListViewState._Storage();
      swift_allocObject(v53, 90, 7);
      sub_100149094(0, 0, 1, 0, 0, 0xE000000000000000, 0, 0, 0, 0, 0, 1, 0);
      v49 = v54;
      goto LABEL_11;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_retain();
  }
  sub_1000215BC((uint64_t)v32, type metadata accessor for ViewState);
LABEL_11:
  v55 = v84;
  sub_100080C0C(v48, (uint64_t)v29, type metadata accessor for ViewState);
  sub_1003BD328((uint64_t)&v29[*(int *)(v50 + 32)], (uint64_t)v41);
  sub_1000215BC((uint64_t)v29, type metadata accessor for ViewState);
  v56 = (int *)type metadata accessor for SearchViewState(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v41, 1, (uint64_t)v56) == 1)
  {
    sub_100021A14((uint64_t)v41, &qword_100BC5F78);
    v83 = 0;
  }
  else
  {
    v83 = v41[v56[6]];
    sub_1000215BC((uint64_t)v41, type metadata accessor for SearchViewState);
  }
  v57 = type metadata accessor for AppConfigurationState(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v94, 1, 1, v57);
  v58 = type metadata accessor for EnvironmentState(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v96, 1, 1, v58);
  v59 = type metadata accessor for LocationsState(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v97, 1, 1, v59);
  v60 = type metadata accessor for NotificationsOptInState(0);
  v61 = v89;
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v89, 1, 1, v60);
  v62 = type metadata accessor for TimeState(0);
  v63 = v90;
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v90, 1, 1, v62);
  v64 = v85;
  sub_100080C0C(v48, (uint64_t)v85, type metadata accessor for ViewState);
  swift_bridgeObjectRetain();
  v65 = v93;
  sub_10055E36C(0, 256, 2, 3, v93, v46, 0, 1, 2, 0, 0, 2, 2, v49);
  swift_bridgeObjectRelease();
  v66 = type metadata accessor for ViewState.SecondaryViewState(0);
  v84 = v49;
  v67 = v86;
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v86, 1, 1, v66);
  sub_100080C0C(v55, (uint64_t)v38 + v56[5], type metadata accessor for SearchViewState.ViewState);
  v68 = (uint64_t)v38 + v56[7];
  v69 = type metadata accessor for Location(0);
  _s7Weather24LocationCompositionStateOwst_0(v68, 1, 1, v69);
  *v38 = v65;
  v38[1] = v46;
  *((_BYTE *)v38 + v56[6]) = v83;
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v38, 0, 1, (uint64_t)v56);
  v70 = type metadata accessor for DisplayMetrics(0);
  v71 = v87;
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v87, 1, 1, v70);
  v72 = type metadata accessor for WeatherMapPresentationState(0);
  v73 = v88;
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v88, 1, 1, v72);
  v74 = (uint64_t)v91;
  sub_100112494();
  swift_release();
  sub_100021A14((uint64_t)v73, &qword_100BC5F68);
  sub_100021A14((uint64_t)v71, &qword_100BC5F70);
  sub_100021A14((uint64_t)v38, &qword_100BC5F78);
  sub_100021A14((uint64_t)v67, &qword_100BC5F80);
  sub_1000215BC((uint64_t)v64, type metadata accessor for ViewState);
  _s7Weather24LocationCompositionStateOwst_0(v74, 0, 1, v95);
  v75 = type metadata accessor for ModalViewState(0);
  v76 = (uint64_t)v92;
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v92, 1, 1, v75);
  v77 = v94;
  v78 = v96;
  v79 = v97;
  v80 = sub_1000DEBAC(0, 3, (uint64_t)v94, (uint64_t)v96, (uint64_t)v97, 0, 0, 0, (uint64_t)v61, (uint64_t)v63, v74, v76, 0, 0, 0, 0, 0, 0, 0,
          v98);
  swift_release();
  sub_100021A14(v76, &qword_100BC5F60);
  sub_100021A14(v74, &qword_100BC5F88);
  sub_100021A14((uint64_t)v63, &qword_100BC5F90);
  sub_100021A14((uint64_t)v61, &qword_100BC5F98);
  sub_100021A14((uint64_t)v79, &qword_100BC5FA0);
  sub_100021A14((uint64_t)v78, &qword_100BC5FA8);
  sub_100021A14((uint64_t)v77, &qword_100BC5FB0);
  return v80;
}

void sub_100701598(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = sub_1000BA294(&qword_100BC35F8);
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BD0488);
  __chkstk_darwin(v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BC5F78);
  __chkstk_darwin(v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ViewState(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)type metadata accessor for SearchViewState(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100080C0C(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, (uint64_t)v15, type metadata accessor for ViewState);
  sub_1003BD328((uint64_t)&v15[*(int *)(v13 + 32)], (uint64_t)v12);
  sub_1000215BC((uint64_t)v15, type metadata accessor for ViewState);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, (uint64_t)v16) == 1)
  {
    sub_100021A14((uint64_t)v12, &qword_100BC5F78);
    v19 = (char *)a2 + v16[5];
    v20 = type metadata accessor for SearchViewState.ViewState(0);
    swift_storeEnumTagMultiPayload(v19, v20, 4);
    v21 = (uint64_t)a2 + v16[7];
    v22 = type metadata accessor for Location(0);
    _s7Weather24LocationCompositionStateOwst_0(v21, 1, 1, v22);
    *a2 = 0;
    a2[1] = 0xE000000000000000;
    *((_BYTE *)a2 + v16[6]) = 0;
  }
  else
  {
    sub_10007802C((uint64_t)v12, (uint64_t)v18, type metadata accessor for SearchViewState);
    v23 = type metadata accessor for SearchViewState.ViewState(0);
    swift_storeEnumTagMultiPayload(v9, v23, 4);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v23);
    v24 = type metadata accessor for Location(0);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v6, 1, 1, v24);
    sub_100267F78();
    sub_100021A14((uint64_t)v6, &qword_100BC35F8);
    sub_100021A14((uint64_t)v9, &qword_100BD0488);
    sub_1000215BC((uint64_t)v18, type metadata accessor for SearchViewState);
  }
}

uint64_t sub_100701860()
{
  uint64_t result;
  uint64_t v1;
  double v2;

  result = sub_1007018D4();
  v1 = result;
  if (qword_100BC2520 != -1)
    result = swift_once(&qword_100BC2520, sub_100701A0C);
  v2 = *(double *)&qword_100C00840;
  if (*(double *)&qword_100C00840 <= 0.9)
    v2 = 0.9;
  qword_100CAF318 = v1;
  qword_100CAF320 = *(_QWORD *)&v2;
  return result;
}

uint64_t sub_1007018D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100701B60();
  sub_100701BD4();
  v1 = v0;
  v2 = AnyTransition.combined(with:)();
  sub_10009880C();
  swift_release(v1);
  sub_100701B60();
  sub_100701BD4();
  v3 = AnyTransition.combined(with:)();
  sub_10009880C();
  sub_10009925C();
  v4 = static AnyTransition.asymmetric(insertion:removal:)(v2, v3);
  swift_release(v2);
  swift_release(v3);
  return v4;
}

uint64_t sub_1007019D4()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_1007018D4();
  result = sub_1007018D4();
  qword_100CAF328 = v0;
  unk_100CAF330 = result;
  return result;
}

uint64_t sub_100701A0C()
{
  double v0;
  uint64_t result;

  if (qword_100BC2528 != -1)
    result = swift_once(&qword_100BC2528, sub_100701A64);
  v0 = *(double *)&qword_100C00848;
  if (*(double *)&qword_100C00848 <= 0.33)
    v0 = 0.33;
  qword_100C00840 = *(_QWORD *)&v0;
  return result;
}

void sub_100701A64()
{
  id v0;
  uint64_t v1;
  uint64_t v2;

  v0 = objc_msgSend(objc_allocWithZone((Class)UISpringTimingParameters), "initWithMass:stiffness:damping:initialVelocity:", 1.0, 220.0, 30.0, 0.0, 0.0);
  objc_msgSend(v0, "ts_settlingDuration");
  v2 = v1;

  qword_100C00848 = v2;
}

uint64_t sub_100701AD4(__n128 a1, __n128 a2, __n128 a3)
{
  uint64_t result;

  a2.n128_u64[0] = 0x406B800000000000;
  a1.n128_u64[0] = 1.0;
  a3.n128_u64[0] = 30.0;
  result = static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)(a1, a2, a3, 0.0);
  qword_100C00850 = result;
  return result;
}

uint64_t sub_100701B04(__n128 a1, double a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  a1.n128_u64[0] = 0x3FD51EB851EB851FLL;
  a3.n128_u64[0] = 0x3FE570A3D70A3D71;
  v3 = static Animation.timingCurve(_:_:_:_:duration:)(a1, 0.0, a3, 1.0);
  v4 = Animation.delay(_:)(0.08);
  result = swift_release(v3);
  qword_100C00858 = v4;
  return result;
}

void sub_100701B60()
{
  _QWORD *v0;
  char v1;

  sub_1000C4DF4();
  static AnyTransition.scale(scale:anchor:)(0.9, 0.5, 0.58);
  if ((v1 & 1) != 0)
  {
    if (*v0 != -1)
      sub_1000DD2D4();
    sub_1000C3F64();
  }
  sub_1000C2F60();
  sub_10009925C();
  sub_10009880C();
  sub_10004A2A0();
}

void sub_100701BD4()
{
  _QWORD *v0;
  char v1;

  sub_1000C4DF4();
  static AnyTransition.opacity.getter();
  if ((v1 & 1) != 0)
  {
    if (*v0 != -1)
      sub_1000DD2D4();
    sub_1000C3F64();
  }
  sub_1000C2F60();
  sub_10009925C();
  sub_10009880C();
  sub_10004A2A0();
}

uint64_t sub_100701C34(__n128 a1, __n128 a2, __n128 a3)
{
  uint64_t result;

  a1.n128_u64[0] = 0x3FECCCCCCCCCCCCDLL;
  a2.n128_u64[0] = 0;
  a3.n128_u64[0] = 0;
  result = sub_100701C60(a1, a2, a3);
  qword_100C00860 = result;
  return result;
}

uint64_t sub_100701C60(__n128 a1, __n128 a2, __n128 a3)
{
  double v3;
  double v4;
  double v5;
  double v6;

  v3 = a3.n128_f64[0];
  if (a1.n128_f64[0] <= 0.0)
    v4 = INFINITY;
  else
    v4 = 6.28318531 / a1.n128_f64[0] * (6.28318531 / a1.n128_f64[0]);
  a1.n128_u64[0] = 0x7FF0000000000000;
  v5 = 1.0;
  v6 = 1.0 - a2.n128_f64[0];
  if (a2.n128_f64[0] > 1.0)
    v6 = 0.0;
  if (a2.n128_f64[0] != 0.0)
    v5 = v6;
  if (a2.n128_f64[0] < 0.0)
    v5 = 1.0 / (a2.n128_f64[0] + 1.0);
  if (a2.n128_f64[0] > -1.0)
    a1.n128_f64[0] = v5;
  a2.n128_f64[0] = sqrt(v4);
  a3.n128_f64[0] = (a2.n128_f64[0] + a2.n128_f64[0]) * a1.n128_f64[0];
  a1.n128_u64[0] = 1.0;
  a2.n128_f64[0] = v4;
  return static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)(a1, a2, a3, v3);
}

uint64_t sub_100701CDC(__n128 a1, double a2, __n128 a3)
{
  uint64_t result;

  a1.n128_u64[0] = 0x3FD51EB851EB851FLL;
  a3.n128_u64[0] = 0x3FE570A3D70A3D71;
  result = static Animation.timingCurve(_:_:_:_:duration:)(a1, 0.0, a3, 1.0);
  qword_100C00868 = result;
  return result;
}

BOOL sub_100701D18(int a1, unsigned int a2)
{
  return ((a1 ^ a2 | ((a1 ^ a2) >> 8)) & 1) == 0;
}

uint64_t sub_100701D2C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD00000000000001ELL)
  {
    v4 = 0x8000000100A11B90;
    if (a2 == 0x8000000100A11B90)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x8000000100A11B90, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x8000000100A11BB0)
  {
    swift_bridgeObjectRelease(0x8000000100A11BB0);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x8000000100A11BB0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_100701E14(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD00000000000001ALL;
  else
    return 0xD00000000000001ELL;
}

uint64_t sub_100701E50(_QWORD *a1, unsigned __int16 a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  char v15;
  char v16;

  v5 = a2 & 1;
  v6 = sub_1000BA294(&qword_100C008A0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_100702438();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NotificationSettingsViewState.CodingKeys, &type metadata for NotificationSettingsViewState.CodingKeys, v12, v10, v11);
  v16 = 0;
  sub_1000BC978(v5, (uint64_t)&v16);
  if (!v2)
  {
    v15 = 1;
    sub_1000BC978(HIBYTE(a2) & 1, (uint64_t)&v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_100701F58(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  int v10;
  char v11;
  char v12;

  v3 = sub_1000BA294(&qword_100C00890);
  __chkstk_darwin(v3);
  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_100702438();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NotificationSettingsViewState.CodingKeys, &type metadata for NotificationSettingsViewState.CodingKeys, v6, v4, v5);
  if (v1)
    return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  v12 = 0;
  v7 = sub_1000C2F6C((uint64_t)&v12);
  v11 = 1;
  v8 = sub_1000C2F6C((uint64_t)&v11);
  sub_1000BA528();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  if ((v8 & 1) != 0)
    v10 = 256;
  else
    v10 = 0;
  return v10 & 0xFFFFFFFE | v7 & 1;
}

unint64_t sub_100702080()
{
  char *v0;

  return sub_100701E14(*v0);
}

uint64_t sub_100702088@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100701D2C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1007020AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100702438();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1007020D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100702438();
  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_1007020FC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  int v4;

  if (a1[1])
    v2 = 256;
  else
    v2 = 0;
  v3 = v2 | *a1;
  if (a2[1])
    v4 = 256;
  else
    v4 = 0;
  return sub_100701D18(v3, v4 | *a2);
}

uint64_t sub_10070212C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_100701F58(a1);
  if (!v2)
  {
    *a2 = result & 1;
    a2[1] = BYTE1(result) & 1;
  }
  return result;
}

uint64_t sub_100702160(_QWORD *a1)
{
  unsigned __int8 *v1;
  __int16 v2;

  if (v1[1])
    v2 = 256;
  else
    v2 = 0;
  return sub_100701E50(a1, v2 | *v1);
}

void sub_10070218C(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  __int16 v4;

  sub_1006B68DC(a1);
  if (!v2)
  {
    *a2 = v4 & 1;
    a2[1] = HIBYTE(v4) & 1;
  }
}

void sub_1007021C0(uint64_t a1)
{
  sub_1006B687C(a1);
}

uint64_t sub_1007021EC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  a1[3] = sub_1000BA294(&qword_100C00878);
  a1[4] = sub_1007022EC();
  sub_10005F164(a1);
  return ShortDescription.init(name:_:)(0xD00000000000001DLL, 0x80000001009C1BD0, v2, &type metadata for NotificationSettingsViewState);
}

uint64_t sub_100702284(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100702330();
  return ShortDescribable.description.getter(a1, v2);
}

unint64_t sub_1007022B0()
{
  unint64_t result;

  result = qword_100C00870;
  if (!qword_100C00870)
  {
    result = swift_getWitnessTable(&unk_1009C1B94, &type metadata for NotificationSettingsViewState);
    atomic_store(result, (unint64_t *)&qword_100C00870);
  }
  return result;
}

unint64_t sub_1007022EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00880;
  if (!qword_100C00880)
  {
    v1 = sub_100075EB0(&qword_100C00878);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00880);
  }
  return result;
}

unint64_t sub_100702330()
{
  unint64_t result;

  result = qword_100C00888;
  if (!qword_100C00888)
  {
    result = swift_getWitnessTable(&unk_1009C1BBC, &type metadata for NotificationSettingsViewState);
    atomic_store(result, (unint64_t *)&qword_100C00888);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NotificationSettingsViewState(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1007023B8 + 4 * byte_1009C1B85[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_1007023EC + 4 * byte_1009C1B80[v4]))();
}

uint64_t sub_1007023EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1007023F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1007023FCLL);
  return result;
}

uint64_t sub_100702408(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x100702410);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100702414(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_10070241C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotificationSettingsViewState()
{
  return &type metadata for NotificationSettingsViewState;
}

unint64_t sub_100702438()
{
  unint64_t result;

  result = qword_100C00898;
  if (!qword_100C00898)
  {
    result = swift_getWitnessTable(&unk_1009C1DA4, &type metadata for NotificationSettingsViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C00898);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NotificationSettingsViewState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1007024C0 + 4 * byte_1009C1B8F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1007024F4 + 4 * byte_1009C1B8A[v4]))();
}

uint64_t sub_1007024F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007024FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100702504);
  return result;
}

uint64_t sub_100702510(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100702518);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10070251C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100702524(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotificationSettingsViewState.CodingKeys()
{
  return &type metadata for NotificationSettingsViewState.CodingKeys;
}

unint64_t sub_100702544()
{
  unint64_t result;

  result = qword_100C008A8;
  if (!qword_100C008A8)
  {
    result = swift_getWitnessTable(&unk_1009C1D7C, &type metadata for NotificationSettingsViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C008A8);
  }
  return result;
}

unint64_t sub_100702584()
{
  unint64_t result;

  result = qword_100C008B0;
  if (!qword_100C008B0)
  {
    result = swift_getWitnessTable(&unk_1009C1CEC, &type metadata for NotificationSettingsViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C008B0);
  }
  return result;
}

unint64_t sub_1007025C4()
{
  unint64_t result;

  result = qword_100C008B8;
  if (!qword_100C008B8)
  {
    result = swift_getWitnessTable(&unk_1009C1D14, &type metadata for NotificationSettingsViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C008B8);
  }
  return result;
}

uint64_t sub_100702600()
{
  uint64_t v0;
  unint64_t v1;

  v0 = sub_1000BA294(&qword_100C00960);
  v1 = sub_100702960();
  return Publisher.eraseToAnyPublisher()(v0, v1);
}

uint64_t sub_10070264C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  char v21;
  unint64_t v22;
  char v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;

  v2 = type metadata accessor for WeatherMapPerformanceTestConditions(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100098728();
  v6 = v5 - v4;
  v7 = sub_1000BA294(&qword_100C00968);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100098728();
  v11 = v10 - v9;
  sub_1000BA294(&qword_100BCDC58);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v25 - v17;
  CurrentValueSubject.value.getter(v16);
  v19 = v11 + *(int *)(v7 + 48);
  sub_100242490(a1, v11);
  sub_100242490((uint64_t)v18, v19);
  sub_1000BA594(v11);
  if (v21)
  {
    sub_100021A68((uint64_t)v18, &qword_100BCDC58);
    sub_1000BA594(v19);
    if (v21)
      return sub_100021A68(v11, &qword_100BCDC58);
    goto LABEL_9;
  }
  sub_100242490(v11, (uint64_t)v14);
  sub_1000BA594(v19);
  if (v21)
  {
    sub_100021A68((uint64_t)v18, &qword_100BCDC58);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v14, v2);
LABEL_9:
    sub_100021A68(v11, &qword_100C00968);
    return CurrentValueSubject.send(_:)(a1);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v6, v19, v2);
  v22 = sub_100702920();
  v23 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v6, v2, v22);
  v24 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v24(v6, v2);
  sub_100021A68((uint64_t)v18, &qword_100BCDC58);
  v24((uint64_t)v14, v2);
  result = sub_100021A68(v11, &qword_100BCDC58);
  if ((v23 & 1) == 0)
    return CurrentValueSubject.send(_:)(a1);
  return result;
}

uint64_t type metadata accessor for MapPerformanceTestConditionsProvider()
{
  return objc_opt_self(_TtC7Weather36MapPerformanceTestConditionsProvider);
}

uint64_t sub_10070288C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0;
  sub_1000BA294(&qword_100BCDC58);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100098728();
  v5 = v4 - v3;
  v6 = type metadata accessor for WeatherMapPerformanceTestConditions(0);
  _s7Weather24LocationCompositionStateOwst_0(v5, 1, 1, v6);
  v7 = sub_1000BA294(&qword_100C00960);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  *(_QWORD *)(v1 + 16) = CurrentValueSubject.init(_:)(v5);
  return v1;
}

unint64_t sub_100702920()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00970;
  if (!qword_100C00970)
  {
    v1 = type metadata accessor for WeatherMapPerformanceTestConditions(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for WeatherMapPerformanceTestConditions, v1);
    atomic_store(result, (unint64_t *)&qword_100C00970);
  }
  return result;
}

unint64_t sub_100702960()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00978;
  if (!qword_100C00978)
  {
    v1 = sub_100075EB0(&qword_100C00960);
    result = swift_getWitnessTable(&protocol conformance descriptor for CurrentValueSubject<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00978);
  }
  return result;
}

ValueMetadata *type metadata accessor for Next()
{
  return &type metadata for Next;
}

ValueMetadata *type metadata accessor for ContentStatusBannerAssembly()
{
  return &type metadata for ContentStatusBannerAssembly;
}

uint64_t type metadata accessor for ListMenuViewModelFactory()
{
  return objc_opt_self(_TtC7Weather24ListMenuViewModelFactory);
}

void sub_1007029E8()
{
  double *v0;

  *v0 = sub_10011E718();
  sub_10004A298();
}

void sub_100702A04(double *a1)
{
  sub_1000B3C0C(a1);
  sub_10004A298();
}

uint64_t sub_100702A1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int128 *a7@<X6>, __int128 *a8@<X7>, uint64_t a9@<X8>)
{
  int *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v38[2];

  *(_QWORD *)(a9 + 144) = swift_getKeyPath(&unk_1009C2100);
  *(_BYTE *)(a9 + 152) = 0;
  v16 = (int *)sub_1000891A8();
  v17 = (_QWORD *)(a9 + v16[13]);
  *v17 = swift_getKeyPath(&unk_1009C2128);
  v18 = sub_1000BA294(&qword_100BC37E0);
  sub_1000916FC((uint64_t)v17, v18);
  v19 = a9 + v16[14];
  *(_QWORD *)v19 = swift_getKeyPath(&unk_1009C2150);
  *(_BYTE *)(v19 + 8) = 0;
  v20 = (_QWORD *)(a9 + v16[15]);
  *v20 = swift_getKeyPath(&unk_1009C2178);
  v21 = sub_1000BA294(&qword_100BC37D8);
  sub_1000916FC((uint64_t)v20, v21);
  v22 = a9 + v16[16];
  *(_QWORD *)v22 = swift_getKeyPath(&unk_1009C21A8);
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 16) = 0;
  *(_QWORD *)(v22 + 24) = 0;
  *(_BYTE *)(v22 + 32) = 0;
  v23 = a9 + v16[17];
  *(_QWORD *)v23 = swift_getKeyPath(&unk_1009C21D0);
  *(_BYTE *)(v23 + 8) = 0;
  v24 = a9 + v16[18];
  *(_QWORD *)v24 = swift_getKeyPath(&unk_1009C21F8);
  *(_OWORD *)(v24 + 8) = 0u;
  *(_OWORD *)(v24 + 24) = 0u;
  *(_OWORD *)(v24 + 33) = 0u;
  v25 = a9 + v16[19];
  *(_QWORD *)v25 = sub_10013B054;
  *(_QWORD *)(v25 + 8) = 0;
  *(_BYTE *)(v25 + 16) = 0;
  v26 = (_QWORD *)(a9 + v16[20]);
  v27 = type metadata accessor for ObservableResolver(0);
  sub_10007A100((uint64_t)&qword_100BD0930);
  *v26 = EnvironmentObject.init()(v27, v28);
  v26[1] = v29;
  Text.Measurements.init()(v30);
  v31 = sub_1000BA294(&qword_100BC4650);
  sub_10007AB60((uint64_t)&qword_100BC4658);
  *(_QWORD *)a9 = ObservedObject.init(wrappedValue:)(a1, v31, v32);
  *(_QWORD *)(a9 + 8) = v33;
  *(_QWORD *)(a9 + 16) = a2;
  *(_QWORD *)(a9 + 24) = a3;
  *(_QWORD *)(a9 + 32) = a4;
  *(_QWORD *)(a9 + 40) = a5;
  *(_QWORD *)(a9 + 48) = a6;
  sub_10003B59C(a6 + 16, (uint64_t)v38);
  v34 = type metadata accessor for WireframeContentPrefetcher();
  swift_allocObject(v34, 73, 7);
  *(_QWORD *)(a9 + 136) = sub_10012E010(v38);
  sub_10003C800(a7, a9 + 56);
  return sub_10003C800(a8, a9 + 96);
}

void sub_100702C70()
{
  uint64_t v0;
  char v1;

  sub_10011E804();
  *(_QWORD *)v0 = sub_1001B8C7C();
  *(_BYTE *)(v0 + 8) = v1 & 1;
  sub_10004A298();
}

void sub_100702C98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = sub_10003BDE8(a1);
  sub_1001B8C90(v1, v2);
  sub_10004A298();
}

uint64_t sub_100702CB4()
{
  return sub_100702CDC((void (*)(void))sub_10070D14C, (uint64_t)&_s42LocationContentWantsGridViewEnvironmentKeyVN);
}

uint64_t sub_100702CC8()
{
  return sub_100702CDC((void (*)(void))sub_10070EB88, (uint64_t)&_s42ShouldConsiderMapPinnedToTopEnvironmentKeyVN);
}

uint64_t sub_100702CDC(void (*a1)(void), uint64_t a2)
{
  unsigned __int8 v4;

  a1();
  EnvironmentValues.subscript.getter(a2, a2);
  return v4;
}

void sub_100702D1C(char a1, void (*a2)(void), uint64_t a3)
{
  char v4;

  v4 = a1;
  a2();
  EnvironmentValues.subscript.setter(&v4, a3, a3);
  sub_100089028();
}

void *sub_100702D54()
{
  return &unk_100C00A18;
}

_BYTE *sub_100702D60@<X0>(_BYTE *a1@<X8>)
{
  _BYTE *result;

  result = sub_100702D54();
  *a1 = *result;
  return result;
}

void *sub_100702D88()
{
  return &unk_100C00A19;
}

_BYTE *sub_100702D94@<X0>(_BYTE *a1@<X8>)
{
  _BYTE *result;

  result = sub_100702D88();
  *a1 = *result;
  return result;
}

void sub_100702DBC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t KeyPath;
  char v5;
  uint64_t v6;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_1009C2100);
  v5 = sub_100702E38();
  v6 = sub_1000BA294(&qword_100C01550);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  v7 = a2 + *(int *)(sub_1000BA294(&qword_100C01558) + 36);
  *(_QWORD *)v7 = KeyPath;
  *(_BYTE *)(v7 + 8) = v5 & 1;
  sub_100079F70();
}

uint64_t sub_100702E38()
{
  const void *v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  void (*v16)(_BYTE *, uint64_t);
  _BYTE v22[80];
  _BYTE __dst[80];

  v1 = v0;
  v2 = type metadata accessor for ContentSizeCategory(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v22[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v8 = &v22[-v7];
  type metadata accessor for DetermineWhetherLocationContentWantsGridViewModifier(0);
  sub_100109D64();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 16))(v5, v8, v2);
  v9 = (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 88))(v5, v2);
  if (v9 == enum case for ContentSizeCategory.extraSmall(_:)
    || v9 == enum case for ContentSizeCategory.small(_:)
    || v9 == enum case for ContentSizeCategory.medium(_:)
    || v9 == enum case for ContentSizeCategory.large(_:)
    || v9 == enum case for ContentSizeCategory.extraLarge(_:)
    || v9 == enum case for ContentSizeCategory.extraExtraLarge(_:)
    || v9 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
  {
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v8, v2);
  }
  else
  {
    v16 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
    if (v9 == enum case for ContentSizeCategory.accessibilityMedium(_:)
      || v9 == enum case for ContentSizeCategory.accessibilityLarge(_:)
      || v9 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
      || v9 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
      || v9 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
    {
      v16(v8, v2);
      return 0;
    }
    v16(v5, v2);
    v16(v8, v2);
  }
  memcpy(__dst, v1, 0x49uLL);
  sub_10071A680((uint64_t)__dst);
  sub_10008CF58();
  sub_10071A680((uint64_t)__dst);
  if (v22[56])
    return 1;
  if (qword_100BC2558 != -1)
    swift_once(&qword_100BC2558, sub_10013AF44);
  return byte_100C00A38;
}

void sub_10070307C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t KeyPath;
  uint64_t v108;
  char v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;

  LODWORD(v182) = a8;
  v159 = a7;
  v156 = a4;
  v154 = a1;
  v187 = a9;
  v160 = a14;
  v158 = a13;
  v157 = a12;
  v19 = sub_1000BA294(&qword_100BC5B30);
  __chkstk_darwin(v19);
  v147 = (char *)&v144 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = type metadata accessor for Location.Identifier(0);
  v174 = *(_QWORD *)(v166 - 8);
  __chkstk_darwin(v166);
  v173 = (char *)&v144 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for WeatherActivity(0);
  __chkstk_darwin(v22);
  v146 = (char *)&v144 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189 = type metadata accessor for LocationViewModel(0);
  v24 = __chkstk_darwin(v189);
  v172 = (char *)&v144 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v168 = (char *)&v144 - v26;
  v171 = type metadata accessor for AutomationInfo(0);
  __chkstk_darwin(v171);
  v170 = (uint64_t *)((char *)&v144 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v164 = type metadata accessor for PrimaryDividerStyle(0);
  v165 = *(_QWORD *)(v164 - 8);
  __chkstk_darwin(v164);
  v162 = (char *)&v144 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = sub_1000BA294(&qword_100C00C98);
  __chkstk_darwin(v163);
  v155 = (uint64_t)&v144 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = sub_1000BA294(&qword_100BD9048);
  v167 = *(_QWORD *)(v169 - 8);
  __chkstk_darwin(v169);
  v161 = (char *)&v144 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_1000BA294(&qword_100BD9050);
  __chkstk_darwin(v31);
  v188 = (uint64_t)&v144 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = sub_1000BA294(&qword_100C00CA0);
  __chkstk_darwin(v145);
  v176 = (char *)&v144 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = sub_1000BA294(&qword_100C00CA8);
  __chkstk_darwin(v175);
  v178 = (uint64_t)&v144 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_1000BA294(&qword_100C00CB0);
  __chkstk_darwin(v177);
  v181 = (char *)&v144 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = sub_1000BA294(&qword_100C00CB8);
  __chkstk_darwin(v179);
  v184 = (uint64_t)&v144 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = sub_1000BA294(&qword_100C00CC0);
  v37 = __chkstk_darwin(v180);
  v186 = (uint64_t)&v144 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __chkstk_darwin(v37);
  v183 = (char *)&v144 - v40;
  __chkstk_darwin(v39);
  v185 = (uint64_t)&v144 - v41;
  v42 = (int *)type metadata accessor for LocationContentTopHeaderView(0);
  v43 = __chkstk_darwin(v42);
  v45 = (char *)&v144 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v190 = (uint64_t)&v144 - v46;
  v47 = *(_QWORD *)(a1 + 8);
  swift_retain();
  sub_10008D488();
  swift_release(v47);
  v48 = &v45[v42[5]];
  v49 = a2;
  v152 = a2;
  *(_QWORD *)v48 = a2;
  *((_QWORD *)v48 + 1) = a3;
  v50 = a3;
  v153 = a3;
  v51 = v156 & 1;
  v48[16] = v51;
  v156 = v51;
  v151 = a5;
  *((_QWORD *)v48 + 3) = a5;
  v52 = &v45[v42[6]];
  v53 = a6;
  v150 = a6;
  *(_QWORD *)v52 = a6;
  v54 = v159;
  *((_QWORD *)v52 + 1) = v159;
  v148 = v182 & 1;
  v52[16] = v182 & 1;
  v149 = a10;
  *((_QWORD *)v52 + 3) = a10;
  v55 = (uint64_t *)&v45[v42[7]];
  v56 = v157;
  *v55 = a11;
  v55[1] = v56;
  v57 = v158;
  v58 = v160;
  v55[2] = v158;
  v55[3] = v58;
  v182 = &v45[v42[8]];
  sub_1000D55D4(v49, v50, v51);
  swift_bridgeObjectRetain(a5);
  v59 = v53;
  LODWORD(v53) = v148;
  sub_1000D55D4(v59, v54, v148);
  swift_bridgeObjectRetain(a10);
  v60.n128_f64[0] = sub_10010F980(a11, v56, v57, v58);
  Text.Measurements.init()(v60);
  v61 = &v45[v42[9]];
  *(_QWORD *)v61 = swift_getKeyPath(&unk_1009C2128);
  v62 = sub_1000BA294(&qword_100BC37E0);
  swift_storeEnumTagMultiPayload(v61, v62, 0);
  v63 = &v45[v42[10]];
  *(_QWORD *)v63 = swift_getKeyPath(&unk_1009C2220);
  *(_OWORD *)(v63 + 8) = 0u;
  *(_OWORD *)(v63 + 24) = 0u;
  *(_OWORD *)(v63 + 40) = 0u;
  *(_OWORD *)(v63 + 56) = 0u;
  v63[72] = 0;
  v64 = &v45[v42[11]];
  *(_QWORD *)v64 = swift_getKeyPath(&unk_1009C2150);
  v64[8] = 0;
  v65 = &v45[v42[12]];
  *(_QWORD *)v65 = swift_getKeyPath(&unk_1009C2178);
  v66 = sub_1000BA294(&qword_100BC37D8);
  swift_storeEnumTagMultiPayload(v65, v66, 0);
  v67 = &v45[v42[13]];
  *(_QWORD *)v67 = swift_getKeyPath(&unk_1009C2270);
  v67[8] = 0;
  v182 = v45;
  v68 = v166;
  sub_10007802C((uint64_t)v45, v190, type metadata accessor for LocationContentTopHeaderView);
  v143 = v56;
  v69 = v155;
  v70 = v54;
  v71 = v154;
  sub_10007A1A8(v152, v153, v156, v151, v150, v70, v53, v149, v155, a11, v143, v57, v58);
  v72 = v162;
  static DividerStyle<>.primary.getter(v73);
  v74 = sub_10070D704();
  sub_10007A100((uint64_t)&qword_100BC69B8);
  v75 = v161;
  v76 = v164;
  View.dividerStyle<A>(_:)(v72, v163, v164, v74, v77);
  (*(void (**)(char *, uint64_t))(v165 + 8))(v72, v76);
  v78 = (uint64_t)v168;
  sub_100021A14(v69, &qword_100C00C98);
  v79 = *(_QWORD *)(v71 + 8);
  swift_retain();
  sub_10008D488();
  swift_release(v79);
  v80 = (uint64_t *)(v78 + *(int *)(v189 + 24));
  v82 = *v80;
  v81 = v80[1];
  swift_bridgeObjectRetain(v81);
  sub_1000215BC(v78, type metadata accessor for LocationViewModel);
  v83 = (uint64_t)v170;
  *v170 = v82;
  *(_QWORD *)(v83 + 8) = v81;
  v84 = type metadata accessor for AutomationViewInfo(0);
  swift_storeEnumTagMultiPayload(v83, v84, 0);
  swift_storeEnumTagMultiPayload(v83, v171, 0);
  sub_100335574();
  sub_1000215BC(v83, type metadata accessor for AutomationInfo);
  (*(void (**)(char *, uint64_t))(v167 + 8))(v75, v169);
  v85 = *(_QWORD *)(v71 + 8);
  swift_retain();
  v86 = (uint64_t)v172;
  sub_10008D488();
  swift_release(v85);
  v87 = v173;
  v88 = v174;
  v89 = *(void (**)(char *, uint64_t, uint64_t))(v174 + 16);
  v89(v173, v86, v68);
  sub_1000215BC(v86, type metadata accessor for LocationViewModel);
  v91 = Location.Identifier.kind.getter(v90) & 1;
  (*(void (**)(char *, uint64_t))(v88 + 8))(v87, v68);
  v92 = Location.Identifier.Kind.rawValue.getter(v91);
  v94 = v93;
  v95 = Location.Identifier.Kind.rawValue.getter(1);
  if (v92 == v95 && v94 == v96)
  {
    v103 = 2;
    swift_bridgeObjectRelease_n(v94, 2);
    v100 = (uint64_t)v147;
    v101 = (uint64_t)v146;
    v102 = v145;
  }
  else
  {
    v98 = v96;
    v99 = _stringCompareWithSmolCheck(_:_:expecting:)(v92, v94, v95, v96, 0);
    swift_bridgeObjectRelease(v94);
    swift_bridgeObjectRelease(v98);
    v100 = (uint64_t)v147;
    v101 = (uint64_t)v146;
    v102 = v145;
    if ((v99 & 1) != 0)
    {
      v103 = 2;
    }
    else
    {
      v104 = *(_QWORD *)(v71 + 8);
      swift_retain();
      sub_10008D488();
      swift_release(v104);
      v89((char *)v101, v78, v68);
      sub_1000215BC(v78, type metadata accessor for LocationViewModel);
      v103 = 0;
    }
  }
  _s7Weather24LocationCompositionStateOwst_0(v101, v103, 2, v68);
  v105 = (uint64_t)v176;
  sub_100080C0C(v101, (uint64_t)&v176[*(int *)(v102 + 36)], type metadata accessor for WeatherActivity);
  v106 = v188;
  sub_100037768(v188, v105, &qword_100BD9050);
  sub_1000215BC(v101, type metadata accessor for WeatherActivity);
  sub_100021A14(v106, &qword_100BD9050);
  KeyPath = swift_getKeyPath(&unk_1009C2298);
  v108 = *(_QWORD *)(v71 + 144);
  LOBYTE(v106) = *(_BYTE *)(v71 + 152);
  sub_10008D47C(v108, v106);
  sub_100109B54();
  v110 = v109;
  sub_1000B15F8(v108, v106);
  v111 = v178;
  sub_100037768(v105, v178, &qword_100C00CA0);
  v112 = v111 + *(int *)(v175 + 36);
  *(_QWORD *)v112 = KeyPath;
  *(_BYTE *)(v112 + 8) = v110 & 1;
  sub_100021A14(v105, &qword_100C00CA0);
  v113 = swift_getKeyPath(&unk_1009C22C0);
  v114 = *(_QWORD *)(v71 + 8);
  swift_retain();
  sub_10008D488();
  swift_release(v114);
  v115 = v189;
  sub_100037768(v78 + *(int *)(v189 + 80), v100, &qword_100BC5B30);
  sub_1000215BC(v78, type metadata accessor for LocationViewModel);
  v116 = (uint64_t)v181;
  v117 = (uint64_t *)&v181[*(int *)(v177 + 36)];
  v118 = sub_1000BA294(&qword_100C00D20);
  sub_100037768(v100, (uint64_t)v117 + *(int *)(v118 + 28), &qword_100BC5B30);
  *v117 = v113;
  sub_100037768(v111, v116, &qword_100C00CA8);
  sub_100021A14(v100, &qword_100BC5B30);
  sub_100021A14(v111, &qword_100C00CA8);
  v119 = swift_getKeyPath(&unk_1009C22E8);
  v120 = *(_QWORD *)(v71 + 8);
  swift_retain();
  sub_10008D488();
  swift_release(v120);
  LOBYTE(v117) = *(_BYTE *)(v78 + *(int *)(v115 + 84));
  sub_1000215BC(v78, type metadata accessor for LocationViewModel);
  v121 = v184;
  sub_100037768(v116, v184, &qword_100C00CB0);
  v122 = v121 + *(int *)(v179 + 36);
  *(_QWORD *)v122 = v119;
  *(_BYTE *)(v122 + 8) = (_BYTE)v117;
  sub_100021A14(v116, &qword_100C00CB0);
  v123 = *(_QWORD *)(v71 + 8);
  swift_retain();
  sub_10008D488();
  v124 = swift_release(v123);
  v125 = *(_QWORD *)(v71 + 16);
  v126 = static Alignment.center.getter(v124);
  v128 = v127;
  v129 = (uint64_t)v183;
  v130 = (uint64_t)&v183[*(int *)(v180 + 36)];
  sub_100080C0C(v78, v130, type metadata accessor for LocationViewModel);
  v131 = v78;
  v132 = (_QWORD *)(v130 + *(int *)(type metadata accessor for ForegroundEffectConfigurationView(0) + 20));
  swift_retain();
  v133 = sub_1000BA294((uint64_t *)&unk_100C0A200);
  sub_10007AB60((uint64_t)&unk_100BC4620);
  *v132 = ObservedObject.init(wrappedValue:)(v125, v133, v134);
  v132[1] = v135;
  v136 = (uint64_t *)(v130 + *(int *)(sub_1000BA294(&qword_100C00D28) + 36));
  *v136 = v126;
  v136[1] = v128;
  sub_100037768(v121, v129, &qword_100C00CB8);
  sub_1000215BC(v131, type metadata accessor for LocationViewModel);
  sub_100021A14(v121, &qword_100C00CB8);
  v137 = v185;
  sub_1000787D4(v129, v185, &qword_100C00CC0);
  v138 = v190;
  v139 = (uint64_t)v182;
  sub_100080C0C(v190, (uint64_t)v182, type metadata accessor for LocationContentTopHeaderView);
  v140 = v186;
  sub_100037768(v137, v186, &qword_100C00CC0);
  v141 = v187;
  sub_100080C0C(v139, v187, type metadata accessor for LocationContentTopHeaderView);
  v142 = sub_1000BA294(&qword_100C00D30);
  sub_100037768(v140, v141 + *(int *)(v142 + 48), &qword_100C00CC0);
  sub_100021A14(v137, &qword_100C00CC0);
  sub_1000215BC(v138, type metadata accessor for LocationContentTopHeaderView);
  sub_100021A14(v140, &qword_100C00CC0);
  sub_1000215BC(v139, type metadata accessor for LocationContentTopHeaderView);
}

uint64_t sub_100703E60(uint64_t a1, double *a2, uint64_t a3)
{
  double v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a2;
  v4 = (uint64_t *)(a3 + *(int *)(type metadata accessor for LocationContentView(0) + 76));
  v5 = *v4;
  v6 = v4[1];
  v7 = *((unsigned __int8 *)v4 + 16);
  v8 = type metadata accessor for SceneResizeMonitor();
  sub_10007A100((uint64_t)&unk_100C00C90);
  v10 = v9;
  v11 = StateObject.wrappedValue.getter(v5, v6, v7, v8, v9);
  v12 = *(double *)(v11 + 16);
  swift_release(v11);
  if (v12 != v3)
  {
    v13 = StateObject.wrappedValue.getter(v5, v6, v7, v8, v10);
    sub_100703F4C(1);
    swift_release(v13);
  }
  v14 = StateObject.wrappedValue.getter(v5, v6, v7, v8, v10);
  *(double *)(v14 + 16) = v3;
  return swift_release(v14);
}

uint64_t sub_100703F4C(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *(_QWORD *)(v1 + 24);
  swift_beginAccess(v3 + 32, v6, 1, 0);
  *(_BYTE *)(v3 + 32) = a1;
  swift_retain();
  sub_1002C5470(v4);
  return swift_release(v3);
}

uint64_t sub_100703FA0@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  sub_1000BA294(&qword_100C00D58);
  return a1();
}

void sub_100703FF0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t KeyPath;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;

  LODWORD(v67) = a8;
  v70 = a7;
  v66 = a5;
  v76 = a9;
  v79 = a14;
  v80 = a15;
  v69 = a13;
  v78 = a12;
  v62 = a11;
  v75 = type metadata accessor for LocationViewModel(0);
  __chkstk_darwin(v75);
  v74 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1000BA294(&qword_100C00D60);
  __chkstk_darwin(v22);
  v24 = (char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_1000BA294(&qword_100C00D68);
  __chkstk_darwin(v68);
  v72 = (uint64_t)&v57 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_1000BA294(&qword_100C00D70);
  __chkstk_darwin(v73);
  v71 = (uint64_t)&v57 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_10004B51C(a10);
  if (qword_100BC1EF8 != -1)
    swift_once(&qword_100BC1EF8, sub_100131F04);
  v60 = byte_100CAE581;
  v28 = *(_QWORD *)(a1 + 48);
  v59 = *(int *)(v22 + 48);
  v81 = 0;
  swift_retain();
  v64 = a4 & 1;
  v65 = a2;
  sub_1000D55D4(a2, a3, a4 & 1);
  v61 = a3;
  v29 = v66;
  swift_bridgeObjectRetain(v66);
  v77 = a1;
  v30 = v67 & 1;
  v63 = v67 & 1;
  v31 = a6;
  v67 = a6;
  v32 = v70;
  sub_1000D55D4(v31, v70, v30);
  v33 = v62;
  swift_bridgeObjectRetain(v62);
  v34 = v78;
  v35 = v69;
  v36 = v79;
  v37 = v80;
  sub_10010F980(v78, v69, v79, v80);
  v38 = sub_1000BA294(&qword_100BD3A30);
  State.init(wrappedValue:)(&v81, v38);
  *(_OWORD *)&v24[v59] = v82;
  *(_QWORD *)v24 = 0x6E6F697461636F6CLL;
  *((_QWORD *)v24 + 1) = 0xE800000000000000;
  v24[16] = v60;
  v58 = v28;
  *((_QWORD *)v24 + 3) = v28;
  v39 = &v24[*(int *)(v22 + 44)];
  swift_retain();
  *((_QWORD *)&v55 + 1) = v36;
  v56 = v37;
  *((_QWORD *)&v54 + 1) = v34;
  *(_QWORD *)&v55 = v35;
  *(_QWORD *)&v54 = v33;
  v40 = (uint64_t)v39;
  v41 = v65;
  v42 = v61;
  LOBYTE(v34) = v64;
  v43 = v67;
  LOBYTE(v36) = v63;
  sub_1007044AC(v77, v65, v61, v64, v29, v67, v32, v63, v40, v27, v54, v55, v56);
  sub_1000D31B4(v41, v42, v34);
  swift_bridgeObjectRelease(v29);
  sub_1000D31B4(v43, v32, v36);
  swift_bridgeObjectRelease(v33);
  sub_10010F9B0(v78, v35, v79, v80);
  swift_release(v58);
  KeyPath = swift_getKeyPath(&unk_1009C2310);
  v45 = v72;
  sub_100037768((uint64_t)v24, v72, &qword_100C00D60);
  v46 = v45 + *(int *)(v68 + 36);
  *(_QWORD *)v46 = KeyPath;
  *(double *)(v46 + 8) = a10;
  sub_100021A14((uint64_t)v24, &qword_100C00D60);
  v47 = *(_QWORD *)(v77 + 8);
  swift_retain();
  v48 = (uint64_t)v74;
  sub_10008D488();
  swift_release(v47);
  LOBYTE(v32) = *(_BYTE *)(v48 + *(int *)(v75 + 68));
  sub_1000215BC(v48, type metadata accessor for LocationViewModel);
  v49 = swift_getKeyPath(&unk_1009C2338);
  v50 = v71;
  sub_100037768(v45, v71, &qword_100C00D68);
  v51 = v73;
  v52 = v50 + *(int *)(v73 + 36);
  *(_BYTE *)v52 = v32;
  *(double *)(v52 + 8) = v27;
  *(_QWORD *)(v52 + 16) = v49;
  *(_BYTE *)(v52 + 24) = 0;
  sub_100021A14(v45, &qword_100C00D68);
  v53 = sub_10070DD2C();
  View.setForegroundEffectContainer()(v51, v53);
  sub_100021A14(v50, &qword_100C00D70);
}

void sub_1007044AC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, __int128 a11, __int128 a12, uint64_t a13)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t KeyPath;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  __int128 v74;
  double v75;
  double v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  int v132;
  __int128 v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  _BYTE v142[136];
  _BYTE v143[136];
  _BYTE v144[152];
  _OWORD v145[2];
  char v146;
  _BYTE v147[40];
  _BYTE v148[152];

  v134 = a8;
  v140 = (char *)a7;
  v137 = a5;
  v138 = (char *)a6;
  v132 = a4;
  v135 = a2;
  v136 = a3;
  v129 = a9;
  v133 = a11;
  v131 = a12;
  v130 = a13;
  v15 = sub_1000BA294(&qword_100C00D98);
  v117 = *(_QWORD *)(v15 - 8);
  v118 = v15;
  __chkstk_darwin(v15);
  v116 = (uint64_t)&v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_1000BA294(&qword_100C00DA0);
  v17 = __chkstk_darwin(v125);
  v115 = (char *)&v109 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v119 = (uint64_t)&v109 - v19;
  v139 = sub_1000BA294(&qword_100C00DA8);
  __chkstk_darwin(v139);
  v141 = (uint64_t)&v109 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_1000BA294(&qword_100C00DB0);
  __chkstk_darwin(v121);
  v120 = (uint64_t)&v109 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_1000BA294(&qword_100C00DB8);
  __chkstk_darwin(v113);
  v112 = (char *)&v109 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = sub_1000BA294(&qword_100C00DC0);
  __chkstk_darwin(v123);
  v109 = (char *)&v109 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_1000BA294(&qword_100C00DC8);
  __chkstk_darwin(v122);
  v114 = (uint64_t)&v109 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = sub_1000BA294(&qword_100C00DD0);
  v25 = __chkstk_darwin(v111);
  v110 = (char *)&v109 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v28 = (char *)&v109 - v27;
  v124 = sub_1000BA294(&qword_100C00DD8);
  __chkstk_darwin(v124);
  v30 = (char *)&v109 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_1000BA294(&qword_100C00DE0);
  v32 = __chkstk_darwin(v31);
  v128 = (char *)&v109 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v126 = (char *)&v109 - v34;
  v35 = sub_1000BA294(&qword_100C00DE8);
  __chkstk_darwin(v35);
  v37 = (char **)((char *)&v109 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = sub_1000BA294(&qword_100C00DF0);
  v39 = __chkstk_darwin(v38);
  v127 = (char *)&v109 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __chkstk_darwin(v39);
  v43 = (char *)&v109 - v42;
  v44 = __chkstk_darwin(v41);
  v46 = (char *)&v109 - v45;
  *v37 = static Alignment.top.getter(v44);
  v37[1] = v47;
  v48 = sub_1000BA294(&qword_100C00DF8);
  sub_100704F38(a1, v135, v136, v132 & 1, v137, (uint64_t)v138, (uint64_t)v140, v134 & 1, (uint64_t)v37 + *(int *)(v48 + 44), v133, *((uint64_t *)&v133 + 1), v131, *((uint64_t *)&v131 + 1), v130);
  sub_100037768((uint64_t)v37, (uint64_t)v43, &qword_100C00DE8);
  *(_QWORD *)&v43[*(int *)(v38 + 36)] = 0x3FF0000000000000;
  sub_100021A14((uint64_t)v37, &qword_100C00DE8);
  v140 = v46;
  sub_1000787D4((uint64_t)v43, (uint64_t)v46, &qword_100C00DF0);
  sub_100705504((uint64_t)v144, a10);
  sub_1000787D4((uint64_t)v144, (uint64_t)v148, &qword_100C00E00);
  v49 = *(_QWORD *)(a1 + 144);
  LOBYTE(v43) = *(_BYTE *)(a1 + 152);
  sub_10008D47C(v49, (char)v43);
  sub_100109B54();
  LOBYTE(v38) = v50;
  sub_1000B15F8(v49, (char)v43);
  if ((v38 & 1) != 0)
  {
    v52 = (uint64_t)v110;
    v51 = v111;
    v53 = (uint64_t)v112;
    v54 = v113;
    v138 = v30;
    v55 = sub_10070592C();
    v56 = v114;
    sub_100705C58(v114, a10);
    if ((v55 & 1) != 0)
    {
      KeyPath = swift_getKeyPath(&unk_1009C2220);
      sub_100037768(v56, v52, &qword_100C00DC8);
      v58 = v52 + *(int *)(v51 + 36);
      *(_QWORD *)v58 = KeyPath;
      *(_OWORD *)(v58 + 8) = 0u;
      *(_OWORD *)(v58 + 24) = 0u;
      *(_OWORD *)(v58 + 40) = 0u;
      *(_OWORD *)(v58 + 56) = 0u;
      *(_BYTE *)(v58 + 72) = 0;
      sub_100021A14(v56, &qword_100C00DC8);
      sub_1000787D4(v52, (uint64_t)v28, &qword_100C00DD0);
      v59 = v53;
      sub_100037768((uint64_t)v28, v53, &qword_100C00DD0);
      swift_storeEnumTagMultiPayload(v53, v54, 0);
      v60 = sub_1000BA294(&qword_100C00E38);
      v61 = sub_10070DF60();
      v62 = sub_10070E020();
      v63 = (uint64_t)v109;
      _ConditionalContent<>.init(storage:)(v59, v51, v60, v61, v62);
      v64 = v120;
      sub_100037768(v63, v120, &qword_100C00DC0);
      swift_storeEnumTagMultiPayload(v64, v121, 0);
      v65 = sub_10070DEF4();
      sub_10007AB60((uint64_t)&unk_100C00E20);
      v66 = (uint64_t)v138;
      _ConditionalContent<>.init(storage:)(v64, v123, v122, v65, v67);
      sub_100021A14(v63, &qword_100C00DC0);
      v68 = (uint64_t)v28;
      v69 = &qword_100C00DD0;
    }
    else
    {
      v97 = v120;
      sub_100037768(v56, v120, &qword_100C00DC8);
      swift_storeEnumTagMultiPayload(v97, v121, 1);
      v98 = sub_10070DEF4();
      sub_10007AB60((uint64_t)&unk_100C00E20);
      v66 = (uint64_t)v138;
      _ConditionalContent<>.init(storage:)(v97, v123, v122, v98, v99);
      v68 = v56;
      v69 = &qword_100C00DC8;
    }
    sub_100021A14(v68, v69);
    v100 = v141;
    v101 = v139;
    sub_100037768(v66, v141, &qword_100C00DD8);
    swift_storeEnumTagMultiPayload(v100, v101, 0);
    v102 = sub_10070DE70();
    v103 = sub_10070E0E0();
    v93 = (uint64_t)v126;
    _ConditionalContent<>.init(storage:)(v100, v124, v125, v102, v103);
    sub_100021A14(v66, &qword_100C00DD8);
    v96 = (uint64_t)v127;
    v95 = (uint64_t)v128;
    v94 = v129;
  }
  else
  {
    v70 = v116;
    v71 = sub_10008B954(v116, a10);
    v72 = static Edge.Set.bottom.getter(v71);
    v73 = a1 + *(int *)(type metadata accessor for LocationContentView(0) + 64);
    v74 = *(_OWORD *)(v73 + 16);
    v145[0] = *(_OWORD *)v73;
    v145[1] = v74;
    v146 = *(_BYTE *)(v73 + 32);
    sub_1000787D4((uint64_t)v145, (uint64_t)v147, &qword_100BC3BB0);
    sub_1001171F4((uint64_t)v147, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000D55E4);
    sub_10011740C();
    v76 = v75;
    sub_1001171F4((uint64_t)v145, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000D31C4);
    v77 = EdgeInsets.init(_all:)(v76);
    v79 = v78;
    v81 = v80;
    v83 = v82;
    v85 = v117;
    v84 = v118;
    v86 = (uint64_t)v115;
    (*(void (**)(char *, uint64_t, uint64_t))(v117 + 16))(v115, v70, v118);
    v87 = v125;
    v88 = v86 + *(int *)(v125 + 36);
    *(_BYTE *)v88 = v72;
    *(double *)(v88 + 8) = v77;
    *(_QWORD *)(v88 + 16) = v79;
    *(_QWORD *)(v88 + 24) = v81;
    *(_QWORD *)(v88 + 32) = v83;
    *(_BYTE *)(v88 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v70, v84);
    v89 = v119;
    sub_1000787D4(v86, v119, &qword_100C00DA0);
    v90 = v141;
    sub_100037768(v89, v141, &qword_100C00DA0);
    swift_storeEnumTagMultiPayload(v90, v139, 1);
    v91 = sub_10070DE70();
    v92 = sub_10070E0E0();
    v93 = (uint64_t)v126;
    _ConditionalContent<>.init(storage:)(v90, v124, v87, v91, v92);
    sub_100021A14(v89, &qword_100C00DA0);
    v95 = (uint64_t)v128;
    v94 = v129;
    v96 = (uint64_t)v127;
  }
  v104 = swift_getKeyPath(&unk_1009C2220);
  v105 = (uint64_t)v140;
  sub_100037768((uint64_t)v140, v96, &qword_100C00DF0);
  sub_1000787D4((uint64_t)v148, (uint64_t)v142, &qword_100C00E00);
  sub_100037768(v93, v95, &qword_100C00DE0);
  sub_100037768(v96, v94, &qword_100C00DF0);
  v106 = (int *)sub_1000BA294(&qword_100C00EA0);
  v107 = v94 + v106[12];
  sub_1000787D4((uint64_t)v142, (uint64_t)v143, &qword_100C00E00);
  sub_1000787D4((uint64_t)v143, v107, &qword_100C00E00);
  sub_100037768(v95, v94 + v106[16], &qword_100C00DE0);
  v108 = v94 + v106[20];
  *(_QWORD *)v108 = v104;
  *(_OWORD *)(v108 + 8) = 0u;
  *(_OWORD *)(v108 + 24) = 0u;
  *(_OWORD *)(v108 + 40) = 0u;
  *(_OWORD *)(v108 + 56) = 0u;
  *(_BYTE *)(v108 + 72) = 0;
  sub_10070E3C4((uint64_t)v143);
  sub_1000D4FF4(v104, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  sub_100021A14(v93, &qword_100C00DE0);
  sub_100021A14(v105, &qword_100C00DF0);
  sub_1000CEE98(v104, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  sub_100021A14(v95, &qword_100C00DE0);
  sub_1000787D4((uint64_t)v142, (uint64_t)v144, &qword_100C00E00);
  sub_10070E3C4((uint64_t)v144);
  sub_100021A14(v96, &qword_100C00DF0);
}

void sub_100704F38(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  LODWORD(v96) = a8;
  v88 = a4;
  v85 = a2;
  v86 = a3;
  v100 = a9;
  v94 = a7;
  v95 = a14;
  v92 = a6;
  v93 = a13;
  v91 = a12;
  v89 = a5;
  v90 = a11;
  v87 = a10;
  v15 = type metadata accessor for LocationContentScrollingHeaderView(0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v99 = (uint64_t)&v81 - v19;
  v83 = type metadata accessor for LocationViewAppEntityView(0);
  v20 = __chkstk_darwin(v83);
  v98 = (uint64_t)&v81 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v101 = (uint64_t)&v81 - v22;
  v23 = type metadata accessor for LocationViewModel(0);
  __chkstk_darwin(v23);
  v25 = (char *)&v81 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = (int *)type metadata accessor for LocationViewObserverView(0);
  v27 = __chkstk_darwin(v26);
  v97 = (uint64_t)&v81 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v30 = (uint64_t *)((char *)&v81 - v29);
  v31 = *(_QWORD *)(a1 + 8);
  swift_retain();
  sub_10008D488();
  swift_release(v31);
  v32 = *(_QWORD *)(a1 + 16);
  v33 = *(_QWORD *)(a1 + 136);
  *v30 = swift_getKeyPath(&unk_1009C2458);
  v34 = sub_1000BA294(&qword_100C09EB0);
  swift_storeEnumTagMultiPayload(v30, v34, 0);
  v35 = (char *)v30 + v26[5];
  *(_QWORD *)v35 = sub_100153A0C;
  *((_QWORD *)v35 + 1) = 0;
  v35[16] = 0;
  sub_10007802C((uint64_t)v25, (uint64_t)v30 + v26[6], type metadata accessor for LocationViewModel);
  v36 = *(_OWORD *)(a1 + 24);
  v37 = (uint64_t)v30;
  *(_OWORD *)((char *)v30 + v26[7]) = v36;
  v38 = (_QWORD *)((char *)v30 + v26[8]);
  v84 = v37;
  swift_unknownObjectRetain(v36);
  swift_retain();
  swift_retain();
  v39 = sub_1000BA294((uint64_t *)&unk_100C0A200);
  sub_10007AB60((uint64_t)&unk_100BC4620);
  v41 = v40;
  *v38 = ObservedObject.init(wrappedValue:)(v32, v39, v40);
  v38[1] = v42;
  *(_QWORD *)(v37 + v26[9]) = v33;
  swift_retain();
  v43 = v101;
  sub_10008D488();
  swift_release(v31);
  v44 = (_QWORD *)(v43 + *(int *)(v83 + 20));
  swift_retain();
  *v44 = ObservedObject.init(wrappedValue:)(v45, v39, v41);
  v44[1] = v46;
  swift_retain();
  sub_10008D488();
  swift_release(v31);
  v47 = (int *)v15;
  v48 = *(int *)(v15 + 20);
  v49 = v18;
  v82 = v18;
  v50 = &v18[v48];
  v51 = v85;
  v52 = v86;
  *(_QWORD *)v50 = v85;
  *((_QWORD *)v50 + 1) = v52;
  v53 = v88 & 1;
  v50[16] = v88 & 1;
  v54 = v89;
  v55 = v90;
  *((_QWORD *)v50 + 3) = v89;
  v56 = &v49[*(int *)(v15 + 24)];
  v57 = v91;
  v58 = v92;
  v59 = v93;
  v60 = v94;
  *(_QWORD *)v56 = v92;
  *((_QWORD *)v56 + 1) = v60;
  LOBYTE(v44) = v96 & 1;
  v56[16] = v96 & 1;
  v61 = v87;
  *((_QWORD *)v56 + 3) = v87;
  v62 = (uint64_t *)&v49[v47[7]];
  *v62 = v55;
  v62[1] = v57;
  v63 = v95;
  v62[2] = v59;
  v62[3] = v63;
  v96 = &v49[v47[8]];
  sub_1000D55D4(v51, v52, v53);
  swift_bridgeObjectRetain(v54);
  sub_1000D55D4(v58, v60, (char)v44);
  swift_bridgeObjectRetain(v61);
  v64.n128_f64[0] = sub_10010F980(v55, v57, v59, v63);
  Text.Measurements.init()(v64);
  v65 = (uint64_t)v82;
  v66 = &v82[v47[9]];
  *(_QWORD *)v66 = swift_getKeyPath(&unk_1009C2128);
  v67 = sub_1000BA294(&qword_100BC37E0);
  swift_storeEnumTagMultiPayload(v66, v67, 0);
  v68 = v65 + v47[10];
  *(_QWORD *)v68 = swift_getKeyPath(&unk_1009C2220);
  *(_OWORD *)(v68 + 8) = 0u;
  *(_OWORD *)(v68 + 24) = 0u;
  *(_OWORD *)(v68 + 40) = 0u;
  *(_OWORD *)(v68 + 56) = 0u;
  *(_BYTE *)(v68 + 72) = 0;
  v69 = v65 + v47[11];
  *(_QWORD *)v69 = swift_getKeyPath(&unk_1009C2150);
  *(_BYTE *)(v69 + 8) = 0;
  v70 = v65 + v47[12];
  *(_QWORD *)v70 = swift_getKeyPath(&unk_1009C21A8);
  *(_QWORD *)(v70 + 8) = 0;
  *(_QWORD *)(v70 + 16) = 0;
  *(_QWORD *)(v70 + 24) = 0;
  *(_BYTE *)(v70 + 32) = 0;
  v71 = (_QWORD *)(v65 + v47[13]);
  *v71 = swift_getKeyPath(&unk_1009C2178);
  v72 = sub_1000BA294(&qword_100BC37D8);
  swift_storeEnumTagMultiPayload(v71, v72, 0);
  v73 = v65 + v47[14];
  *(_QWORD *)v73 = swift_getKeyPath(&unk_1009C2270);
  *(_BYTE *)(v73 + 8) = 0;
  v74 = v99;
  sub_10007802C(v65, v99, type metadata accessor for LocationContentScrollingHeaderView);
  v75 = v84;
  v76 = v97;
  sub_100080C0C(v84, v97, type metadata accessor for LocationViewObserverView);
  v77 = v101;
  v78 = v98;
  sub_100080C0C(v101, v98, type metadata accessor for LocationViewAppEntityView);
  sub_100080C0C(v74, v65, type metadata accessor for LocationContentScrollingHeaderView);
  v79 = v100;
  sub_100080C0C(v76, v100, type metadata accessor for LocationViewObserverView);
  v80 = sub_1000BA294(&qword_100C01000);
  sub_100080C0C(v78, v79 + *(int *)(v80 + 48), type metadata accessor for LocationViewAppEntityView);
  sub_100080C0C(v65, v79 + *(int *)(v80 + 64), type metadata accessor for LocationContentScrollingHeaderView);
  sub_1000215BC(v74, type metadata accessor for LocationContentScrollingHeaderView);
  sub_1000215BC(v77, type metadata accessor for LocationViewAppEntityView);
  sub_1000215BC(v75, type metadata accessor for LocationViewObserverView);
  sub_1000215BC(v65, type metadata accessor for LocationContentScrollingHeaderView);
  sub_1000215BC(v78, type metadata accessor for LocationViewAppEntityView);
  sub_1000215BC(v76, type metadata accessor for LocationViewObserverView);
}

void sub_100705504(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  Swift::String v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[7];
  char v49;
  _BYTE v50[7];
  _BYTE v51[7];
  _BYTE v52[7];
  char v53;
  _BYTE v54[7];
  char v55;
  _QWORD v56[2];
  char v57;
  _BYTE v58[7];
  uint64_t v59;
  char v60;
  _BYTE v61[7];
  uint64_t v62;
  uint64_t v63;
  char v64;
  _BYTE v65[7];
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  char v70;
  _BYTE v71[7];
  uint64_t v72;
  char v73;
  _BYTE v74[7];
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unsigned __int8 v78;
  uint64_t v79;
  unsigned __int8 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;

  v46 = type metadata accessor for Location.Identifier(0);
  v4 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocationViewModel(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Settings.VFX.AnimatedBackgrounds.AnimationKind(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100BC2550 != -1)
    swift_once(&qword_100BC2550, sub_10013AFC0);
  v14 = sub_1000AECD4(v10, (uint64_t)qword_100C00A20);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for Settings.VFX.AnimatedBackgrounds.AnimationKind.vfx(_:), v10);
  LOBYTE(v14) = sub_10011E9F0(v14, (uint64_t)v13);
  v15 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) != 0)
  {
    v45 = a1;
    v44 = static Color.clear.getter(v15);
    static Alignment.center.getter(v44);
    _FrameLayout.init(width:height:alignment:)(0, 1, 0, 0);
    v40 = v77;
    v41 = v79;
    v38 = v80;
    v39 = v78;
    v42 = v82;
    v43 = v81;
    v16 = *(int *)(type metadata accessor for LocationContentView(0) + 68);
    v35 = v7;
    v17 = v47;
    v18 = v47 + v16;
    v19 = *(_QWORD *)v18;
    v20 = *(_BYTE *)(v18 + 8);
    sub_10008D47C(*(_QWORD *)v18, v20);
    sub_100109B54();
    v36 = v21;
    sub_1000B15F8(v19, v20);
    v37 = *(_QWORD *)(v17 + 40);
    v83 = 0x6F6973696C6C6F63;
    v84 = 0xEA00000000002D6ELL;
    v22 = *(_QWORD *)(v17 + 8);
    swift_retain();
    sub_10008D488();
    swift_release(v22);
    v23 = v46;
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v9, v46);
    sub_1000215BC((uint64_t)v9, type metadata accessor for LocationViewModel);
    v25 = Location.Identifier.id.getter(v24);
    v27 = v26;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v23);
    v28._countAndFlagsBits = v25;
    v28._object = v27;
    String.append(_:)(v28);
    swift_bridgeObjectRelease(v27);
    v29 = v83;
    v30 = v84;
    v31 = *(_QWORD *)(v17 + 8);
    swift_retain();
    sub_10008D488();
    swift_release(v31);
    v32 = v9[*(int *)(v35 + 68)];
    sub_1000215BC((uint64_t)v9, type metadata accessor for LocationViewModel);
    KeyPath = swift_getKeyPath(&unk_1009C2430);
    v56[0] = 0;
    State.init(wrappedValue:)(v56, &type metadata for CGFloat);
    v55 = v39;
    v53 = v38;
    v49 = 0;
    v56[0] = v44;
    v56[1] = v40;
    v57 = v39;
    *(_DWORD *)v58 = *(_DWORD *)v54;
    *(_DWORD *)&v58[3] = *(_DWORD *)&v54[3];
    v59 = v41;
    v60 = v38;
    *(_DWORD *)&v61[3] = *(_DWORD *)&v52[3];
    *(_DWORD *)v61 = *(_DWORD *)v52;
    v62 = v43;
    v63 = v42;
    v64 = v36 & 1;
    *(_DWORD *)&v65[3] = *(_DWORD *)&v51[3];
    *(_DWORD *)v65 = *(_DWORD *)v51;
    v66 = v37;
    v67 = v29;
    v68 = v30;
    v69 = a2;
    v70 = v32;
    *(_DWORD *)&v71[3] = *(_DWORD *)&v50[3];
    *(_DWORD *)v71 = *(_DWORD *)v50;
    v72 = KeyPath;
    v73 = 0;
    *(_DWORD *)&v74[3] = *(_DWORD *)&v48[3];
    *(_DWORD *)v74 = *(_DWORD *)v48;
    v75 = v83;
    v76 = v84;
    a1 = v45;
    LocationSearchEntityFromStringResolver.init()();
  }
  else
  {
    sub_1006CDB74(v56);
  }
  sub_1000787D4((uint64_t)v56, (uint64_t)&v83, &qword_100C00E00);
  sub_1000787D4((uint64_t)&v83, a1, &qword_100C00E00);
}

uint64_t sub_10070592C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  __int128 v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  char v28;
  double v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  double v38;
  _OWORD v39[3];
  char v40;
  _BYTE v41[64];

  v1 = v0;
  v2 = type metadata accessor for LocationContentView(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v35[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v35[-1] - v7;
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v35[-1] - v10;
  v12 = v0 + *(int *)(v9 + 76);
  v13 = *(_QWORD *)v12;
  v14 = *(_QWORD *)(v12 + 8);
  v15 = *(unsigned __int8 *)(v12 + 16);
  v16 = type metadata accessor for SceneResizeMonitor();
  sub_10007A100((uint64_t)&unk_100C00C90);
  v18 = v17;
  v19 = StateObject.wrappedValue.getter(v13, v14, v15, v16, v17);
  v20 = *(double *)(v19 + 16);
  swift_release(v19);
  v21 = v1 + *(int *)(v2 + 72);
  v22 = *(_OWORD *)(v21 + 16);
  v39[0] = *(_OWORD *)v21;
  v39[1] = v22;
  v39[2] = *(_OWORD *)(v21 + 32);
  v40 = *(_BYTE *)(v21 + 48);
  sub_1000787D4((uint64_t)v39, (uint64_t)v41, &qword_100BC39C8);
  sub_100116E3C((uint64_t)v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000D55F0);
  sub_100116E74();
  sub_100116E3C((uint64_t)v39, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000D31D0);
  v23 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  UIApplication.expectedWindow.getter(v35);

  v24 = v36;
  v25 = v37;
  sub_1000DB418(v35, v36);
  v26 = (void *)dispatch thunk of WindowType.traitCollection.getter(v24, v25);
  v27 = objc_msgSend(v26, "horizontalSizeClass");

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v35);
  sub_100080C0C(v1, (uint64_t)v11, type metadata accessor for LocationContentView);
  if (v27 != (id)1)
  {
    v29 = v38;
    sub_100080C0C((uint64_t)v11, (uint64_t)v8, type metadata accessor for LocationContentView);
    if (v20 == v29)
    {
      v30 = StateObject.wrappedValue.getter(*(_QWORD *)&v8[*(int *)(v2 + 76)], *(_QWORD *)&v8[*(int *)(v2 + 76) + 8], v8[*(int *)(v2 + 76) + 16], v16, v18);
      v31 = sub_100707D78();
      swift_release(v30);
      sub_1000215BC((uint64_t)v8, type metadata accessor for LocationContentView);
      sub_100080C0C((uint64_t)v11, (uint64_t)v5, type metadata accessor for LocationContentView);
      if ((v31 & 1) == 0)
      {
        sub_1000215BC((uint64_t)v11, type metadata accessor for LocationContentView);
        v28 = 1;
        goto LABEL_8;
      }
    }
    else
    {
      sub_1000215BC((uint64_t)v8, type metadata accessor for LocationContentView);
      sub_100080C0C((uint64_t)v11, (uint64_t)v5, type metadata accessor for LocationContentView);
    }
    v32 = StateObject.wrappedValue.getter(*(_QWORD *)&v5[*(int *)(v2 + 76)], *(_QWORD *)&v5[*(int *)(v2 + 76) + 8], v5[*(int *)(v2 + 76) + 16], v16, v18);
    sub_1000215BC((uint64_t)v11, type metadata accessor for LocationContentView);
    v28 = sub_100707DB4();
    swift_release(v32);
    goto LABEL_8;
  }
  v28 = 0;
  v5 = v11;
LABEL_8:
  sub_1000215BC((uint64_t)v5, type metadata accessor for LocationContentView);
  return v28 & 1;
}

void sub_100705C58(uint64_t a1@<X8>, double a2@<D0>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v3 = v2;
  v43 = a1;
  v5 = sub_1000BA294(&qword_100BCD690);
  __chkstk_darwin(v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for LocationViewModel(0);
  __chkstk_darwin(v42);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocationFooterViewModel(0);
  v11 = __chkstk_darwin(v10);
  v41 = (uint64_t)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v40 = (uint64_t)&v40 - v13;
  v14 = sub_1000BA294(&qword_100C00EA8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v40 - v18;
  v20 = sub_1000BA294(&qword_100C00EB0);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v40 - v25;
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v40 - v28;
  *(_QWORD *)v26 = static VerticalAlignment.center.getter(v27);
  *((_QWORD *)v26 + 1) = 0;
  v26[16] = 1;
  v30 = sub_1000BA294(&qword_100C00EB8);
  sub_100706ECC(v3, (uint64_t)&v26[*(int *)(v30 + 44)], a2);
  sub_1000787D4((uint64_t)v26, (uint64_t)v29, &qword_100C00EB0);
  v31 = v3[1];
  swift_retain();
  sub_10008D488();
  swift_release(v31);
  sub_100037768((uint64_t)&v9[*(int *)(v42 + 36)], (uint64_t)v7, &qword_100BCD690);
  sub_1000215BC((uint64_t)v9, type metadata accessor for LocationViewModel);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v10) == 1)
  {
    sub_100021A14((uint64_t)v7, &qword_100BCD690);
    v32 = type metadata accessor for LocationFooterView(0);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v19, 1, 1, v32);
  }
  else
  {
    v33 = v40;
    sub_10007802C((uint64_t)v7, v40, type metadata accessor for LocationFooterViewModel);
    v34 = v33;
    v35 = v41;
    sub_10007802C(v34, v41, type metadata accessor for LocationFooterViewModel);
    v36 = v3[3];
    sub_1002E90F0(v35, v36, v3[4], (uint64_t)v19);
    v37 = type metadata accessor for LocationFooterView(0);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v19, 0, 1, v37);
    swift_unknownObjectRetain(v36);
  }
  sub_100037768((uint64_t)v29, (uint64_t)v23, &qword_100C00EB0);
  sub_100037768((uint64_t)v19, (uint64_t)v17, &qword_100C00EA8);
  v38 = v43;
  sub_100037768((uint64_t)v23, v43, &qword_100C00EB0);
  v39 = sub_1000BA294(&qword_100C00EC0);
  sub_100037768((uint64_t)v17, v38 + *(int *)(v39 + 48), &qword_100C00EA8);
  sub_100021A14((uint64_t)v19, &qword_100C00EA8);
  sub_100021A14((uint64_t)v29, &qword_100C00EB0);
  sub_100021A14((uint64_t)v17, &qword_100C00EA8);
  sub_100021A14((uint64_t)v23, &qword_100C00EB0);
}

void sub_100706010(_QWORD *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v57 = a2;
  v5 = sub_1000BA294(&qword_100BCD690);
  __chkstk_darwin(v5);
  v54 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for LocationViewModel(0);
  __chkstk_darwin(v52);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for LocationFooterViewModel(0);
  v9 = __chkstk_darwin(v53);
  v51 = (uint64_t)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v50 = (uint64_t)&v50 - v11;
  v12 = sub_1000BA294(&qword_100C00EA8);
  v13 = __chkstk_darwin(v12);
  v56 = (uint64_t)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v55 = (uint64_t)&v50 - v15;
  v16 = type metadata accessor for LocationContentView(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  __chkstk_darwin(v16);
  v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (int *)sub_1000BA294(&qword_100C00EF8);
  v21 = __chkstk_darwin(v20);
  v23 = (uint64_t *)((char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21);
  v25 = (char *)&v50 - v24;
  v26 = sub_100033A6C();
  sub_100080C0C((uint64_t)a1, (uint64_t)v19, type metadata accessor for LocationContentView);
  v27 = *(unsigned __int8 *)(v17 + 80);
  v28 = (v27 + 16) & ~v27;
  v29 = (v18 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v30 = swift_allocObject(&unk_100B8BEF0, v29 + 8, v27 | 7);
  sub_10007802C((uint64_t)v19, v30 + v28, type metadata accessor for LocationContentView);
  *(double *)(v30 + v29) = a3;
  *v23 = v26;
  v23[1] = sub_10070E5E0;
  v23[2] = v30;
  v31 = (_QWORD *)((char *)v23 + v20[10]);
  *v31 = swift_getKeyPath(&unk_1009C2128);
  v32 = sub_1000BA294(&qword_100BC37E0);
  swift_storeEnumTagMultiPayload(v31, v32, 0);
  v33 = (char *)v23 + v20[11];
  *(_QWORD *)v33 = swift_getKeyPath(&unk_1009C2220);
  *(_OWORD *)(v33 + 8) = 0u;
  *(_OWORD *)(v33 + 24) = 0u;
  *(_OWORD *)(v33 + 40) = 0u;
  *(_OWORD *)(v33 + 56) = 0u;
  v33[72] = 0;
  v34 = (char *)v23 + v20[12];
  *(_QWORD *)v34 = swift_getKeyPath(&unk_1009C23B8);
  v34[8] = 0;
  sub_1000787D4((uint64_t)v23, (uint64_t)v25, &qword_100C00EF8);
  v35 = a1[1];
  swift_retain();
  sub_10008D488();
  v36 = v35;
  v37 = (uint64_t)v54;
  swift_release(v36);
  sub_100037768((uint64_t)&v8[*(int *)(v52 + 36)], v37, &qword_100BCD690);
  sub_1000215BC((uint64_t)v8, type metadata accessor for LocationViewModel);
  if (_s7Weather24LocationCompositionStateOwet_0(v37, 1, v53) == 1)
  {
    sub_100021A14(v37, &qword_100BCD690);
    v38 = type metadata accessor for LocationFooterView(0);
    v39 = v55;
    _s7Weather24LocationCompositionStateOwst_0(v55, 1, 1, v38);
  }
  else
  {
    v40 = v37;
    v41 = v50;
    sub_10007802C(v40, v50, type metadata accessor for LocationFooterViewModel);
    v42 = v41;
    v43 = v51;
    sub_10007802C(v42, v51, type metadata accessor for LocationFooterViewModel);
    v45 = a1[3];
    v44 = a1[4];
    v39 = v55;
    sub_1002E90F0(v43, v45, v44, v55);
    v46 = type metadata accessor for LocationFooterView(0);
    _s7Weather24LocationCompositionStateOwst_0(v39, 0, 1, v46);
    swift_unknownObjectRetain(v45);
  }
  sub_100037768((uint64_t)v25, (uint64_t)v23, &qword_100C00EF8);
  v47 = v56;
  sub_100037768(v39, v56, &qword_100C00EA8);
  v48 = v57;
  sub_100037768((uint64_t)v23, v57, &qword_100C00EF8);
  v49 = sub_1000BA294(&qword_100C00F00);
  sub_100037768(v47, v48 + *(int *)(v49 + 48), &qword_100C00EA8);
  sub_100021A14(v39, &qword_100C00EA8);
  sub_100021A14((uint64_t)v25, &qword_100C00EF8);
  sub_100021A14(v47, &qword_100C00EA8);
  sub_100021A14((uint64_t)v23, &qword_100C00EF8);
}

void sub_1007064C8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t KeyPath;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD v122[3];
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;

  v147 = a5;
  v136 = a4;
  v138 = a2;
  v139 = a3;
  v122[1] = sub_1000BA294(&qword_100C00F08);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100088FDC();
  sub_10009511C(v10);
  v122[2] = sub_1000BA294(&qword_100C00F10);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100088FDC();
  sub_10009511C(v12);
  v124 = sub_1000BA294(&qword_100C00F18);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  sub_100088FDC();
  sub_10009511C(v14);
  v125 = sub_1000BA294(&qword_100C00F20);
  sub_1000B42B0();
  __chkstk_darwin(v15);
  sub_100088FDC();
  sub_10009511C(v16);
  v146 = sub_1000BA294(&qword_100C00F28);
  sub_1000B42B0();
  __chkstk_darwin(v17);
  sub_1000986FC();
  v127 = v18;
  sub_10009D2A4();
  __chkstk_darwin(v19);
  sub_100079F7C();
  v130 = v20;
  v21 = sub_10009876C();
  v22 = type metadata accessor for LocationContentView(v21);
  sub_1000B42B0();
  __chkstk_darwin(v23);
  sub_100088FDC();
  v135 = v24;
  v144 = sub_1000BA294(&qword_100C00F30);
  sub_1000B42B0();
  __chkstk_darwin(v25);
  sub_100088FDC();
  v145 = v26;
  v140 = sub_1000BA294(&qword_100C00F38);
  sub_1000B42B0();
  __chkstk_darwin(v27);
  sub_100088FDC();
  v141 = v28;
  v142 = sub_1000BA294(&qword_100C00F40);
  sub_1000B42B0();
  __chkstk_darwin(v29);
  sub_100088FDC();
  v143 = v30;
  v31 = sub_10009876C();
  v134 = type metadata accessor for LocationContentRowHeightModifier(v31);
  sub_1000B42B0();
  __chkstk_darwin(v32);
  sub_100098728();
  v35 = v34 - v33;
  sub_1000BA294(&qword_100C00F48);
  sub_1000B42B0();
  __chkstk_darwin(v36);
  sub_100098728();
  v39 = v38 - v37;
  v40 = sub_1000BA294(&qword_100C00F50);
  sub_1000B42B0();
  __chkstk_darwin(v41);
  sub_100079FBC();
  v131 = sub_1000BA294(&qword_100C00F58);
  sub_1000B42B0();
  __chkstk_darwin(v42);
  sub_100098728();
  v45 = v44 - v43;
  v132 = sub_1000BA294(&qword_100C00F60);
  sub_1000B42B0();
  __chkstk_darwin(v46);
  sub_100098728();
  v49 = v48 - v47;
  v133 = sub_1000BA294(&qword_100C00F68);
  sub_1000B42B0();
  __chkstk_darwin(v50);
  sub_100098728();
  v53 = v52 - v51;
  v137 = sub_1000BA294(&qword_100C00F70);
  sub_1000B42B0();
  v55 = __chkstk_darwin(v54);
  __chkstk_darwin(v55);
  v58 = a1;
  v59 = *(_QWORD *)(a1 + 16);
  if (v59 == 2)
  {
    v60 = (_QWORD *)(v148 + *(int *)(v22 + 80));
    if (*v60)
    {
      v61 = v22;
      type metadata accessor for TipCoordinator(0);
      sub_100094EE4();
      sub_1000BDDA8();
      sub_10009880C();
      if (v149)
      {
        v62 = type metadata accessor for LocationComponentContainerViewModel(0);
        v63 = *(_QWORD *)(v62 - 8);
        v64 = a1 + ((*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80));
        v65 = sub_10002E5A8(v64 + *(int *)(v62 + 20));
        sub_10009880C();
        sub_100080C0C(v148, v135, type metadata accessor for LocationContentView);
        if ((v65 & 1) != 0)
        {
          v66 = 1;
LABEL_10:
          sub_1000215BC(v135, type metadata accessor for LocationContentView);
          sub_1000C6538();
          v96 = v123;
          v98 = v123 + v97;
          *(_QWORD *)v98 = swift_getKeyPath(&unk_1009C2220);
          *(_OWORD *)(v98 + 8) = 0u;
          *(_OWORD *)(v98 + 24) = 0u;
          *(_OWORD *)(v98 + 40) = 0u;
          *(_OWORD *)(v98 + 56) = 0u;
          *(_BYTE *)(v98 + 72) = 0;
          sub_100707A80(v58, v136, v96, a6);
          if ((v66 & 1) != 0)
            v99 = 1.0;
          else
            v99 = 0.0;
          v100 = v126;
          sub_1000BCF38(v96, v126);
          sub_1000C6538();
          *(double *)(v126 + v101) = v99;
          sub_100099298(v96);
          sub_10009EF18();
          if ((v66 & 1) != 0)
            v102 = 12589;
          else
            v102 = 12333;
          v103 = 0xE200000000000000;
          String.append(_:)(*(Swift::String *)&v102);
          v104 = v150;
          v105 = v128;
          sub_1000CE570(v100, v128);
          v106 = (_QWORD *)(v128 + *(int *)(v124 + 52));
          *v106 = v149;
          v106[1] = v104;
          sub_100075DD0(v100);
          KeyPath = swift_getKeyPath(&unk_1009C23E0);
          v108 = v129;
          sub_1000BCF38(v105, v129);
          sub_1000C6538();
          v110 = v129 + v109;
          *(_QWORD *)v110 = KeyPath;
          *(_BYTE *)(v110 + 8) = 0;
          sub_100099298(v105);
          v111 = swift_getKeyPath(&unk_1009C2220);
          v112 = v127;
          sub_1000BCF38(v108, v127);
          v113 = v146;
          v114 = (uint64_t *)(v127 + *(int *)(v146 + 36));
          *v114 = v111;
          sub_10009D7BC((uint64_t)v114);
          sub_100099298(v108);
          sub_1000787D4(v112, v130, &qword_100C00F28);
          sub_1000CE570(v130, v141);
          swift_storeEnumTagMultiPayload(v141, v140, 1);
          v115 = sub_10070E68C();
          v116 = sub_10070E980();
          _ConditionalContent<>.init(storage:)(v141, v137, v113, v115, v116);
          sub_1000BCF38(v143, v145);
          sub_1000916FC(v145, v144);
          v117 = sub_10070EAC4();
          sub_100110574(v117, v118, (uint64_t)&type metadata for Never, v117, (uint64_t)&protocol witness table for Never);
          sub_100099298(v143);
          v95 = v130;
          goto LABEL_17;
        }
        v60 = (_QWORD *)(v135 + *(int *)(v61 + 80));
        if (*v60)
        {
          sub_100094EE4();
          sub_1000BDDA8();
          sub_10009880C();
          v66 = sub_10002E5A8(v64 + *(_QWORD *)(v63 + 72) + *(int *)(v62 + 20));
          sub_10009880C();
          goto LABEL_10;
        }
      }
      else
      {
        __break(1u);
        __break(1u);
      }
    }
    v119 = v60[1];
    v120 = type metadata accessor for ObservableResolver(0);
    sub_10007A100((uint64_t)&qword_100BD0930);
    EnvironmentObject.error()(0, v119, v120, v121);
    __break(1u);
  }
  else
  {
    v130 = v57;
    v135 = (uint64_t)v122 - v56;
    if (v59 == 1)
    {
      type metadata accessor for LocationComponentContainerViewModel(0);
      sub_100095298();
      sub_1007074B0(a1 + v67, 0, v136, v39, a6);
      v68 = swift_getKeyPath(&unk_1009C2220);
      sub_100037768(v39, v6, &qword_100C00F48);
      v69 = (uint64_t *)(v6 + *(int *)(v40 + 36));
      *v69 = v68;
      sub_10009D7BC((uint64_t)v69);
      sub_100021A14(v39, &qword_100C00F48);
      v70 = swift_getKeyPath(&unk_1009C23E0);
      sub_100037768(v6, v45, &qword_100C00F50);
      sub_1000C6538();
      v72 = v45 + v71;
      *(_QWORD *)v72 = v70;
      *(_BYTE *)(v72 + 8) = 1;
      sub_100021A14(v6, &qword_100C00F50);
      v73 = sub_1000BF298();
      sub_100037768(v45, v49, &qword_100C00F58);
      v74 = (uint64_t *)(v49 + *(int *)(v132 + 36));
      *v74 = v73;
      sub_10009D7BC((uint64_t)v74);
      sub_100021A14(v45, &qword_100C00F58);
      v75 = v138;
      v76 = v139;
      *(_QWORD *)v35 = v58;
      *(_QWORD *)(v35 + 8) = v75;
      *(_QWORD *)(v35 + 16) = v76;
      *(_QWORD *)(v35 + 24) = sub_1000BF298();
      *(_OWORD *)(v35 + 32) = 0u;
      *(_OWORD *)(v35 + 48) = 0u;
      *(_OWORD *)(v35 + 64) = 0u;
      *(_OWORD *)(v35 + 80) = 0u;
      *(_BYTE *)(v35 + 96) = 0;
      v77 = (_QWORD *)(v35 + *(int *)(v134 + 24));
      *v77 = swift_getKeyPath(&unk_1009C2178);
      v78 = sub_1000BA294(&qword_100BC37D8);
      sub_1000916FC((uint64_t)v77, v78);
      sub_1000CE570(v49, v53);
      sub_10007802C(v35, v53 + *(int *)(v133 + 36), type metadata accessor for LocationContentRowHeightModifier);
      swift_bridgeObjectRetain(v58);
      sub_1000989F8();
      sub_100075DD0(v49);
      v79 = swift_getKeyPath(&unk_1009C2408);
      v80 = static Alignment.bottom.getter();
      v82 = v81;
      v83 = v130;
      sub_100037768(v53, v130, &qword_100C00F68);
      v84 = v137;
      v85 = (uint64_t *)(v83 + *(int *)(v137 + 36));
      *v85 = v79;
      v85[1] = v80;
      v85[2] = v82;
      sub_100021A14(v53, &qword_100C00F68);
      v86 = v83;
      v87 = v135;
      sub_1000787D4(v86, v135, &qword_100C00F70);
      v88 = v141;
      sub_1000CE570(v87, v141);
      sub_1000916FC(v88, v140);
      v89 = sub_10070E68C();
      v90 = sub_10070E980();
      v91 = v143;
      _ConditionalContent<>.init(storage:)(v88, v84, v146, v89, v90);
      v92 = v145;
      sub_1000BCF38(v91, v145);
      sub_1000916FC(v92, v144);
      v93 = sub_10070EAC4();
      sub_100110574(v93, v94, (uint64_t)&type metadata for Never, v93, (uint64_t)&protocol witness table for Never);
      sub_100099298(v91);
      v95 = v87;
LABEL_17:
      sub_100075DD0(v95);
      return;
    }
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002CLL, 0x8000000100A118B0, "Weather/LocationContentView.swift", 33, 2);
  __break(1u);
}

uint64_t sub_100706ECC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  uint64_t (*v27)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  uint64_t (**v28)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t KeyPath;
  uint64_t v40;

  v36 = a1;
  v5 = type metadata accessor for LocationContentView(0);
  v40 = *(_QWORD *)(v5 - 8);
  v6 = *(_QWORD *)(v40 + 64);
  __chkstk_darwin(v5);
  v7 = sub_1000BA294(&qword_100C00EC8);
  __chkstk_darwin(v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100C00ED0);
  __chkstk_darwin(v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_1000BA294(&qword_100C00ED8);
  v13 = __chkstk_darwin(v38);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v37 = (uint64_t)&v35 - v16;
  KeyPath = swift_getKeyPath(&unk_1009C2220);
  v17 = &v9[*(int *)(v7 + 36)];
  *(_QWORD *)v17 = swift_getKeyPath(&unk_1009C2220);
  *(_OWORD *)(v17 + 8) = 0u;
  *(_OWORD *)(v17 + 24) = 0u;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  v17[72] = 0;
  v18 = v36;
  sub_1007072FC(v36, (uint64_t)v9, a3);
  v19 = swift_getKeyPath(&unk_1009C2220);
  sub_100037768((uint64_t)v9, (uint64_t)v12, &qword_100C00EC8);
  v20 = &v12[*(int *)(v10 + 36)];
  *(_QWORD *)v20 = v19;
  *(_OWORD *)(v20 + 8) = 0u;
  *(_OWORD *)(v20 + 24) = 0u;
  *(_OWORD *)(v20 + 40) = 0u;
  *(_OWORD *)(v20 + 56) = 0u;
  v20[72] = 0;
  sub_100021A14((uint64_t)v9, &qword_100C00EC8);
  sub_100080C0C((uint64_t)v18, (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for LocationContentView);
  v21 = *(unsigned __int8 *)(v40 + 80);
  v22 = (v21 + 16) & ~v21;
  v23 = swift_allocObject(&unk_100B8BE50, v22 + v6, v21 | 7);
  sub_10007802C((uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v23 + v22, type metadata accessor for LocationContentView);
  v25 = static Alignment.center.getter(v24);
  v27 = v26;
  sub_100037768((uint64_t)v12, (uint64_t)v15, &qword_100C00ED0);
  v28 = (uint64_t (**)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))&v15[*(int *)(v38 + 36)];
  *v28 = sub_10070E460;
  v28[1] = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))v23;
  v28[2] = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))v25;
  v28[3] = v27;
  sub_100021A14((uint64_t)v12, &qword_100C00ED0);
  v29 = v37;
  sub_1000787D4((uint64_t)v15, v37, &qword_100C00ED8);
  v30 = swift_getKeyPath(&unk_1009C2220);
  sub_100037768(v29, (uint64_t)v15, &qword_100C00ED8);
  v31 = KeyPath;
  *(_QWORD *)a2 = KeyPath;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_BYTE *)(a2 + 72) = 0;
  v32 = sub_1000BA294(&qword_100C00EE0);
  sub_100037768((uint64_t)v15, a2 + *(int *)(v32 + 48), &qword_100C00ED8);
  v33 = a2 + *(int *)(v32 + 64);
  *(_QWORD *)v33 = v30;
  *(_OWORD *)(v33 + 8) = 0u;
  *(_OWORD *)(v33 + 24) = 0u;
  *(_OWORD *)(v33 + 40) = 0u;
  *(_OWORD *)(v33 + 56) = 0u;
  *(_BYTE *)(v33 + 72) = 0;
  sub_1000D4FF4(v31, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  sub_1000D4FF4(v30, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  sub_100021A14(v29, &qword_100C00ED8);
  sub_1000CEE98(v30, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  sub_100021A14((uint64_t)v15, &qword_100C00ED8);
  return sub_1000CEE98(v31, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

void sub_1007072FC(_QWORD *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20[2];

  v6 = type metadata accessor for DisplayMetrics(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocationViewModel(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[1];
  swift_retain();
  sub_10008D488();
  swift_release(v12);
  v13 = a1[6];
  v14 = a1[17];
  v15 = a1[2];
  v16 = a1[3];
  v17 = a1[4];
  sub_10003B59C((uint64_t)(a1 + 7), (uint64_t)v20);
  type metadata accessor for LocationContentView(0);
  swift_retain();
  swift_retain();
  swift_retain();
  v18 = swift_unknownObjectRetain(v16);
  sub_100117228(v18);
  sub_10065C504((uint64_t)v11, v15, v13, v14, v16, v17, v20, (uint64_t)v8, a2, a3);
}

uint64_t sub_100707454@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  if (*(_QWORD *)(v3 + 16))
  {
    sub_100079B04(v3, a2);
    v4 = 0;
  }
  else
  {
    v4 = 1;
  }
  v5 = sub_1000BA294(&qword_100C00EE8);
  return _s7Weather24LocationCompositionStateOwst_0(a2, v4, 1, v5);
}

void sub_1007074B0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __n128 v35;
  Swift::String v36;
  Swift::String v37;
  void *object;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  _BYTE *v50;
  char v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[4];
  int v65;
  uint64_t v66;
  void (*v67)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v68;
  unint64_t v69;
  int v70;
  _BYTE *v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  _BYTE *v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  unint64_t v84;

  v6 = v5;
  v76 = a3;
  v77 = a2;
  v10 = type metadata accessor for LocationComponentContainerViewModel(0);
  __chkstk_darwin(v10);
  v82 = &v64[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for LocationComponentContainerView(0);
  __chkstk_darwin(v12);
  v75 = &v64[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v74 = sub_1000BA294(&qword_100C00FE8);
  __chkstk_darwin(v74);
  v15 = &v64[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v78 = sub_1000BA294(&qword_100C00F48);
  __chkstk_darwin(v78);
  v79 = &v64[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = type metadata accessor for Location.Identifier(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = &v64[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v73 = type metadata accessor for LocationViewModel(0);
  v21 = __chkstk_darwin(v73);
  v72 = &v64[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = __chkstk_darwin(v21);
  v71 = &v64[-v24];
  __chkstk_darwin(v23);
  v26 = &v64[-v25];
  v27 = (_QWORD *)((char *)v5 + *(int *)(type metadata accessor for LocationContentView(0) + 80));
  v28 = *v27;
  if (!*v27)
    goto LABEL_11;
  v80 = v15;
  v81 = a4;
  v29 = type metadata accessor for TipCoordinator(0);
  swift_retain();
  ObservableResolver.resolve<A>(_:)(v29, v29);
  swift_release(v28);
  v30 = v83;
  if (!v83)
  {
    __break(1u);
LABEL_11:
    v61 = v27[1];
    v62 = type metadata accessor for ObservableResolver(0);
    sub_10007A100((uint64_t)&qword_100BD0930);
    EnvironmentObject.error()(0, v61, v62, v63);
    __break(1u);
    return;
  }
  v70 = sub_10002E5A8(a1 + *(int *)(v10 + 20));
  swift_release(v30);
  v83 = 0;
  v84 = 0xE000000000000000;
  v31 = v6[1];
  swift_retain();
  sub_10008D488();
  swift_release(v31);
  v67 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 16);
  v67(v20, v26, v17);
  sub_1000215BC((uint64_t)v26, type metadata accessor for LocationViewModel);
  sub_10007A100((uint64_t)&qword_100BC3490);
  v32 = dispatch thunk of CustomStringConvertible.description.getter(v17);
  v34 = v33;
  v35 = swift_bridgeObjectRelease(v84);
  v83 = v32;
  v84 = v34;
  (*(void (**)(_BYTE *, uint64_t, __n128))(v18 + 8))(v20, v17, v35);
  v36._countAndFlagsBits = 45;
  v36._object = (void *)0xE100000000000000;
  String.append(_:)(v36);
  sub_100080E74();
  object = v37._object;
  String.append(_:)(v37);
  swift_bridgeObjectRelease(object);
  v68 = v83;
  v69 = v84;
  sub_100080C0C(a1, (uint64_t)v82, type metadata accessor for LocationComponentContainerViewModel);
  v39 = v6[3];
  v66 = v6[4];
  v40 = v6[6];
  v41 = v6[17];
  sub_10003B59C((uint64_t)(v6 + 7), (uint64_t)&v83);
  v42 = v6[1];
  swift_unknownObjectRetain(v39);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10008D488();
  swift_release(v42);
  v43 = v73;
  v65 = v26[*(int *)(v73 + 68)];
  sub_1000215BC((uint64_t)v26, type metadata accessor for LocationViewModel);
  v44 = v6[1];
  swift_retain();
  v45 = (uint64_t)v71;
  sub_10008D488();
  swift_release(v44);
  v67(v20, (_BYTE *)v45, v17);
  sub_1000215BC(v45, type metadata accessor for LocationViewModel);
  v46 = v6[1];
  v47 = v6[2];
  swift_retain();
  swift_retain();
  v48 = (uint64_t)v72;
  sub_10008D488();
  swift_release(v46);
  v49 = *(_BYTE *)(v48 + *(int *)(v43 + 92));
  sub_1000215BC(v48, type metadata accessor for LocationViewModel);
  v50 = v75;
  sub_10042C430((uint64_t)v82, v39, v66, v40, v41, &v83, v65, (uint64_t)v20, (uint64_t)v75, a5, v47, v77, v76, v49);
  v51 = v70;
  if ((v70 & 1) != 0)
    v52 = 1.0;
  else
    v52 = 0.0;
  v53 = (uint64_t)v80;
  sub_100080C0C((uint64_t)v50, (uint64_t)v80, type metadata accessor for LocationComponentContainerView);
  *(double *)(v53 + *(int *)(v74 + 36)) = v52;
  sub_1000215BC((uint64_t)v50, type metadata accessor for LocationComponentContainerView);
  v83 = v68;
  v84 = v69;
  if ((v51 & 1) != 0)
    v54 = 12589;
  else
    v54 = 12333;
  v55 = 0xE200000000000000;
  String.append(_:)(*(Swift::String *)&v54);
  v56 = v83;
  v57 = v84;
  v58 = v81;
  v59 = v79;
  sub_100037768(v53, (uint64_t)v79, &qword_100C00FE8);
  v60 = (uint64_t *)&v59[*(int *)(v78 + 52)];
  *v60 = v56;
  v60[1] = v57;
  sub_100021A14(v53, &qword_100C00FE8);
  sub_1000787D4((uint64_t)v59, v58, &qword_100C00F48);
}

void sub_100707A80(uint64_t a1@<X1>, uint64_t a2@<X4>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v8 = sub_1000BA294(&qword_100C00F48);
  __chkstk_darwin(v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_1000BA294(&qword_100C00FF0);
  v11 = __chkstk_darwin(v41);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v36 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v36 - v16;
  __chkstk_darwin(v15);
  v20 = (char *)&v36 - v19;
  v21 = *(_QWORD *)(a1 + 16);
  if (v21)
  {
    v38 = v18;
    v39 = a3;
    v40 = v21;
    v36 = *(_QWORD *)(type metadata accessor for LocationComponentContainerViewModel(0) - 8);
    v37 = a2;
    v22 = a1 + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
    sub_1007074B0(v22, 0, a2, (uint64_t)v10, a4);
    KeyPath = swift_getKeyPath(&unk_1009C2408);
    v24 = static Alignment.bottomLeading.getter();
    v26 = v25;
    sub_100037768((uint64_t)v10, (uint64_t)v17, &qword_100C00F48);
    v27 = (uint64_t *)&v17[*(int *)(v41 + 36)];
    *v27 = KeyPath;
    v27[1] = v24;
    v27[2] = v26;
    sub_100021A14((uint64_t)v10, &qword_100C00F48);
    sub_1000787D4((uint64_t)v17, (uint64_t)v20, &qword_100C00FF0);
    if (v40 != 1)
    {
      sub_1007074B0(v22 + *(_QWORD *)(v36 + 72), 1, v37, (uint64_t)v10, a4);
      v28 = swift_getKeyPath(&unk_1009C2408);
      v29 = static Alignment.bottomTrailing.getter();
      v31 = v30;
      sub_100037768((uint64_t)v10, (uint64_t)v14, &qword_100C00F48);
      v32 = (uint64_t *)&v14[*(int *)(v41 + 36)];
      *v32 = v28;
      v32[1] = v29;
      v32[2] = v31;
      sub_100021A14((uint64_t)v10, &qword_100C00F48);
      sub_1000787D4((uint64_t)v14, (uint64_t)v17, &qword_100C00FF0);
      sub_100037768((uint64_t)v20, (uint64_t)v14, &qword_100C00FF0);
      v33 = v38;
      sub_100037768((uint64_t)v17, v38, &qword_100C00FF0);
      v34 = v39;
      sub_100037768((uint64_t)v14, v39, &qword_100C00FF0);
      v35 = sub_1000BA294(&qword_100C00FF8);
      sub_100037768(v33, v34 + *(int *)(v35 + 48), &qword_100C00FF0);
      sub_100021A14((uint64_t)v17, &qword_100C00FF0);
      sub_100021A14((uint64_t)v20, &qword_100C00FF0);
      sub_100021A14(v33, &qword_100C00FF0);
      sub_100021A14((uint64_t)v14, &qword_100C00FF0);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_100707D78()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + 24);
  swift_beginAccess(v1 + 32, v3, 0, 0);
  return *(unsigned __int8 *)(v1 + 32);
}

uint64_t sub_100707DB4()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + 32);
  swift_beginAccess(v1 + 32, v3, 0, 0);
  return *(unsigned __int8 *)(v1 + 32);
}

void sub_100707DF0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[7];
  char v24;
  _BYTE __dst[80];

  v5 = sub_1000BA294(&qword_100C014E8);
  __chkstk_darwin(v5);
  v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(__dst, v2, 0x49uLL);
  sub_10071A680((uint64_t)__dst);
  sub_10008CF58();
  sub_10071A680((uint64_t)v2);
  v8 = 1;
  if (v24 == 4)
    v8 = 2;
  if (v24 == 3)
    v9 = 0;
  else
    v9 = v8;
  v23[1] = v9;
  v10 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int);
  v12 = v11;
  v13 = sub_1000BA294(&qword_100C014F0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v7, a1, v13);
  v14 = (uint64_t *)&v7[*(int *)(v5 + 52)];
  *v14 = v10;
  v14[1] = v12;
  if (qword_100BC2518 != -1)
    swift_once(&qword_100BC2518, sub_1007019D4);
  swift_retain();
  swift_retain();
  v15 = sub_1007FE888();
  v17 = v16;
  v19 = v18;
  v21 = v20;
  sub_100037768((uint64_t)v7, a2, &qword_100C014E8);
  v22 = a2 + *(int *)(sub_1000BA294(&qword_100C014F8) + 36);
  *(_BYTE *)v22 = v15 & 1;
  *(_QWORD *)(v22 + 8) = v17;
  *(_QWORD *)(v22 + 16) = v19;
  *(_QWORD *)(v22 + 24) = v21;
  sub_100021A14((uint64_t)v7, &qword_100C014E8);
}

void sub_100707FC0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;
  _BYTE v5[73];

  memcpy(v5, v2, sizeof(v5));
  sub_100707DF0(a1, a2);
}

void sub_100708010(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t KeyPath;
  BOOL v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE v12[80];
  _BYTE __dst[73];

  v5 = sub_1000BA294(&qword_100C014C0);
  __chkstk_darwin(v5);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  KeyPath = swift_getKeyPath(&unk_1009C2270);
  if ((*v2 & 1) != 0)
  {
    v9 = 0;
  }
  else
  {
    memcpy(__dst, v2 + 8, sizeof(__dst));
    sub_10071A3EC((uint64_t)v2, (uint64_t (*)(uint64_t))sub_1000D4FF4);
    sub_10008CF58();
    sub_10071A3EC((uint64_t)v2, (uint64_t (*)(uint64_t))sub_1000CEE98);
    v9 = v12[57] == 4;
  }
  v10 = sub_1000BA294(&qword_100C014C8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, a1, v10);
  v11 = &v7[*(int *)(v5 + 36)];
  *(_QWORD *)v11 = KeyPath;
  v11[8] = v9;
  sub_1000787D4((uint64_t)v7, a2, &qword_100C014C0);
}

void sub_100708140(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;
  _BYTE __dst[81];

  memcpy(__dst, v2, sizeof(__dst));
  sub_100708010(a1, a2);
}

void sub_100708190(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t KeyPath;
  BOOL v9;
  _BOOL8 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  _BYTE __dst[73];

  v5 = sub_1000BA294(&qword_100C014A0);
  __chkstk_darwin(v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1009C3010);
  memcpy(__dst, v2, sizeof(__dst));
  sub_10071A680((uint64_t)v2);
  sub_10008CF58();
  sub_10071A680((uint64_t)v2);
  v9 = (v14 & 7) == 0;
  v10 = (v14 & 7) != 0;
  v11 = sub_1000BA294(&qword_100C014A8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v7, a1, v11);
  v12 = &v7[*(int *)(v5 + 36)];
  *(_QWORD *)v12 = KeyPath;
  *((_QWORD *)v12 + 1) = v10;
  v12[16] = v9;
  sub_1000787D4((uint64_t)v7, a2, &qword_100C014A0);
}

void sub_1007082B4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;
  _BYTE v5[73];

  memcpy(v5, v2, sizeof(v5));
  sub_100708190(a1, a2);
}

void sub_100708304()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = sub_100708390(*v0);
  static Alignment.center.getter(v1);
  sub_100946638();
}

uint64_t sub_100708390(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  int v25;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;

  v2 = type metadata accessor for ContentSizeCategory(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v42 - v7;
  v9 = sub_1000BA294(&qword_100BC4A98);
  __chkstk_darwin(v9);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocationComponentViewModel(0);
  __chkstk_darwin(v12);
  __chkstk_darwin(v13);
  v15 = (char *)&v42 - v14;
  __chkstk_darwin(v16);
  v19 = (char *)&v42 - v18;
  if (*(_QWORD *)(a1 + 16) != 1)
    return 0;
  v44 = v8;
  v45 = v17;
  v42 = v3;
  v43 = v5;
  sub_1001209D0(a1, (uint64_t)v11);
  v20 = type metadata accessor for LocationComponentContainerViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v20) != 1)
  {
    sub_100080C0C((uint64_t)&v11[*(int *)(v20 + 20)], (uint64_t)v15, type metadata accessor for LocationComponentViewModel);
    sub_1000215BC((uint64_t)v11, type metadata accessor for LocationComponentContainerViewModel);
    sub_10007802C((uint64_t)v15, (uint64_t)v19, type metadata accessor for LocationComponentViewModel);
    v21 = v45;
    sub_100080C0C((uint64_t)v19, v45, type metadata accessor for LocationComponentViewModel);
    if (swift_getEnumCaseMultiPayload(v21) == 6)
    {
      type metadata accessor for LocationContentRowHeightModifier(0);
      v22 = v44;
      sub_100109D64();
      v23 = v42;
      v24 = v43;
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v43, v22, v2);
      v25 = (*(uint64_t (**)(char *, uint64_t))(v23 + 88))(v24, v2);
      if (v25 == enum case for ContentSizeCategory.extraSmall(_:)
        || v25 == enum case for ContentSizeCategory.small(_:)
        || v25 == enum case for ContentSizeCategory.medium(_:)
        || v25 == enum case for ContentSizeCategory.large(_:)
        || v25 == enum case for ContentSizeCategory.extraLarge(_:)
        || v25 == enum case for ContentSizeCategory.extraExtraLarge(_:)
        || v25 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
      {
        (*(void (**)(char *, uint64_t))(v23 + 8))(v22, v2);
LABEL_45:
        sub_100708758();
        v41 = v40;
        sub_1000215BC((uint64_t)v19, type metadata accessor for LocationComponentViewModel);
        v38 = v41;
        sub_1000215BC(v45, type metadata accessor for LocationComponentViewModel);
        return v38;
      }
      v33 = *(void (**)(char *, uint64_t))(v23 + 8);
      if (v25 != enum case for ContentSizeCategory.accessibilityMedium(_:)
        && v25 != enum case for ContentSizeCategory.accessibilityLarge(_:)
        && v25 != enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
        && v25 != enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
        && v25 != enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        v33(v24, v2);
        v33(v22, v2);
        goto LABEL_45;
      }
      v33(v22, v2);
      sub_1000215BC((uint64_t)v19, type metadata accessor for LocationComponentViewModel);
      v32 = v45;
    }
    else
    {
      sub_1000215BC((uint64_t)v19, type metadata accessor for LocationComponentViewModel);
      v32 = v21;
    }
    sub_1000215BC(v32, type metadata accessor for LocationComponentViewModel);
    return 0;
  }
  sub_100021A14((uint64_t)v11, &qword_100BC4A98);
  return 0;
}

void sub_100708758()
{
  uint64_t v0;
  _BYTE __dst[80];

  memcpy(__dst, (const void *)(v0 + 24), 0x49uLL);
  sub_10071A680((uint64_t)__dst);
  sub_10008CF58();
  sub_10071A680((uint64_t)__dst);
  sub_10007689C();
  sub_10071A680((uint64_t)__dst);
  sub_10008CF58();
  sub_10071A680((uint64_t)__dst);
}

uint64_t sub_100708820@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t WitnessTable;
  void (*v19)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  char v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE __dst[88];

  v3 = v2;
  v22 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = sub_10071A608();
  v7 = type metadata accessor for _VariadicView.Tree(0, &type metadata for GridLayout, v5, v6);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v21 - v12;
  memcpy(__dst, (const void *)(v2 + *(int *)(a1 + 36)), 0x49uLL);
  sub_10071A680((uint64_t)__dst);
  sub_10008CF58();
  sub_10071A680((uint64_t)__dst);
  v14 = v32;
  v29[0] = static Alignment.center.getter(v15);
  v29[1] = v16;
  v29[2] = v14;
  v30 = 0;
  v31 = v14;
  LOBYTE(v32) = 0;
  v17 = *(_QWORD *)(a1 + 24);
  v24 = v5;
  v25 = v17;
  v26 = v3;
  _VariadicView.Tree.init(_:content:)(v29, sub_10071B184, v23, &type metadata for GridLayout, v5, v6);
  v27 = sub_10071A644();
  v28 = v17;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> _VariadicView.Tree<A, B>, v7);
  sub_1000B2074(v10, v7, WitnessTable);
  v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  v19(v10, v7);
  sub_1000B1100((uint64_t)v13, v7, v22);
  return ((uint64_t (*)(char *, uint64_t))v19)(v13, v7);
}

uint64_t sub_1007089EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t WitnessTable;
  void (*v19)(_BYTE *, uint64_t);
  _BYTE v21[16];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE __dst[80];

  v3 = v2;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = type metadata accessor for HStack(0, v6, v7);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v14 = &v21[-v13];
  memcpy(__dst, (const void *)(v3 + *(int *)(a1 + 36)), 0x49uLL);
  sub_10071A680((uint64_t)__dst);
  sub_10008CF58();
  sub_10071A680((uint64_t)__dst);
  v15 = v25;
  v22 = v6;
  v23 = v7;
  v24 = v3;
  v17 = static VerticalAlignment.center.getter(v16);
  HStack.init(alignment:spacing:content:)(v17, v15, 0, sub_10071A438, v21, v6, v7);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v8);
  sub_1000B2074(v11, v8, WitnessTable);
  v19 = *(void (**)(_BYTE *, uint64_t))(v9 + 8);
  v19(v11, v8);
  sub_1000B1100((uint64_t)v14, v8, a2);
  return ((uint64_t (*)(_BYTE *, uint64_t))v19)(v14, v8);
}

void sub_100708B64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  sub_100079FBC();
  sub_1000B2074(v7, v8, v9);
  sub_1000B1100(v3, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, a2);
  sub_10004A2A0();
}

uint64_t sub_100708BDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  char *v3;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t WitnessTable;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE __dst[80];

  v3 = v2;
  v61 = a2;
  v52 = type metadata accessor for PinnedScrollableViews(0);
  v51 = *(_QWORD *)(v52 - 8);
  v5 = __chkstk_darwin(v52);
  v53 = (uint64_t)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = type metadata accessor for LazyVStack(0, v7, v8, v5);
  v54 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v55 = (uint64_t)&v48 - v13;
  v57 = v7;
  v56 = v8;
  v14 = type metadata accessor for VStack(0, v7, v8);
  v49 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v50 = (uint64_t)&v48 - v18;
  v60 = type metadata accessor for _ConditionalContent(0, v14, v9);
  v59 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v58 = (char *)&v48 - v19;
  memcpy(__dst, &v3[*(int *)(a1 + 48)], 0x49uLL);
  sub_10071A680((uint64_t)__dst);
  sub_10008CF58();
  sub_10071A680((uint64_t)__dst);
  v20 = v64;
  v21 = &v3[*(int *)(a1 + 44)];
  v22 = *(_QWORD *)v21;
  v23 = v21[8];
  sub_10008D47C(*(_QWORD *)v21, v23);
  sub_100109B54();
  v25 = v24;
  sub_1000B15F8(v22, v23);
  v26 = *(_QWORD *)v3;
  if ((v25 & 1) != 0)
  {
    VStack.init(alignment:spacing:content:)(*(_QWORD *)v3, v20, 0, *(_QWORD *)&v3[*(int *)(a1 + 40)], *(_QWORD *)&v3[*(int *)(a1 + 40) + 8], v57, v56);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v14);
    v28 = v50;
    sub_1000B2074(v16, v14, WitnessTable);
    v29 = *(void (**)(char *, uint64_t))(v49 + 8);
    v29(v16, v14);
    sub_1000B1100(v28, v14, (uint64_t)v16);
    v30 = swift_getWitnessTable(&protocol conformance descriptor for LazyVStack<A>, v9);
    v31 = (uint64_t)v58;
    sub_1001589C0((uint64_t)v16, v14, v9, WitnessTable, v30, v32, v33, v34, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57);
    v29(v16, v14);
    v35 = v28;
    v36 = v14;
  }
  else
  {
    v37 = v53;
    (*(void (**)(uint64_t, char *, uint64_t))(v51 + 16))(v53, &v3[*(int *)(a1 + 36)], v52);
    LazyVStack.init(alignment:spacing:pinnedViews:content:)(v26, v20, 0, v37, *(_QWORD *)&v3[*(int *)(a1 + 40)], *(_QWORD *)&v3[*(int *)(a1 + 40) + 8], v57, v56);
    v38 = swift_getWitnessTable(&protocol conformance descriptor for LazyVStack<A>, v9);
    v39 = v55;
    sub_1000B2074(v11, v9, v38);
    v29 = *(void (**)(char *, uint64_t))(v54 + 8);
    v29(v11, v9);
    sub_1000B1100(v39, v9, (uint64_t)v11);
    v40 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v14);
    v31 = (uint64_t)v58;
    sub_1000B20B0((uint64_t)v11, v14, v9, v40, v38, v41, v42, v43, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57);
    v29(v11, v9);
    v35 = v39;
    v36 = v9;
  }
  v29((char *)v35, v36);
  v44 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v14);
  v45 = swift_getWitnessTable(&protocol conformance descriptor for LazyVStack<A>, v9);
  v62 = v44;
  v63 = v45;
  v46 = v60;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v60);
  sub_1000B1100(v31, v46, v61);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 8))(v31, v46);
}

double sub_100709090@<D0>(uint64_t a1@<X8>)
{
  const void *v1;
  uint64_t v3;
  double result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  _BYTE __dst[73];

  memcpy(__dst, v1, sizeof(__dst));
  sub_10071A680((uint64_t)v1);
  sub_10008CF58();
  sub_10071A680((uint64_t)v1);
  static Alignment.center.getter(v3);
  ((void (*)(_QWORD, _QWORD, _QWORD, _QWORD))_FrameLayout.init(width:height:alignment:))(0, 1, *((double *)&v9 + 1) + *((double *)&v9 + 1), 0);
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  result = *(double *)&v9;
  *(_OWORD *)(a1 + 48) = v9;
  return result;
}

double sub_100709160@<D0>(uint64_t a1@<X8>)
{
  const void *v1;
  _BYTE v4[73];

  memcpy(v4, v1, sizeof(v4));
  return sub_100709090(a1);
}

void sub_1007091A0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;
  const void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned int v10;
  __n128 v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  double v25[10];
  _BYTE __dst[73];

  v3 = v2;
  v6 = sub_1000BA294(&qword_100C01520);
  __chkstk_darwin(v6);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = static Edge.Set.leading.getter(v9);
  v12 = static Edge.Set.trailing.getter(v11);
  v13 = Edge.Set.init(rawValue:)(0);
  v14 = Edge.Set.init(rawValue:)(v13);
  if (Edge.Set.init(rawValue:)(v14 & v10) != v10)
    v13 = Edge.Set.init(rawValue:)(v13 | v10);
  v15 = Edge.Set.init(rawValue:)(v13);
  if (Edge.Set.init(rawValue:)(v15 & v12) != v12)
    LOBYTE(v13) = Edge.Set.init(rawValue:)(v13 | v12);
  memcpy(__dst, v3, sizeof(__dst));
  sub_10071A680((uint64_t)v3);
  sub_10008CF58();
  sub_10071A680((uint64_t)v3);
  v16 = EdgeInsets.init(_all:)(v25[8]);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v23 = sub_1000BA294(&qword_100C01528);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v8, a1, v23);
  v24 = &v8[*(int *)(v6 + 36)];
  *v24 = v13;
  *((double *)v24 + 1) = v16;
  *((_QWORD *)v24 + 2) = v18;
  *((_QWORD *)v24 + 3) = v20;
  *((_QWORD *)v24 + 4) = v22;
  v24[40] = 0;
  sub_1000787D4((uint64_t)v8, a2, &qword_100C01520);
}

void sub_100709344(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;
  _BYTE v5[73];

  memcpy(v5, v2, sizeof(v5));
  sub_1007091A0(a1, a2);
}

void sub_100709394(uint64_t a1@<X8>)
{
  const void *v1;
  uint64_t v3;
  _BYTE __dst[73];

  memcpy(__dst, v1, sizeof(__dst));
  sub_10071A680((uint64_t)v1);
  sub_10008CF58();
  sub_10071A680((uint64_t)v1);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = 0;
}

void sub_10070940C(uint64_t a1@<X8>)
{
  const void *v1;
  _BYTE v3[73];

  memcpy(v3, v1, sizeof(v3));
  sub_100709394(a1);
}

uint64_t sub_10070944C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;
  uint64_t KeyPath;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  double v11;
  _BYTE __dst[73];

  KeyPath = swift_getKeyPath(&unk_1009C3060);
  memcpy(__dst, v2, sizeof(__dst));
  sub_10071A680((uint64_t)v2);
  sub_10008CF58();
  sub_10071A680((uint64_t)v2);
  sub_10007689C();
  v7 = v6;
  sub_10071A680((uint64_t)v2);
  sub_10008CF58();
  sub_10071A680((uint64_t)v2);
  v8 = sub_1000BA294(&qword_100C01510);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, a1, v8);
  result = sub_1000BA294(&qword_100C01518);
  v10 = a2 + *(int *)(result + 36);
  *(_QWORD *)v10 = KeyPath;
  *(double *)(v10 + 8) = v7 - (v11 + v11);
  *(_BYTE *)(v10 + 16) = 0;
  return result;
}

uint64_t sub_10070956C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;
  _BYTE v6[73];

  memcpy(v6, v2, sizeof(v6));
  return sub_10070944C(a1, a2);
}

void sub_1007095BC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unsigned int v20;
  __n128 v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54[14];
  _BYTE v55[73];

  v3 = (uint64_t)v2;
  v53 = a2;
  v5 = sub_1000BA294(&qword_100C01530);
  __chkstk_darwin(v5);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_1000BA294(&qword_100C01538);
  __chkstk_darwin(v51);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_1000BA294(&qword_100C01540);
  __chkstk_darwin(v52);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v55, v2, sizeof(v55));
  sub_10071A680((uint64_t)v2);
  sub_10008CF58();
  sub_10071A680((uint64_t)v2);
  sub_10007689C();
  v13 = v12;
  sub_10071A680((uint64_t)v2);
  sub_10008CF58();
  sub_10071A680((uint64_t)v2);
  v14 = v13 - (v54[7] + v54[7]);
  sub_10071A680((uint64_t)v2);
  sub_10008CF58();
  sub_10071A680((uint64_t)v2);
  if ((v14 - v54[5]) * 0.5 > 0.0)
    v15 = (v14 - v54[5]) * 0.5;
  else
    v15 = 0.0;
  KeyPath = swift_getKeyPath(&unk_1009C3060);
  v17 = sub_1000BA294(&qword_100C01548);
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v7, a1, v17);
  v19 = &v7[*(int *)(v5 + 36)];
  *(_QWORD *)v19 = KeyPath;
  *((double *)v19 + 1) = v15;
  v19[16] = 0;
  v20 = static Edge.Set.leading.getter(v18);
  v22 = static Edge.Set.trailing.getter(v21);
  v23 = Edge.Set.init(rawValue:)(0);
  v24 = Edge.Set.init(rawValue:)(v23);
  if (Edge.Set.init(rawValue:)(v24 & v20) != v20)
    v23 = Edge.Set.init(rawValue:)(v23 | v20);
  v25 = Edge.Set.init(rawValue:)(v23);
  if (Edge.Set.init(rawValue:)(v25 & v22) != v22)
    LOBYTE(v23) = Edge.Set.init(rawValue:)(v23 | v22);
  sub_10071A680(v3);
  sub_10008CF58();
  sub_10071A680(v3);
  v26 = EdgeInsets.init(_all:)(v54[7]);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  sub_100037768((uint64_t)v7, (uint64_t)v9, &qword_100C01530);
  v33 = &v9[*(int *)(v51 + 36)];
  *v33 = v23;
  *((double *)v33 + 1) = v26;
  *((_QWORD *)v33 + 2) = v28;
  *((_QWORD *)v33 + 3) = v30;
  *((_QWORD *)v33 + 4) = v32;
  v33[40] = 0;
  sub_100021A14((uint64_t)v7, &qword_100C01530);
  sub_10071A680(v3);
  sub_10008CF58();
  sub_10071A680(v3);
  sub_10007689C();
  v35 = v34;
  v37 = static Alignment.center.getter(v36);
  v45 = v37;
  v46 = v38;
  if (v15 > v35)
  {
    v47 = static os_log_type_t.fault.getter(v37, v38, v39, v40, v41, v42, v43, v44);
    v48 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, v48, "Contradictory frame constraints specified.", 42, 2);

  }
  v50 = 0;
  v49 = 1;
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v54, 0, 1, 0, 1, 0, 1, *(_QWORD *)&v15, 0, 0, v49, *(_QWORD *)&v35, v50, v45, v46);
  sub_100037768((uint64_t)v9, (uint64_t)v11, &qword_100C01538);
  memcpy(&v11[*(int *)(v52 + 36)], v54, 0x70uLL);
  sub_100021A14((uint64_t)v9, &qword_100C01538);
  sub_1000787D4((uint64_t)v11, v53, &qword_100C01540);
}

void sub_1007099E4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;
  _BYTE v5[73];

  memcpy(v5, v2, sizeof(v5));
  sub_1007095BC(a1, a2);
}

uint64_t sub_100709A34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  BOOL v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _BYTE __dst[80];

  KeyPath = swift_getKeyPath(&unk_1009C3038);
  v6 = *(_QWORD *)(v2 + 80);
  v7 = *(_BYTE *)(v2 + 88);
  sub_10008D47C(v6, v7);
  sub_100109B54();
  v9 = v8;
  sub_1000B15F8(v6, v7);
  if ((v9 & 1) != 0)
  {
    v10 = 1;
  }
  else
  {
    memcpy(__dst, (const void *)v2, 0x49uLL);
    sub_10071A680((uint64_t)__dst);
    sub_10008CF58();
    sub_10071A680((uint64_t)__dst);
    v10 = sub_1007F9520() <= 162.0;
  }
  v11 = sub_1000BA294(&qword_100C014B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a2, a1, v11);
  result = sub_1000BA294(&qword_100C014B8);
  v13 = a2 + *(int *)(result + 36);
  *(_QWORD *)v13 = KeyPath;
  *(_BYTE *)(v13 + 8) = v10;
  return result;
}

uint64_t sub_100709B54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;
  _BYTE v6[89];

  memcpy(v6, v2, sizeof(v6));
  return sub_100709A34(a1, a2);
}

double sub_100709BA4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;
  _BYTE v6[73];

  memcpy(v6, v2, sizeof(v6));
  return sub_100709C0C(a1, (uint64_t (*)(void))sub_100018ADC, &qword_100C01500, a2);
}

double sub_100709C0C@<D0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  const void *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  double result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE __dst[73];

  memcpy(__dst, v4, sizeof(__dst));
  sub_10071A680((uint64_t)v4);
  sub_10008CF58();
  sub_10071A680((uint64_t)v4);
  v9 = a2();
  v11 = v10;
  static Alignment.center.getter(v9);
  _FrameLayout.init(width:height:alignment:)(v11, 0, 0, 1);
  v12 = sub_1000BA294(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a4, a1, v12);
  v13 = (_OWORD *)(a4 + *(int *)(sub_100079FD4() + 36));
  *v13 = v15;
  v13[1] = v16;
  result = *(double *)&v17;
  v13[2] = v17;
  return result;
}

double sub_100709D08@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;
  _BYTE v6[73];

  memcpy(v6, v2, sizeof(v6));
  return sub_100709C0C(a1, (uint64_t (*)(void))sub_1007F9618, &qword_100C01570, a2);
}

void sub_100709D70(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE __dst[73];

  v5 = sub_1000BA294(&qword_100C014D0);
  __chkstk_darwin(v5);
  v7 = &__dst[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  memcpy(__dst, v2, sizeof(__dst));
  sub_10071A680((uint64_t)v2);
  sub_10008CF58();
  sub_10071A680((uint64_t)v2);
  sub_1007F9618();
  v9 = Double.description.getter(v8);
  v11 = v10;
  v12 = sub_1000BA294(&qword_100C014D8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v7, a1, v12);
  v13 = (uint64_t *)&v7[*(int *)(v5 + 52)];
  *v13 = v9;
  v13[1] = v11;
  if (qword_100BC2518 != -1)
    swift_once(&qword_100BC2518, sub_1007019D4);
  swift_retain();
  swift_retain();
  v14 = sub_1007FE888();
  v16 = v15;
  v18 = v17;
  v20 = v19;
  sub_100037768((uint64_t)v7, a2, &qword_100C014D0);
  v21 = a2 + *(int *)(sub_1000BA294(&qword_100C014E0) + 36);
  *(_BYTE *)v21 = v14 & 1;
  *(_QWORD *)(v21 + 8) = v16;
  *(_QWORD *)(v21 + 16) = v18;
  *(_QWORD *)(v21 + 24) = v20;
  sub_100021A14((uint64_t)v7, &qword_100C014D0);
}

void sub_100709F18(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;
  _BYTE v5[73];

  memcpy(v5, v2, sizeof(v5));
  sub_100709D70(a1, a2);
}

void sub_100709F68(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  int *v35;
  uint64_t v36;
  int v37;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  unsigned __int8 v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  __n128 v90;
  unsigned int v91;
  uint64_t v92;
  int v93;
  int v94;
  unsigned __int8 v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const void *v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  double v111;
  double v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  double v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __n128 v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  int *v147;
  uint64_t v148;
  int *v149;
  char v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  double v154;
  _BYTE v155[152];
  _BYTE v156[80];
  double v157[21];
  _BYTE __dst[88];

  v2 = v1;
  v148 = a1;
  v3 = sub_1000BA294(&qword_100C01600);
  __chkstk_darwin(v3);
  v146 = (uint64_t)&v125 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DisplayMetrics(0);
  __chkstk_darwin(v5);
  v143 = (char *)&v125 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BC39D0);
  __chkstk_darwin(v7);
  v139 = (uint64_t)&v125 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocationHeaderView(0);
  __chkstk_darwin(v9);
  v142 = (uint64_t)&v125 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_1000BA294(&qword_100C01590);
  __chkstk_darwin(v141);
  v145 = (uint64_t)&v125 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v140 = (uint64_t)&v125 - v13;
  __chkstk_darwin(v14);
  v144 = (char *)&v125 - v15;
  v138 = type metadata accessor for ContentSizeCategory(0);
  v16 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v18 = (char *)&v125 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v125 - v20;
  v22 = type metadata accessor for LocationContentTopHeaderView(0);
  __chkstk_darwin(v22);
  v24 = (char *)&v125 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = v25;
  v26 = v2 + v25[13];
  v27 = *(_QWORD *)v26;
  v28 = *(_BYTE *)(v26 + 8);
  sub_10008D47C(*(_QWORD *)v26, v28);
  sub_100109B54();
  v30 = v29;
  v31 = v28;
  v32 = v2;
  sub_1000B15F8(v27, v31);
  sub_100080C0C(v2, (uint64_t)v24, type metadata accessor for LocationContentTopHeaderView);
  if ((v30 & 1) == 0)
  {
    sub_1000215BC((uint64_t)v24, type metadata accessor for LocationContentTopHeaderView);
    goto LABEL_25;
  }
  v33 = type metadata accessor for LocationViewModel(0);
  v34 = v24[*(int *)(v33 + 64)];
  sub_1000215BC((uint64_t)v24, type metadata accessor for LocationContentTopHeaderView);
  if ((v34 & 1) == 0)
  {
LABEL_25:
    v44 = sub_1000BA294(&qword_100C01608);
    _s7Weather24LocationCompositionStateOwst_0(v148, 1, 1, v44);
    return;
  }
  v35 = v147;
  sub_100109D64();
  v36 = v138;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v18, v21, v138);
  v37 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v18, v36);
  if (v37 == enum case for ContentSizeCategory.extraSmall(_:)
    || v37 == enum case for ContentSizeCategory.small(_:)
    || v37 == enum case for ContentSizeCategory.medium(_:)
    || v37 == enum case for ContentSizeCategory.large(_:)
    || v37 == enum case for ContentSizeCategory.extraLarge(_:)
    || v37 == enum case for ContentSizeCategory.extraExtraLarge(_:)
    || v37 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v36);
LABEL_41:
    memcpy(__dst, (const void *)(v2 + v35[10]), 0x49uLL);
    sub_10071A680((uint64_t)__dst);
    sub_10008CF58();
    sub_10071A680((uint64_t)__dst);
    v50 = v157[5] + v157[5];
    goto LABEL_42;
  }
  v45 = *(void (**)(char *, uint64_t))(v16 + 8);
  if (v37 != enum case for ContentSizeCategory.accessibilityMedium(_:)
    && v37 != enum case for ContentSizeCategory.accessibilityLarge(_:)
    && v37 != enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
    && v37 != enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
    && v37 != enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
  {
    v45(v18, v36);
    v45(v21, v36);
    goto LABEL_41;
  }
  v45(v21, v36);
  memcpy(__dst, (const void *)(v2 + v35[10]), 0x49uLL);
  sub_10071A680((uint64_t)__dst);
  sub_10008CF58();
  sub_10071A680((uint64_t)__dst);
  v50 = v157[7];
LABEL_42:
  memcpy(v157, (const void *)(v2 + *(int *)(v33 + 24)), 0xA2uLL);
  v51 = v35[6];
  v52 = v2 + v35[5];
  v53 = *(_QWORD *)v52;
  v127 = *(_QWORD *)(v52 + 8);
  v54 = v127;
  v55 = v35;
  v56 = *(_BYTE *)(v52 + 16);
  v126 = v56;
  v135 = *(_QWORD *)(v52 + 24);
  v57 = *(_QWORD *)(v2 + v51);
  v132 = *(_QWORD *)(v2 + v51 + 8);
  v58 = v132;
  v133 = v57;
  v59 = *(unsigned __int8 *)(v2 + v51 + 16);
  v131 = v59;
  v60 = *(_QWORD *)(v32 + v51 + 24);
  v61 = v55[8];
  v62 = (uint64_t *)(v32 + v55[7]);
  v138 = *v62;
  v137 = v62[1];
  v64 = v62[2];
  v63 = v62[3];
  v136 = v64;
  v125 = v63;
  v129 = v32 + v61;
  v130 = v60;
  v65 = v55[11];
  v134 = v32;
  v66 = v32 + v65;
  v67 = *(_QWORD *)v66;
  v68 = *(_BYTE *)(v66 + 8);
  sub_10003E610((uint64_t)v157);
  v128 = v53;
  sub_1000D55D4(v53, v54, v56);
  v69 = v135;
  swift_bridgeObjectRetain();
  sub_1000D55D4(v57, v58, v59);
  swift_bridgeObjectRetain();
  v70 = v125;
  sub_10010F980(v138, v137, v136, v125);
  sub_10008D47C(v67, v68);
  sub_100109B54();
  v72 = v71;
  sub_1000B15F8(v67, v68);
  v73 = sub_10004EE20(v72 & 1);
  v74 = v53;
  v75 = v127;
  LOBYTE(v59) = v126;
  v76 = Text.font(_:)(v73, v74, v127, v126, v69);
  v78 = v77;
  LOBYTE(v69) = v79;
  v81 = v80;
  swift_release();
  v82 = v69 & 1;
  v83 = type metadata accessor for Text.WritingMode(0);
  v84 = v139;
  _s7Weather24LocationCompositionStateOwst_0(v139, 1, 1, v83);
  Text.Measurements.size(of:in:writingMode:)(v76, v78, v82, v81, v84, INFINITY, INFINITY);
  v86 = v85;
  sub_1000D31B4(v76, v78, v82);
  swift_bridgeObjectRelease();
  sub_100021A14(v84, &qword_100BC39D0);
  v124.n128_u64[1] = v137;
  v124.n128_u64[0] = v138;
  v87 = v142;
  sub_10005EAE4(v157, v128, v75, v59, v135, v133, v132, v131, v142, v86, v50, v130, v124, v136, v70);
  v89 = static Edge.Set.leading.getter(v88);
  v91 = static Edge.Set.trailing.getter(v90);
  v92 = Edge.Set.init(rawValue:)(0);
  v93 = Edge.Set.init(rawValue:)(v92);
  if (Edge.Set.init(rawValue:)(v93 & v89) != v89)
    v92 = Edge.Set.init(rawValue:)(v92 | v89);
  v94 = Edge.Set.init(rawValue:)(v92);
  v95 = Edge.Set.init(rawValue:)(v94 & v91);
  v96 = (uint64_t)v144;
  if (v95 != v91)
    LOBYTE(v92) = Edge.Set.init(rawValue:)(v92 | v91);
  v97 = v134;
  v98 = EdgeInsets.init(_all:)(v50);
  v100 = v99;
  v102 = v101;
  v104 = v103;
  v105 = v140;
  sub_100080C0C(v87, v140, type metadata accessor for LocationHeaderView);
  v106 = v105 + *(int *)(v141 + 36);
  *(_BYTE *)v106 = v92;
  *(double *)(v106 + 8) = v98;
  *(_QWORD *)(v106 + 16) = v100;
  *(_QWORD *)(v106 + 24) = v102;
  *(_QWORD *)(v106 + 32) = v104;
  *(_BYTE *)(v106 + 40) = 0;
  sub_1000215BC(v87, type metadata accessor for LocationHeaderView);
  sub_1000787D4(v105, v96, &qword_100C01590);
  v107 = (const void *)(v97 + v147[10]);
  memcpy(v156, v107, 0x49uLL);
  sub_10071A680((uint64_t)v156);
  sub_10008CF58();
  sub_10071A680((uint64_t)v156);
  v108 = (uint64_t)v143;
  sub_100117228(v109);
  v110 = sub_1007C6ECC(v108);
  sub_1000215BC(v108, type metadata accessor for DisplayMetrics);
  if (qword_100BC25F8 != -1)
    swift_once(&qword_100BC25F8, sub_1007C7118);
  v111 = v110 + *(double *)&qword_100CAF420;
  memcpy(v155, v107, 0x49uLL);
  sub_10071A680((uint64_t)v155);
  sub_10008CF58();
  sub_10071A680((uint64_t)v155);
  v112 = v111 + v154;
  static Alignment.center.getter(v113);
  _FrameLayout.init(width:height:alignment:)(0, 1, *(_QWORD *)&v112, 0);
  v147 = v149;
  v114 = v150;
  v115 = v151;
  v116 = v152;
  v117 = v153;
  v118 = v154;
  v119 = v145;
  sub_100037768(v96, v145, &qword_100C01590);
  v120 = v96;
  v121 = v146;
  sub_100037768(v119, v146, &qword_100C01590);
  v122 = v121 + *(int *)(sub_1000BA294(&qword_100C01610) + 48);
  *(_QWORD *)v122 = 0;
  *(_BYTE *)(v122 + 8) = 1;
  *(_QWORD *)(v122 + 16) = v147;
  *(_BYTE *)(v122 + 24) = v114;
  *(_QWORD *)(v122 + 32) = v115;
  *(_BYTE *)(v122 + 40) = v116;
  *(_QWORD *)(v122 + 48) = v117;
  *(double *)(v122 + 56) = v118;
  sub_100021A14(v120, &qword_100C01590);
  sub_100021A14(v119, &qword_100C01590);
  v123 = sub_1000BA294(&qword_100C01608);
  _s7Weather24LocationCompositionStateOwst_0(v121, 0, 1, v123);
  sub_1000787D4(v121, v148, &qword_100C01600);
}

uint64_t sub_10070A920@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  uint64_t v33;
  int v34;
  BOOL v40;
  uint64_t v41;
  int *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v48;
  uint64_t KeyPath;
  uint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  const void *v54;
  double v55;
  double v56;
  id v57;
  id v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  int v71;
  uint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  __n128 v99;
  unsigned int v100;
  uint64_t v101;
  int v102;
  int v103;
  unsigned __int8 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  double v126;
  uint64_t v127;
  _OWORD *v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  __n128 v133;
  unsigned int v134;
  uint64_t v135;
  int v136;
  int v137;
  uint64_t v138;
  double v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  double v151;
  double v152;
  double v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  __n128 v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  double v195[13];
  __int128 v196;
  __int128 v197;
  __int128 v198;
  _OWORD v199[2];
  char v200;
  double v201[19];
  _BYTE v202[80];
  _BYTE v203[184];

  v194 = a1;
  v2 = sub_1000BA294(&qword_100BC39D0);
  __chkstk_darwin(v2);
  v184 = (uint64_t)&v168 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for LocationHeaderView(0);
  __chkstk_darwin(v4);
  v186 = (uint64_t)&v168 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189 = sub_1000BA294(&qword_100C01590);
  __chkstk_darwin(v189);
  v185 = (uint64_t)&v168 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v187 = (uint64_t)&v168 - v8;
  v192 = sub_1000BA294(&qword_100C01598);
  __chkstk_darwin(v192);
  v188 = (char *)&v168 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = type metadata accessor for LocationHeaderViewLargeText(0);
  __chkstk_darwin(v177);
  v180 = (uint64_t *)((char *)&v168 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v174 = sub_1000BA294(&qword_100C015A0);
  __chkstk_darwin(v174);
  v179 = (uint64_t)&v168 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_1000BA294(&qword_100C015A8);
  __chkstk_darwin(v178);
  v183 = (uint64_t)&v168 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = sub_1000BA294(&qword_100C015B0);
  __chkstk_darwin(v181);
  v175 = (char *)&v168 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = sub_1000BA294(&qword_100C015B8);
  __chkstk_darwin(v191);
  v182 = (uint64_t)&v168 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v176 = (uint64_t)&v168 - v16;
  v17 = type metadata accessor for ContentSizeCategory(0);
  v193 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v19 = (char *)&v168 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (char *)&v168 - v21;
  v23 = sub_1000BA294(&qword_100C015C0);
  __chkstk_darwin(v23);
  v190 = (char *)&v168 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (int *)type metadata accessor for LocationContentScrollingHeaderView(0);
  v26 = v1;
  v27 = v1 + v25[14];
  v28 = *(_QWORD *)v27;
  v29 = *(_BYTE *)(v27 + 8);
  sub_10008D47C(*(_QWORD *)v27, v29);
  sub_100109B54();
  v31 = v30;
  sub_1000B15F8(v28, v29);
  if ((v31 & 1) != 0)
    return _s7Weather24LocationCompositionStateOwst_0(v194, 1, 1, v23);
  v173 = v23;
  sub_100109D64();
  v33 = v193;
  (*(void (**)(char *, char *, uint64_t))(v193 + 16))(v19, v22, v17);
  v34 = (*(uint64_t (**)(char *, uint64_t))(v33 + 88))(v19, v17);
  v40 = v34 == enum case for ContentSizeCategory.extraSmall(_:)
     || v34 == enum case for ContentSizeCategory.small(_:)
     || v34 == enum case for ContentSizeCategory.medium(_:)
     || v34 == enum case for ContentSizeCategory.large(_:)
     || v34 == enum case for ContentSizeCategory.extraLarge(_:)
     || v34 == enum case for ContentSizeCategory.extraExtraLarge(_:)
     || v34 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:);
  v41 = v26;
  v42 = v25;
  v172 = v26;
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v22, v17);
  }
  else
  {
    v43 = *(void (**)(char *, uint64_t))(v33 + 8);
    if (v34 == enum case for ContentSizeCategory.accessibilityMedium(_:)
      || v34 == enum case for ContentSizeCategory.accessibilityLarge(_:)
      || v34 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
      || v34 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
      || v34 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
    {
      v43(v22, v17);
      v48 = type metadata accessor for LocationViewModel(0);
      memcpy(v203, (const void *)(v26 + *(int *)(v48 + 24)), 0xA2uLL);
      KeyPath = swift_getKeyPath(&unk_1009C2150);
      v50 = v180;
      *v180 = KeyPath;
      *((_BYTE *)v50 + 8) = 0;
      v51 = v177;
      v52 = (uint64_t *)((char *)v50 + *(int *)(v177 + 20));
      *v52 = swift_getKeyPath(&unk_1009C30B0);
      v53 = sub_1000BA294(&qword_100BC37E8);
      swift_storeEnumTagMultiPayload(v52, v53, 0);
      memcpy((char *)v50 + *(int *)(v51 + 24), v203, 0xA2uLL);
      v54 = (const void *)(v26 + v42[10]);
      memcpy(v202, v54, 0x49uLL);
      sub_10003E610((uint64_t)v203);
      sub_10071A680((uint64_t)v202);
      sub_10008CF58();
      sub_10071A680((uint64_t)v202);
      sub_10007689C();
      v56 = v55;
      v57 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
      v58 = objc_msgSend(v57, "userInterfaceIdiom");

      if (v58)
      {
        sub_10071A680((uint64_t)v202);
        sub_10008CF58();
        sub_10071A680((uint64_t)v202);
        v60 = v201[7] + v201[7];
      }
      else
      {
        v60 = 32.0;
      }
      v122 = (uint64_t)v188;
      v124 = (uint64_t)v175;
      v123 = v176;
      v125 = v174;
      v126 = v56 - v60;
      static Alignment.leading.getter(v59);
      _FrameLayout.init(width:height:alignment:)(*(_QWORD *)&v126, 0, 0, 1);
      v127 = v179;
      sub_100080C0C((uint64_t)v50, v179, type metadata accessor for LocationHeaderViewLargeText);
      v128 = (_OWORD *)(v127 + *(int *)(v125 + 36));
      v129 = v197;
      *v128 = v196;
      v128[1] = v129;
      v128[2] = v198;
      sub_1000215BC((uint64_t)v50, type metadata accessor for LocationHeaderViewLargeText);
      v130 = v183;
      sub_100037768(v127, v183, &qword_100C015A0);
      *(_WORD *)(v130 + *(int *)(v178 + 36)) = 256;
      sub_100021A14(v127, &qword_100C015A0);
      v132 = static Edge.Set.leading.getter(v131);
      v134 = static Edge.Set.trailing.getter(v133);
      v135 = Edge.Set.init(rawValue:)(0);
      v136 = Edge.Set.init(rawValue:)(v135);
      if (Edge.Set.init(rawValue:)(v136 & v132) != v132)
        v135 = Edge.Set.init(rawValue:)(v135 | v132);
      v137 = Edge.Set.init(rawValue:)(v135);
      if (Edge.Set.init(rawValue:)(v137 & v134) != v134)
        LOBYTE(v135) = Edge.Set.init(rawValue:)(v135 | v134);
      v138 = v189;
      memcpy(v201, v54, 0x49uLL);
      sub_10071A680((uint64_t)v201);
      sub_10008CF58();
      sub_10071A680((uint64_t)v201);
      v139 = EdgeInsets.init(_all:)(v195[7]);
      v141 = v140;
      v143 = v142;
      v145 = v144;
      v146 = v183;
      sub_100037768(v183, v124, &qword_100C015A8);
      v147 = v124 + *(int *)(v181 + 36);
      *(_BYTE *)v147 = v135;
      *(double *)(v147 + 8) = v139;
      *(_QWORD *)(v147 + 16) = v141;
      *(_QWORD *)(v147 + 24) = v143;
      *(_QWORD *)(v147 + 32) = v145;
      *(_BYTE *)(v147 + 40) = 0;
      sub_100021A14(v146, &qword_100C015A8);
      LOBYTE(v146) = static Edge.Set.top.getter(v148);
      v149 = v172 + v42[12];
      v150 = *(_OWORD *)(v149 + 16);
      v199[0] = *(_OWORD *)v149;
      v199[1] = v150;
      v200 = *(_BYTE *)(v149 + 32);
      sub_1000787D4((uint64_t)v199, (uint64_t)v195, &qword_100BC3BB0);
      sub_1001171F4((uint64_t)v195, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000D55E4);
      sub_10011740C();
      v152 = v151;
      sub_1001171F4((uint64_t)v199, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000D31C4);
      v153 = EdgeInsets.init(_all:)(v152);
      v155 = v154;
      v157 = v156;
      v159 = v158;
      v160 = v182;
      sub_100037768(v124, v182, &qword_100C015B0);
      v161 = v191;
      v162 = v160 + *(int *)(v191 + 36);
      *(_BYTE *)v162 = v146;
      *(double *)(v162 + 8) = v153;
      *(_QWORD *)(v162 + 16) = v155;
      *(_QWORD *)(v162 + 24) = v157;
      *(_QWORD *)(v162 + 32) = v159;
      *(_BYTE *)(v162 + 40) = 0;
      sub_100021A14(v124, &qword_100C015B0);
      sub_1000787D4(v160, v123, &qword_100C015B8);
      sub_100037768(v123, v122, &qword_100C015B8);
      swift_storeEnumTagMultiPayload(v122, v192, 0);
      sub_10071A6AC((uint64_t)&unk_100C015C8);
      v164 = v163;
      v165 = sub_10015809C();
      v107 = (uint64_t)v190;
      _ConditionalContent<>.init(storage:)(v122, v161, v138, v164, v165);
      sub_100021A14(v123, &qword_100C015B8);
      v108 = v194;
      goto LABEL_51;
    }
    v43(v19, v17);
    v43(v22, v17);
  }
  v61 = type metadata accessor for LocationViewModel(0);
  memcpy(v203, (const void *)(v26 + *(int *)(v61 + 24)), 0xA2uLL);
  v62 = v25[6];
  v63 = v26 + v25[5];
  v65 = *(_QWORD *)(v63 + 8);
  v174 = *(_QWORD *)v63;
  v64 = v174;
  v170 = v65;
  v171 = v25;
  LODWORD(v181) = *(unsigned __int8 *)(v63 + 16);
  v66 = v41;
  v67 = *(_QWORD *)(v63 + 24);
  v68 = v41 + v62;
  v70 = *(uint64_t **)(v41 + v62);
  v179 = *(_QWORD *)(v41 + v62 + 8);
  v69 = v179;
  v180 = v70;
  v71 = *(unsigned __int8 *)(v41 + v62 + 16);
  LODWORD(v178) = v71;
  v183 = *(_QWORD *)(v68 + 24);
  v72 = v42[8];
  v73 = (uint64_t *)(v66 + v42[7]);
  v193 = *v73;
  v74 = v73[2];
  v182 = v73[1];
  v177 = v74;
  v169 = v73[3];
  v175 = (char *)(v66 + v72);
  v75 = v66 + v42[11];
  v76 = *(_QWORD *)v75;
  v77 = *(_BYTE *)(v75 + 8);
  sub_10003E610((uint64_t)v203);
  v78 = v64;
  v79 = v181;
  sub_1000D55D4(v78, v65, v181);
  v176 = v67;
  swift_bridgeObjectRetain();
  sub_1000D55D4((uint64_t)v70, v69, v71);
  swift_bridgeObjectRetain();
  v80 = v169;
  sub_10010F980(v193, v182, v74, v169);
  sub_10008D47C(v76, v77);
  sub_100109B54();
  LOBYTE(v65) = v81;
  sub_1000B15F8(v76, v77);
  v82 = sub_10004EE20(v65 & 1);
  v83 = v174;
  v84 = v170;
  v85 = Text.font(_:)(v82, v174, v170, v79, v67);
  v87 = v86;
  LOBYTE(v67) = v88;
  v90 = v89;
  swift_release();
  v91 = v67 & 1;
  v92 = type metadata accessor for Text.WritingMode(0);
  v93 = v184;
  _s7Weather24LocationCompositionStateOwst_0(v184, 1, 1, v92);
  Text.Measurements.size(of:in:writingMode:)(v85, v87, v91, v90, v93, INFINITY, INFINITY);
  v95 = v94;
  sub_1000D31B4(v85, v87, v91);
  swift_bridgeObjectRelease();
  sub_100021A14(v93, &qword_100BC39D0);
  memcpy(v202, (const void *)(v172 + v171[10]), 0x49uLL);
  sub_10071A680((uint64_t)v202);
  sub_10008CF58();
  sub_10071A680((uint64_t)v202);
  v167.n128_u64[1] = v182;
  v167.n128_u64[0] = v193;
  v96 = v186;
  sub_10005EAE4(v203, v83, v84, v181, v176, (uint64_t)v180, v179, v178, v186, v95, v201[7], v183, v167, v177, v80);
  v98 = static Edge.Set.leading.getter(v97);
  v100 = static Edge.Set.trailing.getter(v99);
  v101 = Edge.Set.init(rawValue:)(0);
  v102 = Edge.Set.init(rawValue:)(v101);
  if (Edge.Set.init(rawValue:)(v102 & v98) != v98)
    v101 = Edge.Set.init(rawValue:)(v101 | v98);
  v103 = Edge.Set.init(rawValue:)(v101);
  v104 = Edge.Set.init(rawValue:)(v103 & v100);
  v106 = (uint64_t)v188;
  v105 = v189;
  v107 = (uint64_t)v190;
  if (v104 != v100)
    LOBYTE(v101) = Edge.Set.init(rawValue:)(v101 | v100);
  v108 = v194;
  sub_10071A680((uint64_t)v202);
  sub_10008CF58();
  sub_10071A680((uint64_t)v202);
  v109 = EdgeInsets.init(_all:)(v201[7]);
  v111 = v110;
  v113 = v112;
  v115 = v114;
  v116 = v185;
  sub_100080C0C(v96, v185, type metadata accessor for LocationHeaderView);
  v117 = v116 + *(int *)(v105 + 36);
  *(_BYTE *)v117 = v101;
  *(double *)(v117 + 8) = v109;
  *(_QWORD *)(v117 + 16) = v111;
  *(_QWORD *)(v117 + 24) = v113;
  *(_QWORD *)(v117 + 32) = v115;
  *(_BYTE *)(v117 + 40) = 0;
  sub_1000215BC(v96, type metadata accessor for LocationHeaderView);
  v118 = v187;
  sub_1000787D4(v116, v187, &qword_100C01590);
  sub_100037768(v118, v106, &qword_100C01590);
  swift_storeEnumTagMultiPayload(v106, v192, 1);
  sub_10071A6AC((uint64_t)&unk_100C015C8);
  v120 = v119;
  v121 = sub_10015809C();
  _ConditionalContent<>.init(storage:)(v106, v191, v105, v120, v121);
  sub_100021A14(v118, &qword_100C01590);
LABEL_51:
  v166 = v173;
  sub_1000787D4(v107, v108, &qword_100C015C0);
  return _s7Weather24LocationCompositionStateOwst_0(v108, 0, 1, v166);
}

uint64_t sub_10070B6D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t WitnessTable;
  void (*v25)(char *, uint64_t);
  uint64_t KeyPath;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[5];

  v32 = a2;
  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  v28 = (char *)&KeyPath - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100075EB0(&qword_100C01560);
  v30 = v6;
  v7 = *(_QWORD *)(a1 + 16);
  sub_10007AB60((uint64_t)&unk_100C01568);
  v29 = v8;
  v34[0] = v6;
  v34[1] = &type metadata for String;
  v34[2] = v7;
  v34[3] = v8;
  v34[4] = &protocol witness table for String;
  v9 = type metadata accessor for ForEach(0, v34);
  v31 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&KeyPath - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&KeyPath - v13;
  sub_10070B93C(a1);
  sub_100203D40(v15);
  v17 = v16;
  swift_bridgeObjectRelease();
  v34[0] = v17;
  KeyPath = swift_getKeyPath(&unk_1009C3088);
  v18 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v28, v2, a1);
  v19 = *(unsigned __int8 *)(v4 + 80);
  v20 = (v19 + 32) & ~v19;
  v21 = swift_allocObject(&unk_100B8C6D8, v20 + v5, v19 | 7);
  v22 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v21 + 16) = v7;
  *(_QWORD *)(v21 + 24) = v22;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v21 + v20, v18, a1);
  v23 = (_QWORD *)swift_allocObject(&unk_100B8C700, 48, 7);
  v23[2] = v7;
  v23[3] = v22;
  v23[4] = sub_10071A524;
  v23[5] = v21;
  ForEach<>.init(_:id:content:)(v34, KeyPath, sub_10071A5A0, v23, v30, v7, v29, &protocol witness table for String, v22);
  v33 = v22;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v9);
  sub_1000B2074(v11, v9, WitnessTable);
  v25 = *(void (**)(char *, uint64_t))(v31 + 8);
  v25(v11, v9);
  sub_1000B1100((uint64_t)v14, v9, v32);
  return ((uint64_t (*)(char *, uint64_t))v25)(v14, v9);
}

void sub_10070B93C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  _OWORD v3[2];

  v2 = *v1;
  v3[1] = *(_OWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  sub_100046890((uint64_t (*)(_QWORD *, __n128))sub_10071A5C8, (uint64_t)v3, v2);
}

uint64_t sub_10070B994@<X0>(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v7 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v21 - v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v14 + 8))(v15, v16, v17, v18, v11);
  sub_1000B2074(v9, a2, a3);
  v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  v19(v9, a2);
  sub_1000B1100((uint64_t)v13, a2, a4);
  return ((uint64_t (*)(char *, uint64_t))v19)(v13, a2);
}

BOOL sub_10070BA80()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRetain();
  sub_100046A1C();
  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRelease();
  return v1 != 0;
}

uint64_t sub_10070BAE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  _BYTE v19[80];
  _BYTE __dst[80];

  v7 = type metadata accessor for DisplayMetrics(0);
  __chkstk_darwin(v7);
  v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for LocationComponentContainerViewModel(0);
  v11 = type metadata accessor for LocationStackView(0, a3, a4, v10);
  memcpy(__dst, (const void *)(a2 + *(int *)(v11 + 44)), 0x49uLL);
  sub_10071A680((uint64_t)__dst);
  sub_10008CF58();
  sub_10071A680((uint64_t)__dst);
  v12 = v19[57];
  sub_100117228(v13);
  v14 = a2 + *(int *)(v11 + 48);
  v15 = *(_QWORD *)v14;
  LOBYTE(a2) = *(_BYTE *)(v14 + 8);
  sub_10008D47C(*(_QWORD *)v14, a2);
  sub_100109B54();
  LOBYTE(v11) = v16;
  sub_1000B15F8(v15, a2);
  sub_1007C6CEC(v12, (uint64_t)v9, v11 & 1);
  LOBYTE(v15) = v17;
  sub_1000215BC((uint64_t)v9, type metadata accessor for DisplayMetrics);
  return v15 & 1;
}

double sub_10070BC48(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double result;
  _BYTE v6[24];

  v3 = *(_QWORD *)(v1 + 32);
  swift_beginAccess(v3 + 32, v6, 1, 0);
  *(_BYTE *)(v3 + 32) = a1;
  swift_retain();
  sub_1002C5470(v4);
  *(_QWORD *)&result = swift_release(v3).n128_u64[0];
  return result;
}

double sub_10070BC9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  double result;
  uint64_t v5;
  _BYTE v6[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v5 = Strong;
    sub_10070BC48(1);
    *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  }
  return result;
}

uint64_t sub_10070BCF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, __n128);
  __n128 v10;
  uint64_t v12;

  v4 = type metadata accessor for Notification(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *, __n128))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v10 = swift_retain(v8);
  v9(v7, v10);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

_QWORD *sub_10070BD98()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  id v3;

  v1 = v0[5];
  if (v1)
  {
    v2 = (void *)objc_opt_self(NSNotificationCenter);
    swift_unknownObjectRetain(v1);
    v3 = objc_msgSend(v2, "defaultCenter");
    objc_msgSend(v3, "removeObserver:", v1);
    swift_unknownObjectRelease(v1);

  }
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_unknownObjectRelease(v0[5]);
  return v0;
}

uint64_t sub_10070BE2C()
{
  _QWORD *v0;

  v0 = sub_10070BD98();
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t sub_10070BE48(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v73;
  __int128 v75;
  int *v76;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v24 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = a2[2];
    v75 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v75;
    v8 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v8;
    v9 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 80) = v9;
    v10 = v9;
    v11 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v9 - 8);
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain(v75);
    v12 = swift_retain();
    v11(a1 + 56, (uint64_t)(a2 + 7), v10, v12);
    v13 = *(_OWORD *)(a2 + 15);
    *(_OWORD *)(a1 + 120) = v13;
    (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 96, (uint64_t)(a2 + 12));
    v14 = a2[18];
    *(_QWORD *)(a1 + 136) = a2[17];
    LOBYTE(v8) = *((_BYTE *)a2 + 152);
    swift_retain();
    sub_10008D47C(v14, v8);
    *(_QWORD *)(a1 + 144) = v14;
    *(_BYTE *)(a1 + 152) = v8;
    v15 = a3[13];
    v16 = a1 + v15;
    v17 = (uint64_t)a2 + v15;
    v18 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(v17) == 1)
    {
      *(_OWORD *)v16 = *(_OWORD *)v17;
      *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
      *(_BYTE *)(v16 + 17) = *(_BYTE *)(v17 + 17);
      *(_BYTE *)(v16 + 18) = *(_BYTE *)(v17 + 18);
      v19 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v20 = v16 + v19;
      v21 = v17 + v19;
      v22 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
      v23 = 1;
    }
    else
    {
      *(_QWORD *)v16 = *(_QWORD *)v17;
      swift_retain();
      v23 = 0;
    }
    swift_storeEnumTagMultiPayload(v16, v18, v23);
    v25 = a3[14];
    v26 = a1 + v25;
    v27 = (uint64_t)a2 + v25;
    v28 = *(_QWORD *)v27;
    v29 = *(_BYTE *)(v27 + 8);
    sub_10008D47C(*(_QWORD *)v27, v29);
    *(_QWORD *)v26 = v28;
    *(_BYTE *)(v26 + 8) = v29;
    v30 = a3[15];
    v31 = (_QWORD *)(a1 + v30);
    v32 = (uint64_t *)((char *)a2 + v30);
    v33 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v32) == 1)
    {
      v34 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v31, v32, v34);
      v35 = 1;
    }
    else
    {
      *v31 = *v32;
      swift_retain();
      v35 = 0;
    }
    swift_storeEnumTagMultiPayload(v31, v33, v35);
    v36 = a3[16];
    v37 = a1 + v36;
    v38 = (uint64_t)a2 + v36;
    v39 = *(_QWORD *)v38;
    v40 = *(_QWORD *)(v38 + 8);
    v41 = *(_QWORD *)(v38 + 16);
    v42 = *(_QWORD *)(v38 + 24);
    v43 = *(_BYTE *)(v38 + 32);
    sub_1000D55E4(*(_QWORD *)v38, v40, v41, v42, v43);
    *(_QWORD *)v37 = v39;
    *(_QWORD *)(v37 + 8) = v40;
    *(_QWORD *)(v37 + 16) = v41;
    *(_QWORD *)(v37 + 24) = v42;
    *(_BYTE *)(v37 + 32) = v43;
    v44 = a3[17];
    v45 = a1 + v44;
    v46 = (uint64_t)a2 + v44;
    v47 = *(_QWORD *)v46;
    LOBYTE(v40) = *(_BYTE *)(v46 + 8);
    sub_10008D47C(*(_QWORD *)v46, v40);
    *(_QWORD *)v45 = v47;
    *(_BYTE *)(v45 + 8) = v40;
    v48 = a3[18];
    v76 = a3;
    v49 = a1 + v48;
    v50 = (uint64_t)a2 + v48;
    v51 = *(_QWORD *)v50;
    v52 = *(_QWORD *)(v50 + 8);
    v53 = *(_QWORD *)(v50 + 16);
    v54 = *(_QWORD *)(v50 + 24);
    v55 = *(_QWORD *)(v50 + 32);
    v56 = *(_QWORD *)(v50 + 40);
    v57 = *(_BYTE *)(v50 + 48);
    sub_1000D55F0(*(_QWORD *)v50, v52, v53, v54, v55, v56, v57);
    *(_QWORD *)v49 = v51;
    *(_QWORD *)(v49 + 8) = v52;
    *(_QWORD *)(v49 + 16) = v53;
    *(_QWORD *)(v49 + 24) = v54;
    *(_QWORD *)(v49 + 32) = v55;
    *(_QWORD *)(v49 + 40) = v56;
    *(_BYTE *)(v49 + 48) = v57;
    v58 = v76[19];
    v59 = a1 + v58;
    v60 = (uint64_t)a2 + v58;
    v61 = *(_QWORD *)v60;
    v62 = *(_QWORD *)(v60 + 8);
    LOBYTE(v53) = *(_BYTE *)(v60 + 16);
    sub_100037094(*(_QWORD *)v60, v62);
    *(_QWORD *)v59 = v61;
    *(_QWORD *)(v59 + 8) = v62;
    *(_BYTE *)(v59 + 16) = v53;
    v63 = v76[20];
    v64 = v76[21];
    v65 = (_QWORD *)(a1 + v63);
    v66 = (uint64_t *)((char *)a2 + v63);
    v68 = *v66;
    v67 = v66[1];
    *v65 = v68;
    v65[1] = v67;
    v69 = a1 + v64;
    v70 = (uint64_t)a2 + v64;
    v71 = type metadata accessor for Text.Measurements(0);
    v72 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v71 - 8) + 16);
    v73 = swift_retain();
    v72(v69, v70, v71, v73);
  }
  return a1;
}

uint64_t sub_10070C1E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int *v85;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_unknownObjectRetain(v6);
  swift_unknownObjectRelease(v8);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  sub_100094D04((_QWORD *)(a1 + 56), (_QWORD *)(a2 + 56));
  sub_100094D04((_QWORD *)(a1 + 96), (_QWORD *)(a2 + 96));
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_retain();
  swift_release();
  v9 = *(_QWORD *)(a2 + 144);
  LOBYTE(v7) = *(_BYTE *)(a2 + 152);
  sub_10008D47C(v9, v7);
  v10 = *(_QWORD *)(a1 + 144);
  v11 = *(_BYTE *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = v9;
  *(_BYTE *)(a1 + 152) = v7;
  sub_1000B15F8(v10, v11);
  if (a1 != a2)
  {
    v12 = a3[13];
    v13 = a1 + v12;
    v14 = a2 + v12;
    sub_100021A14(a1 + v12, &qword_100BC37E0);
    v15 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(v14) == 1)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
      *(_BYTE *)(v13 + 16) = *(_BYTE *)(v14 + 16);
      *(_BYTE *)(v13 + 17) = *(_BYTE *)(v14 + 17);
      *(_BYTE *)(v13 + 18) = *(_BYTE *)(v14 + 18);
      v16 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v17 = v13 + v16;
      v18 = v14 + v16;
      v19 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
      v20 = 1;
    }
    else
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      swift_retain();
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v15, v20);
  }
  v21 = a3[14];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = *(_QWORD *)v23;
  v25 = *(_BYTE *)(v23 + 8);
  sub_10008D47C(*(_QWORD *)v23, v25);
  v26 = *(_QWORD *)v22;
  v27 = *(_BYTE *)(v22 + 8);
  *(_QWORD *)v22 = v24;
  *(_BYTE *)(v22 + 8) = v25;
  sub_1000B15F8(v26, v27);
  if (a1 != a2)
  {
    v28 = a3[15];
    v29 = (_QWORD *)(a1 + v28);
    v30 = (_QWORD *)(a2 + v28);
    sub_100021A14(a1 + v28, &qword_100BC37D8);
    v31 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v30) == 1)
    {
      v32 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v29, v30, v32);
      v33 = 1;
    }
    else
    {
      *v29 = *v30;
      swift_retain();
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v29, v31, v33);
  }
  v34 = a3[16];
  v35 = a1 + v34;
  v36 = a2 + v34;
  v37 = *(_QWORD *)v36;
  v38 = *(_QWORD *)(v36 + 8);
  v39 = *(_QWORD *)(v36 + 16);
  v40 = *(_QWORD *)(v36 + 24);
  v41 = *(_BYTE *)(v36 + 32);
  sub_1000D55E4(*(_QWORD *)v36, v38, v39, v40, v41);
  v42 = *(_QWORD *)v35;
  v43 = *(_QWORD *)(v35 + 8);
  v44 = *(_QWORD *)(v35 + 16);
  v45 = *(_QWORD *)(v35 + 24);
  v46 = *(_BYTE *)(v35 + 32);
  *(_QWORD *)v35 = v37;
  *(_QWORD *)(v35 + 8) = v38;
  *(_QWORD *)(v35 + 16) = v39;
  *(_QWORD *)(v35 + 24) = v40;
  *(_BYTE *)(v35 + 32) = v41;
  sub_1000D31C4(v42, v43, v44, v45, v46);
  v47 = a3[17];
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = *(_QWORD *)v49;
  LOBYTE(v38) = *(_BYTE *)(v49 + 8);
  sub_10008D47C(*(_QWORD *)v49, v38);
  v51 = *(_QWORD *)v48;
  v52 = *(_BYTE *)(v48 + 8);
  *(_QWORD *)v48 = v50;
  *(_BYTE *)(v48 + 8) = v38;
  sub_1000B15F8(v51, v52);
  v53 = a3[18];
  v85 = a3;
  v54 = a1 + v53;
  v55 = a2 + v53;
  v56 = *(_QWORD *)v55;
  v57 = *(_QWORD *)(v55 + 8);
  v58 = *(_QWORD *)(v55 + 16);
  v59 = *(_QWORD *)(v55 + 24);
  v60 = *(_QWORD *)(v55 + 32);
  v61 = *(_QWORD *)(v55 + 40);
  v62 = *(_BYTE *)(v55 + 48);
  sub_1000D55F0(*(_QWORD *)v55, v57, v58, v59, v60, v61, v62);
  v63 = *(_QWORD *)v54;
  v64 = *(_QWORD *)(v54 + 8);
  v65 = *(_QWORD *)(v54 + 16);
  v66 = *(_QWORD *)(v54 + 24);
  v67 = *(_QWORD *)(v54 + 32);
  v68 = *(_QWORD *)(v54 + 40);
  v69 = *(_BYTE *)(v54 + 48);
  *(_QWORD *)v54 = v56;
  *(_QWORD *)(v54 + 8) = v57;
  *(_QWORD *)(v54 + 16) = v58;
  *(_QWORD *)(v54 + 24) = v59;
  *(_QWORD *)(v54 + 32) = v60;
  *(_QWORD *)(v54 + 40) = v61;
  *(_BYTE *)(v54 + 48) = v62;
  sub_1000D31D0(v63, v64, v65, v66, v67, v68, v69);
  v70 = v85[19];
  v71 = a1 + v70;
  v72 = a2 + v70;
  v73 = *(_QWORD *)v72;
  v74 = *(_QWORD *)(v72 + 8);
  LOBYTE(v58) = *(_BYTE *)(v72 + 16);
  sub_100037094(*(_QWORD *)v72, v74);
  v75 = *(_QWORD *)v71;
  v76 = *(_QWORD *)(v71 + 8);
  *(_QWORD *)v71 = v73;
  *(_QWORD *)(v71 + 8) = v74;
  *(_BYTE *)(v71 + 16) = v58;
  sub_1000BF398(v75, v76);
  v77 = v85[20];
  v78 = a1 + v77;
  v79 = a2 + v77;
  *(_QWORD *)(a1 + v77) = *(_QWORD *)(a2 + v77);
  swift_retain();
  swift_release();
  *(_QWORD *)(v78 + 8) = *(_QWORD *)(v79 + 8);
  v80 = v85[21];
  v81 = a1 + v80;
  v82 = a2 + v80;
  v83 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 24))(v81, v82, v83);
  return a1;
}

uint64_t sub_10070C604(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v7 = *(_OWORD *)(a2 + 16);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v8 = *(_OWORD *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 112);
  v10 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v10;
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v11 = a3[13];
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  v14 = sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(v13) == 1)
  {
    *(_OWORD *)v12 = *(_OWORD *)v13;
    v12[16] = v13[16];
    v12[17] = v13[17];
    v12[18] = v13[18];
    v15 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v16 = &v12[v15];
    v17 = &v13[v15];
    v18 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
    swift_storeEnumTagMultiPayload(v12, v14, 1);
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  v19 = a3[14];
  v20 = a3[15];
  v21 = a1 + v19;
  v22 = a2 + v19;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  v23 = (void *)(a1 + v20);
  v24 = (const void *)(a2 + v20);
  v25 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v24) == 1)
  {
    v26 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v23, v24, v26);
    swift_storeEnumTagMultiPayload(v23, v25, 1);
  }
  else
  {
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  v27 = a3[16];
  v28 = a3[17];
  v29 = a1 + v27;
  v30 = a2 + v27;
  v31 = *(_OWORD *)(v30 + 16);
  *(_OWORD *)v29 = *(_OWORD *)v30;
  *(_OWORD *)(v29 + 16) = v31;
  *(_BYTE *)(v29 + 32) = *(_BYTE *)(v30 + 32);
  v32 = a1 + v28;
  v33 = a2 + v28;
  *(_BYTE *)(v32 + 8) = *(_BYTE *)(v33 + 8);
  *(_QWORD *)v32 = *(_QWORD *)v33;
  v34 = a3[18];
  v35 = a3[19];
  v36 = a1 + v34;
  v37 = a2 + v34;
  v38 = *(_OWORD *)(v37 + 16);
  *(_OWORD *)v36 = *(_OWORD *)v37;
  *(_OWORD *)(v36 + 16) = v38;
  *(_OWORD *)(v36 + 32) = *(_OWORD *)(v37 + 32);
  *(_BYTE *)(v36 + 48) = *(_BYTE *)(v37 + 48);
  v39 = a1 + v35;
  v40 = (__int128 *)(a2 + v35);
  *(_BYTE *)(v39 + 16) = *((_BYTE *)v40 + 16);
  v41 = *v40;
  v42 = a3[20];
  v43 = a3[21];
  v44 = a1 + v43;
  v45 = a2 + v43;
  *(_OWORD *)v39 = v41;
  *(_OWORD *)(a1 + v42) = *(_OWORD *)(a2 + v42);
  v46 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
  return a1;
}

uint64_t sub_10070C874(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_unknownObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + 56));
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + 96));
  v11 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v11;
  v12 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v12;
  swift_release();
  v13 = *(_BYTE *)(a2 + 152);
  v14 = *(_QWORD *)(a1 + 144);
  v15 = *(_BYTE *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = v13;
  sub_1000B15F8(v14, v15);
  if (a1 != a2)
  {
    v16 = a3[13];
    v17 = (char *)(a1 + v16);
    v18 = (char *)(a2 + v16);
    sub_100021A14(a1 + v16, &qword_100BC37E0);
    v19 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(v18) == 1)
    {
      *(_OWORD *)v17 = *(_OWORD *)v18;
      v17[16] = v18[16];
      v17[17] = v18[17];
      v17[18] = v18[18];
      v20 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v21 = &v17[v20];
      v22 = &v18[v20];
      v23 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
      swift_storeEnumTagMultiPayload(v17, v19, 1);
    }
    else
    {
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
  }
  v24 = a3[14];
  v25 = a1 + v24;
  v26 = (uint64_t *)(a2 + v24);
  v27 = *v26;
  LOBYTE(v26) = *((_BYTE *)v26 + 8);
  v28 = *(_QWORD *)v25;
  v29 = *(_BYTE *)(v25 + 8);
  *(_QWORD *)v25 = v27;
  *(_BYTE *)(v25 + 8) = (_BYTE)v26;
  sub_1000B15F8(v28, v29);
  if (a1 != a2)
  {
    v30 = a3[15];
    v31 = (void *)(a1 + v30);
    v32 = (const void *)(a2 + v30);
    sub_100021A14(a1 + v30, &qword_100BC37D8);
    v33 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v32) == 1)
    {
      v34 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v31, v32, v34);
      swift_storeEnumTagMultiPayload(v31, v33, 1);
    }
    else
    {
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
  }
  v35 = a3[16];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = *(_BYTE *)(v37 + 32);
  v39 = *(_QWORD *)v36;
  v40 = *(_QWORD *)(v36 + 8);
  v41 = *(_QWORD *)(v36 + 16);
  v42 = *(_QWORD *)(v36 + 24);
  v43 = *(_BYTE *)(v36 + 32);
  v44 = *(_OWORD *)(v37 + 16);
  *(_OWORD *)v36 = *(_OWORD *)v37;
  *(_OWORD *)(v36 + 16) = v44;
  *(_BYTE *)(v36 + 32) = v38;
  sub_1000D31C4(v39, v40, v41, v42, v43);
  v45 = a3[17];
  v46 = a1 + v45;
  v47 = (uint64_t *)(a2 + v45);
  v48 = *v47;
  LOBYTE(v47) = *((_BYTE *)v47 + 8);
  v49 = *(_QWORD *)v46;
  v50 = *(_BYTE *)(v46 + 8);
  *(_QWORD *)v46 = v48;
  *(_BYTE *)(v46 + 8) = (_BYTE)v47;
  sub_1000B15F8(v49, v50);
  v51 = a3[18];
  v52 = a1 + v51;
  v53 = a2 + v51;
  v54 = *(_BYTE *)(v53 + 48);
  v55 = *(_QWORD *)v52;
  v56 = *(_QWORD *)(v52 + 8);
  v57 = *(_QWORD *)(v52 + 16);
  v58 = *(_QWORD *)(v52 + 24);
  v59 = *(_QWORD *)(v52 + 32);
  v60 = *(_QWORD *)(v52 + 40);
  v61 = *(_BYTE *)(v52 + 48);
  v62 = *(_OWORD *)(v53 + 16);
  *(_OWORD *)v52 = *(_OWORD *)v53;
  *(_OWORD *)(v52 + 16) = v62;
  *(_OWORD *)(v52 + 32) = *(_OWORD *)(v53 + 32);
  *(_BYTE *)(v52 + 48) = v54;
  sub_1000D31D0(v55, v56, v57, v58, v59, v60, v61);
  v63 = a3[19];
  v64 = a1 + v63;
  v65 = a2 + v63;
  v66 = *(_BYTE *)(v65 + 16);
  v67 = *(_QWORD *)v64;
  v68 = *(_QWORD *)(v64 + 8);
  *(_OWORD *)v64 = *(_OWORD *)v65;
  *(_BYTE *)(v64 + 16) = v66;
  sub_1000BF398(v67, v68);
  v69 = a3[20];
  v70 = a1 + v69;
  v71 = a2 + v69;
  *(_QWORD *)(a1 + v69) = *(_QWORD *)(a2 + v69);
  swift_release();
  *(_QWORD *)(v70 + 8) = *(_QWORD *)(v71 + 8);
  v72 = a3[21];
  v73 = a1 + v72;
  v74 = a2 + v72;
  v75 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 40))(v73, v74, v75);
  return a1;
}

uint64_t sub_10070CBD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10070CBE0);
}

void sub_10070CBE0()
{
  uint64_t v0;
  int *v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000B26B8();
  if (v2)
  {
    sub_10003BCA4(*(_QWORD *)(v0 + 8));
    sub_100079F70();
  }
  else
  {
    sub_10009C9D4();
    sub_1000BA294(&qword_100BC3808);
    sub_100088FF0();
    if (v2)
    {
      v3 = v1[13];
    }
    else
    {
      sub_1000BA294((uint64_t *)&unk_100C09CA0);
      sub_100088FF0();
      if (v4)
      {
        v3 = v1[15];
      }
      else
      {
        sub_1000BCF7C();
        v3 = v1[21];
      }
    }
    v5 = sub_10009E5E4(v3);
    sub_1000B250C(v5, v6, v7);
  }
}

uint64_t sub_10070CC64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10070CC70);
}

void sub_10070CC70()
{
  int v0;
  uint64_t v1;
  int *v2;
  int *v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1000993A8();
  if (v4)
  {
    *(_QWORD *)(v1 + 8) = (v0 - 1);
    sub_100079F70();
  }
  else
  {
    v3 = v2;
    sub_1000BA294(&qword_100BC3808);
    sub_10009D2E8();
    if (v4)
    {
      v5 = v3[13];
    }
    else
    {
      sub_1000BA294((uint64_t *)&unk_100C09CA0);
      sub_10009D2E8();
      if (v6)
      {
        v5 = v3[15];
      }
      else
      {
        sub_1000BCF7C();
        v5 = v3[21];
      }
    }
    v7 = sub_100099C94(v5);
    sub_1000987C4(v7, v8, v9, v10);
  }
}

void sub_10070CCF8()
{
  uint64_t v0;

  sub_10011E804();
  v0 = sub_100702CB4();
  sub_1000C0E60(v0);
  sub_10004A298();
}

void sub_10070CD18(char *a1)
{
  sub_10009DF78(*a1, (uint64_t)&_s42LocationContentWantsGridViewEnvironmentKeyVN, (void (*)(void))sub_10070D14C);
  sub_10004A298();
}

void sub_10070CD6C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = static Alignment.center.getter(a1);
  *a2 = v3;
  a2[1] = v4;
  sub_10070CD98(v3, a2 + 2);
}

void sub_10070CD98(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[24];
  _QWORD __src[13];
  _BYTE __dst[97];

  v3 = static Color.clear.getter(a1);
  __src[10] = sub_10067962C;
  __src[11] = 0;
  LOBYTE(__src[12]) = 0;
  __src[0] = sub_1000BA294(&qword_100BC6738);
  if (qword_100BC1F00 != -1)
    swift_once(&qword_100BC1F00, sub_10014C654);
  swift_beginAccess(&xmmword_100CAE588, v5, 0, 0);
  sub_100037768((uint64_t)&xmmword_100CAE588, (uint64_t)__dst, &qword_100BCED50);
  if (*(_QWORD *)&__dst[24])
  {
    sub_10003C800((__int128 *)__dst, (uint64_t)&__src[3]);
    __src[1] = sub_10071A42C;
    __src[2] = 0;
    v4 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
    __src[8] = _swiftEmptyArrayStorage;
    __src[9] = v4;
    memcpy(__dst, __src, sizeof(__dst));
    sub_100037768((uint64_t)__dst, (uint64_t)__src, &qword_100BC66A0);
    *a2 = v3;
    sub_100037768((uint64_t)__src, (uint64_t)(a2 + 1), &qword_100BC66A0);
    swift_retain();
    sub_100021A14((uint64_t)__dst, &qword_100BC66A0);
    sub_100021A14((uint64_t)__src, &qword_100BC66A0);
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

void *sub_10070CEFC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  _BYTE v5[96];

  v3 = sub_1000DB418(a1, a1[3]);
  sub_10070CF54((uint64_t)v5);
  sub_10003B59C(*v3 + 16, a2);
  return memcpy((void *)(a2 + 40), v5, 0x60uLL);
}

void sub_10070CF54(uint64_t a1@<X8>)
{
  void *v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  id v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;

  v2 = (void *)objc_opt_self(NSBundle);
  v3 = objc_msgSend(v2, "mainBundle");
  v17._countAndFlagsBits = 0xD000000000000054;
  v17._object = (void *)0x8000000100A0F790;
  v4._object = (void *)0x8000000100A0F770;
  v4._countAndFlagsBits = 0xD000000000000013;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v17);

  v7 = objc_msgSend(v2, "mainBundle");
  v18._countAndFlagsBits = 0xD000000000000036;
  v18._object = (void *)0x8000000100A11DE0;
  v8._object = (void *)0x8000000100A11D70;
  v8._countAndFlagsBits = 0x100000000000006ALL;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v18);

  v11 = sub_100683E88();
  v13 = v12;
  static Color.white.getter(v11);
  v14 = Color.hex.getter();
  v16 = v15;
  swift_release();
  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0x616C732E69666977;
  *(_QWORD *)(a1 + 16) = 0xEA00000000006873;
  *(Swift::String *)(a1 + 24) = v6;
  *(Swift::String *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v16;
}

void sub_10070D0EC()
{
  uint64_t v0;

  v0 = sub_1000B2F8C();
  sub_1000C0E60(v0);
  sub_10004A298();
}

void sub_10070D108(char *a1)
{
  sub_1000FD984(a1);
  sub_10004A298();
}

uint64_t sub_10070D120()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_10070D144(uint64_t a1)
{
  uint64_t v1;

  return sub_10070BC9C(a1, v1);
}

unint64_t sub_10070D14C()
{
  unint64_t result;

  result = qword_100C00BC8;
  if (!qword_100C00BC8)
  {
    result = swift_getWitnessTable(&unk_1009C2FD4, &_s42LocationContentWantsGridViewEnvironmentKeyVN);
    atomic_store(result, (unint64_t *)&qword_100C00BC8);
  }
  return result;
}

uint64_t sub_10070D188()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10008900C();
  type metadata accessor for LocationContentView(0);
  swift_release();
  sub_10009DA64();
  sub_10011E4AC();
  sub_10011E588();
  sub_1000C1FD4();
  sub_1000EB0F4();
  v0 = sub_1000BA294(&qword_100BC37E0);
  if (sub_100098814(v0) == 1)
  {
    sub_10009E908();
    v1 = sub_1000C1D78();
    sub_1000987E0(v1);
  }
  else
  {
    sub_1000B4394();
  }
  sub_1000D02E8();
  v2 = sub_1000BA294(&qword_100BC37D8);
  if (sub_100098814(v2) == 1)
  {
    v3 = sub_10009EE9C();
    sub_1000987E0(v3);
  }
  else
  {
    sub_1000B4394();
  }
  sub_1000C2F7C();
  v4 = sub_1000BCF7C();
  sub_10003BC44(v4);
  sub_1000DCA38();
  return sub_1000B4380(v5, v6, v7);
}

unint64_t sub_10070D264()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00C28;
  if (!qword_100C00C28)
  {
    v1 = sub_100075EB0(&qword_100C00BD8);
    sub_10007AB60((uint64_t)&unk_100C00C30);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00C28);
  }
  return result;
}

uint64_t sub_10070D2EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10008900C();
  v0 = type metadata accessor for LocationContentView(0);
  sub_1000DB0B4(v0);
  sub_10009DA64();
  sub_10011E4AC();
  sub_10011E588();
  sub_1000C1FD4();
  sub_1000EB0F4();
  v1 = sub_1000BA294(&qword_100BC37E0);
  if (sub_100098814(v1) == 1)
  {
    sub_10009E908();
    v2 = sub_1000C1D78();
    sub_1000987E0(v2);
  }
  else
  {
    sub_1000B4394();
  }
  sub_1000D02E8();
  v3 = sub_1000BA294(&qword_100BC37D8);
  if (sub_100098814(v3) == 1)
  {
    v4 = sub_10009EE9C();
    sub_1000987E0(v4);
  }
  else
  {
    sub_1000B4394();
  }
  sub_1000C2F7C();
  v5 = sub_1000BCF7C();
  sub_10003BC44(v5);
  sub_1000DCA38();
  return sub_1000B4380(v6, v7, v8);
}

uint64_t sub_10070D3A4(uint64_t a1, uint64_t a2)
{
  return sub_10013AF10(a1, a2, (uint64_t (*)(uint64_t))sub_100703E60);
}

unint64_t sub_10070D3B8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  void *v8;

  result = qword_100C00C38;
  if (!qword_100C00C38)
  {
    v1 = sub_100075EB0(&qword_100C00BF0);
    v2 = sub_100075EB0(&qword_100C00BE0);
    v5 = sub_100075EB0(&qword_100C00BD8);
    v6 = &type metadata for Bool;
    v7 = sub_10070D264();
    v8 = &protocol witness table for Bool;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v4 = sub_100116BFC();
    v5 = v2;
    v6 = &type metadata for CGFloat;
    v7 = OpaqueTypeConformance2;
    v8 = (void *)v4;
    swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    sub_10070D4A4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00C38);
  }
  return result;
}

unint64_t sub_10070D4A4()
{
  unint64_t result;

  result = qword_100C00C40;
  if (!qword_100C00C40)
  {
    result = swift_getWitnessTable(&unk_1009C2F84, &type metadata for DetermineLocationComponentHeaderLineLimitModifier);
    atomic_store(result, (unint64_t *)&qword_100C00C40);
  }
  return result;
}

unint64_t sub_10070D4E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00C48;
  if (!qword_100C00C48)
  {
    v1 = sub_100075EB0(&qword_100C00BF8);
    sub_10070D3B8();
    sub_10070D54C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00C48);
  }
  return result;
}

unint64_t sub_10070D54C()
{
  unint64_t result;

  result = qword_100C00C50;
  if (!qword_100C00C50)
  {
    result = swift_getWitnessTable(&unk_1009C2F34, &type metadata for DetermineCompactGridLayoutModifier);
    atomic_store(result, (unint64_t *)&qword_100C00C50);
  }
  return result;
}

unint64_t sub_10070D588()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00C58;
  if (!qword_100C00C58)
  {
    v1 = sub_100075EB0(&qword_100C00C00);
    sub_10070D4E0();
    sub_10070D5F4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00C58);
  }
  return result;
}

unint64_t sub_10070D5F4()
{
  unint64_t result;

  result = qword_100C00C60;
  if (!qword_100C00C60)
  {
    result = swift_getWitnessTable(&unk_1009C2EE4, &type metadata for DetermineWhetherViewsShouldConsiderMapPinnedToTopModifier);
    atomic_store(result, (unint64_t *)&qword_100C00C60);
  }
  return result;
}

unint64_t sub_10070D630()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00C88;
  if (!qword_100C00C88)
  {
    v1 = sub_100075EB0(&qword_100C00C18);
    sub_100156CFC();
    sub_10070D588();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00C88);
  }
  return result;
}

uint64_t type metadata accessor for LocationContentTopHeaderView(uint64_t a1)
{
  return sub_100098190(a1, qword_100C01448, (uint64_t)&nominal type descriptor for LocationContentTopHeaderView);
}

void sub_10070D6B8()
{
  uint64_t v0;

  sub_10011E804();
  v0 = sub_100702CC8();
  sub_1000C0E60(v0);
  sub_10004A298();
}

void sub_10070D6D8(char *a1)
{
  sub_10009DF78(*a1, (uint64_t)&_s42ShouldConsiderMapPinnedToTopEnvironmentKeyVN, (void (*)(void))sub_10070EB88);
  sub_10004A298();
}

unint64_t sub_10070D704()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00CC8;
  if (!qword_100C00CC8)
  {
    v1 = sub_100075EB0(&qword_100C00C98);
    sub_10007AB60((uint64_t)&unk_100C00CD0);
    sub_10070D788();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00CC8);
  }
  return result;
}

unint64_t sub_10070D788()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00CE0;
  if (!qword_100C00CE0)
  {
    v1 = sub_100075EB0(&qword_100C00CE8);
    sub_10070D80C();
    sub_10007AB60((uint64_t)&qword_100BDE2A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00CE0);
  }
  return result;
}

unint64_t sub_10070D80C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00CF0;
  if (!qword_100C00CF0)
  {
    v1 = sub_100075EB0(&qword_100C00CF8);
    sub_10070D890();
    sub_10007AB60((uint64_t)&unk_100BF4560);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00CF0);
  }
  return result;
}

unint64_t sub_10070D890()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_100C00D00;
  if (!qword_100C00D00)
  {
    v1 = sub_100075EB0(&qword_100C00D08);
    v2 = sub_100075EB0(&qword_100C00D10);
    sub_10007AB60((uint64_t)&unk_100C00D18);
    v4[0] = v2;
    v4[1] = v3;
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.scrollIndicators(_:axes:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00D00);
  }
  return result;
}

void sub_10070D944()
{
  uint64_t v0;

  v0 = sub_1001173E4();
  sub_1000C0E60(v0);
  sub_10004A298();
}

void sub_10070D960(char *a1)
{
  sub_1000BE95C(a1);
  sub_10004A298();
}

void sub_10070D978()
{
  sub_10015590C();
  sub_10004A298();
}

uint64_t sub_10070D9A0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_10008900C();
  v1 = (int *)type metadata accessor for LocationContentView(0);
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  sub_1000BEFC8();
  v4 = (((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8;
  v6 = v0 + v5;
  swift_release();
  swift_release();
  swift_unknownObjectRelease(*(_QWORD *)(v6 + 24));
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v6 + 56));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v6 + 96));
  swift_release();
  sub_1000B15F8(*(_QWORD *)(v6 + 144), *(_BYTE *)(v6 + 152));
  v7 = sub_1000BA294(&qword_100BC37E0);
  if (sub_100098814(v7) == 1)
  {
    sub_10009E908();
    v8 = sub_1000C1D78();
    sub_1000987E0(v8);
  }
  else
  {
    sub_1000B4394();
  }
  v9 = (v4 + 39) & 0xFFFFFFFFFFFFFFF8;
  sub_1000BD9E8(v1[14]);
  v10 = sub_1000BA294(&qword_100BC37D8);
  if (sub_100098814(v10) == 1)
  {
    v11 = sub_10009EE9C();
    sub_1000987E0(v11);
  }
  else
  {
    sub_1000B4394();
  }
  v12 = v6 + v1[16];
  sub_1000D31C4(*(_QWORD *)v12, *(_QWORD *)(v12 + 8), *(_QWORD *)(v12 + 16), *(_QWORD *)(v12 + 24), *(_BYTE *)(v12 + 32));
  sub_1000BD9E8(v1[17]);
  v13 = v6 + v1[18];
  sub_1000D31D0(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_QWORD *)(v13 + 16), *(_QWORD *)(v13 + 24), *(_QWORD *)(v13 + 32), *(_QWORD *)(v13 + 40), *(_BYTE *)(v13 + 48));
  sub_1000BF398(*(_QWORD *)(v6 + v1[19]), *(_QWORD *)(v6 + v1[19] + 8));
  swift_release();
  v14 = sub_1000BCF7C();
  sub_10003BC44(v14);
  sub_1000CF9E0();
  sub_1000CF9E0();
  if (*(_QWORD *)(v0 + v9 + 24))
    sub_1000CF9E0();
  return sub_1000B4380(v0, v9 + 32, v2 | 7);
}

void sub_10070DB48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  sub_1000D0B10();
  v2 &= 0xFFFFFFFFFFFFFFF8;
  v3 = (v2 + 15) & 0xFFFFFFFFFFFFFFF8;
  v4 = (v3 + 39) & 0xFFFFFFFFFFFFFFF8;
  sub_100703FF0(v1 + v5, *(_QWORD *)(v1 + v3), *(_QWORD *)(v1 + v3 + 8), *(_BYTE *)(v1 + v3 + 16), *(_QWORD *)(v1 + v3 + 24), *(_QWORD *)(v1 + v4), *(_QWORD *)(v1 + v4 + 8), *(unsigned __int8 *)(v1 + v4 + 16), v0, *(double *)(v1 + v2), *(_QWORD *)(v1 + v4 + 24), *(_QWORD *)(v1 + ((v4 + 39) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v4 + 39) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v1 + ((v4 + 39) & 0xFFFFFFFFFFFFFFF8) + 16), *(_QWORD *)(v1 + ((v4 + 39) & 0xFFFFFFFFFFFFFFF8) + 24));
}

uint64_t sub_10070DBD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100703FA0(*(uint64_t (**)(void))(v1 + 16), a1);
}

void sub_10070DBD8()
{
  EnvironmentValues.fontResolutionContext.getter();
  sub_10004A298();
}

uint64_t sub_10070DBF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(sub_1000BA294(&qword_100C00CE8) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  v6 = v0 + v3;
  v7 = sub_1000BA294(&qword_100C00D40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4, v5);
}

void sub_10070DC88(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  sub_100079FD4();
  sub_1000BA550();
  sub_100037768(v1 + v3, a1, &qword_100C00CE8);
  sub_100079F70();
}

void sub_10070DCC4()
{
  double *v0;

  *v0 = sub_100086228();
  sub_10004A298();
}

void sub_10070DCE0(double *a1)
{
  sub_1000BED28(a1);
  sub_10004A298();
}

void sub_10070DCF8()
{
  uint64_t v0;

  v0 = sub_1000B2F8C();
  sub_1000C0E60(v0);
  sub_10004A298();
}

void sub_10070DD14(char *a1)
{
  sub_1000FD984(a1);
  sub_10004A298();
}

unint64_t sub_10070DD2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00D78;
  if (!qword_100C00D78)
  {
    v1 = sub_100075EB0(&qword_100C00D70);
    sub_10070DD98();
    sub_10070DE34();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00D78);
  }
  return result;
}

unint64_t sub_10070DD98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00D80;
  if (!qword_100C00D80)
  {
    v1 = sub_100075EB0(&qword_100C00D68);
    sub_10007AB60((uint64_t)&unk_100C00D88);
    sub_10007AB60((uint64_t)&unk_100BCDE00);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00D80);
  }
  return result;
}

unint64_t sub_10070DE34()
{
  unint64_t result;

  result = qword_100C00D90;
  if (!qword_100C00D90)
  {
    result = swift_getWitnessTable(&unk_1009A01DC, &type metadata for CalculateLocationComponentContainerBackgroundPinningOffsetViewModifier);
    atomic_store(result, (unint64_t *)&qword_100C00D90);
  }
  return result;
}

unint64_t sub_10070DE70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00E08;
  if (!qword_100C00E08)
  {
    v1 = sub_100075EB0(&qword_100C00DD8);
    sub_10070DEF4();
    sub_10007AB60((uint64_t)&unk_100C00E20);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00E08);
  }
  return result;
}

unint64_t sub_10070DEF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00E10;
  if (!qword_100C00E10)
  {
    v1 = sub_100075EB0(&qword_100C00DC0);
    sub_10070DF60();
    sub_10070E020();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00E10);
  }
  return result;
}

unint64_t sub_10070DF60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00E18;
  if (!qword_100C00E18)
  {
    v1 = sub_100075EB0(&qword_100C00DD0);
    sub_10007AB60((uint64_t)&unk_100C00E20);
    sub_10070DFE4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00E18);
  }
  return result;
}

unint64_t sub_10070DFE4()
{
  unint64_t result;

  result = qword_100C00E28;
  if (!qword_100C00E28)
  {
    result = swift_getWitnessTable(&unk_1009C2E44, &type metadata for GridGeometryContentWidthIDModifier);
    atomic_store(result, (unint64_t *)&qword_100C00E28);
  }
  return result;
}

unint64_t sub_10070E020()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00E30;
  if (!qword_100C00E30)
  {
    v1 = sub_100075EB0(&qword_100C00E38);
    sub_10007AB60((uint64_t)&unk_100C00E20);
    sub_10070E0A4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00E30);
  }
  return result;
}

unint64_t sub_10070E0A4()
{
  unint64_t result;

  result = qword_100C00E40;
  if (!qword_100C00E40)
  {
    result = swift_getWitnessTable(&unk_1009C2DF4, &type metadata for MapPresentationStyleIDModifier);
    atomic_store(result, (unint64_t *)&qword_100C00E40);
  }
  return result;
}

unint64_t sub_10070E0E0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  void *v11;

  result = qword_100C00E48;
  if (!qword_100C00E48)
  {
    v1 = sub_100075EB0(&qword_100C00DA0);
    v2 = sub_100075EB0(&qword_100C00E50);
    v3 = sub_100075EB0(&qword_100C00E58);
    v4 = sub_100075EB0(&qword_100BFA9A0);
    v5 = sub_10070E1FC();
    sub_1005D17C0((uint64_t)&qword_100BFACC0);
    v8 = v3;
    v9 = (void *)v4;
    v10 = v5;
    v11 = v6;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v8 = v2;
    v9 = &type metadata for Bool;
    v10 = OpaqueTypeConformance2;
    v11 = &protocol witness table for Bool;
    swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00E48);
  }
  return result;
}

unint64_t sub_10070E1FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00E60;
  if (!qword_100C00E60)
  {
    v1 = sub_100075EB0(&qword_100C00E58);
    sub_10070E280();
    sub_10007AB60((uint64_t)&unk_100C00E90);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00E60);
  }
  return result;
}

unint64_t sub_10070E280()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_100C00E68;
  if (!qword_100C00E68)
  {
    v1 = sub_100075EB0(&qword_100C00E70);
    v2 = sub_100075EB0(&qword_100C00E78);
    sub_10007AB60((uint64_t)&unk_100C00E80);
    v4[0] = v2;
    v4[1] = v3;
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.navigationDestinationScope()>>, 1);
    sub_10070E334();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00E68);
  }
  return result;
}

unint64_t sub_10070E334()
{
  unint64_t result;

  result = qword_100C00E88;
  if (!qword_100C00E88)
  {
    result = swift_getWitnessTable(&unk_1009C2D54, &type metadata for GridGeometryMinimumHostViewWidthModifier);
    atomic_store(result, (unint64_t *)&qword_100C00E88);
  }
  return result;
}

double sub_10070E370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  double result;

  if (a1)
  {
    swift_retain();
    swift_bridgeObjectRetain(a11);
    sub_10008D47C(a14, a15 & 1);
    *(_QWORD *)&result = swift_retain().n128_u64[0];
  }
  return result;
}

uint64_t sub_10070E3C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);

  v2 = sub_1000E7D2C(a1);
  v3(v2);
  return v1;
}

uint64_t sub_10070E40C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17)
{
  if (result)
  {
    swift_release(result);
    swift_bridgeObjectRelease(a11);
    sub_1000B15F8(a14, a15 & 1);
    return swift_release(a17);
  }
  return result;
}

uint64_t sub_10070E460@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for LocationContentView(0);
  sub_1000BA550();
  return sub_100707454(a1, a2);
}

void sub_10070E4AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000D0B10();
  sub_100706010((_QWORD *)(v1 + v3), v0, *(double *)(v1 + (v2 & 0xFFFFFFFFFFFFF8)));
}

void sub_10070E4E4(uint64_t a1, _BYTE *a2)
{
  sub_1000891A8();
  if (*a2 == 1)
  {
    sub_1000BA550();
    sub_100009A1C();
  }
  sub_10004A298();
}

uint64_t sub_10070E51C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_10008900C();
  v2 = type metadata accessor for LocationContentView(0);
  sub_1000DB0B4(v2);
  sub_10009DA64();
  sub_10011E4AC();
  sub_10011E588();
  sub_1000C1FD4();
  sub_1000EB0F4();
  v3 = sub_1000BA294(&qword_100BC37E0);
  if (sub_100098814(v3) == 1)
  {
    sub_10009E908();
    v4 = sub_1000C1D78();
    sub_1000987E0(v4);
  }
  else
  {
    sub_1000B4394();
  }
  sub_1000D02E8();
  v5 = sub_1000BA294(&qword_100BC37D8);
  if (sub_100098814(v5) == 1)
  {
    v6 = sub_10009EE9C();
    sub_1000987E0(v6);
  }
  else
  {
    sub_1000B4394();
  }
  sub_1000BEFC8();
  v8 = v7 + 8;
  sub_1000C2F7C();
  v9 = sub_1000BCF7C();
  sub_10003BC44(v9);
  return sub_1000B4380(v0, v8, v1 | 7);
}

void sub_10070E5E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;

  sub_1000F42A4();
  type metadata accessor for LocationContentView(0);
  v0 = sub_1000F4178();
  sub_1007064C8(v0, v1, v2, v3, v4, v5);
  sub_10004A2A0();
}

uint64_t type metadata accessor for LocationContentRowHeightModifier(uint64_t a1)
{
  return sub_100098190(a1, qword_100C01178, (uint64_t)&nominal type descriptor for LocationContentRowHeightModifier);
}

void sub_10070E658()
{
  uint64_t v0;

  v0 = sub_10009E6B4();
  sub_1000C0E60(v0);
  sub_10004A298();
}

void sub_10070E674(char *a1)
{
  sub_1000FCCA8(a1);
  sub_10004A298();
}

unint64_t sub_10070E68C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00F78;
  if (!qword_100C00F78)
  {
    v1 = sub_100075EB0(&qword_100C00F70);
    sub_10070E710();
    sub_10007AB60((uint64_t)&unk_100BFADC0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00F78);
  }
  return result;
}

unint64_t sub_10070E710()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00F80;
  if (!qword_100C00F80)
  {
    v1 = sub_100075EB0(&qword_100C00F68);
    sub_10070E794();
    sub_10007A100((uint64_t)&unk_100C00FB8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00F80);
  }
  return result;
}

unint64_t sub_10070E794()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00F88;
  if (!qword_100C00F88)
  {
    v1 = sub_100075EB0(&qword_100C00F60);
    sub_10070E800();
    sub_10070E944();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00F88);
  }
  return result;
}

unint64_t sub_10070E800()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00F90;
  if (!qword_100C00F90)
  {
    v1 = sub_100075EB0(&qword_100C00F58);
    sub_10070E884();
    sub_10007AB60((uint64_t)&unk_100C0A590);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00F90);
  }
  return result;
}

unint64_t sub_10070E884()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00F98;
  if (!qword_100C00F98)
  {
    v1 = sub_100075EB0(&qword_100C00F50);
    sub_10007AB60((uint64_t)&unk_100C00FA0);
    sub_10070E908();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00F98);
  }
  return result;
}

unint64_t sub_10070E908()
{
  unint64_t result;

  result = qword_100C00FA8;
  if (!qword_100C00FA8)
  {
    result = swift_getWitnessTable(&unk_1009C2D04, &type metadata for WidthFillingLocationComponentContainerModifier);
    atomic_store(result, (unint64_t *)&qword_100C00FA8);
  }
  return result;
}

unint64_t sub_10070E944()
{
  unint64_t result;

  result = qword_100C00FB0;
  if (!qword_100C00FB0)
  {
    result = swift_getWitnessTable(&unk_1009C2CB4, &type metadata for GutterWidthPaddingModifier);
    atomic_store(result, (unint64_t *)&qword_100C00FB0);
  }
  return result;
}

unint64_t sub_10070E980()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00FC0;
  if (!qword_100C00FC0)
  {
    v1 = sub_100075EB0(&qword_100C00F28);
    sub_10070E9EC();
    sub_10070EA88();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00FC0);
  }
  return result;
}

unint64_t sub_10070E9EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00FC8;
  if (!qword_100C00FC8)
  {
    v1 = sub_100075EB0(&qword_100C00F20);
    sub_10007AB60((uint64_t)&unk_100C00FD0);
    sub_10007AB60((uint64_t)&unk_100C0A590);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00FC8);
  }
  return result;
}

unint64_t sub_10070EA88()
{
  unint64_t result;

  result = qword_100C00FD8;
  if (!qword_100C00FD8)
  {
    result = swift_getWitnessTable(&unk_1009C2C14, &type metadata for HalfWidthFillingLocationComponentContainerModifier);
    atomic_store(result, (unint64_t *)&qword_100C00FD8);
  }
  return result;
}

unint64_t sub_10070EAC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00FE0;
  if (!qword_100C00FE0)
  {
    v1 = sub_100075EB0(&qword_100C00F40);
    sub_10070E68C();
    sub_10070E980();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00FE0);
  }
  return result;
}

void sub_10070EB38()
{
  double *v0;

  *v0 = sub_10011E718();
  sub_10004A298();
}

void sub_10070EB54(double *a1)
{
  sub_1000B3C0C(a1);
  sub_10004A298();
}

uint64_t type metadata accessor for LocationContentScrollingHeaderView(uint64_t a1)
{
  return sub_100098190(a1, qword_100C01390, (uint64_t)&nominal type descriptor for LocationContentScrollingHeaderView);
}

unint64_t sub_10070EB88()
{
  unint64_t result;

  result = qword_100C01008;
  if (!qword_100C01008)
  {
    result = swift_getWitnessTable(&unk_1009C2BDC, &_s42ShouldConsiderMapPinnedToTopEnvironmentKeyVN);
    atomic_store(result, (unint64_t *)&qword_100C01008);
  }
  return result;
}

ValueMetadata *_s42ShouldConsiderMapPinnedToTopEnvironmentKeyVMa()
{
  return &_s42ShouldConsiderMapPinnedToTopEnvironmentKeyVN;
}

ValueMetadata *_s42LocationContentWantsGridViewEnvironmentKeyVMa()
{
  return &_s42LocationContentWantsGridViewEnvironmentKeyVN;
}

unint64_t sub_10070EBE4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v22 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v13 = *(_QWORD *)(a2 + 48);
    v24 = *(_QWORD *)(a2 + 56);
    v25 = *(_QWORD *)(a2 + 64);
    v26 = *(_BYTE *)(a2 + 72);
    sub_1000D4FF4(*(_QWORD *)a2, v8, v9, v10, v11, v12, v13, v24, v25, v26);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v11;
    *(_QWORD *)(a1 + 40) = v12;
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v24;
    *(_QWORD *)(a1 + 64) = v25;
    v14 = *(int *)(a3 + 20);
    v15 = (_QWORD *)(a1 + v14);
    v16 = (_QWORD *)(a2 + v14);
    *(_BYTE *)(a1 + 72) = v26;
    v17 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v16) == 1)
    {
      v18 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      *v15 = *v16;
      swift_retain();
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
  }
  return a1;
}

double sub_10070ED48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  sub_1000CEE98(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
  v4 = a1 + *(int *)(a2 + 20);
  sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v4) == 1)
  {
    v5 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

uint64_t sub_10070EDE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;

  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v20 = *(_QWORD *)(a2 + 64);
  v21 = *(_BYTE *)(a2 + 72);
  sub_1000D4FF4(*(_QWORD *)a2, v6, v7, v8, v9, v10, v12, v11, v20, v21);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v20;
  v13 = *(int *)(a3 + 20);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  *(_BYTE *)(a1 + 72) = v21;
  v16 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v15) == 1)
  {
    v17 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v15, v17);
    v18 = 1;
  }
  else
  {
    *v14 = *v15;
    swift_retain();
    v18 = 0;
  }
  swift_storeEnumTagMultiPayload(v14, v16, v18);
  return a1;
}

uint64_t sub_10070EF1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v31;
  char v32;

  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(a2 + 64);
  v32 = *(_BYTE *)(a2 + 72);
  sub_1000D4FF4(*(_QWORD *)a2, v6, v7, v8, v9, v10, v12, v11, v31, v32);
  v13 = *(_QWORD *)a1;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 48);
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(a1 + 64);
  v22 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v31;
  *(_BYTE *)(a1 + 72) = v32;
  sub_1000CEE98(v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  if (a1 != a2)
  {
    v23 = *(int *)(a3 + 20);
    v24 = (_QWORD *)(a1 + v23);
    v25 = (_QWORD *)(a2 + v23);
    sub_100021A14(a1 + v23, &qword_100BC37D8);
    v26 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v25) == 1)
    {
      v27 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v24, v25, v27);
      v28 = 1;
    }
    else
    {
      *v24 = *v25;
      swift_retain();
      v28 = 0;
    }
    swift_storeEnumTagMultiPayload(v24, v26, v28);
  }
  return a1;
}

char *sub_10070F088(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  memcpy(a1, a2, 0x49uLL);
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v8) == 1)
  {
    v10 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10070F138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *(_QWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 72);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(a1 + 64);
  v17 = *(_BYTE *)(a1 + 72);
  v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v18;
  v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 72) = v7;
  sub_1000CEE98(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17);
  if (a1 != a2)
  {
    v20 = *(int *)(a3 + 20);
    v21 = (void *)(a1 + v20);
    v22 = (const void *)(a2 + v20);
    sub_100021A14(a1 + v20, &qword_100BC37D8);
    v23 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v22) == 1)
    {
      v24 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v21, v22, v24);
      swift_storeEnumTagMultiPayload(v21, v23, 1);
    }
    else
    {
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10070F244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10070F250);
}

void sub_10070F250(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2 == 254)
  {
    sub_100079F70();
  }
  else
  {
    sub_10009C9D4();
    sub_1000BA294((uint64_t *)&unk_100C09CA0);
    v3 = sub_10009E5E4(*(int *)(v2 + 20));
    sub_1000B250C(v3, v4, v5);
  }
}

uint64_t sub_10070F2A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10070F2B4);
}

void sub_10070F2B4(uint64_t a1, char a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a3 == 254)
  {
    *(_BYTE *)(a1 + 72) = -a2;
    sub_100079F70();
  }
  else
  {
    sub_1000BA294((uint64_t *)&unk_100C09CA0);
    v5 = sub_100099C94(*(int *)(a4 + 20));
    sub_1000987C4(v5, v6, v7, v8);
  }
}

uint64_t type metadata accessor for DetermineWhetherLocationContentWantsGridViewModifier(uint64_t a1)
{
  return sub_100098190(a1, qword_100C01068, (uint64_t)&nominal type descriptor for DetermineWhetherLocationContentWantsGridViewModifier);
}

void sub_10070F31C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "I";
  sub_100158B48(319, (unint64_t *)&qword_100BC3888, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t destroy for DetermineWhetherViewsShouldConsiderMapPinnedToTopModifier(uint64_t a1)
{
  return sub_1000CEE98(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
}

uint64_t initializeWithCopy for DetermineWhetherViewsShouldConsiderMapPinnedToTopModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 72);
  sub_1000D4FF4(v3, v4, v5, v6, v7, v8, v9, v10, v11, *(_BYTE *)(a2 + 80));
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v11;
  *(_BYTE *)(a1 + 80) = v13;
  return a1;
}

uint64_t assignWithCopy for DetermineWhetherViewsShouldConsiderMapPinnedToTopModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v23;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 72);
  sub_1000D4FF4(v3, v4, v5, v6, v7, v8, v9, v10, v11, *(_BYTE *)(a2 + 80));
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  v18 = *(_QWORD *)(a1 + 56);
  v19 = *(_QWORD *)(a1 + 64);
  v20 = *(_QWORD *)(a1 + 72);
  v21 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v11;
  *(_BYTE *)(a1 + 80) = v23;
  sub_1000CEE98(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  return a1;
}

void *initializeWithTake for DetermineWhetherViewsShouldConsiderMapPinnedToTopModifier(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x51uLL);
}

uint64_t assignWithTake for DetermineWhetherViewsShouldConsiderMapPinnedToTopModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 72);
  v4 = *(_BYTE *)(a2 + 80);
  v5 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_BYTE *)(a1 + 80);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = v3;
  *(_BYTE *)(a1 + 80) = v4;
  sub_1000CEE98(v5, v7, v6, v8, v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for DetermineWhetherViewsShouldConsiderMapPinnedToTopModifier(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;

  if (a2)
  {
    if (a2 >= 0xFF && a1[81])
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *a1;
      v4 = v3 >= 2;
      v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DetermineWhetherViewsShouldConsiderMapPinnedToTopModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 81) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for DetermineWhetherViewsShouldConsiderMapPinnedToTopModifier()
{
  return &type metadata for DetermineWhetherViewsShouldConsiderMapPinnedToTopModifier;
}

uint64_t destroy for DetermineCompactGridLayoutModifier(uint64_t a1)
{
  sub_1000CEE98(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
  return sub_1000B15F8(*(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
}

uint64_t initializeWithCopy for DetermineCompactGridLayoutModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v14 = *(_QWORD *)(a2 + 64);
  v15 = *(_BYTE *)(a2 + 72);
  sub_1000D4FF4(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v14, v15);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v14;
  *(_BYTE *)(a1 + 72) = v15;
  v12 = *(_QWORD *)(v2 + 80);
  LOBYTE(v2) = *(_BYTE *)(v2 + 88);
  sub_10008D47C(v12, v2);
  *(_QWORD *)(a1 + 80) = v12;
  *(_BYTE *)(a1 + 88) = v2;
  return a1;
}

uint64_t assignWithCopy for DetermineCompactGridLayoutModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v26;
  char v27;

  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v26 = *(_QWORD *)(a2 + 64);
  v27 = *(_BYTE *)(a2 + 72);
  sub_1000D4FF4(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v26, v27);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v26;
  *(_BYTE *)(a1 + 72) = v27;
  sub_1000CEE98(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(v2 + 80);
  LOBYTE(v2) = *(_BYTE *)(v2 + 88);
  sub_10008D47C(v22, v2);
  v23 = *(_QWORD *)(a1 + 80);
  v24 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v22;
  *(_BYTE *)(a1 + 88) = v2;
  sub_1000B15F8(v23, v24);
  return a1;
}

uint64_t assignWithTake for DetermineCompactGridLayoutModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  char v20;

  v4 = *(_QWORD *)(a2 + 64);
  v5 = *(_BYTE *)(a2 + 72);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(a1 + 64);
  v15 = *(_BYTE *)(a1 + 72);
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  *(_QWORD *)(a1 + 64) = v4;
  *(_BYTE *)(a1 + 72) = v5;
  sub_1000CEE98(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  v18 = *(_BYTE *)(a2 + 88);
  v19 = *(_QWORD *)(a1 + 80);
  v20 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = v18;
  sub_1000B15F8(v19, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for DetermineCompactGridLayoutModifier(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 89))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 72);
      if (v3 <= 1)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DetermineCompactGridLayoutModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 89) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 89) = 0;
    if (a2)
      *(_BYTE *)(result + 72) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DetermineCompactGridLayoutModifier()
{
  return &type metadata for DetermineCompactGridLayoutModifier;
}

ValueMetadata *type metadata accessor for DetermineLocationComponentHeaderLineLimitModifier()
{
  return &type metadata for DetermineLocationComponentHeaderLineLimitModifier;
}

ValueMetadata *type metadata accessor for ScrollViewBottomPadding()
{
  return &type metadata for ScrollViewBottomPadding;
}

ValueMetadata *type metadata accessor for GridGeometryMinimumHostViewWidthModifier()
{
  return &type metadata for GridGeometryMinimumHostViewWidthModifier;
}

ValueMetadata *type metadata accessor for HalfWidthFillingLocationComponentContainerModifier()
{
  return &type metadata for HalfWidthFillingLocationComponentContainerModifier;
}

uint64_t type metadata accessor for HorizontalComponentStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HorizontalComponentStack);
}

uint64_t sub_10070FA9C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    v7 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v7;
    v8 = a2[4];
    v9 = a2[5];
    v10 = a2[6];
    v11 = a2[7];
    v25 = a2[8];
    v26 = a2[3];
    v12 = a2[9];
    v13 = a2[11];
    v24 = a2[10];
    v14 = *((_BYTE *)a2 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000D4FF4(v26, v8, v9, v10, v11, v25, v12, v24, v13, v14);
    *(_QWORD *)(a1 + 24) = v26;
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 64) = v25;
    *(_QWORD *)(a1 + 72) = v12;
    *(_QWORD *)(a1 + 80) = v24;
    *(_QWORD *)(a1 + 88) = v13;
    v15 = *(int *)(a3 + 24);
    v16 = (_QWORD *)(a1 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    *(_BYTE *)(a1 + 96) = v14;
    v18 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v17) == 1)
    {
      v19 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v16, v17, v19);
      v20 = v16;
      v21 = v18;
      v22 = 1;
    }
    else
    {
      *v16 = *v17;
      swift_retain();
      v20 = v16;
      v21 = v18;
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v21, v22);
  }
  return a1;
}

double sub_10070FC24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000CEE98(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 96));
  v4 = a1 + *(int *)(a2 + 24);
  sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v4) == 1)
  {
    v5 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

uint64_t sub_10070FCD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v22 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a2 + 88);
  v20 = *(_QWORD *)(a2 + 64);
  v21 = *(_QWORD *)(a2 + 80);
  v12 = *(_BYTE *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000D4FF4(v6, v7, v8, v9, v10, v20, v22, v21, v11, v12);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v20;
  *(_QWORD *)(a1 + 72) = v22;
  *(_QWORD *)(a1 + 80) = v21;
  *(_QWORD *)(a1 + 88) = v11;
  v13 = *(int *)(a3 + 24);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  *(_BYTE *)(a1 + 96) = v12;
  v16 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v15) == 1)
  {
    v17 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v15, v17);
    v18 = 1;
  }
  else
  {
    *v14 = *v15;
    swift_retain();
    v18 = 0;
  }
  swift_storeEnumTagMultiPayload(v14, v16, v18);
  return a1;
}

uint64_t sub_10070FE34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v31;
  char v32;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a2 + 80);
  v31 = *(_QWORD *)(a2 + 88);
  v32 = *(_BYTE *)(a2 + 96);
  sub_1000D4FF4(v5, v6, v7, v8, v9, v10, v12, v11, v31, v32);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_QWORD *)(a1 + 56);
  v18 = *(_QWORD *)(a1 + 64);
  v19 = *(_QWORD *)(a1 + 72);
  v20 = *(_QWORD *)(a1 + 80);
  v21 = *(_QWORD *)(a1 + 88);
  v22 = *(_BYTE *)(a1 + 96);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v12;
  *(_QWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 88) = v31;
  *(_BYTE *)(a1 + 96) = v32;
  sub_1000CEE98(v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  if (a1 != a2)
  {
    v23 = *(int *)(a3 + 24);
    v24 = (_QWORD *)(a1 + v23);
    v25 = (_QWORD *)(a2 + v23);
    sub_100021A14(a1 + v23, &qword_100BC37D8);
    v26 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v25) == 1)
    {
      v27 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v24, v25, v27);
      v28 = 1;
    }
    else
    {
      *v24 = *v25;
      swift_retain();
      v28 = 0;
    }
    swift_storeEnumTagMultiPayload(v24, v26, v28);
  }
  return a1;
}

uint64_t sub_10070FFDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  memcpy((void *)(a1 + 24), (const void *)(a2 + 24), 0x49uLL);
  v6 = *(int *)(a3 + 24);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v8) == 1)
  {
    v10 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1007100A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 88);
  v8 = *(_BYTE *)(a2 + 96);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(a1 + 64);
  v15 = *(_QWORD *)(a1 + 72);
  v16 = *(_QWORD *)(a1 + 80);
  v17 = *(_QWORD *)(a1 + 88);
  v18 = *(_BYTE *)(a1 + 96);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = v7;
  *(_BYTE *)(a1 + 96) = v8;
  sub_1000CEE98(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  if (a1 != a2)
  {
    v19 = *(int *)(a3 + 24);
    v20 = (void *)(a1 + v19);
    v21 = (const void *)(a2 + v19);
    sub_100021A14(a1 + v19, &qword_100BC37D8);
    v22 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v21) == 1)
    {
      v23 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v20, v21, v23);
      swift_storeEnumTagMultiPayload(v20, v22, 1);
    }
    else
    {
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1007101E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1007101EC);
}

void sub_1007101EC()
{
  unint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000B26B8();
  if (v2)
  {
    sub_10003BCA4(*v0);
    sub_100079F70();
  }
  else
  {
    sub_10009C9D4();
    sub_1000BA294((uint64_t *)&unk_100C09CA0);
    v3 = sub_10009E5E4(*(int *)(v1 + 24));
    sub_1000B250C(v3, v4, v5);
  }
}

uint64_t sub_100710238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100710244);
}

void sub_100710244()
{
  int v0;
  _QWORD *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000993A8();
  if (v3)
  {
    *v1 = (v0 - 1);
    sub_100079F70();
  }
  else
  {
    v4 = v2;
    sub_1000BA294((uint64_t *)&unk_100C09CA0);
    v5 = sub_100099C94(*(int *)(v4 + 24));
    sub_1000987C4(v5, v6, v7, v8);
  }
}

void sub_100710290(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1009C26D8;
  v4[1] = "I";
  sub_100158B48(319, (unint64_t *)&qword_100BC3888, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

ValueMetadata *type metadata accessor for GutterWidthPaddingModifier()
{
  return &type metadata for GutterWidthPaddingModifier;
}

ValueMetadata *type metadata accessor for WidthFillingLocationComponentContainerModifier()
{
  return &type metadata for WidthFillingLocationComponentContainerModifier;
}

void sub_10071033C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for () + 64;
  sub_100158B48(319, (unint64_t *)&qword_100BC3890, type metadata accessor for DisplayMetrics);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = "I";
    v4[4] = &unk_1009C2038;
    swift_initStructMetadata(a1, 0, 5, v4, a1 + 32);
  }
}

_QWORD *sub_1007103E4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (_QWORD *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    v9 = *(int *)(a3 + 40);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    swift_bridgeObjectRetain();
    swift_retain();
    v12 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(v11) == 1)
    {
      *(_OWORD *)v10 = *(_OWORD *)v11;
      v10[16] = v11[16];
      v10[17] = v11[17];
      v10[18] = v11[18];
      v13 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v14 = &v10[v13];
      v15 = &v11[v13];
      v16 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
      v17 = 1;
    }
    else
    {
      *(_QWORD *)v10 = *(_QWORD *)v11;
      swift_retain();
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v17);
    v18 = *(int *)(a3 + 44);
    v36 = a2;
    v37 = a3;
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    v21 = *(_QWORD *)v20;
    v22 = *((_QWORD *)v20 + 1);
    v23 = *((_QWORD *)v20 + 2);
    v24 = *((_QWORD *)v20 + 3);
    v25 = *((_QWORD *)v20 + 4);
    v26 = *((_QWORD *)v20 + 5);
    v28 = *((_QWORD *)v20 + 6);
    v27 = *((_QWORD *)v20 + 7);
    v34 = *((_QWORD *)v20 + 8);
    v35 = v20[72];
    sub_1000D4FF4(*(_QWORD *)v20, v22, v23, v24, v25, v26, v28, v27, v34, v35);
    *(_QWORD *)v19 = v21;
    *((_QWORD *)v19 + 1) = v22;
    *((_QWORD *)v19 + 2) = v23;
    *((_QWORD *)v19 + 3) = v24;
    *((_QWORD *)v19 + 4) = v25;
    *((_QWORD *)v19 + 5) = v26;
    *((_QWORD *)v19 + 6) = v28;
    *((_QWORD *)v19 + 7) = v27;
    *((_QWORD *)v19 + 8) = v34;
    v19[72] = v35;
    v29 = *(int *)(v37 + 48);
    v30 = (char *)a1 + v29;
    v31 = (char *)v36 + v29;
    v32 = *(_QWORD *)v31;
    LOBYTE(v27) = v31[8];
    sub_10008D47C(*(_QWORD *)v31, v27);
    *(_QWORD *)v30 = v32;
    v30[8] = v27;
  }
  return a1;
}

uint64_t sub_1007105C4(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease();
  swift_release();
  v4 = a1 + a2[10];
  sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(v4) == 1)
  {
    v5 = v4 + *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v6 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  v7 = a1 + a2[11];
  sub_1000CEE98(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), *(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40), *(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 56), *(_QWORD *)(v7 + 64), *(_BYTE *)(v7 + 72));
  return sub_1000B15F8(*(_QWORD *)(a1 + a2[12]), *(_BYTE *)(a1 + a2[12] + 8));
}

uint64_t sub_1007106A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(int *)(a3 + 40);
  v8 = a1 + v7;
  v9 = a2 + v7;
  swift_bridgeObjectRetain();
  swift_retain();
  v10 = sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(v9) == 1)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
    *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
    *(_BYTE *)(v8 + 17) = *(_BYTE *)(v9 + 17);
    *(_BYTE *)(v8 + 18) = *(_BYTE *)(v9 + 18);
    v11 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v12 = v8 + v11;
    v13 = v9 + v11;
    v14 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    v15 = 1;
  }
  else
  {
    *(_QWORD *)v8 = *(_QWORD *)v9;
    swift_retain();
    v15 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v10, v15);
  v16 = *(int *)(a3 + 44);
  v35 = a2;
  v36 = a3;
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_QWORD *)v18;
  v20 = *(_QWORD *)(v18 + 8);
  v21 = *(_QWORD *)(v18 + 16);
  v22 = *(_QWORD *)(v18 + 24);
  v23 = *(_QWORD *)(v18 + 32);
  v24 = *(_QWORD *)(v18 + 40);
  v26 = *(_QWORD *)(v18 + 48);
  v25 = *(_QWORD *)(v18 + 56);
  v34 = a1;
  v27 = *(_QWORD *)(v18 + 64);
  v33 = *(_BYTE *)(v18 + 72);
  sub_1000D4FF4(*(_QWORD *)v18, v20, v21, v22, v23, v24, v26, v25, v27, v33);
  *(_QWORD *)v17 = v19;
  *(_QWORD *)(v17 + 8) = v20;
  *(_QWORD *)(v17 + 16) = v21;
  *(_QWORD *)(v17 + 24) = v22;
  *(_QWORD *)(v17 + 32) = v23;
  *(_QWORD *)(v17 + 40) = v24;
  *(_QWORD *)(v17 + 48) = v26;
  *(_QWORD *)(v17 + 56) = v25;
  *(_QWORD *)(v17 + 64) = v27;
  *(_BYTE *)(v17 + 72) = v33;
  v28 = *(int *)(v36 + 48);
  v29 = v34 + v28;
  v30 = v35 + v28;
  v31 = *(_QWORD *)v30;
  LOBYTE(v25) = *(_BYTE *)(v30 + 8);
  sub_10008D47C(*(_QWORD *)v30, v25);
  *(_QWORD *)v29 = v31;
  *(_BYTE *)(v29 + 8) = v25;
  return v34;
}

_QWORD *sub_100710860(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 40);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    sub_100021A14((uint64_t)a1 + v7, &qword_100BC37E0);
    v10 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(v9) == 1)
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *((_QWORD *)v8 + 1) = *((_QWORD *)v9 + 1);
      v8[16] = v9[16];
      v8[17] = v9[17];
      v8[18] = v9[18];
      v11 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v12 = &v8[v11];
      v13 = &v9[v11];
      v14 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      v15 = 1;
    }
    else
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      swift_retain();
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v10, v15);
  }
  v16 = *(int *)(a3 + 44);
  v47 = a2;
  v48 = a3;
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(_QWORD *)v18;
  v20 = *((_QWORD *)v18 + 1);
  v21 = *((_QWORD *)v18 + 2);
  v22 = *((_QWORD *)v18 + 3);
  v23 = *((_QWORD *)v18 + 4);
  v24 = *((_QWORD *)v18 + 5);
  v26 = *((_QWORD *)v18 + 6);
  v25 = *((_QWORD *)v18 + 7);
  v46 = a1;
  v27 = *((_QWORD *)v18 + 8);
  v45 = v18[72];
  sub_1000D4FF4(*(_QWORD *)v18, v20, v21, v22, v23, v24, v26, v25, v27, v45);
  v28 = *(_QWORD *)v17;
  v29 = *((_QWORD *)v17 + 1);
  v30 = *((_QWORD *)v17 + 2);
  v31 = *((_QWORD *)v17 + 3);
  v32 = *((_QWORD *)v17 + 4);
  v33 = *((_QWORD *)v17 + 5);
  v34 = *((_QWORD *)v17 + 6);
  v35 = *((_QWORD *)v17 + 7);
  v36 = *((_QWORD *)v17 + 8);
  v37 = v17[72];
  *(_QWORD *)v17 = v19;
  *((_QWORD *)v17 + 1) = v20;
  *((_QWORD *)v17 + 2) = v21;
  *((_QWORD *)v17 + 3) = v22;
  *((_QWORD *)v17 + 4) = v23;
  *((_QWORD *)v17 + 5) = v24;
  *((_QWORD *)v17 + 6) = v26;
  *((_QWORD *)v17 + 7) = v25;
  *((_QWORD *)v17 + 8) = v27;
  v17[72] = v45;
  sub_1000CEE98(v28, v29, v30, v31, v32, v33, v34, v35, v36, v37);
  v38 = *(int *)(v48 + 48);
  v39 = (char *)v46 + v38;
  v40 = (char *)v47 + v38;
  v41 = *(_QWORD *)v40;
  LOBYTE(v25) = v40[8];
  sub_10008D47C(*(_QWORD *)v40, v25);
  v42 = *(_QWORD *)v39;
  v43 = v39[8];
  *(_QWORD *)v39 = v41;
  v39[8] = v25;
  sub_1000B15F8(v42, v43);
  return v46;
}

uint64_t sub_100710A80(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = a3[10];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(v8) == 1)
  {
    *(_OWORD *)v7 = *(_OWORD *)v8;
    v7[16] = v8[16];
    v7[17] = v8[17];
    v7[18] = v8[18];
    v10 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v11 = &v7[v10];
    v12 = &v8[v10];
    v13 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  memcpy((void *)(a1 + a3[11]), (const void *)(a2 + a3[11]), 0x49uLL);
  v14 = a3[12];
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  return a1;
}

uint64_t sub_100710BAC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  if (a1 != a2)
  {
    v6 = a3[10];
    v7 = (char *)(a1 + v6);
    v8 = (char *)(a2 + v6);
    sub_100021A14(a1 + v6, &qword_100BC37E0);
    v9 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(v8) == 1)
    {
      *(_OWORD *)v7 = *(_OWORD *)v8;
      v7[16] = v8[16];
      v7[17] = v8[17];
      v7[18] = v8[18];
      v10 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v11 = &v7[v10];
      v12 = &v8[v10];
      v13 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
      swift_storeEnumTagMultiPayload(v7, v9, 1);
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
  }
  v14 = a3[11];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = *(_QWORD *)(v16 + 64);
  v18 = *(_BYTE *)(v16 + 72);
  v19 = *(_QWORD *)v15;
  v20 = *(_QWORD *)(v15 + 8);
  v21 = *(_QWORD *)(v15 + 16);
  v22 = *(_QWORD *)(v15 + 24);
  v23 = *(_QWORD *)(v15 + 32);
  v24 = *(_QWORD *)(v15 + 40);
  v25 = *(_QWORD *)(v15 + 48);
  v26 = *(_QWORD *)(v15 + 56);
  v27 = *(_QWORD *)(v15 + 64);
  v28 = *(_BYTE *)(v15 + 72);
  v29 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_OWORD *)(v15 + 16) = v29;
  v30 = *(_OWORD *)(v16 + 48);
  *(_OWORD *)(v15 + 32) = *(_OWORD *)(v16 + 32);
  *(_OWORD *)(v15 + 48) = v30;
  *(_QWORD *)(v15 + 64) = v17;
  *(_BYTE *)(v15 + 72) = v18;
  sub_1000CEE98(v19, v20, v21, v22, v23, v24, v25, v26, v27, v28);
  v31 = a3[12];
  v32 = a1 + v31;
  v33 = (uint64_t *)(a2 + v31);
  v34 = *v33;
  LOBYTE(v33) = *((_BYTE *)v33 + 8);
  v35 = *(_QWORD *)v32;
  v36 = *(_BYTE *)(v32 + 8);
  *(_QWORD *)v32 = v34;
  *(_BYTE *)(v32 + 8) = (_BYTE)v33;
  sub_1000B15F8(v35, v36);
  return a1;
}

uint64_t sub_100710D50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100710D5C);
}

void sub_100710D5C()
{
  unint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000B26B8();
  if (v2)
  {
    sub_10003BCA4(*v0);
    sub_100079F70();
  }
  else
  {
    sub_10009C9D4();
    sub_1000BA294(&qword_100BC3808);
    v3 = sub_10009E5E4(*(int *)(v1 + 40));
    sub_1000B250C(v3, v4, v5);
  }
}

uint64_t sub_100710DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100710DB4);
}

void sub_100710DB4()
{
  int v0;
  _QWORD *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000993A8();
  if (v3)
  {
    *v1 = (v0 - 1);
    sub_100079F70();
  }
  else
  {
    v4 = v2;
    sub_1000BA294(&qword_100BC3808);
    v5 = sub_100099C94(*(int *)(v4 + 40));
    sub_1000987C4(v5, v6, v7, v8);
  }
}

uint64_t type metadata accessor for LocationStackView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LocationStackView);
}

uint64_t sub_100710E0C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for PinnedScrollableViews(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for () + 64;
    v4[3] = &unk_1009C2038;
    v4[4] = "I";
    swift_initStructMetadata(a1, 0, 5, v4, a1 + 32);
    return 0;
  }
  return result;
}

_QWORD *sub_100710EA4(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char v32;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v29 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = a3[9];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for PinnedScrollableViews(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[10];
    v12 = a3[11];
    v13 = (_QWORD *)((char *)v4 + v11);
    v14 = (_QWORD *)((char *)a2 + v11);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = (char *)v4 + v12;
    v17 = *(_QWORD *)((char *)a2 + v12);
    LOBYTE(v9) = *((_BYTE *)a2 + v12 + 8);
    swift_retain();
    sub_10008D47C(v17, (char)v9);
    *(_QWORD *)v16 = v17;
    v16[8] = (char)v9;
    v18 = a3[12];
    v19 = (char *)v4 + v18;
    v20 = (char *)a2 + v18;
    v21 = *(_QWORD *)v20;
    v22 = *((_QWORD *)v20 + 1);
    v23 = *((_QWORD *)v20 + 2);
    v24 = *((_QWORD *)v20 + 3);
    v25 = *((_QWORD *)v20 + 4);
    v26 = *((_QWORD *)v20 + 5);
    v27 = *((_QWORD *)v20 + 6);
    v28 = *((_QWORD *)v20 + 7);
    v31 = *((_QWORD *)v20 + 8);
    v32 = v20[72];
    sub_1000D4FF4(*(_QWORD *)v20, v22, v23, v24, v25, v26, v27, v28, v31, v32);
    *(_QWORD *)v19 = v21;
    *((_QWORD *)v19 + 1) = v22;
    *((_QWORD *)v19 + 2) = v23;
    *((_QWORD *)v19 + 3) = v24;
    *((_QWORD *)v19 + 4) = v25;
    *((_QWORD *)v19 + 5) = v26;
    *((_QWORD *)v19 + 6) = v27;
    *((_QWORD *)v19 + 7) = v28;
    *((_QWORD *)v19 + 8) = v31;
    v19[72] = v32;
  }
  return v4;
}

uint64_t sub_100711008(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1 + a2[9];
  v5 = type metadata accessor for PinnedScrollableViews(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_release();
  sub_1000B15F8(*(_QWORD *)(a1 + a2[11]), *(_BYTE *)(a1 + a2[11] + 8));
  v6 = a1 + a2[12];
  return sub_1000CEE98(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), *(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40), *(_QWORD *)(v6 + 48), *(_QWORD *)(v6 + 56), *(_QWORD *)(v6 + 64), *(_BYTE *)(v6 + 72));
}

_QWORD *sub_1007110AC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char v30;

  *a1 = *a2;
  v6 = a3[9];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for PinnedScrollableViews(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[10];
  v11 = a3[11];
  v12 = (_QWORD *)((char *)a1 + v10);
  v13 = (_QWORD *)((char *)a2 + v10);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = (char *)a1 + v11;
  v16 = *(_QWORD *)((char *)a2 + v11);
  LOBYTE(v8) = *((_BYTE *)a2 + v11 + 8);
  swift_retain();
  sub_10008D47C(v16, (char)v8);
  *(_QWORD *)v15 = v16;
  v15[8] = (char)v8;
  v17 = a3[12];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *(_QWORD *)v19;
  v21 = *((_QWORD *)v19 + 1);
  v22 = *((_QWORD *)v19 + 2);
  v23 = *((_QWORD *)v19 + 3);
  v24 = *((_QWORD *)v19 + 4);
  v25 = *((_QWORD *)v19 + 5);
  v26 = *((_QWORD *)v19 + 6);
  v27 = *((_QWORD *)v19 + 7);
  v29 = *((_QWORD *)v19 + 8);
  v30 = v19[72];
  sub_1000D4FF4(*(_QWORD *)v19, v21, v22, v23, v24, v25, v26, v27, v29, v30);
  *(_QWORD *)v18 = v20;
  *((_QWORD *)v18 + 1) = v21;
  *((_QWORD *)v18 + 2) = v22;
  *((_QWORD *)v18 + 3) = v23;
  *((_QWORD *)v18 + 4) = v24;
  *((_QWORD *)v18 + 5) = v25;
  *((_QWORD *)v18 + 6) = v26;
  *((_QWORD *)v18 + 7) = v27;
  *((_QWORD *)v18 + 8) = v29;
  v18[72] = v30;
  return a1;
}

_QWORD *sub_1007111E4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  char *v6;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v43;
  _QWORD *v44;

  *a1 = *a2;
  v5 = a3[9];
  v6 = (char *)a1 + v5;
  v8 = (char *)a2 + v5;
  v9 = type metadata accessor for PinnedScrollableViews(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v6, v8, v9);
  v10 = a3[10];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_retain();
  swift_release();
  v14 = a3[11];
  v15 = (char *)a1 + v14;
  v44 = a1;
  v16 = (char *)a2 + v14;
  v17 = *(_QWORD *)v16;
  LOBYTE(v8) = v16[8];
  sub_10008D47C(*(_QWORD *)v16, (char)v8);
  v18 = *(_QWORD *)v15;
  v19 = v15[8];
  *(_QWORD *)v15 = v17;
  v15[8] = (char)v8;
  sub_1000B15F8(v18, v19);
  v20 = a3[12];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = *(_QWORD *)v22;
  v24 = *((_QWORD *)v22 + 1);
  v25 = *((_QWORD *)v22 + 2);
  v26 = *((_QWORD *)v22 + 3);
  v27 = *((_QWORD *)v22 + 4);
  v28 = *((_QWORD *)v22 + 5);
  v29 = *((_QWORD *)v22 + 6);
  v30 = *((_QWORD *)v22 + 7);
  v31 = *((_QWORD *)v22 + 8);
  v43 = v22[72];
  sub_1000D4FF4(*(_QWORD *)v22, v24, v25, v26, v27, v28, v29, v30, v31, v43);
  v32 = *(_QWORD *)v21;
  v33 = *((_QWORD *)v21 + 1);
  v34 = *((_QWORD *)v21 + 2);
  v35 = *((_QWORD *)v21 + 3);
  v36 = *((_QWORD *)v21 + 4);
  v37 = *((_QWORD *)v21 + 5);
  v38 = *((_QWORD *)v21 + 6);
  v39 = *((_QWORD *)v21 + 7);
  v40 = *((_QWORD *)v21 + 8);
  v41 = v21[72];
  *(_QWORD *)v21 = v23;
  *((_QWORD *)v21 + 1) = v24;
  *((_QWORD *)v21 + 2) = v25;
  *((_QWORD *)v21 + 3) = v26;
  *((_QWORD *)v21 + 4) = v27;
  *((_QWORD *)v21 + 5) = v28;
  *((_QWORD *)v21 + 6) = v29;
  *((_QWORD *)v21 + 7) = v30;
  *((_QWORD *)v21 + 8) = v31;
  v21[72] = v43;
  sub_1000CEE98(v32, v33, v34, v35, v36, v37, v38, v39, v40, v41);
  return v44;
}

_QWORD *sub_100711358(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  *a1 = *a2;
  v6 = a3[9];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for PinnedScrollableViews(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  memcpy((char *)a1 + a3[12], (char *)a2 + a3[12], 0x49uLL);
  return a1;
}

_QWORD *sub_1007113FC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;

  *a1 = *a2;
  v6 = a3[9];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for PinnedScrollableViews(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  swift_release();
  v10 = a3[11];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = *(_QWORD *)v12;
  LOBYTE(v12) = v12[8];
  v14 = *(_QWORD *)v11;
  v15 = v11[8];
  *(_QWORD *)v11 = v13;
  v11[8] = (char)v12;
  sub_1000B15F8(v14, v15);
  v16 = a3[12];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *((_QWORD *)v18 + 8);
  v20 = v18[72];
  v21 = *(_QWORD *)v17;
  v22 = *((_QWORD *)v17 + 1);
  v23 = *((_QWORD *)v17 + 2);
  v24 = *((_QWORD *)v17 + 3);
  v25 = *((_QWORD *)v17 + 4);
  v26 = *((_QWORD *)v17 + 5);
  v27 = *((_QWORD *)v17 + 6);
  v28 = *((_QWORD *)v17 + 7);
  v29 = *((_QWORD *)v17 + 8);
  v30 = v17[72];
  v31 = *((_OWORD *)v18 + 1);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v31;
  v32 = *((_OWORD *)v18 + 3);
  *((_OWORD *)v17 + 2) = *((_OWORD *)v18 + 2);
  *((_OWORD *)v17 + 3) = v32;
  *((_QWORD *)v17 + 8) = v19;
  v17[72] = v20;
  sub_1000CEE98(v21, v22, v23, v24, v25, v26, v27, v28, v29, v30);
  return a1;
}

uint64_t sub_100711500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10071150C);
}

void sub_10071150C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000FDC18();
  sub_100088FF0();
  if (v5)
  {
    v6 = sub_10009E5E4(*(int *)(a3 + 36));
    sub_1000B250C(v6, v7, v8);
  }
  else
  {
    sub_10003BCA4(*(_QWORD *)(v3 + *(int *)(a3 + 40)));
    sub_100079F70();
  }
}

uint64_t sub_100711554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100711560);
}

void sub_100711560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_1000FDC18();
  sub_10009D2E8();
  if (v7)
  {
    v8 = sub_100099C94(*(int *)(a4 + 36));
    sub_1000987C4(v8, v9, v10, v11);
  }
  else
  {
    *(_QWORD *)(v5 + *(int *)(a4 + 40)) = (v4 - 1);
    sub_100079F70();
  }
}

uint64_t type metadata accessor for LazyVStackIfPossible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LazyVStackIfPossible);
}

ValueMetadata *type metadata accessor for MapPresentationStyleIDModifier()
{
  return &type metadata for MapPresentationStyleIDModifier;
}

ValueMetadata *type metadata accessor for GridGeometryContentWidthIDModifier()
{
  return &type metadata for GridGeometryContentWidthIDModifier;
}

ValueMetadata *type metadata accessor for GridGeometryLocationViewContentWidthModifier()
{
  return &type metadata for GridGeometryLocationViewContentWidthModifier;
}

uint64_t sub_1007115E8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "I";
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 32);
    return 0;
  }
  return result;
}

#error "10071170C: call analysis failed (funcsize=54)"

void sub_100711734(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  sub_1000BEFC8();
  sub_1000C1088(v2);
  sub_100089028();
}

#error "1007117D4: call analysis failed (funcsize=34)"

#error "10071185C: call analysis failed (funcsize=41)"

uint64_t sub_10071189C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100095068();
  (*(void (**)(void))(v2 + 32))();
  memcpy((void *)((*(_QWORD *)(v2 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8), (const void *)((*(_QWORD *)(v2 + 64) + 7 + a2) & 0xFFFFFFFFFFFFFFF8), 0x49uLL);
  return a1;
}

void sub_1007118F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  sub_100095068();
  (*(void (**)(void))(v2 + 40))();
  v5 = *(_QWORD *)(v2 + 64) + 7;
  v6 = (v5 + a2) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(v6 + 64);
  v8 = (v5 + a1) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v6 + 72);
  v10 = *(_QWORD *)v8;
  v11 = *(_QWORD *)(v8 + 8);
  v12 = *(_QWORD *)(v8 + 16);
  v13 = *(_QWORD *)(v8 + 24);
  v14 = *(_QWORD *)(v8 + 32);
  v15 = *(_QWORD *)(v8 + 40);
  v16 = *(_QWORD *)(v8 + 48);
  v17 = *(_QWORD *)(v8 + 56);
  v18 = *(_QWORD *)(v8 + 64);
  v19 = *(_BYTE *)(v8 + 72);
  v20 = *(_OWORD *)(v6 + 16);
  v21 = *(_OWORD *)(v6 + 32);
  v22 = *(_OWORD *)(v6 + 48);
  *(_OWORD *)v8 = *(_OWORD *)v6;
  *(_OWORD *)(v8 + 16) = v20;
  *(_OWORD *)(v8 + 32) = v21;
  *(_OWORD *)(v8 + 48) = v22;
  *(_QWORD *)(v8 + 64) = v7;
  *(_BYTE *)(v8 + 72) = v9;
  sub_1000CEE98(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
  sub_100099960();
}

uint64_t sub_100711984(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v15;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= 0xFE)
    v7 = 254;
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (!a2)
    return 0;
  v8 = *(_QWORD *)(v5 + 64);
  if (v7 >= a2)
  {
    if (v6 < 0xFE)
    {
      v15 = *(unsigned __int8 *)(((a1 + v8 + 7) & 0xFFFFFFFFFFFFF8) + 0x48);
      if (v15 > 1)
        return (v15 ^ 0xFF) + 1;
      else
        return 0;
    }
    else
    {
      return _s7Weather24LocationCompositionStateOwet_0(a1, v6, v4);
    }
  }
  else
  {
    v9 = ((v8 + 7) & 0xFFFFFFF8) + 73;
    v10 = (a2 - v7 + 255) >> (8 * v9);
    if (v9 < 4)
      v11 = v10 + 1;
    else
      v11 = 2;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    return ((uint64_t (*)(void))((char *)&loc_100711A0C + 4 * byte_1009C1F34[v13]))();
  }
}

void sub_100711A94(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 73;
  if (v6 >= a3)
  {
    v10 = 0;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
  }
  if (v6 < a2)
  {
    v11 = ~v6 + a2;
    v12 = (~(_BYTE)v6 + a2);
    if (v7 >= 4)
      v13 = v11;
    else
      v13 = v12;
    bzero(a1, v7);
    if ((_DWORD)v7 == 1)
      *a1 = v13;
    else
      *(_DWORD *)a1 = v13;
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void sub_100711BAC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x100711C34);
}

void sub_100711BB4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x100711BBCLL);
  JUMPOUT(0x100711C34);
}

void sub_100711BF8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x100711C34);
}

void sub_100711C00()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x100711C34);
}

uint64_t sub_100711C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_WORD *)(v7 + v8) = 0;
  if (!(_DWORD)a2)
    goto LABEL_6;
  if (a3 < 0xFE)
  {
    sub_1000BEFC8();
    if (v5 > 0xFE)
      JUMPOUT(0x100711C14);
    *(_BYTE *)(v6 + 72) = -(char)v5;
LABEL_6:
    JUMPOUT(0x100711C34);
  }
  return _s7Weather24LocationCompositionStateOwst_0(v7, a2, a3, a4);
}

uint64_t type metadata accessor for LocationViewGridLayoutContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LocationViewGridLayoutContainer);
}

uint64_t _s7Weather49DetermineLocationComponentHeaderLineLimitModifierVwxx_0(uint64_t a1)
{
  return sub_1000CEE98(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
}

void _s7Weather49DetermineLocationComponentHeaderLineLimitModifierVwcp_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;

  sub_1000CD18C(*(_QWORD *)a2, a2, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a2 + 64), *(_BYTE *)(a2 + 72));
  sub_1000B31C8();
  *(_BYTE *)(a1 + 72) = v9;
  sub_1000C3B50();
}

void _s7Weather49DetermineLocationComponentHeaderLineLimitModifierVwca_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  sub_1000CD18C(*(_QWORD *)a2, a2, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a2 + 64), *(_BYTE *)(a2 + 72));
  sub_1000B31C8();
  *(_BYTE *)(a1 + 72) = v18;
  sub_1000FDA7C(v9, v10, v11, v12, v13, v14, v15, v16, v17);
  sub_1000C3B50();
}

void _s7Weather49DetermineLocationComponentHeaderLineLimitModifierVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;

  v3 = *(_QWORD *)(a2 + 64);
  v4 = *(_BYTE *)(a2 + 72);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_BYTE *)(a1 + 72);
  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 64) = v3;
  *(_BYTE *)(a1 + 72) = v4;
  sub_1000CEE98(v5, v7, v6, v8, v9, v10, v11, v12, v13, v14);
  sub_100089028();
}

uint64_t _s7Weather49DetermineLocationComponentHeaderLineLimitModifierVwet_0(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 73))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 72);
      if (v3 <= 1)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t _s7Weather49DetermineLocationComponentHeaderLineLimitModifierVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 73) = 0;
    if (a2)
      *(_BYTE *)(result + 72) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for GutterWidthSpacer()
{
  return &type metadata for GutterWidthSpacer;
}

_QWORD *sub_100711E88(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  int *v40;
  _QWORD *v41;
  _QWORD *v42;
  int *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  int *v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t, uint64_t);
  id v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  int *v164;
  int *v165;
  char v166;
  _QWORD *v167;
  int *v168;
  _QWORD *v169;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v15 = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Location.Identifier(0);
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = type metadata accessor for LocationViewModel(0);
    v10 = *(int *)(v9 + 20);
    v11 = &a1[v10];
    v12 = &a2[v10];
    v168 = a3;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&a2[v10], 1, v7))
    {
      v13 = sub_1000BA294(&qword_100BCD680);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v8(v11, v12, v7);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v7);
    }
    v16 = *(int *)(v9 + 24);
    v17 = &a1[v16];
    v18 = &a2[v16];
    v19 = *(_QWORD *)&a2[v16 + 8];
    *(_QWORD *)v17 = *(_QWORD *)&a2[v16];
    *((_QWORD *)v17 + 1) = v19;
    v20 = *(_QWORD *)&a2[v16 + 16];
    v21 = *(_QWORD *)&a2[v16 + 24];
    v22 = a2;
    v23 = *(_QWORD *)&a2[v16 + 32];
    v24 = *(_QWORD *)&a2[v16 + 40];
    v25 = a1;
    v26 = v18[48];
    swift_bridgeObjectRetain();
    sub_100176D88(v20, v21, v23, v24, v26);
    *((_QWORD *)v17 + 2) = v20;
    *((_QWORD *)v17 + 3) = v21;
    *((_QWORD *)v17 + 4) = v23;
    *((_QWORD *)v17 + 5) = v24;
    v17[48] = v26;
    v27 = *((_QWORD *)v18 + 8);
    *((_QWORD *)v17 + 7) = *((_QWORD *)v18 + 7);
    *((_QWORD *)v17 + 8) = v27;
    v28 = *((_QWORD *)v18 + 10);
    *((_QWORD *)v17 + 9) = *((_QWORD *)v18 + 9);
    *((_QWORD *)v17 + 10) = v28;
    v29 = *((_QWORD *)v18 + 12);
    *((_QWORD *)v17 + 11) = *((_QWORD *)v18 + 11);
    *((_QWORD *)v17 + 12) = v29;
    v30 = (int *)v9;
    v31 = *((_QWORD *)v18 + 14);
    *((_QWORD *)v17 + 13) = *((_QWORD *)v18 + 13);
    *((_QWORD *)v17 + 14) = v31;
    v32 = *((_QWORD *)v18 + 16);
    *((_QWORD *)v17 + 15) = *((_QWORD *)v18 + 15);
    *((_QWORD *)v17 + 16) = v32;
    v17[136] = v18[136];
    *(_WORD *)(v17 + 137) = *(_WORD *)(v18 + 137);
    v33 = *((_QWORD *)v18 + 19);
    *((_QWORD *)v17 + 18) = *((_QWORD *)v18 + 18);
    *((_QWORD *)v17 + 19) = v33;
    v17[160] = v18[160];
    v17[161] = v18[161];
    *(_QWORD *)((char *)v25 + v30[7]) = *(_QWORD *)((char *)v22 + v30[7]);
    *(_QWORD *)((char *)v25 + v30[8]) = *(_QWORD *)((char *)v22 + v30[8]);
    v165 = v30;
    v167 = v22;
    v34 = v30[9];
    v169 = v25;
    v35 = (char *)v25 + v34;
    v36 = (char *)v22 + v34;
    v37 = type metadata accessor for LocationFooterViewModel(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v38 = (int *)v37;
    swift_bridgeObjectRetain();
    swift_retain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v36, 1, v37))
    {
      v39 = sub_1000BA294(&qword_100BCD690);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      v41 = v167;
      v40 = v168;
      v42 = v169;
      v43 = v165;
    }
    else
    {
      *v35 = *v36;
      *(_WORD *)(v35 + 1) = *(_WORD *)(v36 + 1);
      v44 = v36;
      v45 = *((_QWORD *)v36 + 1);
      v46 = *((_QWORD *)v36 + 2);
      *((_QWORD *)v35 + 1) = v45;
      *((_QWORD *)v35 + 2) = v46;
      v47 = *(int *)(v37 + 32);
      v48 = &v35[v47];
      v49 = v44;
      v50 = &v44[v47];
      v51 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v50, 1, v51))
      {
        v52 = sub_1000BA294(&qword_100BD4280);
        memcpy(v48, v50, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v48, v50, v51);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v48, 0, 1, v51);
      }
      v40 = v168;
      v164 = v38;
      v53 = v38[9];
      v54 = &v35[v53];
      v55 = &v49[v53];
      *v54 = v49[v53];
      *((_QWORD *)v54 + 1) = *(_QWORD *)&v49[v53 + 8];
      v56 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
      v57 = v56[6];
      v58 = &v54[v57];
      v59 = &v55[v57];
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v59, 1, v51))
      {
        v60 = sub_1000BA294(&qword_100BD4280);
        memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v58, v59, v51);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v58, 0, 1, v51);
      }
      v61 = v56[7];
      v62 = &v54[v61];
      v63 = &v55[v61];
      v64 = v63[1];
      *v62 = *v63;
      v62[1] = v64;
      *(_QWORD *)&v54[v56[8]] = *(_QWORD *)&v55[v56[8]];
      v35[v164[10]] = v49[v164[10]];
      v65 = v164[11];
      v66 = &v35[v65];
      v67 = &v49[v65];
      v68 = type metadata accessor for LocationOfInterest(0);
      swift_bridgeObjectRetain();
      swift_retain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v67, 1, v68))
      {
        v69 = sub_1000BA294(&qword_100BC3118);
        memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v66, v67, v68);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v66, 0, 1, v68);
      }
      v35[v164[12]] = v49[v164[12]];
      v35[v164[13]] = v49[v164[13]];
      v70 = v164[14];
      v71 = &v35[v70];
      v72 = &v49[v70];
      v73 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v72, 1, (uint64_t)v73))
      {
        v74 = sub_1000BA294(&qword_100BCD688);
        memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
      }
      else
      {
        *v71 = *v72;
        v75 = v73[5];
        v76 = &v71[v75];
        v77 = &v72[v75];
        v78 = type metadata accessor for Location(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v78 - 8) + 16))(v76, v77, v78);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(&v71[v73[6]], &v72[v73[6]], v68);
        v71[v73[7]] = v72[v73[7]];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v71, 0, 1, (uint64_t)v73);
      }
      v43 = v165;
      v41 = v167;
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v35, 0, 1, (uint64_t)v164);
      v42 = v169;
    }
    *((_BYTE *)v42 + v43[10]) = *((_BYTE *)v41 + v43[10]);
    *((_BYTE *)v42 + v43[11]) = *((_BYTE *)v41 + v43[11]);
    *((_BYTE *)v42 + v43[12]) = *((_BYTE *)v41 + v43[12]);
    *((_BYTE *)v42 + v43[13]) = *((_BYTE *)v41 + v43[13]);
    *((_BYTE *)v42 + v43[14]) = *((_BYTE *)v41 + v43[14]);
    v79 = v43[15];
    v80 = *(void **)((char *)v41 + v79);
    *(_QWORD *)((char *)v42 + v79) = v80;
    *((_BYTE *)v42 + v43[16]) = *((_BYTE *)v41 + v43[16]);
    *((_BYTE *)v42 + v43[17]) = *((_BYTE *)v41 + v43[17]);
    *((_BYTE *)v42 + v43[18]) = *((_BYTE *)v41 + v43[18]);
    v81 = v43[19];
    v82 = (uint64_t)v42 + v81;
    v83 = (uint64_t)v41 + v81;
    v84 = type metadata accessor for Date(0);
    v85 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 16);
    v86 = v80;
    v85(v82, v83, v84);
    v87 = v43[20];
    v88 = (char *)v42 + v87;
    v89 = (char *)v41 + v87;
    v90 = type metadata accessor for ForegroundEffect(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v89, 1, v90))
    {
      v91 = sub_1000BA294(&qword_100BC5B30);
      memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 16))(v88, v89, v90);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v88, 0, 1, v90);
    }
    *((_BYTE *)v42 + v43[21]) = *((_BYTE *)v41 + v43[21]);
    *(_QWORD *)((char *)v42 + v43[22]) = *(_QWORD *)((char *)v41 + v43[22]);
    *((_BYTE *)v42 + v43[23]) = *((_BYTE *)v41 + v43[23]);
    v92 = v43[24];
    v93 = (uint64_t)v42 + v92;
    v94 = (uint64_t)v41 + v92;
    v95 = type metadata accessor for LocationEntity(0);
    v96 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v95 - 8) + 16);
    v97 = swift_bridgeObjectRetain();
    v96(v93, v94, v95, v97);
    v98 = v40[5];
    v99 = (uint64_t)v42 + v98;
    v100 = (uint64_t)v41 + v98;
    v101 = *(_QWORD *)((char *)v41 + v98);
    v102 = *(_QWORD *)((char *)v41 + v98 + 8);
    LOBYTE(v94) = *((_BYTE *)v41 + v98 + 16);
    sub_1000D55D4(v101, v102, v94);
    *(_QWORD *)v99 = v101;
    *(_QWORD *)(v99 + 8) = v102;
    *(_BYTE *)(v99 + 16) = v94;
    *(_QWORD *)(v99 + 24) = *(_QWORD *)(v100 + 24);
    v103 = v40[6];
    v104 = (uint64_t)v42 + v103;
    v105 = (uint64_t)v41 + v103;
    v106 = *(_QWORD *)((char *)v41 + v103);
    v107 = *(_QWORD *)((char *)v41 + v103 + 8);
    LOBYTE(v94) = *((_BYTE *)v41 + v103 + 16);
    swift_bridgeObjectRetain();
    sub_1000D55D4(v106, v107, v94);
    *(_QWORD *)v104 = v106;
    *(_QWORD *)(v104 + 8) = v107;
    *(_BYTE *)(v104 + 16) = v94;
    *(_QWORD *)(v104 + 24) = *(_QWORD *)(v105 + 24);
    v108 = v40[7];
    v109 = (uint64_t)v42 + v108;
    v110 = (uint64_t)v41 + v108;
    v111 = *(_QWORD *)((char *)v41 + v108 + 24);
    swift_bridgeObjectRetain();
    if (v111)
    {
      v112 = *(_QWORD *)v110;
      v113 = *(_QWORD *)(v110 + 8);
      v114 = *(_BYTE *)(v110 + 16);
      sub_1000D55D4(*(_QWORD *)v110, v113, v114);
      *(_QWORD *)v109 = v112;
      *(_QWORD *)(v109 + 8) = v113;
      *(_BYTE *)(v109 + 16) = v114;
      *(_QWORD *)(v109 + 24) = *(_QWORD *)(v110 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      v115 = *(_OWORD *)(v110 + 16);
      *(_OWORD *)v109 = *(_OWORD *)v110;
      *(_OWORD *)(v109 + 16) = v115;
    }
    v116 = v40[8];
    v117 = (uint64_t)v42 + v116;
    v118 = (uint64_t)v41 + v116;
    v119 = type metadata accessor for Text.Measurements(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v119 - 8) + 16))(v117, v118, v119);
    v120 = v40[9];
    v121 = (uint64_t)v42 + v120;
    v122 = (uint64_t)v41 + v120;
    v123 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(v122) == 1)
    {
      *(_OWORD *)v121 = *(_OWORD *)v122;
      *(_BYTE *)(v121 + 16) = *(_BYTE *)(v122 + 16);
      *(_BYTE *)(v121 + 17) = *(_BYTE *)(v122 + 17);
      *(_BYTE *)(v121 + 18) = *(_BYTE *)(v122 + 18);
      v124 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v125 = v121 + v124;
      v126 = v122 + v124;
      v127 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v127 - 8) + 16))(v125, v126, v127);
      v128 = 1;
    }
    else
    {
      *(_QWORD *)v121 = *(_QWORD *)v122;
      swift_retain();
      v128 = 0;
    }
    swift_storeEnumTagMultiPayload(v121, v123, v128);
    v129 = v40[10];
    v130 = (uint64_t)v42 + v129;
    v131 = (uint64_t)v41 + v129;
    v132 = *(_QWORD *)v131;
    v133 = *(_QWORD *)(v131 + 8);
    v134 = *(_QWORD *)(v131 + 16);
    v135 = *(_QWORD *)(v131 + 24);
    v136 = *(_QWORD *)(v131 + 32);
    v137 = *(_QWORD *)(v131 + 40);
    v138 = *(_QWORD *)(v131 + 48);
    v139 = *(_QWORD *)(v131 + 56);
    v140 = *(_QWORD *)(v131 + 64);
    v166 = *(_BYTE *)(v131 + 72);
    sub_1000D4FF4(*(_QWORD *)v131, v133, v134, v135, v136, v137, v138, v139, v140, v166);
    *(_QWORD *)v130 = v132;
    *(_QWORD *)(v130 + 8) = v133;
    *(_QWORD *)(v130 + 16) = v134;
    *(_QWORD *)(v130 + 24) = v135;
    *(_QWORD *)(v130 + 32) = v136;
    *(_QWORD *)(v130 + 40) = v137;
    *(_QWORD *)(v130 + 48) = v138;
    *(_QWORD *)(v130 + 56) = v139;
    *(_QWORD *)(v130 + 64) = v140;
    *(_BYTE *)(v130 + 72) = v166;
    v141 = v168[11];
    v142 = (uint64_t)v169 + v141;
    v143 = (uint64_t)v167 + v141;
    v144 = *(_QWORD *)v143;
    LOBYTE(v133) = *(_BYTE *)(v143 + 8);
    sub_10008D47C(*(_QWORD *)v143, v133);
    *(_QWORD *)v142 = v144;
    *(_BYTE *)(v142 + 8) = v133;
    v145 = v168[12];
    v146 = (uint64_t)v169 + v145;
    v147 = (uint64_t)v167 + v145;
    v148 = *(_QWORD *)v147;
    v149 = *(_QWORD *)(v147 + 8);
    v150 = *(_QWORD *)(v147 + 16);
    v151 = *(_QWORD *)(v147 + 24);
    LOBYTE(v136) = *(_BYTE *)(v147 + 32);
    sub_1000D55E4(*(_QWORD *)v147, v149, v150, v151, v136);
    *(_QWORD *)v146 = v148;
    *(_QWORD *)(v146 + 8) = v149;
    *(_QWORD *)(v146 + 16) = v150;
    *(_QWORD *)(v146 + 24) = v151;
    *(_BYTE *)(v146 + 32) = v136;
    v152 = v168[13];
    v153 = (_QWORD *)((char *)v169 + v152);
    v154 = (_QWORD *)((char *)v167 + v152);
    v155 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v154) == 1)
    {
      v156 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v156 - 8) + 16))(v153, v154, v156);
      v157 = 1;
    }
    else
    {
      *v153 = *v154;
      swift_retain();
      v157 = 0;
    }
    swift_storeEnumTagMultiPayload(v153, v155, v157);
    v158 = v168[14];
    v159 = (uint64_t)v169 + v158;
    v160 = (uint64_t)v167 + v158;
    v161 = *(_QWORD *)v160;
    v162 = *(_BYTE *)(v160 + 8);
    sub_10008D47C(*(_QWORD *)v160, v162);
    *(_QWORD *)v159 = v161;
    *(_BYTE *)(v159 + 8) = v162;
    return v169;
  }
  return (_QWORD *)v15;
}

uint64_t sub_1007128A8(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = type metadata accessor for Location.Identifier(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = (int *)type metadata accessor for LocationViewModel(0);
  v7 = a1 + v6[5];
  if (!_s7Weather24LocationCompositionStateOwet_0(v7, 1, v4))
    v5(v7, v4);
  v8 = a1 + v6[6];
  swift_bridgeObjectRelease();
  sub_100176DD4(*(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24), *(_QWORD *)(v8 + 32), *(_QWORD *)(v8 + 40), *(_BYTE *)(v8 + 48));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v9 = a1 + v6[9];
  v10 = (int *)type metadata accessor for LocationFooterViewModel(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v9, 1, (uint64_t)v10))
  {
    swift_bridgeObjectRelease();
    v11 = v9 + v10[8];
    v12 = type metadata accessor for URL(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v11, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
    v13 = v9 + v10[9];
    swift_bridgeObjectRelease();
    v14 = v13 + *(int *)(type metadata accessor for LearnMoreAttributorViewModel(0) + 24);
    if (!_s7Weather24LocationCompositionStateOwet_0(v14, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v14, v12);
    swift_bridgeObjectRelease();
    swift_release();
    v15 = v9 + v10[11];
    v16 = type metadata accessor for LocationOfInterest(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v15, 1, v16))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
    v17 = v9 + v10[14];
    v18 = type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v17, 1, v18))
    {
      v19 = v17 + *(int *)(v18 + 20);
      v20 = type metadata accessor for Location(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17 + *(int *)(v18 + 24), v16);
    }
  }

  v21 = a1 + v6[19];
  v22 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  v23 = a1 + v6[20];
  v24 = type metadata accessor for ForegroundEffect(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v23, 1, v24))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  swift_bridgeObjectRelease();
  v25 = a1 + v6[24];
  v26 = type metadata accessor for LocationEntity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
  sub_1000D31B4(*(_QWORD *)(a1 + a2[5]), *(_QWORD *)(a1 + a2[5] + 8), *(_BYTE *)(a1 + a2[5] + 16));
  swift_bridgeObjectRelease();
  sub_1000D31B4(*(_QWORD *)(a1 + a2[6]), *(_QWORD *)(a1 + a2[6] + 8), *(_BYTE *)(a1 + a2[6] + 16));
  swift_bridgeObjectRelease();
  v27 = a1 + a2[7];
  if (*(_QWORD *)(v27 + 24))
  {
    sub_1000D31B4(*(_QWORD *)v27, *(_QWORD *)(v27 + 8), *(_BYTE *)(v27 + 16));
    swift_bridgeObjectRelease();
  }
  v28 = a1 + a2[8];
  v29 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v28, v29);
  v30 = a1 + a2[9];
  sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(v30) == 1)
  {
    v31 = v30 + *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v32 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v31, v32);
  }
  else
  {
    swift_release();
  }
  v33 = a1 + a2[10];
  sub_1000CEE98(*(_QWORD *)v33, *(_QWORD *)(v33 + 8), *(_QWORD *)(v33 + 16), *(_QWORD *)(v33 + 24), *(_QWORD *)(v33 + 32), *(_QWORD *)(v33 + 40), *(_QWORD *)(v33 + 48), *(_QWORD *)(v33 + 56), *(_QWORD *)(v33 + 64), *(_BYTE *)(v33 + 72));
  sub_1000B15F8(*(_QWORD *)(a1 + a2[11]), *(_BYTE *)(a1 + a2[11] + 8));
  v34 = a1 + a2[12];
  sub_1000D31C4(*(_QWORD *)v34, *(_QWORD *)(v34 + 8), *(_QWORD *)(v34 + 16), *(_QWORD *)(v34 + 24), *(_BYTE *)(v34 + 32));
  v35 = a1 + a2[13];
  sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v35) == 1)
  {
    v36 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v35, v36);
  }
  else
  {
    swift_release();
  }
  return sub_1000B15F8(*(_QWORD *)(a1 + a2[14]), *(_BYTE *)(a1 + a2[14] + 8));
}

uint64_t sub_100712D5C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  int *v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t, uint64_t);
  id v79;
  uint64_t v80;
  void *v81;
  const void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  int *v157;
  char v158;
  uint64_t v160;
  uint64_t v161;

  v5 = type metadata accessor for Location.Identifier(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16);
  v6(a1, a2, v5);
  v7 = (int *)type metadata accessor for LocationViewModel(0);
  v8 = v7[5];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  if (_s7Weather24LocationCompositionStateOwet_0(a2 + v8, 1, v5))
  {
    v11 = sub_1000BA294(&qword_100BCD680);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v6((uint64_t)v9, (uint64_t)v10, v5);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v5);
  }
  v12 = v7[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_QWORD *)(a2 + v12 + 8);
  *(_QWORD *)v13 = *(_QWORD *)(a2 + v12);
  *(_QWORD *)(v13 + 8) = v15;
  v16 = *(_QWORD *)(a2 + v12 + 16);
  v17 = *(_QWORD *)(a2 + v12 + 24);
  v18 = *(_QWORD *)(a2 + v12 + 32);
  v19 = *(_QWORD *)(a2 + v12 + 40);
  v20 = *(_BYTE *)(a2 + v12 + 48);
  swift_bridgeObjectRetain();
  sub_100176D88(v16, v17, v18, v19, v20);
  *(_QWORD *)(v13 + 16) = v16;
  *(_QWORD *)(v13 + 24) = v17;
  *(_QWORD *)(v13 + 32) = v18;
  *(_QWORD *)(v13 + 40) = v19;
  *(_BYTE *)(v13 + 48) = v20;
  v21 = *(_QWORD *)(v14 + 64);
  *(_QWORD *)(v13 + 56) = *(_QWORD *)(v14 + 56);
  *(_QWORD *)(v13 + 64) = v21;
  v22 = *(_QWORD *)(v14 + 80);
  *(_QWORD *)(v13 + 72) = *(_QWORD *)(v14 + 72);
  *(_QWORD *)(v13 + 80) = v22;
  v23 = *(_QWORD *)(v14 + 96);
  *(_QWORD *)(v13 + 88) = *(_QWORD *)(v14 + 88);
  *(_QWORD *)(v13 + 96) = v23;
  v24 = *(_QWORD *)(v14 + 112);
  *(_QWORD *)(v13 + 104) = *(_QWORD *)(v14 + 104);
  *(_QWORD *)(v13 + 112) = v24;
  v25 = *(_QWORD *)(v14 + 128);
  *(_QWORD *)(v13 + 120) = *(_QWORD *)(v14 + 120);
  *(_QWORD *)(v13 + 128) = v25;
  *(_BYTE *)(v13 + 136) = *(_BYTE *)(v14 + 136);
  *(_WORD *)(v13 + 137) = *(_WORD *)(v14 + 137);
  v26 = *(_QWORD *)(v14 + 152);
  *(_QWORD *)(v13 + 144) = *(_QWORD *)(v14 + 144);
  *(_QWORD *)(v13 + 152) = v26;
  *(_BYTE *)(v13 + 160) = *(_BYTE *)(v14 + 160);
  *(_BYTE *)(v13 + 161) = *(_BYTE *)(v14 + 161);
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  *(_QWORD *)(a1 + v7[8]) = *(_QWORD *)(a2 + v7[8]);
  v157 = v7;
  v27 = v7[9];
  v160 = a2;
  v161 = a1;
  v28 = (_BYTE *)(a1 + v27);
  v29 = (_BYTE *)(a2 + v27);
  v30 = type metadata accessor for LocationFooterViewModel(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v31 = (int *)v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v29, 1, v30))
  {
    v32 = sub_1000BA294(&qword_100BCD690);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    v33 = a3;
    v34 = v160;
    v35 = a1;
  }
  else
  {
    *v28 = *v29;
    *(_WORD *)(v28 + 1) = *(_WORD *)(v29 + 1);
    v36 = *((_QWORD *)v29 + 2);
    *((_QWORD *)v28 + 1) = *((_QWORD *)v29 + 1);
    *((_QWORD *)v28 + 2) = v36;
    v37 = *(int *)(v30 + 32);
    v38 = &v28[v37];
    v39 = &v29[v37];
    v40 = type metadata accessor for URL(0);
    swift_bridgeObjectRetain();
    v41 = v28;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v39, 1, v40))
    {
      v42 = sub_1000BA294(&qword_100BD4280);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v38, 0, 1, v40);
    }
    v43 = v31;
    v44 = v31[9];
    v45 = &v41[v44];
    v46 = &v29[v44];
    *v45 = v29[v44];
    *((_QWORD *)v45 + 1) = *(_QWORD *)&v29[v44 + 8];
    v47 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
    v48 = v47[6];
    v49 = &v45[v48];
    v50 = &v46[v48];
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v50, 1, v40))
    {
      v51 = sub_1000BA294(&qword_100BD4280);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v49, v50, v40);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v49, 0, 1, v40);
    }
    v52 = v47[7];
    v53 = &v45[v52];
    v54 = &v46[v52];
    v55 = v54[1];
    *v53 = *v54;
    v53[1] = v55;
    *(_QWORD *)&v45[v47[8]] = *(_QWORD *)&v46[v47[8]];
    v56 = (uint64_t)v43;
    v41[v43[10]] = v29[v43[10]];
    v57 = v43[11];
    v58 = &v41[v57];
    v59 = &v29[v57];
    v60 = type metadata accessor for LocationOfInterest(0);
    swift_bridgeObjectRetain();
    swift_retain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v59, 1, v60))
    {
      v61 = sub_1000BA294(&qword_100BC3118);
      memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v58, v59, v60);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v58, 0, 1, v60);
    }
    v41[v43[12]] = v29[v43[12]];
    v41[v43[13]] = v29[v43[13]];
    v62 = v43[14];
    v63 = (uint64_t)v41;
    v64 = &v41[v62];
    v65 = &v29[v62];
    v66 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v65, 1, (uint64_t)v66))
    {
      v67 = sub_1000BA294(&qword_100BCD688);
      memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    }
    else
    {
      *v64 = *v65;
      v68 = v66[5];
      v69 = &v64[v68];
      v70 = &v65[v68];
      v71 = type metadata accessor for Location(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v69, v70, v71);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(&v64[v66[6]], &v65[v66[6]], v60);
      v64[v66[7]] = v65[v66[7]];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v64, 0, 1, (uint64_t)v66);
    }
    v33 = a3;
    v35 = v161;
    _s7Weather24LocationCompositionStateOwst_0(v63, 0, 1, v56);
    v34 = v160;
  }
  *(_BYTE *)(v35 + v157[10]) = *(_BYTE *)(v34 + v157[10]);
  *(_BYTE *)(v35 + v157[11]) = *(_BYTE *)(v34 + v157[11]);
  *(_BYTE *)(v35 + v157[12]) = *(_BYTE *)(v34 + v157[12]);
  *(_BYTE *)(v35 + v157[13]) = *(_BYTE *)(v34 + v157[13]);
  *(_BYTE *)(v35 + v157[14]) = *(_BYTE *)(v34 + v157[14]);
  v72 = v157[15];
  v73 = *(void **)(v34 + v72);
  *(_QWORD *)(v35 + v72) = v73;
  *(_BYTE *)(v35 + v157[16]) = *(_BYTE *)(v34 + v157[16]);
  *(_BYTE *)(v35 + v157[17]) = *(_BYTE *)(v34 + v157[17]);
  *(_BYTE *)(v35 + v157[18]) = *(_BYTE *)(v34 + v157[18]);
  v74 = v157[19];
  v75 = v35 + v74;
  v76 = v34 + v74;
  v77 = type metadata accessor for Date(0);
  v78 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 16);
  v79 = v73;
  v78(v75, v76, v77);
  v80 = v157[20];
  v81 = (void *)(v35 + v80);
  v82 = (const void *)(v34 + v80);
  v83 = type metadata accessor for ForegroundEffect(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v82, 1, v83))
  {
    v84 = sub_1000BA294(&qword_100BC5B30);
    memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v83 - 8) + 16))(v81, v82, v83);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v81, 0, 1, v83);
  }
  *(_BYTE *)(v35 + v157[21]) = *(_BYTE *)(v34 + v157[21]);
  *(_QWORD *)(v35 + v157[22]) = *(_QWORD *)(v34 + v157[22]);
  *(_BYTE *)(v35 + v157[23]) = *(_BYTE *)(v34 + v157[23]);
  v85 = v157[24];
  v86 = v35 + v85;
  v87 = v34 + v85;
  v88 = type metadata accessor for LocationEntity(0);
  v89 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v88 - 8) + 16);
  v90 = swift_bridgeObjectRetain();
  v89(v86, v87, v88, v90);
  v91 = v33[5];
  v92 = v35 + v91;
  v93 = v34 + v91;
  v94 = *(_QWORD *)(v34 + v91);
  v95 = *(_QWORD *)(v34 + v91 + 8);
  LOBYTE(v87) = *(_BYTE *)(v34 + v91 + 16);
  sub_1000D55D4(v94, v95, v87);
  *(_QWORD *)v92 = v94;
  *(_QWORD *)(v92 + 8) = v95;
  *(_BYTE *)(v92 + 16) = v87;
  *(_QWORD *)(v92 + 24) = *(_QWORD *)(v93 + 24);
  v96 = v33[6];
  v97 = v35 + v96;
  v98 = v34 + v96;
  v99 = *(_QWORD *)(v34 + v96);
  v100 = *(_QWORD *)(v34 + v96 + 8);
  LOBYTE(v87) = *(_BYTE *)(v34 + v96 + 16);
  swift_bridgeObjectRetain();
  sub_1000D55D4(v99, v100, v87);
  *(_QWORD *)v97 = v99;
  *(_QWORD *)(v97 + 8) = v100;
  *(_BYTE *)(v97 + 16) = v87;
  *(_QWORD *)(v97 + 24) = *(_QWORD *)(v98 + 24);
  v101 = v33[7];
  v102 = v35 + v101;
  v103 = v34 + v101;
  v104 = *(_QWORD *)(v34 + v101 + 24);
  swift_bridgeObjectRetain();
  if (v104)
  {
    v105 = *(_QWORD *)v103;
    v106 = *(_QWORD *)(v103 + 8);
    v107 = *(_BYTE *)(v103 + 16);
    sub_1000D55D4(*(_QWORD *)v103, v106, v107);
    *(_QWORD *)v102 = v105;
    *(_QWORD *)(v102 + 8) = v106;
    *(_BYTE *)(v102 + 16) = v107;
    *(_QWORD *)(v102 + 24) = *(_QWORD *)(v103 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v108 = *(_OWORD *)(v103 + 16);
    *(_OWORD *)v102 = *(_OWORD *)v103;
    *(_OWORD *)(v102 + 16) = v108;
  }
  v109 = v33[8];
  v110 = v35 + v109;
  v111 = v34 + v109;
  v112 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 16))(v110, v111, v112);
  v113 = v33[9];
  v114 = v35 + v113;
  v115 = v34 + v113;
  v116 = sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(v115) == 1)
  {
    *(_OWORD *)v114 = *(_OWORD *)v115;
    *(_BYTE *)(v114 + 16) = *(_BYTE *)(v115 + 16);
    *(_BYTE *)(v114 + 17) = *(_BYTE *)(v115 + 17);
    *(_BYTE *)(v114 + 18) = *(_BYTE *)(v115 + 18);
    v117 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v118 = v114 + v117;
    v119 = v115 + v117;
    v120 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v120 - 8) + 16))(v118, v119, v120);
    v121 = 1;
  }
  else
  {
    *(_QWORD *)v114 = *(_QWORD *)v115;
    swift_retain();
    v121 = 0;
  }
  swift_storeEnumTagMultiPayload(v114, v116, v121);
  v122 = v33[10];
  v123 = v35 + v122;
  v124 = v34 + v122;
  v125 = *(_QWORD *)v124;
  v126 = *(_QWORD *)(v124 + 8);
  v127 = *(_QWORD *)(v124 + 16);
  v128 = *(_QWORD *)(v124 + 24);
  v129 = *(_QWORD *)(v124 + 32);
  v130 = *(_QWORD *)(v124 + 40);
  v131 = *(_QWORD *)(v124 + 48);
  v132 = *(_QWORD *)(v124 + 56);
  v133 = *(_QWORD *)(v124 + 64);
  v158 = *(_BYTE *)(v124 + 72);
  sub_1000D4FF4(*(_QWORD *)v124, v126, v127, v128, v129, v130, v131, v132, v133, v158);
  *(_QWORD *)v123 = v125;
  *(_QWORD *)(v123 + 8) = v126;
  *(_QWORD *)(v123 + 16) = v127;
  *(_QWORD *)(v123 + 24) = v128;
  *(_QWORD *)(v123 + 32) = v129;
  *(_QWORD *)(v123 + 40) = v130;
  *(_QWORD *)(v123 + 48) = v131;
  *(_QWORD *)(v123 + 56) = v132;
  *(_QWORD *)(v123 + 64) = v133;
  *(_BYTE *)(v123 + 72) = v158;
  v134 = a3[11];
  v135 = v161 + v134;
  v136 = v160 + v134;
  v137 = *(_QWORD *)v136;
  LOBYTE(v126) = *(_BYTE *)(v136 + 8);
  sub_10008D47C(*(_QWORD *)v136, v126);
  *(_QWORD *)v135 = v137;
  *(_BYTE *)(v135 + 8) = v126;
  v138 = a3[12];
  v139 = v161 + v138;
  v140 = v160 + v138;
  v141 = *(_QWORD *)v140;
  v142 = *(_QWORD *)(v140 + 8);
  v143 = *(_QWORD *)(v140 + 16);
  v144 = *(_QWORD *)(v140 + 24);
  LOBYTE(v129) = *(_BYTE *)(v140 + 32);
  sub_1000D55E4(*(_QWORD *)v140, v142, v143, v144, v129);
  *(_QWORD *)v139 = v141;
  *(_QWORD *)(v139 + 8) = v142;
  *(_QWORD *)(v139 + 16) = v143;
  *(_QWORD *)(v139 + 24) = v144;
  *(_BYTE *)(v139 + 32) = v129;
  v145 = a3[13];
  v146 = (_QWORD *)(v161 + v145);
  v147 = (_QWORD *)(v160 + v145);
  v148 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v147) == 1)
  {
    v149 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v149 - 8) + 16))(v146, v147, v149);
    v150 = 1;
  }
  else
  {
    *v146 = *v147;
    swift_retain();
    v150 = 0;
  }
  swift_storeEnumTagMultiPayload(v146, v148, v150);
  v151 = a3[14];
  v152 = v161 + v151;
  v153 = v160 + v151;
  v154 = *(_QWORD *)v153;
  v155 = *(_BYTE *)(v153 + 8);
  sub_10008D47C(*(_QWORD *)v153, v155);
  *(_QWORD *)v152 = v154;
  *(_BYTE *)(v152 + 8) = v155;
  return v161;
}

uint64_t sub_100713748(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  int *v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int v33;
  uint64_t v34;
  void *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  void *v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const void *v81;
  int v82;
  int v83;
  size_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  void *v91;
  const void *v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  _BYTE *v100;
  int *v101;
  int v102;
  int v103;
  uint64_t v104;
  _BYTE *v105;
  _BYTE *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  void *v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  const void *v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  _QWORD *v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char v225;
  uint64_t v226;
  char v227;
  uint64_t v229;
  _BYTE *v230;
  _BYTE *v231;
  uint64_t v232;
  uint64_t v233;
  void *__dst;
  char __dsta;
  int *v236;
  uint64_t v237;
  int *v238;
  uint64_t v239;
  int *v240;
  int *v241;
  uint64_t v242;

  v6 = type metadata accessor for Location.Identifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = (int *)type metadata accessor for LocationViewModel(0);
  v10 = v9[5];
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  v13 = _s7Weather24LocationCompositionStateOwet_0(a1 + v10, 1, v6);
  v14 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v6);
  v236 = a3;
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v11, v12, v6);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v11, v6);
LABEL_6:
    v15 = sub_1000BA294(&qword_100BCD680);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v8((uint64_t)v11, (uint64_t)v12, v6);
LABEL_7:
  v16 = v9[6];
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_QWORD *)v17 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(v17 + 8) = *(_QWORD *)(a2 + v16 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(v18 + 16);
  v20 = *(_QWORD *)(v18 + 24);
  v21 = *(_QWORD *)(v18 + 32);
  v22 = *(_QWORD *)(v18 + 40);
  v23 = *(_BYTE *)(v18 + 48);
  sub_100176D88(v19, v20, v21, v22, v23);
  v24 = *(_QWORD *)(v17 + 16);
  v25 = *(_QWORD *)(v17 + 24);
  v26 = *(_QWORD *)(v17 + 32);
  v27 = *(_QWORD *)(v17 + 40);
  *(_QWORD *)(v17 + 16) = v19;
  *(_QWORD *)(v17 + 24) = v20;
  *(_QWORD *)(v17 + 32) = v21;
  *(_QWORD *)(v17 + 40) = v22;
  v28 = *(_BYTE *)(v17 + 48);
  *(_BYTE *)(v17 + 48) = v23;
  sub_100176DD4(v24, v25, v26, v27, v28);
  *(_QWORD *)(v17 + 56) = *(_QWORD *)(v18 + 56);
  *(_QWORD *)(v17 + 64) = *(_QWORD *)(v18 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v17 + 72) = *(_QWORD *)(v18 + 72);
  *(_QWORD *)(v17 + 80) = *(_QWORD *)(v18 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v17 + 88) = *(_QWORD *)(v18 + 88);
  *(_QWORD *)(v17 + 96) = *(_QWORD *)(v18 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v17 + 104) = *(_QWORD *)(v18 + 104);
  *(_QWORD *)(v17 + 112) = *(_QWORD *)(v18 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v17 + 120) = *(_QWORD *)(v18 + 120);
  *(_QWORD *)(v17 + 128) = *(_QWORD *)(v18 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v17 + 136) = *(_BYTE *)(v18 + 136);
  *(_BYTE *)(v17 + 137) = *(_BYTE *)(v18 + 137);
  *(_BYTE *)(v17 + 138) = *(_BYTE *)(v18 + 138);
  *(_QWORD *)(v17 + 144) = *(_QWORD *)(v18 + 144);
  *(_QWORD *)(v17 + 152) = *(_QWORD *)(v18 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v17 + 160) = *(_BYTE *)(v18 + 160);
  *(_BYTE *)(v17 + 161) = *(_BYTE *)(v18 + 161);
  *(_QWORD *)(a1 + v9[7]) = *(_QWORD *)(a2 + v9[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v9[8]) = *(_QWORD *)(a2 + v9[8]);
  swift_retain();
  swift_release();
  v29 = v9[9];
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = (int *)type metadata accessor for LocationFooterViewModel(0);
  LODWORD(v19) = _s7Weather24LocationCompositionStateOwet_0(v30, 1, (uint64_t)v32);
  v33 = _s7Weather24LocationCompositionStateOwet_0(v31, 1, (uint64_t)v32);
  if ((_DWORD)v19)
  {
    if (!v33)
    {
      *(_BYTE *)v30 = *(_BYTE *)v31;
      *(_BYTE *)(v30 + 1) = *(_BYTE *)(v31 + 1);
      *(_BYTE *)(v30 + 2) = *(_BYTE *)(v31 + 2);
      *(_QWORD *)(v30 + 8) = *(_QWORD *)(v31 + 8);
      *(_QWORD *)(v30 + 16) = *(_QWORD *)(v31 + 16);
      v34 = v32[8];
      v237 = v30;
      v35 = (void *)(v30 + v34);
      v36 = (const void *)(v31 + v34);
      v37 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v36, 1, v37))
      {
        v38 = sub_1000BA294(&qword_100BD4280);
        memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v35, 0, 1, v37);
      }
      v240 = v32;
      v47 = v32[9];
      v48 = v237 + v47;
      v49 = v31 + v47;
      *(_BYTE *)v48 = *(_BYTE *)(v31 + v47);
      *(_QWORD *)(v48 + 8) = *(_QWORD *)(v31 + v47 + 8);
      v50 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
      v51 = v50[6];
      __dst = (void *)(v48 + v51);
      v52 = (const void *)(v49 + v51);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v52, 1, v37))
      {
        v53 = sub_1000BA294(&qword_100BD4280);
        memcpy(__dst, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(__dst, v52, v37);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v37);
      }
      v54 = v50[7];
      v55 = (_QWORD *)(v48 + v54);
      v56 = (_QWORD *)(v49 + v54);
      *v55 = *v56;
      v55[1] = v56[1];
      *(_QWORD *)(v48 + v50[8]) = *(_QWORD *)(v49 + v50[8]);
      *(_BYTE *)(v237 + v32[10]) = *(_BYTE *)(v31 + v32[10]);
      v57 = v32[11];
      v58 = (void *)(v237 + v57);
      v59 = (const void *)(v31 + v57);
      v60 = type metadata accessor for LocationOfInterest(0);
      swift_bridgeObjectRetain();
      swift_retain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v59, 1, v60))
      {
        v61 = sub_1000BA294(&qword_100BC3118);
        memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v58, v59, v60);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v58, 0, 1, v60);
      }
      v62 = v32;
      *(_BYTE *)(v237 + v32[12]) = *(_BYTE *)(v31 + v32[12]);
      *(_BYTE *)(v237 + v32[13]) = *(_BYTE *)(v31 + v32[13]);
      v63 = v32[14];
      v64 = (_BYTE *)(v237 + v63);
      v65 = (_BYTE *)(v31 + v63);
      v66 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v65, 1, (uint64_t)v66))
      {
        v67 = sub_1000BA294(&qword_100BCD688);
        memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
      }
      else
      {
        *v64 = *v65;
        v68 = v66[5];
        v69 = &v64[v68];
        v70 = &v65[v68];
        v71 = type metadata accessor for Location(0);
        v72 = v69;
        v62 = v240;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v72, v70, v71);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(&v64[v66[6]], &v65[v66[6]], v60);
        v64[v66[7]] = v65[v66[7]];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v64, 0, 1, (uint64_t)v66);
      }
      v40 = v236;
      v73 = v237;
      v74 = (uint64_t)v62;
      goto LABEL_29;
    }
LABEL_13:
    v39 = sub_1000BA294(&qword_100BCD690);
    memcpy((void *)v30, (const void *)v31, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    v40 = v236;
    goto LABEL_54;
  }
  if (v33)
  {
    sub_1000215BC(v30, type metadata accessor for LocationFooterViewModel);
    goto LABEL_13;
  }
  *(_BYTE *)v30 = *(_BYTE *)v31;
  *(_BYTE *)(v30 + 1) = *(_BYTE *)(v31 + 1);
  *(_BYTE *)(v30 + 2) = *(_BYTE *)(v31 + 2);
  *(_QWORD *)(v30 + 8) = *(_QWORD *)(v31 + 8);
  *(_QWORD *)(v30 + 16) = *(_QWORD *)(v31 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v41 = v32[8];
  v42 = (void *)(v30 + v41);
  v43 = (const void *)(v31 + v41);
  v44 = type metadata accessor for URL(0);
  v45 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v42, 1, v44);
  v46 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v43, 1, v44);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v42, 0, 1, v44);
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  v75 = *(_QWORD *)(v44 - 8);
  if (v46)
  {
    (*(void (**)(void *, uint64_t))(v75 + 8))(v42, v44);
LABEL_32:
    v76 = sub_1000BA294(&qword_100BD4280);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_33;
  }
  (*(void (**)(void *, const void *, uint64_t))(v75 + 24))(v42, v43, v44);
LABEL_33:
  v241 = v32;
  v77 = v32[9];
  v78 = v30 + v77;
  v79 = v31 + v77;
  *(_BYTE *)v78 = *(_BYTE *)(v31 + v77);
  *(_QWORD *)(v78 + 8) = *(_QWORD *)(v31 + v77 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v238 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
  v80 = v238[6];
  v81 = (const void *)(v79 + v80);
  v233 = v78 + v80;
  v82 = _s7Weather24LocationCompositionStateOwet_0(v78 + v80, 1, v44);
  v83 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v81, 1, v44);
  if (v82)
  {
    if (v83)
    {
      v84 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD4280) - 8) + 64);
      v85 = (void *)v233;
LABEL_38:
      memcpy(v85, v81, v84);
      goto LABEL_42;
    }
    (*(void (**)(uint64_t, const void *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v233, v81, v44);
    _s7Weather24LocationCompositionStateOwst_0(v233, 0, 1, v44);
  }
  else
  {
    v86 = *(_QWORD *)(v44 - 8);
    if (v83)
    {
      (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v233, v44);
      v84 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD4280) - 8) + 64);
      v85 = (void *)v233;
      goto LABEL_38;
    }
    (*(void (**)(uint64_t, const void *, uint64_t))(v86 + 24))(v233, v81, v44);
  }
LABEL_42:
  v87 = v238[7];
  v88 = (_QWORD *)(v78 + v87);
  v89 = (_QWORD *)(v79 + v87);
  *v88 = *v89;
  v88[1] = v89[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v78 + v238[8]) = *(_QWORD *)(v79 + v238[8]);
  swift_retain();
  swift_release();
  *(_BYTE *)(v30 + v241[10]) = *(_BYTE *)(v31 + v241[10]);
  v90 = v241[11];
  v91 = (void *)(v30 + v90);
  v92 = (const void *)(v31 + v90);
  v93 = type metadata accessor for LocationOfInterest(0);
  v94 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v91, 1, v93);
  v95 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v92, 1, v93);
  if (v94)
  {
    if (!v95)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v93 - 8) + 16))(v91, v92, v93);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v91, 0, 1, v93);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  v96 = *(_QWORD *)(v93 - 8);
  if (v95)
  {
    (*(void (**)(void *, uint64_t))(v96 + 8))(v91, v93);
LABEL_47:
    v97 = sub_1000BA294(&qword_100BC3118);
    memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
    goto LABEL_48;
  }
  (*(void (**)(void *, const void *, uint64_t))(v96 + 24))(v91, v92, v93);
LABEL_48:
  *(_BYTE *)(v30 + v241[12]) = *(_BYTE *)(v31 + v241[12]);
  *(_BYTE *)(v30 + v241[13]) = *(_BYTE *)(v31 + v241[13]);
  v98 = v241[14];
  v99 = (_BYTE *)(v30 + v98);
  v100 = (_BYTE *)(v31 + v98);
  v101 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
  v102 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v99, 1, (uint64_t)v101);
  v103 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v100, 1, (uint64_t)v101);
  v40 = v236;
  if (v102)
  {
    if (!v103)
    {
      *v99 = *v100;
      v104 = v101[5];
      v105 = &v99[v104];
      v106 = &v100[v104];
      v107 = type metadata accessor for Location(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v107 - 8) + 16))(v105, v106, v107);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v93 - 8) + 16))(&v99[v101[6]], &v100[v101[6]], v93);
      v99[v101[7]] = v100[v101[7]];
      v73 = (uint64_t)v99;
      v74 = (uint64_t)v101;
LABEL_29:
      _s7Weather24LocationCompositionStateOwst_0(v73, 0, 1, v74);
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  if (v103)
  {
    sub_1000215BC((uint64_t)v99, type metadata accessor for HomeAndWorkRefinementRowViewModel);
LABEL_53:
    v108 = sub_1000BA294(&qword_100BCD688);
    memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
    goto LABEL_54;
  }
  *v99 = *v100;
  v229 = v101[5];
  v230 = &v99[v229];
  v231 = &v100[v229];
  v232 = type metadata accessor for Location(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v232 - 8) + 24))(v230, v231, v232);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v93 - 8) + 24))(&v99[v101[6]], &v100[v101[6]], v93);
  v99[v101[7]] = v100[v101[7]];
LABEL_54:
  *(_BYTE *)(a1 + v9[10]) = *(_BYTE *)(a2 + v9[10]);
  *(_BYTE *)(a1 + v9[11]) = *(_BYTE *)(a2 + v9[11]);
  *(_BYTE *)(a1 + v9[12]) = *(_BYTE *)(a2 + v9[12]);
  *(_BYTE *)(a1 + v9[13]) = *(_BYTE *)(a2 + v9[13]);
  *(_BYTE *)(a1 + v9[14]) = *(_BYTE *)(a2 + v9[14]);
  v109 = v9[15];
  v110 = *(void **)(a2 + v109);
  v111 = *(void **)(a1 + v109);
  *(_QWORD *)(a1 + v109) = v110;
  v112 = v110;

  *(_BYTE *)(a1 + v9[16]) = *(_BYTE *)(a2 + v9[16]);
  *(_BYTE *)(a1 + v9[17]) = *(_BYTE *)(a2 + v9[17]);
  *(_BYTE *)(a1 + v9[18]) = *(_BYTE *)(a2 + v9[18]);
  v113 = v9[19];
  v114 = a1 + v113;
  v115 = a2 + v113;
  v116 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 24))(v114, v115, v116);
  v117 = v9[20];
  v118 = (void *)(a1 + v117);
  v119 = (const void *)(a2 + v117);
  v120 = type metadata accessor for ForegroundEffect(0);
  LODWORD(v114) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v118, 1, v120);
  v121 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v119, 1, v120);
  if ((_DWORD)v114)
  {
    if (!v121)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v120 - 8) + 16))(v118, v119, v120);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v118, 0, 1, v120);
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  v122 = *(_QWORD *)(v120 - 8);
  if (v121)
  {
    (*(void (**)(void *, uint64_t))(v122 + 8))(v118, v120);
LABEL_59:
    v123 = sub_1000BA294(&qword_100BC5B30);
    memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
    goto LABEL_60;
  }
  (*(void (**)(void *, const void *, uint64_t))(v122 + 24))(v118, v119, v120);
LABEL_60:
  *(_BYTE *)(a1 + v9[21]) = *(_BYTE *)(a2 + v9[21]);
  *(_QWORD *)(a1 + v9[22]) = *(_QWORD *)(a2 + v9[22]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + v9[23]) = *(_BYTE *)(a2 + v9[23]);
  v124 = v9[24];
  v125 = a1 + v124;
  v126 = a2 + v124;
  v127 = type metadata accessor for LocationEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v127 - 8) + 24))(v125, v126, v127);
  v128 = v40[5];
  v129 = a1 + v128;
  v130 = a2 + v128;
  v131 = *(_QWORD *)(a2 + v128);
  v132 = *(_QWORD *)(a2 + v128 + 8);
  v133 = *(_BYTE *)(a2 + v128 + 16);
  sub_1000D55D4(v131, v132, v133);
  v134 = *(_QWORD *)v129;
  v135 = *(_QWORD *)(v129 + 8);
  v136 = *(_BYTE *)(v129 + 16);
  *(_QWORD *)v129 = v131;
  *(_QWORD *)(v129 + 8) = v132;
  *(_BYTE *)(v129 + 16) = v133;
  sub_1000D31B4(v134, v135, v136);
  *(_QWORD *)(v129 + 24) = *(_QWORD *)(v130 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v137 = v40[6];
  v138 = a1 + v137;
  v139 = a2 + v137;
  v140 = *(_QWORD *)(a2 + v137);
  v141 = *(_QWORD *)(a2 + v137 + 8);
  v142 = *(_BYTE *)(a2 + v137 + 16);
  sub_1000D55D4(v140, v141, v142);
  v143 = *(_QWORD *)v138;
  v144 = *(_QWORD *)(v138 + 8);
  v145 = *(_BYTE *)(v138 + 16);
  *(_QWORD *)v138 = v140;
  *(_QWORD *)(v138 + 8) = v141;
  *(_BYTE *)(v138 + 16) = v142;
  sub_1000D31B4(v143, v144, v145);
  *(_QWORD *)(v138 + 24) = *(_QWORD *)(v139 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v146 = v40[7];
  v147 = a1 + v146;
  v148 = a2 + v146;
  v149 = *(_QWORD *)(a1 + v146 + 24);
  v150 = *(_QWORD *)(a2 + v146 + 24);
  if (v149)
  {
    if (v150)
    {
      v151 = *(_QWORD *)v148;
      v152 = *(_QWORD *)(v148 + 8);
      v153 = *(_BYTE *)(v148 + 16);
      sub_1000D55D4(*(_QWORD *)v148, v152, v153);
      v154 = *(_QWORD *)v147;
      v155 = *(_QWORD *)(v147 + 8);
      v156 = *(_BYTE *)(v147 + 16);
      *(_QWORD *)v147 = v151;
      *(_QWORD *)(v147 + 8) = v152;
      *(_BYTE *)(v147 + 16) = v153;
      sub_1000D31B4(v154, v155, v156);
      *(_QWORD *)(v147 + 24) = *(_QWORD *)(v148 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100176E20(v147);
      v160 = *(_OWORD *)(v148 + 16);
      *(_OWORD *)v147 = *(_OWORD *)v148;
      *(_OWORD *)(v147 + 16) = v160;
    }
  }
  else if (v150)
  {
    v157 = *(_QWORD *)v148;
    v158 = *(_QWORD *)(v148 + 8);
    v159 = *(_BYTE *)(v148 + 16);
    sub_1000D55D4(*(_QWORD *)v148, v158, v159);
    *(_QWORD *)v147 = v157;
    *(_QWORD *)(v147 + 8) = v158;
    *(_BYTE *)(v147 + 16) = v159;
    *(_QWORD *)(v147 + 24) = *(_QWORD *)(v148 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v161 = *(_OWORD *)(v148 + 16);
    *(_OWORD *)v147 = *(_OWORD *)v148;
    *(_OWORD *)(v147 + 16) = v161;
  }
  v162 = v40[8];
  v163 = a1 + v162;
  v164 = a2 + v162;
  v165 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v165 - 8) + 24))(v163, v164, v165);
  if (a1 != a2)
  {
    v166 = v40[9];
    v167 = a1 + v166;
    v168 = a2 + v166;
    sub_100021A14(a1 + v166, &qword_100BC37E0);
    v169 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(v168) == 1)
    {
      *(_QWORD *)v167 = *(_QWORD *)v168;
      *(_QWORD *)(v167 + 8) = *(_QWORD *)(v168 + 8);
      *(_BYTE *)(v167 + 16) = *(_BYTE *)(v168 + 16);
      *(_BYTE *)(v167 + 17) = *(_BYTE *)(v168 + 17);
      *(_BYTE *)(v167 + 18) = *(_BYTE *)(v168 + 18);
      v170 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v171 = v167 + v170;
      v172 = v168 + v170;
      v173 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v173 - 8) + 16))(v171, v172, v173);
      v174 = 1;
    }
    else
    {
      *(_QWORD *)v167 = *(_QWORD *)v168;
      swift_retain();
      v174 = 0;
    }
    swift_storeEnumTagMultiPayload(v167, v169, v174);
  }
  v175 = v40[10];
  v239 = a2;
  v242 = a1;
  v176 = a1 + v175;
  v177 = v239 + v175;
  v178 = *(_QWORD *)v177;
  v179 = *(_QWORD *)(v177 + 8);
  v180 = *(_QWORD *)(v177 + 16);
  v181 = *(_QWORD *)(v177 + 24);
  v182 = *(_QWORD *)(v177 + 32);
  v183 = *(_QWORD *)(v177 + 40);
  v184 = *(_QWORD *)(v177 + 48);
  v185 = *(_QWORD *)(v177 + 56);
  v186 = *(_QWORD *)(v177 + 64);
  __dsta = *(_BYTE *)(v177 + 72);
  sub_1000D4FF4(*(_QWORD *)v177, v179, v180, v181, v182, v183, v184, v185, v186, __dsta);
  v187 = *(_QWORD *)v176;
  v188 = *(_QWORD *)(v176 + 8);
  v189 = *(_QWORD *)(v176 + 16);
  v190 = *(_QWORD *)(v176 + 24);
  v191 = *(_QWORD *)(v176 + 32);
  v192 = *(_QWORD *)(v176 + 40);
  v193 = *(_QWORD *)(v176 + 48);
  v194 = *(_QWORD *)(v176 + 56);
  v195 = *(_QWORD *)(v176 + 64);
  v196 = *(_BYTE *)(v176 + 72);
  *(_QWORD *)v176 = v178;
  *(_QWORD *)(v176 + 8) = v179;
  *(_QWORD *)(v176 + 16) = v180;
  *(_QWORD *)(v176 + 24) = v181;
  *(_QWORD *)(v176 + 32) = v182;
  *(_QWORD *)(v176 + 40) = v183;
  *(_QWORD *)(v176 + 48) = v184;
  *(_QWORD *)(v176 + 56) = v185;
  *(_QWORD *)(v176 + 64) = v186;
  *(_BYTE *)(v176 + 72) = __dsta;
  sub_1000CEE98(v187, v188, v189, v190, v191, v192, v193, v194, v195, v196);
  v197 = v236[11];
  v198 = v242 + v197;
  v199 = v239 + v197;
  v200 = *(_QWORD *)v199;
  LOBYTE(v179) = *(_BYTE *)(v199 + 8);
  sub_10008D47C(*(_QWORD *)v199, v179);
  v201 = *(_QWORD *)v198;
  v202 = *(_BYTE *)(v198 + 8);
  *(_QWORD *)v198 = v200;
  *(_BYTE *)(v198 + 8) = v179;
  sub_1000B15F8(v201, v202);
  v203 = v236[12];
  v204 = v242 + v203;
  v205 = v239 + v203;
  v206 = *(_QWORD *)v205;
  v207 = *(_QWORD *)(v205 + 8);
  v208 = *(_QWORD *)(v205 + 16);
  v209 = *(_QWORD *)(v205 + 24);
  LOBYTE(v182) = *(_BYTE *)(v205 + 32);
  sub_1000D55E4(*(_QWORD *)v205, v207, v208, v209, v182);
  v210 = *(_QWORD *)v204;
  v211 = *(_QWORD *)(v204 + 8);
  v212 = *(_QWORD *)(v204 + 16);
  v213 = *(_QWORD *)(v204 + 24);
  v214 = *(_BYTE *)(v204 + 32);
  *(_QWORD *)v204 = v206;
  *(_QWORD *)(v204 + 8) = v207;
  *(_QWORD *)(v204 + 16) = v208;
  *(_QWORD *)(v204 + 24) = v209;
  *(_BYTE *)(v204 + 32) = v182;
  sub_1000D31C4(v210, v211, v212, v213, v214);
  if (v242 != v239)
  {
    v215 = v236[13];
    v216 = (_QWORD *)(v242 + v215);
    v217 = (_QWORD *)(v239 + v215);
    sub_100021A14(v242 + v215, &qword_100BC37D8);
    v218 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v217) == 1)
    {
      v219 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v219 - 8) + 16))(v216, v217, v219);
      v220 = 1;
    }
    else
    {
      *v216 = *v217;
      swift_retain();
      v220 = 0;
    }
    swift_storeEnumTagMultiPayload(v216, v218, v220);
  }
  v221 = v236[14];
  v222 = v242 + v221;
  v223 = v239 + v221;
  v224 = *(_QWORD *)v223;
  v225 = *(_BYTE *)(v223 + 8);
  sub_10008D47C(*(_QWORD *)v223, v225);
  v226 = *(_QWORD *)v222;
  v227 = *(_BYTE *)(v222 + 8);
  *(_QWORD *)v222 = v224;
  *(_BYTE *)(v222 + 8) = v225;
  sub_1000B15F8(v226, v227);
  return v242;
}

uint64_t sub_100714848(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  int *v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  int *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  _OWORD *v59;
  __int128 v60;
  _OWORD *v61;
  _OWORD *v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  _OWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  void *v88;
  const void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int *v96;
  int *v97;
  _BYTE *__dst;
  _BYTE *__dsta;

  v6 = type metadata accessor for Location.Identifier(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = (int *)type metadata accessor for LocationViewModel(0);
  v9 = v8[5];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  if (_s7Weather24LocationCompositionStateOwet_0(a2 + v9, 1, v6))
  {
    v12 = sub_1000BA294(&qword_100BCD680);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v10, (uint64_t)v11, v6);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v6);
  }
  memcpy((void *)(a1 + v8[6]), (const void *)(a2 + v8[6]), 0xA2uLL);
  *(_QWORD *)(a1 + v8[7]) = *(_QWORD *)(a2 + v8[7]);
  *(_QWORD *)(a1 + v8[8]) = *(_QWORD *)(a2 + v8[8]);
  v13 = v8[9];
  v14 = (_BYTE *)(a1 + v13);
  v15 = (_BYTE *)(a2 + v13);
  v16 = type metadata accessor for LocationFooterViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v16))
  {
    v17 = sub_1000BA294(&qword_100BCD690);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v97 = a3;
    *v14 = *v15;
    *(_WORD *)(v14 + 1) = *(_WORD *)(v15 + 1);
    *(_OWORD *)(v14 + 8) = *(_OWORD *)(v15 + 8);
    v18 = *(int *)(v16 + 32);
    v19 = &v14[v18];
    v20 = &v15[v18];
    v21 = type metadata accessor for URL(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v20, 1, v21))
    {
      v22 = sub_1000BA294(&qword_100BD4280);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v19, 0, 1, v21);
    }
    v96 = (int *)v16;
    v23 = *(int *)(v16 + 36);
    v24 = &v14[v23];
    v25 = &v15[v23];
    *v24 = v15[v23];
    *((_QWORD *)v24 + 1) = *(_QWORD *)&v15[v23 + 8];
    v26 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
    v27 = v26[6];
    __dst = &v24[v27];
    v28 = &v25[v27];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v25[v27], 1, v21))
    {
      v29 = sub_1000BA294(&qword_100BD4280);
      memcpy(__dst, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(__dst, v28, v21);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v21);
    }
    *(_OWORD *)&v24[v26[7]] = *(_OWORD *)&v25[v26[7]];
    *(_QWORD *)&v24[v26[8]] = *(_QWORD *)&v25[v26[8]];
    v14[v96[10]] = v15[v96[10]];
    v30 = v96[11];
    v31 = &v14[v30];
    v32 = &v15[v30];
    v33 = type metadata accessor for LocationOfInterest(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v32, 1, v33))
    {
      v34 = sub_1000BA294(&qword_100BC3118);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v31, 0, 1, v33);
    }
    v14[v96[12]] = v15[v96[12]];
    v14[v96[13]] = v15[v96[13]];
    v35 = v96[14];
    v36 = &v14[v35];
    v37 = &v15[v35];
    v38 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v37, 1, (uint64_t)v38))
    {
      v39 = sub_1000BA294(&qword_100BCD688);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      *v36 = *v37;
      v40 = v38[5];
      v41 = &v36[v40];
      __dsta = &v37[v40];
      v42 = type metadata accessor for Location(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v41, __dsta, v42);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(&v36[v38[6]], &v37[v38[6]], v33);
      v36[v38[7]] = v37[v38[7]];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v36, 0, 1, (uint64_t)v38);
    }
    a3 = v97;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 0, 1, (uint64_t)v96);
  }
  *(_BYTE *)(a1 + v8[10]) = *(_BYTE *)(a2 + v8[10]);
  *(_BYTE *)(a1 + v8[11]) = *(_BYTE *)(a2 + v8[11]);
  *(_BYTE *)(a1 + v8[12]) = *(_BYTE *)(a2 + v8[12]);
  *(_BYTE *)(a1 + v8[13]) = *(_BYTE *)(a2 + v8[13]);
  *(_BYTE *)(a1 + v8[14]) = *(_BYTE *)(a2 + v8[14]);
  *(_QWORD *)(a1 + v8[15]) = *(_QWORD *)(a2 + v8[15]);
  *(_BYTE *)(a1 + v8[16]) = *(_BYTE *)(a2 + v8[16]);
  *(_BYTE *)(a1 + v8[17]) = *(_BYTE *)(a2 + v8[17]);
  *(_BYTE *)(a1 + v8[18]) = *(_BYTE *)(a2 + v8[18]);
  v43 = v8[19];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
  v47 = v8[20];
  v48 = (void *)(a1 + v47);
  v49 = (const void *)(a2 + v47);
  v50 = type metadata accessor for ForegroundEffect(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v49, 1, v50))
  {
    v51 = sub_1000BA294(&qword_100BC5B30);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v48, v49, v50);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v48, 0, 1, v50);
  }
  *(_BYTE *)(a1 + v8[21]) = *(_BYTE *)(a2 + v8[21]);
  *(_QWORD *)(a1 + v8[22]) = *(_QWORD *)(a2 + v8[22]);
  *(_BYTE *)(a1 + v8[23]) = *(_BYTE *)(a2 + v8[23]);
  v52 = v8[24];
  v53 = a1 + v52;
  v54 = a2 + v52;
  v55 = type metadata accessor for LocationEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v53, v54, v55);
  v56 = a3[5];
  v57 = a3[6];
  v58 = (_OWORD *)(a1 + v56);
  v59 = (_OWORD *)(a2 + v56);
  v60 = v59[1];
  *v58 = *v59;
  v58[1] = v60;
  v61 = (_OWORD *)(a1 + v57);
  v62 = (_OWORD *)(a2 + v57);
  v63 = v62[1];
  *v61 = *v62;
  v61[1] = v63;
  v64 = a3[7];
  v65 = a3[8];
  v66 = *(_OWORD *)(a2 + v64);
  v67 = *(_OWORD *)(a2 + v64 + 16);
  v68 = (_OWORD *)(a1 + v64);
  *v68 = v66;
  v68[1] = v67;
  v69 = a1 + v65;
  v70 = a2 + v65;
  v71 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 32))(v69, v70, v71);
  v72 = a3[9];
  v73 = (char *)(a1 + v72);
  v74 = (char *)(a2 + v72);
  v75 = sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(v74) == 1)
  {
    *(_OWORD *)v73 = *(_OWORD *)v74;
    v73[16] = v74[16];
    v73[17] = v74[17];
    v73[18] = v74[18];
    v76 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v77 = &v73[v76];
    v78 = &v74[v76];
    v79 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 32))(v77, v78, v79);
    swift_storeEnumTagMultiPayload(v73, v75, 1);
  }
  else
  {
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
  }
  memcpy((void *)(a1 + a3[10]), (const void *)(a2 + a3[10]), 0x49uLL);
  v80 = a3[11];
  v81 = a3[12];
  v82 = a1 + v80;
  v83 = a2 + v80;
  *(_QWORD *)v82 = *(_QWORD *)v83;
  *(_BYTE *)(v82 + 8) = *(_BYTE *)(v83 + 8);
  v84 = a1 + v81;
  v85 = a2 + v81;
  v86 = *(_OWORD *)(v85 + 16);
  *(_OWORD *)v84 = *(_OWORD *)v85;
  *(_OWORD *)(v84 + 16) = v86;
  *(_BYTE *)(v84 + 32) = *(_BYTE *)(v85 + 32);
  v87 = a3[13];
  v88 = (void *)(a1 + v87);
  v89 = (const void *)(a2 + v87);
  v90 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v89) == 1)
  {
    v91 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v91 - 8) + 32))(v88, v89, v91);
    swift_storeEnumTagMultiPayload(v88, v90, 1);
  }
  else
  {
    memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
  }
  v92 = a3[14];
  v93 = a1 + v92;
  v94 = a2 + v92;
  *(_QWORD *)v93 = *(_QWORD *)v94;
  *(_BYTE *)(v93 + 8) = *(_BYTE *)(v94 + 8);
  return a1;
}

uint64_t sub_100714FC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  int *v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  int v37;
  uint64_t v38;
  void *v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  void *v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const void *v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  const void *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  const void *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  __int128 v156;
  uint64_t v157;
  void *v158;
  const void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  const void *v175;
  int v176;
  size_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  const void *v187;
  uint64_t v188;
  int v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _BYTE *v194;
  _BYTE *v195;
  int *v196;
  int v197;
  int v198;
  uint64_t v199;
  _BYTE *v200;
  _BYTE *v201;
  uint64_t v202;
  uint64_t v203;
  _BYTE *v204;
  _BYTE *v205;
  uint64_t v206;
  uint64_t v207;
  int *v208;
  uint64_t v209;
  void *__dst;
  _BYTE *__dstb;
  int *__dsta;
  int *v213;
  int *v214;

  v6 = type metadata accessor for Location.Identifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = (int *)type metadata accessor for LocationViewModel(0);
  v10 = v9[5];
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  v13 = _s7Weather24LocationCompositionStateOwet_0(a1 + v10, 1, v6);
  v14 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v6);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v11, v12, v6);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v11, v6);
LABEL_6:
    v15 = sub_1000BA294(&qword_100BCD680);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v8((uint64_t)v11, (uint64_t)v12, v6);
LABEL_7:
  v16 = v9[6];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_QWORD *)(a2 + v16 + 8);
  *(_QWORD *)v17 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(v17 + 8) = v19;
  swift_bridgeObjectRelease();
  v20 = *(_BYTE *)(v18 + 48);
  v21 = *(_QWORD *)(v17 + 16);
  v22 = *(_QWORD *)(v17 + 24);
  v23 = *(_QWORD *)(v17 + 32);
  v24 = *(_QWORD *)(v17 + 40);
  v25 = *(_OWORD *)(v18 + 32);
  *(_OWORD *)(v17 + 16) = *(_OWORD *)(v18 + 16);
  *(_OWORD *)(v17 + 32) = v25;
  v26 = *(_BYTE *)(v17 + 48);
  *(_BYTE *)(v17 + 48) = v20;
  sub_100176DD4(v21, v22, v23, v24, v26);
  v27 = *(_QWORD *)(v18 + 64);
  *(_QWORD *)(v17 + 56) = *(_QWORD *)(v18 + 56);
  *(_QWORD *)(v17 + 64) = v27;
  swift_bridgeObjectRelease();
  v28 = *(_QWORD *)(v18 + 80);
  *(_QWORD *)(v17 + 72) = *(_QWORD *)(v18 + 72);
  *(_QWORD *)(v17 + 80) = v28;
  swift_bridgeObjectRelease();
  v29 = *(_QWORD *)(v18 + 96);
  *(_QWORD *)(v17 + 88) = *(_QWORD *)(v18 + 88);
  *(_QWORD *)(v17 + 96) = v29;
  swift_bridgeObjectRelease();
  v30 = *(_QWORD *)(v18 + 112);
  *(_QWORD *)(v17 + 104) = *(_QWORD *)(v18 + 104);
  *(_QWORD *)(v17 + 112) = v30;
  swift_bridgeObjectRelease();
  v31 = *(_QWORD *)(v18 + 128);
  *(_QWORD *)(v17 + 120) = *(_QWORD *)(v18 + 120);
  *(_QWORD *)(v17 + 128) = v31;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v17 + 136) = *(_BYTE *)(v18 + 136);
  *(_BYTE *)(v17 + 137) = *(_BYTE *)(v18 + 137);
  *(_BYTE *)(v17 + 138) = *(_BYTE *)(v18 + 138);
  v32 = *(_QWORD *)(v18 + 152);
  *(_QWORD *)(v17 + 144) = *(_QWORD *)(v18 + 144);
  *(_QWORD *)(v17 + 152) = v32;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v17 + 160) = *(_BYTE *)(v18 + 160);
  *(_BYTE *)(v17 + 161) = *(_BYTE *)(v18 + 161);
  *(_QWORD *)(a1 + v9[7]) = *(_QWORD *)(a2 + v9[7]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v9[8]) = *(_QWORD *)(a2 + v9[8]);
  swift_release();
  v33 = v9[9];
  v34 = a1 + v33;
  v35 = a2 + v33;
  v36 = (int *)type metadata accessor for LocationFooterViewModel(0);
  LODWORD(v17) = _s7Weather24LocationCompositionStateOwet_0(v34, 1, (uint64_t)v36);
  v37 = _s7Weather24LocationCompositionStateOwet_0(v35, 1, (uint64_t)v36);
  if ((_DWORD)v17)
  {
    if (!v37)
    {
      v213 = a3;
      *(_BYTE *)v34 = *(_BYTE *)v35;
      *(_WORD *)(v34 + 1) = *(_WORD *)(v35 + 1);
      *(_OWORD *)(v34 + 8) = *(_OWORD *)(v35 + 8);
      v38 = v36[8];
      v39 = (void *)(v34 + v38);
      v40 = (const void *)(v35 + v38);
      v41 = type metadata accessor for URL(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v40, 1, v41))
      {
        v42 = sub_1000BA294(&qword_100BD4280);
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v39, v40, v41);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v39, 0, 1, v41);
      }
      v208 = v36;
      v53 = v36[9];
      v54 = v34 + v53;
      v55 = v35 + v53;
      *(_BYTE *)v54 = *(_BYTE *)(v35 + v53);
      *(_QWORD *)(v54 + 8) = *(_QWORD *)(v35 + v53 + 8);
      v56 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
      v57 = v56[6];
      __dst = (void *)(v54 + v57);
      v58 = (const void *)(v55 + v57);
      if (_s7Weather24LocationCompositionStateOwet_0(v55 + v57, 1, v41))
      {
        v59 = sub_1000BA294(&qword_100BD4280);
        memcpy(__dst, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(__dst, v58, v41);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v41);
      }
      *(_OWORD *)(v54 + v56[7]) = *(_OWORD *)(v55 + v56[7]);
      *(_QWORD *)(v54 + v56[8]) = *(_QWORD *)(v55 + v56[8]);
      *(_BYTE *)(v34 + v208[10]) = *(_BYTE *)(v35 + v208[10]);
      v60 = v208[11];
      v61 = (void *)(v34 + v60);
      v62 = (const void *)(v35 + v60);
      v63 = type metadata accessor for LocationOfInterest(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v62, 1, v63))
      {
        v64 = sub_1000BA294(&qword_100BC3118);
        memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v63 - 8) + 32))(v61, v62, v63);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v61, 0, 1, v63);
      }
      *(_BYTE *)(v34 + v208[12]) = *(_BYTE *)(v35 + v208[12]);
      *(_BYTE *)(v34 + v208[13]) = *(_BYTE *)(v35 + v208[13]);
      v65 = v208[14];
      v66 = (_BYTE *)(v34 + v65);
      v67 = (_BYTE *)(v35 + v65);
      v68 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v67, 1, (uint64_t)v68))
      {
        v69 = sub_1000BA294(&qword_100BCD688);
        memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
      }
      else
      {
        *v66 = *v67;
        v70 = v68[5];
        v71 = &v66[v70];
        __dstb = &v67[v70];
        v72 = type metadata accessor for Location(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v72 - 8) + 32))(v71, __dstb, v72);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v63 - 8) + 32))(&v66[v68[6]], &v67[v68[6]], v63);
        v66[v68[7]] = v67[v68[7]];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v66, 0, 1, (uint64_t)v68);
      }
      a3 = v213;
      v73 = v34;
      v74 = (uint64_t)v208;
      goto LABEL_30;
    }
    goto LABEL_13;
  }
  if (v37)
  {
    sub_1000215BC(v34, type metadata accessor for LocationFooterViewModel);
LABEL_13:
    v43 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BCD690) - 8) + 64);
    v44 = (void *)v34;
    v45 = (const void *)v35;
LABEL_14:
    memcpy(v44, v45, v43);
    goto LABEL_31;
  }
  v214 = a3;
  *(_BYTE *)v34 = *(_BYTE *)v35;
  *(_BYTE *)(v34 + 1) = *(_BYTE *)(v35 + 1);
  *(_BYTE *)(v34 + 2) = *(_BYTE *)(v35 + 2);
  v46 = *(_QWORD *)(v35 + 16);
  *(_QWORD *)(v34 + 8) = *(_QWORD *)(v35 + 8);
  *(_QWORD *)(v34 + 16) = v46;
  swift_bridgeObjectRelease();
  v47 = v36[8];
  v48 = (void *)(v34 + v47);
  v49 = (const void *)(v35 + v47);
  v50 = type metadata accessor for URL(0);
  v51 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v48, 1, v50);
  v52 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v49, 1, v50);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v48, v49, v50);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v48, 0, 1, v50);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  v169 = *(_QWORD *)(v50 - 8);
  if (v52)
  {
    (*(void (**)(void *, uint64_t))(v169 + 8))(v48, v50);
LABEL_54:
    v170 = sub_1000BA294(&qword_100BD4280);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(void *, const void *, uint64_t))(v169 + 40))(v48, v49, v50);
LABEL_55:
  v171 = v36[9];
  v172 = v34 + v171;
  v173 = v35 + v171;
  *(_BYTE *)v172 = *(_BYTE *)(v35 + v171);
  *(_QWORD *)(v172 + 8) = *(_QWORD *)(v35 + v171 + 8);
  swift_bridgeObjectRelease();
  v209 = v173;
  __dsta = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
  v174 = __dsta[6];
  v175 = (const void *)(v173 + v174);
  v207 = v172 + v174;
  LODWORD(v173) = _s7Weather24LocationCompositionStateOwet_0(v172 + v174, 1, v50);
  v176 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v175, 1, v50);
  if ((_DWORD)v173)
  {
    if (v176)
    {
      v177 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD4280) - 8) + 64);
      v178 = (void *)v207;
LABEL_60:
      memcpy(v178, v175, v177);
      goto LABEL_64;
    }
    (*(void (**)(uint64_t, const void *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v207, v175, v50);
    _s7Weather24LocationCompositionStateOwst_0(v207, 0, 1, v50);
  }
  else
  {
    v179 = *(_QWORD *)(v50 - 8);
    if (v176)
    {
      (*(void (**)(uint64_t, uint64_t))(v179 + 8))(v207, v50);
      v177 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD4280) - 8) + 64);
      v178 = (void *)v207;
      goto LABEL_60;
    }
    (*(void (**)(uint64_t, const void *, uint64_t))(v179 + 40))(v207, v175, v50);
  }
LABEL_64:
  v180 = __dsta[7];
  v181 = (_QWORD *)(v172 + v180);
  v182 = (uint64_t *)(v209 + v180);
  v184 = *v182;
  v183 = v182[1];
  *v181 = v184;
  v181[1] = v183;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v172 + __dsta[8]) = *(_QWORD *)(v209 + __dsta[8]);
  swift_release();
  *(_BYTE *)(v34 + v36[10]) = *(_BYTE *)(v35 + v36[10]);
  v185 = v36[11];
  v186 = (void *)(v34 + v185);
  v187 = (const void *)(v35 + v185);
  v188 = type metadata accessor for LocationOfInterest(0);
  v189 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v186, 1, v188);
  v190 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v187, 1, v188);
  if (v189)
  {
    if (!v190)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v188 - 8) + 32))(v186, v187, v188);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v186, 0, 1, v188);
      goto LABEL_70;
    }
    goto LABEL_69;
  }
  v191 = *(_QWORD *)(v188 - 8);
  if (v190)
  {
    (*(void (**)(void *, uint64_t))(v191 + 8))(v186, v188);
LABEL_69:
    v192 = sub_1000BA294(&qword_100BC3118);
    memcpy(v186, v187, *(_QWORD *)(*(_QWORD *)(v192 - 8) + 64));
    goto LABEL_70;
  }
  (*(void (**)(void *, const void *, uint64_t))(v191 + 40))(v186, v187, v188);
LABEL_70:
  *(_BYTE *)(v34 + v36[12]) = *(_BYTE *)(v35 + v36[12]);
  *(_BYTE *)(v34 + v36[13]) = *(_BYTE *)(v35 + v36[13]);
  v193 = v36[14];
  v194 = (_BYTE *)(v34 + v193);
  v195 = (_BYTE *)(v35 + v193);
  v196 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
  v197 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v194, 1, (uint64_t)v196);
  v198 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v195, 1, (uint64_t)v196);
  a3 = v214;
  if (v197)
  {
    if (!v198)
    {
      *v194 = *v195;
      v199 = v196[5];
      v200 = &v194[v199];
      v201 = &v195[v199];
      v202 = type metadata accessor for Location(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v202 - 8) + 32))(v200, v201, v202);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v188 - 8) + 32))(&v194[v196[6]], &v195[v196[6]], v188);
      v194[v196[7]] = v195[v196[7]];
      v73 = (uint64_t)v194;
      v74 = (uint64_t)v196;
LABEL_30:
      _s7Weather24LocationCompositionStateOwst_0(v73, 0, 1, v74);
      goto LABEL_31;
    }
    goto LABEL_75;
  }
  if (v198)
  {
    sub_1000215BC((uint64_t)v194, type metadata accessor for HomeAndWorkRefinementRowViewModel);
LABEL_75:
    v43 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BCD688) - 8) + 64);
    v44 = v194;
    v45 = v195;
    goto LABEL_14;
  }
  *v194 = *v195;
  v203 = v196[5];
  v204 = &v194[v203];
  v205 = &v195[v203];
  v206 = type metadata accessor for Location(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v206 - 8) + 40))(v204, v205, v206);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v188 - 8) + 40))(&v194[v196[6]], &v195[v196[6]], v188);
  v194[v196[7]] = v195[v196[7]];
LABEL_31:
  *(_BYTE *)(a1 + v9[10]) = *(_BYTE *)(a2 + v9[10]);
  *(_BYTE *)(a1 + v9[11]) = *(_BYTE *)(a2 + v9[11]);
  *(_BYTE *)(a1 + v9[12]) = *(_BYTE *)(a2 + v9[12]);
  *(_BYTE *)(a1 + v9[13]) = *(_BYTE *)(a2 + v9[13]);
  *(_BYTE *)(a1 + v9[14]) = *(_BYTE *)(a2 + v9[14]);
  v75 = v9[15];
  v76 = *(void **)(a1 + v75);
  *(_QWORD *)(a1 + v75) = *(_QWORD *)(a2 + v75);

  *(_BYTE *)(a1 + v9[16]) = *(_BYTE *)(a2 + v9[16]);
  *(_BYTE *)(a1 + v9[17]) = *(_BYTE *)(a2 + v9[17]);
  *(_BYTE *)(a1 + v9[18]) = *(_BYTE *)(a2 + v9[18]);
  v77 = v9[19];
  v78 = a1 + v77;
  v79 = a2 + v77;
  v80 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 40))(v78, v79, v80);
  v81 = v9[20];
  v82 = (void *)(a1 + v81);
  v83 = (const void *)(a2 + v81);
  v84 = type metadata accessor for ForegroundEffect(0);
  LODWORD(v78) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v82, 1, v84);
  v85 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v83, 1, v84);
  if ((_DWORD)v78)
  {
    if (!v85)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v84 - 8) + 32))(v82, v83, v84);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v82, 0, 1, v84);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  v86 = *(_QWORD *)(v84 - 8);
  if (v85)
  {
    (*(void (**)(void *, uint64_t))(v86 + 8))(v82, v84);
LABEL_36:
    v87 = sub_1000BA294(&qword_100BC5B30);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(void *, const void *, uint64_t))(v86 + 40))(v82, v83, v84);
LABEL_37:
  *(_BYTE *)(a1 + v9[21]) = *(_BYTE *)(a2 + v9[21]);
  *(_QWORD *)(a1 + v9[22]) = *(_QWORD *)(a2 + v9[22]);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + v9[23]) = *(_BYTE *)(a2 + v9[23]);
  v88 = v9[24];
  v89 = a1 + v88;
  v90 = a2 + v88;
  v91 = type metadata accessor for LocationEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 40))(v89, v90, v91);
  v92 = a3[5];
  v93 = a1 + v92;
  v94 = a2 + v92;
  LOBYTE(v92) = *(_BYTE *)(a2 + v92 + 16);
  v95 = *(_QWORD *)v93;
  v96 = *(_QWORD *)(v93 + 8);
  v97 = *(_BYTE *)(v93 + 16);
  *(_OWORD *)v93 = *(_OWORD *)v94;
  *(_BYTE *)(v93 + 16) = v92;
  sub_1000D31B4(v95, v96, v97);
  *(_QWORD *)(v93 + 24) = *(_QWORD *)(v94 + 24);
  swift_bridgeObjectRelease();
  v98 = a3[6];
  v99 = a1 + v98;
  v100 = a2 + v98;
  LOBYTE(v98) = *(_BYTE *)(a2 + v98 + 16);
  v101 = *(_QWORD *)v99;
  v102 = *(_QWORD *)(v99 + 8);
  v103 = *(_BYTE *)(v99 + 16);
  *(_OWORD *)v99 = *(_OWORD *)v100;
  *(_BYTE *)(v99 + 16) = v98;
  sub_1000D31B4(v101, v102, v103);
  *(_QWORD *)(v99 + 24) = *(_QWORD *)(v100 + 24);
  swift_bridgeObjectRelease();
  v104 = a3[7];
  v105 = a1 + v104;
  v106 = a2 + v104;
  if (*(_QWORD *)(a1 + v104 + 24))
  {
    if (*(_QWORD *)(v106 + 24))
    {
      v107 = *(_BYTE *)(v106 + 16);
      v108 = *(_QWORD *)v105;
      v109 = *(_QWORD *)(v105 + 8);
      v110 = *(_BYTE *)(v105 + 16);
      *(_OWORD *)v105 = *(_OWORD *)v106;
      *(_BYTE *)(v105 + 16) = v107;
      sub_1000D31B4(v108, v109, v110);
      *(_QWORD *)(v105 + 24) = *(_QWORD *)(v106 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_42;
    }
    sub_100176E20(v105);
  }
  v111 = *(_OWORD *)(v106 + 16);
  *(_OWORD *)v105 = *(_OWORD *)v106;
  *(_OWORD *)(v105 + 16) = v111;
LABEL_42:
  v112 = a3[8];
  v113 = a1 + v112;
  v114 = a2 + v112;
  v115 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v115 - 8) + 40))(v113, v114, v115);
  if (a1 != a2)
  {
    v116 = a3[9];
    v117 = (char *)(a1 + v116);
    v118 = (char *)(a2 + v116);
    sub_100021A14(a1 + v116, &qword_100BC37E0);
    v119 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(v118) == 1)
    {
      *(_OWORD *)v117 = *(_OWORD *)v118;
      v117[16] = v118[16];
      v117[17] = v118[17];
      v117[18] = v118[18];
      v120 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v121 = &v117[v120];
      v122 = &v118[v120];
      v123 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v123 - 8) + 32))(v121, v122, v123);
      swift_storeEnumTagMultiPayload(v117, v119, 1);
    }
    else
    {
      memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
    }
  }
  v124 = a3[10];
  v125 = a1 + v124;
  v126 = a2 + v124;
  v127 = *(_QWORD *)(v126 + 64);
  v128 = *(_BYTE *)(v126 + 72);
  v129 = *(_QWORD *)v125;
  v130 = *(_QWORD *)(v125 + 8);
  v131 = *(_QWORD *)(v125 + 16);
  v132 = *(_QWORD *)(v125 + 24);
  v133 = *(_QWORD *)(v125 + 32);
  v134 = *(_QWORD *)(v125 + 40);
  v135 = *(_QWORD *)(v125 + 48);
  v136 = *(_QWORD *)(v125 + 56);
  v137 = *(_QWORD *)(v125 + 64);
  v138 = *(_BYTE *)(v125 + 72);
  v139 = *(_OWORD *)(v126 + 16);
  *(_OWORD *)v125 = *(_OWORD *)v126;
  *(_OWORD *)(v125 + 16) = v139;
  v140 = *(_OWORD *)(v126 + 48);
  *(_OWORD *)(v125 + 32) = *(_OWORD *)(v126 + 32);
  *(_OWORD *)(v125 + 48) = v140;
  *(_QWORD *)(v125 + 64) = v127;
  *(_BYTE *)(v125 + 72) = v128;
  sub_1000CEE98(v129, v130, v131, v132, v133, v134, v135, v136, v137, v138);
  v141 = a3[11];
  v142 = a1 + v141;
  v143 = (uint64_t *)(a2 + v141);
  v144 = *v143;
  LOBYTE(v143) = *((_BYTE *)v143 + 8);
  v145 = *(_QWORD *)v142;
  v146 = *(_BYTE *)(v142 + 8);
  *(_QWORD *)v142 = v144;
  *(_BYTE *)(v142 + 8) = (_BYTE)v143;
  sub_1000B15F8(v145, v146);
  v147 = a3[12];
  v148 = a1 + v147;
  v149 = a2 + v147;
  v150 = *(_BYTE *)(v149 + 32);
  v151 = *(_QWORD *)v148;
  v152 = *(_QWORD *)(v148 + 8);
  v153 = *(_QWORD *)(v148 + 16);
  v154 = *(_QWORD *)(v148 + 24);
  v155 = *(_BYTE *)(v148 + 32);
  v156 = *(_OWORD *)(v149 + 16);
  *(_OWORD *)v148 = *(_OWORD *)v149;
  *(_OWORD *)(v148 + 16) = v156;
  *(_BYTE *)(v148 + 32) = v150;
  sub_1000D31C4(v151, v152, v153, v154, v155);
  if (a1 != a2)
  {
    v157 = a3[13];
    v158 = (void *)(a1 + v157);
    v159 = (const void *)(a2 + v157);
    sub_100021A14(a1 + v157, &qword_100BC37D8);
    v160 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v159) == 1)
    {
      v161 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v161 - 8) + 32))(v158, v159, v161);
      swift_storeEnumTagMultiPayload(v158, v160, 1);
    }
    else
    {
      memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64));
    }
  }
  v162 = a3[14];
  v163 = a1 + v162;
  v164 = (uint64_t *)(a2 + v162);
  v165 = *v164;
  LOBYTE(v164) = *((_BYTE *)v164 + 8);
  v166 = *(_QWORD *)v163;
  v167 = *(_BYTE *)(v163 + 8);
  *(_QWORD *)v163 = v165;
  *(_BYTE *)(v163 + 8) = (_BYTE)v164;
  sub_1000B15F8(v166, v167);
  return a1;
}

uint64_t sub_100715E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100715E74);
}

void sub_100715E74(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  sub_1000D1418();
  sub_100088FF0();
  if (v11)
  {
    v7 = v6;
    v8 = v4;
  }
  else
  {
    if ((_DWORD)v3 == 0x7FFFFFFF)
    {
      sub_10003BCA4(*(_QWORD *)(v4 + a3[5] + 24));
      sub_100079F70();
      return;
    }
    sub_1000BCF7C();
    sub_100088FF0();
    if (v11)
    {
      v7 = v9;
      v10 = a3[8];
    }
    else
    {
      sub_1000BA294(&qword_100BC3808);
      sub_100088FF0();
      if (v11)
      {
        v7 = v12;
        v10 = a3[9];
      }
      else
      {
        v7 = sub_1000BA294((uint64_t *)&unk_100C09CA0);
        v10 = a3[13];
      }
    }
    v8 = v4 + v10;
  }
  sub_1000B250C(v8, v3, v7);
}

uint64_t sub_100715F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100715F2C);
}

void sub_100715F2C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  sub_1000D1418();
  sub_10009D2E8();
  if (v13)
  {
    v9 = v8;
    v10 = v5;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      sub_10004A408();
      sub_100079F70();
      return;
    }
    sub_1000BCF7C();
    sub_10009D2E8();
    if (v13)
    {
      v9 = v11;
      v12 = a4[8];
    }
    else
    {
      sub_1000BA294(&qword_100BC3808);
      sub_10009D2E8();
      if (v13)
      {
        v9 = v14;
        v12 = a4[9];
      }
      else
      {
        v9 = sub_1000BA294((uint64_t *)&unk_100C09CA0);
        v12 = a4[13];
      }
    }
    v10 = v5 + v12;
  }
  sub_1000987C4(v10, v4, v4, v9);
}

void sub_100715FD4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[11];

  v2 = type metadata accessor for LocationViewModel(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    v10[1] = " ";
    v10[2] = " ";
    v10[3] = &unk_1009C28B0;
    v4 = type metadata accessor for Text.Measurements(319);
    if (v5 <= 0x3F)
    {
      v10[4] = *(_QWORD *)(v4 - 8) + 64;
      sub_100158B48(319, (unint64_t *)&qword_100BC3890, type metadata accessor for DisplayMetrics);
      if (v7 <= 0x3F)
      {
        v10[5] = *(_QWORD *)(v6 - 8) + 64;
        v10[6] = "I";
        v10[7] = &unk_1009C2038;
        v10[8] = &unk_1009C2050;
        sub_100158B48(319, (unint64_t *)&qword_100BC3888, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
        if (v9 <= 0x3F)
        {
          v10[9] = *(_QWORD *)(v8 - 8) + 64;
          v10[10] = &unk_1009C2038;
          swift_initStructMetadata(a1, 256, 11, v10, a1 + 16);
        }
      }
    }
  }
}

_QWORD *sub_1007160E0(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  int *v40;
  _QWORD *v41;
  _QWORD *v42;
  int *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  int *v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t, uint64_t);
  id v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  int *v157;
  int *v158;
  char v159;
  _QWORD *v160;
  int *v161;
  _QWORD *v162;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v15 = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Location.Identifier(0);
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = type metadata accessor for LocationViewModel(0);
    v10 = *(int *)(v9 + 20);
    v11 = &a1[v10];
    v12 = &a2[v10];
    v161 = a3;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&a2[v10], 1, v7))
    {
      v13 = sub_1000BA294(&qword_100BCD680);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v8(v11, v12, v7);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v7);
    }
    v16 = *(int *)(v9 + 24);
    v17 = &a1[v16];
    v18 = &a2[v16];
    v19 = *(_QWORD *)&a2[v16 + 8];
    *(_QWORD *)v17 = *(_QWORD *)&a2[v16];
    *((_QWORD *)v17 + 1) = v19;
    v20 = *(_QWORD *)&a2[v16 + 16];
    v21 = *(_QWORD *)&a2[v16 + 24];
    v22 = a2;
    v23 = *(_QWORD *)&a2[v16 + 32];
    v24 = *(_QWORD *)&a2[v16 + 40];
    v25 = a1;
    v26 = v18[48];
    swift_bridgeObjectRetain();
    sub_100176D88(v20, v21, v23, v24, v26);
    *((_QWORD *)v17 + 2) = v20;
    *((_QWORD *)v17 + 3) = v21;
    *((_QWORD *)v17 + 4) = v23;
    *((_QWORD *)v17 + 5) = v24;
    v17[48] = v26;
    v27 = *((_QWORD *)v18 + 8);
    *((_QWORD *)v17 + 7) = *((_QWORD *)v18 + 7);
    *((_QWORD *)v17 + 8) = v27;
    v28 = *((_QWORD *)v18 + 10);
    *((_QWORD *)v17 + 9) = *((_QWORD *)v18 + 9);
    *((_QWORD *)v17 + 10) = v28;
    v29 = *((_QWORD *)v18 + 12);
    *((_QWORD *)v17 + 11) = *((_QWORD *)v18 + 11);
    *((_QWORD *)v17 + 12) = v29;
    v30 = (int *)v9;
    v31 = *((_QWORD *)v18 + 14);
    *((_QWORD *)v17 + 13) = *((_QWORD *)v18 + 13);
    *((_QWORD *)v17 + 14) = v31;
    v32 = *((_QWORD *)v18 + 16);
    *((_QWORD *)v17 + 15) = *((_QWORD *)v18 + 15);
    *((_QWORD *)v17 + 16) = v32;
    v17[136] = v18[136];
    *(_WORD *)(v17 + 137) = *(_WORD *)(v18 + 137);
    v33 = *((_QWORD *)v18 + 19);
    *((_QWORD *)v17 + 18) = *((_QWORD *)v18 + 18);
    *((_QWORD *)v17 + 19) = v33;
    v17[160] = v18[160];
    v17[161] = v18[161];
    *(_QWORD *)((char *)v25 + v30[7]) = *(_QWORD *)((char *)v22 + v30[7]);
    *(_QWORD *)((char *)v25 + v30[8]) = *(_QWORD *)((char *)v22 + v30[8]);
    v158 = v30;
    v160 = v22;
    v34 = v30[9];
    v162 = v25;
    v35 = (char *)v25 + v34;
    v36 = (char *)v22 + v34;
    v37 = type metadata accessor for LocationFooterViewModel(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v38 = (int *)v37;
    swift_bridgeObjectRetain();
    swift_retain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v36, 1, v37))
    {
      v39 = sub_1000BA294(&qword_100BCD690);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      v41 = v160;
      v40 = v161;
      v42 = v162;
      v43 = v158;
    }
    else
    {
      *v35 = *v36;
      *(_WORD *)(v35 + 1) = *(_WORD *)(v36 + 1);
      v44 = v36;
      v45 = *((_QWORD *)v36 + 1);
      v46 = *((_QWORD *)v36 + 2);
      *((_QWORD *)v35 + 1) = v45;
      *((_QWORD *)v35 + 2) = v46;
      v47 = *(int *)(v37 + 32);
      v48 = &v35[v47];
      v49 = v44;
      v50 = &v44[v47];
      v51 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v50, 1, v51))
      {
        v52 = sub_1000BA294(&qword_100BD4280);
        memcpy(v48, v50, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v48, v50, v51);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v48, 0, 1, v51);
      }
      v40 = v161;
      v157 = v38;
      v53 = v38[9];
      v54 = &v35[v53];
      v55 = &v49[v53];
      *v54 = v49[v53];
      *((_QWORD *)v54 + 1) = *(_QWORD *)&v49[v53 + 8];
      v56 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
      v57 = v56[6];
      v58 = &v54[v57];
      v59 = &v55[v57];
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v59, 1, v51))
      {
        v60 = sub_1000BA294(&qword_100BD4280);
        memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v58, v59, v51);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v58, 0, 1, v51);
      }
      v61 = v56[7];
      v62 = &v54[v61];
      v63 = &v55[v61];
      v64 = v63[1];
      *v62 = *v63;
      v62[1] = v64;
      *(_QWORD *)&v54[v56[8]] = *(_QWORD *)&v55[v56[8]];
      v35[v157[10]] = v49[v157[10]];
      v65 = v157[11];
      v66 = &v35[v65];
      v67 = &v49[v65];
      v68 = type metadata accessor for LocationOfInterest(0);
      swift_bridgeObjectRetain();
      swift_retain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v67, 1, v68))
      {
        v69 = sub_1000BA294(&qword_100BC3118);
        memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v66, v67, v68);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v66, 0, 1, v68);
      }
      v35[v157[12]] = v49[v157[12]];
      v35[v157[13]] = v49[v157[13]];
      v70 = v157[14];
      v71 = &v35[v70];
      v72 = &v49[v70];
      v73 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v72, 1, (uint64_t)v73))
      {
        v74 = sub_1000BA294(&qword_100BCD688);
        memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
      }
      else
      {
        *v71 = *v72;
        v75 = v73[5];
        v76 = &v71[v75];
        v77 = &v72[v75];
        v78 = type metadata accessor for Location(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v78 - 8) + 16))(v76, v77, v78);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(&v71[v73[6]], &v72[v73[6]], v68);
        v71[v73[7]] = v72[v73[7]];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v71, 0, 1, (uint64_t)v73);
      }
      v43 = v158;
      v41 = v160;
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v35, 0, 1, (uint64_t)v157);
      v42 = v162;
    }
    *((_BYTE *)v42 + v43[10]) = *((_BYTE *)v41 + v43[10]);
    *((_BYTE *)v42 + v43[11]) = *((_BYTE *)v41 + v43[11]);
    *((_BYTE *)v42 + v43[12]) = *((_BYTE *)v41 + v43[12]);
    *((_BYTE *)v42 + v43[13]) = *((_BYTE *)v41 + v43[13]);
    *((_BYTE *)v42 + v43[14]) = *((_BYTE *)v41 + v43[14]);
    v79 = v43[15];
    v80 = *(void **)((char *)v41 + v79);
    *(_QWORD *)((char *)v42 + v79) = v80;
    *((_BYTE *)v42 + v43[16]) = *((_BYTE *)v41 + v43[16]);
    *((_BYTE *)v42 + v43[17]) = *((_BYTE *)v41 + v43[17]);
    *((_BYTE *)v42 + v43[18]) = *((_BYTE *)v41 + v43[18]);
    v81 = v43[19];
    v82 = (uint64_t)v42 + v81;
    v83 = (uint64_t)v41 + v81;
    v84 = type metadata accessor for Date(0);
    v85 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 16);
    v86 = v80;
    v85(v82, v83, v84);
    v87 = v43[20];
    v88 = (char *)v42 + v87;
    v89 = (char *)v41 + v87;
    v90 = type metadata accessor for ForegroundEffect(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v89, 1, v90))
    {
      v91 = sub_1000BA294(&qword_100BC5B30);
      memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 16))(v88, v89, v90);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v88, 0, 1, v90);
    }
    *((_BYTE *)v42 + v43[21]) = *((_BYTE *)v41 + v43[21]);
    *(_QWORD *)((char *)v42 + v43[22]) = *(_QWORD *)((char *)v41 + v43[22]);
    *((_BYTE *)v42 + v43[23]) = *((_BYTE *)v41 + v43[23]);
    v92 = v43[24];
    v93 = (uint64_t)v42 + v92;
    v94 = (uint64_t)v41 + v92;
    v95 = type metadata accessor for LocationEntity(0);
    v96 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v95 - 8) + 16);
    v97 = swift_bridgeObjectRetain();
    v96(v93, v94, v95, v97);
    v98 = v40[5];
    v99 = (uint64_t)v42 + v98;
    v100 = (uint64_t)v41 + v98;
    v101 = *(_QWORD *)((char *)v41 + v98);
    v102 = *(_QWORD *)((char *)v41 + v98 + 8);
    LOBYTE(v94) = *((_BYTE *)v41 + v98 + 16);
    sub_1000D55D4(v101, v102, v94);
    *(_QWORD *)v99 = v101;
    *(_QWORD *)(v99 + 8) = v102;
    *(_BYTE *)(v99 + 16) = v94;
    *(_QWORD *)(v99 + 24) = *(_QWORD *)(v100 + 24);
    v103 = v40[6];
    v104 = (uint64_t)v42 + v103;
    v105 = (uint64_t)v41 + v103;
    v106 = *(_QWORD *)((char *)v41 + v103);
    v107 = *(_QWORD *)((char *)v41 + v103 + 8);
    LOBYTE(v94) = *((_BYTE *)v41 + v103 + 16);
    swift_bridgeObjectRetain();
    sub_1000D55D4(v106, v107, v94);
    *(_QWORD *)v104 = v106;
    *(_QWORD *)(v104 + 8) = v107;
    *(_BYTE *)(v104 + 16) = v94;
    *(_QWORD *)(v104 + 24) = *(_QWORD *)(v105 + 24);
    v108 = v40[7];
    v109 = (uint64_t)v42 + v108;
    v110 = (uint64_t)v41 + v108;
    v111 = *(_QWORD *)((char *)v41 + v108 + 24);
    swift_bridgeObjectRetain();
    if (v111)
    {
      v112 = *(_QWORD *)v110;
      v113 = *(_QWORD *)(v110 + 8);
      v114 = *(_BYTE *)(v110 + 16);
      sub_1000D55D4(*(_QWORD *)v110, v113, v114);
      *(_QWORD *)v109 = v112;
      *(_QWORD *)(v109 + 8) = v113;
      *(_BYTE *)(v109 + 16) = v114;
      *(_QWORD *)(v109 + 24) = *(_QWORD *)(v110 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      v115 = *(_OWORD *)(v110 + 16);
      *(_OWORD *)v109 = *(_OWORD *)v110;
      *(_OWORD *)(v109 + 16) = v115;
    }
    v116 = v40[8];
    v117 = (uint64_t)v42 + v116;
    v118 = (uint64_t)v41 + v116;
    v119 = type metadata accessor for Text.Measurements(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v119 - 8) + 16))(v117, v118, v119);
    v120 = v40[9];
    v121 = (uint64_t)v42 + v120;
    v122 = (uint64_t)v41 + v120;
    v123 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(v122) == 1)
    {
      *(_OWORD *)v121 = *(_OWORD *)v122;
      *(_BYTE *)(v121 + 16) = *(_BYTE *)(v122 + 16);
      *(_BYTE *)(v121 + 17) = *(_BYTE *)(v122 + 17);
      *(_BYTE *)(v121 + 18) = *(_BYTE *)(v122 + 18);
      v124 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v125 = v121 + v124;
      v126 = v122 + v124;
      v127 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v127 - 8) + 16))(v125, v126, v127);
      v128 = 1;
    }
    else
    {
      *(_QWORD *)v121 = *(_QWORD *)v122;
      swift_retain();
      v128 = 0;
    }
    swift_storeEnumTagMultiPayload(v121, v123, v128);
    v129 = v40[10];
    v130 = (uint64_t)v42 + v129;
    v131 = (uint64_t)v41 + v129;
    v132 = *(_QWORD *)v131;
    v133 = *(_QWORD *)(v131 + 8);
    v134 = *(_QWORD *)(v131 + 16);
    v135 = *(_QWORD *)(v131 + 24);
    v136 = *(_QWORD *)(v131 + 32);
    v137 = *(_QWORD *)(v131 + 40);
    v138 = *(_QWORD *)(v131 + 48);
    v139 = *(_QWORD *)(v131 + 56);
    v140 = *(_QWORD *)(v131 + 64);
    v159 = *(_BYTE *)(v131 + 72);
    sub_1000D4FF4(*(_QWORD *)v131, v133, v134, v135, v136, v137, v138, v139, v140, v159);
    *(_QWORD *)v130 = v132;
    *(_QWORD *)(v130 + 8) = v133;
    *(_QWORD *)(v130 + 16) = v134;
    *(_QWORD *)(v130 + 24) = v135;
    *(_QWORD *)(v130 + 32) = v136;
    *(_QWORD *)(v130 + 40) = v137;
    *(_QWORD *)(v130 + 48) = v138;
    *(_QWORD *)(v130 + 56) = v139;
    *(_QWORD *)(v130 + 64) = v140;
    *(_BYTE *)(v130 + 72) = v159;
    v141 = v161[11];
    v142 = (uint64_t)v162 + v141;
    v143 = (uint64_t)v160 + v141;
    v144 = *(_QWORD *)v143;
    LOBYTE(v133) = *(_BYTE *)(v143 + 8);
    sub_10008D47C(*(_QWORD *)v143, v133);
    *(_QWORD *)v142 = v144;
    *(_BYTE *)(v142 + 8) = v133;
    v145 = v161[12];
    v146 = (_QWORD *)((char *)v162 + v145);
    v147 = (_QWORD *)((char *)v160 + v145);
    v148 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v147) == 1)
    {
      v149 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v149 - 8) + 16))(v146, v147, v149);
      v150 = 1;
    }
    else
    {
      *v146 = *v147;
      swift_retain();
      v150 = 0;
    }
    swift_storeEnumTagMultiPayload(v146, v148, v150);
    v151 = v161[13];
    v152 = (uint64_t)v162 + v151;
    v153 = (uint64_t)v160 + v151;
    v154 = *(_QWORD *)v153;
    v155 = *(_BYTE *)(v153 + 8);
    sub_10008D47C(*(_QWORD *)v153, v155);
    *(_QWORD *)v152 = v154;
    *(_BYTE *)(v152 + 8) = v155;
    return v162;
  }
  return (_QWORD *)v15;
}

uint64_t sub_100716AC0(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = type metadata accessor for Location.Identifier(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = (int *)type metadata accessor for LocationViewModel(0);
  v7 = a1 + v6[5];
  if (!_s7Weather24LocationCompositionStateOwet_0(v7, 1, v4))
    v5(v7, v4);
  v8 = a1 + v6[6];
  swift_bridgeObjectRelease();
  sub_100176DD4(*(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24), *(_QWORD *)(v8 + 32), *(_QWORD *)(v8 + 40), *(_BYTE *)(v8 + 48));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v9 = a1 + v6[9];
  v10 = (int *)type metadata accessor for LocationFooterViewModel(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v9, 1, (uint64_t)v10))
  {
    swift_bridgeObjectRelease();
    v11 = v9 + v10[8];
    v12 = type metadata accessor for URL(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v11, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
    v13 = v9 + v10[9];
    swift_bridgeObjectRelease();
    v14 = v13 + *(int *)(type metadata accessor for LearnMoreAttributorViewModel(0) + 24);
    if (!_s7Weather24LocationCompositionStateOwet_0(v14, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v14, v12);
    swift_bridgeObjectRelease();
    swift_release();
    v15 = v9 + v10[11];
    v16 = type metadata accessor for LocationOfInterest(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v15, 1, v16))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
    v17 = v9 + v10[14];
    v18 = type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v17, 1, v18))
    {
      v19 = v17 + *(int *)(v18 + 20);
      v20 = type metadata accessor for Location(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17 + *(int *)(v18 + 24), v16);
    }
  }

  v21 = a1 + v6[19];
  v22 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  v23 = a1 + v6[20];
  v24 = type metadata accessor for ForegroundEffect(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v23, 1, v24))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  swift_bridgeObjectRelease();
  v25 = a1 + v6[24];
  v26 = type metadata accessor for LocationEntity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
  sub_1000D31B4(*(_QWORD *)(a1 + a2[5]), *(_QWORD *)(a1 + a2[5] + 8), *(_BYTE *)(a1 + a2[5] + 16));
  swift_bridgeObjectRelease();
  sub_1000D31B4(*(_QWORD *)(a1 + a2[6]), *(_QWORD *)(a1 + a2[6] + 8), *(_BYTE *)(a1 + a2[6] + 16));
  swift_bridgeObjectRelease();
  v27 = a1 + a2[7];
  if (*(_QWORD *)(v27 + 24))
  {
    sub_1000D31B4(*(_QWORD *)v27, *(_QWORD *)(v27 + 8), *(_BYTE *)(v27 + 16));
    swift_bridgeObjectRelease();
  }
  v28 = a1 + a2[8];
  v29 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v28, v29);
  v30 = a1 + a2[9];
  sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(v30) == 1)
  {
    v31 = v30 + *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v32 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v31, v32);
  }
  else
  {
    swift_release();
  }
  v33 = a1 + a2[10];
  sub_1000CEE98(*(_QWORD *)v33, *(_QWORD *)(v33 + 8), *(_QWORD *)(v33 + 16), *(_QWORD *)(v33 + 24), *(_QWORD *)(v33 + 32), *(_QWORD *)(v33 + 40), *(_QWORD *)(v33 + 48), *(_QWORD *)(v33 + 56), *(_QWORD *)(v33 + 64), *(_BYTE *)(v33 + 72));
  sub_1000B15F8(*(_QWORD *)(a1 + a2[11]), *(_BYTE *)(a1 + a2[11] + 8));
  v34 = a1 + a2[12];
  sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v34) == 1)
  {
    v35 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v34, v35);
  }
  else
  {
    swift_release();
  }
  return sub_1000B15F8(*(_QWORD *)(a1 + a2[13]), *(_BYTE *)(a1 + a2[13] + 8));
}

uint64_t sub_100716F5C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  int *v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t, uint64_t);
  id v79;
  uint64_t v80;
  void *v81;
  const void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  int *v150;
  char v151;
  uint64_t v153;
  uint64_t v154;

  v5 = type metadata accessor for Location.Identifier(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16);
  v6(a1, a2, v5);
  v7 = (int *)type metadata accessor for LocationViewModel(0);
  v8 = v7[5];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  if (_s7Weather24LocationCompositionStateOwet_0(a2 + v8, 1, v5))
  {
    v11 = sub_1000BA294(&qword_100BCD680);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v6((uint64_t)v9, (uint64_t)v10, v5);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v5);
  }
  v12 = v7[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_QWORD *)(a2 + v12 + 8);
  *(_QWORD *)v13 = *(_QWORD *)(a2 + v12);
  *(_QWORD *)(v13 + 8) = v15;
  v16 = *(_QWORD *)(a2 + v12 + 16);
  v17 = *(_QWORD *)(a2 + v12 + 24);
  v18 = *(_QWORD *)(a2 + v12 + 32);
  v19 = *(_QWORD *)(a2 + v12 + 40);
  v20 = *(_BYTE *)(a2 + v12 + 48);
  swift_bridgeObjectRetain();
  sub_100176D88(v16, v17, v18, v19, v20);
  *(_QWORD *)(v13 + 16) = v16;
  *(_QWORD *)(v13 + 24) = v17;
  *(_QWORD *)(v13 + 32) = v18;
  *(_QWORD *)(v13 + 40) = v19;
  *(_BYTE *)(v13 + 48) = v20;
  v21 = *(_QWORD *)(v14 + 64);
  *(_QWORD *)(v13 + 56) = *(_QWORD *)(v14 + 56);
  *(_QWORD *)(v13 + 64) = v21;
  v22 = *(_QWORD *)(v14 + 80);
  *(_QWORD *)(v13 + 72) = *(_QWORD *)(v14 + 72);
  *(_QWORD *)(v13 + 80) = v22;
  v23 = *(_QWORD *)(v14 + 96);
  *(_QWORD *)(v13 + 88) = *(_QWORD *)(v14 + 88);
  *(_QWORD *)(v13 + 96) = v23;
  v24 = *(_QWORD *)(v14 + 112);
  *(_QWORD *)(v13 + 104) = *(_QWORD *)(v14 + 104);
  *(_QWORD *)(v13 + 112) = v24;
  v25 = *(_QWORD *)(v14 + 128);
  *(_QWORD *)(v13 + 120) = *(_QWORD *)(v14 + 120);
  *(_QWORD *)(v13 + 128) = v25;
  *(_BYTE *)(v13 + 136) = *(_BYTE *)(v14 + 136);
  *(_WORD *)(v13 + 137) = *(_WORD *)(v14 + 137);
  v26 = *(_QWORD *)(v14 + 152);
  *(_QWORD *)(v13 + 144) = *(_QWORD *)(v14 + 144);
  *(_QWORD *)(v13 + 152) = v26;
  *(_BYTE *)(v13 + 160) = *(_BYTE *)(v14 + 160);
  *(_BYTE *)(v13 + 161) = *(_BYTE *)(v14 + 161);
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  *(_QWORD *)(a1 + v7[8]) = *(_QWORD *)(a2 + v7[8]);
  v150 = v7;
  v27 = v7[9];
  v153 = a2;
  v154 = a1;
  v28 = (_BYTE *)(a1 + v27);
  v29 = (_BYTE *)(a2 + v27);
  v30 = type metadata accessor for LocationFooterViewModel(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v31 = (int *)v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v29, 1, v30))
  {
    v32 = sub_1000BA294(&qword_100BCD690);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    v33 = a3;
    v34 = v153;
    v35 = a1;
  }
  else
  {
    *v28 = *v29;
    *(_WORD *)(v28 + 1) = *(_WORD *)(v29 + 1);
    v36 = *((_QWORD *)v29 + 2);
    *((_QWORD *)v28 + 1) = *((_QWORD *)v29 + 1);
    *((_QWORD *)v28 + 2) = v36;
    v37 = *(int *)(v30 + 32);
    v38 = &v28[v37];
    v39 = &v29[v37];
    v40 = type metadata accessor for URL(0);
    swift_bridgeObjectRetain();
    v41 = v28;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v39, 1, v40))
    {
      v42 = sub_1000BA294(&qword_100BD4280);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v38, 0, 1, v40);
    }
    v43 = v31;
    v44 = v31[9];
    v45 = &v41[v44];
    v46 = &v29[v44];
    *v45 = v29[v44];
    *((_QWORD *)v45 + 1) = *(_QWORD *)&v29[v44 + 8];
    v47 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
    v48 = v47[6];
    v49 = &v45[v48];
    v50 = &v46[v48];
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v50, 1, v40))
    {
      v51 = sub_1000BA294(&qword_100BD4280);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v49, v50, v40);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v49, 0, 1, v40);
    }
    v52 = v47[7];
    v53 = &v45[v52];
    v54 = &v46[v52];
    v55 = v54[1];
    *v53 = *v54;
    v53[1] = v55;
    *(_QWORD *)&v45[v47[8]] = *(_QWORD *)&v46[v47[8]];
    v56 = (uint64_t)v43;
    v41[v43[10]] = v29[v43[10]];
    v57 = v43[11];
    v58 = &v41[v57];
    v59 = &v29[v57];
    v60 = type metadata accessor for LocationOfInterest(0);
    swift_bridgeObjectRetain();
    swift_retain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v59, 1, v60))
    {
      v61 = sub_1000BA294(&qword_100BC3118);
      memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v58, v59, v60);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v58, 0, 1, v60);
    }
    v41[v43[12]] = v29[v43[12]];
    v41[v43[13]] = v29[v43[13]];
    v62 = v43[14];
    v63 = (uint64_t)v41;
    v64 = &v41[v62];
    v65 = &v29[v62];
    v66 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v65, 1, (uint64_t)v66))
    {
      v67 = sub_1000BA294(&qword_100BCD688);
      memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    }
    else
    {
      *v64 = *v65;
      v68 = v66[5];
      v69 = &v64[v68];
      v70 = &v65[v68];
      v71 = type metadata accessor for Location(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v69, v70, v71);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(&v64[v66[6]], &v65[v66[6]], v60);
      v64[v66[7]] = v65[v66[7]];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v64, 0, 1, (uint64_t)v66);
    }
    v33 = a3;
    v35 = v154;
    _s7Weather24LocationCompositionStateOwst_0(v63, 0, 1, v56);
    v34 = v153;
  }
  *(_BYTE *)(v35 + v150[10]) = *(_BYTE *)(v34 + v150[10]);
  *(_BYTE *)(v35 + v150[11]) = *(_BYTE *)(v34 + v150[11]);
  *(_BYTE *)(v35 + v150[12]) = *(_BYTE *)(v34 + v150[12]);
  *(_BYTE *)(v35 + v150[13]) = *(_BYTE *)(v34 + v150[13]);
  *(_BYTE *)(v35 + v150[14]) = *(_BYTE *)(v34 + v150[14]);
  v72 = v150[15];
  v73 = *(void **)(v34 + v72);
  *(_QWORD *)(v35 + v72) = v73;
  *(_BYTE *)(v35 + v150[16]) = *(_BYTE *)(v34 + v150[16]);
  *(_BYTE *)(v35 + v150[17]) = *(_BYTE *)(v34 + v150[17]);
  *(_BYTE *)(v35 + v150[18]) = *(_BYTE *)(v34 + v150[18]);
  v74 = v150[19];
  v75 = v35 + v74;
  v76 = v34 + v74;
  v77 = type metadata accessor for Date(0);
  v78 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 16);
  v79 = v73;
  v78(v75, v76, v77);
  v80 = v150[20];
  v81 = (void *)(v35 + v80);
  v82 = (const void *)(v34 + v80);
  v83 = type metadata accessor for ForegroundEffect(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v82, 1, v83))
  {
    v84 = sub_1000BA294(&qword_100BC5B30);
    memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v83 - 8) + 16))(v81, v82, v83);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v81, 0, 1, v83);
  }
  *(_BYTE *)(v35 + v150[21]) = *(_BYTE *)(v34 + v150[21]);
  *(_QWORD *)(v35 + v150[22]) = *(_QWORD *)(v34 + v150[22]);
  *(_BYTE *)(v35 + v150[23]) = *(_BYTE *)(v34 + v150[23]);
  v85 = v150[24];
  v86 = v35 + v85;
  v87 = v34 + v85;
  v88 = type metadata accessor for LocationEntity(0);
  v89 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v88 - 8) + 16);
  v90 = swift_bridgeObjectRetain();
  v89(v86, v87, v88, v90);
  v91 = v33[5];
  v92 = v35 + v91;
  v93 = v34 + v91;
  v94 = *(_QWORD *)(v34 + v91);
  v95 = *(_QWORD *)(v34 + v91 + 8);
  LOBYTE(v87) = *(_BYTE *)(v34 + v91 + 16);
  sub_1000D55D4(v94, v95, v87);
  *(_QWORD *)v92 = v94;
  *(_QWORD *)(v92 + 8) = v95;
  *(_BYTE *)(v92 + 16) = v87;
  *(_QWORD *)(v92 + 24) = *(_QWORD *)(v93 + 24);
  v96 = v33[6];
  v97 = v35 + v96;
  v98 = v34 + v96;
  v99 = *(_QWORD *)(v34 + v96);
  v100 = *(_QWORD *)(v34 + v96 + 8);
  LOBYTE(v87) = *(_BYTE *)(v34 + v96 + 16);
  swift_bridgeObjectRetain();
  sub_1000D55D4(v99, v100, v87);
  *(_QWORD *)v97 = v99;
  *(_QWORD *)(v97 + 8) = v100;
  *(_BYTE *)(v97 + 16) = v87;
  *(_QWORD *)(v97 + 24) = *(_QWORD *)(v98 + 24);
  v101 = v33[7];
  v102 = v35 + v101;
  v103 = v34 + v101;
  v104 = *(_QWORD *)(v34 + v101 + 24);
  swift_bridgeObjectRetain();
  if (v104)
  {
    v105 = *(_QWORD *)v103;
    v106 = *(_QWORD *)(v103 + 8);
    v107 = *(_BYTE *)(v103 + 16);
    sub_1000D55D4(*(_QWORD *)v103, v106, v107);
    *(_QWORD *)v102 = v105;
    *(_QWORD *)(v102 + 8) = v106;
    *(_BYTE *)(v102 + 16) = v107;
    *(_QWORD *)(v102 + 24) = *(_QWORD *)(v103 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v108 = *(_OWORD *)(v103 + 16);
    *(_OWORD *)v102 = *(_OWORD *)v103;
    *(_OWORD *)(v102 + 16) = v108;
  }
  v109 = v33[8];
  v110 = v35 + v109;
  v111 = v34 + v109;
  v112 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 16))(v110, v111, v112);
  v113 = v33[9];
  v114 = v35 + v113;
  v115 = v34 + v113;
  v116 = sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(v115) == 1)
  {
    *(_OWORD *)v114 = *(_OWORD *)v115;
    *(_BYTE *)(v114 + 16) = *(_BYTE *)(v115 + 16);
    *(_BYTE *)(v114 + 17) = *(_BYTE *)(v115 + 17);
    *(_BYTE *)(v114 + 18) = *(_BYTE *)(v115 + 18);
    v117 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v118 = v114 + v117;
    v119 = v115 + v117;
    v120 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v120 - 8) + 16))(v118, v119, v120);
    v121 = 1;
  }
  else
  {
    *(_QWORD *)v114 = *(_QWORD *)v115;
    swift_retain();
    v121 = 0;
  }
  swift_storeEnumTagMultiPayload(v114, v116, v121);
  v122 = v33[10];
  v123 = v35 + v122;
  v124 = v34 + v122;
  v125 = *(_QWORD *)v124;
  v126 = *(_QWORD *)(v124 + 8);
  v127 = *(_QWORD *)(v124 + 16);
  v128 = *(_QWORD *)(v124 + 24);
  v129 = *(_QWORD *)(v124 + 32);
  v130 = *(_QWORD *)(v124 + 40);
  v131 = *(_QWORD *)(v124 + 48);
  v132 = *(_QWORD *)(v124 + 56);
  v133 = *(_QWORD *)(v124 + 64);
  v151 = *(_BYTE *)(v124 + 72);
  sub_1000D4FF4(*(_QWORD *)v124, v126, v127, v128, v129, v130, v131, v132, v133, v151);
  *(_QWORD *)v123 = v125;
  *(_QWORD *)(v123 + 8) = v126;
  *(_QWORD *)(v123 + 16) = v127;
  *(_QWORD *)(v123 + 24) = v128;
  *(_QWORD *)(v123 + 32) = v129;
  *(_QWORD *)(v123 + 40) = v130;
  *(_QWORD *)(v123 + 48) = v131;
  *(_QWORD *)(v123 + 56) = v132;
  *(_QWORD *)(v123 + 64) = v133;
  *(_BYTE *)(v123 + 72) = v151;
  v134 = a3[11];
  v135 = v154 + v134;
  v136 = v153 + v134;
  v137 = *(_QWORD *)v136;
  LOBYTE(v126) = *(_BYTE *)(v136 + 8);
  sub_10008D47C(*(_QWORD *)v136, v126);
  *(_QWORD *)v135 = v137;
  *(_BYTE *)(v135 + 8) = v126;
  v138 = a3[12];
  v139 = (_QWORD *)(v154 + v138);
  v140 = (_QWORD *)(v153 + v138);
  v141 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v140) == 1)
  {
    v142 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v142 - 8) + 16))(v139, v140, v142);
    v143 = 1;
  }
  else
  {
    *v139 = *v140;
    swift_retain();
    v143 = 0;
  }
  swift_storeEnumTagMultiPayload(v139, v141, v143);
  v144 = a3[13];
  v145 = v154 + v144;
  v146 = v153 + v144;
  v147 = *(_QWORD *)v146;
  v148 = *(_BYTE *)(v146 + 8);
  sub_10008D47C(*(_QWORD *)v146, v148);
  *(_QWORD *)v145 = v147;
  *(_BYTE *)(v145 + 8) = v148;
  return v154;
}

uint64_t sub_100717900(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  int *v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int v33;
  uint64_t v34;
  void *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  void *v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const void *v81;
  int v82;
  int v83;
  size_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  void *v91;
  const void *v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  _BYTE *v100;
  int *v101;
  int v102;
  int v103;
  uint64_t v104;
  _BYTE *v105;
  _BYTE *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  void *v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  const void *v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  uint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char v213;
  uint64_t v214;
  char v215;
  uint64_t v217;
  _BYTE *v218;
  _BYTE *v219;
  uint64_t v220;
  uint64_t v221;
  void *__dst;
  char __dsta;
  int *v224;
  uint64_t v225;
  int *v226;
  uint64_t v227;
  int *v228;
  int *v229;
  uint64_t v230;

  v6 = type metadata accessor for Location.Identifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = (int *)type metadata accessor for LocationViewModel(0);
  v10 = v9[5];
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  v13 = _s7Weather24LocationCompositionStateOwet_0(a1 + v10, 1, v6);
  v14 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v6);
  v224 = a3;
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v11, v12, v6);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v11, v6);
LABEL_6:
    v15 = sub_1000BA294(&qword_100BCD680);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v8((uint64_t)v11, (uint64_t)v12, v6);
LABEL_7:
  v16 = v9[6];
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_QWORD *)v17 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(v17 + 8) = *(_QWORD *)(a2 + v16 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(v18 + 16);
  v20 = *(_QWORD *)(v18 + 24);
  v21 = *(_QWORD *)(v18 + 32);
  v22 = *(_QWORD *)(v18 + 40);
  v23 = *(_BYTE *)(v18 + 48);
  sub_100176D88(v19, v20, v21, v22, v23);
  v24 = *(_QWORD *)(v17 + 16);
  v25 = *(_QWORD *)(v17 + 24);
  v26 = *(_QWORD *)(v17 + 32);
  v27 = *(_QWORD *)(v17 + 40);
  *(_QWORD *)(v17 + 16) = v19;
  *(_QWORD *)(v17 + 24) = v20;
  *(_QWORD *)(v17 + 32) = v21;
  *(_QWORD *)(v17 + 40) = v22;
  v28 = *(_BYTE *)(v17 + 48);
  *(_BYTE *)(v17 + 48) = v23;
  sub_100176DD4(v24, v25, v26, v27, v28);
  *(_QWORD *)(v17 + 56) = *(_QWORD *)(v18 + 56);
  *(_QWORD *)(v17 + 64) = *(_QWORD *)(v18 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v17 + 72) = *(_QWORD *)(v18 + 72);
  *(_QWORD *)(v17 + 80) = *(_QWORD *)(v18 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v17 + 88) = *(_QWORD *)(v18 + 88);
  *(_QWORD *)(v17 + 96) = *(_QWORD *)(v18 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v17 + 104) = *(_QWORD *)(v18 + 104);
  *(_QWORD *)(v17 + 112) = *(_QWORD *)(v18 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v17 + 120) = *(_QWORD *)(v18 + 120);
  *(_QWORD *)(v17 + 128) = *(_QWORD *)(v18 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v17 + 136) = *(_BYTE *)(v18 + 136);
  *(_BYTE *)(v17 + 137) = *(_BYTE *)(v18 + 137);
  *(_BYTE *)(v17 + 138) = *(_BYTE *)(v18 + 138);
  *(_QWORD *)(v17 + 144) = *(_QWORD *)(v18 + 144);
  *(_QWORD *)(v17 + 152) = *(_QWORD *)(v18 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v17 + 160) = *(_BYTE *)(v18 + 160);
  *(_BYTE *)(v17 + 161) = *(_BYTE *)(v18 + 161);
  *(_QWORD *)(a1 + v9[7]) = *(_QWORD *)(a2 + v9[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v9[8]) = *(_QWORD *)(a2 + v9[8]);
  swift_retain();
  swift_release();
  v29 = v9[9];
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = (int *)type metadata accessor for LocationFooterViewModel(0);
  LODWORD(v19) = _s7Weather24LocationCompositionStateOwet_0(v30, 1, (uint64_t)v32);
  v33 = _s7Weather24LocationCompositionStateOwet_0(v31, 1, (uint64_t)v32);
  if ((_DWORD)v19)
  {
    if (!v33)
    {
      *(_BYTE *)v30 = *(_BYTE *)v31;
      *(_BYTE *)(v30 + 1) = *(_BYTE *)(v31 + 1);
      *(_BYTE *)(v30 + 2) = *(_BYTE *)(v31 + 2);
      *(_QWORD *)(v30 + 8) = *(_QWORD *)(v31 + 8);
      *(_QWORD *)(v30 + 16) = *(_QWORD *)(v31 + 16);
      v34 = v32[8];
      v225 = v30;
      v35 = (void *)(v30 + v34);
      v36 = (const void *)(v31 + v34);
      v37 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v36, 1, v37))
      {
        v38 = sub_1000BA294(&qword_100BD4280);
        memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v35, 0, 1, v37);
      }
      v228 = v32;
      v47 = v32[9];
      v48 = v225 + v47;
      v49 = v31 + v47;
      *(_BYTE *)v48 = *(_BYTE *)(v31 + v47);
      *(_QWORD *)(v48 + 8) = *(_QWORD *)(v31 + v47 + 8);
      v50 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
      v51 = v50[6];
      __dst = (void *)(v48 + v51);
      v52 = (const void *)(v49 + v51);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v52, 1, v37))
      {
        v53 = sub_1000BA294(&qword_100BD4280);
        memcpy(__dst, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(__dst, v52, v37);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v37);
      }
      v54 = v50[7];
      v55 = (_QWORD *)(v48 + v54);
      v56 = (_QWORD *)(v49 + v54);
      *v55 = *v56;
      v55[1] = v56[1];
      *(_QWORD *)(v48 + v50[8]) = *(_QWORD *)(v49 + v50[8]);
      *(_BYTE *)(v225 + v32[10]) = *(_BYTE *)(v31 + v32[10]);
      v57 = v32[11];
      v58 = (void *)(v225 + v57);
      v59 = (const void *)(v31 + v57);
      v60 = type metadata accessor for LocationOfInterest(0);
      swift_bridgeObjectRetain();
      swift_retain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v59, 1, v60))
      {
        v61 = sub_1000BA294(&qword_100BC3118);
        memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v58, v59, v60);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v58, 0, 1, v60);
      }
      v62 = v32;
      *(_BYTE *)(v225 + v32[12]) = *(_BYTE *)(v31 + v32[12]);
      *(_BYTE *)(v225 + v32[13]) = *(_BYTE *)(v31 + v32[13]);
      v63 = v32[14];
      v64 = (_BYTE *)(v225 + v63);
      v65 = (_BYTE *)(v31 + v63);
      v66 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v65, 1, (uint64_t)v66))
      {
        v67 = sub_1000BA294(&qword_100BCD688);
        memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
      }
      else
      {
        *v64 = *v65;
        v68 = v66[5];
        v69 = &v64[v68];
        v70 = &v65[v68];
        v71 = type metadata accessor for Location(0);
        v72 = v69;
        v62 = v228;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v72, v70, v71);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(&v64[v66[6]], &v65[v66[6]], v60);
        v64[v66[7]] = v65[v66[7]];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v64, 0, 1, (uint64_t)v66);
      }
      v40 = v224;
      v73 = v225;
      v74 = (uint64_t)v62;
      goto LABEL_29;
    }
LABEL_13:
    v39 = sub_1000BA294(&qword_100BCD690);
    memcpy((void *)v30, (const void *)v31, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    v40 = v224;
    goto LABEL_54;
  }
  if (v33)
  {
    sub_1000215BC(v30, type metadata accessor for LocationFooterViewModel);
    goto LABEL_13;
  }
  *(_BYTE *)v30 = *(_BYTE *)v31;
  *(_BYTE *)(v30 + 1) = *(_BYTE *)(v31 + 1);
  *(_BYTE *)(v30 + 2) = *(_BYTE *)(v31 + 2);
  *(_QWORD *)(v30 + 8) = *(_QWORD *)(v31 + 8);
  *(_QWORD *)(v30 + 16) = *(_QWORD *)(v31 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v41 = v32[8];
  v42 = (void *)(v30 + v41);
  v43 = (const void *)(v31 + v41);
  v44 = type metadata accessor for URL(0);
  v45 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v42, 1, v44);
  v46 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v43, 1, v44);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v42, 0, 1, v44);
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  v75 = *(_QWORD *)(v44 - 8);
  if (v46)
  {
    (*(void (**)(void *, uint64_t))(v75 + 8))(v42, v44);
LABEL_32:
    v76 = sub_1000BA294(&qword_100BD4280);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_33;
  }
  (*(void (**)(void *, const void *, uint64_t))(v75 + 24))(v42, v43, v44);
LABEL_33:
  v229 = v32;
  v77 = v32[9];
  v78 = v30 + v77;
  v79 = v31 + v77;
  *(_BYTE *)v78 = *(_BYTE *)(v31 + v77);
  *(_QWORD *)(v78 + 8) = *(_QWORD *)(v31 + v77 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v226 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
  v80 = v226[6];
  v81 = (const void *)(v79 + v80);
  v221 = v78 + v80;
  v82 = _s7Weather24LocationCompositionStateOwet_0(v78 + v80, 1, v44);
  v83 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v81, 1, v44);
  if (v82)
  {
    if (v83)
    {
      v84 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD4280) - 8) + 64);
      v85 = (void *)v221;
LABEL_38:
      memcpy(v85, v81, v84);
      goto LABEL_42;
    }
    (*(void (**)(uint64_t, const void *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v221, v81, v44);
    _s7Weather24LocationCompositionStateOwst_0(v221, 0, 1, v44);
  }
  else
  {
    v86 = *(_QWORD *)(v44 - 8);
    if (v83)
    {
      (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v221, v44);
      v84 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD4280) - 8) + 64);
      v85 = (void *)v221;
      goto LABEL_38;
    }
    (*(void (**)(uint64_t, const void *, uint64_t))(v86 + 24))(v221, v81, v44);
  }
LABEL_42:
  v87 = v226[7];
  v88 = (_QWORD *)(v78 + v87);
  v89 = (_QWORD *)(v79 + v87);
  *v88 = *v89;
  v88[1] = v89[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v78 + v226[8]) = *(_QWORD *)(v79 + v226[8]);
  swift_retain();
  swift_release();
  *(_BYTE *)(v30 + v229[10]) = *(_BYTE *)(v31 + v229[10]);
  v90 = v229[11];
  v91 = (void *)(v30 + v90);
  v92 = (const void *)(v31 + v90);
  v93 = type metadata accessor for LocationOfInterest(0);
  v94 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v91, 1, v93);
  v95 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v92, 1, v93);
  if (v94)
  {
    if (!v95)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v93 - 8) + 16))(v91, v92, v93);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v91, 0, 1, v93);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  v96 = *(_QWORD *)(v93 - 8);
  if (v95)
  {
    (*(void (**)(void *, uint64_t))(v96 + 8))(v91, v93);
LABEL_47:
    v97 = sub_1000BA294(&qword_100BC3118);
    memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
    goto LABEL_48;
  }
  (*(void (**)(void *, const void *, uint64_t))(v96 + 24))(v91, v92, v93);
LABEL_48:
  *(_BYTE *)(v30 + v229[12]) = *(_BYTE *)(v31 + v229[12]);
  *(_BYTE *)(v30 + v229[13]) = *(_BYTE *)(v31 + v229[13]);
  v98 = v229[14];
  v99 = (_BYTE *)(v30 + v98);
  v100 = (_BYTE *)(v31 + v98);
  v101 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
  v102 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v99, 1, (uint64_t)v101);
  v103 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v100, 1, (uint64_t)v101);
  v40 = v224;
  if (v102)
  {
    if (!v103)
    {
      *v99 = *v100;
      v104 = v101[5];
      v105 = &v99[v104];
      v106 = &v100[v104];
      v107 = type metadata accessor for Location(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v107 - 8) + 16))(v105, v106, v107);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v93 - 8) + 16))(&v99[v101[6]], &v100[v101[6]], v93);
      v99[v101[7]] = v100[v101[7]];
      v73 = (uint64_t)v99;
      v74 = (uint64_t)v101;
LABEL_29:
      _s7Weather24LocationCompositionStateOwst_0(v73, 0, 1, v74);
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  if (v103)
  {
    sub_1000215BC((uint64_t)v99, type metadata accessor for HomeAndWorkRefinementRowViewModel);
LABEL_53:
    v108 = sub_1000BA294(&qword_100BCD688);
    memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
    goto LABEL_54;
  }
  *v99 = *v100;
  v217 = v101[5];
  v218 = &v99[v217];
  v219 = &v100[v217];
  v220 = type metadata accessor for Location(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v220 - 8) + 24))(v218, v219, v220);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v93 - 8) + 24))(&v99[v101[6]], &v100[v101[6]], v93);
  v99[v101[7]] = v100[v101[7]];
LABEL_54:
  *(_BYTE *)(a1 + v9[10]) = *(_BYTE *)(a2 + v9[10]);
  *(_BYTE *)(a1 + v9[11]) = *(_BYTE *)(a2 + v9[11]);
  *(_BYTE *)(a1 + v9[12]) = *(_BYTE *)(a2 + v9[12]);
  *(_BYTE *)(a1 + v9[13]) = *(_BYTE *)(a2 + v9[13]);
  *(_BYTE *)(a1 + v9[14]) = *(_BYTE *)(a2 + v9[14]);
  v109 = v9[15];
  v110 = *(void **)(a2 + v109);
  v111 = *(void **)(a1 + v109);
  *(_QWORD *)(a1 + v109) = v110;
  v112 = v110;

  *(_BYTE *)(a1 + v9[16]) = *(_BYTE *)(a2 + v9[16]);
  *(_BYTE *)(a1 + v9[17]) = *(_BYTE *)(a2 + v9[17]);
  *(_BYTE *)(a1 + v9[18]) = *(_BYTE *)(a2 + v9[18]);
  v113 = v9[19];
  v114 = a1 + v113;
  v115 = a2 + v113;
  v116 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 24))(v114, v115, v116);
  v117 = v9[20];
  v118 = (void *)(a1 + v117);
  v119 = (const void *)(a2 + v117);
  v120 = type metadata accessor for ForegroundEffect(0);
  LODWORD(v114) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v118, 1, v120);
  v121 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v119, 1, v120);
  if ((_DWORD)v114)
  {
    if (!v121)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v120 - 8) + 16))(v118, v119, v120);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v118, 0, 1, v120);
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  v122 = *(_QWORD *)(v120 - 8);
  if (v121)
  {
    (*(void (**)(void *, uint64_t))(v122 + 8))(v118, v120);
LABEL_59:
    v123 = sub_1000BA294(&qword_100BC5B30);
    memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
    goto LABEL_60;
  }
  (*(void (**)(void *, const void *, uint64_t))(v122 + 24))(v118, v119, v120);
LABEL_60:
  *(_BYTE *)(a1 + v9[21]) = *(_BYTE *)(a2 + v9[21]);
  *(_QWORD *)(a1 + v9[22]) = *(_QWORD *)(a2 + v9[22]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + v9[23]) = *(_BYTE *)(a2 + v9[23]);
  v124 = v9[24];
  v125 = a1 + v124;
  v126 = a2 + v124;
  v127 = type metadata accessor for LocationEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v127 - 8) + 24))(v125, v126, v127);
  v128 = v40[5];
  v129 = a1 + v128;
  v130 = a2 + v128;
  v131 = *(_QWORD *)(a2 + v128);
  v132 = *(_QWORD *)(a2 + v128 + 8);
  v133 = *(_BYTE *)(a2 + v128 + 16);
  sub_1000D55D4(v131, v132, v133);
  v134 = *(_QWORD *)v129;
  v135 = *(_QWORD *)(v129 + 8);
  v136 = *(_BYTE *)(v129 + 16);
  *(_QWORD *)v129 = v131;
  *(_QWORD *)(v129 + 8) = v132;
  *(_BYTE *)(v129 + 16) = v133;
  sub_1000D31B4(v134, v135, v136);
  *(_QWORD *)(v129 + 24) = *(_QWORD *)(v130 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v137 = v40[6];
  v138 = a1 + v137;
  v139 = a2 + v137;
  v140 = *(_QWORD *)(a2 + v137);
  v141 = *(_QWORD *)(a2 + v137 + 8);
  v142 = *(_BYTE *)(a2 + v137 + 16);
  sub_1000D55D4(v140, v141, v142);
  v143 = *(_QWORD *)v138;
  v144 = *(_QWORD *)(v138 + 8);
  v145 = *(_BYTE *)(v138 + 16);
  *(_QWORD *)v138 = v140;
  *(_QWORD *)(v138 + 8) = v141;
  *(_BYTE *)(v138 + 16) = v142;
  sub_1000D31B4(v143, v144, v145);
  *(_QWORD *)(v138 + 24) = *(_QWORD *)(v139 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v146 = v40[7];
  v147 = a1 + v146;
  v148 = a2 + v146;
  v149 = *(_QWORD *)(a1 + v146 + 24);
  v150 = *(_QWORD *)(a2 + v146 + 24);
  if (v149)
  {
    if (v150)
    {
      v151 = *(_QWORD *)v148;
      v152 = *(_QWORD *)(v148 + 8);
      v153 = *(_BYTE *)(v148 + 16);
      sub_1000D55D4(*(_QWORD *)v148, v152, v153);
      v154 = *(_QWORD *)v147;
      v155 = *(_QWORD *)(v147 + 8);
      v156 = *(_BYTE *)(v147 + 16);
      *(_QWORD *)v147 = v151;
      *(_QWORD *)(v147 + 8) = v152;
      *(_BYTE *)(v147 + 16) = v153;
      sub_1000D31B4(v154, v155, v156);
      *(_QWORD *)(v147 + 24) = *(_QWORD *)(v148 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100176E20(v147);
      v160 = *(_OWORD *)(v148 + 16);
      *(_OWORD *)v147 = *(_OWORD *)v148;
      *(_OWORD *)(v147 + 16) = v160;
    }
  }
  else if (v150)
  {
    v157 = *(_QWORD *)v148;
    v158 = *(_QWORD *)(v148 + 8);
    v159 = *(_BYTE *)(v148 + 16);
    sub_1000D55D4(*(_QWORD *)v148, v158, v159);
    *(_QWORD *)v147 = v157;
    *(_QWORD *)(v147 + 8) = v158;
    *(_BYTE *)(v147 + 16) = v159;
    *(_QWORD *)(v147 + 24) = *(_QWORD *)(v148 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v161 = *(_OWORD *)(v148 + 16);
    *(_OWORD *)v147 = *(_OWORD *)v148;
    *(_OWORD *)(v147 + 16) = v161;
  }
  v162 = v40[8];
  v163 = a1 + v162;
  v164 = a2 + v162;
  v165 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v165 - 8) + 24))(v163, v164, v165);
  if (a1 != a2)
  {
    v166 = v40[9];
    v167 = a1 + v166;
    v168 = a2 + v166;
    sub_100021A14(a1 + v166, &qword_100BC37E0);
    v169 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(v168) == 1)
    {
      *(_QWORD *)v167 = *(_QWORD *)v168;
      *(_QWORD *)(v167 + 8) = *(_QWORD *)(v168 + 8);
      *(_BYTE *)(v167 + 16) = *(_BYTE *)(v168 + 16);
      *(_BYTE *)(v167 + 17) = *(_BYTE *)(v168 + 17);
      *(_BYTE *)(v167 + 18) = *(_BYTE *)(v168 + 18);
      v170 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v171 = v167 + v170;
      v172 = v168 + v170;
      v173 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v173 - 8) + 16))(v171, v172, v173);
      v174 = 1;
    }
    else
    {
      *(_QWORD *)v167 = *(_QWORD *)v168;
      swift_retain();
      v174 = 0;
    }
    swift_storeEnumTagMultiPayload(v167, v169, v174);
  }
  v175 = v40[10];
  v227 = a2;
  v230 = a1;
  v176 = a1 + v175;
  v177 = v227 + v175;
  v178 = *(_QWORD *)v177;
  v179 = *(_QWORD *)(v177 + 8);
  v180 = *(_QWORD *)(v177 + 16);
  v181 = *(_QWORD *)(v177 + 24);
  v182 = *(_QWORD *)(v177 + 32);
  v183 = *(_QWORD *)(v177 + 40);
  v184 = *(_QWORD *)(v177 + 48);
  v185 = *(_QWORD *)(v177 + 56);
  v186 = *(_QWORD *)(v177 + 64);
  __dsta = *(_BYTE *)(v177 + 72);
  sub_1000D4FF4(*(_QWORD *)v177, v179, v180, v181, v182, v183, v184, v185, v186, __dsta);
  v187 = *(_QWORD *)v176;
  v188 = *(_QWORD *)(v176 + 8);
  v189 = *(_QWORD *)(v176 + 16);
  v190 = *(_QWORD *)(v176 + 24);
  v191 = *(_QWORD *)(v176 + 32);
  v192 = *(_QWORD *)(v176 + 40);
  v193 = *(_QWORD *)(v176 + 48);
  v194 = *(_QWORD *)(v176 + 56);
  v195 = *(_QWORD *)(v176 + 64);
  v196 = *(_BYTE *)(v176 + 72);
  *(_QWORD *)v176 = v178;
  *(_QWORD *)(v176 + 8) = v179;
  *(_QWORD *)(v176 + 16) = v180;
  *(_QWORD *)(v176 + 24) = v181;
  *(_QWORD *)(v176 + 32) = v182;
  *(_QWORD *)(v176 + 40) = v183;
  *(_QWORD *)(v176 + 48) = v184;
  *(_QWORD *)(v176 + 56) = v185;
  *(_QWORD *)(v176 + 64) = v186;
  *(_BYTE *)(v176 + 72) = __dsta;
  sub_1000CEE98(v187, v188, v189, v190, v191, v192, v193, v194, v195, v196);
  v197 = v224[11];
  v198 = v230 + v197;
  v199 = v227 + v197;
  v200 = *(_QWORD *)v199;
  LOBYTE(v179) = *(_BYTE *)(v199 + 8);
  sub_10008D47C(*(_QWORD *)v199, v179);
  v201 = *(_QWORD *)v198;
  v202 = *(_BYTE *)(v198 + 8);
  *(_QWORD *)v198 = v200;
  *(_BYTE *)(v198 + 8) = v179;
  sub_1000B15F8(v201, v202);
  if (v230 != v227)
  {
    v203 = v224[12];
    v204 = (_QWORD *)(v230 + v203);
    v205 = (_QWORD *)(v227 + v203);
    sub_100021A14(v230 + v203, &qword_100BC37D8);
    v206 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v205) == 1)
    {
      v207 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v207 - 8) + 16))(v204, v205, v207);
      v208 = 1;
    }
    else
    {
      *v204 = *v205;
      swift_retain();
      v208 = 0;
    }
    swift_storeEnumTagMultiPayload(v204, v206, v208);
  }
  v209 = v224[13];
  v210 = v230 + v209;
  v211 = v227 + v209;
  v212 = *(_QWORD *)v211;
  v213 = *(_BYTE *)(v211 + 8);
  sub_10008D47C(*(_QWORD *)v211, v213);
  v214 = *(_QWORD *)v210;
  v215 = *(_BYTE *)(v210 + 8);
  *(_QWORD *)v210 = v212;
  *(_BYTE *)(v210 + 8) = v213;
  sub_1000B15F8(v214, v215);
  return v230;
}

uint64_t sub_1007189B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  int *v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  int *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  _OWORD *v59;
  __int128 v60;
  _OWORD *v61;
  _OWORD *v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  _OWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  const void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int *v92;
  int *v93;
  _BYTE *__dst;
  _BYTE *__dsta;

  v6 = type metadata accessor for Location.Identifier(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = (int *)type metadata accessor for LocationViewModel(0);
  v9 = v8[5];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  if (_s7Weather24LocationCompositionStateOwet_0(a2 + v9, 1, v6))
  {
    v12 = sub_1000BA294(&qword_100BCD680);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v10, (uint64_t)v11, v6);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v6);
  }
  memcpy((void *)(a1 + v8[6]), (const void *)(a2 + v8[6]), 0xA2uLL);
  *(_QWORD *)(a1 + v8[7]) = *(_QWORD *)(a2 + v8[7]);
  *(_QWORD *)(a1 + v8[8]) = *(_QWORD *)(a2 + v8[8]);
  v13 = v8[9];
  v14 = (_BYTE *)(a1 + v13);
  v15 = (_BYTE *)(a2 + v13);
  v16 = type metadata accessor for LocationFooterViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v16))
  {
    v17 = sub_1000BA294(&qword_100BCD690);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v93 = a3;
    *v14 = *v15;
    *(_WORD *)(v14 + 1) = *(_WORD *)(v15 + 1);
    *(_OWORD *)(v14 + 8) = *(_OWORD *)(v15 + 8);
    v18 = *(int *)(v16 + 32);
    v19 = &v14[v18];
    v20 = &v15[v18];
    v21 = type metadata accessor for URL(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v20, 1, v21))
    {
      v22 = sub_1000BA294(&qword_100BD4280);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v19, 0, 1, v21);
    }
    v92 = (int *)v16;
    v23 = *(int *)(v16 + 36);
    v24 = &v14[v23];
    v25 = &v15[v23];
    *v24 = v15[v23];
    *((_QWORD *)v24 + 1) = *(_QWORD *)&v15[v23 + 8];
    v26 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
    v27 = v26[6];
    __dst = &v24[v27];
    v28 = &v25[v27];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v25[v27], 1, v21))
    {
      v29 = sub_1000BA294(&qword_100BD4280);
      memcpy(__dst, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(__dst, v28, v21);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v21);
    }
    *(_OWORD *)&v24[v26[7]] = *(_OWORD *)&v25[v26[7]];
    *(_QWORD *)&v24[v26[8]] = *(_QWORD *)&v25[v26[8]];
    v14[v92[10]] = v15[v92[10]];
    v30 = v92[11];
    v31 = &v14[v30];
    v32 = &v15[v30];
    v33 = type metadata accessor for LocationOfInterest(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v32, 1, v33))
    {
      v34 = sub_1000BA294(&qword_100BC3118);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v31, 0, 1, v33);
    }
    v14[v92[12]] = v15[v92[12]];
    v14[v92[13]] = v15[v92[13]];
    v35 = v92[14];
    v36 = &v14[v35];
    v37 = &v15[v35];
    v38 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v37, 1, (uint64_t)v38))
    {
      v39 = sub_1000BA294(&qword_100BCD688);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      *v36 = *v37;
      v40 = v38[5];
      v41 = &v36[v40];
      __dsta = &v37[v40];
      v42 = type metadata accessor for Location(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v41, __dsta, v42);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(&v36[v38[6]], &v37[v38[6]], v33);
      v36[v38[7]] = v37[v38[7]];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v36, 0, 1, (uint64_t)v38);
    }
    a3 = v93;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 0, 1, (uint64_t)v92);
  }
  *(_BYTE *)(a1 + v8[10]) = *(_BYTE *)(a2 + v8[10]);
  *(_BYTE *)(a1 + v8[11]) = *(_BYTE *)(a2 + v8[11]);
  *(_BYTE *)(a1 + v8[12]) = *(_BYTE *)(a2 + v8[12]);
  *(_BYTE *)(a1 + v8[13]) = *(_BYTE *)(a2 + v8[13]);
  *(_BYTE *)(a1 + v8[14]) = *(_BYTE *)(a2 + v8[14]);
  *(_QWORD *)(a1 + v8[15]) = *(_QWORD *)(a2 + v8[15]);
  *(_BYTE *)(a1 + v8[16]) = *(_BYTE *)(a2 + v8[16]);
  *(_BYTE *)(a1 + v8[17]) = *(_BYTE *)(a2 + v8[17]);
  *(_BYTE *)(a1 + v8[18]) = *(_BYTE *)(a2 + v8[18]);
  v43 = v8[19];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
  v47 = v8[20];
  v48 = (void *)(a1 + v47);
  v49 = (const void *)(a2 + v47);
  v50 = type metadata accessor for ForegroundEffect(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v49, 1, v50))
  {
    v51 = sub_1000BA294(&qword_100BC5B30);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v48, v49, v50);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v48, 0, 1, v50);
  }
  *(_BYTE *)(a1 + v8[21]) = *(_BYTE *)(a2 + v8[21]);
  *(_QWORD *)(a1 + v8[22]) = *(_QWORD *)(a2 + v8[22]);
  *(_BYTE *)(a1 + v8[23]) = *(_BYTE *)(a2 + v8[23]);
  v52 = v8[24];
  v53 = a1 + v52;
  v54 = a2 + v52;
  v55 = type metadata accessor for LocationEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v53, v54, v55);
  v56 = a3[5];
  v57 = a3[6];
  v58 = (_OWORD *)(a1 + v56);
  v59 = (_OWORD *)(a2 + v56);
  v60 = v59[1];
  *v58 = *v59;
  v58[1] = v60;
  v61 = (_OWORD *)(a1 + v57);
  v62 = (_OWORD *)(a2 + v57);
  v63 = v62[1];
  *v61 = *v62;
  v61[1] = v63;
  v64 = a3[7];
  v65 = a3[8];
  v66 = *(_OWORD *)(a2 + v64);
  v67 = *(_OWORD *)(a2 + v64 + 16);
  v68 = (_OWORD *)(a1 + v64);
  *v68 = v66;
  v68[1] = v67;
  v69 = a1 + v65;
  v70 = a2 + v65;
  v71 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 32))(v69, v70, v71);
  v72 = a3[9];
  v73 = (char *)(a1 + v72);
  v74 = (char *)(a2 + v72);
  v75 = sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(v74) == 1)
  {
    *(_OWORD *)v73 = *(_OWORD *)v74;
    v73[16] = v74[16];
    v73[17] = v74[17];
    v73[18] = v74[18];
    v76 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v77 = &v73[v76];
    v78 = &v74[v76];
    v79 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 32))(v77, v78, v79);
    swift_storeEnumTagMultiPayload(v73, v75, 1);
  }
  else
  {
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
  }
  memcpy((void *)(a1 + a3[10]), (const void *)(a2 + a3[10]), 0x49uLL);
  v80 = a3[11];
  v81 = a3[12];
  v82 = a1 + v80;
  v83 = a2 + v80;
  *(_QWORD *)v82 = *(_QWORD *)v83;
  *(_BYTE *)(v82 + 8) = *(_BYTE *)(v83 + 8);
  v84 = (void *)(a1 + v81);
  v85 = (const void *)(a2 + v81);
  v86 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v85) == 1)
  {
    v87 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v87 - 8) + 32))(v84, v85, v87);
    swift_storeEnumTagMultiPayload(v84, v86, 1);
  }
  else
  {
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
  }
  v88 = a3[13];
  v89 = a1 + v88;
  v90 = a2 + v88;
  *(_QWORD *)v89 = *(_QWORD *)v90;
  *(_BYTE *)(v89 + 8) = *(_BYTE *)(v90 + 8);
  return a1;
}

uint64_t sub_100719114(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  int *v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  int v37;
  uint64_t v38;
  void *v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  void *v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const void *v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  const void *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  const void *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  void *v148;
  const void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  const void *v165;
  int v166;
  size_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  const void *v177;
  uint64_t v178;
  int v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _BYTE *v184;
  _BYTE *v185;
  int *v186;
  int v187;
  int v188;
  uint64_t v189;
  _BYTE *v190;
  _BYTE *v191;
  uint64_t v192;
  uint64_t v193;
  _BYTE *v194;
  _BYTE *v195;
  uint64_t v196;
  uint64_t v197;
  int *v198;
  uint64_t v199;
  void *__dst;
  _BYTE *__dstb;
  int *__dsta;
  int *v203;
  int *v204;

  v6 = type metadata accessor for Location.Identifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = (int *)type metadata accessor for LocationViewModel(0);
  v10 = v9[5];
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  v13 = _s7Weather24LocationCompositionStateOwet_0(a1 + v10, 1, v6);
  v14 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v6);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v11, v12, v6);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v11, v6);
LABEL_6:
    v15 = sub_1000BA294(&qword_100BCD680);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v8((uint64_t)v11, (uint64_t)v12, v6);
LABEL_7:
  v16 = v9[6];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_QWORD *)(a2 + v16 + 8);
  *(_QWORD *)v17 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(v17 + 8) = v19;
  swift_bridgeObjectRelease();
  v20 = *(_BYTE *)(v18 + 48);
  v21 = *(_QWORD *)(v17 + 16);
  v22 = *(_QWORD *)(v17 + 24);
  v23 = *(_QWORD *)(v17 + 32);
  v24 = *(_QWORD *)(v17 + 40);
  v25 = *(_OWORD *)(v18 + 32);
  *(_OWORD *)(v17 + 16) = *(_OWORD *)(v18 + 16);
  *(_OWORD *)(v17 + 32) = v25;
  v26 = *(_BYTE *)(v17 + 48);
  *(_BYTE *)(v17 + 48) = v20;
  sub_100176DD4(v21, v22, v23, v24, v26);
  v27 = *(_QWORD *)(v18 + 64);
  *(_QWORD *)(v17 + 56) = *(_QWORD *)(v18 + 56);
  *(_QWORD *)(v17 + 64) = v27;
  swift_bridgeObjectRelease();
  v28 = *(_QWORD *)(v18 + 80);
  *(_QWORD *)(v17 + 72) = *(_QWORD *)(v18 + 72);
  *(_QWORD *)(v17 + 80) = v28;
  swift_bridgeObjectRelease();
  v29 = *(_QWORD *)(v18 + 96);
  *(_QWORD *)(v17 + 88) = *(_QWORD *)(v18 + 88);
  *(_QWORD *)(v17 + 96) = v29;
  swift_bridgeObjectRelease();
  v30 = *(_QWORD *)(v18 + 112);
  *(_QWORD *)(v17 + 104) = *(_QWORD *)(v18 + 104);
  *(_QWORD *)(v17 + 112) = v30;
  swift_bridgeObjectRelease();
  v31 = *(_QWORD *)(v18 + 128);
  *(_QWORD *)(v17 + 120) = *(_QWORD *)(v18 + 120);
  *(_QWORD *)(v17 + 128) = v31;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v17 + 136) = *(_BYTE *)(v18 + 136);
  *(_BYTE *)(v17 + 137) = *(_BYTE *)(v18 + 137);
  *(_BYTE *)(v17 + 138) = *(_BYTE *)(v18 + 138);
  v32 = *(_QWORD *)(v18 + 152);
  *(_QWORD *)(v17 + 144) = *(_QWORD *)(v18 + 144);
  *(_QWORD *)(v17 + 152) = v32;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v17 + 160) = *(_BYTE *)(v18 + 160);
  *(_BYTE *)(v17 + 161) = *(_BYTE *)(v18 + 161);
  *(_QWORD *)(a1 + v9[7]) = *(_QWORD *)(a2 + v9[7]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v9[8]) = *(_QWORD *)(a2 + v9[8]);
  swift_release();
  v33 = v9[9];
  v34 = a1 + v33;
  v35 = a2 + v33;
  v36 = (int *)type metadata accessor for LocationFooterViewModel(0);
  LODWORD(v17) = _s7Weather24LocationCompositionStateOwet_0(v34, 1, (uint64_t)v36);
  v37 = _s7Weather24LocationCompositionStateOwet_0(v35, 1, (uint64_t)v36);
  if ((_DWORD)v17)
  {
    if (!v37)
    {
      v203 = a3;
      *(_BYTE *)v34 = *(_BYTE *)v35;
      *(_WORD *)(v34 + 1) = *(_WORD *)(v35 + 1);
      *(_OWORD *)(v34 + 8) = *(_OWORD *)(v35 + 8);
      v38 = v36[8];
      v39 = (void *)(v34 + v38);
      v40 = (const void *)(v35 + v38);
      v41 = type metadata accessor for URL(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v40, 1, v41))
      {
        v42 = sub_1000BA294(&qword_100BD4280);
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v39, v40, v41);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v39, 0, 1, v41);
      }
      v198 = v36;
      v53 = v36[9];
      v54 = v34 + v53;
      v55 = v35 + v53;
      *(_BYTE *)v54 = *(_BYTE *)(v35 + v53);
      *(_QWORD *)(v54 + 8) = *(_QWORD *)(v35 + v53 + 8);
      v56 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
      v57 = v56[6];
      __dst = (void *)(v54 + v57);
      v58 = (const void *)(v55 + v57);
      if (_s7Weather24LocationCompositionStateOwet_0(v55 + v57, 1, v41))
      {
        v59 = sub_1000BA294(&qword_100BD4280);
        memcpy(__dst, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(__dst, v58, v41);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v41);
      }
      *(_OWORD *)(v54 + v56[7]) = *(_OWORD *)(v55 + v56[7]);
      *(_QWORD *)(v54 + v56[8]) = *(_QWORD *)(v55 + v56[8]);
      *(_BYTE *)(v34 + v198[10]) = *(_BYTE *)(v35 + v198[10]);
      v60 = v198[11];
      v61 = (void *)(v34 + v60);
      v62 = (const void *)(v35 + v60);
      v63 = type metadata accessor for LocationOfInterest(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v62, 1, v63))
      {
        v64 = sub_1000BA294(&qword_100BC3118);
        memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v63 - 8) + 32))(v61, v62, v63);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v61, 0, 1, v63);
      }
      *(_BYTE *)(v34 + v198[12]) = *(_BYTE *)(v35 + v198[12]);
      *(_BYTE *)(v34 + v198[13]) = *(_BYTE *)(v35 + v198[13]);
      v65 = v198[14];
      v66 = (_BYTE *)(v34 + v65);
      v67 = (_BYTE *)(v35 + v65);
      v68 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v67, 1, (uint64_t)v68))
      {
        v69 = sub_1000BA294(&qword_100BCD688);
        memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
      }
      else
      {
        *v66 = *v67;
        v70 = v68[5];
        v71 = &v66[v70];
        __dstb = &v67[v70];
        v72 = type metadata accessor for Location(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v72 - 8) + 32))(v71, __dstb, v72);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v63 - 8) + 32))(&v66[v68[6]], &v67[v68[6]], v63);
        v66[v68[7]] = v67[v68[7]];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v66, 0, 1, (uint64_t)v68);
      }
      a3 = v203;
      v73 = v34;
      v74 = (uint64_t)v198;
      goto LABEL_30;
    }
    goto LABEL_13;
  }
  if (v37)
  {
    sub_1000215BC(v34, type metadata accessor for LocationFooterViewModel);
LABEL_13:
    v43 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BCD690) - 8) + 64);
    v44 = (void *)v34;
    v45 = (const void *)v35;
LABEL_14:
    memcpy(v44, v45, v43);
    goto LABEL_31;
  }
  v204 = a3;
  *(_BYTE *)v34 = *(_BYTE *)v35;
  *(_BYTE *)(v34 + 1) = *(_BYTE *)(v35 + 1);
  *(_BYTE *)(v34 + 2) = *(_BYTE *)(v35 + 2);
  v46 = *(_QWORD *)(v35 + 16);
  *(_QWORD *)(v34 + 8) = *(_QWORD *)(v35 + 8);
  *(_QWORD *)(v34 + 16) = v46;
  swift_bridgeObjectRelease();
  v47 = v36[8];
  v48 = (void *)(v34 + v47);
  v49 = (const void *)(v35 + v47);
  v50 = type metadata accessor for URL(0);
  v51 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v48, 1, v50);
  v52 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v49, 1, v50);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v48, v49, v50);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v48, 0, 1, v50);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  v159 = *(_QWORD *)(v50 - 8);
  if (v52)
  {
    (*(void (**)(void *, uint64_t))(v159 + 8))(v48, v50);
LABEL_54:
    v160 = sub_1000BA294(&qword_100BD4280);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(void *, const void *, uint64_t))(v159 + 40))(v48, v49, v50);
LABEL_55:
  v161 = v36[9];
  v162 = v34 + v161;
  v163 = v35 + v161;
  *(_BYTE *)v162 = *(_BYTE *)(v35 + v161);
  *(_QWORD *)(v162 + 8) = *(_QWORD *)(v35 + v161 + 8);
  swift_bridgeObjectRelease();
  v199 = v163;
  __dsta = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
  v164 = __dsta[6];
  v165 = (const void *)(v163 + v164);
  v197 = v162 + v164;
  LODWORD(v163) = _s7Weather24LocationCompositionStateOwet_0(v162 + v164, 1, v50);
  v166 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v165, 1, v50);
  if ((_DWORD)v163)
  {
    if (v166)
    {
      v167 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD4280) - 8) + 64);
      v168 = (void *)v197;
LABEL_60:
      memcpy(v168, v165, v167);
      goto LABEL_64;
    }
    (*(void (**)(uint64_t, const void *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v197, v165, v50);
    _s7Weather24LocationCompositionStateOwst_0(v197, 0, 1, v50);
  }
  else
  {
    v169 = *(_QWORD *)(v50 - 8);
    if (v166)
    {
      (*(void (**)(uint64_t, uint64_t))(v169 + 8))(v197, v50);
      v167 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD4280) - 8) + 64);
      v168 = (void *)v197;
      goto LABEL_60;
    }
    (*(void (**)(uint64_t, const void *, uint64_t))(v169 + 40))(v197, v165, v50);
  }
LABEL_64:
  v170 = __dsta[7];
  v171 = (_QWORD *)(v162 + v170);
  v172 = (uint64_t *)(v199 + v170);
  v174 = *v172;
  v173 = v172[1];
  *v171 = v174;
  v171[1] = v173;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v162 + __dsta[8]) = *(_QWORD *)(v199 + __dsta[8]);
  swift_release();
  *(_BYTE *)(v34 + v36[10]) = *(_BYTE *)(v35 + v36[10]);
  v175 = v36[11];
  v176 = (void *)(v34 + v175);
  v177 = (const void *)(v35 + v175);
  v178 = type metadata accessor for LocationOfInterest(0);
  v179 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v176, 1, v178);
  v180 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v177, 1, v178);
  if (v179)
  {
    if (!v180)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v178 - 8) + 32))(v176, v177, v178);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v176, 0, 1, v178);
      goto LABEL_70;
    }
    goto LABEL_69;
  }
  v181 = *(_QWORD *)(v178 - 8);
  if (v180)
  {
    (*(void (**)(void *, uint64_t))(v181 + 8))(v176, v178);
LABEL_69:
    v182 = sub_1000BA294(&qword_100BC3118);
    memcpy(v176, v177, *(_QWORD *)(*(_QWORD *)(v182 - 8) + 64));
    goto LABEL_70;
  }
  (*(void (**)(void *, const void *, uint64_t))(v181 + 40))(v176, v177, v178);
LABEL_70:
  *(_BYTE *)(v34 + v36[12]) = *(_BYTE *)(v35 + v36[12]);
  *(_BYTE *)(v34 + v36[13]) = *(_BYTE *)(v35 + v36[13]);
  v183 = v36[14];
  v184 = (_BYTE *)(v34 + v183);
  v185 = (_BYTE *)(v35 + v183);
  v186 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
  v187 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v184, 1, (uint64_t)v186);
  v188 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v185, 1, (uint64_t)v186);
  a3 = v204;
  if (v187)
  {
    if (!v188)
    {
      *v184 = *v185;
      v189 = v186[5];
      v190 = &v184[v189];
      v191 = &v185[v189];
      v192 = type metadata accessor for Location(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v192 - 8) + 32))(v190, v191, v192);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v178 - 8) + 32))(&v184[v186[6]], &v185[v186[6]], v178);
      v184[v186[7]] = v185[v186[7]];
      v73 = (uint64_t)v184;
      v74 = (uint64_t)v186;
LABEL_30:
      _s7Weather24LocationCompositionStateOwst_0(v73, 0, 1, v74);
      goto LABEL_31;
    }
    goto LABEL_75;
  }
  if (v188)
  {
    sub_1000215BC((uint64_t)v184, type metadata accessor for HomeAndWorkRefinementRowViewModel);
LABEL_75:
    v43 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BCD688) - 8) + 64);
    v44 = v184;
    v45 = v185;
    goto LABEL_14;
  }
  *v184 = *v185;
  v193 = v186[5];
  v194 = &v184[v193];
  v195 = &v185[v193];
  v196 = type metadata accessor for Location(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v196 - 8) + 40))(v194, v195, v196);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v178 - 8) + 40))(&v184[v186[6]], &v185[v186[6]], v178);
  v184[v186[7]] = v185[v186[7]];
LABEL_31:
  *(_BYTE *)(a1 + v9[10]) = *(_BYTE *)(a2 + v9[10]);
  *(_BYTE *)(a1 + v9[11]) = *(_BYTE *)(a2 + v9[11]);
  *(_BYTE *)(a1 + v9[12]) = *(_BYTE *)(a2 + v9[12]);
  *(_BYTE *)(a1 + v9[13]) = *(_BYTE *)(a2 + v9[13]);
  *(_BYTE *)(a1 + v9[14]) = *(_BYTE *)(a2 + v9[14]);
  v75 = v9[15];
  v76 = *(void **)(a1 + v75);
  *(_QWORD *)(a1 + v75) = *(_QWORD *)(a2 + v75);

  *(_BYTE *)(a1 + v9[16]) = *(_BYTE *)(a2 + v9[16]);
  *(_BYTE *)(a1 + v9[17]) = *(_BYTE *)(a2 + v9[17]);
  *(_BYTE *)(a1 + v9[18]) = *(_BYTE *)(a2 + v9[18]);
  v77 = v9[19];
  v78 = a1 + v77;
  v79 = a2 + v77;
  v80 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 40))(v78, v79, v80);
  v81 = v9[20];
  v82 = (void *)(a1 + v81);
  v83 = (const void *)(a2 + v81);
  v84 = type metadata accessor for ForegroundEffect(0);
  LODWORD(v78) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v82, 1, v84);
  v85 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v83, 1, v84);
  if ((_DWORD)v78)
  {
    if (!v85)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v84 - 8) + 32))(v82, v83, v84);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v82, 0, 1, v84);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  v86 = *(_QWORD *)(v84 - 8);
  if (v85)
  {
    (*(void (**)(void *, uint64_t))(v86 + 8))(v82, v84);
LABEL_36:
    v87 = sub_1000BA294(&qword_100BC5B30);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(void *, const void *, uint64_t))(v86 + 40))(v82, v83, v84);
LABEL_37:
  *(_BYTE *)(a1 + v9[21]) = *(_BYTE *)(a2 + v9[21]);
  *(_QWORD *)(a1 + v9[22]) = *(_QWORD *)(a2 + v9[22]);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + v9[23]) = *(_BYTE *)(a2 + v9[23]);
  v88 = v9[24];
  v89 = a1 + v88;
  v90 = a2 + v88;
  v91 = type metadata accessor for LocationEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 40))(v89, v90, v91);
  v92 = a3[5];
  v93 = a1 + v92;
  v94 = a2 + v92;
  LOBYTE(v92) = *(_BYTE *)(a2 + v92 + 16);
  v95 = *(_QWORD *)v93;
  v96 = *(_QWORD *)(v93 + 8);
  v97 = *(_BYTE *)(v93 + 16);
  *(_OWORD *)v93 = *(_OWORD *)v94;
  *(_BYTE *)(v93 + 16) = v92;
  sub_1000D31B4(v95, v96, v97);
  *(_QWORD *)(v93 + 24) = *(_QWORD *)(v94 + 24);
  swift_bridgeObjectRelease();
  v98 = a3[6];
  v99 = a1 + v98;
  v100 = a2 + v98;
  LOBYTE(v98) = *(_BYTE *)(a2 + v98 + 16);
  v101 = *(_QWORD *)v99;
  v102 = *(_QWORD *)(v99 + 8);
  v103 = *(_BYTE *)(v99 + 16);
  *(_OWORD *)v99 = *(_OWORD *)v100;
  *(_BYTE *)(v99 + 16) = v98;
  sub_1000D31B4(v101, v102, v103);
  *(_QWORD *)(v99 + 24) = *(_QWORD *)(v100 + 24);
  swift_bridgeObjectRelease();
  v104 = a3[7];
  v105 = a1 + v104;
  v106 = a2 + v104;
  if (*(_QWORD *)(a1 + v104 + 24))
  {
    if (*(_QWORD *)(v106 + 24))
    {
      v107 = *(_BYTE *)(v106 + 16);
      v108 = *(_QWORD *)v105;
      v109 = *(_QWORD *)(v105 + 8);
      v110 = *(_BYTE *)(v105 + 16);
      *(_OWORD *)v105 = *(_OWORD *)v106;
      *(_BYTE *)(v105 + 16) = v107;
      sub_1000D31B4(v108, v109, v110);
      *(_QWORD *)(v105 + 24) = *(_QWORD *)(v106 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_42;
    }
    sub_100176E20(v105);
  }
  v111 = *(_OWORD *)(v106 + 16);
  *(_OWORD *)v105 = *(_OWORD *)v106;
  *(_OWORD *)(v105 + 16) = v111;
LABEL_42:
  v112 = a3[8];
  v113 = a1 + v112;
  v114 = a2 + v112;
  v115 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v115 - 8) + 40))(v113, v114, v115);
  if (a1 != a2)
  {
    v116 = a3[9];
    v117 = (char *)(a1 + v116);
    v118 = (char *)(a2 + v116);
    sub_100021A14(a1 + v116, &qword_100BC37E0);
    v119 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(v118) == 1)
    {
      *(_OWORD *)v117 = *(_OWORD *)v118;
      v117[16] = v118[16];
      v117[17] = v118[17];
      v117[18] = v118[18];
      v120 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v121 = &v117[v120];
      v122 = &v118[v120];
      v123 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v123 - 8) + 32))(v121, v122, v123);
      swift_storeEnumTagMultiPayload(v117, v119, 1);
    }
    else
    {
      memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
    }
  }
  v124 = a3[10];
  v125 = a1 + v124;
  v126 = a2 + v124;
  v127 = *(_QWORD *)(v126 + 64);
  v128 = *(_BYTE *)(v126 + 72);
  v129 = *(_QWORD *)v125;
  v130 = *(_QWORD *)(v125 + 8);
  v131 = *(_QWORD *)(v125 + 16);
  v132 = *(_QWORD *)(v125 + 24);
  v133 = *(_QWORD *)(v125 + 32);
  v134 = *(_QWORD *)(v125 + 40);
  v135 = *(_QWORD *)(v125 + 48);
  v136 = *(_QWORD *)(v125 + 56);
  v137 = *(_QWORD *)(v125 + 64);
  v138 = *(_BYTE *)(v125 + 72);
  v139 = *(_OWORD *)(v126 + 16);
  *(_OWORD *)v125 = *(_OWORD *)v126;
  *(_OWORD *)(v125 + 16) = v139;
  v140 = *(_OWORD *)(v126 + 48);
  *(_OWORD *)(v125 + 32) = *(_OWORD *)(v126 + 32);
  *(_OWORD *)(v125 + 48) = v140;
  *(_QWORD *)(v125 + 64) = v127;
  *(_BYTE *)(v125 + 72) = v128;
  sub_1000CEE98(v129, v130, v131, v132, v133, v134, v135, v136, v137, v138);
  v141 = a3[11];
  v142 = a1 + v141;
  v143 = (uint64_t *)(a2 + v141);
  v144 = *v143;
  LOBYTE(v143) = *((_BYTE *)v143 + 8);
  v145 = *(_QWORD *)v142;
  v146 = *(_BYTE *)(v142 + 8);
  *(_QWORD *)v142 = v144;
  *(_BYTE *)(v142 + 8) = (_BYTE)v143;
  sub_1000B15F8(v145, v146);
  if (a1 != a2)
  {
    v147 = a3[12];
    v148 = (void *)(a1 + v147);
    v149 = (const void *)(a2 + v147);
    sub_100021A14(a1 + v147, &qword_100BC37D8);
    v150 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v149) == 1)
    {
      v151 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v151 - 8) + 32))(v148, v149, v151);
      swift_storeEnumTagMultiPayload(v148, v150, 1);
    }
    else
    {
      memcpy(v148, v149, *(_QWORD *)(*(_QWORD *)(v150 - 8) + 64));
    }
  }
  v152 = a3[13];
  v153 = a1 + v152;
  v154 = (uint64_t *)(a2 + v152);
  v155 = *v154;
  LOBYTE(v154) = *((_BYTE *)v154 + 8);
  v156 = *(_QWORD *)v153;
  v157 = *(_BYTE *)(v153 + 8);
  *(_QWORD *)v153 = v155;
  *(_BYTE *)(v153 + 8) = (_BYTE)v154;
  sub_1000B15F8(v156, v157);
  return a1;
}

uint64_t sub_100719F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100719F94);
}

void sub_100719F94(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  sub_1000D1418();
  sub_100088FF0();
  if (v11)
  {
    v7 = v6;
    v8 = v4;
  }
  else
  {
    if ((_DWORD)v3 == 0x7FFFFFFF)
    {
      sub_10003BCA4(*(_QWORD *)(v4 + a3[5] + 24));
      sub_100079F70();
      return;
    }
    sub_1000BCF7C();
    sub_100088FF0();
    if (v11)
    {
      v7 = v9;
      v10 = a3[8];
    }
    else
    {
      sub_1000BA294(&qword_100BC3808);
      sub_100088FF0();
      if (v11)
      {
        v7 = v12;
        v10 = a3[9];
      }
      else
      {
        v7 = sub_1000BA294((uint64_t *)&unk_100C09CA0);
        v10 = a3[12];
      }
    }
    v8 = v4 + v10;
  }
  sub_1000B250C(v8, v3, v7);
}

uint64_t sub_10071A040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10071A04C);
}

void sub_10071A04C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  sub_1000D1418();
  sub_10009D2E8();
  if (v13)
  {
    v9 = v8;
    v10 = v5;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      sub_10004A408();
      sub_100079F70();
      return;
    }
    sub_1000BCF7C();
    sub_10009D2E8();
    if (v13)
    {
      v9 = v11;
      v12 = a4[8];
    }
    else
    {
      sub_1000BA294(&qword_100BC3808);
      sub_10009D2E8();
      if (v13)
      {
        v9 = v14;
        v12 = a4[9];
      }
      else
      {
        v9 = sub_1000BA294((uint64_t *)&unk_100C09CA0);
        v12 = a4[12];
      }
    }
    v10 = v5 + v12;
  }
  sub_1000987C4(v10, v4, v4, v9);
}

void sub_10071A0F4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[10];

  v2 = type metadata accessor for LocationViewModel(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    v10[1] = " ";
    v10[2] = " ";
    v10[3] = &unk_1009C28B0;
    v4 = type metadata accessor for Text.Measurements(319);
    if (v5 <= 0x3F)
    {
      v10[4] = *(_QWORD *)(v4 - 8) + 64;
      sub_100158B48(319, (unint64_t *)&qword_100BC3890, type metadata accessor for DisplayMetrics);
      if (v7 <= 0x3F)
      {
        v10[5] = *(_QWORD *)(v6 - 8) + 64;
        v10[6] = "I";
        v10[7] = &unk_1009C2038;
        sub_100158B48(319, (unint64_t *)&qword_100BC3888, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
        if (v9 <= 0x3F)
        {
          v10[8] = *(_QWORD *)(v8 - 8) + 64;
          v10[9] = &unk_1009C2038;
          swift_initStructMetadata(a1, 256, 10, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_10071A1FC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABF120, 1);
}

uint64_t sub_10071A20C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABF0F8, 1);
}

uint64_t sub_10071A21C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABF0D0, 1);
}

uint64_t sub_10071A22C(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100ABF09C, 1);
}

uint64_t sub_10071A260(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABF074, 1);
}

uint64_t sub_10071A270(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100ABF040, 1);
}

uint64_t sub_10071A2A4(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100ABF00C, 1);
}

uint64_t sub_10071A2D8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABEFE4, 1);
}

uint64_t sub_10071A2E8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABEFBC, 1);
}

uint64_t sub_10071A2F8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABEF94, 1);
}

uint64_t sub_10071A308(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABEF6C, 1);
}

uint64_t sub_10071A318(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABEF44, 1);
}

uint64_t sub_10071A328(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABEF1C, 1);
}

uint64_t sub_10071A338(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABEEF4, 1);
}

uint64_t sub_10071A348(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100ABEEC0, 1);
}

uint64_t sub_10071A37C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABEE98, 1);
}

uint64_t sub_10071A38C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABEE70, 1);
}

uint64_t sub_10071A39C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABEE48, 1);
}

uint64_t sub_10071A3AC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABEE20, 1);
}

uint64_t sub_10071A3BC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABEDF8, 1);
}

uint64_t sub_10071A3CC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABEDD0, 1);
}

void sub_10071A3EC(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  sub_10011E660(*(_QWORD *)(a1 + 8), a2);
  sub_100089028();
}

void sub_10071A438(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_100708B64(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10071A454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = type metadata accessor for LocationStackView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = v4
     + ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80));
  swift_bridgeObjectRelease();
  sub_10009DA64();
  v7 = sub_1000BA294(&qword_100BC37E0);
  if (sub_100098814(v7) == 1)
  {
    sub_10009E908();
    v8 = sub_1000C1D78();
    sub_1000987E0(v8);
  }
  else
  {
    sub_1000B4394();
  }
  sub_1000C1088(v6 + *(int *)(v5 + 44));
  sub_1000B15F8(*(_QWORD *)(v6 + *(int *)(v5 + 48)), *(_BYTE *)(v6 + *(int *)(v5 + 48) + 8));
  sub_1000DCA38();
  return swift_deallocObject(v9, v10, v11);
}

uint64_t sub_10071A524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10008900C();
  sub_1000F42A4();
  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  type metadata accessor for LocationStackView(0, v1, v2, v3);
  sub_100095298();
  v4 = sub_1000F4178();
  return sub_10070B994(v4, v1, v2, v5);
}

uint64_t sub_10071A57C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_10071A5A0(_QWORD *a1)
{
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v1 + 32))(*a1, a1[1], a1[2], a1[3]);
  sub_10004A298();
}

BOOL sub_10071A5C8()
{
  return sub_10070BA80();
}

uint64_t sub_10071A5E8(uint64_t a1)
{
  uint64_t *v1;

  return sub_10070BAE0(a1, v1[4], v1[2], v1[3]) & 1;
}

unint64_t sub_10071A608()
{
  unint64_t result;

  result = qword_100C01580;
  if (!qword_100C01580)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for GridLayout, &type metadata for GridLayout);
    atomic_store(result, (unint64_t *)&qword_100C01580);
  }
  return result;
}

unint64_t sub_10071A644()
{
  unint64_t result;

  result = qword_100C01588;
  if (!qword_100C01588)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for GridLayout, &type metadata for GridLayout);
    atomic_store(result, (unint64_t *)&qword_100C01588);
  }
  return result;
}

void sub_10071A680(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  v1 = sub_1000E7D2C(a1);
  sub_10011E660(v1, v2);
  sub_100089028();
}

void sub_10071A6AC(uint64_t a1)
{
  unint64_t *v1;
  void (*v2)(void);
  uint64_t *v3;
  uint64_t v4;

  if (!sub_10009987C(a1))
  {
    v4 = sub_1000AE8E8(0, v3);
    v2();
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4), v1);
  }
  sub_100099960();
}

void sub_10071A6F8()
{
  EnvironmentValues.fontResolutionContext.getter();
  sub_10004A298();
}

unint64_t sub_10071A718()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C01618;
  if (!qword_100C01618)
  {
    v1 = sub_100075EB0(&qword_100C014A0);
    sub_10007AB60((uint64_t)&unk_100C01620);
    sub_10007AB60((uint64_t)&qword_100BCD8A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C01618);
  }
  return result;
}

unint64_t sub_10071A7B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C01628;
  if (!qword_100C01628)
  {
    v1 = sub_100075EB0(&qword_100C014B8);
    sub_10007AB60((uint64_t)&unk_100C01630);
    sub_10007AB60((uint64_t)&unk_100C0A590);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C01628);
  }
  return result;
}

unint64_t sub_10071A858()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C01638;
  if (!qword_100C01638)
  {
    v1 = sub_100075EB0(&qword_100C014C0);
    sub_10007AB60((uint64_t)&unk_100C01640);
    sub_10007AB60((uint64_t)&unk_100C0A590);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C01638);
  }
  return result;
}

void sub_10071A8F4()
{
  sub_10007AB60((uint64_t)&unk_100C01648);
}

unint64_t sub_10071A924()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C01658;
  if (!qword_100C01658)
  {
    v1 = sub_100075EB0(&qword_100C014E0);
    sub_10007AB60((uint64_t)&unk_100C01660);
    sub_1001300B0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C01658);
  }
  return result;
}

unint64_t sub_10071A9AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C01668;
  if (!qword_100C01668)
  {
    v1 = sub_100075EB0(&qword_100C014F8);
    sub_10007AB60((uint64_t)&unk_100C01670);
    sub_1001300B0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C01668);
  }
  return result;
}

void sub_10071AA30(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *a1;
  v2 = a1[1];
  v3 = type metadata accessor for VStack(255, *a1, v2);
  v5 = type metadata accessor for LazyVStack(255, v1, v2, v4);
  v6 = type metadata accessor for _ConditionalContent(255, v3, v5);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v3);
  swift_getWitnessTable(&protocol conformance descriptor for LazyVStack<A>, v5);
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v6);
  sub_100099960();
}

unint64_t sub_10071AACC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C01678;
  if (!qword_100C01678)
  {
    v1 = sub_100075EB0(&qword_100C01508);
    sub_10007AB60((uint64_t)&unk_100C01680);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C01678);
  }
  return result;
}

unint64_t sub_10071AB54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C01688;
  if (!qword_100C01688)
  {
    v1 = sub_100075EB0(&qword_100C01518);
    sub_10007AB60((uint64_t)&unk_100C01690);
    sub_10007AB60((uint64_t)&qword_100BE38F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C01688);
  }
  return result;
}

unint64_t sub_10071ABF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C01698;
  if (!qword_100C01698)
  {
    v1 = sub_100075EB0(&qword_100C01520);
    sub_10007AB60((uint64_t)&unk_100C016A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C01698);
  }
  return result;
}

unint64_t sub_10071AC7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C016A8;
  if (!qword_100C016A8)
  {
    v1 = sub_100075EB0(&qword_100C016B0);
    sub_10007AB60((uint64_t)&unk_100C016B8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C016A8);
  }
  return result;
}

void sub_10071AD00()
{
  sub_10071A6AC((uint64_t)&unk_100C016C8);
}

void sub_10071AD34()
{
  sub_10071A6AC((uint64_t)&unk_100C016D0);
}

unint64_t sub_10071AD58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C016D8;
  if (!qword_100C016D8)
  {
    v1 = sub_100075EB0(&qword_100C01530);
    sub_10007AB60((uint64_t)&unk_100C016E0);
    sub_10007AB60((uint64_t)&qword_100BE38F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C016D8);
  }
  return result;
}

unint64_t sub_10071ADF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C016E8;
  if (!qword_100C016E8)
  {
    v1 = sub_100075EB0(&qword_100C01558);
    sub_10007AB60((uint64_t)&unk_100C016F0);
    sub_10007AB60((uint64_t)&unk_100C0A590);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C016E8);
  }
  return result;
}

uint64_t sub_10071AE98(_QWORD *a1)
{
  uint64_t v1;

  v1 = type metadata accessor for HStack(255, *a1, a1[1]);
  return swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v1);
}

uint64_t sub_10071AEC0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[5];

  v1 = *a1;
  v2 = sub_100075EB0(&qword_100C01560);
  sub_10007AB60((uint64_t)&unk_100C01568);
  v6[0] = v2;
  v6[1] = &type metadata for String;
  v6[2] = v1;
  v6[3] = v3;
  v6[4] = &protocol witness table for String;
  v4 = type metadata accessor for ForEach(255, v6);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v4);
}

unint64_t sub_10071AF5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C016F8;
  if (!qword_100C016F8)
  {
    v1 = sub_100075EB0(&qword_100C01578);
    sub_10007AB60((uint64_t)&unk_100C01700);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C016F8);
  }
  return result;
}

void sub_10071AFE0(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = sub_10071A608();
  v3 = type metadata accessor for _VariadicView.Tree(255, &type metadata for GridLayout, v1, v2);
  sub_10071A644();
  swift_getWitnessTable(&protocol conformance descriptor for <> _VariadicView.Tree<A, B>, v3);
  sub_100089028();
}

void *sub_10071B038()
{
  return &protocol witness table for Spacer;
}

void sub_10071B044()
{
  sub_1005D17C0((uint64_t)&unk_100C01708);
}

unint64_t sub_10071B078()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C01718;
  if (!qword_100C01718)
  {
    v1 = sub_100075EB0(&qword_100C015C0);
    sub_10071A6AC((uint64_t)&unk_100C015C8);
    sub_10015809C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C01718);
  }
  return result;
}

unint64_t sub_10071B108()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C01720;
  if (!qword_100C01720)
  {
    v1 = sub_100075EB0(&qword_100C01600);
    sub_10007AB60((uint64_t)&unk_100C01728);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100C01720);
  }
  return result;
}

uint64_t sub_10071B188(uint64_t a1)
{
  uint64_t v1;

  return swift_getOpaqueTypeConformance2(a1, v1, 1);
}

void sub_10071B194(_QWORD *a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  uint64_t v5;
  __int128 v6[2];

  sub_100043CA8(v2 + 16, (uint64_t)v6);
  swift_retain();
  sub_100617FA8(v5, v6, a1, a2);
}

uint64_t type metadata accessor for MoonScrubberModule()
{
  return objc_opt_self(_TtC7Weather18MoonScrubberModule);
}

id sub_10071B214(uint64_t a1, uint64_t a2)
{
  objc_class *v4;
  char *v5;
  char *v6;
  double v7;
  objc_super v9;

  v4 = (objc_class *)type metadata accessor for CloseButton.Coordinator();
  v5 = (char *)objc_allocWithZone(v4);
  v6 = &v5[OBJC_IVAR____TtCV7Weather11CloseButton11Coordinator_parent];
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  v9.receiver = v5;
  v9.super_class = v4;
  *(_QWORD *)&v7 = swift_retain().n128_u64[0];
  return objc_msgSendSuper2(&v9, "init", v7);
}

uint64_t sub_10071B280()
{
  uint64_t v0;
  void (*v1)(__n128);
  uint64_t v2;
  __n128 v3;

  v1 = *(void (**)(__n128))(v0 + OBJC_IVAR____TtCV7Weather11CloseButton11Coordinator_parent);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtCV7Weather11CloseButton11Coordinator_parent + 8);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

id sub_10071B320()
{
  return sub_10071B4A8(type metadata accessor for CloseButton.Coordinator);
}

uint64_t type metadata accessor for CloseButton.Coordinator()
{
  return objc_opt_self(_TtCV7Weather11CloseButton11Coordinator);
}

uint64_t sub_10071B360()
{
  void *v0;

  objc_msgSend(v0, "sendActionsForControlEvents:", 64);
  return 1;
}

id sub_10071B3B4(double a1, double a2, double a3, double a4)
{
  void *v4;
  objc_super v10;

  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for CloseButton.AccessibleCloseButton();
  return objc_msgSendSuper2(&v10, "initWithFrame:", a1, a2, a3, a4);
}

void sub_10071B434(void *a1)
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for CloseButton.AccessibleCloseButton();
  objc_msgSendSuper2(&v3, "initWithCoder:", a1);

  sub_100089028();
}

id sub_10071B49C()
{
  return sub_10071B4A8(type metadata accessor for CloseButton.AccessibleCloseButton);
}

id sub_10071B4A8(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for CloseButton.AccessibleCloseButton()
{
  return objc_opt_self(_TtCV7Weather11CloseButton21AccessibleCloseButton);
}

ValueMetadata *type metadata accessor for CloseButton()
{
  return &type metadata for CloseButton;
}

void sub_10071B508()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;

  v0 = type metadata accessor for CloseButton.AccessibleCloseButton();
  v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(v0), "buttonWithType:", 7);
  v2 = sub_1000BA294(&qword_100C01830);
  UIViewRepresentableContext.coordinator.getter(&v4, v2);
  v3 = v4;
  objc_msgSend(v1, "addTarget:action:forControlEvents:", v4, "doAction:", 64);

  sub_100089028();
}

id sub_10071B594@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  id result;

  result = sub_10071B214(*v1, v1[1]);
  *a1 = result;
  return result;
}

uint64_t sub_10071B5D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10071B698();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10071B620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10071B698();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10071B670(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10071B698();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_10071B698()
{
  unint64_t result;

  result = qword_100C01838;
  if (!qword_100C01838)
  {
    result = swift_getWitnessTable(&unk_1009C31DC, &type metadata for CloseButton);
    atomic_store(result, (unint64_t *)&qword_100C01838);
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchTracker()
{
  return &type metadata for SearchTracker;
}

_QWORD *sub_10071B6E4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2))
    {
      case 0u:
        v8 = type metadata accessor for DetailCondition(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = a3;
        v11 = 0;
        goto LABEL_9;
      case 2u:
        v13 = type metadata accessor for Location(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v9 = a1;
        v10 = a3;
        v11 = 2;
        goto LABEL_9;
      case 3u:
        *a1 = *a2;
        v14 = sub_1000BA294((uint64_t *)&unk_100BFFA70);
        v15 = *(int *)(v14 + 48);
        v16 = (char *)a1 + v15;
        v17 = (char *)a2 + v15;
        v18 = type metadata accessor for WeatherMapOverlayKind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
        *((_BYTE *)a1 + *(int *)(v14 + 64)) = *((_BYTE *)a2 + *(int *)(v14 + 64));
        v9 = a1;
        v10 = a3;
        v11 = 3;
        goto LABEL_9;
      case 4u:
        v19 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(a1, a2, v19);
        v9 = a1;
        v10 = a3;
        v11 = 4;
LABEL_9:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_10071B87C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v1 = a1;
  result = swift_getEnumCaseMultiPayload(a1);
  switch((int)result)
  {
    case 0:
      v3 = type metadata accessor for DetailCondition(0);
      goto LABEL_6;
    case 2:
      v3 = type metadata accessor for Location(0);
      goto LABEL_6;
    case 3:
      v1 += *(int *)(sub_1000BA294((uint64_t *)&unk_100BFFA70) + 48);
      v3 = type metadata accessor for WeatherMapOverlayKind(0);
      goto LABEL_6;
    case 4:
      v3 = type metadata accessor for WeatherCondition(0);
LABEL_6:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v1, v3);
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *sub_10071B91C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  switch(swift_getEnumCaseMultiPayload(a2))
  {
    case 0u:
      v6 = type metadata accessor for DetailCondition(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = a1;
      v8 = a3;
      v9 = 0;
      goto LABEL_7;
    case 2u:
      v10 = type metadata accessor for Location(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_7;
    case 3u:
      *a1 = *a2;
      v11 = sub_1000BA294((uint64_t *)&unk_100BFFA70);
      v12 = *(int *)(v11 + 48);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for WeatherMapOverlayKind(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
      *((_BYTE *)a1 + *(int *)(v11 + 64)) = *((_BYTE *)a2 + *(int *)(v11 + 64));
      v7 = a1;
      v8 = a3;
      v9 = 3;
      goto LABEL_7;
    case 4u:
      v16 = type metadata accessor for WeatherCondition(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a1, a2, v16);
      v7 = a1;
      v8 = a3;
      v9 = 4;
LABEL_7:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *sub_10071BA8C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 != a2)
  {
    sub_10071BC0C((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2))
    {
      case 0u:
        v6 = type metadata accessor for DetailCondition(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        v7 = a1;
        v8 = a3;
        v9 = 0;
        goto LABEL_8;
      case 2u:
        v10 = type metadata accessor for Location(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        v7 = a1;
        v8 = a3;
        v9 = 2;
        goto LABEL_8;
      case 3u:
        *a1 = *a2;
        v11 = sub_1000BA294((uint64_t *)&unk_100BFFA70);
        v12 = *(int *)(v11 + 48);
        v13 = (char *)a1 + v12;
        v14 = (char *)a2 + v12;
        v15 = type metadata accessor for WeatherMapOverlayKind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
        *((_BYTE *)a1 + *(int *)(v11 + 64)) = *((_BYTE *)a2 + *(int *)(v11 + 64));
        v7 = a1;
        v8 = a3;
        v9 = 3;
        goto LABEL_8;
      case 4u:
        v16 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a1, a2, v16);
        v7 = a1;
        v8 = a3;
        v9 = 4;
LABEL_8:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_10071BC0C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PerformanceTestAction(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_10071BC48(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  switch(swift_getEnumCaseMultiPayload(a2))
  {
    case 0u:
      v6 = type metadata accessor for DetailCondition(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = a1;
      v8 = a3;
      v9 = 0;
      goto LABEL_7;
    case 2u:
      v10 = type metadata accessor for Location(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_7;
    case 3u:
      *a1 = *a2;
      v11 = sub_1000BA294((uint64_t *)&unk_100BFFA70);
      v12 = *(int *)(v11 + 48);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for WeatherMapOverlayKind(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      *((_BYTE *)a1 + *(int *)(v11 + 64)) = *((_BYTE *)a2 + *(int *)(v11 + 64));
      v7 = a1;
      v8 = a3;
      v9 = 3;
      goto LABEL_7;
    case 4u:
      v16 = type metadata accessor for WeatherCondition(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a1, a2, v16);
      v7 = a1;
      v8 = a3;
      v9 = 4;
LABEL_7:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *sub_10071BDB8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 != a2)
  {
    sub_10071BC0C((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2))
    {
      case 0u:
        v6 = type metadata accessor for DetailCondition(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
        v7 = a1;
        v8 = a3;
        v9 = 0;
        goto LABEL_8;
      case 2u:
        v10 = type metadata accessor for Location(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
        v7 = a1;
        v8 = a3;
        v9 = 2;
        goto LABEL_8;
      case 3u:
        *a1 = *a2;
        v11 = sub_1000BA294((uint64_t *)&unk_100BFFA70);
        v12 = *(int *)(v11 + 48);
        v13 = (char *)a1 + v12;
        v14 = (char *)a2 + v12;
        v15 = type metadata accessor for WeatherMapOverlayKind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
        *((_BYTE *)a1 + *(int *)(v11 + 64)) = *((_BYTE *)a2 + *(int *)(v11 + 64));
        v7 = a1;
        v8 = a3;
        v9 = 3;
        goto LABEL_8;
      case 4u:
        v16 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a1, a2, v16);
        v7 = a1;
        v8 = a3;
        v9 = 4;
LABEL_8:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_10071BF38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v10;

  sub_100086258();
  if ((v10 & 1) == 0)
    return 0;
  if (a2 == a5 && a3 == a6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, a5);
}

uint64_t sub_10071BFB0(uint64_t *a1, uint64_t *a2)
{
  return sub_10071BF38(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

uint64_t *assignWithCopy for LocationViewRowViewModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t *assignWithTake for LocationViewRowViewModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  v5 = a2[2];
  v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t sub_10071C074(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD __dst[12];
  _BYTE v86[104];

  sub_1000BA294(&qword_100BC5F60);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100098728();
  v8 = (uint64_t *)(v7 - v6);
  sub_1000BA294(&qword_100BC5F88);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100098728();
  v12 = v11 - v10;
  sub_1000BA294(&qword_100BC5F90);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  sub_100098728();
  v16 = v15 - v14;
  sub_1000BA294(&qword_100BC5F98);
  sub_1000B42B0();
  __chkstk_darwin(v17);
  sub_100098728();
  v20 = v19 - v18;
  sub_1000BA294(&qword_100BC5FA0);
  sub_1000B42B0();
  __chkstk_darwin(v21);
  sub_100098728();
  v24 = v23 - v22;
  sub_1000BA294(&qword_100BC5FA8);
  sub_1000B42B0();
  __chkstk_darwin(v25);
  sub_100098728();
  v28 = v27 - v26;
  sub_1000BA294(&qword_100BC5FB0);
  sub_1000B42B0();
  __chkstk_darwin(v29);
  sub_100098728();
  v32 = v31 - v30;
  sub_1003ECAB4(a3, __dst);
  if ((~__dst[0] & 0xF000000000000006) != 0)
  {
    sub_1001C4B3C(__dst, v86);
    v49 = type metadata accessor for ReportWeatherViewState._Storage();
    v50 = swift_allocObject(v49, 112, 7);
    sub_1001C4B3C(v86, (void *)(v50 + 16));
    v51 = type metadata accessor for AppConfigurationState(0);
    v52 = sub_1000C2648(v51);
    v53 = sub_1000B4D18(v52);
    v54 = sub_1000DDEAC(v53);
    v55 = sub_1000DD2E0(v54);
    v56 = sub_1000C4E08(v55);
    sub_1000C3F70(v56);
    *v8 = v50;
    v84 = v32;
    v57 = v28;
    v58 = v24;
    v59 = v20;
    v60 = v16;
    v61 = v12;
    v62 = a2;
    v63 = type metadata accessor for ModalViewState(0);
    swift_storeEnumTagMultiPayload(v8, v63, 3);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v63);
    sub_10071C3C4((uint64_t *)a3);
    swift_retain();
    v83 = v62;
    v12 = v61;
    v16 = v60;
    v20 = v59;
    v24 = v58;
    v28 = v57;
    v32 = v84;
    v48 = sub_1000BB4A4(v64, v65, v66, v67, v68, v69, v70, v71, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, 0,
            v83);
    swift_release(v50);
  }
  else
  {
    v33 = type metadata accessor for AppConfigurationState(0);
    v34 = sub_1000C2648(v33);
    v35 = sub_1000B4D18(v34);
    v36 = sub_1000DDEAC(v35);
    v37 = sub_1000DD2E0(v36);
    v38 = sub_1000C4E08(v37);
    sub_1000C3F70(v38);
    v39 = type metadata accessor for ModalViewState(0);
    swift_storeEnumTagMultiPayload(v8, v39, 6);
    v40 = _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v39);
    v48 = sub_1000BB4A4(v40, v41, v42, v43, v44, v45, v46, v47, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, 0,
            a2);
  }
  sub_100021A68((uint64_t)v8, &qword_100BC5F60);
  sub_100021A68(v12, &qword_100BC5F88);
  sub_100021A68(v16, &qword_100BC5F90);
  sub_100021A68(v20, &qword_100BC5F98);
  sub_100021A68(v24, &qword_100BC5FA0);
  sub_100021A68(v28, &qword_100BC5FA8);
  sub_100021A68(v32, &qword_100BC5FB0);
  return v48;
}

uint64_t *sub_10071C3C4(uint64_t *a1)
{
  sub_10019D314(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
  return a1;
}

uint64_t sub_10071C414(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL4 IsReduceMotionEnabled;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[24];
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;

  sub_1000BA294(&qword_100BC5F60);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100088FDC();
  v69 = v3;
  sub_1000BA294(&qword_100BC5F88);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100088FDC();
  v68 = v5;
  sub_1000BA294(&qword_100BC5F90);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v67 = v7;
  sub_1000BA294(&qword_100BC5F98);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100098728();
  v11 = v10 - v9;
  sub_1000BA294(&qword_100BC5FA0);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100098728();
  v15 = v14 - v13;
  sub_1000BA294(&qword_100BC5FA8);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  sub_100098728();
  v19 = v18 - v17;
  sub_1000BA294(&qword_100BC5FB0);
  sub_1000B42B0();
  __chkstk_darwin(v20);
  sub_100098728();
  v23 = v22 - v21;
  sub_1000BA294(&qword_100BC3340);
  sub_1000B42B0();
  __chkstk_darwin(v24);
  sub_100098728();
  v27 = v26 - v25;
  v28 = type metadata accessor for EnvironmentState(0);
  sub_1000B42B0();
  __chkstk_darwin(v29);
  v31 = (char *)&v67 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v34 = (char *)&v67 - v33;
  v35 = a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment;
  swift_beginAccess(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment, v70, 0, 0);
  sub_10006A788(v35, (uint64_t)v31);
  v36 = type metadata accessor for Locale(0);
  sub_10009D34C(v27, v37, v38, v36);
  IsReduceMotionEnabled = UIAccessibilityIsReduceMotionEnabled();
  v71 = 1;
  v72 = 0u;
  v73 = 0u;
  v74 = 0;
  sub_1007686D0(2u, 5, 5, v27, 0, 0, IsReduceMotionEnabled, 2, v34, 2, 2, 0, 1, 2, 2, (uint64_t)&v71);
  sub_100021A68(v27, &qword_100BC3340);
  sub_10006A74C((uint64_t)v31);
  v40 = type metadata accessor for AppConfigurationState(0);
  sub_10009D34C(v23, v41, v42, v40);
  sub_10006A788((uint64_t)v34, v19);
  _s7Weather24LocationCompositionStateOwst_0(v19, 0, 1, v28);
  v43 = type metadata accessor for LocationsState(0);
  v46 = sub_1000BA2E8(v15, v44, v45, v43);
  v47 = type metadata accessor for NotificationsOptInState(v46);
  v50 = sub_1000BA2E8(v11, v48, v49, v47);
  v51 = type metadata accessor for TimeState(v50);
  v52 = v67;
  v55 = sub_1000BA2E8(v67, v53, v54, v51);
  v56 = type metadata accessor for ViewState(v55);
  v57 = v68;
  v60 = sub_1000BA2E8(v68, v58, v59, v56);
  v61 = type metadata accessor for ModalViewState(v60);
  v62 = v69;
  sub_10009D34C(v69, v63, v64, v61);
  v65 = sub_1000DEBAC(0, 3, v23, v19, v15, 0, 0, 0, v11, v52, v57, v62, 0, 0, 0, 0, 0, 0, 0, a1);
  sub_100021A68(v62, &qword_100BC5F60);
  sub_100021A68(v57, &qword_100BC5F88);
  sub_100021A68(v52, &qword_100BC5F90);
  sub_100021A68(v11, &qword_100BC5F98);
  sub_100021A68(v15, &qword_100BC5FA0);
  sub_100021A68(v19, &qword_100BC5FA8);
  sub_100021A68(v23, &qword_100BC5FB0);
  sub_10006A74C((uint64_t)v34);
  return v65;
}

_QWORD *sub_10071C808(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  int EnumCaseMultiPayload;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t, __n128);
  __n128 v66;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Location(0);
    v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
    v13 = swift_bridgeObjectRetain();
    v12(v9, v10, v11, v13);
    v14 = a3[6];
    v15 = (_QWORD *)((char *)v4 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    v17 = (int *)type metadata accessor for WeatherData(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, (uint64_t)v17))
    {
      v18 = sub_1000BA294(&qword_100BC3460);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
LABEL_27:
      v57 = a3[7];
      v58 = a3[8];
      v59 = (_QWORD *)((char *)v4 + v57);
      v60 = (_QWORD *)((char *)a2 + v57);
      v61 = v60[1];
      *v59 = *v60;
      v59[1] = v61;
      v62 = (char *)v4 + v58;
      v63 = (char *)a2 + v58;
      v64 = type metadata accessor for WeatherMapOverlayKind(0);
      v65 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v64 - 8) + 16);
      v66 = swift_bridgeObjectRetain();
      v65(v62, v63, v64, v66);
      *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
      return v4;
    }
    v20 = v16[1];
    *v15 = *v16;
    v15[1] = v20;
    v21 = v17[5];
    v22 = (char *)v15 + v21;
    v23 = (char *)v16 + v21;
    v24 = type metadata accessor for Locale(0);
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v23, 1, v24))
    {
      v25 = sub_1000BA294(&qword_100BC3340);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v22, 0, 1, v24);
    }
    v26 = v17[6];
    v27 = (char *)v15 + v26;
    v28 = (char *)v16 + v26;
    v29 = type metadata accessor for WeatherDataModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
    v30 = v17[7];
    v31 = (char *)v15 + v30;
    v32 = (char *)v16 + v30;
    v33 = sub_1000BA294(&qword_100BC3348);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v32, 1, v33))
    {
      v34 = type metadata accessor for WeatherData.CachingState(0);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      v35 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v31, v32, v35);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v31, 0, 1, v33);
    }
    v36 = v17[8];
    v37 = (_QWORD *)((char *)v15 + v36);
    v38 = (_QWORD *)((char *)v16 + v36);
    v39 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v38);
    if (EnumCaseMultiPayload == 1)
    {
      v45 = type metadata accessor for WeatherStatisticsModel(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v37, v38, v45);
      v42 = v37;
      v43 = v39;
      v44 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
        goto LABEL_17;
      }
      v41 = v38[1];
      *v37 = *v38;
      v37[1] = v41;
      swift_bridgeObjectRetain();
      v42 = v37;
      v43 = v39;
      v44 = 0;
    }
    swift_storeEnumTagMultiPayload(v42, v43, v44);
LABEL_17:
    v46 = v17[9];
    v47 = (char *)v15 + v46;
    v48 = (char *)v16 + v46;
    v49 = type metadata accessor for WeatherDataOverrides(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v48, 1, v49))
    {
      v50 = sub_1000BA294(&qword_100BC3350);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      v51 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v48, 1, v51))
      {
        v52 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v47, v48, v51);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v47, 0, 1, v51);
      }
      v53 = *(int *)(v49 + 20);
      v54 = &v47[v53];
      v55 = &v48[v53];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v55, 1, v51))
      {
        v56 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v54, v55, v51);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v54, 0, 1, v51);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v47, 0, 1, v49);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 0, 1, (uint64_t)v17);
    goto LABEL_27;
  }
  v19 = *a2;
  *v4 = *a2;
  v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return v4;
}

uint64_t sub_10071CC88(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int EnumCaseMultiPayload;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[6];
  v7 = (int *)type metadata accessor for WeatherData(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v6, 1, (uint64_t)v7))
  {
    swift_bridgeObjectRelease();
    v8 = v6 + v7[5];
    v9 = type metadata accessor for Locale(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v8, 1, v9))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
    v10 = v6 + v7[6];
    v11 = type metadata accessor for WeatherDataModel(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
    v12 = v6 + v7[7];
    v13 = sub_1000BA294(&qword_100BC3348);
    if (!_s7Weather24LocationCompositionStateOwet_0(v12, 1, v13))
    {
      v14 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
    }
    v15 = v6 + v7[8];
    type metadata accessor for WeatherData.WeatherStatisticsState(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v15);
    if (EnumCaseMultiPayload == 1)
    {
      v17 = type metadata accessor for WeatherStatisticsModel(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v15, v17);
    }
    else if (!EnumCaseMultiPayload)
    {
      swift_bridgeObjectRelease();
    }
    v18 = v6 + v7[9];
    v19 = type metadata accessor for WeatherDataOverrides(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v18, 1, v19))
    {
      v20 = type metadata accessor for Date(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v18, 1, v20))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v18, v20);
      v21 = v18 + *(int *)(v19 + 20);
      if (!_s7Weather24LocationCompositionStateOwet_0(v21, 1, v20))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v21, v20);
    }
  }
  swift_bridgeObjectRelease();
  v22 = a1 + a2[8];
  v23 = type metadata accessor for WeatherMapOverlayKind(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
}

_QWORD *sub_10071CEC4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  int EnumCaseMultiPayload;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t, __n128);
  __n128 v64;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Location(0);
  v11 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v10 - 8) + 16);
  v12 = swift_bridgeObjectRetain();
  v11(v8, v9, v10, v12);
  v13 = a3[6];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v16 = (int *)type metadata accessor for WeatherData(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, (uint64_t)v16))
  {
    v17 = sub_1000BA294(&qword_100BC3460);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_25;
  }
  v18 = v15[1];
  *v14 = *v15;
  v14[1] = v18;
  v19 = v16[5];
  v20 = (char *)v14 + v19;
  v21 = (char *)v15 + v19;
  v22 = type metadata accessor for Locale(0);
  swift_bridgeObjectRetain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v21, 1, v22))
  {
    v23 = sub_1000BA294(&qword_100BC3340);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v20, 0, 1, v22);
  }
  v24 = v16[6];
  v25 = (char *)v14 + v24;
  v26 = (char *)v15 + v24;
  v27 = type metadata accessor for WeatherDataModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
  v28 = v16[7];
  v29 = (char *)v14 + v28;
  v30 = (char *)v15 + v28;
  v31 = sub_1000BA294(&qword_100BC3348);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v30, 1, v31))
  {
    v32 = type metadata accessor for WeatherData.CachingState(0);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v33 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v29, v30, v33);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v29, 0, 1, v31);
  }
  v34 = v16[8];
  v35 = (_QWORD *)((char *)v14 + v34);
  v36 = (_QWORD *)((char *)v15 + v34);
  v37 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v36);
  if (EnumCaseMultiPayload == 1)
  {
    v43 = type metadata accessor for WeatherStatisticsModel(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v35, v36, v43);
    v40 = v35;
    v41 = v37;
    v42 = 1;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      goto LABEL_15;
    }
    v39 = v36[1];
    *v35 = *v36;
    v35[1] = v39;
    swift_bridgeObjectRetain();
    v40 = v35;
    v41 = v37;
    v42 = 0;
  }
  swift_storeEnumTagMultiPayload(v40, v41, v42);
LABEL_15:
  v44 = v16[9];
  v45 = (char *)v14 + v44;
  v46 = (char *)v15 + v44;
  v47 = type metadata accessor for WeatherDataOverrides(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v46, 1, v47))
  {
    v48 = sub_1000BA294(&qword_100BC3350);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    v49 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v46, 1, v49))
    {
      v50 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v45, v46, v49);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v45, 0, 1, v49);
    }
    v51 = *(int *)(v47 + 20);
    v52 = &v45[v51];
    v53 = &v46[v51];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v53, 1, v49))
    {
      v54 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v52, v53, v49);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v52, 0, 1, v49);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v45, 0, 1, v47);
  }
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 0, 1, (uint64_t)v16);
LABEL_25:
  v55 = a3[7];
  v56 = a3[8];
  v57 = (_QWORD *)((char *)a1 + v55);
  v58 = (_QWORD *)((char *)a2 + v55);
  v59 = v58[1];
  *v57 = *v58;
  v57[1] = v59;
  v60 = (char *)a1 + v56;
  v61 = (char *)a2 + v56;
  v62 = type metadata accessor for WeatherMapOverlayKind(0);
  v63 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v62 - 8) + 16);
  v64 = swift_bridgeObjectRetain();
  v63(v60, v61, v62, v64);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

_QWORD *sub_10071D318(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int *v13;
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  size_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  int EnumCaseMultiPayload;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  size_t v54;
  char *v55;
  const void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  int v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = (int *)type metadata accessor for WeatherData(0);
  v14 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, (uint64_t)v13);
  v15 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, (uint64_t)v13);
  if (v14)
  {
    if (!v15)
    {
      *v11 = *v12;
      v11[1] = v12[1];
      v16 = v13[5];
      v17 = (char *)v11 + v16;
      v18 = (char *)v12 + v16;
      v19 = type metadata accessor for Locale(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v18, 1, v19))
      {
        v20 = sub_1000BA294(&qword_100BC3340);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v17, 0, 1, v19);
      }
      v31 = v13[6];
      v32 = (char *)v11 + v31;
      v33 = (char *)v12 + v31;
      v34 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
      v35 = v13[7];
      v36 = (char *)v11 + v35;
      v37 = (char *)v12 + v35;
      v38 = sub_1000BA294(&qword_100BC3348);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v37, 1, v38))
      {
        v39 = type metadata accessor for WeatherData.CachingState(0);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        v40 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v36, v37, v40);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v36, 0, 1, v38);
      }
      v41 = v13[8];
      v42 = (_QWORD *)((char *)v11 + v41);
      v43 = (_QWORD *)((char *)v12 + v41);
      v44 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v43);
      if (EnumCaseMultiPayload == 1)
      {
        v49 = type metadata accessor for WeatherStatisticsModel(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v42, v43, v49);
        v46 = v42;
        v47 = v44;
        v48 = 1;
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
          goto LABEL_23;
        }
        *v42 = *v43;
        v42[1] = v43[1];
        swift_bridgeObjectRetain();
        v46 = v42;
        v47 = v44;
        v48 = 0;
      }
      swift_storeEnumTagMultiPayload(v46, v47, v48);
LABEL_23:
      v50 = v13[9];
      v51 = (char *)v11 + v50;
      v52 = (char *)v12 + v50;
      v53 = type metadata accessor for WeatherDataOverrides(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v52, 1, v53))
      {
        v54 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC3350) - 8) + 64);
        v55 = v51;
        v56 = v52;
LABEL_25:
        memcpy(v55, v56, v54);
LABEL_47:
        v87 = (uint64_t)v11;
        v88 = (uint64_t)v13;
LABEL_48:
        _s7Weather24LocationCompositionStateOwst_0(v87, 0, 1, v88);
        goto LABEL_49;
      }
      v57 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v52, 1, v57))
      {
        v58 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v51, v52, v57);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v51, 0, 1, v57);
      }
      v81 = *(int *)(v53 + 20);
      v82 = &v51[v81];
      v83 = &v52[v81];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v83, 1, v57))
      {
        v84 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v82, v83, v57);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v82, 0, 1, v57);
      }
      v85 = (uint64_t)v51;
      v86 = v53;
      goto LABEL_46;
    }
    goto LABEL_7;
  }
  if (v15)
  {
    sub_1000B56C0((uint64_t)v11, type metadata accessor for WeatherData);
LABEL_7:
    v21 = &qword_100BC3460;
LABEL_8:
    v22 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(v21) - 8) + 64);
    v23 = v11;
    v24 = v12;
    goto LABEL_9;
  }
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v25 = v13[5];
  v26 = (char *)v11 + v25;
  v27 = (char *)v12 + v25;
  v28 = type metadata accessor for Locale(0);
  v29 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v26, 1, v28);
  v30 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v27, 1, v28);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v26, 0, 1, v28);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v59 = *(_QWORD *)(v28 - 8);
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v26, v28);
LABEL_30:
    v60 = sub_1000BA294(&qword_100BC3340);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v59 + 24))(v26, v27, v28);
LABEL_31:
  v61 = v13[6];
  v62 = (char *)v11 + v61;
  v63 = (char *)v12 + v61;
  v64 = type metadata accessor for WeatherDataModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 24))(v62, v63, v64);
  v65 = v13[7];
  v66 = (char *)v11 + v65;
  v67 = (char *)v12 + v65;
  v68 = sub_1000BA294(&qword_100BC3348);
  v69 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v66, 1, v68);
  v70 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v67, 1, v68);
  if (v69)
  {
    if (!v70)
    {
      v71 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v66, v67, v71);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v66, 0, 1, v68);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v70)
  {
    sub_100021A3C((uint64_t)v66, &qword_100BC3348);
LABEL_36:
    v72 = type metadata accessor for WeatherData.CachingState(0);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    goto LABEL_37;
  }
  v103 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 24))(v66, v67, v103);
LABEL_37:
  if (a1 == a2)
    goto LABEL_53;
  v73 = v13[8];
  v74 = (_QWORD *)((char *)v11 + v73);
  v75 = (_QWORD *)((char *)v12 + v73);
  sub_1000B56C0((uint64_t)v11 + v73, type metadata accessor for WeatherData.WeatherStatisticsState);
  v76 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
  v77 = swift_getEnumCaseMultiPayload(v75);
  if (v77 == 1)
  {
    v97 = type metadata accessor for WeatherStatisticsModel(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v97 - 8) + 16))(v74, v75, v97);
    v78 = v74;
    v79 = v76;
    v80 = 1;
    goto LABEL_51;
  }
  if (!v77)
  {
    *v74 = *v75;
    v74[1] = v75[1];
    swift_bridgeObjectRetain();
    v78 = v74;
    v79 = v76;
    v80 = 0;
LABEL_51:
    swift_storeEnumTagMultiPayload(v78, v79, v80);
    goto LABEL_53;
  }
  memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
LABEL_53:
  v98 = v13[9];
  v11 = (_QWORD *)((char *)v11 + v98);
  v12 = (_QWORD *)((char *)v12 + v98);
  v13 = (int *)type metadata accessor for WeatherDataOverrides(0);
  v99 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, (uint64_t)v13);
  v100 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, (uint64_t)v13);
  if (v99)
  {
    if (!v100)
    {
      v101 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v101))
      {
        v102 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v101 - 8) + 16))(v11, v12, v101);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v101);
      }
      v107 = v13[5];
      v108 = (char *)v11 + v107;
      v109 = (uint64_t)v12 + v107;
      if (_s7Weather24LocationCompositionStateOwet_0(v109, 1, v101))
      {
        v54 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
        v55 = v108;
        v56 = (const void *)v109;
        goto LABEL_25;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 16))(v108, v109, v101);
      v85 = (uint64_t)v108;
      v86 = v101;
LABEL_46:
      _s7Weather24LocationCompositionStateOwst_0(v85, 0, 1, v86);
      goto LABEL_47;
    }
    goto LABEL_59;
  }
  if (v100)
  {
    sub_1000B56C0((uint64_t)v11, type metadata accessor for WeatherDataOverrides);
LABEL_59:
    v21 = &qword_100BC3350;
    goto LABEL_8;
  }
  v104 = type metadata accessor for Date(0);
  v105 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v104);
  v106 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v104);
  if (!v105)
  {
    v110 = *(_QWORD *)(v104 - 8);
    if (!v106)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v110 + 24))(v11, v12, v104);
      goto LABEL_72;
    }
    (*(void (**)(_QWORD *, uint64_t))(v110 + 8))(v11, v104);
    goto LABEL_71;
  }
  if (v106)
  {
LABEL_71:
    v111 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
    goto LABEL_72;
  }
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v104 - 8) + 16))(v11, v12, v104);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v104);
LABEL_72:
  v112 = v13[5];
  v113 = (uint64_t)v11 + v112;
  v114 = (uint64_t)v12 + v112;
  v115 = _s7Weather24LocationCompositionStateOwet_0(v113, 1, v104);
  v116 = _s7Weather24LocationCompositionStateOwet_0(v114, 1, v104);
  if (v115)
  {
    if (!v116)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 16))(v113, v114, v104);
      v87 = v113;
      v88 = v104;
      goto LABEL_48;
    }
  }
  else
  {
    v117 = *(_QWORD *)(v104 - 8);
    if (!v116)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v117 + 24))(v113, v114, v104);
      goto LABEL_49;
    }
    (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v113, v104);
  }
  v22 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
  v23 = (void *)v113;
  v24 = (const void *)v114;
LABEL_9:
  memcpy(v23, v24, v22);
LABEL_49:
  v89 = a3[7];
  v90 = (_QWORD *)((char *)a1 + v89);
  v91 = (_QWORD *)((char *)a2 + v89);
  *v90 = *v91;
  v90[1] = v91[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v92 = a3[8];
  v93 = (char *)a1 + v92;
  v94 = (char *)a2 + v92;
  v95 = type metadata accessor for WeatherMapOverlayKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v95 - 8) + 24))(v93, v94, v95);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

_OWORD *sub_10071DD08(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = (_OWORD *)((char *)a1 + v10);
  v12 = (_OWORD *)((char *)a2 + v10);
  v13 = (int *)type metadata accessor for WeatherData(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, (uint64_t)v13))
  {
    v14 = sub_1000BA294(&qword_100BC3460);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    *v11 = *v12;
    v15 = v13[5];
    v16 = (char *)v11 + v15;
    v17 = (char *)v12 + v15;
    v18 = type metadata accessor for Locale(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v17, 1, v18))
    {
      v19 = sub_1000BA294(&qword_100BC3340);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v16, 0, 1, v18);
    }
    v20 = v13[6];
    v21 = (char *)v11 + v20;
    v22 = (char *)v12 + v20;
    v23 = type metadata accessor for WeatherDataModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
    v24 = v13[7];
    v25 = (char *)v11 + v24;
    v26 = (char *)v12 + v24;
    v27 = sub_1000BA294(&qword_100BC3348);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v26, 1, v27))
    {
      v28 = type metadata accessor for WeatherData.CachingState(0);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v29 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v25, v26, v29);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v25, 0, 1, v27);
    }
    v30 = v13[8];
    v31 = (char *)v11 + v30;
    v32 = (char *)v12 + v30;
    v33 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
    if (swift_getEnumCaseMultiPayload(v32) == 1)
    {
      v34 = type metadata accessor for WeatherStatisticsModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v31, v32, v34);
      swift_storeEnumTagMultiPayload(v31, v33, 1);
    }
    else
    {
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    v35 = v13[9];
    v36 = (char *)v11 + v35;
    v37 = (char *)v12 + v35;
    v38 = type metadata accessor for WeatherDataOverrides(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v37, 1, v38))
    {
      v39 = sub_1000BA294(&qword_100BC3350);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      v40 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v37, 1, v40))
      {
        v41 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v36, v37, v40);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v36, 0, 1, v40);
      }
      v42 = *(int *)(v38 + 20);
      v43 = &v36[v42];
      v44 = &v37[v42];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v44, 1, v40))
      {
        v45 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v43, v44, v40);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v43, 0, 1, v40);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v36, 0, 1, v38);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, (uint64_t)v13);
  }
  v46 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  v47 = (char *)a1 + v46;
  v48 = (char *)a2 + v46;
  v49 = type metadata accessor for WeatherMapOverlayKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v47, v48, v49);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

_QWORD *sub_10071E114(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  size_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  size_t v52;
  char *v53;
  const void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  uint64_t v113;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = (int *)type metadata accessor for WeatherData(0);
  v15 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, (uint64_t)v14);
  v16 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, (uint64_t)v14);
  if (v15)
  {
    if (!v16)
    {
      *(_OWORD *)v12 = *(_OWORD *)v13;
      v17 = v14[5];
      v18 = &v12[v17];
      v19 = &v13[v17];
      v20 = type metadata accessor for Locale(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v19, 1, v20))
      {
        v21 = sub_1000BA294(&qword_100BC3340);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v18, 0, 1, v20);
      }
      v33 = v14[6];
      v34 = &v12[v33];
      v35 = &v13[v33];
      v36 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
      v37 = v14[7];
      v38 = &v12[v37];
      v39 = &v13[v37];
      v40 = sub_1000BA294(&qword_100BC3348);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v39, 1, v40))
      {
        v41 = type metadata accessor for WeatherData.CachingState(0);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        v42 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v38, v39, v42);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v38, 0, 1, v40);
      }
      v43 = v14[8];
      v44 = &v12[v43];
      v45 = &v13[v43];
      v46 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
      if (swift_getEnumCaseMultiPayload(v45) == 1)
      {
        v47 = type metadata accessor for WeatherStatisticsModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v44, v45, v47);
        swift_storeEnumTagMultiPayload(v44, v46, 1);
      }
      else
      {
        memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      v48 = v14[9];
      v49 = &v12[v48];
      v50 = &v13[v48];
      v51 = type metadata accessor for WeatherDataOverrides(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v50, 1, v51))
      {
        v52 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC3350) - 8) + 64);
        v53 = v49;
        v54 = v50;
LABEL_22:
        memcpy(v53, v54, v52);
LABEL_51:
        v87 = (uint64_t)v12;
        v88 = (uint64_t)v14;
LABEL_52:
        _s7Weather24LocationCompositionStateOwst_0(v87, 0, 1, v88);
        goto LABEL_53;
      }
      v55 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v50, 1, v55))
      {
        v56 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v49, v50, v55);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v49, 0, 1, v55);
      }
      v81 = *(int *)(v51 + 20);
      v82 = &v49[v81];
      v83 = &v50[v81];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v83, 1, v55))
      {
        v84 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v82, v83, v55);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v82, 0, 1, v55);
      }
      v85 = (uint64_t)v49;
      v86 = v51;
      goto LABEL_50;
    }
    goto LABEL_7;
  }
  if (v16)
  {
    sub_1000B56C0((uint64_t)v12, type metadata accessor for WeatherData);
LABEL_7:
    v22 = &qword_100BC3460;
LABEL_8:
    v23 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(v22) - 8) + 64);
    v24 = v12;
    v25 = v13;
    goto LABEL_9;
  }
  v26 = *((_QWORD *)v13 + 1);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *((_QWORD *)v12 + 1) = v26;
  swift_bridgeObjectRelease();
  v27 = v14[5];
  v28 = &v12[v27];
  v29 = &v13[v27];
  v30 = type metadata accessor for Locale(0);
  v31 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v28, 1, v30);
  v32 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v29, 1, v30);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v28, 0, 1, v30);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  v57 = *(_QWORD *)(v30 - 8);
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v57 + 8))(v28, v30);
LABEL_27:
    v58 = sub_1000BA294(&qword_100BC3340);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    goto LABEL_28;
  }
  (*(void (**)(char *, char *, uint64_t))(v57 + 40))(v28, v29, v30);
LABEL_28:
  v59 = v14[6];
  v60 = &v12[v59];
  v61 = &v13[v59];
  v62 = type metadata accessor for WeatherDataModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 40))(v60, v61, v62);
  v63 = v14[7];
  v64 = &v12[v63];
  v65 = &v13[v63];
  v66 = sub_1000BA294(&qword_100BC3348);
  v67 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v64, 1, v66);
  v68 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v65, 1, v66);
  if (v67)
  {
    if (!v68)
    {
      v69 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v64, v65, v69);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v64, 0, 1, v66);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v68)
  {
    sub_100021A3C((uint64_t)v64, &qword_100BC3348);
LABEL_33:
    v70 = type metadata accessor for WeatherData.CachingState(0);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_34;
  }
  v99 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v99 - 8) + 40))(v64, v65, v99);
LABEL_34:
  if (a1 != a2)
  {
    v71 = v14[8];
    v72 = &v12[v71];
    v73 = &v13[v71];
    sub_1000B56C0((uint64_t)&v12[v71], type metadata accessor for WeatherData.WeatherStatisticsState);
    v74 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
    if (swift_getEnumCaseMultiPayload(v73) == 1)
    {
      v75 = type metadata accessor for WeatherStatisticsModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v72, v73, v75);
      swift_storeEnumTagMultiPayload(v72, v74, 1);
    }
    else
    {
      memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    }
  }
  v76 = v14[9];
  v12 += v76;
  v13 += v76;
  v14 = (int *)type metadata accessor for WeatherDataOverrides(0);
  v77 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, (uint64_t)v14);
  v78 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, (uint64_t)v14);
  if (v77)
  {
    if (!v78)
    {
      v79 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v79))
      {
        v80 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 32))(v12, v13, v79);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v79);
      }
      v103 = v14[5];
      v104 = &v12[v103];
      v105 = (uint64_t)&v13[v103];
      if (_s7Weather24LocationCompositionStateOwet_0(v105, 1, v79))
      {
        v52 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
        v53 = v104;
        v54 = (const void *)v105;
        goto LABEL_22;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 32))(v104, v105, v79);
      v85 = (uint64_t)v104;
      v86 = v79;
LABEL_50:
      _s7Weather24LocationCompositionStateOwst_0(v85, 0, 1, v86);
      goto LABEL_51;
    }
    goto LABEL_44;
  }
  if (v78)
  {
    sub_1000B56C0((uint64_t)v12, type metadata accessor for WeatherDataOverrides);
LABEL_44:
    v22 = &qword_100BC3350;
    goto LABEL_8;
  }
  v100 = type metadata accessor for Date(0);
  v101 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v100);
  v102 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v100);
  if (!v101)
  {
    v106 = *(_QWORD *)(v100 - 8);
    if (!v102)
    {
      (*(void (**)(char *, char *, uint64_t))(v106 + 40))(v12, v13, v100);
      goto LABEL_66;
    }
    (*(void (**)(char *, uint64_t))(v106 + 8))(v12, v100);
    goto LABEL_65;
  }
  if (v102)
  {
LABEL_65:
    v107 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
    goto LABEL_66;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 32))(v12, v13, v100);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v100);
LABEL_66:
  v108 = v14[5];
  v109 = (uint64_t)&v12[v108];
  v110 = (uint64_t)&v13[v108];
  v111 = _s7Weather24LocationCompositionStateOwet_0(v109, 1, v100);
  v112 = _s7Weather24LocationCompositionStateOwet_0(v110, 1, v100);
  if (v111)
  {
    if (!v112)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 32))(v109, v110, v100);
      v87 = v109;
      v88 = v100;
      goto LABEL_52;
    }
  }
  else
  {
    v113 = *(_QWORD *)(v100 - 8);
    if (!v112)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v113 + 40))(v109, v110, v100);
      goto LABEL_53;
    }
    (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v109, v100);
  }
  v23 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
  v24 = (void *)v109;
  v25 = (const void *)v110;
LABEL_9:
  memcpy(v24, v25, v23);
LABEL_53:
  v89 = a3[7];
  v90 = (_QWORD *)((char *)a1 + v89);
  v91 = (_QWORD *)((char *)a2 + v89);
  v93 = *v91;
  v92 = v91[1];
  *v90 = v93;
  v90[1] = v92;
  swift_bridgeObjectRelease();
  v94 = a3[8];
  v95 = (char *)a1 + v94;
  v96 = (char *)a2 + v94;
  v97 = type metadata accessor for WeatherMapOverlayKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 40))(v95, v96, v97);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

uint64_t sub_10071EA74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10071EA80);
}

uint64_t sub_10071EA80(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6 = sub_1000988EC();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = a3[5];
    return _s7Weather24LocationCompositionStateOwet_0(v4 + v8, v3, v7);
  }
  v9 = sub_1000BA294(&qword_100BC3460);
  if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v9;
    v8 = a3[6];
    return _s7Weather24LocationCompositionStateOwet_0(v4 + v8, v3, v7);
  }
  if ((_DWORD)v3 != 0x7FFFFFFF)
  {
    v7 = type metadata accessor for WeatherMapOverlayKind(0);
    v8 = a3[8];
    return _s7Weather24LocationCompositionStateOwet_0(v4 + v8, v3, v7);
  }
  v10 = *(_QWORD *)(v4 + a3[7] + 8);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t sub_10071EB3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10071EB48);
}

uint64_t sub_10071EB48(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = sub_1000988EC();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a4[5];
  }
  else
  {
    result = sub_1000BA294(&qword_100BC3460);
    if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    {
      v9 = result;
      v10 = a4[6];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(v5 + a4[7] + 8) = (v4 - 1);
        return result;
      }
      v9 = type metadata accessor for WeatherMapOverlayKind(0);
      v10 = a4[8];
    }
  }
  return _s7Weather24LocationCompositionStateOwst_0(v5 + v10, v4, v4, v9);
}

uint64_t type metadata accessor for ConditionDetailMapViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100C019D8;
  if (!qword_100C019D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ConditionDetailMapViewModel);
  return result;
}

void sub_10071EC38(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[6];

  v8[0] = &unk_1009C3410;
  v2 = type metadata accessor for Location(319);
  if (v3 <= 0x3F)
  {
    v8[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_10014DF4C(319);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      v8[3] = &unk_1009C3428;
      v6 = type metadata accessor for WeatherMapOverlayKind(319);
      if (v7 <= 0x3F)
      {
        v8[4] = *(_QWORD *)(v6 - 8) + 64;
        v8[5] = &unk_1009C3440;
        swift_initStructMetadata(a1, 256, 6, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_10071ECF4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  char v23;
  char v24;
  int *v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char v36;
  uint64_t v38;

  type metadata accessor for WeatherData(0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_1000BA294(&qword_100BD4C40);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BA294(&qword_100BC3460);
  sub_1000B42B0();
  v12 = __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v38 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v38 - v18;
  v20 = a1[1];
  v21 = a2[1];
  if (!v20)
  {
    if (v21)
      goto LABEL_28;
    goto LABEL_10;
  }
  if (!v21)
    goto LABEL_28;
  v22 = *a1 == *a2 && v20 == v21;
  if (v22 || (v23 = _stringCompareWithSmolCheck(_:_:expecting:)(*a1, v20, *a2, v21, 0), v24 = 0, (v23 & 1) != 0))
  {
LABEL_10:
    v25 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
    if ((static Location.== infix(_:_:)((char *)a1 + v25[5], (char *)a2 + v25[5]) & 1) == 0)
      goto LABEL_28;
    sub_10014DF04((uint64_t)a1 + v25[6], (uint64_t)v19);
    sub_10014DF04((uint64_t)a2 + v25[6], (uint64_t)v17);
    v26 = (uint64_t)&v10[*(int *)(v7 + 48)];
    sub_10014DF04((uint64_t)v19, (uint64_t)v10);
    sub_10014DF04((uint64_t)v17, v26);
    sub_1000B4744((uint64_t)v10);
    if (v22)
    {
      sub_1000BC9B4((uint64_t)v17);
      sub_1000BC9B4((uint64_t)v19);
      sub_1000B4744(v26);
      if (v22)
      {
        sub_100021A3C((uint64_t)v10, &qword_100BC3460);
LABEL_21:
        v30 = v25[7];
        v31 = *(_QWORD *)((char *)a1 + v30);
        v32 = *(_QWORD *)((char *)a1 + v30 + 8);
        v33 = (_QWORD *)((char *)a2 + v30);
        v34 = v33[1];
        if (v31 != *v33 || v32 != v34)
        {
          v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, *v33, v34, 0);
          v24 = 0;
          if ((v36 & 1) == 0)
            return v24 & 1;
        }
        if ((static WeatherMapOverlayKind.== infix(_:_:)((char *)a1 + v25[8], (char *)a2 + v25[8]) & 1) != 0)
        {
          v24 = *((_BYTE *)a1 + v25[9]) ^ *((_BYTE *)a2 + v25[9]) ^ 1;
          return v24 & 1;
        }
LABEL_28:
        v24 = 0;
        return v24 & 1;
      }
    }
    else
    {
      sub_10014DF04((uint64_t)v10, (uint64_t)v14);
      sub_1000B4744(v26);
      if (!v27)
      {
        sub_10014DEC0(v26, (uint64_t)v6);
        sub_1000FAF2C(v14, v6);
        v29 = v28;
        sub_1000B56C0((uint64_t)v6, type metadata accessor for WeatherData);
        sub_1000BC9B4((uint64_t)v17);
        sub_1000BC9B4((uint64_t)v19);
        sub_1000B56C0((uint64_t)v14, type metadata accessor for WeatherData);
        sub_1000BC9B4((uint64_t)v10);
        if ((v29 & 1) == 0)
          goto LABEL_28;
        goto LABEL_21;
      }
      sub_100021A3C((uint64_t)v17, &qword_100BC3460);
      sub_100021A3C((uint64_t)v19, &qword_100BC3460);
      sub_1000B56C0((uint64_t)v14, type metadata accessor for WeatherData);
    }
    sub_100021A3C((uint64_t)v10, &qword_100BD4C40);
    goto LABEL_28;
  }
  return v24 & 1;
}

uint64_t sub_10071F010(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = sub_1000DAB2C();
  v6 = type metadata accessor for UnitConfiguration.Temperature(v5);
  sub_1000BAC70(v6);
  v7 = sub_1000DAB2C();
  v8 = type metadata accessor for UnitConfiguration.Distance(v7);
  sub_1000BAC70(v8);
  v9 = sub_1000DAB2C();
  v10 = type metadata accessor for UnitConfiguration.WindSpeed(v9);
  sub_1000BAC70(v10);
  v11 = sub_1000DAB2C();
  v12 = type metadata accessor for UnitConfiguration.Pressure(v11);
  sub_1000BAC70(v12);
  v13 = sub_1000DAB2C();
  v14 = type metadata accessor for UnitConfiguration.Precipitation(v13);
  sub_1000BAC70(v14);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC7Weather15SettingsMonitor_observer) = 0;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

void sub_10071F0B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  __n128 v4;
  uint64_t v5;
  void *v6;

  v1 = OBJC_IVAR____TtC7Weather15SettingsMonitor_observer;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC7Weather15SettingsMonitor_observer))
  {
    sub_100079F70();
  }
  else
  {
    v2 = v0;
    sub_1000A0794(0, &qword_100C01B50, NSUserDefaults_ptr);
    v3 = (void *)static NSUserDefaults.weatherShared.getter();
    v4 = swift_retain();
    v5 = NSUserDefaults.registerUnitsConfigurationChanges(_:)(sub_1007204C4, v2, v4);

    swift_release(v2);
    v6 = *(void **)(v2 + v1);
    *(_QWORD *)(v2 + v1) = v5;

  }
}

uint64_t sub_10071F140(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  void (*v17)(char *, uint64_t);
  void *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[5];
  uint64_t v31;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v27 = *(_QWORD *)(v5 - 8);
  v28 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchTime(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v26 - v13;
  v15 = sub_1000A0794(0, (unint64_t *)&qword_100BC29A0, OS_dispatch_queue_ptr);
  v16 = (void *)static OS_dispatch_queue.main.getter(v15);
  static DispatchTime.now()(v16);
  + infix(_:_:)(v11);
  v17 = *(void (**)(char *, uint64_t))(v9 + 8);
  v17(v11, v8);
  aBlock[4] = sub_1007204CC;
  v31 = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100121D84;
  aBlock[3] = &unk_100B8CA50;
  v18 = _Block_copy(aBlock);
  v19 = v31;
  swift_retain();
  v20 = swift_release(v19);
  static DispatchQoS.unspecified.getter(v20);
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100086DA4((unint64_t *)&qword_100BFFA20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = v21;
  v23 = sub_1000BA294(&qword_100BD4F10);
  v24 = sub_100121014();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v23, v24, v2, v22);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v14, v7, v4, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v28);
  return ((uint64_t (*)(char *, uint64_t))v17)(v14, v8);
}

void sub_10071F3B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  void (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t);
  uint64_t v94;
  char v95;
  void (*v96)(uint64_t, uint64_t *);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(uint64_t, _QWORD);
  int v130;
  uint64_t v131;
  void (*v132)(uint64_t);
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  double v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  void (*v151)(uint64_t);
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t (*v156)(uint64_t);
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(uint64_t, uint64_t, __n128);
  __n128 v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void (*v186)(uint64_t, _QWORD);
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char v200[8];
  char v201[8];
  char v202[8];
  char v203[8];
  char v204[8];
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  char v208[8];
  char v209[8];
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;

  v0 = type metadata accessor for UnitConfiguration.WindSpeed(0);
  sub_1000B43A4(v0, (uint64_t)v208);
  v175 = v1;
  sub_10009D98C();
  __chkstk_darwin(v2);
  sub_100088FDC();
  sub_10009511C(v3);
  v184 = sub_1000BA294(&qword_100C01B58);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100088FDC();
  sub_10009511C(v5);
  sub_1000BA294(qword_100BD7150);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v7);
  sub_100079F7C();
  v9 = sub_1000987B4(v8);
  v10 = type metadata accessor for UnitConfiguration.Precipitation(v9);
  sub_1000B43A4(v10, (uint64_t)&v206 + 8);
  v173 = v11;
  sub_10009D98C();
  __chkstk_darwin(v12);
  sub_100088FDC();
  sub_10009511C(v13);
  v182 = sub_1000BA294(&qword_100C01B60);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  sub_100088FDC();
  sub_10009511C(v15);
  sub_1000BA294(&qword_100BD7138);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v17);
  sub_100079F7C();
  v19 = sub_1000987B4(v18);
  v20 = type metadata accessor for UnitConfiguration.Pressure(v19);
  sub_1000B43A4(v20, (uint64_t)&v205 + 8);
  v172 = v21;
  sub_10009D98C();
  __chkstk_darwin(v22);
  sub_100088FDC();
  sub_10009511C(v23);
  v179 = sub_1000BA294(&qword_100C01B68);
  sub_1000B42B0();
  __chkstk_darwin(v24);
  sub_100088FDC();
  sub_10009511C(v25);
  sub_1000BA294(&qword_100BD7140);
  sub_1000B42B0();
  __chkstk_darwin(v26);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v27);
  sub_100079F7C();
  v29 = sub_1000987B4(v28);
  v30 = type metadata accessor for UnitConfiguration.Distance(v29);
  sub_1000B43A4(v30, (uint64_t)v204);
  v170 = v31;
  sub_10009D98C();
  __chkstk_darwin(v32);
  sub_100088FDC();
  sub_10009511C(v33);
  v176 = sub_1000BA294(&qword_100C01B70);
  sub_1000B42B0();
  __chkstk_darwin(v34);
  sub_100088FDC();
  sub_10009511C(v35);
  sub_1000BA294(&qword_100BD7130);
  sub_1000B42B0();
  __chkstk_darwin(v36);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v37);
  sub_100079F7C();
  v39 = sub_1000987B4(v38);
  v40 = type metadata accessor for ConfiguredUnit(v39);
  sub_1000B43A4(v40, (uint64_t)&v212);
  v196 = v41;
  sub_10009D98C();
  __chkstk_darwin(v42);
  sub_100088FDC();
  v44 = sub_1000987B4(v43);
  v194 = type metadata accessor for MainAction(v44);
  sub_1000B42B0();
  __chkstk_darwin(v45);
  sub_100098728();
  v48 = v47 - v46;
  v49 = type metadata accessor for UnitConfiguration.Temperature(0);
  v168 = *(_QWORD *)(v49 - 8);
  sub_10009D98C();
  __chkstk_darwin(v50);
  sub_100098728();
  v53 = v52 - v51;
  v54 = sub_1000BA294(&qword_100BE06D8);
  sub_1000B42B0();
  __chkstk_darwin(v55);
  sub_100098728();
  v58 = v57 - v56;
  sub_1000BA294(&qword_100BD7148);
  sub_1000B42B0();
  __chkstk_darwin(v59);
  v61 = (char *)&v166 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v62);
  v64 = (char *)&v166 - v63;
  v65 = type metadata accessor for UnitManager(0);
  static UnitManager.standard.getter(v65);
  UnitManager.refreshUnitsFromStorage()();
  v66 = sub_10009880C();
  v198 = v65;
  static UnitManager.standard.getter(v66);
  UnitManager.preferredTemperatureUnit.getter();
  sub_10009880C();
  v67 = v199 + OBJC_IVAR____TtC7Weather15SettingsMonitor_lastTemperatureConfiguration;
  sub_10009922C(v199 + OBJC_IVAR____TtC7Weather15SettingsMonitor_lastTemperatureConfiguration, (uint64_t)v208, 0);
  v68 = v58 + *(int *)(v54 + 48);
  v189 = v64;
  sub_100037768((uint64_t)v64, v58, &qword_100BD7148);
  sub_100037768(v67, v68, &qword_100BD7148);
  sub_100088FC8(v58, 1, v49);
  if (v90)
  {
    v69 = sub_100088FC8(v68, 1, v49);
    if (v90)
    {
      sub_1000C230C(v69, &qword_100BD7148);
      goto LABEL_11;
    }
  }
  else
  {
    sub_100037768(v58, (uint64_t)v61, &qword_100BD7148);
    v70 = _s7Weather24LocationCompositionStateOwet_0(v68, 1, v49);
    if (v70 != 1)
    {
      v72 = v168;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v168 + 32))(v53, v68, v49);
      sub_100086DA4(qword_100BE06E0, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Temperature, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Temperature);
      v74 = dispatch thunk of static Equatable.== infix(_:_:)(v61, v53, v49, v73);
      v75 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
      v75(v53, v49);
      v76 = ((uint64_t (*)(char *, uint64_t))v75)(v61, v49);
      sub_1000C230C(v76, &qword_100BD7148);
      v71 = (uint64_t)v189;
      if ((v74 & 1) != 0)
        goto LABEL_11;
      goto LABEL_10;
    }
    v69 = (*(uint64_t (**)(char *, uint64_t))(v168 + 8))(v61, v49);
  }
  sub_1000C230C(v69, &qword_100BE06D8);
  v71 = (uint64_t)v189;
LABEL_10:
  sub_10009922C(v67, (uint64_t)&v205, 33);
  sub_1007204D0(v71, v67, &qword_100BD7148);
  sub_1000C6828();
  sub_1000CFED8(v71);
  sub_1000DF910(v77, enum case for ConfiguredUnit.temperature(_:));
  sub_1000BD6B4();
  v78 = sub_1000C17FC();
  sub_1000BA934(v78);
  v79 = sub_1000DA79C();
  sub_1000CD1AC(v79);
  sub_1000CD9AC();
  sub_1000C1BC8();
  sub_1000C3F84();
  v80 = sub_1000BC9BC();
  sub_1000C10AC(v80, (uint64_t *)&unk_100BFFA10);
  sub_1000D1FD8();
  sub_10009880C();
LABEL_11:
  sub_1000D1AB4();
  v81 = v192;
  UnitManager.preferredDistanceUnit.getter();
  sub_10009880C();
  v82 = v199 + OBJC_IVAR____TtC7Weather15SettingsMonitor_lastDistanceConfiguration;
  sub_10009922C(v199 + OBJC_IVAR____TtC7Weather15SettingsMonitor_lastDistanceConfiguration, (uint64_t)v203, 0);
  sub_1000D0828();
  v83 = v177;
  v85 = v177 + v84;
  sub_1000BCF38(v81, v177);
  sub_1000BCF38(v82, v85);
  v86 = v178;
  sub_100088FC8(v83, 1, (uint64_t)v178);
  if (v90)
  {
    v87 = sub_100088FC8(v85, 1, (uint64_t)v86);
    v88 = v188;
    if (v90)
    {
      sub_1000D0B44(v87, &qword_100BD7130);
      goto LABEL_22;
    }
    goto LABEL_19;
  }
  v89 = v169;
  sub_100037768(v83, v169, &qword_100BD7130);
  sub_100088FC8(v85, 1, (uint64_t)v86);
  v88 = v188;
  if (v90)
  {
    v87 = (*(uint64_t (**)(uint64_t, uint64_t *))(v170 + 8))(v89, v86);
LABEL_19:
    sub_1000D0B44(v87, &qword_100C01B70);
LABEL_21:
    sub_10009922C(v82, (uint64_t)&v205, 33);
    v86 = &qword_100BD7130;
    v98 = v192;
    sub_1007204D0(v192, v82, &qword_100BD7130);
    sub_1000C6828();
    sub_1000CFED8(v98);
    sub_1000DF910(v99, enum case for ConfiguredUnit.distance(_:));
    sub_1000BD6B4();
    v100 = sub_1000C17FC();
    sub_1000BA934(v100);
    v101 = sub_1000DA79C();
    sub_1000CD1AC(v101);
    sub_1000CD9AC();
    sub_1000C1BC8();
    sub_1000C3F84();
    v102 = sub_1000BC9BC();
    sub_1000C10AC(v102, (uint64_t *)&unk_100BFFA10);
    sub_1000D1FD8();
    sub_10009880C();
    goto LABEL_22;
  }
  v91 = v170;
  v92 = sub_1000CFDB8();
  v93(v92);
  sub_100086DA4(&qword_100BFA7C0, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Distance, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Distance);
  v95 = dispatch thunk of static Equatable.== infix(_:_:)(v89, v49, v86, v94);
  v96 = *(void (**)(uint64_t, uint64_t *))(v91 + 8);
  v96(v49, v86);
  v97 = ((uint64_t (*)(uint64_t, uint64_t *))v96)(v89, v86);
  sub_1000D0B44(v97, &qword_100BD7130);
  if ((v95 & 1) == 0)
    goto LABEL_21;
LABEL_22:
  sub_1000D1AB4();
  v103 = v193;
  UnitManager.preferredPressureUnit.getter();
  sub_10009880C();
  sub_10011038C();
  sub_10009922C((uint64_t)v86, (uint64_t)v202, 0);
  sub_1000D0828();
  v104 = v180;
  v106 = v180 + v105;
  sub_1000BCF38(v103, v180);
  sub_1000BCF38((uint64_t)v86, v106);
  v107 = v181;
  sub_100088FC8(v104, 1, v181);
  if (v90)
  {
    v108 = sub_100088FC8(v106, 1, v107);
    v109 = v190;
    v110 = v187;
    if (v90)
    {
      sub_1000DA7A4(v108, &qword_100BD7140);
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  v111 = v171;
  sub_100037768(v104, v171, &qword_100BD7140);
  sub_100088FC8(v106, 1, v107);
  v109 = v190;
  v110 = v187;
  if (v112)
  {
    v108 = (*(uint64_t (**)(uint64_t, uint64_t))(v172 + 8))(v111, v107);
LABEL_30:
    sub_1000DA7A4(v108, &qword_100C01B68);
LABEL_32:
    sub_10009922C((uint64_t)v86, (uint64_t)&v205, 33);
    v118 = v193;
    sub_100109A8C(v193);
    sub_1000C6828();
    sub_10009D7D8(v118);
    sub_1000DA190(v119, enum case for ConfiguredUnit.pressure(_:));
    sub_1000D0310();
    v120 = sub_1000C17FC();
    sub_1000BA934(v120);
    v121 = sub_1000DA79C();
    sub_1000CD1AC(v121);
    v122 = sub_1000CD9AC();
    v123 = v118;
    v88 = v188;
    ((void (*)(uint64_t, uint64_t *, double))v86)(v123, &qword_100BD7140, v122);
    sub_1000C3F84();
    v124 = sub_1000BC9BC();
    sub_1000C10AC(v124, (uint64_t *)&unk_100BFFA10);
    sub_1000D1FD8();
    sub_10009880C();
    goto LABEL_33;
  }
  v109 = v172;
  v113 = v167;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v172 + 32))(v167, v106, v107);
  sub_100086DA4(&qword_100BFA7B0, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Pressure, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Pressure);
  sub_1000CF9FC(v111, v113, v115, v114);
  sub_1000DAD78();
  v116 = v113;
  v110 = v187;
  sub_10004A33C(v116);
  v117 = sub_10004A33C(v111);
  sub_1000DA7A4(v117, &qword_100BD7140);
  if ((v106 & 1) == 0)
    goto LABEL_32;
LABEL_33:
  sub_1000D1AB4();
  UnitManager.preferredPrecipitationUnit.getter();
  sub_10009880C();
  sub_10011038C();
  sub_10009922C((uint64_t)v86, (uint64_t)v201, 0);
  sub_1000D0828();
  v126 = v88 + v125;
  sub_1000BCF38(v109, v88);
  sub_1000BCF38((uint64_t)v86, v126);
  v127 = v183;
  sub_100088FC8(v88, 1, v183);
  if (v90)
  {
    v128 = sub_100088FC8(v126, 1, v127);
    if (v90)
    {
      sub_1000D1428(v128, &qword_100BD7138);
      v129 = v186;
      goto LABEL_43;
    }
  }
  else
  {
    sub_100037768(v88, v110, &qword_100BD7138);
    v130 = _s7Weather24LocationCompositionStateOwet_0(v126, 1, v127);
    if (v130 != 1)
    {
      v131 = sub_1000CFDB8();
      v132(v131);
      sub_100086DA4(&qword_100BFA7B8, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Precipitation, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Precipitation);
      v135 = sub_1000CF9FC(v110, v104, v134, v133);
      sub_10004A33C(v104);
      v109 = v190;
      v136 = sub_10004A33C(v110);
      sub_1000D1428(v136, &qword_100BD7138);
      v129 = v186;
      if ((v135 & 1) != 0)
        goto LABEL_43;
      goto LABEL_42;
    }
    v128 = (*(uint64_t (**)(uint64_t, uint64_t))(v173 + 8))(v110, v127);
  }
  sub_1000D1428(v128, &qword_100C01B60);
  v129 = v186;
LABEL_42:
  sub_10009922C((uint64_t)v86, (uint64_t)&v205, 33);
  sub_100109A8C(v109);
  sub_1000C6828();
  sub_10009D7D8(v109);
  sub_1000DA190(v137, enum case for ConfiguredUnit.precipitation(_:));
  sub_1000D0310();
  v138 = sub_1000C17FC();
  sub_1000BA934(v138);
  v139 = sub_1000DA79C();
  sub_1000CD1AC(v139);
  v140 = sub_1000CD9AC();
  ((void (*)(uint64_t, uint64_t *, double))v86)(v88, &qword_100BD7138, v140);
  sub_1000C3F84();
  v141 = sub_1000BC9BC();
  sub_1000C10AC(v141, (uint64_t *)&unk_100BFFA10);
  sub_1000D1FD8();
  sub_10009880C();
LABEL_43:
  sub_1000D1AB4();
  v142 = v191;
  UnitManager.preferredWindUnit.getter();
  sub_10009880C();
  sub_10011038C();
  sub_10009922C((uint64_t)v86, (uint64_t)v200, 0);
  sub_1000D0828();
  v143 = v185;
  v145 = v185 + v144;
  sub_1000BCF38(v142, v185);
  sub_100037768((uint64_t)v86, v145, qword_100BD7150);
  sub_100088FC8(v143, 1, (uint64_t)v129);
  if (v90)
  {
    v146 = sub_100088FC8(v145, 1, (uint64_t)v129);
    if (!v90)
      goto LABEL_50;
    sub_1000D1428(v146, qword_100BD7150);
  }
  else
  {
    v147 = v143;
    v148 = v174;
    sub_100037768(v147, v174, qword_100BD7150);
    v149 = _s7Weather24LocationCompositionStateOwet_0(v145, 1, (uint64_t)v129);
    if (v149 == 1)
    {
      v146 = (*(uint64_t (**)(uint64_t, _QWORD))(v175 + 8))(v148, v129);
LABEL_50:
      sub_1000D1428(v146, &qword_100C01B58);
LABEL_53:
      sub_10009922C((uint64_t)v86, (uint64_t)&v205, 33);
      v155 = v191;
      sub_1007204D0(v191, (uint64_t)v86, qword_100BD7150);
      sub_1000C6828();
      v156 = *(uint64_t (**)(uint64_t))(v199 + 16);
      v157 = *(_QWORD *)(v199 + 24);
      v158 = v195;
      sub_1000BCF38(v155, v195);
      v159 = v196;
      v160 = v197;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v196 + 104))(v158, enum case for ConfiguredUnit.windSpeed(_:), v197);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v159 + 16))(v48, v158, v160);
      v161 = sub_1000C17FC();
      sub_1000BA934(v161);
      v162 = sub_1000DA79C();
      sub_1000CD1AC(v162);
      v163 = *(void (**)(uint64_t, uint64_t, __n128))(v159 + 8);
      v164 = swift_retain();
      v163(v158, v160, v164);
      sub_1000C3F84();
      v207 = 0;
      v205 = 0u;
      v206 = 0u;
      v165 = sub_1000A5EBC(v48, (uint64_t)&v205, v156);
      sub_1000C10AC(v165, (uint64_t *)&unk_100BFFA10);
      sub_1000D1FD8();
      swift_release(v157);
      v154 = v155;
      goto LABEL_54;
    }
    v109 = v175;
    v150 = sub_1000CFDB8();
    v151(v150);
    sub_100086DA4(&qword_100BFA7A8, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.WindSpeed, (uint64_t)&protocol conformance descriptor for UnitConfiguration.WindSpeed);
    dispatch thunk of static Equatable.== infix(_:_:)(v148, v104, v129, v152);
    sub_1000DAD78();
    v129(v104, v129);
    v153 = ((uint64_t (*)(uint64_t, _QWORD))v129)(v148, v129);
    sub_1000D1428(v153, qword_100BD7150);
    if ((v145 & 1) == 0)
      goto LABEL_53;
  }
  v154 = v191;
LABEL_54:
  sub_100021AA4(v154, qword_100BD7150);
  sub_100021AA4(v109, &qword_100BD7138);
  sub_1000CDDE4(&qword_100BD7140, (uint64_t)&v211);
  sub_1000CDDE4(&qword_100BD7130, (uint64_t)&v210);
  sub_1000CDDE4(&qword_100BD7148, (uint64_t)v209);
}

void sub_1007202F0()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC7Weather15SettingsMonitor_observer);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC7Weather15SettingsMonitor_observer) = 0;

}

uint64_t SettingsMonitor.deinit()
{
  uint64_t v0;

  swift_release();
  sub_100021AA4(v0 + OBJC_IVAR____TtC7Weather15SettingsMonitor_lastTemperatureConfiguration, &qword_100BD7148);
  sub_100021AA4(v0 + OBJC_IVAR____TtC7Weather15SettingsMonitor_lastDistanceConfiguration, &qword_100BD7130);
  sub_100021AA4(v0 + OBJC_IVAR____TtC7Weather15SettingsMonitor_lastWindSpeedConfiguration, qword_100BD7150);
  sub_100021AA4(v0 + OBJC_IVAR____TtC7Weather15SettingsMonitor_lastPressureConfiguration, &qword_100BD7140);
  sub_100021AA4(v0 + OBJC_IVAR____TtC7Weather15SettingsMonitor_lastPrecipitationConfiguration, &qword_100BD7138);

  return v0;
}

uint64_t SettingsMonitor.__deallocating_deinit()
{
  uint64_t v0;

  SettingsMonitor.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

Swift::Void __swiftcall SettingsMonitor.applicationDidEnterBackground()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];

  sub_1000BA294(&qword_100BD7148);
  sub_1000B42B0();
  __chkstk_darwin(v1);
  sub_100098728();
  v4 = v3 - v2;
  v5 = type metadata accessor for UnitManager(0);
  static UnitManager.standard.getter(v5);
  UnitManager.preferredTemperatureUnit.getter();
  sub_10009880C();
  v6 = v0 + OBJC_IVAR____TtC7Weather15SettingsMonitor_lastTemperatureConfiguration;
  sub_10009922C(v6, (uint64_t)v7, 33);
  sub_100720470(v4, v6);
  swift_endAccess(v7);
  sub_1007202F0();
  sub_100079F70();
}

uint64_t sub_100720470(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BD7148);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1007204BC()
{
  return type metadata accessor for SettingsMonitor(0);
}

uint64_t sub_1007204C4()
{
  uint64_t v0;

  return sub_10071F140(v0);
}

void sub_1007204D0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_100075DC0(a1, a2, a3);
  sub_100089000(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24));
  sub_10004A298();
}

uint64_t sub_1007204FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_10072055C + 4 * byte_1009C34F0[swift_getEnumCaseMultiPayload(a2)];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t sub_100720BF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, __n128);

  v1 = a1;
  result = swift_getEnumCaseMultiPayload(a1);
  switch((int)result)
  {
    case 0:
      v4 = type metadata accessor for DetailCondition(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v1, v4);
      v5 = (int *)type metadata accessor for ConditionDetailViewState(0);
      v6 = v1 + v5[5];
      v7 = type metadata accessor for Location(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
      v8 = v1 + v5[6];
      v9 = type metadata accessor for Date(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v8, 1, v9))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
      v10 = v1 + v5[8];
      v11 = (int *)type metadata accessor for DetailChartSelection(0);
      result = _s7Weather24LocationCompositionStateOwet_0(v10, 1, (uint64_t)v11);
      if (!(_DWORD)result)
      {
        v12 = swift_bridgeObjectRelease();
        v27 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v9 - 8) + 8);
        v27(v10 + v11[5], v9, v12);
        ((void (*)(uint64_t, uint64_t))v27)(v10 + v11[6], v9);
        v13 = v10 + v11[7];
        v14 = v9;
        v15 = (uint64_t (*)(uint64_t, uint64_t))v27;
        return v15(v13, v14);
      }
      return result;
    case 1:
    case 2:
    case 3:
      v3 = type metadata accessor for Location(0);
      goto LABEL_17;
    case 4:
      v16 = type metadata accessor for Location(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v1, v16);
      v17 = type metadata accessor for MoonDetailViewState(0);
      v18 = v1 + *(int *)(v17 + 20);
      v19 = type metadata accessor for MoonDetailSelectedDate(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v18, 1, v19)
        && swift_getEnumCaseMultiPayload(v18) <= 2)
      {
        v20 = type metadata accessor for Date(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v18, v20);
      }
      v21 = v1 + *(int *)(v17 + 24);
      v22 = type metadata accessor for Date(0);
      result = _s7Weather24LocationCompositionStateOwet_0(v21, 1, v22);
      if ((_DWORD)result)
        return result;
      v15 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8);
      v13 = v21;
      v14 = v22;
      break;
    case 5:
      v23 = type metadata accessor for Location(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v1, v23);
      v24 = v1 + *(int *)(type metadata accessor for AveragesDetailViewState(0) + 24);
      v25 = type metadata accessor for DetailHeroChartLollipopPosition(0);
      result = _s7Weather24LocationCompositionStateOwet_0(v24, 1, v25);
      if ((_DWORD)result)
        return result;
      v1 = v24 + *(int *)(v25 + 20);
      v3 = type metadata accessor for Date(0);
LABEL_17:
      v14 = v3;
      v15 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
      v13 = v1;
      break;
    case 6:
      v3 = type metadata accessor for URL(0);
      goto LABEL_17;
    case 7:
      v26 = type metadata accessor for Location(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v1, v26);
      v1 += *(int *)(type metadata accessor for HomeAndWorkRefinementViewState(0) + 20);
      v3 = type metadata accessor for LocationOfInterest(0);
      goto LABEL_17;
    default:
      return result;
  }
  return v15(v13, v14);
}

void sub_100720ED4(uint64_t a1, uint64_t a2)
{
  char *v2;

  v2 = (char *)sub_100720F28 + 4 * byte_1009C3500[swift_getEnumCaseMultiPayload(a2)];
  __asm { BR              X10 }
}

uint64_t sub_100720F28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, char *, uint64_t, __n128);
  __n128 v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v32;

  v3 = type metadata accessor for DetailCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v0, v2, v3);
  v4 = (int *)type metadata accessor for ConditionDetailViewState(0);
  v5 = v4[5];
  v6 = v0 + v5;
  v7 = v2 + v5;
  v8 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  v9 = v4[6];
  v10 = (void *)(v0 + v9);
  v11 = (const void *)(v2 + v9);
  v12 = type metadata accessor for Date(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12))
  {
    v13 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
  }
  v14 = v4[7];
  v15 = v0 + v14;
  v16 = v2 + v14;
  v17 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_OWORD *)(v15 + 16) = v17;
  *(_BYTE *)(v15 + 32) = *(_BYTE *)(v16 + 32);
  v18 = v4[8];
  v19 = (_QWORD *)(v0 + v18);
  v20 = (_QWORD *)(v2 + v18);
  v21 = (int *)type metadata accessor for DetailChartSelection(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v20, 1, (uint64_t)v21))
  {
    v22 = sub_1000BA294(&qword_100BD0B58);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v23 = v20[1];
    *v19 = *v20;
    v19[1] = v23;
    v24 = v21[5];
    v32 = (char *)v19 + v24;
    v25 = (char *)v20 + v24;
    v26 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v12 - 8) + 16);
    v27 = swift_bridgeObjectRetain();
    v26(v32, v25, v12, v27);
    ((void (*)(char *, char *, uint64_t))v26)((char *)v19 + v21[6], (char *)v20 + v21[6], v12);
    ((void (*)(char *, char *, uint64_t))v26)((char *)v19 + v21[7], (char *)v20 + v21[7], v12);
    *(_QWORD *)((char *)v19 + v21[8]) = *(_QWORD *)((char *)v20 + v21[8]);
    v28 = v21[9];
    v29 = (char *)v19 + v28;
    v30 = (char *)v20 + v28;
    v29[8] = v30[8];
    *(_QWORD *)v29 = *(_QWORD *)v30;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v19, 0, 1, (uint64_t)v21);
  }
  *(_BYTE *)(v0 + v4[9]) = *(_BYTE *)(v2 + v4[9]);
  swift_storeEnumTagMultiPayload(v0, v1, 0);
  return v0;
}

uint64_t sub_1007215A0(uint64_t result, uint64_t a2)
{
  char *v3;

  if (result != a2)
  {
    sub_1000215BC(result, type metadata accessor for ModalViewState.LocationDetailModal);
    v3 = (char *)&loc_10072160C + 4 * byte_1009C3508[swift_getEnumCaseMultiPayload(a2)];
    __asm { BR              X10 }
  }
  return result;
}

void sub_100721C8C(uint64_t a1, uint64_t a2)
{
  char *v2;

  v2 = (char *)sub_100721CDC + 4 * byte_1009C3510[swift_getEnumCaseMultiPayload(a2)];
  __asm { BR              X10 }
}

uint64_t sub_100721CDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  int *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;

  v3 = type metadata accessor for DetailCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v0, v2, v3);
  v4 = (int *)type metadata accessor for ConditionDetailViewState(0);
  v5 = v4[5];
  v6 = v0 + v5;
  v7 = v2 + v5;
  v8 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  v9 = v4[6];
  v10 = (void *)(v0 + v9);
  v11 = (const void *)(v2 + v9);
  v12 = type metadata accessor for Date(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12))
  {
    v13 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
  }
  v14 = v4[7];
  v15 = v0 + v14;
  v16 = v2 + v14;
  v17 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_OWORD *)(v15 + 16) = v17;
  *(_BYTE *)(v15 + 32) = *(_BYTE *)(v16 + 32);
  v18 = v4[8];
  v19 = (_OWORD *)(v0 + v18);
  v20 = (_OWORD *)(v2 + v18);
  v21 = (int *)type metadata accessor for DetailChartSelection(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v20, 1, (uint64_t)v21))
  {
    v22 = sub_1000BA294(&qword_100BD0B58);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *v19 = *v20;
    v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
    v23((char *)v19 + v21[5], (char *)v20 + v21[5], v12);
    v23((char *)v19 + v21[6], (char *)v20 + v21[6], v12);
    v23((char *)v19 + v21[7], (char *)v20 + v21[7], v12);
    *(_QWORD *)((char *)v19 + v21[8]) = *(_QWORD *)((char *)v20 + v21[8]);
    v24 = v21[9];
    v25 = (char *)v19 + v24;
    v26 = (char *)v20 + v24;
    v25[8] = v26[8];
    *(_QWORD *)v25 = *(_QWORD *)v26;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v19, 0, 1, (uint64_t)v21);
  }
  *(_BYTE *)(v0 + v4[9]) = *(_BYTE *)(v2 + v4[9]);
  swift_storeEnumTagMultiPayload(v0, v1, 0);
  return v0;
}

uint64_t sub_100722340(uint64_t result, uint64_t a2)
{
  char *v3;

  if (result != a2)
  {
    sub_1000215BC(result, type metadata accessor for ModalViewState.LocationDetailModal);
    v3 = (char *)&loc_1007223A8 + 4 * byte_1009C3518[swift_getEnumCaseMultiPayload(a2)];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_100722A0C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    type metadata accessor for PreviewLocation(0);
    v6 = (char *)&loc_100722A74 + 4 * byte_1009C3520[swift_getEnumCaseMultiPayload(a2)];
    __asm { BR              X10 }
  }
  v7 = *a2;
  *a1 = *a2;
  v8 = v7 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain();
  return v8;
}

void sub_1007234C8(id *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, __n128);

  type metadata accessor for PreviewLocation(0);
  switch(swift_getEnumCaseMultiPayload(a1))
  {
    case 0u:
      v2 = type metadata accessor for Location(0);
      goto LABEL_4;
    case 1u:
      v2 = type metadata accessor for LocationOfInterest(0);
LABEL_4:
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
      break;
    case 2u:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = (uint64_t)a1 + *(int *)(type metadata accessor for SearchLocation(0) + 32);
      v4 = type metadata accessor for Location(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v3, 1, v4))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
      break;
    case 3u:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v5 = (char *)a1 + *(int *)(type metadata accessor for LocationPreviewViewState(0) + 20);
  type metadata accessor for LocationPreviewModalViewState(0);
  switch(swift_getEnumCaseMultiPayload(v5))
  {
    case 0u:
      v6 = type metadata accessor for URL(0);
      goto LABEL_29;
    case 1u:
      v7 = type metadata accessor for DetailCondition(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
      v8 = (int *)type metadata accessor for ConditionDetailViewState(0);
      v9 = &v5[v8[5]];
      v10 = type metadata accessor for Location(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
      v11 = (uint64_t)&v5[v8[6]];
      v12 = type metadata accessor for Date(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v11, 1, v12))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
      v13 = (uint64_t)&v5[v8[8]];
      v14 = (int *)type metadata accessor for DetailChartSelection(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v13, 1, (uint64_t)v14))
      {
        v15 = swift_bridgeObjectRelease();
        v35 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v12 - 8) + 8);
        v35(v13 + v14[5], v12, v15);
        ((void (*)(uint64_t, uint64_t))v35)(v13 + v14[6], v12);
        ((void (*)(uint64_t, uint64_t))v35)(v13 + v14[7], v12);
      }
      return;
    case 2u:
    case 3u:
    case 4u:
      v6 = type metadata accessor for Location(0);
      goto LABEL_29;
    case 5u:
      v16 = type metadata accessor for Location(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v5, v16);
      v17 = type metadata accessor for MoonDetailViewState(0);
      v18 = (uint64_t)&v5[*(int *)(v17 + 20)];
      v19 = type metadata accessor for MoonDetailSelectedDate(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v18, 1, v19)
        && swift_getEnumCaseMultiPayload(v18) <= 2)
      {
        v20 = type metadata accessor for Date(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v18, v20);
      }
      v21 = (uint64_t)&v5[*(int *)(v17 + 24)];
      v22 = type metadata accessor for Date(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v21, 1, v22))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
      return;
    case 6u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v23 = (int *)type metadata accessor for NewsArticle(0);
      v24 = (uint64_t)&v5[v23[6]];
      v25 = type metadata accessor for URL(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v24, 1, v25))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
      v26 = &v5[v23[7]];
      v27 = type metadata accessor for Date(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
      v28 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 8);
      v28(&v5[v23[8]], v25);
      v29 = &v5[v23[9]];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v30 = (uint64_t)&v29[*(int *)(type metadata accessor for NewsChannel(0) + 24)];
      if (!_s7Weather24LocationCompositionStateOwet_0(v30, 1, v25))
        v28((char *)v30, v25);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    case 7u:
      v31 = type metadata accessor for Location(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v5, v31);
      v32 = (uint64_t)&v5[*(int *)(type metadata accessor for AveragesDetailViewState(0) + 24)];
      v33 = type metadata accessor for DetailHeroChartLollipopPosition(0);
      if (_s7Weather24LocationCompositionStateOwet_0(v32, 1, v33))
        return;
      v5 = (char *)(v32 + *(int *)(v33 + 20));
      v6 = type metadata accessor for Date(0);
LABEL_29:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
      return;
    case 8u:
      v34 = type metadata accessor for Location(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v5, v34);
      v5 += *(int *)(type metadata accessor for HomeAndWorkRefinementViewState(0) + 20);
      v6 = type metadata accessor for LocationOfInterest(0);
      goto LABEL_29;
    default:
      return;
  }
}

void sub_1007239B8(uint64_t a1, uint64_t a2)
{
  char *v3;

  type metadata accessor for PreviewLocation(0);
  v3 = (char *)sub_100723A14 + 4 * byte_1009C353A[swift_getEnumCaseMultiPayload(a2)];
  __asm { BR              X10 }
}

uint64_t sub_100723A14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  char *v74;
  __int128 v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  int *v79;
  uint64_t v80;
  uint64_t EnumCaseMultiPayload;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  void (*v114)(char *, char *, uint64_t, __n128);
  __n128 v115;
  char *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  __int128 v123;
  void (*v125)(char *, char *, uint64_t);
  char *v126;
  uint64_t v127;
  uint64_t v128;

  v3 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v2, v1, v3);
  swift_storeEnumTagMultiPayload(v2, v0, 0);
  v4 = *(int *)(type metadata accessor for LocationPreviewViewState(0) + 20);
  v5 = (_QWORD *)(v2 + v4);
  v6 = (_QWORD *)(v1 + v4);
  v7 = type metadata accessor for LocationPreviewModalViewState(0);
  switch(swift_getEnumCaseMultiPayload(v6))
  {
    case 0u:
      v8 = type metadata accessor for URL(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v5, v6, v8);
      v9 = v5;
      v10 = v7;
      v11 = 0;
      goto LABEL_33;
    case 1u:
      v12 = type metadata accessor for DetailCondition(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v5, v6, v12);
      v13 = (int *)type metadata accessor for ConditionDetailViewState(0);
      v14 = v13[5];
      v15 = (char *)v5 + v14;
      v16 = (char *)v6 + v14;
      v17 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      v18 = v13[6];
      v19 = (char *)v5 + v18;
      v20 = (char *)v6 + v18;
      v21 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v20, 1, v21))
      {
        v22 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v19, 0, 1, v21);
      }
      v72 = v13[7];
      v73 = (char *)v5 + v72;
      v74 = (char *)v6 + v72;
      v75 = *((_OWORD *)v74 + 1);
      *(_OWORD *)v73 = *(_OWORD *)v74;
      *((_OWORD *)v73 + 1) = v75;
      v73[32] = v74[32];
      v76 = v13[8];
      v77 = (_QWORD *)((char *)v5 + v76);
      v78 = (_QWORD *)((char *)v6 + v76);
      v79 = (int *)type metadata accessor for DetailChartSelection(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v78, 1, (uint64_t)v79))
      {
        v80 = sub_1000BA294(&qword_100BD0B58);
        memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
      }
      else
      {
        v111 = v78[1];
        *v77 = *v78;
        v77[1] = v111;
        v112 = v79[5];
        v128 = v2;
        v113 = (char *)v77 + v112;
        v126 = (char *)v78 + v112;
        v114 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v21 - 8) + 16);
        v115 = swift_bridgeObjectRetain();
        v116 = v113;
        v2 = v128;
        v114(v116, v126, v21, v115);
        ((void (*)(char *, char *, uint64_t))v114)((char *)v77 + v79[6], (char *)v78 + v79[6], v21);
        ((void (*)(char *, char *, uint64_t))v114)((char *)v77 + v79[7], (char *)v78 + v79[7], v21);
        *(_QWORD *)((char *)v77 + v79[8]) = *(_QWORD *)((char *)v78 + v79[8]);
        v117 = v79[9];
        v118 = (char *)v77 + v117;
        v119 = (char *)v78 + v117;
        v118[8] = v119[8];
        *(_QWORD *)v118 = *(_QWORD *)v119;
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v77, 0, 1, (uint64_t)v79);
      }
      *((_BYTE *)v5 + v13[9]) = *((_BYTE *)v6 + v13[9]);
      v9 = v5;
      v10 = v7;
      v11 = 1;
      goto LABEL_33;
    case 2u:
      v23 = type metadata accessor for Location(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v5, v6, v23);
      v24 = type metadata accessor for AirQualityDetailViewState(0);
      *((_BYTE *)v5 + *(int *)(v24 + 20)) = *((_BYTE *)v6 + *(int *)(v24 + 20));
      v25 = *(int *)(v24 + 24);
      v26 = (char *)v5 + v25;
      v27 = (char *)v6 + v25;
      v26[32] = v27[32];
      v28 = *((_OWORD *)v27 + 1);
      *(_OWORD *)v26 = *(_OWORD *)v27;
      *((_OWORD *)v26 + 1) = v28;
      v9 = v5;
      v10 = v7;
      v11 = 2;
      goto LABEL_33;
    case 3u:
      v29 = type metadata accessor for Location(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v5, v6, v29);
      v30 = *(int *)(type metadata accessor for NextHourPrecipitationDetailViewState(0) + 20);
      v31 = (char *)v5 + v30;
      v32 = (char *)v6 + v30;
      v33 = *((_OWORD *)v32 + 1);
      *(_OWORD *)v31 = *(_OWORD *)v32;
      *((_OWORD *)v31 + 1) = v33;
      v31[32] = v32[32];
      v9 = v5;
      v10 = v7;
      v11 = 3;
      goto LABEL_33;
    case 4u:
      v34 = type metadata accessor for Location(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v5, v6, v34);
      v35 = type metadata accessor for SunriseSunsetDetailViewState(0);
      v36 = *(int *)(v35 + 20);
      v37 = (char *)v5 + v36;
      v38 = (char *)v6 + v36;
      v39 = *((_OWORD *)v38 + 1);
      *(_OWORD *)v37 = *(_OWORD *)v38;
      *((_OWORD *)v37 + 1) = v39;
      v37[32] = v38[32];
      *((_BYTE *)v5 + *(int *)(v35 + 24)) = *((_BYTE *)v6 + *(int *)(v35 + 24));
      v9 = v5;
      v10 = v7;
      v11 = 4;
      goto LABEL_33;
    case 5u:
      v40 = type metadata accessor for Location(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v5, v6, v40);
      v41 = (int *)type metadata accessor for MoonDetailViewState(0);
      v42 = v41[5];
      v43 = (char *)v5 + v42;
      v44 = (char *)v6 + v42;
      v45 = type metadata accessor for MoonDetailSelectedDate(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v44, 1, v45))
      {
        v46 = sub_1000BA294(&qword_100BC6CB8);
        memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v44);
        v82 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 16))(v43, v44, v82);
        swift_storeEnumTagMultiPayload(v43, v45, EnumCaseMultiPayload);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v43, 0, 1, v45);
      }
      v83 = v41[6];
      v84 = (char *)v5 + v83;
      v85 = (char *)v6 + v83;
      v86 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v85, 1, v86))
      {
        v87 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 16))(v84, v85, v86);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v84, 0, 1, v86);
      }
      v120 = v41[7];
      v121 = (char *)v5 + v120;
      v122 = (char *)v6 + v120;
      v123 = *((_OWORD *)v122 + 1);
      *(_OWORD *)v121 = *(_OWORD *)v122;
      *((_OWORD *)v121 + 1) = v123;
      v121[32] = v122[32];
      *((_BYTE *)v5 + v41[8]) = *((_BYTE *)v6 + v41[8]);
      v9 = v5;
      v10 = v7;
      v11 = 5;
      goto LABEL_33;
    case 6u:
      v127 = v2;
      v47 = v6[1];
      *v5 = *v6;
      v5[1] = v47;
      v48 = v6[3];
      v5[2] = v6[2];
      v5[3] = v48;
      v49 = (int *)type metadata accessor for NewsArticle(0);
      v50 = v49[6];
      v51 = (char *)v5 + v50;
      v52 = (char *)v6 + v50;
      v53 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v52, 1, v53))
      {
        v54 = sub_1000BA294(&qword_100BD4280);
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v51, v52, v53);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v51, 0, 1, v53);
      }
      v88 = v49[7];
      v89 = (char *)v5 + v88;
      v90 = (char *)v6 + v88;
      v91 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v91 - 8) + 16))(v89, v90, v91);
      v125 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16);
      v125((char *)v5 + v49[8], (char *)v6 + v49[8], v53);
      v92 = v49[9];
      v93 = (_QWORD *)((char *)v5 + v92);
      v94 = (char *)v6 + v92;
      v95 = *(_QWORD *)((char *)v6 + v92 + 8);
      *v93 = *(_QWORD *)((char *)v6 + v92);
      v93[1] = v95;
      v96 = *(_QWORD *)((char *)v6 + v92 + 24);
      v93[2] = *(_QWORD *)((char *)v6 + v92 + 16);
      v93[3] = v96;
      v97 = *(int *)(type metadata accessor for NewsChannel(0) + 24);
      v98 = (char *)v93 + v97;
      v99 = &v94[v97];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v99, 1, v53))
      {
        v100 = sub_1000BA294(&qword_100BD4280);
        memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
      }
      else
      {
        v125(v98, v99, v53);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v98, 0, 1, v53);
      }
      v2 = v127;
      *(_QWORD *)((char *)v5 + v49[10]) = *(_QWORD *)((char *)v6 + v49[10]);
      *(_QWORD *)((char *)v5 + v49[11]) = *(_QWORD *)((char *)v6 + v49[11]);
      *(_QWORD *)((char *)v5 + v49[12]) = *(_QWORD *)((char *)v6 + v49[12]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = v5;
      v10 = v7;
      v11 = 6;
      goto LABEL_33;
    case 7u:
      v55 = type metadata accessor for Location(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v5, v6, v55);
      v56 = (int *)type metadata accessor for AveragesDetailViewState(0);
      *((_BYTE *)v5 + v56[5]) = *((_BYTE *)v6 + v56[5]);
      v57 = v56[6];
      v58 = (_QWORD *)((char *)v5 + v57);
      v59 = (_QWORD *)((char *)v6 + v57);
      v60 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v59, 1, (uint64_t)v60))
      {
        v61 = sub_1000BA294(&qword_100BCB0D0);
        memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
      }
      else
      {
        *v58 = *v59;
        v101 = v60[5];
        v102 = (char *)v58 + v101;
        v103 = v2;
        v104 = (char *)v59 + v101;
        v105 = type metadata accessor for Date(0);
        v106 = v104;
        v2 = v103;
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v105 - 8) + 16))(v102, v106, v105);
        *(_QWORD *)((char *)v58 + v60[6]) = *(_QWORD *)((char *)v59 + v60[6]);
        *(_QWORD *)((char *)v58 + v60[7]) = *(_QWORD *)((char *)v59 + v60[7]);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v58, 0, 1, (uint64_t)v60);
      }
      v107 = v56[7];
      v108 = (char *)v5 + v107;
      v109 = (char *)v6 + v107;
      v110 = *((_OWORD *)v109 + 1);
      *(_OWORD *)v108 = *(_OWORD *)v109;
      *((_OWORD *)v108 + 1) = v110;
      v108[32] = v109[32];
      v9 = v5;
      v10 = v7;
      v11 = 7;
      goto LABEL_33;
    case 8u:
      v62 = type metadata accessor for Location(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v5, v6, v62);
      v63 = type metadata accessor for HomeAndWorkRefinementViewState(0);
      v64 = *(int *)(v63 + 20);
      v65 = (char *)v5 + v64;
      v66 = (char *)v6 + v64;
      v67 = type metadata accessor for LocationOfInterest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v65, v66, v67);
      v68 = *(int *)(v63 + 24);
      v69 = (char *)v5 + v68;
      v70 = (char *)v6 + v68;
      v71 = *((_OWORD *)v70 + 1);
      *(_OWORD *)v69 = *(_OWORD *)v70;
      *((_OWORD *)v69 + 1) = v71;
      v69[32] = v70[32];
      v9 = v5;
      v10 = v7;
      v11 = 8;
LABEL_33:
      swift_storeEnumTagMultiPayload(v9, v10, v11);
      break;
    default:
      memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      break;
  }
  return v2;
}

uint64_t sub_100724464(uint64_t a1, uint64_t a2)
{
  char *v4;

  if (a1 != a2)
  {
    sub_1000215BC(a1, type metadata accessor for PreviewLocation);
    type metadata accessor for PreviewLocation(0);
    v4 = (char *)&loc_1007244D8 + 4 * byte_1009C3547[swift_getEnumCaseMultiPayload(a2)];
    __asm { BR              X10 }
  }
  type metadata accessor for LocationPreviewViewState(0);
  return a1;
}

char *sub_100724F6C(char *a1, char *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  __int128 v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  int *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  char *v89;
  __int128 v90;
  uint64_t v91;
  char *v92;
  char *v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  void (*v107)(char *, char *, uint64_t);
  uint64_t v108;
  char *v109;
  char *v110;
  __int128 v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  __int128 v123;
  void (*v124)(char *, char *, uint64_t);
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  __int128 v131;

  v4 = type metadata accessor for PreviewLocation(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
  if (EnumCaseMultiPayload == 2)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    v10 = type metadata accessor for SearchLocation(0);
    v11 = *(int *)(v10 + 32);
    v12 = &a1[v11];
    v13 = &a2[v11];
    v14 = type metadata accessor for Location(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v14))
    {
      v15 = sub_1000BA294(&qword_100BC35F8);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v14);
    }
    v17 = *(int *)(v10 + 36);
    v18 = &a1[v17];
    v19 = &a2[v17];
    *(_OWORD *)v18 = *(_OWORD *)v19;
    v18[16] = v19[16];
    v7 = a1;
    v8 = v4;
    v9 = 2;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v16 = type metadata accessor for LocationOfInterest(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a1, a2, v16);
    v7 = a1;
    v8 = v4;
    v9 = 1;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
      goto LABEL_12;
    }
    v6 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = a1;
    v8 = v4;
    v9 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v8, v9);
LABEL_12:
  v20 = *(int *)(type metadata accessor for LocationPreviewViewState(0) + 20);
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = type metadata accessor for LocationPreviewModalViewState(0);
  switch(swift_getEnumCaseMultiPayload(v22))
  {
    case 0u:
      v24 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v21, v22, v24);
      v25 = v21;
      v26 = v23;
      v27 = 0;
      goto LABEL_44;
    case 1u:
      v28 = type metadata accessor for DetailCondition(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v21, v22, v28);
      v29 = (int *)type metadata accessor for ConditionDetailViewState(0);
      v30 = v29[5];
      v31 = &v21[v30];
      v32 = &v22[v30];
      v33 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
      v34 = v29[6];
      v35 = &v21[v34];
      v36 = &v22[v34];
      v37 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v36, 1, v37))
      {
        v38 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v35, 0, 1, v37);
      }
      v87 = v29[7];
      v88 = &v21[v87];
      v89 = &v22[v87];
      v90 = *((_OWORD *)v89 + 1);
      *(_OWORD *)v88 = *(_OWORD *)v89;
      *((_OWORD *)v88 + 1) = v90;
      v88[32] = v89[32];
      v91 = v29[8];
      v92 = &v21[v91];
      v93 = &v22[v91];
      v94 = (int *)type metadata accessor for DetailChartSelection(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v93, 1, (uint64_t)v94))
      {
        v95 = sub_1000BA294(&qword_100BD0B58);
        memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v92 = *(_OWORD *)v93;
        v124 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32);
        v124(&v92[v94[5]], &v93[v94[5]], v37);
        v124(&v92[v94[6]], &v93[v94[6]], v37);
        v124(&v92[v94[7]], &v93[v94[7]], v37);
        *(_QWORD *)&v92[v94[8]] = *(_QWORD *)&v93[v94[8]];
        v125 = v94[9];
        v126 = &v92[v125];
        v127 = &v93[v125];
        v126[8] = v127[8];
        *(_QWORD *)v126 = *(_QWORD *)v127;
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v92, 0, 1, (uint64_t)v94);
      }
      v21[v29[9]] = v22[v29[9]];
      v25 = v21;
      v26 = v23;
      v27 = 1;
      goto LABEL_44;
    case 2u:
      v39 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v21, v22, v39);
      v40 = type metadata accessor for AirQualityDetailViewState(0);
      v21[*(int *)(v40 + 20)] = v22[*(int *)(v40 + 20)];
      v41 = *(int *)(v40 + 24);
      v42 = &v21[v41];
      v43 = &v22[v41];
      v42[32] = v43[32];
      v44 = *((_OWORD *)v43 + 1);
      *(_OWORD *)v42 = *(_OWORD *)v43;
      *((_OWORD *)v42 + 1) = v44;
      v25 = v21;
      v26 = v23;
      v27 = 2;
      goto LABEL_44;
    case 3u:
      v45 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v21, v22, v45);
      v46 = *(int *)(type metadata accessor for NextHourPrecipitationDetailViewState(0) + 20);
      v47 = &v21[v46];
      v48 = &v22[v46];
      v49 = *((_OWORD *)v48 + 1);
      *(_OWORD *)v47 = *(_OWORD *)v48;
      *((_OWORD *)v47 + 1) = v49;
      v47[32] = v48[32];
      v25 = v21;
      v26 = v23;
      v27 = 3;
      goto LABEL_44;
    case 4u:
      v50 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v21, v22, v50);
      v51 = type metadata accessor for SunriseSunsetDetailViewState(0);
      v52 = *(int *)(v51 + 20);
      v53 = &v21[v52];
      v54 = &v22[v52];
      v55 = *((_OWORD *)v54 + 1);
      *(_OWORD *)v53 = *(_OWORD *)v54;
      *((_OWORD *)v53 + 1) = v55;
      v53[32] = v54[32];
      v21[*(int *)(v51 + 24)] = v22[*(int *)(v51 + 24)];
      v25 = v21;
      v26 = v23;
      v27 = 4;
      goto LABEL_44;
    case 5u:
      v56 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v21, v22, v56);
      v57 = (int *)type metadata accessor for MoonDetailViewState(0);
      v58 = v57[5];
      v59 = &v21[v58];
      v60 = &v22[v58];
      v61 = type metadata accessor for MoonDetailSelectedDate(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v60, 1, v61))
      {
        v62 = sub_1000BA294(&qword_100BC6CB8);
        memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      }
      else
      {
        v96 = swift_getEnumCaseMultiPayload(v60);
        v97 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 32))(v59, v60, v97);
        swift_storeEnumTagMultiPayload(v59, v61, v96);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v59, 0, 1, v61);
      }
      v98 = v57[6];
      v99 = &v21[v98];
      v100 = &v22[v98];
      v101 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v100, 1, v101))
      {
        v102 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 32))(v99, v100, v101);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v99, 0, 1, v101);
      }
      v128 = v57[7];
      v129 = &v21[v128];
      v130 = &v22[v128];
      v131 = *((_OWORD *)v130 + 1);
      *(_OWORD *)v129 = *(_OWORD *)v130;
      *((_OWORD *)v129 + 1) = v131;
      v129[32] = v130[32];
      v21[v57[8]] = v22[v57[8]];
      v25 = v21;
      v26 = v23;
      v27 = 5;
      goto LABEL_44;
    case 6u:
      v63 = *((_OWORD *)v22 + 1);
      *(_OWORD *)v21 = *(_OWORD *)v22;
      *((_OWORD *)v21 + 1) = v63;
      v64 = (int *)type metadata accessor for NewsArticle(0);
      v65 = v64[6];
      v66 = &v21[v65];
      v67 = &v22[v65];
      v68 = type metadata accessor for URL(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v67, 1, v68))
      {
        v69 = sub_1000BA294(&qword_100BD4280);
        memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 32))(v66, v67, v68);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v66, 0, 1, v68);
      }
      v103 = v64[7];
      v104 = &v21[v103];
      v105 = &v22[v103];
      v106 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v106 - 8) + 32))(v104, v105, v106);
      v107 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 32);
      v107(&v21[v64[8]], &v22[v64[8]], v68);
      v108 = v64[9];
      v109 = &v21[v108];
      v110 = &v22[v108];
      v111 = *(_OWORD *)&v22[v108 + 16];
      *(_OWORD *)v109 = *(_OWORD *)&v22[v108];
      *((_OWORD *)v109 + 1) = v111;
      v112 = *(int *)(type metadata accessor for NewsChannel(0) + 24);
      v113 = &v109[v112];
      v114 = &v110[v112];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v114, 1, v68))
      {
        v115 = sub_1000BA294(&qword_100BD4280);
        memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
      }
      else
      {
        v107(v113, v114, v68);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v113, 0, 1, v68);
      }
      *(_QWORD *)&v21[v64[10]] = *(_QWORD *)&v22[v64[10]];
      *(_QWORD *)&v21[v64[11]] = *(_QWORD *)&v22[v64[11]];
      *(_QWORD *)&v21[v64[12]] = *(_QWORD *)&v22[v64[12]];
      v25 = v21;
      v26 = v23;
      v27 = 6;
      goto LABEL_44;
    case 7u:
      v70 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 32))(v21, v22, v70);
      v71 = (int *)type metadata accessor for AveragesDetailViewState(0);
      v21[v71[5]] = v22[v71[5]];
      v72 = v71[6];
      v73 = &v21[v72];
      v74 = &v22[v72];
      v75 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v74, 1, (uint64_t)v75))
      {
        v76 = sub_1000BA294(&qword_100BCB0D0);
        memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v73 = *(_QWORD *)v74;
        v116 = v75[5];
        v117 = &v73[v116];
        v118 = &v74[v116];
        v119 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v119 - 8) + 32))(v117, v118, v119);
        *(_QWORD *)&v73[v75[6]] = *(_QWORD *)&v74[v75[6]];
        *(_QWORD *)&v73[v75[7]] = *(_QWORD *)&v74[v75[7]];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v73, 0, 1, (uint64_t)v75);
      }
      v120 = v71[7];
      v121 = &v21[v120];
      v122 = &v22[v120];
      v123 = *((_OWORD *)v122 + 1);
      *(_OWORD *)v121 = *(_OWORD *)v122;
      *((_OWORD *)v121 + 1) = v123;
      v121[32] = v122[32];
      v25 = v21;
      v26 = v23;
      v27 = 7;
      goto LABEL_44;
    case 8u:
      v77 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 32))(v21, v22, v77);
      v78 = type metadata accessor for HomeAndWorkRefinementViewState(0);
      v79 = *(int *)(v78 + 20);
      v80 = &v21[v79];
      v81 = &v22[v79];
      v82 = type metadata accessor for LocationOfInterest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 32))(v80, v81, v82);
      v83 = *(int *)(v78 + 24);
      v84 = &v21[v83];
      v85 = &v22[v83];
      v86 = *((_OWORD *)v85 + 1);
      *(_OWORD *)v84 = *(_OWORD *)v85;
      *((_OWORD *)v84 + 1) = v86;
      v84[32] = v85[32];
      v25 = v21;
      v26 = v23;
      v27 = 8;
LABEL_44:
      swift_storeEnumTagMultiPayload(v25, v26, v27);
      break;
    default:
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      break;
  }
  return a1;
}

char *sub_100725964(char *a1, char *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  int *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  __int128 v87;
  uint64_t v88;
  char *v89;
  char *v90;
  __int128 v91;
  uint64_t v92;
  char *v93;
  char *v94;
  int *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  void (*v108)(char *, char *, uint64_t);
  uint64_t v109;
  char *v110;
  char *v111;
  __int128 v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  __int128 v124;
  void (*v125)(char *, char *, uint64_t);
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  __int128 v132;

  if (a1 != a2)
  {
    sub_1000215BC((uint64_t)a1, type metadata accessor for PreviewLocation);
    v4 = type metadata accessor for PreviewLocation(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    if (EnumCaseMultiPayload == 2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      v10 = type metadata accessor for SearchLocation(0);
      v11 = *(int *)(v10 + 32);
      v12 = &a1[v11];
      v13 = &a2[v11];
      v14 = type metadata accessor for Location(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v14))
      {
        v15 = sub_1000BA294(&qword_100BC35F8);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v14);
      }
      v17 = *(int *)(v10 + 36);
      v18 = &a1[v17];
      v19 = &a2[v17];
      *(_OWORD *)v18 = *(_OWORD *)v19;
      v18[16] = v19[16];
      v7 = a1;
      v8 = v4;
      v9 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v16 = type metadata accessor for LocationOfInterest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a1, a2, v16);
      v7 = a1;
      v8 = v4;
      v9 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
        goto LABEL_13;
      }
      v6 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = a1;
      v8 = v4;
      v9 = 0;
    }
    swift_storeEnumTagMultiPayload(v7, v8, v9);
  }
LABEL_13:
  v20 = type metadata accessor for LocationPreviewViewState(0);
  if (a1 != a2)
  {
    v21 = *(int *)(v20 + 20);
    v22 = &a1[v21];
    v23 = &a2[v21];
    sub_1000215BC((uint64_t)&a1[v21], type metadata accessor for LocationPreviewModalViewState);
    v24 = type metadata accessor for LocationPreviewModalViewState(0);
    switch(swift_getEnumCaseMultiPayload(v23))
    {
      case 0u:
        v25 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v22, v23, v25);
        v26 = v22;
        v27 = v24;
        v28 = 0;
        goto LABEL_46;
      case 1u:
        v29 = type metadata accessor for DetailCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v22, v23, v29);
        v30 = (int *)type metadata accessor for ConditionDetailViewState(0);
        v31 = v30[5];
        v32 = &v22[v31];
        v33 = &v23[v31];
        v34 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
        v35 = v30[6];
        v36 = &v22[v35];
        v37 = &v23[v35];
        v38 = type metadata accessor for Date(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v37, 1, v38))
        {
          v39 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v36, 0, 1, v38);
        }
        v88 = v30[7];
        v89 = &v22[v88];
        v90 = &v23[v88];
        v91 = *((_OWORD *)v90 + 1);
        *(_OWORD *)v89 = *(_OWORD *)v90;
        *((_OWORD *)v89 + 1) = v91;
        v89[32] = v90[32];
        v92 = v30[8];
        v93 = &v22[v92];
        v94 = &v23[v92];
        v95 = (int *)type metadata accessor for DetailChartSelection(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v94, 1, (uint64_t)v95))
        {
          v96 = sub_1000BA294(&qword_100BD0B58);
          memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
        }
        else
        {
          *(_OWORD *)v93 = *(_OWORD *)v94;
          v125 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32);
          v125(&v93[v95[5]], &v94[v95[5]], v38);
          v125(&v93[v95[6]], &v94[v95[6]], v38);
          v125(&v93[v95[7]], &v94[v95[7]], v38);
          *(_QWORD *)&v93[v95[8]] = *(_QWORD *)&v94[v95[8]];
          v126 = v95[9];
          v127 = &v93[v126];
          v128 = &v94[v126];
          v127[8] = v128[8];
          *(_QWORD *)v127 = *(_QWORD *)v128;
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v93, 0, 1, (uint64_t)v95);
        }
        v22[v30[9]] = v23[v30[9]];
        v26 = v22;
        v27 = v24;
        v28 = 1;
        goto LABEL_46;
      case 2u:
        v40 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v22, v23, v40);
        v41 = type metadata accessor for AirQualityDetailViewState(0);
        v22[*(int *)(v41 + 20)] = v23[*(int *)(v41 + 20)];
        v42 = *(int *)(v41 + 24);
        v43 = &v22[v42];
        v44 = &v23[v42];
        v43[32] = v44[32];
        v45 = *((_OWORD *)v44 + 1);
        *(_OWORD *)v43 = *(_OWORD *)v44;
        *((_OWORD *)v43 + 1) = v45;
        v26 = v22;
        v27 = v24;
        v28 = 2;
        goto LABEL_46;
      case 3u:
        v46 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v22, v23, v46);
        v47 = *(int *)(type metadata accessor for NextHourPrecipitationDetailViewState(0) + 20);
        v48 = &v22[v47];
        v49 = &v23[v47];
        v50 = *((_OWORD *)v49 + 1);
        *(_OWORD *)v48 = *(_OWORD *)v49;
        *((_OWORD *)v48 + 1) = v50;
        v48[32] = v49[32];
        v26 = v22;
        v27 = v24;
        v28 = 3;
        goto LABEL_46;
      case 4u:
        v51 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 32))(v22, v23, v51);
        v52 = type metadata accessor for SunriseSunsetDetailViewState(0);
        v53 = *(int *)(v52 + 20);
        v54 = &v22[v53];
        v55 = &v23[v53];
        v56 = *((_OWORD *)v55 + 1);
        *(_OWORD *)v54 = *(_OWORD *)v55;
        *((_OWORD *)v54 + 1) = v56;
        v54[32] = v55[32];
        v22[*(int *)(v52 + 24)] = v23[*(int *)(v52 + 24)];
        v26 = v22;
        v27 = v24;
        v28 = 4;
        goto LABEL_46;
      case 5u:
        v57 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v22, v23, v57);
        v58 = (int *)type metadata accessor for MoonDetailViewState(0);
        v59 = v58[5];
        v60 = &v22[v59];
        v61 = &v23[v59];
        v62 = type metadata accessor for MoonDetailSelectedDate(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v61, 1, v62))
        {
          v63 = sub_1000BA294(&qword_100BC6CB8);
          memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
        }
        else
        {
          v97 = swift_getEnumCaseMultiPayload(v61);
          v98 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v98 - 8) + 32))(v60, v61, v98);
          swift_storeEnumTagMultiPayload(v60, v62, v97);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v60, 0, 1, v62);
        }
        v99 = v58[6];
        v100 = &v22[v99];
        v101 = &v23[v99];
        v102 = type metadata accessor for Date(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v101, 1, v102))
        {
          v103 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v102 - 8) + 32))(v100, v101, v102);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v100, 0, 1, v102);
        }
        v129 = v58[7];
        v130 = &v22[v129];
        v131 = &v23[v129];
        v132 = *((_OWORD *)v131 + 1);
        *(_OWORD *)v130 = *(_OWORD *)v131;
        *((_OWORD *)v130 + 1) = v132;
        v130[32] = v131[32];
        v22[v58[8]] = v23[v58[8]];
        v26 = v22;
        v27 = v24;
        v28 = 5;
        goto LABEL_46;
      case 6u:
        v64 = *((_OWORD *)v23 + 1);
        *(_OWORD *)v22 = *(_OWORD *)v23;
        *((_OWORD *)v22 + 1) = v64;
        v65 = (int *)type metadata accessor for NewsArticle(0);
        v66 = v65[6];
        v67 = &v22[v66];
        v68 = &v23[v66];
        v69 = type metadata accessor for URL(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v68, 1, v69))
        {
          v70 = sub_1000BA294(&qword_100BD4280);
          memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v67, v68, v69);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v67, 0, 1, v69);
        }
        v104 = v65[7];
        v105 = &v22[v104];
        v106 = &v23[v104];
        v107 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 32))(v105, v106, v107);
        v108 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 32);
        v108(&v22[v65[8]], &v23[v65[8]], v69);
        v109 = v65[9];
        v110 = &v22[v109];
        v111 = &v23[v109];
        v112 = *(_OWORD *)&v23[v109 + 16];
        *(_OWORD *)v110 = *(_OWORD *)&v23[v109];
        *((_OWORD *)v110 + 1) = v112;
        v113 = *(int *)(type metadata accessor for NewsChannel(0) + 24);
        v114 = &v110[v113];
        v115 = &v111[v113];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v115, 1, v69))
        {
          v116 = sub_1000BA294(&qword_100BD4280);
          memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
        }
        else
        {
          v108(v114, v115, v69);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v114, 0, 1, v69);
        }
        *(_QWORD *)&v22[v65[10]] = *(_QWORD *)&v23[v65[10]];
        *(_QWORD *)&v22[v65[11]] = *(_QWORD *)&v23[v65[11]];
        *(_QWORD *)&v22[v65[12]] = *(_QWORD *)&v23[v65[12]];
        v26 = v22;
        v27 = v24;
        v28 = 6;
        goto LABEL_46;
      case 7u:
        v71 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 32))(v22, v23, v71);
        v72 = (int *)type metadata accessor for AveragesDetailViewState(0);
        v22[v72[5]] = v23[v72[5]];
        v73 = v72[6];
        v74 = &v22[v73];
        v75 = &v23[v73];
        v76 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v75, 1, (uint64_t)v76))
        {
          v77 = sub_1000BA294(&qword_100BCB0D0);
          memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v74 = *(_QWORD *)v75;
          v117 = v76[5];
          v118 = &v74[v117];
          v119 = &v75[v117];
          v120 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v120 - 8) + 32))(v118, v119, v120);
          *(_QWORD *)&v74[v76[6]] = *(_QWORD *)&v75[v76[6]];
          *(_QWORD *)&v74[v76[7]] = *(_QWORD *)&v75[v76[7]];
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v74, 0, 1, (uint64_t)v76);
        }
        v121 = v72[7];
        v122 = &v22[v121];
        v123 = &v23[v121];
        v124 = *((_OWORD *)v123 + 1);
        *(_OWORD *)v122 = *(_OWORD *)v123;
        *((_OWORD *)v122 + 1) = v124;
        v122[32] = v123[32];
        v26 = v22;
        v27 = v24;
        v28 = 7;
        goto LABEL_46;
      case 8u:
        v78 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 32))(v22, v23, v78);
        v79 = type metadata accessor for HomeAndWorkRefinementViewState(0);
        v80 = *(int *)(v79 + 20);
        v81 = &v22[v80];
        v82 = &v23[v80];
        v83 = type metadata accessor for LocationOfInterest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 32))(v81, v82, v83);
        v84 = *(int *)(v79 + 24);
        v85 = &v22[v84];
        v86 = &v23[v84];
        v87 = *((_OWORD *)v86 + 1);
        *(_OWORD *)v85 = *(_OWORD *)v86;
        *((_OWORD *)v85 + 1) = v87;
        v85[32] = v86[32];
        v26 = v22;
        v27 = v24;
        v28 = 8;
LABEL_46:
        swift_storeEnumTagMultiPayload(v26, v27, v28);
        break;
      default:
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_10072638C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_10007A020();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = v4;
  }
  else
  {
    v7 = type metadata accessor for LocationPreviewModalViewState(0);
    v8 = v4 + *(int *)(a3 + 20);
  }
  return _s7Weather24LocationCompositionStateOwet_0(v8, v3, v7);
}

uint64_t sub_1007263E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = sub_10007A020();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = v5;
  }
  else
  {
    v9 = type metadata accessor for LocationPreviewModalViewState(0);
    v10 = v5 + *(int *)(a4 + 20);
  }
  return _s7Weather24LocationCompositionStateOwst_0(v10, v4, v4, v9);
}

uint64_t *sub_10072644C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t *result;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2))
    {
      case 0u:
        type metadata accessor for PreviewLocation(0);
        v8 = (char *)&loc_1007264E8 + 4 * byte_1009C358D[swift_getEnumCaseMultiPayload(a2)];
        __asm { BR              X10 }
        return result;
      case 2u:
        *a1 = *a2;
        swift_retain();
        v10 = a1;
        v11 = a3;
        v12 = 2;
        goto LABEL_12;
      case 3u:
        *a1 = *a2;
        swift_retain();
        v10 = a1;
        v11 = a3;
        v12 = 3;
        goto LABEL_12;
      case 4u:
        v13 = type metadata accessor for ModalViewState.MapViewModal(0);
        if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v13))
        {
          type metadata accessor for PreviewLocation(0);
          v16 = (char *)&loc_1007266D8 + 4 * word_1009C357C[swift_getEnumCaseMultiPayload(a2)];
          __asm { BR              X10 }
        }
        v14 = sub_1000BA294(&qword_100BC5F58);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
        v10 = a1;
        v11 = a3;
        v12 = 4;
LABEL_12:
        swift_storeEnumTagMultiPayload(v10, v11, v12);
        break;
      case 5u:
        type metadata accessor for ModalViewState.LocationDetailModal(0);
        v15 = (char *)&loc_1007265FC + 4 * word_1009C356C[swift_getEnumCaseMultiPayload(a2)];
        __asm { BR              X10 }
        return result;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

_QWORD *sub_10072814C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  _QWORD *result;

  if (a1 != a2)
  {
    sub_1000215BC((uint64_t)a1, type metadata accessor for ModalViewState);
    switch(swift_getEnumCaseMultiPayload(a2))
    {
      case 0u:
        type metadata accessor for PreviewLocation(0);
        v6 = (char *)&loc_1007281F4 + 4 * byte_1009C361D[swift_getEnumCaseMultiPayload(a2)];
        __asm { BR              X10 }
        return result;
      case 2u:
        *a1 = *a2;
        swift_retain();
        v7 = a1;
        v8 = a3;
        v9 = 2;
        goto LABEL_11;
      case 3u:
        *a1 = *a2;
        swift_retain();
        v7 = a1;
        v8 = a3;
        v9 = 3;
        goto LABEL_11;
      case 4u:
        v10 = type metadata accessor for ModalViewState.MapViewModal(0);
        if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v10))
        {
          type metadata accessor for PreviewLocation(0);
          v13 = (char *)&loc_1007283C8 + 4 * word_1009C360C[swift_getEnumCaseMultiPayload(a2)];
          __asm { BR              X10 }
        }
        v11 = sub_1000BA294(&qword_100BC5F58);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
        v7 = a1;
        v8 = a3;
        v9 = 4;
LABEL_11:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      case 5u:
        type metadata accessor for ModalViewState.LocationDetailModal(0);
        v12 = (char *)&loc_1007282EC + 4 * word_1009C35FC[swift_getEnumCaseMultiPayload(a2)];
        __asm { BR              X10 }
        return result;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

_QWORD *sub_100729ED4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  _OWORD *v40;
  _OWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  __int128 v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  int *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int *v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  __int128 v105;
  uint64_t v106;
  char *v107;
  char *v108;
  __int128 v109;
  uint64_t v110;
  _OWORD *v111;
  _OWORD *v112;
  int *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  void (*v126)(char *, char *, uint64_t);
  uint64_t v127;
  _OWORD *v128;
  char *v129;
  __int128 v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  __int128 v141;
  void (*v142)(char *, char *, uint64_t);
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  __int128 v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  _OWORD *v157;
  _OWORD *v158;
  uint64_t v159;
  uint64_t v160;
  _OWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  __int128 v191;
  uint64_t v192;
  int *v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  __int128 v199;
  int *v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int *v207;
  uint64_t v208;
  _QWORD *v209;
  _QWORD *v210;
  int *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  __int128 v222;
  uint64_t v223;
  char *v224;
  char *v225;
  __int128 v226;
  uint64_t v227;
  _OWORD *v228;
  _OWORD *v229;
  int *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  void (*v242)(char *, char *, uint64_t);
  uint64_t v243;
  _OWORD *v244;
  char *v245;
  __int128 v246;
  uint64_t v247;
  char *v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  char *v255;
  __int128 v256;
  void (*v257)(char *, char *, uint64_t);
  uint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  char *v262;
  char *v263;
  __int128 v264;
  char *v266;
  int *v267;
  unsigned int v268;
  char *v269;
  char *v270;
  int *v271;
  uint64_t v272;
  uint64_t v273;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
  if (EnumCaseMultiPayload == 5)
  {
    type metadata accessor for ModalViewState.LocationDetailModal(0);
    v13 = (char *)&loc_100729FB0 + 4 * word_1009C362A[swift_getEnumCaseMultiPayload(a2)];
    __asm { BR              X10 }
  }
  if (EnumCaseMultiPayload == 4)
  {
    v14 = type metadata accessor for ModalViewState.MapViewModal(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v14))
    {
      v15 = sub_1000BA294(&qword_100BC5F58);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
LABEL_98:
      v150 = a1;
      v151 = a3;
      v152 = 4;
LABEL_99:
      swift_storeEnumTagMultiPayload(v150, v151, v152);
      return a1;
    }
    v16 = type metadata accessor for PreviewLocation(0);
    v17 = swift_getEnumCaseMultiPayload(a2);
    if (v17 == 2)
    {
      *a1 = *a2;
      *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
      *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
      v29 = type metadata accessor for SearchLocation(0);
      v30 = *(int *)(v29 + 32);
      v31 = (char *)a1 + v30;
      v32 = (char *)a2 + v30;
      v33 = type metadata accessor for Location(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v32, 1, v33))
      {
        v34 = sub_1000BA294(&qword_100BC35F8);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v31, 0, 1, v33);
      }
      v153 = *(int *)(v29 + 36);
      v154 = (char *)a1 + v153;
      v155 = (char *)a2 + v153;
      *(_OWORD *)v154 = *(_OWORD *)v155;
      v154[16] = v155[16];
      v19 = a1;
      v20 = v16;
      v21 = 2;
    }
    else if (v17 == 1)
    {
      v35 = type metadata accessor for LocationOfInterest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(a1, a2, v35);
      v19 = a1;
      v20 = v16;
      v21 = 1;
    }
    else
    {
      if (v17)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
LABEL_64:
        v156 = *(int *)(type metadata accessor for LocationPreviewViewState(0) + 20);
        v157 = (_OWORD *)((char *)a1 + v156);
        v158 = (_OWORD *)((char *)a2 + v156);
        v159 = type metadata accessor for LocationPreviewModalViewState(0);
        switch(swift_getEnumCaseMultiPayload(v158))
        {
          case 0u:
            v160 = type metadata accessor for URL(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v160 - 8) + 32))(v157, v158, v160);
            v161 = v157;
            v162 = v159;
            v163 = 0;
            goto LABEL_96;
          case 1u:
            v164 = type metadata accessor for DetailCondition(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v164 - 8) + 32))(v157, v158, v164);
            v165 = (int *)type metadata accessor for ConditionDetailViewState(0);
            v166 = v165[5];
            v167 = (char *)v157 + v166;
            v168 = (char *)v158 + v166;
            v169 = type metadata accessor for Location(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v169 - 8) + 32))(v167, v168, v169);
            v170 = v165[6];
            v171 = (char *)v157 + v170;
            v172 = (char *)v158 + v170;
            v173 = type metadata accessor for Date(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v172, 1, v173))
            {
              v174 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
              memcpy(v171, v172, *(_QWORD *)(*(_QWORD *)(v174 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v173 - 8) + 32))(v171, v172, v173);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v171, 0, 1, v173);
            }
            v223 = v165[7];
            v224 = (char *)v157 + v223;
            v225 = (char *)v158 + v223;
            v226 = *((_OWORD *)v225 + 1);
            *(_OWORD *)v224 = *(_OWORD *)v225;
            *((_OWORD *)v224 + 1) = v226;
            v224[32] = v225[32];
            v267 = v165;
            v227 = v165[8];
            v228 = (_OWORD *)((char *)v157 + v227);
            v229 = (_OWORD *)((char *)v158 + v227);
            v230 = (int *)type metadata accessor for DetailChartSelection(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v229, 1, (uint64_t)v230))
            {
              v231 = sub_1000BA294(&qword_100BD0B58);
              memcpy(v228, v229, *(_QWORD *)(*(_QWORD *)(v231 - 8) + 64));
            }
            else
            {
              *v228 = *v229;
              v273 = v159;
              v257 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v173 - 8) + 32);
              v257((char *)v228 + v230[5], (char *)v229 + v230[5], v173);
              v257((char *)v228 + v230[6], (char *)v229 + v230[6], v173);
              v257((char *)v228 + v230[7], (char *)v229 + v230[7], v173);
              v159 = v273;
              *(_QWORD *)((char *)v228 + v230[8]) = *(_QWORD *)((char *)v229 + v230[8]);
              v258 = v230[9];
              v259 = (char *)v228 + v258;
              v260 = (char *)v229 + v258;
              v259[8] = v260[8];
              *(_QWORD *)v259 = *(_QWORD *)v260;
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v228, 0, 1, (uint64_t)v230);
            }
            *((_BYTE *)v157 + v267[9]) = *((_BYTE *)v158 + v267[9]);
            v161 = v157;
            v162 = v159;
            v163 = 1;
            goto LABEL_96;
          case 2u:
            v175 = type metadata accessor for Location(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v175 - 8) + 32))(v157, v158, v175);
            v176 = type metadata accessor for AirQualityDetailViewState(0);
            *((_BYTE *)v157 + *(int *)(v176 + 20)) = *((_BYTE *)v158 + *(int *)(v176 + 20));
            v177 = *(int *)(v176 + 24);
            v178 = (char *)v157 + v177;
            v179 = (char *)v158 + v177;
            v178[32] = v179[32];
            v180 = *((_OWORD *)v179 + 1);
            *(_OWORD *)v178 = *(_OWORD *)v179;
            *((_OWORD *)v178 + 1) = v180;
            v161 = v157;
            v162 = v159;
            v163 = 2;
            goto LABEL_96;
          case 3u:
            v181 = type metadata accessor for Location(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v181 - 8) + 32))(v157, v158, v181);
            v182 = *(int *)(type metadata accessor for NextHourPrecipitationDetailViewState(0) + 20);
            v183 = (char *)v157 + v182;
            v184 = (char *)v158 + v182;
            v185 = *((_OWORD *)v184 + 1);
            *(_OWORD *)v183 = *(_OWORD *)v184;
            *((_OWORD *)v183 + 1) = v185;
            v183[32] = v184[32];
            v161 = v157;
            v162 = v159;
            v163 = 3;
            goto LABEL_96;
          case 4u:
            v186 = type metadata accessor for Location(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v186 - 8) + 32))(v157, v158, v186);
            v187 = type metadata accessor for SunriseSunsetDetailViewState(0);
            v188 = *(int *)(v187 + 20);
            v189 = (char *)v157 + v188;
            v190 = (char *)v158 + v188;
            v191 = *((_OWORD *)v190 + 1);
            *(_OWORD *)v189 = *(_OWORD *)v190;
            *((_OWORD *)v189 + 1) = v191;
            v189[32] = v190[32];
            *((_BYTE *)v157 + *(int *)(v187 + 24)) = *((_BYTE *)v158 + *(int *)(v187 + 24));
            v161 = v157;
            v162 = v159;
            v163 = 4;
            goto LABEL_96;
          case 5u:
            v192 = type metadata accessor for Location(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v192 - 8) + 32))(v157, v158, v192);
            v193 = (int *)type metadata accessor for MoonDetailViewState(0);
            v194 = v193[5];
            v195 = (char *)v157 + v194;
            v196 = (char *)v158 + v194;
            v197 = type metadata accessor for MoonDetailSelectedDate(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v196, 1, v197))
            {
              v198 = sub_1000BA294(&qword_100BC6CB8);
              memcpy(v195, v196, *(_QWORD *)(*(_QWORD *)(v198 - 8) + 64));
            }
            else
            {
              v268 = swift_getEnumCaseMultiPayload(v196);
              v232 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v232 - 8) + 32))(v195, v196, v232);
              swift_storeEnumTagMultiPayload(v195, v197, v268);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v195, 0, 1, v197);
            }
            v233 = v193[6];
            v234 = (char *)v157 + v233;
            v235 = (char *)v158 + v233;
            v236 = type metadata accessor for Date(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v235, 1, v236))
            {
              v237 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
              memcpy(v234, v235, *(_QWORD *)(*(_QWORD *)(v237 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v236 - 8) + 32))(v234, v235, v236);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v234, 0, 1, v236);
            }
            v261 = v193[7];
            v262 = (char *)v157 + v261;
            v263 = (char *)v158 + v261;
            v264 = *((_OWORD *)v263 + 1);
            *(_OWORD *)v262 = *(_OWORD *)v263;
            *((_OWORD *)v262 + 1) = v264;
            v262[32] = v263[32];
            *((_BYTE *)v157 + v193[8]) = *((_BYTE *)v158 + v193[8]);
            v161 = v157;
            v162 = v159;
            v163 = 5;
            goto LABEL_96;
          case 6u:
            v199 = v158[1];
            *v157 = *v158;
            v157[1] = v199;
            v200 = (int *)type metadata accessor for NewsArticle(0);
            v201 = v200[6];
            v202 = (char *)v157 + v201;
            v203 = (char *)v158 + v201;
            v204 = type metadata accessor for URL(0);
            v272 = v159;
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v203, 1, v204))
            {
              v205 = sub_1000BA294(&qword_100BD4280);
              memcpy(v202, v203, *(_QWORD *)(*(_QWORD *)(v205 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v204 - 8) + 32))(v202, v203, v204);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v202, 0, 1, v204);
            }
            v238 = v200[7];
            v239 = (char *)v157 + v238;
            v240 = (char *)v158 + v238;
            v241 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v241 - 8) + 32))(v239, v240, v241);
            v242 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v204 - 8) + 32);
            v242((char *)v157 + v200[8], (char *)v158 + v200[8], v204);
            v243 = v200[9];
            v244 = (_OWORD *)((char *)v157 + v243);
            v245 = (char *)v158 + v243;
            v246 = *(_OWORD *)((char *)v158 + v243 + 16);
            *v244 = *(_OWORD *)((char *)v158 + v243);
            v244[1] = v246;
            v247 = *(int *)(type metadata accessor for NewsChannel(0) + 24);
            v248 = (char *)v244 + v247;
            v249 = &v245[v247];
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v249, 1, v204))
            {
              v250 = sub_1000BA294(&qword_100BD4280);
              memcpy(v248, v249, *(_QWORD *)(*(_QWORD *)(v250 - 8) + 64));
            }
            else
            {
              v242(v248, v249, v204);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v248, 0, 1, v204);
            }
            *(_QWORD *)((char *)v157 + v200[10]) = *(_QWORD *)((char *)v158 + v200[10]);
            *(_QWORD *)((char *)v157 + v200[11]) = *(_QWORD *)((char *)v158 + v200[11]);
            *(_QWORD *)((char *)v157 + v200[12]) = *(_QWORD *)((char *)v158 + v200[12]);
            v161 = v157;
            v162 = v272;
            v163 = 6;
            goto LABEL_96;
          case 7u:
            v206 = type metadata accessor for Location(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v206 - 8) + 32))(v157, v158, v206);
            v207 = (int *)type metadata accessor for AveragesDetailViewState(0);
            *((_BYTE *)v157 + v207[5]) = *((_BYTE *)v158 + v207[5]);
            v208 = v207[6];
            v209 = (_QWORD *)((char *)v157 + v208);
            v210 = (_QWORD *)((char *)v158 + v208);
            v211 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v210, 1, (uint64_t)v211))
            {
              v212 = sub_1000BA294(&qword_100BCB0D0);
              memcpy(v209, v210, *(_QWORD *)(*(_QWORD *)(v212 - 8) + 64));
            }
            else
            {
              *v209 = *v210;
              v251 = v211[5];
              v266 = (char *)v210 + v251;
              v269 = (char *)v209 + v251;
              v252 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v252 - 8) + 32))(v269, v266, v252);
              *(_QWORD *)((char *)v209 + v211[6]) = *(_QWORD *)((char *)v210 + v211[6]);
              *(_QWORD *)((char *)v209 + v211[7]) = *(_QWORD *)((char *)v210 + v211[7]);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v209, 0, 1, (uint64_t)v211);
            }
            v253 = v207[7];
            v254 = (char *)v157 + v253;
            v255 = (char *)v158 + v253;
            v256 = *((_OWORD *)v255 + 1);
            *(_OWORD *)v254 = *(_OWORD *)v255;
            *((_OWORD *)v254 + 1) = v256;
            v254[32] = v255[32];
            v161 = v157;
            v162 = v159;
            v163 = 7;
            goto LABEL_96;
          case 8u:
            v213 = type metadata accessor for Location(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v213 - 8) + 32))(v157, v158, v213);
            v214 = type metadata accessor for HomeAndWorkRefinementViewState(0);
            v215 = *(int *)(v214 + 20);
            v216 = (char *)v157 + v215;
            v217 = (char *)v158 + v215;
            v218 = type metadata accessor for LocationOfInterest(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v218 - 8) + 32))(v216, v217, v218);
            v219 = *(int *)(v214 + 24);
            v220 = (char *)v157 + v219;
            v221 = (char *)v158 + v219;
            v222 = *((_OWORD *)v221 + 1);
            *(_OWORD *)v220 = *(_OWORD *)v221;
            *((_OWORD *)v220 + 1) = v222;
            v220[32] = v221[32];
            v161 = v157;
            v162 = v159;
            v163 = 8;
LABEL_96:
            swift_storeEnumTagMultiPayload(v161, v162, v163);
            break;
          default:
            memcpy(v157, v158, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
            break;
        }
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v14);
        goto LABEL_98;
      }
      v18 = type metadata accessor for Location(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a1, a2, v18);
      v19 = a1;
      v20 = v16;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    goto LABEL_64;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = type metadata accessor for PreviewLocation(0);
    v8 = swift_getEnumCaseMultiPayload(a2);
    if (v8 == 2)
    {
      *a1 = *a2;
      *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
      *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
      v22 = type metadata accessor for SearchLocation(0);
      v23 = *(int *)(v22 + 32);
      v24 = (char *)a1 + v23;
      v25 = (char *)a2 + v23;
      v26 = type metadata accessor for Location(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v25, 1, v26))
      {
        v27 = sub_1000BA294(&qword_100BC35F8);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v24, 0, 1, v26);
      }
      v36 = *(int *)(v22 + 36);
      v37 = (char *)a1 + v36;
      v38 = (char *)a2 + v36;
      *(_OWORD *)v37 = *(_OWORD *)v38;
      v37[16] = v38[16];
      v10 = a1;
      v11 = v7;
      v12 = 2;
    }
    else if (v8 == 1)
    {
      v28 = type metadata accessor for LocationOfInterest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(a1, a2, v28);
      v10 = a1;
      v11 = v7;
      v12 = 1;
    }
    else
    {
      if (v8)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
LABEL_27:
        v39 = *(int *)(type metadata accessor for LocationPreviewViewState(0) + 20);
        v40 = (_OWORD *)((char *)a1 + v39);
        v41 = (_OWORD *)((char *)a2 + v39);
        v42 = type metadata accessor for LocationPreviewModalViewState(0);
        switch(swift_getEnumCaseMultiPayload(v41))
        {
          case 0u:
            v43 = type metadata accessor for URL(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v40, v41, v43);
            v44 = v40;
            v45 = v42;
            v46 = 0;
            goto LABEL_59;
          case 1u:
            v47 = type metadata accessor for DetailCondition(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v40, v41, v47);
            v48 = (int *)type metadata accessor for ConditionDetailViewState(0);
            v49 = v48[5];
            v50 = (char *)v40 + v49;
            v51 = (char *)v41 + v49;
            v52 = type metadata accessor for Location(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v50, v51, v52);
            v53 = v48[6];
            v54 = (char *)v40 + v53;
            v55 = (char *)v41 + v53;
            v56 = type metadata accessor for Date(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v55, 1, v56))
            {
              v57 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
              memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v54, v55, v56);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v54, 0, 1, v56);
            }
            v106 = v48[7];
            v107 = (char *)v40 + v106;
            v108 = (char *)v41 + v106;
            v109 = *((_OWORD *)v108 + 1);
            *(_OWORD *)v107 = *(_OWORD *)v108;
            *((_OWORD *)v107 + 1) = v109;
            v107[32] = v108[32];
            v110 = v48[8];
            v111 = (_OWORD *)((char *)v40 + v110);
            v112 = (_OWORD *)((char *)v41 + v110);
            v113 = (int *)type metadata accessor for DetailChartSelection(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v112, 1, (uint64_t)v113))
            {
              v114 = sub_1000BA294(&qword_100BD0B58);
              memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
            }
            else
            {
              *v111 = *v112;
              v271 = v48;
              v142 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32);
              v142((char *)v111 + v113[5], (char *)v112 + v113[5], v56);
              v142((char *)v111 + v113[6], (char *)v112 + v113[6], v56);
              v142((char *)v111 + v113[7], (char *)v112 + v113[7], v56);
              v48 = v271;
              *(_QWORD *)((char *)v111 + v113[8]) = *(_QWORD *)((char *)v112 + v113[8]);
              v143 = v113[9];
              v144 = (char *)v111 + v143;
              v145 = (char *)v112 + v143;
              v144[8] = v145[8];
              *(_QWORD *)v144 = *(_QWORD *)v145;
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v111, 0, 1, (uint64_t)v113);
            }
            *((_BYTE *)v40 + v48[9]) = *((_BYTE *)v41 + v48[9]);
            v44 = v40;
            v45 = v42;
            v46 = 1;
            goto LABEL_59;
          case 2u:
            v58 = type metadata accessor for Location(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v58 - 8) + 32))(v40, v41, v58);
            v59 = type metadata accessor for AirQualityDetailViewState(0);
            *((_BYTE *)v40 + *(int *)(v59 + 20)) = *((_BYTE *)v41 + *(int *)(v59 + 20));
            v60 = *(int *)(v59 + 24);
            v61 = (char *)v40 + v60;
            v62 = (char *)v41 + v60;
            v61[32] = v62[32];
            v63 = *((_OWORD *)v62 + 1);
            *(_OWORD *)v61 = *(_OWORD *)v62;
            *((_OWORD *)v61 + 1) = v63;
            v44 = v40;
            v45 = v42;
            v46 = 2;
            goto LABEL_59;
          case 3u:
            v64 = type metadata accessor for Location(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v64 - 8) + 32))(v40, v41, v64);
            v65 = *(int *)(type metadata accessor for NextHourPrecipitationDetailViewState(0) + 20);
            v66 = (char *)v40 + v65;
            v67 = (char *)v41 + v65;
            v68 = *((_OWORD *)v67 + 1);
            *(_OWORD *)v66 = *(_OWORD *)v67;
            *((_OWORD *)v66 + 1) = v68;
            v66[32] = v67[32];
            v44 = v40;
            v45 = v42;
            v46 = 3;
            goto LABEL_59;
          case 4u:
            v69 = type metadata accessor for Location(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v40, v41, v69);
            v70 = type metadata accessor for SunriseSunsetDetailViewState(0);
            v71 = *(int *)(v70 + 20);
            v72 = (char *)v40 + v71;
            v73 = (char *)v41 + v71;
            v74 = *((_OWORD *)v73 + 1);
            *(_OWORD *)v72 = *(_OWORD *)v73;
            *((_OWORD *)v72 + 1) = v74;
            v72[32] = v73[32];
            *((_BYTE *)v40 + *(int *)(v70 + 24)) = *((_BYTE *)v41 + *(int *)(v70 + 24));
            v44 = v40;
            v45 = v42;
            v46 = 4;
            goto LABEL_59;
          case 5u:
            v75 = type metadata accessor for Location(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v40, v41, v75);
            v76 = (int *)type metadata accessor for MoonDetailViewState(0);
            v77 = v76[5];
            v78 = (char *)v40 + v77;
            v79 = (char *)v41 + v77;
            v80 = type metadata accessor for MoonDetailSelectedDate(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v79, 1, v80))
            {
              v81 = sub_1000BA294(&qword_100BC6CB8);
              memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
            }
            else
            {
              v115 = swift_getEnumCaseMultiPayload(v79);
              v116 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v116 - 8) + 32))(v78, v79, v116);
              swift_storeEnumTagMultiPayload(v78, v80, v115);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v78, 0, 1, v80);
            }
            v117 = v76[6];
            v118 = (char *)v40 + v117;
            v119 = (char *)v41 + v117;
            v120 = type metadata accessor for Date(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v119, 1, v120))
            {
              v121 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
              memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v120 - 8) + 32))(v118, v119, v120);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v118, 0, 1, v120);
            }
            v146 = v76[7];
            v147 = (char *)v40 + v146;
            v148 = (char *)v41 + v146;
            v149 = *((_OWORD *)v148 + 1);
            *(_OWORD *)v147 = *(_OWORD *)v148;
            *((_OWORD *)v147 + 1) = v149;
            v147[32] = v148[32];
            *((_BYTE *)v40 + v76[8]) = *((_BYTE *)v41 + v76[8]);
            v44 = v40;
            v45 = v42;
            v46 = 5;
            goto LABEL_59;
          case 6u:
            v82 = v41[1];
            *v40 = *v41;
            v40[1] = v82;
            v83 = (int *)type metadata accessor for NewsArticle(0);
            v84 = v83[6];
            v85 = (char *)v40 + v84;
            v86 = (char *)v41 + v84;
            v87 = type metadata accessor for URL(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v86, 1, v87))
            {
              v88 = sub_1000BA294(&qword_100BD4280);
              memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 32))(v85, v86, v87);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v85, 0, 1, v87);
            }
            v122 = v83[7];
            v123 = (char *)v40 + v122;
            v124 = (char *)v41 + v122;
            v125 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v125 - 8) + 32))(v123, v124, v125);
            v126 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 32);
            v126((char *)v40 + v83[8], (char *)v41 + v83[8], v87);
            v127 = v83[9];
            v128 = (_OWORD *)((char *)v40 + v127);
            v129 = (char *)v41 + v127;
            v130 = *(_OWORD *)((char *)v41 + v127 + 16);
            *v128 = *(_OWORD *)((char *)v41 + v127);
            v128[1] = v130;
            v131 = *(int *)(type metadata accessor for NewsChannel(0) + 24);
            v132 = (char *)v128 + v131;
            v133 = &v129[v131];
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v133, 1, v87))
            {
              v134 = sub_1000BA294(&qword_100BD4280);
              memcpy(v132, v133, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
            }
            else
            {
              v126(v132, v133, v87);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v132, 0, 1, v87);
            }
            *(_QWORD *)((char *)v40 + v83[10]) = *(_QWORD *)((char *)v41 + v83[10]);
            *(_QWORD *)((char *)v40 + v83[11]) = *(_QWORD *)((char *)v41 + v83[11]);
            *(_QWORD *)((char *)v40 + v83[12]) = *(_QWORD *)((char *)v41 + v83[12]);
            v44 = v40;
            v45 = v42;
            v46 = 6;
            goto LABEL_59;
          case 7u:
            v89 = type metadata accessor for Location(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v89 - 8) + 32))(v40, v41, v89);
            v90 = (int *)type metadata accessor for AveragesDetailViewState(0);
            *((_BYTE *)v40 + v90[5]) = *((_BYTE *)v41 + v90[5]);
            v91 = v90[6];
            v92 = (_QWORD *)((char *)v40 + v91);
            v93 = (_QWORD *)((char *)v41 + v91);
            v94 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v93, 1, (uint64_t)v94))
            {
              v95 = sub_1000BA294(&qword_100BCB0D0);
              memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
            }
            else
            {
              *v92 = *v93;
              v135 = v94[5];
              v136 = (char *)v92 + v135;
              v270 = (char *)v93 + v135;
              v137 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v137 - 8) + 32))(v136, v270, v137);
              *(_QWORD *)((char *)v92 + v94[6]) = *(_QWORD *)((char *)v93 + v94[6]);
              *(_QWORD *)((char *)v92 + v94[7]) = *(_QWORD *)((char *)v93 + v94[7]);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v92, 0, 1, (uint64_t)v94);
            }
            v138 = v90[7];
            v139 = (char *)v40 + v138;
            v140 = (char *)v41 + v138;
            v141 = *((_OWORD *)v140 + 1);
            *(_OWORD *)v139 = *(_OWORD *)v140;
            *((_OWORD *)v139 + 1) = v141;
            v139[32] = v140[32];
            v44 = v40;
            v45 = v42;
            v46 = 7;
            goto LABEL_59;
          case 8u:
            v96 = type metadata accessor for Location(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v96 - 8) + 32))(v40, v41, v96);
            v97 = type metadata accessor for HomeAndWorkRefinementViewState(0);
            v98 = *(int *)(v97 + 20);
            v99 = (char *)v40 + v98;
            v100 = (char *)v41 + v98;
            v101 = type metadata accessor for LocationOfInterest(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 32))(v99, v100, v101);
            v102 = *(int *)(v97 + 24);
            v103 = (char *)v40 + v102;
            v104 = (char *)v41 + v102;
            v105 = *((_OWORD *)v104 + 1);
            *(_OWORD *)v103 = *(_OWORD *)v104;
            *((_OWORD *)v103 + 1) = v105;
            v103[32] = v104[32];
            v44 = v40;
            v45 = v42;
            v46 = 8;
LABEL_59:
            swift_storeEnumTagMultiPayload(v44, v45, v46);
            break;
          default:
            memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
            break;
        }
        v150 = a1;
        v151 = a3;
        v152 = 0;
        goto LABEL_99;
      }
      v9 = type metadata accessor for Location(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = a1;
      v11 = v7;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
    goto LABEL_27;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_QWORD *sub_10072B9E4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  _OWORD *v40;
  _OWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  __int128 v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  int *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int *v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  __int128 v105;
  uint64_t v106;
  char *v107;
  char *v108;
  __int128 v109;
  uint64_t v110;
  _OWORD *v111;
  _OWORD *v112;
  int *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  void (*v126)(char *, char *, uint64_t);
  uint64_t v127;
  _OWORD *v128;
  char *v129;
  __int128 v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  __int128 v141;
  void (*v142)(char *, char *, uint64_t);
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  __int128 v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  _OWORD *v157;
  _OWORD *v158;
  uint64_t v159;
  uint64_t v160;
  _OWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  __int128 v191;
  uint64_t v192;
  int *v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  __int128 v199;
  int *v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int *v207;
  uint64_t v208;
  _QWORD *v209;
  _QWORD *v210;
  int *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  __int128 v222;
  uint64_t v223;
  char *v224;
  char *v225;
  __int128 v226;
  uint64_t v227;
  _OWORD *v228;
  _OWORD *v229;
  int *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  void (*v242)(char *, char *, uint64_t);
  uint64_t v243;
  _OWORD *v244;
  char *v245;
  __int128 v246;
  uint64_t v247;
  char *v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  char *v255;
  __int128 v256;
  void (*v257)(char *, char *, uint64_t);
  uint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  char *v262;
  char *v263;
  __int128 v264;
  char *v266;
  int *v267;
  unsigned int v268;
  char *v269;
  char *v270;
  int *v271;
  uint64_t v272;
  uint64_t v273;

  if (a1 == a2)
    return a1;
  sub_1000215BC((uint64_t)a1, type metadata accessor for ModalViewState);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
  if (EnumCaseMultiPayload == 5)
  {
    type metadata accessor for ModalViewState.LocationDetailModal(0);
    v13 = (char *)&loc_10072BAD8 + 4 * word_1009C364C[swift_getEnumCaseMultiPayload(a2)];
    __asm { BR              X10 }
  }
  if (EnumCaseMultiPayload == 4)
  {
    v14 = type metadata accessor for ModalViewState.MapViewModal(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v14))
    {
      v15 = sub_1000BA294(&qword_100BC5F58);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
LABEL_99:
      v150 = a1;
      v151 = a3;
      v152 = 4;
LABEL_100:
      swift_storeEnumTagMultiPayload(v150, v151, v152);
      return a1;
    }
    v16 = type metadata accessor for PreviewLocation(0);
    v17 = swift_getEnumCaseMultiPayload(a2);
    if (v17 == 2)
    {
      *a1 = *a2;
      *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
      *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
      v29 = type metadata accessor for SearchLocation(0);
      v30 = *(int *)(v29 + 32);
      v31 = (char *)a1 + v30;
      v32 = (char *)a2 + v30;
      v33 = type metadata accessor for Location(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v32, 1, v33))
      {
        v34 = sub_1000BA294(&qword_100BC35F8);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v31, 0, 1, v33);
      }
      v153 = *(int *)(v29 + 36);
      v154 = (char *)a1 + v153;
      v155 = (char *)a2 + v153;
      *(_OWORD *)v154 = *(_OWORD *)v155;
      v154[16] = v155[16];
      v19 = a1;
      v20 = v16;
      v21 = 2;
    }
    else if (v17 == 1)
    {
      v35 = type metadata accessor for LocationOfInterest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(a1, a2, v35);
      v19 = a1;
      v20 = v16;
      v21 = 1;
    }
    else
    {
      if (v17)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
LABEL_65:
        v156 = *(int *)(type metadata accessor for LocationPreviewViewState(0) + 20);
        v157 = (_OWORD *)((char *)a1 + v156);
        v158 = (_OWORD *)((char *)a2 + v156);
        v159 = type metadata accessor for LocationPreviewModalViewState(0);
        switch(swift_getEnumCaseMultiPayload(v158))
        {
          case 0u:
            v160 = type metadata accessor for URL(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v160 - 8) + 32))(v157, v158, v160);
            v161 = v157;
            v162 = v159;
            v163 = 0;
            goto LABEL_97;
          case 1u:
            v164 = type metadata accessor for DetailCondition(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v164 - 8) + 32))(v157, v158, v164);
            v165 = (int *)type metadata accessor for ConditionDetailViewState(0);
            v166 = v165[5];
            v167 = (char *)v157 + v166;
            v168 = (char *)v158 + v166;
            v169 = type metadata accessor for Location(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v169 - 8) + 32))(v167, v168, v169);
            v170 = v165[6];
            v171 = (char *)v157 + v170;
            v172 = (char *)v158 + v170;
            v173 = type metadata accessor for Date(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v172, 1, v173))
            {
              v174 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
              memcpy(v171, v172, *(_QWORD *)(*(_QWORD *)(v174 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v173 - 8) + 32))(v171, v172, v173);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v171, 0, 1, v173);
            }
            v223 = v165[7];
            v224 = (char *)v157 + v223;
            v225 = (char *)v158 + v223;
            v226 = *((_OWORD *)v225 + 1);
            *(_OWORD *)v224 = *(_OWORD *)v225;
            *((_OWORD *)v224 + 1) = v226;
            v224[32] = v225[32];
            v267 = v165;
            v227 = v165[8];
            v228 = (_OWORD *)((char *)v157 + v227);
            v229 = (_OWORD *)((char *)v158 + v227);
            v230 = (int *)type metadata accessor for DetailChartSelection(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v229, 1, (uint64_t)v230))
            {
              v231 = sub_1000BA294(&qword_100BD0B58);
              memcpy(v228, v229, *(_QWORD *)(*(_QWORD *)(v231 - 8) + 64));
            }
            else
            {
              *v228 = *v229;
              v273 = v159;
              v257 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v173 - 8) + 32);
              v257((char *)v228 + v230[5], (char *)v229 + v230[5], v173);
              v257((char *)v228 + v230[6], (char *)v229 + v230[6], v173);
              v257((char *)v228 + v230[7], (char *)v229 + v230[7], v173);
              v159 = v273;
              *(_QWORD *)((char *)v228 + v230[8]) = *(_QWORD *)((char *)v229 + v230[8]);
              v258 = v230[9];
              v259 = (char *)v228 + v258;
              v260 = (char *)v229 + v258;
              v259[8] = v260[8];
              *(_QWORD *)v259 = *(_QWORD *)v260;
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v228, 0, 1, (uint64_t)v230);
            }
            *((_BYTE *)v157 + v267[9]) = *((_BYTE *)v158 + v267[9]);
            v161 = v157;
            v162 = v159;
            v163 = 1;
            goto LABEL_97;
          case 2u:
            v175 = type metadata accessor for Location(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v175 - 8) + 32))(v157, v158, v175);
            v176 = type metadata accessor for AirQualityDetailViewState(0);
            *((_BYTE *)v157 + *(int *)(v176 + 20)) = *((_BYTE *)v158 + *(int *)(v176 + 20));
            v177 = *(int *)(v176 + 24);
            v178 = (char *)v157 + v177;
            v179 = (char *)v158 + v177;
            v178[32] = v179[32];
            v180 = *((_OWORD *)v179 + 1);
            *(_OWORD *)v178 = *(_OWORD *)v179;
            *((_OWORD *)v178 + 1) = v180;
            v161 = v157;
            v162 = v159;
            v163 = 2;
            goto LABEL_97;
          case 3u:
            v181 = type metadata accessor for Location(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v181 - 8) + 32))(v157, v158, v181);
            v182 = *(int *)(type metadata accessor for NextHourPrecipitationDetailViewState(0) + 20);
            v183 = (char *)v157 + v182;
            v184 = (char *)v158 + v182;
            v185 = *((_OWORD *)v184 + 1);
            *(_OWORD *)v183 = *(_OWORD *)v184;
            *((_OWORD *)v183 + 1) = v185;
            v183[32] = v184[32];
            v161 = v157;
            v162 = v159;
            v163 = 3;
            goto LABEL_97;
          case 4u:
            v186 = type metadata accessor for Location(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v186 - 8) + 32))(v157, v158, v186);
            v187 = type metadata accessor for SunriseSunsetDetailViewState(0);
            v188 = *(int *)(v187 + 20);
            v189 = (char *)v157 + v188;
            v190 = (char *)v158 + v188;
            v191 = *((_OWORD *)v190 + 1);
            *(_OWORD *)v189 = *(_OWORD *)v190;
            *((_OWORD *)v189 + 1) = v191;
            v189[32] = v190[32];
            *((_BYTE *)v157 + *(int *)(v187 + 24)) = *((_BYTE *)v158 + *(int *)(v187 + 24));
            v161 = v157;
            v162 = v159;
            v163 = 4;
            goto LABEL_97;
          case 5u:
            v192 = type metadata accessor for Location(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v192 - 8) + 32))(v157, v158, v192);
            v193 = (int *)type metadata accessor for MoonDetailViewState(0);
            v194 = v193[5];
            v195 = (char *)v157 + v194;
            v196 = (char *)v158 + v194;
            v197 = type metadata accessor for MoonDetailSelectedDate(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v196, 1, v197))
            {
              v198 = sub_1000BA294(&qword_100BC6CB8);
              memcpy(v195, v196, *(_QWORD *)(*(_QWORD *)(v198 - 8) + 64));
            }
            else
            {
              v268 = swift_getEnumCaseMultiPayload(v196);
              v232 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v232 - 8) + 32))(v195, v196, v232);
              swift_storeEnumTagMultiPayload(v195, v197, v268);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v195, 0, 1, v197);
            }
            v233 = v193[6];
            v234 = (char *)v157 + v233;
            v235 = (char *)v158 + v233;
            v236 = type metadata accessor for Date(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v235, 1, v236))
            {
              v237 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
              memcpy(v234, v235, *(_QWORD *)(*(_QWORD *)(v237 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v236 - 8) + 32))(v234, v235, v236);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v234, 0, 1, v236);
            }
            v261 = v193[7];
            v262 = (char *)v157 + v261;
            v263 = (char *)v158 + v261;
            v264 = *((_OWORD *)v263 + 1);
            *(_OWORD *)v262 = *(_OWORD *)v263;
            *((_OWORD *)v262 + 1) = v264;
            v262[32] = v263[32];
            *((_BYTE *)v157 + v193[8]) = *((_BYTE *)v158 + v193[8]);
            v161 = v157;
            v162 = v159;
            v163 = 5;
            goto LABEL_97;
          case 6u:
            v199 = v158[1];
            *v157 = *v158;
            v157[1] = v199;
            v200 = (int *)type metadata accessor for NewsArticle(0);
            v201 = v200[6];
            v202 = (char *)v157 + v201;
            v203 = (char *)v158 + v201;
            v204 = type metadata accessor for URL(0);
            v272 = v159;
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v203, 1, v204))
            {
              v205 = sub_1000BA294(&qword_100BD4280);
              memcpy(v202, v203, *(_QWORD *)(*(_QWORD *)(v205 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v204 - 8) + 32))(v202, v203, v204);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v202, 0, 1, v204);
            }
            v238 = v200[7];
            v239 = (char *)v157 + v238;
            v240 = (char *)v158 + v238;
            v241 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v241 - 8) + 32))(v239, v240, v241);
            v242 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v204 - 8) + 32);
            v242((char *)v157 + v200[8], (char *)v158 + v200[8], v204);
            v243 = v200[9];
            v244 = (_OWORD *)((char *)v157 + v243);
            v245 = (char *)v158 + v243;
            v246 = *(_OWORD *)((char *)v158 + v243 + 16);
            *v244 = *(_OWORD *)((char *)v158 + v243);
            v244[1] = v246;
            v247 = *(int *)(type metadata accessor for NewsChannel(0) + 24);
            v248 = (char *)v244 + v247;
            v249 = &v245[v247];
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v249, 1, v204))
            {
              v250 = sub_1000BA294(&qword_100BD4280);
              memcpy(v248, v249, *(_QWORD *)(*(_QWORD *)(v250 - 8) + 64));
            }
            else
            {
              v242(v248, v249, v204);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v248, 0, 1, v204);
            }
            *(_QWORD *)((char *)v157 + v200[10]) = *(_QWORD *)((char *)v158 + v200[10]);
            *(_QWORD *)((char *)v157 + v200[11]) = *(_QWORD *)((char *)v158 + v200[11]);
            *(_QWORD *)((char *)v157 + v200[12]) = *(_QWORD *)((char *)v158 + v200[12]);
            v161 = v157;
            v162 = v272;
            v163 = 6;
            goto LABEL_97;
          case 7u:
            v206 = type metadata accessor for Location(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v206 - 8) + 32))(v157, v158, v206);
            v207 = (int *)type metadata accessor for AveragesDetailViewState(0);
            *((_BYTE *)v157 + v207[5]) = *((_BYTE *)v158 + v207[5]);
            v208 = v207[6];
            v209 = (_QWORD *)((char *)v157 + v208);
            v210 = (_QWORD *)((char *)v158 + v208);
            v211 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v210, 1, (uint64_t)v211))
            {
              v212 = sub_1000BA294(&qword_100BCB0D0);
              memcpy(v209, v210, *(_QWORD *)(*(_QWORD *)(v212 - 8) + 64));
            }
            else
            {
              *v209 = *v210;
              v251 = v211[5];
              v266 = (char *)v210 + v251;
              v269 = (char *)v209 + v251;
              v252 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v252 - 8) + 32))(v269, v266, v252);
              *(_QWORD *)((char *)v209 + v211[6]) = *(_QWORD *)((char *)v210 + v211[6]);
              *(_QWORD *)((char *)v209 + v211[7]) = *(_QWORD *)((char *)v210 + v211[7]);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v209, 0, 1, (uint64_t)v211);
            }
            v253 = v207[7];
            v254 = (char *)v157 + v253;
            v255 = (char *)v158 + v253;
            v256 = *((_OWORD *)v255 + 1);
            *(_OWORD *)v254 = *(_OWORD *)v255;
            *((_OWORD *)v254 + 1) = v256;
            v254[32] = v255[32];
            v161 = v157;
            v162 = v159;
            v163 = 7;
            goto LABEL_97;
          case 8u:
            v213 = type metadata accessor for Location(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v213 - 8) + 32))(v157, v158, v213);
            v214 = type metadata accessor for HomeAndWorkRefinementViewState(0);
            v215 = *(int *)(v214 + 20);
            v216 = (char *)v157 + v215;
            v217 = (char *)v158 + v215;
            v218 = type metadata accessor for LocationOfInterest(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v218 - 8) + 32))(v216, v217, v218);
            v219 = *(int *)(v214 + 24);
            v220 = (char *)v157 + v219;
            v221 = (char *)v158 + v219;
            v222 = *((_OWORD *)v221 + 1);
            *(_OWORD *)v220 = *(_OWORD *)v221;
            *((_OWORD *)v220 + 1) = v222;
            v220[32] = v221[32];
            v161 = v157;
            v162 = v159;
            v163 = 8;
LABEL_97:
            swift_storeEnumTagMultiPayload(v161, v162, v163);
            break;
          default:
            memcpy(v157, v158, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
            break;
        }
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v14);
        goto LABEL_99;
      }
      v18 = type metadata accessor for Location(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a1, a2, v18);
      v19 = a1;
      v20 = v16;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    goto LABEL_65;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = type metadata accessor for PreviewLocation(0);
    v8 = swift_getEnumCaseMultiPayload(a2);
    if (v8 == 2)
    {
      *a1 = *a2;
      *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
      *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
      v22 = type metadata accessor for SearchLocation(0);
      v23 = *(int *)(v22 + 32);
      v24 = (char *)a1 + v23;
      v25 = (char *)a2 + v23;
      v26 = type metadata accessor for Location(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v25, 1, v26))
      {
        v27 = sub_1000BA294(&qword_100BC35F8);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v24, 0, 1, v26);
      }
      v36 = *(int *)(v22 + 36);
      v37 = (char *)a1 + v36;
      v38 = (char *)a2 + v36;
      *(_OWORD *)v37 = *(_OWORD *)v38;
      v37[16] = v38[16];
      v10 = a1;
      v11 = v7;
      v12 = 2;
    }
    else if (v8 == 1)
    {
      v28 = type metadata accessor for LocationOfInterest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(a1, a2, v28);
      v10 = a1;
      v11 = v7;
      v12 = 1;
    }
    else
    {
      if (v8)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
LABEL_28:
        v39 = *(int *)(type metadata accessor for LocationPreviewViewState(0) + 20);
        v40 = (_OWORD *)((char *)a1 + v39);
        v41 = (_OWORD *)((char *)a2 + v39);
        v42 = type metadata accessor for LocationPreviewModalViewState(0);
        switch(swift_getEnumCaseMultiPayload(v41))
        {
          case 0u:
            v43 = type metadata accessor for URL(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v40, v41, v43);
            v44 = v40;
            v45 = v42;
            v46 = 0;
            goto LABEL_60;
          case 1u:
            v47 = type metadata accessor for DetailCondition(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v40, v41, v47);
            v48 = (int *)type metadata accessor for ConditionDetailViewState(0);
            v49 = v48[5];
            v50 = (char *)v40 + v49;
            v51 = (char *)v41 + v49;
            v52 = type metadata accessor for Location(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v50, v51, v52);
            v53 = v48[6];
            v54 = (char *)v40 + v53;
            v55 = (char *)v41 + v53;
            v56 = type metadata accessor for Date(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v55, 1, v56))
            {
              v57 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
              memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v54, v55, v56);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v54, 0, 1, v56);
            }
            v106 = v48[7];
            v107 = (char *)v40 + v106;
            v108 = (char *)v41 + v106;
            v109 = *((_OWORD *)v108 + 1);
            *(_OWORD *)v107 = *(_OWORD *)v108;
            *((_OWORD *)v107 + 1) = v109;
            v107[32] = v108[32];
            v110 = v48[8];
            v111 = (_OWORD *)((char *)v40 + v110);
            v112 = (_OWORD *)((char *)v41 + v110);
            v113 = (int *)type metadata accessor for DetailChartSelection(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v112, 1, (uint64_t)v113))
            {
              v114 = sub_1000BA294(&qword_100BD0B58);
              memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
            }
            else
            {
              *v111 = *v112;
              v271 = v48;
              v142 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32);
              v142((char *)v111 + v113[5], (char *)v112 + v113[5], v56);
              v142((char *)v111 + v113[6], (char *)v112 + v113[6], v56);
              v142((char *)v111 + v113[7], (char *)v112 + v113[7], v56);
              v48 = v271;
              *(_QWORD *)((char *)v111 + v113[8]) = *(_QWORD *)((char *)v112 + v113[8]);
              v143 = v113[9];
              v144 = (char *)v111 + v143;
              v145 = (char *)v112 + v143;
              v144[8] = v145[8];
              *(_QWORD *)v144 = *(_QWORD *)v145;
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v111, 0, 1, (uint64_t)v113);
            }
            *((_BYTE *)v40 + v48[9]) = *((_BYTE *)v41 + v48[9]);
            v44 = v40;
            v45 = v42;
            v46 = 1;
            goto LABEL_60;
          case 2u:
            v58 = type metadata accessor for Location(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v58 - 8) + 32))(v40, v41, v58);
            v59 = type metadata accessor for AirQualityDetailViewState(0);
            *((_BYTE *)v40 + *(int *)(v59 + 20)) = *((_BYTE *)v41 + *(int *)(v59 + 20));
            v60 = *(int *)(v59 + 24);
            v61 = (char *)v40 + v60;
            v62 = (char *)v41 + v60;
            v61[32] = v62[32];
            v63 = *((_OWORD *)v62 + 1);
            *(_OWORD *)v61 = *(_OWORD *)v62;
            *((_OWORD *)v61 + 1) = v63;
            v44 = v40;
            v45 = v42;
            v46 = 2;
            goto LABEL_60;
          case 3u:
            v64 = type metadata accessor for Location(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v64 - 8) + 32))(v40, v41, v64);
            v65 = *(int *)(type metadata accessor for NextHourPrecipitationDetailViewState(0) + 20);
            v66 = (char *)v40 + v65;
            v67 = (char *)v41 + v65;
            v68 = *((_OWORD *)v67 + 1);
            *(_OWORD *)v66 = *(_OWORD *)v67;
            *((_OWORD *)v66 + 1) = v68;
            v66[32] = v67[32];
            v44 = v40;
            v45 = v42;
            v46 = 3;
            goto LABEL_60;
          case 4u:
            v69 = type metadata accessor for Location(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v40, v41, v69);
            v70 = type metadata accessor for SunriseSunsetDetailViewState(0);
            v71 = *(int *)(v70 + 20);
            v72 = (char *)v40 + v71;
            v73 = (char *)v41 + v71;
            v74 = *((_OWORD *)v73 + 1);
            *(_OWORD *)v72 = *(_OWORD *)v73;
            *((_OWORD *)v72 + 1) = v74;
            v72[32] = v73[32];
            *((_BYTE *)v40 + *(int *)(v70 + 24)) = *((_BYTE *)v41 + *(int *)(v70 + 24));
            v44 = v40;
            v45 = v42;
            v46 = 4;
            goto LABEL_60;
          case 5u:
            v75 = type metadata accessor for Location(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v40, v41, v75);
            v76 = (int *)type metadata accessor for MoonDetailViewState(0);
            v77 = v76[5];
            v78 = (char *)v40 + v77;
            v79 = (char *)v41 + v77;
            v80 = type metadata accessor for MoonDetailSelectedDate(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v79, 1, v80))
            {
              v81 = sub_1000BA294(&qword_100BC6CB8);
              memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
            }
            else
            {
              v115 = swift_getEnumCaseMultiPayload(v79);
              v116 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v116 - 8) + 32))(v78, v79, v116);
              swift_storeEnumTagMultiPayload(v78, v80, v115);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v78, 0, 1, v80);
            }
            v117 = v76[6];
            v118 = (char *)v40 + v117;
            v119 = (char *)v41 + v117;
            v120 = type metadata accessor for Date(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v119, 1, v120))
            {
              v121 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
              memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v120 - 8) + 32))(v118, v119, v120);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v118, 0, 1, v120);
            }
            v146 = v76[7];
            v147 = (char *)v40 + v146;
            v148 = (char *)v41 + v146;
            v149 = *((_OWORD *)v148 + 1);
            *(_OWORD *)v147 = *(_OWORD *)v148;
            *((_OWORD *)v147 + 1) = v149;
            v147[32] = v148[32];
            *((_BYTE *)v40 + v76[8]) = *((_BYTE *)v41 + v76[8]);
            v44 = v40;
            v45 = v42;
            v46 = 5;
            goto LABEL_60;
          case 6u:
            v82 = v41[1];
            *v40 = *v41;
            v40[1] = v82;
            v83 = (int *)type metadata accessor for NewsArticle(0);
            v84 = v83[6];
            v85 = (char *)v40 + v84;
            v86 = (char *)v41 + v84;
            v87 = type metadata accessor for URL(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v86, 1, v87))
            {
              v88 = sub_1000BA294(&qword_100BD4280);
              memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 32))(v85, v86, v87);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v85, 0, 1, v87);
            }
            v122 = v83[7];
            v123 = (char *)v40 + v122;
            v124 = (char *)v41 + v122;
            v125 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v125 - 8) + 32))(v123, v124, v125);
            v126 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 32);
            v126((char *)v40 + v83[8], (char *)v41 + v83[8], v87);
            v127 = v83[9];
            v128 = (_OWORD *)((char *)v40 + v127);
            v129 = (char *)v41 + v127;
            v130 = *(_OWORD *)((char *)v41 + v127 + 16);
            *v128 = *(_OWORD *)((char *)v41 + v127);
            v128[1] = v130;
            v131 = *(int *)(type metadata accessor for NewsChannel(0) + 24);
            v132 = (char *)v128 + v131;
            v133 = &v129[v131];
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v133, 1, v87))
            {
              v134 = sub_1000BA294(&qword_100BD4280);
              memcpy(v132, v133, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
            }
            else
            {
              v126(v132, v133, v87);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v132, 0, 1, v87);
            }
            *(_QWORD *)((char *)v40 + v83[10]) = *(_QWORD *)((char *)v41 + v83[10]);
            *(_QWORD *)((char *)v40 + v83[11]) = *(_QWORD *)((char *)v41 + v83[11]);
            *(_QWORD *)((char *)v40 + v83[12]) = *(_QWORD *)((char *)v41 + v83[12]);
            v44 = v40;
            v45 = v42;
            v46 = 6;
            goto LABEL_60;
          case 7u:
            v89 = type metadata accessor for Location(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v89 - 8) + 32))(v40, v41, v89);
            v90 = (int *)type metadata accessor for AveragesDetailViewState(0);
            *((_BYTE *)v40 + v90[5]) = *((_BYTE *)v41 + v90[5]);
            v91 = v90[6];
            v92 = (_QWORD *)((char *)v40 + v91);
            v93 = (_QWORD *)((char *)v41 + v91);
            v94 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v93, 1, (uint64_t)v94))
            {
              v95 = sub_1000BA294(&qword_100BCB0D0);
              memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
            }
            else
            {
              *v92 = *v93;
              v135 = v94[5];
              v136 = (char *)v92 + v135;
              v270 = (char *)v93 + v135;
              v137 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v137 - 8) + 32))(v136, v270, v137);
              *(_QWORD *)((char *)v92 + v94[6]) = *(_QWORD *)((char *)v93 + v94[6]);
              *(_QWORD *)((char *)v92 + v94[7]) = *(_QWORD *)((char *)v93 + v94[7]);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v92, 0, 1, (uint64_t)v94);
            }
            v138 = v90[7];
            v139 = (char *)v40 + v138;
            v140 = (char *)v41 + v138;
            v141 = *((_OWORD *)v140 + 1);
            *(_OWORD *)v139 = *(_OWORD *)v140;
            *((_OWORD *)v139 + 1) = v141;
            v139[32] = v140[32];
            v44 = v40;
            v45 = v42;
            v46 = 7;
            goto LABEL_60;
          case 8u:
            v96 = type metadata accessor for Location(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v96 - 8) + 32))(v40, v41, v96);
            v97 = type metadata accessor for HomeAndWorkRefinementViewState(0);
            v98 = *(int *)(v97 + 20);
            v99 = (char *)v40 + v98;
            v100 = (char *)v41 + v98;
            v101 = type metadata accessor for LocationOfInterest(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 32))(v99, v100, v101);
            v102 = *(int *)(v97 + 24);
            v103 = (char *)v40 + v102;
            v104 = (char *)v41 + v102;
            v105 = *((_OWORD *)v104 + 1);
            *(_OWORD *)v103 = *(_OWORD *)v104;
            *((_OWORD *)v103 + 1) = v105;
            v103[32] = v104[32];
            v44 = v40;
            v45 = v42;
            v46 = 8;
LABEL_60:
            swift_storeEnumTagMultiPayload(v44, v45, v46);
            break;
          default:
            memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
            break;
        }
        v150 = a1;
        v151 = a3;
        v152 = 0;
        goto LABEL_100;
      }
      v9 = type metadata accessor for Location(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = a1;
      v11 = v7;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
    goto LABEL_28;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

void sub_10072D50C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;

  sub_1000986AC();
  a19 = v21;
  a20 = v22;
  v24 = v23;
  v25 = sub_1000B3C04();
  sub_1000B42B0();
  __chkstk_darwin(v26);
  sub_10009883C();
  v29 = v27 - v28;
  __chkstk_darwin(v30);
  v32 = (char *)&a9 - v31;
  sub_1000BA294(&qword_100C01D78);
  sub_1000B42B0();
  __chkstk_darwin(v33);
  sub_10009E540();
  v35 = v20 + *(int *)(v34 + 48);
  v36 = sub_100079FDC();
  sub_1000ED244(v36, v37);
  sub_1000ED244(v24, v35);
  sub_10007802C(v20, (uint64_t)v32, type metadata accessor for LocationPreviewViewState);
  sub_10007802C(v35, v29, type metadata accessor for LocationPreviewViewState);
  sub_10063001C((uint64_t)v32, v29);
  if ((v38 & 1) != 0)
    sub_100381D74((uint64_t)&v32[*(int *)(v25 + 20)], v29 + *(int *)(v25 + 20));
  sub_1000215BC(v29, type metadata accessor for LocationPreviewViewState);
  sub_1000215BC((uint64_t)v32, type metadata accessor for LocationPreviewViewState);
  sub_100098640();
}

uint64_t sub_10072D62C(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEF77656976657250)
  {
    swift_bridgeObjectRelease(0xEF77656976657250);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEF77656976657250, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

uint64_t sub_10072D6D4()
{
  return 0x6E6F697461636F6CLL;
}

void sub_10072D6F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_100099310();
  v19 = sub_1000BA294(&qword_100C01EB8);
  v20 = *(_QWORD *)(v19 - 8);
  sub_10009D98C();
  __chkstk_darwin(v5);
  sub_100098694();
  v18 = type metadata accessor for LocationPreviewViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  v7 = sub_10008909C();
  type metadata accessor for ModalViewState.MapViewModal(v7);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100094EC4();
  v9 = sub_1000BA294(&qword_100C01EC0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_100079F58();
  sub_1000FC6D8();
  v11 = sub_100731E7C();
  sub_10009C19C((uint64_t)&type metadata for ModalViewState.MapViewModal.CodingKeys, v12, v11);
  sub_100080C0C(v1, v3, type metadata accessor for ModalViewState.MapViewModal);
  v13 = sub_100079FDC();
  sub_10007802C(v13, v14, type metadata accessor for LocationPreviewViewState);
  sub_100731EB8();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for ModalViewState.MapViewModal.LocationPreviewCodingKeys, v15, v9, &type metadata for ModalViewState.MapViewModal.LocationPreviewCodingKeys);
  sub_100086DA4(&qword_100C01EC8, type metadata accessor for LocationPreviewViewState, (uint64_t)&unk_100998344);
  v16 = sub_1000F42BC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v16, v17, v19, v18);
  sub_1000BE774(v2, *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8));
  sub_1000215BC(v4, type metadata accessor for LocationPreviewViewState);
  sub_10007A170(v0, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
  sub_1000B44B0();
}

void sub_10072D880()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  sub_100099310();
  v4 = v3;
  v36 = v5;
  v40 = type metadata accessor for ModalViewState.MapViewModal(0);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v38 = v7;
  v37 = sub_1000BA294(&qword_100C01E90);
  v8 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  sub_100079F58();
  v9 = sub_1000BA294(&qword_100C01E98);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_100098694();
  v11 = v4[3];
  v12 = v4[4];
  sub_1000DB418(v4, v11);
  v13 = sub_100731E7C();
  v14 = v11;
  v15 = v4;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ModalViewState.MapViewModal.CodingKeys, &type metadata for ModalViewState.MapViewModal.CodingKeys, v13, v14, v12);
  if (!v1)
  {
    v35 = v8;
    v16 = KeyedDecodingContainer.allKeys.getter(v9);
    v17 = *(_QWORD *)(v16 + 16);
    v18 = v9;
    if (v17)
    {
      v19 = sub_10055FF58(1, v17, v16, v16 + 32, 0, (2 * v17) | 1);
      v21 = v20;
      v23 = v22;
      swift_bridgeObjectRelease();
      if (v21 == v23 >> 1)
      {
        v24 = v19;
        sub_100731EB8();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for ModalViewState.MapViewModal.LocationPreviewCodingKeys, v25, v18, &type metadata for ModalViewState.MapViewModal.LocationPreviewCodingKeys);
        v33 = type metadata accessor for LocationPreviewViewState(0);
        sub_100086DA4(&qword_100C01EB0, type metadata accessor for LocationPreviewViewState, (uint64_t)&unk_10099836C);
        sub_1000C6570(v33, v34, v37, v33);
        v15 = v4;
        sub_10007A170(v0, *(uint64_t (**)(uint64_t, uint64_t))(v35 + 8));
        swift_unknownObjectRelease(v24);
        sub_1000B3274(v2, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
        sub_10007802C(v38, v36, type metadata accessor for ModalViewState.MapViewModal);
        goto LABEL_8;
      }
      v39 = v19;
    }
    else
    {
      v39 = v16;
    }
    v26 = type metadata accessor for DecodingError(0);
    sub_10009D46C(v26, (uint64_t)&protocol witness table for DecodingError);
    v28 = v27;
    sub_1000BA294(&qword_100BC6CF8);
    *v28 = v40;
    v29 = KeyedDecodingContainer.codingPath.getter(v18);
    sub_10003BD2C(v29, v30, 0x80000001009F2600);
    v31 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v28, enum case for DecodingError.typeMismatch(_:), v26);
    swift_willThrow(v31, v32);
    v15 = v4;
    swift_unknownObjectRelease(v39);
    sub_1000B3274(v2, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
  }
LABEL_8:
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v15);
  sub_1000B44B0();
}

void sub_10072DB88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40[16];
  uint64_t v41;
  uint64_t v42;

  sub_1000986AC();
  v41 = v1;
  v42 = v2;
  v40[4] = type metadata accessor for HomeAndWorkRefinementViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  v5 = sub_1000BF254(v4, v40[0]);
  v6 = type metadata accessor for URL(v5);
  v40[12] = *(_QWORD *)(v6 - 8);
  v40[13] = v6;
  sub_10009D98C();
  __chkstk_darwin(v7);
  sub_1000D0278(v8, v40[0]);
  type metadata accessor for AveragesDetailViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_1000BD964(v10, v40[0]);
  type metadata accessor for MoonDetailViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_10009DA80(v12, v40[0]);
  v40[1] = type metadata accessor for SunriseSunsetDetailViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  v15 = sub_100095214(v14, v40[0]);
  v40[0] = type metadata accessor for NextHourPrecipitationDetailViewState(v15);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  v40[9] = (uint64_t)v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10009876C();
  v40[2] = type metadata accessor for AirQualityDetailViewState(v18);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  v40[5] = (uint64_t)v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10009876C();
  type metadata accessor for ConditionDetailViewState(v21);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  v40[3] = (uint64_t)v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10009876C();
  v25 = type metadata accessor for ModalViewState.LocationDetailModal(v24);
  sub_1000B42B0();
  __chkstk_darwin(v26);
  sub_1000986FC();
  v40[15] = v27;
  __chkstk_darwin(v28);
  sub_10008616C();
  v30 = __chkstk_darwin(v29);
  v31 = __chkstk_darwin(v30);
  __chkstk_darwin(v31);
  sub_1000860D0();
  v40[14] = v32;
  __chkstk_darwin(v33);
  sub_1000B2F10();
  __chkstk_darwin(v34);
  sub_10009DF40();
  __chkstk_darwin(v35);
  sub_1000BA294(&qword_100C01D80);
  sub_1000B42B0();
  __chkstk_darwin(v36);
  sub_100079FBC();
  v38 = v0 + *(int *)(v37 + 48);
  sub_1000ED244(v41, v0);
  sub_1000ED244(v42, v38);
  v39 = (char *)sub_10072DE00 + 4 * byte_1009C3676[swift_getEnumCaseMultiPayload(v0, v25)];
  __asm { BR              X10 }
}

void sub_10072DE00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100080C0C(v1, v0, type metadata accessor for ModalViewState.LocationDetailModal);
  if (sub_1000E7404())
  {
    sub_1000215BC(v0, type metadata accessor for ConditionDetailViewState);
    sub_100021A14(v1, &qword_100C01D80);
  }
  else
  {
    v4 = *(_QWORD *)(v3 - 200);
    sub_10007802C(v2, v4, type metadata accessor for ConditionDetailViewState);
    sub_1003752A4();
    sub_100079F9C(v4);
    sub_1000215BC(v0, type metadata accessor for ConditionDetailViewState);
    sub_1000878B4(v5, type metadata accessor for ModalViewState.LocationDetailModal);
  }
  sub_100098640();
}

uint64_t sub_10072E2A8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v13;
  unint64_t v15;
  char v16;

  if (a1 == 0x6F697469646E6F63 && a2 == 0xEF6C69617465446ELL)
  {
    v5 = 0xEF6C69617465446ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F697469646E6F63, 0xEF6C69617465446ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x80000001009F0170;
    if (a2 == 0x80000001009F0170)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001009F0170, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD00000000000001BLL && a2 == 0x80000001009F0190)
  {
    v8 = 0x80000001009F0190;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x80000001009F0190, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x80000001009F01B0)
  {
    v9 = 0x80000001009F01B0;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001009F01B0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x617465446E6F6F6DLL && a2 == 0xEA00000000006C69)
  {
    v11 = 0xEA00000000006C69;
    goto LABEL_33;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x617465446E6F6F6DLL, 0xEA00000000006C69, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_33:
    swift_bridgeObjectRelease(v11);
    return 4;
  }
  if (a1 == 0x7365676172657661 && a2 == 0xEE006C6961746544)
  {
    v13 = 0xEE006C6961746544;
    goto LABEL_41;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7365676172657661, 0xEE006C6961746544, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_41:
    swift_bridgeObjectRelease(v13);
    return 5;
  }
  if (a1 == 0x63416F546C6C6163 && a2 == 0xEC0000006E6F6974)
  {
    v15 = 0xEC0000006E6F6974;
    goto LABEL_49;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x63416F546C6C6163, 0xEC0000006E6F6974, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_49:
    swift_bridgeObjectRelease(v15);
    return 6;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x80000001009F01E0)
  {
    swift_bridgeObjectRelease(0x80000001009F01E0);
    return 7;
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000001009F01E0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_10072E62C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10072E66C + 4 * byte_1009C367E[a1]))(0x6F697469646E6F63, 0xEF6C69617465446ELL);
}

unint64_t sub_10072E66C()
{
  return 0xD000000000000010;
}

unint64_t sub_10072E688()
{
  return 0xD00000000000001BLL;
}

void sub_10072E740()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53[17];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  sub_100099310();
  v1 = sub_1000BA294(&qword_100C01E48);
  v69[3] = *(_QWORD *)(v1 - 8);
  v69[4] = v1;
  sub_10009D98C();
  __chkstk_darwin(v2);
  v69[2] = (char *)v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10009876C();
  v68 = type metadata accessor for HomeAndWorkRefinementViewState(v4);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_10009DA80(v6, v53[0]);
  v69[0] = sub_1000BA294(&qword_100C01E50);
  v66 = *(_QWORD *)(v69[0] - 8);
  sub_10009D98C();
  __chkstk_darwin(v7);
  v65 = (char *)v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10009876C();
  v67 = type metadata accessor for URL(v9);
  v64 = *(_QWORD *)(v67 - 8);
  sub_10009D98C();
  __chkstk_darwin(v10);
  sub_100088FDC();
  v63 = v11;
  v12 = sub_1000BA294(&qword_100C01E58);
  v61 = *(_QWORD *)(v12 - 8);
  v62 = v12;
  sub_10009D98C();
  __chkstk_darwin(v13);
  sub_100088FDC();
  v60 = v14;
  v15 = sub_10009876C();
  v57 = type metadata accessor for AveragesDetailViewState(v15);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  sub_100088FDC();
  v59 = v17;
  v58 = sub_1000BA294(&qword_100C01E60);
  v56 = *(_QWORD *)(v58 - 8);
  sub_10009D98C();
  __chkstk_darwin(v18);
  sub_100088FDC();
  v55 = v19;
  v20 = sub_10009876C();
  v53[16] = type metadata accessor for MoonDetailViewState(v20);
  sub_1000B42B0();
  __chkstk_darwin(v21);
  sub_100088FDC();
  sub_10009511C(v22);
  v54 = sub_1000BA294(&qword_100C01E68);
  v53[15] = *(_QWORD *)(v54 - 8);
  sub_10009D98C();
  __chkstk_darwin(v23);
  sub_100088FDC();
  v53[14] = v24;
  v25 = sub_10009876C();
  v53[12] = type metadata accessor for SunriseSunsetDetailViewState(v25);
  sub_1000B42B0();
  __chkstk_darwin(v26);
  sub_100088FDC();
  sub_10009511C(v27);
  v28 = sub_1000BA294(&qword_100C01E70);
  sub_1000B43A4(v28, (uint64_t)&v73);
  v53[10] = v29;
  sub_10009D98C();
  __chkstk_darwin(v30);
  sub_100088FDC();
  v53[9] = v31;
  v32 = sub_10009876C();
  v53[7] = type metadata accessor for NextHourPrecipitationDetailViewState(v32);
  sub_1000B42B0();
  __chkstk_darwin(v33);
  sub_100088FDC();
  sub_10009511C(v34);
  v35 = sub_1000BA294(&qword_100C01E78);
  sub_1000B43A4(v35, (uint64_t)&v70);
  v53[5] = v36;
  sub_10009D98C();
  __chkstk_darwin(v37);
  sub_100088FDC();
  v53[4] = v38;
  v39 = sub_10009876C();
  v53[2] = type metadata accessor for AirQualityDetailViewState(v39);
  sub_1000B42B0();
  __chkstk_darwin(v40);
  sub_100088FDC();
  sub_10009511C(v41);
  v42 = sub_1000BA294(&qword_100C01E80);
  sub_1000B43A4(v42, (uint64_t)v69);
  v53[0] = v43;
  sub_10009D98C();
  __chkstk_darwin(v44);
  v45 = sub_1000BE9F0();
  type metadata accessor for ConditionDetailViewState(v45);
  sub_1000B42B0();
  __chkstk_darwin(v46);
  v47 = sub_10008909C();
  type metadata accessor for ModalViewState.LocationDetailModal(v47);
  sub_1000B42B0();
  __chkstk_darwin(v48);
  sub_100098694();
  v71 = sub_1000BA294(&qword_100C01E88);
  v70 = *(_QWORD *)(v71 - 8);
  sub_10009D98C();
  __chkstk_darwin(v49);
  sub_100094EC4();
  sub_1000FC6D8();
  v50 = sub_100731C60();
  sub_10009C19C((uint64_t)&type metadata for ModalViewState.LocationDetailModal.CodingKeys, v51, v50);
  sub_100080C0C(v72, v0, type metadata accessor for ModalViewState.LocationDetailModal);
  v52 = (char *)sub_10072EB04 + 4 * byte_1009C3686[swift_getEnumCaseMultiPayload(v0)];
  __asm { BR              X10 }
}

void sub_10072EB04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  sub_1000D1430(v1);
  *(_BYTE *)(v4 - 72) = 0;
  sub_100731E40();
  v6 = *(_QWORD *)(v4 - 120);
  v5 = *(_QWORD *)(v4 - 112);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for ModalViewState.LocationDetailModal.ConditionDetailCodingKeys, v4 - 72, v5, &type metadata for ModalViewState.LocationDetailModal.ConditionDetailCodingKeys);
  sub_1000D0834(&qword_100BDBD10, v7, (uint64_t)&unk_100997AB8);
  v8 = sub_1000F42BC();
  sub_10009D6BC(v8, v9, *(_QWORD *)(v4 - 424), v3, v10);
  sub_1000B3274(v0, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 432) + 8));
  sub_1000215BC(v2, type metadata accessor for ConditionDetailViewState);
  sub_10004A41C();
  v11(v6, v5);
  sub_1000B44B0();
}

void sub_10072EF90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90[14];
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;

  sub_100099310();
  a19 = v26;
  a20 = v27;
  v112 = v21;
  v29 = v28;
  v105 = v30;
  v100 = sub_1000BA294(&qword_100C01DB8);
  v106 = *(_QWORD *)(v100 - 8);
  sub_10009D98C();
  __chkstk_darwin(v31);
  sub_100088FDC();
  v110 = v32;
  v33 = sub_1000BA294(&qword_100C01DC0);
  v98 = *(_QWORD *)(v33 - 8);
  v99 = v33;
  sub_10009D98C();
  __chkstk_darwin(v34);
  sub_10009DA80(v35, v90[0]);
  v36 = sub_1000BA294(&qword_100C01DC8);
  v96 = *(_QWORD *)(v36 - 8);
  v97 = v36;
  sub_10009D98C();
  __chkstk_darwin(v37);
  sub_1000D0278(v38, v90[0]);
  v95 = sub_1000BA294(&qword_100C01DD0);
  v94 = *(_QWORD *)(v95 - 8);
  sub_10009D98C();
  __chkstk_darwin(v39);
  sub_1000BD964(v40, v90[0]);
  v41 = sub_1000BA294(&qword_100C01DD8);
  sub_1000B43A4(v41, (uint64_t)&a17);
  v93 = v42;
  sub_10009D98C();
  __chkstk_darwin(v43);
  v104 = (char *)v90 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_1000BA294(&qword_100C01DE0);
  sub_1000B43A4(v45, (uint64_t)&a15);
  v92 = v46;
  sub_10009D98C();
  __chkstk_darwin(v47);
  sub_100088FDC();
  v103 = v48;
  v91 = sub_1000BA294(&qword_100C01DE8);
  v90[13] = *(_QWORD *)(v91 - 8);
  sub_10009D98C();
  __chkstk_darwin(v49);
  v102 = (char *)v90 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_1000BA294(&qword_100C01DF0);
  sub_1000B43A4(v51, (uint64_t)&a11);
  v90[11] = v52;
  sub_10009D98C();
  __chkstk_darwin(v53);
  sub_100088FDC();
  v101 = v54;
  v55 = sub_1000BA294(&qword_100C01DF8);
  v108 = *(_QWORD *)(v55 - 8);
  v109 = v55;
  sub_10009D98C();
  __chkstk_darwin(v56);
  v57 = sub_1000BD1E4();
  v107 = type metadata accessor for ModalViewState.LocationDetailModal(v57);
  sub_1000B42B0();
  __chkstk_darwin(v58);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v59);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v60);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v61);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v62);
  sub_10008616C();
  __chkstk_darwin(v63);
  sub_10009DF40();
  __chkstk_darwin(v64);
  sub_1000C0E4C();
  __chkstk_darwin(v65);
  sub_10009E3CC();
  __chkstk_darwin(v66);
  v68 = (char *)v90 - v67;
  v69 = v29[3];
  v70 = v29[4];
  v111 = v29;
  sub_1000DB418(v29, v69);
  v71 = sub_100731C60();
  v72 = v112;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ModalViewState.LocationDetailModal.CodingKeys, &type metadata for ModalViewState.LocationDetailModal.CodingKeys, v71, v69, v70);
  if (!v72)
  {
    v90[2] = v22;
    v90[3] = v24;
    v90[4] = v23;
    v90[5] = v25;
    v90[6] = (uint64_t)v68;
    v73 = v109;
    v74 = v20;
    v75 = KeyedDecodingContainer.allKeys.getter(v109);
    v76 = *(_QWORD *)(v75 + 16);
    if (v76)
    {
      v112 = v20;
      v90[1] = 0;
      v77 = *(unsigned __int8 *)(v75 + 32);
      sub_10055FF58(1, v76, v75, v75 + 32, 0, (2 * v76) | 1);
      v79 = v78;
      v81 = v80;
      swift_bridgeObjectRelease();
      if (v79 == v81 >> 1)
        __asm { BR              X9 }
      v74 = v112;
    }
    v82 = v107;
    v83 = type metadata accessor for DecodingError(0);
    sub_10009D46C(v83, (uint64_t)&protocol witness table for DecodingError);
    v85 = v84;
    sub_1000BA294(&qword_100BC6CF8);
    *v85 = v82;
    v86 = KeyedDecodingContainer.codingPath.getter(v73);
    sub_10003BD2C(v86, v87, 0x80000001009F2600);
    v88 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v83 - 8) + 104))(v85, enum case for DecodingError.typeMismatch(_:), v83);
    swift_willThrow(v88, v89);
    sub_1000C0EBC();
    (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v74, v73);
  }
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v111);
  sub_1000B44B0();
}

uint64_t sub_10072F950@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10072D62C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10072F978(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100731E7C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10072F9A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100731E7C();
  return CodingKey.debugDescription.getter(a1, v2);
}

