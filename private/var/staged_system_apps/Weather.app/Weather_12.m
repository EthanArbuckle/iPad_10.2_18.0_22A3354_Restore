void sub_1006176F8(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for PrecipitationMonthlyAveragesSummaryStringBuilder;
  *(_QWORD *)(a1 + 32) = &off_100B81070;
}

uint64_t sub_100617710@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BF79E8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v30)
  {
    __break(1u);
    goto LABEL_8;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1000BA294(&qword_100BF7A30);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!v28)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v11 = a1[3];
  v12 = a1[4];
  sub_1000DB418(a1, v11);
  v13 = sub_1000BA294(&qword_100BF7A38);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
  if (!v26)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v14 = a1[3];
  v15 = a1[4];
  sub_1000DB418(a1, v14);
  v16 = sub_1000BA294(&qword_100BF7A40);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v16, v16, v14, v15);
  if (!v24)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v17 = a1[3];
  v18 = a1[4];
  sub_1000DB418(a1, v17);
  v19 = sub_1000BA294(&qword_100BC43E8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v19, v19, v17, v18);
  if (v22)
  {
    a2[3] = (uint64_t)&type metadata for TemperatureAveragesDetailViewModelFactory;
    a2[4] = (uint64_t)&off_100B70A78;
    v20 = swift_allocObject(&unk_100B84BA0, 216, 7);
    *a2 = v20;
    sub_10003C800(&v29, v20 + 16);
    sub_10003C800(&v27, v20 + 56);
    sub_10003C800(&v25, v20 + 96);
    sub_10003C800(&v23, v20 + 136);
    return sub_10003C800(&v21, v20 + 176);
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1006178F0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BCF678);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v19)
  {
    __break(1u);
    goto LABEL_6;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1000BA294(&qword_100BD21F0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v11 = result;
  v12 = a1[3];
  v13 = a1[4];
  sub_1000DB418(a1, v12);
  v14 = sub_1000BA294(&qword_100BED4C8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v14, v14, v12, v13);
  if (v17)
  {
    a2[3] = (uint64_t)&type metadata for TemperatureAveragesHeroChartViewModelFactory;
    a2[4] = (uint64_t)&off_100B9D298;
    v15 = swift_allocObject(&unk_100B84B78, 104, 7);
    *a2 = v15;
    sub_10003C800(&v18, v15 + 16);
    *(_QWORD *)(v15 + 56) = v11;
    return sub_10003C800(&v16, v15 + 64);
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_100617A2C(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for TemperatureAveragesSummaryStringBuilder;
  *(_QWORD *)(a1 + 32) = &off_100B8FC78;
}

uint64_t sub_100617A44@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = sub_1000BA294(&qword_100BF7A48);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (v9)
  {
    a2[3] = (uint64_t)&type metadata for TemperatureMonthlyAveragesChartViewModelFactory;
    a2[4] = (uint64_t)&off_100B5FC90;
    v7 = swift_allocObject(&unk_100B84B50, 56, 7);
    *a2 = v7;
    return sub_10003C800(&v8, v7 + 16);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100617AE4(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for TemperatureMonthlyAveragesSummaryStringBuilder;
  *(_QWORD *)(a1 + 32) = &off_100B74F60;
}

uint64_t sub_100617AFC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23[2];
  _QWORD v24[3];
  uint64_t v25;
  _UNKNOWN **v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BC43B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  v6 = v29;
  if (!v29)
  {
    __break(1u);
    goto LABEL_6;
  }
  v8 = v31;
  v7 = v32;
  v9 = v30;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1000BA294(&qword_100BF79B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v12, v12, v10, v11);
  if (!v28)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v13 = *sub_1000DB418(v27, v28);
  v25 = type metadata accessor for AveragesDetailInputFactory();
  v26 = &off_100B706B0;
  v24[0] = v13;
  sub_100043CA8((uint64_t)v24, (uint64_t)v23);
  v14 = swift_allocObject(&unk_100B84AB0, 56, 7);
  sub_10003C800(v23, v14 + 16);
  swift_retain();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v24);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v27);
  v15 = swift_allocObject(&unk_100B84AD8, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_100617E6C;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = a1[3];
  v17 = a1[4];
  sub_1000DB418(a1, v16);
  v18 = sub_1000BA294(&qword_100BF79F0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v18, v18, v16, v17);
  if (v28)
  {
    v19 = *sub_1000DB418(v27, v28);
    v25 = type metadata accessor for AveragesDetailViewModelFactory();
    v26 = &off_100B8FC48;
    v24[0] = v19;
    sub_100043CA8((uint64_t)v24, (uint64_t)v23);
    v20 = swift_allocObject(&unk_100B84B00, 56, 7);
    sub_10003C800(v23, v20 + 16);
    swift_retain();
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v24);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v27);
    v21 = swift_allocObject(&unk_100B84B28, 32, 7);
    *(_QWORD *)(v21 + 16) = sub_100617E98;
    *(_QWORD *)(v21 + 24) = v20;
    v22 = sub_1000BA294(&qword_100BC47A0);
    swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    return sub_100184130(v6, v9, v8, v7, sub_100182F48, 0, sub_1000A22C0, v15, sub_100617EA0, v21);
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_100617D7C(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  sub_1000DB418(a2, a2[3]);
  sub_100397980(a1, a3);
}

void sub_100617DC4(uint64_t a1, _QWORD *a2)
{
  sub_1000DB418(a2, a2[3]);
  sub_10077AA40(a1);
}

uint64_t sub_100617E0C@<X0>(void (*a1)(void)@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;

  a1();
  v3 = type metadata accessor for AveragesDetailViewModel(0);
  return _s7Weather24LocationCompositionStateOwst_0(a2, 0, 1, v3);
}

uint64_t sub_100617E48()
{
  uint64_t v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

void sub_100617E6C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_100617D7C(a1, (_QWORD *)(v2 + 16), a2);
}

uint64_t sub_100617E74()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100617E98(uint64_t a1)
{
  uint64_t v1;

  sub_100617DC4(a1, (_QWORD *)(v1 + 16));
}

uint64_t sub_100617EA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100617E0C(*(void (**)(void))(v1 + 16), a1);
}

uint64_t sub_100617EA8()
{
  uint64_t v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_100617EE0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100617F10()
{
  uint64_t v0;

  sub_1000BC740();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 136));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 176));
  return swift_deallocObject(v0, 216, 7);
}

uint64_t sub_100617F48()
{
  uint64_t v0;

  sub_1000BC740();
  return swift_deallocObject(v0, 136, 7);
}

uint64_t sub_100617F68()
{
  uint64_t v0;

  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

void sub_100617FA8(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v8 = sub_1000BA294(&qword_100BC6430);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v30 - v13;
  v15 = (int *)sub_1000B4BF0();
  v16 = type metadata accessor for ScrubberDateSelection(0);
  sub_10009D34C((uint64_t)v14, v17, v18, v16);
  sub_1001CA2FC((uint64_t)v14, (uint64_t)v11);
  State.init(wrappedValue:)(v11, v8);
  sub_100021A14((uint64_t)v14, &qword_100BC6430);
  v19 = v15[8];
  v20 = type metadata accessor for MoonScrubberStorage(0);
  v21 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v22 = v21 + OBJC_IVAR____TtC7Weather19MoonScrubberStorage_selectedDate;
  v23 = type metadata accessor for MoonDetailSelectedDate(0);
  sub_10009D34C(v22, v24, v25, v23);
  v26 = v21 + OBJC_IVAR____TtC7Weather19MoonScrubberStorage_offset;
  *(_QWORD *)v26 = 0;
  *(_BYTE *)(v26 + 8) = 1;
  *(_QWORD *)((char *)a3 + v19) = v21;
  v27 = sub_1000BA294(&qword_100BC47D8);
  sub_10003D2DC(&qword_100BC47E0, &qword_100BC47D8);
  *a3 = ObservedObject.init(wrappedValue:)(a1, v27, v28);
  a3[1] = v29;
  sub_10003C800(a2, (uint64_t)a3 + v15[6]);
  *(double *)((char *)a3 + v15[7]) = a4;
  sub_10009990C();
}

uint64_t type metadata accessor for MoonScrubberView(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF7AB0;
  if (!qword_100BF7AB0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MoonScrubberView);
  return result;
}

uint64_t *sub_100618174(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t, __n128);
  __n128 v22;
  uint64_t v23;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for ScrubberDateSelection(0);
    swift_retain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v11))
    {
      v12 = sub_1000BA294(&qword_100BC6430);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v14 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v14))
      {
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v9, v10, v14);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v14);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v11);
    }
    v15 = sub_1000BA294(&qword_100BF7A50);
    *(_QWORD *)&v9[*(int *)(v15 + 28)] = *(_QWORD *)&v10[*(int *)(v15 + 28)];
    v16 = a3[6];
    v17 = (char *)v4 + v16;
    v18 = (char *)a2 + v16;
    v19 = *(_OWORD *)((char *)a2 + v16 + 24);
    *(_OWORD *)((char *)v4 + v16 + 24) = v19;
    v20 = v19;
    v21 = **(void (***)(char *, char *, uint64_t, __n128))(v19 - 8);
    v22 = swift_retain();
    v21(v17, v18, v20, v22);
    v23 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)v4 + v23) = *(uint64_t *)((char *)a2 + v23);
  }
  swift_retain();
  return v4;
}

double sub_100618318(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  swift_release();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for ScrubberDateSelection(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v4, 1, v5))
  {
    v6 = type metadata accessor for Date(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v4, 1, v6))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  sub_1000BA294(&qword_100BF7A50);
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + *(int *)(a2 + 24)));
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

_QWORD *sub_1006183CC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for ScrubberDateSelection(0);
  swift_retain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10))
  {
    v11 = sub_1000BA294(&qword_100BC6430);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v12))
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v8, v9, v12);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v12);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
  }
  v13 = sub_1000BA294(&qword_100BF7A50);
  *(_QWORD *)&v8[*(int *)(v13 + 28)] = *(_QWORD *)&v9[*(int *)(v13 + 28)];
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *(_OWORD *)((char *)a2 + v14 + 24);
  *(_OWORD *)((char *)a1 + v14 + 24) = v17;
  v18 = v17;
  v19 = **(void (***)(char *, char *, uint64_t, __n128))(v17 - 8);
  v20 = swift_retain();
  v19(v15, v16, v18, v20);
  v21 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v21) = *(_QWORD *)((char *)a2 + v21);
  swift_retain();
  return a1;
}

_QWORD *sub_100618548(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ScrubberDateSelection(0);
  v10 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v9);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9);
  if (v10)
  {
    if (!v11)
    {
      v12 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v12))
      {
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v7, v8, v12);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v12);
      }
      v17 = (uint64_t)v7;
      v18 = v9;
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (v11)
  {
    sub_1000215BC((uint64_t)v7, type metadata accessor for ScrubberDateSelection);
LABEL_7:
    v13 = *(_QWORD *)(sub_1000BA294(&qword_100BC6430) - 8);
    goto LABEL_8;
  }
  v14 = type metadata accessor for Date(0);
  v15 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v14);
  v16 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v14);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v7, v8, v14);
      v17 = (uint64_t)v7;
      v18 = v14;
LABEL_14:
      _s7Weather24LocationCompositionStateOwst_0(v17, 0, 1, v18);
      goto LABEL_15;
    }
  }
  else
  {
    v21 = *(_QWORD *)(v14 - 8);
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 24))(v7, v8, v14);
      goto LABEL_15;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v14);
  }
  v13 = *(_QWORD *)(v9 - 8);
LABEL_8:
  memcpy(v7, v8, *(_QWORD *)(v13 + 64));
LABEL_15:
  v19 = sub_1000BA294(&qword_100BF7A50);
  *(_QWORD *)&v7[*(int *)(v19 + 28)] = *(_QWORD *)&v8[*(int *)(v19 + 28)];
  swift_retain();
  swift_release();
  sub_100094D04((_QWORD *)((char *)a1 + a3[6]), (_QWORD *)((char *)a2 + a3[6]));
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_100618798(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ScrubberDateSelection(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9))
  {
    v10 = sub_1000BA294(&qword_100BC6430);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v11 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v11))
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v7, v8, v11);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v11);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v9);
  }
  v12 = sub_1000BA294(&qword_100BF7A50);
  *(_QWORD *)&v7[*(int *)(v12 + 28)] = *(_QWORD *)&v8[*(int *)(v12 + 28)];
  v13 = a3[6];
  v14 = a3[7];
  v15 = (char *)a1 + v13;
  v16 = (char *)a2 + v13;
  *((_QWORD *)v15 + 4) = *((_QWORD *)v16 + 4);
  v17 = *((_OWORD *)v16 + 1);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v17;
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  return a1;
}

_QWORD *sub_1006188F0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v27;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_release();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for ScrubberDateSelection(0);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v10);
  v12 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10);
  if (v11)
  {
    if (!v12)
    {
      v13 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v13))
      {
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v8, v9, v13);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v13);
      }
      v18 = (uint64_t)v8;
      v19 = v10;
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (v12)
  {
    sub_1000215BC((uint64_t)v8, type metadata accessor for ScrubberDateSelection);
LABEL_7:
    v14 = *(_QWORD *)(sub_1000BA294(&qword_100BC6430) - 8);
    goto LABEL_8;
  }
  v15 = type metadata accessor for Date(0);
  v16 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v15);
  v17 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v15);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v8, v9, v15);
      v18 = (uint64_t)v8;
      v19 = v15;
LABEL_14:
      _s7Weather24LocationCompositionStateOwst_0(v18, 0, 1, v19);
      goto LABEL_15;
    }
  }
  else
  {
    v27 = *(_QWORD *)(v15 - 8);
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 40))(v8, v9, v15);
      goto LABEL_15;
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v15);
  }
  v14 = *(_QWORD *)(v10 - 8);
LABEL_8:
  memcpy(v8, v9, *(_QWORD *)(v14 + 64));
LABEL_15:
  v20 = sub_1000BA294(&qword_100BF7A50);
  *(_QWORD *)&v8[*(int *)(v20 + 28)] = *(_QWORD *)&v9[*(int *)(v20 + 28)];
  swift_release();
  v21 = a3[6];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)((char *)a1 + v21));
  v24 = *((_OWORD *)v23 + 1);
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *((_OWORD *)v22 + 1) = v24;
  *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
  v25 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v25) = *(_QWORD *)((char *)a2 + v25);
  swift_release();
  return a1;
}

uint64_t sub_100618B30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100618B3C);
}

uint64_t sub_100618B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000BA294(&qword_100BF7A50);
    return _s7Weather24LocationCompositionStateOwet_0(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_100618BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100618BC0);
}

uint64_t sub_100618BC0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1000BA294(&qword_100BF7A50);
    return _s7Weather24LocationCompositionStateOwst_0(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_100618C30(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_1009B7F38;
  sub_100618CC8(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_1009B7F50;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

void sub_100618CC8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BF7AC0)
  {
    v2 = sub_100075EB0(&qword_100BC6430);
    v3 = type metadata accessor for State(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BF7AC0);
  }
}

uint64_t sub_100618D20(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABB230, 1);
}

void sub_100618D30(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t KeyPath;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t OpaqueTypeConformance2;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  int *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  unint64_t v102;

  v2 = v1;
  v78 = a1;
  v77 = sub_1000BA294((uint64_t *)&unk_100C0A510);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100088FDC();
  v99 = v4;
  v5 = sub_10009876C();
  v6 = (int *)type metadata accessor for MoonScrubberView(v5);
  v7 = *(_QWORD *)(*((_QWORD *)v6 - 1) + 64);
  v97 = *((_QWORD *)v6 - 1);
  v98 = v7;
  __chkstk_darwin(v6);
  v96 = (uint64_t)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_1000BA294(&qword_100BC6430);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100088FDC();
  v95 = v10;
  sub_1000BA294(&qword_100BC3800);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100088FDC();
  v94 = v12;
  sub_1000BA294(&qword_100BF7B00);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  sub_100088FDC();
  v93 = v14;
  v15 = sub_10009876C();
  v16 = type metadata accessor for Date(v15);
  v90 = *(_QWORD *)(v16 - 8);
  v91 = v16;
  __chkstk_darwin(v16);
  sub_100088FDC();
  v89 = v17;
  v18 = sub_10009876C();
  v86 = type metadata accessor for TimeZone(v18);
  v85 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  sub_100088FDC();
  v84 = v19;
  v20 = sub_10009876C();
  v21 = (int *)type metadata accessor for MoonScrubberViewModel(v20);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  v24 = (char *)&v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v27 = (char *)&v74 - v26;
  __chkstk_darwin(v28);
  v30 = (char *)&v74 - v29;
  v82 = type metadata accessor for ScrubberViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v31);
  sub_100088FDC();
  v79 = v32;
  v33 = sub_10009876C();
  v80 = type metadata accessor for ScrubberView(v33);
  sub_1000B42B0();
  __chkstk_darwin(v34);
  sub_100088FDC();
  v87 = v35;
  v76 = sub_1000BA294(&qword_100BF7B08);
  v75 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  sub_100088FDC();
  v88 = v36;
  v38 = v6[6];
  v37 = v6[7];
  v81 = v6;
  v39 = *(double *)(v1 + v37);
  sub_100043CA8(v1 + v38, (uint64_t)&v100);
  v83 = *(_QWORD *)(v1 + v6[8]);
  swift_retain();
  swift_retain();
  sub_1000E72A8();
  sub_10009880C();
  v40 = *(_QWORD *)&v30[v21[8]];
  swift_bridgeObjectRetain();
  sub_1000C4CC0();
  sub_1000C2D9C();
  sub_10017BA7C();
  sub_10009880C();
  v41 = *(_QWORD *)&v27[v21[9]];
  swift_bridgeObjectRetain();
  sub_1000215BC((uint64_t)v27, type metadata accessor for MoonScrubberViewModel);
  sub_1000C2D9C();
  sub_10017BA7C();
  sub_10009880C();
  v42 = v85;
  v43 = v84;
  v44 = v86;
  (*(void (**)(uint64_t, char *, uint64_t))(v85 + 16))(v84, &v24[v21[10]], v86);
  sub_1000215BC((uint64_t)v24, type metadata accessor for MoonScrubberViewModel);
  v45 = v79;
  *(_QWORD *)v79 = v40;
  *((_QWORD *)v45 + 1) = v41;
  v46 = (uint64_t)v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(&v45[*(int *)(v82 + 24)], v43, v44);
  sub_1000C2D9C();
  sub_1000E72A8();
  sub_10009880C();
  v47 = &v30[v21[7]];
  v48 = v89;
  (*(void (**)(uint64_t, char *, uint64_t))(v90 + 16))(v89, v47, v91);
  sub_1000C4CC0();
  v49 = sub_1000BA294(&qword_100BF7A50);
  v50 = v93;
  State.projectedValue.getter(v49);
  KeyPath = swift_getKeyPath(&unk_1009B7FB8);
  v52 = (uint64_t)v94;
  *v94 = KeyPath;
  v53 = sub_1000BA294(&qword_100BC2908);
  swift_storeEnumTagMultiPayload(v52, v53, 0);
  v54 = v87;
  sub_1008C8A7C(&v100, v83, v46, v48, v50, v52, v87, v39);
  sub_1000C2D9C();
  sub_1000E72A8();
  sub_10009880C();
  v55 = v95;
  sub_1001CA2FC((uint64_t)v30, v95);
  sub_1000C4CC0();
  v56 = v2;
  v57 = v88;
  v58 = v96;
  sub_100619450(v56, v96);
  v59 = *(unsigned __int8 *)(v97 + 80);
  v60 = (v59 + 16) & ~v59;
  v61 = swift_allocObject(&unk_100B84CC8, v60 + v98, v59 | 7);
  sub_100619588(v58, v61 + v60);
  sub_10000F1C8(&qword_100BF7B10, type metadata accessor for ScrubberView);
  v63 = v62;
  v64 = sub_100619614();
  v65 = v80;
  v66 = v92;
  View.onChange<A>(of:initial:_:)(v55, 0, sub_1006195CC, v61, v80, v92, v63, v64);
  swift_release();
  sub_100021A14(v55, &qword_100BC6430);
  sub_1000215BC(v54, type metadata accessor for ScrubberView);
  v67 = enum case for DynamicTypeSize.xxLarge(_:);
  v68 = type metadata accessor for DynamicTypeSize(0);
  v69 = v99;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 104))(v99, v67, v68);
  sub_10000F1C8(&qword_100C0A550, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  if ((dispatch thunk of static Equatable.== infix(_:_:)(v69, v69, v68, v70) & 1) != 0)
  {
    *(_QWORD *)&v100 = v65;
    *((_QWORD *)&v100 + 1) = v66;
    v101 = v63;
    v102 = v64;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v100, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    sub_10003D2DC(&qword_100BC4E30, (uint64_t *)&unk_100C0A510);
    v72 = v76;
    View.dynamicTypeSize<A>(_:)(v69, v76, v77, OpaqueTypeConformance2, v73);
    sub_100021A14(v69, (uint64_t *)&unk_100C0A510);
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v57, v72);
    sub_10009990C();
  }
  else
  {
    __break(1u);
  }
}

void sub_10061936C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = sub_1000BA294(&qword_100BC6430);
  __chkstk_darwin(v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v10 - v7;
  sub_1001CA2FC(a2, (uint64_t)&v10 - v7);
  type metadata accessor for MoonScrubberView(0);
  sub_1001CA2FC((uint64_t)v8, (uint64_t)v5);
  v9 = sub_1000BA294(&qword_100BF7A50);
  State.wrappedValue.setter(v5, v9);
  sub_100021A14((uint64_t)v8, &qword_100BC6430);
}

uint64_t sub_100619450(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MoonScrubberView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100619494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = sub_1000B4BF0();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = v0 + v4 + *(int *)(v1 + 20);
  v7 = type metadata accessor for ScrubberDateSelection(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v6, 1, v7))
  {
    v8 = type metadata accessor for Date(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v6, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  sub_1000BA294(&qword_100BF7A50);
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + v4 + *(int *)(v1 + 24)));
  swift_release();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100619588(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MoonScrubberView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1006195CC(uint64_t a1, uint64_t a2)
{
  sub_1000B4BF0();
  sub_10061936C(a1, a2);
}

unint64_t sub_100619614()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF7B18;
  if (!qword_100BF7B18)
  {
    v1 = sub_100075EB0(&qword_100BC6430);
    sub_10000F1C8(&qword_100BF7B20, type metadata accessor for ScrubberDateSelection);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100BF7B18);
  }
  return result;
}

uint64_t sub_100619690()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v0 = sub_100075EB0(&qword_100BF7B08);
  sub_100075EB0((uint64_t *)&unk_100C0A510);
  v1 = type metadata accessor for ScrubberView(255);
  sub_100075EB0(&qword_100BC6430);
  sub_10000F1C8(&qword_100BF7B10, type metadata accessor for ScrubberView);
  v2 = sub_100619614();
  sub_100099AA4(v2, (uint64_t)&opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, v3, v4, v5, v6, v7, v8, v1);
  sub_10003D2DC(&qword_100BC4E30, (uint64_t *)&unk_100C0A510);
  return sub_100099AA4(v9, (uint64_t)&opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, v10, v11, v12, v13, v14, v15, v0);
}

ValueMetadata *type metadata accessor for NotificationSevereToggleView()
{
  return &type metadata for NotificationSevereToggleView;
}

uint64_t sub_10061977C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABB274, 1);
}

uint64_t sub_10061978C()
{
  uint64_t v0;
  int v1;
  int v2;
  char v4;
  _BYTE __dst[104];
  _BYTE __src[104];
  _BYTE v8[104];

  v1 = *(unsigned __int8 *)(v0 + 80);
  sub_100619C24(v0, (uint64_t)v8);
  v2 = v8[81];
  sub_100619C98((uint64_t)v8);
  sub_100619C24(v0, (uint64_t)__src);
  if (v1 == 1 || v2 == 0)
  {
    memcpy(__dst, __src, sizeof(__dst));
    v4 = (__src[82] | __dst[34]) ^ 1;
    sub_100619C98((uint64_t)__dst);
  }
  else
  {
    sub_100619C98((uint64_t)__src);
    v4 = 1;
  }
  return v4 & 1;
}

uint64_t sub_100619824@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v29;
  _QWORD v30[2];
  unsigned __int8 v31;

  v29 = a1;
  v2 = sub_1000BA294(&qword_100BE52B8);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v30[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100BE52C0);
  __chkstk_darwin(v6);
  v8 = (char *)&v30[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100619C24(v1, (uint64_t)v30);
  v9 = type metadata accessor for MainActor(0);
  v10 = static MainActor.shared.getter(v9);
  v11 = sub_100098740((uint64_t)&unk_100B84DC0, 136);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = &protocol witness table for MainActor;
  sub_1000BAD74(v11);
  v12 = sub_100619C24(v1, (uint64_t)v30);
  v13 = static MainActor.shared.getter(v12);
  v14 = sub_100098740((uint64_t)&unk_100B84DE8, 136);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = &protocol witness table for MainActor;
  sub_1000BAD74(v14);
  Binding.init(get:set:)(v30, sub_100619C5C, v11, sub_100619C6C, v14, &type metadata for Bool);
  v15 = v30[0];
  v16 = v30[1];
  v17 = v31;
  v18 = sub_1000BA294(&qword_100BD99D8);
  v19 = sub_100463C04();
  v20 = Toggle.init(isOn:label:)(v15, v16, v17, sub_100619B94, 0, v18, v19);
  v21 = static Font.body.getter(v20);
  KeyPath = swift_getKeyPath(&unk_1009B8060);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v8, v5, v2);
  v23 = (uint64_t *)&v8[*(int *)(v6 + 36)];
  *v23 = KeyPath;
  v23[1] = v21;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  LOBYTE(v21) = sub_10061978C();
  v24 = swift_getKeyPath(&unk_1009B8090);
  v25 = sub_100098740((uint64_t)&unk_100B84E10, 17);
  *(_BYTE *)(v25 + 16) = v21 & 1;
  v26 = v29;
  sub_100492738((uint64_t)v8, v29);
  v27 = (uint64_t *)(v26 + *(int *)(sub_1000BA294(&qword_100BE52C8) + 36));
  *v27 = v24;
  v27[1] = (uint64_t)sub_1001545E8;
  v27[2] = v25;
  return sub_100492780((uint64_t)v8);
}

uint64_t sub_100619A80@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t result;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 96);
  v9[0] = *(_BYTE *)(a1 + 88);
  v10 = v4;
  v5 = sub_1000BA294(&qword_100BC5608);
  State.wrappedValue.getter(&v11, v5);
  v6 = v11;
  sub_100619C24(a1, (uint64_t)v9);
  if (v6 == 1)
    v7 = sub_10061978C() ^ 1;
  else
    v7 = 0;
  result = sub_100619C98((uint64_t)v9);
  *a2 = v7 & 1;
  return result;
}

void sub_100619B14(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[9];
  uint64_t v9;

  v5 = *a1;
  v6 = *(_QWORD *)(a4 + 96);
  v8[1] = *(_BYTE *)(a4 + 88);
  v9 = v6;
  v8[0] = v5;
  v7 = sub_1000BA294(&qword_100BC5608);
  State.wrappedValue.setter(v8, v7);
  sub_1000DB418((_QWORD *)(a4 + 40), *(_QWORD *)(a4 + 64));
  sub_100485BE8();
}

uint64_t sub_100619B94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v2 = LocalizedStringKey.init(stringLiteral:)(0x5720657265766553, 0xEE00726568746165);
  result = Text.init(_:tableName:bundle:comment:)(v2, v4, v3 & 1, v5, 0, 0, 0, "Toggle for turning on or off severe weather notifications");
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8 & 1;
  *(_QWORD *)(a1 + 24) = v9;
  *(_WORD *)(a1 + 32) = 256;
  return result;
}

uint64_t sub_100619C24(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for NotificationNextHourToggleView(a2, a1);
  return a2;
}

uint64_t sub_100619C5C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_100619A80(v1 + 32, a1);
}

void sub_100619C6C(char *a1)
{
  uint64_t v1;

  sub_100619B14(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + 32);
}

uint64_t sub_100619C88()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100619C98(uint64_t a1)
{
  destroy for NotificationNextHourToggleView(a1);
  return a1;
}

uint64_t sub_100619CC4(char a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  void (*v33)(_QWORD *__return_ptr, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  __n128 v40;
  void (*v41)(_QWORD *__return_ptr, uint64_t);
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t (*v58)(uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t result;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  void (*v75)(char *, char *, uint64_t);
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  __n128 v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char v116[24];
  char v117[24];
  _QWORD v118[6];
  char v119;
  _OWORD v120[2];
  uint64_t v121;
  char v122[8];
  char v123[16];
  char v124[8];
  char v125[8];

  *(_QWORD *)&v106 = a8;
  v105 = a7;
  v104 = a6;
  v103 = a5;
  v109 = sub_1000BA294(&qword_100BF7BE8);
  v108 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v115 = (char *)&v102 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = type metadata accessor for NotificationSettingsData(0);
  v113 = *(_QWORD *)(v114 - 8);
  v13 = __chkstk_darwin(v114);
  v107 = (char *)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v112 = (char *)&v102 - v15;
  v16 = type metadata accessor for MainAction(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v102 = (_QWORD **)((char *)&v102 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = __chkstk_darwin(v18);
  v22 = (_QWORD **)((char *)&v102 - v21);
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v102 - v24;
  v26 = (_QWORD *)(a3 + 16);
  v110 = v23;
  v111 = v17;
  if ((a1 & 1) != 0)
  {
    v27 = type metadata accessor for NotificationsOptInAction(0);
    swift_storeEnumTagMultiPayload(v25, v27, 9);
    swift_storeEnumTagMultiPayload(v25, v16, 5);
    sub_1000F5568();
    v29 = v28;
    v30 = v28[2];
    if (v30 >= v28[3] >> 1)
    {
      sub_1000F5568();
      v29 = v97;
    }
    v29[2] = v30 + 1;
    v23 = sub_1004AB310((uint64_t)v25, (uint64_t)v29+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(_QWORD *)(v17 + 72) * v30);
  }
  else
  {
    v29 = _swiftEmptyArrayStorage;
  }
  v31 = (_QWORD *)(a4 + 16);
  v32 = a2;
  v33 = (void (*)(_QWORD *__return_ptr, uint64_t))a2[4];
  v33(v118, v23);
  v34 = v118[0];
  v35 = *(_QWORD *)(v118[0] + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notifications + 8);
  swift_bridgeObjectRetain(v35);
  swift_release(v34);
  swift_beginAccess(v26, v125, 0, 0);
  v36 = *v26;
  swift_bridgeObjectRetain(*v26);
  sub_10094A268();
  v38 = v37;
  swift_bridgeObjectRelease(v35);
  v40 = swift_bridgeObjectRelease(v36);
  if ((v38 & 1) != 0)
  {
    v41 = v33;
    v42 = v32;
    v43 = v111;
    ((void (*)(_QWORD *__return_ptr, uint64_t, __n128))v33)(v118, v39, v40);
  }
  else
  {
    swift_beginAccess(v26, v124, 0, 0);
    v44 = *v26;
    *v22 = *v26;
    v45 = type metadata accessor for NotificationsAction(0);
    swift_storeEnumTagMultiPayload(v22, v45, 3);
    swift_storeEnumTagMultiPayload(v22, v110, 4);
    swift_bridgeObjectRetain(v44);
    if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
    {
      sub_1000F5568();
      v29 = v98;
    }
    v41 = v33;
    v46 = v29[2];
    v42 = v32;
    if (v46 >= v29[3] >> 1)
    {
      sub_1000F5568();
      v29 = v99;
    }
    v43 = v111;
    v29[2] = v46 + 1;
    v47 = sub_1004AB310((uint64_t)v22, (uint64_t)v29+ ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(_QWORD *)(v43 + 72) * v46);
    ((void (*)(_QWORD *__return_ptr, uint64_t, __n128))v33)(v118, v47, v48);
  }
  v49 = v118[0];
  v50 = *(_QWORD *)(v118[0] + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notifications + 16);
  swift_bridgeObjectRetain(v50);
  swift_release(v49);
  swift_beginAccess(v31, v123, 0, 0);
  v51 = *v31;
  swift_bridgeObjectRetain(*v31);
  sub_10094A268();
  v53 = v52;
  swift_bridgeObjectRelease(v50);
  swift_bridgeObjectRelease(v51);
  if ((v53 & 1) == 0)
  {
    swift_beginAccess(v31, v122, 0, 0);
    v54 = *v31;
    v55 = (uint64_t)v102;
    *v102 = *v31;
    v56 = type metadata accessor for NotificationsAction(0);
    swift_storeEnumTagMultiPayload(v55, v56, 4);
    swift_storeEnumTagMultiPayload(v55, v110, 4);
    swift_bridgeObjectRetain(v54);
    if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
    {
      sub_1000F5568();
      v29 = v100;
    }
    v57 = v29[2];
    if (v57 >= v29[3] >> 1)
    {
      sub_1000F5568();
      v29 = v101;
    }
    v29[2] = v57 + 1;
    sub_1004AB310(v55, (uint64_t)v29+ ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(_QWORD *)(v43 + 72) * v57);
  }
  if (v29[2])
  {
    v58 = (uint64_t (*)(uint64_t))v42[2];
    v59 = v42[3];
    v121 = 0;
    memset(v120, 0, sizeof(v120));
    sub_1000A5F84((uint64_t)v120, (uint64_t)v118);
    v118[5] = v29;
    v119 = 0;
    swift_retain();
    swift_bridgeObjectRetain(v29);
    sub_10009FF10((uint64_t)v118, v58);
    sub_100021AA4((uint64_t)v118, &qword_100BD3378);
    swift_bridgeObjectRelease(v29);
    sub_100021AA4((uint64_t)v120, (uint64_t *)&unk_100BFFA10);
    v60 = swift_release(v59);
  }
  else
  {
    swift_bridgeObjectRelease(v29);
  }
  v61 = v42[13];
  v62 = SessionManager.tracker.getter(v60);
  v63 = Tracker.diagnosticSubmissionAllowed.getter();
  result = swift_release(v62);
  if ((v63 & 1) != 0)
  {
    v65 = (unsigned __int8 *)(v103 + 16);
    v66 = (unsigned __int8 *)(v104 + 16);
    v67 = (unsigned __int8 *)(v105 + 16);
    v68 = (unsigned __int8 *)(v106 + 16);
    v41(v118, result);
    v69 = *(unsigned __int8 *)(v118[0] + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notifications);
    swift_release(v118[0]);
    swift_beginAccess(v65, v118, 0, 0);
    v70 = *v65;
    swift_beginAccess(v66, v120, 0, 0);
    v71 = *v66;
    swift_beginAccess(v67, v117, 0, 0);
    v72 = *v67;
    swift_beginAccess(v68, v116, 0, 0);
    v73 = *v68;
    v74 = v112;
    NotificationSettingsData.init(isNotificationsEnabled:isCurrentLocationPrecipitationNotificationEnabled:isOtherLocationsPrecipitationNotificationEnabled:isCurrentLocationSevereNotificationEnabled:isOtherLocationsSevereNotificationEnabled:)(v69 == 1, v70, v71, v72, v73);
    v75 = *(void (**)(char *, char *, uint64_t))(v113 + 16);
    v111 = v61;
    v76 = v107;
    v77 = v114;
    v75(v107, v74, v114);
    sub_10005329C(&qword_100BF7BF0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for NotificationSettingsData, (uint64_t)&protocol conformance descriptor for NotificationSettingsData);
    v110 = v78;
    SessionData.init(key:data:)(0xD000000000000018, 0x8000000100A0E3F0, v76, v77, v78);
    v79 = sub_1000BA294(&qword_100BCDC68);
    v107 = (char *)v79;
    v80 = type metadata accessor for DataEventTrait(0);
    v81 = *(_QWORD *)(v80 - 8);
    v82 = *(unsigned __int8 *)(v81 + 80);
    v83 = (v82 + 32) & ~v82;
    v84 = v83 + *(_QWORD *)(v81 + 72);
    v85 = v82 | 7;
    v86 = swift_allocObject(v79, v84, v82 | 7);
    v106 = xmmword_10097CA50;
    *(_OWORD *)(v86 + 16) = xmmword_10097CA50;
    v87 = enum case for DataEventTrait.unique(_:);
    v88 = *(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 104);
    v88(v86 + v83, enum case for DataEventTrait.unique(_:), v80);
    v89 = v77;
    v90 = v110;
    SessionManager.push<A>(_:traits:file:line:)(v115, v86, 0xD000000000000064, 0x8000000100A0E410, 124, v89, v110);
    swift_bridgeObjectRelease(v86);
    v92 = SessionManager.tracker.getter(v91);
    v93 = swift_allocObject(v107, v84, v85);
    *(_OWORD *)(v93 + 16) = v106;
    v88(v93 + v83, v87, v80);
    v94 = v112;
    v95 = v114;
    Tracker.push<A>(data:traits:file:line:)(v112, v93, 0xD000000000000064, 0x8000000100A0E410, 127, v114, v90);
    swift_release(v92);
    v96 = swift_bridgeObjectRelease(v93);
    (*(void (**)(char *, uint64_t, __n128))(v108 + 8))(v115, v109, v96);
    return (*(uint64_t (**)(char *, uint64_t))(v113 + 8))(v94, v95);
  }
  return result;
}

void NotificationSubscriptionMonitor.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 64));
  swift_release();
  sub_10004A298();
}

uint64_t NotificationSubscriptionMonitor.__deallocating_deinit()
{
  uint64_t v0;

  NotificationSubscriptionMonitor.deinit();
  return swift_deallocClassInstance(v0, 112, 7);
}

uint64_t NotificationSubscriptionMonitor.subscribed(_:locationIdentifier:)(uint64_t a1, uint64_t a2)
{
  return sub_10061A630(a1, a2, (uint64_t)sub_10061A620);
}

uint64_t NotificationSubscriptionMonitor.unsubscribed(_:locationIdentifier:)(uint64_t a1, uint64_t a2)
{
  return sub_10061A630(a1, a2, (uint64_t)sub_100127ECC);
}

uint64_t sub_10061A630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  swift_retain();
  asyncMain(block:)(a3, v3);
  return sub_1000BB22C(v3);
}

uint64_t sub_10061A668()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10061A68C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10061A69C()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  swift_release(v0[8]);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10061A6F0()
{
  uint64_t v0;

  return sub_100619CC4(*(_BYTE *)(v0 + 16), *(_QWORD **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

uint64_t sub_10061A708(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t (*v38)(_QWORD);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t (*v46)(uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  sub_1000BA294(&qword_100BC5F50);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100098728();
  v5 = v4 - v3;
  sub_1000BA294(&qword_100BC5F48);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v73 = v7;
  sub_1000BA294(&qword_100BC5F60);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100098728();
  v11 = v10 - v9;
  sub_1000BA294(&qword_100BC5F88);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100098728();
  v15 = v14 - v13;
  sub_1000BA294(&qword_100BC5F90);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  sub_100088FDC();
  v74 = v17;
  sub_1000BA294(&qword_100BC5F98);
  sub_1000B42B0();
  __chkstk_darwin(v18);
  sub_100088FDC();
  v78 = v19;
  sub_1000BA294(&qword_100BC5FA0);
  sub_1000B42B0();
  __chkstk_darwin(v20);
  sub_100088FDC();
  v77 = v21;
  sub_1000BA294(&qword_100BC5FA8);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  sub_100088FDC();
  v76 = v23;
  sub_1000BA294(&qword_100BC5FB0);
  sub_1000B42B0();
  __chkstk_darwin(v24);
  sub_100088FDC();
  v75 = v25;
  v26 = type metadata accessor for ModalViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v27);
  sub_100098728();
  v30 = v29 - v28;
  type metadata accessor for LocationPreviewViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v31);
  sub_100088FDC();
  v72 = v32;
  v33 = type metadata accessor for ViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v34);
  sub_100098728();
  v37 = (_QWORD *)(v36 - v35);
  sub_100084050(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, v36 - v35, v38);
  v39 = *v37;
  if (*(_QWORD *)((char *)v37 + *(int *)(v33 + 36) + 8) == 1)
  {
    v40 = v5;
    v41 = v15;
    v42 = v11;
    v43 = a1;
    v44 = (void *)objc_opt_self(UIDevice);
    v45 = objc_msgSend(v44, "currentDevice", swift_retain().n128_f64[0]);
    objc_msgSend(v45, "userInterfaceIdiom");

    a1 = v43;
    v11 = v42;
    v15 = v41;
    v5 = v40;
    if (*((_BYTE *)v37 + *(int *)(v33 + 28)) == 1)
    {
      sub_1000C5AE8();
      v46 = type metadata accessor for ViewState;
      v47 = (uint64_t)v37;
      goto LABEL_8;
    }
  }
  else
  {
    swift_retain();
  }
  sub_1000215BC((uint64_t)v37, type metadata accessor for ViewState);
  if (*(_BYTE *)(v39 + 64) != 1)
  {
    sub_1000C5AE8();
    return 1;
  }
  sub_100084050(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_modalView, v30, type metadata accessor for ModalViewState);
  if (!swift_getEnumCaseMultiPayload(v30))
  {
    sub_1001D716C(v30, v72);
    v50 = type metadata accessor for AppConfigurationState(0);
    v53 = sub_1000BA2E8(v75, v51, v52, v50);
    v54 = type metadata accessor for EnvironmentState(v53);
    v57 = sub_1000BA2E8(v76, v55, v56, v54);
    v58 = type metadata accessor for LocationsState(v57);
    v61 = sub_1000BA2E8(v77, v59, v60, v58);
    v62 = type metadata accessor for NotificationsOptInState(v61);
    v65 = sub_1000BA2E8(v78, v63, v64, v62);
    v66 = type metadata accessor for TimeState(v65);
    _s7Weather24LocationCompositionStateOwst_0(v74, 1, 1, v66);
    _s7Weather24LocationCompositionStateOwst_0(v15, 1, 1, v33);
    v67 = type metadata accessor for PreviewLocation(0);
    v70 = sub_1000BA2E8(v73, v68, v69, v67);
    v71 = type metadata accessor for LocationPreviewModalViewState(v70);
    swift_storeEnumTagMultiPayload(v5, v71, 9);
    _s7Weather24LocationCompositionStateOwst_0(v5, 0, 1, v71);
    sub_1003804CC(v73, v5, v11);
    sub_100021A14(v5, &qword_100BC5F50);
    sub_100021A14(v73, &qword_100BC5F48);
    swift_storeEnumTagMultiPayload(v11, v26, 0);
    _s7Weather24LocationCompositionStateOwst_0(v11, 0, 1, v26);
    v48 = sub_1000DEBAC(0, 3, v75, v76, v77, 0, 0, 0, v78, v74, v15, v11, 0, 0, 0, 0, 0, 0, 0, a1);
    sub_1000C5AE8();
    sub_100021A14(v11, &qword_100BC5F60);
    sub_100021A14(v15, &qword_100BC5F88);
    sub_100021A14(v74, &qword_100BC5F90);
    sub_100021A14(v78, &qword_100BC5F98);
    sub_100021A14(v77, &qword_100BC5FA0);
    sub_100021A14(v76, &qword_100BC5FA8);
    sub_100021A14(v75, &qword_100BC5FB0);
    sub_1000215BC(v72, type metadata accessor for LocationPreviewViewState);
    return v48;
  }
  sub_1000C5AE8();
  v46 = type metadata accessor for ModalViewState;
  v47 = v30;
LABEL_8:
  sub_1000215BC(v47, v46);
  return 1;
}

void sub_10061AC60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  _QWORD v33[3];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD aBlock[5];
  uint64_t v40;

  v33[1] = a4;
  v33[2] = a3;
  v35 = a1;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v5 - 8);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_100098728();
  v9 = v8 - v7;
  v10 = type metadata accessor for DispatchQoS(0);
  v36 = *(_QWORD *)(v10 - 8);
  v37 = v10;
  sub_10009D98C();
  __chkstk_darwin(v11);
  sub_100098728();
  v14 = v13 - v12;
  v15 = type metadata accessor for DispatchTime(0);
  __chkstk_darwin(v15);
  sub_10009883C();
  v18 = v16 - v17;
  v20 = __chkstk_darwin(v19);
  v22 = (char *)v33 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)v33 - v23;
  v25 = sub_1000A0794(0, (unint64_t *)&qword_100BC29A0, OS_dispatch_queue_ptr);
  v34 = static OS_dispatch_queue.main.getter(v25);
  static DispatchTime.now()();
  + infix(_:_:)(v18);
  sub_10009DBE8(v18);
  + infix(_:_:)(v22);
  sub_10009DBE8((uint64_t)v22);
  aBlock[4] = v35;
  v40 = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100121D84;
  aBlock[3] = &unk_100B850C8;
  v26 = _Block_copy(aBlock);
  v27 = v40;
  swift_retain();
  swift_release(v27);
  static DispatchQoS.unspecified.getter(v28);
  aBlock[0] = _swiftEmptyArrayStorage;
  v29 = sub_1000FC98C((unint64_t *)&qword_100BFFA20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  v30 = sub_1000BA294(&qword_100BD4F10);
  v31 = sub_1000A609C((unint64_t *)&qword_100BFFA30, &qword_100BD4F10);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v30, v31, v5, v29);
  v32 = (void *)v34;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v24, v14, v9, v26);
  _Block_release(v26);

  sub_100098820(v9, *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8));
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v14, v37);
  sub_10009DBE8((uint64_t)v24);
  sub_100098640();
}

_QWORD *sub_10061AEF0@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  _QWORD v9[4];

  v9[0] = a1;
  v9[1] = a2;
  v9[2] = a3;
  v9[3] = a4;
  type metadata accessor for AnimatableTabView(0, (uint64_t)v9);
  v7 = type metadata accessor for State(0, a2);
  return State.wrappedValue.getter(a5, v7);
}

uint64_t sub_10061AF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *);
  uint64_t v19;
  _QWORD v21[4];

  v12 = *(_QWORD *)(a6 - 8);
  v13 = __chkstk_darwin(a1);
  v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)v21 - v16;
  v18 = *(void (**)(char *))(v12 + 16);
  v18((char *)v21 - v16);
  v21[0] = a5;
  v21[1] = a6;
  v21[2] = a7;
  v21[3] = a8;
  type metadata accessor for AnimatableTabView(0, (uint64_t)v21);
  ((void (*)(char *, char *, uint64_t))v18)(v15, v17, a6);
  v19 = type metadata accessor for State(0, a6);
  State.wrappedValue.setter(v15, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v17, a6);
}

uint64_t sub_10061B058(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;
  char v8;
  char *v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 - 8);
  v3 = __chkstk_darwin(a1);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_BYTE *)(v6 + *(int *)(v3 + 84));
  (*(void (**)(char *))(v2 + 16))(v5);
  if ((v7 & 1) != 0)
  {
    v8 = 1;
  }
  else
  {
    v9 = &v5[*(int *)(a1 + 88)];
    v10 = *(_QWORD *)v9;
    v11 = v9[8];
    sub_10008D47C(*(_QWORD *)v9, v11);
    sub_100109B54();
    v8 = v12;
    sub_1000B15F8(v10, v11);
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  return v8 & 1;
}

uint64_t sub_10061B128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t WitnessTable;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;

  v55 = a1;
  v57 = a6;
  v59 = a2;
  v60 = a3;
  v61 = a4;
  v62 = a5;
  v10 = type metadata accessor for AnimatableTabView(0, (uint64_t)&v59);
  v11 = *(_QWORD *)(v10 - 8);
  v54 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v52 = a4;
  v53 = (char *)&v45 - v12;
  v59 = a2;
  v60 = a3;
  v13 = a2;
  v51 = a2;
  v61 = a4;
  v62 = a5;
  v56 = type metadata accessor for Page(255, (uint64_t)&v59);
  v14 = type metadata accessor for Array(255, v56);
  v59 = v13;
  v60 = a3;
  v61 = a4;
  v62 = a5;
  v15 = type metadata accessor for PageContainer(255, (uint64_t)&v59);
  v16 = type metadata accessor for _ConditionalContent(255, &type metadata for EmptyView, v15);
  WitnessTable = swift_getWitnessTable(&unk_1009B83C4, v15);
  v64 = &protocol witness table for EmptyView;
  v65 = WitnessTable;
  v18 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v16);
  v19 = type metadata accessor for VStack(255, v16, v18);
  v20 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v19);
  v59 = v19;
  v60 = a3;
  v61 = v20;
  v62 = a5;
  v21 = a5;
  v46 = a5;
  v22 = type metadata accessor for IDView(255);
  v47 = v22;
  v49 = v14;
  v48 = swift_getWitnessTable(&protocol conformance descriptor for [A], v14);
  v59 = v14;
  v60 = a3;
  v23 = a3;
  v61 = v22;
  v62 = v48;
  v63 = v21;
  v24 = type metadata accessor for ForEach(0, &v59);
  v50 = *(_QWORD *)(v24 - 8);
  v25 = __chkstk_darwin(v24);
  v27 = (char *)&v45 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v29 = (char *)&v45 - v28;
  v59 = *(_QWORD *)(v55 + *(int *)(v10 + 56));
  v30 = v59;
  v31 = v11;
  v32 = *(void (**)(char *))(v11 + 16);
  v33 = v53;
  v34 = v10;
  v32(v53);
  v35 = *(unsigned __int8 *)(v31 + 80);
  v36 = (v35 + 48) & ~v35;
  v37 = (char *)swift_allocObject(&unk_100B85128, v36 + v54, v35 | 7);
  *((_QWORD *)v37 + 2) = v51;
  *((_QWORD *)v37 + 3) = v23;
  v38 = v46;
  *((_QWORD *)v37 + 4) = v52;
  *((_QWORD *)v37 + 5) = v38;
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(&v37[v36], v33, v34);
  swift_bridgeObjectRetain(v30);
  v39 = v47;
  v40 = swift_getWitnessTable(&protocol conformance descriptor for IDView<A, B>, v47);
  v41 = swift_getWitnessTable(&unk_1009B82E8, v56);
  ForEach<>.init(_:content:)(&v59, sub_10061EC98, v37, v49, v23, v39, v48, v40, v41);
  v58 = v40;
  v42 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v24);
  sub_1000B2074(v27, v24, v42);
  v43 = *(void (**)(char *, uint64_t))(v50 + 8);
  v43(v27, v24);
  sub_1000B1100((uint64_t)v29, v24, v57);
  return ((uint64_t (*)(char *, uint64_t))v43)(v29, v24);
}

uint64_t sub_10061B464@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37[16];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t WitnessTable;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v35 = a2;
  v36 = a7;
  v46 = a3;
  v47 = a4;
  v48 = a5;
  v49 = a6;
  v12 = type metadata accessor for PageContainer(255, (uint64_t)&v46);
  v13 = type metadata accessor for _ConditionalContent(255, &type metadata for EmptyView, v12);
  v44 = &protocol witness table for EmptyView;
  WitnessTable = swift_getWitnessTable(&unk_1009B83C4, v12);
  v32 = v13;
  v31 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v13);
  v14 = type metadata accessor for VStack(0, v13, v31);
  v34 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v29 - v15;
  v30 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v14);
  v46 = v14;
  v47 = a4;
  v48 = v30;
  v49 = a6;
  v17 = type metadata accessor for IDView(0);
  v33 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v29 - v22;
  v38 = a3;
  v39 = a4;
  v40 = a5;
  v41 = a6;
  v42 = a1;
  v43 = v35;
  v24 = static HorizontalAlignment.center.getter(v21);
  VStack.init(alignment:spacing:content:)(v24, 0, 1, sub_10061ED0C, v37, v32, v31);
  v46 = a3;
  v47 = a4;
  v48 = a5;
  v49 = a6;
  v25 = type metadata accessor for Page(0, (uint64_t)&v46);
  View.id<A>(_:)(a1 + *(int *)(v25 + 52), v14, a4, v30, a6);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v16, v14);
  v26 = swift_getWitnessTable(&protocol conformance descriptor for IDView<A, B>, v17);
  sub_1000B2074(v20, v17, v26);
  v27 = *(void (**)(char *, uint64_t))(v33 + 8);
  v27(v20, v17);
  sub_1000B1100((uint64_t)v23, v17, v36);
  return ((uint64_t (*)(char *, uint64_t))v27)(v23, v17);
}

uint64_t sub_10061B6BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t WitnessTable;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v10 = a3;
  v69 = a2;
  v75 = a1;
  v73 = a7;
  v78 = a3;
  v79 = a4;
  v80 = a5;
  v81 = a6;
  v11 = type metadata accessor for TransitionContext(255, (uint64_t)&v78);
  v61 = type metadata accessor for Optional(0, v11);
  __chkstk_darwin(v61);
  v63 = (uint64_t *)((char *)&v57 - v12);
  v78 = v10;
  v79 = a4;
  v80 = a5;
  v81 = a6;
  v74 = type metadata accessor for Page(0, (uint64_t)&v78);
  v58 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v59 = (uint64_t)&v57 - v13;
  v78 = v10;
  v79 = a4;
  v80 = a5;
  v81 = a6;
  v14 = type metadata accessor for PageContainer(0, (uint64_t)&v78);
  v60 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v64 = (uint64_t)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v62 = (uint64_t)&v57 - v17;
  v65 = v10;
  v66 = a5;
  v78 = v10;
  v79 = a4;
  v80 = a5;
  v81 = a6;
  v18 = type metadata accessor for AnimatableTabView(0, (uint64_t)&v78);
  v68 = *(_QWORD *)(v18 - 8);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v57 - v20;
  v22 = *(_QWORD *)(a4 - 8);
  v23 = __chkstk_darwin(v19);
  v25 = (char *)&v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v27 = (char *)&v57 - v26;
  v28 = type metadata accessor for _ConditionalContent(0, &type metadata for EmptyView, v14);
  v71 = *(_QWORD *)(v28 - 8);
  v72 = v28;
  __chkstk_darwin(v28);
  v70 = (char *)&v57 - v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v27, v75 + *(int *)(v74 + 52), a4);
  v30 = v69;
  v31 = type metadata accessor for State(0, a4);
  State.wrappedValue.getter(v25, v31);
  v67 = a6;
  LOBYTE(v10) = dispatch thunk of static Equatable.== infix(_:_:)(v27, v25, a4, *(_QWORD *)(a6 + 8));
  v32 = *(void (**)(char *, uint64_t))(v22 + 8);
  v33 = v25;
  v34 = v68;
  v32(v33, a4);
  v32(v27, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v21, v30, v18);
  if ((v10 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v21, v18);
LABEL_5:
    v41 = v59;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(v59, v75, v74);
    v42 = (uint64_t *)(v30 + *(int *)(v18 + 60));
    v43 = *v42;
    v44 = v42[1];
    v45 = type metadata accessor for State(0, v61);
    swift_retain();
    v46 = v63;
    State.wrappedValue.getter(v63, v45);
    v47 = v64;
    sub_10061BB80(v41, v43, v44, (uint64_t)v46, v65, a4, v66, v67, v64);
    WitnessTable = swift_getWitnessTable(&unk_1009B83C4, v14);
    v49 = v62;
    sub_1000B2074(v47, v14, WitnessTable);
    v50 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
    v50(v47, v14);
    sub_1000B1100(v49, v14, v47);
    v37 = (uint64_t)v70;
    sub_1000B20B0(v47, (uint64_t)&type metadata for EmptyView, v14, (uint64_t)&protocol witness table for EmptyView, WitnessTable, v51, v52, v53, v57, v58, v59, v60, v61, v62, (uint64_t)v63, v64, v65, v66);
    v50(v47, v14);
    v50(v49, v14);
    goto LABEL_6;
  }
  v35 = sub_10061B058(v18);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v21, v18);
  if ((v35 & 1) == 0)
    goto LABEL_5;
  v36 = swift_getWitnessTable(&unk_1009B83C4, v14);
  v37 = (uint64_t)v70;
  sub_1001589C0(v36, (uint64_t)&type metadata for EmptyView, v14, (uint64_t)&protocol witness table for EmptyView, v36, v38, v39, v40, v57, v58, v59, v60, v61, v62, (uint64_t)v63, v64, v65, v66);
LABEL_6:
  v54 = swift_getWitnessTable(&unk_1009B83C4, v14);
  v76 = &protocol witness table for EmptyView;
  v77 = v54;
  v55 = v72;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v72);
  sub_1000B1100(v37, v55, v73);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 8))(v37, v55);
}

uint64_t sub_10061BB80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v18;
  int *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v31 = a5;
  v32 = a6;
  v33 = a7;
  v34 = a8;
  v18 = type metadata accessor for Page(0, (uint64_t)&v31);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a9, a1, v18);
  v31 = a5;
  v32 = a6;
  v33 = a7;
  v34 = a8;
  v19 = (int *)type metadata accessor for PageContainer(0, (uint64_t)&v31);
  v20 = (_QWORD *)(a9 + v19[13]);
  *v20 = a2;
  v20[1] = a3;
  v21 = a9 + v19[14];
  v31 = a5;
  v32 = a6;
  v33 = a7;
  v34 = a8;
  v22 = type metadata accessor for TransitionContext(255, (uint64_t)&v31);
  v23 = type metadata accessor for Optional(0, v22);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, a4, v23);
  v24 = a9 + v19[15];
  *(_BYTE *)v24 = sub_1000B2078(1) & 1;
  *(_QWORD *)(v24 + 8) = v25;
  v26 = (uint64_t *)(a9 + v19[16]);
  v27 = type metadata accessor for PageContainerSidebarState(0);
  v28 = swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  *(_BYTE *)(v28 + 16) = 0;
  ObservationRegistrar.init()(v28);
  result = sub_10061C36C((uint64_t *)v28);
  *v26 = result;
  v26[1] = v30;
  return result;
}

uint64_t sub_10061BCF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _BYTE v17[16];
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = v2;
  v6 = type metadata accessor for OSSignpostID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = 0;
  Transaction.disablesPageScrollAnimations.setter(1);
  Transaction.disablesAnimations.setter(1);
  v10 = Transaction.animation.setter(0);
  v11 = static os_signpost_type_t.event.getter(v10);
  sub_1000A0794(0, (unint64_t *)&qword_100BC2998, OS_os_log_ptr);
  v12 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000011, 0x80000001009F0D20, 0xD000000000000011, 0x80000001009B8270);
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v11, &_mh_execute_header, v12, "Weather:locationTransition", 26, 2, v9);

  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  v13 = v22;
  v14 = *(_OWORD *)(a2 + 32);
  v18 = *(_OWORD *)(a2 + 16);
  v19 = v14;
  v20 = v3;
  v21 = a1;
  swift_retain();
  withTransaction<A>(_:_:)(v15, sub_10061EC0C, v17, &type metadata for () + 1);
  return swift_release_n(v13, 2);
}

uint64_t sub_10061BE70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  _QWORD v12[4];

  v12[3] = a6;
  v12[0] = a3;
  v12[1] = a4;
  v12[2] = a5;
  v10 = type metadata accessor for Page(0, (uint64_t)v12);
  return dispatch thunk of static Equatable.== infix(_:_:)(a1 + *(int *)(v10 + 52), a2, a4, *(_QWORD *)(a6 + 8)) & 1;
}

uint64_t sub_10061BEEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v20 = a4;
  v21 = a5;
  v22 = a6;
  v23 = a7;
  v16 = type metadata accessor for Page(0, (uint64_t)&v20);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
  v17(a8, a1, v16);
  v20 = a4;
  v21 = a5;
  v22 = a6;
  v23 = a7;
  v18 = type metadata accessor for TransitionContext(0, (uint64_t)&v20);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v17)(a8 + *(int *)(v18 + 52), a2, v16);
  *(_QWORD *)(a8 + *(int *)(v18 + 56)) = a3;
  return result;
}

uint64_t sub_10061BFB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v25 = a3;
  v27 = a2;
  v28 = a4;
  v29 = a5;
  v30 = a6;
  v31 = a7;
  v11 = type metadata accessor for TransitionContext(0, (uint64_t)&v28);
  v26 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v24 - v12;
  v14 = type metadata accessor for Optional(0, v11);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v24 - v16);
  v28 = a4;
  v29 = a5;
  v30 = a6;
  v31 = a7;
  v18 = type metadata accessor for AnimatableTabView(0, (uint64_t)&v28);
  v19 = type metadata accessor for State(0, v14);
  State.wrappedValue.getter(v17, v19);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v17, 1, v11))
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v15 + 8))(v17, v14);
  v21 = v25;
  v22 = v26;
  (*(void (**)(char *, _QWORD *, uint64_t))(v26 + 16))(v13, v17, v11);
  (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v17, v14);
  v23 = *(_QWORD *)&v13[*(int *)(v11 + 56)];
  result = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v13, v11);
  if (v23 == v27)
    return sub_10061BCF0(v21, v18);
  return result;
}

uint64_t sub_10061C144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;

  v38 = a3;
  v33 = a2;
  v39 = a4;
  v40 = a5;
  v41 = a6;
  v36 = type metadata accessor for TransitionContext(255, (uint64_t)&v38);
  v37 = type metadata accessor for Optional(0, v36);
  v35 = *(_QWORD *)(v37 - 8);
  v11 = __chkstk_darwin(v37);
  v34 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v33 - v14;
  v16 = *(_QWORD *)(a4 - 8);
  v17 = __chkstk_darwin(v13);
  v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v33 - v20;
  v38 = a3;
  v39 = a4;
  v40 = a5;
  v41 = a6;
  v22 = (char *)(a1 + *(int *)(type metadata accessor for AnimatableTabView(0, (uint64_t)&v38) + 68));
  v23 = *v22;
  v24 = *((_QWORD *)v22 + 1);
  LOBYTE(v38) = v23;
  v39 = v24;
  v42 = 1;
  v25 = sub_1000BA294(&qword_100BC5608);
  State.wrappedValue.setter(&v42, v25);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v26(v21, v33, a4);
  v26(v19, (uint64_t)v21, a4);
  v27 = type metadata accessor for State(0, a4);
  State.wrappedValue.setter(v19, v27);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v21, a4);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 1, 1, v36);
  v29 = v34;
  v28 = v35;
  v30 = v37;
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v34, v15, v37);
  v31 = type metadata accessor for State(0, v30);
  State.wrappedValue.setter(v29, v31);
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v15, v30);
}

uint64_t sub_10061C36C(uint64_t *a1)
{
  uint64_t v1;
  _QWORD v3[2];

  v1 = *a1;
  v3[0] = a1;
  State.init(wrappedValue:)(v3, v1);
  return v3[1];
}

uint64_t sub_10061C39C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v20 = a2;
  v21 = a3;
  v22 = a4;
  v23 = a5;
  v6 = type metadata accessor for PageContainer(0, (uint64_t)&v20);
  v7 = (uint64_t *)(a1 + *(int *)(v6 + 64));
  v8 = *v7;
  v9 = v7[1];
  v20 = *v7;
  v21 = v9;
  v10 = sub_1000BA294(qword_100BF7EC8);
  State.wrappedValue.getter(&v19, v10);
  v11 = *(unsigned __int8 *)(v19 + 16);
  swift_release(v19);
  if (v11 == 1)
  {
    v20 = v8;
    v21 = v9;
    State.wrappedValue.getter(&v19, v10);
    v12 = v19;
    *(_BYTE *)(v19 + 16) = 0;
  }
  else
  {
    v13 = a1 + *(int *)(v6 + 60);
    v15 = *(_QWORD *)(v13 + 8);
    LOBYTE(v20) = *(_BYTE *)v13;
    v14 = v20;
    v21 = v15;
    swift_retain();
    v16 = sub_1000BA294(&qword_100BC5608);
    State.wrappedValue.getter(&v19, v16);
    LOBYTE(v20) = v14;
    v21 = v15;
    v18 = (v19 & 1) == 0;
    State.wrappedValue.setter(&v18, v16);
    v12 = v15;
  }
  return swift_release(v12);
}

uint64_t sub_10061C4B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v18;
  uint64_t v19;
  char v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v18 = type metadata accessor for PageContainerSidebarState(0);
  v19 = sub_1000FC98C(&qword_100BF7EC0, type metadata accessor for PageContainerSidebarState);
  *(_QWORD *)a9 = Environment.init<A>(_:)(v18, v18, v19);
  *(_BYTE *)(a9 + 8) = v20 & 1;
  *(_QWORD *)(a9 + 16) = swift_getKeyPath(&unk_1009B8418);
  *(_BYTE *)(a9 + 24) = 0;
  v28 = a6;
  v29 = a7;
  v30 = a8;
  v31 = a10;
  v21 = (int *)type metadata accessor for RebuildPageWhenSidebarCollapsesDuringTransitionModifier(0, (uint64_t)&v28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(a9 + v21[14], a1, a7);
  v22 = a9 + v21[15];
  v28 = a6;
  v29 = a7;
  v30 = a8;
  v31 = a10;
  v23 = type metadata accessor for TransitionContext(255, (uint64_t)&v28);
  v24 = type metadata accessor for Optional(0, v23);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, a2, v24);
  v26 = a9 + v21[16];
  *(_QWORD *)v26 = a3;
  *(_QWORD *)(v26 + 8) = a4;
  *(_BYTE *)(v26 + 16) = a5;
  return result;
}

uint64_t sub_10061C5FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0
     + OBJC_IVAR____TtC7WeatherP33_5EE0AB7E2265079F8C0DECAD5CEADEAC25PageContainerSidebarState___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10061C64C()
{
  return type metadata accessor for PageContainerSidebarState(0);
}

uint64_t type metadata accessor for PageContainerSidebarState(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF7C28;
  if (!qword_100BF7C28)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PageContainerSidebarState);
  return result;
}

uint64_t sub_10061C68C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1009B8210;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10061C704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_10061C770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_10061C7DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t *sub_10061C848(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(unint64_t, unint64_t, uint64_t);
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  void (*v28)(uint64_t *, uint64_t *, uint64_t);

  v4 = a1;
  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = v9;
  v11 = *(_QWORD *)(v7 + 64) + v9;
  v12 = (v11 & ~(unint64_t)v9) + *(_QWORD *)(v8 + 64);
  v13 = *(_DWORD *)(v7 + 80) | v9;
  v14 = v13;
  v15 = v12 + v13;
  v16 = v12 + 7;
  v17 = ((v12 + 7 + ((v12 + v14) & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 8;
  v18 = v13 & 0x100000;
  if (v14 > 7 || v18 != 0 || v17 > 0x18)
  {
    v21 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v21 + ((v14 & 0xF8 ^ 0x1F8) & (v14 + 16)));
    swift_retain(v21);
  }
  else
  {
    v22 = ~v10;
    v27 = ~v14;
    v28 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16);
    v28(a1, a2, v6);
    v23 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
    v23(((unint64_t)v4 + v11) & v22, ((unint64_t)a2 + v11) & v22, v5);
    v24 = ((unint64_t)v4 + v15) & v27;
    v25 = ((unint64_t)a2 + v15) & v27;
    v28((uint64_t *)v24, (uint64_t *)v25, v6);
    v23((v11 + v24) & v22, (v11 + v25) & v22, v5);
    *(_QWORD *)((v16 + v24) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v16 + v25) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t sub_10061C9AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v15)(uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = *(_DWORD *)(v8 + 80);
  v11 = *(_QWORD *)(v5 + 64) + v10;
  v15 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v15((v11 + a1) & ~v10, v7);
  v12 = *(unsigned __int8 *)(v5 + 80) | v9;
  v13 = (*(_QWORD *)(v8 + 64) + a1 + (v11 & ~v10) + v12) & ~v12;
  v6(v13, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v15)((v11 + v13) & ~v10, v7);
}

uint64_t sub_10061CA7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v19)(uint64_t, uint64_t, uint64_t);

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v19(a1, a2, v6);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = *(_DWORD *)(v9 + 80);
  v12 = *(_QWORD *)(v7 + 64) + v11;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v13((v12 + a1) & ~v11, (v12 + a2) & ~v11, v8);
  v14 = (v12 & ~v11) + *(_QWORD *)(v9 + 64);
  v15 = *(unsigned __int8 *)(v7 + 80) | v10;
  v16 = (v14 + v15 + a1) & ~v15;
  v17 = (v14 + v15 + a2) & ~v15;
  v19(v16, v17, v6);
  v13((v12 + v16) & ~v11, (v12 + v17) & ~v11, v8);
  *(_QWORD *)((v14 + 7 + v16) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v14 + 7 + v17) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_10061CB8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v19)(uint64_t, uint64_t, uint64_t);

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v19(a1, a2, v6);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = *(_DWORD *)(v9 + 80);
  v12 = *(_QWORD *)(v7 + 64) + v11;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24);
  v13((v12 + a1) & ~v11, (v12 + a2) & ~v11, v8);
  v14 = (v12 & ~v11) + *(_QWORD *)(v9 + 64);
  v15 = *(unsigned __int8 *)(v7 + 80) | v10;
  v16 = (v14 + v15 + a1) & ~v15;
  v17 = (v14 + v15 + a2) & ~v15;
  v19(v16, v17, v6);
  v13((v12 + v16) & ~v11, (v12 + v17) & ~v11, v8);
  *(_QWORD *)((v14 + 7 + v16) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v14 + 7 + v17) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_10061CC9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v19)(uint64_t, uint64_t, uint64_t);

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  v19(a1, a2, v6);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = *(_DWORD *)(v9 + 80);
  v12 = *(_QWORD *)(v7 + 64) + v11;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
  v13((v12 + a1) & ~v11, (v12 + a2) & ~v11, v8);
  v14 = (v12 & ~v11) + *(_QWORD *)(v9 + 64);
  v15 = *(unsigned __int8 *)(v7 + 80) | v10;
  v16 = (v14 + v15 + a1) & ~v15;
  v17 = (v14 + v15 + a2) & ~v15;
  v19(v16, v17, v6);
  v13((v12 + v16) & ~v11, (v12 + v17) & ~v11, v8);
  *(_QWORD *)((v14 + 7 + v16) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v14 + 7 + v17) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_10061CDAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v19)(uint64_t, uint64_t, uint64_t);

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v19(a1, a2, v6);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = *(_DWORD *)(v9 + 80);
  v12 = *(_QWORD *)(v7 + 64) + v11;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 40);
  v13((v12 + a1) & ~v11, (v12 + a2) & ~v11, v8);
  v14 = (v12 & ~v11) + *(_QWORD *)(v9 + 64);
  v15 = *(unsigned __int8 *)(v7 + 80) | v10;
  v16 = (v14 + v15 + a1) & ~v15;
  v17 = (v14 + v15 + a2) & ~v15;
  v19(v16, v17, v6);
  v13((v12 + v16) & ~v11, (v12 + v17) & ~v11, v8);
  *(_QWORD *)((v14 + 7 + v16) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v14 + 7 + v17) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *sub_10061CEBC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  void (*v55)(_BYTE *, _DWORD *, uint64_t);
  unint64_t v56;
  unint64_t v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  size_t __n;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  size_t v77;
  unint64_t v78;
  uint64_t v80;
  void (*v81)(unint64_t, unint64_t, uint64_t);
  unint64_t v82;
  _QWORD *v83;
  int v84;

  v6 = a3 + 16;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v6 + 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_DWORD *)(v7 + 84);
  v10 = v8;
  v11 = *(_QWORD *)(v7 + 64);
  v12 = ((v10 + 16) & ~v10) + v11 + (v10 | 7);
  v13 = v11 + 7;
  v14 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)(v4 - 8);
  v16 = *(_DWORD *)(v15 + 84);
  v17 = *(_DWORD *)(v15 + 80) | v8;
  v18 = (*(_BYTE *)(v15 + 80) | v8);
  v19 = v18 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v20 = *(_QWORD *)(v15 + 64) + v8;
  v21 = (v20 & ~(unint64_t)v8) + v11;
  v22 = v21 + v18;
  v23 = v21 + 7;
  v24 = (v21 + 7 + ((v21 + v18) & ~v18)) & 0xFFFFFFFFFFFFFFF8;
  v25 = v24 + 8;
  v26 = v24 + 9;
  if (v9 | v16)
    v27 = v25;
  else
    v27 = v26;
  if (v18 <= 7
    && (v17 & 0x100000) == 0
    && ((v18
       + 16
       + ((((((((v14 + (v12 & ~(v10 | 7)) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)) & v19)
     + ((v27 + 7) & 0xFFFFFFFFFFFFFFF8)
     + 8
     + 65 <= 0x18)
  {
    v71 = *(_DWORD *)(v15 + 84);
    v72 = *(_DWORD *)(v7 + 84);
    v69 = v23;
    __n = v27;
    v67 = *(_QWORD *)(v4 - 8);
    v68 = v22;
    v74 = v20;
    v75 = v25;
    v76 = v4;
    v77 = v27 + 7;
    v78 = ((v27 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    v84 = v9 | v16;
    v80 = ~(v10 | 7);
    *a1 = *a2;
    v82 = v14 + 8;
    v32 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v33 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v32 = *v33;
    v35 = ((unint64_t)v32 + v10 + 8) & ~v10;
    v73 = ~v10;
    v36 = ((unint64_t)v33 + v10 + 8) & ~v10;
    v37 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v7 + 16);
    swift_retain();
    v38 = swift_retain();
    v37(v35, v36, v5, v38);
    v83 = a1;
    v39 = ((unint64_t)a1 + v12) & v80;
    v40 = ((unint64_t)a2 + v12) & v80;
    v81 = (void (*)(unint64_t, unint64_t, uint64_t))v37;
    ((void (*)(unint64_t, unint64_t, uint64_t))v37)(v39, v40, v5);
    *(_QWORD *)((v13 + v39) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v13 + v40) & 0xFFFFFFFFFFFFF8);
    *(_QWORD *)(v39 + v82) = *(_QWORD *)(v40 + v82);
    v41 = (_QWORD *)((v39 + v82 + 15) & 0xFFFFFFFFFFFFFFF8);
    v42 = (_QWORD *)((v40 + v82 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v41 = *v42;
    v41[1] = v42[1];
    v43 = (_QWORD *)(((unint64_t)v41 + 23) & 0xFFFFFFFFFFFFF8);
    v44 = (_QWORD *)(((unint64_t)v42 + 23) & 0xFFFFFFFFFFFFF8);
    *v43 = *v44;
    v45 = ((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8;
    v46 = ((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)v45 = *(_BYTE *)v46;
    *(_QWORD *)(v45 + 8) = *(_QWORD *)(v46 + 8);
    v47 = (v45 + 23) & 0xFFFFFFFFFFFFFFF8;
    v48 = (v46 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)v47 = *(_BYTE *)v48;
    *(_QWORD *)(v47 + 8) = *(_QWORD *)(v48 + 8);
    v49 = (_BYTE *)((v47 + 23) & v19);
    v50 = (_DWORD *)((v48 + 23) & v19);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v84)
    {
      if (v71 >= v72)
      {
        v52 = v76;
        v51 = v5;
        v31 = v83;
        if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v50, v71, v76))
          goto LABEL_21;
      }
      else
      {
        v51 = v5;
        v31 = v83;
        v52 = v76;
        if (!_s7Weather24LocationCompositionStateOwet_0(((unint64_t)v50 + v74) & v73, v72, v5))
        {
LABEL_21:
          v55 = *(void (**)(_BYTE *, _DWORD *, uint64_t))(v67 + 16);
          v55(v49, v50, v52);
          v81((unint64_t)&v49[v74] & v73, ((unint64_t)v50 + v74) & v73, v51);
          v56 = (unint64_t)&v49[v68] & ~v18;
          v57 = ((unint64_t)v50 + v68) & ~v18;
          v55((_BYTE *)v56, (_DWORD *)v57, v52);
          v31 = v83;
          v81((v74 + v56) & v73, (v74 + v57) & v73, v5);
          *(_QWORD *)((v69 + v56) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v69 + v57) & 0xFFFFFFFFFFFFF8);
          v58 = v77;
          v59 = v78;
          if (!v84)
            v49[v75] = 0;
          goto LABEL_25;
        }
      }
    }
    else
    {
      v52 = v76;
      v51 = v5;
      v31 = v83;
      if (!*((_BYTE *)v50 + v75))
        goto LABEL_21;
      v53 = *((unsigned __int8 *)v50 + v75) - 1;
      v54 = v75 & 0xFFFFFFF8;
      if ((v75 & 0xFFFFFFF8) != 0)
      {
        v53 = 0;
        v54 = *v50;
      }
      if ((v54 | v53) == 0xFFFFFFFF)
        goto LABEL_21;
    }
    memcpy(v49, v50, __n);
    v58 = v77;
    v59 = v78;
LABEL_25:
    *(_QWORD *)((unint64_t)&v49[v58] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v50 + v58) & 0xFFFFFFFFFFFFF8);
    v60 = &v49[v59];
    v61 = (char *)v50 + v59;
    *(_QWORD *)v60 = *(_QWORD *)((char *)v50 + v59);
    *((_QWORD *)v60 + 1) = *(_QWORD *)((char *)v50 + v59 + 8);
    v60[16] = *((_BYTE *)v50 + v59 + 16);
    v62 = *(_QWORD *)((char *)v50 + v59 + 24);
    v63 = *((_BYTE *)v50 + v59 + 32);
    swift_retain();
    swift_retain();
    sub_10008D47C(v62, v63);
    *((_QWORD *)v60 + 3) = v62;
    v60[32] = v63;
    v64 = *((_QWORD *)v61 + 5);
    LOBYTE(v62) = v61[48];
    sub_10008D47C(v64, v62);
    *((_QWORD *)v60 + 5) = v64;
    v60[48] = v62;
    v65 = *((_QWORD *)v61 + 7);
    LOBYTE(v62) = v61[64];
    sub_10008D47C(v65, v62);
    *((_QWORD *)v60 + 7) = v65;
    v60[64] = v62;
    return v31;
  }
  v30 = *a2;
  *a1 = *a2;
  v31 = (_QWORD *)(v30 + ((v18 + 16) & v19));
  swift_retain();
  return v31;
}

__n128 sub_10061D370(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void (*v12)(unint64_t, unint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *v20;
  _OWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _OWORD *v24;
  _OWORD *v25;
  _OWORD *v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  size_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  size_t v48;
  size_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  __n128 *v53;
  __n128 *v54;
  __n128 result;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  void (*v61)(unint64_t, unint64_t, uint64_t);
  unint64_t v62;
  uint64_t v63;

  *a1 = *a2;
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10;
  v62 = ~(unint64_t)v10;
  v12 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32);
  v12(((unint64_t)v6 + v11 + 8) & ~v11, ((unint64_t)v7 + v11 + 8) & ~v11, v8);
  v13 = *(_QWORD *)(v9 + 64);
  v14 = ((v11 + 16) & ~v11) + v13 + (v11 | 7);
  v63 = v8;
  v15 = ((unint64_t)a1 + v14) & ~(v10 | 7);
  v16 = ((unint64_t)a2 + v14) & ~(v10 | 7);
  v61 = v12;
  v12(v15, v16, v8);
  *(_QWORD *)((v13 + 7 + v15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v13 + 7 + v16) & 0xFFFFFFFFFFFFF8);
  v17 = ((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v18 = (_QWORD *)(v15 + v17);
  v19 = (_QWORD *)(v16 + v17);
  *v18 = *v19;
  v20 = (_OWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_OWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  v22 = (_QWORD *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFF8);
  v23 = (_QWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFF8);
  *v22 = *v23;
  v24 = (_OWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  v25 = (_OWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v24 = *v25;
  v26 = (_OWORD *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  v27 = (_OWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v26 = *v27;
  v28 = *(_QWORD *)(a3 + 16);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(unsigned __int8 *)(v29 + 80) | v10;
  v31 = (*(_BYTE *)(v29 + 80) | v10) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v32 = ((unint64_t)v26 + v30 + 16) & v31;
  v33 = ((unint64_t)v27 + v30 + 16) & v31;
  v34 = *(_DWORD *)(v29 + 84);
  v35 = *(unsigned int *)(v9 + 84);
  v36 = *(_QWORD *)(v29 + 64) + v10;
  v37 = (v36 & v62) + v13;
  v38 = v37 + v30;
  v39 = (v37 + 7 + ((v37 + v30) & ~v30)) & 0xFFFFFFFFFFFFFFF8;
  v40 = v39 + 8;
  v41 = v35 | v34;
  v60 = v37 + 7;
  if (v35 | v34)
  {
    if (v34 >= v35)
    {
      v43 = v33;
      v35 = *(unsigned int *)(v29 + 84);
      v42 = v28;
    }
    else
    {
      v42 = v63;
      v43 = (v36 + v33) & v62;
    }
    if (_s7Weather24LocationCompositionStateOwet_0(v43, v35, v42))
    {
LABEL_12:
      v48 = v39 + 9;
      if (v41)
        v49 = v40;
      else
        v49 = v48;
      memcpy((void *)v32, (const void *)v33, v49);
      if (v41)
        goto LABEL_16;
      v40 = v48;
LABEL_18:
      v50 = (_QWORD *)((v32 | 7) + v40);
      v51 = (_QWORD *)((v33 | 7) + v40);
      goto LABEL_19;
    }
  }
  else if (*(_BYTE *)(v33 + v40))
  {
    v44 = *(unsigned __int8 *)(v33 + v40) - 1;
    v45 = v40 & 0xFFFFFFF8;
    if ((v40 & 0xFFFFFFF8) != 0)
    {
      v44 = 0;
      v45 = *(_DWORD *)v33;
    }
    if ((v45 | v44) != 0xFFFFFFFF)
      goto LABEL_12;
  }
  v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32);
  v59(v32, v33, v28);
  v61((v36 + v32) & v62, (v36 + v33) & v62, v63);
  v46 = (v38 + v32) & ~v30;
  v47 = (v38 + v33) & ~v30;
  v59(v46, v47, v28);
  v61((v36 + v46) & v62, (v36 + v47) & v62, v63);
  *(_QWORD *)((v60 + v46) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v60 + v47) & 0xFFFFFFFFFFFFF8);
  if (!v41)
  {
    *(_BYTE *)(v32 + v40) = 0;
    v40 = v39 + 9;
    goto LABEL_18;
  }
LABEL_16:
  v50 = (_QWORD *)(v40 + v32);
  v51 = (_QWORD *)(v40 + v33);
LABEL_19:
  *v50 = *v51;
  v52 = ((v40 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v53 = (__n128 *)(v52 + v32);
  v54 = (__n128 *)(v52 + v33);
  result = *v54;
  *v53 = *v54;
  v53[1].n128_u8[0] = v54[1].n128_u8[0];
  v56 = v54[1].n128_u64[1];
  v53[2].n128_u8[0] = v54[2].n128_u8[0];
  v53[1].n128_u64[1] = v56;
  v57 = v54[2].n128_u64[1];
  v53[3].n128_u8[0] = v54[3].n128_u8[0];
  v53[2].n128_u64[1] = v57;
  v58 = v54[3].n128_u64[1];
  v53[4].n128_u8[0] = v54[4].n128_u8[0];
  v53[3].n128_u64[1] = v58;
  return result;
}

_QWORD *sub_10061D6E8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(unint64_t, unint64_t, uint64_t, __n128);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  void (*v51)(uint64_t, uint64_t);
  void (*v52)(unint64_t, uint64_t);
  void (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  int v58;
  size_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  void (*v61)(unint64_t, unint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  size_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  char v76;
  int v78;
  void (*v79)(unint64_t, unint64_t, uint64_t);
  size_t v80;
  size_t v81;
  size_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  _QWORD *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 & 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  v9 = swift_release();
  v10 = *(_QWORD *)(a3 + 24);
  v11 = *(_QWORD *)(v10 - 8);
  LODWORD(v6) = *(_DWORD *)(v11 + 80);
  v12 = v6;
  v88 = ~(unint64_t)v6;
  v13 = *(void (**)(unint64_t, unint64_t, uint64_t, __n128))(v11 + 40);
  v13(((unint64_t)v7 + v6 + 8) & v88, (v6 + 8 + v8) & v88, v10, v9);
  v14 = *(_QWORD *)(v11 + 64);
  v15 = ((v12 + 16) & ~v12) + v14 + (v12 | 7);
  v87 = a1;
  v16 = ((unint64_t)a1 + v15) & ~(v6 | 7);
  v17 = ((unint64_t)a2 + v15) & ~(v6 | 7);
  v89 = v10;
  v79 = (void (*)(unint64_t, unint64_t, uint64_t))v13;
  ((void (*)(uint64_t, uint64_t, uint64_t))v13)(v16, v17, v10);
  *(_QWORD *)((v14 + 7 + v16) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v14 + 7 + v17) & 0xFFFFFFFFFFFFF8);
  swift_release();
  v18 = ((v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v19 = (_QWORD *)(v16 + v18);
  v20 = (_QWORD *)(v17 + v18);
  *v19 = *v20;
  swift_bridgeObjectRelease();
  v21 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  v22 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v21 = *v22;
  swift_release();
  v21[1] = v22[1];
  v23 = (_QWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_QWORD *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFF8);
  *v23 = *v24;
  swift_release();
  v25 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
  v26 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v25 = *(_BYTE *)v26;
  *(_QWORD *)(v25 + 8) = *(_QWORD *)(v26 + 8);
  swift_release();
  v27 = (v25 + 23) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v26 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v27 = *(_BYTE *)v28;
  *(_QWORD *)(v27 + 8) = *(_QWORD *)(v28 + 8);
  swift_release();
  v29 = *(_QWORD *)(a3 + 16);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(unsigned __int8 *)(v30 + 80) | v6;
  v32 = (*(_BYTE *)(v30 + 80) | v6) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v33 = (v31 + 16 + v27) & v32;
  v34 = (v31 + 16 + v28) & v32;
  v35 = *(unsigned int *)(v30 + 84);
  v36 = *(unsigned int *)(v11 + 84);
  v37 = *(_QWORD *)(v30 + 64) + v6;
  v38 = (v37 & ~v12) + v14;
  v39 = ~v31;
  v40 = v38 + v31;
  v41 = (v38 + v31) & ~v31;
  v38 += 7;
  v90 = (v38 + v41) & 0xFFFFFFFFFFFFFFF8;
  v42 = v90 + 8;
  v86 = v36 | v35;
  v83 = v38;
  v84 = v40;
  v85 = v39;
  if (v36 | v35)
  {
    if (v35 >= v36)
    {
      v46 = _s7Weather24LocationCompositionStateOwet_0(v33, v35, v29);
      v43 = _s7Weather24LocationCompositionStateOwet_0(v34, v35, v29);
      if (v46)
      {
LABEL_4:
        if (!v43)
          goto LABEL_30;
LABEL_26:
        v57 = v90;
        v58 = v86;
        if (v86)
          v59 = v42;
        else
          v59 = v90 + 9;
        memcpy((void *)v33, (const void *)v34, v59);
        v56 = v87;
        goto LABEL_32;
      }
    }
    else
    {
      v78 = _s7Weather24LocationCompositionStateOwet_0((v37 + v33) & v88, v36, v89);
      v42 = v90 + 8;
      v43 = _s7Weather24LocationCompositionStateOwet_0((v37 + v34) & v88, v36, v89);
      if (v78)
        goto LABEL_4;
    }
    if (!v43)
    {
LABEL_23:
      v81 = v42;
      v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 40);
      v53(v33, v34, v29);
      v79((v37 + v33) & v88, (v37 + v34) & v88, v89);
      v54 = (v84 + v33) & v85;
      v55 = (v84 + v34) & v85;
      v53(v54, v55, v29);
      v42 = v81;
      v79((v37 + v54) & v88, (v37 + v55) & v88, v89);
      *(_QWORD *)((v83 + v54) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v83 + v55) & 0xFFFFFFFFFFFFF8);
      v56 = v87;
      v57 = v90;
      v58 = v86;
      goto LABEL_32;
    }
LABEL_22:
    v80 = v42;
    v51 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v51(v33, v29);
    v52 = *(void (**)(unint64_t, uint64_t))(v11 + 8);
    v52((v37 + v33) & v88, v89);
    v51((v84 + v33) & v85, v29);
    v42 = v80;
    v52((v37 + ((v84 + v33) & v85)) & v88, v89);
    goto LABEL_26;
  }
  if (!*(_BYTE *)(v33 + v42)
    || ((v44 = *(unsigned __int8 *)(v33 + v42) - 1, (_DWORD)v90 == -8) ? (v45 = 0) : (v44 = 0, v45 = *(_DWORD *)v33),
        (v45 | v44) == 0xFFFFFFFF))
  {
    if (!*(_BYTE *)(v34 + v42))
      goto LABEL_23;
    v49 = *(unsigned __int8 *)(v34 + v42) - 1;
    if ((_DWORD)v90 == -8)
    {
      v50 = 0;
    }
    else
    {
      v49 = 0;
      v50 = *(_DWORD *)v34;
    }
    if ((v50 | v49) == 0xFFFFFFFF)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (*(_BYTE *)(v34 + v42))
  {
    v47 = *(unsigned __int8 *)(v34 + v42) - 1;
    if ((_DWORD)v90 == -8)
    {
      v48 = 0;
    }
    else
    {
      v47 = 0;
      v48 = *(_DWORD *)v34;
    }
    if ((v48 | v47) != 0xFFFFFFFF)
      goto LABEL_26;
  }
LABEL_30:
  v82 = v42;
  v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32);
  v60(v33, v34, v29);
  v61 = *(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 32);
  v61((v37 + v33) & v88, (v37 + v34) & v88, v89);
  v62 = (v84 + v33) & v85;
  v63 = (v84 + v34) & v85;
  v60(v62, v63, v29);
  v42 = v82;
  v61((v37 + v62) & v88, (v37 + v63) & v88, v89);
  *(_QWORD *)((v83 + v62) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v83 + v63) & 0xFFFFFFFFFFFFF8);
  v56 = v87;
  v57 = v90;
  v58 = v86;
  if (!v86)
    *(_BYTE *)(v33 + v82) = 0;
LABEL_32:
  if (v58)
    v64 = v42;
  else
    v64 = v57 + 9;
  *(_QWORD *)(((v33 | 7) + v64) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((v34 | 7) + v64) & 0xFFFFFFFFFFFFF8);
  swift_release();
  v65 = ((v64 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v66 = v65 + v33;
  v67 = v65 + v34;
  *(_QWORD *)v66 = *(_QWORD *)(v65 + v34);
  *(_QWORD *)(v66 + 8) = *(_QWORD *)(v65 + v34 + 8);
  swift_release();
  *(_BYTE *)(v66 + 16) = *(_BYTE *)(v67 + 16);
  v68 = *(_BYTE *)(v67 + 32);
  v69 = *(_QWORD *)(v66 + 24);
  v70 = *(_BYTE *)(v66 + 32);
  *(_QWORD *)(v66 + 24) = *(_QWORD *)(v67 + 24);
  *(_BYTE *)(v66 + 32) = v68;
  sub_1000B15F8(v69, v70);
  v71 = *(_BYTE *)(v67 + 48);
  v72 = *(_QWORD *)(v66 + 40);
  v73 = *(_BYTE *)(v66 + 48);
  *(_QWORD *)(v66 + 40) = *(_QWORD *)(v67 + 40);
  *(_BYTE *)(v66 + 48) = v71;
  sub_1000B15F8(v72, v73);
  v74 = *(_BYTE *)(v67 + 64);
  v75 = *(_QWORD *)(v66 + 56);
  v76 = *(_BYTE *)(v66 + 64);
  *(_QWORD *)(v66 + 56) = *(_QWORD *)(v67 + 56);
  *(_BYTE *)(v66 + 64) = v74;
  sub_1000B15F8(v75, v76);
  return v56;
}

uint64_t sub_10061DCE4(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  char v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  int v43;
  BOOL v44;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  if (v8 <= 0x7FFFFFFF)
    v9 = 0x7FFFFFFF;
  else
    v9 = *(_DWORD *)(v7 + 84);
  if (v8 <= 0x7FFFFFFE)
    v10 = 2147483646;
  else
    v10 = *(_DWORD *)(v7 + 84);
  v11 = *(_QWORD *)(v6 - 8);
  v12 = *(unsigned int *)(v11 + 84);
  if (v8 <= v12)
    v13 = *(_DWORD *)(v11 + 84);
  else
    v13 = *(_DWORD *)(v7 + 84);
  v14 = v13 - 1;
  if (!v13)
    v14 = 0;
  if (v14 <= 0x7FFFFFFE)
    v15 = 2147483646;
  else
    v15 = v14;
  if (v15 <= v9)
    v16 = v9;
  else
    v16 = v15;
  if (v13)
    v17 = 8;
  else
    v17 = 16;
  if (!a2)
    return 0;
  v18 = *(_DWORD *)(v7 + 80);
  v19 = v18;
  v20 = *(_QWORD *)(v7 + 64);
  v21 = v18 | 7;
  v22 = ((v19 + 16) & ~v19) + v20 + (v19 | 7);
  v23 = (v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(unsigned __int8 *)(v11 + 80) | v18;
  v25 = (*(_BYTE *)(v11 + 80) | v18) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v26 = v24 + 16;
  v27 = *(_QWORD *)(v11 + 64) + v18;
  v28 = a2 - v16;
  if (a2 <= v16)
    goto LABEL_37;
  v29 = v17
      + (((v27 & ~v19) + v20 + (((v27 & ~v19) + v20 + v24) & ~v24) + 7) & 0xFFFFFFFFFFFFFFF8)
      + ((v26
        + ((((((((v23 + (v22 & ~v21) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)) & v25)
      + 73;
  v30 = 8 * v29;
  if (v29 > 3)
    goto LABEL_27;
  v31 = ((v28 + ~(-1 << v30)) >> v30) + 1;
  if (HIWORD(v31))
  {
    v32 = *(_DWORD *)&a1[v29];
    if (v32)
      goto LABEL_30;
LABEL_37:
    v36 = ~v19;
    if (v9 >= v15)
    {
      v39 = (unint64_t *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v8 & 0x80000000) != 0)
      {
        v37 = ((unint64_t)v39 + v19 + 8) & v36;
        return _s7Weather24LocationCompositionStateOwet_0(v37, v8, v5);
      }
      v40 = *v39;
      goto LABEL_49;
    }
    v37 = (unint64_t)&a1[v22] & ~v21;
    if (v10 == v16)
    {
      if (v8 <= 0x7FFFFFFD)
      {
        v38 = *(_QWORD *)((v20 + 7 + v37) & 0xFFFFFFFFFFFFF8);
        if (v38 >= 0xFFFFFFFF)
          LODWORD(v38) = -1;
        if ((v38 + 1) >= 2)
          return v38;
        else
          return 0;
      }
      return _s7Weather24LocationCompositionStateOwet_0(v37, v8, v5);
    }
    v41 = (unint64_t *)(v37 + v23 + 8);
    if (v16 == 0x7FFFFFFF)
    {
      v40 = *v41;
LABEL_49:
      if (v40 >= 0xFFFFFFFF)
        LODWORD(v40) = -1;
      return (v40 + 1);
    }
    if (v13)
    {
      v42 = (v26
           + (((((((((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
             + 23) & 0xFFFFFFFFFFFFFFF8)) & v25;
      if (v12 >= v8)
      {
        v8 = v12;
        v5 = v6;
      }
      else
      {
        v42 = (v27 + v42) & v36;
      }
      v43 = _s7Weather24LocationCompositionStateOwet_0(v42, v8, v5);
      v44 = v43 != 0;
      result = (v43 - 1);
      if ((_DWORD)result != 0 && v44)
        return result;
    }
    return 0;
  }
  if (v31 > 0xFF)
  {
    v32 = *(unsigned __int16 *)&a1[v29];
    if (*(_WORD *)&a1[v29])
      goto LABEL_30;
    goto LABEL_37;
  }
  if (v31 < 2)
    goto LABEL_37;
LABEL_27:
  v32 = a1[v29];
  if (!a1[v29])
    goto LABEL_37;
LABEL_30:
  v33 = (v32 - 1) << v30;
  if (v29 >= 4)
    v33 = 0;
  if ((_DWORD)v29 == 1)
    v34 = *a1;
  else
    v34 = *(_DWORD *)a1;
  return v16 + (v34 | v33) + 1;
}

void sub_10061DFBC(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  char v25;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v9 = *(_DWORD *)(v7 + 80);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = *(_DWORD *)(v7 + 84);
  v11 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (v8 <= *(_DWORD *)(v11 + 84))
    v12 = *(_DWORD *)(v11 + 84);
  else
    v12 = *(_DWORD *)(v7 + 84);
  v13 = v12 - 1;
  if (!v12)
    v13 = 0;
  if (v13 <= 0x7FFFFFFE)
    v14 = 2147483646;
  else
    v14 = v13;
  if (v14 <= v10)
    v15 = v10;
  else
    v15 = v14;
  v16 = *(_QWORD *)(v7 + 64);
  v17 = ((*(_DWORD *)(v7 + 80) + 16) & ~(unint64_t)*(_DWORD *)(v7 + 80))
      + v16;
  v18 = v9 | 7;
  v19 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(unsigned __int8 *)(v11 + 80) | v9;
  v21 = (((*(_QWORD *)(v11 + 64) + v9) & ~(unint64_t)v9)
       + v16
       + ((((*(_QWORD *)(v11 + 64) + v9) & ~(unint64_t)v9) + v16 + v20) & ~v20)
       + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = v21 + 8;
  v23 = v21 + 9;
  if (v12)
    v23 = v22;
  v24 = ((v23 + 7) & 0xFFFFFFFFFFFFFFF8)
      + ((v20
        + 16
        + ((((((((v19 + ((v17 + v18) & ~v18) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)) & (v20 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8))
      + 73;
  v25 = 8 * v24;
  v26 = a3 >= v15;
  v27 = a3 - v15;
  if (v27 != 0 && v26)
  {
    if (v24 <= 3)
    {
      v28 = ((v27 + ~(-1 << v25)) >> v25) + 1;
      if (HIWORD(v28))
      {
        v6 = &dword_100000004;
      }
      else
      {
        v6 = v28 > 1;
        if (v28 >= 0x100)
          v6 = 2;
      }
    }
    else
    {
      v6 = &_mh_execute_header.magic + 1;
    }
  }
  if (v15 >= a2)
    __asm { BR              X28 }
  v29 = ~v15 + a2;
  if (v24 < 4)
  {
    v29 &= ~(-1 << v25);
    bzero(a1, v24);
    if ((_DWORD)v24 == 1)
    {
      *a1 = v29;
      goto LABEL_32;
    }
  }
  else
  {
    bzero(a1, v24);
  }
  *(_DWORD *)a1 = v29;
LABEL_32:
  __asm { BR              X10 }
}

void sub_10061E1F0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x10061E428);
}

void sub_10061E1F8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x10061E200);
  JUMPOUT(0x10061E428);
}

void sub_10061E2A4()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
  JUMPOUT(0x10061E428);
}

void sub_10061E2AC()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x10061E428);
}

void sub_10061E2B4()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x10061E428);
}

void sub_10061E2BC(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, int a5, int a6)
{
  int v6;
  size_t v7;
  unsigned int v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;

  *(_WORD *)&v10[v11] = 0;
  if (a2)
  {
    if (v9 < v8)
    {
      if (a6 == a5)
      {
        if (a3 <= 0x7FFFFFFD)
        {
          if (a2 <= 0x7FFFFFFE)
            JUMPOUT(0x10061E3D8);
          JUMPOUT(0x10061E378);
        }
        JUMPOUT(0x10061E35CLL);
      }
      JUMPOUT(0x10061E2C8);
    }
    if (v9 >= a2)
      JUMPOUT(0x10061E2E4);
    if ((_DWORD)v7)
    {
      if (v7 <= 3)
        v6 = v7;
      else
        v6 = 4;
      bzero(v10, v7);
      __asm { BR              X10 }
    }
  }
  JUMPOUT(0x10061E428);
}

void sub_10061E3EC()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x10061E428);
}

void sub_10061E3F4()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x10061E428);
}

uint64_t sub_10061E488@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t OpaqueTypeConformance2;
  void (*v28)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;

  v34 = a1;
  v35 = a3;
  v5 = *(_QWORD *)(a2 - 8);
  v31 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(a1);
  v30 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  WitnessTable = swift_getWitnessTable(&unk_1009B84A0, v7);
  v9 = type metadata accessor for _ViewModifier_Content(255, a2, WitnessTable);
  v32 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v9);
  v36 = v9;
  v37 = &type metadata for Bool;
  v38 = v32;
  v39 = &protocol witness table for Bool;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v36, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v33 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v30 - v14;
  v16 = *(_QWORD *)(v3 + 16);
  v17 = *(_BYTE *)(v3 + 24);
  sub_10008D47C(v16, v17);
  sub_100109B54();
  v19 = v18;
  sub_1000B15F8(v16, v17);
  LOBYTE(v36) = v19 & 1;
  v20 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v30, v3, a2);
  v21 = *(unsigned __int8 *)(v5 + 80);
  v22 = (v21 + 48) & ~v21;
  v23 = swift_allocObject(&unk_100B85308, v22 + v31, v21 | 7);
  v24 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v23 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v23 + 32) = v24;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v23 + v22, v20, a2);
  v25 = swift_checkMetadataState(0, v9);
  v26 = v32;
  View.onChange<A>(of:initial:_:)(&v36, 0, sub_1006221C0, v23, v25, &type metadata for Bool, v32, &protocol witness table for Bool);
  swift_release();
  v36 = v25;
  v37 = &type metadata for Bool;
  v38 = v26;
  v39 = &protocol witness table for Bool;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v36, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  sub_1000B2074(v12, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v28 = *(void (**)(char *, uint64_t))(v33 + 8);
  v28(v12, OpaqueTypeMetadata2);
  sub_1000B1100((uint64_t)v15, OpaqueTypeMetadata2, v35);
  return ((uint64_t (*)(char *, uint64_t))v28)(v15, OpaqueTypeMetadata2);
}

void sub_10061E710(_BYTE *a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _BYTE v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v36 = a3;
  v38 = a4;
  v39 = a5;
  v40 = a6;
  v41 = a7;
  v13 = type metadata accessor for TransitionContext(255, (uint64_t)&v38);
  v14 = type metadata accessor for Optional(0, v13);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v34 - v16;
  __chkstk_darwin(v18);
  if (*a1 == 1 && (*a2 & 1) == 0)
  {
    v34 = v20;
    v35 = (char *)&v34 - v19;
    v38 = a4;
    v39 = a5;
    v40 = a6;
    v41 = a7;
    v21 = (int *)type metadata accessor for RebuildPageWhenSidebarCollapsesDuringTransitionModifier(0, (uint64_t)&v38);
    v22 = v36;
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v36 + v21[15], v14);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v17, 1, v13) == 1)
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    }
    else
    {
      v24 = v34;
      v23 = v35;
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v35, v17, v13);
      v38 = a4;
      v39 = a5;
      v40 = a6;
      v41 = a7;
      v25 = type metadata accessor for Page(0, (uint64_t)&v38);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v23[*(int *)(v25 + 52)], v22 + v21[14], a5, *(_QWORD *)(a7 + 8)) & 1) != 0)
      {
        v26 = v22;
        swift_retain();
        sub_1007A632C();
        v28 = v27;
        swift_release();
        *(_BYTE *)(v28 + 16) = 1;
        swift_release();
        v29 = (uint64_t *)(v26 + v21[16]);
        v31 = v29[1];
        v32 = *((_BYTE *)v29 + 16);
        v38 = *v29;
        v30 = v38;
        v39 = v31;
        LOBYTE(v40) = v32;
        swift_retain();
        swift_retain();
        v33 = sub_1000BA294((uint64_t *)&unk_100BD4270);
        Binding.wrappedValue.getter(v33);
        v38 = v30;
        v39 = v31;
        LOBYTE(v40) = v32;
        v37[0] = (v37[1] & 1) == 0;
        Binding.wrappedValue.setter(v37, v33);
        swift_release();
        swift_release();
      }
      (*(void (**)(char *, uint64_t))(v24 + 8))(v23, v13);
    }
  }
}

uint64_t sub_10061E964(uint64_t a1)
{
  return sub_10005E578(a1, sub_10061BE70) & 1;
}

uint64_t sub_10061E984()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  v37 = v0[2];
  v2 = v37;
  v38 = v1;
  v39 = v3;
  v40 = v4;
  v5 = (int *)type metadata accessor for AnimatableTabView(0, (uint64_t)&v37);
  sub_1000D0A64();
  v33 = v6;
  v34 = v7;
  v8 = *(_QWORD *)(v1 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v35 = *(_QWORD *)(v8 + 64);
  v36 = v10;
  v11 = (char *)v0 + v7;
  sub_1000EB098();
  sub_1000DAD14();
  v12 = type metadata accessor for Binding(0, v1);
  v13 = *(_QWORD *)(v8 + 8);
  ((void (*)(char *, uint64_t))v13)(&v11[*(int *)(v12 + 32)], v1);
  ((void (*)(char *, uint64_t))v13)(&v11[v5[13]], v1);
  v14 = type metadata accessor for State(0, v1);
  sub_1000C4CCC(v14);
  sub_1000C6F00(v5[14]);
  sub_10009C9A4(v5[15]);
  sub_10009C9A4(v5[16]);
  sub_1000B3004(v5[17]);
  v15 = sub_1000B3004(v5[18]);
  v16 = &v11[v5[19]];
  v37 = v2;
  v38 = v1;
  v39 = v3;
  v40 = v4;
  if (!sub_1000BB234(v15, (uint64_t)&v37))
  {
    v32 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
    v32((uint64_t)v16, v2);
    v37 = v2;
    v38 = v1;
    v39 = v3;
    v40 = v4;
    v17 = type metadata accessor for Page(0, (uint64_t)&v37);
    v18 = sub_1000BEF24(v17);
    ((void (*)(uint64_t))v13)(v18);
    v19 = (uint64_t)&v16[*(int *)(v13 + 52)];
    sub_1000D0DE4(v19, v20, v21, v22, v23, v24, v25, v26, v31, v32);
    ((void (*)(uint64_t, uint64_t))v13)(v19 + *(int *)(v3 + 52), v1);
  }
  v27 = (v9 + ((v33 + v34 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v9;
  v28 = type metadata accessor for Optional(255, v13);
  v29 = sub_1000C3DC4(v28);
  sub_1000C4CCC(v29);
  sub_1000B3004(v5[20]);
  sub_1000C1B20(v5[22]);
  sub_1000C1B20(v5[23]);
  sub_1000C1B20(v5[24]);
  ((void (*)(char *, uint64_t))v13)((char *)v0 + v27, v1);
  return swift_deallocObject(v0, v27 + v35, v36 | v9 | 7);
}

uint64_t sub_10061EB84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v5 = sub_1000DA6A8();
  v7 = *(_QWORD *)(type metadata accessor for AnimatableTabView(v5, v6) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  return sub_10061BFB0(v1 + v8, *(_QWORD *)(v1 + v9), v1 + ((v10 + v9 + 8) & ~v10), v0, v2, v3, v4);
}

uint64_t sub_10061EC0C()
{
  uint64_t *v0;

  return sub_10061C144(v0[6], v0[7], v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10061EC30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];

  v5 = v2[3];
  v6 = v2[4];
  v7 = v2[5];
  v10[0] = v2[2];
  v4 = v10[0];
  v10[1] = v5;
  v10[2] = v6;
  v10[3] = v7;
  sub_1000C5740(a1, (uint64_t)v10);
  return sub_10061B128((uint64_t)v2 + v8, v4, v5, v6, v7, a2);
}

uint64_t sub_10061EC98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];

  v6 = v2[3];
  v7 = v2[4];
  v8 = v2[5];
  v11[0] = v2[2];
  v5 = v11[0];
  v11[1] = v6;
  v11[2] = v7;
  v11[3] = v8;
  sub_1000C5740(a1, (uint64_t)v11);
  return sub_10061B464(a1, (uint64_t)v2 + v9, v5, v6, v7, v8, a2);
}

uint64_t sub_10061ED0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10061B6BC(v1[6], v1[7], v1[2], v1[3], v1[4], v1[5], a1);
}

_QWORD *sub_10061ED20@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];

  v4 = v1[5];
  v5 = v1[6];
  v6 = v1[7];
  v8[0] = v1[4];
  v3 = v8[0];
  v8[1] = v4;
  v8[2] = v5;
  v8[3] = v6;
  type metadata accessor for AnimatableTabView(0, (uint64_t)v8);
  sub_1000DC4B4();
  return sub_10061AEF0(v3, v4, v5, v6, a1);
}

void sub_10061ED94()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = v0[5];
  v3 = v0[6];
  v4 = v0[7];
  v25 = v0[4];
  v2 = v25;
  v26 = v1;
  v27 = v3;
  v28 = v4;
  v5 = (int *)type metadata accessor for AnimatableTabView(0, (uint64_t)&v25);
  v6 = (*(unsigned __int8 *)(*((_QWORD *)v5 - 1) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v5 - 1) + 80);
  swift_unknownObjectRelease(v0[2]);
  sub_1000EB098();
  sub_1000DAD14();
  v7 = sub_100110274();
  sub_1000B48E0((uint64_t)v0 + v6 + *(int *)(v7 + 32));
  sub_1000B48E0((uint64_t)v0 + v6 + v5[13]);
  v8 = sub_100099644();
  sub_1000C4CCC(v8);
  sub_1000C6F00(v5[14]);
  sub_10009C9A4(v5[15]);
  sub_10009C9A4(v5[16]);
  sub_1000B3004(v5[17]);
  v9 = sub_1000B3004(v5[18]);
  v10 = (char *)v0 + v6 + v5[19];
  v25 = v2;
  v26 = v1;
  v27 = v3;
  v28 = v4;
  if (!sub_1000BB234(v9, (uint64_t)&v25))
  {
    sub_1000C6150();
    v25 = v2;
    v26 = v1;
    v27 = v3;
    v28 = v23;
    v11 = type metadata accessor for Page(0, (uint64_t)&v25);
    v12 = sub_1000B48E0((uint64_t)&v10[*(int *)(v11 + 52)]);
    sub_1000CFE8C(v12, v13, v14, v15, v16, v17, v18, v19, v22, v23, v24);
    sub_1000B48E0(v4 + *(int *)(v11 + 52));
  }
  v20 = sub_1000CD8E0();
  v21 = sub_1000C3DC4(v20);
  sub_1000C4CCC(v21);
  sub_1000B3004(v5[20]);
  sub_1000BC760();
  sub_1000BDA2C();
}

uint64_t sub_10061EED8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v4 = v1[5];
  v5 = v1[6];
  v6 = v1[7];
  v9[0] = v1[4];
  v3 = v9[0];
  v9[1] = v4;
  v9[2] = v5;
  v9[3] = v6;
  type metadata accessor for AnimatableTabView(0, (uint64_t)v9);
  sub_1000DC4B4();
  return sub_10061AF54(a1, v1[2], v1[3], (uint64_t)v1 + v7, v3, v4, v5, v6);
}

uint64_t *sub_10061EF48(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  size_t v18;
  int v19;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(unint64_t, unint64_t, uint64_t);
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  void (*v47)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  size_t __n;
  uint64_t *v57;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = v8;
  v10 = *(_QWORD *)(v6 + 64) + v8;
  v11 = (v10 & ~(unint64_t)v8) + *(_QWORD *)(v7 + 64);
  v12 = *(_DWORD *)(v6 + 80) | v8;
  v13 = v12;
  v14 = v12 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v15 = (v11 + 7 + ((v11 + v13) & ~v13)) & 0xFFFFFFFFFFFFFFF8;
  v16 = v15 + 8;
  v17 = *(_DWORD *)(v7 + 84) | *(_DWORD *)(v6 + 84);
  v18 = v15 + 9;
  if (v17)
    v18 = v16;
  v19 = v12 & 0x100000;
  if (v13 <= 7
    && v19 == 0
    && ((((v18 + ((v13 + 16 + ((v11 + 7) & 0xFFFFFFFFFFFFFFF8)) & v14) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
     + 16 <= 0x18)
  {
    v49 = *(_DWORD *)(v6 + 84);
    v50 = *(_DWORD *)(v7 + 84);
    v48 = v11 + v13;
    v53 = *(_QWORD *)(a3 + 16);
    v54 = v16;
    __n = v18;
    v24 = ~v9;
    v47 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v47(a1, a2, v4);
    v26 = ((unint64_t)a1 + v10) & v24;
    v52 = v10;
    v27 = (unint64_t)a2 + v10;
    v28 = v24;
    v29 = v27 & v24;
    v30 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
    v30(v26, v29, v5);
    v57 = a1;
    v31 = (_QWORD *)(((unint64_t)a1 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
    v32 = (_QWORD *)(((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v31 = *v32;
    v31[1] = v32[1];
    v33 = ((unint64_t)v31 + 23) & v14;
    v34 = ((unint64_t)v32 + 23) & v14;
    swift_retain();
    if (v17)
    {
      if (v49 >= v50)
      {
        v35 = v5;
        if (!_s7Weather24LocationCompositionStateOwet_0(v34, v49, v53))
          goto LABEL_20;
      }
      else
      {
        v35 = v5;
        if (!_s7Weather24LocationCompositionStateOwet_0((v52 + v34) & v28, v50, v5))
        {
LABEL_20:
          v47((uint64_t *)v33, (uint64_t *)v34, v53);
          v30((v52 + v33) & v28, (v52 + v34) & v28, v35);
          v55 = v17;
          v38 = v28;
          v39 = (v48 + v33) & ~v13;
          v51 = (void (*)(uint64_t, uint64_t, uint64_t))v30;
          v40 = (v48 + v34) & ~v13;
          v47((uint64_t *)v39, (uint64_t *)v40, v53);
          v51((v52 + v39) & v38, (v52 + v40) & v38, v35);
          *(_QWORD *)((v11 + 7 + v39) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v11 + 7 + v40) & 0xFFFFFFFFFFFFF8);
          v41 = __n;
          if (!v55)
            *(_BYTE *)(v33 + v54) = 0;
          goto LABEL_24;
        }
      }
    }
    else
    {
      v35 = v5;
      if (!*(_BYTE *)(v34 + v54))
        goto LABEL_20;
      v36 = *(unsigned __int8 *)(v34 + v54) - 1;
      v37 = v54 & 0xFFFFFFF8;
      if ((v54 & 0xFFFFFFF8) != 0)
      {
        v36 = 0;
        v37 = *(_DWORD *)v34;
      }
      if ((v37 | v36) == 0xFFFFFFFF)
        goto LABEL_20;
    }
    v41 = __n;
    memcpy((void *)v33, (const void *)v34, __n);
LABEL_24:
    v42 = ((v33 | 7) + v41) & 0xFFFFFFFFFFFFFFF8;
    v43 = ((v34 | 7) + v41) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)v42 = *(_BYTE *)v43;
    *(_QWORD *)(v42 + 8) = *(_QWORD *)(v43 + 8);
    v44 = (_QWORD *)((v42 + 23) & 0xFFFFFFFFFFFFFFF8);
    v45 = (_QWORD *)((v43 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v44 = *v45;
    v44[1] = v45[1];
    swift_retain();
    swift_retain();
    v23 = v57;
    goto LABEL_25;
  }
  v22 = *a2;
  *a1 = *a2;
  v23 = (uint64_t *)(v22 + ((v13 + 16) & v14));
LABEL_25:
  swift_retain();
  return v23;
}

uint64_t sub_10061F27C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  size_t v33;
  unint64_t v34;
  _OWORD *v35;
  _OWORD *v36;
  uint64_t v38;
  void (*v39)(unint64_t, unint64_t, uint64_t);
  void (*v40)(uint64_t, uint64_t, uint64_t);
  unint64_t v41;
  int v42;
  unint64_t v43;

  v5 = a1;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  v40(a1, a2, v6);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = *(_QWORD *)(v7 + 64) + *(_DWORD *)(v9 + 80);
  v41 = ~(unint64_t)*(_DWORD *)(v9 + 80);
  v39 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32);
  v39((v11 + v5) & v41, (v11 + a2) & v41, v8);
  v12 = (v11 & v41) + *(_QWORD *)(v9 + 64);
  v13 = v12 + 7;
  v14 = (_OWORD *)((v12 + 7 + v5) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_OWORD *)((v12 + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v15;
  v16 = *(unsigned __int8 *)(v7 + 80) | v10;
  v17 = (*(_BYTE *)(v7 + 80) | v10) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v18 = ((unint64_t)v14 + v16 + 16) & v17;
  v19 = ((unint64_t)v15 + v16 + 16) & v17;
  v20 = *(unsigned int *)(v7 + 84);
  v21 = *(unsigned int *)(v9 + 84);
  v22 = v12 + v16;
  v43 = (v12 + 7 + ((v12 + v16) & ~v16)) & 0xFFFFFFFFFFFFFFF8;
  v23 = v43 + 8;
  v42 = v21 | v20;
  if (v21 | v20)
  {
    if (v20 >= v21)
    {
      v24 = ((unint64_t)v15 + v16 + 16) & v17;
      v21 = v20;
      v25 = v6;
    }
    else
    {
      v24 = (v11 + v19) & v41;
      v25 = v8;
    }
    if (_s7Weather24LocationCompositionStateOwet_0(v24, v21, v25))
    {
LABEL_12:
      v31 = v43;
      v32 = v42;
      if (v42)
        v33 = v43 + 8;
      else
        v33 = v43 + 9;
      memcpy((void *)v18, (const void *)v19, v33);
      goto LABEL_16;
    }
  }
  else if (*(_BYTE *)(v19 + v23))
  {
    v26 = *(unsigned __int8 *)(v19 + v23) - 1;
    v27 = v23 & 0xFFFFFFF8;
    if ((v23 & 0xFFFFFFF8) != 0)
    {
      v26 = 0;
      v27 = *(_DWORD *)v19;
    }
    if ((v27 | v26) != 0xFFFFFFFF)
      goto LABEL_12;
  }
  v38 = v5;
  v28 = ~v16;
  v40(v18, v19, v6);
  v39((v11 + v18) & v41, (v11 + v19) & v41, v8);
  v29 = (v22 + v18) & ~v16;
  v30 = (v22 + v19) & v28;
  v5 = v38;
  v40(v29, v30, v6);
  v39((v11 + v29) & v41, (v11 + v30) & v41, v8);
  *(_QWORD *)((v13 + v29) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v13 + v30) & 0xFFFFFFFFFFFFF8);
  v31 = v43;
  v32 = v42;
  if (!v42)
    *(_BYTE *)(v18 + v23) = 0;
LABEL_16:
  v34 = v31 + 9;
  if (v32)
    v34 = v43 + 8;
  v35 = (_OWORD *)(((v18 | 7) + v34) & 0xFFFFFFFFFFFFFFF8);
  v36 = (_OWORD *)(((v19 | 7) + v34) & 0xFFFFFFFFFFFFFFF8);
  *v35 = *v36;
  *(_OWORD *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFF8);
  return v5;
}

uint64_t sub_10061F510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  size_t v26;
  void *v27;
  const void *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  void (*v34)(unint64_t, unint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  void (*v40)(uint64_t, uint64_t);
  void (*v41)(unint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  int v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  void (*v52)(unint64_t, unint64_t);
  void (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;

  v3 = a3;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v51(a1, a2, v6);
  v8 = *(_QWORD *)(v3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  LODWORD(v3) = *(_DWORD *)(v9 + 80);
  v10 = *(_QWORD *)(v7 + 64) + *(_DWORD *)(v9 + 80);
  v59 = ~(unint64_t)*(_DWORD *)(v9 + 80);
  v60 = v8;
  v52 = *(void (**)(unint64_t, unint64_t))(v9 + 40);
  v52((v10 + a1) & v59, (v10 + a2) & v59);
  v11 = (v10 & v59) + *(_QWORD *)(v9 + 64);
  v12 = v11 + 7;
  v58 = a1;
  v13 = (_QWORD *)((v11 + 7 + a1) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)((v11 + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  swift_release();
  v13[1] = v14[1];
  v15 = *(unsigned __int8 *)(v7 + 80) | v3;
  v16 = (*(_BYTE *)(v7 + 80) | v3) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)v13 + v15 + 16) & v16;
  v18 = ((unint64_t)v14 + v15 + 16) & v16;
  v19 = *(unsigned int *)(v7 + 84);
  v20 = *(unsigned int *)(v9 + 84);
  v57 = (v11 + 7 + ((v11 + v15) & ~v15)) & 0xFFFFFFFFFFFFFFF8;
  v21 = v57 + 8;
  v56 = v20 | v19;
  v54 = v11 + v15;
  v55 = ~v15;
  if (v20 | v19)
  {
    if (v19 >= v20)
    {
      v31 = _s7Weather24LocationCompositionStateOwet_0(v17, v19, v6);
      v22 = _s7Weather24LocationCompositionStateOwet_0(v18, v19, v6);
      if (v31)
      {
LABEL_4:
        if (v22)
        {
LABEL_5:
          v23 = v57;
          v24 = v56;
          v25 = v57 + 8;
          if (v56)
            v26 = v57 + 8;
          else
            v26 = v57 + 9;
          v27 = (void *)v17;
          v28 = (const void *)v18;
LABEL_31:
          memcpy(v27, v28, v26);
          v37 = v58;
          goto LABEL_33;
        }
        goto LABEL_21;
      }
    }
    else
    {
      v50 = _s7Weather24LocationCompositionStateOwet_0((v10 + v17) & v59, v20, v60);
      v22 = _s7Weather24LocationCompositionStateOwet_0((v10 + v18) & v59, v20, v60);
      if (v50)
        goto LABEL_4;
    }
    if (!v22)
    {
LABEL_32:
      v51(v17, v18, v6);
      ((void (*)(unint64_t, unint64_t, uint64_t))v52)((v10 + v17) & v59, (v10 + v18) & v59, v60);
      v42 = (v54 + v17) & v55;
      v43 = (v54 + v18) & v55;
      v51(v42, v43, v6);
      ((void (*)(unint64_t, unint64_t, uint64_t))v52)((v10 + v42) & v59, (v10 + v43) & v59, v60);
      *(_QWORD *)((v12 + v42) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v12 + v43) & 0xFFFFFFFFFFFFF8);
      v23 = v57;
      v37 = v58;
      v25 = v57 + 8;
      v24 = v56;
      goto LABEL_33;
    }
LABEL_27:
    v40 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v40(v17, v6);
    v41 = *(void (**)(unint64_t, uint64_t))(v9 + 8);
    v41((v10 + v17) & v59, v60);
    v40((v54 + v17) & v55, v6);
    v41((v10 + ((v54 + v17) & v55)) & v59, v60);
    v23 = v57;
    v24 = v56;
    v25 = v57 + 8;
    if (v56)
      v26 = v57 + 8;
    else
      v26 = v57 + 9;
    v27 = (void *)v17;
    v28 = (const void *)v18;
    goto LABEL_31;
  }
  if (!*(_BYTE *)(v17 + v21)
    || ((v29 = *(unsigned __int8 *)(v17 + v21) - 1, (_DWORD)v57 == -8) ? (v30 = 0) : (v29 = 0, v30 = *(_DWORD *)v17),
        (v30 | v29) == 0xFFFFFFFF))
  {
    if (!*(_BYTE *)(v18 + v21))
      goto LABEL_32;
    v38 = *(unsigned __int8 *)(v18 + v21) - 1;
    v39 = v57 + 8;
    if ((_DWORD)v57 != -8)
    {
      v38 = 0;
      v39 = *(_DWORD *)v18;
    }
    if ((v39 | v38) == 0xFFFFFFFF)
      goto LABEL_32;
    goto LABEL_27;
  }
  if (*(_BYTE *)(v18 + v21))
  {
    v32 = *(unsigned __int8 *)(v18 + v21) - 1;
    v33 = v57 + 8;
    if ((_DWORD)v57 != -8)
    {
      v32 = 0;
      v33 = *(_DWORD *)v18;
    }
    if ((v33 | v32) != 0xFFFFFFFF)
      goto LABEL_5;
  }
LABEL_21:
  v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  v53(v17, v18, v6);
  v34 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32);
  v34((v10 + v17) & v59, (v10 + v18) & v59, v60);
  v35 = (v54 + v17) & v55;
  v36 = (v54 + v18) & v55;
  v53(v35, v36, v6);
  v34((v10 + v35) & v59, (v10 + v36) & v59, v60);
  *(_QWORD *)((v12 + v35) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v12 + v36) & 0xFFFFFFFFFFFFF8);
  v23 = v57;
  v37 = v58;
  v25 = v57 + 8;
  v24 = v56;
  if (!v56)
    *(_BYTE *)(v17 + v57 + 8) = 0;
LABEL_33:
  v44 = v23 + 9;
  if (v24)
    v44 = v25;
  v45 = ((v17 | 7) + v44) & 0xFFFFFFFFFFFFFFF8;
  v46 = ((v18 | 7) + v44) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v45 = *(_BYTE *)v46;
  *(_QWORD *)(v45 + 8) = *(_QWORD *)(v46 + 8);
  swift_release();
  v47 = (_QWORD *)((v45 + 23) & 0xFFFFFFFFFFFFFFF8);
  v48 = (_QWORD *)((v46 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v47 = *v48;
  swift_release();
  v47[1] = v48[1];
  swift_release();
  return v37;
}

uint64_t sub_10061F9BC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v30;
  unsigned int v31;

  v5 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(v4 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= v7)
    v10 = *(_DWORD *)(v6 + 84);
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  if (v10 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = v10;
  v13 = *(_DWORD *)(v8 + 80);
  v14 = *(_DWORD *)(v8 + 80);
  v15 = *(_QWORD *)(v6 + 64) + v14;
  v16 = (v15 & ~v14) + *(_QWORD *)(v8 + 64);
  v17 = *(unsigned __int8 *)(v6 + 80) | v13;
  v18 = (v16 + 7 + ((v16 + v17) & ~v17)) & 0xFFFFFFFFFFFFFFF8;
  v19 = v18 + 8;
  v20 = v18 + 9;
  if (v10)
    v21 = v19;
  else
    v21 = v20;
  if (!a2)
    return 0;
  v22 = v17 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v23 = v17 + 16;
  if (v12 < a2)
  {
    if (((((((v21 + (((_DWORD)v23 + (((_DWORD)v16 + 7) & 0xFFFFFFF8)) & v22) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v24 = 2;
    else
      v24 = a2 - v12 + 1;
    if (v24 >= 0x10000)
      v25 = 4;
    else
      v25 = 2;
    if (v24 < 0x100)
      v25 = 1;
    if (v24 >= 2)
      v26 = v25;
    else
      v26 = 0;
    __asm { BR              X19 }
  }
  v27 = ~v14;
  if (v10 >= 0x7FFFFFFF)
  {
    if (v7 >= v9)
    {
      v9 = v7;
      v4 = v5;
    }
    else
    {
      a1 = (v15 + a1) & v27;
    }
    return _s7Weather24LocationCompositionStateOwet_0(a1, v9, v4);
  }
  v28 = (v23 + ((a1 + v16 + 7) & 0xFFFFFFFFFFFFFFF8)) & v22;
  if (v11 == v12)
  {
    if (v10 < 2)
      return 0;
    if (v7 >= v9)
    {
      v9 = v7;
      v4 = v5;
    }
    else
    {
      v28 = (v15 + v28) & v27;
    }
    v31 = _s7Weather24LocationCompositionStateOwet_0(v28, v9, v4);
    if (v31 >= 2)
      return v31 - 1;
    else
      return 0;
  }
  else
  {
    v30 = *(_QWORD *)(((((v28 | 7) + (v19 | (v10 == 0))) & 0xFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8);
    if (v30 >= 0xFFFFFFFF)
      LODWORD(v30) = -1;
    return (v30 + 1);
  }
}

void sub_10061FBE4(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;

  v5 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 80);
  if (*(_DWORD *)(v7 + 84) <= *(_DWORD *)(v6 + 84))
    v9 = *(_DWORD *)(v6 + 84);
  else
    v9 = *(_DWORD *)(v7 + 84);
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = ((*(_QWORD *)(v6 + 64) + *(_DWORD *)(v7 + 80)) & ~(unint64_t)*(_DWORD *)(v7 + 80))
      + *(_QWORD *)(v7 + 64);
  v12 = *(unsigned __int8 *)(v6 + 80) | v8;
  v13 = (v12 + 16 + ((v11 + 7) & 0xFFFFFFFFFFFFFFF8)) & (v12 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8);
  v14 = (v11 + 7 + ((v11 + v12) & ~v12)) & 0xFFFFFFFFFFFFFFF8;
  v15 = v14 + 8;
  v16 = v14 + 9;
  if (v9)
    v16 = v15;
  v17 = ((((v16 + v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v10 < a3)
  {
    if ((((((_DWORD)v16 + (_DWORD)v13 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v18 = a3 - v10 + 1;
    else
      v18 = 2;
    if (v18 >= 0x10000)
      v19 = 4;
    else
      v19 = 2;
    if (v18 < 0x100)
      v19 = 1;
    if (v18 >= 2)
      v5 = v19;
    else
      v5 = 0;
  }
  if (a2 > v10)
  {
    if ((_DWORD)v17)
    {
      v20 = ~v10 + a2;
      bzero(a1, v17);
      *a1 = v20;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X6 }
}

void sub_10061FD50(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;

  v22[v23] = 0;
  if (!(_DWORD)a2)
    return;
  if (v17 >= 0x7FFFFFFF)
  {
    if (a2 > v17)
    {
      if ((_DWORD)v14)
      {
        if (v14 <= 3)
          v24 = v14;
        else
          v24 = 4;
        bzero(v22, v14);
        __asm { BR              X10 }
      }
      return;
    }
    if (v13 < a3)
    {
      v27 = (unint64_t)&v22[v18] & v16;
LABEL_25:
      _s7Weather24LocationCompositionStateOwst_0(v27, a2, a3, a4);
      return;
    }
    v27 = (uint64_t)v22;
    goto LABEL_24;
  }
  v25 = (a1 + ((unint64_t)&v22[v14 + 7] & 0xFFFFFFFFFFFFFFF8)) & v21;
  if (v20 != v19)
  {
    v28 = (_QWORD *)(((((v25 | 7) + (v15 | (v17 == 0))) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
    if ((a2 & 0x80000000) != 0)
    {
      *v28 = a2 ^ 0x80000000;
      *(_QWORD *)((((((v25 | 7) + (v15 | (v17 == 0))) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8) = 0;
    }
    else
    {
      *v28 = (a2 - 1);
    }
    return;
  }
  if ((int)a2 + 1 <= v17)
  {
    if ((_DWORD)a2 == -1)
      return;
    if (v13 < a3)
    {
      v27 = (v18 + v25) & v16;
      a2 = (a2 + 1);
      goto LABEL_25;
    }
    v27 = v25;
    a2 = (a2 + 1);
LABEL_24:
    a3 = v13;
    a4 = a5;
    goto LABEL_25;
  }
  if ((_DWORD)v15)
  {
    v26 = a2 - v17;
    bzero((void *)v25, v15);
    *(_DWORD *)v25 = v26;
  }
}

void sub_10061FEAC()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

uint64_t *initializeBufferWithCopyOfBuffer for TabViewTransition(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  return a1;
}

uint64_t *assignWithCopy for TabViewTransition(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  a1[1] = a2[1];
  return a1;
}

uint64_t *assignWithTake for TabViewTransition(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for TabViewTransition(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TabViewTransition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

void sub_100620054(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;

  v2 = a1[1];
  v4 = a1[2];
  v3 = (void *)a1[3];
  v43 = *a1;
  v1 = v43;
  v44 = v2;
  v45 = v4;
  v46 = v3;
  v5 = v3;
  v6 = sub_100098F50((uint64_t)a1, (uint64_t)&v43);
  v43 = v1;
  v44 = v2;
  v45 = v4;
  v46 = v5;
  v7 = sub_1000C1F68();
  v9 = type metadata accessor for PageContainer(v7, v8);
  v10 = type metadata accessor for _ConditionalContent(255, &type metadata for EmptyView, v9);
  v11 = sub_10009D4E8((uint64_t)&unk_1009B83C4);
  v48 = &protocol witness table for EmptyView;
  v49 = v11;
  v12 = sub_10007A030((uint64_t)&protocol conformance descriptor for <> _ConditionalContent<A, B>);
  v13 = type metadata accessor for VStack(255, v10, v12);
  v14 = sub_10007A030((uint64_t)&protocol conformance descriptor for VStack<A>);
  v43 = v13;
  v44 = v2;
  v45 = v14;
  v46 = v5;
  v15 = sub_1000C6740();
  v16 = sub_1000C5738((uint64_t)&protocol conformance descriptor for [A]);
  v43 = v6;
  v44 = v2;
  v45 = v15;
  v46 = (void *)v16;
  v47 = v5;
  v42 = v5;
  v17 = sub_1000C1F68();
  v19 = type metadata accessor for ForEach(v17, v18);
  sub_10007A030((uint64_t)&protocol conformance descriptor for IDView<A, B>);
  v20 = sub_1000C5738((uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
  v22 = type metadata accessor for WireframeScrollInterestView(255, v19, v20, v21);
  v23 = sub_1000C5738((uint64_t)&unk_1009917A8);
  v43 = v2;
  v44 = v22;
  v45 = (uint64_t)v5;
  v46 = (void *)v23;
  v24 = sub_1000C1F68();
  v26 = type metadata accessor for TabView(v24, v25);
  v27 = type metadata accessor for PageTabViewStyle(255);
  v28 = sub_1000C5738((uint64_t)&protocol conformance descriptor for TabView<A, B>);
  v43 = v26;
  v44 = v27;
  v45 = v28;
  v46 = &protocol witness table for PageTabViewStyle;
  v29 = sub_1000BC7B4(255, (uint64_t)&v43, (uint64_t)&opaque type descriptor for <<opaque return type of View.tabViewStyle<A>(_:)>>);
  v30 = type metadata accessor for LazyPageTabViewStyle(255);
  v43 = v26;
  v44 = v30;
  v45 = v28;
  v46 = &protocol witness table for LazyPageTabViewStyle;
  v31 = sub_1000BC7B4(255, (uint64_t)&v43, (uint64_t)&opaque type descriptor for <<opaque return type of View.tabViewStyle<A>(_:)>>);
  v32 = type metadata accessor for _ConditionalContent(255, v29, v31);
  v33 = type metadata accessor for Group(255, v32);
  v34 = type metadata accessor for ModifiedContent(255, v33, &type metadata for _AllowsHitTestingModifier);
  v35 = type metadata accessor for ModifiedContent(255, v34, &type metadata for _TransactionModifier);
  v43 = v26;
  v44 = v27;
  v45 = v28;
  v46 = &protocol witness table for PageTabViewStyle;
  sub_10009885C((uint64_t)&v43, (uint64_t)&opaque type descriptor for <<opaque return type of View.tabViewStyle<A>(_:)>>);
  v43 = v26;
  v44 = v30;
  v45 = v28;
  v46 = &protocol witness table for LazyPageTabViewStyle;
  sub_10009885C((uint64_t)&v43, (uint64_t)&opaque type descriptor for <<opaque return type of View.tabViewStyle<A>(_:)>>);
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v32);
  sub_1000C4770((uint64_t)&protocol conformance descriptor for <A> Group<A>);
  sub_1005ABD50();
  sub_1000DAAB8((uint64_t)&protocol conformance descriptor for <> ModifiedContent<A, B>);
  v36 = sub_10007A030((uint64_t)&protocol conformance descriptor for <> ModifiedContent<A, B>);
  v37 = (void *)v42[1];
  v43 = v35;
  v44 = v2;
  v45 = v36;
  v46 = v37;
  v38 = sub_1000C1F68();
  v40 = sub_1000BC7B4(v38, v39, (uint64_t)&opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>);
  v43 = v35;
  v44 = v2;
  v45 = v36;
  v46 = v37;
  v41 = sub_10009885C((uint64_t)&v43, (uint64_t)&opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>);
  v43 = v40;
  v44 = v2;
  v45 = v41;
  v46 = v37;
  sub_10009885C((uint64_t)&v43, (uint64_t)&opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>);
  sub_1000DA028();
}

uint64_t type metadata accessor for RebuildPageWhenSidebarCollapsesDuringTransitionModifier(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for RebuildPageWhenSidebarCollapsesDuringTransitionModifier);
}

void sub_100620378()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  void (*v32)(uint64_t, uint64_t);
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = sub_1000D0240();
  v5 = type metadata accessor for PageContainer(v3, v4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v35 = *(_QWORD *)(v6 + 64);
  v36 = (v7 + 48) & ~v7;
  v33 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v33(v0 + v36, v2);
  v8 = sub_1000D0240();
  v10 = type metadata accessor for Page(v8, v9);
  v31 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
  v31(v0 + v36 + *(int *)(v10 + 52), v1);
  swift_release();
  v11 = v0 + v36 + *(int *)(v5 + 56);
  v12 = sub_1000D0240();
  v14 = type metadata accessor for TransitionContext(v12, v13);
  if (!_s7Weather24LocationCompositionStateOwet_0(v11, 1, v14))
  {
    sub_1000D0DE4(v11, v15, v16, v17, v18, v19, v20, v21, (uint64_t)v31, v33);
    v22 = v32;
    v32(v11 + *(int *)(v10 + 52), v1);
    v23 = v11 + *(int *)(v14 + 52);
    sub_1000D0DE4(v23, v24, v25, v26, v27, v28, v29, v30, (uint64_t)v32, v34);
    v22(v23 + *(int *)(v10 + 52), v1);
  }
  swift_release();
  swift_release();
  swift_release();
  swift_deallocObject(v0, v36 + v35, v7 | 7);
  sub_1000D978C();
}

uint64_t sub_1006204C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = sub_1000DA6A8();
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PageContainer(v5, v6) - 8) + 80);
  return sub_10061C39C(v1 + ((v7 + 48) & ~v7), v0, v2, v3, v4);
}

uint64_t sub_100620520(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];
  __int128 v7;
  _QWORD v8[5];

  v8[0] = &unk_1009B82C0;
  v8[1] = &unk_1009B82C0;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 24));
  if (v3 <= 0x3F)
  {
    v8[2] = *(_QWORD *)(result - 8) + 64;
    v6[0] = *(_QWORD *)(a1 + 16);
    v6[1] = result;
    v7 = *(_OWORD *)(a1 + 32);
    v4 = type metadata accessor for TransitionContext(255, (uint64_t)v6);
    result = type metadata accessor for Optional(319, v4);
    if (v5 <= 0x3F)
    {
      v8[3] = *(_QWORD *)(result - 8) + 64;
      v8[4] = &unk_1009B8478;
      swift_initStructMetadata(a1, 0, 5, v8, a1 + 48);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1006205DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  size_t __n;
  uint64_t v58;
  int v59;
  uint64_t v60;

  v5 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v4 - 8);
  v8 = *(_DWORD *)(v6 + 80);
  v7 = *(_DWORD *)(v6 + 84);
  v9 = v8;
  v10 = *(_QWORD *)(v6 + 64);
  v11 = *(_QWORD *)(v5 - 8);
  v12 = *(_DWORD *)(v11 + 84);
  v13 = *(_DWORD *)(v11 + 80) | v8;
  v14 = (*(_BYTE *)(v11 + 80) | v8);
  v15 = ~(v14 | 7);
  v16 = *(_QWORD *)(v11 + 64) + v8;
  v17 = (v16 & ~(unint64_t)v8) + v10;
  v18 = (v17 + 7 + ((v17 + v14) & ~v14)) & 0xFFFFFFFFFFFFFFF8;
  v19 = v18 + 8;
  v20 = v18 + 9;
  if (v7 | v12)
    v21 = v19;
  else
    v21 = v20;
  if (v14 <= 7
    && (v13 & 0x100000) == 0
    && ((v21 + ((((v9 + 25) & ~v9) + v10 + (v14 | 7)) & ~(v14 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8) + 17 <= 0x18)
  {
    v48 = *(_QWORD *)(v5 - 8);
    v49 = (v16 & ~v9) + v10;
    v51 = *(_DWORD *)(v11 + 84);
    v52 = *(_DWORD *)(v6 + 84);
    v54 = v16;
    v55 = v5;
    v50 = v17 + 7;
    v56 = v19;
    __n = v21;
    v26 = *(_BYTE *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = v26;
    v58 = a1;
    v60 = v4;
    v27 = a1 & 0xFFFFFFFFFFFFFFF8;
    v59 = v7 | v12;
    v28 = a2 & 0xFFFFFFFFFFFFFFF8;
    v29 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    v30 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
    swift_retain();
    sub_10008D47C(v29, v30);
    *(_QWORD *)(v27 + 16) = v29;
    *(_BYTE *)(v27 + 24) = v30;
    v31 = (v27 + v9 + 25) & ~v9;
    v53 = ~v9;
    v32 = (v28 + v9 + 25) & ~v9;
    v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    v33(v31, v32, v60);
    v34 = (v10 + 7 + v31) & v15;
    v35 = (v10 + 7 + v32) & v15;
    if (v59)
    {
      v36 = v52;
      if (v51 >= v52)
      {
        v37 = v35;
        v36 = v51;
        v38 = v55;
      }
      else
      {
        v37 = (v54 + v35) & v53;
        v38 = v60;
      }
      if (_s7Weather24LocationCompositionStateOwet_0(v37, v36, v38))
      {
LABEL_24:
        v44 = __n;
        memcpy((void *)v34, (const void *)v35, __n);
LABEL_25:
        v45 = ((v34 | 7) + v44) & 0xFFFFFFFFFFFFFFF8;
        v46 = ((v35 | 7) + v44) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v45 = *(_QWORD *)v46;
        *(_QWORD *)(v45 + 8) = *(_QWORD *)(v46 + 8);
        *(_BYTE *)(v45 + 16) = *(_BYTE *)(v46 + 16);
        swift_retain();
        v25 = v58;
        goto LABEL_26;
      }
    }
    else if (*(_BYTE *)(v35 + v56))
    {
      v39 = *(unsigned __int8 *)(v35 + v56) - 1;
      v40 = v56 & 0xFFFFFFF8;
      if ((v56 & 0xFFFFFFF8) != 0)
      {
        v39 = 0;
        v40 = *(_DWORD *)v35;
      }
      if ((v40 | v39) != 0xFFFFFFFF)
        goto LABEL_24;
    }
    v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16);
    v41(v34, v35, v55);
    v33((v54 + v34) & v53, (v54 + v35) & v53, v60);
    v42 = (v34 + v14 + v49) & ~v14;
    v43 = (v35 + v14 + v49) & ~v14;
    v41(v42, v43, v55);
    v33((v54 + v42) & v53, (v54 + v43) & v53, v60);
    *(_QWORD *)((v50 + v42) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v50 + v43) & 0xFFFFFFFFFFFFF8);
    v44 = __n;
    if (!v59)
      *(_BYTE *)(v34 + v56) = 0;
    goto LABEL_25;
  }
  v24 = *(_QWORD *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v25 = v24 + ((v14 + 16) & v15);
LABEL_26:
  swift_retain();
  return v25;
}

double sub_1006208F0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  void (*v25)(_DWORD *, uint64_t);
  double result;
  uint64_t v27;
  void (*v28)(unint64_t, uint64_t);
  unint64_t v29;

  swift_release();
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  sub_1000B15F8(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16), *(_BYTE *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24));
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = (v4 + v7 + 25) & ~(unint64_t)v7;
  v28 = *(void (**)(unint64_t, uint64_t))(v6 + 8);
  v29 = ~(unint64_t)v7;
  v28(v8, v5);
  v9 = *(_QWORD *)(v6 + 64);
  v10 = v8 + v9;
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80) | v7;
  v14 = (_DWORD *)((v10 + (v13 | 7)) & ~(v13 | 7));
  v15 = *(_DWORD *)(v12 + 84);
  v16 = *(unsigned int *)(v6 + 84);
  v17 = *(_QWORD *)(v12 + 64) + v7;
  v18 = (v17 & v29) + v9;
  v19 = v18 + v13;
  v20 = ((v18 + ((v18 + v13) & ~v13) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v16 | v15)
  {
    if (v15 >= v16)
    {
      v21 = (uint64_t)v14;
      v16 = *(unsigned int *)(v12 + 84);
      v22 = v11;
    }
    else
    {
      v21 = ((unint64_t)v14 + v17) & v29;
      v22 = v5;
    }
    if (!_s7Weather24LocationCompositionStateOwet_0(v21, v16, v22))
    {
LABEL_11:
      v27 = v19;
      v25 = *(void (**)(_DWORD *, uint64_t))(v12 + 8);
      v25(v14, v11);
      v28(((unint64_t)v14 + v17) & v29, v5);
      v25((_DWORD *)(((unint64_t)v14 + v27) & ~v13), v11);
      v28((v17 + (((unint64_t)v14 + v27) & ~v13)) & v29, v5);
    }
  }
  else
  {
    if (!*((_BYTE *)v14 + v20))
      goto LABEL_11;
    v23 = *((unsigned __int8 *)v14 + v20) - 1;
    v24 = v20 & 0xFFFFFFF8;
    if ((v20 & 0xFFFFFFF8) != 0)
    {
      v23 = 0;
      v24 = *v14;
    }
    if ((v24 | v23) == 0xFFFFFFFF)
      goto LABEL_11;
  }
  swift_release();
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_100620AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  size_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  int v45;
  uint64_t v46;
  void (*v47)(uint64_t, unint64_t);
  unint64_t v48;
  uint64_t v49;

  v4 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v8 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  swift_retain();
  sub_10008D47C(v7, v8);
  *(_QWORD *)(v5 + 16) = v7;
  *(_BYTE *)(v5 + 24) = v8;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10;
  v48 = ~(unint64_t)v10;
  v49 = *(_QWORD *)(a3 + 24);
  v12 = (v11 + 25 + v5) & ~v11;
  v47 = *(void (**)(uint64_t, unint64_t))(v9 + 16);
  v47(v12, (v11 + 25 + v6) & ~v11);
  v13 = *(_QWORD *)(v9 + 64);
  v14 = *(_QWORD *)(a3 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80) | v10;
  v17 = (v16 | 7) + v13;
  v18 = (v17 + v12) & ~(v16 | 7);
  v19 = (v17 + ((v11 + 25 + v6) & ~v11)) & ~(v16 | 7);
  v20 = *(_DWORD *)(v15 + 84);
  v21 = *(unsigned int *)(v9 + 84);
  v22 = *(_QWORD *)(v15 + 64) + v10;
  v23 = (v22 & v48) + v13;
  v24 = v23 + v16;
  v25 = (v23 + 7 + ((v23 + v16) & ~v16)) & 0xFFFFFFFFFFFFFFF8;
  v26 = v25 + 8;
  v27 = v21 | v20;
  v46 = v23 + 7;
  if (v21 | v20)
  {
    if (v20 >= v21)
    {
      v29 = v19;
      v21 = *(unsigned int *)(v15 + 84);
      v30 = v14;
      v28 = v14;
    }
    else
    {
      v28 = v49;
      v29 = (v22 + v19) & v48;
      v30 = v14;
    }
    v38 = _s7Weather24LocationCompositionStateOwet_0(v29, v21, v28);
    v14 = v30;
    if (v38)
    {
LABEL_12:
      if (v27)
        v39 = v25 + 8;
      else
        v39 = v25 + 9;
      memcpy((void *)v18, (const void *)v19, v39);
      v37 = a1;
      goto LABEL_16;
    }
  }
  else if (*(_BYTE *)(v19 + v26))
  {
    v31 = *(unsigned __int8 *)(v19 + v26) - 1;
    v32 = v26 & 0xFFFFFFF8;
    if ((v26 & 0xFFFFFFF8) != 0)
    {
      v31 = 0;
      v32 = *(_DWORD *)v19;
    }
    if ((v32 | v31) != 0xFFFFFFFF)
      goto LABEL_12;
  }
  v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  v33 = v14;
  v44(v18, v19, v14);
  ((void (*)(unint64_t, unint64_t, uint64_t))v47)((v22 + v18) & v48, (v22 + v19) & v48, v49);
  v45 = v27;
  v34 = (v24 + v18) & ~v16;
  v35 = (v24 + v19) & ~v16;
  v26 = v25 + 8;
  v44(v34, v35, v33);
  ((void (*)(unint64_t, unint64_t, uint64_t))v47)((v22 + v34) & v48, (v22 + v35) & v48, v49);
  v36 = v46 + v34;
  v27 = v45;
  *(_QWORD *)(v36 & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v46 + v35) & 0xFFFFFFFFFFFFF8);
  v37 = a1;
  if (!v45)
    *(_BYTE *)(v18 + v26) = 0;
LABEL_16:
  v40 = v25 + 9;
  if (v27)
    v40 = v26;
  v41 = ((v18 | 7) + v40) & 0xFFFFFFFFFFFFFFF8;
  v42 = ((v19 | 7) + v40) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v41 = *(_QWORD *)v42;
  *(_QWORD *)(v41 + 8) = *(_QWORD *)(v42 + 8);
  *(_BYTE *)(v41 + 16) = *(_BYTE *)(v42 + 16);
  swift_retain();
  swift_retain();
  return v37;
}

uint64_t sub_100620D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  int v33;
  size_t v34;
  void *v35;
  const void *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  void (*v44)(uint64_t, uint64_t);
  void (*v45)(unint64_t, uint64_t);
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  void (*v51)(unint64_t, unint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t);
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;

  v6 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v6;
  swift_retain();
  swift_release();
  v66 = a1;
  v7 = a1 & 0xFFFFFFFFFFFFFFF8;
  v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v10 = *(_BYTE *)(v8 + 24);
  sub_10008D47C(v9, v10);
  v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  v12 = *(_BYTE *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_QWORD *)(v7 + 16) = v9;
  *(_BYTE *)(v7 + 24) = v10;
  sub_1000B15F8(v11, v12);
  v13 = *(_QWORD *)(a3 + 24);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_DWORD *)(v14 + 80);
  v16 = v15;
  v67 = ~(unint64_t)v15;
  v17 = (v16 + 25 + v7) & ~v16;
  v18 = (v16 + 25 + v8) & ~v16;
  v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 24);
  v59(v17, v18, v13);
  v19 = *(_QWORD *)(v14 + 64);
  v20 = *(_QWORD *)(a3 + 16);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned __int8 *)(v21 + 80) | v15;
  v23 = (v22 | 7) + v19;
  v24 = (v23 + v17) & ~(v22 | 7);
  v25 = (v23 + v18) & ~(v22 | 7);
  v26 = *(unsigned int *)(v21 + 84);
  v27 = *(unsigned int *)(v14 + 84);
  v28 = *(_QWORD *)(v21 + 64) + v15;
  v29 = (v28 & ~v16) + v19;
  v65 = (v29 + 7 + ((v29 + v22) & ~v22)) & 0xFFFFFFFFFFFFFFF8;
  v30 = v65 + 8;
  v64 = v27 | v26;
  v61 = v29 + 7;
  v62 = v29 + v22;
  v63 = ~v22;
  if (v27 | v26)
  {
    if (v26 >= v27)
    {
      v39 = _s7Weather24LocationCompositionStateOwet_0(v24, v26, v20);
      v31 = _s7Weather24LocationCompositionStateOwet_0(v25, v26, v20);
      if (v39)
      {
LABEL_4:
        if (v31)
        {
LABEL_5:
          v32 = v65;
          v33 = v64;
          if (v64)
            v34 = v65 + 8;
          else
            v34 = v65 + 9;
          v35 = (void *)v24;
          v36 = (const void *)v25;
LABEL_29:
          memcpy(v35, v36, v34);
          v46 = v66;
          goto LABEL_35;
        }
        goto LABEL_33;
      }
    }
    else
    {
      v60 = _s7Weather24LocationCompositionStateOwet_0((v28 + v24) & v67, v27, v13);
      v31 = _s7Weather24LocationCompositionStateOwet_0((v28 + v25) & v67, v27, v13);
      if (v60)
        goto LABEL_4;
    }
    if (!v31)
    {
LABEL_30:
      v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 24);
      v47(v24, v25, v20);
      v59((v28 + v24) & v67, (v28 + v25) & v67, v13);
      v48 = (v62 + v24) & v63;
      v49 = (v62 + v25) & v63;
      v47(v48, v49, v20);
      v30 = v65 + 8;
      v59((v28 + v48) & v67, (v28 + v49) & v67, v13);
      *(_QWORD *)((v61 + v48) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v61 + v49) & 0xFFFFFFFFFFFFF8);
      v32 = v65;
      v46 = v66;
      v33 = v64;
      goto LABEL_35;
    }
LABEL_25:
    v44 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v44(v24, v20);
    v45 = *(void (**)(unint64_t, uint64_t))(v14 + 8);
    v45((v28 + v24) & v67, v13);
    v44((v62 + v24) & v63, v20);
    v30 = v65 + 8;
    v45((v28 + ((v62 + v24) & v63)) & v67, v13);
    v32 = v65;
    v33 = v64;
    if (v64)
      v34 = v65 + 8;
    else
      v34 = v65 + 9;
    v35 = (void *)v24;
    v36 = (const void *)v25;
    goto LABEL_29;
  }
  if (!*(_BYTE *)(v24 + v30)
    || ((v37 = *(unsigned __int8 *)(v24 + v30) - 1, (_DWORD)v65 == -8) ? (v38 = 0) : (v37 = 0, v38 = *(_DWORD *)v24),
        (v38 | v37) == 0xFFFFFFFF))
  {
    if (!*(_BYTE *)(v25 + v30))
      goto LABEL_30;
    v42 = *(unsigned __int8 *)(v25 + v30) - 1;
    if ((_DWORD)v65 == -8)
    {
      v43 = 0;
    }
    else
    {
      v42 = 0;
      v43 = *(_DWORD *)v25;
    }
    if ((v43 | v42) == 0xFFFFFFFF)
      goto LABEL_30;
    goto LABEL_25;
  }
  if (*(_BYTE *)(v25 + v30))
  {
    v40 = *(unsigned __int8 *)(v25 + v30) - 1;
    if ((_DWORD)v65 == -8)
    {
      v41 = 0;
    }
    else
    {
      v40 = 0;
      v41 = *(_DWORD *)v25;
    }
    if ((v41 | v40) != 0xFFFFFFFF)
      goto LABEL_5;
  }
LABEL_33:
  v58 = v20;
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
  v50(v24, v25, v20);
  v51 = *(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 16);
  v51((v28 + v24) & v67, (v28 + v25) & v67, v13);
  v52 = (v62 + v24) & v63;
  v53 = (v62 + v25) & v63;
  v50(v52, v53, v58);
  v30 = v65 + 8;
  v51((v28 + v52) & v67, (v28 + v53) & v67, v13);
  *(_QWORD *)((v61 + v52) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v61 + v53) & 0xFFFFFFFFFFFFF8);
  v32 = v65;
  v46 = v66;
  v33 = v64;
  if (!v64)
    *(_BYTE *)(v24 + v65 + 8) = 0;
LABEL_35:
  v54 = v32 + 9;
  if (v33)
    v54 = v30;
  v55 = ((v24 | 7) + v54) & 0xFFFFFFFFFFFFFFF8;
  v56 = ((v25 | 7) + v54) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v55 = *(_QWORD *)v56;
  swift_retain();
  swift_release();
  *(_QWORD *)(v55 + 8) = *(_QWORD *)(v56 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(v55 + 16) = *(_BYTE *)(v56 + 16);
  return v46;
}

__n128 sub_100621258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  size_t v37;
  unint64_t v38;
  unint64_t v39;
  __n128 *v40;
  __n128 result;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(unint64_t, unint64_t, uint64_t);
  unint64_t v47;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_BYTE *)(v4 + 24) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_QWORD *)(v4 + 16) = v5;
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = v8;
  v47 = ~(unint64_t)v8;
  v10 = (v9 + 25 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  v11 = (v9 + 25 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  v46 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32);
  v46(v10, v11, v6);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80) | v8;
  v16 = (v15 | 7) + v12;
  v17 = (v16 + v10) & ~(v15 | 7);
  v18 = (v16 + v11) & ~(v15 | 7);
  v19 = *(_DWORD *)(v14 + 84);
  v20 = *(unsigned int *)(v7 + 84);
  v21 = *(_QWORD *)(v14 + 64) + v8;
  v22 = (v21 & v47) + v12;
  v23 = v22 + v15;
  v24 = (v22 + 7 + ((v22 + v15) & ~v15)) & 0xFFFFFFFFFFFFFFF8;
  v25 = v24 + 8;
  v26 = v20 | v19;
  v45 = v22 + 7;
  if (v20 | v19)
  {
    v44 = v22 + v15;
    if (v19 >= v20)
    {
      v27 = v18;
      v20 = *(unsigned int *)(v14 + 84);
      v28 = v13;
      v29 = v13;
    }
    else
    {
      v27 = (v21 + v18) & v47;
      v28 = v13;
      v29 = v6;
    }
    v36 = _s7Weather24LocationCompositionStateOwet_0(v27, v20, v29);
    v13 = v28;
    v23 = v44;
    if (v36)
    {
LABEL_12:
      if (v26)
        v37 = v24 + 8;
      else
        v37 = v24 + 9;
      memcpy((void *)v17, (const void *)v18, v37);
      goto LABEL_16;
    }
  }
  else if (*(_BYTE *)(v18 + v25))
  {
    v30 = *(unsigned __int8 *)(v18 + v25) - 1;
    v31 = v25 & 0xFFFFFFF8;
    if ((v25 & 0xFFFFFFF8) != 0)
    {
      v30 = 0;
      v31 = *(_DWORD *)v18;
    }
    if ((v31 | v30) != 0xFFFFFFFF)
      goto LABEL_12;
  }
  v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
  v32 = v13;
  v42(v17, v18, v13);
  v46((v21 + v17) & v47, (v21 + v18) & v47, v6);
  v43 = v24;
  v33 = (v23 + v17) & ~v15;
  v34 = (v23 + v18) & ~v15;
  v42(v33, v34, v32);
  v46((v21 + v33) & v47, (v21 + v34) & v47, v6);
  v35 = v45 + v33;
  v24 = v43;
  *(_QWORD *)(v35 & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v45 + v34) & 0xFFFFFFFFFFFFF8);
  if (!v26)
    *(_BYTE *)(v17 + v25) = 0;
LABEL_16:
  v38 = v24 + 9;
  if (v26)
    v38 = v25;
  v39 = (v17 | 7) + v38;
  v40 = (__n128 *)(((v18 | 7) + v38) & 0xFFFFFFFFFFFFFFF8);
  result = *v40;
  v39 &= 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(v39 + 16) = v40[1].n128_u8[0];
  *(__n128 *)v39 = result;
  return result;
}

uint64_t sub_1006214F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  size_t v33;
  void *v34;
  const void *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  void (*v43)(uint64_t, uint64_t);
  void (*v44)(unint64_t, uint64_t);
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  void (*v50)(unint64_t, unint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t);
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;

  v6 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v6;
  swift_release();
  v65 = a1;
  v7 = a1 & 0xFFFFFFFFFFFFFFF8;
  v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  v11 = *(_BYTE *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_BYTE *)(v7 + 24) = v9;
  sub_1000B15F8(v10, v11);
  v12 = *(_QWORD *)(a3 + 24);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_DWORD *)(v13 + 80);
  v15 = v14;
  v66 = ~(unint64_t)v14;
  v16 = (v15 + 25 + v7) & ~v15;
  v17 = (v15 + 25 + v8) & ~v15;
  v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 40);
  v58(v16, v17, v12);
  v18 = *(_QWORD *)(v13 + 64);
  v19 = *(_QWORD *)(a3 + 16);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned __int8 *)(v20 + 80) | v14;
  v22 = (v21 | 7) + v18;
  v23 = (v22 + v16) & ~(v21 | 7);
  v24 = (v22 + v17) & ~(v21 | 7);
  v25 = *(unsigned int *)(v20 + 84);
  v26 = *(unsigned int *)(v13 + 84);
  v27 = *(_QWORD *)(v20 + 64) + v14;
  v28 = (v27 & ~v15) + v18;
  v64 = (v28 + 7 + ((v28 + v21) & ~v21)) & 0xFFFFFFFFFFFFFFF8;
  v29 = v64 + 8;
  v63 = v26 | v25;
  v60 = v28 + 7;
  v61 = v28 + v21;
  v62 = ~v21;
  if (v26 | v25)
  {
    if (v25 >= v26)
    {
      v38 = _s7Weather24LocationCompositionStateOwet_0(v23, v25, v19);
      v30 = _s7Weather24LocationCompositionStateOwet_0(v24, v25, v19);
      if (v38)
      {
LABEL_4:
        if (v30)
        {
LABEL_5:
          v31 = v64;
          v32 = v63;
          if (v63)
            v33 = v64 + 8;
          else
            v33 = v64 + 9;
          v34 = (void *)v23;
          v35 = (const void *)v24;
LABEL_29:
          memcpy(v34, v35, v33);
          v45 = v65;
          goto LABEL_35;
        }
        goto LABEL_33;
      }
    }
    else
    {
      v59 = _s7Weather24LocationCompositionStateOwet_0((v27 + v23) & v66, v26, v12);
      v30 = _s7Weather24LocationCompositionStateOwet_0((v27 + v24) & v66, v26, v12);
      if (v59)
        goto LABEL_4;
    }
    if (!v30)
    {
LABEL_30:
      v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 40);
      v46(v23, v24, v19);
      v58((v27 + v23) & v66, (v27 + v24) & v66, v12);
      v47 = (v61 + v23) & v62;
      v48 = (v61 + v24) & v62;
      v46(v47, v48, v19);
      v29 = v64 + 8;
      v58((v27 + v47) & v66, (v27 + v48) & v66, v12);
      *(_QWORD *)((v60 + v47) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v60 + v48) & 0xFFFFFFFFFFFFF8);
      v31 = v64;
      v45 = v65;
      v32 = v63;
      goto LABEL_35;
    }
LABEL_25:
    v43 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v43(v23, v19);
    v44 = *(void (**)(unint64_t, uint64_t))(v13 + 8);
    v44((v27 + v23) & v66, v12);
    v43((v61 + v23) & v62, v19);
    v29 = v64 + 8;
    v44((v27 + ((v61 + v23) & v62)) & v66, v12);
    v31 = v64;
    v32 = v63;
    if (v63)
      v33 = v64 + 8;
    else
      v33 = v64 + 9;
    v34 = (void *)v23;
    v35 = (const void *)v24;
    goto LABEL_29;
  }
  if (!*(_BYTE *)(v23 + v29)
    || ((v36 = *(unsigned __int8 *)(v23 + v29) - 1, (_DWORD)v64 == -8) ? (v37 = 0) : (v36 = 0, v37 = *(_DWORD *)v23),
        (v37 | v36) == 0xFFFFFFFF))
  {
    if (!*(_BYTE *)(v24 + v29))
      goto LABEL_30;
    v41 = *(unsigned __int8 *)(v24 + v29) - 1;
    if ((_DWORD)v64 == -8)
    {
      v42 = 0;
    }
    else
    {
      v41 = 0;
      v42 = *(_DWORD *)v24;
    }
    if ((v42 | v41) == 0xFFFFFFFF)
      goto LABEL_30;
    goto LABEL_25;
  }
  if (*(_BYTE *)(v24 + v29))
  {
    v39 = *(unsigned __int8 *)(v24 + v29) - 1;
    if ((_DWORD)v64 == -8)
    {
      v40 = 0;
    }
    else
    {
      v39 = 0;
      v40 = *(_DWORD *)v24;
    }
    if ((v40 | v39) != 0xFFFFFFFF)
      goto LABEL_5;
  }
LABEL_33:
  v57 = v19;
  v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32);
  v49(v23, v24, v19);
  v50 = *(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 32);
  v50((v27 + v23) & v66, (v27 + v24) & v66, v12);
  v51 = (v61 + v23) & v62;
  v52 = (v61 + v24) & v62;
  v49(v51, v52, v57);
  v29 = v64 + 8;
  v50((v27 + v51) & v66, (v27 + v52) & v66, v12);
  *(_QWORD *)((v60 + v51) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v60 + v52) & 0xFFFFFFFFFFFFF8);
  v31 = v64;
  v45 = v65;
  v32 = v63;
  if (!v63)
    *(_BYTE *)(v23 + v64 + 8) = 0;
LABEL_35:
  v53 = v31 + 9;
  if (v32)
    v53 = v29;
  v54 = ((v23 | 7) + v53) & 0xFFFFFFFFFFFFFFF8;
  v55 = ((v24 | 7) + v53) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v54 = *(_QWORD *)v55;
  swift_release();
  *(_QWORD *)(v54 + 8) = *(_QWORD *)(v55 + 8);
  swift_release();
  *(_BYTE *)(v54 + 16) = *(_BYTE *)(v55 + 16);
  return v45;
}

uint64_t sub_1006219A8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(v6 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v8 <= v10)
    v11 = *(_DWORD *)(v9 + 84);
  else
    v11 = *(_DWORD *)(v7 + 84);
  if (v11)
    v12 = v11 - 1;
  else
    v12 = 0;
  if (v8 <= v12)
    v13 = v12;
  else
    v13 = *(_DWORD *)(v7 + 84);
  if (v13 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  if (v11)
    v14 = 8;
  else
    v14 = 9;
  if (!a2)
    return 0;
  v15 = *(_DWORD *)(v7 + 80);
  v16 = *(_QWORD *)(v7 + 64);
  v17 = *(unsigned __int8 *)(v9 + 80) | v15;
  v18 = v17 | 7;
  v19 = *(_QWORD *)(v9 + 64) + v15;
  v20 = (((v19 & ~(unint64_t)v15) + v16 + (((v19 & ~(unint64_t)v15) + v16 + v17) & ~v17) + 7) & 0xFFFFFFFFFFFFFFF8)
      + v14;
  if (v13 < a2)
  {
    v21 = ((v20 + ((v18 + v16 + ((v15 + 25) & ~v15)) & ~(_DWORD)v18) + 7) & 0xFFFFFFF8) + 17;
    v22 = (a2 - v13 + 255) >> (8 * v21);
    if (v21 < 4)
      v23 = v22 + 1;
    else
      v23 = 2;
    if (v23 >= 0x10000)
      v24 = 4;
    else
      v24 = 2;
    if (v23 < 0x100)
      v24 = 1;
    if (v23 >= 2)
      v25 = v24;
    else
      v25 = 0;
    __asm { BR              X7 }
  }
  v26 = ((a1 & 0xFFFFFFFFFFFFFFF8) + v15 + 25) & ~(unint64_t)v15;
  if ((_DWORD)v8 == v13)
    return _s7Weather24LocationCompositionStateOwet_0(v26, v8, v5);
  v28 = (v26 + v16 + v18) & ~v18;
  if (v12 == v13)
  {
    if (v11 < 2)
      return 0;
    if (v10 >= v8)
    {
      v8 = v10;
      v5 = v6;
    }
    else
    {
      v28 = (v19 + v28) & ~(unint64_t)v15;
    }
    v30 = _s7Weather24LocationCompositionStateOwet_0(v28, v8, v5);
    if (v30 >= 2)
      return v30 - 1;
    else
      return 0;
  }
  else
  {
    v29 = *(_QWORD *)((((v28 | 7) + v20) & 0xFFFFFFFFFFFFF8) + 8);
    if (v29 >= 0xFFFFFFFF)
      LODWORD(v29) = -1;
    return (v29 + 1);
  }
}

void sub_100621BC8(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v8 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v10 = *(_DWORD *)(v7 + 80);
  v9 = *(_DWORD *)(v7 + 84);
  if (v9 <= *(_DWORD *)(v8 + 84))
    v11 = *(_DWORD *)(v8 + 84);
  else
    v11 = *(_DWORD *)(v7 + 84);
  v12 = v11 - 1;
  if (!v11)
    v12 = 0;
  if (v9 <= v12)
    v13 = v12;
  else
    v13 = *(_DWORD *)(v7 + 84);
  if (v13 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  v14 = *(_QWORD *)(v7 + 64);
  v15 = *(unsigned __int8 *)(v8 + 80) | *(_DWORD *)(v7 + 80);
  v16 = ((v15 | 7) + v14 + ((v10 + 25) & ~(unint64_t)v10)) & ~(v15 | 7);
  v17 = ((*(_QWORD *)(v8 + 64) + v10) & ~(unint64_t)v10) + v14;
  v18 = (v17 + ((v17 + v15) & ~v15) + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = v18 + 8;
  v20 = v18 + 9;
  if (v11)
    v20 = v19;
  v21 = ((v20 + v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  if (v13 < a3)
  {
    v22 = (a3 - v13 + 255) >> (8 * v21);
    if (v21 <= 3)
      v23 = v22 + 1;
    else
      v23 = 2;
    if (v23 >= 0x10000)
      v24 = 4;
    else
      v24 = 2;
    if (v23 < 0x100)
      v24 = 1;
    if (v23 >= 2)
      v6 = v24;
    else
      v6 = 0;
  }
  if (v13 < a2)
  {
    if (v21 >= 4)
      v25 = ~v13 + a2;
    else
      v25 = (~(_BYTE)v13 + a2);
    bzero(a1, v21);
    if ((_DWORD)v21 == 1)
      *a1 = v25;
    else
      *(_DWORD *)a1 = v25;
    __asm { BR              X10 }
  }
  __asm { BR              X21 }
}

void sub_100621D6C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x100621E44);
}

void sub_100621D74(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x100621D7CLL);
  JUMPOUT(0x100621E44);
}

void sub_100621DE4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x100621E44);
}

void sub_100621DEC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x100621E44);
}

uint64_t sub_100621DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  _DWORD *v8;
  int v9;
  size_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_WORD *)(v17 + v18) = 0;
  if (!(_DWORD)a2)
    goto LABEL_8;
  v6 = ((v17 & 0xFFFFFFFFFFFFFFF8) + a1 + 25) & a6;
  if ((_DWORD)a3 != v14)
  {
    v8 = (_DWORD *)((v6 + v15 + v16) & v11);
    if (v13 != v14)
      JUMPOUT(0x100621E00);
    if ((int)a2 + 1 <= v12)
      JUMPOUT(0x100621E1CLL);
    if ((_DWORD)v10)
    {
      v9 = a2 - v12;
      bzero(v8, v10);
      *v8 = v9;
    }
LABEL_8:
    JUMPOUT(0x100621E44);
  }
  return _s7Weather24LocationCompositionStateOwst_0(v6, a2, a3, a4);
}

void sub_100621E70(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v16 = a1[3];
  v4 = sub_1000C6740();
  v5 = sub_100075EB0(&qword_100BC4058);
  v6 = type metadata accessor for ModifiedContent(255, v4, v5);
  v7 = type metadata accessor for ModifiedContent(255, v6, &type metadata for _AppearanceActionModifier);
  v8 = type metadata accessor for ModifiedContent(255, v1, v5);
  type metadata accessor for _ConditionalContent(255, v7, v8);
  sub_1000C5738((uint64_t)&protocol conformance descriptor for IDView<A, B>);
  sub_1000A609C(&qword_100BC4050, &qword_100BC4058);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
  sub_1000DAAB8((uint64_t)&protocol conformance descriptor for <> ModifiedContent<A, B>);
  sub_1000C4770((uint64_t)&protocol conformance descriptor for <> ModifiedContent<A, B>);
  v9 = sub_100099A04((uint64_t)&protocol conformance descriptor for <> _ConditionalContent<A, B>);
  sub_100109A04(v9);
  sub_100099A04((uint64_t)&protocol conformance descriptor for VStack<A>);
  v10 = sub_1000C6740();
  v17 = v1;
  v18 = v2;
  v19 = v3;
  v20 = v16;
  v11 = type metadata accessor for RebuildPageWhenSidebarCollapsesDuringTransitionModifier(255, (uint64_t)&v17);
  v12 = type metadata accessor for ModifiedContent(255, v10, v11);
  v13 = type metadata accessor for PageContainerSidebarState(255);
  sub_100099A04((uint64_t)&protocol conformance descriptor for IDView<A, B>);
  sub_10009D4E8((uint64_t)&unk_1009B84A0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v12);
  v15 = sub_1000FC98C(&qword_100BF7EC0, type metadata accessor for PageContainerSidebarState);
  v17 = v12;
  v18 = v13;
  v19 = WitnessTable;
  v20 = v15;
  sub_10009885C((uint64_t)&v17, (uint64_t)&opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>);
  sub_1000DA028();
}

uint64_t sub_100622088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100140D38(a1, a2, a3, (uint64_t)&unk_100ABB624);
}

void sub_100622094()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t);
  uint64_t (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[4];

  v3 = v0[2];
  v2 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v6 = sub_1000BD5F0();
  v8 = type metadata accessor for RebuildPageWhenSidebarCollapsesDuringTransitionModifier(v6, v7);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v20 = *(_QWORD *)(v9 + 64);
  v21 = (v10 + 48) & ~v10;
  swift_release();
  sub_1000B15F8(*(_QWORD *)((char *)v0 + v21 + 16), *((_BYTE *)v0 + v21 + 24));
  v19 = *(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v11 = v19((char *)v0 + v21 + *(int *)(v8 + 56), v2);
  v12 = (char *)v0 + v21 + *(int *)(v8 + 60);
  v22[0] = v3;
  v22[1] = v2;
  v22[2] = v4;
  v22[3] = v5;
  if (!sub_1000BB234(v11, (uint64_t)v22))
  {
    v18 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
    v18(v12, v3);
    v13 = sub_1000BD5F0();
    v15 = type metadata accessor for Page(v13, v14);
    v16 = sub_1000BEF24(v15);
    ((void (*)(uint64_t))v19)(v16);
    v17 = &v12[*(int *)(v1 + 52)];
    v18(v17, v3);
    v19(&v17[*(int *)(v4 + 52)], v2);
  }
  swift_release();
  swift_release();
  swift_deallocObject(v0, v21 + v20, v10 | 7);
  sub_1000D978C();
}

void sub_1006221C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1000CDD5C();
  v11 = v0;
  v12 = v1;
  v13 = v2;
  v14 = v3;
  type metadata accessor for RebuildPageWhenSidebarCollapsesDuringTransitionModifier(0, (uint64_t)&v11);
  v4 = (_BYTE *)sub_1000CD008();
  sub_10061E710(v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100622214(__int128 *a1)
{
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;

  v1 = a1[1];
  v8 = *a1;
  v9 = v1;
  type metadata accessor for RebuildPageWhenSidebarCollapsesDuringTransitionModifier(255, (uint64_t)&v8);
  sub_10009D4E8((uint64_t)&unk_1009B84A0);
  v2 = sub_1000C6BDC();
  v5 = type metadata accessor for _ViewModifier_Content(v2, v3, v4);
  v6 = sub_10009D4E8((uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  *(_QWORD *)&v8 = v5;
  *((_QWORD *)&v8 + 1) = &type metadata for Bool;
  *(_QWORD *)&v9 = v6;
  *((_QWORD *)&v9 + 1) = &protocol witness table for Bool;
  return sub_10009885C((uint64_t)&v8, (uint64_t)&opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>);
}

void sub_10062229C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(_QWORD);
  uint64_t *v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(char *, uint64_t, uint64_t);
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  uint64_t v107;
  os_log_type_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  double v115;
  void (*v116)(uint64_t, uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t (*v124)(uint64_t, uint64_t, uint64_t);
  uint64_t v125;
  uint64_t v126;
  NSObject *v127;
  uint64_t v128;
  os_log_type_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void (*v136)(uint64_t, uint64_t);
  uint64_t v137;
  uint64_t v138;
  void (*v139)(uint64_t, uint64_t);
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t (*v150)(uint64_t);
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD v223[2];
  char *v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  void (*v254)(char *, uint64_t);
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char v265[8];
  uint64_t v266;

  v257 = type metadata accessor for ModalViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100088FDC();
  v258 = v3;
  type metadata accessor for LocationPreviewViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100088FDC();
  v259 = v5;
  v230 = sub_1000BA294(&qword_100BCB9F8);
  v229 = *(_QWORD *)(v230 - 8);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_100088FDC();
  sub_10009511C(v7);
  sub_1000BA294(&qword_100BC3380);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v9);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v10);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v11);
  sub_100079F7C();
  sub_10009511C(v12);
  sub_1000BA294(&qword_100BC3460);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v14);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v15);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v16);
  sub_100079F7C();
  sub_10009511C(v17);
  sub_1000BA294(&qword_100BC61F8);
  sub_1000B42B0();
  __chkstk_darwin(v18);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v19);
  sub_100079F7C();
  v21 = sub_1000987B4(v20);
  v252 = type metadata accessor for OpenL2Descriptor(v21);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v23);
  sub_100079F7C();
  sub_10009511C(v24);
  sub_1000BA294(&qword_100BC35F8);
  sub_1000B42B0();
  __chkstk_darwin(v25);
  sub_1000986FC();
  v255 = v26;
  __chkstk_darwin(v27);
  sub_100079F7C();
  v29 = sub_1000987B4(v28);
  v256 = type metadata accessor for Location(v29);
  v247 = *(_QWORD *)(v256 - 8);
  sub_10009D98C();
  __chkstk_darwin(v30);
  sub_1000986FC();
  v253 = v31;
  __chkstk_darwin(v32);
  sub_100079F7C();
  v34 = sub_1000987B4(v33);
  v239 = type metadata accessor for LocationsState(v34);
  sub_1000B42B0();
  __chkstk_darwin(v35);
  sub_100088FDC();
  sub_10009511C(v36);
  sub_1000BA294(&qword_100C0B8D0);
  sub_1000B42B0();
  __chkstk_darwin(v37);
  sub_100088FDC();
  v39 = sub_1000987B4(v38);
  v246 = type metadata accessor for LocationModel(v39);
  v260 = *(_QWORD *)(v246 - 8);
  sub_10009D98C();
  __chkstk_darwin(v40);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v41);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v42);
  v44 = (char *)v223 - v43;
  __chkstk_darwin(v45);
  sub_100079F7C();
  v250 = v46;
  v262 = type metadata accessor for Location.Identifier(0);
  v251 = *(_QWORD *)(v262 - 8);
  sub_10009D98C();
  __chkstk_darwin(v47);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v48);
  v50 = (char *)v223 - v49;
  __chkstk_darwin(v51);
  sub_100079F7C();
  v261 = v52;
  type metadata accessor for LocationViewerActiveLocationState(0);
  sub_1000B42B0();
  __chkstk_darwin(v53);
  sub_100098728();
  v56 = v55 - v54;
  type metadata accessor for ViewState.SecondaryViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v57);
  sub_100098728();
  v60 = (uint64_t *)(v59 - v58);
  v61 = (int *)type metadata accessor for ViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v62);
  sub_100098728();
  v65 = v64 - v63;
  v66 = a1;
  sub_100080C0C(*(_QWORD *)(a1 + 64) + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, v64 - v63, v67);
  sub_100080C0C(v65 + v61[5], (uint64_t)v60, type metadata accessor for ViewState.SecondaryViewState);
  v68 = &OBJC_IVAR____TtC7Weather21AppContinuationBridge_pendingOpenL2Descriptor;
  if (swift_getEnumCaseMultiPayload(v60) == 1)
  {
    sub_1000215BC((uint64_t)v60, type metadata accessor for ViewState.SecondaryViewState);
LABEL_11:
    v88 = v258;
    v73 = v259;
    sub_1000215BC(v65, type metadata accessor for ViewState);
    v76 = a1;
    goto LABEL_41;
  }
  v69 = *v60;
  if (*(_QWORD *)(v65 + v61[9] + 8) == 1)
  {
    v70 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
    objc_msgSend(v70, "userInterfaceIdiom");

    if ((*(_BYTE *)(v65 + v61[7]) & 1) == 0)
    {
      swift_release();
      goto LABEL_11;
    }
  }
  sub_1000215BC(v65, type metadata accessor for ViewState);
  sub_100080C0C(v69 + OBJC_IVAR____TtCV7Weather23LocationViewerViewState8_Storage_activeLocationState, v56, type metadata accessor for LocationViewerActiveLocationState);
  v71 = v69;
  v72 = v262;
  sub_100088FC8(v56, 1, v262);
  if (v122)
  {
    swift_release();
    v73 = v259;
    v76 = a1;
    goto LABEL_40;
  }
  v223[1] = v71;
  v74 = v251;
  v75 = v261;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v251 + 32))(v261, v56, v72);
  v76 = a1;
  v77 = v249;
  sub_100080C0C(*(_QWORD *)(a1 + 64) + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations, v249, type metadata accessor for LocationsState);
  static CurrentLocation.placeholderIdentifier.getter(v78);
  v79 = static Location.Identifier.== infix(_:_:)(v75, v50);
  v254 = *(void (**)(char *, uint64_t))(v74 + 8);
  v254(v50, v72);
  if ((v79 & 1) != 0)
  {
    sub_1000BA294(&qword_100BC3488);
    v80 = v242;
    v81 = type metadata accessor for CurrentLocation(0);
    swift_storeEnumTagMultiPayload(v80, v81, 3);
    type metadata accessor for LocationOfInterest(0);
    v82 = sub_1000C1F74();
    _s7Weather24LocationCompositionStateOwst_0(v82, v83, 1, v84);
    v85 = v260;
    v86 = v246;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v260 + 104))(v80, enum case for LocationModel.current(_:), v246);
    v87 = sub_100098F6C();
  }
  else
  {
    v89 = *(_QWORD *)(v77 + *(int *)(v239 + 24));
    v90 = *(_QWORD *)(v89 + 16);
    if (v90)
    {
      v91 = v89 + ((*(unsigned __int8 *)(v260 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v260 + 80));
      v92 = *(_QWORD *)(v260 + 72);
      v93 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v260 + 16);
      sub_100099360();
      v86 = v246;
      while (1)
      {
        v94 = v93(v44, v91, v86);
        LocationModel.identifier.getter(v94);
        v95 = static Location.Identifier.== infix(_:_:)(v50, v261);
        v254(v50, v262);
        if ((v95 & 1) != 0)
          break;
        (*(void (**)(char *, uint64_t))(v260 + 8))(v44, v86);
        v91 += v92;
        if (!--v90)
          goto LABEL_18;
      }
      v85 = v260;
      v80 = v242;
      (*(void (**)(void))(v260 + 32))();
      sub_100098F6C();
      sub_100075DF4();
      v76 = v66;
      v68 = &OBJC_IVAR____TtC7Weather21AppContinuationBridge_pendingOpenL2Descriptor;
      v72 = v262;
    }
    else
    {
      sub_100099360();
      v86 = v246;
LABEL_18:
      v80 = v242;
      v96 = sub_1000C0944();
      _s7Weather24LocationCompositionStateOwst_0(v96, v97, 1, v86);
      sub_100075DF4();
      v76 = v66;
      v68 = &OBJC_IVAR____TtC7Weather21AppContinuationBridge_pendingOpenL2Descriptor;
      v72 = v262;
      v85 = v260;
    }
  }
  sub_1000998E4(v87, type metadata accessor for LocationsState);
  v98 = sub_1000C0944();
  sub_100088FC8(v98, v99, v86);
  v73 = v259;
  v100 = v245;
  v101 = v243;
  if (v122)
  {
    sub_100021A14(v80, &qword_100C0B8D0);
    if (qword_100BC24B0 != -1)
      swift_once(&qword_100BC24B0, sub_1006F391C);
    v102 = type metadata accessor for Logger(0);
    sub_1000AECD4(v102, (uint64_t)qword_100CAF1F8);
    v103 = v240;
    v104 = v261;
    v105 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v251 + 16))(v240, v261, v72);
    v106 = Logger.logObject.getter(v105);
    v108 = static os_log_type_t.error.getter(v106, v107);
    v109 = v72;
    if (os_log_type_enabled(v106, v108))
    {
      sub_1000D0CE4();
      v262 = sub_1000C5B78();
      v264 = v262;
      sub_1000DA044(7.2225e-34);
      v111 = v110 + 8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, v110 + 8);
      *(_WORD *)(v104 + 12) = 2081;
      sub_1000AED38();
      v112 = dispatch thunk of CustomStringConvertible.description.getter(v72);
      v263 = sub_1000CE1C8(v112, v113, &v264);
      v114 = v111;
      v73 = v259;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, v114);
      v115 = sub_1000986C4();
      v116 = (void (*)(uint64_t, uint64_t))v254;
      ((void (*)(char *, uint64_t, double))v254)(v103, v72, v115);
      sub_1000D0254((void *)&_mh_execute_header, v106, v117, "Could not find LocationModel for active location, identifier=%{private,mask.hash}s");
      v118 = v262;
      sub_1000C1934();
      sub_1000986F0(v118);
      sub_1000986F0(v104);

      sub_1000C4CD8();
      v116(v261, v109);
    }
    else
    {

      sub_1000C4CD8();
      v139 = (void (*)(uint64_t, uint64_t))v254;
      v254(v103, v72);
      v139(v104, v72);
    }
    goto LABEL_40;
  }
  v119 = v250;
  v120 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v85 + 32))(v250, v80, v86);
  LocationModel.coalesceLocation.getter(v120);
  v121 = v256;
  sub_100088FC8(v101, 1, v256);
  if (!v122)
  {
    v140 = v247;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v247 + 32))(v100, v101, v121);
    v141 = *sub_1000C6748(v248) + *v68;
    sub_1000992EC(v141, (uint64_t)&v263);
    v142 = v141;
    v143 = v238;
    sub_10062361C(v142, v238);
    v144 = sub_1000C1F74();
    sub_100088FC8(v144, v145, v252);
    if (!v146)
    {
      v147 = v143;
      v148 = v236;
      sub_10007802C(v147, v236, type metadata accessor for OpenL2Descriptor);
      if (*(_BYTE *)(v148 + 1) == 1)
      {
        sub_1000C4CD8();
        sub_1000215BC(v148, type metadata accessor for OpenL2Descriptor);
        sub_1000DF7FC();
        sub_1000C3DD0();
        sub_1000C6170();
        goto LABEL_40;
      }
      v182 = sub_1000CD8FC(*(_QWORD *)(v76 + 64));
      v183 = Location.id.getter(v182);
      v184 = v233;
      sub_1000EED10(v183, v185, v148);
      sub_1000986C4();
      v186 = v184;
      swift_bridgeObjectRelease();
      v187 = type metadata accessor for LocationWeatherDataState(0);
      v188 = sub_1000C0944();
      sub_100088FC8(v188, v189, v187);
      if (v122)
      {
        sub_100021A14(v186, &qword_100BC3380);
        v88 = v258;
      }
      else
      {
        v194 = v231;
        sub_1000EADE8();
        sub_1000215BC(v186, type metadata accessor for LocationWeatherDataState);
        v195 = type metadata accessor for WeatherData(0);
        v196 = sub_1000C1F74();
        v199 = sub_100088FC8(v196, v197, v195);
        if (!v198)
        {
          v209 = v228;
          WeatherDataModel.hourlyForecast.getter(v199);
          sub_1000215BC(v194, type metadata accessor for WeatherData);
          v210 = v230;
          v211 = Forecast.forecast.getter(v230);
          (*(void (**)(uint64_t, uint64_t))(v229 + 8))(v209, v210);
          swift_bridgeObjectRelease();
          v212 = sub_1000CD8FC(*(_QWORD *)(v76 + 64));
          v213 = Location.id.getter(v212);
          v214 = v225;
          sub_1000EED10(v213, v215, v211);
          sub_1000986C4();
          swift_bridgeObjectRelease();
          sub_100088FC8(v214, 1, v187);
          if (v216)
          {
            sub_100021A14(v214, &qword_100BC3380);
            v217 = v195;
            v220 = v224;
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v224, 1, 1, v217);
          }
          else
          {
            v220 = v224;
            sub_1000EADE8();
            sub_1000998E4(v221, type metadata accessor for LocationWeatherDataState);
          }
          v88 = v258;
          v73 = v259;
          v68 = &OBJC_IVAR____TtC7Weather21AppContinuationBridge_pendingOpenL2Descriptor;
          v222 = v262;
          sub_1000C6748(v248);
          sub_100264C20(v220);
          sub_1000C4CD8();
          sub_100021A14((uint64_t)v220, &qword_100BC3460);
          sub_1000B30B8(type metadata accessor for OpenL2Descriptor, (uint64_t)v265);
          (*(void (**)(uint64_t, uint64_t))(v247 + 8))(v245, v256);
          sub_1000C3DD0();
          v254((char *)v261, v222);
          goto LABEL_41;
        }
        sub_100021A14(v194, &qword_100BC3460);
        v88 = v258;
      }
      sub_1000C4CD8();
      sub_1000B30B8(type metadata accessor for OpenL2Descriptor, (uint64_t)v265);
      sub_1000DF7FC();
      sub_1000C3DD0();
      sub_1000C6170();
      goto LABEL_41;
    }
    sub_1000C4CD8();
    (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v100, v121);
    sub_1000C3DD0();
    sub_1000C6170();
    sub_100021A14(v143, &qword_100BC61F8);
LABEL_40:
    v88 = v258;
    goto LABEL_41;
  }
  sub_100021A14(v101, &qword_100BC35F8);
  if (qword_100BC24B0 != -1)
    swift_once(&qword_100BC24B0, sub_1006F391C);
  v123 = type metadata accessor for Logger(0);
  sub_1000AECD4(v123, (uint64_t)qword_100CAF1F8);
  v124 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v85 + 16);
  v125 = v237;
  v126 = v124(v237, v119, v86);
  v127 = Logger.logObject.getter(v126);
  v129 = static os_log_type_t.error.getter(v127, v128);
  v130 = v86;
  if (os_log_type_enabled(v127, v129))
  {
    sub_1000D0CE4();
    v251 = sub_1000C5B78();
    v264 = v251;
    sub_1000DA044(7.2225e-34);
    v132 = v131 + 8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, v131 + 8);
    *(_WORD *)(v85 + 12) = 2081;
    v133 = v235;
    v124(v235, v125, v130);
    v134 = String.init<A>(describing:)(v133);
    v263 = sub_1000CE1C8(v134, v135, &v264);
    v73 = v259;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, v132);
    swift_bridgeObjectRelease();
    v136 = *(void (**)(uint64_t, uint64_t))(v260 + 8);
    sub_1000998A8();
    sub_1000D0254((void *)&_mh_execute_header, v127, v137, "Could not find coalesceLocation for active LocationModel, locationModel=%{private,mask.hash}s");
    v138 = v251;
    sub_1000C1934();
    sub_1000986F0(v138);
    sub_1000986F0(v85);

    sub_1000C4CD8();
  }
  else
  {

    sub_1000C4CD8();
    v136 = *(void (**)(uint64_t, uint64_t))(v85 + 8);
    sub_1000998A8();
  }
  v136(v250, v130);
  sub_1000C6170();
  v88 = v258;
  v68 = &OBJC_IVAR____TtC7Weather21AppContinuationBridge_pendingOpenL2Descriptor;
LABEL_41:
  v149 = *(_QWORD *)(v76 + 64);
  sub_100080C0C(v149 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_modalView, v88, type metadata accessor for ModalViewState);
  if (swift_getEnumCaseMultiPayload(v88))
  {
    v150 = type metadata accessor for ModalViewState;
LABEL_43:
    v151 = v88;
LABEL_44:
    sub_1000215BC(v151, v150);
    return;
  }
  v152 = v68;
  sub_10007802C(v88, v73, type metadata accessor for LocationPreviewViewState);
  v153 = v255;
  sub_10062F730(v255);
  v154 = sub_1000C1F74();
  v155 = v256;
  v157 = sub_100088FC8(v154, v156, v256);
  if (v122)
  {
    sub_1000998E4(v157, type metadata accessor for LocationPreviewViewState);
    v158 = &qword_100BC35F8;
    v159 = v153;
  }
  else
  {
    v160 = v247;
    v161 = v253;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v247 + 32))(v253, v153, v155);
    v162 = *sub_1000C0FB8(v248) + *v152;
    sub_1000992EC(v162, (uint64_t)&v264);
    v163 = v162;
    v164 = v244;
    sub_10062361C(v163, v244);
    v165 = sub_1000C0944();
    sub_100088FC8(v165, v166, v252);
    if (!v167)
    {
      v169 = v164;
      v170 = v241;
      sub_10007802C(v169, v241, type metadata accessor for OpenL2Descriptor);
      if ((*(_BYTE *)(v170 + 1) & 1) == 0 || (*(_BYTE *)(v170 + *(int *)(v252 + 28) + 16) & 1) != 0)
      {
        sub_1000215BC(v170, type metadata accessor for OpenL2Descriptor);
        sub_1000D13A8();
        v150 = type metadata accessor for LocationPreviewViewState;
        v151 = v73;
        goto LABEL_44;
      }
      sub_1000DB418((_QWORD *)(v248 + 56), *(_QWORD *)(v248 + 80));
      swift_bridgeObjectRetain();
      sub_1004E1BC8();
      v172 = v171;
      swift_bridgeObjectRelease();
      if ((v172 & 1) != 0)
      {
        v174 = *(_QWORD *)(v149 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 16);
        swift_bridgeObjectRetain();
        v176 = Location.id.getter(v175);
        v177 = v234;
        sub_1000EED10(v176, v178, v174);
        sub_1000986C4();
        swift_bridgeObjectRelease();
        v179 = type metadata accessor for LocationWeatherDataState(0);
        sub_100088FC8(v177, 1, v179);
        if (v122)
        {
          v180 = &qword_100BC3380;
          v181 = v177;
        }
        else
        {
          v190 = v232;
          sub_1000EADE8();
          sub_1000215BC(v177, type metadata accessor for LocationWeatherDataState);
          v191 = type metadata accessor for WeatherData(0);
          v193 = sub_100088FC8(v190, 1, v191);
          if (!v192)
          {
            v200 = v228;
            WeatherDataModel.hourlyForecast.getter(v193);
            sub_1000215BC(v190, type metadata accessor for WeatherData);
            v201 = v230;
            Forecast.forecast.getter(v230);
            (*(void (**)(uint64_t, uint64_t))(v229 + 8))(v200, v201);
            sub_1000986C4();
            v202 = *(_QWORD *)(*(_QWORD *)(v76 + 64) + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 16);
            v203 = sub_100099360();
            v204 = v253;
            v205 = Location.id.getter(v203);
            v206 = v227;
            sub_1000EED10(v205, v207, v202);
            sub_1000986C4();
            sub_100075DF4();
            sub_100088FC8(v206, 1, v179);
            if (v208)
            {
              sub_100021A14(v206, &qword_100BC3380);
              v218 = v226;
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v226, 1, 1, v191);
            }
            else
            {
              v218 = v226;
              sub_1000EADE8();
              sub_1000998E4(v219, type metadata accessor for LocationWeatherDataState);
            }
            sub_1000C0FB8(v248);
            sub_100264C20(v218);
            sub_100021A14((uint64_t)v218, &qword_100BC3460);
            sub_1000B30B8(type metadata accessor for OpenL2Descriptor, (uint64_t)&v266);
            (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v204, v155);
            goto LABEL_63;
          }
          v180 = &qword_100BC3460;
          v181 = v190;
        }
        sub_100021A14(v181, v180);
        v88 = v259;
        sub_1000B30B8(type metadata accessor for OpenL2Descriptor, (uint64_t)&v266);
        sub_1000D13A8();
        v150 = type metadata accessor for LocationPreviewViewState;
        goto LABEL_43;
      }
      sub_1000998E4(v173, type metadata accessor for OpenL2Descriptor);
      (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v253, v155);
LABEL_63:
      v150 = type metadata accessor for LocationPreviewViewState;
      v151 = v259;
      goto LABEL_44;
    }
    v168 = (*(uint64_t (**)(uint64_t, uint64_t))(v160 + 8))(v161, v155);
    sub_1000998E4(v168, type metadata accessor for LocationPreviewViewState);
    v158 = &qword_100BC61F8;
    v159 = v164;
  }
  sub_100021A14(v159, v158);
}

uint64_t type metadata accessor for OpenL2HandlerObserver()
{
  return objc_opt_self(_TtC7Weather21OpenL2HandlerObserver);
}

uint64_t sub_10062361C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BC61F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100623664(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABB6BC, 1);
}

void sub_100623674()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;

  sub_1000BA294(&qword_100BF7FF8);
  sub_1000B42B0();
  __chkstk_darwin(v0);
  sub_100098728();
  v3 = v2 - v1;
  v4 = sub_1000BA294(&qword_100BF8000);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - v9;
  v11 = sub_1000BA294(&qword_100BF8008);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100098728();
  v15 = (_QWORD *)(v14 - v13);
  sub_100094EE4();
  sub_10017BAA0();
  swift_release();
  if ((v35 & 0xC0) == 0x80
    && (v35 == 128 ? (v16 = v23 == 1) : (v16 = 0),
        v16 && !(v25 | v24 | v26 | v27 | v28 | v29 | v30 | v31 | v32 | v33 | v34)))
  {
    *v15 = static Color.clear.getter(v23);
    swift_storeEnumTagMultiPayload(v15, v11, 0);
    v17 = sub_100624DBC();
    sub_1000E72B0(v17, (uint64_t)&type metadata for Color, v18, (uint64_t)&protocol witness table for Color, v17);
  }
  else
  {
    sub_10019E948(v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35);
    sub_1006238D8(v3);
    if (qword_100BC2220 != -1)
      swift_once(&qword_100BC2220, sub_1005BA224);
    v19 = qword_100CAEDA0;
    sub_100037768(v3, (uint64_t)v7, &qword_100BF7FF8);
    *(_QWORD *)&v7[*(int *)(v4 + 36)] = v19;
    sub_100094EE4();
    sub_100021AA4(v3, &qword_100BF7FF8);
    sub_1000787D4((uint64_t)v7, (uint64_t)v10, &qword_100BF8000);
    sub_1000BCF38((uint64_t)v10, (uint64_t)v15);
    swift_storeEnumTagMultiPayload(v15, v11, 1);
    v20 = sub_100624DBC();
    sub_1000E72B0(v20, (uint64_t)&type metadata for Color, v21, (uint64_t)&protocol witness table for Color, v20);
    sub_1000C28AC((uint64_t)v10);
  }
  sub_100098640();
}

void sub_1006238D8(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int8x16_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  int8x16_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD v89[3];
  uint64_t v90;
  char v91;
  _BYTE v92[41];
  char v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  unsigned __int8 v100[8];
  uint64_t v101;

  v88 = a1;
  v82 = sub_1000BA294(&qword_100BD9AF0);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100098728();
  v5 = v4 - v3;
  v81 = sub_1000BA294(&qword_100BF8090);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100098728();
  v9 = v8 - v7;
  v87 = sub_1000BA294(&qword_100BF8048);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100088FDC();
  v83 = v11;
  sub_1000BA294((uint64_t *)&unk_100C09DB0);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100098728();
  v15 = v14 - v13;
  v80.i64[0] = sub_1000BA294(&qword_100BF8038);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  v18 = &v75.i8[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v19);
  v79.i64[0] = (uint64_t)v75.i64 - v20;
  v84 = sub_1000BA294(&qword_100BF8098);
  sub_1000B42B0();
  __chkstk_darwin(v21);
  sub_100088FDC();
  v86 = v22;
  v23 = sub_1000BA294(&qword_100BF80A0);
  sub_1000B42B0();
  __chkstk_darwin(v24);
  sub_100098728();
  v27 = (_QWORD *)(v26 - v25);
  v85 = sub_1000BA294(&qword_100BF8028);
  sub_1000B42B0();
  __chkstk_darwin(v28);
  sub_100098728();
  v31 = v30 - v29;
  sub_100094EE4();
  sub_10017BAA0();
  swift_release();
  v33 = v100[0];
  v34 = v100[0] >> 6;
  if (!v34)
  {
    if ((v94.i8[0] & 1) != 0)
    {
      v57 = (unint64_t)v94.i64[0] >> 8;
      v58 = v1[5];
      v59 = v1[6];
      sub_1000DB418(v1 + 2, v58);
      v90 = v58;
      v60 = sub_1000D1964(*(_QWORD *)(v59 + 16));
      sub_1000DDD50((uint64_t)v60);
      v91 = v57;
      sub_1002A56EC((uint64_t)v89, (uint64_t)v92);
      v93 = 0;
      sub_1002A5298();
      v61 = sub_1002A51D0();
      sub_1000DA064(v61, (uint64_t)&type metadata for SevereWeatherFeatureView, (uint64_t)&type metadata for NotificationsOptInNotificationPermissionView, v62, v61);
      sub_1002A5728(v89);
    }
    else
    {
      v44 = v1[5];
      v45 = v1[6];
      sub_1000DB418(v1 + 2, v44);
      v90 = v44;
      v46 = sub_1000D1964(*(_QWORD *)(v45 + 8));
      sub_1000DDD50((uint64_t)v46);
      sub_1002A5760((uint64_t)v89, (uint64_t)v92);
      v93 = 1;
      sub_1002A5298();
      v47 = sub_1002A51D0();
      sub_1000DA064(v47, (uint64_t)&type metadata for SevereWeatherFeatureView, (uint64_t)&type metadata for NotificationsOptInNotificationPermissionView, v48, v47);
      sub_1002A579C(v89);
    }
    v53 = &qword_100BF8058;
    sub_1000CE570((uint64_t)&v94, v9);
    sub_1000CCB58(v9, (uint64_t)v100);
    v63 = sub_1000BA294(&qword_100BF8058);
    sub_100624F08();
    v64 = sub_100624F90();
    v65 = v83;
    sub_1000D8F28(v9, v63, v66, v67, v64);
    v68 = v86;
    sub_1000BCF38(v65, v86);
    sub_1000B4798(v68, (uint64_t)&v101);
    sub_100624E60();
    sub_100624EE4();
    sub_1000D8F28(v68, v85, v70, v71, v69);
    sub_1000C28AC(v65);
    v42 = &v94;
LABEL_11:
    v43 = v53;
    goto LABEL_12;
  }
  if (v34 != 1)
  {
    v49 = vorrq_s8(vorrq_s8(vorrq_s8(v99, v98), vorrq_s8(v97, v96)), vorrq_s8(v95, v94));
    if (*(_QWORD *)&vorr_s8(*(int8x8_t *)v49.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL)) || v100[0] != 128)
    {
      *v27 = static Color.clear.getter(v32);
      swift_storeEnumTagMultiPayload(v27, v23, 0);
      sub_100625014(&qword_100BF8030, &qword_100BF8038);
      v73 = v72;
      swift_retain();
      _ConditionalContent<>.init(storage:)(v27, &type metadata for Color, v80.i64[0], &protocol witness table for Color, v73);
      sub_1000C4CE4();
      sub_1000CCB58(v23, (uint64_t)&v101);
      v74 = sub_100624E60();
      sub_1000BB258(v74);
      sub_1000C28AC(v31);
      swift_release();
      goto LABEL_13;
    }
    sub_10003B59C((uint64_t)(v1 + 2), (uint64_t)&v94);
    v50 = enum case for ColorScheme.dark(_:);
    v51 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 104))(v15, v50, v51);
    _s7Weather24LocationCompositionStateOwst_0(v15, 0, 1, v51);
    v52 = v80.i64[0];
    sub_1000CE570(v15, (uint64_t)&v18[*(int *)(v80.i64[0] + 36)]);
    sub_100625120((uint64_t)&v94, (uint64_t)v18);
    sub_100021AA4(v15, (uint64_t *)&unk_100C09DB0);
    sub_10062515C(&v94);
    v53 = &qword_100BF8038;
    v54 = v79.i64[0];
    sub_1000787D4((uint64_t)v18, v79.i64[0], &qword_100BF8038);
    sub_1000CE570(v54, (uint64_t)v27);
    swift_storeEnumTagMultiPayload(v27, v23, 1);
    sub_100625014(&qword_100BF8030, &qword_100BF8038);
    _ConditionalContent<>.init(storage:)(v27, &type metadata for Color, v52, &protocol witness table for Color, v55);
    sub_1000C4CE4();
    sub_1000CCB58(v23, (uint64_t)&v101);
    v56 = sub_100624E60();
    sub_1000BB258(v56);
    sub_1000C28AC(v31);
    v42 = (int8x16_t *)v54;
    goto LABEL_11;
  }
  v100[0] &= 1u;
  v75 = v94;
  v80 = v98;
  v79 = v99;
  v76 = v95;
  v78 = v97;
  v77 = v96;
  sub_100624004((uint64_t)&v94, v5);
  sub_10019E948(v75.i64[0], v75.i64[1], v76.i64[0], v76.i64[1], v77.i64[0], v77.i64[1], v78.i64[0], v78.i64[1], v80.i64[0], v80.i64[1], v79.i64[0], v79.i64[1], v33);
  sub_1000BCF38(v5, v9);
  sub_1000B4798(v9, (uint64_t)v100);
  v35 = sub_1000BA294(&qword_100BF8058);
  sub_100624F08();
  v37 = v36;
  v38 = sub_100624F90();
  v39 = v83;
  _ConditionalContent<>.init(storage:)(v9, v35, v82, v37, v38);
  v40 = v86;
  sub_100037768(v39, v86, &qword_100BF8048);
  sub_1000B4798(v40, (uint64_t)&v101);
  v41 = sub_100624E60();
  sub_1000BB258(v41);
  sub_100021AA4(v39, &qword_100BF8048);
  v42 = (int8x16_t *)v5;
  v43 = &qword_100BD9AF0;
LABEL_12:
  sub_100021AA4((uint64_t)v42, v43);
LABEL_13:
  sub_100098640();
}

void sub_100624004(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t OpaqueTypeConformance2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44[16];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v43 = a2;
  v42 = type metadata accessor for AutomationInfo(0);
  __chkstk_darwin(v42);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294((uint64_t *)&unk_100C09DB0);
  __chkstk_darwin(v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BF8088);
  v39 = *(_QWORD *)(v9 - 8);
  v40 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_1000BA294(&qword_100BF8078);
  __chkstk_darwin(v38);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_1000BA294(&qword_100BD9AE8);
  __chkstk_darwin(v41);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = v2;
  v46 = a1;
  v37 = sub_1000BA294(&qword_100BF80A8);
  v16 = sub_100075EB0(&qword_100BF80B0);
  v17 = sub_100075EB0(&qword_100BD6F90);
  v18 = sub_100075EB0(&qword_100BF80B8);
  v19 = sub_100075EB0(&qword_100BF80C0);
  sub_1002A58E0(&qword_100BF80C8, &qword_100BF80C0);
  v47 = v19;
  v48 = v20;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v47, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
  v47 = v18;
  v48 = OpaqueTypeConformance2;
  v22 = swift_getOpaqueTypeConformance2(&v47, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v23 = sub_100075EB0(&qword_100BC66F0);
  sub_1002A58E0(&qword_100BD6FA0, &qword_100BC66F0);
  v47 = v23;
  v48 = v24;
  v25 = swift_getOpaqueTypeConformance2(&v47, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v47 = v16;
  v48 = v17;
  v49 = v22;
  v50 = v25;
  v26 = swift_getOpaqueTypeConformance2(&v47, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  NavigationView.init(content:)(sub_100625190, v44, v37, v26);
  v28 = static Color.primary.getter(v27);
  KeyPath = swift_getKeyPath(&unk_1009B8590);
  v31 = v39;
  v30 = v40;
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v13, v11, v40);
  v32 = (uint64_t *)&v13[*(int *)(v38 + 36)];
  *v32 = KeyPath;
  v32[1] = v28;
  (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v30);
  v33 = enum case for ColorScheme.dark(_:);
  v34 = type metadata accessor for ColorScheme(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(v8, v33, v34);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v34);
  sub_100037768((uint64_t)v8, (uint64_t)&v15[*(int *)(v41 + 36)], (uint64_t *)&unk_100C09DB0);
  sub_100037768((uint64_t)v13, (uint64_t)v15, &qword_100BF8078);
  sub_100021AA4((uint64_t)v8, (uint64_t *)&unk_100C09DB0);
  sub_100021AA4((uint64_t)v13, &qword_100BF8078);
  v35 = type metadata accessor for AutomationViewInfo(0);
  swift_storeEnumTagMultiPayload(v5, v35, 6);
  swift_storeEnumTagMultiPayload(v5, v42, 0);
  sub_1003354B0();
  sub_1002BA0F0((uint64_t)v5);
  sub_100021AA4((uint64_t)v15, &qword_100BD9AE8);
}

uint64_t sub_1006243C4@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t OpaqueTypeConformance2;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49[16];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v41 = a1;
  v48 = a3;
  v43 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0, a4);
  v42 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_1000BA294(&qword_100BF80B8);
  v45 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_1000BA294(&qword_100BF80B0);
  v47 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v40 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = static Alignment.center.getter(v11);
  v52 = v12;
  sub_100624ACC(a2, a1);
  v13 = LocalizedStringKey.init(stringLiteral:)(0x6163696669746F4ELL, 0xED0000736E6F6974);
  v17 = Text.init(_:tableName:bundle:comment:)(v13, v15, v14 & 1, v16, 0, 0, 0, "Navigation title of the notification setting view", 49, 2);
  v19 = v18;
  v21 = v20;
  v23 = v22 & 1;
  v24 = sub_1000BA294(&qword_100BF80C0);
  sub_1002A58E0(&qword_100BF80C8, &qword_100BF80C0);
  v26 = v25;
  View.navigationTitle(_:)(v17, v19, v23, v21, v24, v25);
  sub_1000D31B4(v17, v19, v23);
  swift_bridgeObjectRelease();
  sub_100021AA4((uint64_t)&v51, &qword_100BF80C0);
  v27 = v42;
  v28 = v43;
  (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v7, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v43);
  v51 = v24;
  v52 = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v51, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
  v30 = v40;
  v31 = v44;
  View.navigationBarTitleDisplayMode(_:)(v7, v44, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v28);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v9, v31);
  v50 = v41;
  v32 = sub_1000BA294(&qword_100BD6F90);
  v51 = v31;
  v52 = OpaqueTypeConformance2;
  v33 = swift_getOpaqueTypeConformance2(&v51, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v34 = sub_100075EB0(&qword_100BC66F0);
  sub_1002A58E0(&qword_100BD6FA0, &qword_100BC66F0);
  v51 = v34;
  v52 = v35;
  v36 = swift_getOpaqueTypeConformance2(&v51, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v37 = v46;
  View.toolbar<A>(content:)(sub_1006251A0, v49, v46, v32, v33, v36);
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v30, v37);
}

uint64_t sub_100624754(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];
  uint64_t v14;

  v2 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v2);
  v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_1000BA294(&qword_100BC66F0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static ToolbarItemPlacement.confirmationAction.getter(v9);
  v14 = a1;
  v10 = sub_1000BA294(&qword_100BC4FA0);
  sub_1002A58E0(&qword_100BC4FC0, &qword_100BC4FA0);
  ToolbarItem<>.init(placement:content:)(v4, sub_1006251A8, v13, v10);
  sub_1002A58E0(&qword_100BD6FA0, &qword_100BC66F0);
  static ToolbarContentBuilder.buildBlock<A>(_:)(v8, v5, v11);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10062489C(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  _OWORD v4[3];
  uint64_t v5;

  sub_1006251B0(a1, (uint64_t)v4);
  v1 = swift_allocObject(&unk_100B85450, 72, 7);
  v2 = v4[1];
  *(_OWORD *)(v1 + 16) = v4[0];
  *(_OWORD *)(v1 + 32) = v2;
  *(_OWORD *)(v1 + 48) = v4[2];
  *(_QWORD *)(v1 + 64) = v5;
  return Button.init(action:label:)(sub_100625210, v1, sub_100624968, 0, &type metadata for Text, &protocol witness table for Text);
}

uint64_t sub_100624928(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[5];
  v2 = a1[6];
  sub_1000DB418(a1 + 2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 8) + 16))(v1);
}

void sub_100624968(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = type metadata accessor for Font.TextStyle(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = LocalizedStringKey.init(stringLiteral:)(1701736260, 0xE400000000000000);
  v10 = Text.init(_:tableName:bundle:comment:)(v6, v8, v7 & 1, v9, 0, 0, 0, "Button that dismisses presented notification settings view", 58, 2);
  v12 = v11;
  v14 = v13;
  v16 = v15 & 1;
  v17 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Font.TextStyle.body(_:), v2);
  static Font.Weight.semibold.getter(v17);
  v18 = static Font.system(_:weight:)(v5);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v19 = Text.font(_:)(v18, v10, v12, v16, v14);
  v21 = v20;
  LOBYTE(v3) = v22;
  v24 = v23;
  swift_release();
  sub_1000D31B4(v10, v12, v16);
  swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = v21;
  *(_BYTE *)(a1 + 16) = v3 & 1;
  *(_QWORD *)(a1 + 24) = v24;
}

void sub_100624ACC(const void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 __dst[7];
  _QWORD v14[14];
  char v15;
  _BYTE v16[8];
  _BYTE __src[104];
  _BYTE v18[80];

  sub_100625218(a1, v16);
  sub_100625218(a1, __src);
  if ((__src[96] & 1) != 0)
  {
    v4 = swift_allocObject(&unk_100B85478, 112, 7);
    memcpy((void *)(v4 + 16), __src, 0x60uLL);
    v14[10] = sub_10067962C;
    v14[11] = 0;
    LOBYTE(v14[12]) = 0;
    v14[0] = sub_1000BA294(&qword_100BC6738);
    v5 = qword_100BC1F00;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v5 != -1)
      swift_once(&qword_100BC1F00, sub_10014C654);
    swift_beginAccess(&xmmword_100CAE588, v18, 0, 0);
    sub_100037768((uint64_t)&xmmword_100CAE588, (uint64_t)__dst, &qword_100BCED50);
    if (*((_QWORD *)&__dst[1] + 1))
    {
      sub_10003C800(__dst, (uint64_t)&v14[3]);
      v14[1] = sub_10040BD2C;
      v14[2] = v4;
      v6 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
      v14[8] = _swiftEmptyArrayStorage;
      v14[9] = v6;
      memcpy(__dst, v14, 0x61uLL);
      sub_100037768((uint64_t)__dst, (uint64_t)v14, &qword_100BC66A0);
      v15 = 1;
      v7 = sub_1000BA294(&qword_100BC66A0);
      v8 = sub_100625298();
      sub_1002A58E0(&qword_100BC6698, &qword_100BC66A0);
      _ConditionalContent<>.init(storage:)(v14, &type metadata for NotificationSettingsContentView, v7, v8, v9);
      sub_100021AA4((uint64_t)__dst, &qword_100BC66A0);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    memcpy(v18, __src, 0x48uLL);
    sub_10003B59C(a2 + 16, (uint64_t)&__dst[4] + 8);
    memcpy(__dst, v18, 0x48uLL);
    sub_1006252D4((uint64_t)__dst, (uint64_t)v14);
    v15 = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10 = sub_1000BA294(&qword_100BC66A0);
    v11 = sub_100625298();
    sub_1002A58E0(&qword_100BC6698, &qword_100BC66A0);
    _ConditionalContent<>.init(storage:)(v14, &type metadata for NotificationSettingsContentView, v10, v11, v12);
    sub_100625310((uint64_t)__dst);
  }
}

unint64_t sub_100624DBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF8010;
  if (!qword_100BF8010)
  {
    v1 = sub_100075EB0(&qword_100BF8000);
    sub_100624F2C(&qword_100BF8018, &qword_100BF7FF8, (void (*)(void))sub_100624E60, sub_100624EE4);
    sub_1002A58E0(&qword_100BC4050, &qword_100BC4058);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF8010);
  }
  return result;
}

unint64_t sub_100624E60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF8020;
  if (!qword_100BF8020)
  {
    v1 = sub_100075EB0(&qword_100BF8028);
    sub_100625014(&qword_100BF8030, &qword_100BF8038);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF8020);
  }
  return result;
}

void sub_100624EE4()
{
  sub_100624F2C(&qword_100BF8040, &qword_100BF8048, sub_100624F08, (void (*)(void))sub_100624F90);
}

void sub_100624F08()
{
  sub_100624F2C(&qword_100BF8050, &qword_100BF8058, (void (*)(void))sub_1002A5298, (void (*)(void))sub_1002A51D0);
}

void sub_100624F2C(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t v7;

  if (!*a1)
  {
    v7 = sub_100075EB0(a2);
    a3();
    a4();
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v7), a1);
  }
  sub_100099960();
}

unint64_t sub_100624F90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF8060;
  if (!qword_100BF8060)
  {
    v1 = sub_100075EB0(&qword_100BD9AF0);
    sub_100625014(&qword_100BF8068, &qword_100BD9AE8);
    sub_1005B7D10();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF8060);
  }
  return result;
}

void sub_100625014(unint64_t *a1, uint64_t *a2)
{
  void (*v2)(void);
  uint64_t v4;

  if (!*a1)
  {
    v4 = sub_1000B4444(0, a2);
    v2();
    sub_1002A58E0(&qword_100BC66D0, &qword_100BC66D8);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4), a1);
  }
  sub_100099960();
}

unint64_t sub_100625084()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF8070;
  if (!qword_100BF8070)
  {
    v1 = sub_100075EB0(&qword_100BF8078);
    sub_1002A58E0(&qword_100BF8080, &qword_100BF8088);
    sub_1002A58E0((unint64_t *)&qword_100BC4B98, (uint64_t *)&unk_100C09EE0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF8070);
  }
  return result;
}

uint64_t sub_100625120(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for UVIDescriptorViewModelFactory(a2, a1);
  return a2;
}

_QWORD *sub_10062515C(_QWORD *a1)
{
  destroy for UVIDescriptorViewModelFactory(a1);
  return a1;
}

uint64_t sub_100625190@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;

  return sub_1006243C4(*(_QWORD *)(v2 + 16), *(const void **)(v2 + 24), a1, a2);
}

uint64_t sub_1006251A0()
{
  uint64_t v0;

  return sub_100624754(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1006251A8()
{
  uint64_t v0;

  return sub_10062489C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1006251B0(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for HomeAndWorkRefinementView(a2, a1);
  return a2;
}

uint64_t sub_1006251E4()
{
  uint64_t v0;

  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100625210()
{
  uint64_t v0;

  return sub_100624928((_QWORD *)(v0 + 16));
}

void *sub_100625218(const void *a1, void *a2)
{
  initializeWithTake for SearchViewModel(a2, a1);
  return a2;
}

uint64_t sub_100625254()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[13]);
  return swift_deallocObject(v0, 112, 7);
}

unint64_t sub_100625298()
{
  unint64_t result;

  result = qword_100BF80D0;
  if (!qword_100BF80D0)
  {
    result = swift_getWitnessTable(&unk_1009D3910, &type metadata for NotificationSettingsContentView);
    atomic_store(result, (unint64_t *)&qword_100BF80D0);
  }
  return result;
}

uint64_t sub_1006252D4(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for NotificationSettingsContentView(a2, a1);
  return a2;
}

uint64_t sub_100625310(uint64_t a1)
{
  destroy for NotificationSettingsContentView(a1);
  return a1;
}

unint64_t sub_100625348()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF80D8;
  if (!qword_100BF80D8)
  {
    v1 = sub_100075EB0(qword_100BF80E0);
    sub_100624DBC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF80D8);
  }
  return result;
}

uint64_t sub_1006253B4(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32);
}

uint64_t sub_1006253BC(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 48);
}

uint64_t sub_1006253C4(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 56);
}

uint64_t sub_1006253CC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 0, *(_QWORD *)(result - 8) + 64, 2);
    return 0;
  }
  return result;
}

uint64_t *sub_100625424(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _BOOL8 v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _BOOL8 v21;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = 8 * v8;
  v10 = v8;
  if (v7 <= 1)
  {
    if (v8 <= 3)
    {
      v12 = (~(-1 << v9) - v7 + 2) >> v9;
      if (v12 > 0xFFFE)
      {
        v11 = 4;
      }
      else
      {
        v13 = v12 != 0;
        v14 = v12 >= 0xFF;
        v11 = 2;
        if (!v14)
          v11 = v13;
      }
    }
    else
    {
      v11 = 1;
    }
    v10 = v11 + v8;
  }
  v15 = *(_DWORD *)(v6 + 80);
  if (v15 <= 7 && v10 <= 0x18 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0)
  {
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 2, *(_QWORD *)(a3 + 16)))
    {
      if (v7 <= 1)
      {
        if (v8 <= 3)
        {
          v20 = (~(-1 << v9) - v7 + 2) >> v9;
          if (v20 > 0xFFFE)
          {
            v19 = 4;
          }
          else
          {
            v21 = v20 != 0;
            v14 = v20 >= 0xFF;
            v19 = 2;
            if (!v14)
              v19 = v21;
          }
        }
        else
        {
          v19 = 1;
        }
        v8 += v19;
      }
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 2, v5);
    }
  }
  else
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v15 + 16) & ~v15));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1006255B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  result = _s7Weather24LocationCompositionStateOwet_0(a1, 2, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return result;
}

void *sub_100625604(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  size_t v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL8 v12;
  BOOL v13;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 2, v5);
  v7 = *(_QWORD *)(v5 - 8);
  if (v6)
  {
    v8 = *(_DWORD *)(v7 + 84);
    v9 = *(_QWORD *)(v7 + 64);
    if (v8 <= 1)
    {
      if (v9 <= 3)
      {
        v11 = (~(-1 << (8 * v9)) - v8 + 2) >> (8 * v9);
        if (v11 > 0xFFFE)
        {
          v10 = 4;
        }
        else
        {
          v12 = v11 != 0;
          v13 = v11 >= 0xFF;
          v10 = 2;
          if (!v13)
            v10 = v12;
        }
      }
      else
      {
        v10 = 1;
      }
      v9 += v10;
    }
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v5);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 2, v5);
  }
  return a1;
}

void *sub_1006256EC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  size_t v10;
  uint64_t v11;
  unsigned int v12;
  _BOOL8 v13;
  BOOL v14;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 2, v5);
  v7 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 2, v5);
  v8 = *(_QWORD *)(v5 - 8);
  if (v6)
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v5);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 2, v5);
      return a1;
    }
  }
  else
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 24))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(a1, v5);
  }
  v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_QWORD *)(v8 + 64);
  if (v9 <= 1)
  {
    if (v10 <= 3)
    {
      v12 = (~(-1 << (8 * v10)) - v9 + 2) >> (8 * v10);
      if (v12 > 0xFFFE)
      {
        v11 = 4;
      }
      else
      {
        v13 = v12 != 0;
        v14 = v12 >= 0xFF;
        v11 = 2;
        if (!v14)
          v11 = v13;
      }
    }
    else
    {
      v11 = 1;
    }
    v10 += v11;
  }
  memcpy(a1, a2, v10);
  return a1;
}

void *sub_10062581C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  size_t v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL8 v12;
  BOOL v13;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 2, v5);
  v7 = *(_QWORD *)(v5 - 8);
  if (v6)
  {
    v8 = *(_DWORD *)(v7 + 84);
    v9 = *(_QWORD *)(v7 + 64);
    if (v8 <= 1)
    {
      if (v9 <= 3)
      {
        v11 = (~(-1 << (8 * v9)) - v8 + 2) >> (8 * v9);
        if (v11 > 0xFFFE)
        {
          v10 = 4;
        }
        else
        {
          v12 = v11 != 0;
          v13 = v11 >= 0xFF;
          v10 = 2;
          if (!v13)
            v10 = v12;
        }
      }
      else
      {
        v10 = 1;
      }
      v9 += v10;
    }
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v5);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 2, v5);
  }
  return a1;
}

void *sub_100625904(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  size_t v10;
  uint64_t v11;
  unsigned int v12;
  _BOOL8 v13;
  BOOL v14;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 2, v5);
  v7 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 2, v5);
  v8 = *(_QWORD *)(v5 - 8);
  if (v6)
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v5);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 2, v5);
      return a1;
    }
  }
  else
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(a1, v5);
  }
  v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_QWORD *)(v8 + 64);
  if (v9 <= 1)
  {
    if (v10 <= 3)
    {
      v12 = (~(-1 << (8 * v10)) - v9 + 2) >> (8 * v10);
      if (v12 > 0xFFFE)
      {
        v11 = 4;
      }
      else
      {
        v13 = v12 != 0;
        v14 = v12 >= 0xFF;
        v11 = 2;
        if (!v14)
          v11 = v13;
      }
    }
    else
    {
      v11 = 1;
    }
    v10 += v11;
  }
  memcpy(a1, a2, v10);
  return a1;
}

uint64_t sub_100625A34(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL8 v11;
  BOOL v12;
  unsigned int v13;
  char v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  if (v6 <= 1)
    v8 = 0;
  else
    v8 = v6 - 2;
  if (v6 <= 1)
  {
    if (v7 <= 3)
    {
      v10 = (~(-1 << (8 * v7)) - v6 + 2) >> (8 * v7);
      if (v10 > 0xFFFE)
      {
        v9 = 4;
      }
      else
      {
        v11 = v10 != 0;
        v12 = v10 >= 0xFF;
        v9 = 2;
        if (!v12)
          v9 = v11;
      }
    }
    else
    {
      v9 = 1;
    }
    v7 += v9;
  }
  if (!a2)
    return 0;
  v13 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_30;
  v14 = 8 * v7;
  if (v7 <= 3)
  {
    v16 = ((v13 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      v15 = *(_DWORD *)(a1 + v7);
      if (!v15)
        goto LABEL_30;
      goto LABEL_23;
    }
    if (v16 > 0xFF)
    {
      v15 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_30;
      goto LABEL_23;
    }
    if (v16 < 2)
    {
LABEL_30:
      if (v8)
      {
        v18 = _s7Weather24LocationCompositionStateOwet_0(a1, v6, v4);
        if (v18 >= 3)
          return v18 - 2;
        else
          return 0;
      }
      return 0;
    }
  }
  v15 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_30;
LABEL_23:
  v17 = (v15 - 1) << v14;
  if (v7 > 3)
    v17 = 0;
  if ((_DWORD)v7)
  {
    if (v7 > 3)
      LODWORD(v7) = 4;
    __asm { BR              X12 }
  }
  return v8 + v17 + 1;
}

void sub_100625BB4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL8 v12;
  BOOL v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (v7 <= 1)
    v9 = 0;
  else
    v9 = v7 - 2;
  if (v7 <= 1)
  {
    if (v8 <= 3)
    {
      v11 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
      if (v11 > 0xFFFE)
      {
        v10 = 4;
      }
      else
      {
        v12 = v11 != 0;
        v13 = v11 >= 0xFF;
        v10 = 2;
        if (!v13)
          v10 = v12;
      }
    }
    else
    {
      v10 = 1;
    }
    v8 += v10;
  }
  v14 = 8 * v8;
  v13 = a3 >= v9;
  v15 = a3 - v9;
  if (v15 != 0 && v13)
  {
    if (v8 <= 3)
    {
      v18 = ((v15 + ~(-1 << v14)) >> v14) + 1;
      if (HIWORD(v18))
      {
        v16 = &dword_100000004;
      }
      else if (v18 >= 0x100)
      {
        v16 = 2;
      }
      else
      {
        v16 = v18 > 1;
      }
    }
    else
    {
      v16 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v16 = 0;
  }
  if (v9 < a2)
  {
    v17 = ~v9 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v19 = v17 & ~(-1 << v14);
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v19;
          *((_BYTE *)a1 + 2) = BYTE2(v19);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v19;
        }
        else
        {
          *(_BYTE *)a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v17;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X10 }
}

uint64_t sub_100625DC8(uint64_t a1, uint64_t a2)
{
  return _s7Weather24LocationCompositionStateOwet_0(a1, 2, *(_QWORD *)(a2 + 16));
}

uint64_t sub_100625DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, 2, *(_QWORD *)(a3 + 16));
}

uint64_t type metadata accessor for StateProcessorResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StateProcessorResult);
}

uint64_t destroy for VisibilityComponentView(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000B15F8(*(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  return sub_1000B15F8(*(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
}

uint64_t initializeWithCopy for VisibilityComponentView(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10008D47C(v7, v8);
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = v8;
  v9 = *(_QWORD *)(v2 + 64);
  LOBYTE(v2) = *(_BYTE *)(v2 + 72);
  sub_10008D47C(v9, v2);
  *(_QWORD *)(a1 + 64) = v9;
  *(_BYTE *)(a1 + 72) = v2;
  return a1;
}

uint64_t assignWithCopy for VisibilityComponentView(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = v2[2];
  *(_QWORD *)(a1 + 24) = v2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = v2[4];
  *(_QWORD *)(a1 + 40) = v2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = v2[6];
  v5 = *((_BYTE *)v2 + 56);
  sub_10008D47C(v4, v5);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 56) = v5;
  sub_1000B15F8(v6, v7);
  v8 = v2[8];
  LOBYTE(v2) = *((_BYTE *)v2 + 72);
  sub_10008D47C(v8, (char)v2);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v8;
  *(_BYTE *)(a1 + 72) = (_BYTE)v2;
  sub_1000B15F8(v9, v10);
  return a1;
}

uint64_t assignWithTake for VisibilityComponentView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_BYTE *)(a2 + 56);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = v7;
  sub_1000B15F8(v8, v9);
  v10 = *(_BYTE *)(a2 + 72);
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = v10;
  sub_1000B15F8(v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for VisibilityComponentView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 73))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VisibilityComponentView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 73) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1006260C8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABB828, 1);
}

uint64_t sub_1006260D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t OpaqueTypeConformance2;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[23];
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  _QWORD v34[18];
  char v35;
  _BYTE v36[144];
  _QWORD v37[2];
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  char v53;
  uint64_t v54;
  _BYTE v55[159];
  uint64_t v56[24];

  v27 = type metadata accessor for AutomationInfo(0);
  sub_10009D98C();
  __chkstk_darwin(v1);
  sub_100088FDC();
  v26 = v2;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v22 = *(_QWORD *)(v3 - 8);
  v23 = v3;
  sub_10009D98C();
  __chkstk_darwin(v4);
  sub_100088FDC();
  v19 = v5;
  v24 = sub_1000BA294(&qword_100BF8228);
  v25 = *(_QWORD *)(v24 - 8);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v20 = v7;
  sub_1000BA294(&qword_100BD9A38);
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_100088FDC();
  v21 = v9;
  v18 = static VerticalAlignment.center.getter(v10);
  v11 = static HorizontalAlignment.leading.getter(v18);
  sub_100626488(v0, v56);
  v33 = 0;
  v32 = v56[2];
  v31 = v56[6];
  v30 = v56[9];
  v29 = v56[13];
  v34[0] = v11;
  v34[1] = 0;
  LOBYTE(v34[2]) = 0;
  v34[3] = v56[0];
  v34[4] = v56[1];
  LOBYTE(v34[5]) = v56[2];
  v34[6] = v56[3];
  v34[7] = v56[4];
  v34[8] = v56[5];
  LOBYTE(v34[9]) = v56[6];
  v34[10] = v56[7];
  v34[11] = v56[8];
  LOBYTE(v34[12]) = v56[9];
  v34[13] = v56[10];
  v34[14] = v56[11];
  v34[15] = v56[12];
  LOWORD(v34[16]) = v56[13];
  BYTE2(v34[16]) = BYTE2(v56[13]);
  v34[17] = 0x3FF0000000000000;
  memcpy(v36, v34, sizeof(v36));
  v35 = 0;
  v37[0] = v11;
  v37[1] = 0;
  v38 = 0;
  v39 = v56[0];
  v40 = v56[1];
  v41 = v56[2];
  v42 = v56[3];
  v43 = v56[4];
  v44 = v56[5];
  v45 = v56[6];
  v46 = v56[7];
  v47 = v56[8];
  v48 = v56[9];
  v49 = v56[10];
  v50 = v56[11];
  v51 = v56[12];
  v52 = v56[13];
  v53 = BYTE2(v56[13]);
  v54 = 0x3FF0000000000000;
  sub_100626AB4((uint64_t)v34);
  sub_100626B34((uint64_t)v37);
  v55[151] = 0;
  memcpy(&v55[7], v36, 0x90uLL);
  v12 = memcpy((char *)&v28[2] + 1, v55, 0x97uLL);
  v28[0] = v18;
  v28[1] = 0;
  LOBYTE(v28[2]) = 0;
  v28[21] = 0;
  LOBYTE(v28[22]) = 0;
  static AccessibilityChildBehavior.combine.getter(v12);
  v13 = sub_1000BA294(&qword_100BF8230);
  v14 = sub_100626BB4();
  View.accessibilityElement(children:)(v19, v13, v14);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v19, v23);
  memcpy(v56, v28, 0xB1uLL);
  sub_100626BF8((uint64_t)v56);
  v28[0] = v13;
  v28[1] = v14;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v28, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibilityRespondsToUserInteraction(_:)(1, v24, OpaqueTypeConformance2);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v20, v24);
  v16 = type metadata accessor for AutomationCellInfo(0);
  swift_storeEnumTagMultiPayload(v26, v16, 16);
  swift_storeEnumTagMultiPayload(v26, v27, 1);
  sub_1003354CC();
  sub_1002BA0F0(v26);
  return sub_100021A68(v21, &qword_100BD9A38);
}

double sub_100626488@<D0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char *v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  __n128 v50;
  __n128 v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t KeyPath;
  uint64_t v78;
  char v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  double result;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  void (*v96)(char *, uint64_t);
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  char *v103;
  _OWORD v104[2];
  __int128 v105;
  _OWORD v106[2];

  v88 = a2;
  v3 = type metadata accessor for TypesettingLanguageAwareLineHeightRatio(0);
  v98 = *(_QWORD *)(v3 - 8);
  v99 = v3;
  __chkstk_darwin(v3);
  v90 = (char *)&v86 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000BA294(&qword_100BCCDA8);
  __chkstk_darwin(v5);
  v7 = (char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v86 - v9;
  v11 = a1;
  v12 = *a1;
  v13 = a1[1];
  v14 = v11[2];
  v100 = v11[3];
  v101 = v14;
  v15 = v11;
  v105 = *((_OWORD *)v11 + 2);
  *(_QWORD *)&v106[0] = v12;
  *((_QWORD *)&v106[0] + 1) = v13;
  v16 = sub_100114EF8();
  v91 = v16;
  swift_bridgeObjectRetain();
  v17 = Text.init<A>(_:)(v106, &type metadata for String, v16);
  v89 = v18;
  v20 = v19;
  v22 = v21 & 1;
  v23 = static Font.largeTitle.getter(v17);
  v24 = static Font.title2.getter();
  v102 = v15;
  v25 = v15[8];
  v95 = v25;
  v26 = *((unsigned __int8 *)v15 + 72);
  v94 = v26;
  sub_10008D47C(v25, v26);
  sub_100109B54();
  LOBYTE(v15) = v27;
  sub_1000B15F8(v25, v26);
  v28 = enum case for Font.Leading.tight(_:);
  v97 = enum case for Font.Leading.tight(_:);
  v29 = type metadata accessor for Font.Leading(0);
  v96 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v29 - 8) + 104);
  v103 = v10;
  v30 = v28;
  v31 = v29;
  v93 = v29;
  v96(v10, v30);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v31);
  v92 = v7;
  sub_10010B0C4((uint64_t)v10, (uint64_t)v7);
  swift_retain();
  swift_retain();
  v32 = sub_10040BDEC(v23, v24, v15 & 1, (uint64_t)v7);
  v33 = v17;
  v34 = v17;
  v35 = v89;
  v36 = Text.font(_:)(v32, v34, v89, v22, v20);
  v38 = v37;
  LOBYTE(v31) = v39;
  v87 = v40;
  swift_release();
  swift_release();
  swift_release();
  LOBYTE(v23) = v31 & 1;
  sub_1000D31B4(v33, v35, v22);
  swift_bridgeObjectRelease();
  sub_100021A68((uint64_t)v103, &qword_100BCCDA8);
  v41 = v90;
  static TypesettingLanguageAwareLineHeightRatio.disable.getter(v42);
  v43 = Text.typesettingLanguageAwareLineHeightRatio(_:isEnabled:)(v41, 1, v36, v38, v31 & 1, v87);
  v45 = v44;
  v47 = v46;
  v49 = v48 & 1;
  sub_1000D31B4(v36, v38, v23);
  v50 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, __n128))(v98 + 8))(v41, v99, v50);
  v106[0] = v105;
  v104[0] = v105;
  v51 = swift_bridgeObjectRetain();
  v52 = v91;
  v98 = Text.accessibilityLabel<A>(_:)(v104, v43, v45, v49, v47, &type metadata for String, v91, v51);
  v90 = v53;
  v99 = v54;
  LODWORD(v89) = v55 & 1;
  sub_1000D31B4(v43, v45, v49);
  swift_bridgeObjectRelease();
  sub_100121AA8((uint64_t)v106);
  *(_QWORD *)&v104[0] = v101;
  *((_QWORD *)&v104[0] + 1) = v100;
  swift_bridgeObjectRetain();
  v56 = Text.init<A>(_:)(v104, &type metadata for String, v52);
  v58 = v57;
  v60 = v59;
  v62 = v61 & 1;
  v63 = static Font.subheadline.getter(v56);
  v64 = static Font.footnote.getter(v63);
  v65 = v95;
  LOBYTE(v10) = v94;
  sub_10008D47C(v95, v94);
  sub_100109B54();
  LOBYTE(v43) = v66;
  sub_1000B15F8(v65, (char)v10);
  v67 = (uint64_t)v103;
  v68 = v93;
  ((void (*)(char *, _QWORD, uint64_t))v96)(v103, v97, v93);
  _s7Weather24LocationCompositionStateOwst_0(v67, 0, 1, v68);
  v69 = (uint64_t)v92;
  sub_10010B0C4(v67, (uint64_t)v92);
  swift_retain();
  swift_retain();
  v70 = sub_10040BDEC(v63, v64, v43 & 1, v69);
  v71 = v58;
  v72 = Text.font(_:)(v70, v56, v58, v62, v60);
  v74 = v73;
  LOBYTE(v58) = v75;
  v101 = v76;
  swift_release();
  swift_release();
  swift_release();
  LOBYTE(v58) = v58 & 1;
  sub_1000D31B4(v56, v71, v62);
  swift_bridgeObjectRelease();
  sub_100021A68((uint64_t)v103, &qword_100BCCDA8);
  KeyPath = swift_getKeyPath(&unk_1009B86F8);
  v78 = v102[6];
  LOBYTE(v64) = *((_BYTE *)v102 + 56);
  sub_10008D47C(v78, v64);
  sub_10010BCB4();
  LOBYTE(v62) = v79;
  sub_1000B15F8(v78, v64);
  v80 = v89;
  LOBYTE(v104[0]) = v89;
  v81 = v98;
  v82 = v99;
  v83 = v88;
  v84 = (uint64_t)v90;
  *v88 = v98;
  v83[1] = v84;
  *((_BYTE *)v83 + 16) = v80;
  v83[3] = v82;
  v83[4] = 0x3FF0000000000000;
  v83[5] = 0;
  *((_BYTE *)v83 + 48) = 0;
  v83[7] = v72;
  v83[8] = v74;
  *((_BYTE *)v83 + 72) = v58;
  v83[10] = v101;
  v83[11] = KeyPath;
  v83[12] = 4;
  *((_WORD *)v83 + 52) = 0;
  *((_BYTE *)v83 + 106) = (v62 & 1) == 0;
  sub_1000D55D4(v81, v84, v80);
  swift_bridgeObjectRetain();
  sub_1000D55D4(v72, v74, v58);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000D31B4(v72, v74, v58);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000D31B4(v81, v84, v104[0]);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_100626A74()
{
  const void *v0;
  _BYTE v2[73];

  memcpy(v2, v0, sizeof(v2));
  return sub_1006260D8();
}

uint64_t sub_100626AB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_BYTE *)(a1 + 96);
  sub_1000D55D4(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain();
  sub_1000D55D4(v2, v3, v4);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_100626B34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_BYTE *)(a1 + 96);
  sub_1000D31B4(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRelease();
  sub_1000D31B4(v2, v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_100626BB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF8238;
  if (!qword_100BF8238)
  {
    v1 = sub_100075EB0(&qword_100BF8230);
    result = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF8238);
  }
  return result;
}

uint64_t sub_100626BF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_BYTE *)(a1 + 120);
  sub_1000D31B4(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  swift_bridgeObjectRelease();
  sub_1000D31B4(v2, v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_100626C84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF8240;
  if (!qword_100BF8240)
  {
    v1 = sub_100075EB0(&qword_100BD9A40);
    sub_100626D08();
    sub_100051B90((unint64_t *)&qword_100BC6768, type metadata accessor for AutomationInfoViewModifier, (uint64_t)&unk_10099E6AC);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF8240);
  }
  return result;
}

unint64_t sub_100626D08()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100BF8248;
  if (!qword_100BF8248)
  {
    v1 = sub_100075EB0(&qword_100BD9A38);
    v2[0] = sub_100075EB0(&qword_100BF8230);
    v2[1] = sub_100626BB4();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100051B90((unint64_t *)&qword_100BC4E48, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF8248);
  }
  return result;
}

uint64_t sub_100626DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t LaunchEventData;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t active;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  v5[3] = a4;
  v5[4] = a5;
  v6 = type metadata accessor for Session.Kind(0);
  v5[5] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[6] = v7;
  v5[7] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000BA294(&qword_100BD6718);
  v5[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale.Language(0);
  v5[9] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[10] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[11] = swift_task_alloc(v11);
  v5[12] = swift_task_alloc(v11);
  v12 = type metadata accessor for Locale(0);
  v5[13] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[14] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[15] = swift_task_alloc(v14);
  v5[16] = swift_task_alloc(v14);
  v15 = sub_1000BA294(&qword_100BC39D8);
  v5[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  LaunchEventData = type metadata accessor for FirstLaunchEventData(0);
  v5[18] = LaunchEventData;
  v17 = *(_QWORD *)(LaunchEventData - 8);
  v5[19] = v17;
  v18 = *(_QWORD *)(v17 + 64);
  v5[20] = v18;
  v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[21] = swift_task_alloc(v19);
  v5[22] = swift_task_alloc(v19);
  v20 = type metadata accessor for DeviceInfo(0);
  v5[23] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v5[24] = v21;
  v5[25] = swift_task_alloc((*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1000BA294(&qword_100BCCC50);
  v5[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v22 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for TimeZone(0);
  v5[27] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v5[28] = v24;
  v25 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[29] = swift_task_alloc(v25);
  v5[30] = swift_task_alloc(v25);
  active = type metadata accessor for ActiveUserStatus(0);
  v5[31] = active;
  v27 = *(_QWORD *)(active - 8);
  v5[32] = v27;
  v5[33] = swift_task_alloc((*(_QWORD *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for Date(0);
  v5[34] = v28;
  v29 = *(_QWORD *)(v28 - 8);
  v5[35] = v29;
  v30 = (*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[36] = swift_task_alloc(v30);
  v5[37] = swift_task_alloc(v30);
  v5[38] = swift_task_alloc(v30);
  v31 = type metadata accessor for Logger(0);
  v5[39] = v31;
  v32 = *(_QWORD *)(v31 - 8);
  v5[40] = v32;
  v33 = (*(_QWORD *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[41] = swift_task_alloc(v33);
  v5[42] = swift_task_alloc(v33);
  v5[43] = swift_task_alloc(v33);
  return swift_task_switch(sub_10062703C, 0, 0);
}

uint64_t sub_10062703C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __n128 v15;
  void (*v16)(uint64_t, uint64_t, __n128);
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = v1[3];
  v3 = v1[38];
  v4 = v1[34];
  v5 = v1[35];
  static Logger.activeUser.getter(a1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = v1[38];
    v29 = v1[39];
    v30 = v1[43];
    v10 = v1[34];
    v27 = v1[35];
    v28 = v1[40];
    v26 = v10;
    v11 = (uint8_t *)sub_100098710(12);
    v12 = sub_100098710(32);
    v31 = v12;
    *(_DWORD *)v11 = 136315138;
    sub_100051B90((unint64_t *)&qword_100BC52F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v10);
    v1[2] = sub_1000CE1C8(v13, v14, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2, v1 + 3);
    v15 = swift_bridgeObjectRelease();
    v16 = *(void (**)(uint64_t, uint64_t, __n128))(v27 + 8);
    v16(v9, v26, v15);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Handling launch at %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1);
    sub_1000986F0(v12);
    sub_1000986F0((uint64_t)v11);

    v17 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v17(v30, v29);
  }
  else
  {
    v18 = v1[43];
    v19 = v1[39];
    v20 = v1[40];
    v16 = *(void (**)(uint64_t, uint64_t, __n128))(v1[35] + 8);
    ((void (*)(_QWORD, _QWORD))v16)(v1[38], v1[34]);

    v17 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v17(v18, v19);
  }
  v1[44] = v16;
  v1[45] = v17;
  v21 = (_QWORD *)v1[4];
  v22 = v21[5];
  v23 = v21[6];
  sub_1000DB418(v21 + 2, v22);
  v24 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ActiveUserServiceType.status.getter[1]);
  v1[46] = v24;
  *v24 = v1;
  v24[1] = sub_100627274;
  return dispatch thunk of ActiveUserServiceType.status.getter(v1[33], v22, v23);
}

uint64_t sub_100627274()
{
  uint64_t v0;

  sub_1000B43D4();
  sub_10009E3B0(*(_QWORD *)(v0 + 368));
  sub_10003BC90();
  return sub_1000BA3F4();
}

void sub_1006272A8(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  int v9;
  uint64_t v10;
  void *v11;
  os_log_type_t v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  os_log_type_t v58;
  _WORD *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  char v108;
  void (*v109)(uint64_t, uint64_t, __n128);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v2 = *(_QWORD *)(v1 + 208);
  v3 = *(_QWORD *)(v1 + 216);
  TimeZone.init(secondsFromGMT:)(0, a1);
  if (_s7Weather24LocationCompositionStateOwet_0(v2, 1, v3) == 1)
    goto LABEL_31;
  v4 = *(_QWORD *)(v1 + 296);
  v5 = *(_QWORD *)(v1 + 240);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 224) + 32))(v5, *(_QWORD *)(v1 + 208), *(_QWORD *)(v1 + 216));
  Date.startOfDay(timeZone:)(v5);
  sub_10009E578();
  if ((ActiveUserStatus.isFirstLaunchOfDay(now:)(v4) & 1) != 0)
  {
    sub_100627BAC();
    v110 = v6;
    v112 = v7;
    static DeviceInfo.current.getter(v6);
    v8 = objc_msgSend((id)objc_opt_self(TFCapabilities), "isInternalBuild");
    if ((v8 & 1) != 0)
    {
      v9 = 1;
    }
    else
    {
      v8 = objc_msgSend((id)objc_opt_self(WCCapabilities), "isSeedBuild");
      v9 = (int)v8;
    }
    v25 = Date.timeIntervalSince1970.getter(v8) * 1000.0;
    if ((~*(_QWORD *)&v25 & 0x7FF0000000000000) != 0)
    {
      if (v25 > -9.22337204e18)
      {
        if (v25 < 9.22337204e18)
        {
          v26 = *(void (**)(uint64_t, uint64_t))(v1 + 352);
          v27 = *(_QWORD *)(v1 + 288);
          v28 = *(_QWORD *)(v1 + 272);
          v29 = ActiveUserStatus.isFirstLaunchOfMonth(now:)(*(_QWORD *)(v1 + 296));
          v108 = v29;
          v30 = SessionManager.tracker.getter(v29);
          v106 = Tracker.diagnosticSubmissionAllowed.getter(v30);
          v31 = sub_10009880C();
          v32 = static TimeZone.current.getter(v31);
          Date.init()(v32);
          v33 = TimeZone.secondsFromGMT(for:)(v27);
          v26(v27, v28);
          v34 = sub_10009E578();
          if (v33 >= (uint64_t)0xFFFFFFFF80000000)
          {
            if (v33 <= 0x7FFFFFFF)
            {
              v103 = v33;
              v35 = *(_QWORD *)(v1 + 128);
              v36 = *(_QWORD *)(v1 + 136);
              v37 = static Locale.current.getter(v34);
              Locale.language.getter(v37);
              v38 = sub_1000B46B0(v35);
              Locale.Language.languageCode.getter(v38);
              sub_100098F80();
              type metadata accessor for Locale.LanguageCode(0);
              if (sub_100086130(v36) == 1)
              {
                v39 = sub_100021A68(*(_QWORD *)(v1 + 136), &qword_100BC39D8);
                v98 = 45;
                v100 = 0xE100000000000000;
              }
              else
              {
                v98 = Locale.LanguageCode.identifier.getter();
                v100 = v40;
                v39 = sub_1000DDD64();
              }
              v41 = *(_QWORD *)(v1 + 120);
              v42 = *(_QWORD *)(v1 + 64);
              v43 = static Locale.current.getter(v39);
              Locale.language.getter(v43);
              v44 = sub_1000B46B0(v41);
              Locale.Language.region.getter(v44);
              sub_100098F80();
              type metadata accessor for Locale.Region(0);
              if (sub_100086130(v42) == 1)
              {
                v45 = sub_100021A68(*(_QWORD *)(v1 + 64), &qword_100BD6718);
                v95 = 0xE100000000000000;
                v46 = 45;
              }
              else
              {
                v46 = Locale.Region.identifier.getter();
                v95 = v47;
                v45 = sub_1000DDD64();
              }
              v48 = DeviceInfo.productVersion.getter(v45);
              v50 = v49;
              if (v9)
              {
                v51 = DeviceInfo.buildVersion.getter();
                v53 = v52;
              }
              else
              {
                v51 = 0;
                v53 = 0;
              }
              v54 = swift_bridgeObjectRetain();
              v55 = FirstLaunchEventData.init(eventID:date:isFirstLaunchOfMonth:isDnu:utcOffset:languageCode:countryCode:osVersion:osBuild:)(v110, v112, (uint64_t)v25, v108 & 1, v106 & 1, v103, v98, v100, v54, v46, v95, v48, v50, v51, v53);
              v56 = static Logger.activeUser.getter(v55);
              v57 = Logger.logObject.getter(v56);
              v58 = static os_log_type_t.default.getter(v57);
              if (sub_1000C1990(v58))
              {
                v59 = (_WORD *)sub_100098710(2);
                *v59 = 0;
                sub_1000CDEAC((void *)&_mh_execute_header, v60, v61, "Submitting first launch event");
                sub_1000986F0((uint64_t)v59);
              }
              v62 = *(void (**)(uint64_t, uint64_t))(v1 + 360);
              v109 = *(void (**)(uint64_t, uint64_t, __n128))(v1 + 352);
              v63 = *(_QWORD *)(v1 + 336);
              v64 = *(_QWORD *)(v1 + 312);
              v65 = *(_QWORD *)(v1 + 288);
              v66 = *(_QWORD *)(v1 + 272);
              v96 = *(_QWORD *)(v1 + 176);
              v89 = *(_QWORD *)(v1 + 152);
              v91 = *(_QWORD *)(v1 + 144);
              v93 = *(_QWORD *)(v1 + 168);
              v68 = *(_QWORD *)(v1 + 48);
              v67 = *(_QWORD *)(v1 + 56);
              v69 = (void *)v57;
              v70 = *(_QWORD **)(v1 + 32);
              v71 = *(_QWORD *)(v1 + 40);
              v101 = *(_QWORD *)(v1 + 160);

              v62(v63, v64);
              v72 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v68 + 104))(v67, enum case for Session.Kind.userEvents(_:), v71);
              Date.init()(v72);
              SessionManager.start(for:identifier:startDate:timestampJitter:)(v67, v110, v112, v65, 0);
              v73 = swift_bridgeObjectRelease();
              v109(v65, v66, v73);
              v74 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 8))(v67, v71);
              SessionManager.tracker.getter(v74);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v89 + 16))(v93, v96, v91);
              v75 = *(unsigned __int8 *)(v89 + 80);
              v76 = (v75 + 16) & ~v75;
              v77 = swift_allocObject(&unk_100B856B8, v76 + v101, v75 | 7);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v89 + 32))(v77 + v76, v93, v91);
              Tracker.transaction(block:)(sub_1006286D0, v77);
              sub_10009880C();
              swift_release();
              Date.init()(v78);
              sub_10003BC90();
              SessionManager.end(endDate:completion:)(v79, v80, v81);
              ((void (*)(uint64_t, uint64_t))v109)(v65, v66);
              v82 = v70[5];
              v83 = v70[6];
              sub_1000DB418(v70 + 2, v82);
              v84 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ActiveUserServiceType.updateLastLaunchDate(to:)[1]);
              *(_QWORD *)(v1 + 376) = v84;
              *v84 = v1;
              v84[1] = sub_1006279EC;
              dispatch thunk of ActiveUserServiceType.updateLastLaunchDate(to:)(*(_QWORD *)(v1 + 296), v82, v83);
              return;
            }
            goto LABEL_30;
          }
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          return;
        }
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_28;
  }
  v10 = ((uint64_t (*)(void))static Logger.activeUser.getter)();
  v11 = (void *)Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (sub_1000C1990(v12))
  {
    v13 = (_WORD *)sub_100098710(2);
    *v13 = 0;
    sub_1000CDEAC((void *)&_mh_execute_header, v14, v15, "Already launched today - returning");
    sub_1000986F0((uint64_t)v13);
  }

  v16 = *(void (**)(uint64_t, uint64_t))(v1 + 352);
  v18 = *(_QWORD *)(v1 + 336);
  v17 = *(_QWORD *)(v1 + 344);
  v19 = *(_QWORD *)(v1 + 328);
  v20 = *(_QWORD *)(v1 + 296);
  v85 = *(_QWORD *)(v1 + 304);
  v86 = *(_QWORD *)(v1 + 288);
  v21 = *(_QWORD *)(v1 + 264);
  v22 = *(_QWORD *)(v1 + 272);
  v23 = *(_QWORD *)(v1 + 248);
  v24 = *(_QWORD *)(v1 + 256);
  v87 = *(_QWORD *)(v1 + 240);
  v88 = *(_QWORD *)(v1 + 232);
  v90 = *(_QWORD *)(v1 + 208);
  v92 = *(_QWORD *)(v1 + 200);
  v94 = *(_QWORD *)(v1 + 176);
  v97 = *(_QWORD *)(v1 + 168);
  v99 = *(_QWORD *)(v1 + 136);
  v102 = *(_QWORD *)(v1 + 128);
  v104 = *(_QWORD *)(v1 + 120);
  v105 = *(_QWORD *)(v1 + 96);
  v107 = *(_QWORD *)(v1 + 88);
  v111 = *(_QWORD *)(v1 + 64);
  v113 = *(_QWORD *)(v1 + 56);
  (*(void (**)(uint64_t, _QWORD))(v1 + 360))(v19, *(_QWORD *)(v1 + 312));
  v16(v20, v22);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v21, v23);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v85);
  swift_task_dealloc(v20);
  swift_task_dealloc(v86);
  swift_task_dealloc(v21);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v90);
  swift_task_dealloc(v92);
  swift_task_dealloc(v94);
  swift_task_dealloc(v97);
  swift_task_dealloc(v99);
  swift_task_dealloc(v102);
  swift_task_dealloc(v104);
  swift_task_dealloc(v105);
  swift_task_dealloc(v107);
  swift_task_dealloc(v111);
  swift_task_dealloc(v113);
  (*(void (**)(void))(v1 + 8))();
}

uint64_t sub_1006279EC()
{
  uint64_t v0;

  sub_1000B43D4();
  sub_10009E3B0(*(_QWORD *)(v0 + 376));
  sub_10003BC90();
  return sub_1000BA3F4();
}

uint64_t sub_100627A20()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 192);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 144));
  v2 = *(void (**)(uint64_t, _QWORD))(v1 + 8);
  v3 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 336);
  v5 = *(_QWORD *)(v0 + 296);
  v11 = *(_QWORD *)(v0 + 328);
  v12 = *(_QWORD *)(v0 + 304);
  v6 = *(_QWORD *)(v0 + 264);
  v8 = *(_QWORD *)(v0 + 248);
  v7 = *(_QWORD *)(v0 + 256);
  v13 = *(_QWORD *)(v0 + 288);
  v14 = *(_QWORD *)(v0 + 240);
  v9 = *(_QWORD *)(v0 + 200);
  v15 = *(_QWORD *)(v0 + 232);
  v16 = *(_QWORD *)(v0 + 208);
  v17 = *(_QWORD *)(v0 + 176);
  v18 = *(_QWORD *)(v0 + 168);
  v19 = *(_QWORD *)(v0 + 136);
  v20 = *(_QWORD *)(v0 + 128);
  v21 = *(_QWORD *)(v0 + 120);
  v22 = *(_QWORD *)(v0 + 96);
  v23 = *(_QWORD *)(v0 + 88);
  v24 = *(_QWORD *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 56);
  v2(v9, *(_QWORD *)(v0 + 184));
  sub_1000B46B0(v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v5);
  swift_task_dealloc(v13);
  swift_task_dealloc(v6);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v9);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100627BAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  __n128 v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v0 = type metadata accessor for SHA256(0);
  __chkstk_darwin(v0);
  sub_100098728();
  v1 = type metadata accessor for SHA256Digest(0);
  __chkstk_darwin(v1);
  sub_100098728();
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100098728();
  v6 = v5 - v4;
  v14 = 0;
  v15 = 0xE000000000000000;
  ActiveUserStatus.secretId.getter();
  sub_100051B90(&qword_100BE4BF8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2);
  String.append(_:)(v7);
  v8 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, __n128))(v3 + 8))(v6, v2, v8);
  v9._countAndFlagsBits = 46;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  Date.timeIntervalSince1970.getter(v10);
  Double.write<A>(to:)(&v14, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  sub_100627F74(v14, v15);
  v12 = v11;
  v13 = sub_100051B90(&qword_100BF8318, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
  dispatch thunk of HashFunction.init()(v0, v13);
  __asm { BR              X10 }
}

uint64_t sub_100627D50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t countAndFlagsBits;

  sub_100628CFC(v3, v4 & 0xFFFFFFFFFFFFLL, BYTE6(v4));
  sub_1000C4CFC();
  ((void (*)(uint64_t, uint64_t))dispatch thunk of HashFunction.finalize())(v0, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v0);
  sub_1000C4CFC();
  v7 = sub_100628464(v2);
  v9 = v8;
  countAndFlagsBits = Data.base64EncodedString(options:)(0)._countAndFlagsBits;
  sub_10021D04C(v7, v9);
  return countAndFlagsBits;
}

uint64_t sub_100627E88(uint64_t a1, uint64_t a2)
{
  uint64_t LaunchEventData;
  uint64_t v4;
  uint64_t LaunchEvent;
  uint64_t v6;
  _OWORD v8[2];

  LaunchEventData = type metadata accessor for FirstLaunchEventData(0);
  v4 = sub_100051B90(&qword_100BF8308, (uint64_t (*)(uint64_t))&type metadata accessor for FirstLaunchEventData, (uint64_t)&protocol conformance descriptor for FirstLaunchEventData);
  AccessTracker.push<A>(data:traits:file:line:)(a2, _swiftEmptyArrayStorage, 0xD00000000000005FLL, 0x8000000100A0E620, 73, LaunchEventData, v4);
  LaunchEvent = type metadata accessor for FirstLaunchEvent(0);
  v6 = sub_100051B90(&qword_100BF8310, (uint64_t (*)(uint64_t))&type metadata accessor for FirstLaunchEvent, (uint64_t)&protocol conformance descriptor for FirstLaunchEvent);
  memset(v8, 0, sizeof(v8));
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(LaunchEvent, 0, v8, 0, 0, LaunchEvent, v6);
  return sub_100021A68((uint64_t)v8, &qword_100C0B800);
}

uint64_t sub_100627F74(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  __int128 v17[2];
  uint64_t v18;
  __int128 v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)&v19 = a1;
  *((_QWORD *)&v19 + 1) = a2;
  swift_bridgeObjectRetain();
  v2 = sub_1000BA294(&qword_100BF8328);
  if (!swift_dynamicCast(v17, &v19, &type metadata for String.UTF8View, v2, 6))
  {
    v18 = 0;
    memset(v17, 0, sizeof(v17));
    sub_100021A68((uint64_t)v17, &qword_100BF8330);
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_20;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v20[0] = a1;
      v20[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v7 = (char *)v20 + (HIBYTE(a2) & 0xF);
      v8 = v20;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v5 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v6 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v5 = _StringObject.sharedUTF8.getter(a1, a2);
      }
      if (v5)
        v7 = (char *)(v5 + v6);
      else
        v7 = 0;
      v8 = (_QWORD *)v5;
    }
    v9 = Data._Representation.init(_:)(v8, v7);
    v11 = v10;
    if (v10 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)&v17[0] = v9;
      *((_QWORD *)&v17[0] + 1) = v11;
      return *(_QWORD *)&v17[0];
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_20:
      v12 = String.UTF8View._foreignCount()();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v12 = HIBYTE(a2) & 0xF;
    }
    else
    {
      v12 = a1 & 0xFFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v17[0] = Data._Representation.init(count:)(v12);
    *((_QWORD *)&v17[0] + 1) = v13;
    __chkstk_darwin(*(_QWORD *)&v17[0]);
    sub_100628754();
    __asm { BR              X12 }
  }
  sub_10003C800(v17, (uint64_t)v20);
  v3 = v21;
  v4 = v22;
  sub_1000DB418(v20, v21);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)(&v19, sub_1006289F4, 0, &type metadata for Data._Representation, v3, v4);
  swift_bridgeObjectRelease();
  v17[0] = v19;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v20);
  return *(_QWORD *)&v17[0];
}

uint64_t sub_100628464(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v2 = type metadata accessor for SHA256Digest(0);
  v10 = v2;
  v3 = sub_100051B90(&qword_100BF8320, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256Digest, (uint64_t)&protocol conformance descriptor for SHA256Digest);
  v11 = v3;
  v4 = sub_10005F164(v9);
  v5 = *(_QWORD *)(v2 - 8);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v5 + 16))(v4, a1, v2);
  sub_1000DB418(v9, v10);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)(&v8, sub_1006289F4, 0, &type metadata for Data._Representation, v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v2);
  v6 = v8;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v9);
  return v6;
}

uint64_t sub_100628544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_100098778();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1006285D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(sub_100098778() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_100BF82FC);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1005EA250;
  return sub_100626DB4(a1, v6, v7, v8, v9);
}

uint64_t sub_100628670()
{
  uint64_t v0;
  uint64_t LaunchEventData;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  LaunchEventData = type metadata accessor for FirstLaunchEventData(0);
  v2 = *(_QWORD *)(LaunchEventData - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, LaunchEventData);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1006286D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FirstLaunchEventData(0) - 8) + 80);
  return sub_100627E88(a1, v1 + ((v3 + 16) & ~v3));
}

_QWORD *sub_10062870C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[3];
  _QWORD v6[2];

  v6[0] = a3;
  v6[1] = a4;
  v5[2] = v6;
  return sub_100628AE8((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_100628E94, (uint64_t)v5, a1, a2);
}

void sub_100628754()
{
  __asm { BR              X11 }
}

_QWORD *sub_1006287B4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;

  v7 = v4;
  LOWORD(v8) = a1;
  BYTE2(v8) = BYTE2(a1);
  HIBYTE(v8) = BYTE3(a1);
  v9 = BYTE4(a1);
  v10 = BYTE5(a1);
  v11 = BYTE6(a1);
  result = sub_100628BF4((uint64_t)&v7, v3, v2, BYTE6(a1));
  v6 = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  *v1 = v7;
  v1[1] = v6;
  return result;
}

uint64_t sub_1006289F4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = Data.InlineData.init(_:)();
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = Data.LargeSlice.init(_:)();
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = Data.InlineSlice.init(_:)();
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_100628A68(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  char v8;

  if (result)
  {
    v7 = result;
    swift_bridgeObjectRetain(a4);
    result = _StringGuts.copyUTF8(into:)(v7, a2, a3, a4);
    if ((v8 & 1) == 0)
    {
      swift_bridgeObjectRelease(a4);
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_100628AE8(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;

  if (a3)
  {
    v6 = a4 - a3;
    v7 = a3;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  result = a1(&v9, v7, v6);
  if (!v4)
    return (_QWORD *)v9;
  return result;
}

char *sub_100628B48(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)__DataStorage._bytes.getter();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)__DataStorage._offset.getter();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = __DataStorage._length.getter();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

_QWORD *sub_100628BF4(uint64_t a1, _QWORD *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  result = a2(&v6, a1, a1 + a4);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

uint64_t sub_100628C38(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = __DataStorage._bytes.getter();
  v5 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v5 += a1 - result;
  }
  v6 = __OFSUB__(a2, a1);
  v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  v8 = __DataStorage._length.getter();
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  v10 = v5 + v9;
  if (v5)
    v11 = v10;
  else
    v11 = 0;
  v12 = type metadata accessor for SHA256(0);
  v13 = sub_100051B90(&qword_100BF8318, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
  return dispatch thunk of HashFunction.update(bufferPointer:)(v5, v11, v12, v13);
}

uint64_t sub_100628CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __int16 v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v7 = a1;
  v8 = a2;
  v9 = BYTE2(a2);
  v10 = BYTE3(a2);
  v11 = BYTE4(a2);
  v3 = (char *)&v7 + a3;
  v12 = BYTE5(a2);
  v4 = type metadata accessor for SHA256(0);
  v5 = sub_100051B90(&qword_100BF8318, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
  return dispatch thunk of HashFunction.update(bufferPointer:)(&v7, v3, v4, v5);
}

_QWORD *sub_100628E08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_10062870C(a1, a2, *a3, a3[1]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }
  return result;
}

_QWORD *sub_100628E3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  return sub_100628E08(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

uint64_t sub_100628E54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_100628A68(a1, a2, *a3, a3[1]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }
  return result;
}

uint64_t sub_100628E94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_100628E54(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

unint64_t sub_100628EB0(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  void (*v34)(char *, char *, uint64_t, __n128);
  __n128 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  _QWORD *v54;
  int *v55;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v6 = a3;
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_10008D47C(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = v6[5];
    v10 = (_QWORD *)(a1 + v9);
    v11 = (_QWORD *)(a2 + v9);
    v12 = *(_QWORD *)(a2 + v9 + 8);
    if (v12)
    {
      *v10 = *v11;
      v10[1] = v12;
      v13 = v11[3];
      v10[2] = v11[2];
      v10[3] = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v15 = *((_OWORD *)v11 + 1);
      *(_OWORD *)v10 = *(_OWORD *)v11;
      *((_OWORD *)v10 + 1) = v15;
    }
    v16 = type metadata accessor for DetailComponentContainerViewModel(0);
    v17 = *(int *)(v16 + 20);
    v18 = (_QWORD *)((char *)v10 + v17);
    v19 = (_QWORD *)((char *)v11 + v17);
    v20 = type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(v19) == 1)
    {
      v51 = v20;
      v52 = v16;
      v54 = v10;
      v21 = v19[1];
      *v18 = *v19;
      v18[1] = v21;
      v55 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
      v22 = v55[5];
      v23 = (char *)v18 + v22;
      v24 = (char *)v19 + v22;
      v25 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain();
      v53 = v6;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v24, 1, v25))
      {
        v26 = sub_1000BA294(&qword_100BD4280);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v23, 0, 1, v25);
      }
      v27 = v55[6];
      v28 = (_QWORD *)((char *)v18 + v27);
      v29 = (_QWORD *)((char *)v19 + v27);
      v30 = v29[1];
      *v28 = *v29;
      v28[1] = v30;
      v31 = v55[7];
      v32 = (char *)v18 + v31;
      v33 = (char *)v19 + v31;
      v34 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v25 - 8) + 16);
      v35 = swift_bridgeObjectRetain();
      v34(v32, v33, v25, v35);
      v36 = v55[8];
      v37 = (char *)v18 + v36;
      v38 = (char *)v19 + v36;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v19 + v36, 1, v25))
      {
        v39 = sub_1000BA294(&qword_100BD4280);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        ((void (*)(char *, char *, uint64_t))v34)(v37, v38, v25);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v37, 0, 1, v25);
      }
      v6 = v53;
      v10 = v54;
      *((_BYTE *)v18 + v55[9]) = *((_BYTE *)v19 + v55[9]);
      swift_storeEnumTagMultiPayload(v18, v51, 1);
      v16 = v52;
    }
    else
    {
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    v40 = *(int *)(v16 + 24);
    v41 = (char *)v10 + v40;
    v42 = (char *)v11 + v40;
    v43 = type metadata accessor for DetailComponentAction(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v42, 1, v43))
    {
      v44 = sub_1000BA294(&qword_100BD3100);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      v45 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v41, v42, v45);
      v46 = sub_1000BA294(&qword_100BC5FE8);
      v41[*(int *)(v46 + 48)] = v42[*(int *)(v46 + 48)];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v41, 0, 1, v43);
    }
    v47 = v6[6];
    v48 = *(_OWORD *)(a2 + v47 + 24);
    *(_OWORD *)(a1 + v47 + 24) = v48;
    (**(void (***)(void))(v48 - 8))();
    v49 = v6[8];
    *(_QWORD *)(a1 + v6[7]) = *(_QWORD *)(a2 + v6[7]);
    *(_QWORD *)(a1 + v49) = *(_QWORD *)(a2 + v49);
    *(_QWORD *)(a1 + v6[9]) = *(_QWORD *)(a2 + v6[9]);
  }
  return a1;
}

uint64_t sub_100629228(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_1000B15F8(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  if (*(_QWORD *)(v4 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v5 = type metadata accessor for DetailComponentContainerViewModel(0);
  v6 = v4 + *(int *)(v5 + 20);
  type metadata accessor for NewsArticleComponentViewModel(0);
  if (swift_getEnumCaseMultiPayload(v6) == 1)
  {
    swift_bridgeObjectRelease();
    v7 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
    v8 = v6 + v7[5];
    v9 = type metadata accessor for URL(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v8, 1, v9))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
    v10 = swift_bridgeObjectRelease();
    v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
    ((void (*)(uint64_t, uint64_t, __n128))v11)(v6 + v7[7], v9, v10);
    v12 = v6 + v7[8];
    if (!_s7Weather24LocationCompositionStateOwet_0(v12, 1, v9))
      v11(v12, v9);
  }
  v13 = v4 + *(int *)(v5 + 24);
  v14 = type metadata accessor for DetailComponentAction(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v13, 1, v14))
  {
    v15 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
  }
  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + *(int *)(a2 + 24)));
}

uint64_t sub_1006293A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  void (*v32)(char *, char *, uint64_t, __n128);
  __n128 v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  int *v53;

  v4 = a2;
  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10008D47C(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = a3[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(v4 + v8);
  v11 = *(_QWORD *)(v4 + v8 + 8);
  if (v11)
  {
    *v9 = *v10;
    v9[1] = v11;
    v12 = v10[3];
    v9[2] = v10[2];
    v9[3] = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v13 = *((_OWORD *)v10 + 1);
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *((_OWORD *)v9 + 1) = v13;
  }
  v14 = type metadata accessor for DetailComponentContainerViewModel(0);
  v15 = *(int *)(v14 + 20);
  v16 = (_QWORD *)((char *)v9 + v15);
  v17 = (_QWORD *)((char *)v10 + v15);
  v18 = type metadata accessor for NewsArticleComponentViewModel(0);
  if (swift_getEnumCaseMultiPayload(v17) == 1)
  {
    v50 = v18;
    v51 = v14;
    v52 = a3;
    v19 = v17[1];
    *v16 = *v17;
    v16[1] = v19;
    v53 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
    v20 = v53[5];
    v21 = (char *)v16 + v20;
    v22 = (char *)v17 + v20;
    v23 = type metadata accessor for URL(0);
    swift_bridgeObjectRetain();
    v49 = v4;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v22, 1, v23))
    {
      v24 = sub_1000BA294(&qword_100BD4280);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v21, 0, 1, v23);
    }
    v25 = v53[6];
    v26 = (_QWORD *)((char *)v16 + v25);
    v27 = (_QWORD *)((char *)v17 + v25);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    v29 = v53[7];
    v30 = (char *)v16 + v29;
    v31 = (char *)v17 + v29;
    v32 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v23 - 8) + 16);
    v33 = swift_bridgeObjectRetain();
    v32(v30, v31, v23, v33);
    v34 = v53[8];
    v35 = (char *)v16 + v34;
    v36 = (char *)v17 + v34;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v17 + v34, 1, v23))
    {
      v37 = sub_1000BA294(&qword_100BD4280);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      ((void (*)(char *, char *, uint64_t))v32)(v35, v36, v23);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v35, 0, 1, v23);
    }
    a3 = v52;
    v4 = v49;
    *((_BYTE *)v16 + v53[9]) = *((_BYTE *)v17 + v53[9]);
    swift_storeEnumTagMultiPayload(v16, v50, 1);
    v14 = v51;
  }
  else
  {
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  v38 = *(int *)(v14 + 24);
  v39 = (char *)v9 + v38;
  v40 = (char *)v10 + v38;
  v41 = type metadata accessor for DetailComponentAction(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v40, 1, v41))
  {
    v42 = sub_1000BA294(&qword_100BD3100);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    v43 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v39, v40, v43);
    v44 = sub_1000BA294(&qword_100BC5FE8);
    v39[*(int *)(v44 + 48)] = v40[*(int *)(v44 + 48)];
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v39, 0, 1, v41);
  }
  v45 = a3[6];
  v46 = *(_OWORD *)(v4 + v45 + 24);
  *(_OWORD *)(a1 + v45 + 24) = v46;
  (**(void (***)(void))(v46 - 8))();
  v47 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(v4 + a3[7]);
  *(_QWORD *)(a1 + v47) = *(_QWORD *)(v4 + v47);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(v4 + a3[9]);
  return a1;
}

uint64_t sub_1006296E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  __n128 v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char *__dst;
  char *__dstb;
  void (*__dsta)(char *, char *, uint64_t);
  uint64_t v56;
  int *v57;
  int *v58;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10008D47C(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1000B15F8(v8, v9);
  v10 = a3[5];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  v13 = *(_QWORD *)(a1 + v10 + 8);
  v14 = *(_QWORD *)(a2 + v10 + 8);
  if (v13)
  {
    if (v14)
    {
      *v11 = *v12;
      v11[1] = v12[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v11[2] = v12[2];
      v11[3] = v12[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10035C44C((uint64_t)v11);
      v15 = *((_OWORD *)v12 + 1);
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *((_OWORD *)v11 + 1) = v15;
    }
  }
  else if (v14)
  {
    *v11 = *v12;
    v11[1] = v12[1];
    v11[2] = v12[2];
    v11[3] = v12[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v16 = *((_OWORD *)v12 + 1);
    *(_OWORD *)v11 = *(_OWORD *)v12;
    *((_OWORD *)v11 + 1) = v16;
  }
  v17 = type metadata accessor for DetailComponentContainerViewModel(0);
  v18 = v17;
  if (a1 != a2)
  {
    v19 = *(int *)(v17 + 20);
    v20 = (_QWORD *)((char *)v11 + v19);
    v21 = (_QWORD *)((char *)v12 + v19);
    sub_1000215BC((uint64_t)v11 + v19, type metadata accessor for NewsArticleComponentViewModel);
    v22 = type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(v21) == 1)
    {
      v56 = v22;
      v57 = a3;
      *v20 = *v21;
      v20[1] = v21[1];
      v58 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
      v23 = v58[5];
      __dst = (char *)v20 + v23;
      v24 = (char *)v21 + v23;
      v25 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v24, 1, v25))
      {
        v26 = sub_1000BA294(&qword_100BD4280);
        memcpy(__dst, v24, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(__dst, v24, v25);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v25);
      }
      v27 = v58[6];
      v28 = (_QWORD *)((char *)v20 + v27);
      v29 = (_QWORD *)((char *)v21 + v27);
      *v28 = *v29;
      v28[1] = v29[1];
      v30 = v58[7];
      __dstb = (char *)v20 + v30;
      v31 = (char *)v21 + v30;
      v32 = v25;
      v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
      v34 = swift_bridgeObjectRetain();
      v35 = __dstb;
      __dsta = v33;
      ((void (*)(void *, char *, uint64_t, __n128))v33)(v35, v31, v32, v34);
      v36 = v32;
      v37 = v58[8];
      v38 = (char *)v20 + v37;
      v39 = (char *)v21 + v37;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v21 + v37, 1, v36))
      {
        v40 = sub_1000BA294(&qword_100BD4280);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        __dsta(v38, v39, v36);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v38, 0, 1, v36);
      }
      *((_BYTE *)v20 + v58[9]) = *((_BYTE *)v21 + v58[9]);
      swift_storeEnumTagMultiPayload(v20, v56, 1);
      a3 = v57;
    }
    else
    {
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
  }
  v41 = *(int *)(v18 + 24);
  v42 = (char *)v11 + v41;
  v43 = (char *)v12 + v41;
  v44 = type metadata accessor for DetailComponentAction(0);
  v45 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v42, 1, v44);
  v46 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v43, 1, v44);
  if (!v45)
  {
    if (!v46)
    {
      v51 = type metadata accessor for URL(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v51 - 8) + 24))(v42, v43, v51);
      v52 = sub_1000BA294(&qword_100BC5FE8);
      v42[*(int *)(v52 + 48)] = v43[*(int *)(v52 + 48)];
      goto LABEL_24;
    }
    sub_1000215BC((uint64_t)v42, type metadata accessor for DetailComponentAction);
    goto LABEL_23;
  }
  if (v46)
  {
LABEL_23:
    v49 = sub_1000BA294(&qword_100BD3100);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    goto LABEL_24;
  }
  v47 = type metadata accessor for URL(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v42, v43, v47);
  v48 = sub_1000BA294(&qword_100BC5FE8);
  v42[*(int *)(v48 + 48)] = v43[*(int *)(v48 + 48)];
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v42, 0, 1, v44);
LABEL_24:
  sub_100094D04((_QWORD *)(a1 + a3[6]), (_QWORD *)(a2 + a3[6]));
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100629B48(uint64_t a1, uint64_t a2, int *a3)
{
  int *v3;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  int *v45;

  v3 = a3;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[5];
  v7 = (_OWORD *)(a1 + v6);
  v8 = a2 + v6;
  v9 = *(_OWORD *)(a2 + v6 + 16);
  *v7 = *(_OWORD *)(a2 + v6);
  v7[1] = v9;
  v10 = type metadata accessor for DetailComponentContainerViewModel(0);
  v11 = *(int *)(v10 + 20);
  v12 = (char *)v7 + v11;
  v13 = (char *)(v8 + v11);
  v14 = type metadata accessor for NewsArticleComponentViewModel(0);
  if (swift_getEnumCaseMultiPayload(v13) == 1)
  {
    v43 = v14;
    v44 = v10;
    v45 = v3;
    *(_OWORD *)v12 = *(_OWORD *)v13;
    v15 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
    v16 = v15[5];
    v17 = &v12[v16];
    v18 = &v13[v16];
    v19 = type metadata accessor for URL(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v18, 1, v19))
    {
      v20 = sub_1000BA294(&qword_100BD4280);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
    }
    else
    {
      v22 = v18;
      v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
      v21(v17, v22, v19);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v17, 0, 1, v19);
    }
    *(_OWORD *)&v12[v15[6]] = *(_OWORD *)&v13[v15[6]];
    v42 = v21;
    v21(&v12[v15[7]], &v13[v15[7]], v19);
    v23 = v15[8];
    v24 = &v12[v23];
    v25 = &v13[v23];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v13[v23], 1, v19))
    {
      v26 = sub_1000BA294(&qword_100BD4280);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v42(v24, v25, v19);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v24, 0, 1, v19);
    }
    v12[v15[9]] = v13[v15[9]];
    swift_storeEnumTagMultiPayload(v12, v43, 1);
    v10 = v44;
    v3 = v45;
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  v27 = *(int *)(v10 + 24);
  v28 = (char *)v7 + v27;
  v29 = (const void *)(v8 + v27);
  v30 = type metadata accessor for DetailComponentAction(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v29, 1, v30))
  {
    v31 = sub_1000BA294(&qword_100BD3100);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v32 = type metadata accessor for URL(0);
    (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v28, v29, v32);
    v33 = sub_1000BA294(&qword_100BC5FE8);
    v28[*(int *)(v33 + 48)] = *((_BYTE *)v29 + *(int *)(v33 + 48));
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v28, 0, 1, v30);
  }
  v34 = v3[6];
  v35 = v3[7];
  v36 = a1 + v34;
  v37 = (__int128 *)(a2 + v34);
  v38 = *v37;
  v39 = v37[1];
  *(_QWORD *)(v36 + 32) = *((_QWORD *)v37 + 4);
  *(_OWORD *)v36 = v38;
  *(_OWORD *)(v36 + 16) = v39;
  *(_QWORD *)(a1 + v35) = *(_QWORD *)(a2 + v35);
  v40 = v3[9];
  *(_QWORD *)(a1 + v3[8]) = *(_QWORD *)(a2 + v3[8]);
  *(_QWORD *)(a1 + v40) = *(_QWORD *)(a2 + v40);
  return a1;
}

uint64_t sub_100629E34(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  char *__dst;
  void (*__dsta)(char *, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  int *v53;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1000B15F8(v8, v9);
  v10 = a3[5];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (uint64_t *)((char *)a2 + v10);
  if (*(_QWORD *)(a1 + v10 + 8))
  {
    v13 = v12[1];
    if (v13)
    {
      *v11 = *v12;
      v11[1] = v13;
      swift_bridgeObjectRelease();
      v14 = v12[3];
      v11[2] = v12[2];
      v11[3] = v14;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_10035C44C((uint64_t)v11);
  }
  v15 = *((_OWORD *)v12 + 1);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v15;
LABEL_6:
  v16 = type metadata accessor for DetailComponentContainerViewModel(0);
  v17 = v16;
  if ((uint64_t *)a1 != a2)
  {
    v18 = *(int *)(v16 + 20);
    v19 = (char *)v11 + v18;
    v20 = (char *)v12 + v18;
    sub_1000215BC((uint64_t)v11 + v18, type metadata accessor for NewsArticleComponentViewModel);
    v21 = type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(v20) == 1)
    {
      v51 = v21;
      *(_OWORD *)v19 = *(_OWORD *)v20;
      v53 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
      v22 = v53[5];
      __dst = &v19[v22];
      v23 = &v20[v22];
      v24 = type metadata accessor for URL(0);
      v52 = v17;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v23, 1, v24))
      {
        v25 = sub_1000BA294(&qword_100BD4280);
        memcpy(__dst, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32);
      }
      else
      {
        v27 = v23;
        v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32);
        v26(__dst, v27, v24);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v24);
      }
      *(_OWORD *)&v19[v53[6]] = *(_OWORD *)&v20[v53[6]];
      __dsta = v26;
      v26(&v19[v53[7]], &v20[v53[7]], v24);
      v28 = v53[8];
      v29 = &v19[v28];
      v30 = &v20[v28];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v20[v28], 1, v24))
      {
        v31 = sub_1000BA294(&qword_100BD4280);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        __dsta(v29, v30, v24);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v29, 0, 1, v24);
      }
      v19[v53[9]] = v20[v53[9]];
      swift_storeEnumTagMultiPayload(v19, v51, 1);
      v17 = v52;
    }
    else
    {
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
  }
  v32 = *(int *)(v17 + 24);
  v33 = (char *)v11 + v32;
  v34 = (char *)v12 + v32;
  v35 = type metadata accessor for DetailComponentAction(0);
  v36 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v33, 1, v35);
  v37 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v34, 1, v35);
  if (!v36)
  {
    if (!v37)
    {
      v47 = type metadata accessor for URL(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v47 - 8) + 40))(v33, v34, v47);
      v48 = sub_1000BA294(&qword_100BC5FE8);
      v33[*(int *)(v48 + 48)] = v34[*(int *)(v48 + 48)];
      goto LABEL_22;
    }
    sub_1000215BC((uint64_t)v33, type metadata accessor for DetailComponentAction);
    goto LABEL_21;
  }
  if (v37)
  {
LABEL_21:
    v40 = sub_1000BA294(&qword_100BD3100);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_22;
  }
  v38 = type metadata accessor for URL(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v33, v34, v38);
  v39 = sub_1000BA294(&qword_100BC5FE8);
  v33[*(int *)(v39 + 48)] = v34[*(int *)(v39 + 48)];
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v33, 0, 1, v35);
LABEL_22:
  v41 = a3[6];
  v42 = a1 + v41;
  v43 = (uint64_t)a2 + v41;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + v41));
  v44 = *(_OWORD *)(v43 + 16);
  *(_OWORD *)v42 = *(_OWORD *)v43;
  *(_OWORD *)(v42 + 16) = v44;
  *(_QWORD *)(v42 + 32) = *(_QWORD *)(v43 + 32);
  v45 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  *(_QWORD *)(a1 + v45) = *(uint64_t *)((char *)a2 + v45);
  *(_QWORD *)(a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  return a1;
}

uint64_t sub_10062A200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10062A20C);
}

uint64_t sub_10062A20C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;

  v6 = sub_1000DDD78();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return _s7Weather24LocationCompositionStateOwet_0(a1 + *(int *)(a3 + 20), a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 24);
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

uint64_t sub_10062A288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10062A294);
}

uint64_t sub_10062A294(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = sub_1000DDD78();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return _s7Weather24LocationCompositionStateOwst_0(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 24) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for DetailComponentContainerView(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF8390;
  if (!qword_100BF8390)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DetailComponentContainerView);
  return result;
}

uint64_t sub_10062A344(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = "\t";
  result = type metadata accessor for DetailComponentContainerViewModel(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1009B87D8;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10062A3D4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABB8D4, 1);
}

uint64_t sub_10062A3E4@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(void)@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _BYTE v34[9];
  uint64_t v35;

  v30 = a7;
  v31 = a3;
  v28 = a6;
  v29 = a2;
  v33 = a5;
  v32 = a4;
  v12 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v27 - v16;
  *(_QWORD *)a9 = swift_getKeyPath(&unk_1009B8840);
  *(_BYTE *)(a9 + 8) = 0;
  v18 = (int *)sub_1000BA294(&qword_100BF83D8);
  v19 = a9 + v18[13];
  v34[0] = 0;
  State.init(wrappedValue:)(v34, &type metadata for Bool);
  v20 = v35;
  *(_BYTE *)v19 = v34[1];
  *(_QWORD *)(v19 + 8) = v20;
  v21 = type metadata accessor for Date(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v17, 1, 1, v21);
  sub_100037768((uint64_t)v17, (uint64_t)v14, (uint64_t *)&unk_100BD35A0);
  State.init(wrappedValue:)(v14, v12);
  sub_100021A14((uint64_t)v17, (uint64_t *)&unk_100BD35A0);
  result = a8();
  v23 = (_QWORD *)(a9 + v18[11]);
  v24 = v30;
  *v23 = v28;
  v23[1] = v24;
  *(_BYTE *)(a9 + 9) = a1;
  v25 = a9 + v18[12];
  v26 = v31;
  *(_QWORD *)v25 = v29;
  *(_QWORD *)(v25 + 8) = v26;
  *(_BYTE *)(v25 + 16) = v32 & 1;
  *(_QWORD *)(v25 + 24) = v33;
  return result;
}

uint64_t sub_10062A590@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[16];
  uint64_t v22;
  _QWORD v23[2];

  v2 = v1;
  v4 = sub_1000DD178();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23[0] = sub_10035CCAC();
  v23[1] = v8;
  v9 = sub_100114EF8();
  v10 = Text.init<A>(_:)(v23, &type metadata for String, v9);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  sub_100080C0C(v2, (uint64_t)v7, type metadata accessor for DetailComponentContainerView);
  v17 = *(unsigned __int8 *)(v5 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = swift_allocObject(&unk_100B856E0, v18 + v6, v17 | 7);
  sub_10007802C((uint64_t)v7, v19 + v18, type metadata accessor for DetailComponentContainerView);
  v22 = v2;
  return sub_10062A3E4(0, v10, v12, v14 & 1, v16, (uint64_t)sub_10062B474, v19, (uint64_t (*)(void))sub_10062B4AC, a1);
}

void sub_10062A6CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = sub_1000BA294(&qword_100BD3100);
  __chkstk_darwin(v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DetailComponentAction(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DetailComponentContainerView(0);
  v10 = a2 + *(int *)(v9 + 20);
  v11 = type metadata accessor for DetailComponentContainerViewModel(0);
  sub_100037768(v10 + *(int *)(v11 + 24), (uint64_t)v5, &qword_100BD3100);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v5, 1, v6) == 1)
  {
    sub_100021A14((uint64_t)v5, &qword_100BD3100);
  }
  else
  {
    sub_10007802C((uint64_t)v5, (uint64_t)v8, type metadata accessor for DetailComponentAction);
    v12 = (_QWORD *)(a2 + *(int *)(v9 + 24));
    v13 = v12[3];
    v14 = v12[4];
    sub_1000DB418(v12, v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 8))(v8, v13, v14);
    sub_1000215BC((uint64_t)v8, type metadata accessor for DetailComponentAction);
  }
}

void sub_10062A824(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  *(_QWORD *)a2 = static HorizontalAlignment.leading.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v4 = sub_1000BA294(&qword_100BF83E0);
  sub_10062A86C(a1, a2 + *(int *)(v4 + 44));
}

void sub_10062A86C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  __n128 v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  __n128 v99;
  unsigned int v100;
  uint64_t v101;
  int v102;
  int v103;
  unsigned __int8 v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  int v118;
  int v119;
  double v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  int *v158;

  v4 = type metadata accessor for NewsArticleComponentViewModel(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v134 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DetailComponentViewModel(0);
  __chkstk_darwin(v7);
  v147 = (uint64_t)&v134 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = type metadata accessor for NewsArticleComponentView(0);
  __chkstk_darwin(v148);
  v10 = (char *)&v134 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = sub_1000BA294(&qword_100BF83E8);
  __chkstk_darwin(v150);
  v153 = (char *)&v134 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = sub_1000BA294(&qword_100BF83F0);
  __chkstk_darwin(v152);
  v155 = (uint64_t)&v134 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v151 = (uint64_t)&v134 - v14;
  __chkstk_darwin(v15);
  v154 = (uint64_t)&v134 - v16;
  v17 = type metadata accessor for DetailComponentHeaderView(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v134 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = sub_1000BA294(&qword_100BF83F8);
  __chkstk_darwin(v137);
  v21 = (char *)&v134 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = sub_1000BA294(&qword_100BF8400);
  __chkstk_darwin(v138);
  v144 = (uint64_t)&v134 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = sub_1000BA294(&qword_100BF8408);
  __chkstk_darwin(v139);
  v143 = (uint64_t)&v134 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = sub_1000BA294(&qword_100BF8410);
  __chkstk_darwin(v140);
  v145 = (uint64_t)&v134 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = sub_1000BA294(&qword_100BF8418);
  __chkstk_darwin(v156);
  v142 = (uint64_t)&v134 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v141 = (uint64_t)&v134 - v27;
  v28 = sub_1000BA294(&qword_100BF8420);
  __chkstk_darwin(v28);
  v149 = (uint64_t)&v134 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v157 = (char *)&v134 - v31;
  v158 = (int *)type metadata accessor for DetailComponentContainerView(0);
  v32 = (uint64_t *)(a1 + v158[5]);
  v33 = v32[1];
  v146 = a1;
  if (v33)
  {
    v34 = a1;
    v135 = v6;
    v136 = a2;
    v35 = v32[2];
    v36 = v32[3];
    v37 = *v32;
    *((_QWORD *)v19 + 4) = swift_getKeyPath(&unk_1009B88F8);
    v19[40] = 0;
    *((_QWORD *)v19 + 6) = swift_getKeyPath(&unk_1009B8928);
    v19[56] = 0;
    *((_QWORD *)v19 + 8) = swift_getKeyPath(&unk_1009B8958);
    v19[72] = 0;
    v38 = &v19[*(int *)(v17 + 32)];
    *(_QWORD *)v38 = swift_getKeyPath(&unk_1009B8988);
    v39 = sub_1000BA294(&qword_100BC68C8);
    swift_storeEnumTagMultiPayload(v38, v39, 0);
    *(_QWORD *)v19 = v37;
    *((_QWORD *)v19 + 1) = v33;
    *((_QWORD *)v19 + 2) = v35;
    *((_QWORD *)v19 + 3) = v36;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v41 = static Edge.Set.leading.getter(v40);
    v43 = static Edge.Set.trailing.getter(v42);
    v44 = Edge.Set.init(rawValue:)(0);
    v45 = Edge.Set.init(rawValue:)(v44);
    if (Edge.Set.init(rawValue:)(v45 & v41) != v41)
      v44 = Edge.Set.init(rawValue:)(v44 | v41);
    v46 = Edge.Set.init(rawValue:)(v44);
    v47 = Edge.Set.init(rawValue:)(v46 & v43);
    v48 = v156;
    if (v47 != v43)
      LOBYTE(v44) = Edge.Set.init(rawValue:)(v44 | v43);
    v49 = v34;
    v50 = EdgeInsets.init(_all:)(*(double *)(v34 + v158[8]));
    v52 = v51;
    v54 = v53;
    v56 = v55;
    sub_100080C0C((uint64_t)v19, (uint64_t)v21, type metadata accessor for DetailComponentHeaderView);
    v57 = &v21[*(int *)(v137 + 36)];
    *v57 = v44;
    *((double *)v57 + 1) = v50;
    *((_QWORD *)v57 + 2) = v52;
    *((_QWORD *)v57 + 3) = v54;
    *((_QWORD *)v57 + 4) = v56;
    v57[40] = 0;
    sub_1000215BC((uint64_t)v19, type metadata accessor for DetailComponentHeaderView);
    v59 = static Edge.Set.top.getter(v58);
    if (qword_100BC1EA0 != -1)
      swift_once(&qword_100BC1EA0, sub_100129178);
    v60 = EdgeInsets.init(_all:)(*(double *)&qword_100CAE520);
    v62 = v61;
    v64 = v63;
    v66 = v65;
    v67 = v144;
    sub_100037768((uint64_t)v21, v144, &qword_100BF83F8);
    v68 = v67 + *(int *)(v138 + 36);
    *(_BYTE *)v68 = v59;
    *(double *)(v68 + 8) = v60;
    *(_QWORD *)(v68 + 16) = v62;
    *(_QWORD *)(v68 + 24) = v64;
    *(_QWORD *)(v68 + 32) = v66;
    *(_BYTE *)(v68 + 40) = 0;
    sub_100021A14((uint64_t)v21, &qword_100BF83F8);
    v70 = static Edge.Set.bottom.getter(v69);
    v71 = (uint64_t)v157;
    if (qword_100BC1EA8 != -1)
      swift_once(&qword_100BC1EA8, sub_100129168);
    v72 = EdgeInsets.init(_all:)(*(double *)&qword_100CAE528);
    v74 = v73;
    v76 = v75;
    v78 = v77;
    v79 = v143;
    sub_100037768(v67, v143, &qword_100BF8400);
    v80 = v79 + *(int *)(v139 + 36);
    *(_BYTE *)v80 = v70;
    *(double *)(v80 + 8) = v72;
    *(_QWORD *)(v80 + 16) = v74;
    *(_QWORD *)(v80 + 24) = v76;
    *(_QWORD *)(v80 + 32) = v78;
    *(_BYTE *)(v80 + 40) = 0;
    sub_100021A14(v67, &qword_100BF8400);
    v81 = v145;
    sub_100037768(v79, v145, &qword_100BF8408);
    *(_BYTE *)(v81 + *(int *)(v140 + 36)) = 1;
    sub_100021A14(v79, &qword_100BF8408);
    v83 = static Alignment.center.getter(v82);
    v85 = v84;
    v86 = v158;
    v87 = *(_QWORD *)(v49 + v158[7]);
    v88 = v142;
    sub_100037768(v81, v142, &qword_100BF8410);
    v89 = v88 + *(int *)(v48 + 36);
    *(_QWORD *)v89 = v87;
    *(_QWORD *)(v89 + 8) = 3;
    *(_WORD *)(v89 + 16) = 256;
    *(_QWORD *)(v89 + 24) = v83;
    *(_QWORD *)(v89 + 32) = v85;
    sub_100021A14(v81, &qword_100BF8410);
    v90 = v141;
    sub_1000787D4(v88, v141, &qword_100BF8418);
    sub_1000787D4(v90, v71, &qword_100BF8418);
    v91 = 0;
    v6 = v135;
    a2 = v136;
  }
  else
  {
    v91 = 1;
    v71 = (uint64_t)v157;
    v86 = v158;
    v48 = v156;
  }
  _s7Weather24LocationCompositionStateOwst_0(v71, v91, 1, v48);
  v92 = type metadata accessor for DetailComponentContainerViewModel(0);
  v93 = v147;
  sub_100080C0C((uint64_t)v32 + *(int *)(v92 + 20), v147, type metadata accessor for DetailComponentViewModel);
  sub_10007802C(v93, (uint64_t)v6, type metadata accessor for NewsArticleComponentViewModel);
  *(_QWORD *)v10 = swift_getKeyPath(&unk_1009B8870);
  v10[8] = 0;
  *((_QWORD *)v10 + 2) = swift_getKeyPath(&unk_1009B8898);
  v10[24] = 0;
  v94 = v148;
  v95 = &v10[*(int *)(v148 + 24)];
  *(_QWORD *)v95 = swift_getKeyPath(&unk_1009B88C8);
  v96 = sub_1000BA294(&qword_100BC37D8);
  swift_storeEnumTagMultiPayload(v95, v96, 0);
  sub_10007802C((uint64_t)v6, (uint64_t)&v10[*(int *)(v94 + 28)], type metadata accessor for NewsArticleComponentViewModel);
  v10[*(int *)(v94 + 32)] = 0;
  v98 = static Edge.Set.leading.getter(v97);
  v100 = static Edge.Set.trailing.getter(v99);
  v101 = Edge.Set.init(rawValue:)(0);
  v102 = Edge.Set.init(rawValue:)(v101);
  if (Edge.Set.init(rawValue:)(v102 & v98) != v98)
    v101 = Edge.Set.init(rawValue:)(v101 | v98);
  v103 = Edge.Set.init(rawValue:)(v101);
  v104 = Edge.Set.init(rawValue:)(v103 & v100);
  v105 = (uint64_t)v153;
  v106 = v146;
  if (v104 != v100)
    LOBYTE(v101) = Edge.Set.init(rawValue:)(v101 | v100);
  v107 = EdgeInsets.init(_all:)(*(double *)(v106 + v86[8]));
  v109 = v108;
  v111 = v110;
  v113 = v112;
  sub_100080C0C((uint64_t)v10, v105, type metadata accessor for NewsArticleComponentView);
  v114 = v105 + *(int *)(v150 + 36);
  *(_BYTE *)v114 = v101;
  *(double *)(v114 + 8) = v107;
  *(_QWORD *)(v114 + 16) = v109;
  *(_QWORD *)(v114 + 24) = v111;
  *(_QWORD *)(v114 + 32) = v113;
  *(_BYTE *)(v114 + 40) = 0;
  sub_1000215BC((uint64_t)v10, type metadata accessor for NewsArticleComponentView);
  v116 = static Edge.Set.bottom.getter(v115);
  v117 = Edge.Set.init(rawValue:)(0);
  v118 = v117;
  v119 = Edge.Set.init(rawValue:)(v117);
  if (Edge.Set.init(rawValue:)(v119 & v116) != v116)
    LOBYTE(v118) = Edge.Set.init(rawValue:)(v118 | v116);
  v120 = EdgeInsets.init(_all:)(*(double *)(v106 + v86[9]));
  v122 = v121;
  v124 = v123;
  v126 = v125;
  v127 = v151;
  sub_100037768(v105, v151, &qword_100BF83E8);
  v128 = v127 + *(int *)(v152 + 36);
  *(_BYTE *)v128 = v118;
  *(double *)(v128 + 8) = v120;
  *(_QWORD *)(v128 + 16) = v122;
  *(_QWORD *)(v128 + 24) = v124;
  *(_QWORD *)(v128 + 32) = v126;
  *(_BYTE *)(v128 + 40) = 0;
  sub_100021A14(v105, &qword_100BF83E8);
  v129 = v127;
  v130 = v154;
  sub_1000787D4(v129, v154, &qword_100BF83F0);
  v131 = v149;
  sub_100037768(v71, v149, &qword_100BF8420);
  v132 = v155;
  sub_100037768(v130, v155, &qword_100BF83F0);
  sub_100037768(v131, a2, &qword_100BF8420);
  v133 = sub_1000BA294(&qword_100BF8428);
  sub_100037768(v132, a2 + *(int *)(v133 + 48), &qword_100BF83F0);
  sub_100021A14(v130, &qword_100BF83F0);
  sub_100021A14(v71, &qword_100BF8420);
  sub_100021A14(v132, &qword_100BF83F0);
  sub_100021A14(v131, &qword_100BF8420);
}

uint64_t sub_10062B2BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  void (*v14)(uint64_t, uint64_t, __n128);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v1 = v0;
  v2 = sub_1000DD178();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v21 = *(_QWORD *)(v3 + 64);
  v6 = v0 + v5;
  sub_1000B15F8(*(_QWORD *)(v0 + v5), *(_BYTE *)(v0 + v5 + 8));
  v7 = v0 + v5 + *(int *)(v2 + 20);
  if (*(_QWORD *)(v7 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v8 = sub_1000DDD78();
  v9 = v7 + *(int *)(v8 + 20);
  type metadata accessor for NewsArticleComponentViewModel(0);
  if (swift_getEnumCaseMultiPayload(v9) == 1)
  {
    v20 = v1;
    swift_bridgeObjectRelease();
    v10 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
    v11 = v9 + v10[5];
    v12 = type metadata accessor for URL(0);
    if (!sub_10007A06C(v11))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
    v13 = swift_bridgeObjectRelease();
    v14 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v12 - 8) + 8);
    v14(v9 + v10[7], v12, v13);
    v15 = v9 + v10[8];
    v1 = v20;
    if (!sub_10007A06C(v15))
      ((void (*)(uint64_t, uint64_t))v14)(v15, v12);
  }
  v16 = v7 + *(int *)(v8 + 24);
  v17 = type metadata accessor for DetailComponentAction(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v16, 1, v17))
  {
    v18 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v16, v18);
  }
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v6 + *(int *)(v2 + 24)));
  return swift_deallocObject(v1, v5 + v21, v4 | 7);
}

void sub_10062B474(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000DD178() - 8) + 80);
  sub_10062A6CC(a1, v1 + ((v3 + 16) & ~v3));
}

void sub_10062B4AC(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_10062A824(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_10062B4E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF8430;
  if (!qword_100BF8430)
  {
    v1 = sub_100075EB0(&qword_100BF83D8);
    result = swift_getWitnessTable(&unk_1009D5BA8, v1);
    atomic_store(result, (unint64_t *)&qword_100BF8430);
  }
  return result;
}

uint64_t *sub_10062B52C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a2 + 1;
    v8 = a2[2];
    if (v8 >= 2)
    {
      v4[1] = *v7;
      v4[2] = v8;
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(v4 + 1) = *(_OWORD *)v7;
    }
    v10 = *(int *)(a3 + 24);
    v11 = (char *)v4 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v13))
    {
      v14 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v13);
    }
  }
  return v4;
}

uint64_t sub_10062B638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v6;
  _OWORD *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = (_OWORD *)(a1 + 8);
  v7 = (_OWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16) < 2uLL)
  {
    if (v8 >= 2)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v8 < 2)
  {
    sub_1001A27B4(a1 + 8);
LABEL_6:
    *v6 = *v7;
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  v9 = *(int *)(a3 + 24);
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = type metadata accessor for Date(0);
  v13 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v12);
  v14 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12);
  if (!v13)
  {
    v15 = *(_QWORD *)(v12 - 8);
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 24))(v10, v11, v12);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v10, v12);
    goto LABEL_13;
  }
  if (v14)
  {
LABEL_13:
    v16 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
  return a1;
}

uint64_t sub_10062B7AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = type metadata accessor for Date(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v6, 1, v7))
  {
    v8 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_10062B860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v6;
  _OWORD *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = (_OWORD *)(a1 + 8);
  v7 = (_OWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 16) < 2uLL)
    goto LABEL_4;
  v8 = *(_QWORD *)(a2 + 16);
  if (v8 < 2)
  {
    sub_1001A27B4((uint64_t)v6);
LABEL_4:
    *v6 = *v7;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)v7;
  *(_QWORD *)(a1 + 16) = v8;
  swift_bridgeObjectRelease();
LABEL_6:
  v9 = *(int *)(a3 + 24);
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = type metadata accessor for Date(0);
  v13 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v12);
  v14 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12);
  if (!v13)
  {
    v15 = *(_QWORD *)(v12 - 8);
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 40))(v10, v11, v12);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v10, v12);
    goto LABEL_11;
  }
  if (v14)
  {
LABEL_11:
    v16 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
  return a1;
}

uint64_t sub_10062B9A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483645)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 2;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    return _s7Weather24LocationCompositionStateOwet_0(a1 + *(int *)(a3 + 24), a2, v9);
  }
}

void sub_10062BA2C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 2147483645)
  {
    *(_QWORD *)(a1 + 16) = (a2 + 1);
    sub_100079F70();
  }
  else
  {
    v7 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    _s7Weather24LocationCompositionStateOwst_0(a1 + *(int *)(a4 + 24), a2, a2, v7);
  }
}

uint64_t sub_10062BA98(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v12;
  unint64_t v14;
  char v16;

  if (a1 == 0x496E776F6E6B6E75 && a2 == 0xEC00000065757373)
  {
    v5 = 0xEC00000065757373;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x496E776F6E6B6E75, 0xEC00000065757373, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x63656E6E6F436F6ELL && a2 == 0xEC0000006E6F6974)
  {
    v8 = 0xEC0000006E6F6974;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x63656E6E6F436F6ELL, 0xEC0000006E6F6974, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x656E616C70726961 && a2 == 0xEC00000065646F4DLL)
  {
    v10 = 0xEC00000065646F4DLL;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656E616C70726961, 0xEC00000065646F4DLL, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0x6E6E6F43776F6C73 && a2 == 0xEE006E6F69746365)
  {
    v12 = 0xEE006E6F69746365;
    goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6E6F43776F6C73, 0xEE006E6F69746365, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3;
  }
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEF6E776F6E6B6E55)
  {
    v14 = 0xEF6E776F6E6B6E55;
    goto LABEL_40;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEF6E776F6E6B6E55, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_40:
    swift_bridgeObjectRelease(v14);
    return 4;
  }
  if (a1 == 0x7461636F4C646C6FLL && a2 == 0xEB000000006E6F69)
  {
    swift_bridgeObjectRelease(0xEB000000006E6F69);
    return 5;
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7461636F4C646C6FLL, 0xEB000000006E6F69, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_10062BDAC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10062BDE8 + 4 * byte_1009B89C0[a1]))(0x496E776F6E6B6E75, 0xEC00000065757373);
}

uint64_t sub_10062BDE8()
{
  return 0x63656E6E6F436F6ELL;
}

uint64_t sub_10062BE08()
{
  return 0x656E616C70726961;
}

uint64_t sub_10062BE28()
{
  return 0x6E6E6F43776F6C73;
}

uint64_t sub_10062BE4C()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_10062BE70()
{
  return 0x7461636F4C646C6FLL;
}

uint64_t sub_10062BE90(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v10;

  if (a1 == 1953720684 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1953720684, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 7364973 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease(0xE300000000000000);
    return 2;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(7364973, 0xE300000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10062BFBC(char a1)
{
  if (!a1)
    return 1953720684;
  if (a1 == 1)
    return 0x6E6F697461636F6CLL;
  return 7364973;
}

uint64_t sub_10062C004(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10062DFA4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10062C02C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10062DFA4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10062C054()
{
  unsigned __int8 *v0;

  return sub_10062BDAC(*v0);
}

uint64_t sub_10062C05C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10062BA98(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10062C080(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10062DEB4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10062C0A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10062DEB4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10062C0D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10062DF2C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10062C0F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10062DF2C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10062C120(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10062DFE0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10062C148(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10062DFE0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10062C170(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10062DEF0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10062C198(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10062DEF0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10062C1C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10062DF68();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10062C1E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10062DF68();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10062C210(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10062E01C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10062C238(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10062E01C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10062C260()
{
  char *v0;

  return sub_10062BFBC(*v0);
}

uint64_t sub_10062C268@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10062BE90(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10062C28C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10062E058();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10062C2B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10062E058();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10062C2DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10062E10C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10062C304(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10062E10C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10062C32C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10062E0D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10062C354(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10062E0D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10062C37C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10062E094();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10062C3A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10062E094();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10062C3CC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v10;

  if (a1 == 0x6574617473 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574617473, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E656D6563616C70 && a2 == 0xE900000000000074)
  {
    v8 = 0xE900000000000074;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E656D6563616C70, 0xE900000000000074, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x616470557473616CLL && a2 == 0xEB00000000646574)
  {
    swift_bridgeObjectRelease(0xEB00000000646574);
    return 2;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x616470557473616CLL, 0xEB00000000646574, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10062C534(char a1)
{
  if (!a1)
    return 0x6574617473;
  if (a1 == 1)
    return 0x6E656D6563616C70;
  return 0x616470557473616CLL;
}

uint64_t sub_10062C594()
{
  char *v0;

  return sub_10062C534(*v0);
}

uint64_t sub_10062C59C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10062C3CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10062C5C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10062E148();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10062C5E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10062E148();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10062C610(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  sub_1006B26C4(a1);
  if (!v2)
  {
    *a2 = v4;
    a2[1] = v5;
  }
}

void sub_10062C638(uint64_t a1)
{
  uint64_t *v1;

  sub_1006B278C(a1, *v1, v1[1]);
}

void sub_10062C650()
{
  sub_1006B2828();
}

void sub_10062C664(uint64_t a1)
{
  sub_1006B2908(a1);
}

void sub_10062C678()
{
  char v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  sub_100099310();
  v15 = v0;
  v2 = v1;
  sub_1000BA294(&qword_100BF8550);
  sub_10009D98C();
  __chkstk_darwin(v3);
  sub_10009DE08(v4, v13);
  sub_1000BA294(&qword_100BF8558);
  sub_10009D98C();
  __chkstk_darwin(v5);
  sub_100088FDC();
  sub_1000BA294(&qword_100BF8560);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_100088FDC();
  sub_1000BA294(&qword_100BF8568);
  sub_10009D98C();
  __chkstk_darwin(v7);
  sub_100088FDC();
  v14 = sub_1000BA294(&qword_100BF8570);
  __chkstk_darwin(v14);
  sub_100079F58();
  sub_1000BA294(&qword_100BF8578);
  sub_1000BD980();
  __chkstk_darwin(v8);
  sub_100098728();
  sub_1000BA294(&qword_100BF8580);
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_100098694();
  v10 = v2[3];
  v11 = v2[4];
  sub_1000DB418(v2, v10);
  v12 = sub_10062DEB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ContentStatusBanner.State.CodingKeys, &type metadata for ContentStatusBanner.State.CodingKeys, v12, v10, v11);
  __asm { BR              X10 }
}

void sub_10062C828()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v5 - 70) = 0;
  sub_10062E01C();
  sub_1000BC308((uint64_t)&type metadata for ContentStatusBanner.State.UnknownIssueCodingKeys, v5 - 70);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 112) + 8))(v2, v0);
  sub_1000B44B0();
}

uint64_t sub_10062C96C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  sub_100099310();
  v3 = v2;
  sub_1000BA294(&qword_100BF84E0);
  sub_10009D98C();
  __chkstk_darwin(v4);
  sub_100088FDC();
  sub_1000BA294(&qword_100BF84E8);
  sub_10009D98C();
  __chkstk_darwin(v5);
  sub_100088FDC();
  sub_1000BA294(&qword_100BF84F0);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_10009DE08(v7, v33);
  sub_1000BA294(&qword_100BF84F8);
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_100088FDC();
  sub_1000BA294(&qword_100BF8500);
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_100098678(v10, v34);
  sub_1000BA294(&qword_100BF8508);
  sub_100098B6C();
  __chkstk_darwin(v11);
  sub_100098728();
  v12 = sub_1000BA294(&qword_100BF8510);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_10004A2E8();
  v14 = v3[3];
  v15 = v3[4];
  v36 = v3;
  sub_1000DB418(v3, v14);
  v16 = sub_10062DEB4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ContentStatusBanner.State.CodingKeys, &type metadata for ContentStatusBanner.State.CodingKeys, v16, v14, v15);
  if (!v0)
  {
    v35 = v13;
    v17 = v1;
    v18 = KeyedDecodingContainer.allKeys.getter(v12);
    v19 = *(_QWORD *)(v18 + 16);
    if (v19)
    {
      v20 = *(unsigned __int8 *)(v18 + 32);
      sub_10055FF58(1, v19, v18, v18 + 32, 0, (2 * v19) | 1);
      v22 = v21;
      v24 = v23;
      swift_bridgeObjectRelease();
      if (v22 == v24 >> 1)
        __asm { BR              X9 }
    }
    v25 = type metadata accessor for DecodingError(0);
    sub_10009D46C(v25, (uint64_t)&protocol witness table for DecodingError);
    v27 = v26;
    sub_1000BA294(&qword_100BC6CF8);
    *v27 = &type metadata for ContentStatusBanner.State;
    v13 = v12;
    v28 = KeyedDecodingContainer.codingPath.getter(v12);
    sub_10003BD2C(v28, v29, 0x80000001009F2600);
    v30 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, enum case for DecodingError.typeMismatch(_:), v25);
    swift_willThrow(v30, v31);
    sub_1000C0EBC();
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v17, v12);
  }
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v36);
  return v13;
}

void sub_10062CDE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  sub_100099310();
  a23 = v27;
  a24 = v28;
  v52 = v29;
  v53 = v30;
  v32 = v31;
  v33 = sub_1000BA294(&qword_100BF85C8);
  v50 = *(_QWORD *)(v33 - 8);
  v51 = v33;
  sub_10009D98C();
  __chkstk_darwin(v34);
  sub_100098678(v35, v46);
  v36 = sub_1000BA294(&qword_100BF85D0);
  v48 = *(_QWORD *)(v36 - 8);
  v49 = v36;
  sub_10009D98C();
  __chkstk_darwin(v37);
  sub_10009E540();
  v38 = sub_1000BA294(&qword_100BF85D8);
  sub_100098B6C();
  __chkstk_darwin(v39);
  sub_10004A2E8();
  v40 = sub_1000BA294(&qword_100BF85E0);
  sub_10009D98C();
  __chkstk_darwin(v41);
  sub_100098694();
  v43 = v32[3];
  v42 = v32[4];
  sub_1000DB418(v32, v43);
  v44 = sub_10062E058();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ContentStatusBanner.Placement.CodingKeys, &type metadata for ContentStatusBanner.Placement.CodingKeys, v44, v43, v42);
  if (v53)
  {
    if (v53 != 1)
    {
      sub_1000C1B74();
      sub_1000BD9C8((uint64_t)&type metadata for ContentStatusBanner.Placement.LocationCodingKeys, (uint64_t)&a13, v40);
      KeyedEncodingContainer.encode(_:forKey:)(v52, v53, v45, v49);
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v24, v49);
      sub_1000CCA58();
      goto LABEL_7;
    }
    sub_1000D07A4();
    sub_1000BD9C8((uint64_t)&type metadata for ContentStatusBanner.Placement.MapCodingKeys, (uint64_t)&a14, v40);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v47, v51);
  }
  else
  {
    a12 = 0;
    sub_10062E10C();
    sub_1000BD9C8((uint64_t)&type metadata for ContentStatusBanner.Placement.ListCodingKeys, (uint64_t)&a12, v40);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v38);
  }
  sub_1000CCA58();
LABEL_7:
  sub_1000B44B0();
}

_QWORD *sub_10062CFD0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;

  sub_100099310();
  v46 = v5;
  v47 = v6;
  v8 = v7;
  v38 = sub_1000BA294(&qword_100BF8588);
  v39 = *(_QWORD *)(v38 - 8);
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_100088FDC();
  v40 = v10;
  v42 = sub_1000BA294(&qword_100BF8590);
  sub_10009D98C();
  __chkstk_darwin(v11);
  sub_100088FDC();
  v41 = v12;
  v37 = sub_1000BA294(&qword_100BF8598);
  sub_1000BD980();
  __chkstk_darwin(v13);
  sub_10004A2E8();
  v14 = sub_1000BA294(&qword_100BF85A0);
  sub_100098B6C();
  __chkstk_darwin(v15);
  sub_10009E540();
  v16 = v8[3];
  v17 = v8[4];
  v18 = sub_1000DB418(v8, v16);
  v19 = sub_10062E058();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ContentStatusBanner.Placement.CodingKeys, &type metadata for ContentStatusBanner.Placement.CodingKeys, v19, v16, v17);
  if (v0)
    goto LABEL_10;
  v43 = v8;
  v20 = KeyedDecodingContainer.allKeys.getter(v14);
  v21 = *(_QWORD *)(v20 + 16);
  v22 = v14;
  if (!v21)
  {
    v18 = v2;
LABEL_9:
    v29 = type metadata accessor for DecodingError(0);
    sub_10009D46C(v29, (uint64_t)&protocol witness table for DecodingError);
    v31 = v30;
    sub_1000BA294(&qword_100BC6CF8);
    *v31 = &type metadata for ContentStatusBanner.Placement;
    v32 = KeyedDecodingContainer.codingPath.getter(v22);
    sub_10003BD2C(v32, v33, 0x80000001009F2600);
    v34 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v31, enum case for DecodingError.typeMismatch(_:), v29);
    swift_willThrow(v34, v35);
    sub_100099400();
    (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v18, v22);
    v8 = v43;
LABEL_10:
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v8);
    return v18;
  }
  v23 = *(unsigned __int8 *)(v20 + 32);
  sub_10055FF58(1, v21, v20, v20 + 32, 0, (2 * v21) | 1);
  v25 = v24;
  v27 = v26;
  swift_bridgeObjectRelease();
  if (v25 != v27 >> 1)
  {
    v18 = v2;
    v22 = v14;
    goto LABEL_9;
  }
  if (v23)
  {
    if (v23 == 1)
    {
      sub_1000C1B74();
      v28 = sub_1000BAF6C((uint64_t)&type metadata for ContentStatusBanner.Placement.LocationCodingKeys, (uint64_t)&v45);
      v18 = (_QWORD *)KeyedDecodingContainer.decode(_:forKey:)(v28, v42);
      sub_100099650(v41);
      sub_100099400();
      sub_1000B4AA0(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
    }
    else
    {
      sub_1000D07A4();
      sub_1000BAF6C((uint64_t)&type metadata for ContentStatusBanner.Placement.MapCodingKeys, (uint64_t)&v45 + 1);
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v38);
      sub_100099400();
      sub_1000CD038();
      v18 = 0;
    }
  }
  else
  {
    v44 = 0;
    sub_10062E10C();
    sub_1000BAF6C((uint64_t)&type metadata for ContentStatusBanner.Placement.ListCodingKeys, (uint64_t)&v44);
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v37);
    sub_100099400();
    sub_1000CD038();
    v18 = 0;
  }
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v43);
  return v18;
}

uint64_t sub_10062D39C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  char v24;

  v3 = v1;
  v5 = sub_1000BA294(&qword_100BF8608);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100098728();
  v9 = v8 - v7;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_10062E148();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ContentStatusBanner.CodingKeys, &type metadata for ContentStatusBanner.CodingKeys, v12, v10, v11);
  LOBYTE(v23) = *(_BYTE *)v3;
  v24 = 0;
  v13 = sub_10062E1FC();
  sub_1000D1970(v13, v14, v15, (uint64_t)&type metadata for ContentStatusBanner.State, v13);
  if (!v2)
  {
    v23 = *(_OWORD *)(v3 + 8);
    v24 = 1;
    v16 = sub_10062E238();
    sub_1000D1970(v16, v17, v18, (uint64_t)&type metadata for ContentStatusBanner.Placement, v16);
    v19 = v3 + *(int *)(type metadata accessor for ContentStatusBanner(0) + 24);
    LOBYTE(v23) = 2;
    v20 = type metadata accessor for Date(0);
    sub_100086DA4(&qword_100BC3578, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v19, &v23, v5, v20, v21);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

void sub_10062D518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;

  sub_100099310();
  a22 = v26;
  a23 = v27;
  v29 = v28;
  v40 = v30;
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_10009D98C();
  __chkstk_darwin(v31);
  sub_10009E540();
  v41 = sub_1000BA294(&qword_100BF85E8);
  sub_1000BD980();
  __chkstk_darwin(v32);
  sub_100098728();
  type metadata accessor for ContentStatusBanner(0);
  sub_10009D98C();
  __chkstk_darwin(v33);
  sub_100079F58();
  v35 = v23 + *(int *)(v34 + 24);
  v36 = type metadata accessor for Date(0);
  _s7Weather24LocationCompositionStateOwst_0(v35, 1, 1, v36);
  v38 = v29[3];
  v37 = v29[4];
  sub_1000DB418(v29, v38);
  v39 = sub_10062E148();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ContentStatusBanner.CodingKeys, &type metadata for ContentStatusBanner.CodingKeys, v39, v38, v37);
  if (v24)
  {
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v29);
    sub_100021AA4(v35, (uint64_t *)&unk_100BD35A0);
  }
  else
  {
    a13 = 0;
    sub_10062E184();
    sub_1000D1F30((uint64_t)&type metadata for ContentStatusBanner.State, (uint64_t)&a13);
    *(_BYTE *)v23 = v42;
    a13 = 1;
    sub_10062E1C0();
    sub_1000D1F30((uint64_t)&type metadata for ContentStatusBanner.Placement, (uint64_t)&a13);
    *(_OWORD *)(v23 + 8) = v42;
    LOBYTE(v42) = 2;
    sub_100086DA4(&qword_100BC3558, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v36, &v42, v41, v36);
    sub_1000C6754();
    sub_10015BADC(v25, v35);
    sub_10013B9CC(v23, v40);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v29);
    sub_10013B990(v23);
  }
  sub_1000B44B0();
}

uint64_t sub_10062D750(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!a2)
    return !a4;
  if (a2 == 1)
    return a4 == 1;
  if (a4 < 2)
    return 0;
  if (a1 != a3 || a2 != a4)
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
  return 1;
}

void sub_10062D79C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::UInt v5;

  if (!a3)
  {
    v5 = 0;
    goto LABEL_5;
  }
  if (a3 == 1)
  {
    v5 = 2;
LABEL_5:
    Hasher._combine(_:)(v5);
    sub_100079F70();
    return;
  }
  sub_1000DA6C4();
  String.hash(into:)(a1, a2, a3);
}

void sub_10062D7FC(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  _BYTE v5[72];

  sub_1000C4480(a1);
  if (a2)
  {
    if (a2 != 1)
    {
      sub_1000DA6C4();
      String.hash(into:)(v5, a1, a2);
      goto LABEL_7;
    }
    v4 = 2;
  }
  else
  {
    v4 = 0;
  }
  Hasher._combine(_:)(v4);
LABEL_7:
  sub_10007A148();
  sub_1000BC1C4();
}

void sub_10062D860(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::UInt v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = v1;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100099864();
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_100098694();
  Hasher._combine(_:)(*v4);
  v9 = *((_QWORD *)v4 + 2);
  if (!v9)
  {
    v10 = 0;
    goto LABEL_5;
  }
  if (v9 == 1)
  {
    v10 = 2;
LABEL_5:
    Hasher._combine(_:)(v10);
    goto LABEL_7;
  }
  v11 = *((_QWORD *)v4 + 1);
  sub_1000DA6C4();
  swift_bridgeObjectRetain();
  String.hash(into:)(a1, v11, v9);
  sub_1000F9174(v11, v9);
LABEL_7:
  v12 = sub_10009985C();
  sub_10007C714((uint64_t)&v4[*(int *)(v12 + 24)], v3);
  if (_s7Weather24LocationCompositionStateOwet_0(v3, 1, v6) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v2, v3, v6);
    Hasher._combine(_:)(1u);
    sub_100086DA4((unint64_t *)&qword_100BC3588, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(a1, v6, v13);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v6);
  }
}

void sub_10062D9D4(uint64_t a1)
{
  _BYTE v1[72];

  sub_1000C4480(a1);
  sub_10062D860((uint64_t)v1);
  sub_10007A148();
  sub_100098918();
}

uint64_t sub_10062D9FC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_10062C96C();
  if (!v1)
    *a1 = result;
  return result;
}

void sub_10062DA24()
{
  sub_10062C678();
}

_QWORD *sub_10062DA3C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v4;

  result = sub_10062CFD0();
  if (!v1)
  {
    *a1 = result;
    a1[1] = v4;
  }
  return result;
}

#error "10062DA70: call analysis failed (funcsize=6)"

#error "10062DA84: call analysis failed (funcsize=5)"

uint64_t sub_10062DA90(_QWORD *a1)
{
  return sub_10062D39C(a1);
}

uint64_t sub_10062DAA4(uint64_t *a1, uint64_t a2)
{
  return sub_10062D750(*a1, a1[1], *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

void sub_10062DAB8()
{
  uint64_t *v0;

  sub_10062D7FC(*v0, v0[1]);
}

void sub_10062DAC0(uint64_t a1)
{
  uint64_t *v1;

  sub_10062D79C(a1, *v1, v1[1]);
}

void sub_10062DAC8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v3;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  if (v2)
  {
    if (v2 != 1)
    {
      sub_1000DA6C4();
      String.hash(into:)(v4, v1, v2);
      goto LABEL_7;
    }
    v3 = 2;
  }
  else
  {
    v3 = 0;
  }
  Hasher._combine(_:)(v3);
LABEL_7:
  sub_10007A148();
  sub_1000BC1C4();
}

Swift::Int sub_10062DB34()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_10062D860((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_10062DB6C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10062DBAC + 4 * byte_1009B89D2[a1]))(0x206E776F6E6B6E55, 0xED00006575737349);
}

uint64_t sub_10062DBAC()
{
  return 0x656E6E6F43206F4ELL;
}

uint64_t sub_10062DBF0()
{
  return 0x6E6F4320776F6C53;
}

unint64_t sub_10062DC14()
{
  return 0xD000000000000010;
}

uint64_t sub_10062DC30()
{
  return 0x61636F4C20646C4FLL;
}

uint64_t sub_10062DC50()
{
  unsigned __int8 *v0;

  return sub_10062DB6C(*v0);
}

uint64_t sub_10062DC58(Swift::String a1)
{
  Swift::String v2;

  if (!a1._object)
    return 1953720652;
  if (a1._object == (void *)1)
    return 7364941;
  sub_10009D754(a1);
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0x6E6F697461636F4CLL;
}

uint64_t sub_10062DCD8()
{
  Swift::String *v0;

  return sub_10062DC58(*v0);
}

uint64_t sub_10062DCE0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;

  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(void **)(v0 + 16);
  sub_10013BB0C(v1, (unint64_t)v2);
  v6._countAndFlagsBits = v1;
  v6._object = v2;
  v7._countAndFlagsBits = sub_10062DC58(v6);
  sub_10009D754(v7);
  swift_bridgeObjectRelease();
  sub_1000F9174(v1, (unint64_t)v2);
  v3._countAndFlagsBits = 0x3D6574617453202CLL;
  v3._object = (void *)0xE800000000000000;
  String.append(_:)(v3);
  v8._countAndFlagsBits = sub_10062DB6C(*(_BYTE *)v0);
  sub_10009D754(v8);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x55207473614C202CLL;
  v4._object = (void *)0xEF3D646574616470;
  String.append(_:)(v4);
  sub_10009985C();
  sub_100490648();
  sub_10009D754(v9);
  swift_bridgeObjectRelease();
  return 0x6E656D6563616C50;
}

void sub_10062DE08()
{
  sub_100086DA4(&qword_100BEE530, type metadata accessor for ContentStatusBanner, (uint64_t)&unk_1009B8B80);
}

unint64_t sub_10062DE38()
{
  unint64_t result;

  result = qword_100BF84D0;
  if (!qword_100BF84D0)
  {
    result = swift_getWitnessTable(&unk_1009B8BA8, &type metadata for ContentStatusBanner.Placement);
    atomic_store(result, (unint64_t *)&qword_100BF84D0);
  }
  return result;
}

unint64_t sub_10062DE78()
{
  unint64_t result;

  result = qword_100BF84D8;
  if (!qword_100BF84D8)
  {
    result = swift_getWitnessTable(&unk_1009B8BD0, &type metadata for ContentStatusBanner.State);
    atomic_store(result, (unint64_t *)&qword_100BF84D8);
  }
  return result;
}

unint64_t sub_10062DEB4()
{
  unint64_t result;

  result = qword_100BF8518;
  if (!qword_100BF8518)
  {
    result = swift_getWitnessTable(&unk_1009B97C8, &type metadata for ContentStatusBanner.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF8518);
  }
  return result;
}

unint64_t sub_10062DEF0()
{
  unint64_t result;

  result = qword_100BF8520;
  if (!qword_100BF8520)
  {
    result = swift_getWitnessTable(&unk_1009B9778, &type metadata for ContentStatusBanner.State.OldLocationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF8520);
  }
  return result;
}

unint64_t sub_10062DF2C()
{
  unint64_t result;

  result = qword_100BF8528;
  if (!qword_100BF8528)
  {
    result = swift_getWitnessTable(&unk_1009B9728, &type metadata for ContentStatusBanner.State.LocationUnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF8528);
  }
  return result;
}

unint64_t sub_10062DF68()
{
  unint64_t result;

  result = qword_100BF8530;
  if (!qword_100BF8530)
  {
    result = swift_getWitnessTable(&unk_1009B96D8, &type metadata for ContentStatusBanner.State.SlowConnectionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF8530);
  }
  return result;
}

unint64_t sub_10062DFA4()
{
  unint64_t result;

  result = qword_100BF8538;
  if (!qword_100BF8538)
  {
    result = swift_getWitnessTable(&unk_1009B9688, &type metadata for ContentStatusBanner.State.AirplaneModeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF8538);
  }
  return result;
}

unint64_t sub_10062DFE0()
{
  unint64_t result;

  result = qword_100BF8540;
  if (!qword_100BF8540)
  {
    result = swift_getWitnessTable(&unk_1009B9638, &type metadata for ContentStatusBanner.State.NoConnectionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF8540);
  }
  return result;
}

unint64_t sub_10062E01C()
{
  unint64_t result;

  result = qword_100BF8548;
  if (!qword_100BF8548)
  {
    result = swift_getWitnessTable(&unk_1009B95E8, &type metadata for ContentStatusBanner.State.UnknownIssueCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF8548);
  }
  return result;
}

unint64_t sub_10062E058()
{
  unint64_t result;

  result = qword_100BF85A8;
  if (!qword_100BF85A8)
  {
    result = swift_getWitnessTable(&unk_1009B9598, &type metadata for ContentStatusBanner.Placement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF85A8);
  }
  return result;
}

unint64_t sub_10062E094()
{
  unint64_t result;

  result = qword_100BF85B0;
  if (!qword_100BF85B0)
  {
    result = swift_getWitnessTable(&unk_1009B9548, &type metadata for ContentStatusBanner.Placement.MapCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF85B0);
  }
  return result;
}

unint64_t sub_10062E0D0()
{
  unint64_t result;

  result = qword_100BF85B8;
  if (!qword_100BF85B8)
  {
    result = swift_getWitnessTable(&unk_1009B94F8, &type metadata for ContentStatusBanner.Placement.LocationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF85B8);
  }
  return result;
}

unint64_t sub_10062E10C()
{
  unint64_t result;

  result = qword_100BF85C0;
  if (!qword_100BF85C0)
  {
    result = swift_getWitnessTable(&unk_1009B94A8, &type metadata for ContentStatusBanner.Placement.ListCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF85C0);
  }
  return result;
}

unint64_t sub_10062E148()
{
  unint64_t result;

  result = qword_100BF85F0;
  if (!qword_100BF85F0)
  {
    result = swift_getWitnessTable(&unk_1009B9458, &type metadata for ContentStatusBanner.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF85F0);
  }
  return result;
}

unint64_t sub_10062E184()
{
  unint64_t result;

  result = qword_100BF85F8;
  if (!qword_100BF85F8)
  {
    result = swift_getWitnessTable(&unk_1009B8CC0, &type metadata for ContentStatusBanner.State);
    atomic_store(result, (unint64_t *)&qword_100BF85F8);
  }
  return result;
}

unint64_t sub_10062E1C0()
{
  unint64_t result;

  result = qword_100BF8600;
  if (!qword_100BF8600)
  {
    result = swift_getWitnessTable(&unk_1009B8C70, &type metadata for ContentStatusBanner.Placement);
    atomic_store(result, (unint64_t *)&qword_100BF8600);
  }
  return result;
}

unint64_t sub_10062E1FC()
{
  unint64_t result;

  result = qword_100BF8610;
  if (!qword_100BF8610)
  {
    result = swift_getWitnessTable(&unk_1009B8C98, &type metadata for ContentStatusBanner.State);
    atomic_store(result, (unint64_t *)&qword_100BF8610);
  }
  return result;
}

unint64_t sub_10062E238()
{
  unint64_t result;

  result = qword_100BF8618;
  if (!qword_100BF8618)
  {
    result = swift_getWitnessTable(&unk_1009B8C48, &type metadata for ContentStatusBanner.Placement);
    atomic_store(result, (unint64_t *)&qword_100BF8618);
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentStatusBanner.CodingKeys()
{
  return &type metadata for ContentStatusBanner.CodingKeys;
}

uint64_t _s7Weather19ContentStatusBannerV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10062E2D4 + 4 * byte_1009B89DD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10062E308 + 4 * byte_1009B89D8[v4]))();
}

uint64_t sub_10062E308(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10062E310(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10062E318);
  return result;
}

uint64_t sub_10062E324(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10062E32CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10062E330(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10062E338(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentStatusBanner.Placement.CodingKeys()
{
  return &type metadata for ContentStatusBanner.Placement.CodingKeys;
}

ValueMetadata *type metadata accessor for ContentStatusBanner.Placement.ListCodingKeys()
{
  return &type metadata for ContentStatusBanner.Placement.ListCodingKeys;
}

uint64_t storeEnumTagSinglePayload for ContentStatusBanner.Placement.LocationCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10062E3A4 + 4 * byte_1009B89E2[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10062E3C4 + 4 * byte_1009B89E7[v4]))();
}

_BYTE *sub_10062E3A4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10062E3C4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10062E3CC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10062E3D4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10062E3DC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10062E3E4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ContentStatusBanner.Placement.LocationCodingKeys()
{
  return &type metadata for ContentStatusBanner.Placement.LocationCodingKeys;
}

ValueMetadata *type metadata accessor for ContentStatusBanner.Placement.MapCodingKeys()
{
  return &type metadata for ContentStatusBanner.Placement.MapCodingKeys;
}

ValueMetadata *type metadata accessor for ContentStatusBanner.State.CodingKeys()
{
  return &type metadata for ContentStatusBanner.State.CodingKeys;
}

ValueMetadata *type metadata accessor for ContentStatusBanner.State.UnknownIssueCodingKeys()
{
  return &type metadata for ContentStatusBanner.State.UnknownIssueCodingKeys;
}

ValueMetadata *type metadata accessor for ContentStatusBanner.State.NoConnectionCodingKeys()
{
  return &type metadata for ContentStatusBanner.State.NoConnectionCodingKeys;
}

ValueMetadata *type metadata accessor for ContentStatusBanner.State.AirplaneModeCodingKeys()
{
  return &type metadata for ContentStatusBanner.State.AirplaneModeCodingKeys;
}

ValueMetadata *type metadata accessor for ContentStatusBanner.State.SlowConnectionCodingKeys()
{
  return &type metadata for ContentStatusBanner.State.SlowConnectionCodingKeys;
}

ValueMetadata *type metadata accessor for ContentStatusBanner.State.LocationUnknownCodingKeys()
{
  return &type metadata for ContentStatusBanner.State.LocationUnknownCodingKeys;
}

ValueMetadata *type metadata accessor for ContentStatusBanner.State.OldLocationCodingKeys()
{
  return &type metadata for ContentStatusBanner.State.OldLocationCodingKeys;
}

uint64_t _s7Weather19ContentStatusBannerV5StateOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10062E4D0 + 4 * byte_1009B89F1[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10062E504 + 4 * byte_1009B89EC[v4]))();
}

uint64_t sub_10062E504(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10062E50C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10062E514);
  return result;
}

uint64_t sub_10062E520(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10062E528);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10062E52C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10062E534(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentStatusBanner.State()
{
  return &type metadata for ContentStatusBanner.State;
}

void sub_10062E554(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  sub_10004A298();
}

unint64_t sub_10062E59C()
{
  unint64_t result;

  result = qword_100BF8620;
  if (!qword_100BF8620)
  {
    result = swift_getWitnessTable(&unk_1009B9168, &type metadata for ContentStatusBanner.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF8620);
  }
  return result;
}

unint64_t sub_10062E5DC()
{
  unint64_t result;

  result = qword_100BF8628;
  if (!qword_100BF8628)
  {
    result = swift_getWitnessTable(&unk_1009B9270, &type metadata for ContentStatusBanner.Placement.LocationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF8628);
  }
  return result;
}

unint64_t sub_10062E61C()
{
  unint64_t result;

  result = qword_100BF8630;
  if (!qword_100BF8630)
  {
    result = swift_getWitnessTable(&unk_1009B9378, &type metadata for ContentStatusBanner.Placement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF8630);
  }
  return result;
}

unint64_t sub_10062E65C()
{
  unint64_t result;

  result = qword_100BF8638;
  if (!qword_100BF8638)
  {
    result = swift_getWitnessTable(&unk_1009B9430, &type metadata for ContentStatusBanner.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF8638);
  }
  return result;
}

unint64_t sub_10062E69C()
{
  unint64_t result;

  result = qword_100BF8640;
  if (!qword_100BF8640)
  {
    result = swift_getWitnessTable(&unk_1009B93A0, &type metadata for ContentStatusBanner.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF8640);
  }
  return result;
}

unint64_t sub_10062E6DC()
{
  unint64_t result;

  result = qword_100BF8648;
  if (!qword_100BF8648)
  {
    result = swift_getWitnessTable(&unk_1009B93C8, &type metadata for ContentStatusBanner.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF8648);
  }
  return result;
}

unint64_t sub_10062E71C()
{
  unint64_t result;

  result = qword_100BF8650;
  if (!qword_100BF8650)
  {
    result = swift_getWitnessTable(&unk_1009B9298, &type metadata for ContentStatusBanner.Placement.ListCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF8650);
  }
  return result;
}

unint64_t sub_10062E75C()
{
  unint64_t result;

  result = qword_100BF8658;
  if (!qword_100BF8658)
  {
    result = swift_getWitnessTable(&unk_1009B92C0, &type metadata for ContentStatusBanner.Placement.ListCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF8658);
  }
  return result;
}

unint64_t sub_10062E79C()
{
  unint64_t result;

  result = qword_100BF8660;
  if (!qword_100BF8660)
  {
    result = swift_getWitnessTable(&unk_1009B91E0, &type metadata for ContentStatusBanner.Placement.LocationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF8660);
  }
  return result;
}

unint64_t sub_10062E7DC()
{
  unint64_t result;

  result = qword_100BF8668;
  if (!qword_100BF8668)
  {
    result = swift_getWitnessTable(&unk_1009B9208, &type metadata for ContentStatusBanner.Placement.LocationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF8668);
  }
  return result;
}

unint64_t sub_10062E81C()
{
  unint64_t result;

  result = qword_100BF8670;
  if (!qword_100BF8670)
  {
    result = swift_getWitnessTable(&unk_1009B9190, &type metadata for ContentStatusBanner.Placement.MapCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF8670);
  }
  return result;
}

unint64_t sub_10062E85C()
{
  unint64_t result;

  result = qword_100BF8678;
  if (!qword_100BF8678)
  {
    result = swift_getWitnessTable(&unk_1009B91B8, &type metadata for ContentStatusBanner.Placement.MapCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF8678);
  }
  return result;
}

unint64_t sub_10062E89C()
{
  unint64_t result;

  result = qword_100BF8680;
  if (!qword_100BF8680)
  {
    result = swift_getWitnessTable(&unk_1009B92E8, &type metadata for ContentStatusBanner.Placement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF8680);
  }
  return result;
}

unint64_t sub_10062E8DC()
{
  unint64_t result;

  result = qword_100BF8688;
  if (!qword_100BF8688)
  {
    result = swift_getWitnessTable(&unk_1009B9310, &type metadata for ContentStatusBanner.Placement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF8688);
  }
  return result;
}

unint64_t sub_10062E91C()
{
  unint64_t result;

  result = qword_100BF8690;
  if (!qword_100BF8690)
  {
    result = swift_getWitnessTable(&unk_1009B9088, &type metadata for ContentStatusBanner.State.UnknownIssueCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF8690);
  }
  return result;
}

unint64_t sub_10062E95C()
{
  unint64_t result;

  result = qword_100BF8698;
  if (!qword_100BF8698)
  {
    result = swift_getWitnessTable(&unk_1009B90B0, &type metadata for ContentStatusBanner.State.UnknownIssueCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF8698);
  }
  return result;
}

unint64_t sub_10062E99C()
{
  unint64_t result;

  result = qword_100BF86A0;
  if (!qword_100BF86A0)
  {
    result = swift_getWitnessTable(&unk_1009B9038, &type metadata for ContentStatusBanner.State.NoConnectionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF86A0);
  }
  return result;
}

unint64_t sub_10062E9DC()
{
  unint64_t result;

  result = qword_100BF86A8;
  if (!qword_100BF86A8)
  {
    result = swift_getWitnessTable(&unk_1009B9060, &type metadata for ContentStatusBanner.State.NoConnectionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF86A8);
  }
  return result;
}

unint64_t sub_10062EA1C()
{
  unint64_t result;

  result = qword_100BF86B0;
  if (!qword_100BF86B0)
  {
    result = swift_getWitnessTable(&unk_1009B8FE8, &type metadata for ContentStatusBanner.State.AirplaneModeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF86B0);
  }
  return result;
}

unint64_t sub_10062EA5C()
{
  unint64_t result;

  result = qword_100BF86B8;
  if (!qword_100BF86B8)
  {
    result = swift_getWitnessTable(&unk_1009B9010, &type metadata for ContentStatusBanner.State.AirplaneModeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF86B8);
  }
  return result;
}

unint64_t sub_10062EA9C()
{
  unint64_t result;

  result = qword_100BF86C0;
  if (!qword_100BF86C0)
  {
    result = swift_getWitnessTable(&unk_1009B8F98, &type metadata for ContentStatusBanner.State.SlowConnectionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF86C0);
  }
  return result;
}

unint64_t sub_10062EADC()
{
  unint64_t result;

  result = qword_100BF86C8;
  if (!qword_100BF86C8)
  {
    result = swift_getWitnessTable(&unk_1009B8FC0, &type metadata for ContentStatusBanner.State.SlowConnectionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF86C8);
  }
  return result;
}

unint64_t sub_10062EB1C()
{
  unint64_t result;

  result = qword_100BF86D0;
  if (!qword_100BF86D0)
  {
    result = swift_getWitnessTable(&unk_1009B8F48, &type metadata for ContentStatusBanner.State.LocationUnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF86D0);
  }
  return result;
}

unint64_t sub_10062EB5C()
{
  unint64_t result;

  result = qword_100BF86D8;
  if (!qword_100BF86D8)
  {
    result = swift_getWitnessTable(&unk_1009B8F70, &type metadata for ContentStatusBanner.State.LocationUnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF86D8);
  }
  return result;
}

unint64_t sub_10062EB9C()
{
  unint64_t result;

  result = qword_100BF86E0;
  if (!qword_100BF86E0)
  {
    result = swift_getWitnessTable(&unk_1009B8EF8, &type metadata for ContentStatusBanner.State.OldLocationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF86E0);
  }
  return result;
}

unint64_t sub_10062EBDC()
{
  unint64_t result;

  result = qword_100BF86E8;
  if (!qword_100BF86E8)
  {
    result = swift_getWitnessTable(&unk_1009B8F20, &type metadata for ContentStatusBanner.State.OldLocationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF86E8);
  }
  return result;
}

unint64_t sub_10062EC1C()
{
  unint64_t result;

  result = qword_100BF86F0;
  if (!qword_100BF86F0)
  {
    result = swift_getWitnessTable(&unk_1009B90D8, &type metadata for ContentStatusBanner.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF86F0);
  }
  return result;
}

unint64_t sub_10062EC5C()
{
  unint64_t result;

  result = qword_100BF86F8;
  if (!qword_100BF86F8)
  {
    result = swift_getWitnessTable(&unk_1009B9100, &type metadata for ContentStatusBanner.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF86F8);
  }
  return result;
}

uint64_t sub_10062EC98(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_10062ECF8 + 4 * byte_1009B9818[swift_getEnumCaseMultiPayload(a2)];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

double sub_10062EEB8(id *a1)
{
  double result;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  switch(swift_getEnumCaseMultiPayload(a1))
  {
    case 0u:
      v3 = type metadata accessor for Location(0);
      goto LABEL_4;
    case 1u:
      v3 = type metadata accessor for LocationOfInterest(0);
LABEL_4:
      v4 = v3;
      v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
      v6 = (uint64_t)a1;
      goto LABEL_5;
    case 2u:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 = (uint64_t)a1 + *(int *)(type metadata accessor for SearchLocation(0) + 32);
      v8 = type metadata accessor for Location(0);
      if (_s7Weather24LocationCompositionStateOwet_0(v7, 1, v8))
        return result;
      v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
      v6 = v7;
      v4 = v8;
LABEL_5:
      v5(v6, v4);
      return result;
    case 3u:
      *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
      return result;
    default:
      return result;
  }
}

void sub_10062EFA0(uint64_t a1, uint64_t a2)
{
  char *v2;

  v2 = (char *)sub_10062EFF4 + 4 * byte_1009B9820[swift_getEnumCaseMultiPayload(a2)];
  __asm { BR              X10 }
}

uint64_t sub_10062EFF4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__dst, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v22, v24, v25);
  swift_storeEnumTagMultiPayload(v22, v23, 0);
  return v22;
}

uint64_t sub_10062F194(uint64_t result, uint64_t a2)
{
  char *v3;

  if (result != a2)
  {
    sub_1000215BC(result, type metadata accessor for PreviewLocation);
    v3 = (char *)&loc_10062F200 + 4 * byte_1009B9824[swift_getEnumCaseMultiPayload(a2)];
    __asm { BR              X10 }
  }
  return result;
}

char *sub_10062F3C0(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      v11 = type metadata accessor for SearchLocation(0);
      v12 = *(int *)(v11 + 32);
      v13 = &a1[v12];
      v14 = &a2[v12];
      v15 = type metadata accessor for Location(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, v15))
      {
        v16 = sub_1000BA294(&qword_100BC35F8);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, v15);
      }
      v18 = *(int *)(v11 + 36);
      v19 = &a1[v18];
      v20 = &a2[v18];
      *(_OWORD *)v19 = *(_OWORD *)v20;
      v19[16] = v20[16];
      v8 = a1;
      v9 = a3;
      v10 = 2;
      goto LABEL_11;
    case 1:
      v17 = type metadata accessor for LocationOfInterest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(a1, a2, v17);
      v8 = a1;
      v9 = a3;
      v10 = 1;
      goto LABEL_11;
    case 0:
      v7 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = a1;
      v9 = a3;
      v10 = 0;
LABEL_11:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *sub_10062F56C(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  if (a1 != a2)
  {
    sub_1000215BC((uint64_t)a1, type metadata accessor for PreviewLocation);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    switch(EnumCaseMultiPayload)
    {
      case 2:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        v11 = type metadata accessor for SearchLocation(0);
        v12 = *(int *)(v11 + 32);
        v13 = &a1[v12];
        v14 = &a2[v12];
        v15 = type metadata accessor for Location(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, v15))
        {
          v16 = sub_1000BA294(&qword_100BC35F8);
          memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, v15);
        }
        v18 = *(int *)(v11 + 36);
        v19 = &a1[v18];
        v20 = &a2[v18];
        *(_OWORD *)v19 = *(_OWORD *)v20;
        v19[16] = v20[16];
        v8 = a1;
        v9 = a3;
        v10 = 2;
        goto LABEL_12;
      case 1:
        v17 = type metadata accessor for LocationOfInterest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(a1, a2, v17);
        v8 = a1;
        v9 = a3;
        v10 = 1;
        goto LABEL_12;
      case 0:
        v7 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
        v8 = a1;
        v9 = a3;
        v10 = 0;
LABEL_12:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10062F730@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v3 = v1;
  v5 = sub_1000AE824();
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003BCB8();
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100079FBC();
  sub_100080C0C(v3, v2, v11);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v2, v9);
  if ((EnumCaseMultiPayload - 2) >= 2)
  {
    if (EnumCaseMultiPayload)
    {
      v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 32))(v8, v2, v5);
      LocationOfInterest.location.getter(v17);
      sub_1000CDD70(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
      v13 = sub_1000992C4();
      v14 = a1;
      v15 = 0;
    }
    else
    {
      v16 = sub_1000992C4();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a1, v2, v16);
      v14 = a1;
      v15 = 0;
      v13 = v16;
    }
  }
  else
  {
    sub_1000215BC(v2, type metadata accessor for PreviewLocation);
    v13 = sub_1000992C4();
    v14 = a1;
    v15 = 1;
  }
  return _s7Weather24LocationCompositionStateOwst_0(v14, v15, 1, v13);
}

void sub_10062F880()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD);
  uint64_t v14;
  char *v15;
  uint64_t v16[6];

  sub_1000C5FBC();
  v1 = type metadata accessor for UUID(0);
  v16[1] = *(_QWORD *)(v1 - 8);
  v16[2] = v1;
  sub_10009D98C();
  __chkstk_darwin(v2);
  sub_100099B54(v3, v16[0]);
  sub_1000BA294(&qword_100BC35F8);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  v16[3] = sub_1000C3DE8();
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_1000C4D1C(v6, v16[0]);
  __chkstk_darwin(v7);
  v16[5] = (uint64_t)v16 - v8;
  v9 = sub_1000AE824();
  __chkstk_darwin(v9);
  sub_1000992C4();
  sub_100098BB4();
  __chkstk_darwin(v10);
  sub_10003BCB8();
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100099234();
  sub_1000D0A88(v0, v12, v13);
  v14 = sub_1000C1F80();
  v15 = (char *)sub_10062F9C4 + 4 * byte_1009B9828[swift_getEnumCaseMultiPayload(v14)];
  __asm { BR              X10 }
}

void sub_10062F9C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);

  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v0, v3, v2);
  Location.id.getter(v4);
  v5 = sub_1000C0FC4();
  v6(v5);
  sub_10009990C();
}

void sub_10062FB68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  char *v8;
  uint64_t v9;

  sub_1000BA294(&qword_100BC35F8);
  sub_1000B42B0();
  __chkstk_darwin(v1);
  sub_1000C3DE8();
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100088FDC();
  sub_1000AE824();
  sub_100098BB4();
  __chkstk_darwin(v3);
  v4 = sub_1000992C4();
  __chkstk_darwin(v4);
  sub_1000DBC04();
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100099234();
  sub_1000D0A88(v9, v6, v7);
  v8 = (char *)sub_10062FC6C + 4 * byte_1009B982C[swift_getEnumCaseMultiPayload(v0)];
  __asm { BR              X10 }
}

uint64_t sub_10062FC6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);

  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v2, v3, v1);
  Location.name.getter(v4);
  v5 = sub_1000DA6CC();
  v6(v5);
  return sub_1000C1F80();
}

void sub_10062FD88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);
  char *v10;
  uint64_t v11;

  sub_1000C5FBC();
  sub_1000BA294(&qword_100BC35F8);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_1000C3DE8();
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_1000C4D1C(v4, v11);
  __chkstk_darwin(v5);
  sub_1000AE824();
  sub_100098BB4();
  __chkstk_darwin(v6);
  v7 = sub_1000992C4();
  __chkstk_darwin(v7);
  sub_100099234();
  sub_10003BCB8();
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_10007A130();
  sub_100080C0C(v0, v1, v9);
  v10 = (char *)sub_10062FE9C + 4 * byte_1009B9830[swift_getEnumCaseMultiPayload(v1)];
  __asm { BR              X10 }
}

void sub_10062FE9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);

  v3 = sub_10009C94C(v1, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 32));
  Location.coordinate.getter(v3);
  v4 = sub_1000C1F80();
  v5(v4);
  sub_10009990C();
}

void sub_10063001C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD v18[5];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v20 = a1;
  v21 = a2;
  type metadata accessor for SearchLocation(0);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100088FDC();
  v18[2] = v3;
  v4 = sub_1000AE824();
  v18[3] = *(_QWORD *)(v4 - 8);
  v18[4] = v4;
  sub_10009D98C();
  __chkstk_darwin(v5);
  sub_100088FDC();
  v18[1] = v6;
  v19 = sub_1000992C4();
  __chkstk_darwin(v19);
  v7 = sub_1000DBC04();
  sub_1000B42B0();
  v9 = __chkstk_darwin(v8);
  v10 = __chkstk_darwin(v9);
  v11 = __chkstk_darwin(v10);
  __chkstk_darwin(v11);
  sub_1000BA294(&qword_100BF87B8);
  sub_1000B42B0();
  v13 = __chkstk_darwin(v12);
  v15 = (char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (uint64_t)&v15[*(int *)(v13 + 48)];
  sub_100080C0C(v20, (uint64_t)v15, type metadata accessor for PreviewLocation);
  sub_100080C0C(v21, v16, type metadata accessor for PreviewLocation);
  v17 = (char *)sub_1006301B4 + 4 * byte_1009B9834[swift_getEnumCaseMultiPayload(v15, v7)];
  __asm { BR              X10 }
}

uint64_t sub_1006301B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  sub_1000D0A88(v2, a2, type metadata accessor for PreviewLocation);
  if (sub_1000BA64C())
  {
    (*(void (**)(uint64_t, _QWORD))(v3 + 8))(v5, *(_QWORD *)(v7 - 104));
    sub_100021A14(v2, &qword_100BF87B8);
    v8 = 0;
  }
  else
  {
    v9 = *(_QWORD *)(v7 - 104);
    sub_10009C94C(v4, v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
    v8 = static Location.== infix(_:_:)(v5, v4);
    v10 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v10(v4, v9);
    v11 = sub_1000C1F80();
    v12 = ((uint64_t (*)(uint64_t))v10)(v11);
    sub_100098AD4(v12, type metadata accessor for PreviewLocation);
  }
  return v8 & 1;
}

void sub_100630414()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  char *v7;

  sub_1000C5FBC();
  type metadata accessor for SearchLocation(0);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  v3 = sub_1000AE824();
  __chkstk_darwin(v3);
  sub_100079FBC();
  sub_1000992C4();
  sub_100098BB4();
  __chkstk_darwin(v4);
  sub_10003BCB8();
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_10004A2E8();
  sub_100080C0C(v0, v1, v6);
  v7 = (char *)sub_100630504 + 4 * byte_1009B9838[swift_getEnumCaseMultiPayload(v1)];
  __asm { BR              X10 }
}

void sub_100630504()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10009C94C(v3, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32));
  sub_100099660(0);
  sub_100086DA4(&qword_100BC35B0, (uint64_t (*)(uint64_t))&type metadata accessor for Location, (uint64_t)&protocol conformance descriptor for Location);
  dispatch thunk of Hashable.hash(into:)(v0, v1, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  sub_10009990C();
}

Swift::Int sub_100630664()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_100630414();
  return Hasher._finalize()();
}

Swift::Int sub_1006306AC()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_100630414();
  return Hasher._finalize()();
}

void sub_1006306E4()
{
  sub_1006B2980();
}

void sub_1006306F8()
{
  sub_1006B2BB4();
}

void sub_10063070C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19[4];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char v28;

  v24 = a2;
  v22 = type metadata accessor for SearchLocation(0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100099B54(v5, v19[0]);
  v20 = type metadata accessor for LocationOfInterest(0);
  v23 = *(_QWORD *)(v20 - 8);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v21 = v7;
  v8 = sub_10009D75C();
  v19[2] = *(_QWORD *)(v8 - 8);
  v19[3] = v8;
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_100099234();
  v10 = sub_1000BA294(&qword_100BF87C8);
  __chkstk_darwin(v10);
  v11 = type metadata accessor for PreviewLocation(0);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v15 = a1[4];
  v25 = a1;
  sub_1000DB418(a1, v16);
  v17 = sub_1006314F8();
  v18 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PreviewLocation.CodingKeys, &type metadata for PreviewLocation.CodingKeys, v17, v16, v15);
  if (!v18)
  {
    v19[0] = v2;
    v19[1] = (uint64_t)v14;
    v26 = v11;
    v28 = 0;
    sub_100631534();
    sub_1000B4BF8((uint64_t)&type metadata for PreviewLocation.CodingType, (uint64_t)&v28, v10, (uint64_t)&type metadata for PreviewLocation.CodingType);
    __asm { BR              X10 }
  }
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v25);
  sub_1000E72CC();
}

void sub_1006308FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v3 - 112) = 1;
  sub_100086DA4(&qword_100BCF3E8, (uint64_t (*)(uint64_t))&type metadata accessor for Location, (uint64_t)&protocol conformance descriptor for Location);
  sub_1000D13B8();
  v4 = *(_QWORD *)(v3 - 208);
  v5 = *(_QWORD *)(v3 - 184);
  sub_1000B4BF8(v5, v6, v2, v5);
  sub_1000C4D08();
  if (!v0)
  {
    v7 = *(_QWORD *)(v3 - 200);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 192) + 32))(v7, v4, v5);
    swift_storeEnumTagMultiPayload(v7, *(_QWORD *)(v3 - 120), 0);
    sub_10007802C(v7, v1, type metadata accessor for PreviewLocation);
  }
  JUMPOUT(0x1006308B4);
}

void sub_100630B10(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;

  v3 = v1;
  type metadata accessor for SearchLocation(0);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100088FDC();
  type metadata accessor for LocationOfInterest(0);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v13 = sub_10009D75C();
  __chkstk_darwin(v13);
  type metadata accessor for PreviewLocation(0);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_10004A2E8();
  sub_1000BA294(&qword_100BF87F0);
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_10007A130();
  v9 = a1[3];
  v10 = a1[4];
  sub_1000DB418(a1, v9);
  v11 = sub_1006314F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PreviewLocation.CodingKeys, &type metadata for PreviewLocation.CodingKeys, v11, v9, v10);
  sub_100080C0C(v3, v2, type metadata accessor for PreviewLocation);
  v12 = (char *)sub_100630C88 + 4 * byte_1009B9840[swift_getEnumCaseMultiPayload(v2)];
  __asm { BR              X10 }
}

void sub_100630C88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  v6 = *(_QWORD *)(v5 - 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v0, v3, v6);
  *(_BYTE *)(v5 - 112) = 0;
  v7 = sub_1000DB000();
  sub_1000DF814(v7, v8, v9, (uint64_t)&type metadata for PreviewLocation.CodingType, v7);
  if (!v1)
  {
    *(_BYTE *)(v5 - 112) = 1;
    sub_100086DA4(&qword_100BCF410, (uint64_t (*)(uint64_t))&type metadata accessor for Location, (uint64_t)&protocol conformance descriptor for Location);
    sub_1000D13B8();
    sub_1000AE908(v0, v10, v2, v6, v11);
  }
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v6);
  v12 = sub_1000BD604();
  v13(v12, v2);
  sub_1000E72CC();
}

unint64_t sub_100630F40(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100B5AEF0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

uint64_t sub_100630F8C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100630FB8 + 4 * byte_1009B9844[a1]))(1701869940, 0xE400000000000000);
}

uint64_t sub_100630FB8()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_100630FD4()
{
  return 0x616E6964726F6F63;
}

uint64_t sub_100630FF0()
{
  return 1701667182;
}

unint64_t sub_100630FFC()
{
  return 0xD000000000000012;
}

uint64_t sub_100631018(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100631044 + 4 * byte_1009B984A[a1]))(1701869940, 0xE400000000000000);
}

uint64_t sub_100631044()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_10063105C()
{
  return 0x6F4C686372616573;
}

uint64_t sub_100631080()
{
  return 0x616E6964726F6F63;
}

uint64_t sub_10063109C()
{
  return 1701667182;
}

unint64_t sub_1006310A8()
{
  return 0xD000000000000012;
}

unint64_t sub_1006310C4(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100B5AFA0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t sub_10063110C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100631140 + 4 * byte_1009B9850[a1]))(0x6E6F697461636F6CLL, 0xE800000000000000);
}

unint64_t sub_100631140()
{
  return 0xD000000000000012;
}

uint64_t sub_100631160()
{
  return 0x616E6964726F6F63;
}

void sub_10063117C()
{
  sub_10068B6FC();
}

void sub_100631188()
{
  unsigned __int8 *v0;

  sub_1004A7610(*v0);
}

void sub_100631190()
{
  sub_1001D8D10();
}

void sub_100631198(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1001D9DBC(a1, *v1);
}

unint64_t sub_1006311A0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100630F40(*a1);
  *a2 = result;
  return result;
}

void sub_1006311CC(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;

  *a1 = sub_100630F8C(*v1);
  a1[1] = v3;
  sub_10004A298();
}

uint64_t sub_1006311F0()
{
  unsigned __int8 *v0;

  return sub_100631018(*v0);
}

uint64_t sub_1006311F8@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100630F88(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10063121C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006314F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100631244(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006314F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10063126C()
{
  sub_10068B640();
}

void sub_100631278()
{
  unsigned __int8 *v0;

  sub_1004A761C(*v0);
}

void sub_100631280()
{
  sub_1001D8CB0();
}

void sub_100631288(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1001D9DC8(a1, *v1);
}

unint64_t sub_100631290@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1006310C4(*a1);
  *a2 = result;
  return result;
}

void sub_1006312BC(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;

  *a1 = sub_10063110C(*v1);
  a1[1] = v3;
  sub_10004A298();
}

uint64_t sub_1006312E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1006318E8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10063133C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1006318E8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_100631388(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10063070C(a1, a2);
}

void sub_10063139C(_QWORD *a1)
{
  sub_100630B10(a1);
}

void sub_1006313B0(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  a1[3] = sub_1000BA294(&qword_100BF8810);
  a1[4] = sub_10063160C();
  sub_10005F164(a1);
  v3 = sub_10003BCB8();
  ShortDescription.init(name:_:)(0x4C77656976657250, 0xEF6E6F697461636FLL, v2, v3);
  sub_10004A298();
}

void sub_10063144C(_QWORD *a1@<X8>)
{
  sub_1006313B0(a1);
}

uint64_t sub_100631460(uint64_t a1)
{
  uint64_t v2;

  sub_100086DA4(&qword_100BF8820, type metadata accessor for PreviewLocation, (uint64_t)&unk_1009B98B8);
  return ShortDescribable.description.getter(a1, v2);
}

void sub_1006314A0()
{
  sub_100086DA4(&qword_100BF87A8, type metadata accessor for PreviewLocation, (uint64_t)&unk_1009B9890);
}

void sub_1006314CC()
{
  sub_100086DA4(&qword_100BF87B0, type metadata accessor for PreviewLocation, (uint64_t)&unk_1009B99C8);
}

unint64_t sub_1006314F8()
{
  unint64_t result;

  result = qword_100BF87D0;
  if (!qword_100BF87D0)
  {
    result = swift_getWitnessTable(&unk_1009B9BE8, &type metadata for PreviewLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF87D0);
  }
  return result;
}

unint64_t sub_100631534()
{
  unint64_t result;

  result = qword_100BF87D8;
  if (!qword_100BF87D8)
  {
    result = swift_getWitnessTable(&unk_1009B9BC0, &type metadata for PreviewLocation.CodingType);
    atomic_store(result, (unint64_t *)&qword_100BF87D8);
  }
  return result;
}

unint64_t sub_100631570()
{
  unint64_t result;

  result = qword_100BF87F8;
  if (!qword_100BF87F8)
  {
    result = swift_getWitnessTable(&unk_1009B9B98, &type metadata for PreviewLocation.CodingType);
    atomic_store(result, (unint64_t *)&qword_100BF87F8);
  }
  return result;
}

uint64_t sub_1006315AC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100075EB0(&qword_100BC5AA8);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10063160C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF8818;
  if (!qword_100BF8818)
  {
    v1 = sub_100075EB0(&qword_100BF8810);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF8818);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PreviewLocation.CodingType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10063169C + 4 * byte_1009B9859[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1006316D0 + 4 * byte_1009B9854[v4]))();
}

uint64_t sub_1006316D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006316D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1006316E0);
  return result;
}

uint64_t sub_1006316EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1006316F4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1006316F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100631700(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PreviewLocation.CodingType()
{
  return &type metadata for PreviewLocation.CodingType;
}

uint64_t storeEnumTagSinglePayload for PreviewLocation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100631768 + 4 * byte_1009B9863[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10063179C + 4 * byte_1009B985E[v4]))();
}

uint64_t sub_10063179C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006317A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1006317ACLL);
  return result;
}

uint64_t sub_1006317B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1006317C0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1006317C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006317CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PreviewLocation.CodingKeys()
{
  return &type metadata for PreviewLocation.CodingKeys;
}

unint64_t sub_1006317EC()
{
  unint64_t result;

  result = qword_100BF8828;
  if (!qword_100BF8828)
  {
    result = swift_getWitnessTable(&unk_1009B9AD0, &type metadata for PreviewLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF8828);
  }
  return result;
}

unint64_t sub_10063182C()
{
  unint64_t result;

  result = qword_100BF8830;
  if (!qword_100BF8830)
  {
    result = swift_getWitnessTable(&unk_1009B9B70, &type metadata for PreviewLocation.CodingType);
    atomic_store(result, (unint64_t *)&qword_100BF8830);
  }
  return result;
}

unint64_t sub_10063186C()
{
  unint64_t result;

  result = qword_100BF8838;
  if (!qword_100BF8838)
  {
    result = swift_getWitnessTable(&unk_1009B9A08, &type metadata for PreviewLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF8838);
  }
  return result;
}

unint64_t sub_1006318AC()
{
  unint64_t result;

  result = qword_100BF8840;
  if (!qword_100BF8840)
  {
    result = swift_getWitnessTable(&unk_1009B9A30, &type metadata for PreviewLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF8840);
  }
  return result;
}

unint64_t sub_1006318E8()
{
  unint64_t result;

  result = qword_100BF8848;
  if (!qword_100BF8848)
  {
    result = swift_getWitnessTable(&unk_1009B9AF8, &type metadata for PreviewLocation.CodingType);
    atomic_store(result, (unint64_t *)&qword_100BF8848);
  }
  return result;
}

char *sub_100631924(uint64_t a1, uint64_t *a2, int *a3)
{
  char *v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = (char *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v32 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (char *)(v32 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    v8 = a3[5];
    v9 = &v4[v8];
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for ChartProxy(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = &v4[v12];
    v14 = (uint64_t)a2 + v12;
    v15 = type metadata accessor for GeometryProxy(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = &v4[v16];
    v18 = (uint64_t)a2 + v16;
    v19 = type metadata accessor for Date(0);
    v20 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
    v20(v17, v18, v19);
    v20(&v4[a3[8]], (uint64_t)a2 + a3[8], v19);
    v21 = a3[9];
    v22 = a3[10];
    v23 = &v4[v21];
    v24 = (uint64_t)a2 + v21;
    *(_OWORD *)v23 = *(_OWORD *)v24;
    v23[16] = *(_BYTE *)(v24 + 16);
    v25 = &v4[v22];
    v26 = (uint64_t *)((char *)a2 + v22);
    v27 = sub_1000BA294(&qword_100BC2908);
    if (swift_getEnumCaseMultiPayload(v26) == 1)
    {
      v28 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v25, v26, v28);
      v29 = v25;
      v30 = v27;
      v31 = 1;
    }
    else
    {
      *(_QWORD *)v25 = *v26;
      swift_retain();
      v29 = v25;
      v30 = v27;
      v31 = 0;
    }
    swift_storeEnumTagMultiPayload(v29, v30, v31);
  }
  return v4;
}

double sub_100631AE0(char *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  char *v11;
  uint64_t v12;
  double result;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  v4 = &a1[a2[5]];
  v5 = type metadata accessor for ChartProxy(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = &a1[a2[6]];
  v7 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = &a1[a2[7]];
  v9 = type metadata accessor for Date(0);
  v10 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(&a1[a2[8]], v9);
  v11 = &a1[a2[10]];
  sub_1000BA294(&qword_100BC2908);
  if (swift_getEnumCaseMultiPayload(v11) == 1)
  {
    v12 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

uint64_t sub_100631BEC(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ChartProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for Date(0);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
  v19(v16, v17, v18);
  v19(a1 + a3[8], a2 + a3[8], v18);
  v20 = a3[9];
  v21 = a3[10];
  v22 = a1 + v20;
  v23 = a2 + v20;
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *(_BYTE *)(v22 + 16) = *(_BYTE *)(v23 + 16);
  v24 = (_QWORD *)(a1 + v21);
  v25 = (_QWORD *)(a2 + v21);
  v26 = sub_1000BA294(&qword_100BC2908);
  if (swift_getEnumCaseMultiPayload(v25) == 1)
  {
    v27 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v24, v25, v27);
    v28 = 1;
  }
  else
  {
    *v24 = *v25;
    swift_retain();
    v28 = 0;
  }
  swift_storeEnumTagMultiPayload(v24, v26, v28);
  return a1;
}

char *sub_100631D6C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_100094D04(a1, a2);
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for ChartProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[7];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = type metadata accessor for Date(0);
  v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24);
  v18(v15, v16, v17);
  v18(&a1[a3[8]], &a2[a3[8]], v17);
  v19 = a3[9];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = *(_OWORD *)v21;
  v20[16] = v21[16];
  *(_OWORD *)v20 = v22;
  if (a1 != a2)
  {
    v23 = a3[10];
    v24 = &a1[v23];
    v25 = &a2[v23];
    sub_100021A14((uint64_t)&a1[v23], &qword_100BC2908);
    v26 = sub_1000BA294(&qword_100BC2908);
    if (swift_getEnumCaseMultiPayload(v25) == 1)
    {
      v27 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v24, v25, v27);
      v28 = 1;
    }
    else
    {
      *(_QWORD *)v24 = *(_QWORD *)v25;
      swift_retain();
      v28 = 0;
    }
    swift_storeEnumTagMultiPayload(v24, v26, v28);
  }
  return a1;
}

uint64_t sub_100631EF4(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ChartProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for Date(0);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32);
  v19(v16, v17, v18);
  v19(a1 + a3[8], a2 + a3[8], v18);
  v20 = a3[9];
  v21 = a3[10];
  v22 = a1 + v20;
  v23 = a2 + v20;
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *(_BYTE *)(v22 + 16) = *(_BYTE *)(v23 + 16);
  v24 = (void *)(a1 + v21);
  v25 = (const void *)(a2 + v21);
  v26 = sub_1000BA294(&qword_100BC2908);
  if (swift_getEnumCaseMultiPayload(v25) == 1)
  {
    v27 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v24, v25, v27);
    swift_storeEnumTagMultiPayload(v24, v26, 1);
  }
  else
  {
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100632070(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ChartProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for Date(0);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40);
  v19(v16, v17, v18);
  v19(a1 + a3[8], a2 + a3[8], v18);
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *(_BYTE *)(v21 + 16) = *(_BYTE *)(v22 + 16);
  if (a1 != a2)
  {
    v23 = a3[10];
    v24 = (void *)(a1 + v23);
    v25 = (const void *)(a2 + v23);
    sub_100021A14(a1 + v23, &qword_100BC2908);
    v26 = sub_1000BA294(&qword_100BC2908);
    if (swift_getEnumCaseMultiPayload(v25) == 1)
    {
      v27 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v24, v25, v27);
      swift_storeEnumTagMultiPayload(v24, v26, 1);
    }
    else
    {
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10063220C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100632218);
}

uint64_t sub_100632218(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_10009D6D0();
    sub_100088FF0();
    if (v11)
    {
      v9 = v8;
      v10 = a3[5];
    }
    else
    {
      sub_1000B4C0C();
      sub_100088FF0();
      if (v11)
      {
        v9 = v12;
        v10 = a3[6];
      }
      else
      {
        sub_100098778();
        sub_100088FF0();
        if (v13)
        {
          v9 = v14;
          v10 = a3[7];
        }
        else
        {
          v9 = sub_1000BA294(&qword_100BC3800);
          v10 = a3[10];
        }
      }
    }
    return _s7Weather24LocationCompositionStateOwet_0(a1 + v10, a2, v9);
  }
}

uint64_t sub_1006322D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006322E4);
}

void sub_1006322E4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 24) = (a2 - 1);
    sub_100079F70();
  }
  else
  {
    sub_10009D6D0();
    sub_10009D2E8();
    if (v10)
    {
      v8 = v7;
      v9 = a4[5];
    }
    else
    {
      sub_1000B4C0C();
      sub_10009D2E8();
      if (v10)
      {
        v8 = v11;
        v9 = a4[6];
      }
      else
      {
        sub_100098778();
        sub_10009D2E8();
        if (v12)
        {
          v8 = v13;
          v9 = a4[7];
        }
        else
        {
          v8 = sub_1000BA294(&qword_100BC3800);
          v9 = a4[10];
        }
      }
    }
    _s7Weather24LocationCompositionStateOwst_0(a1 + v9, a2, a2, v8);
  }
}

uint64_t type metadata accessor for LollipopChartOverlayView(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF88A8;
  if (!qword_100BF88A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LollipopChartOverlayView);
  return result;
}

void sub_1006323D0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v10[0] = "(";
  v2 = type metadata accessor for ChartProxy(319);
  if (v3 <= 0x3F)
  {
    v10[1] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for GeometryProxy(319);
    if (v5 <= 0x3F)
    {
      v10[2] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for Date(319);
      if (v7 <= 0x3F)
      {
        v11 = *(_QWORD *)(v6 - 8) + 64;
        v12 = v11;
        v13 = &unk_1009B9C78;
        sub_100158C28(319);
        if (v9 <= 0x3F)
        {
          v14 = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 7, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_1006324A4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABBBA4, 1);
}

uint64_t sub_1006324B4@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;

  v41 = a1;
  v3 = type metadata accessor for ChartDragGestureRecognizerRepresentable(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  v39 = v3;
  v40 = v4;
  __chkstk_darwin(v3);
  sub_100098728();
  v37 = v6 - v5;
  v7 = type metadata accessor for LocalCoordinateSpace(0);
  v8 = *(_QWORD *)(v7 - 8);
  v34 = v7;
  v35 = v8;
  __chkstk_darwin(v7);
  sub_100098728();
  v11 = v10 - v9;
  v12 = sub_1000C617C();
  v13 = *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64);
  __chkstk_darwin(v12);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_1000BA294(&qword_100BF88F8);
  v38 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  sub_100098728();
  v33 = v16 - v15;
  v42 = static Color.clear.getter(v17);
  LOWORD(v43) = 256;
  BYTE2(v43) = 0;
  sub_100632BF8(v2, (uint64_t)v14);
  v18 = sub_1000DF82C((uint64_t)&unk_100B85EC8);
  v19 = sub_1000DBC20(v18);
  static CoordinateSpaceProtocol<>.local.getter(v19);
  v20 = sub_1000BA294(&qword_100BF26E8);
  v21 = sub_1005AB438();
  v22 = v34;
  View.onContinuousHover<A>(coordinateSpace:perform:)(v11, sub_100632C84, v18, v20, v34, v21, &protocol witness table for LocalCoordinateSpace);
  v23 = swift_release();
  (*(void (**)(uint64_t, uint64_t, __n128))(v35 + 8))(v11, v22, v23);
  swift_release();
  sub_100632BF8(v32, (uint64_t)v14);
  v24 = sub_1000DF82C((uint64_t)&unk_100B85EF0);
  sub_1000DBC20(v24);
  v25 = v37;
  ChartDragGestureRecognizerRepresentable.init(isRecognizedHandler:)(sub_100632C84, v24);
  v42 = v20;
  v43 = v22;
  v44 = v21;
  v45 = &protocol witness table for LocalCoordinateSpace;
  v26 = sub_10009885C((uint64_t)&v42, (uint64_t)&opaque type descriptor for <<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>);
  sub_10000F1C8(&qword_100BF26F8, (uint64_t (*)(uint64_t))&type metadata accessor for ChartDragGestureRecognizerRepresentable);
  v27 = v36;
  v28 = v39;
  v29 = v33;
  View.gestureRecognizer<A>(_:)(v25, v36, v39, v26, v30);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v25, v28);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v29, v27);
}

void sub_10063275C(double a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  __n128 v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(void);
  char *v33;
  char *v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  char v38;
  double v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  double *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(void);
  char *v51;
  uint64_t v52;
  uint64_t v53;
  double *v54;
  uint64_t v55;
  char *v56;
  _QWORD *v57;
  double v58[4];

  v55 = type metadata accessor for DetailHeroChartLollipopPosition(0);
  __chkstk_darwin(v55);
  v54 = (double *)((char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for LayoutDirection(0);
  v52 = *(_QWORD *)(v4 - 8);
  v53 = v4;
  __chkstk_darwin(v4);
  v51 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v6);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v56 = (char *)&v48 - v14;
  __chkstk_darwin(v15);
  v17 = (char *)&v48 - v16;
  v18 = type metadata accessor for LollipopChartOverlayView(0);
  v57 = v1;
  v19 = ChartProxy.plotAreaFrame.getter();
  type metadata accessor for CGRect(0);
  GeometryProxy.subscript.getter(v58, v19, v20);
  swift_release();
  ChartProxy.value<A>(atX:as:)(v9, v9, &protocol witness table for Date, a1 - v58[0]);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9) == 1)
  {
    sub_100021A14((uint64_t)v8, (uint64_t *)&unk_100BD35A0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v8, v9);
    v21 = ChartProxy.yDomain<A>(dataType:)(&type metadata for Double, &type metadata for Double, &protocol witness table for Double);
    if (*(_QWORD *)(v21 + 16))
    {
      v22 = *(_QWORD *)(v21 + 32);
      v23 = sub_10020CC18(v21);
      v25 = v24;
      v26 = swift_bridgeObjectRelease();
      if ((v25 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t, __n128))(v10 + 8))(v17, v9, v26);
      }
      else
      {
        v49 = v23;
        v27 = v57;
        v28 = (char *)v57 + *(int *)(v18 + 32);
        sub_10000F1C8((unint64_t *)&qword_100BCB0E0, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
        v30 = v29;
        v31 = dispatch thunk of static Comparable.< infix(_:_:)(v28, v17, v9, v29);
        v32 = *(void (**)(void))(v10 + 16);
        v50 = v32;
        if ((v31 & 1) != 0)
        {
          v33 = v12;
          v34 = v28;
        }
        else
        {
          v33 = v12;
          v34 = v17;
        }
        ((void (*)(char *, char *, uint64_t))v32)(v33, v34, v9);
        if ((dispatch thunk of static Comparable.>= infix(_:_:)((char *)v27 + *(int *)(v18 + 28), v12, v9, v30) & 1) != 0)
          v35 = v56;
        else
          v35 = v56;
        v50();
        v36 = *(void (**)(char *, uint64_t))(v10 + 8);
        v36(v12, v9);
        v37 = ChartProxy.position<A>(forX:)(v35, v9, &protocol witness table for Date);
        if ((v38 & 1) == 0)
        {
          v39 = *(double *)&v37;
          v40 = v51;
          sub_1001591C8();
          v42 = v52;
          v41 = v53;
          v43 = (*(uint64_t (**)(char *, uint64_t))(v52 + 88))(v40, v53);
          v44 = enum case for LayoutDirection.rightToLeft(_:);
          v45 = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v40, v41);
          if (v43 == v44)
            v39 = ChartProxy.plotAreaSize.getter(v45) - v39;
          sub_1000DB418(v57, v57[3]);
          v47 = v54;
          v46 = v55;
          ((void (*)(char *, char *, uint64_t))v50)((char *)v54 + *(int *)(v55 + 20), v35, v9);
          *v47 = v39;
          *(_QWORD *)((char *)v47 + *(int *)(v46 + 24)) = v22;
          *(_QWORD *)((char *)v47 + *(int *)(v46 + 28)) = v49;
          sub_100596F80((uint64_t)v47);
          sub_100284B28((uint64_t)v47);
        }
        v36(v35, v9);
        v36(v17, v9);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
      swift_bridgeObjectRelease();
    }
  }
}

void sub_100632BB0(uint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  if ((a3 & 1) != 0)
  {
    sub_1000DB418(a4, a4[3]);
    sub_100597030();
  }
  else
  {
    sub_10063275C(*(double *)&a1);
  }
}

uint64_t sub_100632BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LollipopChartOverlayView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100632C40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LollipopChartOverlayView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100632C8C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  char v6;
  uint64_t v7;

  v6 = a3 & 1;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000C617C() - 8) + 80);
  sub_100632BB0(a1, a2, v6, (_QWORD *)(v3 + ((v7 + 16) & ~v7)));
  sub_100079F70();
}

uint64_t sub_100632CD8()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;

  v0 = sub_100075EB0(&qword_100BF88F8);
  v2 = type metadata accessor for ChartDragGestureRecognizerRepresentable(255, v1);
  v6 = sub_100075EB0(&qword_100BF26E8);
  v7 = type metadata accessor for LocalCoordinateSpace(255);
  v8 = sub_1005AB438();
  v9 = &protocol witness table for LocalCoordinateSpace;
  v3 = sub_10009885C((uint64_t)&v6, (uint64_t)&opaque type descriptor for <<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>);
  sub_10000F1C8(&qword_100BF26F8, (uint64_t (*)(uint64_t))&type metadata accessor for ChartDragGestureRecognizerRepresentable);
  v6 = v0;
  v7 = v2;
  v8 = v3;
  v9 = v4;
  return sub_10009885C((uint64_t)&v6, (uint64_t)&opaque type descriptor for <<opaque return type of View.gestureRecognizer<A>(_:)>>);
}

void sub_100632DA0(char a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94[32];

  v93 = a3;
  v5 = type metadata accessor for TipPriorityQueue.GridEntry(0);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_1000986FC();
  v92 = v7;
  __chkstk_darwin(v8);
  v91 = (uint64_t)&v68 - v9;
  __chkstk_darwin(v10);
  v90 = (uint64_t)&v68 - v11;
  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100098728();
  v15 = v14 - v13;
  type metadata accessor for LocationComponentViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v68 - v20;
  sub_1000BA294(&qword_100BCC760);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  sub_1000986FC();
  v89 = v23;
  __chkstk_darwin(v24);
  v26 = (char *)&v68 - v25;
  __chkstk_darwin(v27);
  v29 = (char *)&v68 - v28;
  __chkstk_darwin(v30);
  v32 = (char *)&v68 - v31;
  if (a1)
  {
    if (a1 == 1)
    {
      if ((a2 & 1) != 0)
      {
        v33 = &qword_100BF8CD0;
        goto LABEL_11;
      }
    }
    else if ((a2 & 1) != 0)
    {
      v33 = &qword_100BF90A0;
      goto LABEL_11;
    }
    v33 = &qword_100BF8EB8;
  }
  else if ((a2 & 1) != 0)
  {
    v33 = &qword_100BF8900;
  }
  else
  {
    v33 = &qword_100BF8AE8;
  }
LABEL_11:
  v34 = *((_BYTE *)v33 + 224);
  v76 = *v33;
  v75 = v33[1];
  v74 = v33[2];
  v73 = v33[3];
  v35 = v33[8];
  v79 = v33[9];
  v80 = v35;
  v36 = v33[10];
  v77 = v33[11];
  v78 = v36;
  v37 = v33[24];
  v72 = v33[25];
  v71 = v33[26];
  v70 = v33[27];
  v38 = v33[49];
  v83 = v33[50];
  v84 = v38;
  v39 = v33[51];
  v81 = v33[52];
  v82 = v39;
  v40 = v33[57];
  v87 = v33[58];
  v88 = v40;
  v41 = v93 + OBJC_IVAR____TtCV7Weather18DefaultNewsContent8_Storage_map;
  v43 = v33[59];
  v42 = v33[60];
  v85 = v43;
  v86 = v42;
  sub_1000992EC(v93 + OBJC_IVAR____TtCV7Weather18DefaultNewsContent8_Storage_map, (uint64_t)v94);
  sub_10003773C(v41, v15, &qword_100BC4A98);
  v44 = sub_1000878BC();
  if (_s7Weather24LocationCompositionStateOwet_0(v15, 1, v44) == 1)
  {
    sub_100021A14(v15, &qword_100BC4A98);
LABEL_16:
    v45 = 1;
    goto LABEL_17;
  }
  v69 = v37;
  sub_10009D3BC(v15 + *(int *)(v44 + 20), (uint64_t)v18);
  sub_1000215BC(v15, type metadata accessor for LocationComponentContainerViewModel);
  sub_10007C77C((uint64_t)v18, (uint64_t)v21, type metadata accessor for LocationComponentViewModel);
  if ((v34 & 1) != 0)
  {
    sub_1000215BC((uint64_t)v21, type metadata accessor for LocationComponentViewModel);
    goto LABEL_16;
  }
  sub_10007C77C((uint64_t)v21, (uint64_t)v29, type metadata accessor for LocationComponentViewModel);
  v45 = 0;
  v46 = &v29[*(int *)(v5 + 20)];
  v47 = v72;
  *(_QWORD *)v46 = v69;
  *((_QWORD *)v46 + 1) = v47;
  v48 = v70;
  *((_QWORD *)v46 + 2) = v71;
  *((_QWORD *)v46 + 3) = v48;
LABEL_17:
  sub_1000988B8((uint64_t)v29, v45);
  sub_1002228F0((uint64_t)v29, (uint64_t)v32);
  sub_10009D3BC(v93 + *(int *)(v44 + 20) + OBJC_IVAR____TtCV7Weather18DefaultNewsContent8_Storage_airQuality, (uint64_t)v26);
  v49 = &v26[*(int *)(v5 + 20)];
  v50 = v75;
  *(_QWORD *)v49 = v76;
  *((_QWORD *)v49 + 1) = v50;
  v51 = v73;
  *((_QWORD *)v49 + 2) = v74;
  *((_QWORD *)v49 + 3) = v51;
  sub_1000988B8((uint64_t)v26, 0);
  v52 = sub_10009D3C4(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast);
  v53 = v90;
  sub_10009D3BC(v52, v90);
  v54 = (uint64_t *)(v53 + *(int *)(v5 + 20));
  v55 = v79;
  *v54 = v80;
  v54[1] = v55;
  v56 = v77;
  v54[2] = v78;
  v54[3] = v56;
  v57 = v89;
  sub_10003773C((uint64_t)v32, v89, &qword_100BCC760);
  v58 = sub_10009D3C4(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex);
  v59 = v91;
  sub_10009D3BC(v58, v91);
  v60 = (uint64_t *)(v59 + *(int *)(v5 + 20));
  v61 = v83;
  *v60 = v84;
  v60[1] = v61;
  v62 = v81;
  v60[2] = v82;
  v60[3] = v62;
  v63 = sub_10009D3C4(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind);
  v64 = v92;
  sub_10009D3BC(v63, v92);
  v65 = (uint64_t *)(v64 + *(int *)(v5 + 20));
  v66 = v87;
  *v65 = v88;
  v65[1] = v66;
  v67 = v86;
  v65[2] = v85;
  v65[3] = v67;
  sub_10087CED0((uint64_t)v26, v53, v57, v59, v64);
  sub_100021A14((uint64_t)v32, &qword_100BCC760);
  sub_100098640();
}

void sub_10063329C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;
  __n128 *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 *v39;
  uint64_t v40;
  uint64_t v41;
  __n128 *v42;
  uint64_t v43;
  uint64_t v44;
  __n128 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 *v60;
  __n128 *v61;
  uint64_t v62;
  uint64_t v63;
  __n128 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __n128 *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __n128 *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __n128 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __n128 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __n128 *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  _BYTE v107[24];

  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100098728();
  v6 = v5 - v4;
  v7 = sub_1000878BC();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10009E540();
  v9 = a1;
  v10 = a1 + OBJC_IVAR____TtCV7Weather18DefaultNewsContent8_Storage_map;
  sub_1000992EC(a1 + OBJC_IVAR____TtCV7Weather18DefaultNewsContent8_Storage_map, (uint64_t)v107);
  sub_10003773C(v10, v6, &qword_100BC4A98);
  if (_s7Weather24LocationCompositionStateOwet_0(v6, 1, v7) == 1)
  {
    sub_100021A14(v6, &qword_100BC4A98);
    v11 = sub_1000BA294(&qword_100BCC750);
    v12 = swift_allocObject(v11, 248, 7);
    *(_OWORD *)(v12 + 16) = xmmword_10098E040;
    v13 = sub_1000BA294(&qword_100BCC758);
    v14 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v15 = *(_QWORD *)(v8 + 72);
    v16 = v13;
    v17 = (__n128 *)sub_1000BA6B8(v13);
    v18 = sub_100099954(v17, (__n128)xmmword_10097CA50);
    sub_10009F7F4(a1 + OBJC_IVAR____TtCV7Weather18DefaultNewsContent8_Storage_newsArticle, (uint64_t)v18 + v14);
    *(_QWORD *)(v12 + 32) = sub_1000B4580();
    *(_QWORD *)(v12 + 40) = v19;
    *(_QWORD *)(v12 + 48) = v20;
    v21 = (__n128 *)sub_1000BA6B8(v16);
    sub_1000D11D8(v21);
    sub_10009F7F4(v22 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, v23);
    *(_QWORD *)(v12 + 56) = sub_1000B4580();
    *(_QWORD *)(v12 + 64) = v24;
    *(_QWORD *)(v12 + 72) = v25;
    v26 = (__n128 *)sub_1000BA6B8(v16);
    sub_1000D11D8(v26);
    sub_10009F7F4(v27 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v28);
    *(_QWORD *)(v12 + 80) = sub_1000B4580();
    *(_QWORD *)(v12 + 88) = v29;
    *(_QWORD *)(v12 + 96) = v30;
    v31 = sub_1000BA6B8(v16);
    *(_OWORD *)(v31 + 16) = v106;
    sub_10009F7F4(a1 + OBJC_IVAR____TtCV7Weather18DefaultNewsContent8_Storage_airQuality, v31 + v14);
    *(_QWORD *)(v12 + 104) = sub_100080C44(v31);
    *(_QWORD *)(v12 + 112) = v32;
    *(_QWORD *)(v12 + 120) = v33;
    v34 = (__n128 *)sub_1000C2514(v16, v14 + 2 * v15);
    v35 = (char *)sub_100099954(v34, (__n128)xmmword_10097DA20) + v14;
    v36 = *(_QWORD *)(a1 + 16);
    sub_10009F7F4(v36 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex, (uint64_t)v35);
    sub_10009F7F4(v36 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, (uint64_t)&v35[v15]);
    *(_QWORD *)(v12 + 128) = sub_1000B4580();
    *(_QWORD *)(v12 + 136) = v37;
    *(_QWORD *)(v12 + 144) = v38;
    v39 = (__n128 *)sub_1000BA6B8(v16);
    sub_1000B46B8(v39);
    sub_100095B78(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind, (uint64_t)v35, type metadata accessor for LocationComponentContainerViewModel);
    sub_100098B48(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)&v35[v15]);
    *(_QWORD *)(v12 + 152) = sub_1000B4580();
    *(_QWORD *)(v12 + 160) = v40;
    *(_QWORD *)(v12 + 168) = v41;
    v42 = (__n128 *)sub_1000BA6B8(v16);
    sub_1000B46B8(v42);
    sub_100098A1C(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike, (uint64_t)v35);
    sub_100098A1C(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)&v35[v15]);
    *(_QWORD *)(v12 + 176) = sub_1000B4580();
    *(_QWORD *)(v12 + 184) = v43;
    *(_QWORD *)(v12 + 192) = v44;
    v45 = (__n128 *)sub_1000BA6B8(v16);
    sub_1000B46B8(v45);
    sub_100098B48(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility, (uint64_t)v35);
    sub_100098B48(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, (uint64_t)&v35[v15]);
    *(_QWORD *)(v12 + 200) = sub_1000B4580();
    *(_QWORD *)(v12 + 208) = v46;
    *(_QWORD *)(v12 + 216) = v47;
    v48 = sub_1000BA6B8(v16);
    *(_OWORD *)(v48 + 16) = v106;
    v49 = *(_QWORD *)(a1 + 16);
    sub_10009D3BC(v49 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, v48 + v14);
    sub_10009D3BC(v49 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, v48 + v14 + v15);
    *(_QWORD *)(v12 + 224) = sub_100080C44(v48);
    *(_QWORD *)(v12 + 232) = v50;
    *(_QWORD *)(v12 + 240) = v51;
  }
  else
  {
    sub_10007C77C(v6, v1, type metadata accessor for LocationComponentContainerViewModel);
    v52 = sub_1000BA294(&qword_100BCC750);
    v53 = swift_allocObject(v52, 272, 7);
    *(_OWORD *)(v53 + 16) = xmmword_10097FA60;
    v54 = sub_1000BA294(&qword_100BCC758);
    v55 = *(_QWORD *)(v8 + 72);
    v56 = *(unsigned __int8 *)(v8 + 80);
    v57 = (v56 + 32) & ~v56;
    v105 = v1;
    v58 = v56 | 7;
    v59 = v54;
    v60 = (__n128 *)swift_allocObject(v54, v57 + v55, v56 | 7);
    v61 = sub_100099954(v60, (__n128)xmmword_10097CA50);
    sub_1000B4590(v9 + OBJC_IVAR____TtCV7Weather18DefaultNewsContent8_Storage_newsArticle, (uint64_t)v61 + v57);
    *(_QWORD *)(v53 + 32) = sub_1000B4588();
    *(_QWORD *)(v53 + 40) = v62;
    *(_QWORD *)(v53 + 48) = v63;
    v64 = (__n128 *)sub_1000BA5D8();
    sub_100098A48(v64);
    sub_1000B4590(v65 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, v66);
    *(_QWORD *)(v53 + 56) = sub_1000B4588();
    *(_QWORD *)(v53 + 64) = v67;
    *(_QWORD *)(v53 + 72) = v68;
    v69 = (__n128 *)sub_1000BA5D8();
    sub_100098A48(v69);
    sub_1000B4590(v70 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v71);
    *(_QWORD *)(v53 + 80) = sub_1000B4588();
    *(_QWORD *)(v53 + 88) = v72;
    *(_QWORD *)(v53 + 96) = v73;
    v74 = sub_1000BA5D8();
    *(_OWORD *)(v74 + 16) = v106;
    sub_1000B4590(v9 + OBJC_IVAR____TtCV7Weather18DefaultNewsContent8_Storage_airQuality, v74 + v57);
    *(_QWORD *)(v53 + 104) = sub_1000B4588();
    *(_QWORD *)(v53 + 112) = v75;
    *(_QWORD *)(v53 + 120) = v76;
    v77 = sub_1000BA5D8();
    *(_OWORD *)(v77 + 16) = v106;
    sub_1000B4590(v1, v77 + v57);
    *(_QWORD *)(v53 + 128) = sub_1000B4580();
    *(_QWORD *)(v53 + 136) = v78;
    *(_QWORD *)(v53 + 144) = v79;
    v80 = v9;
    v81 = (__n128 *)swift_allocObject(v59, v57 + 2 * v55, v58);
    v82 = (char *)sub_100099954(v81, (__n128)xmmword_10097DA20) + v57;
    v83 = *(_QWORD *)(v80 + 16);
    v103 = v80;
    sub_1000B4590(v83 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex, (uint64_t)v82);
    v104 = v55;
    sub_1000B4590(v83 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, (uint64_t)&v82[v55]);
    *(_QWORD *)(v53 + 152) = sub_1000B4588();
    *(_QWORD *)(v53 + 160) = v84;
    *(_QWORD *)(v53 + 168) = v85;
    v86 = (__n128 *)sub_1000C2514(v59, v57 + 2 * v55);
    sub_1000C52D8(v86);
    v87 = *(_QWORD *)(v80 + 16);
    sub_1000B4590(v87 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind, (uint64_t)v82);
    sub_1000B4590(v87 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)&v82[v55]);
    *(_QWORD *)(v53 + 176) = sub_1000B4588();
    *(_QWORD *)(v53 + 184) = v88;
    *(_QWORD *)(v53 + 192) = v89;
    v90 = v57 + 2 * v55;
    v91 = (__n128 *)sub_1000C2514(v59, v90);
    sub_1000C52D8(v91);
    v92 = *(_QWORD *)(v103 + 16);
    sub_1000B4590(v92 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike, (uint64_t)v82);
    sub_100098A1C(v92 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)&v82[v55]);
    *(_QWORD *)(v53 + 200) = sub_1000B4588();
    *(_QWORD *)(v53 + 208) = v93;
    *(_QWORD *)(v53 + 216) = v94;
    v95 = (__n128 *)sub_1000C2514(v59, v90);
    sub_1000C52D8(v95);
    v96 = *(_QWORD *)(v103 + 16);
    sub_100095B78(v96 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility, (uint64_t)v82, type metadata accessor for LocationComponentContainerViewModel);
    sub_100095B78(v96 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, (uint64_t)&v82[v55], type metadata accessor for LocationComponentContainerViewModel);
    *(_QWORD *)(v53 + 224) = sub_1000B4588();
    *(_QWORD *)(v53 + 232) = v97;
    *(_QWORD *)(v53 + 240) = v98;
    v99 = swift_allocObject(v59, v90, v58);
    *(_OWORD *)(v99 + 16) = v106;
    v100 = *(_QWORD *)(v103 + 16);
    sub_100098B48(v100 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, v99 + v57);
    sub_100098B48(v100 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, v99 + v57 + v104);
    *(_QWORD *)(v53 + 248) = sub_100080C44(v99);
    *(_QWORD *)(v53 + 256) = v101;
    *(_QWORD *)(v53 + 264) = v102;
    sub_1000215BC(v105, type metadata accessor for LocationComponentContainerViewModel);
  }
  sub_100098640();
}

void sub_1006339D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = sub_1000878BC();
  sub_1000B42B0();
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v16 - v7;
  type metadata accessor for LocationViewComponent(0);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_10009E540();
  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = v12 - v11;
  v14 = *(_QWORD *)(a1 + 16);
  swift_retain();
  sub_100520630();
  v17 = v15;
  swift_release(v14);
  sub_1000C5D34(OBJC_IVAR____TtCV7Weather32LocationDefaultNewsConfiguration8_Storage_map);
  sub_1000C661C();
  sub_100098B50();
  _s7Weather24LocationCompositionStateOwst_0(v13, 0, 1, v2);
  sub_1000C5D34(OBJC_IVAR____TtCV7Weather32LocationDefaultNewsConfiguration8_Storage_airQuality);
  sub_1000C661C();
  sub_100098B50();
  sub_1000C5D34(OBJC_IVAR____TtCV7Weather32LocationDefaultNewsConfiguration8_Storage_newsArticle);
  sub_1000C661C();
  sub_100098B50();
  sub_1001DA680(v17, v13, (uint64_t)v8, (uint64_t)v6);
  sub_100098640();
}

_QWORD *sub_100633B44(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t, __n128);
  __n128 v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(a2) == 1)
    {
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      v8 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
      v9 = v8[5];
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12))
      {
        v13 = sub_1000BA294(&qword_100BD4280);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
      }
      v15 = v8[6];
      v16 = (_QWORD *)((char *)a1 + v15);
      v17 = (_QWORD *)((char *)a2 + v15);
      v18 = v17[1];
      *v16 = *v17;
      v16[1] = v18;
      v19 = v8[7];
      v20 = (char *)a1 + v19;
      v21 = (char *)a2 + v19;
      v22 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v12 - 8) + 16);
      v23 = swift_bridgeObjectRetain();
      v22(v20, v21, v12, v23);
      v24 = v8[8];
      v25 = (char *)a1 + v24;
      v26 = (char *)a2 + v24;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2 + v24, 1, v12))
      {
        v27 = sub_1000BA294(&qword_100BD4280);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        ((void (*)(char *, char *, uint64_t))v22)(v25, v26, v12);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v25, 0, 1, v12);
      }
      *((_BYTE *)a1 + v8[9]) = *((_BYTE *)a2 + v8[9]);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100633D3C(uint64_t a1)
{
  uint64_t result;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);

  type metadata accessor for NewsArticleComponentViewModel(0);
  result = swift_getEnumCaseMultiPayload(a1);
  if ((_DWORD)result == 1)
  {
    swift_bridgeObjectRelease();
    v3 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
    v4 = a1 + v3[5];
    v5 = type metadata accessor for URL(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v4, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
    v6 = swift_bridgeObjectRelease();
    v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
    ((void (*)(uint64_t, uint64_t, __n128))v8)(a1 + v3[7], v5, v6);
    v7 = a1 + v3[8];
    result = _s7Weather24LocationCompositionStateOwet_0(v7, 1, v5);
    if (!(_DWORD)result)
      return v8(v7, v5);
  }
  return result;
}

_QWORD *sub_100633E3C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v4 = type metadata accessor for NewsArticleComponentViewModel(0);
  if (swift_getEnumCaseMultiPayload(a2) == 1)
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
    v7 = v6[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for URL(0);
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10))
    {
      v11 = sub_1000BA294(&qword_100BD4280);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
    }
    v12 = v6[6];
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = v6[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v10 - 8) + 16);
    v20 = swift_bridgeObjectRetain();
    v19(v17, v18, v10, v20);
    v21 = v6[8];
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2 + v21, 1, v10))
    {
      v24 = sub_1000BA294(&qword_100BD4280);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      ((void (*)(char *, char *, uint64_t))v19)(v22, v23, v10);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v22, 0, 1, v10);
    }
    *((_BYTE *)a1 + v6[9]) = *((_BYTE *)a2 + v6[9]);
    swift_storeEnumTagMultiPayload(a1, v4, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_100634008(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  if (a1 != a2)
  {
    sub_1006341F4((uint64_t)a1);
    v4 = type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(a2) == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      v5 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
      v6 = v5[5];
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9))
      {
        v10 = sub_1000BA294(&qword_100BD4280);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v9);
      }
      v11 = v5[6];
      v12 = (_QWORD *)((char *)a1 + v11);
      v13 = (_QWORD *)((char *)a2 + v11);
      *v12 = *v13;
      v12[1] = v13[1];
      v14 = v5[7];
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      v17 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v9 - 8) + 16);
      v18 = swift_bridgeObjectRetain();
      v17(v15, v16, v9, v18);
      v19 = v5[8];
      v20 = (char *)a1 + v19;
      v21 = (char *)a2 + v19;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2 + v19, 1, v9))
      {
        v22 = sub_1000BA294(&qword_100BD4280);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        ((void (*)(char *, char *, uint64_t))v17)(v20, v21, v9);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v20, 0, 1, v9);
      }
      *((_BYTE *)a1 + v5[9]) = *((_BYTE *)a2 + v5[9]);
      swift_storeEnumTagMultiPayload(a1, v4, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1006341F4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NewsArticleComponentViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_100634230(char *a1, char *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v4 = type metadata accessor for NewsArticleComponentViewModel(0);
  if (swift_getEnumCaseMultiPayload(a2) == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v5 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
    v6 = v5[5];
    v7 = &a1[v6];
    v8 = &a2[v6];
    v9 = type metadata accessor for URL(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9))
    {
      v10 = sub_1000BA294(&qword_100BD4280);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
    }
    else
    {
      v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
      v11(v7, v8, v9);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v9);
    }
    *(_OWORD *)&a1[v5[6]] = *(_OWORD *)&a2[v5[6]];
    v11(&a1[v5[7]], &a2[v5[7]], v9);
    v12 = v5[8];
    v13 = &a1[v12];
    v14 = &a2[v12];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&a2[v12], 1, v9))
    {
      v15 = sub_1000BA294(&qword_100BD4280);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v11(v13, v14, v9);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, v9);
    }
    a1[v5[9]] = a2[v5[9]];
    swift_storeEnumTagMultiPayload(a1, v4, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

char *sub_1006343E0(char *a1, char *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  if (a1 != a2)
  {
    sub_1006341F4((uint64_t)a1);
    v4 = type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(a2) == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v5 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
      v6 = v5[5];
      v7 = &a1[v6];
      v8 = &a2[v6];
      v9 = type metadata accessor for URL(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9))
      {
        v10 = sub_1000BA294(&qword_100BD4280);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
        v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
      }
      else
      {
        v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
        v11(v7, v8, v9);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v9);
      }
      *(_OWORD *)&a1[v5[6]] = *(_OWORD *)&a2[v5[6]];
      v11(&a1[v5[7]], &a2[v5[7]], v9);
      v12 = v5[8];
      v13 = &a1[v12];
      v14 = &a2[v12];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&a2[v12], 1, v9))
      {
        v15 = sub_1000BA294(&qword_100BD4280);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        v11(v13, v14, v9);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, v9);
      }
      a1[v5[9]] = a2[v5[9]];
      swift_storeEnumTagMultiPayload(a1, v4, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1006345A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NewsArticleComponentViewModel(0);
  return _s7Weather24LocationCompositionStateOwet_0(a1, a2, v4);
}

uint64_t sub_1006345D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for NewsArticleComponentViewModel(0);
  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, a3, v6);
}

uint64_t type metadata accessor for DetailComponentViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF92F8;
  if (!qword_100BF92F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DetailComponentViewModel);
  return result;
}

uint64_t sub_100634650(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for NewsArticleComponentViewModel(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8);
    swift_initEnumMetadataSingleCase(a1, 256, v4 + 64);
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a1 - 8) + 84) = *(_DWORD *)(v4 + 84);
  }
  return result;
}

uint64_t sub_1006346AC()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5._countAndFlagsBits = 0xD000000000000030;
  v5._object = (void *)0x8000000100A0E6D0;
  v1._object = (void *)0x8000000100A0E6A0;
  v1._countAndFlagsBits = 0xD000000000000022;
  v2._countAndFlagsBits = 1937204558;
  v2._object = (void *)0xE400000000000000;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_100634760(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v4 = type metadata accessor for NewsArticleComponentViewModel(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BF9308);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_100634854(a1, (uint64_t)v10);
  sub_100634854(a2, v11);
  sub_100634898((uint64_t)v10, (uint64_t)v6);
  LOBYTE(a2) = sub_100255C9C((uint64_t)v6, v11);
  sub_1006341F4(v11);
  sub_1006341F4((uint64_t)v6);
  return a2 & 1;
}

uint64_t sub_100634854(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DetailComponentViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100634898(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NewsArticleComponentViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double sub_1006348F4()
{
  double result;

  swift_retain();
  sub_100126590();
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_100634924()
{
  uint64_t v0;

  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 73, 7);
}

double sub_100634950(uint64_t a1, char a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  char v11;
  uint64_t v12;
  double result;
  _OWORD v14[2];
  uint64_t v15;

  v6 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v6);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(uint64_t (**)(uint64_t))(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  if ((a2 & 1) != 0)
    v11 = 1;
  else
    v11 = 2;
  if ((a3 & 1) != 0)
    v11 = 3;
  *v8 = v11;
  v12 = type metadata accessor for NotificationsAction(0);
  swift_storeEnumTagMultiPayload(v8, v12, 0);
  swift_storeEnumTagMultiPayload(v8, v6, 4);
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  swift_retain();
  sub_1000A5EBC((uint64_t)v8, (uint64_t)v14, v10);
  sub_100159C94((uint64_t)v14);
  sub_1000A0AA4((uint64_t)v8);
  *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  return result;
}

void sub_100634A4C()
{
  sub_100126590();
}

uint64_t sub_100634A68()
{
  uint64_t v0;

  swift_release();
  sub_1001599DC(*(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  return swift_deallocObject(v0, 33, 7);
}

double sub_100634A98()
{
  uint64_t v0;

  return sub_100634950(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

unint64_t sub_100634AA4(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v19 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_10008D47C(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v9;
    v10 = a3[6];
    v11 = a1 + v10;
    v12 = a2 + v10;
    v13 = type metadata accessor for Date(0);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v13 - 8) + 16);
    v15 = swift_bridgeObjectRetain();
    v14(v11, v12, v13, v15);
    ((void (*)(unint64_t, uint64_t, uint64_t))v14)(a1 + a3[7], a2 + a3[7], v13);
    v16 = a3[9];
    *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
    *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
    v17 = a3[10];
    v18 = *(_OWORD *)(a2 + v17 + 24);
    *(_OWORD *)(a1 + v17 + 24) = v18;
    (**(void (***)(void))(v18 - 8))();
  }
  return a1;
}

uint64_t sub_100634BB8(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  sub_1000B15F8(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  swift_bridgeObjectRelease();
  v4 = a1 + a2[6];
  v5 = type metadata accessor for Date(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + a2[7], v5);
  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + a2[10]));
}

uint64_t sub_100634C3C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10008D47C(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  v9 = a3[6];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Date(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v12 - 8) + 16);
  v14 = swift_bridgeObjectRetain();
  v13(v10, v11, v12, v14);
  ((void (*)(uint64_t, uint64_t, uint64_t))v13)(a1 + a3[7], a2 + a3[7], v12);
  v15 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v16 = a3[10];
  v17 = *(_OWORD *)(a2 + v16 + 24);
  *(_OWORD *)(a1 + v16 + 24) = v17;
  (**(void (***)(void))(v17 - 8))();
  return a1;
}

uint64_t sub_100634D24(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10008D47C(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1000B15F8(v8, v9);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for Date(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v14(a1 + a3[7], a2 + a3[7], v13);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  sub_100094D04((_QWORD *)(a1 + a3[10]), (_QWORD *)(a2 + a3[10]));
  return a1;
}

uint64_t sub_100634E18(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Date(0);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(a1 + a3[7], a2 + a3[7], v9);
  v11 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v12 = a3[10];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v15;
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
  return a1;
}

uint64_t sub_100634EE4(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1000B15F8(v8, v9);
  v10 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v10;
  swift_bridgeObjectRelease();
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = (uint64_t)a2 + v11;
  v14 = type metadata accessor for Date(0);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40);
  v15(v12, v13, v14);
  v15(a1 + a3[7], (uint64_t)a2 + a3[7], v14);
  v16 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *(_BYTE *)(a1 + v16) = *((_BYTE *)a2 + v16);
  v17 = a3[10];
  v18 = a1 + v17;
  v19 = (uint64_t)a2 + v17;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + v17));
  v20 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v20;
  *(_QWORD *)(v18 + 32) = *(_QWORD *)(v19 + 32);
  return a1;
}

uint64_t sub_100634FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100634FD8);
}

uint64_t sub_100634FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100098778();
    return _s7Weather24LocationCompositionStateOwet_0(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_100635048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100635054);
}

uint64_t sub_100635054(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = sub_100098778();
    return _s7Weather24LocationCompositionStateOwst_0(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for CalendarHeaderView(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF94B8;
  if (!qword_100BF94B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CalendarHeaderView);
  return result;
}

uint64_t sub_1006350F4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  v4[0] = "\t";
  v4[1] = &unk_1009B9E60;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    v6 = v5;
    v7 = &unk_1009B9E78;
    v8 = &unk_1009B9E78;
    v9 = &unk_1009B9E90;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100635188(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABBCD8, 1);
}

uint64_t sub_100635198@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  v3 = sub_1000BA294(&qword_100BF9508);
  return sub_1006351DC(v1, (char *)(a1 + *(int *)(v3 + 36)));
}

uint64_t sub_1006351DC@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t KeyPath;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t OpaqueTypeConformance2;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(char *, char *, uint64_t);
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  void (*v122)(char *, uint64_t);
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(char *, char *, uint64_t);
  unint64_t v137;
  void (*v138)(char *, uint64_t);
  void (*v139)(char *, char *, uint64_t);
  unint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  _QWORD v161[2];
  _QWORD v162[17];
  _BYTE v163[7];
  char v164;
  _BYTE v165[7];
  char v166;
  _BYTE v167[7];
  _BYTE v168[7];
  char v169;
  _QWORD __dst[17];

  v152 = a2;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v145 = *(_QWORD *)(v3 - 8);
  v146 = v3;
  __chkstk_darwin(v3);
  v143 = (char *)&v124 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Font.TextStyle(0);
  v128 = *(_QWORD *)(v5 - 8);
  v129 = v5;
  __chkstk_darwin(v5);
  v127 = (char *)&v124 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BF9510);
  v8 = *(_QWORD *)(v7 - 8);
  v147 = v7;
  v148 = v8;
  __chkstk_darwin(v7);
  v142 = (char *)&v124 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = sub_1000BA294(&qword_100BF9518);
  __chkstk_darwin(v149);
  v144 = (char *)&v124 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v155 = (uint64_t)&v124 - v12;
  __chkstk_darwin(v13);
  v160 = (uint64_t)&v124 - v14;
  v15 = type metadata accessor for CalendarHeaderView(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = v15;
  v141 = v15;
  v18 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v15);
  v19 = (char *)&v124 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = v19;
  v154 = sub_1000BA294(&qword_100BF9520);
  v20 = *(_QWORD *)(v154 - 8);
  __chkstk_darwin(v154);
  v22 = (char *)&v124 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = sub_1000BA294(&qword_100BF9528);
  __chkstk_darwin(v153);
  v24 = (char *)&v124 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_1000BA294(&qword_100BF9530);
  v26 = *(_QWORD *)(v25 - 8);
  v156 = v25;
  v157 = v26;
  __chkstk_darwin(v25);
  v151 = (char *)&v124 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v150 = (char *)&v124 - v29;
  __chkstk_darwin(v30);
  v158 = (char *)&v124 - v31;
  __chkstk_darwin(v32);
  v159 = (char *)&v124 - v33;
  sub_100635DF4(a1, (uint64_t)v19);
  v34 = *(unsigned __int8 *)(v16 + 80);
  v134 = ((v34 + 16) & ~v34) + v18;
  v135 = (v34 + 16) & ~v34;
  v35 = v135;
  v133 = v34 | 7;
  v36 = swift_allocObject(&unk_100B85FE8, v134, v34 | 7);
  sub_100635E3C((uint64_t)v19, v36 + v35);
  v140 = sub_100635E8C();
  Button.init(action:label:)(sub_100635E80, v36, sub_100635C24, 0, &type metadata for ButtonImage, v140);
  v37 = *(int *)(v17 + 32);
  LOBYTE(v17) = *(_BYTE *)(a1 + v37);
  KeyPath = swift_getKeyPath(&unk_1009B9EF8);
  v39 = swift_allocObject(&unk_100B86010, 17, 7);
  *(_BYTE *)(v39 + 16) = v17;
  v139 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  v132 = v22;
  v40 = v154;
  v139(v24, v22, v154);
  v41 = v153;
  v42 = (uint64_t *)&v24[*(int *)(v153 + 36)];
  *v42 = KeyPath;
  v42[1] = (uint64_t)sub_1001545E8;
  v42[2] = v39;
  v138 = *(void (**)(char *, uint64_t))(v20 + 8);
  v138(v22, v40);
  v43 = *(unsigned __int8 *)(a1 + v37);
  v44 = *(_QWORD *)a1;
  LOBYTE(v20) = *(_BYTE *)(a1 + 8);
  sub_10008D47C(*(_QWORD *)a1, v20);
  sub_100109B54();
  LOBYTE(v37) = v45;
  sub_1000B15F8(v44, v20);
  v137 = sub_100636140();
  v46 = v158;
  v130 = v24;
  View.isHidden(_:defaultAccessibilityHidden:)(v43, v37 & 1, v41, v137);
  sub_100021AA4((uint64_t)v24, &qword_100BF9528);
  v136 = *(void (**)(char *, char *, uint64_t))(v157 + 32);
  v136(v159, v46, v156);
  v125 = a1;
  v47 = *(_QWORD *)(a1 + 24);
  __dst[0] = *(_QWORD *)(a1 + 16);
  __dst[1] = v47;
  v48 = sub_100114EF8();
  v126 = v48;
  swift_bridgeObjectRetain();
  v49 = Text.init<A>(_:)(__dst, &type metadata for String, v48);
  v51 = v50;
  v53 = v52;
  v55 = v54 & 1;
  v57 = v127;
  v56 = v128;
  v58 = v129;
  v59 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v128 + 104))(v127, enum case for Font.TextStyle.body(_:), v129);
  static Font.Weight.semibold.getter(v59);
  v60 = static Font.system(_:weight:)(v57);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v58);
  v61 = Text.font(_:)(v60, v49, v51, v55, v53);
  v63 = v62;
  LOBYTE(v57) = v64;
  v66 = v65;
  swift_release();
  v67 = v57 & 1;
  sub_1000D31B4(v49, v51, v55);
  v68 = swift_bridgeObjectRelease();
  v69 = static Color.primary.getter(v68);
  v70 = Text.foregroundColor(_:)(v69, v61, v63, v67, v66);
  v72 = v71;
  LOBYTE(v53) = v73;
  v75 = v74;
  swift_release();
  sub_1000D31B4(v61, v63, v67);
  swift_bridgeObjectRelease();
  LOBYTE(v49) = static Edge.Set.horizontal.getter(v76);
  v77 = EdgeInsets.init(_all:)(10.0);
  v79 = v78;
  v81 = v80;
  v83 = v82;
  v84 = swift_getKeyPath(&unk_1009B9F28);
  v169 = v53 & 1;
  v166 = 0;
  v164 = 0;
  v162[0] = v70;
  v162[1] = v72;
  LOBYTE(v162[2]) = v53 & 1;
  *(_DWORD *)((char *)&v162[2] + 1) = *(_DWORD *)v168;
  HIDWORD(v162[2]) = *(_DWORD *)&v168[3];
  v162[3] = v75;
  LOBYTE(v162[4]) = v49;
  *(_DWORD *)((char *)&v162[4] + 1) = *(_DWORD *)v167;
  HIDWORD(v162[4]) = *(_DWORD *)&v167[3];
  *(double *)&v162[5] = v77;
  v162[6] = v79;
  v162[7] = v81;
  v162[8] = v83;
  LOBYTE(v162[9]) = 0;
  *(_DWORD *)((char *)&v162[9] + 1) = *(_DWORD *)v165;
  HIDWORD(v162[9]) = *(_DWORD *)&v165[3];
  v162[10] = 0xBFF0000000000000;
  v162[11] = v84;
  v162[12] = 1;
  LOBYTE(v162[13]) = 0;
  *(_DWORD *)((char *)&v162[13] + 1) = *(_DWORD *)v163;
  HIDWORD(v162[13]) = *(_DWORD *)&v163[3];
  v162[14] = 5;
  LOBYTE(v162[15]) = 0;
  v85 = v143;
  static AccessibilityChildBehavior.ignore.getter(v84);
  v86 = sub_1000BA294(&qword_100BF9550);
  v87 = sub_1006361E4();
  v88 = v142;
  View.accessibilityElement(children:)(v85, v86, v87);
  (*(void (**)(char *, uint64_t))(v145 + 8))(v85, v146);
  memcpy(__dst, v162, 0x79uLL);
  sub_100636394((uint64_t)__dst);
  v89 = v125;
  v90 = *(_QWORD *)(v125 + 24);
  v162[0] = *(_QWORD *)(v125 + 16);
  v162[1] = v90;
  v161[0] = v86;
  v161[1] = v87;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v161, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v92 = (uint64_t)v144;
  v93 = v147;
  View.accessibilityValue<A>(_:)(v162, v147, &type metadata for String, OpaqueTypeConformance2, v126);
  (*(void (**)(char *, uint64_t))(v148 + 8))(v88, v93);
  v94 = (uint64_t)v131;
  sub_100635DF4(v89, (uint64_t)v131);
  v96 = v133;
  v95 = v134;
  v97 = swift_allocObject(&unk_100B86038, v134, v133);
  v98 = v135;
  sub_100635E3C(v94, v97 + v135);
  v99 = v155;
  ModifiedContent<>.accessibilityAdjustableAction(_:)(sub_1006363E8, v97, v149);
  swift_release();
  sub_100021AA4(v92, &qword_100BF9518);
  sub_100636414(v99, v160);
  sub_100635DF4(v89, v94);
  v100 = swift_allocObject(&unk_100B86060, v95, v96);
  sub_100635E3C(v94, v100 + v98);
  v101 = v132;
  Button.init(action:label:)(sub_100636460, v100, sub_100635DC8, 0, &type metadata for ButtonImage, v140);
  v102 = *(int *)(v141 + 36);
  LOBYTE(v94) = *(_BYTE *)(v89 + v102);
  v103 = swift_getKeyPath(&unk_1009B9EF8);
  v104 = swift_allocObject(&unk_100B86088, 17, 7);
  *(_BYTE *)(v104 + 16) = v94;
  v105 = (uint64_t)v130;
  v106 = v154;
  v139(v130, v101, v154);
  v107 = v153;
  v108 = (uint64_t *)(v105 + *(int *)(v153 + 36));
  *v108 = v103;
  v108[1] = (uint64_t)sub_1002A5A90;
  v108[2] = v104;
  v138(v101, v106);
  v109 = *(unsigned __int8 *)(v89 + v102);
  v110 = *(_QWORD *)v89;
  LOBYTE(v102) = *(_BYTE *)(v89 + 8);
  sub_10008D47C(*(_QWORD *)v89, v102);
  sub_100109B54();
  LOBYTE(v106) = v111;
  sub_1000B15F8(v110, v102);
  v112 = v150;
  View.isHidden(_:defaultAccessibilityHidden:)(v109, v106 & 1, v107, v137);
  sub_100021AA4(v105, &qword_100BF9528);
  v113 = v158;
  v114 = v112;
  v115 = v156;
  v136(v158, v112, v156);
  v116 = v157;
  v117 = *(void (**)(char *, char *, uint64_t))(v157 + 16);
  v117(v112, v159, v115);
  v118 = v155;
  sub_10007EBC8(v160, v155, &qword_100BF9518);
  v119 = v151;
  v117(v151, v113, v115);
  v120 = v152;
  v117(v152, v114, v115);
  v121 = sub_1000BA294(&qword_100BF9588);
  sub_10007EBC8(v118, (uint64_t)&v120[*(int *)(v121 + 48)], &qword_100BF9518);
  v117(&v120[*(int *)(v121 + 64)], v119, v115);
  v122 = *(void (**)(char *, uint64_t))(v116 + 8);
  v122(v158, v115);
  sub_100021AA4(v160, &qword_100BF9518);
  v122(v159, v115);
  v122(v119, v115);
  sub_100021AA4(v118, &qword_100BF9518);
  return ((uint64_t (*)(char *, uint64_t))v122)(v114, v115);
}

void sub_100635BD8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CalendarHeaderView(0);
  sub_1000DB418((_QWORD *)(a1 + *(int *)(v2 + 40)), *(_QWORD *)(a1 + *(int *)(v2 + 40) + 24));
  sub_10082F0C0(a1 + *(int *)(v2 + 24));
}

void sub_100635C24(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x8000000100A0E770;
}

void sub_100635C44(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = type metadata accessor for AccessibilityAdjustmentDirection(0, a3);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v9, a1, v5, v7);
  v10 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v9, v5);
  if (v10 == enum case for AccessibilityAdjustmentDirection.increment(_:))
  {
    v11 = type metadata accessor for CalendarHeaderView(0);
    if ((*(_BYTE *)(a2 + *(int *)(v11 + 36)) & 1) != 0)
      return;
    v12 = v11;
    sub_1000DB418((_QWORD *)(a2 + *(int *)(v11 + 40)), *(_QWORD *)(a2 + *(int *)(v11 + 40) + 24));
    v13 = *(int *)(v12 + 28);
LABEL_7:
    sub_10082F0C0(a2 + v13);
    return;
  }
  if (v10 == enum case for AccessibilityAdjustmentDirection.decrement(_:))
  {
    v14 = type metadata accessor for CalendarHeaderView(0);
    if ((*(_BYTE *)(a2 + *(int *)(v14 + 32)) & 1) != 0)
      return;
    v15 = v14;
    sub_1000DB418((_QWORD *)(a2 + *(int *)(v14 + 40)), *(_QWORD *)(a2 + *(int *)(v14 + 40) + 24));
    v13 = *(int *)(v15 + 24);
    goto LABEL_7;
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

void sub_100635D7C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CalendarHeaderView(0);
  sub_1000DB418((_QWORD *)(a1 + *(int *)(v2 + 40)), *(_QWORD *)(a1 + *(int *)(v2 + 40) + 24));
  sub_10082F0C0(a1 + *(int *)(v2 + 28));
}

void sub_100635DC8(_QWORD *a1@<X8>)
{
  *a1 = 0x2E6E6F7276656863;
  a1[1] = 0xEF64726177726F66;
}

uint64_t sub_100635DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CalendarHeaderView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100635E3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CalendarHeaderView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100635E80()
{
  return sub_10063646C((uint64_t (*)(uint64_t))sub_100635BD8);
}

unint64_t sub_100635E8C()
{
  unint64_t result;

  result = qword_100BF9538;
  if (!qword_100BF9538)
  {
    result = swift_getWitnessTable(&unk_1009B9F64, &type metadata for ButtonImage);
    atomic_store(result, (unint64_t *)&qword_100BF9538);
  }
  return result;
}

double sub_100635EC8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  uint64_t v25;
  uint64_t v26;

  v26 = sub_1000BA294(&qword_100BCF148);
  __chkstk_darwin(v26);
  v7 = (uint64_t *)((char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for Image.Scale(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Font.TextStyle(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  v25 = Image.init(systemName:)(a1, a2);
  v16 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for Font.TextStyle.body(_:), v12);
  static Font.Weight.semibold.getter(v16);
  v17 = static Font.system(_:weight:)(v15);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  KeyPath = swift_getKeyPath(&unk_1009B9FB8);
  v20 = static Color.secondary.getter(v19);
  v21 = swift_getKeyPath(&unk_1009B9FE8);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for Image.Scale.small(_:), v8);
  v22 = swift_getKeyPath(&unk_1009BA018);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))((char *)v7 + *(int *)(v26 + 28), v11, v8);
  *v7 = v22;
  v23 = sub_1000BA294(&qword_100BF9598);
  sub_10007EBC8((uint64_t)v7, (uint64_t)a3 + *(int *)(v23 + 36), &qword_100BCF148);
  *a3 = v25;
  a3[1] = KeyPath;
  a3[2] = v17;
  a3[3] = v21;
  a3[4] = v20;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100021AA4((uint64_t)v7, &qword_100BCF148);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

double sub_10063612C@<D0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return sub_100635EC8(*v1, v1[1], a1);
}

unint64_t sub_100636140()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF9540;
  if (!qword_100BF9540)
  {
    v1 = sub_100075EB0(&qword_100BF9528);
    sub_10003D310(&qword_100BF9548, &qword_100BF9520, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_10003D310(&qword_100BC6718, &qword_100BC6720, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF9540);
  }
  return result;
}

unint64_t sub_1006361E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF9558;
  if (!qword_100BF9558)
  {
    v1 = sub_100075EB0(&qword_100BF9550);
    sub_100636250();
    sub_100636358();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF9558);
  }
  return result;
}

unint64_t sub_100636250()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF9560;
  if (!qword_100BF9560)
  {
    v1 = sub_100075EB0(&qword_100BF9568);
    sub_1006362D4();
    sub_10003D310(&qword_100BCD8A0, &qword_100BCD8A8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF9560);
  }
  return result;
}

unint64_t sub_1006362D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF9570;
  if (!qword_100BF9570)
  {
    v1 = sub_100075EB0(&qword_100BF9578);
    sub_1002724C8();
    sub_10003D310(&qword_100BC42A8, &qword_100BC42B0, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF9570);
  }
  return result;
}

unint64_t sub_100636358()
{
  unint64_t result;

  result = qword_100BF9580;
  if (!qword_100BF9580)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _GridCellSizeModifier, &type metadata for _GridCellSizeModifier);
    atomic_store(result, (unint64_t *)&qword_100BF9580);
  }
  return result;
}

uint64_t sub_100636394(uint64_t a1)
{
  sub_1000D31B4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

void sub_1006363E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  __n128 v4;

  sub_1000C3E04();
  sub_1000BA550();
  sub_100635C44(a1, v1 + v3, v4);
}

uint64_t sub_100636414(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BF9518);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100636460()
{
  return sub_10063646C((uint64_t (*)(uint64_t))sub_100635D7C);
}

uint64_t sub_10063646C(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  sub_1000C3E04();
  sub_1000BA550();
  return a1(v1 + v2);
}

ValueMetadata *type metadata accessor for ButtonImage()
{
  return &type metadata for ButtonImage;
}

void sub_1006364AC()
{
  sub_10003D310(&qword_100BF9590, &qword_100BF9508, (uint64_t)&protocol conformance descriptor for GridRow<A>);
}

uint64_t sub_1006364D8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABBD00, 1);
}

unint64_t sub_100636504()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF95A0;
  if (!qword_100BF95A0)
  {
    v1 = sub_100075EB0(&qword_100BF9598);
    sub_1001A85D8();
    sub_10003D310((unint64_t *)&unk_100C0A520, &qword_100BCF148, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF95A0);
  }
  return result;
}

uint64_t sub_100636588(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v2 = sub_1000BA294(&qword_100BF95B0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[3];
  v7 = a1[4];
  sub_1000DB418(a1, v6);
  v8 = sub_100636810();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for UnitsConfigurationViewState.CodingKeys, &type metadata for UnitsConfigurationViewState.CodingKeys, v8, v6, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_10063664C(_QWORD *a1)
{
  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
}

uint64_t sub_100636670(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100636810();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100636698(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100636810();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006366C0(_QWORD *a1)
{
  return sub_10063664C(a1);
}

uint64_t sub_1006366D4(_QWORD *a1)
{
  return sub_100636588(a1);
}

void sub_1006366E8()
{
  LocationSearchEntityFromStringResolver.init()();
}

void sub_1006366FC()
{
  sub_1006366E8();
}

uint64_t sub_100636710@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  a1[3] = sub_1000BA294(&qword_100BF95C0);
  a1[4] = sub_10063684C();
  sub_10005F164(a1);
  return ShortDescription.init(name:_:)(0xD00000000000001BLL, 0x80000001009BA150, v2, &type metadata for UnitsConfigurationViewState);
}

uint64_t sub_1006367A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100636890();
  return ShortDescribable.description.getter(a1, v2);
}

unint64_t sub_1006367D4()
{
  unint64_t result;

  result = qword_100BF95A8;
  if (!qword_100BF95A8)
  {
    result = swift_getWitnessTable(&unk_1009BA050, &type metadata for UnitsConfigurationViewState);
    atomic_store(result, (unint64_t *)&qword_100BF95A8);
  }
  return result;
}

unint64_t sub_100636810()
{
  unint64_t result;

  result = qword_100BF95B8;
  if (!qword_100BF95B8)
  {
    result = swift_getWitnessTable(&unk_1009BA1F0, &type metadata for UnitsConfigurationViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF95B8);
  }
  return result;
}

unint64_t sub_10063684C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF95C8;
  if (!qword_100BF95C8)
  {
    v1 = sub_100075EB0(&qword_100BF95C0);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF95C8);
  }
  return result;
}

unint64_t sub_100636890()
{
  unint64_t result;

  result = qword_100BF95D0;
  if (!qword_100BF95D0)
  {
    result = swift_getWitnessTable(&unk_1009BA078, &type metadata for UnitsConfigurationViewState);
    atomic_store(result, (unint64_t *)&qword_100BF95D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for UnitsConfigurationViewState.CodingKeys()
{
  return &type metadata for UnitsConfigurationViewState.CodingKeys;
}

ValueMetadata *type metadata accessor for UnitsConfigurationViewState()
{
  return &type metadata for UnitsConfigurationViewState;
}

unint64_t sub_1006368F0()
{
  unint64_t result;

  result = qword_100BF95D8;
  if (!qword_100BF95D8)
  {
    result = swift_getWitnessTable(&unk_1009BA1A0, &type metadata for UnitsConfigurationViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF95D8);
  }
  return result;
}

unint64_t sub_100636930()
{
  unint64_t result;

  result = qword_100BF95E0;
  if (!qword_100BF95E0)
  {
    result = swift_getWitnessTable(&unk_1009BA1C8, &type metadata for UnitsConfigurationViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF95E0);
  }
  return result;
}

uint64_t *sub_10063696C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v34 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v34 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for PressureTrend(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for PressureComponentViewModel(0);
    v9 = v8[5];
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v13 = *v11;
    v12 = v11[1];
    *v10 = v13;
    v10[1] = v12;
    v14 = v8[6];
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = v8[7];
    v19 = (uint64_t *)((char *)a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    *(uint64_t *)((char *)a1 + v8[8]) = *(uint64_t *)((char *)a2 + v8[8]);
    v22 = v8[9];
    v23 = (uint64_t *)((char *)a1 + v22);
    v24 = (uint64_t *)((char *)a2 + v22);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = *(int *)(a3 + 20);
    v27 = (uint64_t *)((char *)a1 + v26);
    v28 = (uint64_t *)((char *)a2 + v26);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v28) == 1)
    {
      v30 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
      v31 = v27;
      v32 = v29;
      v33 = 1;
    }
    else
    {
      *v27 = *v28;
      swift_retain();
      v31 = v27;
      v32 = v29;
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v31, v32, v33);
  }
  return a1;
}

double sub_100636AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v4 = type metadata accessor for PressureTrend(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  type metadata accessor for PressureComponentViewModel(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = a1 + *(int *)(a2 + 20);
  sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v5) == 1)
  {
    v6 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

uint64_t sub_100636BD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = type metadata accessor for PressureTrend(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for PressureComponentViewModel(0);
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  v13 = v7[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = v7[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  *(_QWORD *)(a1 + v7[8]) = *(_QWORD *)(a2 + v7[8]);
  v21 = v7[9];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = *(int *)(a3 + 20);
  v26 = (_QWORD *)(a1 + v25);
  v27 = (_QWORD *)(a2 + v25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v28 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v27) == 1)
  {
    v29 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v27, v29);
    v30 = 1;
  }
  else
  {
    *v26 = *v27;
    swift_retain();
    v30 = 0;
  }
  swift_storeEnumTagMultiPayload(v26, v28, v30);
  return a1;
}

uint64_t sub_100636D24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for PressureTrend(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for PressureComponentViewModel(0);
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = v7[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = v7[7];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[8]) = *(_QWORD *)(a2 + v7[8]);
  v17 = v7[9];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  *v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v20 = *(int *)(a3 + 20);
    v21 = (_QWORD *)(a1 + v20);
    v22 = (_QWORD *)(a2 + v20);
    sub_100021A14(a1 + v20, &qword_100BC37D8);
    v23 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v22) == 1)
    {
      v24 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v21, v22, v24);
      v25 = 1;
    }
    else
    {
      *v21 = *v22;
      swift_retain();
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v21, v23, v25);
  }
  return a1;
}

uint64_t sub_100636ED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for PressureTrend(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for PressureComponentViewModel(0);
  *(_OWORD *)(a1 + v7[5]) = *(_OWORD *)(a2 + v7[5]);
  *(_OWORD *)(a1 + v7[6]) = *(_OWORD *)(a2 + v7[6]);
  *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
  *(_QWORD *)(a1 + v7[8]) = *(_QWORD *)(a2 + v7[8]);
  *(_OWORD *)(a1 + v7[9]) = *(_OWORD *)(a2 + v7[9]);
  v8 = *(int *)(a3 + 20);
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v10) == 1)
  {
    v12 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100636FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;

  v6 = type metadata accessor for PressureTrend(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for PressureComponentViewModel(0);
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  v13 = v7[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  v18 = v7[7];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[8]) = *(_QWORD *)(a2 + v7[8]);
  v23 = v7[9];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v27 = *v25;
  v26 = v25[1];
  *v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v28 = *(int *)(a3 + 20);
    v29 = (void *)(a1 + v28);
    v30 = (const void *)(a2 + v28);
    sub_100021A14(a1 + v28, &qword_100BC37D8);
    v31 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v30) == 1)
    {
      v32 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v29, v30, v32);
      swift_storeEnumTagMultiPayload(v29, v31, 1);
    }
    else
    {
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100637144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100637150);
}

uint64_t sub_100637150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1000BB2A8();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = v4;
  }
  else
  {
    v7 = sub_1000BA294((uint64_t *)&unk_100C09CA0);
    v8 = v4 + *(int *)(a3 + 20);
  }
  return sub_1000B250C(v8, v3, v7);
}

uint64_t sub_1006371A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006371B4);
}

uint64_t sub_1006371B4()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000BB2A8();
  sub_10009D2E8();
  if (!v0)
    sub_1000BA294((uint64_t *)&unk_100C09CA0);
  sub_100098D08();
  return sub_1000987C4(v1, v2, v3, v4);
}

uint64_t sub_100637208(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABBDF0, 1);
}

void sub_100637218(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t OpaqueTypeConformance2;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;

  v3 = v1;
  v40 = a1;
  v39 = type metadata accessor for AutomationInfo(0);
  sub_10009D98C();
  __chkstk_darwin(v4);
  sub_100079FBC();
  v5 = type metadata accessor for AccessibilityChildBehavior(0);
  v36 = *(_QWORD *)(v5 - 8);
  v37 = v5;
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_100098728();
  v9 = v8 - v7;
  v10 = sub_1000BA294(&qword_100BF9678);
  sub_10009D98C();
  __chkstk_darwin(v11);
  sub_100098728();
  v14 = v13 - v12;
  v15 = sub_1000BA294(&qword_100BF9680);
  v35 = *(_QWORD *)(v15 - 8);
  sub_10009D98C();
  __chkstk_darwin(v16);
  sub_100098728();
  v19 = v18 - v17;
  v38 = sub_1000BA294(&qword_100BD9A88);
  sub_10009D98C();
  __chkstk_darwin(v20);
  v22 = (char *)v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)v34 - v24;
  sub_1006374B8(v3, v14);
  static AccessibilityChildBehavior.ignore.getter(v26);
  v27 = sub_10063D0C8((uint64_t)&unk_100BF9688);
  View.accessibilityElement(children:)(v9, v10, v27);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v9, v37);
  sub_100021A14(v14, &qword_100BF9678);
  v41 = v10;
  v42 = v27;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v41, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibilityRespondsToUserInteraction(_:)(1, v15, OpaqueTypeConformance2);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v19, v15);
  v29 = (uint64_t *)(v34[1] + *(int *)(sub_1000C3E0C() + 36));
  v31 = *v29;
  v30 = v29[1];
  v41 = v31;
  v42 = v30;
  v32 = sub_100114EF8();
  ModifiedContent<>.accessibilityLabel<A>(_:)(&v41, v38, &type metadata for String, v32);
  sub_100021A14((uint64_t)v22, &qword_100BD9A88);
  v33 = type metadata accessor for AutomationCellInfo(0);
  swift_storeEnumTagMultiPayload(v2, v33, 14);
  swift_storeEnumTagMultiPayload(v2, v39, 1);
  sub_1003354E8();
  sub_1000215BC(v2, type metadata accessor for AutomationInfo);
  sub_100021A14((uint64_t)v25, &qword_100BD9A88);
}

void sub_1006374B8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  void (*v27)(char *, uint64_t);
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v46 = a2;
  v43 = type metadata accessor for PressureComponentContentView(0);
  __chkstk_darwin(v43);
  v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v43 - v6;
  v44 = sub_1000BA294(&qword_100BF96B0);
  __chkstk_darwin(v44);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for SimplePressureComponentContentView(0);
  __chkstk_darwin(v45);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ContentSizeCategory(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v43 - v17;
  type metadata accessor for PressureComponentView(0);
  v19 = a1;
  sub_100109D64();
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v18, v12);
  v20 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v15, v12);
  if (v20 == enum case for ContentSizeCategory.extraSmall(_:)
    || v20 == enum case for ContentSizeCategory.small(_:)
    || v20 == enum case for ContentSizeCategory.medium(_:)
    || v20 == enum case for ContentSizeCategory.large(_:)
    || v20 == enum case for ContentSizeCategory.extraLarge(_:)
    || v20 == enum case for ContentSizeCategory.extraExtraLarge(_:)
    || v20 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
LABEL_37:
    sub_100080C0C(v19, (uint64_t)v4, type metadata accessor for PressureComponentViewModel);
    v37 = v43;
    v38 = &v4[*(int *)(v43 + 20)];
    *(_QWORD *)v38 = swift_getKeyPath(&unk_1009BA2B8);
    v38[8] = 0;
    v39 = &v4[*(int *)(v37 + 24)];
    *(_QWORD *)v39 = swift_getKeyPath(&unk_1009BA2E0);
    v39[8] = 0;
    v32 = type metadata accessor for PressureComponentContentView;
    sub_10007802C((uint64_t)v4, (uint64_t)v7, type metadata accessor for PressureComponentContentView);
    sub_100080C0C((uint64_t)v7, (uint64_t)v9, type metadata accessor for PressureComponentContentView);
    swift_storeEnumTagMultiPayload(v9, v44, 1);
    sub_10007A100((uint64_t)&unk_100BF96A0);
    v41 = v40;
    sub_10007A100((uint64_t)&unk_100BF96A8);
    _ConditionalContent<>.init(storage:)(v9, v45, v37, v41, v42);
    v36 = (uint64_t)v7;
    goto LABEL_38;
  }
  v27 = *(void (**)(char *, uint64_t))(v13 + 8);
  if (v20 != enum case for ContentSizeCategory.accessibilityMedium(_:)
    && v20 != enum case for ContentSizeCategory.accessibilityLarge(_:)
    && v20 != enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
    && v20 != enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
    && v20 != enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
  {
    v27(v15, v12);
    v27(v18, v12);
    goto LABEL_37;
  }
  v27(v18, v12);
  sub_100080C0C(v19, (uint64_t)v11, type metadata accessor for PressureComponentViewModel);
  v32 = type metadata accessor for SimplePressureComponentContentView;
  sub_100080C0C((uint64_t)v11, (uint64_t)v9, type metadata accessor for SimplePressureComponentContentView);
  swift_storeEnumTagMultiPayload(v9, v44, 0);
  sub_10007A100((uint64_t)&unk_100BF96A0);
  v34 = v33;
  sub_10007A100((uint64_t)&unk_100BF96A8);
  _ConditionalContent<>.init(storage:)(v9, v45, v43, v34, v35);
  v36 = (uint64_t)v11;
LABEL_38:
  sub_1000215BC(v36, v32);
}

unint64_t sub_1006378D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF9690;
  if (!qword_100BF9690)
  {
    v1 = sub_100075EB0(&qword_100BF9698);
    sub_10007A100((uint64_t)&unk_100BF96A0);
    sub_10007A100((uint64_t)&unk_100BF96A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF9690);
  }
  return result;
}

uint64_t type metadata accessor for SimplePressureComponentContentView(uint64_t a1)
{
  return sub_100098190(a1, qword_100BF97A8, (uint64_t)&nominal type descriptor for SimplePressureComponentContentView);
}

uint64_t type metadata accessor for PressureComponentContentView(uint64_t a1)
{
  return sub_100098190(a1, qword_100BF9710, (uint64_t)&nominal type descriptor for PressureComponentContentView);
}

void sub_100637994(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  *a2 = static Alignment.center.getter(a1);
  a2[1] = v4;
  v5 = sub_1000BA294(&qword_100BF9838);
  sub_1006379D4(v2, (uint64_t)a2 + *(int *)(v5 + 44));
}

void sub_1006379D4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t *v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unsigned int v58;
  __n128 v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  int v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v100 = a2;
  v3 = sub_1000BA294(&qword_100BF9840);
  __chkstk_darwin(v3);
  v101 = (uint64_t)&v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v98 = (uint64_t *)((char *)&v88 - v6);
  v7 = sub_1000BA294(&qword_100BF9848);
  __chkstk_darwin(v7);
  v99 = (uint64_t)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v97 = (uint64_t *)((char *)&v88 - v10);
  v11 = sub_1000BA294(&qword_100BF9850);
  __chkstk_darwin(v11);
  v13 = (char *)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_1000BA294(&qword_100BF9858);
  __chkstk_darwin(v90);
  v15 = (char *)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000BA294(&qword_100BF9860);
  __chkstk_darwin(v16);
  v18 = (uint64_t *)((char *)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = sub_1000BA294(&qword_100BF9868);
  __chkstk_darwin(v19);
  v21 = (char *)&v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_1000BA294(&qword_100BF9870);
  __chkstk_darwin(v89);
  v23 = (char *)&v88 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_1000BA294(&qword_100BF9878);
  __chkstk_darwin(v92);
  v25 = (char *)&v88 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_1000BA294(&qword_100BF9880);
  __chkstk_darwin(v93);
  v95 = (uint64_t)&v88 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v91 = (uint64_t)&v88 - v28;
  __chkstk_darwin(v29);
  v94 = (uint64_t)&v88 - v30;
  *v18 = static Alignment.top.getter(v31);
  v18[1] = v32;
  v33 = sub_1000BA294(&qword_100BF9888);
  sub_100638084(a1, (uint64_t)v18 + *(int *)(v33 + 44));
  v35 = static Alignment.center.getter(v34);
  v37 = v36;
  v38 = (uint64_t)&v21[*(int *)(v19 + 36)];
  *(_QWORD *)v13 = static HorizontalAlignment.center.getter(v35);
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 1;
  v39 = sub_1000BA294(&qword_100BF9890);
  sub_100639854((uint64_t)&v13[*(int *)(v39 + 44)]);
  v40 = type metadata accessor for PressureComponentViewModel(0);
  v41 = *(int *)(v40 + 32);
  v96 = (char *)a1;
  v42 = *(double *)(a1 + v41) * 0.0174532925;
  v43 = static UnitPoint.center.getter(v40);
  v45 = v44;
  sub_100037768((uint64_t)v13, (uint64_t)v15, &qword_100BF9850);
  v46 = &v15[*(int *)(v90 + 36)];
  *(double *)v46 = v42;
  *((double *)v46 + 1) = v43;
  *((_QWORD *)v46 + 2) = v45;
  sub_100021A14((uint64_t)v13, &qword_100BF9850);
  sub_1000787D4((uint64_t)v15, v38, &qword_100BF9858);
  v47 = (uint64_t *)(v38 + *(int *)(sub_1000BA294(&qword_100BF9898) + 36));
  *v47 = v35;
  v47[1] = v37;
  sub_1000787D4((uint64_t)v18, (uint64_t)v21, &qword_100BF9860);
  LOBYTE(v15) = static Edge.Set.top.getter(v48);
  v49 = EdgeInsets.init(_all:)(4.0);
  v51 = v50;
  v53 = v52;
  v55 = v54;
  sub_100037768((uint64_t)v21, (uint64_t)v23, &qword_100BF9868);
  v56 = &v23[*(int *)(v89 + 36)];
  *v56 = (char)v15;
  *((double *)v56 + 1) = v49;
  *((_QWORD *)v56 + 2) = v51;
  *((_QWORD *)v56 + 3) = v53;
  *((_QWORD *)v56 + 4) = v55;
  v56[40] = 0;
  sub_100021A14((uint64_t)v21, &qword_100BF9868);
  v58 = static Edge.Set.leading.getter(v57);
  v60 = static Edge.Set.trailing.getter(v59);
  v61 = Edge.Set.init(rawValue:)(0);
  v62 = Edge.Set.init(rawValue:)(v61);
  if (Edge.Set.init(rawValue:)(v62 & v58) != v58)
    v61 = Edge.Set.init(rawValue:)(v61 | v58);
  v63 = Edge.Set.init(rawValue:)(v61);
  if (Edge.Set.init(rawValue:)(v63 & v60) != v60)
    LOBYTE(v61) = Edge.Set.init(rawValue:)(v61 | v60);
  v64 = EdgeInsets.init(_all:)(8.0);
  v66 = v65;
  v68 = v67;
  v70 = v69;
  sub_100037768((uint64_t)v23, (uint64_t)v25, &qword_100BF9870);
  v71 = &v25[*(int *)(v92 + 36)];
  *v71 = v61;
  *((double *)v71 + 1) = v64;
  *((_QWORD *)v71 + 2) = v66;
  *((_QWORD *)v71 + 3) = v68;
  *((_QWORD *)v71 + 4) = v70;
  v71[40] = 0;
  sub_100021A14((uint64_t)v23, &qword_100BF9870);
  v72 = v91;
  sub_100037768((uint64_t)v25, v91, &qword_100BF9878);
  *(_QWORD *)(v72 + *(int *)(v93 + 36)) = 0xBFF0000000000000;
  sub_100021A14((uint64_t)v25, &qword_100BF9878);
  v73 = v94;
  sub_1000787D4(v72, v94, &qword_100BF9880);
  v75 = static HorizontalAlignment.center.getter(v74);
  v76 = (uint64_t)v97;
  *v97 = v75;
  *(_QWORD *)(v76 + 8) = 0;
  *(_BYTE *)(v76 + 16) = 1;
  v77 = sub_1000BA294(&qword_100BF98A0);
  v78 = v96;
  sub_1006382C8((uint64_t)v96, v76 + *(int *)(v77 + 44));
  v80 = static HorizontalAlignment.center.getter(v79);
  v81 = (uint64_t)v98;
  *v98 = v80;
  *(_QWORD *)(v81 + 8) = 0;
  *(_BYTE *)(v81 + 16) = 1;
  v82 = sub_1000BA294(&qword_100BF98A8);
  sub_100638EA4(v78, (_QWORD *)(v81 + *(int *)(v82 + 44)));
  v83 = v95;
  sub_100037768(v73, v95, &qword_100BF9880);
  v84 = v99;
  sub_100037768(v76, v99, &qword_100BF9848);
  v85 = v101;
  sub_100037768(v81, v101, &qword_100BF9840);
  v86 = v100;
  sub_100037768(v83, v100, &qword_100BF9880);
  v87 = sub_1000BA294(&qword_100BF98B0);
  sub_100037768(v84, v86 + *(int *)(v87 + 48), &qword_100BF9848);
  sub_100037768(v85, v86 + *(int *)(v87 + 64), &qword_100BF9840);
  sub_100021A14(v81, &qword_100BF9840);
  sub_100021A14(v76, &qword_100BF9848);
  sub_100021A14(v73, &qword_100BF9880);
  sub_100021A14(v85, &qword_100BF9840);
  sub_100021A14(v84, &qword_100BF9848);
  sub_100021A14(v83, &qword_100BF9880);
}

void sub_100638084(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for GradientArcView(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v9 = (char *)&v23 - v8;
  v10 = type metadata accessor for PressureComponentGaugeView(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v23 - v14;
  *(_QWORD *)v12 = swift_getKeyPath(&unk_1009BA2B8);
  v12[8] = 0;
  v16 = &v12[*(int *)(v10 + 20)];
  *(_QWORD *)v16 = swift_getKeyPath(&unk_1009BA4A0);
  v17 = sub_1000BA294(&qword_100BC68C8);
  swift_storeEnumTagMultiPayload(v16, v17, 0);
  sub_10007802C((uint64_t)v12, (uint64_t)v15, type metadata accessor for PressureComponentGaugeView);
  v18 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PressureComponentViewModel(0) + 32));
  v19 = (char *)v6 + *(int *)(v4 + 20);
  v20 = type metadata accessor for PressureTrend(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v19, a1, v20);
  *v6 = v18;
  v21 = (char *)v6 + *(int *)(v4 + 24);
  *(_QWORD *)v21 = swift_getKeyPath(&unk_1009BA2B8);
  v21[8] = 0;
  sub_10007802C((uint64_t)v6, (uint64_t)v9, type metadata accessor for GradientArcView);
  sub_100080C0C((uint64_t)v15, (uint64_t)v12, type metadata accessor for PressureComponentGaugeView);
  sub_100080C0C((uint64_t)v9, (uint64_t)v6, type metadata accessor for GradientArcView);
  sub_100080C0C((uint64_t)v12, a2, type metadata accessor for PressureComponentGaugeView);
  v22 = sub_1000BA294(&qword_100BF9988);
  sub_100080C0C((uint64_t)v6, a2 + *(int *)(v22 + 48), type metadata accessor for GradientArcView);
  sub_1000215BC((uint64_t)v9, type metadata accessor for GradientArcView);
  sub_1000215BC((uint64_t)v15, type metadata accessor for PressureComponentGaugeView);
  sub_1000215BC((uint64_t)v6, type metadata accessor for GradientArcView);
  sub_1000215BC((uint64_t)v12, type metadata accessor for PressureComponentGaugeView);
}

void sub_1006382C8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t (*v28)(char *);
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  char *v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t KeyPath;
  uint64_t v58;
  uint64_t (*v59)(char *);
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  char *v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  void (*v100)(uint64_t, uint64_t);
  char *v101;
  __n128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  __n128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  void (*v123)(char *, uint64_t);
  uint64_t (*v124)(char *);
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void (*v142)(uint64_t, uint64_t);
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;

  v137 = a2;
  v131 = sub_1000BA294(&qword_100BDD7C0);
  __chkstk_darwin(v131);
  v130 = (char *)&v117 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = sub_1000BA294(&qword_100BF9918);
  v134 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136);
  v132 = (char *)&v117 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = sub_1000BA294(&qword_100BF9920);
  __chkstk_darwin(v133);
  v145 = (uint64_t)&v117 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v147 = (uint64_t)&v117 - v7;
  v151 = type metadata accessor for TypesettingLanguageAwareLineHeightRatio(0);
  v144 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151);
  v149 = (char *)&v117 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for FontWithSmallVariantModifier(0);
  __chkstk_darwin(v139);
  v10 = (uint64_t *)((char *)&v117 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_1000BA294(&qword_100BCCDA8);
  __chkstk_darwin(v11);
  v135 = (uint64_t)&v117 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (uint64_t)&v117 - v14;
  v16 = type metadata accessor for Font.TextStyle(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v117 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_1000BA294(&qword_100BF9928);
  __chkstk_darwin(v121);
  v21 = (char *)&v117 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_1000BA294(&qword_100BF9930);
  v126 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127);
  v122 = (char *)&v117 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_1000BA294(&qword_100BF9938);
  __chkstk_darwin(v125);
  v150 = (uint64_t)&v117 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v146 = (uint64_t)&v117 - v25;
  v141 = a1;
  sub_10063ABC0(a1, (uint64_t)&v152);
  v26 = v152;
  v119 = BYTE1(v153);
  v27 = v153;
  LODWORD(v129) = enum case for Font.TextStyle.title3(_:);
  v28 = *(uint64_t (**)(char *))(v17 + 104);
  v29 = v28(v19);
  v124 = v28;
  static Font.Weight.bold.getter(v29);
  v118 = static Font.system(_:weight:)(v19);
  v30 = *(void (**)(char *, uint64_t))(v17 + 8);
  v30(v19, v16);
  v123 = v30;
  v128 = enum case for Font.TextStyle.body(_:);
  v120 = v16;
  v31 = v28(v19);
  static Font.Weight.bold.getter(v31);
  v117 = static Font.system(_:weight:)(v19);
  v30(v19, v16);
  v140 = a1 + *(int *)(type metadata accessor for PressureComponentContentView(0) + 20);
  v32 = *(_QWORD *)v140;
  LOBYTE(a1) = *(_BYTE *)(v140 + 8);
  sub_10008D47C(*(_QWORD *)v140, a1);
  sub_100109B54();
  LOBYTE(v30) = v33;
  sub_1000B15F8(v32, a1);
  v34 = enum case for Font.Leading.tight(_:);
  LODWORD(v143) = enum case for Font.Leading.tight(_:);
  v35 = type metadata accessor for Font.Leading(0);
  v142 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104);
  v36 = v34;
  v37 = v35;
  v138 = v35;
  v142(v15, v36);
  _s7Weather24LocationCompositionStateOwst_0(v15, 0, 1, v37);
  v38 = v139;
  v39 = (uint64_t)v10 + *(int *)(v139 + 24);
  v148 = v15;
  sub_100037768(v15, v39, &qword_100BCCDA8);
  v40 = v117;
  *v10 = v118;
  v10[1] = v40;
  *((_BYTE *)v10 + *(int *)(v38 + 28)) = v30 & 1;
  v41 = v121;
  sub_100080C0C((uint64_t)v10, (uint64_t)&v21[*(int *)(v121 + 36)], type metadata accessor for FontWithSmallVariantModifier);
  *(_QWORD *)v21 = v26;
  v21[8] = v27;
  v21[9] = v119;
  j__swift_retain(v26);
  sub_1000215BC((uint64_t)v10, type metadata accessor for FontWithSmallVariantModifier);
  sub_100021A14(v15, &qword_100BCCDA8);
  v42 = j__swift_release();
  v43 = v149;
  static TypesettingLanguageAwareLineHeightRatio.disable.getter(v42);
  v44 = sub_10063D02C();
  v45 = v122;
  View.typesettingLanguageAwareLineHeightRatio(_:isEnabled:)(v43, 1, v41, v44);
  v144 = *(_QWORD *)(v144 + 8);
  ((void (*)(char *, uint64_t))v144)(v43, v151);
  sub_100021A14((uint64_t)v21, &qword_100BF9928);
  v46 = v126;
  v47 = v150;
  v48 = v127;
  (*(void (**)(uint64_t, char *, uint64_t))(v126 + 16))(v150, v45, v127);
  *(_WORD *)(v47 + *(int *)(v125 + 36)) = 257;
  (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v48);
  sub_1000787D4(v47, v146, &qword_100BF9938);
  v127 = type metadata accessor for PressureComponentViewModel(0);
  v49 = (uint64_t *)(v141 + *(int *)(v127 + 24));
  v50 = v49[1];
  v152 = *v49;
  v153 = v50;
  v51 = sub_100114EF8();
  v126 = v51;
  swift_bridgeObjectRetain();
  v52 = Text.init<A>(_:)(&v152, &type metadata for String, v51);
  v54 = v53;
  v125 = v55;
  LOBYTE(v15) = v56 & 1;
  KeyPath = swift_getKeyPath(&unk_1009BA448);
  v58 = v120;
  v59 = v124;
  v60 = ((uint64_t (*)(char *, _QWORD, uint64_t))v124)(v19, v129, v120);
  static Font.Weight.bold.getter(v60);
  v129 = static Font.system(_:weight:)(v19);
  v61 = v123;
  v123(v19, v58);
  v62 = ((uint64_t (*)(char *, _QWORD, uint64_t))v59)(v19, v128, v58);
  static Font.Weight.bold.getter(v62);
  v63 = static Font.system(_:weight:)(v19);
  v61(v19, v58);
  v64 = *(_QWORD *)v140;
  LOBYTE(v58) = *(_BYTE *)(v140 + 8);
  sub_10008D47C(*(_QWORD *)v140, v58);
  sub_100109B54();
  LOBYTE(v59) = v65;
  sub_1000B15F8(v64, v58);
  v66 = v148;
  v67 = v138;
  ((void (*)(uint64_t, _QWORD, uint64_t))v142)(v148, v143, v138);
  _s7Weather24LocationCompositionStateOwst_0(v66, 0, 1, v67);
  v68 = v139;
  sub_100037768(v66, (uint64_t)v10 + *(int *)(v139 + 24), &qword_100BCCDA8);
  *v10 = v129;
  v10[1] = v63;
  *((_BYTE *)v10 + *(int *)(v68 + 28)) = v59 & 1;
  v69 = v131;
  v70 = (uint64_t)v130;
  sub_100080C0C((uint64_t)v10, (uint64_t)&v130[*(int *)(v131 + 36)], type metadata accessor for FontWithSmallVariantModifier);
  *(_QWORD *)v70 = v52;
  *(_QWORD *)(v70 + 8) = v54;
  *(_BYTE *)(v70 + 16) = v15;
  *(_QWORD *)(v70 + 24) = v125;
  *(_QWORD *)(v70 + 32) = KeyPath;
  *(_QWORD *)(v70 + 40) = 1;
  *(_BYTE *)(v70 + 48) = 0;
  sub_1000D55D4(v52, v54, v15);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000215BC((uint64_t)v10, type metadata accessor for FontWithSmallVariantModifier);
  sub_100021A14(v66, &qword_100BCCDA8);
  sub_1000D31B4(v52, v54, v15);
  swift_release();
  v71 = swift_bridgeObjectRelease();
  v72 = v149;
  static TypesettingLanguageAwareLineHeightRatio.disable.getter(v71);
  v73 = sub_10010FAB0();
  v74 = v132;
  View.typesettingLanguageAwareLineHeightRatio(_:isEnabled:)(v72, 1, v69, v73);
  ((void (*)(char *, uint64_t))v144)(v72, v151);
  sub_100021A14(v70, &qword_100BDD7C0);
  v75 = v134;
  v76 = v145;
  v77 = v136;
  (*(void (**)(uint64_t, char *, uint64_t))(v134 + 16))(v145, v74, v136);
  *(_WORD *)(v76 + *(int *)(v133 + 36)) = 257;
  (*(void (**)(char *, uint64_t))(v75 + 8))(v74, v77);
  sub_1000787D4(v76, v147, &qword_100BF9920);
  v78 = (uint64_t *)(v141 + *(int *)(v127 + 28));
  v79 = v78[1];
  v152 = *v78;
  v153 = v79;
  swift_bridgeObjectRetain();
  v80 = Text.init<A>(_:)(&v152, &type metadata for String, v126);
  v82 = v81;
  v84 = v83;
  v86 = v85 & 1;
  v87 = static Font.subheadline.getter(v80);
  v88 = static Font.footnote.getter(v87);
  v89 = *(_QWORD *)v140;
  LOBYTE(v54) = *(_BYTE *)(v140 + 8);
  sub_10008D47C(*(_QWORD *)v140, v54);
  sub_100109B54();
  LOBYTE(v15) = v90;
  sub_1000B15F8(v89, v54);
  v91 = v148;
  v92 = v138;
  ((void (*)(uint64_t, _QWORD, uint64_t))v142)(v148, v143, v138);
  _s7Weather24LocationCompositionStateOwst_0(v91, 0, 1, v92);
  v93 = v91;
  v94 = v135;
  sub_100037768(v93, v135, &qword_100BCCDA8);
  swift_retain();
  swift_retain();
  v95 = sub_10040BDEC(v87, v88, v15 & 1, v94);
  v96 = Text.font(_:)(v95, v80, v82, v86, v84);
  v98 = v97;
  LOBYTE(v84) = v99;
  v142 = v100;
  swift_release();
  swift_release();
  swift_release();
  sub_1000D31B4(v80, v82, v86);
  swift_bridgeObjectRelease();
  sub_100021A14(v148, &qword_100BCCDA8);
  v101 = v149;
  static TypesettingLanguageAwareLineHeightRatio.disable.getter(v102);
  v143 = Text.typesettingLanguageAwareLineHeightRatio(_:isEnabled:)(v101, 1, v96, v98, v84 & 1, v142);
  v104 = v103;
  v148 = v105;
  LOBYTE(v82) = v106 & 1;
  sub_1000D31B4(v96, v98, v84 & 1);
  v107 = swift_bridgeObjectRelease();
  ((void (*)(char *, uint64_t, __n128))v144)(v101, v151, v107);
  v108 = swift_getKeyPath(&unk_1009BA448);
  v109 = v146;
  v110 = v150;
  sub_100037768(v146, v150, &qword_100BF9938);
  v111 = v147;
  v112 = v145;
  sub_100037768(v147, v145, &qword_100BF9920);
  v113 = v137;
  sub_100037768(v110, v137, &qword_100BF9938);
  v114 = sub_1000BA294(&qword_100BF9968);
  sub_100037768(v112, v113 + *(int *)(v114 + 48), &qword_100BF9920);
  v115 = v113 + *(int *)(v114 + 64);
  v116 = v143;
  *(_QWORD *)v115 = v143;
  *(_QWORD *)(v115 + 8) = v104;
  *(_BYTE *)(v115 + 16) = v82;
  *(_QWORD *)(v115 + 24) = v148;
  *(_QWORD *)(v115 + 32) = v108;
  *(_QWORD *)(v115 + 40) = 1;
  *(_BYTE *)(v115 + 48) = 0;
  *(_WORD *)(v115 + 49) = 257;
  sub_1000D55D4(v116, v104, v82);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100021A14(v111, &qword_100BF9920);
  sub_100021A14(v109, &qword_100BF9938);
  sub_1000D31B4(v116, v104, v82);
  swift_release();
  swift_bridgeObjectRelease();
  sub_100021A14(v112, &qword_100BF9920);
  sub_100021A14(v150, &qword_100BF9938);
}

void sub_100638EA4(char *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  id v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t KeyPath;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t OpaqueTypeConformance2;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  unsigned __int8 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  unsigned __int8 v86;
  char v87;
  char v88;
  char v89;
  char v90;
  _BYTE v91[7];
  _BYTE v92[7];
  _BYTE v93[7];
  _BYTE v94[7];
  _BYTE v95[7];
  _BYTE v96[7];
  Swift::String v97;
  Swift::String v98;

  v67 = a1;
  v71 = a2;
  v66 = type metadata accessor for Font.TextStyle(0);
  v65 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v64 = (char *)&v53 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_1000BA294(&qword_100BF98B8);
  __chkstk_darwin(v68);
  v4 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_1000BA294(&qword_100BF98C0);
  *(_QWORD *)&v63 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BF98C8);
  __chkstk_darwin(v7);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v70 = (char *)&v53 - v11;
  v12 = (void *)objc_opt_self(NSBundle);
  v13 = objc_msgSend(v12, "mainBundle");
  v97._object = (void *)0x8000000100A0E790;
  v14._countAndFlagsBits = 0x736572705F776F4CLL;
  v14._object = (void *)0xEC00000065727573;
  v15._countAndFlagsBits = 7827276;
  v15._object = (void *)0xE300000000000000;
  v97._countAndFlagsBits = 0xD00000000000002ELL;
  v16 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v97);

  v17 = objc_msgSend(v12, "mainBundle");
  v98._countAndFlagsBits = 0xD00000000000002FLL;
  v98._object = (void *)0x8000000100A0E7C0;
  v18._countAndFlagsBits = 0x6572705F68676948;
  v18._object = (void *)0xED00006572757373;
  v19._countAndFlagsBits = 1751607624;
  v19._object = (void *)0xE400000000000000;
  v20 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, (Swift::String_optional)0, (NSBundle)v17, v19, v98);

  v21 = String.count.getter(v16._countAndFlagsBits, v16._object);
  swift_bridgeObjectRelease();
  if (v21 > 4)
  {
    v25 = swift_bridgeObjectRelease();
    v26 = (uint64_t)v67;
    goto LABEL_5;
  }
  v22 = (uint64_t)v6;
  v23 = v63;
  v24 = String.count.getter(v20._countAndFlagsBits, v20._object);
  v25 = swift_bridgeObjectRelease();
  v26 = (uint64_t)v67;
  if (v24 >= 5)
  {
LABEL_5:
    v54 = static VerticalAlignment.lastTextBaseline.getter(v25);
    sub_100639E94(v26, (uint64_t)&v72);
    v56 = v72;
    v34 = v73;
    v58 = v74;
    v57 = v75;
    v67 = v9;
    v35 = v76;
    v59 = v77;
    v36 = v78;
    v60 = v79;
    v63 = v81;
    v62 = v82;
    v61 = v83;
    v37 = v84;
    v90 = 1;
    v89 = v73;
    v88 = v76;
    v87 = v78;
    v86 = v80;
    v85 = v84;
    v55 = v80;
    v38 = v65;
    v39 = v64;
    v40 = v66;
    v41 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v65 + 104))(v64, enum case for Font.TextStyle.subheadline(_:), v66);
    static Font.Weight.semibold.getter(v41);
    v42 = static Font.system(_:weight:)(v39);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
    KeyPath = swift_getKeyPath(&unk_1009BA418);
    *(_QWORD *)v4 = v54;
    *((_QWORD *)v4 + 1) = 0;
    v4[16] = 1;
    *(_DWORD *)(v4 + 17) = *(_DWORD *)v95;
    *((_DWORD *)v4 + 5) = *(_DWORD *)&v95[3];
    *((_QWORD *)v4 + 3) = v56;
    v4[32] = v34;
    *(_DWORD *)(v4 + 33) = *(_DWORD *)v94;
    *((_DWORD *)v4 + 9) = *(_DWORD *)&v94[3];
    v44 = v57;
    *((_QWORD *)v4 + 5) = v58;
    *((_QWORD *)v4 + 6) = v44;
    v4[56] = v35;
    v9 = v67;
    LODWORD(v44) = *(_DWORD *)v93;
    *((_DWORD *)v4 + 15) = *(_DWORD *)&v93[3];
    *(_DWORD *)(v4 + 57) = v44;
    *((_QWORD *)v4 + 8) = v59;
    v4[72] = v36;
    *((_DWORD *)v4 + 19) = *(_DWORD *)&v92[3];
    *(_DWORD *)(v4 + 73) = *(_DWORD *)v92;
    *((_QWORD *)v4 + 10) = v60;
    v4[88] = v55;
    *(_DWORD *)(v4 + 89) = *(_DWORD *)v91;
    *((_DWORD *)v4 + 23) = *(_DWORD *)&v91[3];
    *((_OWORD *)v4 + 6) = v63;
    v45 = v61;
    *((_QWORD *)v4 + 14) = v62;
    *((_QWORD *)v4 + 15) = v45;
    v4[128] = v37;
    *(_DWORD *)(v4 + 129) = *(_DWORD *)v96;
    *((_DWORD *)v4 + 33) = *(_DWORD *)&v96[3];
    *((_QWORD *)v4 + 17) = KeyPath;
    *((_QWORD *)v4 + 18) = v42;
    swift_storeEnumTagMultiPayload(v4, v68, 1);
    v46 = sub_1000BA294(&qword_100BF98D0);
    v47 = sub_100075EB0(&qword_100BF98D8);
    v48 = sub_10063CDE4();
    v72 = v47;
    v73 = v48;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v72, &opaque type descriptor for <<opaque return type of View.typesettingLanguageAwareLineHeightRatio(_:isEnabled:)>>, 1);
    v50 = sub_10063CE80();
    v33 = (uint64_t)v70;
    _ConditionalContent<>.init(storage:)(v4, v69, v46, OpaqueTypeConformance2, v50);
    goto LABEL_6;
  }
  sub_10063956C(v22);
  v27 = v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v4, v22, v69);
  swift_storeEnumTagMultiPayload(v4, v68, 0);
  v28 = sub_1000BA294(&qword_100BF98D0);
  v29 = sub_100075EB0(&qword_100BF98D8);
  v30 = sub_10063CDE4();
  v72 = v29;
  v73 = v30;
  v31 = swift_getOpaqueTypeConformance2(&v72, &opaque type descriptor for <<opaque return type of View.typesettingLanguageAwareLineHeightRatio(_:isEnabled:)>>, 1);
  v32 = sub_10063CE80();
  v33 = (uint64_t)v70;
  _ConditionalContent<>.init(storage:)(v4, v27, v28, v31, v32);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v27);
LABEL_6:
  sub_100037768(v33, (uint64_t)v9, &qword_100BF98C8);
  v51 = v71;
  *v71 = 0;
  *((_BYTE *)v51 + 8) = 1;
  v52 = sub_1000BA294(&qword_100BF9910);
  sub_100037768((uint64_t)v9, (uint64_t)v51 + *(int *)(v52 + 48), &qword_100BF98C8);
  sub_100021A14(v33, &qword_100BF98C8);
  sub_100021A14((uint64_t)v9, &qword_100BF98C8);
}

void sub_10063956C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __n128 v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[208];
  _BYTE v33[216];
  _QWORD v34[30];

  v30 = a1;
  v31 = type metadata accessor for TypesettingLanguageAwareLineHeightRatio(0);
  v29 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v28 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for FontWithSmallVariantModifier(0);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_1000BA294(&qword_100BCCDA8);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_1000BA294(&qword_100BF98D8);
  v9 = __chkstk_darwin(v27);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = static VerticalAlignment.lastTextBaseline.getter(v9);
  sub_100639BAC((uint64_t)v32);
  v33[208] = 1;
  memcpy(&v33[7], v32, 0xC9uLL);
  v34[0] = v12;
  v34[1] = 0;
  LOBYTE(v34[2]) = 1;
  v13 = memcpy((char *)&v34[2] + 1, v33, 0xD0uLL);
  v14 = static Font.subheadline.getter(v13);
  v15 = static Font.footnote.getter(v14);
  v16 = v1 + *(int *)(type metadata accessor for PressureComponentContentView(0) + 20);
  v17 = *(_QWORD *)v16;
  v18 = *(_BYTE *)(v16 + 8);
  sub_10008D47C(*(_QWORD *)v16, v18);
  sub_100109B54();
  v20 = v19;
  sub_1000B15F8(v17, v18);
  v21 = enum case for Font.Leading.tight(_:);
  v22 = type metadata accessor for Font.Leading(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v8, v21, v22);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v22);
  sub_100037768((uint64_t)v8, (uint64_t)v5 + *(int *)(v3 + 24), &qword_100BCCDA8);
  *v5 = v14;
  v5[1] = v15;
  *((_BYTE *)v5 + *(int *)(v3 + 28)) = v20 & 1;
  v23 = v27;
  sub_100080C0C((uint64_t)v5, (uint64_t)&v11[*(int *)(v27 + 36)], type metadata accessor for FontWithSmallVariantModifier);
  memcpy(v11, v34, 0xE1uLL);
  sub_10063CF1C((uint64_t)v34);
  sub_1000215BC((uint64_t)v5, type metadata accessor for FontWithSmallVariantModifier);
  sub_100021A14((uint64_t)v8, &qword_100BCCDA8);
  sub_10063CFA4((uint64_t)v32);
  v24 = v28;
  static TypesettingLanguageAwareLineHeightRatio.disable.getter(v25);
  v26 = sub_10063CDE4();
  View.typesettingLanguageAwareLineHeightRatio(_:isEnabled:)(v24, 1, v23, v26);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v24, v31);
  sub_100021A14((uint64_t)v11, &qword_100BF98D8);
}

void sub_100639854(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  double *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  double v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t KeyPath;
  char *v24;
  double v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a1;
  v1 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v1);
  v3 = (double *)((char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_1000BA294(&qword_100BDFBE8);
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BF9970);
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_1000BA294(&qword_100BF9978);
  __chkstk_darwin(v29);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v29 - v13;
  if (qword_100BC2120 != -1)
    swift_once(&qword_100BC2120, sub_1004D16D0);
  v15 = *(double *)&xmmword_100CAEC10 * 0.5;
  v16 = (char *)v3 + *(int *)(v1 + 20);
  v17 = enum case for RoundedCornerStyle.continuous(_:);
  v18 = type metadata accessor for RoundedCornerStyle(0);
  v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v16, v17, v18);
  *v3 = v15;
  v3[1] = v15;
  v20 = static Color.white.getter(v19);
  sub_100080C0C((uint64_t)v3, (uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_QWORD *)&v6[*(int *)(v4 + 52)] = v20;
  *(_WORD *)&v6[*(int *)(v4 + 56)] = 256;
  sub_1000215BC((uint64_t)v3, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v21 = xmmword_100CAEC10;
  if (qword_100BC2128 != -1)
    swift_once(&qword_100BC2128, sub_1004D16E4);
  v22 = xmmword_100CAEC20;
  KeyPath = swift_getKeyPath(&unk_1009BA478);
  sub_100037768((uint64_t)v6, (uint64_t)v9, &qword_100BDFBE8);
  v24 = &v9[*(int *)(v7 + 36)];
  *(_OWORD *)v24 = v21;
  *((_OWORD *)v24 + 1) = v22;
  *((_QWORD *)v24 + 4) = KeyPath;
  v24[40] = 0;
  sub_100021A14((uint64_t)v6, &qword_100BDFBE8);
  v25 = (*((double *)&xmmword_100CAEC10 + 1) + -11.0) * -0.5;
  sub_100037768((uint64_t)v9, (uint64_t)v11, &qword_100BF9970);
  v26 = &v11[*(int *)(v29 + 36)];
  *(_QWORD *)v26 = 0;
  *((double *)v26 + 1) = v25;
  sub_100021A14((uint64_t)v9, &qword_100BF9970);
  sub_1000787D4((uint64_t)v11, (uint64_t)v14, &qword_100BF9978);
  sub_100037768((uint64_t)v14, (uint64_t)v11, &qword_100BF9978);
  v27 = v30;
  sub_100037768((uint64_t)v11, v30, &qword_100BF9978);
  v28 = v27 + *(int *)(sub_1000BA294(&qword_100BF9980) + 48);
  *(_QWORD *)v28 = 0;
  *(_BYTE *)(v28 + 8) = 1;
  sub_100021A14((uint64_t)v14, &qword_100BF9978);
  sub_100021A14((uint64_t)v11, &qword_100BF9978);
}

double sub_100639BAC@<D0>(uint64_t a1@<X8>)
{
  void *v1;
  id v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  id v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double result;
  uint64_t v28;
  uint64_t KeyPath;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  __int16 v44;
  Swift::String v45;
  uint64_t *v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  __int16 v59;
  uint64_t v60;
  char v61;
  uint64_t *v62[6];
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  Swift::String v68;
  Swift::String v69;

  v1 = (void *)objc_opt_self(NSBundle);
  v2 = objc_msgSend(v1, "mainBundle");
  v68._object = (void *)0x8000000100A0E790;
  v3._countAndFlagsBits = 0x736572705F776F4CLL;
  v3._object = (void *)0xEC00000065727573;
  v4._countAndFlagsBits = 7827276;
  v4._object = (void *)0xE300000000000000;
  v68._countAndFlagsBits = 0xD00000000000002ELL;
  v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v68);

  v45 = v5;
  v6 = sub_100114EF8();
  v7 = Text.init<A>(_:)(&v45, &type metadata for String, v6);
  v31 = v8;
  v32 = v7;
  v30 = v9;
  v33 = v10;
  KeyPath = swift_getKeyPath(&unk_1009BA448);
  static Alignment.center.getter(KeyPath);
  _FrameLayout.init(width:height:alignment:)(0x4042000000000000, 0, 0, 1);
  v11 = v62[5];
  v12 = v63;
  v13 = v64;
  v14 = v65;
  v15 = v66;
  v28 = v67;
  v16 = objc_msgSend(v1, "mainBundle");
  v69._countAndFlagsBits = 0xD00000000000002FLL;
  v69._object = (void *)0x8000000100A0E7C0;
  v17._countAndFlagsBits = 0x6572705F68676948;
  v17._object = (void *)0xED00006572757373;
  v18._countAndFlagsBits = 1751607624;
  v18._object = (void *)0xE400000000000000;
  v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v17, (Swift::String_optional)0, (NSBundle)v16, v18, v69);

  v45 = v19;
  v20 = Text.init<A>(_:)(&v45, &type metadata for String, v6);
  v22 = v21;
  LOBYTE(v6) = v23;
  v25 = v24;
  v26 = swift_getKeyPath(&unk_1009BA448);
  v60 = 0;
  v61 = 1;
  v52 = v32;
  v53 = v31;
  v54 = v30 & 1;
  v55 = v33;
  v56 = KeyPath;
  v57 = 1;
  v58 = 0;
  v59 = 257;
  v62[0] = &v60;
  v62[1] = &v52;
  v45._countAndFlagsBits = 0;
  LOBYTE(v45._object) = 1;
  v46 = v11;
  v47 = v12;
  v48 = v13;
  v49 = v14;
  v50 = v15;
  v51 = v28;
  v37 = v20;
  v38 = v22;
  v39 = v6 & 1;
  v40 = v25;
  v41 = v26;
  v42 = 1;
  v43 = 0;
  v44 = 257;
  v62[2] = (uint64_t *)&v45;
  v62[3] = &v37;
  v35 = 0;
  v36 = 1;
  v62[4] = &v35;
  sub_10035E600(v62, a1);
  sub_1000D31B4(v37, v38, v39);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000D31B4(v52, v53, v54);
  swift_release();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

double sub_100639E94@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t *v27[6];
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;

  v4 = Image.init(systemName:)(0x6F642E776F727261, 0xEA00000000006E77);
  v5 = a1 + *(int *)(type metadata accessor for PressureComponentContentView(0) + 20);
  v6 = *(_QWORD *)v5;
  v7 = *(_BYTE *)(v5 + 8);
  sub_10008D47C(*(_QWORD *)v5, v7);
  sub_100109B54();
  v9 = v8;
  v10 = sub_1000B15F8(v6, v7);
  if ((v9 & 1) != 0)
    v11 = 0x4040000000000000;
  else
    v11 = 0x4050000000000000;
  static Alignment.center.getter(v10);
  _FrameLayout.init(width:height:alignment:)(v11, 0, 0, 1);
  v24 = v4;
  v25 = 0;
  v26 = 1;
  v27[0] = &v25;
  v27[1] = &v24;
  v15 = Image.init(systemName:)(0x70752E776F727261, 0xE800000000000000);
  v16 = 0;
  v17 = 1;
  v18 = v27[5];
  v19 = v28;
  v20 = v29;
  v21 = v30;
  v22 = v31;
  v23 = v32;
  v27[2] = &v16;
  v27[3] = &v15;
  v13 = 0;
  v14 = 1;
  v27[4] = &v13;
  sub_10035E768(v27, a2);
  swift_release();
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void *sub_10063A00C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE __src[360];
  _BYTE v7[360];

  v4 = static VerticalAlignment.center.getter(a1);
  sub_10063A080(v2, (uint64_t)__src);
  memcpy(&v7[7], __src, 0x161uLL);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return memcpy((void *)(a2 + 17), v7, 0x168uLL);
}

uint64_t sub_10063A080@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  id v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _BYTE v21[344];
  _BYTE __src[320];
  _BYTE v23[327];
  _QWORD __dst[43];
  _BYTE v25[337];

  v4 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v5 = objc_msgSend(v4, "userInterfaceIdiom");

  if (v5)
  {
    v8 = static Axis.Set.horizontal.getter(v7);
    v9 = v8;
    v10 = static Axis.Set.vertical.getter(v8);
    v11 = Axis.Set.init(rawValue:)(0);
    v12 = Axis.Set.init(rawValue:)(v11);
    if (Axis.Set.init(rawValue:)(v12 & v9) != v9)
      v11 = Axis.Set.init(rawValue:)(v11 | v9);
    v13 = Axis.Set.init(rawValue:)(v11);
    if (Axis.Set.init(rawValue:)(v13 & v10) != v10)
      LOBYTE(v11) = Axis.Set.init(rawValue:)(v11 | v10);
    sub_10063A2C4(a1, __src, v14);
    memcpy(&v23[7], __src, 0x140uLL);
    LOBYTE(__dst[0]) = v11;
    memcpy((char *)__dst + 1, v23, 0x147uLL);
    __dst[41] = 0x3FF0000000000000;
    sub_10063C504((uint64_t)__dst);
  }
  else
  {
    v15 = static HorizontalAlignment.leading.getter(v6);
    sub_10063A8E4(a1, (uint64_t)__src);
    memcpy(&v23[7], __src, 0x90uLL);
    __dst[0] = v15;
    __dst[1] = 0;
    LOBYTE(__dst[2]) = 1;
    memcpy((char *)&__dst[2] + 1, v23, 0x97uLL);
    __dst[21] = 0x3FF0000000000000;
    sub_10063CABC((uint64_t)__dst);
  }
  sub_1000787D4((uint64_t)__dst, (uint64_t)v21, &qword_100BF97F0);
  v16 = sub_1000BA294(&qword_100BF97F8);
  v17 = sub_1000BA294(&qword_100BF9800);
  v18 = sub_10063C510();
  v19 = sub_10063C5AC();
  _ConditionalContent<>.init(storage:)(v21, v16, v17, v18, v19);
  memcpy(__dst, v25, 0x151uLL);
  memcpy(v21, v25, 0x151uLL);
  memcpy((void *)a2, v25, 0x151uLL);
  v23[0] = 0;
  *(_QWORD *)(a2 + 344) = 0;
  *(_BYTE *)(a2 + 352) = 0;
  sub_10063C838((uint64_t)v21);
  return sub_10063C838((uint64_t)__dst);
}

uint64_t sub_10063A2C4@<X0>(uint64_t a1@<X0>, void *a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE __src[144];
  _BYTE v30[160];
  _QWORD v31[19];
  _QWORD v32[21];
  _QWORD __dst[40];
  _QWORD v34[2];
  char v35;
  _BYTE v36[151];
  _QWORD v37[2];
  char v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  __int16 v55;

  v28 = static VerticalAlignment.lastTextBaseline.getter(a3);
  sub_10063A540(a1, (uint64_t)__dst);
  v4 = __dst[0];
  v22 = __dst[0];
  v18 = __dst[1];
  v5 = __dst[2];
  v6 = __dst[4];
  v7 = __dst[5];
  v24 = __dst[6];
  v25 = __dst[3];
  v8 = __dst[8];
  v9 = __dst[9];
  v26 = __dst[10];
  v27 = __dst[7];
  v16 = __dst[12];
  v17 = __dst[11];
  v10 = __dst[13];
  v15 = __dst[14];
  v19 = __dst[8];
  v11 = BYTE1(__dst[1]);
  v20 = BYTE1(__dst[1]);
  v21 = __dst[4];
  v14 = static HorizontalAlignment.leading.getter(v12);
  sub_10063A8E4(a1, (uint64_t)__src);
  v30[152] = 1;
  memcpy(&v30[7], __src, 0x90uLL);
  v31[0] = v28;
  v31[1] = 0x4030000000000000;
  LOBYTE(v31[2]) = 0;
  v31[3] = v4;
  LOBYTE(v31[4]) = v18;
  BYTE1(v31[4]) = v11;
  v31[5] = v5;
  v31[6] = v25;
  LOBYTE(v31[7]) = v6;
  v31[8] = v7;
  v31[9] = v24;
  v31[10] = v27;
  LOBYTE(v31[11]) = v8;
  v31[12] = v9;
  v31[13] = v26;
  v31[14] = v17;
  v31[15] = v16;
  LOBYTE(v31[16]) = v10;
  v31[17] = v15;
  LOWORD(v31[18]) = 257;
  v32[0] = v14;
  v32[1] = 0;
  LOBYTE(v32[2]) = 1;
  memcpy((char *)&v32[2] + 1, v30, 0x97uLL);
  memcpy(__dst, v31, 0x92uLL);
  memcpy(&__dst[19], v32, 0xA8uLL);
  memcpy(a2, __dst, 0x140uLL);
  v34[0] = v14;
  v34[1] = 0;
  v35 = 1;
  memcpy(v36, v30, sizeof(v36));
  sub_10063CAD4((uint64_t)v31);
  sub_10063CB98((uint64_t)v32);
  sub_10063CC5C((uint64_t)v34);
  v37[0] = v28;
  v37[1] = 0x4030000000000000;
  v38 = 0;
  v39 = v22;
  v40 = v18;
  v41 = v20;
  v42 = v5;
  v43 = v25;
  v44 = v21;
  v45 = v7;
  v46 = v24;
  v47 = v27;
  v48 = v19;
  v49 = v9;
  v50 = v26;
  v51 = v17;
  v52 = v16;
  v53 = v10;
  v54 = v15;
  v55 = 257;
  return sub_10063CD20((uint64_t)v37);
}

double sub_10063A540@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  double result;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;

  sub_10063A7A8(a1, (uint64_t)&v37);
  v25 = BYTE1(v38);
  v27 = v37;
  v28 = v40;
  v36 = v42;
  v29 = v39;
  v30 = v43;
  v32 = v44;
  v31 = v45;
  v34 = v38;
  v35 = v41;
  v26 = static Font.largeTitle.getter(v4);
  KeyPath = swift_getKeyPath(&unk_1009BA418);
  v5 = (uint64_t *)(a1 + *(int *)(type metadata accessor for PressureComponentViewModel(0) + 28));
  v6 = v5[1];
  v37 = *v5;
  v38 = v6;
  v7 = sub_100114EF8();
  swift_bridgeObjectRetain();
  v8 = Text.init<A>(_:)(&v37, &type metadata for String, v7);
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  v15 = static Font.subheadline.getter(v8);
  v16 = Text.font(_:)(v15, v8, v10, v14, v12);
  v22 = v17;
  v23 = v16;
  v19 = v18;
  v33 = v20;
  swift_release();
  sub_1000D31B4(v8, v10, v14);
  swift_bridgeObjectRelease();
  LOBYTE(v37) = v25;
  *(_QWORD *)a2 = v27;
  *(_BYTE *)(a2 + 8) = v34;
  *(_BYTE *)(a2 + 9) = v25;
  *(_QWORD *)(a2 + 16) = v29;
  *(_QWORD *)(a2 + 24) = v28;
  *(_BYTE *)(a2 + 32) = v35;
  *(_QWORD *)(a2 + 40) = v36;
  *(_QWORD *)(a2 + 48) = v30;
  *(_QWORD *)(a2 + 56) = v32;
  *(_BYTE *)(a2 + 64) = v31;
  *(_QWORD *)(a2 + 72) = KeyPath;
  *(_QWORD *)(a2 + 80) = v26;
  *(_QWORD *)(a2 + 88) = v23;
  *(_QWORD *)(a2 + 96) = v22;
  *(_BYTE *)(a2 + 104) = v19 & 1;
  *(_QWORD *)(a2 + 112) = v33;
  j__swift_retain(v27);
  sub_1000D55D4(v29, v28, v35);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000D55D4(v23, v22, v19 & 1);
  swift_bridgeObjectRetain();
  sub_1000D31B4(v23, v22, v19 & 1);
  swift_bridgeObjectRelease();
  j__swift_release();
  sub_1000D31B4(v29, v28, v35);
  swift_release();
  swift_release();
  swift_release();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

double sub_10063A7A8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t KeyPath;
  double result;
  uint64_t v19;
  uint64_t v20;

  sub_10063ABC0(a1, (uint64_t)&v19);
  v4 = v19;
  v5 = BYTE1(v20);
  v6 = v20;
  v7 = (uint64_t *)(a1 + *(int *)(sub_1000C3E0C() + 24));
  v8 = v7[1];
  v19 = *v7;
  v20 = v8;
  v9 = sub_100114EF8();
  swift_bridgeObjectRetain();
  v10 = Text.init<A>(_:)(&v19, &type metadata for String, v9);
  v12 = v11;
  v14 = v13;
  v16 = v15 & 1;
  KeyPath = swift_getKeyPath(&unk_1009BA448);
  LOBYTE(v19) = v5;
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 9) = v5;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v12;
  *(_BYTE *)(a2 + 32) = v16;
  *(_QWORD *)(a2 + 40) = v14;
  *(_QWORD *)(a2 + 48) = KeyPath;
  *(_QWORD *)(a2 + 56) = 1;
  *(_BYTE *)(a2 + 64) = 0;
  j__swift_retain(v4);
  sub_1000D55D4(v10, v12, v16);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000D31B4(v10, v12, v16);
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)&result = j__swift_release().n128_u64[0];
  return result;
}

double sub_10063A8E4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  double result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  _BYTE v49[7];
  char v50;
  _BYTE v51[7];
  char v52;
  _BYTE v53[7];
  char v54;
  int v55;
  __int16 v56;
  char v57;
  char v58;

  v4 = static VerticalAlignment.center.getter(a1);
  sub_10063A7A8(a1, (uint64_t)&v40);
  v39 = v40;
  v5 = BYTE1(v41);
  v33 = v43;
  v34 = v42;
  v6 = v44;
  v35 = v46;
  v36 = v45;
  v37 = v47;
  v30 = v48;
  v38 = v41;
  v32 = static Font.largeTitle.getter(v7);
  KeyPath = swift_getKeyPath(&unk_1009BA418);
  v8 = (uint64_t *)(a1 + *(int *)(sub_1000C3E0C() + 28));
  v9 = v8[1];
  v40 = *v8;
  v41 = v9;
  v10 = sub_100114EF8();
  swift_bridgeObjectRetain();
  v11 = Text.init<A>(_:)(&v40, &type metadata for String, v10);
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  v18 = static Font.subheadline.getter(v11);
  v19 = Text.font(_:)(v18, v11, v13, v17, v15);
  v27 = v20;
  v28 = v19;
  LOBYTE(v10) = v21;
  v29 = v22;
  swift_release();
  sub_1000D31B4(v11, v13, v17);
  swift_bridgeObjectRelease();
  v58 = 1;
  v57 = v5;
  v54 = v6;
  v52 = v30;
  v50 = v10 & 1;
  *(_DWORD *)(a2 + 17) = v40;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)((char *)&v40 + 3);
  *(_DWORD *)(a2 + 34) = v55;
  *(_WORD *)(a2 + 38) = v56;
  v23 = *(_DWORD *)v53;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)&v53[3];
  *(_DWORD *)(a2 + 57) = v23;
  LOBYTE(v23) = v52;
  v24 = *(_DWORD *)v51;
  *(_DWORD *)(a2 + 92) = *(_DWORD *)&v51[3];
  *(_DWORD *)(a2 + 89) = v24;
  v25 = *(_DWORD *)v49;
  *(_DWORD *)(a2 + 132) = *(_DWORD *)&v49[3];
  *(_DWORD *)(a2 + 129) = v25;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(_QWORD *)(a2 + 24) = v39;
  *(_BYTE *)(a2 + 32) = v38;
  *(_BYTE *)(a2 + 33) = v5;
  *(_QWORD *)(a2 + 40) = v34;
  *(_QWORD *)(a2 + 48) = v33;
  *(_BYTE *)(a2 + 56) = v6;
  *(_QWORD *)(a2 + 64) = v36;
  *(_QWORD *)(a2 + 72) = v35;
  *(_QWORD *)(a2 + 80) = v37;
  *(_BYTE *)(a2 + 88) = v23;
  *(_QWORD *)(a2 + 96) = KeyPath;
  *(_QWORD *)(a2 + 104) = v32;
  *(_QWORD *)(a2 + 112) = v28;
  *(_QWORD *)(a2 + 120) = v27;
  *(_BYTE *)(a2 + 128) = v10 & 1;
  *(_QWORD *)(a2 + 136) = v29;
  j__swift_retain(v39);
  sub_1000D55D4(v34, v33, v6);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000D55D4(v28, v27, v10 & 1);
  swift_bridgeObjectRetain();
  sub_1000D31B4(v28, v27, v10 & 1);
  swift_bridgeObjectRelease();
  j__swift_release();
  sub_1000D31B4(v34, v33, v6);
  swift_release();
  swift_release();
  swift_release();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_10063ABC0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  char v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  unsigned __int8 v17;
  char v18;

  v5 = sub_1000DF640();
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100079FBC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v2, a1, v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 88))(v2, v5);
  if (v7 == enum case for PressureTrend.rising(_:))
  {
    v14 = Image.init(systemName:)(0x70752E776F727261, 0xE800000000000000);
    LOBYTE(v15) = 0;
LABEL_5:
    swift_retain();
    _ConditionalContent<>.init(storage:)(&v14, &type metadata for Image, &type metadata for Image, &protocol witness table for Image, &protocol witness table for Image);
    v14 = v16;
    v15 = v17;
    v8 = sub_1000BA294(&qword_100BE1D58);
    v9 = sub_100427EEC();
    _ConditionalContent<>.init(storage:)(&v14, v8, &type metadata for Image, v9, &protocol witness table for Image);
    swift_release();
LABEL_8:
    v12 = v17;
    v13 = v18;
    *(_QWORD *)a2 = v16;
    *(_BYTE *)(a2 + 8) = v12;
    *(_BYTE *)(a2 + 9) = v13;
    return;
  }
  if (v7 == enum case for PressureTrend.falling(_:))
  {
    v14 = Image.init(systemName:)(0x6F642E776F727261, 0xEA00000000006E77);
    LOBYTE(v15) = 1;
    goto LABEL_5;
  }
  if (v7 == enum case for PressureTrend.steady(_:))
  {
    v14 = Image.init(systemName:)(0x6C61757165, 0xE500000000000000);
    v15 = 256;
    v10 = sub_1000BA294(&qword_100BE1D58);
    v11 = sub_100427EEC();
    _ConditionalContent<>.init(storage:)(&v14, v10, &type metadata for Image, v11, &protocol witness table for Image);
    goto LABEL_8;
  }
  _diagnoseUnexpectedEnumCase<A>(type:)(v5, v5);
  __break(1u);
}

uint64_t sub_10063ADD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v21[2];
  uint64_t v22;
  uint64_t v23;

  v23 = a1;
  v22 = sub_1000BA294(&qword_100BF9A48);
  __chkstk_darwin(v22);
  v2 = (char *)v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ColorRenderingMode(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for GradientArcView(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000BA294(&qword_100BDF7F0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100080C0C(v21[1], (uint64_t)v10, type metadata accessor for GradientArcView);
  v15 = *(unsigned __int8 *)(v8 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(&unk_100B86290, v16 + v9, v15 | 7);
  sub_10007802C((uint64_t)v10, v17 + v16, type metadata accessor for GradientArcView);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for ColorRenderingMode.nonLinear(_:), v3);
  Canvas<>.init(opaque:colorMode:rendersAsynchronously:renderer:)(0, v6, 0, sub_10063D760, v17);
  Canvas.rendersAsynchronously.setter(1, v11);
  Canvas.rendersFirstFrameAsynchronously.setter(1, v11);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v2, v14, v11);
  v18 = v23;
  v19 = &v2[*(int *)(v22 + 36)];
  *(_QWORD *)v19 = 0x3FF0000000000000;
  *((_WORD *)v19 + 4) = 0;
  sub_100037768((uint64_t)v2, v18, &qword_100BF9A48);
  *(_BYTE *)(v18 + *(int *)(sub_1000BA294(&qword_100BF9A50) + 36)) = 1;
  sub_100021A14((uint64_t)v2, &qword_100BF9A48);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_10063B018(uint64_t *a1, double *a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  void (*v17)(char *, uint64_t);
  char *v18;
  uint64_t v19;
  char v20;
  double v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  __n128 v25;
  __n128 v26;
  _QWORD v28[5];
  _QWORD v29[5];

  v8 = type metadata accessor for GraphicsContext.Shading(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a3 * 0.5;
  v13 = a4 * 0.5 + 0.0;
  if (a4 >= a3)
    a4 = a3;
  v14 = sub_10063B218((uint64_t)a2);
  v15 = *a1;
  Path.init(ellipseIn:)(v28, v12 - a4 * 0.5, v13 - a4 * 0.5, a4, a4);
  static GraphicsContext.Shading.conicGradient(_:center:angle:options:)(v14, 0, v12, v13, (*a2 + -90.0) * 0.0174532925);
  v16 = swift_bridgeObjectRelease();
  GraphicsContext.fill(_:with:style:)(v28, v11, 256, v15, v16);
  sub_100154604((uint64_t)v28);
  v17 = *(void (**)(char *, uint64_t))(v9 + 8);
  v17(v11, v8);
  GraphicsContext.blendMode.setter(16);
  v18 = (char *)a2 + *(int *)(type metadata accessor for GradientArcView(0) + 24);
  v19 = *(_QWORD *)v18;
  LOBYTE(v14) = v18[8];
  sub_10008D47C(*(_QWORD *)v18, v14);
  sub_100109B54();
  LOBYTE(v15) = v20;
  sub_1000B15F8(v19, v14);
  v21 = 22.0;
  if ((v15 & 1) != 0)
    v21 = 16.0;
  v22 = *a1;
  v23 = Path.init(ellipseIn:)(v29, v12 - (a4 - v21) * 0.5, v13 - (a4 - v21) * 0.5, a4 - v21, a4 - v21);
  v24 = static Color.clear.getter(v23);
  static GraphicsContext.Shading.color(_:)(v24, v25);
  v26 = swift_release();
  GraphicsContext.fill(_:with:style:)(v29, v11, 256, v22, v26);
  sub_100154604((uint64_t)v29);
  return ((uint64_t (*)(char *, uint64_t))v17)(v11, v8);
}

uint64_t sub_10063B218(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;

  v2 = type metadata accessor for Color.RGBColorSpace(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PressureTrend(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for GradientArcView(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1 + *(int *)(v10 + 20), v6);
  v11 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (v11 == enum case for PressureTrend.rising(_:))
  {
    v12 = sub_1000BA294(&qword_100BCB960);
    v13 = swift_allocObject(v12, 80, 7);
    *(_OWORD *)(v13 + 16) = xmmword_10098B610;
    v14 = enum case for Color.RGBColorSpace.sRGB(_:);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
    v15(v5, enum case for Color.RGBColorSpace.sRGB(_:), v2);
    v16 = Color.init(_:white:opacity:)(v5, 1.0, 0.0);
    *(_QWORD *)(v13 + 32) = Gradient.Stop.init(color:location:)(v16);
    *(_QWORD *)(v13 + 40) = v17;
    v15(v5, v14, v2);
    v18 = Color.init(_:white:opacity:)(v5, 1.0, 0.0);
    *(_QWORD *)(v13 + 48) = Gradient.Stop.init(color:location:)(v18);
    *(_QWORD *)(v13 + 56) = v19;
    v15(v5, v14, v2);
    v20 = 0.4;
    v21 = 1.0;
LABEL_5:
    v29 = Color.init(_:white:opacity:)(v5, v21, v20);
    *(_QWORD *)(v13 + 64) = Gradient.Stop.init(color:location:)(v29);
    *(_QWORD *)(v13 + 72) = v30;
    return Gradient.init(stops:)(v13);
  }
  if (v11 == enum case for PressureTrend.falling(_:))
  {
    v22 = sub_1000BA294(&qword_100BCB960);
    v13 = swift_allocObject(v22, 80, 7);
    *(_OWORD *)(v13 + 16) = xmmword_10098B610;
    v23 = enum case for Color.RGBColorSpace.sRGB(_:);
    v24 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
    v24(v5, enum case for Color.RGBColorSpace.sRGB(_:), v2);
    v25 = Color.init(_:white:opacity:)(v5, 1.0, 0.4);
    *(_QWORD *)(v13 + 32) = Gradient.Stop.init(color:location:)(v25);
    *(_QWORD *)(v13 + 40) = v26;
    v24(v5, v23, v2);
    v27 = Color.init(_:white:opacity:)(v5, 1.0, 0.0);
    *(_QWORD *)(v13 + 48) = Gradient.Stop.init(color:location:)(v27);
    *(_QWORD *)(v13 + 56) = v28;
    v24(v5, v23, v2);
    v21 = 1.0;
    v20 = 0.0;
    goto LABEL_5;
  }
  if (v11 == enum case for PressureTrend.steady(_:))
  {
    v31 = sub_1000BA294(&qword_100BCB960);
    v13 = swift_allocObject(v31, 96, 7);
    *(_OWORD *)(v13 + 16) = xmmword_1009891D0;
    v32 = enum case for Color.RGBColorSpace.sRGB(_:);
    v33 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
    v33(v5, enum case for Color.RGBColorSpace.sRGB(_:), v2);
    v34 = Color.init(_:white:opacity:)(v5, 1.0, 0.4);
    *(_QWORD *)(v13 + 32) = Gradient.Stop.init(color:location:)(v34);
    *(_QWORD *)(v13 + 40) = v35;
    v33(v5, v32, v2);
    v36 = Color.init(_:white:opacity:)(v5, 1.0, 0.0);
    *(_QWORD *)(v13 + 48) = Gradient.Stop.init(color:location:)(v36);
    *(_QWORD *)(v13 + 56) = v37;
    v33(v5, v32, v2);
    v38 = Color.init(_:white:opacity:)(v5, 1.0, 0.0);
    *(_QWORD *)(v13 + 64) = Gradient.Stop.init(color:location:)(v38);
    *(_QWORD *)(v13 + 72) = v39;
    v33(v5, v32, v2);
    v40 = Color.init(_:white:opacity:)(v5, 1.0, 0.4);
    *(_QWORD *)(v13 + 80) = Gradient.Stop.init(color:location:)(v40);
    *(_QWORD *)(v13 + 88) = v41;
    return Gradient.init(stops:)(v13);
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v6, v6);
  __break(1u);
  return result;
}

uint64_t *sub_10063B5F8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v35 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v35 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a3;
    v7 = type metadata accessor for PressureTrend(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for PressureComponentViewModel(0);
    v9 = v8[5];
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v13 = *v11;
    v12 = v11[1];
    *v10 = v13;
    v10[1] = v12;
    v14 = v8[6];
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = v8[7];
    v19 = (uint64_t *)((char *)a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    *(uint64_t *)((char *)a1 + v8[8]) = *(uint64_t *)((char *)a2 + v8[8]);
    v22 = v8[9];
    v23 = (uint64_t *)((char *)a1 + v22);
    v24 = (uint64_t *)((char *)a2 + v22);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = *(int *)(v6 + 20);
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    v29 = *(_QWORD *)v28;
    v30 = v28[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10008D47C(v29, v30);
    *(_QWORD *)v27 = v29;
    v27[8] = v30;
    v31 = *(int *)(v6 + 24);
    v32 = (char *)a1 + v31;
    v33 = (char *)a2 + v31;
    v34 = *(_QWORD *)v33;
    LOBYTE(v6) = v33[8];
    sub_10008D47C(*(_QWORD *)v33, v6);
    *(_QWORD *)v32 = v34;
    v32[8] = v6;
  }
  return a1;
}

uint64_t sub_10063B760(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PressureTrend(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  type metadata accessor for PressureComponentViewModel(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000B15F8(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_BYTE *)(a1 + *(int *)(a2 + 20) + 8));
  return sub_1000B15F8(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_BYTE *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t sub_10063B814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = type metadata accessor for PressureTrend(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for PressureComponentViewModel(0);
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  v13 = v7[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = v7[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  *(_QWORD *)(a1 + v7[8]) = *(_QWORD *)(a2 + v7[8]);
  v21 = v7[9];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = *(int *)(a3 + 20);
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = *(_QWORD *)v27;
  v29 = *(_BYTE *)(v27 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10008D47C(v28, v29);
  *(_QWORD *)v26 = v28;
  *(_BYTE *)(v26 + 8) = v29;
  v30 = *(int *)(a3 + 24);
  v31 = a1 + v30;
  v32 = a2 + v30;
  v33 = *(_QWORD *)v32;
  LOBYTE(a3) = *(_BYTE *)(v32 + 8);
  sub_10008D47C(*(_QWORD *)v32, a3);
  *(_QWORD *)v31 = v33;
  *(_BYTE *)(v31 + 8) = a3;
  return a1;
}

uint64_t sub_10063B950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  v6 = type metadata accessor for PressureTrend(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for PressureComponentViewModel(0);
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = v7[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = v7[7];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[8]) = *(_QWORD *)(a2 + v7[8]);
  v17 = v7[9];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  *v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = *(int *)(a3 + 20);
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_QWORD *)v22;
  v24 = *(_BYTE *)(v22 + 8);
  sub_10008D47C(*(_QWORD *)v22, v24);
  v25 = *(_QWORD *)v21;
  v26 = *(_BYTE *)(v21 + 8);
  *(_QWORD *)v21 = v23;
  *(_BYTE *)(v21 + 8) = v24;
  sub_1000B15F8(v25, v26);
  v27 = *(int *)(a3 + 24);
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = *(_QWORD *)v29;
  LOBYTE(a3) = *(_BYTE *)(v29 + 8);
  sub_10008D47C(*(_QWORD *)v29, a3);
  v31 = *(_QWORD *)v28;
  v32 = *(_BYTE *)(v28 + 8);
  *(_QWORD *)v28 = v30;
  *(_BYTE *)(v28 + 8) = a3;
  sub_1000B15F8(v31, v32);
  return a1;
}

uint64_t sub_10063BAD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for PressureTrend(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for PressureComponentViewModel(0);
  *(_OWORD *)(a1 + v7[5]) = *(_OWORD *)(a2 + v7[5]);
  *(_OWORD *)(a1 + v7[6]) = *(_OWORD *)(a2 + v7[6]);
  *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
  *(_QWORD *)(a1 + v7[8]) = *(_QWORD *)(a2 + v7[8]);
  *(_OWORD *)(a1 + v7[9]) = *(_OWORD *)(a2 + v7[9]);
  v8 = *(int *)(a3 + 20);
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  v12 = a1 + v9;
  v13 = a2 + v9;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  return a1;
}

uint64_t sub_10063BBA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;

  v6 = type metadata accessor for PressureTrend(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for PressureComponentViewModel(0);
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  v13 = v7[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  v18 = v7[7];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[8]) = *(_QWORD *)(a2 + v7[8]);
  v23 = v7[9];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v27 = *v25;
  v26 = v25[1];
  *v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease();
  v28 = *(int *)(a3 + 20);
  v29 = a1 + v28;
  v30 = (uint64_t *)(a2 + v28);
  v31 = *v30;
  LOBYTE(v30) = *((_BYTE *)v30 + 8);
  v32 = *(_QWORD *)v29;
  v33 = *(_BYTE *)(v29 + 8);
  *(_QWORD *)v29 = v31;
  *(_BYTE *)(v29 + 8) = (_BYTE)v30;
  sub_1000B15F8(v32, v33);
  v34 = *(int *)(a3 + 24);
  v35 = a1 + v34;
  v36 = (uint64_t *)(a2 + v34);
  v37 = *v36;
  LOBYTE(v36) = *((_BYTE *)v36 + 8);
  v38 = *(_QWORD *)v35;
  v39 = *(_BYTE *)(v35 + 8);
  *(_QWORD *)v35 = v37;
  *(_BYTE *)(v35 + 8) = (_BYTE)v36;
  sub_1000B15F8(v38, v39);
  return a1;
}

uint64_t sub_10063BCC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10063BCD4);
}

void sub_10063BCD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1000C3E0C();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    sub_1000B250C(a1, a2, v6);
  }
  else
  {
    sub_10009C0DC(a1 + *(int *)(a3 + 20));
    sub_100079F70();
  }
}

uint64_t sub_10063BD2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10063BD38);
}

void sub_10063BD38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  uint64_t v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_1000BB2A8();
  sub_10009D2E8();
  if (v7)
  {
    sub_100098D08();
    sub_1000987C4(v8, v9, v10, v11);
  }
  else
  {
    *(_BYTE *)(v5 + *(int *)(a4 + 20) + 8) = -v4;
    sub_100079F70();
  }
}

uint64_t sub_10063BD88(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for PressureComponentViewModel(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\t";
    v4[2] = "\t";
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_10063BDFC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for PressureComponentViewModel(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = (int *)v4;
    v7 = type metadata accessor for PressureTrend(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = v6[5];
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    v12 = v6[6];
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = v6[7];
    v17 = (uint64_t *)((char *)a1 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    *(uint64_t *)((char *)a1 + v6[8]) = *(uint64_t *)((char *)a2 + v6[8]);
    v20 = v6[9];
    v21 = (uint64_t *)((char *)a1 + v20);
    v22 = (uint64_t *)((char *)a2 + v20);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

double sub_10063BF00(uint64_t a1)
{
  uint64_t v2;
  double result;

  v2 = type metadata accessor for PressureTrend(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  type metadata accessor for PressureComponentViewModel(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_10063BF80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v4 = type metadata accessor for PressureTrend(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  v5 = (int *)type metadata accessor for PressureComponentViewModel(0);
  v6 = v5[5];
  v7 = (_QWORD *)(a1 + v6);
  v8 = (uint64_t *)(a2 + v6);
  v10 = *v8;
  v9 = v8[1];
  *v7 = v10;
  v7[1] = v9;
  v11 = v5[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = v5[7];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  *(_QWORD *)(a1 + v5[8]) = *(_QWORD *)(a2 + v5[8]);
  v19 = v5[9];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10063C050(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  v4 = type metadata accessor for PressureTrend(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  v5 = (int *)type metadata accessor for PressureComponentViewModel(0);
  v6 = v5[5];
  v7 = (_QWORD *)(a1 + v6);
  v8 = (_QWORD *)(a2 + v6);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = v5[6];
  v10 = (_QWORD *)(a1 + v9);
  v11 = (_QWORD *)(a2 + v9);
  *v10 = *v11;
  v10[1] = v11[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12 = v5[7];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v5[8]) = *(_QWORD *)(a2 + v5[8]);
  v15 = v5[9];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10063C164(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;

  v4 = type metadata accessor for PressureTrend(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  v5 = (int *)type metadata accessor for PressureComponentViewModel(0);
  *(_OWORD *)(a1 + v5[5]) = *(_OWORD *)(a2 + v5[5]);
  *(_OWORD *)(a1 + v5[6]) = *(_OWORD *)(a2 + v5[6]);
  *(_OWORD *)(a1 + v5[7]) = *(_OWORD *)(a2 + v5[7]);
  *(_QWORD *)(a1 + v5[8]) = *(_QWORD *)(a2 + v5[8]);
  *(_OWORD *)(a1 + v5[9]) = *(_OWORD *)(a2 + v5[9]);
  return a1;
}

uint64_t sub_10063C1EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;

  v4 = type metadata accessor for PressureTrend(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  v5 = (int *)type metadata accessor for PressureComponentViewModel(0);
  v6 = v5[5];
  v7 = (_QWORD *)(a1 + v6);
  v8 = (uint64_t *)(a2 + v6);
  v10 = *v8;
  v9 = v8[1];
  *v7 = v10;
  v7[1] = v9;
  swift_bridgeObjectRelease();
  v11 = v5[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v15 = *v13;
  v14 = v13[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  v16 = v5[7];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  v20 = *v18;
  v19 = v18[1];
  *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v5[8]) = *(_QWORD *)(a2 + v5[8]);
  v21 = v5[9];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v25 = *v23;
  v24 = v23[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10063C2C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10063C2CC);
}

uint64_t sub_10063C2CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1000BB2A8();
  return _s7Weather24LocationCompositionStateOwet_0(v1, v0, v2);
}

uint64_t sub_10063C2F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10063C300);
}

uint64_t sub_10063C300()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000BB2A8();
  sub_100098D08();
  return _s7Weather24LocationCompositionStateOwst_0(v0, v1, v2, v3);
}

uint64_t sub_10063C328(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for PressureComponentViewModel(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_10063C394()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF97E0;
  if (!qword_100BF97E0)
  {
    v1 = sub_100075EB0(&qword_100BD9A90);
    sub_10063C418();
    sub_10007A100((uint64_t)&qword_100BC6768);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF97E0);
  }
  return result;
}

unint64_t sub_10063C418()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100BF97E8;
  if (!qword_100BF97E8)
  {
    v1 = sub_100075EB0(&qword_100BD9A88);
    v2[0] = sub_100075EB0(&qword_100BF9678);
    v2[1] = sub_10063D0C8((uint64_t)&unk_100BF9688);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10007A100((uint64_t)&qword_100BC4E48);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF97E8);
  }
  return result;
}

uint64_t sub_10063C4E4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABBE70, 1);
}

uint64_t sub_10063C4F4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABBE48, 1);
}

uint64_t sub_10063C504(uint64_t result)
{
  *(_BYTE *)(result + 336) = 1;
  return result;
}

unint64_t sub_10063C510()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF9808;
  if (!qword_100BF9808)
  {
    v1 = sub_100075EB0(&qword_100BF97F8);
    sub_10027248C((uint64_t)&unk_100BF9810);
    sub_10027248C((uint64_t)&qword_100BC42A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF9808);
  }
  return result;
}

unint64_t sub_10063C5AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF9820;
  if (!qword_100BF9820)
  {
    v1 = sub_100075EB0(&qword_100BF9800);
    sub_10027248C((uint64_t)&unk_100BF9828);
    sub_10027248C((uint64_t)&qword_100BC42A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF9820);
  }
  return result;
}

double sub_10063C648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,char a43)
{
  char v47;
  double result;

  if ((a43 & 1) != 0)
  {
    j__swift_retain(a5);
    sub_1000D55D4(a7, a8, a9 & 1);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_1000D55D4(a16, a17, a18 & 1);
    swift_bridgeObjectRetain();
    j__swift_retain(a27);
    sub_1000D55D4(a29, a30, a31 & 1);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v47 = a40 & 1;
  }
  else
  {
    j__swift_retain(a7);
    sub_1000D55D4(a9, a10, a11 & 1);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    a38 = a18;
    a39 = a19;
    v47 = a20 & 1;
  }
  sub_1000D55D4(a38, a39, v47);
  *(_QWORD *)&result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

uint64_t sub_10063C838(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char);
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;

  v2 = sub_10009987C(a1);
  v11 = *(_BYTE *)(v1 + 336);
  v9 = *(_OWORD *)(v1 + 288);
  v10 = *(_OWORD *)(v1 + 304);
  v7 = *(_OWORD *)(v1 + 256);
  v8 = *(_OWORD *)(v1 + 272);
  v5 = *(_OWORD *)(v1 + 224);
  v6 = *(_OWORD *)(v1 + 240);
  v3(v2, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 144),
    *(_QWORD *)(v1 + 152),
    *(_QWORD *)(v1 + 160),
    *(_QWORD *)(v1 + 168),
    *(_QWORD *)(v1 + 176),
    *(_QWORD *)(v1 + 184),
    *(_QWORD *)(v1 + 192),
    *(_QWORD *)(v1 + 200),
    *(_QWORD *)(v1 + 208),
    *(_QWORD *)(v1 + 216),
    v5,
    *((_QWORD *)&v5 + 1),
    v6,
    *((_QWORD *)&v6 + 1),
    v7,
    *((_QWORD *)&v7 + 1),
    v8,
    *((_QWORD *)&v8 + 1),
    v9,
    *((_QWORD *)&v9 + 1),
    v10,
    *((_QWORD *)&v10 + 1),
    *(_QWORD *)(v1 + 320),
    *(_QWORD *)(v1 + 328),
    v11);
  return v1;
}

double sub_10063C8C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,char a43)
{
  char v47;
  double result;

  j__swift_release();
  if ((a43 & 1) != 0)
  {
    sub_1000D31B4(a7, a8, a9 & 1);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    sub_1000D31B4(a16, a17, a18 & 1);
    swift_bridgeObjectRelease();
    j__swift_release();
    sub_1000D31B4(a29, a30, a31 & 1);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    v47 = a40 & 1;
  }
  else
  {
    sub_1000D31B4(a9, a10, a11 & 1);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    a38 = a18;
    a39 = a19;
    v47 = a20 & 1;
  }
  sub_1000D31B4(a38, a39, v47);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_10063CABC(uint64_t result)
{
  *(_BYTE *)(result + 336) = 0;
  return result;
}

uint64_t sub_10063CAD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_BYTE *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 120);
  v8 = *(_BYTE *)(a1 + 128);
  j__swift_retain(*(_QWORD *)(a1 + 24));
  sub_1000D55D4(v2, v3, v4);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1000D55D4(v5, v6, v8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10063CB98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_BYTE *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 136);
  v6 = *(_QWORD *)(a1 + 144);
  v8 = *(_BYTE *)(a1 + 152);
  j__swift_retain(*(_QWORD *)(a1 + 48));
  sub_1000D55D4(v2, v3, v4);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1000D55D4(v5, v6, v8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10063CC5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_BYTE *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 136);
  v6 = *(_QWORD *)(a1 + 144);
  v8 = *(_BYTE *)(a1 + 152);
  j__swift_release();
  sub_1000D31B4(v2, v3, v4);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000D31B4(v5, v6, v8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10063CD20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_BYTE *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 120);
  v8 = *(_BYTE *)(a1 + 128);
  j__swift_release();
  sub_1000D31B4(v2, v3, v4);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000D31B4(v5, v6, v8);
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_10063CDE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF98E0;
  if (!qword_100BF98E0)
  {
    v1 = sub_100075EB0(&qword_100BF98D8);
    sub_10027248C((uint64_t)&unk_100BF98E8);
    sub_10007A100((uint64_t)&qword_100BDD7F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF98E0);
  }
  return result;
}

unint64_t sub_10063CE80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF98F8;
  if (!qword_100BF98F8)
  {
    v1 = sub_100075EB0(&qword_100BF98D0);
    sub_10027248C((uint64_t)&unk_100BF9900);
    sub_10027248C((uint64_t)&qword_100BC4E20);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF98F8);
  }
  return result;
}

uint64_t sub_10063CF1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 160);
  v3 = *(_QWORD *)(a1 + 168);
  v4 = *(_BYTE *)(a1 + 176);
  sub_1000D55D4(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000D55D4(v2, v3, v4);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_10063CFA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 136);
  v3 = *(_QWORD *)(a1 + 144);
  v4 = *(_BYTE *)(a1 + 152);
  sub_1000D31B4(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000D31B4(v2, v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_10063D02C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF9940;
  if (!qword_100BF9940)
  {
    v1 = sub_100075EB0(&qword_100BF9928);
    sub_10063D0C8((uint64_t)&unk_100BF9948);
    sub_10007A100((uint64_t)&qword_100BDD7F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF9940);
  }
  return result;
}

unint64_t sub_10063D0C8(uint64_t a1)
{
  unint64_t *v1;
  void (*v2)(void);
  unint64_t result;
  uint64_t *v4;
  uint64_t v5;

  result = sub_10009987C(a1);
  if (!result)
  {
    v5 = sub_1000B4444(0, v4);
    v2();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v5);
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_10063D120()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF9958;
  if (!qword_100BF9958)
  {
    v1 = sub_100075EB0(&qword_100BF9960);
    sub_100427EEC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF9958);
  }
  return result;
}

uint64_t type metadata accessor for GradientArcView(uint64_t a1)
{
  return sub_100098190(a1, qword_100BF99E8, (uint64_t)&nominal type descriptor for GradientArcView);
}

uint64_t *sub_10063D1A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a3;
    *a1 = *a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for PressureTrend(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = *(int *)(v6 + 24);
    v12 = (char *)v4 + v11;
    v13 = (char *)a2 + v11;
    v14 = *(_QWORD *)v13;
    LOBYTE(v6) = v13[8];
    sub_10008D47C(*(_QWORD *)v13, v6);
    *(_QWORD *)v12 = v14;
    v12[8] = v6;
  }
  return v4;
}

uint64_t sub_10063D268(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for PressureTrend(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return sub_1000B15F8(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_BYTE *)(a1 + *(int *)(a2 + 24) + 8));
}

_QWORD *sub_10063D2C4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a2;
  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for PressureTrend(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)v4 + v10;
  v13 = *(_QWORD *)v12;
  LOBYTE(v4) = v12[8];
  sub_10008D47C(*(_QWORD *)v12, (char)v4);
  *(_QWORD *)v11 = v13;
  v11[8] = (char)v4;
  return a1;
}

_QWORD *sub_10063D358(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v4 = a2;
  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for PressureTrend(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)v4 + v10;
  v13 = *(_QWORD *)v12;
  LOBYTE(v4) = v12[8];
  sub_10008D47C(*(_QWORD *)v12, (char)v4);
  v14 = *(_QWORD *)v11;
  v15 = v11[8];
  *(_QWORD *)v11 = v13;
  v11[8] = (char)v4;
  sub_1000B15F8(v14, v15);
  return a1;
}

_QWORD *sub_10063D3F8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for PressureTrend(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  return a1;
}

_QWORD *sub_10063D480(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for PressureTrend(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = *(_QWORD *)v12;
  LOBYTE(v12) = v12[8];
  v14 = *(_QWORD *)v11;
  v15 = v11[8];
  *(_QWORD *)v11 = v13;
  v11[8] = (char)v12;
  sub_1000B15F8(v14, v15);
  return a1;
}

uint64_t sub_10063D514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10063D520);
}

void sub_10063D520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1000DF640();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    sub_1000B250C(a1 + *(int *)(a3 + 20), a2, v6);
  }
  else
  {
    sub_10009C0DC(a1 + *(int *)(a3 + 24));
    sub_100079F70();
  }
}

uint64_t sub_10063D57C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10063D588);
}

void sub_10063D588(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_1000DF640();
  sub_10009D2E8();
  if (v7)
  {
    sub_100098D08();
    sub_1000987C4(v8, v9, v10, v11);
  }
  else
  {
    *(_BYTE *)(a1 + *(int *)(a4 + 24) + 8) = -a2;
    sub_100079F70();
  }
}

uint64_t sub_10063D5E4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for PressureTrend(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = "\t";
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_10063D664()
{
  sub_10027248C((uint64_t)&unk_100BF9A28);
}

void sub_10063D690()
{
  sub_10027248C((uint64_t)&unk_100BF9A38);
}

uint64_t sub_10063D6BC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABBE98, 1);
}

uint64_t sub_10063D6CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for GradientArcView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = v0 + v4 + *(int *)(v1 + 20);
  v9 = sub_1000DF640();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  sub_1000B15F8(*(_QWORD *)(v7 + *(int *)(v1 + 24)), *(_BYTE *)(v7 + *(int *)(v1 + 24) + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10063D760(uint64_t *a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for GradientArcView(0) - 8) + 80);
  return sub_10063B018(a1, (double *)(v3 + ((v7 + 16) & ~v7)), a2, a3);
}

unint64_t sub_10063D7B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF9A58;
  if (!qword_100BF9A58)
  {
    v1 = sub_100075EB0(&qword_100BF9A50);
    sub_10063D824();
    sub_10063D8A8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF9A58);
  }
  return result;
}

unint64_t sub_10063D824()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF9A60;
  if (!qword_100BF9A60)
  {
    v1 = sub_100075EB0(&qword_100BF9A48);
    sub_10027248C((uint64_t)&qword_100BDF818);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF9A60);
  }
  return result;
}

unint64_t sub_10063D8A8()
{
  unint64_t result;

  result = qword_100BF9A68;
  if (!qword_100BF9A68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _FlipForRTLEffect, &type metadata for _FlipForRTLEffect);
    atomic_store(result, (unint64_t *)&qword_100BF9A68);
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationPreviewTracker()
{
  return &type metadata for LocationPreviewTracker;
}

uint64_t sub_10063D8F4(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = a1;
  sub_10003C800(a2, v3 + 24);
  sub_10003C800(a3, v3 + 64);
  return v3;
}

uint64_t sub_10063D934(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v10;

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  DayWeather.date.getter(v5);
  v8 = static Date.== infix(_:_:)(v7, a2);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v8 & 1;
}

uint64_t sub_10063D9D4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = a1;
  v2 = sub_1000BA294(&qword_100BCB130);
  v3 = sub_10063DA84();
  dispatch thunk of Collection.startIndex.getter(v2, v3);
  dispatch thunk of Collection.endIndex.getter(v2, v3);
  v6 = v5;
  dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)(&v7, &v6, v2, v3);
  result = a1 + 1;
  if (__OFADD__(a1, 1))
    __break(1u);
  return result;
}

uint64_t sub_10063DA68(uint64_t a1)
{
  uint64_t v1;

  return sub_10063D934(a1, *(_QWORD *)(v1 + 16)) & 1;
}

unint64_t sub_10063DA84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCE7C0;
  if (!qword_100BCE7C0)
  {
    v1 = sub_100075EB0(&qword_100BCB130);
    result = swift_getWitnessTable(&protocol conformance descriptor for Forecast<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCE7C0);
  }
  return result;
}

uint64_t *sub_10063DAC8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = *(int *)(a3 + 28);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    swift_retain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v11))
    {
      v12 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v11);
    }
    v14 = sub_1000BA294(&qword_100BDD670);
    *(_QWORD *)&v9[*(int *)(v14 + 28)] = *(_QWORD *)&v10[*(int *)(v14 + 28)];
    v15 = *(int *)(a3 + 32);
    v16 = (char *)v4 + v15;
    v17 = (char *)a2 + v15;
    *v16 = *v17;
    *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
    swift_retain();
  }
  swift_retain();
  return v4;
}

double sub_10063DC04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  swift_release();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for Date(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  sub_1000BA294(&qword_100BDD670);
  swift_release();
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_10063DC94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(int *)(a3 + 28);
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for Date(0);
  swift_retain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10))
  {
    v11 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
  }
  v12 = sub_1000BA294(&qword_100BDD670);
  *(_QWORD *)&v8[*(int *)(v12 + 28)] = *(_QWORD *)&v9[*(int *)(v12 + 28)];
  v13 = *(int *)(a3 + 32);
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_BYTE *)v14 = *(_BYTE *)v15;
  *(_QWORD *)(v14 + 8) = *(_QWORD *)(v15 + 8);
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *sub_10063DDA8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_retain();
  swift_release();
  v7 = *(int *)(a3 + 28);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v10);
  v12 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10);
  if (!v11)
  {
    v13 = *(_QWORD *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v14 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
LABEL_7:
  v15 = sub_1000BA294(&qword_100BDD670);
  *(_QWORD *)&v8[*(int *)(v15 + 28)] = *(_QWORD *)&v9[*(int *)(v15 + 28)];
  swift_retain();
  swift_release();
  v16 = *(int *)(a3 + 32);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  *v17 = *v18;
  *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_10063DF28(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 28);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10))
  {
    v11 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
  }
  v12 = sub_1000BA294(&qword_100BDD670);
  *(_QWORD *)&v8[*(int *)(v12 + 28)] = *(_QWORD *)&v9[*(int *)(v12 + 28)];
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 32)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 32));
  return a1;
}

_OWORD *sub_10063E008(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_release();
  v7 = *(int *)(a3 + 28);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v10);
  v12 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10);
  if (!v11)
  {
    v13 = *(_QWORD *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v14 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
LABEL_7:
  v15 = sub_1000BA294(&qword_100BDD670);
  *(_QWORD *)&v8[*(int *)(v15 + 28)] = *(_QWORD *)&v9[*(int *)(v15 + 28)];
  swift_release();
  v16 = *(int *)(a3 + 32);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  *v17 = *v18;
  *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
  swift_release();
  return a1;
}

uint64_t sub_10063E160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10063E16C);
}

uint64_t sub_10063E16C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000BA294(&qword_100BDD670);
    return _s7Weather24LocationCompositionStateOwet_0(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_10063E1E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10063E1F0);
}

uint64_t sub_10063E1F0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_1000BA294(&qword_100BDD670);
    return _s7Weather24LocationCompositionStateOwst_0(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for TrackExposureModifier(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF9B80;
  if (!qword_100BF9B80)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TrackExposureModifier);
  return result;
}

void sub_10063E298(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for () + 64;
  sub_100154578(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = &unk_1009BA638;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

uint64_t sub_10063E328(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABBF80, 1);
}

uint64_t sub_10063E338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  void (*v31)(char *);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = type metadata accessor for DateInterval(0);
  v33 = *(_QWORD *)(v1 - 8);
  v34 = v1;
  __chkstk_darwin(v1);
  v32 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v3);
  v36 = (uint64_t)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v35 = (uint64_t)&v30 - v6;
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v30 - v8);
  v10 = type metadata accessor for Date(0);
  v37 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v30 - v14;
  __chkstk_darwin(v16);
  v18 = (char *)&v30 - v17;
  __chkstk_darwin(v19);
  v21 = (char *)&v30 - v20;
  type metadata accessor for TrackExposureModifier(0);
  v22 = sub_1000BA294(&qword_100BDD670);
  State.wrappedValue.getter(v9, v22);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10) == 1)
    return sub_1001C8EF4((uint64_t)v9);
  v24 = (*(uint64_t (**)(char *, _QWORD *, uint64_t))(v37 + 32))(v21, v9, v10);
  Date.init()(v24);
  if (*(double *)(v0 + 8) <= Date.distance(to:)(v18))
  {
    v31 = *(void (**)(char *))(v0 + 16);
    v25 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
    v25(v15, v21, v10);
    v25(v12, v18, v10);
    v26 = v32;
    DateInterval.init(start:end:)(v15, v12);
    v31(v26);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v26, v34);
  }
  v27 = v35;
  _s7Weather24LocationCompositionStateOwst_0(v35, 1, 1, v10);
  v28 = v36;
  sub_10007C714(v27, v36);
  State.wrappedValue.setter(v28, v22);
  sub_1001C8EF4(v27);
  v29 = *(void (**)(char *, uint64_t))(v37 + 8);
  v29(v18, v10);
  return ((uint64_t (*)(char *, uint64_t))v29)(v21, v10);
}

uint64_t sub_10063E608@<X0>(uint64_t a1@<X8>)
{
  double *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a1;
  v2 = type metadata accessor for TrackExposureModifier(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - v7;
  v9 = sub_1000BA294(&qword_100BF9BC8);
  v28 = *(_QWORD *)(v9 - 8);
  v29 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  sub_10063EB18((uint64_t)v1, (uint64_t)v8);
  v13 = *(unsigned __int8 *)(v3 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = v14 + v4;
  v16 = v13 | 7;
  v17 = swift_allocObject(&unk_100B86360, v15, v13 | 7);
  sub_10063EB60((uint64_t)v8, v17 + v14);
  v18 = sub_1000BA294(&qword_100BF9BD0);
  v19 = sub_10063EBD0();
  View.onScrollVisibilityChange(threshold:_:)(sub_10063EBA4, v17, v18, v19, v12);
  swift_release();
  sub_10063EB18((uint64_t)v1, (uint64_t)v8);
  v20 = swift_allocObject(&unk_100B86388, v15, v16);
  sub_10063EB60((uint64_t)v8, v20 + v14);
  sub_10063EB18((uint64_t)v1, (uint64_t)v5);
  v21 = swift_allocObject(&unk_100B863B0, v15, v16);
  sub_10063EB60((uint64_t)v5, v21 + v14);
  v23 = v28;
  v22 = v29;
  v24 = v30;
  (*(void (**)(uint64_t, char *, uint64_t))(v28 + 16))(v30, v11, v29);
  v25 = v24 + *(int *)(sub_1000BA294(&qword_100BF9BE0) + 36);
  *(_QWORD *)v25 = sub_10063EC18;
  *(_QWORD *)(v25 + 8) = v20;
  *(_QWORD *)(v25 + 16) = sub_10063EC38;
  *(_QWORD *)(v25 + 24) = v21;
  *(_QWORD *)(v25 + 32) = sub_1006D5DF4;
  *(_QWORD *)(v25 + 40) = 0;
  *(_BYTE *)(v25 + 48) = 0;
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v11, v22);
}

uint64_t sub_10063E834(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t v16;
  char *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[15];
  char v23;
  char v24;
  uint64_t v25;

  v4 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v4);
  v6 = &v22[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v10 = &v22[-v9];
  if ((a1 & 1) != 0)
  {
    Date.init()(v8);
    v11 = type metadata accessor for Date(0);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v11);
    v12 = type metadata accessor for TrackExposureModifier(0);
    sub_10007C714((uint64_t)v10, (uint64_t)v6);
    v13 = sub_1000BA294(&qword_100BDD670);
    State.wrappedValue.setter(v6, v13);
    sub_1001C8EF4((uint64_t)v10);
    v14 = (char *)(a2 + *(int *)(v12 + 32));
    v15 = *v14;
    v16 = *((_QWORD *)v14 + 1);
    v24 = v15;
    v25 = v16;
    v23 = 1;
  }
  else
  {
    sub_10063E338();
    v17 = (char *)(a2 + *(int *)(type metadata accessor for TrackExposureModifier(0) + 32));
    v18 = *v17;
    v19 = *((_QWORD *)v17 + 1);
    v24 = v18;
    v25 = v19;
    v23 = 0;
  }
  v20 = sub_1000BA294(&qword_100BC5608);
  return State.wrappedValue.setter(&v23, v20);
}

_QWORD *sub_10063E994(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;

  v2 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v2);
  v4 = &v19[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v7 = &v19[-v6];
  __chkstk_darwin(v8);
  v10 = &v19[-v9];
  v11 = (char *)(a1 + *(int *)(type metadata accessor for TrackExposureModifier(0) + 32));
  v12 = *v11;
  v13 = *((_QWORD *)v11 + 1);
  v19[8] = v12;
  v20 = v13;
  v14 = sub_1000BA294(&qword_100BC5608);
  result = State.wrappedValue.getter(&v21, v14);
  if (v21 == 1)
  {
    v16 = sub_1000BA294(&qword_100BDD670);
    State.wrappedValue.getter(v10, v16);
    v17 = type metadata accessor for Date(0);
    v18 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v17);
    result = (_QWORD *)sub_1001C8EF4((uint64_t)v10);
    if (v18 == 1)
    {
      Date.init()(result);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v17);
      sub_10007C714((uint64_t)v7, (uint64_t)v4);
      State.wrappedValue.setter(v4, v16);
      return (_QWORD *)sub_1001C8EF4((uint64_t)v7);
    }
  }
  return result;
}

uint64_t sub_10063EB18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TrackExposureModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10063EB60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TrackExposureModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10063EBA4(char a1)
{
  uint64_t v1;
  uint64_t v3;

  sub_1000BC7E0();
  sub_1000BA550();
  return sub_10063E834(a1, v1 + v3);
}

unint64_t sub_10063EBD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF9BD8;
  if (!qword_100BF9BD8)
  {
    v1 = sub_100075EB0(&qword_100BF9BD0);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF9BD8);
  }
  return result;
}

_QWORD *sub_10063EC18()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000BC7E0();
  sub_1000BA550();
  return sub_10063E994(v0 + v1);
}

uint64_t sub_10063EC38()
{
  sub_1000BC7E0();
  sub_1000BA550();
  return sub_10063E338();
}

unint64_t sub_10063EC64()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100BF9BE8;
  if (!qword_100BF9BE8)
  {
    v1 = sub_100075EB0(&qword_100BF9BE0);
    v2[0] = sub_100075EB0(&qword_100BF9BD0);
    v2[1] = sub_10063EBD0();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.onScrollVisibilityChange(threshold:_:)>>, 1);
    sub_100594F10();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF9BE8);
  }
  return result;
}

double sub_10063ECF8(uint64_t a1)
{
  return sub_10019E948(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 96));
}

uint64_t sub_10063ED40(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_BYTE *)(a2 + 96);
  sub_10019E9F4(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_BYTE *)(a1 + 96) = v16;
  return a1;
}

uint64_t sub_10063EE0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v25 = *(_QWORD *)(a2 + 72);
  v26 = *(_QWORD *)(a2 + 80);
  v27 = *(_QWORD *)(a2 + 88);
  v28 = *(_BYTE *)(a2 + 96);
  sub_10019E9F4(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v25, v26, v27, v28);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 80);
  v22 = *(_QWORD *)(a1 + 88);
  v23 = *(_BYTE *)(a1 + 96);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v25;
  *(_QWORD *)(a1 + 80) = v26;
  *(_QWORD *)(a1 + 88) = v27;
  *(_BYTE *)(a1 + 96) = v28;
  sub_10019E948(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, v22, v23);
  return a1;
}

uint64_t sub_10063EF08(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v3 = *(_BYTE *)(a2 + 96);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a1 + 88);
  v15 = *(_BYTE *)(a1 + 96);
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  v18 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v18;
  *(_BYTE *)(a1 + 96) = v3;
  sub_10019E948(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, v14, v15);
  return a1;
}

uint64_t sub_10063EF84(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 >= 0x7E && *(_BYTE *)(a1 + 97))
    {
      v2 = *(_DWORD *)a1 + 125;
    }
    else
    {
      v2 = ((*(unsigned __int8 *)(a1 + 96) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 96) >> 1) & 0x1F))) ^ 0x7F;
      if (v2 >= 0x7D)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return v2 + 1;
}

uint64_t sub_10063EFD0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 97) = 0;
    if (a2)
    {
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 96) = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t sub_10063F04C(uint64_t a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;

  v1 = *(unsigned __int8 *)(a1 + 96);
  v2 = (char)v1;
  v3 = v1 >> 6;
  if (v2 >= 0)
    return v3;
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_10063F06C(uint64_t result)
{
  *(_BYTE *)(result + 96) &= 0x3Fu;
  return result;
}

uint64_t sub_10063F07C(uint64_t result, unsigned int a2)
{
  char v2;

  if (a2 < 2)
  {
    v2 = *(_BYTE *)(result + 96) & 1 | ((_BYTE)a2 << 6);
  }
  else
  {
    *(_QWORD *)result = a2 - 2;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_QWORD *)(result + 88) = 0;
    v2 = 0x80;
  }
  *(_BYTE *)(result + 96) = v2;
  return result;
}

void type metadata accessor for NotificationSettingsViewModel()
{
  sub_100098884();
}

BOOL sub_10063F0CC(const void *a1, const void *a2)
{
  uint64_t v3;
  int v4;
  int8x8_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int8x8_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[96];
  char v19;
  _BYTE v20[104];
  _BYTE v21[96];
  char v22;
  _BYTE v23[96];
  uint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  unsigned __int8 v29;
  _BYTE v30[104];
  int8x16_t v31[2];
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  unsigned __int8 v36;
  _BYTE v37[96];

  sub_10019E8B0(a1, &v24);
  v3 = v24;
  v4 = v29 >> 6;
  if (v4)
  {
    if (v4 != 1)
    {
      v5 = sub_1000C2DA8(vorrq_s8(v25, v27), vorrq_s8(v26, v28));
      v9 = v6 | *(_QWORD *)&v5 | v8 | v7 | v3;
      if (v10 == 128 && v9 == 0)
      {
        sub_10019E8B0(a2, v31);
        if ((v36 & 0xC0) != 0x80
          || v36 != 128
          || *(_QWORD *)&sub_1000C2DA8(vorrq_s8(vorrq_s8(v32, v34), vorrq_s8(v33, v35)), vorrq_s8(v31[0], v31[1])))
        {
          return 0;
        }
      }
      else
      {
        sub_10019E8B0(a2, v31);
        if ((v36 & 0xC0) != 0x80)
          return 0;
        if (v36 != 128 || v31[0].i64[0] != 1)
          return 0;
        v13 = sub_1000C2DA8(vorrq_s8(v32, v34), vorrq_s8(v33, v35));
        if (*(_QWORD *)&v13 | v14 | v15 | v16)
          return 0;
      }
      return 1;
    }
    v29 &= 0x3Fu;
    sub_10019E8B0(&v24, v30);
    sub_10019E8B0(a2, v18);
    if ((v19 & 0xC0) == 0x40)
    {
      v19 &= 0x3Fu;
      sub_10019E8B0(v18, v20);
      sub_10019E8B0(v30, v31);
      if ((v36 & 1) != 0)
      {
        sub_1000B472C(v37, v31);
        sub_10019E8B0(v20, v21);
        if ((v22 & 1) == 0)
          return 0;
        sub_1000B472C(v23, v21);
        if ((sub_100544468((uint64_t)v37, (uint64_t)v23) & 1) == 0)
          return 0;
      }
      else
      {
        sub_1000BB2B8(v37, v31);
        sub_10019E8B0(v20, v21);
        if ((v22 & 1) != 0)
          return 0;
        sub_1000BB2B8(v23, v21);
        if ((sub_10063F414((uint64_t)v37, (uint64_t)v23) & 1) == 0)
          return 0;
      }
      return 1;
    }
  }
  else
  {
    v29 &= 0x3Fu;
    sub_10019E8B0(a2, v31);
    if (v36 > 0x3Fu || ((v3 ^ v31[0].u8[0]) & 1) != 0)
      return 0;
    if (BYTE1(v3) == 2)
    {
      if (v31[0].u8[1] == 2)
        return 1;
    }
    else
    {
      if (BYTE1(v3) != 3)
        return (v31[0].i8[1] & 0xFE) != 2 && ((((v3 & 0x100) == 0) ^ v31[0].u8[1]) & 1) != 0;
      if (v31[0].u8[1] == 3)
        return 1;
    }
  }
  return 0;
}

uint64_t sub_10063F35C(const void *a1, const void *a2)
{
  char v3;
  _BYTE v5[96];
  char v6;
  _BYTE v7[96];
  _BYTE v8[104];
  _BYTE v9[96];

  sub_10019E8B0(a1, v8);
  if ((v8[96] & 1) == 0)
  {
    sub_1000BB2B8(v9, v8);
    sub_10019E8B0(a2, v5);
    if ((v6 & 1) == 0)
    {
      sub_1000BB2B8(v7, v5);
      v3 = sub_10063F414((uint64_t)v9, (uint64_t)v7);
      return v3 & 1;
    }
    goto LABEL_5;
  }
  sub_1000B472C(v9, v8);
  sub_10019E8B0(a2, v5);
  if (v6 != 1)
  {
LABEL_5:
    v3 = 0;
    return v3 & 1;
  }
  sub_1000B472C(v7, v5);
  v3 = sub_100544468((uint64_t)v9, (uint64_t)v7);
  return v3 & 1;
}

uint64_t sub_10063F414(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  char v16;
  uint64_t result;
  BOOL v18;
  char v19;
  char v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v35;
  int v36;
  int v37;
  int v38;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(unsigned __int8 *)(a1 + 32);
  v9 = *(unsigned __int8 *)(a1 + 33);
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  v13 = *(unsigned __int8 *)(a2 + 32);
  v14 = *(unsigned __int8 *)(a2 + 33);
  v37 = *(unsigned __int8 *)(a2 + 34);
  v38 = *(unsigned __int8 *)(a1 + 34);
  v15 = v4 == *(_QWORD *)a2 && v5 == v10;
  v35 = *(unsigned __int8 *)(a2 + 35);
  v36 = *(unsigned __int8 *)(a1 + 35);
  if (v15 || (v16 = sub_100099264(v4, v5, *(_QWORD *)a2, v10), result = 0, (v16 & 1) != 0))
  {
    v18 = v6 == v11 && v7 == v12;
    if (v18 || (v19 = sub_100099264(v6, v7, v11, v12), result = 0, (v19 & 1) != 0))
    {
      if (((v8 ^ v13) & 1) != 0)
        return 0;
      if (((v9 ^ v14) & 1) != 0)
        return 0;
      if (((v38 ^ v37) & 1) != 0)
        return 0;
      if (((v36 ^ v35) & 1) != 0)
        return 0;
      sub_1009471F4();
      if ((v20 & 1) == 0)
        return 0;
      v21 = *(_BYTE *)(a2 + 48);
      v22 = LocationAuthorizationState.rawValue.getter(*(_BYTE *)(a1 + 48));
      v24 = v23;
      v25 = LocationAuthorizationState.rawValue.getter(v21);
      if (v22 == v25 && v24 == v26)
      {
        swift_bridgeObjectRelease_n(v24, 2);
      }
      else
      {
        v28 = v26;
        v29 = sub_100099264(v22, v24, v25, v26);
        swift_bridgeObjectRelease(v24);
        swift_bridgeObjectRelease(v28);
        result = 0;
        if ((v29 & 1) == 0)
          return result;
      }
      if ((sub_10009B650(*(unsigned __int8 *)(a1 + 49), *(unsigned __int8 *)(a2 + 49)) & 1) == 0
        || ((*(unsigned __int8 *)(a1 + 50) ^ *(unsigned __int8 *)(a2 + 50)) & 1) != 0
        || ((*(unsigned __int8 *)(a1 + 51) ^ *(unsigned __int8 *)(a2 + 51)) & 1) != 0)
      {
        return 0;
      }
      else
      {
        v30 = *(_QWORD *)(a1 + 56);
        v31 = *(_QWORD *)(a1 + 64);
        v32 = *(_QWORD *)(a2 + 56);
        v33 = *(_QWORD *)(a2 + 64);
        if (v30 == v32 && v31 == v33)
          return 1;
        else
          return _stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, v32, v33, 0);
      }
    }
  }
  return result;
}

BOOL sub_10063F5F8(const void *a1, const void *a2)
{
  _BYTE v4[104];
  _BYTE v5[104];

  sub_10019E8B0(a1, v4);
  sub_10019E8B0(a2, v5);
  return sub_10063F0CC(v4, v5);
}

uint64_t sub_10063F640(const void *a1, const void *a2)
{
  _BYTE v4[104];
  _BYTE v5[104];

  sub_10019E8B0(a1, v4);
  sub_10019E8B0(a2, v5);
  return sub_10063F35C(v4, v5) & 1;
}

double sub_10063F68C(uint64_t a1)
{
  return sub_10019E978(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 96));
}

uint64_t sub_10063F6D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_BYTE *)(a2 + 96);
  sub_10019EA24(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_BYTE *)(a1 + 96) = v16;
  return a1;
}

uint64_t sub_10063F7A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v25 = *(_QWORD *)(a2 + 72);
  v26 = *(_QWORD *)(a2 + 80);
  v27 = *(_QWORD *)(a2 + 88);
  v28 = *(_BYTE *)(a2 + 96);
  sub_10019EA24(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v25, v26, v27, v28);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 80);
  v22 = *(_QWORD *)(a1 + 88);
  v23 = *(_BYTE *)(a1 + 96);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v25;
  *(_QWORD *)(a1 + 80) = v26;
  *(_QWORD *)(a1 + 88) = v27;
  *(_BYTE *)(a1 + 96) = v28;
  sub_10019E978(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, v22, v23);
  return a1;
}

uint64_t sub_10063F89C(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v3 = *(_BYTE *)(a2 + 96);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a1 + 88);
  v15 = *(_BYTE *)(a1 + 96);
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  v18 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v18;
  *(_BYTE *)(a1 + 96) = v3;
  sub_10019E978(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, v14, v15);
  return a1;
}

uint64_t sub_10063F918(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 97))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 96);
      if (v3 <= 1)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10063F958(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 97) = 0;
    if (a2)
      *(_BYTE *)(result + 96) = -(char)a2;
  }
  return result;
}

uint64_t sub_10063F9B8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 96);
}

uint64_t sub_10063F9C0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 96) = a2 & 1;
  return result;
}

void type metadata accessor for NotificationSettingsViewNavigationModel()
{
  sub_100098884();
}

double sub_10063F9D8(_QWORD *a1)
{
  double result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1[8]).n128_u64[0];
  return result;
}

uint64_t sub_10063FA10(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t sub_10063FA84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 51);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t sub_10063FB68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v8);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 51);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRelease(v10);
  return a1;
}

void type metadata accessor for NotificationSettingsViewContentModel()
{
  sub_100098884();
}

_QWORD *sub_10063FC10(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v14 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    v6 = *(int *)(a3 + 20);
    v7 = (_QWORD *)(a1 + v6);
    v8 = (uint64_t *)((char *)a2 + v6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = sub_1000BA294(&qword_100BC2990);
    if (swift_getEnumCaseMultiPayload(v8) == 1)
    {
      v10 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, v8, v10);
      v11 = v7;
      v12 = v9;
      v13 = 1;
    }
    else
    {
      *v7 = *v8;
      swift_retain();
      v11 = v7;
      v12 = v9;
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v12, v13);
  }
  return v3;
}

double sub_10063FD04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  sub_1000BA294(&qword_100BC2990);
  if (swift_getEnumCaseMultiPayload(v4) == 1)
  {
    v5 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

uint64_t sub_10063FD84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v5 = *(int *)(a3 + 20);
  v6 = (_QWORD *)(a1 + v5);
  v7 = (_QWORD *)(a2 + v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = sub_1000BA294(&qword_100BC2990);
  if (swift_getEnumCaseMultiPayload(v7) == 1)
  {
    v9 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v6, v7, v9);
    v10 = 1;
  }
  else
  {
    *v6 = *v7;
    swift_retain();
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v6, v8, v10);
  return a1;
}

uint64_t sub_10063FE44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 20);
    v7 = (_QWORD *)(a1 + v6);
    v8 = (_QWORD *)(a2 + v6);
    sub_100021A14(a1 + v6, &qword_100BC2990);
    v9 = sub_1000BA294(&qword_100BC2990);
    if (swift_getEnumCaseMultiPayload(v8) == 1)
    {
      v10 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, v8, v10);
      v11 = 1;
    }
    else
    {
      *v7 = *v8;
      swift_retain();
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v7, v9, v11);
  }
  return a1;
}

uint64_t sub_10063FF48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 20);
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  v8 = sub_1000BA294(&qword_100BC2990);
  if (swift_getEnumCaseMultiPayload(v7) == 1)
  {
    v9 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v6, v7, v9);
    swift_storeEnumTagMultiPayload(v6, v8, 1);
  }
  else
  {
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10063FFF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 20);
    v7 = (void *)(a1 + v6);
    v8 = (const void *)(a2 + v6);
    sub_100021A14(a1 + v6, &qword_100BC2990);
    v9 = sub_1000BA294(&qword_100BC2990);
    if (swift_getEnumCaseMultiPayload(v8) == 1)
    {
      v10 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
      swift_storeEnumTagMultiPayload(v7, v9, 1);
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1006400E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006400F4);
}

void sub_1006400F4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000B26B8();
  if (v1)
  {
    sub_10003BCA4(*(_QWORD *)(v0 + 8));
    sub_100079F70();
  }
  else
  {
    sub_1000BA294(&qword_100BD8F08);
    v2 = sub_1000CFCD0();
    sub_1000B250C(v2, v3, v4);
  }
}

uint64_t sub_10064013C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100640148);
}

void sub_100640148()
{
  int v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000993A8();
  if (v2)
  {
    *(_QWORD *)(v1 + 8) = (v0 - 1);
    sub_100079F70();
  }
  else
  {
    sub_1000BA294(&qword_100BD8F08);
    sub_100098D08();
    sub_1000987C4(v3, v4, v5, v6);
  }
}

uint64_t type metadata accessor for ComparisonCapsuleView(uint64_t a1)
{
  return sub_100098190(a1, qword_100BF9C48, (uint64_t)&nominal type descriptor for ComparisonCapsuleView);
}

uint64_t sub_1006401AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100648E30(a1, a2, a3, (uint64_t (*)(uint64_t))sub_100335124);
}

uint64_t sub_1006401B8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABC09C, 1);
}

BOOL sub_1006401C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 8);
  if (!*(_QWORD *)(v1 + 16))
    return 0;
  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ComparisonCapsuleViewModel.Row(0) - 8) + 80);
  return *(_QWORD *)(v1 + ((v2 + 32) & ~v2) + 24) != 0;
}

void sub_10064021C(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;
  _BYTE *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  double (*v22)(char *, uint64_t);
  __n128 v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[4];

  v3 = v1;
  v31[2] = a1;
  v31[3] = sub_1000BA294(&qword_100BF9C80);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100094EC4();
  v5 = sub_1000BA294(&qword_100BF9C88);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100098728();
  v9 = v8 - v7;
  v31[1] = sub_1000BA294(&qword_100BF9C90);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = (_BYTE *)(v12 - v11);
  v14 = type metadata accessor for DynamicTypeSize(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)v31 - v19;
  type metadata accessor for ComparisonCapsuleView(0);
  sub_10010FD3C();
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DynamicTypeSize.accessibility1(_:), v14);
  v21 = static DynamicTypeSize.< infix(_:_:)(v20, v17);
  v22 = *(double (**)(char *, uint64_t))(v15 + 8);
  v22(v17, v14);
  v23.n128_f64[0] = v22(v20, v14);
  v24 = static Axis.Set.horizontal.getter(v23);
  if ((v21 & 1) != 0)
  {
    *v13 = v24;
    v25 = sub_1000BA294(&qword_100BF9CB0);
    sub_10064047C((uint64_t)v3, (uint64_t)&v13[*(int *)(v25 + 44)]);
    v26 = &qword_100BF9C90;
    sub_1000DA6E4((uint64_t)v13);
    swift_storeEnumTagMultiPayload(v9, v5, 0);
    sub_1000BD614((uint64_t)&unk_100BF9CA0);
    sub_1000BD614((uint64_t)&unk_100BF9CA8);
    sub_1000E72E8(v27);
    v28 = (uint64_t)v13;
  }
  else
  {
    *v2 = v24;
    v29 = sub_1000BA294(&qword_100BF9C98);
    sub_10064077C(v3, (uint64_t)&v2[*(int *)(v29 + 44)]);
    v26 = &qword_100BF9C80;
    sub_1000DA6E4((uint64_t)v2);
    sub_10009D768(v9);
    sub_1000BD614((uint64_t)&unk_100BF9CA0);
    sub_1000BD614((uint64_t)&unk_100BF9CA8);
    sub_1000E72E8(v30);
    v28 = (uint64_t)v2;
  }
  sub_100021A14(v28, v26);
  sub_100098640();
}

uint64_t sub_10064047C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v4 = type metadata accessor for ComparisonCapsuleCompactGridView(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v27 - v8;
  v10 = sub_1000BA294(&qword_100BF9CB8);
  __chkstk_darwin(v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v27 - v14;
  v16 = *(_BYTE *)a1;
  v17 = *(_QWORD *)(a1 + 8);
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *(_QWORD *)(a1 + 24);
  v20 = *(_QWORD *)(a1 + 32);
  if (sub_1006401C8())
  {
    v27 = 0x3FF0000000000000;
    v28 = 0x4010000000000000;
    v21 = sub_10010D1D0();
    swift_bridgeObjectRetain_n(v17, 3);
    swift_bridgeObjectRetain_n(v18, 3);
    ScaledValue.init(wrappedValue:step:)(&v28, &v27, &type metadata for Double, v21);
    v22 = &v15[*(int *)(v4 + 20)];
    *v22 = v16;
    *((_QWORD *)v22 + 1) = v17;
    *((_QWORD *)v22 + 2) = v18;
    *((_QWORD *)v22 + 3) = v19;
    *((_QWORD *)v22 + 4) = v20;
    v15[*(int *)(v4 + 24)] = 1;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 0, 1, v4);
  }
  else
  {
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 1, 1, v4);
    swift_bridgeObjectRetain_n(v17, 2);
    swift_bridgeObjectRetain_n(v18, 2);
  }
  v27 = 0x3FF0000000000000;
  v28 = 0x4010000000000000;
  v23 = sub_10010D1D0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ScaledValue.init(wrappedValue:step:)(&v28, &v27, &type metadata for Double, v23);
  v24 = &v9[*(int *)(v4 + 20)];
  *v24 = v16;
  *((_QWORD *)v24 + 1) = v17;
  *((_QWORD *)v24 + 2) = v18;
  *((_QWORD *)v24 + 3) = v19;
  *((_QWORD *)v24 + 4) = v20;
  v9[*(int *)(v4 + 24)] = 0;
  sub_100037768((uint64_t)v15, (uint64_t)v12, &qword_100BF9CB8);
  sub_100080C0C((uint64_t)v9, (uint64_t)v6, type metadata accessor for ComparisonCapsuleCompactGridView);
  *(_BYTE *)a2 = v16;
  *(_QWORD *)(a2 + 8) = v17;
  *(_QWORD *)(a2 + 16) = v18;
  *(_QWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = v20;
  *(_BYTE *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) = v16;
  *(_QWORD *)(a2 + 56) = v17;
  *(_QWORD *)(a2 + 64) = v18;
  *(_QWORD *)(a2 + 72) = v19;
  *(_QWORD *)(a2 + 80) = v20;
  *(_BYTE *)(a2 + 88) = 1;
  v25 = sub_1000BA294(&qword_100BF9CC0);
  sub_100037768((uint64_t)v12, a2 + *(int *)(v25 + 64), &qword_100BF9CB8);
  sub_100080C0C((uint64_t)v6, a2 + *(int *)(v25 + 80), type metadata accessor for ComparisonCapsuleCompactGridView);
  swift_bridgeObjectRetain_n(v17, 2);
  swift_bridgeObjectRetain_n(v18, 2);
  sub_1000215BC((uint64_t)v9, type metadata accessor for ComparisonCapsuleCompactGridView);
  sub_100021A14((uint64_t)v15, &qword_100BF9CB8);
  sub_1000215BC((uint64_t)v6, type metadata accessor for ComparisonCapsuleCompactGridView);
  sub_100021A14((uint64_t)v12, &qword_100BF9CB8);
  swift_bridgeObjectRelease_n(v18, 2);
  return swift_bridgeObjectRelease_n(v17, 2);
}

void sub_10064077C(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v50 = a2;
  v3 = type metadata accessor for ComparisonCapsuleCompactGridView(0);
  __chkstk_darwin(v3);
  v52 = (uint64_t)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v43 - v6;
  v8 = sub_1000BA294(&qword_100BF9CB8);
  __chkstk_darwin(v8);
  v51 = (uint64_t)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v43 - v11;
  v13 = 1;
  if (sub_1006401C8())
  {
    v14 = v7;
    v15 = *a1;
    v16 = *((_QWORD *)a1 + 1);
    v17 = *((_QWORD *)a1 + 2);
    v18 = *((_QWORD *)a1 + 3);
    v19 = *((_QWORD *)a1 + 4);
    v53 = 0x3FF0000000000000;
    v54 = 0x4010000000000000;
    v20 = sub_10010D1D0();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    ScaledValue.init(wrappedValue:step:)(&v54, &v53, &type metadata for Double, v20);
    v21 = &v12[*(int *)(v3 + 20)];
    *v21 = v15;
    v7 = v14;
    *((_QWORD *)v21 + 1) = v16;
    *((_QWORD *)v21 + 2) = v17;
    *((_QWORD *)v21 + 3) = v18;
    *((_QWORD *)v21 + 4) = v19;
    v12[*(int *)(v3 + 24)] = 1;
    v13 = 0;
  }
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, v13, 1, v3);
  v22 = *a1;
  v23 = *((_QWORD *)a1 + 1);
  v24 = *((_QWORD *)a1 + 2);
  v25 = *((_QWORD *)a1 + 3);
  v26 = *((_QWORD *)a1 + 4);
  v53 = 0x3FF0000000000000;
  v54 = 0x4010000000000000;
  v27 = sub_10010D1D0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ScaledValue.init(wrappedValue:step:)(&v54, &v53, &type metadata for Double, v27);
  v28 = &v7[*(int *)(v3 + 20)];
  *v28 = v22;
  *((_QWORD *)v28 + 1) = v23;
  *((_QWORD *)v28 + 2) = v24;
  *((_QWORD *)v28 + 3) = v25;
  *((_QWORD *)v28 + 4) = v26;
  v7[*(int *)(v3 + 24)] = 0;
  v29 = sub_1006401C8();
  v45 = v22;
  if (v29)
  {
    v48 = v25;
    v46 = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v49 = 1;
    v30 = v22;
    v31 = v23;
    v32 = v24;
  }
  else
  {
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v48 = 0;
    v46 = 0;
    v49 = 0;
  }
  v47 = v12;
  v33 = v51;
  sub_100037768((uint64_t)v12, v51, &qword_100BF9CB8);
  v34 = v52;
  sub_100080C0C((uint64_t)v7, v52, type metadata accessor for ComparisonCapsuleCompactGridView);
  v35 = v33;
  v36 = v50;
  sub_100037768(v35, v50, &qword_100BF9CB8);
  v37 = sub_1000BA294(&qword_100BF9CC8);
  v44 = v7;
  v38 = v37;
  sub_100080C0C(v34, v36 + *(int *)(v37 + 48), type metadata accessor for ComparisonCapsuleCompactGridView);
  v39 = v36 + *(int *)(v38 + 64);
  *(_QWORD *)v39 = v30;
  *(_QWORD *)(v39 + 8) = v31;
  v40 = v48;
  *(_QWORD *)(v39 + 16) = v32;
  *(_QWORD *)(v39 + 24) = v40;
  v41 = v45;
  *(_QWORD *)(v39 + 32) = v46;
  *(_BYTE *)(v39 + 40) = v49;
  v42 = v36 + *(int *)(v38 + 80);
  *(_BYTE *)v42 = v41;
  *(_QWORD *)(v42 + 8) = v23;
  *(_QWORD *)(v42 + 16) = v24;
  *(_QWORD *)(v42 + 24) = v25;
  *(_QWORD *)(v42 + 32) = v26;
  *(_BYTE *)(v42 + 40) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000E3404(v30, v31, v32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000215BC((uint64_t)v44, type metadata accessor for ComparisonCapsuleCompactGridView);
  sub_100021A14((uint64_t)v47, &qword_100BF9CB8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100590FB0(v30, v31, v32);
  sub_1000215BC(v52, type metadata accessor for ComparisonCapsuleCompactGridView);
  sub_100021A14(v51, &qword_100BF9CB8);
}

void sub_100640B34()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE v24[16];
  __int128 *v25;
  uint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = sub_1000BA294(&qword_100BF9EA8);
  __chkstk_darwin(v1);
  v3 = &v24[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = v0[1];
  v30 = *v0;
  v31 = v4;
  v32 = *((_QWORD *)v0 + 4);
  sub_1005B2034();
  v5 = v28;
  v6 = v29;
  sub_1000DB418(v27, v28);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 64))(v5, v6);
  v9 = v8;
  *(_QWORD *)v3 = static Alignment.center.getter(v7);
  *((_QWORD *)v3 + 1) = v10;
  *((_QWORD *)v3 + 2) = 0;
  v3[24] = 0;
  *((_QWORD *)v3 + 4) = v9;
  v3[40] = 0;
  sub_1000BA294(&qword_100BF9EB0);
  v33 = *((_QWORD *)&v30 + 1);
  v34 = v31;
  v26 = *((_QWORD *)&v30 + 1);
  v11 = (_OWORD *)swift_allocObject(&unk_100B86730, 57, 7);
  v12 = v0[1];
  v11[1] = *v0;
  v11[2] = v12;
  *(_OWORD *)((char *)v11 + 41) = *(__int128 *)((char *)v0 + 25);
  swift_bridgeObjectRetain();
  sub_100373040(&v33);
  sub_100373040(&v34);
  v13 = sub_1000BA294(&qword_100BF9D80);
  v14 = sub_1000BA294(&qword_100BF9EB8);
  sub_10034AEE4((uint64_t)&unk_100BF9D90);
  v16 = v15;
  sub_10034AEE4((uint64_t)&unk_100BF9EC0);
  v18 = v17;
  sub_10007A100((uint64_t)&unk_100BF9DA0);
  ForEach<>.init(_:content:)(&v26, sub_100647518, v11, v13, &type metadata for String, v14, v16, v18, v19);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v27);
  v25 = v0;
  v20 = sub_1000BA294(&qword_100BF9DF8);
  sub_10034AEE4((uint64_t)&unk_100BF9EC8);
  v22 = v21;
  v23 = sub_1006472C8();
  View.accessibilityChildren<A>(children:)(sub_100647520, v24, v1, v20, v22, v23);
  sub_100021A14((uint64_t)v3, &qword_100BF9EA8);
}

void sub_100640DA8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[3];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;

  v62 = a3;
  v58 = sub_1000BA294(&qword_100BF9DA8);
  __chkstk_darwin(v58);
  v56 = (uint64_t)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100BF9DB0);
  __chkstk_darwin(v6);
  v54 = (uint64_t)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v57 = (uint64_t)&v54 - v9;
  __chkstk_darwin(v10);
  v55 = (uint64_t)&v54 - v11;
  v12 = sub_1000BA294(&qword_100BD5E20);
  __chkstk_darwin(v12);
  v61 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v60 = (char *)&v54 - v15;
  v63 = type metadata accessor for ComparisonCapsuleViewModel.Row(0);
  __chkstk_darwin(v63);
  v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v54 - v19;
  v21 = (int *)type metadata accessor for ComparisonCapsuleRowView(0);
  __chkstk_darwin(v21);
  v59 = (char *)&v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (uint64_t *)((char *)&v54 - v24);
  v26 = *(_OWORD *)(a2 + 16);
  v68 = *(_OWORD *)a2;
  v69 = v26;
  v70 = *(_QWORD *)(a2 + 32);
  v27 = *((_QWORD *)&v68 + 1);
  v71 = v26;
  sub_100080C0C(a1, (uint64_t)v20, type metadata accessor for ComparisonCapsuleViewModel.Row);
  v28 = *(_BYTE *)(a2 + 40);
  *v25 = swift_getKeyPath(&unk_1009BAA08);
  v29 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  swift_storeEnumTagMultiPayload(v25, v29, 0);
  v64[0] = 0x4010000000000000;
  v67 = 0x3FF0000000000000;
  swift_bridgeObjectRetain();
  sub_100373040(&v71);
  v30 = sub_10010D1D0();
  ScaledValue.init(wrappedValue:step:)(v64, &v67, &type metadata for Double, v30);
  v31 = (char *)v25 + v21[6];
  v32 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v31 = *(_OWORD *)a2;
  *((_OWORD *)v31 + 1) = v32;
  *((_QWORD *)v31 + 4) = *(_QWORD *)(a2 + 32);
  sub_10007802C((uint64_t)v20, (uint64_t)v25 + v21[7], type metadata accessor for ComparisonCapsuleViewModel.Row);
  *((_BYTE *)v25 + v21[8]) = v28;
  sub_1005B2034();
  v33 = v65;
  v34 = v66;
  sub_1000DB418(v64, v65);
  v35 = v33;
  v36 = (uint64_t)v17;
  LOBYTE(a2) = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 104))(v35, v34);
  sub_100080C0C(a1, (uint64_t)v17, type metadata accessor for ComparisonCapsuleViewModel.Row);
  if ((a2 & 1) == 0)
  {
    sub_1000215BC((uint64_t)v17, type metadata accessor for ComparisonCapsuleViewModel.Row);
    goto LABEL_6;
  }
  v37 = (uint64_t)v17;
  v38 = v55;
  sub_100080C0C(v37, v55, type metadata accessor for ComparisonCapsuleViewModel.Row);
  v39 = v63;
  _s7Weather24LocationCompositionStateOwst_0(v38, 0, 1, v63);
  v40 = v57;
  sub_10020CC3C(v27, v57);
  v41 = v56;
  v42 = v56 + *(int *)(v58 + 48);
  sub_100037768(v38, v56, &qword_100BF9DB0);
  sub_100037768(v40, v42, &qword_100BF9DB0);
  if (_s7Weather24LocationCompositionStateOwet_0(v41, 1, v39) != 1)
  {
    v48 = v54;
    sub_100037768(v41, v54, &qword_100BF9DB0);
    if (_s7Weather24LocationCompositionStateOwet_0(v42, 1, v63) != 1)
    {
      sub_10007802C(v42, (uint64_t)v20, type metadata accessor for ComparisonCapsuleViewModel.Row);
      sub_1005B1EF8();
      v51 = v50;
      sub_1000215BC((uint64_t)v20, type metadata accessor for ComparisonCapsuleViewModel.Row);
      sub_100021A14(v40, &qword_100BF9DB0);
      sub_100021A14(v38, &qword_100BF9DB0);
      sub_1000215BC(v36, type metadata accessor for ComparisonCapsuleViewModel.Row);
      sub_1000215BC(v48, type metadata accessor for ComparisonCapsuleViewModel.Row);
      sub_100021A14(v41, &qword_100BF9DB0);
      v49 = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v64);
      v44 = (uint64_t)v61;
      v43 = v62;
      v46 = (uint64_t)v59;
      v45 = (uint64_t)v60;
      if ((v51 & 1) != 0)
        goto LABEL_7;
LABEL_12:
      Divider.init()(v49);
      v47 = 0;
      goto LABEL_13;
    }
    sub_100021A14(v40, &qword_100BF9DB0);
    sub_100021A14(v38, &qword_100BF9DB0);
    sub_1000215BC(v36, type metadata accessor for ComparisonCapsuleViewModel.Row);
    sub_1000215BC(v48, type metadata accessor for ComparisonCapsuleViewModel.Row);
LABEL_10:
    sub_100021A14(v41, &qword_100BF9DA8);
    v49 = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v64);
    v44 = (uint64_t)v61;
    v43 = v62;
    v46 = (uint64_t)v59;
    v45 = (uint64_t)v60;
    goto LABEL_12;
  }
  sub_100021A14(v40, &qword_100BF9DB0);
  sub_100021A14(v38, &qword_100BF9DB0);
  sub_1000215BC(v36, type metadata accessor for ComparisonCapsuleViewModel.Row);
  if (_s7Weather24LocationCompositionStateOwet_0(v42, 1, v63) != 1)
    goto LABEL_10;
  sub_100021A14(v41, &qword_100BF9DB0);
LABEL_6:
  v44 = (uint64_t)v61;
  v43 = v62;
  v46 = (uint64_t)v59;
  v45 = (uint64_t)v60;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v64);
LABEL_7:
  v47 = 1;
LABEL_13:
  v52 = type metadata accessor for Divider(0);
  _s7Weather24LocationCompositionStateOwst_0(v45, v47, 1, v52);
  sub_100080C0C((uint64_t)v25, v46, type metadata accessor for ComparisonCapsuleRowView);
  sub_100037768(v45, v44, &qword_100BD5E20);
  sub_100080C0C(v46, v43, type metadata accessor for ComparisonCapsuleRowView);
  v53 = sub_1000BA294(&qword_100BF9ED0);
  sub_100037768(v44, v43 + *(int *)(v53 + 48), &qword_100BD5E20);
  sub_100021A14(v45, &qword_100BD5E20);
  sub_1000215BC((uint64_t)v25, type metadata accessor for ComparisonCapsuleRowView);
  sub_100021A14(v44, &qword_100BD5E20);
  sub_1000215BC(v46, type metadata accessor for ComparisonCapsuleRowView);
}

uint64_t sub_1006413E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 8);
  swift_bridgeObjectRetain();
  v1 = sub_1000BA294(&qword_100BF9D80);
  v2 = sub_1000BA294(&qword_100BF9E18);
  sub_10034AEE4((uint64_t)&unk_100BF9D90);
  v4 = v3;
  v5 = sub_10064732C();
  sub_10007A100((uint64_t)&unk_100BF9DA0);
  return ForEach<>.init(_:content:)(&v8, sub_1006414B8, 0, v1, &type metadata for String, v2, v4, v5, v6);
}

void sub_1006414BC()
{
  sub_100640B34();
}

uint64_t sub_1006414F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  v3 = sub_1000BA294(&qword_100BFA0E8);
  return sub_100641538(v1, (_QWORD *)(a1 + *(int *)(v3 + 36)));
}

uint64_t sub_100641538@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(_QWORD);
  uint64_t v35;
  int v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char v40;
  void (*v41)(_QWORD, _QWORD);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(_QWORD, _QWORD);
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  void (*v115)(_QWORD, _QWORD, _QWORD);
  uint64_t v116;
  uint64_t v117;
  void (*v118)(_QWORD, _QWORD, _QWORD);
  unsigned __int8 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  __n128 v147;
  unsigned __int8 v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  double v152;
  double v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  __n128 v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  double v164;
  double v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  __int128 v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  uint64_t v190;
  __int128 v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  uint64_t v200;
  __n128 v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  char v206;
  double v207;
  uint64_t v208;
  int v209;
  double v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  double v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  double v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  char *v228;
  int v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v238;
  uint64_t v239;
  double v240;
  int v241;
  double v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  double v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  int v259;
  uint64_t KeyPath;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  void (*v268)(_QWORD, _QWORD, _QWORD);
  uint64_t v269;
  char *v270;
  uint64_t v271;
  double v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  _DWORD v279[2];
  _DWORD v280[2];
  _DWORD v281[2];
  _DWORD v282[2];
  _QWORD v283[17];
  uint64_t v284;
  uint64_t v285;
  char v286;
  _BYTE v287[7];
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  char v291;
  _BYTE v292[7];
  unint64_t v293;
  uint64_t v294;
  char v295;
  _BYTE v296[7];
  double v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  char v301;
  _BYTE v302[7];
  double v303;
  __int16 v304;
  _BYTE v305[7];
  _BYTE v306[7];
  _BYTE v307[7];
  _DWORD v308[5];
  __int128 v309;
  __int128 v310;
  uint64_t v311;
  __int128 v312;
  __int128 v313;
  uint64_t v314;
  __int128 v315;
  __int128 v316;
  uint64_t v317;
  __int128 v318;
  __int128 v319;
  uint64_t v320;
  __int128 v321;
  __int128 v322;
  uint64_t v323;
  __int128 v324;
  __int128 v325;
  uint64_t v326;
  __int128 v327;
  __int128 v328;
  uint64_t v329;
  __int128 v330;
  __int128 v331;
  uint64_t v332;
  __int128 v333;
  __int128 v334;
  uint64_t v335;

  v252 = a2;
  v3 = sub_1000BA294(&qword_100BFA0F0);
  __chkstk_darwin(v3);
  v250 = (uint64_t)&v238 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v249 = sub_1000BA294(&qword_100BFA0F8);
  __chkstk_darwin(v249);
  v254 = (uint64_t)&v238 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v251 = sub_1000BA294(&qword_100BFA100);
  __chkstk_darwin(v251);
  v277 = (uint64_t)&v238 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v276 = (uint64_t)&v238 - v8;
  v275 = type metadata accessor for ComparisonCapsuleRowView(0);
  __chkstk_darwin(v275);
  v274 = (uint64_t)&v238 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)&v10 = COERCE_DOUBLE(type metadata accessor for UserInterfaceSizeClass(0));
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v266 = (char *)&v238 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000BA294(&qword_100BC5E60);
  __chkstk_darwin(v13);
  v271 = (uint64_t)&v238 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v238 - v16;
  v18 = sub_1000BA294(&qword_100BC5A68);
  __chkstk_darwin(v18);
  v264 = (uint64_t)&v238 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v273 = (uint64_t)&v238 - v21;
  __chkstk_darwin(v22);
  v270 = (char *)&v238 - v23;
  __chkstk_darwin(v24);
  v26 = (char *)&v238 - v25;
  __chkstk_darwin(v27);
  v29 = (char *)&v238 - v28;
  __chkstk_darwin(v30);
  v32 = (char *)&v238 - v31;
  v278 = a1;
  sub_10011AA68(v33);
  v34 = *(void (**)(_QWORD))(v11 + 104);
  LODWORD(v267) = enum case for UserInterfaceSizeClass.regular(_:);
  v268 = (void (*)(_QWORD, _QWORD, _QWORD))v34;
  v34(v29);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v29, 0, 1, v10);
  v269 = v13;
  v35 = (uint64_t)&v17[*(int *)(v13 + 48)];
  sub_100037768((uint64_t)v32, (uint64_t)v17, &qword_100BC5A68);
  sub_100037768((uint64_t)v29, v35, &qword_100BC5A68);
  v36 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v17, 1, v10);
  v272 = *(double *)&v10;
  v265 = v11;
  if (v36 != 1)
  {
    sub_100037768((uint64_t)v17, (uint64_t)v26, &qword_100BC5A68);
    if (_s7Weather24LocationCompositionStateOwet_0(v35, 1, v10) != 1)
    {
      v38 = v266;
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v266, v35, v10);
      sub_10007A100((uint64_t)&qword_100BC5AB8);
      v40 = dispatch thunk of static Equatable.== infix(_:_:)(v26, v38, v10, v39);
      v41 = *(void (**)(_QWORD, _QWORD))(v11 + 8);
      v41(v38, v10);
      sub_100021A14((uint64_t)v29, &qword_100BC5A68);
      sub_100021A14((uint64_t)v32, &qword_100BC5A68);
      v41(v26, v10);
      sub_100021A14((uint64_t)v17, &qword_100BC5A68);
      v37 = v278;
      if ((v40 & 1) != 0)
        goto LABEL_8;
LABEL_10:
      v42 = v275;
      v48 = (uint64_t *)(v37 + *(int *)(v275 + 28));
      v46 = *v48;
      v47 = v48[1];
      swift_bridgeObjectRetain();
      goto LABEL_13;
    }
    sub_100021A14((uint64_t)v29, &qword_100BC5A68);
    sub_100021A14((uint64_t)v32, &qword_100BC5A68);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v26, v10);
LABEL_6:
    sub_100021A14((uint64_t)v17, &qword_100BC5E60);
    v37 = v278;
    goto LABEL_10;
  }
  sub_100021A14((uint64_t)v29, &qword_100BC5A68);
  sub_100021A14((uint64_t)v32, &qword_100BC5A68);
  if (_s7Weather24LocationCompositionStateOwet_0(v35, 1, v10) != 1)
    goto LABEL_6;
  sub_100021A14((uint64_t)v17, &qword_100BC5A68);
  v37 = v278;
LABEL_8:
  v43 = v274;
  v42 = v275;
  v44 = v37 + *(int *)(v275 + 28);
  v46 = *(_QWORD *)(v44 + 16);
  v45 = *(_QWORD *)(v44 + 24);
  sub_100080C0C(v37, v274, type metadata accessor for ComparisonCapsuleRowView);
  if (v45)
  {
    v47 = v45;
  }
  else
  {
    v49 = (uint64_t *)(v43 + *(int *)(v42 + 28));
    v46 = *v49;
    v47 = v49[1];
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  sub_1000215BC(v43, type metadata accessor for ComparisonCapsuleRowView);
LABEL_13:
  v284 = v46;
  v285 = v47;
  v50 = v37;
  v51 = sub_100114EF8();
  v52 = Text.init<A>(_:)(&v284, &type metadata for String, v51);
  v54 = v53;
  v56 = v55;
  v58 = v57 & 1;
  v59 = v50 + *(int *)(v42 + 24);
  v60 = *(_OWORD *)(v59 + 16);
  v333 = *(_OWORD *)v59;
  v334 = v60;
  v335 = *(_QWORD *)(v59 + 32);
  sub_1005B2034();
  v61 = v288;
  v62 = v289;
  sub_1000DB418(&v284, v288);
  v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 32))(v61, v62);
  v64 = Text.font(_:)(v63, v52, v54, v58, v56);
  v66 = v65;
  v274 = v67;
  v69 = v68 & 1;
  sub_1000D31B4(v52, v54, v58);
  swift_release();
  swift_bridgeObjectRelease();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v284);
  v70 = *(_OWORD *)(v59 + 16);
  v330 = *(_OWORD *)v59;
  v331 = v70;
  v332 = *(_QWORD *)(v59 + 32);
  sub_1005B2034();
  v71 = v288;
  v72 = v289;
  sub_1000DB418(&v284, v288);
  v283[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v72 + 8))(v71, v72);
  v73 = Text.foregroundStyle<A>(_:)(v283, v64, v66, v69, v274, &type metadata for Color, &protocol witness table for Color);
  v261 = v74;
  v262 = v73;
  v76 = v75;
  v263 = v77;
  v78 = v275;
  sub_1000D31B4(v64, v66, v69);
  swift_release();
  swift_bridgeObjectRelease();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v284);
  KeyPath = swift_getKeyPath(&unk_1009BA9A8);
  v79.n128_f64[0] = static UnitPoint.leading.getter(KeyPath);
  v247 = v80;
  v248 = v79.n128_u64[0];
  v81 = static Edge.Set.trailing.getter(v79);
  v259 = v81;
  v82 = *(int *)(v78 + 32);
  if (*(_BYTE *)(v278 + v82) == 1)
  {
    v83 = *(_OWORD *)(v59 + 16);
    v327 = *(_OWORD *)v59;
    v328 = v83;
    v329 = *(_QWORD *)(v59 + 32);
    sub_1005B2034();
    v84 = v288;
    v85 = v289;
    sub_1000DB418(&v284, v288);
    v86 = (*(double (**)(uint64_t, uint64_t))(v85 + 72))(v84, v85);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v284);
    goto LABEL_25;
  }
  LODWORD(v274) = v76;
  v87 = (uint64_t)v270;
  sub_10011AA68(v81);
  v88 = *(_QWORD *)&v272;
  v89 = v273;
  v268(v273, v267, *(_QWORD *)&v272);
  _s7Weather24LocationCompositionStateOwst_0(v89, 0, 1, v88);
  v90 = v271;
  v91 = v271 + *(int *)(v269 + 48);
  sub_100037768(v87, v271, &qword_100BC5A68);
  sub_100037768(v89, v91, &qword_100BC5A68);
  if (_s7Weather24LocationCompositionStateOwet_0(v90, 1, v88) != 1)
  {
    v92 = v264;
    sub_100037768(v90, v264, &qword_100BC5A68);
    if (_s7Weather24LocationCompositionStateOwet_0(v91, 1, v88) != 1)
    {
      v93 = v265;
      v94 = v266;
      (*(void (**)(char *, uint64_t, uint64_t))(v265 + 32))(v266, v91, v88);
      sub_10007A100((uint64_t)&qword_100BC5AB8);
      LODWORD(v269) = dispatch thunk of static Equatable.== infix(_:_:)(v92, v94, v88, v95);
      v96 = v92;
      v97 = v88;
      v98 = *(void (**)(_QWORD, _QWORD))(v93 + 8);
      v98(v94, v97);
      sub_100021A14(v273, &qword_100BC5A68);
      sub_100021A14(v87, &qword_100BC5A68);
      v98(v96, v97);
      sub_100021A14(v90, &qword_100BC5A68);
      v78 = v275;
      if ((v269 & 1) != 0)
        goto LABEL_22;
LABEL_23:
      v103 = *(_OWORD *)(v59 + 16);
      v327 = *(_OWORD *)v59;
      v328 = v103;
      v329 = *(_QWORD *)(v59 + 32);
      sub_1005B2034();
      v104 = v288;
      v105 = v289;
      sub_1000DB418(&v284, v288);
      v102 = (*(double (**)(uint64_t, uint64_t))(v105 + 80))(v104, v105);
      goto LABEL_24;
    }
    sub_100021A14(v273, &qword_100BC5A68);
    sub_100021A14(v87, &qword_100BC5A68);
    (*(void (**)(uint64_t, uint64_t))(v265 + 8))(v92, v88);
LABEL_20:
    sub_100021A14(v90, &qword_100BC5E60);
    v78 = v275;
    goto LABEL_23;
  }
  sub_100021A14(v89, &qword_100BC5A68);
  sub_100021A14(v87, &qword_100BC5A68);
  if (_s7Weather24LocationCompositionStateOwet_0(v91, 1, v88) != 1)
    goto LABEL_20;
  sub_100021A14(v90, &qword_100BC5A68);
  v78 = v275;
LABEL_22:
  v99 = *(_OWORD *)(v59 + 16);
  v327 = *(_OWORD *)v59;
  v328 = v99;
  v329 = *(_QWORD *)(v59 + 32);
  sub_1005B2034();
  v100 = v288;
  v101 = v289;
  sub_1000DB418(&v284, v288);
  v102 = (*(double (**)(uint64_t, uint64_t))(v101 + 88))(v100, v101);
LABEL_24:
  v86 = v102;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v284);
  LOBYTE(v76) = v274;
LABEL_25:
  v106 = EdgeInsets.init(_all:)(v86);
  v245 = v107;
  v246 = v106;
  v243 = v109;
  v244 = v108;
  v241 = *(unsigned __int8 *)(v278 + v82);
  v258 = v76 & 1;
  LOBYTE(v284) = v76 & 1;
  LOBYTE(v283[0]) = 0;
  LOBYTE(v324) = 0;
  if ((v241 & 1) != 0)
    v110 = 1.0;
  else
    v110 = 0.0;
  v242 = v110;
  v253 = v82;
  v326 = *(_QWORD *)(v59 + 32);
  v111 = *(_OWORD *)(v59 + 16);
  v324 = *(_OWORD *)v59;
  v325 = v111;
  *(_QWORD *)&v240 = v278 + *(int *)(v78 + 28);
  v112 = sub_1005B2190();
  if (v115)
  {
    v116 = v112;
    v117 = v113;
    v118 = v115;
    v119 = v114 & 1;
    v275 = v114 & 1;
    sub_1005B2034();
    v120 = v288;
    v121 = v289;
    sub_1000DB418(&v284, v288);
    v122 = (*(uint64_t (**)(uint64_t, uint64_t))(v121 + 40))(v120, v121);
    LOBYTE(v283[0]) = v119;
    *(double *)&v123 = COERCE_DOUBLE(Text.font(_:)(v122, v116, v117, v119, v118));
    v274 = v117;
    v272 = *(double *)&v123;
    v125 = v124;
    LOBYTE(v120) = v126;
    v128 = v127;
    swift_release();
    v129 = v120 & 1;
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v284);
    v130 = *(_OWORD *)(v59 + 16);
    v321 = *(_OWORD *)v59;
    v322 = v130;
    v323 = *(_QWORD *)(v59 + 32);
    sub_1005B2034();
    v131 = v288;
    v273 = v116;
    v132 = v289;
    sub_1000DB418(&v284, v288);
    v283[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v132 + 16))(v131, v132);
    v133 = *(_QWORD *)&v272;
    v134 = Text.foregroundStyle<A>(_:)(v283, *(_QWORD *)&v272, v125, v129, v128, &type metadata for Color, &protocol witness table for Color);
    v136 = v135;
    v271 = v137;
    v268 = v118;
    v139 = v138 & 1;
    sub_1000D31B4(v133, v125, v129);
    swift_release();
    swift_bridgeObjectRelease();
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v284);
    v141 = Text.monospacedDigit()(v134, v136, v139, v271, v140);
    v143 = v142;
    v264 = v144;
    LOBYTE(v125) = v145 & 1;
    sub_1000D31B4(v134, v136, v139);
    swift_bridgeObjectRelease();
    v146 = swift_getKeyPath(&unk_1009BA9A8);
    v148 = static Edge.Set.trailing.getter(v147);
    v149 = *(_OWORD *)(v59 + 16);
    v318 = *(_OWORD *)v59;
    v319 = v149;
    v320 = *(_QWORD *)(v59 + 32);
    sub_1005B2034();
    v150 = v288;
    v151 = v289;
    sub_1000DB418(&v284, v288);
    v152 = (*(double (**)(uint64_t, uint64_t))(v151 + 56))(v150, v151);
    v153 = EdgeInsets.init(_all:)(v152);
    LOBYTE(v283[0]) = v125;
    v271 = v154;
    v272 = v153;
    v269 = v156;
    v270 = v155;
    LOBYTE(v315) = 0;
    LOBYTE(v312) = 0;
    sub_1000D55D4(v141, v143, v125);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1000D31B4(v273, v274, v275);
    swift_bridgeObjectRelease();
    v274 = v143;
    v275 = v141;
    sub_1000D31B4(v141, v143, v125);
    v273 = v146;
    swift_release();
    swift_bridgeObjectRelease();
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v284);
    v268 = (void (*)(_QWORD, _QWORD, _QWORD))LOBYTE(v283[0]);
    v257 = v315;
    v267 = v312;
    v157 = 0x3FF0000000000000;
    if (!*(_BYTE *)(v278 + v253))
      v157 = 0;
    v266 = (char *)v157;
    LODWORD(v265) = 257;
    v255 = 1;
    v256 = v148;
  }
  else
  {
    v274 = 0;
    v275 = 0;
    v268 = 0;
    v269 = 0;
    v264 = 0;
    v272 = 0.0;
    v273 = 0;
    v255 = 0;
    v256 = 0;
    v257 = 0;
    v270 = 0;
    v271 = 0;
    v266 = 0;
    v267 = 0;
    LODWORD(v265) = 0;
  }
  v158 = v250;
  sub_10064292C(v278, v250);
  v159 = v254;
  sub_100037768(v158, v254, &qword_100BFA0F0);
  *(_BYTE *)(v159 + *(int *)(v249 + 36)) = 1;
  sub_100021A14(v158, &qword_100BFA0F0);
  LOBYTE(v158) = static Edge.Set.trailing.getter(v160);
  v161 = *(_OWORD *)(v59 + 16);
  v315 = *(_OWORD *)v59;
  v316 = v161;
  v317 = *(_QWORD *)(v59 + 32);
  sub_1005B2034();
  v162 = v288;
  v163 = v289;
  sub_1000DB418(&v284, v288);
  v164 = (*(double (**)(uint64_t, uint64_t))(v163 + 56))(v162, v163);
  v165 = EdgeInsets.init(_all:)(v164);
  v167 = v166;
  v169 = v168;
  v171 = v170;
  v172 = v277;
  sub_100037768(v159, v277, &qword_100BFA0F8);
  v173 = v172 + *(int *)(v251 + 36);
  *(_BYTE *)v173 = v158;
  *(double *)(v173 + 8) = v165;
  *(_QWORD *)(v173 + 16) = v167;
  *(_QWORD *)(v173 + 24) = v169;
  *(_QWORD *)(v173 + 32) = v171;
  *(_BYTE *)(v173 + 40) = 0;
  sub_100021A14(v159, &qword_100BFA0F8);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v284);
  sub_1000787D4(v172, v276, &qword_100BFA100);
  v174 = *(_OWORD *)(v59 + 16);
  v312 = *(_OWORD *)v59;
  v313 = v174;
  v314 = *(_QWORD *)(v59 + 32);
  v175 = sub_1005B24D4();
  v177 = v176;
  v179 = v178;
  v181 = v180 & 1;
  sub_1005B2034();
  v182 = v288;
  v183 = v289;
  sub_1000DB418(&v284, v288);
  v184 = (*(uint64_t (**)(uint64_t, uint64_t))(v183 + 48))(v182, v183);
  v185 = Text.font(_:)(v184, v175, v177, v181, v179);
  v187 = v186;
  v254 = v188;
  v190 = v189 & 1;
  sub_1000D31B4((uint64_t)v175, v177, v181);
  swift_release();
  swift_bridgeObjectRelease();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v284);
  v191 = *(_OWORD *)(v59 + 16);
  v309 = *(_OWORD *)v59;
  v310 = v191;
  v311 = *(_QWORD *)(v59 + 32);
  sub_1005B2034();
  v192 = v288;
  v193 = v289;
  sub_1000DB418(&v284, v288);
  v283[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v193 + 24))(v192, v193);
  v194 = Text.foregroundStyle<A>(_:)(v283, v185, v187, v190, v254, &type metadata for Color, &protocol witness table for Color);
  v196 = v195;
  v198 = v197;
  v200 = v199 & 1;
  sub_1000D31B4(v185, v187, v190);
  swift_release();
  swift_bridgeObjectRelease();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v284);
  v202 = Text.monospacedDigit()(v194, v196, v200, v198, v201);
  v249 = v203;
  v250 = v202;
  v251 = v204;
  v206 = v205 & 1;
  sub_1000D31B4(v194, v196, v200);
  swift_bridgeObjectRelease();
  v254 = swift_getKeyPath(&unk_1009BA9A8);
  v207 = static UnitPoint.trailing.getter(v254);
  v239 = v208;
  v240 = v207;
  v209 = *(unsigned __int8 *)(v278 + v253);
  v282[0] = v308[0];
  if (v209)
    v210 = 1.0;
  else
    v210 = 0.0;
  *(_DWORD *)((char *)v282 + 3) = *(_DWORD *)((char *)v308 + 3);
  v281[0] = *(_DWORD *)v307;
  *(_DWORD *)((char *)v281 + 3) = *(_DWORD *)&v307[3];
  v280[0] = *(_DWORD *)v306;
  *(_DWORD *)((char *)v280 + 3) = *(_DWORD *)&v306[3];
  *(_DWORD *)((char *)v279 + 3) = *(_DWORD *)&v305[3];
  v279[0] = *(_DWORD *)v305;
  v211 = v277;
  sub_100037768(v276, v277, &qword_100BFA100);
  v283[0] = v262;
  v283[1] = v261;
  LOBYTE(v283[2]) = v258;
  *(_DWORD *)((char *)&v283[2] + 1) = v308[0];
  HIDWORD(v283[2]) = *(_DWORD *)((char *)v308 + 3);
  v283[3] = v263;
  v283[4] = KeyPath;
  v283[5] = 1;
  LOBYTE(v283[6]) = 0;
  *(_DWORD *)((char *)&v283[6] + 1) = *(_DWORD *)v307;
  HIDWORD(v283[6]) = *(_DWORD *)&v307[3];
  v213 = v247;
  v212 = v248;
  v283[7] = v248;
  v283[8] = v247;
  LOBYTE(v283[9]) = v259;
  HIDWORD(v283[9]) = *(_DWORD *)&v306[3];
  *(_DWORD *)((char *)&v283[9] + 1) = *(_DWORD *)v306;
  v215 = v245;
  v214 = v246;
  *(double *)&v283[10] = v246;
  v283[11] = v245;
  v217 = v243;
  v216 = v244;
  v283[12] = v244;
  v283[13] = v243;
  LOBYTE(v283[14]) = 0;
  *(_DWORD *)((char *)&v283[14] + 1) = *(_DWORD *)v305;
  HIDWORD(v283[14]) = *(_DWORD *)&v305[3];
  v218 = v242;
  *(double *)&v283[15] = v242;
  LOWORD(v283[16]) = 257;
  v219 = v252;
  memcpy(v252, v283, 0x82uLL);
  v219[17] = 0;
  *((_BYTE *)v219 + 144) = 0;
  *((_BYTE *)v219 + 145) = v241 ^ 1;
  v220 = v274;
  v219[19] = v275;
  v219[20] = v220;
  v221 = v269;
  v222 = v264;
  v219[21] = v268;
  v219[22] = v222;
  v223 = v255;
  v219[23] = v273;
  v219[24] = v223;
  v224 = v256;
  v219[25] = v257;
  v219[26] = v224;
  v226 = v270;
  v225 = v271;
  *((double *)v219 + 27) = v272;
  v219[28] = v225;
  v219[29] = v226;
  v219[30] = v221;
  v269 = v221;
  v270 = v226;
  v228 = v266;
  v227 = v267;
  v219[31] = v267;
  v219[32] = v228;
  v266 = v228;
  v267 = v227;
  v229 = v265;
  *((_WORD *)v219 + 132) = v265;
  LODWORD(v265) = v229;
  v230 = sub_1000BA294(&qword_100BFA108);
  sub_100037768(v211, (uint64_t)v219 + *(int *)(v230 + 80), &qword_100BFA100);
  v231 = (char *)v219 + *(int *)(v230 + 96);
  v233 = v249;
  v232 = v250;
  *(_QWORD *)v231 = v250;
  *((_QWORD *)v231 + 1) = v233;
  v231[16] = v206;
  v234 = v254;
  *((_QWORD *)v231 + 3) = v251;
  *((_QWORD *)v231 + 4) = v234;
  *((_QWORD *)v231 + 5) = 1;
  v231[48] = 0;
  v235 = v239;
  *((double *)v231 + 7) = v240;
  *((_QWORD *)v231 + 8) = v235;
  *((double *)v231 + 9) = v210;
  *((_WORD *)v231 + 40) = 257;
  sub_10064A54C((uint64_t)v283);
  v236 = v264;
  sub_10036A850(v275, v274, (char)v268, v264);
  sub_1000D55D4(v232, v233, v206);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100021A14(v276, &qword_100BFA100);
  sub_1000D31B4(v232, v233, v206);
  swift_release();
  swift_bridgeObjectRelease();
  sub_100021A14(v277, &qword_100BFA100);
  sub_1004F783C(v275, v274, (char)v268, v236);
  v284 = v262;
  v285 = v261;
  v286 = v258;
  *(_DWORD *)v287 = v282[0];
  *(_DWORD *)&v287[3] = *(_DWORD *)((char *)v282 + 3);
  v288 = v263;
  v289 = KeyPath;
  v290 = 1;
  v291 = 0;
  *(_DWORD *)v292 = v281[0];
  *(_DWORD *)&v292[3] = *(_DWORD *)((char *)v281 + 3);
  v293 = v212;
  v294 = v213;
  v295 = v259;
  *(_DWORD *)&v296[3] = *(_DWORD *)((char *)v280 + 3);
  *(_DWORD *)v296 = v280[0];
  v297 = v214;
  v298 = v215;
  v299 = v216;
  v300 = v217;
  v301 = 0;
  *(_DWORD *)&v302[3] = *(_DWORD *)((char *)v279 + 3);
  *(_DWORD *)v302 = v279[0];
  v303 = v218;
  v304 = 257;
  return sub_10064A598((uint64_t)&v284);
}

void sub_10064292C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD __src[7];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v69 = a2;
  v64 = sub_1000BA294(&qword_100BFA110);
  __chkstk_darwin(v64);
  v4 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_1000BA294(&qword_100BFA118);
  __chkstk_darwin(v67);
  v65 = (uint64_t)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v66 = (uint64_t)&v62 - v7;
  v68 = sub_1000BA294(&qword_100BFA120);
  __chkstk_darwin(v68);
  v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CapsuleView(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v62 - v14;
  v16 = sub_1000BA294(&qword_100BFA128);
  __chkstk_darwin(v16);
  v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v62 - v20;
  v22 = (int *)type metadata accessor for ComparisonCapsuleRowView(0);
  v23 = (__int128 *)(a1 + v22[6]);
  if (*(_BYTE *)(a1 + v22[8]) == 1)
  {
    v24 = v23[1];
    v71 = *v23;
    v72 = v24;
    *(_QWORD *)&v73 = *((_QWORD *)v23 + 4);
    v77 = *((_QWORD *)&v71 + 1);
    v78 = v24;
    sub_100080C0C(a1 + v22[7], (uint64_t)&v15[*(int *)(v10 + 20)], type metadata accessor for ComparisonCapsuleViewModel.Row);
    v25 = v72;
    *(_OWORD *)v15 = v71;
    *((_OWORD *)v15 + 1) = v25;
    *((_QWORD *)v15 + 4) = v73;
    sub_100373040(&v77);
    sub_100373040(&v78);
    sub_1005B2034();
    v26 = *((_QWORD *)&v75 + 1);
    v27 = v76;
    sub_1000DB418(&v74, *((uint64_t *)&v75 + 1));
    v28 = (*(double (**)(uint64_t, uint64_t))(v27 + 96))(v26, v27);
    v29 = sub_1000BA294(&qword_100BDD668);
    v30 = ScaledValue.wrappedValue.getter(__src, v29);
    v31 = *(_QWORD *)&__src[0];
    static Alignment.center.getter(v30);
    _FrameLayout.init(width:height:alignment:)(*(_QWORD *)&v28, 0, v31, 0);
    sub_100080C0C((uint64_t)v15, (uint64_t)v18, type metadata accessor for CapsuleView);
    v32 = &v18[*(int *)(v16 + 36)];
    v33 = __src[1];
    *(_OWORD *)v32 = __src[0];
    *((_OWORD *)v32 + 1) = v33;
    *((_OWORD *)v32 + 2) = __src[2];
    sub_1000215BC((uint64_t)v15, type metadata accessor for CapsuleView);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v74);
    v34 = &qword_100BFA128;
    sub_1000787D4((uint64_t)v18, (uint64_t)v21, &qword_100BFA128);
    sub_100037768((uint64_t)v21, (uint64_t)v9, &qword_100BFA128);
    swift_storeEnumTagMultiPayload(v9, v68, 0);
    sub_10064A668((uint64_t)&unk_100BFA130);
    v36 = v35;
    v37 = sub_10064A5E4();
    _ConditionalContent<>.init(storage:)(v9, v16, v67, v36, v37);
    v38 = (uint64_t)v21;
  }
  else
  {
    v63 = v16;
    v39 = (uint64_t)v9;
    v40 = v67;
    v41 = v23[1];
    v74 = *v23;
    v75 = v41;
    v76 = *((_QWORD *)v23 + 4);
    v77 = *((_QWORD *)&v74 + 1);
    v78 = v41;
    sub_100080C0C(a1 + v22[7], (uint64_t)&v12[*(int *)(v10 + 20)], type metadata accessor for ComparisonCapsuleViewModel.Row);
    v42 = v75;
    *(_OWORD *)v12 = v74;
    *((_OWORD *)v12 + 1) = v42;
    *((_QWORD *)v12 + 4) = v76;
    sub_100373040(&v77);
    sub_100373040(&v78);
    sub_1005B2034();
    v43 = *((_QWORD *)&v72 + 1);
    v44 = v73;
    sub_1000DB418(&v71, *((uint64_t *)&v72 + 1));
    v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 96))(v43, v44);
    v47 = v46;
    v48 = static Alignment.center.getter(v45);
    v61 = 1;
    v60 = 1;
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(__src, v47, 0, 0, 1, 0, 1, 0, 1, 0, v60, 0, v61, v48, v49);
    sub_100080C0C((uint64_t)v12, (uint64_t)v4, type metadata accessor for CapsuleView);
    memcpy(&v4[*(int *)(v64 + 36)], __src, 0x70uLL);
    sub_1000215BC((uint64_t)v12, type metadata accessor for CapsuleView);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v71);
    v50 = sub_1000BA294(&qword_100BDD668);
    v51 = ScaledValue.wrappedValue.getter(&v71, v50);
    v52 = v71;
    static Alignment.center.getter(v51);
    _FrameLayout.init(width:height:alignment:)(0, 1, v52, 0);
    v53 = v65;
    sub_100037768((uint64_t)v4, v65, &qword_100BFA110);
    v54 = (_OWORD *)(v53 + *(int *)(v40 + 36));
    v55 = v72;
    *v54 = v71;
    v54[1] = v55;
    v54[2] = v73;
    sub_100021A14((uint64_t)v4, &qword_100BFA110);
    v34 = &qword_100BFA118;
    v56 = v66;
    sub_1000787D4(v53, v66, &qword_100BFA118);
    sub_100037768(v56, v39, &qword_100BFA118);
    swift_storeEnumTagMultiPayload(v39, v68, 1);
    sub_10064A668((uint64_t)&unk_100BFA130);
    v58 = v57;
    v59 = sub_10064A5E4();
    _ConditionalContent<>.init(storage:)(v39, v63, v40, v58, v59);
    v38 = v56;
  }
  sub_100021A14(v38, v34);
}

void sub_100642F94(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD v26[2];
  _BYTE v27[16];
  uint64_t v28;
  uint64_t v29;

  v2 = v1;
  v26[1] = a1;
  v3 = type metadata accessor for ComparisonCapsuleCompactGridView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BF9DD8);
  __chkstk_darwin(v7);
  v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v9 = static Alignment.center.getter(v10);
  *((_QWORD *)v9 + 1) = v11;
  *((_QWORD *)v9 + 2) = 0;
  v9[24] = 0;
  *((_QWORD *)v9 + 4) = 0x4020000000000000;
  v9[40] = 0;
  sub_1000BA294(&qword_100BF9DE0);
  v29 = *(_QWORD *)(v2 + *(int *)(v3 + 20) + 8);
  sub_100080C0C(v2, (uint64_t)v6, type metadata accessor for ComparisonCapsuleCompactGridView);
  v12 = *(unsigned __int8 *)(v4 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = swift_allocObject(&unk_100B86708, v13 + v5, v12 | 7);
  sub_10007802C((uint64_t)v6, v14 + v13, type metadata accessor for ComparisonCapsuleCompactGridView);
  swift_bridgeObjectRetain();
  v15 = sub_1000BA294(&qword_100BF9D80);
  v16 = sub_1000BA294(&qword_100BF9DE8);
  sub_10034AEE4((uint64_t)&unk_100BF9D90);
  v18 = v17;
  sub_10034AEE4((uint64_t)&unk_100BF9DF0);
  v20 = v19;
  sub_10007A100((uint64_t)&unk_100BF9DA0);
  ForEach<>.init(_:content:)(&v29, sub_100647274, v14, v15, &type metadata for String, v16, v18, v20, v21);
  v28 = v2;
  v22 = sub_1000BA294(&qword_100BF9DF8);
  sub_10034AEE4((uint64_t)&unk_100BF9E00);
  v24 = v23;
  v25 = sub_1006472C8();
  View.accessibilityChildren<A>(children:)(sub_1006472C0, v27, v7, v22, v24, v25);
  sub_100021A14((uint64_t)v9, &qword_100BF9DD8);
}

void sub_100643204(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  _QWORD *v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  char *v91;
  _QWORD v92[3];
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int8 v96;
  _QWORD v97[2];
  unsigned __int8 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int8 v102;
  uint64_t v103;
  unsigned __int8 v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;

  v84 = a3;
  v73 = sub_1000BA294(&qword_100BF9DA8);
  __chkstk_darwin(v73);
  v74 = (uint64_t)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100BF9DB0);
  __chkstk_darwin(v6);
  v70 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v72 = (uint64_t)&v68 - v9;
  __chkstk_darwin(v10);
  v71 = (uint64_t)&v68 - v11;
  v12 = type metadata accessor for ComparisonCapsuleCompactGridView(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for ComparisonCapsuleViewModel.Row(0);
  __chkstk_darwin(v83);
  v69 = (uint64_t)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v68 - v17;
  v19 = sub_1000BA294(&qword_100BD5E20);
  __chkstk_darwin(v19);
  v82 = (char *)&v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v80 = (char *)&v68 - v22;
  v23 = sub_1000BA294(&qword_100BF9E20);
  __chkstk_darwin(v23);
  v81 = (char *)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v27 = (char *)&v68 - v26;
  __chkstk_darwin(v28);
  v30 = (char *)&v68 - v29;
  v95 = 0;
  v96 = 1;
  sub_100643B48(a2, a1, (uint64_t)v97);
  v76 = v95;
  v75 = v96;
  v77 = v97[0];
  v90 = v97[1];
  v89 = v98;
  v79 = v99;
  v78 = v100;
  v88 = v101;
  v87 = v102;
  v86 = v103;
  v85 = v104;
  v31 = v105;
  v32 = v106;
  *(_QWORD *)v27 = 0;
  v33 = (uint64_t)&v27[*(int *)(v23 + 36)];
  v27[8] = 1;
  sub_100643D7C(a2, (uint64_t)a1, v33);
  v91 = v30;
  v34 = (uint64_t)v30;
  v35 = v12;
  sub_1000787D4((uint64_t)v27, v34, &qword_100BF9E20);
  v36 = a2 + *(int *)(v12 + 20);
  v109 = *(_QWORD *)(v36 + 32);
  v37 = *(_OWORD *)(v36 + 16);
  v107 = *(_OWORD *)v36;
  v108 = v37;
  sub_1005B2034();
  v38 = v93;
  v39 = v94;
  sub_1000DB418(v92, v93);
  v40 = v38;
  v41 = (uint64_t)v14;
  LOBYTE(v12) = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 104))(v40, v39);
  sub_100080C0C((uint64_t)a1, (uint64_t)v18, type metadata accessor for ComparisonCapsuleViewModel.Row);
  sub_100080C0C(a2, (uint64_t)v14, type metadata accessor for ComparisonCapsuleCompactGridView);
  if ((v12 & 1) == 0)
  {
    sub_1000215BC((uint64_t)v14, type metadata accessor for ComparisonCapsuleCompactGridView);
    sub_1000215BC((uint64_t)v18, type metadata accessor for ComparisonCapsuleViewModel.Row);
    v49 = (uint64_t)v82;
    v51 = (uint64_t)v81;
    v52 = (uint64_t)v80;
    v53 = v79;
    v54 = v78;
    v55 = v77;
    v56 = v76;
    v50 = v75;
    goto LABEL_6;
  }
  v42 = (uint64_t)v70;
  v43 = v71;
  sub_100080C0C((uint64_t)v18, v71, type metadata accessor for ComparisonCapsuleViewModel.Row);
  v44 = v83;
  _s7Weather24LocationCompositionStateOwst_0(v43, 0, 1, v83);
  v45 = v72;
  sub_10020CC3C(*(_QWORD *)(v41 + *(int *)(v35 + 20) + 8), v72);
  v46 = v74;
  v47 = v74 + *(int *)(v73 + 48);
  sub_100037768(v43, v74, &qword_100BF9DB0);
  sub_100037768(v45, v47, &qword_100BF9DB0);
  if (_s7Weather24LocationCompositionStateOwet_0(v46, 1, v44) != 1)
  {
    v58 = v42;
    sub_100037768(v46, v42, &qword_100BF9DB0);
    if (_s7Weather24LocationCompositionStateOwet_0(v47, 1, v83) != 1)
    {
      v60 = v69;
      sub_10007802C(v47, v69, type metadata accessor for ComparisonCapsuleViewModel.Row);
      sub_1005B1EF8();
      v62 = v61;
      sub_1000215BC(v60, type metadata accessor for ComparisonCapsuleViewModel.Row);
      sub_100021A14(v45, &qword_100BF9DB0);
      sub_100021A14(v43, &qword_100BF9DB0);
      sub_1000215BC(v41, type metadata accessor for ComparisonCapsuleCompactGridView);
      sub_1000215BC((uint64_t)v18, type metadata accessor for ComparisonCapsuleViewModel.Row);
      sub_1000215BC(v58, type metadata accessor for ComparisonCapsuleViewModel.Row);
      sub_100021A14(v46, &qword_100BF9DB0);
      v59 = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v92);
      v49 = (uint64_t)v82;
      v51 = (uint64_t)v81;
      v52 = (uint64_t)v80;
      v53 = v79;
      v54 = v78;
      v55 = v77;
      v56 = v76;
      v50 = v75;
      if ((v62 & 1) != 0)
        goto LABEL_7;
LABEL_12:
      Divider.init()(v59);
      v57 = 0;
      goto LABEL_13;
    }
    sub_100021A14(v45, &qword_100BF9DB0);
    sub_100021A14(v43, &qword_100BF9DB0);
    sub_1000215BC(v41, type metadata accessor for ComparisonCapsuleCompactGridView);
    sub_1000215BC((uint64_t)v18, type metadata accessor for ComparisonCapsuleViewModel.Row);
    sub_1000215BC(v42, type metadata accessor for ComparisonCapsuleViewModel.Row);
    v49 = (uint64_t)v82;
    v50 = v75;
LABEL_10:
    sub_100021A14(v46, &qword_100BF9DA8);
    v59 = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v92);
    v51 = (uint64_t)v81;
    v52 = (uint64_t)v80;
    v53 = v79;
    v54 = v78;
    v55 = v77;
    v56 = v76;
    goto LABEL_12;
  }
  sub_100021A14(v45, &qword_100BF9DB0);
  sub_100021A14(v43, &qword_100BF9DB0);
  sub_1000215BC(v41, type metadata accessor for ComparisonCapsuleCompactGridView);
  sub_1000215BC((uint64_t)v18, type metadata accessor for ComparisonCapsuleViewModel.Row);
  v48 = _s7Weather24LocationCompositionStateOwet_0(v47, 1, v83);
  v49 = (uint64_t)v82;
  v50 = v75;
  if (v48 != 1)
    goto LABEL_10;
  sub_100021A14(v46, &qword_100BF9DB0);
  v51 = (uint64_t)v81;
  v52 = (uint64_t)v80;
  v53 = v79;
  v54 = v78;
  v55 = v77;
  v56 = v76;
LABEL_6:
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v92);
LABEL_7:
  v57 = 1;
LABEL_13:
  v63 = type metadata accessor for Divider(0);
  _s7Weather24LocationCompositionStateOwst_0(v52, v57, 1, v63);
  sub_100037768((uint64_t)v91, v51, &qword_100BF9E20);
  sub_100037768(v52, v49, &qword_100BD5E20);
  v64 = v84;
  *v84 = v56;
  *((_BYTE *)v64 + 8) = v50;
  v65 = v90;
  v64[2] = v55;
  v64[3] = v65;
  v66 = v89;
  *((_BYTE *)v64 + 32) = v89;
  v64[5] = v53;
  v64[6] = v54;
  v64[7] = v88;
  *((_BYTE *)v64 + 64) = v87;
  v64[9] = v86;
  *((_BYTE *)v64 + 80) = v85;
  v64[11] = v31;
  v64[12] = v32;
  v67 = sub_1000BA294(&qword_100BF9E28);
  sub_100037768(v51, (uint64_t)v64 + *(int *)(v67 + 48), &qword_100BF9E20);
  sub_100037768(v49, (uint64_t)v64 + *(int *)(v67 + 64), &qword_100BD5E20);
  sub_1000D55D4(v55, v65, v66);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000D55D4(v55, v65, v66);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100021A14(v52, &qword_100BD5E20);
  sub_100021A14((uint64_t)v91, &qword_100BF9E20);
  sub_1000D31B4(v55, v65, v66);
  swift_release();
  swift_bridgeObjectRelease();
  sub_100021A14(v49, &qword_100BD5E20);
  sub_100021A14(v51, &qword_100BF9E20);
  sub_1000D31B4(v55, v65, v66);
  swift_release();
  swift_bridgeObjectRelease();
}

void sub_100643B48(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  _QWORD v39[2];
  _QWORD v40[2];

  v6 = type metadata accessor for Font.TextStyle(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ComparisonCapsuleViewModel.Row(0);
  __chkstk_darwin(v10);
  v12 = (_QWORD *)((char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(_BYTE *)(a1 + *(int *)(type metadata accessor for ComparisonCapsuleCompactGridView(0) + 24)) == 1)
  {
    v14 = a2[2];
    v13 = a2[3];
    sub_100080C0C((uint64_t)a2, (uint64_t)v12, type metadata accessor for ComparisonCapsuleViewModel.Row);
    if (v13)
    {
      v15 = v13;
    }
    else
    {
      v14 = *v12;
      v15 = v12[1];
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    sub_1000215BC((uint64_t)v12, type metadata accessor for ComparisonCapsuleViewModel.Row);
  }
  else
  {
    v14 = *a2;
    v15 = a2[1];
    swift_bridgeObjectRetain();
  }
  v40[0] = v14;
  v40[1] = v15;
  v16 = sub_100114EF8();
  v17 = Text.init<A>(_:)(v40, &type metadata for String, v16);
  v19 = v18;
  v21 = v20;
  v23 = v22 & 1;
  v24 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for Font.TextStyle.title3(_:), v6);
  static Font.Weight.medium.getter(v24);
  v25 = static Font.system(_:weight:)(v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v26 = Text.font(_:)(v25, v17, v19, v23, v21);
  v28 = v27;
  v30 = v29;
  v39[0] = v31;
  swift_release();
  sub_1000D31B4(v17, v19, v23);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath(&unk_1009BA9A8);
  sub_1005B13F0();
  v34 = v33;
  swift_bridgeObjectRelease();
  if (v34)
    v36 = 3;
  else
    v36 = 2;
  v37 = static UnitPoint.leading.getter(v35);
  *(_QWORD *)a3 = v26;
  *(_QWORD *)(a3 + 8) = v28;
  *(_BYTE *)(a3 + 16) = v30 & 1;
  *(_QWORD *)(a3 + 24) = v39[0];
  *(_QWORD *)(a3 + 32) = KeyPath;
  *(_QWORD *)(a3 + 40) = 1;
  *(_BYTE *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = v36;
  *(_BYTE *)(a3 + 64) = 0;
  *(double *)(a3 + 72) = v37;
  *(_QWORD *)(a3 + 80) = v38;
}

void sub_100643D7C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __int128 *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  __n128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 v93;
  __int128 v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  double v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  double *v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  double v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t KeyPath;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD v177[3];
  uint64_t v178;
  uint64_t v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD v188[14];
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  __int128 v207;
  __int128 v208;
  uint64_t v209;
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;

  v170 = a3;
  v162 = sub_1000BA294(&qword_100BF9E30);
  __chkstk_darwin(v162);
  v166 = (char *)&v140 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = sub_1000BA294(&qword_100BF9E38);
  __chkstk_darwin(v163);
  v167 = (uint64_t)&v140 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = sub_1000BA294(&qword_100BF9E40);
  __chkstk_darwin(v165);
  v169 = (uint64_t)&v140 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v168 = (uint64_t)&v140 - v9;
  v153 = type metadata accessor for CapsuleView(0);
  __chkstk_darwin(v153);
  v11 = (char *)&v140 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = sub_1000BA294(&qword_100BF9E48);
  __chkstk_darwin(v154);
  v156 = (char *)&v140 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = sub_1000BA294(&qword_100BF9E50);
  __chkstk_darwin(v155);
  v159 = (uint64_t)&v140 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = sub_1000BA294(&qword_100BF9E58);
  __chkstk_darwin(v158);
  v164 = (uint64_t)&v140 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v157 = (uint64_t)&v140 - v16;
  __chkstk_darwin(v17);
  v176 = (uint64_t)&v140 - v18;
  v19 = sub_1000BA294(&qword_100BF9E60);
  v172 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v171 = (char *)&v140 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_1000BA294(&qword_100BF9E68);
  __chkstk_darwin(v146);
  v148 = (char *)&v140 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = sub_1000BA294(&qword_100BF9E70);
  __chkstk_darwin(v152);
  v147 = (uint64_t)&v140 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_1000BA294(&qword_100BF9E78);
  __chkstk_darwin(v23);
  v161 = (uint64_t)&v140 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v27 = (char *)&v140 - v26;
  v28 = *(int *)(type metadata accessor for ComparisonCapsuleCompactGridView(0) + 20);
  v160 = a1;
  v29 = (__int128 *)(a1 + v28);
  v215 = *(_QWORD *)(a1 + v28 + 32);
  v30 = *(_OWORD *)(a1 + v28 + 16);
  v213 = *(_OWORD *)(a1 + v28);
  v214 = v30;
  v175 = a2;
  v31 = sub_1005B2190();
  v173 = v19;
  v174 = v27;
  if (v34)
  {
    v35 = v31;
    v36 = v34;
    v37 = v33 & 1;
    v149 = v32;
    v150 = v33 & 1;
    v38 = v32;
    KeyPath = swift_getKeyPath(&unk_1009BA9A8);
    v39 = v29[1];
    v210 = *v29;
    v211 = v39;
    v212 = *((_QWORD *)v29 + 4);
    sub_1000D55D4(v35, v38, v37);
    swift_bridgeObjectRetain();
    v40 = v35;
    sub_1005B2034();
    v41 = v188[3];
    v42 = v188[4];
    sub_1000DB418(v188, v188[3]);
    v143 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 40))(v41, v42);
    v141 = swift_getKeyPath(&unk_1009BA9D8);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v188);
    v43 = v29[1];
    v207 = *v29;
    v208 = v43;
    v209 = *((_QWORD *)v29 + 4);
    sub_1005B2034();
    v44 = v188[3];
    v45 = v188[4];
    sub_1000DB418(v188, v188[3]);
    v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 16))(v44, v45);
    v140 = v46;
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v188);
    v47 = v40;
    v144 = v40;
    v48 = v149;
    v188[0] = v40;
    v188[1] = v149;
    LOBYTE(v40) = v150;
    LOBYTE(v188[2]) = v150;
    v188[3] = v36;
    v188[4] = KeyPath;
    v142 = v36;
    v188[5] = 1;
    LOBYTE(v188[6]) = 0;
    v188[7] = v141;
    v188[8] = v143;
    v188[9] = v46;
    v49 = sub_1000BA294(&qword_100BF9E80);
    sub_1006473EC();
    v145 = v11;
    v50 = v171;
    View.monospacedDigit()(v49);
    sub_1000D31B4(v47, v48, v40);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v51 = swift_bridgeObjectRelease();
    LOBYTE(v48) = static Edge.Set.trailing.getter(v51);
    v52 = v29[1];
    v204 = *v29;
    v205 = v52;
    v206 = *((_QWORD *)v29 + 4);
    sub_1005B2034();
    v53 = v188[3];
    v54 = v188[4];
    sub_1000DB418(v188, v188[3]);
    v55 = v53;
    v56 = v172;
    v57 = (*(double (**)(uint64_t, uint64_t))(v54 + 56))(v55, v54);
    v58 = EdgeInsets.init(_all:)(v57);
    v60 = v59;
    v62 = v61;
    v64 = v63;
    v65 = (uint64_t)v148;
    v66 = v173;
    (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v148, v50, v173);
    sub_1000D31B4(v144, v149, v150);
    v67 = swift_bridgeObjectRelease();
    v68 = v65 + *(int *)(v146 + 36);
    *(_BYTE *)v68 = v48;
    v27 = v174;
    *(double *)(v68 + 8) = v58;
    *(_QWORD *)(v68 + 16) = v60;
    *(_QWORD *)(v68 + 24) = v62;
    *(_QWORD *)(v68 + 32) = v64;
    *(_BYTE *)(v68 + 40) = 0;
    (*(void (**)(char *, uint64_t, __n128))(v56 + 8))(v50, v66, v67);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v188);
    v69 = v147;
    sub_100037768(v65, v147, &qword_100BF9E68);
    v70 = v152;
    *(_WORD *)(v69 + *(int *)(v152 + 36)) = 257;
    sub_100021A14(v65, &qword_100BF9E68);
    sub_1000787D4(v69, (uint64_t)v27, &qword_100BF9E70);
    v71 = 0;
    v11 = v145;
    v72 = v70;
  }
  else
  {
    v71 = 1;
    v72 = v152;
  }
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v27, v71, 1, v72);
  v73 = *(_BYTE *)v29;
  v74 = *((_QWORD *)v29 + 1);
  v75 = *((_QWORD *)v29 + 2);
  v76 = *((_QWORD *)v29 + 3);
  v77 = *((_QWORD *)v29 + 4);
  sub_100080C0C(v175, (uint64_t)&v11[*(int *)(v153 + 20)], type metadata accessor for ComparisonCapsuleViewModel.Row);
  *v11 = v73;
  *((_QWORD *)v11 + 1) = v74;
  *((_QWORD *)v11 + 2) = v75;
  *((_QWORD *)v11 + 3) = v76;
  *((_QWORD *)v11 + 4) = v77;
  v78 = (uint64_t)v156;
  sub_100080C0C((uint64_t)v11, (uint64_t)v156, type metadata accessor for CapsuleView);
  *(_BYTE *)(v78 + *(int *)(v154 + 36)) = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000215BC((uint64_t)v11, type metadata accessor for CapsuleView);
  v79 = v29[1];
  v201 = *v29;
  v202 = v79;
  v203 = *((_QWORD *)v29 + 4);
  sub_1005B2034();
  v80 = *((_QWORD *)&v181 + 1);
  v81 = v182;
  sub_1000DB418(&v180, *((uint64_t *)&v181 + 1));
  v82 = (*(uint64_t (**)(uint64_t, uint64_t))(v81 + 96))(v80, v81);
  v84 = v83;
  v85 = static Alignment.center.getter(v82);
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v188, v84, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v85, v86);
  v87 = v159;
  sub_100037768(v78, v159, &qword_100BF9E48);
  memcpy((void *)(v87 + *(int *)(v155 + 36)), v188, 0x70uLL);
  sub_100021A14(v78, &qword_100BF9E48);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v180);
  v88 = sub_1000BA294(&qword_100BDD668);
  v89 = ScaledValue.wrappedValue.getter(&v180, v88);
  v90 = v180;
  static Alignment.center.getter(v89);
  _FrameLayout.init(width:height:alignment:)(0, 1, v90, 0);
  v91 = v157;
  sub_100037768(v87, v157, &qword_100BF9E50);
  v92 = (_OWORD *)(v91 + *(int *)(v158 + 36));
  v93 = v190;
  *v92 = v189;
  v92[1] = v93;
  v92[2] = v191;
  sub_100021A14(v87, &qword_100BF9E50);
  sub_1000787D4(v91, v176, &qword_100BF9E58);
  v94 = v29[1];
  v198 = *v29;
  v199 = v94;
  v200 = *((_QWORD *)v29 + 4);
  v95 = sub_1005B24D4();
  v156 = v95;
  v97 = v96;
  v175 = v98;
  LODWORD(v160) = v99 & 1;
  v159 = swift_getKeyPath(&unk_1009BA9A8);
  v100 = v29[1];
  v195 = *v29;
  v196 = v100;
  v197 = *((_QWORD *)v29 + 4);
  sub_1005B2034();
  v101 = *((_QWORD *)&v181 + 1);
  v102 = v182;
  sub_1000DB418(&v180, *((uint64_t *)&v181 + 1));
  v158 = (*(uint64_t (**)(uint64_t, uint64_t))(v102 + 48))(v101, v102);
  v103 = swift_getKeyPath(&unk_1009BA9D8);
  v157 = v103;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v180);
  v104 = v29[1];
  v192 = *v29;
  v193 = v104;
  v194 = *((_QWORD *)v29 + 4);
  sub_1005B2034();
  v105 = *((_QWORD *)&v181 + 1);
  v106 = v182;
  sub_1000DB418(&v180, *((uint64_t *)&v181 + 1));
  v107 = (*(uint64_t (**)(uint64_t, uint64_t))(v106 + 24))(v105, v106);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v180);
  *(_QWORD *)&v180 = v95;
  *((_QWORD *)&v180 + 1) = v97;
  LOBYTE(v102) = v160;
  LOBYTE(v181) = v160;
  *((_QWORD *)&v181 + 1) = v175;
  v182 = v159;
  v183 = 1;
  v184 = 0;
  v185 = v103;
  v186 = v158;
  v187 = v107;
  v108 = sub_1000BA294(&qword_100BF9E80);
  sub_1006473EC();
  v109 = v171;
  View.monospacedDigit()(v108);
  sub_1000D31B4((uint64_t)v156, v97, v102);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v111 = static UnitPoint.trailing.getter(v110);
  v113 = v112;
  v115 = v172;
  v114 = v173;
  v116 = (uint64_t)v166;
  (*(void (**)(char *, char *, uint64_t))(v172 + 16))(v166, v109, v173);
  v117 = (double *)(v116 + *(int *)(v162 + 36));
  *v117 = v111;
  *((_QWORD *)v117 + 1) = v113;
  v118 = (*(uint64_t (**)(char *, uint64_t))(v115 + 8))(v109, v114);
  LOBYTE(v115) = static Edge.Set.leading.getter(v118);
  v119 = v29[1];
  v180 = *v29;
  v181 = v119;
  v182 = *((_QWORD *)v29 + 4);
  sub_1005B2034();
  v120 = v178;
  v121 = v179;
  sub_1000DB418(v177, v178);
  v122 = (*(double (**)(uint64_t, uint64_t))(v121 + 56))(v120, v121);
  v123 = EdgeInsets.init(_all:)(v122);
  v125 = v124;
  v127 = v126;
  v129 = v128;
  v130 = v167;
  sub_100037768(v116, v167, &qword_100BF9E30);
  v131 = v130 + *(int *)(v163 + 36);
  *(_BYTE *)v131 = v115;
  *(double *)(v131 + 8) = v123;
  *(_QWORD *)(v131 + 16) = v125;
  *(_QWORD *)(v131 + 24) = v127;
  *(_QWORD *)(v131 + 32) = v129;
  *(_BYTE *)(v131 + 40) = 0;
  sub_100021A14(v116, &qword_100BF9E30);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v177);
  v132 = v169;
  sub_100037768(v130, v169, &qword_100BF9E38);
  *(_WORD *)(v132 + *(int *)(v165 + 36)) = 257;
  sub_100021A14(v130, &qword_100BF9E38);
  v133 = v168;
  sub_1000787D4(v132, v168, &qword_100BF9E40);
  v134 = (uint64_t)v174;
  v135 = v161;
  sub_100037768((uint64_t)v174, v161, &qword_100BF9E78);
  v136 = v176;
  v137 = v164;
  sub_100037768(v176, v164, &qword_100BF9E58);
  sub_100037768(v133, v132, &qword_100BF9E40);
  v138 = v170;
  sub_100037768(v135, v170, &qword_100BF9E78);
  v139 = sub_1000BA294(&qword_100BF9EA0);
  sub_100037768(v137, v138 + *(int *)(v139 + 48), &qword_100BF9E58);
  sub_100037768(v132, v138 + *(int *)(v139 + 64), &qword_100BF9E40);
  sub_100021A14(v133, &qword_100BF9E40);
  sub_100021A14(v136, &qword_100BF9E58);
  sub_100021A14(v134, &qword_100BF9E78);
  sub_100021A14(v132, &qword_100BF9E40);
  sub_100021A14(v137, &qword_100BF9E58);
  sub_100021A14(v135, &qword_100BF9E78);
}

uint64_t sub_100644A24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for ComparisonCapsuleCompactGridView(0) + 20) + 8);
  swift_bridgeObjectRetain();
  v1 = sub_1000BA294(&qword_100BF9D80);
  v2 = sub_1000BA294(&qword_100BF9E18);
  sub_10034AEE4((uint64_t)&unk_100BF9D90);
  v4 = v3;
  v5 = sub_10064732C();
  sub_10007A100((uint64_t)&unk_100BF9DA0);
  return ForEach<>.init(_:content:)(&v8, sub_1006414B8, 0, v1, &type metadata for String, v2, v4, v5, v6);
}

void sub_100644B10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD v21[2];

  v1 = type metadata accessor for RoundedRectangle(0);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100098728();
  v5 = (_OWORD *)(v4 - v3);
  v6 = sub_1000BA294(&qword_100BF9E18);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_10004A2E8();
  v8 = (char *)v5 + *(int *)(v1 + 20);
  v9 = enum case for RoundedCornerStyle.continuous(_:);
  v10 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v8, v9, v10);
  __asm { FMOV            V0.2D, #5.0 }
  *v5 = _Q0;
  sub_1005B172C();
  v21[0] = v16;
  v21[1] = v17;
  sub_10007A100((uint64_t)&qword_100BDAFB8);
  v19 = v18;
  v20 = sub_100114EF8();
  View.accessibilityLabel<A>(_:)(v21, v1, &type metadata for String, v19, v20);
  swift_bridgeObjectRelease();
  sub_1000215BC((uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  ModifiedContent<>.accessibilityRespondsToUserInteraction(_:)(0, v6);
  sub_100021A14(v0, &qword_100BF9E18);
  sub_100098640();
}

uint64_t sub_100644C60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  _OWORD *v3;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = v2;
  v5 = static HorizontalAlignment.leading.getter(a1);
  v6 = v2[1];
  v24 = *v2;
  v25 = v6;
  v26 = *((_QWORD *)v2 + 4);
  sub_1005B2034();
  v7 = v22;
  v8 = v23;
  sub_1000DB418(v21, v22);
  v9 = (*(double (**)(uint64_t, uint64_t))(v8 + 64))(v7, v8);
  *(_QWORD *)a2 = v5;
  *(double *)(a2 + 8) = v9;
  *(_BYTE *)(a2 + 16) = 0;
  sub_1000BA294(&qword_100BF9D78);
  v27 = *((_QWORD *)&v24 + 1);
  v28 = v25;
  v20 = *((_QWORD *)&v24 + 1);
  v10 = (_OWORD *)swift_allocObject(&unk_100B866E0, 57, 7);
  v11 = v3[1];
  v10[1] = *v3;
  v10[2] = v11;
  *(_OWORD *)((char *)v10 + 41) = *(_OWORD *)((char *)v3 + 25);
  swift_bridgeObjectRetain();
  sub_100373040(&v27);
  sub_100373040(&v28);
  v12 = sub_1000BA294(&qword_100BF9D80);
  v13 = sub_1000BA294(&qword_100BF9D88);
  sub_10034AEE4((uint64_t)&unk_100BF9D90);
  v15 = v14;
  sub_10034AEE4((uint64_t)&unk_100BF9D98);
  v17 = v16;
  sub_10007A100((uint64_t)&unk_100BF9DA0);
  ForEach<>.init(_:content:)(&v20, sub_1006471B8, v10, v12, &type metadata for String, v13, v15, v17, v18);
  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v21);
}

void sub_100644E04(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t OpaqueTypeConformance2;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[3];
  uint64_t v84;
  uint64_t v85;
  _QWORD v86[2];
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;

  v82 = a3;
  v79 = sub_1000BA294(&qword_100BF9DA8);
  __chkstk_darwin(v79);
  v77 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100BF9DB0);
  __chkstk_darwin(v6);
  v68 = (uint64_t)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v78 = (uint64_t)&v66 - v9;
  __chkstk_darwin(v10);
  v75 = (char *)&v66 - v11;
  v12 = sub_1000BA294(&qword_100BD5E20);
  __chkstk_darwin(v12);
  v81 = (uint64_t)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v80 = (char *)&v66 - v15;
  v74 = type metadata accessor for AccessibilityChildBehavior(0);
  v73 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for ComparisonCapsuleViewModel.Row(0);
  __chkstk_darwin(v76);
  v19 = (char *)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for ComparisonCapsuleStackRowView(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v66 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_1000BA294(&qword_100BF9DB8);
  v72 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v24 = (char *)&v66 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_1000BA294(&qword_100BF9DC0);
  __chkstk_darwin(v25);
  v69 = (char *)&v66 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v70 = (char *)&v66 - v28;
  v29 = a2[1];
  v87 = *a2;
  v88 = v29;
  v89 = *((_QWORD *)a2 + 4);
  v30 = *((_QWORD *)&v87 + 1);
  v90 = v29;
  sub_100080C0C(a1, (uint64_t)v19, type metadata accessor for ComparisonCapsuleViewModel.Row);
  v31 = *((_BYTE *)a2 + 40);
  *(_QWORD *)v22 = swift_getKeyPath(&unk_1009BA980);
  v22[8] = 0;
  v32 = a2[1];
  *((_OWORD *)v22 + 1) = *a2;
  *((_OWORD *)v22 + 2) = v32;
  *((_QWORD *)v22 + 6) = *((_QWORD *)a2 + 4);
  v33 = (uint64_t)&v22[*(int *)(v20 + 24)];
  v67 = v19;
  sub_10007802C((uint64_t)v19, v33, type metadata accessor for ComparisonCapsuleViewModel.Row);
  v22[*(int *)(v20 + 28)] = v31;
  swift_bridgeObjectRetain();
  v34 = sub_100373040(&v90);
  static AccessibilityChildBehavior.ignore.getter(v34);
  sub_10007A100((uint64_t)&unk_100BF9DC8);
  v36 = v35;
  View.accessibilityElement(children:)(v17, v20, v35);
  v37 = v17;
  v38 = (uint64_t)v75;
  (*(void (**)(char *, uint64_t))(v73 + 8))(v37, v74);
  sub_1000215BC((uint64_t)v22, type metadata accessor for ComparisonCapsuleStackRowView);
  v39 = a1;
  sub_1005B172C();
  v83[0] = v40;
  v83[1] = v41;
  v86[0] = v20;
  v86[1] = v36;
  v42 = (uint64_t)v69;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v86, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v44 = sub_100114EF8();
  v45 = v71;
  View.accessibilityLabel<A>(_:)(v83, v71, &type metadata for String, OpaqueTypeConformance2, v44);
  v46 = (uint64_t)v77;
  v47 = swift_bridgeObjectRelease();
  v48 = (uint64_t)v70;
  (*(void (**)(char *, uint64_t, __n128))(v72 + 8))(v24, v45, v47);
  sub_1000787D4(v42, v48, &qword_100BF9DC0);
  sub_100080C0C(v39, v38, type metadata accessor for ComparisonCapsuleViewModel.Row);
  v49 = v76;
  _s7Weather24LocationCompositionStateOwst_0(v38, 0, 1, v76);
  v50 = v78;
  sub_10020CC3C(v30, v78);
  v51 = v46 + *(int *)(v79 + 48);
  sub_100037768(v38, v46, &qword_100BF9DB0);
  sub_100037768(v50, v51, &qword_100BF9DB0);
  if (_s7Weather24LocationCompositionStateOwet_0(v46, 1, v49) == 1)
  {
    sub_100021A14(v50, &qword_100BF9DB0);
    sub_100021A14(v38, &qword_100BF9DB0);
    v52 = _s7Weather24LocationCompositionStateOwet_0(v51, 1, v49);
    v53 = (uint64_t)v80;
    if (v52 == 1)
    {
      sub_100021A14(v46, &qword_100BF9DB0);
LABEL_10:
      v61 = 1;
      goto LABEL_11;
    }
    goto LABEL_6;
  }
  v54 = v68;
  sub_100037768(v46, v68, &qword_100BF9DB0);
  if (_s7Weather24LocationCompositionStateOwet_0(v51, 1, v49) == 1)
  {
    sub_100021A14(v50, &qword_100BF9DB0);
    sub_100021A14(v38, &qword_100BF9DB0);
    sub_1000215BC(v54, type metadata accessor for ComparisonCapsuleViewModel.Row);
    v53 = (uint64_t)v80;
LABEL_6:
    sub_100021A14(v46, &qword_100BF9DA8);
    goto LABEL_8;
  }
  v55 = (uint64_t)v67;
  sub_10007802C(v51, (uint64_t)v67, type metadata accessor for ComparisonCapsuleViewModel.Row);
  sub_1005B1EF8();
  v57 = v56;
  sub_1000215BC(v55, type metadata accessor for ComparisonCapsuleViewModel.Row);
  sub_100021A14(v50, &qword_100BF9DB0);
  sub_100021A14(v38, &qword_100BF9DB0);
  sub_1000215BC(v54, type metadata accessor for ComparisonCapsuleViewModel.Row);
  sub_100021A14(v46, &qword_100BF9DB0);
  v53 = (uint64_t)v80;
  if ((v57 & 1) != 0)
    goto LABEL_10;
LABEL_8:
  sub_1005B2034();
  v58 = v84;
  v59 = v85;
  sub_1000DB418(v83, v84);
  LOBYTE(v58) = (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 104))(v58, v59);
  v60 = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v83);
  if ((v58 & 1) == 0)
    goto LABEL_10;
  Divider.init()(v60);
  v61 = 0;
LABEL_11:
  v62 = type metadata accessor for Divider(0);
  _s7Weather24LocationCompositionStateOwst_0(v53, v61, 1, v62);
  sub_100037768(v48, v42, &qword_100BF9DC0);
  v63 = v81;
  sub_100037768(v53, v81, &qword_100BD5E20);
  v64 = v82;
  sub_100037768(v42, v82, &qword_100BF9DC0);
  v65 = sub_1000BA294(&qword_100BF9DD0);
  sub_100037768(v63, v64 + *(int *)(v65 + 48), &qword_100BD5E20);
  sub_100021A14(v53, &qword_100BD5E20);
  sub_100021A14(v48, &qword_100BF9DC0);
  sub_100021A14(v63, &qword_100BD5E20);
  sub_100021A14(v42, &qword_100BF9DC0);
}

uint64_t sub_100645550@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100644C60(a1, a2);
}

void *sub_100645588@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD v6[16];
  _BYTE __src[130];

  v4 = static HorizontalAlignment.leading.getter(a1);
  sub_1006455FC(v2, v6);
  memcpy(&__src[7], v6, 0x7BuLL);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return memcpy((void *)(a2 + 17), __src, 0x82uLL);
}

double sub_1006455FC@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t (*v32)(char *, _QWORD, uint64_t);
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 *v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char v75;
  __int128 v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  __n128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  char *v119;
  Swift::String v120;
  Swift::String v121;
  Swift::String v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  Swift::String v147;
  Swift::String v148;
  Swift::String v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  __n128 v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  uint64_t v206;
  __n128 v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  __int16 v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char v227;
  char *v228;
  Swift::String v229;
  Swift::String v230;
  Swift::String v231;
  uint64_t v232;
  char v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char v239;
  char v240;
  uint64_t v241;
  __n128 v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  __int16 v254;
  uint64_t v255;
  unint64_t v256;
  int v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  char v264;
  uint64_t v265;
  uint64_t v266;
  double result;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  int v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t KeyPath;
  char v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int16 v294;
  char v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  unsigned __int16 v300;
  char v301;
  __int128 v302;
  __int128 v303;
  uint64_t v304;
  __int128 v305;
  __int128 v306;
  uint64_t v307;

  v281 = a2;
  v3 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v3);
  v275 = (char *)&v269 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v283 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
  __chkstk_darwin(v283);
  v282 = (uint64_t)&v269 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100BCCDA8);
  __chkstk_darwin(v6);
  KeyPath = (uint64_t)&v269 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v269 - v9;
  v11 = type metadata accessor for Font.TextStyle(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v269 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ComparisonCapsuleStackRowView(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v269 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(int *)(v18 + 24);
  v20 = *(int *)(v18 + 28);
  v278 = v18;
  v279 = v20;
  LODWORD(v20) = *(unsigned __int8 *)(a1 + v20);
  v21 = (uint64_t *)(a1 + v19);
  v284 = a1;
  if ((_DWORD)v20 == 1)
  {
    v23 = v21[2];
    v22 = v21[3];
    sub_100080C0C(a1, (uint64_t)v17, type metadata accessor for ComparisonCapsuleStackRowView);
    if (v22)
    {
      v24 = v22;
    }
    else
    {
      v25 = &v17[*(int *)(v15 + 24)];
      v23 = *(_QWORD *)v25;
      v24 = *((_QWORD *)v25 + 1);
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    sub_1000215BC((uint64_t)v17, type metadata accessor for ComparisonCapsuleStackRowView);
  }
  else
  {
    v23 = *v21;
    v24 = v21[1];
    swift_bridgeObjectRetain();
  }
  *(_QWORD *)&v296 = v23;
  *((_QWORD *)&v296 + 1) = v24;
  v26 = sub_100114EF8();
  v27 = Text.init<A>(_:)(&v296, &type metadata for String, v26);
  v276 = v28;
  v277 = v29;
  v31 = v30 & 1;
  v32 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v12 + 104);
  v33 = v32(v14, enum case for Font.TextStyle.title3(_:), v11);
  static Font.Weight.medium.getter(v33);
  v34 = static Font.system(_:weight:)(v14);
  v35 = *(void (**)(char *, uint64_t))(v12 + 8);
  v35(v14, v11);
  v36 = v32(v14, enum case for Font.TextStyle.body(_:), v11);
  static Font.Weight.medium.getter(v36);
  v37 = static Font.system(_:weight:)(v14);
  v35(v14, v11);
  v38 = v284;
  v39 = *(_QWORD *)v284;
  v40 = *(_BYTE *)(v284 + 8);
  sub_10008D47C(*(_QWORD *)v284, v40);
  sub_100109B54();
  LOBYTE(v35) = v41;
  sub_1000B15F8(v39, v40);
  v42 = enum case for Font.Leading.tight(_:);
  v43 = type metadata accessor for Font.Leading(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 104))(v10, v42, v43);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v43);
  v44 = KeyPath;
  sub_100037768((uint64_t)v10, KeyPath, &qword_100BCCDA8);
  swift_retain();
  swift_retain();
  v45 = sub_10040BDEC(v34, v37, v35 & 1, v44);
  v46 = v276;
  v47 = Text.font(_:)(v45, v27, v276, v31, v277);
  v285 = v48;
  v286 = v47;
  v280 = v49;
  v287 = v50;
  swift_release();
  swift_release();
  swift_release();
  sub_1000D31B4(v27, v46, v31);
  swift_bridgeObjectRelease();
  sub_100021A14((uint64_t)v10, &qword_100BCCDA8);
  v279 = *(unsigned __int8 *)(v38 + v279);
  KeyPath = swift_getKeyPath(&unk_1009BA9A8);
  v51 = v38 + *(int *)(v278 + 24);
  v52 = type metadata accessor for ComparisonCapsuleViewModel.Row(0);
  v53 = v282;
  sub_100080C0C(v51 + *(int *)(v52 + 20), v282, type metadata accessor for ComparisonCapsuleViewModel.Row.Body);
  if (swift_getEnumCaseMultiPayload(v53) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v54 = *(_OWORD *)(v38 + 32);
    v305 = *(_OWORD *)(v38 + 16);
    v306 = v54;
    v307 = *(_QWORD *)(v38 + 48);
    v55 = sub_1005B2190();
    if (v58)
    {
      v59 = v55;
      v60 = v56;
      v61 = v58;
      v62 = (__int128 *)(v38 + 16);
      v63 = v57 & 1;
      v284 = v57 & 1;
      sub_1005B2034();
      v64 = *((_QWORD *)&v297 + 1);
      v65 = v298;
      sub_1000DB418(&v296, *((uint64_t *)&v297 + 1));
      *(_QWORD *)&v290 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 16))(v64, v65);
      LOBYTE(v302) = v63;
      v66 = Text.foregroundStyle<A>(_:)(&v290, v59, v60, v63, v61, &type metadata for Color, &protocol witness table for Color);
      v282 = v60;
      v283 = v61;
      v68 = v67;
      LOBYTE(v64) = v69;
      v71 = v70;
      swift_release();
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v296);
      v72 = static Text.+ infix(_:_:)(v66, v68, v64 & 1, v71, 32, 0xE100000000000000, 0, _swiftEmptyArrayStorage);
      v275 = v73;
      v276 = v72;
      v277 = v74;
      LODWORD(v274) = v75 & 1;
      sub_1000D31B4(v66, v68, v64 & 1);
      swift_bridgeObjectRelease();
      v76 = v62[1];
      v302 = *v62;
      v303 = v76;
      v304 = *((_QWORD *)v62 + 4);
      v77 = sub_1005B24D4();
      v79 = v78;
      v81 = v80;
      v278 = v59;
      v83 = v82 & 1;
      sub_1005B2034();
      v84 = *((_QWORD *)&v297 + 1);
      v85 = v298;
      sub_1000DB418(&v296, *((uint64_t *)&v297 + 1));
      *(_QWORD *)&v290 = (*(uint64_t (**)(uint64_t, uint64_t))(v85 + 24))(v84, v85);
      v86 = Text.foregroundStyle<A>(_:)(&v290, v77, v79, v83, v81, &type metadata for Color, &protocol witness table for Color);
      v272 = v87;
      v273 = v86;
      v89 = v88;
      v91 = v90 & 1;
      sub_1000D31B4((uint64_t)v77, v79, v83);
      swift_release();
      swift_bridgeObjectRelease();
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v296);
      v93 = (uint64_t)v275;
      v92 = v276;
      LOBYTE(v84) = v274;
      v95 = v272;
      v94 = v273;
      v96 = static Text.+ infix(_:_:)(v276, v275, v274, v277, v273, v272, v91, v89);
      v269 = v97;
      v270 = v96;
      v271 = v98;
      v100 = v99 & 1;
      sub_1000D31B4(v94, v95, v91);
      swift_bridgeObjectRelease();
      sub_1000D31B4(v92, v93, v84);
      v101 = swift_bridgeObjectRelease();
      v103 = v269;
      v102 = v270;
      v104 = Text.monospacedDigit()(v270, v269, v100, v271, v101);
      v106 = v105;
      v108 = v107;
      v110 = v109 & 1;
      sub_1000D31B4(v102, v103, v100);
      swift_bridgeObjectRelease();
      v111 = swift_getKeyPath(&unk_1009BAB90);
      v112 = swift_getKeyPath(&unk_1009BA9A8);
      *(_QWORD *)&v290 = v104;
      *((_QWORD *)&v290 + 1) = v106;
      *(_QWORD *)&v291 = v110;
      *((_QWORD *)&v291 + 1) = v108;
      *(_QWORD *)&v292 = v111;
      *((_QWORD *)&v292 + 1) = 0x3FE0000000000000;
      *(_QWORD *)&v293 = v112;
      *((_QWORD *)&v293 + 1) = 1;
      v294 = 0;
      sub_1000D55D4(v104, v106, v110);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      sub_1000D55D4(v104, v106, v110);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      v113 = sub_1000BA294(&qword_100BFA0B0);
      v114 = sub_10064A2E4();
      _ConditionalContent<>.init(storage:)(&v290, v113, v113, v114, v114);
      sub_1000D31B4(v278, v282, v284);
      swift_bridgeObjectRelease();
      sub_1000D31B4(v104, v106, v110);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      sub_1000D31B4(v104, v106, v110);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      v191 = sub_1005B24D4();
      v193 = v192;
      v195 = v194;
      v197 = v196 & 1;
      sub_1005B2034();
      v198 = *((_QWORD *)&v297 + 1);
      v199 = v298;
      sub_1000DB418(&v296, *((uint64_t *)&v297 + 1));
      *(_QWORD *)&v290 = (*(uint64_t (**)(uint64_t, uint64_t))(v199 + 24))(v198, v199);
      v200 = Text.foregroundStyle<A>(_:)(&v290, v191, v193, v197, v195, &type metadata for Color, &protocol witness table for Color);
      v202 = v201;
      v204 = v203;
      v206 = v205 & 1;
      sub_1000D31B4((uint64_t)v191, v193, v197);
      swift_release();
      swift_bridgeObjectRelease();
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v296);
      v208 = Text.monospacedDigit()(v200, v202, v206, v204, v207);
      v210 = v209;
      v212 = v211;
      v214 = v213 & 1;
      sub_1000D31B4(v200, v202, v206);
      swift_bridgeObjectRelease();
      v215 = swift_getKeyPath(&unk_1009BAB90);
      v216 = swift_getKeyPath(&unk_1009BA9A8);
      *(_QWORD *)&v290 = v208;
      *((_QWORD *)&v290 + 1) = v210;
      *(_QWORD *)&v291 = v214;
      *((_QWORD *)&v291 + 1) = v212;
      *(_QWORD *)&v292 = v215;
      *((_QWORD *)&v292 + 1) = 0x3FE0000000000000;
      *(_QWORD *)&v293 = v216;
      *((_QWORD *)&v293 + 1) = 1;
      v294 = 256;
      v217 = sub_1000BA294(&qword_100BFA0B0);
      v218 = sub_10064A2E4();
      _ConditionalContent<>.init(storage:)(&v290, v217, v217, v218, v218);
    }
    if (HIBYTE(v300))
      v219 = 256;
    else
      v219 = 0;
    v290 = v296;
    v291 = v297;
    v292 = v298;
    v293 = v299;
    v294 = v219 | v300;
    v295 = 1;
    v220 = sub_1000BA294(&qword_100BFA0C0);
    v221 = sub_10064A3F4();
    _ConditionalContent<>.init(storage:)(&v290, v220, v220, v221, v221);
    v223 = *((_QWORD *)&v296 + 1);
    v222 = v296;
    v224 = *((_QWORD *)&v297 + 1);
    v225 = *((_QWORD *)&v298 + 1);
    v277 = v298;
    v283 = *((_QWORD *)&v299 + 1);
    v226 = v299;
    v284 = v297;
    LODWORD(v278) = v300;
    v227 = v301;
  }
  else
  {
    sub_1005B13F0();
    v117 = v116;
    if (v115)
    {
      v118 = v115;
      v119 = v275;
      LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(2, 1);
      v120._countAndFlagsBits = 14924;
      v120._object = (void *)0xE200000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v120);
      v121._countAndFlagsBits = v117;
      v121._object = v118;
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v121);
      swift_bridgeObjectRelease();
      v122._countAndFlagsBits = 0;
      v122._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v122);
      v123 = LocalizedStringKey.init(stringInterpolation:)(v119);
      v127 = Text.init(_:tableName:bundle:comment:)(v123, v125, v124 & 1, v126, 0, 0, 0, "The day's low temperature", 25, 2);
      v129 = v128;
      v131 = v130;
      v276 = v51;
      v133 = v132 & 1;
      v134 = *(_OWORD *)(v38 + 32);
      v305 = *(_OWORD *)(v38 + 16);
      v306 = v134;
      v307 = *(_QWORD *)(v38 + 48);
      sub_1005B2034();
      v135 = *((_QWORD *)&v297 + 1);
      v136 = v298;
      sub_1000DB418(&v296, *((uint64_t *)&v297 + 1));
      *(_QWORD *)&v290 = (*(uint64_t (**)(uint64_t, uint64_t))(v136 + 16))(v135, v136);
      v273 = Text.foregroundStyle<A>(_:)(&v290, v127, v129, v133, v131, &type metadata for Color, &protocol witness table for Color);
      v138 = v137;
      v140 = v139;
      v142 = v141 & 1;
      sub_1000D31B4(v127, v129, v133);
      swift_release();
      swift_bridgeObjectRelease();
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v296);
      v143 = v273;
      v274 = static Text.+ infix(_:_:)(v273, v138, v142, v140, 32, 0xE100000000000000, 0, _swiftEmptyArrayStorage);
      v278 = v144;
      v283 = v145;
      LODWORD(v277) = v146 & 1;
      sub_1000D31B4(v143, v138, v142);
      swift_bridgeObjectRelease();
      LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(2, 1);
      v147._countAndFlagsBits = 14920;
      v147._object = (void *)0xE200000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v147);
      sub_1005B157C();
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v148);
      swift_bridgeObjectRelease();
      v149._countAndFlagsBits = 0;
      v149._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v149);
      v150 = LocalizedStringKey.init(stringInterpolation:)(v119);
      LOWORD(v268) = 2;
      v154 = Text.init(_:tableName:bundle:comment:)(v150, v152, v151 & 1, v153, 0, 0, 0, "The day's high temperature", 26, v268);
      v156 = v155;
      v158 = v157;
      v160 = v159 & 1;
      v161 = *(_OWORD *)(v284 + 32);
      v302 = *(_OWORD *)(v284 + 16);
      v303 = v161;
      v304 = *(_QWORD *)(v284 + 48);
      sub_1005B2034();
      v163 = *((_QWORD *)&v297 + 1);
      v162 = v298;
      sub_1000DB418(&v296, *((uint64_t *)&v297 + 1));
      *(_QWORD *)&v290 = (*(uint64_t (**)(uint64_t, uint64_t))(v162 + 24))(v163, v162);
      v164 = Text.foregroundStyle<A>(_:)(&v290, v154, v156, v160, v158, &type metadata for Color, &protocol witness table for Color);
      v284 = v165;
      v167 = v166;
      v169 = v168 & 1;
      sub_1000D31B4(v154, v156, v160);
      swift_release();
      swift_bridgeObjectRelease();
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v296);
      v170 = v274;
      v171 = v278;
      LOBYTE(v162) = v277;
      v172 = v164;
      v173 = v164;
      v174 = v284;
      v275 = (char *)static Text.+ infix(_:_:)(v274, v278, v277, v283, v173, v284, v169, v167);
      v276 = v175;
      v273 = v176;
      v178 = v177 & 1;
      sub_1000D31B4(v172, v174, v169);
      swift_bridgeObjectRelease();
      sub_1000D31B4(v170, v171, v162);
      v179 = swift_bridgeObjectRelease();
      v180 = (uint64_t)v275;
      v181 = v273;
      v182 = Text.monospacedDigit()(v275, v273, v178, v276, v179);
      v184 = v183;
      v186 = v185;
      v188 = v187 & 1;
      sub_1000D31B4(v180, v181, v178);
      swift_bridgeObjectRelease();
      v189 = swift_getKeyPath(&unk_1009BAB90);
      v190 = swift_getKeyPath(&unk_1009BA9A8);
      *(_QWORD *)&v290 = v182;
      *((_QWORD *)&v290 + 1) = v184;
      *(_QWORD *)&v291 = v188;
      *((_QWORD *)&v291 + 1) = v186;
      *(_QWORD *)&v292 = v189;
      *((_QWORD *)&v292 + 1) = 0x3FE0000000000000;
      *(_QWORD *)&v293 = v190;
      *((_QWORD *)&v293 + 1) = 1;
      v294 = 0;
    }
    else
    {
      v228 = v275;
      LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(2, 1);
      v229._countAndFlagsBits = 14920;
      v229._object = (void *)0xE200000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v229);
      sub_1005B157C();
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v230);
      swift_bridgeObjectRelease();
      v231._countAndFlagsBits = 0;
      v231._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v231);
      v232 = LocalizedStringKey.init(stringInterpolation:)(v228);
      v236 = Text.init(_:tableName:bundle:comment:)(v232, v234, v233 & 1, v235, v117, 0, 0, "The day's high temperature", 26, 2);
      v238 = v237;
      v240 = v239 & 1;
      v243 = Text.monospacedDigit()(v236, v237, v239 & 1, v241, v242);
      v245 = v244;
      v247 = v246;
      v249 = v248 & 1;
      sub_1000D31B4(v236, v238, v240);
      swift_bridgeObjectRelease();
      v250 = swift_getKeyPath(&unk_1009BAB90);
      v251 = swift_getKeyPath(&unk_1009BA9A8);
      *(_QWORD *)&v290 = v243;
      *((_QWORD *)&v290 + 1) = v245;
      *(_QWORD *)&v291 = v249;
      *((_QWORD *)&v291 + 1) = v247;
      *(_QWORD *)&v292 = v250;
      *((_QWORD *)&v292 + 1) = 0x3FE0000000000000;
      *(_QWORD *)&v293 = v251;
      *((_QWORD *)&v293 + 1) = 1;
      v294 = 256;
    }
    v252 = sub_1000BA294(&qword_100BFA0B0);
    v253 = sub_10064A2E4();
    _ConditionalContent<>.init(storage:)(&v290, v252, v252, v253, v253);
    if (HIBYTE(v300))
      v254 = 256;
    else
      v254 = 0;
    v290 = v296;
    v291 = v297;
    v292 = v298;
    v293 = v299;
    v294 = v254 | v300;
    v295 = 0;
    v255 = sub_1000BA294(&qword_100BFA0C0);
    v256 = sub_10064A3F4();
    _ConditionalContent<>.init(storage:)(&v290, v255, v255, v256, v256);
    v223 = *((_QWORD *)&v296 + 1);
    v222 = v296;
    v224 = *((_QWORD *)&v297 + 1);
    v225 = *((_QWORD *)&v298 + 1);
    v277 = v298;
    v283 = *((_QWORD *)&v299 + 1);
    v226 = v299;
    v284 = v297;
    LODWORD(v278) = v300;
    v227 = v301;
    sub_1000215BC(v282, type metadata accessor for ComparisonCapsuleViewModel.Row.Body);
  }
  v257 = v280 & 1;
  LOBYTE(v296) = v280 & 1;
  v258 = v279;
  LOBYTE(v290) = v279 ^ 1;
  v289 = v227;
  v259 = v281;
  v260 = v286;
  v261 = v287;
  *v281 = v286;
  v262 = v260;
  v263 = v285;
  v259[1] = v285;
  *((_BYTE *)v259 + 16) = v257;
  v264 = v257;
  LODWORD(v282) = v257;
  v265 = KeyPath;
  v259[3] = v261;
  v259[4] = v265;
  v259[5] = v258;
  *((_BYTE *)v259 + 48) = v258 ^ 1;
  *(_WORD *)((char *)v259 + 49) = 257;
  v259[7] = v222;
  v259[8] = v223;
  v259[9] = v284;
  v259[10] = v224;
  v259[11] = v277;
  v259[12] = v225;
  v276 = v226;
  v266 = v283;
  v259[13] = v226;
  v259[14] = v266;
  *((_WORD *)v259 + 60) = v278;
  *((_BYTE *)v259 + 122) = v227;
  sub_1000D55D4(v262, v263, v264);
  swift_bridgeObjectRetain();
  swift_retain();
  LOBYTE(v261) = v284;
  sub_10064A458(v222, v223, v284);
  sub_10064A4B4(v222, v223, v261);
  sub_1000D31B4(v286, v285, v282);
  swift_release();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_10064668C(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  int v33;
  double v34;
  double v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;

  v51 = a1;
  v4 = sub_1000BA294(&qword_100BFA0D0);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100094EC4();
  sub_1000BA294(qword_100BC4E80);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100098728();
  v9 = v8 - v7;
  v10 = type metadata accessor for WeatherDayVarianceView(0);
  v50 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v48 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v49 = (char *)&v46 - v13;
  v14 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
  sub_1000B42B0();
  __chkstk_darwin(v15);
  sub_10004A2E8();
  type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  sub_100098728();
  v19 = (uint64_t *)(v18 - v17);
  v20 = v1 + *(int *)(type metadata accessor for CapsuleView(0) + 20);
  v21 = sub_10009DBB0();
  sub_100080C0C(v20 + *(int *)(v21 + 20), (uint64_t)v19, type metadata accessor for ComparisonCapsuleViewModel.Row.Body);
  if (swift_getEnumCaseMultiPayload(v19) == 1)
  {
    v22 = *v19;
    v23 = v19[1];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *v2 = v23;
    v2[1] = v22;
    sub_10009D768((uint64_t)v2);
    sub_10007A100((uint64_t)&unk_100BFA0D8);
    v25 = v24;
    v26 = sub_10064A510();
    _ConditionalContent<>.init(storage:)(v2, v10, &type metadata for ComparisonBarView, v25, v26);
  }
  else
  {
    v47 = v2;
    v27 = v10;
    sub_10007802C((uint64_t)v19, v3, type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature);
    v29 = *(double *)(v1 + 24);
    v28 = *(double *)(v1 + 32);
    v30 = sub_1000BA294(&qword_100BC4E68);
    v31 = Measurement.value.getter(v30);
    v32 = Measurement.value.getter(v30);
    sub_100037768(v3 + *(int *)(v14 + 24), v9, qword_100BC4E80);
    v33 = _s7Weather24LocationCompositionStateOwet_0(v9, 1, v30);
    if (v33 == 1)
    {
      sub_100021A14(v9, qword_100BC4E80);
      v34 = 0.0;
    }
    else
    {
      v35 = Measurement.value.getter(v30);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v9, v30);
      v34 = v35;
    }
    v36 = v4;
    v37 = v47;
    swift_bridgeObjectRetain();
    v39 = sub_10010F7C0(v38);
    v40 = v48;
    WeatherDayVarianceView.init(weekMaxTemp:weekMinTemp:dayHighTemp:dayLowTemp:currentTemp:isDaylight:temperatureGradient:)(*(_QWORD *)&v34, v33 == 1, 0, v39, v28, v29, v31, v32);
    v42 = v49;
    v41 = v50;
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v49, v40, v27);
    (*(void (**)(_QWORD *, char *, uint64_t))(v41 + 16))(v37, v42, v27);
    swift_storeEnumTagMultiPayload(v37, v36, 0);
    sub_10007A100((uint64_t)&unk_100BFA0D8);
    v44 = v43;
    v45 = sub_10064A510();
    _ConditionalContent<>.init(storage:)(v37, v27, &type metadata for ComparisonBarView, v44, v45);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v27);
    sub_1000215BC(v3, type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature);
  }
}

uint64_t type metadata accessor for ComparisonCapsuleCompactGridView(uint64_t a1)
{
  return sub_100098190(a1, qword_100BF9D28, (uint64_t)&nominal type descriptor for ComparisonCapsuleCompactGridView);
}

ValueMetadata *type metadata accessor for ComparisonCapsuleStackView()
{
  return &type metadata for ComparisonCapsuleStackView;
}

_QWORD *sub_100646A84(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1000BA294(&qword_100BDD668);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *v10 = *v11;
    v12 = *((_QWORD *)v11 + 2);
    *((_QWORD *)v10 + 1) = *((_QWORD *)v11 + 1);
    *((_QWORD *)v10 + 2) = v12;
    *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 24);
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

double sub_100646B3C(uint64_t a1)
{
  uint64_t v2;
  double result;

  v2 = sub_1000BA294(&qword_100BDD668);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_100646B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_1000BA294(&qword_100BDD668);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_BYTE *)v9 = *(_BYTE *)v10;
  v11 = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  *(_QWORD *)(v9 + 16) = v11;
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 24);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100646C1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = sub_1000BA294(&qword_100BDD668);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (_QWORD *)(a2 + v7);
  *(_BYTE *)v8 = *(_BYTE *)(a2 + v7);
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(a2 + v7 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + 16) = v9[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + 24) = v9[3];
  *(_QWORD *)(v8 + 32) = v9[4];
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100646CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v6 = sub_1000BA294(&qword_100BDD668);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(v10 + 32);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  return a1;
}

uint64_t sub_100646D50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_1000BA294(&qword_100BDD668);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)v8 = *(_BYTE *)(a2 + v7);
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(a2 + v7 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(v9 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100646DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100646E00);
}

void sub_100646E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1000BA294(&qword_100BDD668);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    sub_1000B250C(a1, a2, v6);
  }
  else
  {
    sub_10003BCA4(*(_QWORD *)(a1 + *(int *)(a3 + 20) + 8));
    sub_100079F70();
  }
}

uint64_t sub_100646E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100646E70);
}

void sub_100646E70()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000994F4();
  sub_1000BA294(&qword_100BDD668);
  sub_10009D2E8();
  if (v3)
  {
    sub_100098D08();
    sub_1000987C4(v4, v5, v6, v7);
  }
  else
  {
    *(_QWORD *)(v1 + *(int *)(v2 + 20) + 8) = (v0 - 1);
    sub_100079F70();
  }
}

void sub_100646EC4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_100121E44(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "(";
    v4[2] = &unk_1009BA858;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void _s7Weather26ComparisonCapsuleStackViewVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v2 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10004A298();
}

uint64_t _s7Weather26ComparisonCapsuleStackViewVwca_0(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000DB008(a1, a2);
  *(_QWORD *)(v3 + 8) = *(_QWORD *)(v4 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v3 + 32) = *(_QWORD *)(v2 + 32);
  *(_BYTE *)(v3 + 40) = *(_BYTE *)(v2 + 40);
  return v3;
}

void _s7Weather26ComparisonCapsuleStackViewVwta_0(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;

  sub_1000DB008(a1, a2);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v3 + 8) = *(_OWORD *)(v2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v3 + 24) = *(_OWORD *)(v2 + 24);
  *(_BYTE *)(v3 + 40) = *(_BYTE *)(v2 + 40);
  sub_10004A298();
}

uint64_t _s7Weather26ComparisonCapsuleStackViewVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 41))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100647080(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ComparisonCapsuleGridView()
{
  return &type metadata for ComparisonCapsuleGridView;
}

unint64_t sub_1006470E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF9D68;
  if (!qword_100BF9D68)
  {
    v1 = sub_100075EB0(&qword_100BF9D70);
    sub_10034AEE4((uint64_t)&unk_100BF9CA0);
    sub_10034AEE4((uint64_t)&unk_100BF9CA8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF9D68);
  }
  return result;
}

uint64_t sub_100647184(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABC19C, 1);
}

uint64_t sub_100647194(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABC174, 1);
}

uint64_t sub_1006471A4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABC14C, 1);
}

void sub_1006471B8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_100644E04(a1, (__int128 *)(v2 + 16), a2);
}

uint64_t type metadata accessor for ComparisonCapsuleStackRowView(uint64_t a1)
{
  return sub_100098190(a1, qword_100BF9F30, (uint64_t)&nominal type descriptor for ComparisonCapsuleStackRowView);
}

uint64_t sub_1006471DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(type metadata accessor for ComparisonCapsuleCompactGridView(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  v6 = v0 + v3;
  v7 = sub_1000BA294(&qword_100BDD668);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4, v5);
}

void sub_100647274(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ComparisonCapsuleCompactGridView(0) - 8) + 80);
  sub_100643204(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_1006472C0()
{
  uint64_t v0;

  return sub_100644A24(*(_QWORD *)(v0 + 16));
}

unint64_t sub_1006472C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF9E08;
  if (!qword_100BF9E08)
  {
    v1 = sub_100075EB0(&qword_100BF9DF8);
    sub_10064732C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF9E08);
  }
  return result;
}

unint64_t sub_10064732C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF9E10;
  if (!qword_100BF9E10)
  {
    v1 = sub_100075EB0(&qword_100BF9E18);
    sub_10007A100((uint64_t)&qword_100BDAFB8);
    sub_10007A100((uint64_t)&qword_100BC4E48);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF9E10);
  }
  return result;
}

uint64_t type metadata accessor for CapsuleView(uint64_t a1)
{
  return sub_100098190(a1, qword_100BF9FC8, (uint64_t)&nominal type descriptor for CapsuleView);
}

unint64_t sub_1006473EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF9E88;
  if (!qword_100BF9E88)
  {
    v1 = sub_100075EB0(&qword_100BF9E80);
    sub_100647470();
    sub_10034AEE4((uint64_t)&qword_100BD63E8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF9E88);
  }
  return result;
}

unint64_t sub_100647470()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF9E90;
  if (!qword_100BF9E90)
  {
    v1 = sub_100075EB0(&qword_100BF9E98);
    sub_10064A388((uint64_t)&qword_100BCD890);
    sub_10034AEE4((uint64_t)&qword_100BC4E20);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF9E90);
  }
  return result;
}

void sub_100647518(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_100640DA8(a1, v2 + 16, a2);
}

uint64_t sub_100647520()
{
  uint64_t v0;

  return sub_1006413E0(*(_QWORD *)(v0 + 16));
}

uint64_t type metadata accessor for ComparisonCapsuleRowView(uint64_t a1)
{
  return sub_100098190(a1, qword_100BFA058, (uint64_t)&nominal type descriptor for ComparisonCapsuleRowView);
}

unint64_t sub_100647544(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v23 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_10008D47C(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = v9;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    v34 = a3;
    v10 = *(int *)(a3 + 24);
    v11 = (_QWORD *)(a1 + v10);
    v12 = a2 + v10;
    v13 = *(_QWORD *)(a2 + v10 + 8);
    *v11 = *(_QWORD *)(a2 + v10);
    v11[1] = v13;
    v14 = *(_QWORD *)(a2 + v10 + 24);
    v11[2] = *(_QWORD *)(a2 + v10 + 16);
    v11[3] = v14;
    v15 = *(_QWORD *)(a2 + v10 + 40);
    v11[4] = *(_QWORD *)(a2 + v10 + 32);
    v11[5] = v15;
    v32 = a1 + v10;
    v33 = type metadata accessor for ComparisonCapsuleViewModel.Row(0);
    v16 = *(int *)(v33 + 20);
    v17 = (char *)v11 + v16;
    v18 = v12 + v16;
    v19 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload(v18) == 1)
    {
      *(_OWORD *)v17 = *(_OWORD *)v18;
      v20 = *(_QWORD *)(v18 + 24);
      *((_QWORD *)v17 + 2) = *(_QWORD *)(v18 + 16);
      *((_QWORD *)v17 + 3) = v20;
      v21 = *(_QWORD *)(v18 + 40);
      *((_QWORD *)v17 + 4) = *(_QWORD *)(v18 + 32);
      *((_QWORD *)v17 + 5) = v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v22 = 1;
    }
    else
    {
      v24 = sub_1000BA294(&qword_100BC4E68);
      v25 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
      v25(v17, v18, v24);
      v26 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
      v25(&v17[*(int *)(v26 + 20)], v18 + *(int *)(v26 + 20), v24);
      v27 = *(int *)(v26 + 24);
      v28 = &v17[v27];
      v29 = (const void *)(v18 + v27);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v29, 1, v24))
      {
        v30 = sub_1000BA294(qword_100BC4E80);
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      }
      else
      {
        v25(v28, (uint64_t)v29, v24);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v28, 0, 1, v24);
      }
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v19, v22);
    *(_BYTE *)(v32 + *(int *)(v33 + 24)) = *(_BYTE *)(v12 + *(int *)(v33 + 24));
    *(_BYTE *)(a1 + *(int *)(v34 + 28)) = *(_BYTE *)(a2 + *(int *)(v34 + 28));
  }
  return a1;
}

void sub_10064778C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  sub_1000B15F8(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = v4 + *(int *)(type metadata accessor for ComparisonCapsuleViewModel.Row(0) + 20);
  type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
  if (swift_getEnumCaseMultiPayload(v5) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = sub_1000BA294(&qword_100BC4E68);
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
    v9(v5, v6);
    v7 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
    v9(v5 + *(int *)(v7 + 20), v6);
    v8 = v5 + *(int *)(v7 + 24);
    if (!_s7Weather24LocationCompositionStateOwet_0(v8, 1, v6))
      v9(v8, v6);
  }
}

uint64_t sub_1006478CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  const void *v27;
  uint64_t v28;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10008D47C(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v33 = a3;
  v9 = *(int *)(a3 + 24);
  v10 = (_QWORD *)(a1 + v9);
  v31 = a2;
  v11 = a2 + v9;
  v12 = *(_QWORD *)(a2 + v9 + 8);
  *v10 = *(_QWORD *)(a2 + v9);
  v10[1] = v12;
  v13 = *(_QWORD *)(a2 + v9 + 24);
  v10[2] = *(_QWORD *)(a2 + v9 + 16);
  v10[3] = v13;
  v14 = *(_QWORD *)(a2 + v9 + 40);
  v10[4] = *(_QWORD *)(a2 + v9 + 32);
  v10[5] = v14;
  v32 = type metadata accessor for ComparisonCapsuleViewModel.Row(0);
  v15 = *(int *)(v32 + 20);
  v30 = v10;
  v16 = (char *)v10 + v15;
  v17 = v11 + v15;
  v18 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload(v17) == 1)
  {
    *(_OWORD *)v16 = *(_OWORD *)v17;
    v19 = *(_QWORD *)(v17 + 24);
    *((_QWORD *)v16 + 2) = *(_QWORD *)(v17 + 16);
    *((_QWORD *)v16 + 3) = v19;
    v20 = *(_QWORD *)(v17 + 40);
    *((_QWORD *)v16 + 4) = *(_QWORD *)(v17 + 32);
    *((_QWORD *)v16 + 5) = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = 1;
  }
  else
  {
    v22 = sub_1000BA294(&qword_100BC4E68);
    v23 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
    v23(v16, v17, v22);
    v24 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
    v23(&v16[*(int *)(v24 + 20)], v17 + *(int *)(v24 + 20), v22);
    v25 = *(int *)(v24 + 24);
    v26 = &v16[v25];
    v27 = (const void *)(v17 + v25);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v27, 1, v22))
    {
      v28 = sub_1000BA294(qword_100BC4E80);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v23(v26, (uint64_t)v27, v22);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v26, 0, 1, v22);
    }
    v21 = 0;
  }
  swift_storeEnumTagMultiPayload(v16, v18, v21);
  *((_BYTE *)v30 + *(int *)(v32 + 24)) = *(_BYTE *)(v11 + *(int *)(v32 + 24));
  *(_BYTE *)(a1 + *(int *)(v33 + 28)) = *(_BYTE *)(v31 + *(int *)(v33 + 28));
  return a1;
}

uint64_t sub_100647AF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10008D47C(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1000B15F8(v8, v9);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *(_QWORD *)(a2 + v10);
  v11[1] = *(_QWORD *)(a2 + v10 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11[2] = v12[2];
  v11[3] = v12[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11[4] = v12[4];
  v11[5] = v12[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = type metadata accessor for ComparisonCapsuleViewModel.Row(0);
  v14 = v13;
  if (a1 != a2)
  {
    v15 = *(int *)(v13 + 20);
    v16 = (char *)v11 + v15;
    v17 = (char *)v12 + v15;
    sub_1000215BC((uint64_t)v11 + v15, type metadata accessor for ComparisonCapsuleViewModel.Row.Body);
    v18 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
    if (swift_getEnumCaseMultiPayload(v17) == 1)
    {
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
      *((_QWORD *)v16 + 2) = *((_QWORD *)v17 + 2);
      *((_QWORD *)v16 + 3) = *((_QWORD *)v17 + 3);
      *((_QWORD *)v16 + 4) = *((_QWORD *)v17 + 4);
      *((_QWORD *)v16 + 5) = *((_QWORD *)v17 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19 = 1;
    }
    else
    {
      v28 = v18;
      v29 = a3;
      v20 = sub_1000BA294(&qword_100BC4E68);
      v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
      v21(v16, v17, v20);
      v22 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
      v21(&v16[*(int *)(v22 + 20)], &v17[*(int *)(v22 + 20)], v20);
      v23 = *(int *)(v22 + 24);
      v24 = &v16[v23];
      v25 = &v17[v23];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v25, 1, v20))
      {
        v26 = sub_1000BA294(qword_100BC4E80);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        v21(v24, v25, v20);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v24, 0, 1, v20);
      }
      v19 = 0;
      v18 = v28;
      a3 = v29;
    }
    swift_storeEnumTagMultiPayload(v16, v18, v19);
  }
  *((_BYTE *)v11 + *(int *)(v14 + 24)) = *((_BYTE *)v12 + *(int *)(v14 + 24));
  *(_BYTE *)(a1 + *(int *)(a3 + 28)) = *(_BYTE *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_100647D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v3 = a3;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v7 = *(int *)(a3 + 24);
  v8 = (_OWORD *)(a1 + v7);
  v9 = a2 + v7;
  v10 = *(_OWORD *)(a2 + v7 + 32);
  v11 = *(_OWORD *)(a2 + v7);
  v8[1] = *(_OWORD *)(a2 + v7 + 16);
  v8[2] = v10;
  *v8 = v11;
  v12 = type metadata accessor for ComparisonCapsuleViewModel.Row(0);
  v13 = *(int *)(v12 + 20);
  v14 = (char *)v8 + v13;
  v15 = (char *)(v9 + v13);
  v16 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
  if (swift_getEnumCaseMultiPayload(v15))
  {
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v25 = v12;
    v26 = v3;
    v17 = sub_1000BA294(&qword_100BC4E68);
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32);
    v18(v14, v15, v17);
    v19 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
    v18(&v14[*(int *)(v19 + 20)], &v15[*(int *)(v19 + 20)], v17);
    v20 = *(int *)(v19 + 24);
    v21 = &v14[v20];
    v22 = &v15[v20];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v22, 1, v17))
    {
      v23 = sub_1000BA294(qword_100BC4E80);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      v18(v21, v22, v17);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v21, 0, 1, v17);
    }
    swift_storeEnumTagMultiPayload(v14, v16, 0);
    v12 = v25;
    v3 = v26;
  }
  *((_BYTE *)v8 + *(int *)(v12 + 24)) = *(_BYTE *)(v9 + *(int *)(v12 + 24));
  *(_BYTE *)(a1 + *(int *)(v3 + 28)) = *(_BYTE *)(a2 + *(int *)(v3 + 28));
  return a1;
}

uint64_t sub_100647F54(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1000B15F8(v8, v9);
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)(a1 + v10);
  v12 = (uint64_t *)((char *)a2 + v10);
  v13 = *(uint64_t *)((char *)a2 + v10 + 8);
  *v11 = *(uint64_t *)((char *)a2 + v10);
  v11[1] = v13;
  swift_bridgeObjectRelease();
  v14 = v12[3];
  v11[2] = v12[2];
  v11[3] = v14;
  swift_bridgeObjectRelease();
  v15 = v12[5];
  v11[4] = v12[4];
  v11[5] = v15;
  swift_bridgeObjectRelease();
  v16 = type metadata accessor for ComparisonCapsuleViewModel.Row(0);
  v17 = v16;
  if ((uint64_t *)a1 != a2)
  {
    v18 = *(int *)(v16 + 20);
    v19 = (char *)v11 + v18;
    v20 = (char *)v12 + v18;
    sub_1000215BC((uint64_t)v11 + v18, type metadata accessor for ComparisonCapsuleViewModel.Row.Body);
    v21 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
    if (swift_getEnumCaseMultiPayload(v20))
    {
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v30 = v21;
      v31 = a3;
      v22 = sub_1000BA294(&qword_100BC4E68);
      v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32);
      v23(v19, v20, v22);
      v24 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
      v23(&v19[*(int *)(v24 + 20)], &v20[*(int *)(v24 + 20)], v22);
      v25 = *(int *)(v24 + 24);
      v26 = &v19[v25];
      v27 = &v20[v25];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v27, 1, v22))
      {
        v28 = sub_1000BA294(qword_100BC4E80);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        v23(v26, v27, v22);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v26, 0, 1, v22);
      }
      a3 = v31;
      swift_storeEnumTagMultiPayload(v19, v30, 0);
    }
  }
  *((_BYTE *)v11 + *(int *)(v17 + 24)) = *((_BYTE *)v12 + *(int *)(v17 + 24));
  *(_BYTE *)(a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_100648174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100648180);
}

void sub_100648180()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000B26B8();
  if (v3)
  {
    sub_10003BCA4(*(_QWORD *)(v0 + 24));
    sub_100079F70();
  }
  else
  {
    v4 = v2;
    v5 = v1;
    v6 = sub_10009DBB0();
    sub_1000B250C(v0 + *(int *)(v4 + 24), v5, v6);
  }
}

uint64_t sub_1006481CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006481D8);
}

void sub_1006481D8()
{
  int v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000993A8();
  if (v2)
  {
    *(_QWORD *)(v1 + 24) = (v0 - 1);
    sub_100079F70();
  }
  else
  {
    sub_10009DBB0();
    sub_100098D08();
    sub_1000987C4(v3, v4, v5, v6);
  }
}

uint64_t sub_100648220(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = "\t";
  v4[1] = "(";
  result = type metadata accessor for ComparisonCapsuleViewModel.Row(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_1009BA858;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_1006482A4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v20 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v20 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    v6 = *(int *)(a3 + 20);
    v7 = (_QWORD *)(a1 + v6);
    v8 = (uint64_t)a2 + v6;
    v9 = *(uint64_t *)((char *)a2 + v6 + 8);
    *v7 = *(uint64_t *)((char *)a2 + v6);
    v7[1] = v9;
    v10 = *(uint64_t *)((char *)a2 + v6 + 24);
    v7[2] = *(uint64_t *)((char *)a2 + v6 + 16);
    v7[3] = v10;
    v11 = *(uint64_t *)((char *)a2 + v6 + 40);
    v7[4] = *(uint64_t *)((char *)a2 + v6 + 32);
    v7[5] = v11;
    v29 = a1 + v6;
    v30 = type metadata accessor for ComparisonCapsuleViewModel.Row(0);
    v12 = *(int *)(v30 + 20);
    v13 = (char *)v7 + v12;
    v14 = v8 + v12;
    v15 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload(v14) == 1)
    {
      *(_OWORD *)v13 = *(_OWORD *)v14;
      v16 = *(_QWORD *)(v14 + 24);
      *((_QWORD *)v13 + 2) = *(_QWORD *)(v14 + 16);
      *((_QWORD *)v13 + 3) = v16;
      v17 = *(_QWORD *)(v14 + 32);
      v18 = *(_QWORD *)(v14 + 40);
      *((_QWORD *)v13 + 4) = v17;
      *((_QWORD *)v13 + 5) = v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19 = 1;
    }
    else
    {
      v21 = sub_1000BA294(&qword_100BC4E68);
      v22 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
      v22(v13, v14, v21);
      v23 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
      v22(&v13[*(int *)(v23 + 20)], v14 + *(int *)(v23 + 20), v21);
      v24 = *(int *)(v23 + 24);
      v25 = &v13[v24];
      v26 = (const void *)(v14 + v24);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v26, 1, v21))
      {
        v27 = sub_1000BA294(qword_100BC4E80);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        v22(v25, (uint64_t)v26, v21);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v25, 0, 1, v21);
      }
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v15, v19);
    *(_BYTE *)(v29 + *(int *)(v30 + 24)) = *(_BYTE *)(v8 + *(int *)(v30 + 24));
  }
  return v3;
}

void sub_1006484B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = v4 + *(int *)(type metadata accessor for ComparisonCapsuleViewModel.Row(0) + 20);
  type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
  if (swift_getEnumCaseMultiPayload(v5) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = sub_1000BA294(&qword_100BC4E68);
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
    v9(v5, v6);
    v7 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
    v9(v5 + *(int *)(v7 + 20), v6);
    v8 = v5 + *(int *)(v7 + 24);
    if (!_s7Weather24LocationCompositionStateOwet_0(v8, 1, v6))
      v9(v8, v6);
  }
}

uint64_t sub_1006485E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  const void *v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v27;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 20);
  v5 = (_QWORD *)(a1 + v4);
  v6 = a2 + v4;
  v7 = *(_QWORD *)(a2 + v4 + 8);
  *v5 = *(_QWORD *)(a2 + v4);
  v5[1] = v7;
  v8 = *(_QWORD *)(a2 + v4 + 24);
  v5[2] = *(_QWORD *)(a2 + v4 + 16);
  v5[3] = v8;
  v9 = *(_QWORD *)(a2 + v4 + 40);
  v5[4] = *(_QWORD *)(a2 + v4 + 32);
  v5[5] = v9;
  v27 = type metadata accessor for ComparisonCapsuleViewModel.Row(0);
  v10 = *(int *)(v27 + 20);
  v11 = (char *)v5 + v10;
  v12 = v6 + v10;
  v13 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload(v12) == 1)
  {
    *(_OWORD *)v11 = *(_OWORD *)v12;
    v14 = *(_QWORD *)(v12 + 24);
    *((_QWORD *)v11 + 2) = *(_QWORD *)(v12 + 16);
    *((_QWORD *)v11 + 3) = v14;
    v15 = *(_QWORD *)(v12 + 32);
    v16 = *(_QWORD *)(v12 + 40);
    *((_QWORD *)v11 + 4) = v15;
    *((_QWORD *)v11 + 5) = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = 1;
  }
  else
  {
    v18 = sub_1000BA294(&qword_100BC4E68);
    v19 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
    v19(v11, v12, v18);
    v20 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
    v19(&v11[*(int *)(v20 + 20)], v12 + *(int *)(v20 + 20), v18);
    v21 = *(int *)(v20 + 24);
    v22 = &v11[v21];
    v23 = (const void *)(v12 + v21);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v23, 1, v18))
    {
      v24 = sub_1000BA294(qword_100BC4E80);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      v19(v22, (uint64_t)v23, v18);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v22, 0, 1, v18);
    }
    v17 = 0;
  }
  swift_storeEnumTagMultiPayload(v11, v13, v17);
  result = a1;
  *((_BYTE *)v5 + *(int *)(v27 + 24)) = *(_BYTE *)(v6 + *(int *)(v27 + 24));
  return result;
}

uint64_t sub_1006487C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(int *)(a3 + 20);
  v7 = (_QWORD *)(a1 + v6);
  v8 = (_QWORD *)(a2 + v6);
  *v7 = *(_QWORD *)(a2 + v6);
  v7[1] = *(_QWORD *)(a2 + v6 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[2] = v8[2];
  v7[3] = v8[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[4] = v8[4];
  v7[5] = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = type metadata accessor for ComparisonCapsuleViewModel.Row(0);
  v10 = v9;
  if (a1 != a2)
  {
    v11 = *(int *)(v9 + 20);
    v12 = (char *)v7 + v11;
    v13 = (char *)v8 + v11;
    sub_1000215BC((uint64_t)v7 + v11, type metadata accessor for ComparisonCapsuleViewModel.Row.Body);
    v14 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
    if (swift_getEnumCaseMultiPayload(v13) == 1)
    {
      *(_QWORD *)v12 = *(_QWORD *)v13;
      *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
      *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
      *((_QWORD *)v12 + 3) = *((_QWORD *)v13 + 3);
      *((_QWORD *)v12 + 4) = *((_QWORD *)v13 + 4);
      *((_QWORD *)v12 + 5) = *((_QWORD *)v13 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v15 = 1;
    }
    else
    {
      v16 = sub_1000BA294(&qword_100BC4E68);
      v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
      v17(v12, v13, v16);
      v18 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
      v17(&v12[*(int *)(v18 + 20)], &v13[*(int *)(v18 + 20)], v16);
      v19 = *(int *)(v18 + 24);
      v20 = &v12[v19];
      v21 = &v13[v19];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v21, 1, v16))
      {
        v22 = sub_1000BA294(qword_100BC4E80);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        v17(v20, v21, v16);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v20, 0, 1, v16);
      }
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v14, v15);
  }
  *((_BYTE *)v7 + *(int *)(v10 + 24)) = *((_BYTE *)v8 + *(int *)(v10 + 24));
  return a1;
}

uint64_t sub_100648A1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 20);
  v6 = (_OWORD *)(a1 + v5);
  v7 = a2 + v5;
  v8 = *(_OWORD *)(a2 + v5 + 32);
  v9 = *(_OWORD *)(a2 + v5);
  v6[1] = *(_OWORD *)(a2 + v5 + 16);
  v6[2] = v8;
  *v6 = v9;
  v10 = type metadata accessor for ComparisonCapsuleViewModel.Row(0);
  v11 = *(int *)(v10 + 20);
  v12 = (char *)v6 + v11;
  v13 = (char *)(v7 + v11);
  v14 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
  if (swift_getEnumCaseMultiPayload(v13))
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = sub_1000BA294(&qword_100BC4E68);
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
    v16(v12, v13, v15);
    v17 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
    v16(&v12[*(int *)(v17 + 20)], &v13[*(int *)(v17 + 20)], v15);
    v18 = *(int *)(v17 + 24);
    v19 = &v12[v18];
    v20 = &v13[v18];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v20, 1, v15))
    {
      v21 = sub_1000BA294(qword_100BC4E80);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v16(v19, v20, v15);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v19, 0, 1, v15);
    }
    swift_storeEnumTagMultiPayload(v12, v14, 0);
  }
  *((_BYTE *)v6 + *(int *)(v10 + 24)) = *(_BYTE *)(v7 + *(int *)(v10 + 24));
  return a1;
}

uint64_t sub_100648BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v6 = *(int *)(a3 + 20);
  v7 = (_QWORD *)(a1 + v6);
  v8 = (_QWORD *)(a2 + v6);
  v9 = *(_QWORD *)(a2 + v6 + 8);
  *v7 = *(_QWORD *)(a2 + v6);
  v7[1] = v9;
  swift_bridgeObjectRelease();
  v10 = v8[3];
  v7[2] = v8[2];
  v7[3] = v10;
  swift_bridgeObjectRelease();
  v11 = v8[5];
  v7[4] = v8[4];
  v7[5] = v11;
  swift_bridgeObjectRelease();
  v12 = type metadata accessor for ComparisonCapsuleViewModel.Row(0);
  v13 = v12;
  if (a1 != a2)
  {
    v14 = *(int *)(v12 + 20);
    v15 = (char *)v7 + v14;
    v16 = (char *)v8 + v14;
    sub_1000215BC((uint64_t)v7 + v14, type metadata accessor for ComparisonCapsuleViewModel.Row.Body);
    v17 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
    if (swift_getEnumCaseMultiPayload(v16))
    {
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v18 = sub_1000BA294(&qword_100BC4E68);
      v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32);
      v19(v15, v16, v18);
      v20 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
      v19(&v15[*(int *)(v20 + 20)], &v16[*(int *)(v20 + 20)], v18);
      v21 = *(int *)(v20 + 24);
      v22 = &v15[v21];
      v23 = &v16[v21];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v23, 1, v18))
      {
        v24 = sub_1000BA294(qword_100BC4E80);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        v19(v22, v23, v18);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v22, 0, 1, v18);
      }
      swift_storeEnumTagMultiPayload(v15, v17, 0);
    }
  }
  *((_BYTE *)v7 + *(int *)(v13 + 24)) = *((_BYTE *)v8 + *(int *)(v13 + 24));
  return a1;
}

uint64_t sub_100648D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100648D90);
}

void sub_100648D90()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000B26B8();
  if (v1)
  {
    sub_10003BCA4(*(_QWORD *)(v0 + 8));
    sub_100079F70();
  }
  else
  {
    sub_10009DBB0();
    v2 = sub_1000CFCD0();
    sub_1000B250C(v2, v3, v4);
  }
}

uint64_t sub_100648DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100648DDC);
}

void sub_100648DDC()
{
  int v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000993A8();
  if (v2)
  {
    *(_QWORD *)(v1 + 8) = (v0 - 1);
    sub_100079F70();
  }
  else
  {
    sub_10009DBB0();
    sub_100098D08();
    sub_1000987C4(v3, v4, v5, v6);
  }
}

uint64_t sub_100648E24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100648E30(a1, a2, a3, type metadata accessor for ComparisonCapsuleViewModel.Row);
}

uint64_t sub_100648E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v6;
  _QWORD v7[2];

  v7[0] = "(";
  result = a4(319);
  if (v6 <= 0x3F)
  {
    v7[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v7, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_100648EA4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t *v44;
  uint64_t v45;
  int *v46;
  uint64_t *v47;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    v11 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
    if (swift_getEnumCaseMultiPayload(a2) == 1)
    {
      v8 = type metadata accessor for UserInterfaceSizeClass(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v8))
      {
        v9 = sub_1000BA294(&qword_100BC5A68);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v8);
      }
      v12 = a1;
      v13 = v7;
      v14 = 1;
    }
    else
    {
      *a1 = *a2;
      swift_retain();
      v12 = a1;
      v13 = v7;
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v13, v14);
    v15 = a3[5];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = sub_1000BA294(&qword_100BDD668);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    v19 = a3[6];
    v20 = a3[7];
    v46 = a3;
    v47 = a2;
    v21 = (char *)a1 + v19;
    v22 = (char *)a2 + v19;
    *v21 = *v22;
    v23 = *((_QWORD *)v22 + 2);
    *((_QWORD *)v21 + 1) = *((_QWORD *)v22 + 1);
    *((_QWORD *)v21 + 2) = v23;
    *(_OWORD *)(v21 + 24) = *(_OWORD *)(v22 + 24);
    v44 = a1;
    v24 = (uint64_t *)((char *)a1 + v20);
    v25 = (uint64_t *)((char *)a2 + v20);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = v25[3];
    v24[2] = v25[2];
    v24[3] = v27;
    v28 = v25[5];
    v24[4] = v25[4];
    v24[5] = v28;
    v45 = type metadata accessor for ComparisonCapsuleViewModel.Row(0);
    v29 = *(int *)(v45 + 20);
    v30 = (char *)v24 + v29;
    v31 = (char *)v25 + v29;
    v32 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload(v31) == 1)
    {
      *(_OWORD *)v30 = *(_OWORD *)v31;
      v33 = *((_QWORD *)v31 + 3);
      *((_QWORD *)v30 + 2) = *((_QWORD *)v31 + 2);
      *((_QWORD *)v30 + 3) = v33;
      v34 = *((_QWORD *)v31 + 5);
      *((_QWORD *)v30 + 4) = *((_QWORD *)v31 + 4);
      *((_QWORD *)v30 + 5) = v34;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v35 = 1;
    }
    else
    {
      v36 = sub_1000BA294(&qword_100BC4E68);
      v37 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16);
      v37(v30, v31, v36);
      v38 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
      v37(&v30[*(int *)(v38 + 20)], &v31[*(int *)(v38 + 20)], v36);
      v39 = *(int *)(v38 + 24);
      v40 = &v30[v39];
      v41 = &v31[v39];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v41, 1, v36))
      {
        v42 = sub_1000BA294(qword_100BC4E80);
        memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        v37(v40, v41, v36);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v40, 0, 1, v36);
      }
      v35 = 0;
    }
    swift_storeEnumTagMultiPayload(v30, v32, v35);
    v11 = v44;
    *((_BYTE *)v24 + *(int *)(v45 + 24)) = *((_BYTE *)v25 + *(int *)(v45 + 24));
    *((_BYTE *)v44 + v46[8]) = *((_BYTE *)v47 + v46[8]);
  }
  return v11;
}

void sub_1006491C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (swift_getEnumCaseMultiPayload(a1) == 1)
  {
    v4 = type metadata accessor for UserInterfaceSizeClass(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(a1, 1, v4))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_1000BA294(&qword_100BDD668);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = a1 + *(int *)(a2 + 28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = v7 + *(int *)(type metadata accessor for ComparisonCapsuleViewModel.Row(0) + 20);
  type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
  if (swift_getEnumCaseMultiPayload(v8) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = sub_1000BA294(&qword_100BC4E68);
    v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
    v12(v8, v9);
    v10 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
    v12(v8 + *(int *)(v10 + 20), v9);
    v11 = v8 + *(int *)(v10 + 24);
    if (!_s7Weather24LocationCompositionStateOwet_0(v11, 1, v9))
      v12(v11, v9);
  }
}

_QWORD *sub_10064938C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v41;
  uint64_t v42;
  int *v43;
  _QWORD *v44;

  v6 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (swift_getEnumCaseMultiPayload(a2) == 1)
  {
    v7 = type metadata accessor for UserInterfaceSizeClass(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v7))
    {
      v8 = sub_1000BA294(&qword_100BC5A68);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v7);
    }
    v9 = a1;
    v10 = v6;
    v11 = 1;
  }
  else
  {
    *a1 = *a2;
    swift_retain();
    v9 = a1;
    v10 = v6;
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v10, v11);
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_1000BA294(&qword_100BDD668);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = a3[6];
  v17 = a3[7];
  v43 = a3;
  v44 = a2;
  v18 = (char *)a1 + v16;
  v19 = (char *)a2 + v16;
  *v18 = *v19;
  v20 = *((_QWORD *)v19 + 2);
  *((_QWORD *)v18 + 1) = *((_QWORD *)v19 + 1);
  *((_QWORD *)v18 + 2) = v20;
  *(_OWORD *)(v18 + 24) = *(_OWORD *)(v19 + 24);
  v41 = a1;
  v21 = (_QWORD *)((char *)a1 + v17);
  v22 = (_QWORD *)((char *)a2 + v17);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  v24 = v22[3];
  v21[2] = v22[2];
  v21[3] = v24;
  v25 = v22[5];
  v21[4] = v22[4];
  v21[5] = v25;
  v42 = type metadata accessor for ComparisonCapsuleViewModel.Row(0);
  v26 = *(int *)(v42 + 20);
  v27 = (char *)v21 + v26;
  v28 = (char *)v22 + v26;
  v29 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload(v28) == 1)
  {
    *(_OWORD *)v27 = *(_OWORD *)v28;
    v30 = *((_QWORD *)v28 + 3);
    *((_QWORD *)v27 + 2) = *((_QWORD *)v28 + 2);
    *((_QWORD *)v27 + 3) = v30;
    v31 = *((_QWORD *)v28 + 5);
    *((_QWORD *)v27 + 4) = *((_QWORD *)v28 + 4);
    *((_QWORD *)v27 + 5) = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v32 = 1;
  }
  else
  {
    v33 = sub_1000BA294(&qword_100BC4E68);
    v34 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16);
    v34(v27, v28, v33);
    v35 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
    v34(&v27[*(int *)(v35 + 20)], &v28[*(int *)(v35 + 20)], v33);
    v36 = *(int *)(v35 + 24);
    v37 = &v27[v36];
    v38 = &v28[v36];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v38, 1, v33))
    {
      v39 = sub_1000BA294(qword_100BC4E80);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      v34(v37, v38, v33);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v37, 0, 1, v33);
    }
    v32 = 0;
  }
  swift_storeEnumTagMultiPayload(v27, v29, v32);
  *((_BYTE *)v21 + *(int *)(v42 + 24)) = *((_BYTE *)v22 + *(int *)(v42 + 24));
  *((_BYTE *)v41 + v43[8]) = *((_BYTE *)v44 + v43[8]);
  return v41;
}

_QWORD *sub_10064968C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v37;
  int *v38;

  if (a1 != a2)
  {
    sub_100021A14((uint64_t)a1, (uint64_t *)&unk_100C09CD0);
    v6 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
    if (swift_getEnumCaseMultiPayload(a2) == 1)
    {
      v7 = type metadata accessor for UserInterfaceSizeClass(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v7))
      {
        v8 = sub_1000BA294(&qword_100BC5A68);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v7);
      }
      v9 = a1;
      v10 = v6;
      v11 = 1;
    }
    else
    {
      *a1 = *a2;
      swift_retain();
      v9 = a1;
      v10 = v6;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_1000BA294(&qword_100BDD668);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = a3[6];
  v17 = (char *)a1 + v16;
  v18 = (_QWORD *)((char *)a2 + v16);
  *v17 = *((_BYTE *)a2 + v16);
  *((_QWORD *)v17 + 1) = *(_QWORD *)((char *)a2 + v16 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v17 + 2) = v18[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v17 + 3) = v18[3];
  *((_QWORD *)v17 + 4) = v18[4];
  v19 = a3[7];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  *v20 = *(_QWORD *)((char *)a2 + v19);
  v20[1] = *(_QWORD *)((char *)a2 + v19 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20[2] = v21[2];
  v20[3] = v21[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20[4] = v21[4];
  v20[5] = v21[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = type metadata accessor for ComparisonCapsuleViewModel.Row(0);
  v23 = v22;
  if (a1 != a2)
  {
    v24 = *(int *)(v22 + 20);
    v25 = (char *)v20 + v24;
    v26 = (char *)v21 + v24;
    sub_1000215BC((uint64_t)v20 + v24, type metadata accessor for ComparisonCapsuleViewModel.Row.Body);
    v27 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
    if (swift_getEnumCaseMultiPayload(v26) == 1)
    {
      *(_QWORD *)v25 = *(_QWORD *)v26;
      *((_QWORD *)v25 + 1) = *((_QWORD *)v26 + 1);
      *((_QWORD *)v25 + 2) = *((_QWORD *)v26 + 2);
      *((_QWORD *)v25 + 3) = *((_QWORD *)v26 + 3);
      *((_QWORD *)v25 + 4) = *((_QWORD *)v26 + 4);
      *((_QWORD *)v25 + 5) = *((_QWORD *)v26 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v28 = 1;
    }
    else
    {
      v37 = v27;
      v38 = a3;
      v29 = sub_1000BA294(&qword_100BC4E68);
      v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
      v30(v25, v26, v29);
      v31 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
      v30(&v25[*(int *)(v31 + 20)], &v26[*(int *)(v31 + 20)], v29);
      v32 = *(int *)(v31 + 24);
      v33 = &v25[v32];
      v34 = &v26[v32];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v34, 1, v29))
      {
        v35 = sub_1000BA294(qword_100BC4E80);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        v30(v33, v34, v29);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v33, 0, 1, v29);
      }
      v28 = 0;
      v27 = v37;
      a3 = v38;
    }
    swift_storeEnumTagMultiPayload(v25, v27, v28);
  }
  *((_BYTE *)v20 + *(int *)(v23 + 24)) = *((_BYTE *)v21 + *(int *)(v23 + 24));
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

char *sub_100649A18(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v35;
  int *v36;

  v6 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (swift_getEnumCaseMultiPayload(a2) == 1)
  {
    v7 = type metadata accessor for UserInterfaceSizeClass(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v7))
    {
      v8 = sub_1000BA294(&qword_100BC5A68);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v7);
    }
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = sub_1000BA294(&qword_100BDD668);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  v13 = a3[6];
  v14 = a3[7];
  v15 = &a1[v13];
  v16 = &a2[v13];
  v17 = *(_OWORD *)v16;
  v18 = *((_OWORD *)v16 + 1);
  *((_QWORD *)v15 + 4) = *((_QWORD *)v16 + 4);
  *(_OWORD *)v15 = v17;
  *((_OWORD *)v15 + 1) = v18;
  v19 = &a1[v14];
  v20 = &a2[v14];
  v21 = *(_OWORD *)&a2[v14 + 16];
  *(_OWORD *)v19 = *(_OWORD *)&a2[v14];
  *((_OWORD *)v19 + 1) = v21;
  *((_OWORD *)v19 + 2) = *(_OWORD *)&a2[v14 + 32];
  v22 = type metadata accessor for ComparisonCapsuleViewModel.Row(0);
  v23 = *(int *)(v22 + 20);
  v24 = &v19[v23];
  v25 = &v20[v23];
  v26 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
  if (swift_getEnumCaseMultiPayload(v25))
  {
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v35 = v22;
    v36 = a3;
    v27 = sub_1000BA294(&qword_100BC4E68);
    v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32);
    v28(v24, v25, v27);
    v29 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
    v28(&v24[*(int *)(v29 + 20)], &v25[*(int *)(v29 + 20)], v27);
    v30 = *(int *)(v29 + 24);
    v31 = &v24[v30];
    v32 = &v25[v30];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v32, 1, v27))
    {
      v33 = sub_1000BA294(qword_100BC4E80);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v28(v31, v32, v27);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v31, 0, 1, v27);
    }
    swift_storeEnumTagMultiPayload(v24, v26, 0);
    v22 = v35;
    a3 = v36;
  }
  v19[*(int *)(v22 + 24)] = v20[*(int *)(v22 + 24)];
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

char *sub_100649CBC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v36;
  int *v37;

  if (a1 != a2)
  {
    sub_100021A14((uint64_t)a1, (uint64_t *)&unk_100C09CD0);
    v6 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
    if (swift_getEnumCaseMultiPayload(a2) == 1)
    {
      v7 = type metadata accessor for UserInterfaceSizeClass(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v7))
      {
        v8 = sub_1000BA294(&qword_100BC5A68);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v7);
      }
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = sub_1000BA294(&qword_100BDD668);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  *v14 = a2[v13];
  *((_QWORD *)v14 + 1) = *(_QWORD *)&a2[v13 + 8];
  swift_bridgeObjectRelease();
  *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(v15 + 24);
  v16 = a3[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = *(_QWORD *)&a2[v16 + 8];
  *(_QWORD *)v17 = *(_QWORD *)&a2[v16];
  *((_QWORD *)v17 + 1) = v19;
  swift_bridgeObjectRelease();
  v20 = *((_QWORD *)v18 + 3);
  *((_QWORD *)v17 + 2) = *((_QWORD *)v18 + 2);
  *((_QWORD *)v17 + 3) = v20;
  swift_bridgeObjectRelease();
  v21 = *((_QWORD *)v18 + 5);
  *((_QWORD *)v17 + 4) = *((_QWORD *)v18 + 4);
  *((_QWORD *)v17 + 5) = v21;
  swift_bridgeObjectRelease();
  v22 = type metadata accessor for ComparisonCapsuleViewModel.Row(0);
  v23 = v22;
  if (a1 != a2)
  {
    v24 = *(int *)(v22 + 20);
    v25 = &v17[v24];
    v26 = &v18[v24];
    sub_1000215BC((uint64_t)&v17[v24], type metadata accessor for ComparisonCapsuleViewModel.Row.Body);
    v27 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
    if (swift_getEnumCaseMultiPayload(v26))
    {
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      v36 = v27;
      v37 = a3;
      v28 = sub_1000BA294(&qword_100BC4E68);
      v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32);
      v29(v25, v26, v28);
      v30 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
      v29(&v25[*(int *)(v30 + 20)], &v26[*(int *)(v30 + 20)], v28);
      v31 = *(int *)(v30 + 24);
      v32 = &v25[v31];
      v33 = &v26[v31];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v33, 1, v28))
      {
        v34 = sub_1000BA294(qword_100BC4E80);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        v29(v32, v33, v28);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v32, 0, 1, v28);
      }
      a3 = v37;
      swift_storeEnumTagMultiPayload(v25, v36, 0);
    }
  }
  v17[*(int *)(v23 + 24)] = v18[*(int *)(v23 + 24)];
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

uint64_t sub_100649FD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100649FDC);
}

void sub_100649FDC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1000BA294((uint64_t *)&unk_100C09CB0);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    v9 = sub_1000BA294(&qword_100BDD668);
    if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)a2)
    {
      v7 = v9;
      v10 = a3[5];
    }
    else
    {
      if ((_DWORD)a2 == 0x7FFFFFFF)
      {
        sub_10003BCA4(*(_QWORD *)(a1 + a3[6] + 8));
        sub_100079F70();
        return;
      }
      v7 = sub_10009DBB0();
      v10 = a3[7];
    }
    v8 = a1 + v10;
  }
  sub_1000B250C(v8, a2, v7);
}

uint64_t sub_10064A088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10064A094);
}

void sub_10064A094()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000994F4();
  sub_1000BA294((uint64_t *)&unk_100C09CB0);
  sub_10009D2E8();
  if (!v4)
  {
    sub_1000BA294(&qword_100BDD668);
    sub_10009D2E8();
    if (!v4)
    {
      if (v3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(v1 + *(int *)(v2 + 24) + 8) = (v0 - 1);
        sub_100079F70();
        return;
      }
      sub_10009DBB0();
    }
  }
  sub_100098D08();
  sub_1000987C4(v5, v6, v7, v8);
}

void sub_10064A128(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  sub_100158AF0(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100121E44(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = "(";
      v6 = type metadata accessor for ComparisonCapsuleViewModel.Row(319);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        v8[4] = &unk_1009BA858;
        swift_initStructMetadata(a1, 256, 5, v8, a1 + 16);
      }
    }
  }
}

void sub_10064A1D8()
{
  sub_10034AEE4((uint64_t)&unk_100BFA0A0);
}

uint64_t sub_10064A204(uint64_t a1)
{
  return sub_10064A22C(a1, &qword_100BF9DD8, (uint64_t)&unk_100BF9E00);
}

uint64_t sub_10064A218(uint64_t a1)
{
  return sub_10064A22C(a1, &qword_100BF9EA8, (uint64_t)&unk_100BF9EC8);
}

uint64_t sub_10064A22C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];

  v4 = sub_100098C3C(a1, a2);
  v5 = sub_100075EB0(&qword_100BF9DF8);
  sub_10034AEE4(a3);
  v8[0] = v4;
  v8[1] = v5;
  v8[2] = v6;
  v8[3] = sub_1006472C8();
  return swift_getOpaqueTypeConformance2(v8, &opaque type descriptor for <<opaque return type of View.accessibilityChildren<A>(children:)>>, 1);
}

uint64_t sub_10064A2AC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABC214, 1);
}

uint64_t sub_10064A2BC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABC1EC, 1);
}

uint64_t sub_10064A2CC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABC1C4, 1);
}

unint64_t sub_10064A2E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFA0B8;
  if (!qword_100BFA0B8)
  {
    v1 = sub_100075EB0(&qword_100BFA0B0);
    sub_10064A388((uint64_t)&qword_100BDB4F0);
    sub_10034AEE4((uint64_t)&qword_100BCD8A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFA0B8);
  }
  return result;
}

void sub_10064A388(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!sub_10009987C(a1))
  {
    v4 = v3;
    v5 = sub_100098C3C(0, v2);
    sub_10034AEE4(v4);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v5), v1);
  }
  sub_100099960();
}

unint64_t sub_10064A3F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFA0C8;
  if (!qword_100BFA0C8)
  {
    v1 = sub_100075EB0(&qword_100BFA0C0);
    sub_10064A2E4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFA0C8);
  }
  return result;
}

double sub_10064A458(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10064A46C(a1, a2, a3);
}

double sub_10064A46C(uint64_t a1, uint64_t a2, char a3)
{
  double result;

  sub_1000D55D4(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  *(_QWORD *)&result = swift_retain().n128_u64[0];
  return result;
}

double sub_10064A4B4(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10064A4C8(a1, a2, a3);
}

double sub_10064A4C8(uint64_t a1, uint64_t a2, char a3)
{
  double result;

  sub_1000D31B4(a1, a2, a3 & 1);
  swift_release();
  swift_release();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

unint64_t sub_10064A510()
{
  unint64_t result;

  result = qword_100BFA0E0;
  if (!qword_100BFA0E0)
  {
    result = swift_getWitnessTable(&unk_1009803F4, &type metadata for ComparisonBarView);
    atomic_store(result, (unint64_t *)&qword_100BFA0E0);
  }
  return result;
}

uint64_t sub_10064A54C(uint64_t a1)
{
  sub_1000D55D4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_10064A598(uint64_t a1)
{
  sub_1000D31B4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_10064A5E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFA140;
  if (!qword_100BFA140)
  {
    v1 = sub_100075EB0(&qword_100BFA118);
    sub_10064A668((uint64_t)&unk_100BFA148);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFA140);
  }
  return result;
}

void sub_10064A668(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  if (!sub_10009987C(a1))
  {
    v3 = sub_100098C3C(0, v2);
    sub_10007A100((uint64_t)&unk_100BFA138);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3), v1);
  }
  sub_100099960();
}

void sub_10064A6D0()
{
  sub_10034AEE4((uint64_t)&unk_100BFA150);
}

unint64_t sub_10064A700()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFA160;
  if (!qword_100BFA160)
  {
    v1 = sub_100075EB0(&qword_100BFA168);
    sub_10007A100((uint64_t)&unk_100BFA0D8);
    sub_10064A510();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFA160);
  }
  return result;
}

void sub_10064A784()
{
  sub_10034AEE4((uint64_t)&unk_100BFA170);
}

uint64_t sub_10064A7B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  _QWORD *v11;
  _QWORD v12[2];
  __int128 v13;
  __int128 v14;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()(v6);
  v7 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  if (!sub_10064A8F4(v7))
  {
    v13 = 0u;
    v14 = 0u;
    goto LABEL_6;
  }
  sub_1007D4AFC();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v14 + 1))
  {
LABEL_6:
    sub_1002CAAB4((uint64_t)&v13);
    goto LABEL_7;
  }
  if (!swift_dynamicCast(v12, &v13, (char *)&type metadata for Any + 8, &type metadata for String, 6))
  {
LABEL_7:
    v8 = 0;
    v9 = 0xE000000000000000;
    goto LABEL_8;
  }
  v8 = v12[0];
  v9 = v12[1];
LABEL_8:
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
  result = type metadata accessor for MainStateProcessingContext(0);
  v11 = (_QWORD *)(a1 + *(int *)(result + 20));
  *v11 = v8;
  v11[1] = v9;
  return result;
}

uint64_t sub_10064A8F4(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, "infoDictionary");

  if (!v2)
    return 0;
  v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  return v3;
}

ValueMetadata *type metadata accessor for OverviewTableBackgroundModifier()
{
  return &type metadata for OverviewTableBackgroundModifier;
}

uint64_t initializeBufferWithCopyOfBuffer for OverviewTableView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *assignWithCopy for OverviewTableView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t *assignWithTake for OverviewTableView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for OverviewTableView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 9))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OverviewTableView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 9) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OverviewTableView()
{
  return &type metadata for OverviewTableView;
}

uint64_t sub_10064AAC4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABC2E0, 1);
}

uint64_t sub_10064AAD4(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v13 = a1;
  v4 = swift_allocObject(&unk_100B86848, 25, 7);
  *(_QWORD *)(v4 + 16) = a1;
  *(_BYTE *)(v4 + 24) = a2;
  swift_bridgeObjectRetain_n(a1, 2);
  v5 = sub_1000BA294(&qword_100BFA190);
  v6 = type metadata accessor for OverviewTableRowView(0);
  sub_10003D2DC(&qword_100BFA198, &qword_100BFA190);
  v8 = v7;
  sub_10000F1C8(&qword_100BFA1A0, type metadata accessor for OverviewTableRowView);
  v10 = v9;
  sub_10000F1C8(&qword_100BFA1A8, type metadata accessor for OverviewTableRowViewModel);
  return ForEach<>.init(_:content:)(&v13, sub_10064C090, v4, v5, &type metadata for String, v6, v8, v10, v11);
}

void sub_10064ABF0(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a4;
  v7 = sub_1000BA294(&qword_100BFA1B0);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for OverviewTableRowViewModel(0);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  v15 = (char *)&v25 - v14;
  v16 = (int *)type metadata accessor for OverviewTableRowView(0);
  __chkstk_darwin(v16);
  v18 = (uint64_t *)((char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100080C0C(a1, (uint64_t)v15, type metadata accessor for OverviewTableRowViewModel);
  sub_100080C0C(a1, (uint64_t)v12, type metadata accessor for OverviewTableRowViewModel);
  if ((a3 & 1) != 0)
  {
    sub_1000215BC((uint64_t)v12, type metadata accessor for OverviewTableRowViewModel);
    v19 = 1;
  }
  else
  {
    sub_1002F720C(a2, (uint64_t)v9);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10) == 1)
    {
      sub_100021A14((uint64_t)v9, &qword_100BFA1B0);
      sub_1000215BC((uint64_t)v12, type metadata accessor for OverviewTableRowViewModel);
      v20 = 0;
    }
    else
    {
      v22 = *v9;
      v21 = v9[1];
      swift_bridgeObjectRetain();
      sub_1000215BC((uint64_t)v9, type metadata accessor for OverviewTableRowViewModel);
      if (v22 == *v12 && v21 == v12[1])
        v20 = 1;
      else
        v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v21, *v12);
      sub_1000215BC((uint64_t)v12, type metadata accessor for OverviewTableRowViewModel);
      swift_bridgeObjectRelease();
    }
    v19 = v20 ^ 1;
  }
  *v18 = swift_getKeyPath(&unk_1009BACC8);
  v24 = sub_1000BA294(&qword_100BC2990);
  swift_storeEnumTagMultiPayload(v18, v24, 0);
  sub_10007802C((uint64_t)v15, (uint64_t)v18 + v16[5], type metadata accessor for OverviewTableRowViewModel);
  *((_BYTE *)v18 + v16[6]) = v19 & 1;
  *(_QWORD *)((char *)v18 + v16[7]) = 0x4028000000000000;
  *(_QWORD *)((char *)v18 + v16[8]) = 0x4030000000000000;
  sub_10007802C((uint64_t)v18, v26, type metadata accessor for OverviewTableRowView);
}

uint64_t sub_10064AE74()
{
  uint64_t v0;

  return sub_10064AAD4(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

uint64_t sub_10064AE80(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABC2B8, 1);
}

void sub_10064AE90(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)a2 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v4 = sub_1000BA294(&qword_100BFA280);
  sub_10064AED4(v2, a2 + *(int *)(v4 + 44));
}

void sub_10064AED4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  int *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  char v52;
  char v53;
  char v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t OpaqueTypeConformance2;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  _QWORD v115[2];
  _BYTE v116[217];
  char v117;
  char v118;
  char v119;
  char v120;
  _OWORD v121[14];

  v113 = a2;
  v3 = sub_1000BA294(&qword_100BE7B38);
  __chkstk_darwin(v3);
  v110 = (uint64_t)&v94 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AccessibilityChildBehavior(0);
  v100 = *(_QWORD *)(v5 - 8);
  v101 = v5;
  __chkstk_darwin(v5);
  v99 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BFA288);
  v103 = *(_QWORD *)(v7 - 8);
  v104 = v7;
  __chkstk_darwin(v7);
  v102 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_1000BA294(&qword_100BFA290);
  __chkstk_darwin(v109);
  v112 = (uint64_t)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v106 = (char *)&v94 - v11;
  __chkstk_darwin(v12);
  v108 = (char *)&v94 - v13;
  __chkstk_darwin(v14);
  v107 = (char *)&v94 - v15;
  __chkstk_darwin(v16);
  v111 = (uint64_t)&v94 - v17;
  v18 = type metadata accessor for Divider(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v94 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1000BA294(&qword_100BC5DD8);
  __chkstk_darwin(v22);
  v24 = (char *)&v94 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v27 = (char *)&v94 - v26;
  v28 = sub_1000BA294(&qword_100BC5E00);
  __chkstk_darwin(v28);
  v105 = (uint64_t)&v94 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v32 = (char *)&v94 - v31;
  v33 = type metadata accessor for OverviewTableRowView(0);
  v34 = (int *)v33;
  v35 = *(unsigned __int8 *)(a1 + *(int *)(v33 + 24));
  v36 = 1;
  v114 = v32;
  if (v35 == 1)
  {
    v37 = Divider.init()(v33);
    LODWORD(v98) = static Edge.Set.horizontal.getter(v37);
    v38 = a1 + v34[5];
    v39 = type metadata accessor for OverviewTableRowViewModel(0);
    v40 = 0.0;
    if (*(_BYTE *)(v38 + *(int *)(v39 + 28)) == 1)
      v40 = *(double *)(a1 + v34[8]);
    v41 = EdgeInsets.init(_all:)(v40);
    v43 = v42;
    v45 = v44;
    v47 = v46;
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v24, v21, v18);
    v48 = &v24[*(int *)(v22 + 36)];
    *v48 = v98;
    *((double *)v48 + 1) = v41;
    *((_QWORD *)v48 + 2) = v43;
    *((_QWORD *)v48 + 3) = v45;
    *((_QWORD *)v48 + 4) = v47;
    v48[40] = 0;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    sub_1000787D4((uint64_t)v24, (uint64_t)v27, &qword_100BC5DD8);
    v32 = v114;
    sub_1000787D4((uint64_t)v27, (uint64_t)v114, &qword_100BC5DD8);
    v36 = 0;
  }
  v49 = _s7Weather24LocationCompositionStateOwst_0((uint64_t)v32, v36, 1, v22);
  v50 = static VerticalAlignment.center.getter(v49);
  sub_10064B600((uint64_t)v121);
  v97 = v121[1];
  v98 = v121[0];
  v95 = v121[3];
  v96 = v121[2];
  v94 = v121[4];
  v51 = v121[5];
  v52 = v121[6];
  v53 = BYTE1(v121[6]);
  v118 = 1;
  v117 = BYTE1(v121[6]);
  v54 = static Edge.Set.vertical.getter();
  v55 = EdgeInsets.init(_all:)(*(double *)(a1 + v34[7]));
  v57 = v56;
  v59 = v58;
  v61 = v60;
  v119 = 0;
  v63 = static Edge.Set.horizontal.getter(v62);
  v64 = EdgeInsets.init(_all:)(*(double *)(a1 + v34[8]));
  v120 = 0;
  *(_QWORD *)v116 = v50;
  *(_QWORD *)&v116[8] = 0;
  v116[16] = 1;
  *(_OWORD *)&v116[24] = v98;
  *(_OWORD *)&v116[40] = v97;
  *(_OWORD *)&v116[56] = v96;
  *(_OWORD *)&v116[72] = v95;
  *(_OWORD *)&v116[88] = v94;
  *(_OWORD *)&v116[104] = v51;
  v116[120] = v52;
  v116[121] = v53;
  v116[128] = v54;
  *(double *)&v116[136] = v55;
  *(_QWORD *)&v116[144] = v57;
  *(_QWORD *)&v116[152] = v59;
  *(_QWORD *)&v116[160] = v61;
  v116[168] = v119;
  v116[176] = v63;
  *(double *)&v116[184] = v64;
  *(_QWORD *)&v116[192] = v65;
  *(_QWORD *)&v116[200] = v66;
  *(_QWORD *)&v116[208] = v67;
  v116[216] = 0;
  v68 = v99;
  static AccessibilityChildBehavior.ignore.getter(v69);
  v70 = sub_1000BA294(&qword_100BFA298);
  v71 = sub_10064D24C();
  v72 = v102;
  View.accessibilityElement(children:)(v68, v70, v71);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v68, v101);
  memcpy(v121, v116, 0xD9uLL);
  sub_10064D33C((uint64_t)v121);
  v73 = a1 + v34[5];
  v74 = *(_QWORD *)(v73 + 24);
  *(_QWORD *)v116 = *(_QWORD *)(v73 + 16);
  *(_QWORD *)&v116[8] = v74;
  v115[0] = v70;
  v115[1] = v71;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v115, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v76 = sub_100114EF8();
  v77 = (uint64_t)v106;
  v78 = v104;
  View.accessibilityLabel<A>(_:)(v116, v104, &type metadata for String, OpaqueTypeConformance2, v76);
  (*(void (**)(char *, uint64_t))(v103 + 8))(v72, v78);
  v79 = v73 + *(int *)(type metadata accessor for OverviewTableRowViewModel(0) + 24);
  v80 = v110;
  sub_100037768(v79, v110, &qword_100BE7B38);
  v81 = type metadata accessor for OverviewTableValueString(0);
  if (_s7Weather24LocationCompositionStateOwet_0(v80, 1, v81) == 1)
  {
    sub_100021A14(v80, &qword_100BE7B38);
    v82 = 0;
    v83 = 0xE000000000000000;
  }
  else
  {
    v82 = sub_100953558();
    v83 = v84;
    sub_1000215BC(v80, type metadata accessor for OverviewTableValueString);
  }
  *(_QWORD *)v116 = v82;
  *(_QWORD *)&v116[8] = v83;
  v86 = (uint64_t)v108;
  v85 = v109;
  ModifiedContent<>.accessibilityValue<A>(_:)(v116, v109, &type metadata for String, v76);
  swift_bridgeObjectRelease();
  sub_100021A14(v77, &qword_100BFA290);
  v87 = (uint64_t)v107;
  ModifiedContent<>.accessibilityRespondsToUserInteraction(_:)(0, v85);
  sub_100021A14(v86, &qword_100BFA290);
  v88 = v111;
  sub_1000787D4(v87, v111, &qword_100BFA290);
  v89 = (uint64_t)v114;
  v90 = v105;
  sub_100037768((uint64_t)v114, v105, &qword_100BC5E00);
  v91 = v112;
  sub_100037768(v88, v112, &qword_100BFA290);
  v92 = v113;
  sub_100037768(v90, v113, &qword_100BC5E00);
  v93 = sub_1000BA294(&qword_100BFA2C8);
  sub_100037768(v91, v92 + *(int *)(v93 + 48), &qword_100BFA290);
  sub_100021A14(v88, &qword_100BFA290);
  sub_100021A14(v89, &qword_100BC5E00);
  sub_100021A14(v91, &qword_100BFA290);
  sub_100021A14(v90, &qword_100BC5E00);
}

double sub_10064B600@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double result;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  __int128 v65;
  _BYTE v66[24];
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  __int16 v71;
  char v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  char v79;
  char v80;

  v2 = type metadata accessor for DynamicTypeSize(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10010FD3C();
  v7 = DynamicTypeSize.isAccessibilitySize.getter(v6);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if ((v7 & 1) != 0)
  {
    v9 = static HorizontalAlignment.leading.getter(v8);
    sub_10064BB04((uint64_t)&v73);
    v10 = v73;
    v11 = v74;
    v12 = *((_QWORD *)&v74 + 1);
    v13 = v75;
    v14 = v76;
    v15 = *((_QWORD *)&v76 + 1);
    sub_1000D55D4(v73, *((uint64_t *)&v73 + 1), v74);
    swift_bridgeObjectRetain();
    sub_1000D55D4(v13, *((uint64_t *)&v13 + 1), v14);
    swift_bridgeObjectRetain();
    sub_1000D55D4(v10, *((uint64_t *)&v10 + 1), v11);
    swift_bridgeObjectRetain();
    sub_1000D55D4(v13, *((uint64_t *)&v13 + 1), v14);
    v63 = v15;
    swift_bridgeObjectRetain();
    sub_1000D31B4(v10, *((uint64_t *)&v10 + 1), v11);
    swift_bridgeObjectRelease();
    v62 = v13;
    sub_1000D31B4(v13, *((uint64_t *)&v13 + 1), v14);
    swift_bridgeObjectRelease();
    v64 = v9;
    v65 = xmmword_100995EC0;
    *(_OWORD *)v66 = v10;
    *(_QWORD *)&v66[16] = v11;
    v67 = v12;
    v68 = v13;
    v69 = v14;
    v70 = v15;
    v71 = 0;
    v61 = sub_1000BA294(&qword_100BFA2D0);
    v16 = sub_1000BA294(&qword_100BFA2D8);
    sub_10003D2DC(&qword_100BFA2E0, &qword_100BFA2D0);
    v18 = v17;
    sub_10003D2DC(&qword_100BFA2E8, &qword_100BFA2D8);
    _ConditionalContent<>.init(storage:)(&v64, v61, v16, v18, v19);
    sub_1000D31B4(v10, *((uint64_t *)&v10 + 1), v11);
    swift_bridgeObjectRelease();
    v20 = v62;
    v21 = *((_QWORD *)&v13 + 1);
    v22 = v14;
  }
  else
  {
    v62 = sub_10064BC54();
    v61 = v23;
    v63 = v24;
    v60 = v25 & 1;
    type metadata accessor for OverviewTableRowView(0);
    v26 = sub_10056D7E0();
    v28 = v27;
    v30 = v29;
    v32 = v31 & 1;
    v34 = static Color.secondary.getter(v33);
    v35 = Text.foregroundColor(_:)(v34, v26, v28, v32, v30);
    v37 = v36;
    v39 = v38;
    v41 = v40;
    swift_release();
    v42 = v39 & 1;
    sub_1000D31B4(v26, v28, v32);
    swift_bridgeObjectRelease();
    v43 = v60;
    v72 = v60;
    v44 = v62;
    v45 = v61;
    sub_1000D55D4(v62, v61, v60);
    v46 = v63;
    swift_bridgeObjectRetain();
    sub_1000D55D4(v35, v37, v39 & 1);
    swift_bridgeObjectRetain();
    sub_1000D55D4(v44, v45, v43);
    swift_bridgeObjectRetain();
    sub_1000D55D4(v35, v37, v39 & 1);
    swift_bridgeObjectRetain();
    sub_1000D31B4(v35, v37, v39 & 1);
    swift_bridgeObjectRelease();
    sub_1000D31B4(v44, v45, v72);
    swift_bridgeObjectRelease();
    v64 = v44;
    *(_QWORD *)&v65 = v45;
    *((_QWORD *)&v65 + 1) = v43;
    *(_QWORD *)v66 = v46;
    *(_OWORD *)&v66[8] = xmmword_100995EC0;
    v67 = v35;
    *(_QWORD *)&v68 = v37;
    *((_QWORD *)&v68 + 1) = v39 & 1;
    v69 = v41;
    v70 = xmmword_10099F730;
    v71 = 256;
    v47 = sub_1000BA294(&qword_100BFA2D0);
    v48 = sub_1000BA294(&qword_100BFA2D8);
    sub_10003D2DC(&qword_100BFA2E0, &qword_100BFA2D0);
    v50 = v49;
    sub_10003D2DC(&qword_100BFA2E8, &qword_100BFA2D8);
    _ConditionalContent<>.init(storage:)(&v64, v47, v48, v50, v51);
    sub_1000D31B4(v35, v37, v42);
    swift_bridgeObjectRelease();
    v20 = v62;
    v21 = v61;
    v22 = v60;
  }
  sub_1000D31B4(v20, v21, v22);
  swift_bridgeObjectRelease();
  result = *(double *)&v73;
  v53 = v74;
  v54 = v75;
  v55 = v76;
  v56 = v77;
  v57 = v78;
  v58 = v79;
  v59 = v80;
  *(_OWORD *)a1 = v73;
  *(_OWORD *)(a1 + 16) = v53;
  *(_OWORD *)(a1 + 32) = v54;
  *(_OWORD *)(a1 + 48) = v55;
  *(_OWORD *)(a1 + 64) = v56;
  *(_OWORD *)(a1 + 80) = v57;
  *(_BYTE *)(a1 + 96) = v58;
  *(_BYTE *)(a1 + 97) = v59;
  return result;
}

double sub_10064BB04@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  double result;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = sub_10064BC54();
  v24 = v3;
  v25 = v2;
  v26 = v4;
  v23 = v5 & 1;
  type metadata accessor for OverviewTableRowView(0);
  v6 = sub_10056D7E0();
  v8 = v7;
  v10 = v9;
  v12 = v11 & 1;
  v14 = static Color.secondary.getter(v13);
  v15 = Text.foregroundColor(_:)(v14, v6, v8, v12, v10);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  swift_release();
  v19 &= 1u;
  sub_1000D31B4(v6, v8, v12);
  swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v24;
  *(_BYTE *)(a1 + 16) = v23;
  *(_QWORD *)(a1 + 24) = v26;
  *(_QWORD *)(a1 + 32) = v15;
  *(_QWORD *)(a1 + 40) = v17;
  *(_BYTE *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 56) = v21;
  sub_1000D55D4(v25, v24, v23);
  swift_bridgeObjectRetain();
  sub_1000D55D4(v15, v17, v19);
  swift_bridgeObjectRetain();
  sub_1000D31B4(v15, v17, v19);
  swift_bridgeObjectRelease();
  sub_1000D31B4(v25, v24, v23);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_10064BC54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];

  v2 = type metadata accessor for Font.TextStyle(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100099864();
  v4 = v0 + *(int *)(type metadata accessor for OverviewTableRowView(0) + 20);
  v5 = *(_QWORD *)(v4 + 24);
  v18[0] = *(_QWORD *)(v4 + 16);
  v18[1] = v5;
  v6 = sub_100114EF8();
  swift_bridgeObjectRetain();
  v7 = Text.init<A>(_:)(v18, &type metadata for String, v6);
  v9 = v8;
  v11 = v10;
  v13 = v12 & 1;
  v14 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v1, enum case for Font.TextStyle.body(_:), v2);
  static Font.Weight.semibold.getter(v14);
  v15 = static Font.system(_:weight:)(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v16 = Text.font(_:)(v15, v7, v9, v13, v11);
  swift_release();
  sub_1000D31B4(v7, v9, v13);
  swift_bridgeObjectRelease();
  return v16;
}

void sub_10064BDA0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;

  v33 = a1;
  v34 = a2;
  v3 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v3);
  sub_100099864();
  v4 = sub_1000BA294(&qword_100BFA178);
  __chkstk_darwin(v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = static Alignment.center.getter(v7);
  v31 = v9;
  v32 = v8;
  v10 = *(int *)(v4 + 36);
  if (qword_100BC20C0 != -1)
    swift_once(&qword_100BC20C0, sub_1004049E8);
  v11 = (uint64_t)&v6[v10];
  swift_beginAccess(&qword_100CAE968, v35, 33, 0);
  v12 = sub_1004043D0();
  v13 = (uint64_t)v2 + *(int *)(v3 + 20);
  type metadata accessor for RoundedCornerStyle(0);
  v30 = v3;
  sub_1000DDDA0(v13);
  *v2 = v12;
  v2[1] = v12;
  sub_10040441C();
  v15 = v14;
  swift_endAccess(v35);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v35, 0, 0, 1.0, 10.0, 0.0);
  sub_100080C0C((uint64_t)v2, v11, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v16 = v11 + *(int *)(sub_1000BA294(&qword_100BDCBF8) + 36);
  v17 = v35[1];
  *(_OWORD *)v16 = v35[0];
  *(_OWORD *)(v16 + 16) = v17;
  *(_QWORD *)(v16 + 32) = v36;
  v18 = sub_1000BA294(&qword_100BDCC00);
  *(_QWORD *)(v11 + *(int *)(v18 + 52)) = v15;
  *(_WORD *)(v11 + *(int *)(v18 + 56)) = 256;
  v19 = static Alignment.center.getter(v18);
  v21 = v20;
  v22 = (uint64_t *)(v11 + *(int *)(sub_1000BA294(&qword_100BDCC08) + 36));
  *v22 = v19;
  v22[1] = v21;
  sub_1000B4C00();
  v23 = (uint64_t *)(v11 + *(int *)(sub_1000BA294(&qword_100BDCC10) + 36));
  v24 = v31;
  *v23 = v32;
  v23[1] = v24;
  v25 = sub_1000BA294(&qword_100BFA180);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v6, v33, v25);
  v26 = sub_1004043D0();
  sub_1000DDDA0((uint64_t)v2 + *(int *)(v30 + 20));
  *v2 = v26;
  v2[1] = v26;
  v27 = sub_1000BA294(&qword_100BFA188);
  v28 = v34;
  v29 = v34 + *(int *)(v27 + 36);
  sub_100080C0C((uint64_t)v2, v29, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v29 + *(int *)(sub_1000BA294(&qword_100BD3DA8) + 36)) = 256;
  sub_100037768((uint64_t)v6, v28, &qword_100BFA178);
  sub_1000B4C00();
  sub_100021A14((uint64_t)v6, &qword_100BFA178);
}

uint64_t sub_10064C06C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

void sub_10064C090(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_10064ABF0(a1, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24), a2);
}

uint64_t type metadata accessor for OverviewTableRowView(uint64_t a1)
{
  uint64_t result;

  result = qword_100BFA210;
  if (!qword_100BFA210)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OverviewTableRowView);
  return result;
}

_QWORD *sub_10064C0DC(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t EnumCaseMultiPayload;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1000BA294(&qword_100BC2990);
    if (swift_getEnumCaseMultiPayload(a2) == 1)
    {
      v8 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      *a1 = *a2;
      swift_retain();
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v13 = a3[5];
    v14 = (_QWORD *)((char *)a1 + v13);
    v15 = (char *)a2 + v13;
    v16 = *(_QWORD *)((char *)a2 + v13 + 8);
    *v14 = *(_QWORD *)((char *)a2 + v13);
    v14[1] = v16;
    v17 = *(_QWORD *)((char *)a2 + v13 + 24);
    v14[2] = *(_QWORD *)((char *)a2 + v13 + 16);
    v14[3] = v17;
    v37 = type metadata accessor for OverviewTableRowViewModel(0);
    v18 = *(int *)(v37 + 24);
    v19 = (_QWORD *)((char *)v14 + v18);
    v20 = (uint64_t *)&v15[v18];
    v21 = type metadata accessor for OverviewTableValueString(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v20, 1, v21))
    {
      v22 = sub_1000BA294(&qword_100BE7B38);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      v23 = v37;
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v20);
      v25 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2 || (_DWORD)EnumCaseMultiPayload == 1)
      {
        v27 = *v20;
        v26 = v20[1];
        v36 = v26;
        v28 = *((_BYTE *)v20 + 16);
        sub_100121DEC(v27, v26, v28);
        *v19 = v27;
        v19[1] = v36;
        *((_BYTE *)v19 + 16) = v28;
      }
      else
      {
        v29 = type metadata accessor for AttributedString(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v19, v20, v29);
        v30 = *(int *)(sub_1000BA294(&qword_100BF17E0) + 48);
        v31 = (uint64_t *)((char *)v19 + v30);
        v32 = (uint64_t *)((char *)v20 + v30);
        v33 = v32[1];
        *v31 = *v32;
        v31[1] = v33;
        swift_bridgeObjectRetain();
      }
      v23 = v37;
      swift_storeEnumTagMultiPayload(v19, v21, v25);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v19, 0, 1, v21);
    }
    *((_BYTE *)v14 + *(int *)(v23 + 28)) = v15[*(int *)(v23 + 28)];
    v34 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    *(_QWORD *)((char *)a1 + v34) = *(_QWORD *)((char *)a2 + v34);
    *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  }
  return a1;
}

double sub_10064C334(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  int EnumCaseMultiPayload;
  uint64_t v10;

  sub_1000BA294(&qword_100BC2990);
  if (swift_getEnumCaseMultiPayload(a1) == 1)
  {
    v4 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  v5 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = v5 + *(int *)(type metadata accessor for OverviewTableRowViewModel(0) + 24);
  v7 = type metadata accessor for OverviewTableValueString(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v6, 1, v7))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6);
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      return sub_100121E04(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_BYTE *)(v6 + 16));
    }
    else if (!EnumCaseMultiPayload)
    {
      v10 = type metadata accessor for AttributedString(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v6, v10);
      sub_1000BA294(&qword_100BF17E0);
      *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    }
  }
  return result;
}

_QWORD *sub_10064C458(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t EnumCaseMultiPayload;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;

  v6 = sub_1000BA294(&qword_100BC2990);
  if (swift_getEnumCaseMultiPayload(a2) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    *a1 = *a2;
    swift_retain();
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v11 = a3[5];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (char *)a2 + v11;
  v14 = *(_QWORD *)((char *)a2 + v11 + 8);
  *v12 = *(_QWORD *)((char *)a2 + v11);
  v12[1] = v14;
  v15 = *(_QWORD *)((char *)a2 + v11 + 24);
  v12[2] = *(_QWORD *)((char *)a2 + v11 + 16);
  v12[3] = v15;
  v34 = type metadata accessor for OverviewTableRowViewModel(0);
  v16 = *(int *)(v34 + 24);
  v17 = (_QWORD *)((char *)v12 + v16);
  v18 = (uint64_t *)&v13[v16];
  v19 = type metadata accessor for OverviewTableValueString(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v18, 1, v19))
  {
    v20 = sub_1000BA294(&qword_100BE7B38);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18);
    v22 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2 || (_DWORD)EnumCaseMultiPayload == 1)
    {
      v24 = *v18;
      v23 = v18[1];
      v33 = v23;
      v25 = *((_BYTE *)v18 + 16);
      sub_100121DEC(v24, v23, v25);
      *v17 = v24;
      v17[1] = v33;
      *((_BYTE *)v17 + 16) = v25;
    }
    else
    {
      v26 = type metadata accessor for AttributedString(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v17, v18, v26);
      v27 = *(int *)(sub_1000BA294(&qword_100BF17E0) + 48);
      v28 = (uint64_t *)((char *)v17 + v27);
      v29 = (uint64_t *)((char *)v18 + v27);
      v30 = v29[1];
      *v28 = *v29;
      v28[1] = v30;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload(v17, v19, v22);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v17, 0, 1, v19);
  }
  *((_BYTE *)v12 + *(int *)(v34 + 28)) = v13[*(int *)(v34 + 28)];
  v31 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v31) = *(_QWORD *)((char *)a2 + v31);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  return a1;
}

_QWORD *sub_10064C680(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t EnumCaseMultiPayload;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  if (a1 != a2)
  {
    sub_100021A14((uint64_t)a1, &qword_100BC2990);
    v6 = sub_1000BA294(&qword_100BC2990);
    if (swift_getEnumCaseMultiPayload(a2) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      *a1 = *a2;
      swift_retain();
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v11 = a3[5];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (char *)a2 + v11;
  *v12 = *(_QWORD *)((char *)a2 + v11);
  v12[1] = *(_QWORD *)((char *)a2 + v11 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12[2] = *((_QWORD *)v13 + 2);
  v12[3] = *((_QWORD *)v13 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = type metadata accessor for OverviewTableRowViewModel(0);
  v15 = *(int *)(v14 + 24);
  v16 = (uint64_t)v12 + v15;
  v17 = (uint64_t)&v13[v15];
  v18 = type metadata accessor for OverviewTableValueString(0);
  v19 = _s7Weather24LocationCompositionStateOwet_0(v16, 1, v18);
  v20 = _s7Weather24LocationCompositionStateOwet_0(v17, 1, v18);
  if (v19)
  {
    if (!v20)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17);
      v22 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2 || (_DWORD)EnumCaseMultiPayload == 1)
      {
        v23 = *(_QWORD *)(v17 + 8);
        v45 = v23;
        v46 = *(_QWORD *)v17;
        v24 = *(_BYTE *)(v17 + 16);
        sub_100121DEC(v46, v23, v24);
        *(_QWORD *)v16 = v46;
        *(_QWORD *)(v16 + 8) = v45;
        *(_BYTE *)(v16 + 16) = v24;
      }
      else
      {
        v33 = type metadata accessor for AttributedString(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v16, v17, v33);
        v34 = *(int *)(sub_1000BA294(&qword_100BF17E0) + 48);
        v35 = (_QWORD *)(v16 + v34);
        v36 = (_QWORD *)(v17 + v34);
        *v35 = *v36;
        v35[1] = v36[1];
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload(v16, v18, v22);
      _s7Weather24LocationCompositionStateOwst_0(v16, 0, 1, v18);
      goto LABEL_23;
    }
LABEL_13:
    v25 = sub_1000BA294(&qword_100BE7B38);
    memcpy((void *)v16, (const void *)v17, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_23;
  }
  if (v20)
  {
    sub_1000215BC(v16, type metadata accessor for OverviewTableValueString);
    goto LABEL_13;
  }
  if (a1 != a2)
  {
    sub_1000215BC(v16, type metadata accessor for OverviewTableValueString);
    v26 = swift_getEnumCaseMultiPayload(v17);
    if (v26 == 2)
    {
      v38 = *(_QWORD *)v17;
      v37 = *(_QWORD *)(v17 + 8);
      v48 = v37;
      v39 = *(_BYTE *)(v17 + 16);
      sub_100121DEC(v38, v37, v39);
      *(_QWORD *)v16 = v38;
      *(_QWORD *)(v16 + 8) = v48;
      *(_BYTE *)(v16 + 16) = v39;
      v30 = v16;
      v31 = v18;
      v32 = 2;
    }
    else if (v26 == 1)
    {
      v28 = *(_QWORD *)v17;
      v27 = *(_QWORD *)(v17 + 8);
      v47 = v27;
      v29 = *(_BYTE *)(v17 + 16);
      sub_100121DEC(v28, v27, v29);
      *(_QWORD *)v16 = v28;
      *(_QWORD *)(v16 + 8) = v47;
      *(_BYTE *)(v16 + 16) = v29;
      v30 = v16;
      v31 = v18;
      v32 = 1;
    }
    else
    {
      v40 = type metadata accessor for AttributedString(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v16, v17, v40);
      v41 = *(int *)(sub_1000BA294(&qword_100BF17E0) + 48);
      v42 = (_QWORD *)(v16 + v41);
      v43 = (_QWORD *)(v17 + v41);
      *v42 = *v43;
      v42[1] = v43[1];
      swift_bridgeObjectRetain();
      v30 = v16;
      v31 = v18;
      v32 = 0;
    }
    swift_storeEnumTagMultiPayload(v30, v31, v32);
  }
LABEL_23:
  *((_BYTE *)v12 + *(int *)(v14 + 28)) = v13[*(int *)(v14 + 28)];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  return a1;
}

char *sub_10064CA10(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = sub_1000BA294(&qword_100BC2990);
  if (swift_getEnumCaseMultiPayload(a2) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_OWORD *)&a2[v8 + 16];
  *(_OWORD *)v9 = *(_OWORD *)&a2[v8];
  *((_OWORD *)v9 + 1) = v11;
  v12 = type metadata accessor for OverviewTableRowViewModel(0);
  v13 = *(int *)(v12 + 24);
  v14 = &v9[v13];
  v15 = &v10[v13];
  v16 = type metadata accessor for OverviewTableValueString(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v16))
  {
    v17 = sub_1000BA294(&qword_100BE7B38);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(v15))
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v18 = type metadata accessor for AttributedString(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v14, v15, v18);
      v19 = sub_1000BA294(&qword_100BF17E0);
      *(_OWORD *)&v14[*(int *)(v19 + 48)] = *(_OWORD *)&v15[*(int *)(v19 + 48)];
      swift_storeEnumTagMultiPayload(v14, v16, 0);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 0, 1, v16);
  }
  v9[*(int *)(v12 + 28)] = v10[*(int *)(v12 + 28)];
  v20 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  *(_QWORD *)&a1[v20] = *(_QWORD *)&a2[v20];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  return a1;
}

char *sub_10064CBE4(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  if (a1 != a2)
  {
    sub_100021A14((uint64_t)a1, &qword_100BC2990);
    v6 = sub_1000BA294(&qword_100BC2990);
    if (swift_getEnumCaseMultiPayload(a2) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)&a2[v8 + 8];
  *(_QWORD *)v9 = *(_QWORD *)&a2[v8];
  *((_QWORD *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  v12 = *((_QWORD *)v10 + 3);
  *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
  *((_QWORD *)v9 + 3) = v12;
  swift_bridgeObjectRelease();
  v13 = type metadata accessor for OverviewTableRowViewModel(0);
  v14 = *(int *)(v13 + 24);
  v15 = &v9[v14];
  v16 = &v10[v14];
  v17 = type metadata accessor for OverviewTableValueString(0);
  v18 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v17);
  v19 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v17);
  if (!v18)
  {
    if (!v19)
    {
      if (a1 == a2)
        goto LABEL_18;
      sub_1000215BC((uint64_t)v15, type metadata accessor for OverviewTableValueString);
      if (!swift_getEnumCaseMultiPayload(v16))
      {
        v25 = type metadata accessor for AttributedString(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v15, v16, v25);
        v26 = sub_1000BA294(&qword_100BF17E0);
        *(_OWORD *)&v15[*(int *)(v26 + 48)] = *(_OWORD *)&v16[*(int *)(v26 + 48)];
        swift_storeEnumTagMultiPayload(v15, v17, 0);
        goto LABEL_18;
      }
      v20 = *(_QWORD *)(v17 - 8);
      goto LABEL_12;
    }
    sub_1000215BC((uint64_t)v15, type metadata accessor for OverviewTableValueString);
LABEL_11:
    v20 = *(_QWORD *)(sub_1000BA294(&qword_100BE7B38) - 8);
LABEL_12:
    memcpy(v15, v16, *(_QWORD *)(v20 + 64));
    goto LABEL_18;
  }
  if (v19)
    goto LABEL_11;
  if (swift_getEnumCaseMultiPayload(v16))
  {
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v21 = type metadata accessor for AttributedString(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v15, v16, v21);
    v22 = sub_1000BA294(&qword_100BF17E0);
    *(_OWORD *)&v15[*(int *)(v22 + 48)] = *(_OWORD *)&v16[*(int *)(v22 + 48)];
    swift_storeEnumTagMultiPayload(v15, v17, 0);
  }
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 0, 1, v17);
LABEL_18:
  v9[*(int *)(v13 + 28)] = v10[*(int *)(v13 + 28)];
  v23 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  *(_QWORD *)&a1[v23] = *(_QWORD *)&a2[v23];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  return a1;
}

uint64_t sub_10064CE90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10064CE9C);
}

uint64_t sub_10064CE9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v11;

  v6 = sub_1000BA294(&qword_100BD8F08);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
    return _s7Weather24LocationCompositionStateOwet_0(v8, a2, v7);
  }
  v9 = type metadata accessor for OverviewTableRowViewModel(0);
  if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v9;
    v8 = a1 + *(int *)(a3 + 20);
    return _s7Weather24LocationCompositionStateOwet_0(v8, a2, v7);
  }
  v11 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v11 >= 2)
    return ((v11 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_10064CF50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10064CF5C);
}

uint64_t sub_10064CF5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = sub_1000BA294(&qword_100BD8F08);
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
    return _s7Weather24LocationCompositionStateOwst_0(v10, a2, a2, v9);
  }
  result = type metadata accessor for OverviewTableRowViewModel(0);
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
  {
    v9 = result;
    v10 = a1 + *(int *)(a4 + 20);
    return _s7Weather24LocationCompositionStateOwst_0(v10, a2, a2, v9);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  return result;
}

void sub_10064CFFC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  sub_100335124(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for OverviewTableRowViewModel(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = &unk_1009BAD18;
      v6[3] = (char *)&value witness table for Builtin.Int64 + 64;
      v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

unint64_t sub_10064D09C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFA258;
  if (!qword_100BFA258)
  {
    v1 = sub_100075EB0(&qword_100BFA188);
    sub_10064D120();
    sub_10003D2DC(&qword_100BD9910, &qword_100BD3DA8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFA258);
  }
  return result;
}

unint64_t sub_10064D120()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFA260;
  if (!qword_100BFA260)
  {
    v1 = sub_100075EB0(&qword_100BFA178);
    sub_10003D2DC(&qword_100BFA268, &qword_100BFA180);
    sub_10003D2DC(&qword_100BDCC28, &qword_100BDCC10);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFA260);
  }
  return result;
}

unint64_t sub_10064D1C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFA270;
  if (!qword_100BFA270)
  {
    v1 = sub_100075EB0(&qword_100BFA278);
    sub_10000F1C8(&qword_100BFA1A0, type metadata accessor for OverviewTableRowView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFA270);
  }
  return result;
}

uint64_t sub_10064D23C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABC308, 1);
}

unint64_t sub_10064D24C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFA2A0;
  if (!qword_100BFA2A0)
  {
    v1 = sub_100075EB0(&qword_100BFA298);
    sub_10064D2B8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFA2A0);
  }
  return result;
}

unint64_t sub_10064D2B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFA2A8;
  if (!qword_100BFA2A8)
  {
    v1 = sub_100075EB0(&qword_100BFA2B0);
    sub_10003D2DC(&qword_100BFA2B8, &qword_100BFA2C0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFA2A8);
  }
  return result;
}

uint64_t sub_10064D33C(uint64_t a1)
{
  sub_10064D39C(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_BYTE *)(a1 + 120), *(_BYTE *)(a1 + 121));
  return a1;
}

double sub_10064D39C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, char a14)
{
  double result;

  if ((a14 & 1) != 0)
  {
    sub_1000D31B4(a1, a2, a3 & 1);
    swift_bridgeObjectRelease();
    sub_1000D31B4(a7, a8, a9 & 1);
  }
  else
  {
    sub_1000D31B4(a4, a5, a6 & 1);
    swift_bridgeObjectRelease();
    sub_1000D31B4(a8, a9, a10 & 1);
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_10064D43C()
{
  sub_10003D2DC(&qword_100BFA2F0, &qword_100BFA2F8);
}

uint64_t sub_10064D46C(uint64_t *a1, uint64_t *a2)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(type metadata accessor for UnitsConfigurationViewModel.Representation(0) - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_10064D4D4 + 4 * byte_1009BAD80[swift_getEnumCaseMultiPayload(a2)];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t type metadata accessor for UnitsConfigurationViewModel.Representation(uint64_t a1)
{
  return sub_100098190(a1, qword_100BFA740, (uint64_t)&nominal type descriptor for UnitsConfigurationViewModel.Representation);
}

uint64_t type metadata accessor for UnitsConfigurationViewModel.Temperature(uint64_t a1)
{
  return sub_100098190(a1, qword_100BFA640, (uint64_t)&nominal type descriptor for UnitsConfigurationViewModel.Temperature);
}

uint64_t type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(uint64_t a1)
{
  return sub_100098190(a1, qword_100BFA598, (uint64_t)&nominal type descriptor for UnitsConfigurationViewModel.Representation.Temperature);
}

uint64_t type metadata accessor for UnitsConfigurationViewModel.Representation.MultipleRows(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100BFA4D0, (uint64_t)&nominal type descriptor for UnitsConfigurationViewModel.Representation.MultipleRows);
}

uint64_t type metadata accessor for UnitsConfigurationViewModel.Representation.Full(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100BFA3E8, (uint64_t)&nominal type descriptor for UnitsConfigurationViewModel.Representation.Full);
}

uint64_t sub_10064DE8C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  type metadata accessor for UnitsConfigurationViewModel.Representation(0);
  result = swift_getEnumCaseMultiPayload(a1);
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      v3 = a1 + *(int *)(sub_1000BA294(&qword_100BD7048) + 36);
      v4 = type metadata accessor for UnitConfiguration.Distance(0);
      goto LABEL_29;
    case 1:
      swift_bridgeObjectRelease();
      v3 = a1 + *(int *)(sub_1000BA294(&qword_100BD7020) + 36);
      v4 = type metadata accessor for UnitConfiguration.Precipitation(0);
      goto LABEL_29;
    case 2:
      swift_bridgeObjectRelease();
      v3 = a1 + *(int *)(sub_1000BA294(&qword_100BD7008) + 36);
      v4 = type metadata accessor for UnitConfiguration.Pressure(0);
      goto LABEL_29;
    case 3:
      swift_bridgeObjectRelease();
      v5 = a1 + *(int *)(sub_1000BA294(&qword_100BD6FC0) + 36);
      v6 = type metadata accessor for UnitConfiguration.Temperature(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v5, 1, v6))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
      v7 = a1 + *(int *)(type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(0) + 20);
      result = _s7Weather24LocationCompositionStateOwet_0(v7, 1, v6);
      if ((_DWORD)result)
        return result;
      v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v9 = v7;
      v10 = v6;
      goto LABEL_30;
    case 4:
      goto LABEL_27;
    case 5:
      v11 = sub_1000BA294(&qword_100BD7048);
      if (!_s7Weather24LocationCompositionStateOwet_0(a1, 1, v11))
      {
        swift_bridgeObjectRelease();
        v12 = a1 + *(int *)(v11 + 36);
        v13 = type metadata accessor for UnitConfiguration.Distance(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
      }
      v14 = (int *)type metadata accessor for UnitsConfigurationViewModel.Representation.MultipleRows(0);
      v15 = a1 + v14[5];
      v16 = sub_1000BA294(&qword_100BD7020);
      if (!_s7Weather24LocationCompositionStateOwet_0(v15, 1, v16))
      {
        swift_bridgeObjectRelease();
        v17 = v15 + *(int *)(v16 + 36);
        v18 = type metadata accessor for UnitConfiguration.Precipitation(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
      }
      v19 = a1 + v14[6];
      v20 = sub_1000BA294(&qword_100BD7008);
      if (!_s7Weather24LocationCompositionStateOwet_0(v19, 1, v20))
      {
        swift_bridgeObjectRelease();
        v21 = v19 + *(int *)(v20 + 36);
        v22 = type metadata accessor for UnitConfiguration.Pressure(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
      }
      v23 = a1 + v14[7];
      v24 = type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v23, 1, v24))
      {
        swift_bridgeObjectRelease();
        v25 = v23 + *(int *)(sub_1000BA294(&qword_100BD6FC0) + 36);
        v26 = type metadata accessor for UnitConfiguration.Temperature(0);
        if (!_s7Weather24LocationCompositionStateOwet_0(v25, 1, v26))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
        v27 = v23 + *(int *)(v24 + 20);
        if (!_s7Weather24LocationCompositionStateOwet_0(v27, 1, v26))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v27, v26);
      }
      a1 += v14[8];
      v28 = sub_1000BA294(&qword_100BD6FB8);
      result = _s7Weather24LocationCompositionStateOwet_0(a1, 1, v28);
      if ((_DWORD)result)
        return result;
      swift_bridgeObjectRelease();
      v42 = *(int *)(v28 + 36);
      goto LABEL_28;
    case 6:
      swift_bridgeObjectRelease();
      v29 = a1 + *(int *)(sub_1000BA294(&qword_100BD7048) + 36);
      v30 = type metadata accessor for UnitConfiguration.Distance(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
      v31 = (int *)type metadata accessor for UnitsConfigurationViewModel.Representation.Full(0);
      v32 = a1 + v31[5];
      swift_bridgeObjectRelease();
      v33 = v32 + *(int *)(sub_1000BA294(&qword_100BD7020) + 36);
      v34 = type metadata accessor for UnitConfiguration.Precipitation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v33, v34);
      v35 = a1 + v31[6];
      swift_bridgeObjectRelease();
      v36 = v35 + *(int *)(sub_1000BA294(&qword_100BD7008) + 36);
      v37 = type metadata accessor for UnitConfiguration.Pressure(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v36, v37);
      v38 = a1 + v31[7];
      swift_bridgeObjectRelease();
      v39 = v38 + *(int *)(sub_1000BA294(&qword_100BD6FC0) + 36);
      v40 = type metadata accessor for UnitConfiguration.Temperature(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v39, 1, v40))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v39, v40);
      v41 = v38 + *(int *)(type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(0) + 20);
      if (!_s7Weather24LocationCompositionStateOwet_0(v41, 1, v40))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v41, v40);
      a1 += v31[8];
LABEL_27:
      swift_bridgeObjectRelease();
      v42 = *(int *)(sub_1000BA294(&qword_100BD6FB8) + 36);
LABEL_28:
      v3 = a1 + v42;
      v4 = type metadata accessor for UnitConfiguration.WindSpeed(0);
LABEL_29:
      v10 = v4;
      v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
      v9 = v3;
LABEL_30:
      result = v8(v9, v10);
      break;
    default:
      return result;
  }
  return result;
}

void sub_10064E384(uint64_t a1, uint64_t a2)
{
  char *v3;

  type metadata accessor for UnitsConfigurationViewModel.Representation(0);
  v3 = (char *)sub_10064E3E0 + 4 * byte_1009BAD96[swift_getEnumCaseMultiPayload(a2)];
  __asm { BR              X10 }
}

_QWORD *sub_10064E3E0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;

  *v0 = *v2;
  swift_bridgeObjectRetain();
  v3 = *(int *)(sub_1000BA294(&qword_100BD7048) + 36);
  v4 = (char *)v0 + v3;
  v5 = (char *)v2 + v3;
  v6 = type metadata accessor for UnitConfiguration.Distance(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v4, v5, v6);
  swift_storeEnumTagMultiPayload(v0, v1, 0);
  return v0;
}

uint64_t sub_10064ED14(uint64_t result, uint64_t a2)
{
  char *v3;

  if (result != a2)
  {
    sub_1000215BC(result, type metadata accessor for UnitsConfigurationViewModel.Representation);
    type metadata accessor for UnitsConfigurationViewModel.Representation(0);
    v3 = (char *)&loc_10064ED88 + 4 * byte_1009BAD9D[swift_getEnumCaseMultiPayload(a2)];
    __asm { BR              X10 }
  }
  return result;
}

void sub_10064F6BC(uint64_t a1, uint64_t a2)
{
  char *v3;

  type metadata accessor for UnitsConfigurationViewModel.Representation(0);
  v3 = (char *)sub_10064F714 + 4 * byte_1009BADA4[swift_getEnumCaseMultiPayload(a2)];
  __asm { BR              X10 }
}

_QWORD *sub_10064F714()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;

  *v0 = *v2;
  v3 = *(int *)(sub_1000BA294(&qword_100BD7048) + 36);
  v4 = (char *)v0 + v3;
  v5 = (char *)v2 + v3;
  v6 = type metadata accessor for UnitConfiguration.Distance(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v4, v5, v6);
  swift_storeEnumTagMultiPayload(v0, v1, 0);
  return v0;
}

uint64_t sub_10064FFD0(uint64_t result, uint64_t a2)
{
  char *v3;

  if (result != a2)
  {
    sub_1000215BC(result, type metadata accessor for UnitsConfigurationViewModel.Representation);
    type metadata accessor for UnitsConfigurationViewModel.Representation(0);
    v3 = (char *)&loc_100650040 + 4 * byte_1009BADAB[swift_getEnumCaseMultiPayload(a2)];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_1006508FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100650908);
}

uint64_t sub_100650908(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10011DBBC();
  return _s7Weather24LocationCompositionStateOwet_0(a1, a2, v4);
}

uint64_t sub_100650938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100650944);
}

uint64_t sub_100650944()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10011DBBC();
  sub_100075E28();
  sub_100098D08();
  return _s7Weather24LocationCompositionStateOwst_0(v0, v1, v2, v3);
}

uint64_t type metadata accessor for UnitsConfigurationViewModel(uint64_t a1)
{
  return sub_100098190(a1, qword_100BFA358, (uint64_t)&nominal type descriptor for UnitsConfigurationViewModel);
}

uint64_t sub_100650984(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for UnitsConfigurationViewModel.Representation(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_1006509EC(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (_QWORD *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    swift_bridgeObjectRetain();
    v8 = *(int *)(sub_1000BA294(&qword_100BD7048) + 36);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnitConfiguration.Distance(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[5];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
    swift_bridgeObjectRetain();
    v15 = *(int *)(sub_1000BA294(&qword_100BD7020) + 36);
    v16 = &v13[v15];
    v17 = &v14[v15];
    v18 = type metadata accessor for UnitConfiguration.Precipitation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    v19 = a3[6];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    *(_QWORD *)((char *)a1 + v19) = *(_QWORD *)((char *)a2 + v19);
    swift_bridgeObjectRetain();
    v22 = *(int *)(sub_1000BA294(&qword_100BD7008) + 36);
    v23 = &v20[v22];
    v24 = &v21[v22];
    v25 = type metadata accessor for UnitConfiguration.Pressure(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
    v26 = a3[7];
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    *(_QWORD *)((char *)a1 + v26) = *(_QWORD *)((char *)a2 + v26);
    swift_bridgeObjectRetain();
    v29 = *(int *)(sub_1000BA294(&qword_100BD6FC0) + 36);
    v30 = &v27[v29];
    v31 = &v28[v29];
    v32 = type metadata accessor for UnitConfiguration.Temperature(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v31, 1, v32))
    {
      v33 = type metadata accessor for UnitsConfigurationViewModel.Temperature(0);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v30, 0, 1, v32);
    }
    v34 = *(int *)(type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(0) + 20);
    v35 = &v27[v34];
    v36 = &v28[v34];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v28[v34], 1, v32))
    {
      v37 = sub_1000BA294(&qword_100BD7148);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v35, v36, v32);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v35, 0, 1, v32);
    }
    v38 = a3[8];
    v39 = (char *)a1 + v38;
    v40 = (char *)a2 + v38;
    *(_QWORD *)((char *)a1 + v38) = *(_QWORD *)((char *)a2 + v38);
    swift_bridgeObjectRetain();
    v41 = *(int *)(sub_1000BA294(&qword_100BD6FB8) + 36);
    v42 = &v39[v41];
    v43 = &v40[v41];
    v44 = type metadata accessor for UnitConfiguration.WindSpeed(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
    v45 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *((_BYTE *)a1 + v45) = *((_BYTE *)a2 + v45);
  }
  return a1;
}

uint64_t sub_100650CAC(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(sub_1000BA294(&qword_100BD7048) + 36);
  v5 = type metadata accessor for UnitConfiguration.Distance(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[5];
  swift_bridgeObjectRelease();
  v7 = v6 + *(int *)(sub_1000BA294(&qword_100BD7020) + 36);
  v8 = type metadata accessor for UnitConfiguration.Precipitation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[6];
  swift_bridgeObjectRelease();
  v10 = v9 + *(int *)(sub_1000BA294(&qword_100BD7008) + 36);
  v11 = type metadata accessor for UnitConfiguration.Pressure(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = a1 + a2[7];
  swift_bridgeObjectRelease();
  v13 = v12 + *(int *)(sub_1000BA294(&qword_100BD6FC0) + 36);
  v14 = type metadata accessor for UnitConfiguration.Temperature(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v13, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = v12 + *(int *)(type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(0) + 20);
  if (!_s7Weather24LocationCompositionStateOwet_0(v15, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v15, v14);
  v16 = a1 + a2[8];
  swift_bridgeObjectRelease();
  v17 = v16 + *(int *)(sub_1000BA294(&qword_100BD6FB8) + 36);
  v18 = type metadata accessor for UnitConfiguration.WindSpeed(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
}

_QWORD *sub_100650E60(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  v6 = *(int *)(sub_1000BA294(&qword_100BD7048) + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnitConfiguration.Distance(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  swift_bridgeObjectRetain();
  v13 = *(int *)(sub_1000BA294(&qword_100BD7020) + 36);
  v14 = &v11[v13];
  v15 = &v12[v13];
  v16 = type metadata accessor for UnitConfiguration.Precipitation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  v17 = a3[6];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  *(_QWORD *)((char *)a1 + v17) = *(_QWORD *)((char *)a2 + v17);
  swift_bridgeObjectRetain();
  v20 = *(int *)(sub_1000BA294(&qword_100BD7008) + 36);
  v21 = &v18[v20];
  v22 = &v19[v20];
  v23 = type metadata accessor for UnitConfiguration.Pressure(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  v24 = a3[7];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  *(_QWORD *)((char *)a1 + v24) = *(_QWORD *)((char *)a2 + v24);
  swift_bridgeObjectRetain();
  v27 = *(int *)(sub_1000BA294(&qword_100BD6FC0) + 36);
  v28 = &v25[v27];
  v29 = &v26[v27];
  v30 = type metadata accessor for UnitConfiguration.Temperature(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v29, 1, v30))
  {
    v31 = type metadata accessor for UnitsConfigurationViewModel.Temperature(0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v28, 0, 1, v30);
  }
  v32 = *(int *)(type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(0) + 20);
  v33 = &v25[v32];
  v34 = &v26[v32];
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v26[v32], 1, v30))
  {
    v35 = sub_1000BA294(&qword_100BD7148);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v33, v34, v30);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v33, 0, 1, v30);
  }
  v36 = a3[8];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  *(_QWORD *)((char *)a1 + v36) = *(_QWORD *)((char *)a2 + v36);
  swift_bridgeObjectRetain();
  v39 = *(int *)(sub_1000BA294(&qword_100BD6FB8) + 36);
  v40 = &v37[v39];
  v41 = &v38[v39];
  v42 = type metadata accessor for UnitConfiguration.WindSpeed(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
  v43 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *((_BYTE *)a1 + v43) = *((_BYTE *)a2 + v43);
  return a1;
}

_QWORD *sub_1006510FC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(sub_1000BA294(&qword_100BD7048) + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnitConfiguration.Distance(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = *(int *)(sub_1000BA294(&qword_100BD7020) + 36);
  v14 = &v11[v13];
  v15 = &v12[v13];
  v16 = type metadata accessor for UnitConfiguration.Precipitation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  v17 = a3[6];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  *(_QWORD *)((char *)a1 + v17) = *(_QWORD *)((char *)a2 + v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = *(int *)(sub_1000BA294(&qword_100BD7008) + 36);
  v21 = &v18[v20];
  v22 = &v19[v20];
  v23 = type metadata accessor for UnitConfiguration.Pressure(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 24))(v21, v22, v23);
  v24 = a3[7];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  *(_QWORD *)((char *)a1 + v24) = *(_QWORD *)((char *)a2 + v24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27 = *(int *)(sub_1000BA294(&qword_100BD6FC0) + 36);
  v28 = &v25[v27];
  v29 = &v26[v27];
  v30 = type metadata accessor for UnitConfiguration.Temperature(0);
  v31 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v28, 1, v30);
  v32 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v29, 1, v30);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v28, 0, 1, v30);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v33 = *(_QWORD *)(v30 - 8);
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v28, v30);
LABEL_6:
    v34 = type metadata accessor for UnitsConfigurationViewModel.Temperature(0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v33 + 24))(v28, v29, v30);
LABEL_7:
  v35 = *(int *)(type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(0) + 20);
  v36 = &v25[v35];
  v37 = &v26[v35];
  v38 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)&v25[v35], 1, v30);
  v39 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v37, 1, v30);
  if (!v38)
  {
    v40 = *(_QWORD *)(v30 - 8);
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 24))(v36, v37, v30);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v40 + 8))(v36, v30);
    goto LABEL_12;
  }
  if (v39)
  {
LABEL_12:
    v41 = sub_1000BA294(&qword_100BD7148);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v36, v37, v30);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v36, 0, 1, v30);
LABEL_13:
  v42 = a3[8];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  *(_QWORD *)((char *)a1 + v42) = *(_QWORD *)((char *)a2 + v42);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v45 = *(int *)(sub_1000BA294(&qword_100BD6FB8) + 36);
  v46 = &v43[v45];
  v47 = &v44[v45];
  v48 = type metadata accessor for UnitConfiguration.WindSpeed(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 24))(v46, v47, v48);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

_QWORD *sub_100651470(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;

  *a1 = *a2;
  v6 = *(int *)(sub_1000BA294(&qword_100BD7048) + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnitConfiguration.Distance(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  v13 = *(int *)(sub_1000BA294(&qword_100BD7020) + 36);
  v14 = &v11[v13];
  v15 = &v12[v13];
  v16 = type metadata accessor for UnitConfiguration.Precipitation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  v17 = a3[6];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  *(_QWORD *)((char *)a1 + v17) = *(_QWORD *)((char *)a2 + v17);
  v20 = *(int *)(sub_1000BA294(&qword_100BD7008) + 36);
  v21 = &v18[v20];
  v22 = &v19[v20];
  v23 = type metadata accessor for UnitConfiguration.Pressure(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
  v24 = a3[7];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  *(_QWORD *)((char *)a1 + v24) = *(_QWORD *)((char *)a2 + v24);
  v27 = *(int *)(sub_1000BA294(&qword_100BD6FC0) + 36);
  v28 = &v25[v27];
  v29 = &v26[v27];
  v30 = type metadata accessor for UnitConfiguration.Temperature(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v29, 1, v30))
  {
    v31 = type metadata accessor for UnitsConfigurationViewModel.Temperature(0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v28, 0, 1, v30);
  }
  v32 = *(int *)(type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(0) + 20);
  v33 = &v25[v32];
  v34 = &v26[v32];
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v26[v32], 1, v30))
  {
    v35 = sub_1000BA294(&qword_100BD7148);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v33, v34, v30);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v33, 0, 1, v30);
  }
  v36 = a3[8];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  *(_QWORD *)((char *)a1 + v36) = *(_QWORD *)((char *)a2 + v36);
  v39 = *(int *)(sub_1000BA294(&qword_100BD6FB8) + 36);
  v40 = &v37[v39];
  v41 = &v38[v39];
  v42 = type metadata accessor for UnitConfiguration.WindSpeed(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
  v43 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *((_BYTE *)a1 + v43) = *((_BYTE *)a2 + v43);
  return a1;
}

_QWORD *sub_1006516F8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(sub_1000BA294(&qword_100BD7048) + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnitConfiguration.Distance(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  swift_bridgeObjectRelease();
  v13 = *(int *)(sub_1000BA294(&qword_100BD7020) + 36);
  v14 = &v11[v13];
  v15 = &v12[v13];
  v16 = type metadata accessor for UnitConfiguration.Precipitation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  v17 = a3[6];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  *(_QWORD *)((char *)a1 + v17) = *(_QWORD *)((char *)a2 + v17);
  swift_bridgeObjectRelease();
  v20 = *(int *)(sub_1000BA294(&qword_100BD7008) + 36);
  v21 = &v18[v20];
  v22 = &v19[v20];
  v23 = type metadata accessor for UnitConfiguration.Pressure(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 40))(v21, v22, v23);
  v24 = a3[7];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  *(_QWORD *)((char *)a1 + v24) = *(_QWORD *)((char *)a2 + v24);
  swift_bridgeObjectRelease();
  v27 = *(int *)(sub_1000BA294(&qword_100BD6FC0) + 36);
  v28 = &v25[v27];
  v29 = &v26[v27];
  v30 = type metadata accessor for UnitConfiguration.Temperature(0);
  v31 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v28, 1, v30);
  v32 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v29, 1, v30);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v28, 0, 1, v30);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v33 = *(_QWORD *)(v30 - 8);
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v28, v30);
LABEL_6:
    v34 = type metadata accessor for UnitsConfigurationViewModel.Temperature(0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v33 + 40))(v28, v29, v30);
LABEL_7:
  v35 = *(int *)(type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(0) + 20);
  v36 = &v25[v35];
  v37 = &v26[v35];
  v38 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)&v25[v35], 1, v30);
  v39 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v37, 1, v30);
  if (!v38)
  {
    v40 = *(_QWORD *)(v30 - 8);
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 40))(v36, v37, v30);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v40 + 8))(v36, v30);
    goto LABEL_12;
  }
  if (v39)
  {
LABEL_12:
    v41 = sub_1000BA294(&qword_100BD7148);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v36, v37, v30);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v36, 0, 1, v30);
LABEL_13:
  v42 = a3[8];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  *(_QWORD *)((char *)a1 + v42) = *(_QWORD *)((char *)a2 + v42);
  swift_bridgeObjectRelease();
  v45 = *(int *)(sub_1000BA294(&qword_100BD6FB8) + 36);
  v46 = &v43[v45];
  v47 = &v44[v45];
  v48 = type metadata accessor for UnitConfiguration.WindSpeed(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 40))(v46, v47, v48);
  v49 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *((_BYTE *)a1 + v49) = *((_BYTE *)a2 + v49);
  return a1;
}

uint64_t sub_100651A40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100651A4C);
}

uint64_t sub_100651A4C()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unsigned int v15;

  sub_1000D08E8();
  sub_1000BA294(&qword_100BD7048);
  sub_100088FF0();
  if (v5)
  {
    v3 = sub_1000890E8();
    return sub_1000B250C(v3, v0, v4);
  }
  sub_1000BA294(&qword_100BD7020);
  sub_100088FF0();
  if (v5)
  {
    v4 = v6;
    v7 = v2[5];
LABEL_16:
    v3 = v1 + v7;
    return sub_1000B250C(v3, v0, v4);
  }
  sub_1000BA294(&qword_100BD7008);
  sub_100088FF0();
  if (v8)
  {
    v4 = v9;
    v7 = v2[6];
    goto LABEL_16;
  }
  type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(0);
  sub_100088FF0();
  if (v10)
  {
    v4 = v11;
    v7 = v2[7];
    goto LABEL_16;
  }
  sub_1000BA294(&qword_100BD6FB8);
  sub_100088FF0();
  if (v12)
  {
    v4 = v13;
    v7 = v2[8];
    goto LABEL_16;
  }
  v15 = *(unsigned __int8 *)(v1 + v2[9]);
  if (v15 >= 2)
    return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_100651B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100651B48);
}

void sub_100651B48()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1000994F4();
  sub_1000BA294(&qword_100BD7048);
  sub_10009D2E8();
  if (v3)
  {
    sub_100075E28();
  }
  else
  {
    sub_1000BA294(&qword_100BD7020);
    sub_10009D2E8();
    if (!v3)
    {
      sub_1000BA294(&qword_100BD7008);
      sub_10009D2E8();
      if (!v4)
      {
        type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(0);
        sub_10009D2E8();
        if (!v5)
        {
          sub_1000BA294(&qword_100BD6FB8);
          sub_10009D2E8();
          if (!v6)
          {
            *(_BYTE *)(v1 + *(int *)(v2 + 36)) = v0 + 1;
            return;
          }
        }
      }
    }
  }
  sub_100098D08();
  sub_1000987C4(v7, v8, v9, v10);
}

void sub_100651C1C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[7];

  sub_10065485C(319, &qword_100BFA3F8, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Distance, &qword_100BFA400, (uint64_t)&unk_1009A80F0);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10065485C(319, &qword_100BFA408, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Precipitation, &qword_100BFA410, (uint64_t)&unk_1009A810C);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_10065485C(319, &qword_100BFA418, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Pressure, &qword_100BFA420, (uint64_t)&unk_1009A8128);
      if (v7 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(319);
        if (v9 <= 0x3F)
        {
          v12[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_10065485C(319, &qword_100BFA428, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.WindSpeed, (unint64_t *)&unk_100BFA430, (uint64_t)&unk_1009A8160);
          if (v11 <= 0x3F)
          {
            v12[4] = *(_QWORD *)(v10 - 8) + 64;
            v12[5] = &unk_1009BAE58;
            v12[6] = &unk_1009BAE58;
            swift_initStructMetadata(a1, 256, 7, v12, a1 + 16);
          }
        }
      }
    }
  }
}

uint64_t type metadata accessor for UnitsConfigurationViewModel.Configuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnitsConfigurationViewModel.Configuration);
}

uint64_t *sub_100651D8C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t, __n128);
  __n128 v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t, __n128);
  __n128 v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t, __n128);
  __n128 v62;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1000BA294(&qword_100BD7048);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v7))
    {
      v8 = sub_1000BA294(&qword_100BD71D8);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v10 = *(int *)(v7 + 36);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = type metadata accessor for UnitConfiguration.Distance(0);
      v14 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v13 - 8) + 16);
      v15 = swift_bridgeObjectRetain();
      v14(v11, v12, v13, v15);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v7);
    }
    v16 = a3[5];
    v17 = (uint64_t *)((char *)a1 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = sub_1000BA294(&qword_100BD7020);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v18, 1, v19))
    {
      v20 = sub_1000BA294(&qword_100BD71E0);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      *v17 = *v18;
      v21 = *(int *)(v19 + 36);
      v22 = (char *)v17 + v21;
      v23 = (char *)v18 + v21;
      v24 = type metadata accessor for UnitConfiguration.Precipitation(0);
      v25 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v24 - 8) + 16);
      v26 = swift_bridgeObjectRetain();
      v25(v22, v23, v24, v26);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v17, 0, 1, v19);
    }
    v27 = a3[6];
    v28 = (uint64_t *)((char *)a1 + v27);
    v29 = (uint64_t *)((char *)a2 + v27);
    v30 = sub_1000BA294(&qword_100BD7008);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v29, 1, v30))
    {
      v31 = sub_1000BA294(&qword_100BD71E8);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      *v28 = *v29;
      v32 = *(int *)(v30 + 36);
      v33 = (char *)v28 + v32;
      v34 = (char *)v29 + v32;
      v35 = type metadata accessor for UnitConfiguration.Pressure(0);
      v36 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v35 - 8) + 16);
      v37 = swift_bridgeObjectRetain();
      v36(v33, v34, v35, v37);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v28, 0, 1, v30);
    }
    v38 = a3[7];
    v39 = (uint64_t *)((char *)a1 + v38);
    v40 = (uint64_t *)((char *)a2 + v38);
    v41 = type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v40, 1, v41))
    {
      v42 = sub_1000BA294(&qword_100BD71F0);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      *v39 = *v40;
      swift_bridgeObjectRetain();
      v43 = *(int *)(sub_1000BA294(&qword_100BD6FC0) + 36);
      v44 = (char *)v39 + v43;
      v45 = (char *)v40 + v43;
      v46 = type metadata accessor for UnitConfiguration.Temperature(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v45, 1, v46))
      {
        v47 = type metadata accessor for UnitsConfigurationViewModel.Temperature(0);
        memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v44, 0, 1, v46);
      }
      v48 = *(int *)(v41 + 20);
      v49 = (char *)v39 + v48;
      v50 = (char *)v40 + v48;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v50, 1, v46))
      {
        v51 = sub_1000BA294(&qword_100BD7148);
        memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v49, v50, v46);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v49, 0, 1, v46);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v39, 0, 1, v41);
    }
    v52 = a3[8];
    v53 = (uint64_t *)((char *)a1 + v52);
    v54 = (uint64_t *)((char *)a2 + v52);
    v55 = sub_1000BA294(&qword_100BD6FB8);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v54, 1, v55))
    {
      v56 = sub_1000BA294(&qword_100BD71F8);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      *v53 = *v54;
      v57 = *(int *)(v55 + 36);
      v58 = (char *)v53 + v57;
      v59 = (char *)v54 + v57;
      v60 = type metadata accessor for UnitConfiguration.WindSpeed(0);
      v61 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v60 - 8) + 16);
      v62 = swift_bridgeObjectRetain();
      v61(v58, v59, v60, v62);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v53, 0, 1, v55);
    }
  }
  return a1;
}

uint64_t sub_1006521F8(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;

  v4 = sub_1000BA294(&qword_100BD7048);
  if (!_s7Weather24LocationCompositionStateOwet_0(a1, 1, v4))
  {
    swift_bridgeObjectRelease();
    v5 = a1 + *(int *)(v4 + 36);
    v6 = type metadata accessor for UnitConfiguration.Distance(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  v7 = a1 + a2[5];
  v8 = sub_1000BA294(&qword_100BD7020);
  if (!_s7Weather24LocationCompositionStateOwet_0(v7, 1, v8))
  {
    swift_bridgeObjectRelease();
    v9 = v7 + *(int *)(v8 + 36);
    v10 = type metadata accessor for UnitConfiguration.Precipitation(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  }
  v11 = a1 + a2[6];
  v12 = sub_1000BA294(&qword_100BD7008);
  if (!_s7Weather24LocationCompositionStateOwet_0(v11, 1, v12))
  {
    swift_bridgeObjectRelease();
    v13 = v11 + *(int *)(v12 + 36);
    v14 = type metadata accessor for UnitConfiguration.Pressure(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  v15 = a1 + a2[7];
  v16 = type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v15, 1, v16))
  {
    swift_bridgeObjectRelease();
    v17 = v15 + *(int *)(sub_1000BA294(&qword_100BD6FC0) + 36);
    v18 = type metadata accessor for UnitConfiguration.Temperature(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v17, 1, v18))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
    v19 = v15 + *(int *)(v16 + 20);
    if (!_s7Weather24LocationCompositionStateOwet_0(v19, 1, v18))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v19, v18);
  }
  v20 = a1 + a2[8];
  v21 = sub_1000BA294(&qword_100BD6FB8);
  result = _s7Weather24LocationCompositionStateOwet_0(v20, 1, v21);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    v23 = v20 + *(int *)(v21 + 36);
    v24 = type metadata accessor for UnitConfiguration.WindSpeed(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  }
  return result;
}

_QWORD *sub_100652438(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t, __n128);
  __n128 v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t, __n128);
  __n128 v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t, __n128);
  __n128 v60;

  v6 = sub_1000BA294(&qword_100BD7048);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6))
  {
    v7 = sub_1000BA294(&qword_100BD71D8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v8 = *(int *)(v6 + 36);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnitConfiguration.Distance(0);
    v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
    v13 = swift_bridgeObjectRetain();
    v12(v9, v10, v11, v13);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
  }
  v14 = a3[5];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v17 = sub_1000BA294(&qword_100BD7020);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v17))
  {
    v18 = sub_1000BA294(&qword_100BD71E0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    *v15 = *v16;
    v19 = *(int *)(v17 + 36);
    v20 = (char *)v15 + v19;
    v21 = (char *)v16 + v19;
    v22 = type metadata accessor for UnitConfiguration.Precipitation(0);
    v23 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v22 - 8) + 16);
    v24 = swift_bridgeObjectRetain();
    v23(v20, v21, v22, v24);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 0, 1, v17);
  }
  v25 = a3[6];
  v26 = (_QWORD *)((char *)a1 + v25);
  v27 = (_QWORD *)((char *)a2 + v25);
  v28 = sub_1000BA294(&qword_100BD7008);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v27, 1, v28))
  {
    v29 = sub_1000BA294(&qword_100BD71E8);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    *v26 = *v27;
    v30 = *(int *)(v28 + 36);
    v31 = (char *)v26 + v30;
    v32 = (char *)v27 + v30;
    v33 = type metadata accessor for UnitConfiguration.Pressure(0);
    v34 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v33 - 8) + 16);
    v35 = swift_bridgeObjectRetain();
    v34(v31, v32, v33, v35);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v26, 0, 1, v28);
  }
  v36 = a3[7];
  v37 = (_QWORD *)((char *)a1 + v36);
  v38 = (_QWORD *)((char *)a2 + v36);
  v39 = type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v38, 1, v39))
  {
    v40 = sub_1000BA294(&qword_100BD71F0);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    *v37 = *v38;
    swift_bridgeObjectRetain();
    v41 = *(int *)(sub_1000BA294(&qword_100BD6FC0) + 36);
    v42 = (char *)v37 + v41;
    v43 = (char *)v38 + v41;
    v44 = type metadata accessor for UnitConfiguration.Temperature(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v43, 1, v44))
    {
      v45 = type metadata accessor for UnitsConfigurationViewModel.Temperature(0);
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v42, 0, 1, v44);
    }
    v46 = *(int *)(v39 + 20);
    v47 = (char *)v37 + v46;
    v48 = (char *)v38 + v46;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v48, 1, v44))
    {
      v49 = sub_1000BA294(&qword_100BD7148);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v47, v48, v44);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v47, 0, 1, v44);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v37, 0, 1, v39);
  }
  v50 = a3[8];
  v51 = (_QWORD *)((char *)a1 + v50);
  v52 = (_QWORD *)((char *)a2 + v50);
  v53 = sub_1000BA294(&qword_100BD6FB8);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v52, 1, v53))
  {
    v54 = sub_1000BA294(&qword_100BD71F8);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    *v51 = *v52;
    v55 = *(int *)(v53 + 36);
    v56 = (char *)v51 + v55;
    v57 = (char *)v52 + v55;
    v58 = type metadata accessor for UnitConfiguration.WindSpeed(0);
    v59 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v58 - 8) + 16);
    v60 = swift_bridgeObjectRetain();
    v59(v56, v57, v58, v60);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v51, 0, 1, v53);
  }
  return a1;
}

_QWORD *sub_100652878(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t, __n128);
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t, __n128);
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  size_t v53;
  void *v54;
  const void *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  void (*v90)(char *, char *, uint64_t, __n128);
  __n128 v91;
  uint64_t v92;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v105;

  v6 = sub_1000BA294(&qword_100BD7048);
  v7 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 1, v6);
  v8 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      *a1 = *a2;
      v9 = *(int *)(v6 + 36);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for UnitConfiguration.Distance(0);
      v13 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v12 - 8) + 16);
      v14 = swift_bridgeObjectRetain();
      v13(v10, v11, v12, v14);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v8)
  {
    sub_100021A14((uint64_t)a1, &qword_100BD7048);
LABEL_6:
    v15 = sub_1000BA294(&qword_100BD71D8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v56 = *(int *)(v6 + 36);
  v57 = (char *)a1 + v56;
  v58 = (char *)a2 + v56;
  v59 = type metadata accessor for UnitConfiguration.Distance(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 24))(v57, v58, v59);
LABEL_7:
  v16 = a3[5];
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  v19 = sub_1000BA294(&qword_100BD7020);
  v20 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v17, 1, v19);
  v21 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v18, 1, v19);
  if (v20)
  {
    if (!v21)
    {
      *v17 = *v18;
      v22 = *(int *)(v19 + 36);
      v23 = (char *)v17 + v22;
      v24 = (char *)v18 + v22;
      v25 = type metadata accessor for UnitConfiguration.Precipitation(0);
      v26 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v25 - 8) + 16);
      v27 = swift_bridgeObjectRetain();
      v26(v23, v24, v25, v27);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v17, 0, 1, v19);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v21)
  {
    sub_100021A14((uint64_t)v17, &qword_100BD7020);
LABEL_12:
    v28 = sub_1000BA294(&qword_100BD71E0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  *v17 = *v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v60 = *(int *)(v19 + 36);
  v61 = (char *)v17 + v60;
  v62 = (char *)v18 + v60;
  v63 = type metadata accessor for UnitConfiguration.Precipitation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 24))(v61, v62, v63);
LABEL_13:
  v29 = a3[6];
  v30 = (_QWORD *)((char *)a1 + v29);
  v31 = (_QWORD *)((char *)a2 + v29);
  v32 = sub_1000BA294(&qword_100BD7008);
  v33 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v30, 1, v32);
  v34 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v31, 1, v32);
  if (v33)
  {
    if (!v34)
    {
      *v30 = *v31;
      v35 = *(int *)(v32 + 36);
      v36 = (char *)v30 + v35;
      v37 = (char *)v31 + v35;
      v38 = type metadata accessor for UnitConfiguration.Pressure(0);
      v39 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v38 - 8) + 16);
      v40 = swift_bridgeObjectRetain();
      v39(v36, v37, v38, v40);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v30, 0, 1, v32);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v34)
  {
    sub_100021A14((uint64_t)v30, &qword_100BD7008);
LABEL_18:
    v41 = sub_1000BA294(&qword_100BD71E8);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_19;
  }
  *v30 = *v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v64 = *(int *)(v32 + 36);
  v65 = (char *)v30 + v64;
  v66 = (char *)v31 + v64;
  v67 = type metadata accessor for UnitConfiguration.Pressure(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 24))(v65, v66, v67);
LABEL_19:
  v42 = a3[7];
  v43 = (_QWORD *)((char *)a1 + v42);
  v44 = (_QWORD *)((char *)a2 + v42);
  v45 = type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(0);
  v46 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v43, 1, v45);
  v47 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v44, 1, v45);
  if (v46)
  {
    if (!v47)
    {
      *v43 = *v44;
      swift_bridgeObjectRetain();
      v48 = *(int *)(sub_1000BA294(&qword_100BD6FC0) + 36);
      v49 = (char *)v43 + v48;
      v50 = (char *)v44 + v48;
      v51 = type metadata accessor for UnitConfiguration.Temperature(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v50, 1, v51))
      {
        v52 = type metadata accessor for UnitsConfigurationViewModel.Temperature(0);
        memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v49, v50, v51);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v49, 0, 1, v51);
      }
      v74 = *(int *)(v45 + 20);
      v75 = (char *)v43 + v74;
      v76 = (char *)v44 + v74;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v76, 1, v51))
      {
        v77 = sub_1000BA294(&qword_100BD7148);
        memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v75, v76, v51);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v75, 0, 1, v51);
      }
      v78 = (uint64_t)v43;
      v79 = v45;
      goto LABEL_38;
    }
    goto LABEL_25;
  }
  if (v47)
  {
    sub_1000215BC((uint64_t)v43, type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature);
LABEL_25:
    v53 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD71F0) - 8) + 64);
    v54 = v43;
    v55 = v44;
LABEL_26:
    memcpy(v54, v55, v53);
    goto LABEL_39;
  }
  *v43 = *v44;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v68 = *(int *)(sub_1000BA294(&qword_100BD6FC0) + 36);
  v69 = (char *)v43 + v68;
  v70 = (char *)v44 + v68;
  v71 = type metadata accessor for UnitConfiguration.Temperature(0);
  v72 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v69, 1, v71);
  v73 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v70, 1, v71);
  if (v72)
  {
    if (!v73)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v69, v70, v71);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v69, 0, 1, v71);
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  v98 = *(_QWORD *)(v71 - 8);
  if (v73)
  {
    (*(void (**)(char *, uint64_t))(v98 + 8))(v69, v71);
LABEL_49:
    v99 = type metadata accessor for UnitsConfigurationViewModel.Temperature(0);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
    goto LABEL_50;
  }
  (*(void (**)(char *, char *, uint64_t))(v98 + 24))(v69, v70, v71);
LABEL_50:
  v100 = *(int *)(v45 + 20);
  v101 = (uint64_t)v43 + v100;
  v102 = (uint64_t)v44 + v100;
  v103 = _s7Weather24LocationCompositionStateOwet_0(v101, 1, v71);
  v104 = _s7Weather24LocationCompositionStateOwet_0(v102, 1, v71);
  if (v103)
  {
    if (!v104)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v101, v102, v71);
      v78 = v101;
      v79 = v71;
LABEL_38:
      _s7Weather24LocationCompositionStateOwst_0(v78, 0, 1, v79);
      goto LABEL_39;
    }
    goto LABEL_55;
  }
  v105 = *(_QWORD *)(v71 - 8);
  if (v104)
  {
    (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v101, v71);
LABEL_55:
    v53 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD7148) - 8) + 64);
    v54 = (void *)v101;
    v55 = (const void *)v102;
    goto LABEL_26;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v105 + 24))(v101, v102, v71);
LABEL_39:
  v80 = a3[8];
  v81 = (_QWORD *)((char *)a1 + v80);
  v82 = (_QWORD *)((char *)a2 + v80);
  v83 = sub_1000BA294(&qword_100BD6FB8);
  v84 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v81, 1, v83);
  v85 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v82, 1, v83);
  if (!v84)
  {
    if (!v85)
    {
      *v81 = *v82;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v94 = *(int *)(v83 + 36);
      v95 = (char *)v81 + v94;
      v96 = (char *)v82 + v94;
      v97 = type metadata accessor for UnitConfiguration.WindSpeed(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 24))(v95, v96, v97);
      return a1;
    }
    sub_100021A14((uint64_t)v81, &qword_100BD6FB8);
    goto LABEL_44;
  }
  if (v85)
  {
LABEL_44:
    v92 = sub_1000BA294(&qword_100BD71F8);
    memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
    return a1;
  }
  *v81 = *v82;
  v86 = *(int *)(v83 + 36);
  v87 = (char *)v81 + v86;
  v88 = (char *)v82 + v86;
  v89 = type metadata accessor for UnitConfiguration.WindSpeed(0);
  v90 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v89 - 8) + 16);
  v91 = swift_bridgeObjectRetain();
  v90(v87, v88, v89, v91);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v81, 0, 1, v83);
  return a1;
}

_QWORD *sub_10065304C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;

  v6 = sub_1000BA294(&qword_100BD7048);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6))
  {
    v7 = sub_1000BA294(&qword_100BD71D8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v8 = *(int *)(v6 + 36);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnitConfiguration.Distance(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
  }
  v12 = a3[5];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = sub_1000BA294(&qword_100BD7020);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, v15))
  {
    v16 = sub_1000BA294(&qword_100BD71E0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    v17 = *(int *)(v15 + 36);
    v18 = (char *)v13 + v17;
    v19 = (char *)v14 + v17;
    v20 = type metadata accessor for UnitConfiguration.Precipitation(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, v15);
  }
  v21 = a3[6];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  v24 = sub_1000BA294(&qword_100BD7008);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v23, 1, v24))
  {
    v25 = sub_1000BA294(&qword_100BD71E8);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    *v22 = *v23;
    v26 = *(int *)(v24 + 36);
    v27 = (char *)v22 + v26;
    v28 = (char *)v23 + v26;
    v29 = type metadata accessor for UnitConfiguration.Pressure(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v22, 0, 1, v24);
  }
  v30 = a3[7];
  v31 = (_QWORD *)((char *)a1 + v30);
  v32 = (_QWORD *)((char *)a2 + v30);
  v33 = type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v32, 1, v33))
  {
    v34 = sub_1000BA294(&qword_100BD71F0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    *v31 = *v32;
    v35 = *(int *)(sub_1000BA294(&qword_100BD6FC0) + 36);
    v36 = (char *)v31 + v35;
    v37 = (char *)v32 + v35;
    v38 = type metadata accessor for UnitConfiguration.Temperature(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v37, 1, v38))
    {
      v39 = type metadata accessor for UnitsConfigurationViewModel.Temperature(0);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v36, 0, 1, v38);
    }
    v40 = *(int *)(v33 + 20);
    v41 = (char *)v31 + v40;
    v42 = (char *)v32 + v40;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v42, 1, v38))
    {
      v43 = sub_1000BA294(&qword_100BD7148);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v41, v42, v38);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v41, 0, 1, v38);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v31, 0, 1, v33);
  }
  v44 = a3[8];
  v45 = (_QWORD *)((char *)a1 + v44);
  v46 = (_QWORD *)((char *)a2 + v44);
  v47 = sub_1000BA294(&qword_100BD6FB8);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v46, 1, v47))
  {
    v48 = sub_1000BA294(&qword_100BD71F8);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    *v45 = *v46;
    v49 = *(int *)(v47 + 36);
    v50 = (char *)v45 + v49;
    v51 = (char *)v46 + v49;
    v52 = type metadata accessor for UnitConfiguration.WindSpeed(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v50, v51, v52);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v45, 0, 1, v47);
  }
  return a1;
}

_QWORD *sub_100653458(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  size_t v47;
  void *v48;
  const void *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;

  v6 = sub_1000BA294(&qword_100BD7048);
  v7 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 1, v6);
  v8 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      *a1 = *a2;
      v9 = *(int *)(v6 + 36);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for UnitConfiguration.Distance(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v8)
  {
    sub_100021A14((uint64_t)a1, &qword_100BD7048);
LABEL_6:
    v13 = sub_1000BA294(&qword_100BD71D8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  *a1 = *a2;
  swift_bridgeObjectRelease();
  v50 = *(int *)(v6 + 36);
  v51 = (char *)a1 + v50;
  v52 = (char *)a2 + v50;
  v53 = type metadata accessor for UnitConfiguration.Distance(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 40))(v51, v52, v53);
LABEL_7:
  v14 = a3[5];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v17 = sub_1000BA294(&qword_100BD7020);
  v18 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v17);
  v19 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v17);
  if (v18)
  {
    if (!v19)
    {
      *v15 = *v16;
      v20 = *(int *)(v17 + 36);
      v21 = (char *)v15 + v20;
      v22 = (char *)v16 + v20;
      v23 = type metadata accessor for UnitConfiguration.Precipitation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 0, 1, v17);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v19)
  {
    sub_100021A14((uint64_t)v15, &qword_100BD7020);
LABEL_12:
    v24 = sub_1000BA294(&qword_100BD71E0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  *v15 = *v16;
  swift_bridgeObjectRelease();
  v54 = *(int *)(v17 + 36);
  v55 = (char *)v15 + v54;
  v56 = (char *)v16 + v54;
  v57 = type metadata accessor for UnitConfiguration.Precipitation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 40))(v55, v56, v57);
LABEL_13:
  v25 = a3[6];
  v26 = (_QWORD *)((char *)a1 + v25);
  v27 = (_QWORD *)((char *)a2 + v25);
  v28 = sub_1000BA294(&qword_100BD7008);
  v29 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v26, 1, v28);
  v30 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v27, 1, v28);
  if (v29)
  {
    if (!v30)
    {
      *v26 = *v27;
      v31 = *(int *)(v28 + 36);
      v32 = (char *)v26 + v31;
      v33 = (char *)v27 + v31;
      v34 = type metadata accessor for UnitConfiguration.Pressure(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v26, 0, 1, v28);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v30)
  {
    sub_100021A14((uint64_t)v26, &qword_100BD7008);
LABEL_18:
    v35 = sub_1000BA294(&qword_100BD71E8);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_19;
  }
  *v26 = *v27;
  swift_bridgeObjectRelease();
  v58 = *(int *)(v28 + 36);
  v59 = (char *)v26 + v58;
  v60 = (char *)v27 + v58;
  v61 = type metadata accessor for UnitConfiguration.Pressure(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 40))(v59, v60, v61);
LABEL_19:
  v36 = a3[7];
  v37 = (_QWORD *)((char *)a1 + v36);
  v38 = (_QWORD *)((char *)a2 + v36);
  v39 = type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(0);
  v40 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v37, 1, v39);
  v41 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v38, 1, v39);
  if (v40)
  {
    if (!v41)
    {
      *v37 = *v38;
      v42 = *(int *)(sub_1000BA294(&qword_100BD6FC0) + 36);
      v43 = (char *)v37 + v42;
      v44 = (char *)v38 + v42;
      v45 = type metadata accessor for UnitConfiguration.Temperature(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v44, 1, v45))
      {
        v46 = type metadata accessor for UnitsConfigurationViewModel.Temperature(0);
        memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v43, v44, v45);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v43, 0, 1, v45);
      }
      v68 = *(int *)(v39 + 20);
      v69 = (char *)v37 + v68;
      v70 = (char *)v38 + v68;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v70, 1, v45))
      {
        v71 = sub_1000BA294(&qword_100BD7148);
        memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v69, v70, v45);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v69, 0, 1, v45);
      }
      v72 = (uint64_t)v37;
      v73 = v39;
      goto LABEL_38;
    }
    goto LABEL_25;
  }
  if (v41)
  {
    sub_1000215BC((uint64_t)v37, type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature);
LABEL_25:
    v47 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD71F0) - 8) + 64);
    v48 = v37;
    v49 = v38;
LABEL_26:
    memcpy(v48, v49, v47);
    goto LABEL_39;
  }
  *v37 = *v38;
  swift_bridgeObjectRelease();
  v62 = *(int *)(sub_1000BA294(&qword_100BD6FC0) + 36);
  v63 = (char *)v37 + v62;
  v64 = (char *)v38 + v62;
  v65 = type metadata accessor for UnitConfiguration.Temperature(0);
  v66 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v63, 1, v65);
  v67 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v64, 1, v65);
  if (v66)
  {
    if (!v67)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 32))(v63, v64, v65);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v63, 0, 1, v65);
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  v90 = *(_QWORD *)(v65 - 8);
  if (v67)
  {
    (*(void (**)(char *, uint64_t))(v90 + 8))(v63, v65);
LABEL_49:
    v91 = type metadata accessor for UnitsConfigurationViewModel.Temperature(0);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
    goto LABEL_50;
  }
  (*(void (**)(char *, char *, uint64_t))(v90 + 40))(v63, v64, v65);
LABEL_50:
  v92 = *(int *)(v39 + 20);
  v93 = (uint64_t)v37 + v92;
  v94 = (uint64_t)v38 + v92;
  v95 = _s7Weather24LocationCompositionStateOwet_0(v93, 1, v65);
  v96 = _s7Weather24LocationCompositionStateOwet_0(v94, 1, v65);
  if (v95)
  {
    if (!v96)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 32))(v93, v94, v65);
      v72 = v93;
      v73 = v65;
LABEL_38:
      _s7Weather24LocationCompositionStateOwst_0(v72, 0, 1, v73);
      goto LABEL_39;
    }
    goto LABEL_55;
  }
  v97 = *(_QWORD *)(v65 - 8);
  if (v96)
  {
    (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v93, v65);
LABEL_55:
    v47 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD7148) - 8) + 64);
    v48 = (void *)v93;
    v49 = (const void *)v94;
    goto LABEL_26;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 40))(v93, v94, v65);
LABEL_39:
  v74 = a3[8];
  v75 = (_QWORD *)((char *)a1 + v74);
  v76 = (_QWORD *)((char *)a2 + v74);
  v77 = sub_1000BA294(&qword_100BD6FB8);
  v78 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v75, 1, v77);
  v79 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v76, 1, v77);
  if (!v78)
  {
    if (!v79)
    {
      *v75 = *v76;
      swift_bridgeObjectRelease();
      v86 = *(int *)(v77 + 36);
      v87 = (char *)v75 + v86;
      v88 = (char *)v76 + v86;
      v89 = type metadata accessor for UnitConfiguration.WindSpeed(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 40))(v87, v88, v89);
      return a1;
    }
    sub_100021A14((uint64_t)v75, &qword_100BD6FB8);
    goto LABEL_44;
  }
  if (v79)
  {
LABEL_44:
    v84 = sub_1000BA294(&qword_100BD71F8);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    return a1;
  }
  *v75 = *v76;
  v80 = *(int *)(v77 + 36);
  v81 = (char *)v75 + v80;
  v82 = (char *)v76 + v80;
  v83 = type metadata accessor for UnitConfiguration.WindSpeed(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 32))(v81, v82, v83);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v75, 0, 1, v77);
  return a1;
}

uint64_t sub_100653BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100653BDC);
}

uint64_t sub_100653BDC()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  sub_1000D08E8();
  sub_1000BA294(&qword_100BD71D8);
  sub_100088FF0();
  if (v5)
  {
    v3 = sub_1000890E8();
  }
  else
  {
    sub_1000BA294(&qword_100BD71E0);
    sub_100088FF0();
    if (v5)
    {
      v4 = v6;
      v7 = v2[5];
    }
    else
    {
      sub_1000BA294(&qword_100BD71E8);
      sub_100088FF0();
      if (v8)
      {
        v4 = v9;
        v7 = v2[6];
      }
      else
      {
        sub_1000BA294(&qword_100BD71F0);
        sub_100088FF0();
        if (v10)
        {
          v4 = v11;
          v7 = v2[7];
        }
        else
        {
          v4 = sub_1000BA294(&qword_100BD71F8);
          v7 = v2[8];
        }
      }
    }
    v3 = v1 + v7;
  }
  return sub_1000B250C(v3, v0, v4);
}

uint64_t sub_100653C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100653C9C);
}

uint64_t sub_100653C9C()
{
  char v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000994F4();
  sub_1000BA294(&qword_100BD71D8);
  sub_10009D2E8();
  if (v0)
  {
    sub_100075E28();
  }
  else
  {
    sub_1000BA294(&qword_100BD71E0);
    sub_10009D2E8();
    if (!v0)
    {
      sub_1000BA294(&qword_100BD71E8);
      sub_10009D2E8();
      if (!v1)
      {
        sub_1000BA294(&qword_100BD71F0);
        sub_10009D2E8();
        if (!v2)
          sub_1000BA294(&qword_100BD71F8);
      }
    }
  }
  sub_100098D08();
  return sub_1000987C4(v3, v4, v5, v6);
}

void sub_100653D50(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[5];

  sub_100653E78(319, &qword_100BFA4E0, &qword_100BD7048);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100653E78(319, &qword_100BFA4E8, &qword_100BD7020);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100653E78(319, &qword_100BFA4F0, &qword_100BD7008);
      if (v7 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_1006548D0(319, &qword_100BFA4F8, type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature);
        if (v9 <= 0x3F)
        {
          v12[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_100653E78(319, (unint64_t *)&unk_100BFA500, &qword_100BD6FB8);
          if (v11 <= 0x3F)
          {
            v12[4] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 5, v12, a1 + 16);
          }
        }
      }
    }
  }
}

void sub_100653E78(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v4 = sub_100075EB0(a3);
    v5 = sub_1000FDA58(v4);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t *sub_100653EBC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    swift_bridgeObjectRetain();
    v8 = *(int *)(sub_1000BA294(&qword_100BD6FC0) + 36);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnitConfiguration.Temperature(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v11))
    {
      v12 = type metadata accessor for UnitsConfigurationViewModel.Temperature(0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v11);
    }
    v13 = *(int *)(a3 + 20);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v11))
    {
      v16 = sub_1000BA294(&qword_100BD7148);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v14, v15, v11);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 0, 1, v11);
    }
  }
  return a1;
}

uint64_t sub_100654018(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(sub_1000BA294(&qword_100BD6FC0) + 36);
  v5 = type metadata accessor for UnitConfiguration.Temperature(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 20);
  result = _s7Weather24LocationCompositionStateOwet_0(v6, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v6, v5);
  return result;
}

_QWORD *sub_1006540CC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  v6 = *(int *)(sub_1000BA294(&qword_100BD6FC0) + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnitConfiguration.Temperature(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9))
  {
    v10 = type metadata accessor for UnitsConfigurationViewModel.Temperature(0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v9);
  }
  v11 = *(int *)(a3 + 20);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v9))
  {
    v14 = sub_1000BA294(&qword_100BD7148);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v12, v13, v9);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v9);
  }
  return a1;
}

_QWORD *sub_100654204(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(sub_1000BA294(&qword_100BD6FC0) + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnitConfiguration.Temperature(0);
  v10 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v9);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    v13 = type metadata accessor for UnitsConfigurationViewModel.Temperature(0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  v14 = *(int *)(a3 + 20);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1 + v14, 1, v9);
  v18 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v9);
  if (!v17)
  {
    v19 = *(_QWORD *)(v9 - 8);
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v15, v16, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v15, v9);
    goto LABEL_12;
  }
  if (v18)
  {
LABEL_12:
    v20 = sub_1000BA294(&qword_100BD7148);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v15, v16, v9);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 0, 1, v9);
  return a1;
}

_QWORD *sub_1006543E0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = *(int *)(sub_1000BA294(&qword_100BD6FC0) + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnitConfiguration.Temperature(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9))
  {
    v10 = type metadata accessor for UnitsConfigurationViewModel.Temperature(0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v9);
  }
  v11 = *(int *)(a3 + 20);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v9))
  {
    v14 = sub_1000BA294(&qword_100BD7148);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v12, v13, v9);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v9);
  }
  return a1;
}

_QWORD *sub_100654514(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(sub_1000BA294(&qword_100BD6FC0) + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnitConfiguration.Temperature(0);
  v10 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v9);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    v13 = type metadata accessor for UnitsConfigurationViewModel.Temperature(0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v7, v8, v9);
LABEL_7:
  v14 = *(int *)(a3 + 20);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1 + v14, 1, v9);
  v18 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v9);
  if (!v17)
  {
    v19 = *(_QWORD *)(v9 - 8);
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v15, v16, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v15, v9);
    goto LABEL_12;
  }
  if (v18)
  {
LABEL_12:
    v20 = sub_1000BA294(&qword_100BD7148);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v15, v16, v9);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 0, 1, v9);
  return a1;
}

uint64_t sub_1006546E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006546F4);
}

uint64_t sub_1006546F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000D08E8();
  sub_1000BA294(&qword_100BD6FC0);
  sub_100088FF0();
  if (v3)
  {
    v5 = sub_1000890E8();
  }
  else
  {
    v4 = sub_1000BA294(&qword_100BD7148);
    v5 = v1 + *(int *)(v2 + 20);
  }
  return sub_1000B250C(v5, v0, v4);
}

uint64_t sub_100654748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100654754);
}

uint64_t sub_100654754()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000994F4();
  sub_1000BA294(&qword_100BD6FC0);
  sub_10009D2E8();
  if (v0)
    sub_100075E28();
  else
    sub_1000BA294(&qword_100BD7148);
  sub_100098D08();
  return sub_1000987C4(v1, v2, v3, v4);
}

void sub_1006547A8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_10065485C(319, &qword_100BD7568, type metadata accessor for UnitsConfigurationViewModel.Temperature, &qword_100BD7570, (uint64_t)&unk_1009A81D4);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_1006548D0(319, &qword_100BD7578, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Temperature);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_10065485C(uint64_t a1, _QWORD *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  unint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  if (!*a2)
  {
    v9 = sub_10007A084(0, (uint64_t)a2, a3);
    sub_100086DA4(a4, a3, a5);
    v10 = sub_1000890E8();
    v13 = type metadata accessor for UnitsConfigurationViewModel.Configuration(v10, v9, v11, v12);
    if (!v14)
      atomic_store(v13, v5);
  }
}

void sub_1006548D0(uint64_t a1, _QWORD *a2, uint64_t (*a3)(uint64_t))
{
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v4 = sub_10007A084(0, (uint64_t)a2, a3);
    v5 = sub_1000FDA58(v4);
    if (!v6)
      atomic_store(v5, v3);
  }
}

uint64_t *sub_10065490C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnitConfiguration.Temperature(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_1006549C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for UnitConfiguration.Temperature(0);
  result = _s7Weather24LocationCompositionStateOwet_0(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return result;
}

void *sub_100654A1C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnitConfiguration.Temperature(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
  }
  return a1;
}

void *sub_100654AB0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  v6 = type metadata accessor for UnitConfiguration.Temperature(0);
  v7 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 1, v6);
  v8 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6);
  if (!v7)
  {
    v9 = *(_QWORD *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
  return a1;
}

void *sub_100654B94(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnitConfiguration.Temperature(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
  }
  return a1;
}

void *sub_100654C28(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  v6 = type metadata accessor for UnitConfiguration.Temperature(0);
  v7 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 1, v6);
  v8 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6);
  if (!v7)
  {
    v9 = *(_QWORD *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
  return a1;
}

uint64_t sub_100654D0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100654D18);
}

uint64_t sub_100654D18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = sub_1000D1320();
  v5 = _s7Weather24LocationCompositionStateOwet_0(a1, a2, v4);
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t sub_100654D58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100654D64);
}

uint64_t sub_100654D64(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v4 = (a2 + 1);
  else
    v4 = 0;
  sub_1000D1320();
  v5 = sub_100075E28();
  return sub_1000987C4(v5, v4, a3, v6);
}

uint64_t sub_100654D9C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnitConfiguration.Temperature(0);
  return _s7Weather24LocationCompositionStateOwet_0(a1, 1, v2);
}

uint64_t sub_100654DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnitConfiguration.Temperature(0);
  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, 1, v4);
}

uint64_t sub_100654E04(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = type metadata accessor for UnitConfiguration.Temperature(319);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256, *(_QWORD *)(result - 8) + 64, 1);
    return 0;
  }
  return result;
}

uint64_t sub_100654E58(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_100654ED4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 8) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain(v9);
  }
  else
  {
    v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain(v9);
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t sub_100654F90(_QWORD *a1, uint64_t a2)
{
  __n128 v4;

  v4 = swift_bridgeObjectRelease(*a1);
  return (*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80), v4);
}

uint64_t *sub_100654FD4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = *a2;
  *a1 = *a2;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain(v4);
  v10(v8, v9, v5);
  return a1;
}

uint64_t *sub_100655044(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  v8 = swift_bridgeObjectRelease(v7);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t, __n128))(v9 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), v8);
  return a1;
}

_QWORD *sub_1006550B4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t *sub_100655104(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;

  v6 = *a1;
  *a1 = *a2;
  v7 = swift_bridgeObjectRelease(v6);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t, __n128))(v8 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_10065516C(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  int v12;
  unsigned int v14;
  int v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = a2 - v7;
  if (a2 <= v7)
    goto LABEL_22;
  v10 = ((v8 + 8) & ~v8) + *(_QWORD *)(v5 + 64);
  v11 = 8 * v10;
  if (v10 <= 3)
  {
    v14 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v14 > 0xFF)
    {
      v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(_WORD *)((char *)a1 + v10))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v14 < 2)
    {
LABEL_22:
      if ((v6 & 0x80000000) != 0)
        return _s7Weather24LocationCompositionStateOwet_0(((unint64_t)a1 + v8 + 8) & ~v8, v6, v4);
      v16 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v16) = -1;
      return (v16 + 1);
    }
  }
  v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((_BYTE *)a1 + v10))
    goto LABEL_22;
LABEL_15:
  v15 = (v12 - 1) << v11;
  if (v10 > 3)
    v15 = 0;
  if (!(_DWORD)v10)
    return v7 + v15 + 1;
  if (v10 > 3)
    LODWORD(v10) = 4;
  return ((uint64_t (*)(void))((char *)&loc_100655240 + 4 * byte_1009BADB2[(v10 - 1)]))();
}

void sub_1006552AC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  char v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  v8 = 8 * v7;
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << v8)) >> v8) + 1;
      if (HIWORD(v11))
      {
        v9 = &dword_100000004;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v12 = v10 & ~(-1 << v8);
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t sub_100655498(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_1006554F8 + 4 * byte_1009BADC0[swift_getEnumCaseMultiPayload(a2)];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t sub_100655E4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = a1;
  result = swift_getEnumCaseMultiPayload(a1);
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      v3 = v1 + *(int *)(sub_1000BA294(&qword_100BD7048) + 36);
      v4 = type metadata accessor for UnitConfiguration.Distance(0);
      goto LABEL_29;
    case 1:
      swift_bridgeObjectRelease();
      v3 = v1 + *(int *)(sub_1000BA294(&qword_100BD7020) + 36);
      v4 = type metadata accessor for UnitConfiguration.Precipitation(0);
      goto LABEL_29;
    case 2:
      swift_bridgeObjectRelease();
      v3 = v1 + *(int *)(sub_1000BA294(&qword_100BD7008) + 36);
      v4 = type metadata accessor for UnitConfiguration.Pressure(0);
      goto LABEL_29;
    case 3:
      swift_bridgeObjectRelease();
      v5 = v1 + *(int *)(sub_1000BA294(&qword_100BD6FC0) + 36);
      v6 = type metadata accessor for UnitConfiguration.Temperature(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v5, 1, v6))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
      v7 = v1 + *(int *)(type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(0) + 20);
      result = _s7Weather24LocationCompositionStateOwet_0(v7, 1, v6);
      if ((_DWORD)result)
        return result;
      v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v9 = v7;
      v10 = v6;
      goto LABEL_30;
    case 4:
      goto LABEL_27;
    case 5:
      v11 = sub_1000BA294(&qword_100BD7048);
      if (!_s7Weather24LocationCompositionStateOwet_0(v1, 1, v11))
      {
        swift_bridgeObjectRelease();
        v12 = v1 + *(int *)(v11 + 36);
        v13 = type metadata accessor for UnitConfiguration.Distance(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
      }
      v14 = (int *)type metadata accessor for UnitsConfigurationViewModel.Representation.MultipleRows(0);
      v15 = v1 + v14[5];
      v16 = sub_1000BA294(&qword_100BD7020);
      if (!_s7Weather24LocationCompositionStateOwet_0(v15, 1, v16))
      {
        swift_bridgeObjectRelease();
        v17 = v15 + *(int *)(v16 + 36);
        v18 = type metadata accessor for UnitConfiguration.Precipitation(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
      }
      v19 = v1 + v14[6];
      v20 = sub_1000BA294(&qword_100BD7008);
      if (!_s7Weather24LocationCompositionStateOwet_0(v19, 1, v20))
      {
        swift_bridgeObjectRelease();
        v21 = v19 + *(int *)(v20 + 36);
        v22 = type metadata accessor for UnitConfiguration.Pressure(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
      }
      v23 = v1 + v14[7];
      v24 = type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v23, 1, v24))
      {
        swift_bridgeObjectRelease();
        v25 = v23 + *(int *)(sub_1000BA294(&qword_100BD6FC0) + 36);
        v26 = type metadata accessor for UnitConfiguration.Temperature(0);
        if (!_s7Weather24LocationCompositionStateOwet_0(v25, 1, v26))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
        v27 = v23 + *(int *)(v24 + 20);
        if (!_s7Weather24LocationCompositionStateOwet_0(v27, 1, v26))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v27, v26);
      }
      v1 += v14[8];
      v28 = sub_1000BA294(&qword_100BD6FB8);
      result = _s7Weather24LocationCompositionStateOwet_0(v1, 1, v28);
      if ((_DWORD)result)
        return result;
      swift_bridgeObjectRelease();
      v42 = *(int *)(v28 + 36);
      goto LABEL_28;
    case 6:
      swift_bridgeObjectRelease();
      v29 = v1 + *(int *)(sub_1000BA294(&qword_100BD7048) + 36);
      v30 = type metadata accessor for UnitConfiguration.Distance(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
      v31 = (int *)type metadata accessor for UnitsConfigurationViewModel.Representation.Full(0);
      v32 = v1 + v31[5];
      swift_bridgeObjectRelease();
      v33 = v32 + *(int *)(sub_1000BA294(&qword_100BD7020) + 36);
      v34 = type metadata accessor for UnitConfiguration.Precipitation(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v33, v34);
      v35 = v1 + v31[6];
      swift_bridgeObjectRelease();
      v36 = v35 + *(int *)(sub_1000BA294(&qword_100BD7008) + 36);
      v37 = type metadata accessor for UnitConfiguration.Pressure(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v36, v37);
      v38 = v1 + v31[7];
      swift_bridgeObjectRelease();
      v39 = v38 + *(int *)(sub_1000BA294(&qword_100BD6FC0) + 36);
      v40 = type metadata accessor for UnitConfiguration.Temperature(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v39, 1, v40))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v39, v40);
      v41 = v38 + *(int *)(type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(0) + 20);
      if (!_s7Weather24LocationCompositionStateOwet_0(v41, 1, v40))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v41, v40);
      v1 += v31[8];
LABEL_27:
      swift_bridgeObjectRelease();
      v42 = *(int *)(sub_1000BA294(&qword_100BD6FB8) + 36);
LABEL_28:
      v3 = v1 + v42;
      v4 = type metadata accessor for UnitConfiguration.WindSpeed(0);
LABEL_29:
      v10 = v4;
      v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
      v9 = v3;
LABEL_30:
      result = v8(v9, v10);
      break;
    default:
      return result;
  }
  return result;
}

void sub_100656334(uint64_t a1, uint64_t a2)
{
  char *v2;

  v2 = (char *)sub_100656388 + 4 * byte_1009BADD6[swift_getEnumCaseMultiPayload(a2)];
  __asm { BR              X10 }
}

_QWORD *sub_100656388()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;

  *v0 = *v2;
  swift_bridgeObjectRetain();
  v3 = *(int *)(sub_1000BA294(&qword_100BD7048) + 36);
  v4 = (char *)v0 + v3;
  v5 = (char *)v2 + v3;
  v6 = type metadata accessor for UnitConfiguration.Distance(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v4, v5, v6);
  swift_storeEnumTagMultiPayload(v0, v1, 0);
  return v0;
}

uint64_t sub_100656CBC(uint64_t result, uint64_t a2)
{
  char *v3;

  if (result != a2)
  {
    sub_1000215BC(result, type metadata accessor for UnitsConfigurationViewModel.Representation);
    v3 = (char *)&loc_100656D28 + 4 * byte_1009BADDD[swift_getEnumCaseMultiPayload(a2)];
    __asm { BR              X10 }
  }
  return result;
}

void sub_10065765C(uint64_t a1, uint64_t a2)
{
  char *v2;

  v2 = (char *)sub_1006576AC + 4 * byte_1009BADE4[swift_getEnumCaseMultiPayload(a2)];
  __asm { BR              X10 }
}

_QWORD *sub_1006576AC()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;

  *v0 = *v2;
  v3 = *(int *)(sub_1000BA294(&qword_100BD7048) + 36);
  v4 = (char *)v0 + v3;
  v5 = (char *)v2 + v3;
  v6 = type metadata accessor for UnitConfiguration.Distance(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v4, v5, v6);
  swift_storeEnumTagMultiPayload(v0, v1, 0);
  return v0;
}

uint64_t sub_100657F68(uint64_t result, uint64_t a2)
{
  char *v3;

  if (result != a2)
  {
    sub_1000215BC(result, type metadata accessor for UnitsConfigurationViewModel.Representation);
    v3 = (char *)&loc_100657FD0 + 4 * byte_1009BADEB[swift_getEnumCaseMultiPayload(a2)];
    __asm { BR              X10 }
  }
  return result;
}

void sub_10065888C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[7];

  sub_10065485C(319, &qword_100BFA3F8, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Distance, &qword_100BFA400, (uint64_t)&unk_1009A80F0);
  if (v3 <= 0x3F)
  {
    v16[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10065485C(319, &qword_100BFA408, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Precipitation, &qword_100BFA410, (uint64_t)&unk_1009A810C);
    if (v5 <= 0x3F)
    {
      v16[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_10065485C(319, &qword_100BFA418, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Pressure, &qword_100BFA420, (uint64_t)&unk_1009A8128);
      if (v7 <= 0x3F)
      {
        v16[2] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(319);
        if (v9 <= 0x3F)
        {
          v16[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_10065485C(319, &qword_100BFA428, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.WindSpeed, (unint64_t *)&unk_100BFA430, (uint64_t)&unk_1009A8160);
          if (v11 <= 0x3F)
          {
            v16[4] = *(_QWORD *)(v10 - 8) + 64;
            v12 = type metadata accessor for UnitsConfigurationViewModel.Representation.MultipleRows(319);
            if (v13 <= 0x3F)
            {
              v16[5] = *(_QWORD *)(v12 - 8) + 64;
              v14 = type metadata accessor for UnitsConfigurationViewModel.Representation.Full(319);
              if (v15 <= 0x3F)
              {
                v16[6] = *(_QWORD *)(v14 - 8) + 64;
                swift_initEnumMetadataMultiPayload(a1, 256, 7, v16);
              }
            }
          }
        }
      }
    }
  }
}

void sub_100658A18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;

  sub_1000986AC();
  v4 = v3;
  v6 = v5;
  v7 = sub_1000D1320();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100109A20();
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100079FBC();
  sub_1000BA294(&qword_100BFA7C8);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_1000BCED8();
  v12 = v0 + *(int *)(v11 + 48);
  sub_100080C0C(v6, v0, type metadata accessor for UnitsConfigurationViewModel.Temperature);
  sub_100080C0C(v4, v12, type metadata accessor for UnitsConfigurationViewModel.Temperature);
  sub_100088FC8(v0, 1, v7);
  if (!v14)
  {
    sub_1000860E4(v0, v13, type metadata accessor for UnitsConfigurationViewModel.Temperature);
    sub_100088FC8(v12, 1, v7);
    if (!v14)
    {
      sub_1000992E4(v1, v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32));
      sub_10068A6D0(v2, v1);
      v17 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
      v17(v1, v7);
      v18 = sub_100099C00();
      ((void (*)(uint64_t))v17)(v18);
      sub_1000215BC(v0, type metadata accessor for UnitsConfigurationViewModel.Temperature);
      goto LABEL_10;
    }
    v15 = sub_100099C00();
    v16(v15);
LABEL_9:
    sub_100021A14(v0, &qword_100BFA7C8);
    goto LABEL_10;
  }
  sub_100088FC8(v12, 1, v7);
  if (!v14)
    goto LABEL_9;
  sub_1000215BC(v0, type metadata accessor for UnitsConfigurationViewModel.Temperature);
LABEL_10:
  sub_100098640();
}

uint64_t sub_100658BA0(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_1009478A0();
  if ((v4 & 1) == 0)
    return 0;
  v5 = type metadata accessor for UnitConfiguration.Precipitation(0);
  v6 = *(int *)(sub_1000BA294(&qword_100BD7020) + 36);
  v7 = a1 + v6;
  v8 = a2 + v6;
  sub_100086DA4(&qword_100BFA7B8, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Precipitation, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Precipitation);
  return dispatch thunk of static Equatable.== infix(_:_:)(v7, v8, v5, v9) & 1;
}

uint64_t sub_100658C40(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_100947884();
  if ((v4 & 1) == 0)
    return 0;
  v5 = type metadata accessor for UnitConfiguration.Pressure(0);
  v6 = *(int *)(sub_1000BA294(&qword_100BD7008) + 36);
  v7 = a1 + v6;
  v8 = a2 + v6;
  sub_100086DA4(&qword_100BFA7B0, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Pressure, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Pressure);
  return dispatch thunk of static Equatable.== infix(_:_:)(v7, v8, v5, v9) & 1;
}

uint64_t sub_100658CE0(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_100947868();
  if ((v4 & 1) == 0)
    return 0;
  v5 = type metadata accessor for UnitConfiguration.WindSpeed(0);
  v6 = *(int *)(sub_1000BA294(&qword_100BD6FB8) + 36);
  v7 = a1 + v6;
  v8 = a2 + v6;
  sub_100086DA4(&qword_100BFA7A8, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.WindSpeed, (uint64_t)&protocol conformance descriptor for UnitConfiguration.WindSpeed);
  return dispatch thunk of static Equatable.== infix(_:_:)(v7, v8, v5, v9) & 1;
}

void sub_100658D80(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  if ((static Array<A>.== infix(_:_:)(*a1, *a2, a3, v8) & 1) != 0)
  {
    v10 = type metadata accessor for UnitsConfigurationViewModel.Configuration(0, a3, a4, v9);
    dispatch thunk of static Equatable.== infix(_:_:)((char *)a1 + *(int *)(v10 + 36), (char *)a2 + *(int *)(v10 + 36), a3, v8);
  }
  sub_10004A2A0();
}

void sub_100658DFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  sub_1000986AC();
  v30 = v1;
  v31 = v2;
  sub_1000F3E7C();
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_1000CE53C(v4, v26);
  type metadata accessor for UnitsConfigurationViewModel.Representation.MultipleRows(0);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100088FDC();
  sub_1000BA294(&qword_100BD6FB8);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_1000986CC(v7, v27);
  type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(0);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100098678(v9, v28);
  sub_1000BA294(&qword_100BD7008);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100088FDC();
  sub_1000BA294(&qword_100BD7020);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100088FDC();
  v29 = sub_1000BA294(&qword_100BD7048);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_10009DA80(v13, v29);
  v14 = sub_10011DBBC();
  sub_1000B42B0();
  __chkstk_darwin(v15);
  sub_10009883C();
  v17 = __chkstk_darwin(v16);
  __chkstk_darwin(v17);
  sub_1000860D0();
  sub_10009D2A4();
  v19 = __chkstk_darwin(v18);
  __chkstk_darwin(v19);
  sub_1000BEB28();
  __chkstk_darwin(v20);
  sub_1000BDB04();
  __chkstk_darwin(v21);
  sub_1000BA294(&qword_100BFA7A0);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  sub_100079F58();
  v24 = v0 + *(int *)(v23 + 48);
  sub_100080C0C(v30, v0, type metadata accessor for UnitsConfigurationViewModel.Representation);
  sub_100080C0C(v31, v24, type metadata accessor for UnitsConfigurationViewModel.Representation);
  v25 = (char *)sub_100659040 + 4 * byte_1009BADF2[swift_getEnumCaseMultiPayload(v0, v14)];
  __asm { BR              X10 }
}

void sub_100659040()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  sub_100080C0C(v0, v1, type metadata accessor for UnitsConfigurationViewModel.Representation);
  if (sub_1000BA64C())
  {
    sub_100021A14(v1, &qword_100BD7048);
    sub_1000B3B00(v5, &qword_100BFA7A0);
  }
  else
  {
    v6 = *(_QWORD *)(v3 - 160);
    sub_10009BD6C(v2, v4, &qword_100BD7048);
    sub_1009478BC();
    if ((v7 & 1) != 0)
    {
      sub_100099668();
      sub_100086DA4(&qword_100BFA7C0, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Distance, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Distance);
      sub_1000DD180(v8);
    }
    sub_100075DD0(v6);
    sub_100075DD0(v1);
    sub_1000215BC(v0, type metadata accessor for UnitsConfigurationViewModel.Representation);
  }
  sub_100098640();
}

void sub_100659518(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  sub_1009478BC();
  if ((v4 & 1) != 0)
  {
    sub_100099668();
    v5 = *(int *)(sub_1000BA294(&qword_100BD7048) + 36);
    v6 = a1 + v5;
    v7 = a2 + v5;
    sub_100086DA4(&qword_100BFA7C0, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Distance, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Distance);
    if ((sub_1000BD61C(v6, v7, v9, v8) & 1) != 0)
    {
      v10 = (int *)sub_1000F3E7C();
      v11 = sub_10004A330(v10[5]);
      if ((sub_100658BA0(v11, v12) & 1) != 0)
      {
        v13 = sub_10004A330(v10[6]);
        if ((sub_100658C40(v13, v14) & 1) != 0)
        {
          sub_10004A330(v10[7]);
          sub_10065A2F4();
          if ((v15 & 1) != 0)
          {
            v16 = sub_10004A330(v10[8]);
            sub_100658CE0(v16, v17);
          }
        }
      }
    }
  }
  sub_10004A2A0();
}

void sub_100659624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t *v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  char v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t *v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;

  sub_1000986AC();
  v5 = v4;
  v7 = v6;
  v129 = sub_1000BA294(&qword_100BD6FB8);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100088FDC();
  sub_10009511C(v9);
  v128 = sub_1000BA294(&qword_100BFA7D0);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100088FDC();
  sub_10009511C(v11);
  sub_1000BA294(&qword_100BD71F8);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_1000986FC();
  v126 = v13;
  sub_10009D2A4();
  __chkstk_darwin(v14);
  sub_1000860D0();
  v131 = v15;
  sub_10009D2A4();
  __chkstk_darwin(v16);
  sub_100079F7C();
  v137 = v17;
  v135 = sub_10011E7F0();
  sub_1000B42B0();
  __chkstk_darwin(v18);
  sub_100088FDC();
  sub_10009511C(v19);
  v134 = sub_1000BA294(&qword_100BFA7D8);
  sub_1000B42B0();
  __chkstk_darwin(v20);
  sub_10009D384(v21, v124);
  sub_1000BA294(&qword_100BD71F0);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  sub_1000986FC();
  v130 = v23;
  sub_10009D2A4();
  __chkstk_darwin(v24);
  sub_1000860D0();
  v141 = v25;
  sub_10009D2A4();
  __chkstk_darwin(v26);
  sub_100079F7C();
  v142 = v27;
  v140 = sub_1000BA294(&qword_100BD7008);
  sub_1000B42B0();
  __chkstk_darwin(v28);
  sub_100088FDC();
  sub_10009511C(v29);
  v139 = sub_1000BA294(&qword_100BFA7E0);
  sub_1000B42B0();
  __chkstk_darwin(v30);
  sub_100088FDC();
  v144 = v31;
  sub_1000BA294(&qword_100BD71E8);
  sub_1000B42B0();
  __chkstk_darwin(v32);
  v136 = (uint64_t)&v124 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v34);
  sub_1000860D0();
  v145 = v35;
  sub_10009D2A4();
  __chkstk_darwin(v36);
  sub_100079F7C();
  v146 = v37;
  v150 = sub_1000BA294(&qword_100BD7020);
  sub_1000B42B0();
  __chkstk_darwin(v38);
  sub_100088FDC();
  v138 = v39;
  v148 = sub_1000BA294(&qword_100BFA7E8);
  sub_1000B42B0();
  __chkstk_darwin(v40);
  sub_1000CE53C(v41, v124);
  sub_1000BA294(&qword_100BD71E0);
  sub_1000B42B0();
  __chkstk_darwin(v42);
  sub_1000986FC();
  v147 = v43;
  sub_10009D2A4();
  __chkstk_darwin(v44);
  sub_1000860D0();
  v154 = v45;
  sub_10009D2A4();
  __chkstk_darwin(v46);
  sub_100079F7C();
  v149 = v47;
  v48 = sub_1000BA294(&qword_100BD7048);
  sub_1000B42B0();
  __chkstk_darwin(v49);
  sub_100098694();
  v50 = sub_1000BA294(&qword_100BFA7F0);
  sub_1000B42B0();
  __chkstk_darwin(v51);
  sub_100099234();
  sub_1000BA294(&qword_100BD71D8);
  sub_1000B42B0();
  __chkstk_darwin(v52);
  sub_10009883C();
  sub_1000BEB28();
  __chkstk_darwin(v53);
  sub_1000BDB04();
  __chkstk_darwin(v54);
  v56 = (char *)&v124 - v55;
  v152 = v7;
  sub_1000CE570(v7, (uint64_t)&v124 - v55);
  v153 = v5;
  sub_1000CE570(v5, v0);
  v57 = v3 + *(int *)(v50 + 48);
  sub_1000CE570((uint64_t)v56, v3);
  sub_1000CE570(v0, v57);
  sub_100088FC8(v3, 1, v48);
  if (v58)
  {
    sub_100075DD0(v0);
    sub_100075DD0((uint64_t)v56);
    sub_100088FC8(v57, 1, v48);
    if (v58)
    {
      sub_100021A14(v3, &qword_100BD71D8);
      goto LABEL_12;
    }
LABEL_9:
    v60 = &qword_100BFA7F0;
    v61 = v3;
LABEL_47:
    sub_100021A14(v61, v60);
    goto LABEL_48;
  }
  sub_100037768(v3, v2, &qword_100BD71D8);
  sub_100088FC8(v57, 1, v48);
  if (v58)
  {
    sub_100075DD0(v0);
    sub_100075DD0((uint64_t)v56);
    sub_100021A14(v2, &qword_100BD7048);
    goto LABEL_9;
  }
  sub_10009BD6C(v57, v59, &qword_100BD7048);
  sub_1009478BC();
  if ((v62 & 1) == 0)
  {
    sub_100075DD0(v1);
    v78 = &qword_100BD71D8;
    sub_100099298(v0);
    sub_100099298((uint64_t)v56);
    sub_100075DD0(v2);
    v61 = v3;
LABEL_46:
    v60 = v78;
    goto LABEL_47;
  }
  v63 = sub_100099668();
  v64 = v1 + *(int *)(v48 + 36);
  sub_100086DA4(&qword_100BFA7C0, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Distance, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Distance);
  v65 = sub_100075E28();
  LOBYTE(v63) = dispatch thunk of static Equatable.== infix(_:_:)(v65, v64, v63, v66);
  sub_100099298(v1);
  sub_1000987A0(v0);
  sub_1000987A0((uint64_t)v56);
  sub_100099298(v2);
  sub_1000987A0(v3);
  if ((v63 & 1) == 0)
    goto LABEL_48;
LABEL_12:
  v67 = type metadata accessor for UnitsConfigurationViewModel.Representation.MultipleRows(0);
  v68 = v152;
  v69 = v149;
  sub_1000CE570(v152 + *(int *)(v67 + 20), v149);
  v70 = v153;
  v71 = v154;
  sub_1000CE570(v153 + *(int *)(v67 + 20), v154);
  v72 = v151;
  v73 = v151 + *(int *)(v148 + 48);
  sub_1000CE570(v69, v151);
  sub_1000CE570(v71, v73);
  v74 = v150;
  sub_100088FC8(v72, 1, v150);
  if (v58)
  {
    sub_100075DD0(v71);
    sub_100075DD0(v69);
    sub_100088FC8(v73, 1, v74);
    if (v58)
    {
      sub_100021A14(v72, &qword_100BD71E0);
      goto LABEL_24;
    }
    goto LABEL_20;
  }
  v76 = v147;
  sub_1000F4118(v72, v75, &qword_100BD71E0);
  sub_100088FC8(v73, 1, v74);
  if (v77)
  {
    sub_100075DD0(v71);
    sub_100075DD0(v69);
    sub_100021A14(v76, &qword_100BD7020);
LABEL_20:
    v60 = &qword_100BFA7E8;
    v61 = v72;
    goto LABEL_47;
  }
  v79 = v138;
  sub_1000787D4(v73, v138, &qword_100BD7020);
  sub_1009478A0();
  if ((v80 & 1) == 0)
  {
    sub_100075DD0(v79);
    v78 = &qword_100BD71E0;
    sub_100099298(v154);
    sub_100099298(v69);
    sub_100075DD0(v76);
    v61 = v72;
    goto LABEL_46;
  }
  sub_1000CF940();
  v81 = *(int *)(v74 + 36);
  v82 = v76 + v81;
  v83 = v79 + v81;
  sub_100086DA4(&qword_100BFA7B8, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Precipitation, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Precipitation);
  LOBYTE(v82) = sub_1000BD61C(v82, v83, v85, v84);
  sub_100099298(v79);
  sub_100098854(v154);
  sub_100098854(v69);
  sub_100099298(v76);
  sub_100098854(v72);
  if ((v82 & 1) == 0)
    goto LABEL_48;
LABEL_24:
  v86 = v146;
  sub_1000BCF38(v68 + *(int *)(v67 + 24), v146);
  v154 = v67;
  v87 = v145;
  sub_1000BCF38(v70 + *(int *)(v67 + 24), v145);
  v88 = v144;
  v89 = v144 + *(int *)(v139 + 48);
  sub_1000BCF38(v86, v144);
  sub_1000BCF38(v87, v89);
  v90 = v140;
  sub_100088FC8(v88, 1, v140);
  if (v58)
  {
    sub_100099298(v87);
    sub_100099298(v86);
    sub_100088FC8(v89, 1, v90);
    v91 = v137;
    v93 = v142;
    v92 = v143;
    v94 = v141;
    if (v58)
    {
      sub_100021A14(v88, &qword_100BD71E8);
      goto LABEL_36;
    }
    goto LABEL_32;
  }
  v95 = v136;
  sub_100037768(v88, v136, &qword_100BD71E8);
  sub_100088FC8(v89, 1, v90);
  v93 = v142;
  v92 = v143;
  v94 = v141;
  if (v96)
  {
    sub_100075DD0(v145);
    sub_100075DD0(v146);
    sub_100021A14(v95, &qword_100BD7008);
LABEL_32:
    v60 = &qword_100BFA7E0;
    v61 = v88;
    goto LABEL_47;
  }
  v97 = v133;
  sub_1000787D4(v89, v133, &qword_100BD7008);
  sub_100947884();
  if ((v98 & 1) == 0)
  {
    sub_100075DD0(v97);
    v78 = &qword_100BD71E8;
    sub_100099298(v145);
    sub_100099298(v146);
    sub_100075DD0(v95);
    v61 = v88;
    goto LABEL_46;
  }
  sub_1000C1B80();
  sub_100086DA4(&qword_100BFA7B0, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Pressure, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Pressure);
  v100 = sub_1000DD180(v99);
  sub_100099298(v97);
  sub_10009E47C(v145);
  sub_10009E47C(v146);
  sub_100099298(v95);
  sub_10009E47C(v144);
  v91 = v137;
  if ((v100 & 1) == 0)
    goto LABEL_48;
LABEL_36:
  v101 = v154;
  sub_1000BCF38(v68 + *(int *)(v154 + 28), v93);
  sub_1000BCF38(v70 + *(int *)(v101 + 28), v94);
  v102 = v92 + *(int *)(v134 + 48);
  sub_1000BCF38(v93, v92);
  sub_1000BCF38(v94, v102);
  v103 = v135;
  sub_100088FC8(v92, 1, v135);
  if (v58)
  {
    sub_100099298(v94);
    sub_100099298(v93);
    sub_100088FC8(v102, 1, v103);
    if (v58)
    {
      sub_100021A14(v92, &qword_100BD71F0);
LABEL_50:
      sub_1000BCF38(v68 + *(int *)(v101 + 32), v91);
      v110 = v131;
      sub_1000BCF38(v70 + *(int *)(v101 + 32), v131);
      v111 = v132;
      v112 = v132 + *(int *)(v128 + 48);
      sub_1000BCF38(v91, v132);
      v113 = sub_100099C00();
      v114 = v111;
      sub_100037768(v113, v115, &qword_100BD71F8);
      v116 = v111;
      v117 = v129;
      sub_100088FC8(v116, 1, v129);
      if (v58)
      {
        sub_100099298(v110);
        sub_100099298(v91);
        sub_100088FC8(v112, 1, v117);
        if (v58)
        {
          sub_100021A14(v132, &qword_100BD71F8);
          goto LABEL_48;
        }
        v120 = &qword_100BFA7D0;
      }
      else
      {
        v118 = v126;
        sub_100037768(v114, v126, &qword_100BD71F8);
        sub_100088FC8(v112, 1, v117);
        if (v119)
        {
          v120 = &qword_100BFA7D0;
        }
        else
        {
          v121 = v125;
          sub_1000787D4(v112, v125, &qword_100BD6FB8);
          sub_100947868();
          if ((v122 & 1) != 0)
          {
            sub_1000D07C4();
            sub_100086DA4(&qword_100BFA7A8, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.WindSpeed, (uint64_t)&protocol conformance descriptor for UnitConfiguration.WindSpeed);
            sub_1000DD180(v123);
            sub_100099298(v121);
            sub_10009E47C(v131);
            sub_10009E47C(v91);
            sub_100099298(v118);
            sub_10009E47C(v114);
            goto LABEL_48;
          }
          sub_100021A14(v121, &qword_100BD6FB8);
          v120 = &qword_100BD71F8;
        }
        sub_100099298(v131);
        sub_100099298(v91);
        sub_100021A14(v118, &qword_100BD6FB8);
      }
      v61 = v132;
      v60 = v120;
      goto LABEL_47;
    }
    goto LABEL_44;
  }
  v105 = v130;
  sub_1000F4118(v92, v104, &qword_100BD71F0);
  sub_100088FC8(v102, 1, v103);
  if (v106)
  {
    sub_100075DD0(v94);
    sub_100075DD0(v93);
    sub_1000215BC(v105, type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature);
LABEL_44:
    v60 = &qword_100BFA7D8;
    v61 = v92;
    goto LABEL_47;
  }
  v107 = v127;
  sub_1000BEC60(v102, v127);
  sub_10065A2F4();
  v109 = v108;
  sub_10009EFA8(v107);
  sub_10009E47C(v94);
  sub_10009E47C(v93);
  sub_10009EFA8(v105);
  sub_10009E47C(v92);
  v91 = v137;
  if ((v109 & 1) != 0)
    goto LABEL_50;
LABEL_48:
  sub_100098640();
}

void sub_10065A2F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  sub_1000986AC();
  v5 = v4;
  v7 = v6;
  v8 = sub_1000D1320();
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_100099864();
  v10 = sub_1000BA294(&qword_100BE06D8);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100079F58();
  sub_1000BA294(&qword_100BD7148);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_10009883C();
  sub_1000BDB04();
  __chkstk_darwin(v13);
  sub_1000BEB28();
  __chkstk_darwin(v14);
  v16 = (char *)&v30 - v15;
  sub_1009478D8();
  if ((v17 & 1) != 0)
  {
    sub_1000BA294(&qword_100BD6FC0);
    sub_100658A18();
    if ((v18 & 1) != 0)
    {
      v31 = v9;
      v19 = sub_10011E7F0();
      sub_1000CDC2C(v7 + *(int *)(v19 + 20), (uint64_t)v16);
      sub_1000CDC2C(v5 + *(int *)(v19 + 20), v3);
      v20 = v0 + *(int *)(v10 + 48);
      sub_1000CDC2C((uint64_t)v16, v0);
      sub_1000CDC2C(v3, v20);
      sub_100088FC8(v0, 1, v8);
      if (!v22)
      {
        sub_100037768(v0, v2, &qword_100BD7148);
        sub_100088FC8(v20, 1, v8);
        if (!v22)
        {
          v25 = v31;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(v1, v20, v8);
          sub_100086DA4(qword_100BE06E0, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Temperature, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Temperature);
          sub_1000BD61C(v2, v1, v27, v26);
          v28 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
          v28(v1, v8);
          sub_10009E47C(v3);
          sub_10009E47C((uint64_t)v16);
          v29 = sub_1000BEF38();
          ((void (*)(uint64_t))v28)(v29);
          sub_10009E47C(v0);
          goto LABEL_12;
        }
        sub_10009E47C(v3);
        sub_10009E47C((uint64_t)v16);
        v23 = sub_1000BEF38();
        v21 = v24(v23);
LABEL_11:
        sub_1000B3B00(v21, &qword_100BE06D8);
        goto LABEL_12;
      }
      sub_10009E47C(v3);
      sub_10009E47C((uint64_t)v16);
      v21 = sub_100088FC8(v20, 1, v8);
      if (!v22)
        goto LABEL_11;
      sub_1000B3B00(v21, &qword_100BD7148);
    }
  }
LABEL_12:
  sub_100098640();
}

void sub_10065A57C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = type metadata accessor for UnitConfiguration.Temperature(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UnitsConfigurationViewModel.Temperature(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v1;
  swift_bridgeObjectRetain();
  sub_100549FFC(a1, v10);
  swift_bridgeObjectRelease();
  v11 = sub_1000BA294(&qword_100BD6FC0);
  sub_100080C0C((uint64_t)v1 + *(int *)(v11 + 36), (uint64_t)v9, type metadata accessor for UnitsConfigurationViewModel.Temperature);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v3) == 1)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
    Hasher._combine(_:)(0);
    sub_100086DA4(&qword_100BEA110, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Temperature, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Temperature);
    dispatch thunk of Hashable.hash(into:)(a1, v3, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

void sub_10065A6F0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  v4 = *v2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  v7 = swift_bridgeObjectRetain();
  Array<A>.hash(into:)(a1, v4, v5, v6, v7);
  swift_bridgeObjectRelease();
  dispatch thunk of Hashable.hash(into:)(a1, v5, v6);
  sub_10004A2A0();
}

void sub_10065A75C(uint64_t a1)
{
  uint64_t v1;
  _BYTE v2[72];

  sub_1000B26C8(a1);
  sub_10065A6F0((uint64_t)v2, v1);
  sub_10007A148();
  sub_100098918();
}

void sub_10065A788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(_QWORD);
  char *v30;
  uint64_t v31[14];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  sub_1000986AC();
  v35 = v0;
  v36 = v1;
  v31[8] = sub_1000F3E7C();
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_10009D384(v3, v31[0]);
  sub_1000BA294(&qword_100BD71F8);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100088FDC();
  v31[6] = v5;
  sub_1000BA294(&qword_100BD71E8);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v31[3] = v7;
  sub_1000BA294(&qword_100BD71E0);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100088FDC();
  v31[1] = v9;
  sub_1000BA294(&qword_100BD71D8);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_10004A2E8();
  v31[4] = type metadata accessor for UnitsConfigurationViewModel.Representation.MultipleRows(0);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100088FDC();
  v31[5] = v12;
  v33 = sub_1000BA294(&qword_100BD6FB8);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  sub_10009DA80(v14, v31[0]);
  sub_1000BA294(&qword_100BD7148);
  sub_1000B42B0();
  __chkstk_darwin(v15);
  sub_1000986FC();
  v31[2] = v16;
  sub_10009D2A4();
  __chkstk_darwin(v17);
  v32 = sub_1000D1320();
  v31[12] = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  sub_100098678(v18, v31[0]);
  type metadata accessor for UnitsConfigurationViewModel.Temperature(0);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  v31[0] = (uint64_t)v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v21);
  v31[13] = sub_10011E7F0();
  sub_1000B42B0();
  __chkstk_darwin(v22);
  sub_100098694();
  v34 = sub_1000BA294(&qword_100BD7008);
  sub_1000B42B0();
  __chkstk_darwin(v23);
  sub_100088FDC();
  v31[9] = v24;
  sub_1000BA294(&qword_100BD7020);
  sub_1000B42B0();
  __chkstk_darwin(v25);
  sub_100079F58();
  sub_1000BA294(&qword_100BD7048);
  sub_1000B42B0();
  __chkstk_darwin(v26);
  sub_10009E540();
  sub_10011DBBC();
  sub_1000B42B0();
  __chkstk_darwin(v27);
  sub_1000BCED8();
  sub_1000BE938(v35, v28, v29);
  v30 = (char *)sub_10065AA38 + 4 * byte_1009BADF9[swift_getEnumCaseMultiPayload(v0)];
  __asm { BR              X10 }
}

void sub_10065AA38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000BF22C(v0, v2);
  sub_1000D0DFC(0);
  sub_1000989F8();
  sub_1000BEF38();
  sub_10054A1D0();
  sub_1000986C4();
  sub_100099668();
  sub_100086DA4(&qword_100BEA0F8, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Distance, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Distance);
  sub_1000CDFD0(v1, v4, v3);
  sub_100021A14(v2, &qword_100BD7048);
  sub_100098640();
}

void sub_10065B328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1000986AC();
  v3 = v0;
  v5 = v4;
  v6 = sub_1000D1320();
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100098694();
  sub_1000BA294(&qword_100BD7148);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_10009E540();
  sub_1000989F8();
  sub_10011ABF8();
  sub_1000986C4();
  sub_1000BA294(&qword_100BD7048);
  sub_100099668();
  sub_100086DA4(&qword_100BEA0F8, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Distance, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Distance);
  sub_1000C6BF8(v9);
  v10 = (int *)sub_1000F3E7C();
  sub_1000989F8();
  sub_1000B318C();
  sub_1000986C4();
  sub_1000BA294(&qword_100BD7020);
  sub_1000CF940();
  sub_100086DA4(&qword_100BEA100, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Precipitation, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Precipitation);
  sub_1000ED2F0(v11);
  sub_1000989F8();
  sub_10009C17C();
  sub_1000986C4();
  sub_1000BA294(&qword_100BD7008);
  sub_1000C1B80();
  sub_100086DA4(&qword_100BEA108, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Pressure, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Pressure);
  sub_1000ED2F0(v12);
  v13 = v0 + v10[7];
  sub_10065A57C(v5);
  v14 = type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(0);
  sub_1000CDC2C(v13 + *(int *)(v14 + 20), v2);
  sub_100088FC8(v2, 1, v6);
  if (v15)
  {
    sub_100075E0C(0);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v1, v2, v6);
    sub_100075E0C(1u);
    sub_100086DA4(&qword_100BEA110, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Temperature, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Temperature);
    sub_1000DAAC0(v5, v17, v16);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v6);
  }
  sub_1000989F8();
  sub_100110538();
  sub_1000986C4();
  sub_1000BA294(&qword_100BD6FB8);
  sub_1000D07C4();
  sub_100086DA4(&qword_100BEA118, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.WindSpeed, (uint64_t)&protocol conformance descriptor for UnitConfiguration.WindSpeed);
  sub_1000DAAC0(v5, v19, v18);
  sub_100075E0C(*(_BYTE *)(v3 + v10[9]));
  Hasher._combine(_:)(*(_BYTE *)(v3 + v10[10]));
  sub_100098640();
}

void sub_10065B5AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  sub_1000986AC();
  v4 = v0;
  v6 = v5;
  v44 = sub_1000BA294(&qword_100BD6FB8);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_1000986CC(v8, v39);
  sub_1000BA294(&qword_100BD71F8);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100088FDC();
  v43 = v10;
  v42 = sub_1000BA294(&qword_100BD7008);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_1000CE53C(v12, v39);
  sub_1000BA294(&qword_100BD71E8);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  sub_100099234();
  v14 = sub_1000BA294(&qword_100BD7020);
  sub_1000B42B0();
  __chkstk_darwin(v15);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BA294(&qword_100BD71E0);
  sub_1000B42B0();
  __chkstk_darwin(v18);
  sub_10004A2E8();
  v19 = sub_1000BA294(&qword_100BD7048);
  sub_1000B42B0();
  __chkstk_darwin(v20);
  sub_100099864();
  sub_1000BA294(&qword_100BD71D8);
  sub_1000B42B0();
  __chkstk_darwin(v21);
  sub_1000BCED8();
  v22 = sub_10009C014();
  sub_100037768(v22, v23, &qword_100BD71D8);
  sub_100088FC8(v0, 1, v19);
  if (v24)
  {
    sub_100075E0C(0);
  }
  else
  {
    sub_1000787D4(v0, v1, &qword_100BD7048);
    sub_100075E0C(1u);
    sub_1000989F8();
    sub_10011ABF8();
    sub_1000986C4();
    sub_100099668();
    sub_100086DA4(&qword_100BEA0F8, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Distance, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Distance);
    sub_1000C6BF8(v25);
    sub_100021A14(v1, &qword_100BD7048);
  }
  v26 = (int *)type metadata accessor for UnitsConfigurationViewModel.Representation.MultipleRows(0);
  sub_1000F4118(v0 + v26[5], v27, &qword_100BD71E0);
  sub_100088FC8(v2, 1, v14);
  if (v24)
  {
    sub_100075E0C(0);
  }
  else
  {
    sub_1000787D4(v2, (uint64_t)v17, &qword_100BD7020);
    sub_100075E0C(1u);
    sub_1000989F8();
    sub_1000B318C();
    sub_1000986C4();
    sub_1000CF940();
    sub_100086DA4(&qword_100BEA100, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Precipitation, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Precipitation);
    sub_1000DAAC0(v6, v29, v28);
    sub_100021A14((uint64_t)v17, &qword_100BD7020);
  }
  v30 = v42;
  sub_100037768(v0 + v26[6], v3, &qword_100BD71E8);
  sub_100088FC8(v3, 1, v30);
  if (v24)
  {
    sub_100075E0C(0);
  }
  else
  {
    v31 = v40;
    sub_1000787D4(v3, v40, &qword_100BD7008);
    sub_100075E0C(1u);
    sub_1000989F8();
    sub_10009C17C();
    sub_1000986C4();
    sub_1000C1B80();
    sub_100086DA4(&qword_100BEA108, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Pressure, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Pressure);
    sub_1000C6BF8(v32);
    sub_100098854(v31);
  }
  v33 = v44;
  sub_10065BF54(v6);
  v34 = v43;
  sub_100099C0C(v4 + v26[8], v35, &qword_100BD71F8);
  sub_100088FC8(v34, 1, v33);
  if (v24)
  {
    sub_100075E0C(0);
  }
  else
  {
    v36 = v41;
    sub_1000ED010(v34, v41);
    sub_100075E0C(1u);
    sub_1000989F8();
    sub_100110538();
    sub_1000986C4();
    sub_1000D07C4();
    sub_100086DA4(&qword_100BEA118, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.WindSpeed, (uint64_t)&protocol conformance descriptor for UnitConfiguration.WindSpeed);
    sub_1000DAAC0(v6, v38, v37);
    sub_10009E47C(v36);
  }
  sub_100098640();
}

void sub_10065B9B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v5 = sub_1000D1320();
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100079FBC();
  sub_1000BA294(&qword_100BD7148);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100098694();
  sub_10065A57C(a1);
  v8 = type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(0);
  sub_100037768(v1 + *(int *)(v8 + 20), v3, &qword_100BD7148);
  sub_100088FC8(v3, 1, v5);
  if (v9)
  {
    sub_100075E0C(0);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v2, v3, v5);
    sub_100075E0C(1u);
    sub_100086DA4(&qword_100BEA110, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Temperature, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Temperature);
    sub_1000CDFD0(a1, v11, v10);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v5);
  }
}

void sub_10065BAD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = sub_1000D1320();
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100109A20();
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100079FBC();
  sub_1000860E4(v0, v6, v7);
  sub_100088FC8(v2, 1, v3);
  if (v8)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    sub_1000992E4(v1, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
    Hasher._combine(_:)(0);
    sub_100086DA4(&qword_100BEA110, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Temperature, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Temperature);
    v9 = sub_1000890E8();
    sub_1000D0264(v9, v10, v11);
    sub_100098820(v1, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  }
  sub_10004A2A0();
}

void sub_10065BBB0(uint64_t a1)
{
  void (*v1)(_BYTE *);
  _BYTE v2[72];

  sub_1000B26C8(a1);
  v1(v2);
  sub_10007A148();
  sub_100098918();
}

void sub_10065BBDC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  sub_100658D80(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

Swift::Int sub_10065BC00(uint64_t a1, uint64_t a2)
{
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  sub_10065A6F0((uint64_t)v4, a2);
  return Hasher._finalize()();
}

void sub_10065BC40()
{
  sub_10065BBB0((uint64_t)sub_10065A788);
}

void sub_10065BC60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10065BD1C(a1, a2, a3, (void (*)(_QWORD *))sub_10065A788);
}

void sub_10065BC6C()
{
  sub_10065BBB0((uint64_t)sub_10065B328);
}

void sub_10065BC8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10065BD1C(a1, a2, a3, (void (*)(_QWORD *))sub_10065B328);
}

void sub_10065BC98()
{
  sub_10065BBB0((uint64_t)sub_10065B5AC);
}

void sub_10065BCB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10065BD1C(a1, a2, a3, (void (*)(_QWORD *))sub_10065B5AC);
}

void sub_10065BCC4()
{
  sub_10065BBB0((uint64_t)sub_10065B9B8);
}

void sub_10065BCE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10065BD1C(a1, a2, a3, (void (*)(_QWORD *))sub_10065B9B8);
}

void sub_10065BCF0()
{
  sub_10065BBB0((uint64_t)sub_10065BAD4);
}

void sub_10065BD10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10065BD1C(a1, a2, a3, (void (*)(_QWORD *))sub_10065BAD4);
}

void sub_10065BD1C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *))
{
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  a4(v5);
  sub_10007A148();
  sub_100098918();
}

uint64_t sub_10065BD4C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  a1[3] = sub_1000BA294(&qword_100BFA7F8);
  a1[4] = sub_10065C290();
  sub_10005F164(a1);
  v3 = type metadata accessor for UnitsConfigurationViewModel(0);
  return ShortDescription.init(name:_:)(0xD00000000000001BLL, 0x80000001009BAE10, v2, v3);
}

uint64_t sub_10065BDE8@<X0>(_QWORD *a1@<X8>)
{
  return sub_10065BD4C(a1);
}

uint64_t sub_10065BDFC(uint64_t a1)
{
  uint64_t v2;

  sub_100086DA4(&qword_100BFA808, type metadata accessor for UnitsConfigurationViewModel, (uint64_t)&unk_1009BAEE0);
  return ShortDescribable.description.getter(a1, v2);
}

void sub_10065BE3C()
{
  sub_100086DA4(&qword_100BFA778, type metadata accessor for UnitsConfigurationViewModel, (uint64_t)&unk_1009BAEB8);
}

void sub_10065BE68()
{
  sub_100086DA4(&qword_100BD7730, type metadata accessor for UnitsConfigurationViewModel.Temperature, (uint64_t)&unk_1009BB090);
}

void sub_10065BE94()
{
  sub_100086DA4(&qword_100BFA780, type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature, (uint64_t)&unk_1009BB0B8);
}

void sub_10065BEC0()
{
  sub_100086DA4(&qword_100BFA788, type metadata accessor for UnitsConfigurationViewModel.Representation.MultipleRows, (uint64_t)&unk_1009BB0E0);
}

void sub_10065BEEC()
{
  sub_100086DA4(&qword_100BFA790, type metadata accessor for UnitsConfigurationViewModel.Representation.Full, (uint64_t)&unk_1009BB108);
}

void sub_10065BF18()
{
  sub_100086DA4(&qword_100BFA798, type metadata accessor for UnitsConfigurationViewModel.Representation, (uint64_t)&unk_1009BB130);
}

uint64_t sub_10065BF44(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1009BB158, a1);
}

void sub_10065BF54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = sub_1000BA294(&qword_100BD7148);
  __chkstk_darwin(v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UnitConfiguration.Temperature(0);
  v25 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UnitsConfigurationViewModel.Temperature(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(0);
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_1000BA294(&qword_100BD71F0);
  __chkstk_darwin(v15);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100037768(v1, (uint64_t)v17, &qword_100BD71F0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v17, 1, v12) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_10007802C((uint64_t)v17, (uint64_t)v14, type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature);
    Hasher._combine(_:)(1u);
    v18 = *v14;
    swift_bridgeObjectRetain();
    sub_100549FFC(a1, v18);
    swift_bridgeObjectRelease();
    v19 = sub_1000BA294(&qword_100BD6FC0);
    sub_100080C0C((uint64_t)v14 + *(int *)(v19 + 36), (uint64_t)v11, type metadata accessor for UnitsConfigurationViewModel.Temperature);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v6) == 1)
    {
      Hasher._combine(_:)(1uLL);
    }
    else
    {
      v20 = v25;
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v8, v11, v6);
      Hasher._combine(_:)(0);
      sub_100086DA4(&qword_100BEA110, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Temperature, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Temperature);
      dispatch thunk of Hashable.hash(into:)(a1, v6, v21);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v6);
    }
    sub_100037768((uint64_t)v14 + *(int *)(v12 + 20), (uint64_t)v5, &qword_100BD7148);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v5, 1, v6) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v22 = v25;
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v8, v5, v6);
      Hasher._combine(_:)(1u);
      sub_100086DA4(&qword_100BEA110, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Temperature, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Temperature);
      dispatch thunk of Hashable.hash(into:)(a1, v6, v23);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v6);
    }
    sub_1000215BC((uint64_t)v14, type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature);
  }
}

unint64_t sub_10065C290()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFA800;
  if (!qword_100BFA800)
  {
    v1 = sub_100075EB0(&qword_100BFA7F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFA800);
  }
  return result;
}

uint64_t sub_10065C2D4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD, _QWORD);
  _QWORD v7[5];
  _QWORD v8[5];
  _QWORD v9[5];

  v3 = v1[7];
  sub_100043CA8((uint64_t)(v1 + 2), (uint64_t)v9);
  sub_100043CA8((uint64_t)(v1 + 8), (uint64_t)v8);
  v4 = v1[13];
  v5 = (uint64_t (*)(_QWORD, _QWORD))v1[14];
  sub_100043CA8((uint64_t)(v1 + 15), (uint64_t)v7);
  swift_retain();
  swift_unknownObjectRetain(v4);
  return sub_10022585C(v3, v9, v8, v4, v5, v7, a1);
}

_QWORD *sub_10065C364()
{
  _QWORD *v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 2);
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 8);
  swift_unknownObjectRelease(v0[13]);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 15);
  return v0;
}

uint64_t sub_10065C3A0()
{
  uint64_t v0;

  sub_10065C364();
  return swift_deallocClassInstance(v0, 160, 7);
}

uint64_t type metadata accessor for VFXTestModule()
{
  return objc_opt_self(_TtC7Weather13VFXTestModule);
}

_QWORD *sub_10065C3E0(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;

  v28 = a7;
  v29 = a9;
  v17 = sub_10005F164(v27);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(v17, a1, a7);
  v18 = (_QWORD *)swift_allocObject(a6, 160, 7);
  v19 = sub_100068EB4((uint64_t)v27, v28);
  v20 = __chkstk_darwin(v19);
  v22 = (_QWORD *)((char *)&v27[-1] - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v23 + 16))(v22, v20);
  v24 = *v22;
  v18[5] = type metadata accessor for VFXTestInteractor();
  v18[6] = &off_100B61420;
  v18[2] = v24;
  v18[7] = a2;
  sub_10003C800(a3, (uint64_t)(v18 + 8));
  v18[13] = a4;
  v18[14] = a10;
  sub_10003C800(a5, (uint64_t)(v18 + 15));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v27);
  return v18;
}

void sub_10065C504(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int128 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>)
{
  int *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v18 = (int *)sub_1000BF234();
  v19 = (_QWORD *)(a9 + v18[12]);
  v20 = type metadata accessor for ObservableResolver(0);
  sub_10000F1C8((unint64_t *)&qword_100BD0930, (uint64_t (*)(uint64_t))&type metadata accessor for ObservableResolver);
  *v19 = EnvironmentObject.init()(v20, v21);
  v19[1] = v22;
  v23 = a9 + v18[13];
  *(_QWORD *)v23 = swift_getKeyPath(&unk_1009BB278);
  *(_BYTE *)(v23 + 8) = 0;
  v24 = a9 + v18[14];
  *(_QWORD *)v24 = swift_getKeyPath(&unk_1009BB2A0);
  *(_BYTE *)(v24 + 8) = 0;
  v25 = a9 + v18[15];
  *(_QWORD *)v25 = swift_getKeyPath(&unk_1009BB2C8);
  *(_OWORD *)(v25 + 8) = 0u;
  *(_OWORD *)(v25 + 24) = 0u;
  *(_OWORD *)(v25 + 40) = 0u;
  *(_OWORD *)(v25 + 56) = 0u;
  *(_BYTE *)(v25 + 72) = 0;
  sub_10007802C(a1, a9, type metadata accessor for LocationViewModel);
  *(_QWORD *)(a9 + v18[5]) = a2;
  *(_QWORD *)(a9 + v18[6]) = a3;
  *(_QWORD *)(a9 + v18[7]) = a4;
  v26 = (_QWORD *)(a9 + v18[8]);
  *v26 = a5;
  v26[1] = a6;
  sub_10003C800(a7, a9 + v18[9]);
  sub_10007802C(a8, a9 + v18[10], type metadata accessor for DisplayMetrics);
  *(double *)(a9 + v18[11]) = a10;
}

double sub_10065C688()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  double v5;
  char v6;
  _QWORD v8[9];
  double v9[9];
  _BYTE __dst[80];
  _BYTE v11[30];
  char v12;
  unsigned __int8 v13;

  v1 = type metadata accessor for LocationGridView(0);
  memcpy(__dst, (const void *)(v0 + *(int *)(v1 + 60)), 0x49uLL);
  sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000D4FF4);
  sub_10008CF58();
  sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000CEE98);
  memcpy(v9, v8, sizeof(v9));
  sub_10007695C((uint64_t)&v9[1], (uint64_t)v11);
  sub_10007695C((uint64_t)v11, (uint64_t)v8);
  v2 = *(double *)v8;
  if (LOBYTE(v8[3]) == 1)
  {
    v3 = sub_100076A98();
    sub_100076A50((_BYTE *)&v9[6] + 1, &v12);
    sub_100076A50(&v12, &v13);
    v4 = 20.0;
    if (v13 - 3 < 2)
      v4 = 0.0;
    v5 = v2 - (v9[7] + v9[7]) - v3 - v4;
    v6 = sub_1000769AC();
    if (v9[8] >= v5 / dbl_1009BB4E0[v6])
      return v5 / dbl_1009BB4E0[v6];
    else
      return v9[8];
  }
  return v2;
}

BOOL sub_10065C7B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[64];
  uint64_t v57[10];
  _QWORD __dst[10];

  v1 = v0;
  v54 = type metadata accessor for LocationGridView(0);
  __chkstk_darwin(v54);
  v3 = (char *)&v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v49 - v5;
  __chkstk_darwin(v7);
  v9 = (char *)&v49 - v8;
  __chkstk_darwin(v10);
  v12 = (char *)&v49 - v11;
  __chkstk_darwin(v13);
  v15 = (char *)&v49 - v14;
  if (qword_100BC2410 != -1)
    swift_once(&qword_100BC2410, sub_10015961C);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_1000AECD4(v16, (uint64_t)qword_100CAF028);
  sub_100080C0C(v0, (uint64_t)v15, type metadata accessor for LocationGridView);
  sub_100080C0C(v0, (uint64_t)v12, type metadata accessor for LocationGridView);
  sub_100080C0C(v0, (uint64_t)v9, type metadata accessor for LocationGridView);
  v53 = v17;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(42, -1);
    v51 = v6;
    v22 = v21;
    v50 = swift_slowAlloc(96, -1);
    v55 = v50;
    *(_DWORD *)v22 = 141558787;
    __dst[0] = 1752392040;
    v52 = v3;
    v23 = UnsafeMutableRawBufferPointer.copyMemory(from:)(__dst, &__dst[1]);
    *(_WORD *)(v22 + 12) = 2081;
    v24 = Location.Identifier.name.getter(v23);
    __dst[0] = sub_1000CE1C8(v24, v25, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(__dst, &__dst[1]);
    swift_bridgeObjectRelease();
    sub_1000215BC((uint64_t)v15, type metadata accessor for LocationGridView);
    *(_WORD *)(v22 + 22) = 2082;
    v26 = type metadata accessor for LocationViewModel(0);
    v27 = v12[*(int *)(v26 + 64)] == 0;
    if (v12[*(int *)(v26 + 64)])
      v28 = 1702195828;
    else
      v28 = 0x65736C6166;
    if (v27)
      v29 = 0xE500000000000000;
    else
      v29 = 0xE400000000000000;
    __dst[0] = sub_1000CE1C8(v28, v29, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(__dst, &__dst[1]);
    swift_bridgeObjectRelease();
    sub_1000215BC((uint64_t)v12, type metadata accessor for LocationGridView);
    *(_WORD *)(v22 + 32) = 2082;
    memcpy(__dst, &v9[*(int *)(v54 + 60)], 0x49uLL);
    sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000D4FF4);
    sub_10008CF58();
    sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000CEE98);
    LOBYTE(v57[0]) = BYTE1(v57[6]);
    sub_100665E7C();
    v30 = dispatch thunk of CustomStringConvertible.description.getter(&unk_100B938A8);
    v57[0] = sub_1000CE1C8(v30, v31, &v55);
    v3 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v57, &v57[1]);
    swift_bridgeObjectRelease();
    sub_1000215BC((uint64_t)v9, type metadata accessor for LocationGridView);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "LocationGridView: location=%{private,mask.hash}s determining wantsMapCell. model.shouldShowAnyMap=%{public}s, mapPresentationStyle=%{public}s", (uint8_t *)v22, 0x2Au);
    v32 = v50;
    swift_arrayDestroy(v50, 3);
    swift_slowDealloc(v32, -1, -1);
    v33 = v22;
    v6 = v51;
    swift_slowDealloc(v33, -1, -1);
  }
  else
  {
    sub_1000215BC((uint64_t)v15, type metadata accessor for LocationGridView);
    sub_1000215BC((uint64_t)v12, type metadata accessor for LocationGridView);
    sub_1000215BC((uint64_t)v9, type metadata accessor for LocationGridView);
  }

  sub_100080C0C(v1, (uint64_t)v6, type metadata accessor for LocationGridView);
  sub_100080C0C(v1, (uint64_t)v3, type metadata accessor for LocationGridView);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter(v35);
  if (os_log_type_enabled(v35, v36))
  {
    v37 = v3;
    v38 = swift_slowAlloc(32, -1);
    v39 = swift_slowAlloc(64, -1);
    v57[0] = v39;
    *(_DWORD *)v38 = 141558531;
    v55 = 1752392040;
    v40 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56);
    *(_WORD *)(v38 + 12) = 2081;
    v41 = Location.Identifier.name.getter(v40);
    v55 = sub_1000CE1C8(v41, v42, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56);
    swift_bridgeObjectRelease();
    sub_1000215BC((uint64_t)v6, type metadata accessor for LocationGridView);
    *(_WORD *)(v38 + 22) = 2082;
    v43 = (uint64_t)v37;
    v44 = type metadata accessor for DisplayMetrics(0);
    sub_10000F1C8(&qword_100BFACD0, type metadata accessor for DisplayMetrics);
    v46 = ShortDescribable.description.getter(v44, v45);
    v55 = sub_1000CE1C8(v46, v47, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56);
    swift_bridgeObjectRelease();
    sub_1000215BC(v43, type metadata accessor for LocationGridView);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "LocationGridView: location=%{private,mask.hash}s determining wantsMapCell. displayMetrics=%{public}s", (uint8_t *)v38, 0x20u);
    swift_arrayDestroy(v39, 2);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v38, -1, -1);
  }
  else
  {
    sub_1000215BC((uint64_t)v6, type metadata accessor for LocationGridView);
    sub_1000215BC((uint64_t)v3, type metadata accessor for LocationGridView);
  }

  if (*(_BYTE *)(v1 + *(int *)(type metadata accessor for LocationViewModel(0) + 64)) != 1)
    return 0;
  memcpy(v57, (const void *)(v1 + *(int *)(v54 + 60)), 0x49uLL);
  sub_10008CED0((uint64_t)v57, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000D4FF4);
  sub_10008CF58();
  sub_10008CED0((uint64_t)v57, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000CEE98);
  return v56[41] == 3;
}

void sub_10065CE78(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  int v48;
  char v49;
  __int128 v50;
  __int128 v51;
  int v52;
  char v53;

  v43 = a1;
  v44 = sub_1000BF234();
  v3 = *(_QWORD *)(v44 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v44);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_1000BA294(&qword_100BFA988);
  v38 = *(_QWORD *)(v40 - 8);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_100099864();
  v36 = sub_1000BA294(&qword_100BFA990);
  v42 = *(_QWORD *)(v36 - 8);
  sub_10009D98C();
  __chkstk_darwin(v7);
  v39 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v41 = (char *)&v34 - v10;
  sub_10065D250((uint64_t)&v50);
  v46 = v50;
  v47 = v51;
  v48 = v52;
  v49 = v53;
  v45 = *(_QWORD *)(v1 + *(int *)(sub_1000DC250() + 28));
  sub_100080C0C(v1, (uint64_t)v5, type metadata accessor for LocationGridView);
  v11 = *(unsigned __int8 *)(v3 + 80);
  v12 = (v11 + 16) & ~v11;
  v35 = v12 + v4;
  v34 = v11 | 7;
  v13 = swift_allocObject(&unk_100B869D0, v12 + v4, v11 | 7);
  sub_10007802C((uint64_t)v5, v13 + v12, type metadata accessor for LocationGridView);
  swift_bridgeObjectRetain();
  v14 = sub_1000BA294(&qword_100BFA998);
  v15 = sub_1000BA294(&qword_100BFA9A0);
  v16 = sub_10066501C();
  v17 = sub_100121058();
  v37 = v2;
  View.onChange<A>(of:initial:_:)(&v45, 1, sub_100664FF4, v13, v14, v15, v16, v17);
  swift_release();
  swift_bridgeObjectRelease();
  sub_100665D00(v46, *((uint64_t *)&v46 + 1), v47, *((uint64_t *)&v47 + 1), v48, v49);
  v18 = (_QWORD *)(v1 + *(int *)(v44 + 48));
  if (*v18)
  {
    v19 = type metadata accessor for TipCoordinator(0);
    sub_100094EE4();
    ObservableResolver.resolve<A>(_:)(v19, v19);
    sub_10009880C();
    if ((_QWORD)v50)
    {
      sub_100028CC8();
      v21 = v20;
      sub_10009880C();
      LOBYTE(v46) = v21 & 1;
      sub_100080C0C(v1, (uint64_t)v5, type metadata accessor for LocationGridView);
      v22 = swift_allocObject(&unk_100B869F8, v35, v34);
      sub_10007802C((uint64_t)v5, v22 + v12, type metadata accessor for LocationGridView);
      *(_QWORD *)&v50 = v14;
      *((_QWORD *)&v50 + 1) = v15;
      *(_QWORD *)&v51 = v16;
      *((_QWORD *)&v51 + 1) = v17;
      v23 = sub_10009885C((uint64_t)&v50, (uint64_t)&opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>);
      v25 = v39;
      v24 = v40;
      v26 = v37;
      View.onChange<A>(of:initial:_:)(&v46, 0, sub_100665E4C, v22, v40, &type metadata for Bool, v23, &protocol witness table for Bool);
      swift_release();
      sub_1000BE774(v26, *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8));
      *(_QWORD *)&v50 = v24;
      *((_QWORD *)&v50 + 1) = &type metadata for Bool;
      *(_QWORD *)&v51 = v23;
      *((_QWORD *)&v51 + 1) = &protocol witness table for Bool;
      v27 = sub_10009885C((uint64_t)&v50, (uint64_t)&opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>);
      v28 = (uint64_t)v41;
      v29 = v36;
      sub_1000B2074(v25, v36, v27);
      v30 = *(void (**)(char *, uint64_t))(v42 + 8);
      v30(v25, v29);
      sub_1000B1100(v28, v29, v43);
      v30((char *)v28, v29);
      sub_100098640();
      return;
    }
    __break(1u);
  }
  v31 = v18[1];
  v32 = type metadata accessor for ObservableResolver(0);
  sub_10000F1C8((unint64_t *)&qword_100BD0930, (uint64_t (*)(uint64_t))&type metadata accessor for ObservableResolver);
  EnvironmentObject.error()(0, v31, v32, v33);
  __break(1u);
}

void sub_10065D250(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;

  v2 = v1;
  v26 = sub_1000BF234();
  v4 = *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64);
  __chkstk_darwin(v26);
  __chkstk_darwin(v5);
  v7 = (char *)&v21 - v6;
  v8 = sub_10065C7B8();
  if (qword_100BC2410 != -1)
    swift_once(&qword_100BC2410, sub_10015961C);
  v9 = type metadata accessor for Logger(0);
  sub_1000AECD4(v9, (uint64_t)qword_100CAF028);
  sub_100080C0C(v1, (uint64_t)v7, type metadata accessor for LocationGridView);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  v13 = os_log_type_enabled(v11, v12);
  v24 = a1;
  if (v13)
  {
    v14 = swift_slowAlloc(28, -1);
    v25 = v4;
    v15 = v14;
    v22 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v29 = v22;
    *(_DWORD *)v15 = 141558531;
    v27 = 1752392040;
    v23 = v1;
    v16 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
    *(_WORD *)(v15 + 12) = 2081;
    v17 = Location.Identifier.name.getter(v16);
    v27 = sub_1000CE1C8(v17, v18, (uint64_t *)&v29);
    v2 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
    swift_bridgeObjectRelease();
    sub_1000215BC((uint64_t)v7, type metadata accessor for LocationGridView);
    *(_WORD *)(v15 + 22) = 1026;
    LODWORD(v27) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, (char *)&v27 + 4);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "LocationGridView: location=%{private,mask.hash}s wantsMapCell=%{BOOL,public}d", (uint8_t *)v15, 0x1Cu);
    v19 = v22;
    swift_arrayDestroy(v22, 1);
    sub_1000986F0(v19);
    sub_1000986F0(v15);
  }
  else
  {
    sub_1000215BC((uint64_t)v7, type metadata accessor for LocationGridView);
  }

  v20 = *(_QWORD *)(v2 + *(int *)(sub_1000DC250() + 32));
  __asm { BR              X10 }
}

void sub_10065F260(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + *(int *)(type metadata accessor for LocationViewModel(0) + 28)) + 16))
    sub_10065F298();
}

void sub_10065F298()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  _BYTE __dst[80];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for LocationViewModel(0) + 32));
  v2 = type metadata accessor for LocationGridView(0);
  memcpy(__dst, (const void *)(v0 + *(int *)(v2 + 60)), 0x49uLL);
  sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000D4FF4);
  sub_10008CF58();
  sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000CEE98);
  v3 = sub_10065C7B8();
  sub_1003ED5E0(v12, v3, v1);
  if (v4)
  {
    v5 = (_QWORD *)(v0 + *(int *)(v2 + 48));
    if (*v5)
    {
      v6 = v4;
      v7 = type metadata accessor for TipCoordinator(0);
      swift_retain();
      ObservableResolver.resolve<A>(_:)(v7, v7);
      swift_release();
      if (v11)
      {
        sub_100034B14(v6);
        swift_bridgeObjectRelease();
        swift_release();
        return;
      }
      __break(1u);
    }
    v8 = v5[1];
    v9 = type metadata accessor for ObservableResolver(0);
    sub_10000F1C8((unint64_t *)&qword_100BD0930, (uint64_t (*)(uint64_t))&type metadata accessor for ObservableResolver);
    EnvironmentObject.error()(0, v8, v9, v10);
    __break(1u);
  }
}

void sub_10065F3F0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  const void *v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  int EnumCaseMultiPayload;
  BOOL v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t inited;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  double v87;
  _OWORD *v88;
  __int128 v89;
  int v90;
  int v91;
  int v92;
  int v93;
  uint64_t v97;
  _DWORD *v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  Swift::String v103;
  double v104;
  Swift::String v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  const void *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  char v154[72];
  _QWORD v155[10];
  _BYTE __dst[88];

  v4 = v3;
  v120 = a3;
  v7 = type metadata accessor for LocationGridView(0);
  v127 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v129 = v8;
  v130 = (uint64_t)&v113 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = type metadata accessor for LocationComponentContainerViewModel(0);
  v125 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v126 = v9;
  v128 = (uint64_t)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BFACE0);
  __chkstk_darwin(v10);
  v132 = (uint64_t)&v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_1000BA294(&qword_100BFACE8);
  __chkstk_darwin(v131);
  v144 = (uint64_t)&v113 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = sub_1000BA294(&qword_100BFACF0);
  __chkstk_darwin(v134);
  v133 = (uint64_t)&v113 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000BA294(&qword_100BFACF8);
  v137 = *(_QWORD *)(v14 - 8);
  v138 = v14;
  __chkstk_darwin(v14);
  v136 = (char *)&v113 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_1000BA294(&qword_100BFAD00);
  __chkstk_darwin(v135);
  v139 = (char *)&v113 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_1000BA294(&qword_100BFAD08);
  __chkstk_darwin(v115);
  v117 = (uint64_t)&v113 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_1000BA294(&qword_100BFAD10);
  __chkstk_darwin(v116);
  v119 = (uint64_t)&v113 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_1000BA294(&qword_100BFAD18);
  __chkstk_darwin(v118);
  v20 = (char *)&v113 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = type metadata accessor for LocationComponentViewModel(0);
  __chkstk_darwin(v124);
  v22 = (char *)&v113 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = a1;
  v24 = sub_10065FEB4(v4, a2);
  v145 = v27;
  v146 = v26;
  v147 = v28;
  v29 = v28 - v24;
  if (__OFSUB__(v28, v24))
  {
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v30 = v24;
  v31 = sub_10065C688();
  v32 = (const void *)(v4 + *(int *)(v7 + 60));
  memcpy(__dst, v32, 0x49uLL);
  sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000D4FF4);
  sub_10008CF58();
  sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000CEE98);
  v33 = *(double *)&v155[5];
  v114 = v20;
  *(_QWORD *)&v143 = v29;
  if (v29)
  {
    v25 = v29 - 1;
    if (__OFSUB__(v29, 1))
    {
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    v123 = v29 - 1;
  }
  else
  {
    v123 = 0;
  }
  v34 = v7;
  v140 = a1 + *(int *)(v141 + 20);
  v35 = sub_1006601C4(v30, v147, v146, v145, v140);
  v36 = sub_10065C688();
  sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000D4FF4);
  sub_10008CF58();
  sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000CEE98);
  v37 = *(double *)&v155[5];
  if (!v35)
    goto LABEL_10;
  v38 = v35 - 1;
  if (__OFSUB__(v35, 1))
  {
    __break(1u);
LABEL_10:
    v38 = 0;
  }
  LODWORD(v141) = sub_100660314(v4, v30, v147, v146, v145, a1);
  v25 = v4 + *(int *)(v34 + 48);
  if (!*(_QWORD *)v25)
  {
LABEL_55:
    v110 = *(_QWORD *)(v25 + 8);
    v111 = type metadata accessor for ObservableResolver(0);
    sub_10000F1C8((unint64_t *)&qword_100BD0930, (uint64_t (*)(uint64_t))&type metadata accessor for ObservableResolver);
    EnvironmentObject.error()(0, v110, v111, v112);
    __break(1u);
    return;
  }
  v142 = v30;
  v113 = v32;
  v39 = type metadata accessor for TipCoordinator(0);
  swift_retain();
  ObservableResolver.resolve<A>(_:)(v39, v39);
  swift_release();
  if (!v155[0])
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  v40 = v31 * (double)(uint64_t)v143 + v33 * (double)v123;
  v41 = v36 * (double)v35 + v37 * (double)v38;
  v42 = v140;
  LODWORD(v123) = sub_10002E5A8(v140);
  swift_release();
  sub_100080C0C(v42, (uint64_t)v22, type metadata accessor for LocationComponentViewModel);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v22);
  if (EnumCaseMultiPayload)
    v44 = EnumCaseMultiPayload == 3;
  else
    v44 = 1;
  v45 = !v44;
  LODWORD(v124) = v45;
  sub_1000215BC((uint64_t)v22, type metadata accessor for LocationComponentViewModel);
  v122 = a1;
  v46 = v128;
  sub_100080C0C(v23, v128, type metadata accessor for LocationComponentContainerViewModel);
  v121 = v4;
  v47 = v130;
  sub_100080C0C(v4, v130, type metadata accessor for LocationGridView);
  v48 = *(unsigned __int8 *)(v125 + 80);
  v49 = (v48 + 16) & ~v48;
  v50 = *(unsigned __int8 *)(v127 + 80);
  v51 = (v126 + v50 + v49) & ~v50;
  v52 = (v129 + v51 + 7) & 0xFFFFFFFFFFFFFFF8;
  v53 = (v52 + 71) & 0xFFFFFFFFFFFFFFF8;
  v54 = swift_allocObject(&unk_100B86E08, v53 + 8, v48 | v50 | 7);
  sub_10007802C(v46, v54 + v49, type metadata accessor for LocationComponentContainerViewModel);
  sub_10007802C(v47, v54 + v51, type metadata accessor for LocationGridView);
  v55 = (uint64_t *)(v54 + v52);
  v56 = v142;
  v58 = v146;
  v57 = v147;
  *v55 = v142;
  v55[1] = v57;
  v59 = v145;
  v55[2] = v58;
  v55[3] = v59;
  v60 = v54 + ((v52 + 39) & 0xFFFFFFFFFFFFFFF8);
  *(double *)v60 = v40;
  LODWORD(v130) = v141 & 1;
  *(_BYTE *)(v60 + 8) = v141 & 1;
  v61 = v54 + ((v52 + 55) & 0xFFFFFFFFFFFFFFF8);
  *(double *)v61 = v41;
  *(_BYTE *)(v61 + 8) = v124;
  *(_QWORD *)(v54 + v53) = v143;
  v62 = v132;
  sub_100660CA4(v122, (void (*)(void))sub_100666A20, v54, v132);
  swift_release();
  v63 = type metadata accessor for ExtendedAppLaunchState(0);
  sub_10000F1C8(&qword_100BD9E70, type metadata accessor for ExtendedAppLaunchState);
  v65 = Environment.init<A>(_:)(v63, v63, v64);
  v67 = v66;
  v154[0] = 0;
  State.init(wrappedValue:)(v154, &type metadata for Bool);
  LOBYTE(v53) = v155[0];
  v68 = v155[1];
  v69 = v144;
  sub_100037768(v62, v144, &qword_100BFACE0);
  v70 = v69 + *(int *)(v131 + 36);
  *(_QWORD *)v70 = v65;
  *(_BYTE *)(v70 + 8) = v67 & 1;
  *(_BYTE *)(v70 + 16) = v53;
  *(_QWORD *)(v70 + 24) = v68;
  sub_100021A14(v62, &qword_100BFACE0);
  if (v58)
  {
    sub_1000BA294(&qword_100BEF018);
    v71 = _swiftEmptyArrayStorage;
  }
  else
  {
    v72 = sub_1000BA294(&qword_100BFADF8);
    inited = swift_initStackObject(v72, &v148);
    v143 = xmmword_10097CA50;
    *(_OWORD *)(inited + 16) = xmmword_10097CA50;
    *(_QWORD *)(inited + 32) = 0;
    v74 = sub_1000BA294(&qword_100BCB9E8);
    v75 = swift_allocObject(v74, 48, 7);
    *(_OWORD *)(v75 + 16) = v143;
    v76 = v147;
    *(_QWORD *)(v75 + 32) = v56;
    *(_QWORD *)(v75 + 40) = v76;
    *(_QWORD *)(inited + 40) = v75;
    sub_1000BA294(&qword_100BEF018);
    v71 = (_QWORD *)inited;
  }
  v77 = Dictionary.init(dictionaryLiteral:)(v71);
  v79 = v138;
  v78 = (uint64_t)v139;
  v81 = v136;
  v80 = v137;
  v82 = v133;
  v83 = v134;
  v84 = v144;
  sub_100037768(v144, v133, &qword_100BFACE8);
  *(_QWORD *)(v82 + *(int *)(v83 + 36)) = v77;
  sub_100021A14(v84, &qword_100BFACE8);
  v85 = sub_100666AE4();
  View.navigationDestinationScope()(v83, v85);
  sub_100021A14(v82, &qword_100BFACF0);
  if ((v141 & 1) != 0)
    v87 = 0.0;
  else
    v87 = v41;
  static Alignment.center.getter(v86);
  _FrameLayout.init(width:height:alignment:)(*(_QWORD *)&v40, 0, *(_QWORD *)&v87, v130);
  (*(void (**)(uint64_t, char *, uint64_t))(v80 + 16))(v78, v81, v79);
  v88 = (_OWORD *)(v78 + *(int *)(v135 + 36));
  v89 = v152;
  *v88 = v151;
  v88[1] = v89;
  v88[2] = v153;
  (*(void (**)(char *, uint64_t))(v80 + 8))(v81, v79);
  v25 = 0x7FFFFFFFLL;
  v90 = v142;
  if (v142 > 0x7FFFFFFF)
    goto LABEL_46;
  v25 = 0x7FFFFFFFLL;
  v91 = v147;
  if (v147 > 0x7FFFFFFF)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if ((int)v147 < (int)v142)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v25 = 0x7FFFFFFFLL;
  v92 = v146;
  if (v146 > 0x7FFFFFFF)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v25 = 0xFFFFFFFF80000000;
  v93 = v145;
  if (v145 < (uint64_t)0xFFFFFFFF80000000
    || v146 < (uint64_t)0xFFFFFFFF80000000
    || v142 < (uint64_t)0xFFFFFFFF80000000
    || v147 < (uint64_t)0xFFFFFFFF80000000)
  {
    goto LABEL_50;
  }
  v25 = 0x7FFFFFFFLL;
  if (v145 > 0x7FFFFFFF)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if ((int)v145 < (int)v146)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v97 = v117;
  sub_100037768(v78, v117, &qword_100BFAD00);
  v98 = (_DWORD *)(v97 + *(int *)(v115 + 36));
  *v98 = v90;
  v98[1] = v91;
  v98[2] = v92;
  v98[3] = v93;
  sub_100021A14(v78, &qword_100BFAD00);
  if ((v123 & 1) != 0)
    v99 = 1.0;
  else
    v99 = 0.0;
  v100 = v119;
  sub_100037768(v97, v119, &qword_100BFAD08);
  *(double *)(v100 + *(int *)(v116 + 36)) = v99;
  sub_100021A14(v97, &qword_100BFAD08);
  sub_100080E74();
  v149 = v101;
  v150 = v102;
  v103._countAndFlagsBits = 45;
  v103._object = (void *)0xE100000000000000;
  String.append(_:)(v103);
  memcpy(v155, v113, 0x49uLL);
  sub_10008CED0((uint64_t)v155, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000D4FF4);
  sub_10008CF58();
  sub_10008CED0((uint64_t)v155, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000CEE98);
  sub_1007F9618();
  v105._countAndFlagsBits = Double.description.getter(v104);
  String.append(_:)(v105);
  swift_bridgeObjectRelease();
  v106 = v149;
  v107 = v150;
  v108 = (uint64_t)v114;
  sub_100037768(v100, (uint64_t)v114, &qword_100BFAD10);
  v109 = (_QWORD *)(v108 + *(int *)(v118 + 52));
  *v109 = v106;
  v109[1] = v107;
  sub_100021A14(v100, &qword_100BFAD10);
  sub_1000787D4(v108, v120, &qword_100BFAD18);
}

uint64_t sub_10065FEB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[40];
  _QWORD v13[4];
  char v14;
  _BYTE v15[72];
  _BYTE __dst[80];

  v4 = type metadata accessor for LocationGridView(0);
  memcpy(__dst, (const void *)(a1 + *(int *)(v4 + 60)), 0x49uLL);
  sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000D4FF4);
  sub_10008CF58();
  sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000CEE98);
  if (!v15[48])
  {
    v5 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for LocationViewModel(0) + 88));
    type metadata accessor for LocationComponentContainerViewModel(0);
    sub_100080E74();
    sub_1007D4D28();
    swift_bridgeObjectRelease();
    sub_1000787D4((uint64_t)v12, (uint64_t)v13, &qword_100BC4AA0);
    if ((v14 & 1) == 0)
    {
      v6 = v13[0];
      v7 = v13[1];
      v8 = v13[2];
      v9 = v13[3];
      sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000D4FF4);
      sub_10008CF58();
      sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000CEE98);
      sub_10066001C(v5, (uint64_t)v15, v6, v7, v8, v9);
      return v10;
    }
  }
  return a2;
}

void sub_10066001C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[40];
  _BYTE v15[16];
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  unsigned __int8 v20;

  v9 = type metadata accessor for LocationComponentViewModel(0);
  __chkstk_darwin(v9);
  v11 = &v14[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100076A50((_BYTE *)(a2 + 49), &v18);
  sub_100076A50(&v18, &v20);
  if (v20 - 3 > 1 || (sub_100076A50(&v18, &v19), v19 == 4))
  {
    if (qword_100BC1F40 != -1)
      swift_once(&qword_100BC1F40, sub_1002D8E30);
    v12 = type metadata accessor for MapComponentViewModel(0);
    v13 = sub_1000AECD4(v12, (uint64_t)qword_100CAE628);
    sub_100080C0C(v13, (uint64_t)v11, type metadata accessor for MapComponentViewModel);
    swift_storeEnumTagMultiPayload(v11, v9, 5);
    sub_100080E74();
    sub_1000215BC((uint64_t)v11, type metadata accessor for LocationComponentViewModel);
    sub_1007D4D28();
    swift_bridgeObjectRelease();
    sub_1000787D4((uint64_t)v14, (uint64_t)v15, &qword_100BC4AA0);
    if ((v17 & 1) == 0 && v16 < a5 && __OFSUB__(a6, 1))
      __break(1u);
  }
}

uint64_t sub_1006601C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[80];
  _BYTE __dst[80];

  v9 = type metadata accessor for LocationComponentViewModel(0);
  __chkstk_darwin(v9);
  v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for LocationGridView(0);
  memcpy(__dst, (const void *)(v5 + *(int *)(v12 + 60)), 0x49uLL);
  sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000D4FF4);
  sub_10008CF58();
  sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000CEE98);
  if (v17[56])
  {
    v13 = a4 - a3;
    if (!__OFSUB__(a4, a3))
      return v13;
    __break(1u);
  }
  sub_100080C0C(a5, (uint64_t)v11, type metadata accessor for LocationComponentViewModel);
  result = swift_getEnumCaseMultiPayload(v11);
  if ((_DWORD)result != 5)
  {
    if ((_DWORD)result != 1)
      goto LABEL_15;
    v15 = a4 - a3;
    if (__OFSUB__(a4, a3))
    {
      __break(1u);
      goto LABEL_19;
    }
    v13 = v15 + 2;
    if (!__OFADD__(v15, 2))
      goto LABEL_16;
    __break(1u);
  }
  v16 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v13 = v16 + 1;
  if (!__OFADD__(v16, 1))
    goto LABEL_16;
  __break(1u);
LABEL_15:
  v13 = a4 - a3;
  if (!__OFSUB__(a4, a3))
  {
LABEL_16:
    sub_1000215BC((uint64_t)v11, type metadata accessor for LocationComponentViewModel);
    return v13;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_100660314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  _BYTE v21[80];
  _BYTE __dst[80];

  v10 = type metadata accessor for LocationComponentViewModel(0);
  __chkstk_darwin(v10);
  v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100BC1EF8 != -1)
    swift_once(&qword_100BC1EF8, sub_100131F04);
  if ((byte_100CAE580 & 1) != 0)
    goto LABEL_11;
  v13 = 0;
  if ((byte_100CAE581 & 1) != 0 || (byte_100CAE582 & 1) != 0)
    return v13 & 1;
  v14 = type metadata accessor for LocationGridView(0);
  memcpy(__dst, (const void *)(a1 + *(int *)(v14 + 60)), 0x49uLL);
  sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000D4FF4);
  sub_10008CF58();
  result = sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000CEE98);
  if (v21[56])
  {
LABEL_11:
    v13 = 0;
    return v13 & 1;
  }
  if (!__OFSUB__(a3, a2))
  {
    if (a3 - a2 == 2)
    {
      v16 = type metadata accessor for LocationComponentContainerViewModel(0);
      sub_100080C0C(a6 + *(int *)(v16 + 20), (uint64_t)v12, type metadata accessor for LocationComponentViewModel);
      if (swift_getEnumCaseMultiPayload(v12) == 18)
      {
        v17 = a1 + *(int *)(v14 + 56);
        v18 = *(_QWORD *)v17;
        v19 = *(_BYTE *)(v17 + 8);
        sub_10008D47C(*(_QWORD *)v17, v19);
        sub_100109B54();
        v13 = v20;
        sub_1000B15F8(v18, v19);
      }
      else
      {
        v13 = 1;
      }
      sub_1000215BC((uint64_t)v12, type metadata accessor for LocationComponentViewModel);
      return v13 & 1;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

void sub_1006604DC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W6>, int a7@<W7>, uint64_t a8@<X8>, double a9@<D0>, double a10@<D1>, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  double v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t KeyPath;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _QWORD __dst[10];

  v95 = a7;
  v92 = a6;
  v90 = a5;
  v80 = a4;
  v97 = a3;
  v81 = a8;
  v96 = a11;
  v86 = type metadata accessor for Location.Identifier(0);
  v15 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v84 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for LocationComponentContainerViewModel(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = v19;
  v20 = type metadata accessor for LocationComponentContainerView(0);
  __chkstk_darwin(v20);
  v85 = (uint64_t)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_1000BA294(&qword_100BFADB0);
  __chkstk_darwin(v88);
  v87 = (uint64_t)&v76 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_1000BA294(&qword_100BFADA0);
  __chkstk_darwin(v23);
  v89 = (char *)&v76 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_1000BA294(&qword_100BFAD90);
  __chkstk_darwin(v93);
  v91 = (uint64_t)&v76 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_1000BA294(&qword_100BFAD80);
  __chkstk_darwin(v94);
  v83 = (char *)&v76 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_1000BA294(&qword_100BFAD70);
  __chkstk_darwin(v76);
  v79 = (uint64_t)&v76 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_1000BA294(&qword_100BFAD60);
  __chkstk_darwin(v77);
  v78 = (uint64_t)&v76 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100080C0C(a1, (uint64_t)v19, type metadata accessor for LocationComponentContainerViewModel);
  v29 = (int *)type metadata accessor for LocationGridView(0);
  v30 = (uint64_t *)(a2 + v29[8]);
  v31 = *v30;
  v32 = v30[1];
  v33 = *(_QWORD *)(a2 + v29[6]);
  v34 = *(_QWORD *)(a2 + v29[7]);
  sub_100043CA8(a2 + v29[9], (uint64_t)__dst);
  v35 = type metadata accessor for LocationViewModel(0);
  v36 = *(_BYTE *)(a2 + *(int *)(v35 + 68));
  v37 = (uint64_t)v84;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v84, a2, v86);
  v38 = *(_QWORD *)(a2 + v29[5]);
  v39 = *(double *)(a2 + v29[11]);
  LOBYTE(v35) = *(_BYTE *)(a2 + *(int *)(v35 + 92));
  swift_unknownObjectRetain(v31);
  swift_retain();
  swift_retain();
  swift_retain();
  v75 = v35;
  v40 = v85;
  sub_10042C430((uint64_t)v82, v31, v32, v33, v34, __dst, v36, v37, v85, v39, v38, v97, v90, v75);
  v42 = v92;
  if ((v92 & 1) != 0)
    v43 = 0.0;
  else
    v43 = a10;
  static Alignment.center.getter(v41);
  _FrameLayout.init(width:height:alignment:)(*(_QWORD *)&a9, 0, *(_QWORD *)&v43, v42 & 1);
  v44 = v87;
  sub_100080C0C(v40, v87, type metadata accessor for LocationComponentContainerView);
  v45 = (_OWORD *)(v44 + *(int *)(v88 + 36));
  v46 = v100;
  *v45 = v99;
  v45[1] = v46;
  v45[2] = v101;
  sub_1000215BC(v40, type metadata accessor for LocationComponentContainerView);
  v47 = (uint64_t)v83;
  static Alignment.center.getter(v48);
  v49 = (uint64_t)v89;
  sub_100946578();
  sub_100021A14(v44, &qword_100BFADB0);
  KeyPath = swift_getKeyPath(&unk_1009BB2A0);
  v51 = a2 + v29[14];
  v52 = *(_QWORD *)v51;
  v53 = *(_BYTE *)(v51 + 8);
  sub_10008D47C(*(_QWORD *)v51, v53);
  sub_100109B54();
  v55 = v54;
  sub_1000B15F8(v52, v53);
  v56 = v91;
  sub_100037768(v49, v91, &qword_100BFADA0);
  v57 = v56 + *(int *)(v93 + 36);
  *(_QWORD *)v57 = KeyPath;
  *(_BYTE *)(v57 + 8) = v55 & 1;
  sub_100021A14(v49, &qword_100BFADA0);
  v58 = swift_getKeyPath(&unk_1009BB3D0);
  LOBYTE(v52) = v96 > 1;
  sub_100037768(v56, v47, &qword_100BFAD90);
  v59 = v47 + *(int *)(v94 + 36);
  *(_QWORD *)v59 = v58;
  *(_BYTE *)(v59 + 8) = v52;
  sub_100021A14(v56, &qword_100BFAD90);
  v60 = swift_getKeyPath(&unk_1009BB3F8);
  v61 = (_QWORD *)(a2 + v29[12]);
  if (*v61)
  {
    v62 = v60;
    v63 = type metadata accessor for TipCoordinator(0);
    swift_retain();
    ObservableResolver.resolve<A>(_:)(v63, v63);
    swift_release();
    if (__dst[0])
    {
      memcpy(__dst, (const void *)(a2 + v29[15]), 0x49uLL);
      sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000D4FF4);
      sub_10008CF58();
      sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000CEE98);
      v64 = sub_10068CE28(v98, v97, v80);
      v66 = v65;
      swift_release();
      v67 = v79;
      sub_100037768(v47, v79, &qword_100BFAD80);
      v68 = (uint64_t *)(v67 + *(int *)(v76 + 36));
      *v68 = v62;
      v68[1] = v64;
      v68[2] = v66;
      sub_100021A14(v47, &qword_100BFAD80);
      v69 = swift_getKeyPath(&unk_1009BB420);
      v70 = v78;
      sub_100037768(v67, v78, &qword_100BFAD70);
      v71 = v70 + *(int *)(v77 + 36);
      *(_QWORD *)v71 = v69;
      *(double *)(v71 + 8) = a9;
      *(_BYTE *)(v71 + 16) = 0;
      sub_100021A14(v67, &qword_100BFAD70);
      sub_1000787D4(v70, v81, &qword_100BFAD60);
      return;
    }
    __break(1u);
  }
  v72 = v61[1];
  v73 = type metadata accessor for ObservableResolver(0);
  sub_10000F1C8((unint64_t *)&qword_100BD0930, (uint64_t (*)(uint64_t))&type metadata accessor for ObservableResolver);
  EnvironmentObject.error()(0, v72, v73, v74);
  __break(1u);
}

void sub_100660CA4(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int EnumCaseMultiPayload;
  uint64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(void);
  uint64_t v69;
  uint64_t v70;
  int v71;

  v67 = a3;
  v68 = a2;
  v65 = a1;
  v57 = type metadata accessor for PinnedScrollableViews(0);
  __chkstk_darwin(v57);
  v58 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_1000BA294(&qword_100BFADD8);
  v60 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v59 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_1000BA294(&qword_100BFAE00);
  __chkstk_darwin(v61);
  v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BFAE08);
  __chkstk_darwin(v9);
  v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_1000BA294(&qword_100BFAD50);
  __chkstk_darwin(v62);
  v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LocationComponentViewModel(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_1000BA294(&qword_100BFAD40);
  __chkstk_darwin(v69);
  v63 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_1000BA294(&qword_100BFAE10);
  __chkstk_darwin(v70);
  v19 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000BA294(&qword_100BFAD60);
  __chkstk_darwin(v20);
  v22 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100BC1EF8 != -1)
    swift_once(&qword_100BC1EF8, sub_100131F04);
  if ((byte_100CAE580 & 1) == 0 && (byte_100CAE581 & 1) == 0 && !byte_100CAE582)
  {
    v56 = a4;
    v23 = type metadata accessor for LocationComponentContainerViewModel(0);
    sub_100080C0C(v65 + *(int *)(v23 + 20), (uint64_t)v16, type metadata accessor for LocationComponentViewModel);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16);
    sub_1000215BC((uint64_t)v16, type metadata accessor for LocationComponentViewModel);
    v25 = v66;
    if (EnumCaseMultiPayload == 5
      && (type metadata accessor for LocationGridView(0), sub_100403C6C(), (v26 & 1) != 0))
    {
      v68();
      sub_100037768((uint64_t)v22, (uint64_t)v11, &qword_100BFAD60);
      v27 = v11;
      v28 = v9;
      v29 = 0;
    }
    else
    {
      v34 = v25 + *(int *)(type metadata accessor for LocationGridView(0) + 52);
      v35 = *(_QWORD *)v34;
      v36 = *(_BYTE *)(v34 + 8);
      sub_10008D47C(*(_QWORD *)v34, v36);
      sub_100109B54();
      v38 = v37;
      v39 = sub_1000B15F8(v35, v36);
      if ((v38 & 1) == 0)
      {
        v44 = static HorizontalAlignment.center.getter(v39);
        v71 = 0;
        sub_10000F1C8(&qword_100BE18E8, (uint64_t (*)(uint64_t))&type metadata accessor for PinnedScrollableViews);
        v45 = v58;
        dispatch thunk of OptionSet.init(rawValue:)(&v71, v57, v46);
        v47 = sub_100666D28();
        v48 = v59;
        LazyVStack.init(alignment:spacing:pinnedViews:content:)(v44, 0, 1, v45, v68, v67, v20, v47);
        v49 = v60;
        v50 = v64;
        (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v8, v48, v64);
        swift_storeEnumTagMultiPayload(v8, v61, 1);
        v51 = sub_100666CC4();
        sub_10003D2DC(&qword_100BFADD0, &qword_100BFADD8);
        v42 = (uint64_t)v63;
        _ConditionalContent<>.init(storage:)(v8, v62, v50, v51, v52);
        (*(void (**)(char *, uint64_t))(v49 + 8))(v48, v50);
        goto LABEL_14;
      }
      ((void (*)(uint64_t))v68)(v39);
      sub_100037768((uint64_t)v22, (uint64_t)v11, &qword_100BFAD60);
      v27 = v11;
      v28 = v9;
      v29 = 1;
    }
    swift_storeEnumTagMultiPayload(v27, v28, v29);
    v40 = sub_100666D28();
    _ConditionalContent<>.init(storage:)(v11, v20, v20, v40, v40);
    sub_100037768((uint64_t)v13, (uint64_t)v8, &qword_100BFAD50);
    swift_storeEnumTagMultiPayload(v8, v61, 0);
    v41 = sub_100666CC4();
    sub_10003D2DC(&qword_100BFADD0, &qword_100BFADD8);
    v42 = (uint64_t)v63;
    _ConditionalContent<>.init(storage:)(v8, v62, v64, v41, v43);
    sub_100021A14((uint64_t)v13, &qword_100BFAD50);
    sub_100021A14((uint64_t)v22, &qword_100BFAD60);
LABEL_14:
    v53 = v69;
    v30 = &qword_100BFAD40;
    sub_100037768(v42, (uint64_t)v19, &qword_100BFAD40);
    swift_storeEnumTagMultiPayload(v19, v70, 0);
    v54 = sub_100666C40();
    v55 = sub_100666D28();
    _ConditionalContent<>.init(storage:)(v19, v53, v20, v54, v55);
    v33 = v42;
    goto LABEL_15;
  }
  v68();
  v30 = &qword_100BFAD60;
  sub_100037768((uint64_t)v22, (uint64_t)v19, &qword_100BFAD60);
  swift_storeEnumTagMultiPayload(v19, v70, 1);
  v31 = sub_100666C40();
  v32 = sub_100666D28();
  _ConditionalContent<>.init(storage:)(v19, v69, v20, v31, v32);
  v33 = (uint64_t)v22;
LABEL_15:
  sub_100021A14(v33, v30);
}

uint64_t sub_1006612D0()
{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v4;

  v0 = sub_1000BA294(&qword_100BC5608);
  State.wrappedValue.getter(&v4, v0);
  if ((v4 & 1) != 0)
  {
    v1 = 1;
  }
  else
  {
    swift_retain();
    sub_1007A6344();
    swift_release();
    v2 = sub_10034BC40();
    sub_10009880C();
    v1 = v2 ^ 1;
  }
  return v1 & 1;
}

void sub_100661364(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;

  v34 = a1;
  v36 = a6;
  v37 = sub_1000BA294(&qword_100BFAE18);
  v35 = *(_QWORD *)(v37 - 8);
  sub_10009D98C();
  __chkstk_darwin(v11);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000BA294(&qword_100BFAE20);
  sub_10009D98C();
  __chkstk_darwin(v15);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000BA294(&qword_100BFAE28);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  sub_100099864();
  v20 = a3 & 1;
  v21 = sub_1006612D0();
  if ((v21 & 1) != 0)
  {
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
    v22(v6, v34, v18);
    v22((uint64_t)v17, v6, v18);
    swift_storeEnumTagMultiPayload(v17, v14, 0);
    sub_10003D2DC(&qword_100BFAE30, &qword_100BFAE28);
    v24 = v23;
    v38 = &type metadata for Color;
    v39 = &protocol witness table for Color;
    v25 = sub_10009885C((uint64_t)&v38, (uint64_t)&opaque type descriptor for <<opaque return type of View.onScrollVisibilityChange(threshold:_:)>>);
    _ConditionalContent<>.init(storage:)(v17, v18, v37, v24, v25);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v6, v18);
  }
  else
  {
    v38 = (void *)static Color.clear.getter(v21);
    v26 = swift_allocObject(&unk_100B86EB0, 48, 7);
    *(_QWORD *)(v26 + 16) = a2;
    *(_BYTE *)(v26 + 24) = v20;
    *(_BYTE *)(v26 + 32) = a4 & 1;
    *(_QWORD *)(v26 + 40) = a5;
    swift_retain();
    sub_100094EE4();
    View.onScrollVisibilityChange(threshold:_:)(sub_100667278, v26, &type metadata for Color, &protocol witness table for Color, 0.01);
    swift_release();
    v27 = swift_release();
    v28 = v35;
    v29 = v37;
    (*(void (**)(char *, char *, uint64_t, __n128))(v35 + 16))(v17, v13, v37, v27);
    swift_storeEnumTagMultiPayload(v17, v14, 1);
    sub_10003D2DC(&qword_100BFAE30, &qword_100BFAE28);
    v31 = v30;
    v38 = &type metadata for Color;
    v39 = &protocol witness table for Color;
    v32 = sub_10009885C((uint64_t)&v38, (uint64_t)&opaque type descriptor for <<opaque return type of View.onScrollVisibilityChange(threshold:_:)>>);
    _ConditionalContent<>.init(storage:)(v17, v18, v29, v31, v32);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v29);
  }
  sub_100098640();
}

uint64_t sub_100661618(char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  _BYTE v7[9];
  uint64_t v8;

  v7[1] = a4;
  v8 = a5;
  v7[0] = a1;
  v5 = sub_1000BA294(&qword_100BC5608);
  return State.wrappedValue.setter(v7, v5);
}

void sub_100661660(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_100661364(a1, *(_QWORD *)v2, *(_BYTE *)(v2 + 8), *(_BYTE *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

void sub_10066167C()
{
  _BYTE *v0;

  *v0 = sub_10003BDC8() & 1;
  sub_10004A298();
}

uint64_t sub_1006616AC(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  int *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  id v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  void (*v85)(char *, char *, uint64_t, __n128);
  __n128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  __int128 v92;
  uint64_t v93;
  void (*v94)(char *, char *, uint64_t);
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int *v128;
  char *__dst;
  char v131;
  int *v132;
  __int128 v133;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v14 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v6 = type metadata accessor for Location.Identifier(0);
    v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    v8 = type metadata accessor for LocationViewModel(0);
    v9 = *(int *)(v8 + 20);
    v10 = &a1[v9];
    v11 = &a2[v9];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&a2[v9], 1, v6))
    {
      v12 = sub_1000BA294(&qword_100BCD680);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v7(v10, v11, v6);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v6);
    }
    v15 = *(int *)(v8 + 24);
    v16 = &a1[v15];
    v132 = (int *)v8;
    v17 = &a2[v15];
    v18 = *(_QWORD *)&a2[v15 + 8];
    *(_QWORD *)v16 = *(_QWORD *)&a2[v15];
    *((_QWORD *)v16 + 1) = v18;
    v19 = *(_QWORD *)&a2[v15 + 16];
    v20 = *(_QWORD *)&a2[v15 + 24];
    v21 = *(_QWORD *)&a2[v15 + 32];
    v22 = *(_QWORD *)&a2[v15 + 40];
    v23 = a2[v15 + 48];
    swift_bridgeObjectRetain();
    sub_100176D88(v19, v20, v21, v22, v23);
    *((_QWORD *)v16 + 2) = v19;
    *((_QWORD *)v16 + 3) = v20;
    *((_QWORD *)v16 + 4) = v21;
    *((_QWORD *)v16 + 5) = v22;
    v16[48] = v23;
    v24 = *((_QWORD *)v17 + 8);
    *((_QWORD *)v16 + 7) = *((_QWORD *)v17 + 7);
    *((_QWORD *)v16 + 8) = v24;
    v25 = *((_QWORD *)v17 + 10);
    *((_QWORD *)v16 + 9) = *((_QWORD *)v17 + 9);
    *((_QWORD *)v16 + 10) = v25;
    v26 = *((_QWORD *)v17 + 12);
    *((_QWORD *)v16 + 11) = *((_QWORD *)v17 + 11);
    *((_QWORD *)v16 + 12) = v26;
    v27 = *((_QWORD *)v17 + 14);
    *((_QWORD *)v16 + 13) = *((_QWORD *)v17 + 13);
    *((_QWORD *)v16 + 14) = v27;
    v28 = *((_QWORD *)v17 + 16);
    *((_QWORD *)v16 + 15) = *((_QWORD *)v17 + 15);
    *((_QWORD *)v16 + 16) = v28;
    v16[136] = v17[136];
    *(_WORD *)(v16 + 137) = *(_WORD *)(v17 + 137);
    v29 = *((_QWORD *)v17 + 19);
    *((_QWORD *)v16 + 18) = *((_QWORD *)v17 + 18);
    *((_QWORD *)v16 + 19) = v29;
    v16[160] = v17[160];
    v30 = v17[161];
    v31 = v132;
    v16[161] = v30;
    *(_QWORD *)&a1[v132[7]] = *(_QWORD *)&a2[v132[7]];
    *(_QWORD *)&a1[v132[8]] = *(_QWORD *)&a2[v132[8]];
    v32 = v132[9];
    __dst = &a1[v32];
    v33 = &a2[v32];
    v34 = type metadata accessor for LocationFooterViewModel(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v33, 1, v34))
    {
      v35 = sub_1000BA294(&qword_100BCD690);
      memcpy(__dst, v33, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      *__dst = *v33;
      *(_WORD *)(__dst + 1) = *(_WORD *)(v33 + 1);
      v36 = *((_QWORD *)v33 + 2);
      *((_QWORD *)__dst + 1) = *((_QWORD *)v33 + 1);
      *((_QWORD *)__dst + 2) = v36;
      v37 = *(int *)(v34 + 32);
      v38 = &__dst[v37];
      v39 = &v33[v37];
      v40 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v39, 1, v40))
      {
        v41 = sub_1000BA294(&qword_100BD4280);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v38, 0, 1, v40);
      }
      v128 = (int *)v34;
      v42 = *(int *)(v34 + 36);
      v43 = &__dst[v42];
      v44 = &v33[v42];
      *v43 = v33[v42];
      *((_QWORD *)v43 + 1) = *(_QWORD *)&v33[v42 + 8];
      v45 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
      v46 = v45[6];
      v47 = &v43[v46];
      v48 = &v44[v46];
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v48, 1, v40))
      {
        v49 = sub_1000BA294(&qword_100BD4280);
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v47, v48, v40);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v47, 0, 1, v40);
      }
      v50 = v45[7];
      v51 = &v43[v50];
      v52 = &v44[v50];
      v53 = *((_QWORD *)v52 + 1);
      *(_QWORD *)v51 = *(_QWORD *)v52;
      *((_QWORD *)v51 + 1) = v53;
      *(_QWORD *)&v43[v45[8]] = *(_QWORD *)&v44[v45[8]];
      __dst[v128[10]] = v33[v128[10]];
      v54 = v128[11];
      v55 = &__dst[v54];
      v56 = &v33[v54];
      v57 = type metadata accessor for LocationOfInterest(0);
      swift_bridgeObjectRetain();
      swift_retain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v56, 1, v57))
      {
        v58 = sub_1000BA294(&qword_100BC3118);
        memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v55, v56, v57);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v55, 0, 1, v57);
      }
      __dst[v128[12]] = v33[v128[12]];
      __dst[v128[13]] = v33[v128[13]];
      v59 = v128[14];
      v60 = &__dst[v59];
      v61 = &v33[v59];
      v62 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v61, 1, (uint64_t)v62))
      {
        v63 = sub_1000BA294(&qword_100BCD688);
        memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
      }
      else
      {
        *v60 = *v61;
        v64 = v62[5];
        v65 = &v60[v64];
        v66 = &v61[v64];
        v67 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v65, v66, v67);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(&v60[v62[6]], &v61[v62[6]], v57);
        v60[v62[7]] = v61[v62[7]];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v60, 0, 1, (uint64_t)v62);
      }
      v31 = v132;
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, (uint64_t)v128);
    }
    a1[v31[10]] = a2[v31[10]];
    a1[v31[11]] = a2[v31[11]];
    a1[v31[12]] = a2[v31[12]];
    a1[v31[13]] = a2[v31[13]];
    a1[v31[14]] = a2[v31[14]];
    v68 = v31[15];
    v69 = *(void **)&a2[v68];
    *(_QWORD *)&a1[v68] = v69;
    a1[v31[16]] = a2[v31[16]];
    a1[v31[17]] = a2[v31[17]];
    a1[v31[18]] = a2[v31[18]];
    v70 = v31[19];
    v71 = &a1[v70];
    v72 = &a2[v70];
    v73 = type metadata accessor for Date(0);
    v74 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 16);
    v75 = v69;
    v74(v71, v72, v73);
    v76 = v31[20];
    v77 = &a1[v76];
    v78 = &a2[v76];
    v79 = type metadata accessor for ForegroundEffect(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v78, 1, v79))
    {
      v80 = sub_1000BA294(&qword_100BC5B30);
      memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v77, v78, v79);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v77, 0, 1, v79);
    }
    a1[v31[21]] = a2[v31[21]];
    *(_QWORD *)&a1[v31[22]] = *(_QWORD *)&a2[v31[22]];
    a1[v31[23]] = a2[v31[23]];
    v81 = v31[24];
    v82 = &a1[v81];
    v83 = &a2[v81];
    v84 = type metadata accessor for LocationEntity(0);
    v85 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v84 - 8) + 16);
    v86 = swift_bridgeObjectRetain();
    v85(v82, v83, v84, v86);
    v87 = a3[6];
    *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
    *(_QWORD *)&a1[v87] = *(_QWORD *)&a2[v87];
    v88 = a3[8];
    *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
    v133 = *(_OWORD *)&a2[v88];
    *(_OWORD *)&a1[v88] = v133;
    v89 = a3[9];
    v90 = &a1[v89];
    v91 = &a2[v89];
    v92 = *(_OWORD *)&a2[v89 + 24];
    *(_OWORD *)&a1[v89 + 24] = v92;
    v93 = v92;
    v94 = **(void (***)(char *, char *, uint64_t))(v92 - 8);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain(v133);
    v94(v90, v91, v93);
    v95 = a3[10];
    v96 = &a1[v95];
    v97 = &a2[v95];
    *(_OWORD *)v96 = *(_OWORD *)&a2[v95];
    v96[16] = a2[v95 + 16];
    v96[17] = a2[v95 + 17];
    v96[18] = a2[v95 + 18];
    v98 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v99 = &v96[v98];
    v100 = &v97[v98];
    v101 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 16))(v99, v100, v101);
    v102 = a3[12];
    *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
    v103 = &a1[v102];
    v104 = (uint64_t *)&a2[v102];
    v105 = *v104;
    v106 = v104[1];
    *(_QWORD *)v103 = v105;
    *((_QWORD *)v103 + 1) = v106;
    v107 = a3[13];
    v108 = &a1[v107];
    v109 = &a2[v107];
    v110 = *(_QWORD *)v109;
    LOBYTE(v100) = v109[8];
    swift_retain();
    sub_10008D47C(v110, (char)v100);
    *(_QWORD *)v108 = v110;
    v108[8] = (char)v100;
    v111 = a3[14];
    v112 = &a1[v111];
    v113 = &a2[v111];
    v114 = *(_QWORD *)v113;
    LOBYTE(v100) = v113[8];
    sub_10008D47C(*(_QWORD *)v113, (char)v100);
    *(_QWORD *)v112 = v114;
    v112[8] = (char)v100;
    v115 = a3[15];
    v116 = &a1[v115];
    v117 = &a2[v115];
    v118 = *(_QWORD *)v117;
    v119 = *((_QWORD *)v117 + 1);
    v120 = *((_QWORD *)v117 + 2);
    v121 = *((_QWORD *)v117 + 3);
    v122 = *((_QWORD *)v117 + 4);
    v123 = *((_QWORD *)v117 + 5);
    v124 = *((_QWORD *)v117 + 6);
    v125 = *((_QWORD *)v117 + 7);
    *(_QWORD *)&v133 = a1;
    v126 = *((_QWORD *)v117 + 8);
    v131 = v117[72];
    sub_1000D4FF4(*(_QWORD *)v117, v119, v120, v121, v122, v123, v124, v125, v126, v131);
    *(_QWORD *)v116 = v118;
    *((_QWORD *)v116 + 1) = v119;
    *((_QWORD *)v116 + 2) = v120;
    *((_QWORD *)v116 + 3) = v121;
    *((_QWORD *)v116 + 4) = v122;
    *((_QWORD *)v116 + 5) = v123;
    *((_QWORD *)v116 + 6) = v124;
    *((_QWORD *)v116 + 7) = v125;
    *((_QWORD *)v116 + 8) = v126;
    v14 = v133;
    v116[72] = v131;
  }
  return v14;
}

uint64_t sub_100661F58(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = type metadata accessor for Location.Identifier(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = (int *)type metadata accessor for LocationViewModel(0);
  v7 = a1 + v6[5];
  if (!_s7Weather24LocationCompositionStateOwet_0(v7, 1, v4))
    v5(v7, v4);
  v8 = a1 + v6[6];
  swift_bridgeObjectRelease();
  sub_100176DD4(*(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24), *(_QWORD *)(v8 + 32), *(_QWORD *)(v8 + 40), *(_BYTE *)(v8 + 48));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v9 = a1 + v6[9];
  v10 = (int *)type metadata accessor for LocationFooterViewModel(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v9, 1, (uint64_t)v10))
  {
    swift_bridgeObjectRelease();
    v11 = v9 + v10[8];
    v12 = type metadata accessor for URL(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v11, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
    v13 = v9 + v10[9];
    swift_bridgeObjectRelease();
    v14 = v13 + *(int *)(type metadata accessor for LearnMoreAttributorViewModel(0) + 24);
    if (!_s7Weather24LocationCompositionStateOwet_0(v14, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v14, v12);
    swift_bridgeObjectRelease();
    swift_release();
    v15 = v9 + v10[11];
    v16 = type metadata accessor for LocationOfInterest(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v15, 1, v16))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
    v17 = v9 + v10[14];
    v18 = type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v17, 1, v18))
    {
      v19 = v17 + *(int *)(v18 + 20);
      v20 = type metadata accessor for Location(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17 + *(int *)(v18 + 24), v16);
    }
  }

  v21 = a1 + v6[19];
  v22 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  v23 = a1 + v6[20];
  v24 = type metadata accessor for ForegroundEffect(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v23, 1, v24))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  swift_bridgeObjectRelease();
  v25 = a1 + v6[24];
  v26 = type metadata accessor for LocationEntity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease(*(_QWORD *)(a1 + a2[8]));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + a2[9]));
  v27 = a1 + a2[10];
  v28 = v27 + *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
  v29 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v28, v29);
  swift_release();
  sub_1000B15F8(*(_QWORD *)(a1 + a2[13]), *(_BYTE *)(a1 + a2[13] + 8));
  sub_1000B15F8(*(_QWORD *)(a1 + a2[14]), *(_BYTE *)(a1 + a2[14] + 8));
  v30 = a1 + a2[15];
  return sub_1000CEE98(*(_QWORD *)v30, *(_QWORD *)(v30 + 8), *(_QWORD *)(v30 + 16), *(_QWORD *)(v30 + 24), *(_QWORD *)(v30 + 32), *(_QWORD *)(v30 + 40), *(_QWORD *)(v30 + 48), *(_QWORD *)(v30 + 56), *(_QWORD *)(v30 + 64), *(_BYTE *)(v30 + 72));
}

uint64_t sub_100662344(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  int *v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);
  id v73;
  uint64_t v74;
  void *v75;
  const void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int *v126;
  _BYTE *v127;
  int *v128;
  __int128 v129;
  uint64_t v131;

  v5 = type metadata accessor for Location.Identifier(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16);
  v6(a1, a2, v5);
  v7 = (int *)type metadata accessor for LocationViewModel(0);
  v8 = v7[5];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  if (_s7Weather24LocationCompositionStateOwet_0(a2 + v8, 1, v5))
  {
    v11 = sub_1000BA294(&qword_100BCD680);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v6((uint64_t)v9, (uint64_t)v10, v5);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v5);
  }
  v12 = v7[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_QWORD *)(a2 + v12 + 8);
  *(_QWORD *)v13 = *(_QWORD *)(a2 + v12);
  *(_QWORD *)(v13 + 8) = v15;
  v16 = *(_QWORD *)(a2 + v12 + 16);
  v17 = *(_QWORD *)(a2 + v12 + 24);
  v18 = *(_QWORD *)(a2 + v12 + 32);
  v19 = *(_QWORD *)(a2 + v12 + 40);
  v20 = *(_BYTE *)(a2 + v12 + 48);
  swift_bridgeObjectRetain();
  sub_100176D88(v16, v17, v18, v19, v20);
  *(_QWORD *)(v13 + 16) = v16;
  *(_QWORD *)(v13 + 24) = v17;
  *(_QWORD *)(v13 + 32) = v18;
  *(_QWORD *)(v13 + 40) = v19;
  *(_BYTE *)(v13 + 48) = v20;
  v21 = *(_QWORD *)(v14 + 64);
  *(_QWORD *)(v13 + 56) = *(_QWORD *)(v14 + 56);
  *(_QWORD *)(v13 + 64) = v21;
  v22 = *(_QWORD *)(v14 + 80);
  *(_QWORD *)(v13 + 72) = *(_QWORD *)(v14 + 72);
  *(_QWORD *)(v13 + 80) = v22;
  v23 = *(_QWORD *)(v14 + 96);
  *(_QWORD *)(v13 + 88) = *(_QWORD *)(v14 + 88);
  *(_QWORD *)(v13 + 96) = v23;
  v24 = *(_QWORD *)(v14 + 112);
  *(_QWORD *)(v13 + 104) = *(_QWORD *)(v14 + 104);
  *(_QWORD *)(v13 + 112) = v24;
  v25 = *(_QWORD *)(v14 + 128);
  *(_QWORD *)(v13 + 120) = *(_QWORD *)(v14 + 120);
  *(_QWORD *)(v13 + 128) = v25;
  *(_BYTE *)(v13 + 136) = *(_BYTE *)(v14 + 136);
  *(_WORD *)(v13 + 137) = *(_WORD *)(v14 + 137);
  v26 = *(_QWORD *)(v14 + 152);
  *(_QWORD *)(v13 + 144) = *(_QWORD *)(v14 + 144);
  *(_QWORD *)(v13 + 152) = v26;
  *(_BYTE *)(v13 + 160) = *(_BYTE *)(v14 + 160);
  *(_BYTE *)(v13 + 161) = *(_BYTE *)(v14 + 161);
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  *(_QWORD *)(a1 + v7[8]) = *(_QWORD *)(a2 + v7[8]);
  v128 = v7;
  v27 = v7[9];
  v28 = (_BYTE *)(a1 + v27);
  v29 = (_BYTE *)(a2 + v27);
  v30 = type metadata accessor for LocationFooterViewModel(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v31 = (int *)v30;
  swift_bridgeObjectRetain();
  swift_retain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v29, 1, v30))
  {
    v32 = sub_1000BA294(&qword_100BCD690);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    v33 = v128;
  }
  else
  {
    *v28 = *v29;
    *(_WORD *)(v28 + 1) = *(_WORD *)(v29 + 1);
    v34 = *((_QWORD *)v29 + 2);
    *((_QWORD *)v28 + 1) = *((_QWORD *)v29 + 1);
    *((_QWORD *)v28 + 2) = v34;
    v35 = v31[8];
    v36 = &v28[v35];
    v127 = v29;
    v37 = &v29[v35];
    v38 = type metadata accessor for URL(0);
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v37, 1, v38))
    {
      v39 = sub_1000BA294(&qword_100BD4280);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v36, 0, 1, v38);
    }
    v126 = v31;
    v40 = v31[9];
    v41 = &v28[v40];
    v42 = &v127[v40];
    *v41 = v127[v40];
    *((_QWORD *)v41 + 1) = *(_QWORD *)&v127[v40 + 8];
    v43 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
    v44 = v43[6];
    v45 = &v41[v44];
    v46 = &v42[v44];
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v46, 1, v38))
    {
      v47 = sub_1000BA294(&qword_100BD4280);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v45, v46, v38);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v45, 0, 1, v38);
    }
    v48 = v43[7];
    v49 = &v41[v48];
    v50 = &v42[v48];
    v51 = v50[1];
    *v49 = *v50;
    v49[1] = v51;
    *(_QWORD *)&v41[v43[8]] = *(_QWORD *)&v42[v43[8]];
    v28[v126[10]] = v127[v126[10]];
    v52 = v126[11];
    v53 = &v28[v52];
    v54 = &v127[v52];
    v55 = type metadata accessor for LocationOfInterest(0);
    swift_bridgeObjectRetain();
    swift_retain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v54, 1, v55))
    {
      v56 = sub_1000BA294(&qword_100BC3118);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v54, v55);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v53, 0, 1, v55);
    }
    v28[v126[12]] = v127[v126[12]];
    v28[v126[13]] = v127[v126[13]];
    v57 = v126[14];
    v58 = &v28[v57];
    v59 = &v127[v57];
    v60 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v59, 1, (uint64_t)v60))
    {
      v61 = sub_1000BA294(&qword_100BCD688);
      memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    }
    else
    {
      *v58 = *v59;
      v62 = v60[5];
      v63 = &v58[v62];
      v64 = &v59[v62];
      v65 = type metadata accessor for Location(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v63, v64, v65);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(&v58[v60[6]], &v59[v60[6]], v55);
      v58[v60[7]] = v59[v60[7]];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v58, 0, 1, (uint64_t)v60);
    }
    v33 = v128;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v28, 0, 1, (uint64_t)v126);
  }
  *(_BYTE *)(a1 + v33[10]) = *(_BYTE *)(a2 + v33[10]);
  *(_BYTE *)(a1 + v33[11]) = *(_BYTE *)(a2 + v33[11]);
  *(_BYTE *)(a1 + v33[12]) = *(_BYTE *)(a2 + v33[12]);
  *(_BYTE *)(a1 + v33[13]) = *(_BYTE *)(a2 + v33[13]);
  *(_BYTE *)(a1 + v33[14]) = *(_BYTE *)(a2 + v33[14]);
  v66 = v33[15];
  v67 = *(void **)(a2 + v66);
  *(_QWORD *)(a1 + v66) = v67;
  *(_BYTE *)(a1 + v33[16]) = *(_BYTE *)(a2 + v33[16]);
  *(_BYTE *)(a1 + v33[17]) = *(_BYTE *)(a2 + v33[17]);
  *(_BYTE *)(a1 + v33[18]) = *(_BYTE *)(a2 + v33[18]);
  v68 = v33[19];
  v69 = a1 + v68;
  v70 = a2 + v68;
  v71 = type metadata accessor for Date(0);
  v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 16);
  v73 = v67;
  v72(v69, v70, v71);
  v74 = v33[20];
  v75 = (void *)(a1 + v74);
  v76 = (const void *)(a2 + v74);
  v77 = type metadata accessor for ForegroundEffect(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v76, 1, v77))
  {
    v78 = sub_1000BA294(&qword_100BC5B30);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v77 - 8) + 16))(v75, v76, v77);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v75, 0, 1, v77);
  }
  *(_BYTE *)(a1 + v33[21]) = *(_BYTE *)(a2 + v33[21]);
  *(_QWORD *)(a1 + v33[22]) = *(_QWORD *)(a2 + v33[22]);
  *(_BYTE *)(a1 + v33[23]) = *(_BYTE *)(a2 + v33[23]);
  v79 = v33[24];
  v80 = a1 + v79;
  v81 = a2 + v79;
  v82 = type metadata accessor for LocationEntity(0);
  v83 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v82 - 8) + 16);
  v84 = swift_bridgeObjectRetain();
  v83(v80, v81, v82, v84);
  v85 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v85) = *(_QWORD *)(a2 + v85);
  v86 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v129 = *(_OWORD *)(a2 + v86);
  *(_OWORD *)(a1 + v86) = v129;
  v87 = a3[9];
  v88 = a1 + v87;
  v89 = a2 + v87;
  v90 = *(_OWORD *)(a2 + v87 + 24);
  *(_OWORD *)(a1 + v87 + 24) = v90;
  v91 = v90;
  v92 = **(void (***)(uint64_t, uint64_t, uint64_t))(v90 - 8);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain(v129);
  v92(v88, v89, v91);
  v93 = a3[10];
  v94 = a1 + v93;
  v95 = a2 + v93;
  *(_OWORD *)v94 = *(_OWORD *)(a2 + v93);
  *(_BYTE *)(v94 + 16) = *(_BYTE *)(a2 + v93 + 16);
  *(_BYTE *)(v94 + 17) = *(_BYTE *)(a2 + v93 + 17);
  *(_BYTE *)(v94 + 18) = *(_BYTE *)(a2 + v93 + 18);
  v96 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
  v97 = v94 + v96;
  v98 = v95 + v96;
  v99 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 16))(v97, v98, v99);
  v100 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  v101 = (_QWORD *)(a1 + v100);
  v102 = (uint64_t *)(a2 + v100);
  v103 = *v102;
  v104 = v102[1];
  *v101 = v103;
  v101[1] = v104;
  v105 = a3[13];
  v106 = a1 + v105;
  v107 = a2 + v105;
  v108 = *(_QWORD *)v107;
  LOBYTE(v98) = *(_BYTE *)(v107 + 8);
  swift_retain();
  sub_10008D47C(v108, v98);
  *(_QWORD *)v106 = v108;
  *(_BYTE *)(v106 + 8) = v98;
  v109 = a3[14];
  v110 = a1 + v109;
  v111 = a2 + v109;
  v112 = *(_QWORD *)v111;
  LOBYTE(v98) = *(_BYTE *)(v111 + 8);
  sub_10008D47C(*(_QWORD *)v111, v98);
  *(_QWORD *)v110 = v112;
  *(_BYTE *)(v110 + 8) = v98;
  v113 = a3[15];
  v114 = a1 + v113;
  v115 = a2 + v113;
  v116 = *(_QWORD *)v115;
  v117 = *(_QWORD *)(v115 + 8);
  v118 = *(_QWORD *)(v115 + 16);
  v119 = *(_QWORD *)(v115 + 24);
  v120 = *(_QWORD *)(v115 + 32);
  v121 = *(_QWORD *)(v115 + 40);
  v122 = *(_QWORD *)(v115 + 48);
  v123 = *(_QWORD *)(v115 + 56);
  v131 = a1;
  v124 = *(_QWORD *)(v115 + 64);
  LOBYTE(v129) = *(_BYTE *)(v115 + 72);
  sub_1000D4FF4(*(_QWORD *)v115, v117, v118, v119, v120, v121, v122, v123, v124, v129);
  *(_QWORD *)v114 = v116;
  *(_QWORD *)(v114 + 8) = v117;
  *(_QWORD *)(v114 + 16) = v118;
  *(_QWORD *)(v114 + 24) = v119;
  *(_QWORD *)(v114 + 32) = v120;
  *(_QWORD *)(v114 + 40) = v121;
  *(_QWORD *)(v114 + 48) = v122;
  *(_QWORD *)(v114 + 56) = v123;
  *(_QWORD *)(v114 + 64) = v124;
  *(_BYTE *)(v114 + 72) = v129;
  return v131;
}

uint64_t sub_100662BCC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  int *v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int v33;
  uint64_t v34;
  void *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  void *v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const void *v81;
  int v82;
  int v83;
  size_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  void *v91;
  const void *v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  _BYTE *v100;
  int *v101;
  int v102;
  int v103;
  uint64_t v104;
  _BYTE *v105;
  _BYTE *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  void *v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  const void *v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  uint64_t v179;
  _BYTE *v180;
  _BYTE *v181;
  uint64_t v182;
  uint64_t v183;
  void *__dst;
  uint64_t v185;
  int *v186;
  int *v187;
  int *v188;
  char v189;
  int *v190;
  uint64_t v191;

  v6 = type metadata accessor for Location.Identifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = (int *)type metadata accessor for LocationViewModel(0);
  v10 = v9[5];
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  v13 = _s7Weather24LocationCompositionStateOwet_0(a1 + v10, 1, v6);
  v14 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v6);
  v190 = a3;
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v11, v12, v6);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v11, v6);
LABEL_6:
    v15 = sub_1000BA294(&qword_100BCD680);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v8((uint64_t)v11, (uint64_t)v12, v6);
LABEL_7:
  v16 = v9[6];
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_QWORD *)v17 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(v17 + 8) = *(_QWORD *)(a2 + v16 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(v18 + 16);
  v20 = *(_QWORD *)(v18 + 24);
  v21 = *(_QWORD *)(v18 + 32);
  v22 = *(_QWORD *)(v18 + 40);
  v23 = *(_BYTE *)(v18 + 48);
  sub_100176D88(v19, v20, v21, v22, v23);
  v24 = *(_QWORD *)(v17 + 16);
  v25 = *(_QWORD *)(v17 + 24);
  v26 = *(_QWORD *)(v17 + 32);
  v27 = *(_QWORD *)(v17 + 40);
  *(_QWORD *)(v17 + 16) = v19;
  *(_QWORD *)(v17 + 24) = v20;
  *(_QWORD *)(v17 + 32) = v21;
  *(_QWORD *)(v17 + 40) = v22;
  v28 = *(_BYTE *)(v17 + 48);
  *(_BYTE *)(v17 + 48) = v23;
  sub_100176DD4(v24, v25, v26, v27, v28);
  *(_QWORD *)(v17 + 56) = *(_QWORD *)(v18 + 56);
  *(_QWORD *)(v17 + 64) = *(_QWORD *)(v18 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v17 + 72) = *(_QWORD *)(v18 + 72);
  *(_QWORD *)(v17 + 80) = *(_QWORD *)(v18 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v17 + 88) = *(_QWORD *)(v18 + 88);
  *(_QWORD *)(v17 + 96) = *(_QWORD *)(v18 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v17 + 104) = *(_QWORD *)(v18 + 104);
  *(_QWORD *)(v17 + 112) = *(_QWORD *)(v18 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v17 + 120) = *(_QWORD *)(v18 + 120);
  *(_QWORD *)(v17 + 128) = *(_QWORD *)(v18 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v17 + 136) = *(_BYTE *)(v18 + 136);
  *(_BYTE *)(v17 + 137) = *(_BYTE *)(v18 + 137);
  *(_BYTE *)(v17 + 138) = *(_BYTE *)(v18 + 138);
  *(_QWORD *)(v17 + 144) = *(_QWORD *)(v18 + 144);
  *(_QWORD *)(v17 + 152) = *(_QWORD *)(v18 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v17 + 160) = *(_BYTE *)(v18 + 160);
  *(_BYTE *)(v17 + 161) = *(_BYTE *)(v18 + 161);
  *(_QWORD *)(a1 + v9[7]) = *(_QWORD *)(a2 + v9[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v9[8]) = *(_QWORD *)(a2 + v9[8]);
  swift_retain();
  swift_release();
  v29 = v9[9];
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = (int *)type metadata accessor for LocationFooterViewModel(0);
  LODWORD(v19) = _s7Weather24LocationCompositionStateOwet_0(v30, 1, (uint64_t)v32);
  v33 = _s7Weather24LocationCompositionStateOwet_0(v31, 1, (uint64_t)v32);
  if ((_DWORD)v19)
  {
    if (!v33)
    {
      *(_BYTE *)v30 = *(_BYTE *)v31;
      *(_BYTE *)(v30 + 1) = *(_BYTE *)(v31 + 1);
      *(_BYTE *)(v30 + 2) = *(_BYTE *)(v31 + 2);
      *(_QWORD *)(v30 + 8) = *(_QWORD *)(v31 + 8);
      *(_QWORD *)(v30 + 16) = *(_QWORD *)(v31 + 16);
      v34 = v32[8];
      v185 = v30;
      v35 = (void *)(v30 + v34);
      v36 = (const void *)(v31 + v34);
      v37 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v36, 1, v37))
      {
        v38 = sub_1000BA294(&qword_100BD4280);
        memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v35, 0, 1, v37);
      }
      v187 = v32;
      v47 = v32[9];
      v48 = v185 + v47;
      v49 = v31 + v47;
      *(_BYTE *)v48 = *(_BYTE *)(v31 + v47);
      *(_QWORD *)(v48 + 8) = *(_QWORD *)(v31 + v47 + 8);
      v50 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
      v51 = v50[6];
      __dst = (void *)(v48 + v51);
      v52 = (const void *)(v49 + v51);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v52, 1, v37))
      {
        v53 = sub_1000BA294(&qword_100BD4280);
        memcpy(__dst, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(__dst, v52, v37);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v37);
      }
      v54 = v50[7];
      v55 = (_QWORD *)(v48 + v54);
      v56 = (_QWORD *)(v49 + v54);
      *v55 = *v56;
      v55[1] = v56[1];
      *(_QWORD *)(v48 + v50[8]) = *(_QWORD *)(v49 + v50[8]);
      *(_BYTE *)(v185 + v32[10]) = *(_BYTE *)(v31 + v32[10]);
      v57 = v32[11];
      v58 = (void *)(v185 + v57);
      v59 = (const void *)(v31 + v57);
      v60 = type metadata accessor for LocationOfInterest(0);
      swift_bridgeObjectRetain();
      swift_retain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v59, 1, v60))
      {
        v61 = sub_1000BA294(&qword_100BC3118);
        memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v58, v59, v60);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v58, 0, 1, v60);
      }
      v62 = v32;
      *(_BYTE *)(v185 + v32[12]) = *(_BYTE *)(v31 + v32[12]);
      *(_BYTE *)(v185 + v32[13]) = *(_BYTE *)(v31 + v32[13]);
      v63 = v32[14];
      v64 = (_BYTE *)(v185 + v63);
      v65 = (_BYTE *)(v31 + v63);
      v66 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v65, 1, (uint64_t)v66))
      {
        v67 = sub_1000BA294(&qword_100BCD688);
        memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
      }
      else
      {
        *v64 = *v65;
        v68 = v66[5];
        v69 = &v64[v68];
        v70 = &v65[v68];
        v71 = type metadata accessor for Location(0);
        v72 = v69;
        v62 = v187;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v72, v70, v71);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(&v64[v66[6]], &v65[v66[6]], v60);
        v64[v66[7]] = v65[v66[7]];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v64, 0, 1, (uint64_t)v66);
      }
      v40 = v190;
      v73 = v185;
      v74 = (uint64_t)v62;
      goto LABEL_29;
    }
LABEL_13:
    v39 = sub_1000BA294(&qword_100BCD690);
    memcpy((void *)v30, (const void *)v31, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    v40 = v190;
    goto LABEL_54;
  }
  if (v33)
  {
    sub_1000215BC(v30, type metadata accessor for LocationFooterViewModel);
    goto LABEL_13;
  }
  *(_BYTE *)v30 = *(_BYTE *)v31;
  *(_BYTE *)(v30 + 1) = *(_BYTE *)(v31 + 1);
  *(_BYTE *)(v30 + 2) = *(_BYTE *)(v31 + 2);
  *(_QWORD *)(v30 + 8) = *(_QWORD *)(v31 + 8);
  *(_QWORD *)(v30 + 16) = *(_QWORD *)(v31 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v41 = v32[8];
  v42 = (void *)(v30 + v41);
  v43 = (const void *)(v31 + v41);
  v44 = type metadata accessor for URL(0);
  v45 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v42, 1, v44);
  v46 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v43, 1, v44);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v42, 0, 1, v44);
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  v75 = *(_QWORD *)(v44 - 8);
  if (v46)
  {
    (*(void (**)(void *, uint64_t))(v75 + 8))(v42, v44);
LABEL_32:
    v76 = sub_1000BA294(&qword_100BD4280);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_33;
  }
  (*(void (**)(void *, const void *, uint64_t))(v75 + 24))(v42, v43, v44);
LABEL_33:
  v188 = v32;
  v77 = v32[9];
  v78 = v30 + v77;
  v79 = v31 + v77;
  *(_BYTE *)v78 = *(_BYTE *)(v31 + v77);
  *(_QWORD *)(v78 + 8) = *(_QWORD *)(v31 + v77 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v186 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
  v80 = v186[6];
  v81 = (const void *)(v79 + v80);
  v183 = v78 + v80;
  v82 = _s7Weather24LocationCompositionStateOwet_0(v78 + v80, 1, v44);
  v83 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v81, 1, v44);
  if (v82)
  {
    if (v83)
    {
      v84 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD4280) - 8) + 64);
      v85 = (void *)v183;
LABEL_38:
      memcpy(v85, v81, v84);
      goto LABEL_42;
    }
    (*(void (**)(uint64_t, const void *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v183, v81, v44);
    _s7Weather24LocationCompositionStateOwst_0(v183, 0, 1, v44);
  }
  else
  {
    v86 = *(_QWORD *)(v44 - 8);
    if (v83)
    {
      (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v183, v44);
      v84 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD4280) - 8) + 64);
      v85 = (void *)v183;
      goto LABEL_38;
    }
    (*(void (**)(uint64_t, const void *, uint64_t))(v86 + 24))(v183, v81, v44);
  }
LABEL_42:
  v87 = v186[7];
  v88 = (_QWORD *)(v78 + v87);
  v89 = (_QWORD *)(v79 + v87);
  *v88 = *v89;
  v88[1] = v89[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v78 + v186[8]) = *(_QWORD *)(v79 + v186[8]);
  swift_retain();
  swift_release();
  *(_BYTE *)(v30 + v188[10]) = *(_BYTE *)(v31 + v188[10]);
  v90 = v188[11];
  v91 = (void *)(v30 + v90);
  v92 = (const void *)(v31 + v90);
  v93 = type metadata accessor for LocationOfInterest(0);
  v94 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v91, 1, v93);
  v95 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v92, 1, v93);
  if (v94)
  {
    if (!v95)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v93 - 8) + 16))(v91, v92, v93);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v91, 0, 1, v93);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  v96 = *(_QWORD *)(v93 - 8);
  if (v95)
  {
    (*(void (**)(void *, uint64_t))(v96 + 8))(v91, v93);
LABEL_47:
    v97 = sub_1000BA294(&qword_100BC3118);
    memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
    goto LABEL_48;
  }
  (*(void (**)(void *, const void *, uint64_t))(v96 + 24))(v91, v92, v93);
LABEL_48:
  *(_BYTE *)(v30 + v188[12]) = *(_BYTE *)(v31 + v188[12]);
  *(_BYTE *)(v30 + v188[13]) = *(_BYTE *)(v31 + v188[13]);
  v98 = v188[14];
  v99 = (_BYTE *)(v30 + v98);
  v100 = (_BYTE *)(v31 + v98);
  v101 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
  v102 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v99, 1, (uint64_t)v101);
  v103 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v100, 1, (uint64_t)v101);
  v40 = v190;
  if (v102)
  {
    if (!v103)
    {
      *v99 = *v100;
      v104 = v101[5];
      v105 = &v99[v104];
      v106 = &v100[v104];
      v107 = type metadata accessor for Location(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v107 - 8) + 16))(v105, v106, v107);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v93 - 8) + 16))(&v99[v101[6]], &v100[v101[6]], v93);
      v99[v101[7]] = v100[v101[7]];
      v73 = (uint64_t)v99;
      v74 = (uint64_t)v101;
LABEL_29:
      _s7Weather24LocationCompositionStateOwst_0(v73, 0, 1, v74);
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  if (v103)
  {
    sub_1000215BC((uint64_t)v99, type metadata accessor for HomeAndWorkRefinementRowViewModel);
LABEL_53:
    v108 = sub_1000BA294(&qword_100BCD688);
    memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
    goto LABEL_54;
  }
  *v99 = *v100;
  v179 = v101[5];
  v180 = &v99[v179];
  v181 = &v100[v179];
  v182 = type metadata accessor for Location(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v182 - 8) + 24))(v180, v181, v182);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v93 - 8) + 24))(&v99[v101[6]], &v100[v101[6]], v93);
  v99[v101[7]] = v100[v101[7]];
LABEL_54:
  *(_BYTE *)(a1 + v9[10]) = *(_BYTE *)(a2 + v9[10]);
  *(_BYTE *)(a1 + v9[11]) = *(_BYTE *)(a2 + v9[11]);
  *(_BYTE *)(a1 + v9[12]) = *(_BYTE *)(a2 + v9[12]);
  *(_BYTE *)(a1 + v9[13]) = *(_BYTE *)(a2 + v9[13]);
  *(_BYTE *)(a1 + v9[14]) = *(_BYTE *)(a2 + v9[14]);
  v109 = v9[15];
  v110 = *(void **)(a2 + v109);
  v111 = *(void **)(a1 + v109);
  *(_QWORD *)(a1 + v109) = v110;
  v112 = v110;

  *(_BYTE *)(a1 + v9[16]) = *(_BYTE *)(a2 + v9[16]);
  *(_BYTE *)(a1 + v9[17]) = *(_BYTE *)(a2 + v9[17]);
  *(_BYTE *)(a1 + v9[18]) = *(_BYTE *)(a2 + v9[18]);
  v113 = v9[19];
  v114 = a1 + v113;
  v115 = a2 + v113;
  v116 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 24))(v114, v115, v116);
  v117 = v9[20];
  v118 = (void *)(a1 + v117);
  v119 = (const void *)(a2 + v117);
  v120 = type metadata accessor for ForegroundEffect(0);
  LODWORD(v114) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v118, 1, v120);
  v121 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v119, 1, v120);
  if (!(_DWORD)v114)
  {
    v122 = *(_QWORD *)(v120 - 8);
    if (!v121)
    {
      (*(void (**)(void *, const void *, uint64_t))(v122 + 24))(v118, v119, v120);
      goto LABEL_60;
    }
    (*(void (**)(void *, uint64_t))(v122 + 8))(v118, v120);
    goto LABEL_59;
  }
  if (v121)
  {
LABEL_59:
    v123 = sub_1000BA294(&qword_100BC5B30);
    memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
    goto LABEL_60;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v120 - 8) + 16))(v118, v119, v120);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v118, 0, 1, v120);
LABEL_60:
  *(_BYTE *)(a1 + v9[21]) = *(_BYTE *)(a2 + v9[21]);
  *(_QWORD *)(a1 + v9[22]) = *(_QWORD *)(a2 + v9[22]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + v9[23]) = *(_BYTE *)(a2 + v9[23]);
  v124 = v9[24];
  v125 = a1 + v124;
  v126 = a2 + v124;
  v127 = type metadata accessor for LocationEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v127 - 8) + 24))(v125, v126, v127);
  *(_QWORD *)(a1 + v40[5]) = *(_QWORD *)(a2 + v40[5]);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + v40[6]) = *(_QWORD *)(a2 + v40[6]);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + v40[7]) = *(_QWORD *)(a2 + v40[7]);
  swift_retain();
  swift_release();
  v128 = v40[8];
  v129 = (uint64_t *)(a1 + v128);
  v130 = (uint64_t *)(a2 + v128);
  v131 = *v130;
  v132 = v130[1];
  v133 = *v129;
  *v129 = *v130;
  swift_unknownObjectRetain(v131);
  swift_unknownObjectRelease(v133);
  v129[1] = v132;
  sub_100094D04((_QWORD *)(a1 + v40[9]), (_QWORD *)(a2 + v40[9]));
  v134 = v40[10];
  v135 = a1 + v134;
  v136 = a2 + v134;
  *(_QWORD *)v135 = *(_QWORD *)(a2 + v134);
  *(_QWORD *)(v135 + 8) = *(_QWORD *)(a2 + v134 + 8);
  *(_BYTE *)(v135 + 16) = *(_BYTE *)(a2 + v134 + 16);
  *(_BYTE *)(v135 + 17) = *(_BYTE *)(a2 + v134 + 17);
  *(_BYTE *)(v135 + 18) = *(_BYTE *)(a2 + v134 + 18);
  v137 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
  v138 = v135 + v137;
  v139 = v136 + v137;
  v140 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v140 - 8) + 24))(v138, v139, v140);
  *(_QWORD *)(a1 + v40[11]) = *(_QWORD *)(a2 + v40[11]);
  v141 = v40[12];
  v142 = a1 + v141;
  v143 = a2 + v141;
  *(_QWORD *)(a1 + v141) = *(_QWORD *)(a2 + v141);
  swift_retain();
  swift_release();
  *(_QWORD *)(v142 + 8) = *(_QWORD *)(v143 + 8);
  v144 = v40[13];
  v145 = a1 + v144;
  v146 = a2 + v144;
  v147 = *(_QWORD *)v146;
  LOBYTE(v142) = *(_BYTE *)(v146 + 8);
  sub_10008D47C(*(_QWORD *)v146, v142);
  v148 = *(_QWORD *)v145;
  v149 = *(_BYTE *)(v145 + 8);
  *(_QWORD *)v145 = v147;
  *(_BYTE *)(v145 + 8) = v142;
  sub_1000B15F8(v148, v149);
  v150 = v40[14];
  v151 = a1 + v150;
  v152 = a2 + v150;
  v153 = *(_QWORD *)v152;
  LOBYTE(v142) = *(_BYTE *)(v152 + 8);
  sub_10008D47C(*(_QWORD *)v152, v142);
  v154 = *(_QWORD *)v151;
  v155 = *(_BYTE *)(v151 + 8);
  *(_QWORD *)v151 = v153;
  *(_BYTE *)(v151 + 8) = v142;
  sub_1000B15F8(v154, v155);
  v156 = v40[15];
  v157 = a1 + v156;
  v158 = a2 + v156;
  v159 = *(_QWORD *)v158;
  v160 = *(_QWORD *)(v158 + 8);
  v161 = *(_QWORD *)(v158 + 16);
  v162 = *(_QWORD *)(v158 + 24);
  v163 = *(_QWORD *)(v158 + 32);
  v164 = *(_QWORD *)(v158 + 40);
  v165 = *(_QWORD *)(v158 + 48);
  v166 = *(_QWORD *)(v158 + 56);
  v191 = a1;
  v167 = *(_QWORD *)(v158 + 64);
  v189 = *(_BYTE *)(v158 + 72);
  sub_1000D4FF4(*(_QWORD *)v158, v160, v161, v162, v163, v164, v165, v166, v167, v189);
  v168 = *(_QWORD *)v157;
  v169 = *(_QWORD *)(v157 + 8);
  v170 = *(_QWORD *)(v157 + 16);
  v171 = *(_QWORD *)(v157 + 24);
  v172 = *(_QWORD *)(v157 + 32);
  v173 = *(_QWORD *)(v157 + 40);
  v174 = *(_QWORD *)(v157 + 48);
  v175 = *(_QWORD *)(v157 + 56);
  v176 = *(_QWORD *)(v157 + 64);
  v177 = *(_BYTE *)(v157 + 72);
  *(_QWORD *)v157 = v159;
  *(_QWORD *)(v157 + 8) = v160;
  *(_QWORD *)(v157 + 16) = v161;
  *(_QWORD *)(v157 + 24) = v162;
  *(_QWORD *)(v157 + 32) = v163;
  *(_QWORD *)(v157 + 40) = v164;
  *(_QWORD *)(v157 + 48) = v165;
  *(_QWORD *)(v157 + 56) = v166;
  *(_QWORD *)(v157 + 64) = v167;
  *(_BYTE *)(v157 + 72) = v189;
  sub_1000CEE98(v168, v169, v170, v171, v172, v173, v174, v175, v176, v177);
  return v191;
}

uint64_t sub_100663AC0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  int *v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  int *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v76;
  int *v77;
  uint64_t v78;
  _BYTE *__dst;
  _BYTE *__dsta;

  v6 = type metadata accessor for Location.Identifier(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = (int *)type metadata accessor for LocationViewModel(0);
  v9 = v8[5];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  if (_s7Weather24LocationCompositionStateOwet_0(a2 + v9, 1, v6))
  {
    v12 = sub_1000BA294(&qword_100BCD680);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v10, (uint64_t)v11, v6);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v6);
  }
  memcpy((void *)(a1 + v8[6]), (const void *)(a2 + v8[6]), 0xA2uLL);
  *(_QWORD *)(a1 + v8[7]) = *(_QWORD *)(a2 + v8[7]);
  *(_QWORD *)(a1 + v8[8]) = *(_QWORD *)(a2 + v8[8]);
  v13 = v8[9];
  v14 = (_BYTE *)(a1 + v13);
  v15 = (_BYTE *)(a2 + v13);
  v16 = type metadata accessor for LocationFooterViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v16))
  {
    v17 = sub_1000BA294(&qword_100BCD690);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v14 = *v15;
    *(_WORD *)(v14 + 1) = *(_WORD *)(v15 + 1);
    *(_OWORD *)(v14 + 8) = *(_OWORD *)(v15 + 8);
    v18 = *(int *)(v16 + 32);
    v19 = &v14[v18];
    v20 = &v15[v18];
    v21 = type metadata accessor for URL(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v20, 1, v21))
    {
      v22 = sub_1000BA294(&qword_100BD4280);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v19, 0, 1, v21);
    }
    v77 = (int *)v16;
    v78 = (uint64_t)v14;
    v23 = *(int *)(v16 + 36);
    v24 = &v14[v23];
    v25 = &v15[v23];
    *v24 = v15[v23];
    *((_QWORD *)v24 + 1) = *(_QWORD *)&v15[v23 + 8];
    v26 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
    v27 = v26[6];
    __dst = &v24[v27];
    v28 = &v25[v27];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v25[v27], 1, v21))
    {
      v29 = sub_1000BA294(&qword_100BD4280);
      memcpy(__dst, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(__dst, v28, v21);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v21);
    }
    *(_OWORD *)&v24[v26[7]] = *(_OWORD *)&v25[v26[7]];
    *(_QWORD *)&v24[v26[8]] = *(_QWORD *)&v25[v26[8]];
    *(_BYTE *)(v78 + v77[10]) = v15[v77[10]];
    v30 = v77[11];
    v31 = (void *)(v78 + v30);
    v32 = &v15[v30];
    v33 = type metadata accessor for LocationOfInterest(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v32, 1, v33))
    {
      v34 = sub_1000BA294(&qword_100BC3118);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, _BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v31, 0, 1, v33);
    }
    *(_BYTE *)(v78 + v77[12]) = v15[v77[12]];
    *(_BYTE *)(v78 + v77[13]) = v15[v77[13]];
    v35 = v77[14];
    v36 = (_BYTE *)(v78 + v35);
    v37 = &v15[v35];
    v38 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v37, 1, (uint64_t)v38))
    {
      v39 = sub_1000BA294(&qword_100BCD688);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      *v36 = *v37;
      v40 = v38[5];
      __dsta = &v36[v40];
      v76 = &v37[v40];
      v41 = type metadata accessor for Location(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(__dsta, v76, v41);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(&v36[v38[6]], &v37[v38[6]], v33);
      v36[v38[7]] = v37[v38[7]];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v36, 0, 1, (uint64_t)v38);
    }
    _s7Weather24LocationCompositionStateOwst_0(v78, 0, 1, (uint64_t)v77);
  }
  *(_BYTE *)(a1 + v8[10]) = *(_BYTE *)(a2 + v8[10]);
  *(_BYTE *)(a1 + v8[11]) = *(_BYTE *)(a2 + v8[11]);
  *(_BYTE *)(a1 + v8[12]) = *(_BYTE *)(a2 + v8[12]);
  *(_BYTE *)(a1 + v8[13]) = *(_BYTE *)(a2 + v8[13]);
  *(_BYTE *)(a1 + v8[14]) = *(_BYTE *)(a2 + v8[14]);
  *(_QWORD *)(a1 + v8[15]) = *(_QWORD *)(a2 + v8[15]);
  *(_BYTE *)(a1 + v8[16]) = *(_BYTE *)(a2 + v8[16]);
  *(_BYTE *)(a1 + v8[17]) = *(_BYTE *)(a2 + v8[17]);
  *(_BYTE *)(a1 + v8[18]) = *(_BYTE *)(a2 + v8[18]);
  v42 = v8[19];
  v43 = a1 + v42;
  v44 = a2 + v42;
  v45 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v43, v44, v45);
  v46 = v8[20];
  v47 = (void *)(a1 + v46);
  v48 = (const void *)(a2 + v46);
  v49 = type metadata accessor for ForegroundEffect(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v48, 1, v49))
  {
    v50 = sub_1000BA294(&qword_100BC5B30);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v47, v48, v49);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v47, 0, 1, v49);
  }
  *(_BYTE *)(a1 + v8[21]) = *(_BYTE *)(a2 + v8[21]);
  *(_QWORD *)(a1 + v8[22]) = *(_QWORD *)(a2 + v8[22]);
  *(_BYTE *)(a1 + v8[23]) = *(_BYTE *)(a2 + v8[23]);
  v51 = v8[24];
  v52 = a1 + v51;
  v53 = a2 + v51;
  v54 = type metadata accessor for LocationEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(v52, v53, v54);
  v55 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v55) = *(_QWORD *)(a2 + v55);
  v56 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v56) = *(_OWORD *)(a2 + v56);
  v57 = a3[9];
  v58 = a3[10];
  v59 = a1 + v57;
  v60 = a2 + v57;
  v61 = *(_OWORD *)(v60 + 16);
  *(_OWORD *)v59 = *(_OWORD *)v60;
  *(_OWORD *)(v59 + 16) = v61;
  *(_QWORD *)(v59 + 32) = *(_QWORD *)(v60 + 32);
  v62 = a1 + v58;
  v63 = a2 + v58;
  *(_OWORD *)v62 = *(_OWORD *)(a2 + v58);
  *(_BYTE *)(v62 + 16) = *(_BYTE *)(a2 + v58 + 16);
  *(_BYTE *)(v62 + 17) = *(_BYTE *)(a2 + v58 + 17);
  *(_BYTE *)(v62 + 18) = *(_BYTE *)(a2 + v58 + 18);
  v64 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
  v65 = v62 + v64;
  v66 = v63 + v64;
  v67 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 32))(v65, v66, v67);
  v68 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v68) = *(_OWORD *)(a2 + v68);
  v69 = a3[13];
  v70 = a3[14];
  v71 = a1 + v69;
  v72 = a2 + v69;
  *(_BYTE *)(v71 + 8) = *(_BYTE *)(v72 + 8);
  *(_QWORD *)v71 = *(_QWORD *)v72;
  v73 = a1 + v70;
  v74 = a2 + v70;
  *(_QWORD *)v73 = *(_QWORD *)v74;
  *(_BYTE *)(v73 + 8) = *(_BYTE *)(v74 + 8);
  memcpy((void *)(a1 + a3[15]), (const void *)(a2 + a3[15]), 0x49uLL);
  return a1;
}

uint64_t sub_100664150(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  int *v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  void *v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  void *v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const void *v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  const void *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  const void *v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  __int128 v139;
  __int128 v140;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  const void *v148;
  int v149;
  int v150;
  size_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  const void *v161;
  uint64_t v162;
  int v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _BYTE *v168;
  _BYTE *v169;
  int *v170;
  int v171;
  int v172;
  uint64_t v173;
  _BYTE *v174;
  _BYTE *v175;
  uint64_t v176;
  _BYTE *v177;
  uint64_t v178;
  _BYTE *v179;
  _BYTE *v180;
  uint64_t v181;
  _BYTE *v182;
  uint64_t v183;
  void *__dst;
  _BYTE *__dstb;
  int *__dsta;
  int *v187;
  int *v188;
  int *v189;
  int *v190;

  v6 = type metadata accessor for Location.Identifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = (int *)type metadata accessor for LocationViewModel(0);
  v10 = v9[5];
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  v13 = _s7Weather24LocationCompositionStateOwet_0(a1 + v10, 1, v6);
  v14 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v6);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v11, v12, v6);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v11, v6);
LABEL_6:
    v15 = sub_1000BA294(&qword_100BCD680);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v8((uint64_t)v11, (uint64_t)v12, v6);
LABEL_7:
  v16 = v9[6];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_QWORD *)(a2 + v16 + 8);
  *(_QWORD *)v17 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(v17 + 8) = v19;
  swift_bridgeObjectRelease();
  v20 = *(_BYTE *)(v18 + 48);
  v21 = *(_QWORD *)(v17 + 16);
  v22 = *(_QWORD *)(v17 + 24);
  v23 = *(_QWORD *)(v17 + 32);
  v24 = *(_QWORD *)(v17 + 40);
  v25 = *(_OWORD *)(v18 + 32);
  *(_OWORD *)(v17 + 16) = *(_OWORD *)(v18 + 16);
  *(_OWORD *)(v17 + 32) = v25;
  v26 = *(_BYTE *)(v17 + 48);
  *(_BYTE *)(v17 + 48) = v20;
  sub_100176DD4(v21, v22, v23, v24, v26);
  v27 = *(_QWORD *)(v18 + 64);
  *(_QWORD *)(v17 + 56) = *(_QWORD *)(v18 + 56);
  *(_QWORD *)(v17 + 64) = v27;
  swift_bridgeObjectRelease();
  v28 = *(_QWORD *)(v18 + 80);
  *(_QWORD *)(v17 + 72) = *(_QWORD *)(v18 + 72);
  *(_QWORD *)(v17 + 80) = v28;
  swift_bridgeObjectRelease();
  v29 = *(_QWORD *)(v18 + 96);
  *(_QWORD *)(v17 + 88) = *(_QWORD *)(v18 + 88);
  *(_QWORD *)(v17 + 96) = v29;
  swift_bridgeObjectRelease();
  v30 = *(_QWORD *)(v18 + 112);
  *(_QWORD *)(v17 + 104) = *(_QWORD *)(v18 + 104);
  *(_QWORD *)(v17 + 112) = v30;
  swift_bridgeObjectRelease();
  v31 = *(_QWORD *)(v18 + 128);
  *(_QWORD *)(v17 + 120) = *(_QWORD *)(v18 + 120);
  *(_QWORD *)(v17 + 128) = v31;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v17 + 136) = *(_BYTE *)(v18 + 136);
  *(_BYTE *)(v17 + 137) = *(_BYTE *)(v18 + 137);
  *(_BYTE *)(v17 + 138) = *(_BYTE *)(v18 + 138);
  v32 = *(_QWORD *)(v18 + 152);
  *(_QWORD *)(v17 + 144) = *(_QWORD *)(v18 + 144);
  *(_QWORD *)(v17 + 152) = v32;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v17 + 160) = *(_BYTE *)(v18 + 160);
  *(_BYTE *)(v17 + 161) = *(_BYTE *)(v18 + 161);
  *(_QWORD *)(a1 + v9[7]) = *(_QWORD *)(a2 + v9[7]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v9[8]) = *(_QWORD *)(a2 + v9[8]);
  swift_release();
  v33 = v9[9];
  v34 = a1 + v33;
  v35 = a2 + v33;
  v36 = type metadata accessor for LocationFooterViewModel(0);
  LODWORD(v18) = _s7Weather24LocationCompositionStateOwet_0(v34, 1, v36);
  v37 = _s7Weather24LocationCompositionStateOwet_0(v35, 1, v36);
  if ((_DWORD)v18)
  {
    if (!v37)
    {
      v187 = a3;
      *(_BYTE *)v34 = *(_BYTE *)v35;
      *(_WORD *)(v34 + 1) = *(_WORD *)(v35 + 1);
      *(_OWORD *)(v34 + 8) = *(_OWORD *)(v35 + 8);
      v38 = *(int *)(v36 + 32);
      v39 = (void *)(v34 + v38);
      v40 = (const void *)(v35 + v38);
      v41 = type metadata accessor for URL(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v40, 1, v41))
      {
        v42 = sub_1000BA294(&qword_100BD4280);
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v39, v40, v41);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v39, 0, 1, v41);
      }
      v190 = (int *)v36;
      v53 = *(int *)(v36 + 36);
      v54 = v34 + v53;
      v55 = v35 + v53;
      *(_BYTE *)v54 = *(_BYTE *)(v35 + v53);
      *(_QWORD *)(v54 + 8) = *(_QWORD *)(v35 + v53 + 8);
      v56 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
      v57 = v56[6];
      __dst = (void *)(v54 + v57);
      v58 = (const void *)(v55 + v57);
      if (_s7Weather24LocationCompositionStateOwet_0(v55 + v57, 1, v41))
      {
        v59 = sub_1000BA294(&qword_100BD4280);
        memcpy(__dst, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(__dst, v58, v41);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v41);
      }
      *(_OWORD *)(v54 + v56[7]) = *(_OWORD *)(v55 + v56[7]);
      *(_QWORD *)(v54 + v56[8]) = *(_QWORD *)(v55 + v56[8]);
      *(_BYTE *)(v34 + v190[10]) = *(_BYTE *)(v35 + v190[10]);
      v60 = v190[11];
      v61 = (void *)(v34 + v60);
      v62 = (const void *)(v35 + v60);
      v63 = type metadata accessor for LocationOfInterest(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v62, 1, v63))
      {
        v64 = sub_1000BA294(&qword_100BC3118);
        memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v63 - 8) + 32))(v61, v62, v63);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v61, 0, 1, v63);
      }
      *(_BYTE *)(v34 + v190[12]) = *(_BYTE *)(v35 + v190[12]);
      *(_BYTE *)(v34 + v190[13]) = *(_BYTE *)(v35 + v190[13]);
      v65 = v190[14];
      v66 = (_BYTE *)(v34 + v65);
      v67 = (_BYTE *)(v35 + v65);
      v68 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v67, 1, (uint64_t)v68))
      {
        v69 = sub_1000BA294(&qword_100BCD688);
        memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
      }
      else
      {
        *v66 = *v67;
        v70 = v68[5];
        v71 = &v66[v70];
        __dstb = &v67[v70];
        v72 = type metadata accessor for Location(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v72 - 8) + 32))(v71, __dstb, v72);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v63 - 8) + 32))(&v66[v68[6]], &v67[v68[6]], v63);
        v66[v68[7]] = v67[v68[7]];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v66, 0, 1, (uint64_t)v68);
      }
      a3 = v187;
      v73 = v34;
      v74 = (uint64_t)v190;
      goto LABEL_30;
    }
    goto LABEL_13;
  }
  if (v37)
  {
    sub_1000215BC(v34, type metadata accessor for LocationFooterViewModel);
LABEL_13:
    v43 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BCD690) - 8) + 64);
    v44 = (void *)v34;
    v45 = (const void *)v35;
LABEL_14:
    memcpy(v44, v45, v43);
    goto LABEL_31;
  }
  v188 = a3;
  *(_BYTE *)v34 = *(_BYTE *)v35;
  *(_BYTE *)(v34 + 1) = *(_BYTE *)(v35 + 1);
  *(_BYTE *)(v34 + 2) = *(_BYTE *)(v35 + 2);
  v46 = *(_QWORD *)(v35 + 16);
  *(_QWORD *)(v34 + 8) = *(_QWORD *)(v35 + 8);
  *(_QWORD *)(v34 + 16) = v46;
  swift_bridgeObjectRelease();
  v189 = (int *)v36;
  v47 = *(int *)(v36 + 32);
  v48 = (void *)(v34 + v47);
  v49 = (const void *)(v35 + v47);
  v50 = type metadata accessor for URL(0);
  v51 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v48, 1, v50);
  v52 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v49, 1, v50);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v48, v49, v50);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v48, 0, 1, v50);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v142 = *(_QWORD *)(v50 - 8);
  if (v52)
  {
    (*(void (**)(void *, uint64_t))(v142 + 8))(v48, v50);
LABEL_41:
    v143 = sub_1000BA294(&qword_100BD4280);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, const void *, uint64_t))(v142 + 40))(v48, v49, v50);
LABEL_42:
  v144 = *(int *)(v36 + 36);
  v145 = v34 + v144;
  v146 = v35 + v144;
  *(_BYTE *)v145 = *(_BYTE *)(v35 + v144);
  *(_QWORD *)(v145 + 8) = *(_QWORD *)(v35 + v144 + 8);
  swift_bridgeObjectRelease();
  __dsta = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
  v147 = __dsta[6];
  v148 = (const void *)(v146 + v147);
  v183 = v145 + v147;
  v149 = _s7Weather24LocationCompositionStateOwet_0(v145 + v147, 1, v50);
  v150 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v148, 1, v50);
  if (v149)
  {
    if (v150)
    {
      v151 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD4280) - 8) + 64);
      v152 = (void *)v183;
LABEL_47:
      memcpy(v152, v148, v151);
      goto LABEL_51;
    }
    (*(void (**)(uint64_t, const void *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v183, v148, v50);
    _s7Weather24LocationCompositionStateOwst_0(v183, 0, 1, v50);
  }
  else
  {
    v153 = *(_QWORD *)(v50 - 8);
    if (v150)
    {
      (*(void (**)(uint64_t, uint64_t))(v153 + 8))(v183, v50);
      v151 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD4280) - 8) + 64);
      v152 = (void *)v183;
      goto LABEL_47;
    }
    (*(void (**)(uint64_t, const void *, uint64_t))(v153 + 40))(v183, v148, v50);
  }
LABEL_51:
  v154 = __dsta[7];
  v155 = (_QWORD *)(v145 + v154);
  v156 = (uint64_t *)(v146 + v154);
  v158 = *v156;
  v157 = v156[1];
  *v155 = v158;
  v155[1] = v157;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v145 + __dsta[8]) = *(_QWORD *)(v146 + __dsta[8]);
  swift_release();
  *(_BYTE *)(v34 + v189[10]) = *(_BYTE *)(v35 + v189[10]);
  v159 = v189[11];
  v160 = (void *)(v34 + v159);
  v161 = (const void *)(v35 + v159);
  v162 = type metadata accessor for LocationOfInterest(0);
  v163 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v160, 1, v162);
  v164 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v161, 1, v162);
  if (v163)
  {
    if (!v164)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v162 - 8) + 32))(v160, v161, v162);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v160, 0, 1, v162);
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  v165 = *(_QWORD *)(v162 - 8);
  if (v164)
  {
    (*(void (**)(void *, uint64_t))(v165 + 8))(v160, v162);
LABEL_56:
    v166 = sub_1000BA294(&qword_100BC3118);
    memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v166 - 8) + 64));
    goto LABEL_57;
  }
  (*(void (**)(void *, const void *, uint64_t))(v165 + 40))(v160, v161, v162);
LABEL_57:
  *(_BYTE *)(v34 + v189[12]) = *(_BYTE *)(v35 + v189[12]);
  *(_BYTE *)(v34 + v189[13]) = *(_BYTE *)(v35 + v189[13]);
  v167 = v189[14];
  v168 = (_BYTE *)(v34 + v167);
  v169 = (_BYTE *)(v35 + v167);
  v170 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
  v171 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v168, 1, (uint64_t)v170);
  v172 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v169, 1, (uint64_t)v170);
  a3 = v188;
  if (v171)
  {
    if (!v172)
    {
      *v168 = *v169;
      v173 = v170[5];
      v174 = &v168[v173];
      v175 = &v169[v173];
      v176 = type metadata accessor for Location(0);
      v177 = v175;
      a3 = v188;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v176 - 8) + 32))(v174, v177, v176);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v162 - 8) + 32))(&v168[v170[6]], &v169[v170[6]], v162);
      v168[v170[7]] = v169[v170[7]];
      v73 = (uint64_t)v168;
      v74 = (uint64_t)v170;
LABEL_30:
      _s7Weather24LocationCompositionStateOwst_0(v73, 0, 1, v74);
      goto LABEL_31;
    }
    goto LABEL_62;
  }
  if (v172)
  {
    sub_1000215BC((uint64_t)v168, type metadata accessor for HomeAndWorkRefinementRowViewModel);
LABEL_62:
    v43 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BCD688) - 8) + 64);
    v44 = v168;
    v45 = v169;
    goto LABEL_14;
  }
  *v168 = *v169;
  v178 = v170[5];
  v179 = &v168[v178];
  v180 = &v169[v178];
  v181 = type metadata accessor for Location(0);
  v182 = v180;
  a3 = v188;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v181 - 8) + 40))(v179, v182, v181);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v162 - 8) + 40))(&v168[v170[6]], &v169[v170[6]], v162);
  v168[v170[7]] = v169[v170[7]];
LABEL_31:
  *(_BYTE *)(a1 + v9[10]) = *(_BYTE *)(a2 + v9[10]);
  *(_BYTE *)(a1 + v9[11]) = *(_BYTE *)(a2 + v9[11]);
  *(_BYTE *)(a1 + v9[12]) = *(_BYTE *)(a2 + v9[12]);
  *(_BYTE *)(a1 + v9[13]) = *(_BYTE *)(a2 + v9[13]);
  *(_BYTE *)(a1 + v9[14]) = *(_BYTE *)(a2 + v9[14]);
  v75 = v9[15];
  v76 = *(void **)(a1 + v75);
  *(_QWORD *)(a1 + v75) = *(_QWORD *)(a2 + v75);

  *(_BYTE *)(a1 + v9[16]) = *(_BYTE *)(a2 + v9[16]);
  *(_BYTE *)(a1 + v9[17]) = *(_BYTE *)(a2 + v9[17]);
  *(_BYTE *)(a1 + v9[18]) = *(_BYTE *)(a2 + v9[18]);
  v77 = v9[19];
  v78 = a1 + v77;
  v79 = a2 + v77;
  v80 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 40))(v78, v79, v80);
  v81 = v9[20];
  v82 = (void *)(a1 + v81);
  v83 = (const void *)(a2 + v81);
  v84 = type metadata accessor for ForegroundEffect(0);
  v85 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v82, 1, v84);
  v86 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v83, 1, v84);
  if (!v85)
  {
    v87 = *(_QWORD *)(v84 - 8);
    if (!v86)
    {
      (*(void (**)(void *, const void *, uint64_t))(v87 + 40))(v82, v83, v84);
      goto LABEL_37;
    }
    (*(void (**)(void *, uint64_t))(v87 + 8))(v82, v84);
    goto LABEL_36;
  }
  if (v86)
  {
LABEL_36:
    v88 = sub_1000BA294(&qword_100BC5B30);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v84 - 8) + 32))(v82, v83, v84);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v82, 0, 1, v84);
LABEL_37:
  *(_BYTE *)(a1 + v9[21]) = *(_BYTE *)(a2 + v9[21]);
  *(_QWORD *)(a1 + v9[22]) = *(_QWORD *)(a2 + v9[22]);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + v9[23]) = *(_BYTE *)(a2 + v9[23]);
  v89 = v9[24];
  v90 = a1 + v89;
  v91 = a2 + v89;
  v92 = type metadata accessor for LocationEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 40))(v90, v91, v92);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_release();
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_release();
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_release();
  v93 = a3[8];
  v94 = (uint64_t *)(a1 + v93);
  v95 = (uint64_t *)(a2 + v93);
  v96 = v95[1];
  v97 = *v94;
  *v94 = *v95;
  swift_unknownObjectRelease(v97);
  v94[1] = v96;
  v98 = a3[9];
  v99 = a1 + v98;
  v100 = a2 + v98;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + v98));
  v101 = *(_OWORD *)(v100 + 16);
  *(_OWORD *)v99 = *(_OWORD *)v100;
  *(_OWORD *)(v99 + 16) = v101;
  *(_QWORD *)(v99 + 32) = *(_QWORD *)(v100 + 32);
  v102 = a3[10];
  v103 = a1 + v102;
  v104 = a2 + v102;
  *(_OWORD *)v103 = *(_OWORD *)(a2 + v102);
  *(_BYTE *)(v103 + 16) = *(_BYTE *)(a2 + v102 + 16);
  *(_BYTE *)(v103 + 17) = *(_BYTE *)(a2 + v102 + 17);
  *(_BYTE *)(v103 + 18) = *(_BYTE *)(a2 + v102 + 18);
  v105 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
  v106 = v103 + v105;
  v107 = v104 + v105;
  v108 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v108 - 8) + 40))(v106, v107, v108);
  v109 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  v110 = a1 + v109;
  v111 = a2 + v109;
  *(_QWORD *)(a1 + v109) = *(_QWORD *)(a2 + v109);
  swift_release();
  *(_QWORD *)(v110 + 8) = *(_QWORD *)(v111 + 8);
  v112 = a3[13];
  v113 = a1 + v112;
  v114 = (uint64_t *)(a2 + v112);
  v115 = *v114;
  LOBYTE(v114) = *((_BYTE *)v114 + 8);
  v116 = *(_QWORD *)v113;
  v117 = *(_BYTE *)(v113 + 8);
  *(_QWORD *)v113 = v115;
  *(_BYTE *)(v113 + 8) = (_BYTE)v114;
  sub_1000B15F8(v116, v117);
  v118 = a3[14];
  v119 = a1 + v118;
  v120 = (uint64_t *)(a2 + v118);
  v121 = *v120;
  LOBYTE(v120) = *((_BYTE *)v120 + 8);
  v122 = *(_QWORD *)v119;
  v123 = *(_BYTE *)(v119 + 8);
  *(_QWORD *)v119 = v121;
  *(_BYTE *)(v119 + 8) = (_BYTE)v120;
  sub_1000B15F8(v122, v123);
  v124 = a3[15];
  v125 = a1 + v124;
  v126 = a2 + v124;
  v127 = *(_QWORD *)(v126 + 64);
  v128 = *(_BYTE *)(v126 + 72);
  v129 = *(_QWORD *)v125;
  v130 = *(_QWORD *)(v125 + 8);
  v131 = *(_QWORD *)(v125 + 16);
  v132 = *(_QWORD *)(v125 + 24);
  v133 = *(_QWORD *)(v125 + 32);
  v134 = *(_QWORD *)(v125 + 40);
  v135 = *(_QWORD *)(v125 + 48);
  v136 = *(_QWORD *)(v125 + 56);
  v137 = *(_QWORD *)(v125 + 64);
  v138 = *(_BYTE *)(v125 + 72);
  v139 = *(_OWORD *)(v126 + 16);
  *(_OWORD *)v125 = *(_OWORD *)v126;
  *(_OWORD *)(v125 + 16) = v139;
  v140 = *(_OWORD *)(v126 + 48);
  *(_OWORD *)(v125 + 32) = *(_OWORD *)(v126 + 32);
  *(_OWORD *)(v125 + 48) = v140;
  *(_QWORD *)(v125 + 64) = v127;
  *(_BYTE *)(v125 + 72) = v128;
  sub_1000CEE98(v129, v130, v131, v132, v133, v134, v135, v136, v137, v138);
  return a1;
}

uint64_t sub_100664E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100664EA8);
}

uint64_t sub_100664EA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = sub_1000DC250();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
    return _s7Weather24LocationCompositionStateOwet_0(v8, a2, v7);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v7 = type metadata accessor for DisplayMetrics(0);
    v8 = a1 + *(int *)(a3 + 40);
    return _s7Weather24LocationCompositionStateOwet_0(v8, a2, v7);
  }
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100664F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100664F4C);
}

uint64_t sub_100664F4C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = sub_1000DC250();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
  {
    v9 = result;
    v10 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
      return result;
    }
    v9 = type metadata accessor for DisplayMetrics(0);
    v10 = a1 + *(int *)(a4 + 40);
  }
  return _s7Weather24LocationCompositionStateOwst_0(v10, a2, a2, v9);
}

uint64_t sub_100664FE0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABC540, 1);
}

void sub_100664FF4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000BF234() - 8) + 80);
  sub_10065F260(v0 + ((v1 + 16) & ~v1));
}

unint64_t sub_10066501C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFA9A8;
  if (!qword_100BFA9A8)
  {
    v1 = sub_100075EB0(&qword_100BFA998);
    sub_100665088();
    sub_100665844();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFA9A8);
  }
  return result;
}

unint64_t sub_100665088()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFA9B0;
  if (!qword_100BFA9B0)
  {
    v1 = sub_100075EB0(&qword_100BFA9B8);
    sub_1006650F4();
    sub_100665490();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFA9B0);
  }
  return result;
}

unint64_t sub_1006650F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFA9C0;
  if (!qword_100BFA9C0)
  {
    v1 = sub_100075EB0(&qword_100BFA9C8);
    sub_100665160();
    sub_1006652EC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFA9C0);
  }
  return result;
}

unint64_t sub_100665160()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFA9D0;
  if (!qword_100BFA9D0)
  {
    v1 = sub_100075EB0(&qword_100BFA9D8);
    sub_1006651CC();
    sub_100665250();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFA9D0);
  }
  return result;
}

unint64_t sub_1006651CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFA9E0;
  if (!qword_100BFA9E0)
  {
    v1 = sub_100075EB0(&qword_100BFA9E8);
    sub_10003D2DC(&qword_100BFA9F0, &qword_100BFA9F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFA9E0);
  }
  return result;
}

unint64_t sub_100665250()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFAA00;
  if (!qword_100BFAA00)
  {
    v1 = sub_100075EB0(&qword_100BFAA08);
    sub_10003D2DC(&qword_100BFAA10, &qword_100BFAA18);
    sub_10003D2DC(&qword_100BFAA20, &qword_100BFAA28);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFAA00);
  }
  return result;
}

unint64_t sub_1006652EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFAA30;
  if (!qword_100BFAA30)
  {
    v1 = sub_100075EB0(&qword_100BFAA38);
    sub_100665358();
    sub_1006653F4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFAA30);
  }
  return result;
}

unint64_t sub_100665358()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFAA40;
  if (!qword_100BFAA40)
  {
    v1 = sub_100075EB0(&qword_100BFAA48);
    sub_10003D2DC(&qword_100BFAA50, &qword_100BFAA58);
    sub_10003D2DC(&qword_100BFAA60, &qword_100BFAA68);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFAA40);
  }
  return result;
}

unint64_t sub_1006653F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFAA70;
  if (!qword_100BFAA70)
  {
    v1 = sub_100075EB0(&qword_100BFAA78);
    sub_10003D2DC(&qword_100BFAA80, &qword_100BFAA88);
    sub_10003D2DC(&qword_100BFAA90, &qword_100BFAA98);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFAA70);
  }
  return result;
}

unint64_t sub_100665490()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFAAA0;
  if (!qword_100BFAAA0)
  {
    v1 = sub_100075EB0(&qword_100BFAAA8);
    sub_1006654FC();
    sub_1006656A0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFAAA0);
  }
  return result;
}

unint64_t sub_1006654FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFAAB0;
  if (!qword_100BFAAB0)
  {
    v1 = sub_100075EB0(&qword_100BFAAB8);
    sub_100665568();
    sub_100665604();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFAAB0);
  }
  return result;
}

unint64_t sub_100665568()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFAAC0;
  if (!qword_100BFAAC0)
  {
    v1 = sub_100075EB0(&qword_100BFAAC8);
    sub_10003D2DC(&qword_100BFAAD0, &qword_100BFAAD8);
    sub_10003D2DC(&qword_100BFAAE0, &qword_100BFAAE8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFAAC0);
  }
  return result;
}

unint64_t sub_100665604()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFAAF0;
  if (!qword_100BFAAF0)
  {
    v1 = sub_100075EB0(&qword_100BFAAF8);
    sub_10003D2DC(&qword_100BFAB00, &qword_100BFAB08);
    sub_10003D2DC(&qword_100BFAB10, &qword_100BFAB18);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFAAF0);
  }
  return result;
}

unint64_t sub_1006656A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFAB20;
  if (!qword_100BFAB20)
  {
    v1 = sub_100075EB0(&qword_100BFAB28);
    sub_10066570C();
    sub_1006657A8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFAB20);
  }
  return result;
}

unint64_t sub_10066570C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFAB30;
  if (!qword_100BFAB30)
  {
    v1 = sub_100075EB0(&qword_100BFAB38);
    sub_10003D2DC(&qword_100BFAB40, &qword_100BFAB48);
    sub_10003D2DC(&qword_100BFAB50, &qword_100BFAB58);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFAB30);
  }
  return result;
}

unint64_t sub_1006657A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFAB60;
  if (!qword_100BFAB60)
  {
    v1 = sub_100075EB0(&qword_100BFAB68);
    sub_10003D2DC(&qword_100BFAB70, &qword_100BFAB78);
    sub_10003D2DC(&qword_100BFAB80, &qword_100BFAB88);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFAB60);
  }
  return result;
}

unint64_t sub_100665844()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFAB90;
  if (!qword_100BFAB90)
  {
    v1 = sub_100075EB0(&qword_100BFAB98);
    sub_1006658B0();
    sub_100665C64();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFAB90);
  }
  return result;
}

unint64_t sub_1006658B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFABA0;
  if (!qword_100BFABA0)
  {
    v1 = sub_100075EB0(&qword_100BFABA8);
    sub_10066591C();
    sub_100665AC0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFABA0);
  }
  return result;
}

unint64_t sub_10066591C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFABB0;
  if (!qword_100BFABB0)
  {
    v1 = sub_100075EB0(&qword_100BFABB8);
    sub_100665988();
    sub_100665A24();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFABB0);
  }
  return result;
}

unint64_t sub_100665988()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFABC0;
  if (!qword_100BFABC0)
  {
    v1 = sub_100075EB0(&qword_100BFABC8);
    sub_10003D2DC(&qword_100BFABD0, &qword_100BFABD8);
    sub_10003D2DC(&qword_100BFABE0, &qword_100BFABE8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFABC0);
  }
  return result;
}

unint64_t sub_100665A24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFABF0;
  if (!qword_100BFABF0)
  {
    v1 = sub_100075EB0(&qword_100BFABF8);
    sub_10003D2DC(&qword_100BFAC00, &qword_100BFAC08);
    sub_10003D2DC(&qword_100BFAC10, &qword_100BFAC18);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFABF0);
  }
  return result;
}

unint64_t sub_100665AC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFAC20;
  if (!qword_100BFAC20)
  {
    v1 = sub_100075EB0(&qword_100BFAC28);
    sub_100665B2C();
    sub_100665BC8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFAC20);
  }
  return result;
}

unint64_t sub_100665B2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFAC30;
  if (!qword_100BFAC30)
  {
    v1 = sub_100075EB0(&qword_100BFAC38);
    sub_10003D2DC(&qword_100BFAC40, &qword_100BFAC48);
    sub_10003D2DC(&qword_100BFAC50, &qword_100BFAC58);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFAC30);
  }
  return result;
}

unint64_t sub_100665BC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFAC60;
  if (!qword_100BFAC60)
  {
    v1 = sub_100075EB0(&qword_100BFAC68);
    sub_10003D2DC(&qword_100BFAC70, &qword_100BFAC78);
    sub_10003D2DC(&qword_100BFAC80, &qword_100BFAC88);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFAC60);
  }
  return result;
}

unint64_t sub_100665C64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFAC90;
  if (!qword_100BFAC90)
  {
    v1 = sub_100075EB0(&qword_100BFAC98);
    sub_10003D2DC(&qword_100BFACA0, &qword_100BFACA8);
    sub_10003D2DC(&qword_100BFACB0, &qword_100BFACB8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFAC90);
  }
  return result;
}

uint64_t sub_100665D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  if ((a6 & 1) != 0)
    return sub_100665DF8(a1, a2, a3, a4, a5, HIBYTE(a5) & 1);
  else
    return sub_100665D14(a1, a2, a3, a4, a5, HIBYTE(a5) & 1);
}

uint64_t sub_100665D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  if ((a6 & 1) != 0)
    return sub_100665DB4(a1, a2, a3, a4, a5, BYTE2(a5) & 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100667344, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100667344, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100667344, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100665DD4);
  else
    return sub_100665DB4(a1, a2, a3, a4, a5, BYTE2(a5) & 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100665D88, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100667344, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100667344, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100667344);
}

uint64_t sub_100665D88(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
  {
    swift_release(result);
    return swift_release(a4);
  }
  return result;
}

uint64_t sub_100665DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, char a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD), uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD), uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD), uint64_t (*a10)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))
{
  if ((a6 & 1) != 0)
  {
    a7 = a9;
    a8 = a10;
  }
  return sub_100665FD8(a1, a2, a3, a4, a5, HIBYTE(a5) & 1, a7, a8);
}

uint64_t sub_100665DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_release(a1);
  return swift_release(a4);
}

uint64_t sub_100665DF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  if ((a6 & 1) != 0)
    return sub_100665DD4(a1, a2, a3, a4);
  else
    return sub_100665DB4(a1, a2, a3, a4, a5, BYTE2(a5) & 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100667344, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100667344, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100667344, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100667344);
}

void sub_100665E4C(uint64_t a1, _BYTE *a2)
{
  sub_1000BF234();
  if (*a2 == 1)
  {
    sub_10007A090();
    sub_10065F298();
  }
  sub_10004A298();
}

unint64_t sub_100665E7C()
{
  unint64_t result;

  result = qword_100BFACD8;
  if (!qword_100BFACD8)
  {
    result = swift_getWitnessTable(&unk_1009CEBF0, &unk_100B938A8);
    atomic_store(result, (unint64_t *)&qword_100BFACD8);
  }
  return result;
}

void sub_100665EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  if ((a6 & 1) != 0)
    sub_100665FE8(a1, a2, a3, a4);
  else
    sub_100665DB4(a1, a2, a3, a4, a5, BYTE2(a5) & 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100667340, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100667340, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100667340, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100667340);
}

uint64_t sub_100665F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  if ((a6 & 1) != 0)
    return sub_100665DB4(a1, a2, a3, a4, a5, BYTE2(a5) & 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100667340, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100667340, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100667340, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100665FE8);
  else
    return sub_100665DB4(a1, a2, a3, a4, a5, BYTE2(a5) & 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100665FAC, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100667340, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100667340, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100667340);
}

double sub_100665FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  double result;

  if ((a5 & 1) != 0)
  {
    swift_retain(a1);
    *(_QWORD *)&result = swift_retain(a4).n128_u64[0];
  }
  return result;
}

uint64_t sub_100665FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD), uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))
{
  if ((a6 & 1) != 0)
    return a8(a1, a2, a3, a4, a5 & 1);
  else
    return a7(a1, a2, a3, a4, a5 & 1);
}

double sub_100665FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;

  swift_retain(a1);
  *(_QWORD *)&result = swift_retain(a4).n128_u64[0];
  return result;
}

void sub_100666044(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1000BF234();
  sub_10007A090();
  sub_10065F3F0(a1, a2, a3);
}

uint64_t sub_1006660B0()
{
  int *v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int EnumCaseMultiPayload;
  int v45;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  double v50;
  void (*v51)(uint64_t, uint64_t, double);
  uint64_t v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int *v91;
  uint64_t v92;
  uint64_t v93;

  v1 = v0;
  v2 = type metadata accessor for LocationComponentContainerViewModel(0);
  v3 = *(_QWORD *)(v2 - 8);
  v92 = *(unsigned __int8 *)(v3 + 80);
  v4 = (v92 + 16) & ~v92;
  v5 = *(_QWORD *)(v3 + 64);
  v6 = (int *)sub_1000BF234();
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = (char *)v1 + v4;
  type metadata accessor for LocationComponentHeaderViewModel(0);
  switch(swift_getEnumCaseMultiPayload((char *)v1 + v4))
  {
    case 0u:
    case 4u:
      sub_1000C0DF8();
      sub_1000952D8();
      goto LABEL_6;
    case 1u:
      sub_1000C0DF8();
      sub_1000952D8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      sub_1000C0DF8();
      sub_1000952D8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 3u:
      v11 = type metadata accessor for WeatherDescription(0);
      sub_1000B2568(v11);
      type metadata accessor for LocationComponentHeaderViewModel.Description(0);
      sub_1000B3160();
      swift_bridgeObjectRelease();
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v12 = v4 + v5 + v8;
  v13 = (uint64_t)&v10[*(int *)(v2 + 20)];
  v14 = type metadata accessor for LocationComponentViewModel(0);
  v93 = v8;
  switch(sub_100094FAC(v14))
  {
    case 0u:
      sub_1000D1E34();
      sub_1000E7754();
      sub_1000D0D18();
      sub_1000CE59C();
      goto LABEL_41;
    case 1u:
      swift_bridgeObjectRelease();
      v15 = (int *)type metadata accessor for DailyForecastComponentViewModel(0);
      v16 = v9;
      v17 = v12;
      v18 = v13 + v15[5];
      v86 = v16;
      v19 = v1;
      v20 = sub_1000BA294(&qword_100BC4E68);
      v21 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8);
      v22 = v18;
      v12 = v17;
      v21(v22, v20);
      v21(v13 + v15[6], v20);
      v23 = v20;
      v1 = v19;
      v8 = v93;
      v9 = v86;
      v21(v13 + v15[7], v23);
      v24 = v15[8];
      goto LABEL_33;
    case 2u:
      v87 = v12;
      sub_1000B3B94();
      sub_1000CE558();
      v25 = type metadata accessor for FeelsLikeComponentViewModel(0);
      v26 = sub_1000C01DC();
      v27 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(v26);
      if (!sub_1000C0DE4(v27))
      {
        swift_bridgeObjectRelease();
        v28 = v12 + v1[5];
        v29 = type metadata accessor for TemperatureScaleConfiguration(0);
        sub_10009BF1C(v29);
        v30 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
        sub_1000BA548(v28 + *(int *)(v30 + 32));
      }
      sub_1000999DC(*(int *)(v25 + 28));
      v12 = v87;
      break;
    case 3u:
    case 4u:
      goto LABEL_41;
    case 5u:
      v88 = v12;
      v31 = type metadata accessor for WeatherMapOverlayKind(0);
      sub_1000989A0(v31);
      v32 = type metadata accessor for MapComponentViewModel(0);
      v33 = v13 + *(int *)(v32 + 20);
      v34 = sub_1000992C4();
      sub_10009BF1C(v34);
      v85 = v32;
      v35 = sub_1000C01DC();
      v36 = type metadata accessor for WeatherData(v35);
      if (!sub_1000C0DE4(v36))
      {
        swift_bridgeObjectRelease();
        v37 = v33 + v1[5];
        v38 = type metadata accessor for Locale(0);
        if (!sub_10009D53C(v37))
          sub_1000BE774(v37, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 8));
        v39 = type metadata accessor for WeatherDataModel(0);
        sub_1000BA9C0(v39);
        v40 = v33 + v1[7];
        v41 = sub_1000BA294(&qword_100BC3348);
        if (!_s7Weather24LocationCompositionStateOwet_0(v40, 1, v41))
        {
          v42 = sub_100098778();
          sub_1000BA9C0(v42);
        }
        v43 = v33 + v1[8];
        type metadata accessor for WeatherData.WeatherStatisticsState(0);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v43);
        if (EnumCaseMultiPayload == 1)
        {
          v80 = type metadata accessor for WeatherStatisticsModel(0);
          sub_1000BA9C0(v80);
        }
        else if (!EnumCaseMultiPayload)
        {
          swift_bridgeObjectRelease();
        }
        v81 = v33 + v1[9];
        v82 = type metadata accessor for WeatherDataOverrides(0);
        if (!sub_1000C0DE4(v82))
        {
          v83 = sub_100098778();
          if (!sub_10009D53C(v81))
            sub_1000BE774(v81, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 8));
          v84 = v81 + v1[5];
          if (!sub_10009D53C(v84))
            sub_1000BE774(v84, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 8));
        }
      }
      sub_1000999DC(*(int *)(v85 + 28));
      v12 = v88;
      break;
    case 6u:
      sub_1000B3B94();
      v45 = *(unsigned __int8 *)(v13 + 32);
      if (v45 != 255)
        sub_100121E04(*(_QWORD *)(v13 + 16), *(_QWORD *)(v13 + 24), v45);
      sub_1000D1E34();
      v13 += *(int *)(type metadata accessor for MoonComponentViewModel(0) + 28);
      HourPrecipitationChartViewModel = sub_100098778();
      goto LABEL_36;
    case 7u:
      v47 = type metadata accessor for NewsArticleComponentViewModel(0);
      if (sub_100094FAC(v47) == 1)
      {
        v89 = v12;
        sub_1000B3B94();
        v48 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
        v49 = sub_1000F426C();
        if (!sub_10009D53C((uint64_t)v1))
          sub_1000BE774((uint64_t)v1, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 8));
        v50 = sub_1000999DC(v48[6]);
        v51 = *(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)(v49 - 8) + 8);
        v51(v13 + v48[7], v49, v50);
        v13 += v48[8];
        v12 = v89;
        if (!sub_10009D53C(v13))
          ((void (*)(uint64_t, uint64_t))v51)(v13, v49);
      }
      break;
    case 8u:
      sub_1000B3B94();
      v13 += *(int *)(type metadata accessor for NextHourPrecipitationComponentViewModel(0) + 20);
      HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
      goto LABEL_36;
    case 9u:
      HourPrecipitationChartViewModel = sub_1000992C4();
      goto LABEL_36;
    case 0xAu:
      sub_1000B3B94();
      sub_1000CE558();
      sub_1000D1E34();
      sub_1000E7754();
      sub_1000D0D18();
      goto LABEL_41;
    case 0xBu:
      v52 = type metadata accessor for PressureTrend(0);
      sub_1000989A0(v52);
      v53 = (int *)type metadata accessor for PressureComponentViewModel(0);
      sub_1000999DC(v53[5]);
      sub_1000999DC(v53[6]);
      v24 = v53[7];
LABEL_33:
      sub_1000999DC(v24);
      goto LABEL_41;
    case 0xDu:
      sub_1000B3B94();
      sub_1000CE558();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v13 += *(int *)(type metadata accessor for SevereAlertComponentViewModel(0) + 36);
      HourPrecipitationChartViewModel = type metadata accessor for WeatherAlert.Prominence(0);
      goto LABEL_36;
    case 0xEu:
      HourPrecipitationChartViewModel = type metadata accessor for SunriseSunsetViewModel(0);
LABEL_36:
      sub_1000989A0(HourPrecipitationChartViewModel);
      break;
    case 0xFu:
      sub_1000B3B94();
      sub_1000CE558();
      sub_1000D1E34();
      sub_1000E7754();
      sub_1000D0D18();
      sub_1000CE59C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_41;
    case 0x10u:
      sub_1000CE558();
      type metadata accessor for UVIndexComponentViewModel(0);
      v54 = sub_1000C01DC();
      v55 = type metadata accessor for WeatherDescription(v54);
      sub_1000BEB38(v55);
      goto LABEL_41;
    case 0x11u:
      sub_1000B3B94();
      sub_1000CE558();
      goto LABEL_41;
    case 0x12u:
      sub_1000B3B94();
      sub_1000CE558();
      sub_1000D1E34();
      sub_1000E7754();
      sub_1000D0D18();
      sub_1000CE59C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for WindComponentViewModel(0);
      v56 = sub_1000C01DC();
      v57 = type metadata accessor for WindComponentCompassViewModel(v56);
      sub_1000BEB38(v57);
LABEL_41:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v58 = v12 & ~v8;
  v59 = (uint64_t)&v10[*(int *)(v2 + 28)];
  v60 = (int *)type metadata accessor for LocationComponentAction(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v59, 1, (uint64_t)v60))
  {
    switch(swift_getEnumCaseMultiPayload(v59))
    {
      case 0u:
        v61 = type metadata accessor for URL(0);
        goto LABEL_48;
      case 1u:
        v61 = type metadata accessor for WeatherMapOverlayKind(0);
        goto LABEL_48;
      case 2u:
        v61 = type metadata accessor for DetailCondition(0);
        goto LABEL_48;
      case 4u:
        v59 += *(int *)(sub_1000BA294(&qword_100BC5FF0) + 48);
        v61 = sub_1000992C4();
LABEL_48:
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 8))(v59, v61);
        break;
      default:
        break;
    }
  }
  v62 = (char *)v1 + v58;
  v63 = type metadata accessor for Location.Identifier(0);
  sub_1000BDB14(v63);
  v64 = sub_1000DC250();
  if (!sub_1000BCFF8(v64))
    sub_10011E7F8();
  sub_1000B3160();
  sub_1000FC684();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100094FCC(v60[7]);
  sub_1000ED018();
  v65 = sub_1000ED300();
  if (!sub_10009D53C(v13))
  {
    v90 = v9;
    v91 = v1;
    swift_bridgeObjectRelease();
    v66 = sub_1000F426C();
    if (!sub_1000E7864(v66))
      sub_1000890F4();
    v67 = v13 + *(int *)(v65 + 36);
    sub_1000B3160();
    v68 = type metadata accessor for LearnMoreAttributorViewModel(0);
    v69 = v67 + *(int *)(v68 + 24);
    if (!sub_1000952CC(v69))
      sub_100098B40(v69, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8));
    sub_1000BA548(v67 + *(int *)(v68 + 28));
    sub_100110750();
    v70 = sub_1000BE7C8();
    v9 = v90;
    if (!sub_1000E7864(v70))
      sub_1000890F4();
    v71 = sub_10011DD00();
    v1 = v91;
    if (!sub_10009D53C(v13))
    {
      sub_1000992C4();
      v72 = sub_1000FD95C();
      v1 = v91;
      v73(v72);
      sub_100098B40(v13 + *(int *)(v71 + 24), *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8));
    }
  }
  sub_1000BECF0();
  v74 = (uint64_t)&v62[v60[19]];
  v75 = sub_100098778();
  sub_1000989A0(v75);
  v76 = sub_1000ED46C();
  if (!sub_10009D53C(v74))
    sub_1000BE774(v74, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 8));
  sub_100094FCC(v60[22]);
  v77 = sub_1000FC508();
  sub_1000B2568(v77);
  sub_1000DC924(v6[5]);
  sub_1000DC924(v6[6]);
  sub_1000DC924(v6[7]);
  sub_10011AC04();
  sub_100089170();
  v78 = sub_1000CE60C();
  sub_1000B2568(v78);
  sub_1000DC924(v6[12]);
  sub_1000C0FDC();
  return swift_deallocObject(v1, ((((v9 + v58 + 7) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8) + 8, v92 | v93 | 7);
}

void sub_100666A20(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(type metadata accessor for LocationComponentContainerViewModel(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(sub_1000BF234() - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1006604DC(v1 + v4, v1 + v7, *(_QWORD *)(v1 + v8), *(_QWORD *)(v1 + v8 + 8), *(_QWORD *)(v1 + v8 + 16), *(unsigned __int8 *)(v1 + ((v8 + 39) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned __int8 *)(v1 + ((v8 + 55) & 0xFFFFFFFFFFFFFFF8) + 8), a1, *(double *)(v1 + ((v8 + 39) & 0xFFFFFFFFFFFFFFF8)), *(double *)(v1 + ((v8 + 55) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v8 + 71) & 0xFFFFFFFFFFFFF8)));
}

unint64_t sub_100666AE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFAD20;
  if (!qword_100BFAD20)
  {
    v1 = sub_100075EB0(&qword_100BFACF0);
    sub_100666B68();
    sub_10003D2DC(&qword_100BFADE8, &qword_100BFADF0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFAD20);
  }
  return result;
}

unint64_t sub_100666B68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFAD28;
  if (!qword_100BFAD28)
  {
    v1 = sub_100075EB0(&qword_100BFACE8);
    sub_100666BD4();
    sub_100667028();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFAD28);
  }
  return result;
}

unint64_t sub_100666BD4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFAD30;
  if (!qword_100BFAD30)
  {
    v1 = sub_100075EB0(&qword_100BFACE0);
    sub_100666C40();
    sub_100666D28();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFAD30);
  }
  return result;
}

unint64_t sub_100666C40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFAD38;
  if (!qword_100BFAD38)
  {
    v1 = sub_100075EB0(&qword_100BFAD40);
    sub_100666CC4();
    sub_10003D2DC(&qword_100BFADD0, &qword_100BFADD8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFAD38);
  }
  return result;
}

unint64_t sub_100666CC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFAD48;
  if (!qword_100BFAD48)
  {
    v1 = sub_100075EB0(&qword_100BFAD50);
    sub_100666D28();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFAD48);
  }
  return result;
}

unint64_t sub_100666D28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFAD58;
  if (!qword_100BFAD58)
  {
    v1 = sub_100075EB0(&qword_100BFAD60);
    sub_100666DAC();
    sub_10003D2DC(&qword_100BE38F8, &qword_100BE3900);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFAD58);
  }
  return result;
}

unint64_t sub_100666DAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFAD68;
  if (!qword_100BFAD68)
  {
    v1 = sub_100075EB0(&qword_100BFAD70);
    sub_100666E30();
    sub_10003D2DC(&qword_100BFADC0, &qword_100BFADC8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFAD68);
  }
  return result;
}

unint64_t sub_100666E30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFAD78;
  if (!qword_100BFAD78)
  {
    v1 = sub_100075EB0(&qword_100BFAD80);
    sub_100666EB4();
    sub_10003D2DC((unint64_t *)&unk_100C0A590, &qword_100BD0658);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFAD78);
  }
  return result;
}

unint64_t sub_100666EB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFAD88;
  if (!qword_100BFAD88)
  {
    v1 = sub_100075EB0(&qword_100BFAD90);
    sub_100666F38();
    sub_10003D2DC((unint64_t *)&unk_100C0A590, &qword_100BD0658);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFAD88);
  }
  return result;
}

unint64_t sub_100666F38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFAD98;
  if (!qword_100BFAD98)
  {
    v1 = sub_100075EB0(&qword_100BFADA0);
    sub_100666FA4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFAD98);
  }
  return result;
}

unint64_t sub_100666FA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFADA8;
  if (!qword_100BFADA8)
  {
    v1 = sub_100075EB0(&qword_100BFADB0);
    sub_10000F1C8(&qword_100BFADB8, type metadata accessor for LocationComponentContainerView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFADA8);
  }
  return result;
}

unint64_t sub_100667028()
{
  unint64_t result;

  result = qword_100BFADE0;
  if (!qword_100BFADE0)
  {
    result = swift_getWitnessTable(&unk_1009BB488, &type metadata for LazyUntilLocationViewLoadedIfBelowTheFoldViewModifier);
    atomic_store(result, (unint64_t *)&qword_100BFADE0);
  }
  return result;
}

uint64_t initializeWithCopy for LazyUntilLocationViewLoadedIfBelowTheFoldViewModifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v5 = a2[3];
  *(_QWORD *)(a1 + 24) = v5;
  swift_retain(v3);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for LazyUntilLocationViewLoadedIfBelowTheFoldViewModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v5;
  swift_retain(v4);
  swift_release(v6);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  v7 = a1[3];
  v8 = a2[3];
  a1[3] = v8;
  swift_retain(v8);
  swift_release(v7);
  return a1;
}

uint64_t *assignWithTake for LazyUntilLocationViewLoadedIfBelowTheFoldViewModifier(uint64_t *a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_release(v5);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  v6 = a1[3];
  a1[3] = a2[3];
  swift_release(v6);
  return a1;
}

ValueMetadata *type metadata accessor for LazyUntilLocationViewLoadedIfBelowTheFoldViewModifier()
{
  return &type metadata for LazyUntilLocationViewLoadedIfBelowTheFoldViewModifier;
}

uint64_t sub_100667198()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  void *v6;

  v0 = sub_100075EB0(&qword_100BFA988);
  v3 = sub_100075EB0(&qword_100BFA998);
  v4 = (void *)sub_100075EB0(&qword_100BFA9A0);
  v5 = sub_10066501C();
  v6 = (void *)sub_100121058();
  v1 = sub_10009885C((uint64_t)&v3, (uint64_t)&opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>);
  v3 = v0;
  v4 = &type metadata for Bool;
  v5 = v1;
  v6 = &protocol witness table for Bool;
  return sub_10009885C((uint64_t)&v3, (uint64_t)&opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>);
}

uint64_t sub_10066723C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABC568, 1);
}

uint64_t sub_10066724C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100667278(char a1)
{
  uint64_t v1;

  return sub_100661618(a1, *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(_BYTE *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

unint64_t sub_100667298()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100BFAE38;
  if (!qword_100BFAE38)
  {
    v1 = sub_100075EB0(&qword_100BFAE40);
    sub_10003D2DC(&qword_100BFAE30, &qword_100BFAE28);
    v2[0] = &type metadata for Color;
    v2[1] = &protocol witness table for Color;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.onScrollVisibilityChange(threshold:_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFAE38);
  }
  return result;
}

unint64_t sub_100667348()
{
  return sub_1006656A0();
}

unint64_t sub_100667350()
{
  return sub_100665604();
}

unint64_t sub_100667358()
{
  return sub_100665088();
}

_QWORD *sub_100667360(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double v16;
  id v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  Swift::String v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  __int128 v36;
  __int128 v37;
  _QWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  _QWORD v48[2];
  _QWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  _OWORD v52[2];
  char v53;
  _QWORD *v54;

  v3 = type metadata accessor for Location.Identifier(0);
  v44 = *(_QWORD *)(v3 - 8);
  v45 = v3;
  __chkstk_darwin(v3);
  v43 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    v39[1] = v1;
    v54 = _swiftEmptyArrayStorage;
    sub_10060628C(0, v5, 0);
    v42 = sub_1000BA294(&qword_100BFAEF8);
    v7 = *(_QWORD *)(v42 - 8);
    v8 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v9 = sub_1000A0794(0, (unint64_t *)&qword_100BCAE68, CLPlacemark_ptr);
    v40 = *(_QWORD *)(v7 + 72);
    v41 = v9;
    do
    {
      v10 = (uint64_t *)(v8 + *(int *)(v42 + 48));
      v12 = v10[1];
      v47 = *v10;
      v11 = v47;
      swift_bridgeObjectRetain();
      v14 = Location.coordinate.getter(v13);
      Location.coordinate.getter(v15);
      v17 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", v14, v16);
      swift_bridgeObjectRetain();
      v46 = sub_1001FCA48(v17, v11, v12, 0);
      v18 = v43;
      v19 = Location.identifier.getter(v46);
      v20 = Location.Identifier.id.getter(v19);
      v22 = v21;
      (*(void (**)(char *, uint64_t))(v44 + 8))(v18, v45);
      v50 = v20;
      v51 = v22;
      swift_bridgeObjectRetain();
      v23._countAndFlagsBits = 58;
      v23._object = (void *)0xE100000000000000;
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v24 = v50;
      v25 = v51;
      Location.name.getter(v26);
      v50 = v27;
      v51 = v28;
      v49[0] = 58;
      v49[1] = 0xE100000000000000;
      v48[0] = 0;
      v48[1] = 0xE000000000000000;
      sub_100114EF8();
      v29 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v49, v48, 0, 0, 0, 1, &type metadata for String, &type metadata for String);
      v31 = v30;
      swift_bridgeObjectRelease();
      v50 = v24;
      v51 = v25;
      swift_bridgeObjectRetain();
      v32._countAndFlagsBits = v29;
      v32._object = v31;
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      LocationSearchEntity.init(id:name:placemark:isLocal:)(v50, v51, v47, v12, v46, 0, (uint64_t)v52);
      v6 = v54;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10060628C(0, v6[2] + 1, 1);
        v6 = v54;
      }
      v34 = v6[2];
      v33 = v6[3];
      if (v34 >= v33 >> 1)
      {
        sub_10060628C((char *)(v33 > 1), v34 + 1, 1);
        v6 = v54;
      }
      v6[2] = v34 + 1;
      v35 = &v6[5 * v34];
      v36 = v52[0];
      v37 = v52[1];
      *((_BYTE *)v35 + 64) = v53;
      *((_OWORD *)v35 + 2) = v36;
      *((_OWORD *)v35 + 3) = v37;
      v8 += v40;
      --v5;
    }
    while (v5);
  }
  return v6;
}

double sub_10066768C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  double result;
  uint64_t v19;

  v10 = sub_1000BA294(&qword_100BFAEE8);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v10);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))((char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10, v13);
  v14 = *(unsigned __int8 *)(v11 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = swift_allocObject(&unk_100B86F48, v15 + v12, v14 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v16 + v15, (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  v17 = sub_1000DB418(a5, a5[3]);
  sub_1006681F8(a3, a4, *v17, (uint64_t)sub_1006681A8, v16, a2);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_100667798(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;

  if (a1)
  {
    v3 = a1;
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = _swiftEmptyArrayStorage;
  }
  v1 = sub_1000BA294(&qword_100BFAEE8);
  return CheckedContinuation.resume(returning:)(&v3, v1);
}

void sub_1006677F0(uint64_t a1, void (*a2)(_QWORD, _QWORD), uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  char *v12;
  id v13;
  id v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  void *fora;
  char v30[24];
  __int128 v31[2];
  char v32[24];

  v12 = *(char **)(a1 + 16);
  if (v12
    || (v13 = objc_msgSend(objc_allocWithZone((Class)MKLocalSearchCompleter), "init"),
        v14 = objc_allocWithZone((Class)type metadata accessor for LocationSearchCompleter()),
        v15 = LocationSearchCompleter.init(searchCompleter:)(v13),
        v16 = *(void **)(a1 + 16),
        *(_QWORD *)(a1 + 16) = v15,
        v16,
        (v12 = *(char **)(a1 + 16)) != 0))
  {
    v17 = swift_allocObject(&unk_100B86F98, 32, 7);
    *(_QWORD *)(v17 + 16) = a2;
    *(_QWORD *)(v17 + 24) = a3;
    fora = a6;
    v18 = a5;
    v19 = (uint64_t *)&v12[OBJC_IVAR____TtC7Weather23LocationSearchCompleter_onError];
    swift_beginAccess(&v12[OBJC_IVAR____TtC7Weather23LocationSearchCompleter_onError], v32, 1, 0);
    v20 = *v19;
    v21 = v19[1];
    *v19 = (uint64_t)sub_10066832C;
    v19[1] = v17;
    v22 = v12;
    swift_retain();
    sub_1000BF8D0(v20, v21);
    v23 = swift_allocObject(&unk_100B86FC0, 24, 7);
    swift_weakInit(v23 + 16);
    sub_100043CA8(a4, (uint64_t)v31);
    v24 = (_QWORD *)swift_allocObject(&unk_100B86FE8, 80, 7);
    v24[2] = v23;
    v24[3] = a2;
    v24[4] = a3;
    sub_10003C800(v31, (uint64_t)(v24 + 5));
    v25 = (uint64_t *)&v22[OBJC_IVAR____TtC7Weather23LocationSearchCompleter_onUpdate];
    swift_beginAccess(&v22[OBJC_IVAR____TtC7Weather23LocationSearchCompleter_onUpdate], v30, 1, 0);
    v26 = *v25;
    v27 = v25[1];
    *v25 = (uint64_t)sub_100668384;
    v25[1] = (uint64_t)v24;
    swift_retain();
    sub_1000BF8D0(v26, v27);
    v28._countAndFlagsBits = v18;
    v28._object = fora;
    LocationSearchCompleter.searchLocations(for:)(v28);

  }
  else
  {
    a2(0, 0);
  }
}

uint64_t sub_1006679D8(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v13;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = static Logger.intents.getter(v5);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "We encountered an error while updating the search term.", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return a2(0, 0);
}

void sub_100667AE0(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, _QWORD), uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  __int128 v23[2];
  _BYTE v24[24];

  v9 = a2 + 16;
  swift_beginAccess(a2 + 16, v24, 0, 0);
  Strong = swift_weakLoadStrong(v9);
  if (Strong)
  {
    v11 = Strong;
    v12 = sub_1000A0794(0, (unint64_t *)&qword_100BC29A0, OS_dispatch_queue_ptr);
    v13 = (void *)static OS_dispatch_queue.main.getter(v12);
    sub_100043CA8(a5, (uint64_t)v23);
    v14 = swift_allocObject(&unk_100B87010, 64, 7);
    *(_QWORD *)(v14 + 16) = a1;
    sub_10003C800(v23, v14 + 24);
    swift_bridgeObjectRetain();
    v15 = sub_1000BA294(&qword_100BFAEF0);
    v16 = type metadata accessor for LocationSearcher();
    firstly<A, B>(on:disposeOn:closure:)(v13, v11, sub_1006683C0, v14, v15, v16);

    swift_release();
    v18 = (void *)static OS_dispatch_queue.main.getter(v17);
    v19 = swift_allocObject(&unk_100B87038, 32, 7);
    *(_QWORD *)(v19 + 16) = a3;
    *(_QWORD *)(v19 + 24) = a4;
    swift_retain();
    Promise.then<A, B>(on:disposeOn:closure:)(v18, v11, sub_100668400, v19, &type metadata for () + 1, v16);
    swift_release();

    swift_release();
    v20 = swift_allocObject(&unk_100B87060, 32, 7);
    *(_QWORD *)(v20 + 16) = a3;
    *(_QWORD *)(v20 + 24) = a4;
    swift_retain();
    v22 = (void *)zalgo.getter(v21);
    Promise.error(on:closure:)(v22, sub_100668418, v20);
    swift_release();
    swift_release();
    swift_release();
    swift_release();

  }
  else
  {
    a3(0, 0);
  }
}

uint64_t sub_100667CDC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v4;

  v4 = sub_1000DB418(a3, a3[3]);
  return sub_100668440(a2, *v4);
}

double sub_100667D28(uint64_t *a1, uint64_t a2, void (*a3)(void))
{
  double result;

  sub_100667360(*a1);
  a3();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_100667D80(id *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_1000BA294(&qword_100BFAEF8);
  __chkstk_darwin(v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BC35F8);
  __chkstk_darwin(v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Location(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  sub_100379754(v16, (uint64_t)v11);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12) == 1)
  {
    sub_100668514((uint64_t)v11);
    sub_1000DB418(a2, a2[3]);
    v17 = objc_msgSend(v16, "w_calloutTitle");
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v20 = v19;

    LocalSearchRequestManager.performLocalSearch(with:calloutTitle:)(v16, v18, v20);
    swift_bridgeObjectRelease();
    v21 = swift_allocObject(&unk_100B87088, 24, 7);
    *(_QWORD *)(v21 + 16) = v16;
    v22 = (void *)zalgo.getter(v16);
    v23 = Promise.then<A>(on:closure:)(v22, sub_100668570, v21, v6);
    swift_release();
    swift_release();

  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
    v24 = objc_msgSend(v16, "w_calloutTitle");
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;

    v28 = (uint64_t *)&v8[*(int *)(v6 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v8, v15, v12);
    *v28 = v25;
    v28[1] = v27;
    v29 = sub_1000BA294(&qword_100BFAF00);
    swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
    v23 = Promise.init(value:)(v8);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  *a3 = v23;
}

uint64_t sub_100668008(uint64_t a1, void *a2)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = sub_1000BA294(&qword_100BFAEF8);
  *(_QWORD *)&v5 = __chkstk_darwin(v4).n128_u64[0];
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(a2, "w_calloutTitle", v5);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v12 = (uint64_t *)&v7[*(int *)(v4 + 48)];
  v13 = type metadata accessor for Location(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v7, a1, v13);
  *v12 = v9;
  v12[1] = v11;
  v14 = sub_1000BA294(&qword_100BFAF00);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  return Promise.init(value:)(v7);
}

uint64_t sub_100668108()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_1000BB2E4();
  return swift_deallocClassInstance(v1, v2, v3);
}

uint64_t type metadata accessor for LocationSearcher()
{
  return objc_opt_self(_TtC7Weather16LocationSearcher);
}

uint64_t sub_100668144()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_1000BA294(&qword_100BFAEE8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1006681A8(_QWORD *a1)
{
  sub_1000BA294(&qword_100BFAEE8);
  return sub_100667798(a1);
}

uint64_t sub_1006681F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  __int128 v14[2];
  _QWORD v15[5];

  v15[3] = type metadata accessor for LocalSearchRequestManager();
  v15[4] = &off_100B8B840;
  v15[0] = a3;
  sub_100043CA8((uint64_t)v15, (uint64_t)v14);
  v12 = (_QWORD *)swift_allocObject(&unk_100B86F70, 96, 7);
  v12[2] = a6;
  v12[3] = a4;
  v12[4] = a5;
  sub_10003C800(v14, (uint64_t)(v12 + 5));
  v12[10] = a1;
  v12[11] = a2;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  asyncMain(block:)(sub_100668318, v12);
  swift_release();
  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v15);
}

uint64_t sub_1006682DC()
{
  uint64_t v0;

  swift_release();
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, 96, 7);
}

void sub_100668318()
{
  uint64_t v0;

  sub_1006677F0(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD, _QWORD))(v0 + 24), *(_QWORD *)(v0 + 32), v0 + 40, *(_QWORD *)(v0 + 80), *(void **)(v0 + 88));
}

uint64_t sub_10066832C(uint64_t a1)
{
  uint64_t v1;

  return sub_1006679D8(a1, *(uint64_t (**)(_QWORD, _QWORD))(v1 + 16));
}

uint64_t sub_100668334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_weakDestroy(v0 + 16);
  v1 = sub_1000BB2E4();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100668350()
{
  uint64_t v0;

  swift_release();
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 80, 7);
}

void sub_100668384(uint64_t a1)
{
  uint64_t v1;

  sub_100667AE0(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD, _QWORD))(v1 + 24), *(_QWORD *)(v1 + 32), v1 + 40);
}

uint64_t sub_100668394()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1006683C0(uint64_t a1)
{
  uint64_t v1;

  return sub_100667CDC(a1, *(_QWORD *)(v1 + 16), (_QWORD *)(v1 + 24));
}

uint64_t sub_1006683DC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

double sub_100668400(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100667D28(a1, a2, *(void (**)(void))(v2 + 16));
}

uint64_t sub_100668418()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 16))(0, 0);
}

uint64_t sub_100668440(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD v10[5];

  v10[3] = type metadata accessor for LocalSearchRequestManager();
  v10[4] = &off_100B8B840;
  v10[0] = a2;
  v9[2] = v10;
  swift_retain();
  v4 = sub_10084ADF0((void (*)(uint64_t *__return_ptr, id *))sub_1006684F8, (uint64_t)v9, a1);
  v5 = (void *)zalgo.getter(v4);
  v6 = sub_1000BA294(&qword_100BFAEF8);
  v7 = when<A>(on:_:)(v5, v4, v6);
  swift_bridgeObjectRelease();

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v10);
  return v7;
}

void sub_1006684F8(id *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  sub_100667D80(a1, *(_QWORD **)(v2 + 16), a2);
}

uint64_t sub_100668514(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BC35F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100668554()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_1000BB2E4();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100668570(uint64_t a1)
{
  uint64_t v1;

  return sub_100668008(a1, *(void **)(v1 + 16));
}

uint64_t sub_100668590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  os_log_type_t v41;
  _WORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  os_log_type_t v52;
  _WORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  void *v60;
  os_log_type_t v61;
  _WORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  void *v67;
  os_log_type_t v68;
  _WORD *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v77 = a3;
  v4 = type metadata accessor for Calendar.Component(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100098728();
  v8 = v7 - v6;
  v9 = type metadata accessor for Calendar(0);
  v75 = *(_QWORD *)(v9 - 8);
  v76 = v9;
  sub_10009D98C();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = v12 - v11;
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_10009D98C();
  __chkstk_darwin(v14);
  sub_100098728();
  v17 = v16 - v15;
  v18 = type metadata accessor for Date(0);
  v73 = *(_QWORD *)(v18 - 8);
  sub_10009D98C();
  __chkstk_darwin(v19);
  v72 = (char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v74 = (char *)&v72 - v22;
  sub_1000BA294(&qword_100BF76C0);
  sub_10009D98C();
  __chkstk_darwin(v23);
  sub_100098728();
  v26 = v25 - v24;
  v27 = type metadata accessor for MainStateProcessingContext(0);
  sub_10009D98C();
  __chkstk_darwin(v28);
  sub_100098728();
  v31 = v30 - v29;
  sub_100668AEC(a2, v26);
  if (_s7Weather24LocationCompositionStateOwet_0(v26, 1, v27) == 1)
  {
    sub_100021A68(v26, &qword_100BF76C0);
    if (qword_100BC2430 != -1)
      swift_once(&qword_100BC2430, sub_1006F37D4);
    v32 = sub_100098720();
    v33 = sub_1000C34E4(v32, (uint64_t)qword_100CAF088);
    v35 = static os_log_type_t.error.getter(v33, v34);
    if (os_log_type_enabled(v33, v35))
    {
      v36 = (uint8_t *)sub_10009D340();
      *(_WORD *)v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v35, "missing processingContext in DiscardStateProcessor", v36, 2u);
      swift_slowDealloc(v36, -1, -1);
    }

    return 1;
  }
  v37 = sub_100668B34(v26, v31);
  static Calendar.current.getter(v37);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v8, enum case for Calendar.Component.second(_:), v4);
  Calendar.date(byAdding:value:to:wrappingComponents:)(v8, v77, v31, 0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
  (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v13, v76);
  if (_s7Weather24LocationCompositionStateOwet_0(v17, 1, v18) != 1)
  {
    v47 = v73;
    v46 = (uint64_t)v74;
    v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v73 + 32))(v74, v17, v18);
    if (qword_100BC1EF0 != -1)
      v48 = swift_once(&qword_100BC1EF0, sub_10014B1C0);
    if (*(_BYTE *)(qword_100CAE578 + 16) == 1)
    {
      if (qword_100BC2430 != -1)
        swift_once(&qword_100BC2430, sub_1006F37D4);
      v49 = sub_100098720();
      v50 = (void *)sub_1000C34E4(v49, (uint64_t)qword_100CAF088);
      v52 = static os_log_type_t.error.getter(v50, v51);
      if (sub_1000C23F4(v52))
      {
        v53 = (_WORD *)sub_10009D340();
        sub_1000C6194(v53);
        sub_1000BB2F4((void *)&_mh_execute_header, v54, v55, "Drop state due to app crashed previously");
        sub_1000BC804();
      }

      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v18);
      v56 = v31;
    }
    else
    {
      v57 = (uint64_t)v72;
      Date.init()(v48);
      v58 = static Date.> infix(_:_:)(v57, v46);
      sub_1000B477C(v57);
      if ((v58 & 1) == 0)
      {
        if (qword_100BC2430 != -1)
          swift_once(&qword_100BC2430, sub_1006F37D4);
        v66 = sub_100098720();
        v67 = (void *)sub_1000C34E4(v66, (uint64_t)qword_100CAF088);
        v68 = static os_log_type_t.default.getter(v67);
        if (sub_1000C23F4(v68))
        {
          v69 = (_WORD *)sub_10009D340();
          sub_1000C6194(v69);
          sub_1000BB2F4((void *)&_mh_execute_header, v70, v71, "Keep fresh state");
          sub_1000BC804();
        }

        sub_1000B477C(v46);
        v45 = v31;
        goto LABEL_33;
      }
      if (qword_100BC2430 != -1)
        swift_once(&qword_100BC2430, sub_1006F37D4);
      v59 = sub_100098720();
      v60 = (void *)sub_1000C34E4(v59, (uint64_t)qword_100CAF088);
      v61 = static os_log_type_t.default.getter(v60);
      if (sub_1000C23F4(v61))
      {
        v62 = (_WORD *)sub_10009D340();
        sub_1000C6194(v62);
        sub_1000BB2F4((void *)&_mh_execute_header, v63, v64, "Drop expired state");
        sub_1000BC804();
      }

      sub_1000B477C(v46);
      v56 = v31;
    }
    sub_100668B78(v56);
    return 0;
  }
  sub_100021A68(v17, (uint64_t *)&unk_100BD35A0);
  if (qword_100BC2430 != -1)
    swift_once(&qword_100BC2430, sub_1006F37D4);
  v38 = sub_100098720();
  v39 = (void *)sub_1000C34E4(v38, (uint64_t)qword_100CAF088);
  v41 = static os_log_type_t.error.getter(v39, v40);
  if (sub_1000C23F4(v41))
  {
    v42 = (_WORD *)sub_10009D340();
    sub_1000C6194(v42);
    sub_1000BB2F4((void *)&_mh_execute_header, v43, v44, "missing expirationDate in DiscardStateProcessor");
    sub_1000BC804();
  }

  v45 = v31;
LABEL_33:
  sub_100668B78(v45);
  return 1;
}

uint64_t sub_100668AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BF76C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100668B34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MainStateProcessingContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100668B78(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MainStateProcessingContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for DiscardStateProcessor()
{
  return &type metadata for DiscardStateProcessor;
}

unint64_t sub_100668BC8()
{
  unint64_t result;

  result = qword_100BFAF08;
  if (!qword_100BFAF08)
  {
    result = swift_getWitnessTable(&unk_100982464, &unk_100B61740);
    atomic_store(result, (unint64_t *)&qword_100BFAF08);
  }
  return result;
}

unint64_t sub_100668C08()
{
  unint64_t result;

  result = qword_100BFAF10;
  if (!qword_100BFAF10)
  {
    result = swift_getWitnessTable(&unk_10098243C, &unk_100B61740);
    atomic_store(result, (unint64_t *)&qword_100BFAF10);
  }
  return result;
}

uint64_t sub_100668C44()
{
  return sub_100668C8C(&qword_100BFAF18, (uint64_t)&unk_1009AAE30);
}

uint64_t sub_100668C68()
{
  return sub_100668C8C(&qword_100BFAF20, (uint64_t)&unk_1009AAE08);
}

uint64_t sub_100668C8C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for MainStateProcessingContext(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100668CCC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[80];

  v3 = sub_1000BA294(&qword_100BC31F0);
  inited = swift_initStackObject(v3, v21);
  *(_OWORD *)(inited + 16) = xmmword_10097CA50;
  *(_QWORD *)(inited + 32) = 0x6C65646F6DLL;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  v5 = a1[4];
  v18 = a1[3];
  v19 = a1[2];
  v6 = a1[5];
  v7 = a1[6];
  v8 = a1[7];
  v9 = a1[8];
  v10 = a1[10];
  v17 = a1[9];
  v11 = a1[11];
  v12 = a1[12];
  v13 = a1[13];
  *(_QWORD *)(inited + 72) = &type metadata for ReportWeatherViewModel;
  v14 = (_QWORD *)swift_allocObject(&unk_100B870E0, 112, 7);
  *(_QWORD *)(inited + 48) = v14;
  v14[2] = v19;
  v14[3] = v18;
  v14[4] = v5;
  v14[5] = v6;
  v14[6] = v7;
  v14[7] = v8;
  v14[8] = v9;
  v14[9] = v17;
  v14[10] = v10;
  v14[11] = v11;
  v14[12] = v12;
  v14[13] = v13;
  sub_10019D33C(v19, v18, v5, v6, v7, v8, v9, v17, v10, v11, v12, v13);
  v15 = Dictionary.init(dictionaryLiteral:)(inited);
  a2[3] = sub_1000BA294(&qword_100BFAF70);
  a2[4] = sub_100668F08();
  sub_10005F164(a2);
  return ShortDescription.init(name:_:)(0xD000000000000016, 0x8000000100A0E960, v15, &unk_100B63320);
}

uint64_t sub_100668E50@<X0>(_QWORD *a1@<X8>)
{
  _QWORD **v1;

  return sub_100668CCC(*v1, a1);
}

uint64_t sub_100668E58(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100668F4C();
  return ShortDescribable.description.getter(a1, v2);
}

unint64_t sub_100668E84()
{
  unint64_t result;

  result = qword_100BFAF68;
  if (!qword_100BFAF68)
  {
    result = swift_getWitnessTable(&unk_1009BB564, &unk_100B63320);
    atomic_store(result, (unint64_t *)&qword_100BFAF68);
  }
  return result;
}

uint64_t sub_100668EC0()
{
  uint64_t *v0;

  sub_10019D2B8(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7], v0[8], v0[9], v0[10], v0[11], v0[12], v0[13]);
  return swift_deallocObject(v0, 112, 7);
}

unint64_t sub_100668F08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFAF78;
  if (!qword_100BFAF78)
  {
    v1 = sub_100075EB0(&qword_100BFAF70);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFAF78);
  }
  return result;
}

unint64_t sub_100668F4C()
{
  unint64_t result;

  result = qword_100BFAF80;
  if (!qword_100BFAF80)
  {
    result = swift_getWitnessTable(&unk_1009BB58C, &unk_100B63320);
    atomic_store(result, (unint64_t *)&qword_100BFAF80);
  }
  return result;
}

uint64_t *sub_100668F88(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v13 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
      v9 = a1;
      v10 = a3;
      v11 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v8 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = a3;
      v11 = 1;
    }
    else
    {
      v14 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
      v9 = a1;
      v10 = a3;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_100669090(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if (result <= 2)
  {
    v4 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  return result;
}

uint64_t sub_1006690DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t EnumCaseMultiPayload;
  uint64_t v7;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  swift_storeEnumTagMultiPayload(a1, a3, EnumCaseMultiPayload);
  return a1;
}

uint64_t sub_10066914C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t EnumCaseMultiPayload;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_1002F682C(a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, EnumCaseMultiPayload);
  }
  return a1;
}

uint64_t sub_1006691CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t EnumCaseMultiPayload;
  uint64_t v7;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
  swift_storeEnumTagMultiPayload(a1, a3, EnumCaseMultiPayload);
  return a1;
}

uint64_t sub_10066923C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t EnumCaseMultiPayload;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_1002F682C(a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, EnumCaseMultiPayload);
  }
  return a1;
}

uint64_t sub_1006692BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  sub_1000D1F44();
  sub_10009D98C();
  __chkstk_darwin(v3);
  sub_100099864();
  sub_1000C17BC();
  v4 = sub_100098778();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, v1, v4);
}

uint64_t sub_100669320(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int EnumCaseMultiPayload;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v5 = sub_100098778();
  v38 = *(_QWORD *)(v5 - 8);
  v39 = v5;
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_1000986FC();
  v37 = v7;
  __chkstk_darwin(v8);
  sub_1000C0E4C();
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - v10;
  v12 = sub_1000D1F44();
  sub_10009D98C();
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v36 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v36 - v20;
  sub_1000BA294(&qword_100BFB038);
  sub_10009D98C();
  __chkstk_darwin(v22);
  sub_100098728();
  v25 = v24 - v23;
  v27 = v24 - v23 + *(int *)(v26 + 48);
  sub_1005BA1E0(a1, v24 - v23);
  sub_1005BA1E0(a2, v27);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v25, v12);
  if (!EnumCaseMultiPayload)
  {
    sub_1005BA1E0(v25, (uint64_t)v21);
    if (sub_1000CE5F8())
    {
      v16 = v21;
      goto LABEL_10;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v11, v27, v39);
    v31 = static Date.== infix(_:_:)(v21, v11);
    sub_1000DA63C((uint64_t)v11);
    v34 = (uint64_t)v21;
LABEL_12:
    sub_1000DA63C(v34);
    goto LABEL_13;
  }
  if (EnumCaseMultiPayload != 1)
  {
    sub_1005BA1E0(v25, (uint64_t)v16);
    if (sub_1000CE5F8() != 2)
      goto LABEL_10;
    v33 = v37;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v37, v27, v39);
    v31 = static Date.== infix(_:_:)(v16, v33);
    sub_1000DA63C(v33);
    v34 = (uint64_t)v16;
    goto LABEL_12;
  }
  sub_1000C17BC();
  if (sub_1000CE5F8() == 1)
  {
    v29 = v38;
    v30 = v39;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v2, v27, v39);
    v31 = static Date.== infix(_:_:)(v19, v2);
    v32 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v32(v2, v30);
    v32((uint64_t)v19, v30);
LABEL_13:
    sub_1002F682C(v25);
    return v31 & 1;
  }
  v16 = v19;
LABEL_10:
  (*(void (**)(char *, uint64_t))(v38 + 8))(v16, v39);
  sub_10066A3C0(v25);
  v31 = 0;
  return v31 & 1;
}

uint64_t sub_1006695C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt EnumCaseMultiPayload;
  uint64_t v12;

  v3 = v1;
  v5 = sub_100098778();
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100099864();
  sub_1000D1F44();
  sub_10009D98C();
  __chkstk_darwin(v7);
  sub_100098728();
  v10 = v9 - v8;
  sub_1005BA1E0(v3, v9 - v8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v2, v10, v5);
  Hasher._combine(_:)(EnumCaseMultiPayload);
  v12 = sub_100051B90((unint64_t *)&qword_100BC3588, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v5, v12);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v5);
}

uint64_t sub_1006696C4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v10;

  if (a1 == 0x7265626275726373 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7265626275726373, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E6F74747562 && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F74747562, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x68636E75616CLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 2;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x68636E75616CLL, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100669808(char a1)
{
  if (!a1)
    return 0x7265626275726373;
  if (a1 == 1)
    return 0x6E6F74747562;
  return 0x68636E75616CLL;
}

void sub_100669858(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int EnumCaseMultiPayload;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  char v66;

  v59 = sub_1000BA294(&qword_100BFB080);
  v50 = *(_QWORD *)(v59 - 8);
  sub_10009D98C();
  __chkstk_darwin(v2);
  sub_10009DE08(v3, v49);
  v4 = sub_1000BA294(&qword_100BFB088);
  v56 = *(_QWORD *)(v4 - 8);
  v57 = v4;
  sub_10009D98C();
  __chkstk_darwin(v5);
  sub_100088FDC();
  v55 = v6;
  v7 = sub_1000BA294(&qword_100BFB090);
  v53 = *(_QWORD *)(v7 - 8);
  v54 = v7;
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_100088FDC();
  v60 = v9;
  v62 = sub_100098778();
  v10 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  sub_1000986FC();
  v52 = v11;
  __chkstk_darwin(v12);
  v51 = (char *)&v49 - v13;
  __chkstk_darwin(v14);
  v16 = (char *)&v49 - v15;
  type metadata accessor for MoonDetailSelectedDate(0);
  sub_10009D98C();
  __chkstk_darwin(v17);
  sub_100098728();
  v20 = v19 - v18;
  v61 = *(_QWORD *)(sub_1000BA294(&qword_100BFB098) - 8);
  sub_10009D98C();
  __chkstk_darwin(v21);
  sub_100098728();
  v24 = v23 - v22;
  v26 = a1[3];
  v25 = a1[4];
  sub_1000DB418(a1, v26);
  v27 = sub_10066A400();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MoonDetailSelectedDate.CodingKeys, &type metadata for MoonDetailSelectedDate.CodingKeys, v27, v26, v25);
  sub_1005BA1E0(v63, v20);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v20);
  if (EnumCaseMultiPayload)
  {
    v29 = v62;
    v30 = v10;
    if (EnumCaseMultiPayload == 1)
    {
      v31 = (uint64_t)v51;
      sub_1000D19C8(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 32));
      sub_1000C6770();
      v32 = v55;
      sub_1000DDDC4((uint64_t)&type metadata for MoonDetailSelectedDate.ButtonCodingKeys, (uint64_t)&v65);
      v33 = sub_100051B90(&qword_100BC3578, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v34 = v57;
      sub_1000C5778(v31, v35, v36, v37, v33);
      v38 = v56;
    }
    else
    {
      v31 = v52;
      sub_1000D19C8(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 32));
      sub_1000D026C();
      v32 = v58;
      sub_1000DDDC4((uint64_t)&type metadata for MoonDetailSelectedDate.LaunchCodingKeys, (uint64_t)&v66);
      v44 = sub_100051B90(&qword_100BC3578, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v34 = v59;
      sub_1000C5778(v31, v45, v46, v47, v44);
      v38 = v50;
    }
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v32, v34);
    v16 = (char *)v31;
  }
  else
  {
    v39 = v20;
    v40 = v62;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v16, v39, v62);
    v64 = 0;
    sub_10066A4B4();
    sub_1000DDDC4((uint64_t)&type metadata for MoonDetailSelectedDate.ScrubberCodingKeys, (uint64_t)&v64);
    v41 = sub_100051B90(&qword_100BC3578, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v42 = v54;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, v43, v54, v40, v41);
    v29 = v40;
    v30 = v10;
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v60, v42);
  }
  v48 = v61;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v16, v29);
  sub_100098748(v24, *(uint64_t (**)(uint64_t, uint64_t))(v48 + 8));
  sub_1000B44B0();
}

void sub_100669BE8(uint64_t a1)
{
  _BYTE v1[72];

  sub_1000C4480(a1);
  sub_1006695C0((uint64_t)v1);
  sub_10007A148();
  sub_100098918();
}

void sub_100669C10(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  char v86;
  char v87;
  char v88;

  v79 = a2;
  v78 = sub_1000BA294(&qword_100BFB040);
  v75 = *(_QWORD *)(v78 - 8);
  sub_10009D98C();
  __chkstk_darwin(v4);
  sub_100088FDC();
  v81 = v5;
  v77 = sub_1000BA294(&qword_100BFB048);
  v74 = *(_QWORD *)(v77 - 8);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_10009DE08(v7, v66);
  v76 = sub_1000BA294(&qword_100BFB050);
  v73 = *(_QWORD *)(v76 - 8);
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_100088FDC();
  v80 = v9;
  v10 = sub_1000BA294(&qword_100BFB058);
  v82 = *(_QWORD *)(v10 - 8);
  v83 = v10;
  sub_10009D98C();
  __chkstk_darwin(v11);
  sub_100098728();
  v14 = v13 - v12;
  v15 = type metadata accessor for MoonDetailSelectedDate(0);
  sub_10009D98C();
  __chkstk_darwin(v16);
  v18 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  sub_1000C0E4C();
  __chkstk_darwin(v20);
  v22 = (char *)&v66 - v21;
  __chkstk_darwin(v23);
  v25 = (char *)&v66 - v24;
  v26 = a1[3];
  v27 = a1[4];
  v84 = a1;
  sub_1000DB418(a1, v26);
  v28 = sub_10066A400();
  v29 = v85;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MoonDetailSelectedDate.CodingKeys, &type metadata for MoonDetailSelectedDate.CodingKeys, v28, v26, v27);
  if (v29)
    goto LABEL_2;
  v70 = v2;
  v71 = v18;
  v68 = v22;
  v69 = v25;
  v72 = v15;
  v31 = v83;
  v85 = v14;
  v32 = KeyedDecodingContainer.allKeys.getter(v83);
  v33 = *(_QWORD *)(v32 + 16);
  if (!v33)
  {
    v30 = v84;
LABEL_10:
    v42 = v82;
    v43 = v72;
    v44 = type metadata accessor for DecodingError(0);
    swift_allocError(v44, &protocol witness table for DecodingError, 0, 0);
    v46 = v45;
    sub_1000BA294(&qword_100BC6CF8);
    *v46 = v43;
    v47 = v85;
    v48 = KeyedDecodingContainer.codingPath.getter(v31);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v48, 0xD00000000000002BLL, 0x80000001009F2600, 0);
    v49 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v44 - 8) + 104))(v46, enum case for DecodingError.typeMismatch(_:), v44);
    swift_willThrow(v49, v50);
    sub_1000C0EBC();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v47, v31);
    goto LABEL_11;
  }
  v67 = 0;
  v34 = v31;
  v35 = *(unsigned __int8 *)(v32 + 32);
  sub_10055FF58(1, v33, v32, v32 + 32, 0, (2 * v33) | 1);
  v37 = v36;
  v39 = v38;
  swift_bridgeObjectRelease();
  if (v37 != v39 >> 1)
  {
    v30 = v84;
    v31 = v34;
    goto LABEL_10;
  }
  if (v35)
  {
    if (v35 == 1)
    {
      sub_1000C6770();
      sub_1000DAA50((uint64_t)&type metadata for MoonDetailSelectedDate.ButtonCodingKeys, (uint64_t)&v87);
      v40 = sub_100098778();
      sub_100051B90(&qword_100BC3558, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      sub_1000B4B2C(v40, v41);
      v30 = v84;
      sub_1000BC4EC(v74);
      sub_1000C0EBC();
      sub_100098748(v15, *(uint64_t (**)(uint64_t, uint64_t))(v82 + 8));
      v59 = v70;
      v60 = v70;
      v61 = v72;
      v62 = 1;
    }
    else
    {
      sub_1000D026C();
      sub_1000DAA50((uint64_t)&type metadata for MoonDetailSelectedDate.LaunchCodingKeys, (uint64_t)&v88);
      v56 = sub_100098778();
      sub_100051B90(&qword_100BC3558, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      sub_1000B4B2C(v56, v57);
      v30 = v84;
      v58 = v82;
      sub_1000BC4EC(v75);
      sub_1000C0EBC();
      sub_100098748(v15, *(uint64_t (**)(uint64_t, uint64_t))(v58 + 8));
      v59 = (uint64_t)v71;
      v61 = v72;
      v60 = (uint64_t)v71;
      v62 = 2;
    }
    goto LABEL_16;
  }
  v86 = 0;
  sub_10066A4B4();
  v51 = v67;
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for MoonDetailSelectedDate.ScrubberCodingKeys, &v86, v34, &type metadata for MoonDetailSelectedDate.ScrubberCodingKeys);
  if (!v51)
  {
    v54 = sub_100098778();
    sub_100051B90(&qword_100BC3558, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v59 = (uint64_t)v68;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v54, v55, v76);
    v30 = v84;
    sub_1000DBC58();
    sub_1000C0EBC();
    v63 = sub_1000CD838();
    sub_100098748(v63, v64);
    v60 = v59;
    v61 = v72;
    v62 = 0;
LABEL_16:
    swift_storeEnumTagMultiPayload(v60, v61, v62);
    v65 = (uint64_t)v69;
    sub_1002D0918(v59, (uint64_t)v69);
    sub_1002D0918(v65, v79);
    goto LABEL_11;
  }
  sub_1000C0EBC();
  v52 = sub_1000CD838();
  sub_100098748(v52, v53);
LABEL_2:
  v30 = v84;
LABEL_11:
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v30);
  sub_1000B44B0();
}

uint64_t sub_10066A194(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10066A478();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10066A1BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10066A478();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10066A1E4()
{
  char *v0;

  return sub_100669808(*v0);
}

uint64_t sub_10066A1EC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1006696C4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10066A210(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10066A400();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10066A238(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10066A400();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10066A260(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10066A43C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10066A288(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10066A43C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10066A2B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10066A4B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10066A2D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10066A4B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_10066A30C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_1006695C0((uint64_t)v1);
  return Hasher._finalize()();
}

void sub_10066A344(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100669C10(a1, a2);
}

void sub_10066A358(_QWORD *a1)
{
  sub_100669858(a1);
}

void sub_10066A36C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_1006B2F20(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8, SWORD2(vars8), SBYTE6(vars8), SHIBYTE(vars8));
}

void sub_10066A380()
{
  sub_1006B308C();
}

uint64_t sub_10066A394()
{
  return sub_100051B90(&qword_100BFB030, type metadata accessor for MoonDetailSelectedDate, (uint64_t)&unk_1009BB6D8);
}

uint64_t sub_10066A3C0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BFB038);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10066A400()
{
  unint64_t result;

  result = qword_100BFB060;
  if (!qword_100BFB060)
  {
    result = swift_getWitnessTable(&unk_1009BBB34, &type metadata for MoonDetailSelectedDate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB060);
  }
  return result;
}

unint64_t sub_10066A43C()
{
  unint64_t result;

  result = qword_100BFB068;
  if (!qword_100BFB068)
  {
    result = swift_getWitnessTable(&unk_1009BBAE4, &type metadata for MoonDetailSelectedDate.LaunchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB068);
  }
  return result;
}

unint64_t sub_10066A478()
{
  unint64_t result;

  result = qword_100BFB070;
  if (!qword_100BFB070)
  {
    result = swift_getWitnessTable(&unk_1009BBA94, &type metadata for MoonDetailSelectedDate.ButtonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB070);
  }
  return result;
}

unint64_t sub_10066A4B4()
{
  unint64_t result;

  result = qword_100BFB078;
  if (!qword_100BFB078)
  {
    result = swift_getWitnessTable(&unk_1009BBA44, &type metadata for MoonDetailSelectedDate.ScrubberCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB078);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MoonDetailSelectedDate.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10066A53C + 4 * byte_1009BB5C5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10066A570 + 4 * byte_1009BB5C0[v4]))();
}

uint64_t sub_10066A570(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10066A578(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10066A580);
  return result;
}

uint64_t sub_10066A58C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10066A594);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10066A598(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10066A5A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MoonDetailSelectedDate.CodingKeys()
{
  return &type metadata for MoonDetailSelectedDate.CodingKeys;
}

ValueMetadata *type metadata accessor for MoonDetailSelectedDate.ScrubberCodingKeys()
{
  return &type metadata for MoonDetailSelectedDate.ScrubberCodingKeys;
}

ValueMetadata *type metadata accessor for MoonDetailSelectedDate.ButtonCodingKeys()
{
  return &type metadata for MoonDetailSelectedDate.ButtonCodingKeys;
}

uint64_t _s7Weather22MoonDetailSelectedDateO18ScrubberCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10066A620 + 4 * byte_1009BB5CA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10066A640 + 4 * byte_1009BB5CF[v4]))();
}

_BYTE *sub_10066A620(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10066A640(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10066A648(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10066A650(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10066A658(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10066A660(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MoonDetailSelectedDate.LaunchCodingKeys()
{
  return &type metadata for MoonDetailSelectedDate.LaunchCodingKeys;
}

unint64_t sub_10066A680()
{
  unint64_t result;

  result = qword_100BFB0A0;
  if (!qword_100BFB0A0)
  {
    result = swift_getWitnessTable(&unk_1009BB7F4, &type metadata for MoonDetailSelectedDate.LaunchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB0A0);
  }
  return result;
}

unint64_t sub_10066A6C0()
{
  unint64_t result;

  result = qword_100BFB0A8;
  if (!qword_100BFB0A8)
  {
    result = swift_getWitnessTable(&unk_1009BB8AC, &type metadata for MoonDetailSelectedDate.ButtonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB0A8);
  }
  return result;
}

unint64_t sub_10066A700()
{
  unint64_t result;

  result = qword_100BFB0B0;
  if (!qword_100BFB0B0)
  {
    result = swift_getWitnessTable(&unk_1009BB964, &type metadata for MoonDetailSelectedDate.ScrubberCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB0B0);
  }
  return result;
}

unint64_t sub_10066A740()
{
  unint64_t result;

  result = qword_100BFB0B8;
  if (!qword_100BFB0B8)
  {
    result = swift_getWitnessTable(&unk_1009BBA1C, &type metadata for MoonDetailSelectedDate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB0B8);
  }
  return result;
}

unint64_t sub_10066A780()
{
  unint64_t result;

  result = qword_100BFB0C0;
  if (!qword_100BFB0C0)
  {
    result = swift_getWitnessTable(&unk_1009BB8D4, &type metadata for MoonDetailSelectedDate.ScrubberCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB0C0);
  }
  return result;
}

unint64_t sub_10066A7C0()
{
  unint64_t result;

  result = qword_100BFB0C8;
  if (!qword_100BFB0C8)
  {
    result = swift_getWitnessTable(&unk_1009BB8FC, &type metadata for MoonDetailSelectedDate.ScrubberCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB0C8);
  }
  return result;
}

unint64_t sub_10066A800()
{
  unint64_t result;

  result = qword_100BFB0D0;
  if (!qword_100BFB0D0)
  {
    result = swift_getWitnessTable(&unk_1009BB81C, &type metadata for MoonDetailSelectedDate.ButtonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB0D0);
  }
  return result;
}

unint64_t sub_10066A840()
{
  unint64_t result;

  result = qword_100BFB0D8;
  if (!qword_100BFB0D8)
  {
    result = swift_getWitnessTable(&unk_1009BB844, &type metadata for MoonDetailSelectedDate.ButtonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB0D8);
  }
  return result;
}

unint64_t sub_10066A880()
{
  unint64_t result;

  result = qword_100BFB0E0;
  if (!qword_100BFB0E0)
  {
    result = swift_getWitnessTable(&unk_1009BB764, &type metadata for MoonDetailSelectedDate.LaunchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB0E0);
  }
  return result;
}

unint64_t sub_10066A8C0()
{
  unint64_t result;

  result = qword_100BFB0E8;
  if (!qword_100BFB0E8)
  {
    result = swift_getWitnessTable(&unk_1009BB78C, &type metadata for MoonDetailSelectedDate.LaunchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB0E8);
  }
  return result;
}

unint64_t sub_10066A900()
{
  unint64_t result;

  result = qword_100BFB0F0;
  if (!qword_100BFB0F0)
  {
    result = swift_getWitnessTable(&unk_1009BB98C, &type metadata for MoonDetailSelectedDate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB0F0);
  }
  return result;
}

unint64_t sub_10066A940()
{
  unint64_t result;

  result = qword_100BFB0F8;
  if (!qword_100BFB0F8)
  {
    result = swift_getWitnessTable(&unk_1009BB9B4, &type metadata for MoonDetailSelectedDate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB0F8);
  }
  return result;
}

_QWORD *sub_10066A97C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t, __n128);
  __n128 v81;
  int *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  void (*v111)(char *, char *, uint64_t, __n128);
  __n128 v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  void (*v137)(char *, char *, uint64_t, __n128);
  __n128 v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  void (*v153)(char *, char *, uint64_t, __n128);
  __n128 v154;
  int *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  __n128 v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void (*v219)(char *, char *, uint64_t, __n128);
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  _QWORD *v225;
  int *v226;
  char *v227;
  char *v228;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v13 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
    return a1;
  }
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v14 = a2[1];
      *a1 = *a2;
      a1[1] = v14;
      swift_bridgeObjectRetain();
      v15 = a1;
      v16 = a3;
      v17 = 2;
LABEL_55:
      swift_storeEnumTagMultiPayload(v15, v16, v17);
      return a1;
    case 1:
      v18 = a2[1];
      *a1 = *a2;
      a1[1] = v18;
      v19 = (int *)type metadata accessor for WeatherData(0);
      v20 = v19[5];
      v21 = (char *)a1 + v20;
      v22 = (char *)a2 + v20;
      v23 = type metadata accessor for Locale(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v22, 1, v23))
      {
        v24 = sub_1000BA294(&qword_100BC3340);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v21, 0, 1, v23);
      }
      v26 = v19[6];
      v27 = (char *)a1 + v26;
      v28 = (char *)a2 + v26;
      v29 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
      v30 = v19[7];
      v31 = (char *)a1 + v30;
      v32 = (char *)a2 + v30;
      v33 = sub_1000BA294(&qword_100BC3348);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v32, 1, v33))
      {
        v34 = type metadata accessor for WeatherData.CachingState(0);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        v35 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v31, v32, v35);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v31, 0, 1, v33);
      }
      v36 = v19[8];
      v37 = (_QWORD *)((char *)a1 + v36);
      v38 = (_QWORD *)((char *)a2 + v36);
      v39 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
      v40 = swift_getEnumCaseMultiPayload(v38);
      v224 = a3;
      if (v40 == 1)
      {
        v45 = type metadata accessor for WeatherStatisticsModel(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v37, v38, v45);
        v42 = v37;
        v43 = v39;
        v44 = 1;
      }
      else
      {
        if (v40)
        {
          memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
          goto LABEL_24;
        }
        v41 = v38[1];
        *v37 = *v38;
        v37[1] = v41;
        swift_bridgeObjectRetain();
        v42 = v37;
        v43 = v39;
        v44 = 0;
      }
      swift_storeEnumTagMultiPayload(v42, v43, v44);
LABEL_24:
      v46 = v19[9];
      v47 = (char *)a1 + v46;
      v48 = (char *)a2 + v46;
      v49 = type metadata accessor for WeatherDataOverrides(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v48, 1, v49))
      {
        v50 = sub_1000BA294(&qword_100BC3350);
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
      }
      else
      {
        v51 = type metadata accessor for Date(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v48, 1, v51))
        {
          v52 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v47, v48, v51);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v47, 0, 1, v51);
        }
        v53 = *(int *)(v49 + 20);
        v54 = &v47[v53];
        v55 = &v48[v53];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v48[v53], 1, v51))
        {
          v56 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v54, v55, v51);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v54, 0, 1, v51);
        }
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v47, 0, 1, v49);
      }
      v222 = sub_1000BA294(&qword_100BC3358);
      v57 = *(int *)(v222 + 48);
      v225 = a1;
      v58 = (char *)a1 + v57;
      v223 = a2;
      v59 = (char *)a2 + v57;
      v60 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v58, v59, v60);
      v61 = type metadata accessor for PreprocessedWeatherData(0);
      *(_QWORD *)&v58[*(int *)(v61 + 20)] = *(_QWORD *)&v59[*(int *)(v61 + 20)];
      v226 = (int *)v61;
      v227 = v58;
      v62 = *(int *)(v61 + 24);
      v63 = &v58[v62];
      v228 = v59;
      v64 = &v59[v62];
      v65 = *(_QWORD *)&v59[v62];
      v66 = *((_QWORD *)v64 + 1);
      *(_QWORD *)v63 = v65;
      *((_QWORD *)v63 + 1) = v66;
      v67 = *((_QWORD *)v64 + 3);
      *((_QWORD *)v63 + 2) = *((_QWORD *)v64 + 2);
      *((_QWORD *)v63 + 3) = v67;
      v68 = *((_QWORD *)v64 + 5);
      *((_QWORD *)v63 + 4) = *((_QWORD *)v64 + 4);
      *((_QWORD *)v63 + 5) = v68;
      v69 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
      v70 = *(int *)(v69 + 28);
      v71 = &v63[v70];
      v72 = &v64[v70];
      v73 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v72, 1, v73))
      {
        v74 = sub_1000BA294(&qword_100BC3360);
        memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
      }
      else
      {
        v75 = *((_QWORD *)v72 + 1);
        *(_QWORD *)v71 = *(_QWORD *)v72;
        *((_QWORD *)v71 + 1) = v75;
        v76 = *(int *)(v73 + 20);
        v77 = &v71[v76];
        v78 = &v72[v76];
        v79 = type metadata accessor for TemperatureScaleConfiguration(0);
        v80 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v79 - 8) + 16);
        v81 = swift_bridgeObjectRetain();
        v80(v77, v78, v79, v81);
        v82 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
        *(_QWORD *)&v77[v82[5]] = *(_QWORD *)&v78[v82[5]];
        *(_QWORD *)&v77[v82[6]] = *(_QWORD *)&v78[v82[6]];
        *(_QWORD *)&v77[v82[7]] = *(_QWORD *)&v78[v82[7]];
        v83 = v82[8];
        v84 = &v77[v83];
        v85 = &v78[v83];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        *(_QWORD *)v84 = v87;
        *((_QWORD *)v84 + 1) = v86;
        v77[v82[9]] = v78[v82[9]];
        swift_bridgeObjectRetain();
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v71, 0, 1, v73);
      }
      v88 = *(int *)(v69 + 32);
      v89 = &v63[v88];
      v90 = &v64[v88];
      v91 = *((_QWORD *)v90 + 1);
      *(_QWORD *)v89 = *(_QWORD *)v90;
      *((_QWORD *)v89 + 1) = v91;
      v92 = v226[7];
      v93 = &v227[v92];
      v94 = &v228[v92];
      *(_QWORD *)&v227[v92] = *(_QWORD *)&v228[v92];
      v95 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
      v96 = &v93[v95];
      v97 = &v94[v95];
      v98 = type metadata accessor for WeatherDescription(0);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v97, 1, v98))
      {
        v99 = sub_1000BA294(&qword_100BC3368);
        memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v98 - 8) + 16))(v96, v97, v98);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v96, 0, 1, v98);
      }
      v100 = v226[8];
      v101 = &v227[v100];
      v102 = &v228[v100];
      v103 = *(_QWORD *)&v228[v100 + 8];
      *(_QWORD *)v101 = *(_QWORD *)&v228[v100];
      *((_QWORD *)v101 + 1) = v103;
      v104 = *(_QWORD *)&v228[v100 + 24];
      *((_QWORD *)v101 + 2) = *(_QWORD *)&v228[v100 + 16];
      *((_QWORD *)v101 + 3) = v104;
      v105 = *(_QWORD *)&v228[v100 + 40];
      *((_QWORD *)v101 + 4) = *(_QWORD *)&v228[v100 + 32];
      *((_QWORD *)v101 + 5) = v105;
      v106 = *(_QWORD *)&v228[v100 + 56];
      *((_QWORD *)v101 + 6) = *(_QWORD *)&v228[v100 + 48];
      *((_QWORD *)v101 + 7) = v106;
      v107 = *(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32);
      v108 = &v101[v107];
      v109 = &v102[v107];
      v110 = type metadata accessor for Date(0);
      v111 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v110 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v112 = swift_bridgeObjectRetain();
      v219 = v111;
      v220 = v110;
      v111(v108, v109, v110, v112);
      v113 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
      v114 = *(int *)(v113 + 20);
      v115 = &v108[v114];
      v116 = &v109[v114];
      v117 = type metadata accessor for Elevation(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v116, 1, v117))
      {
        v118 = sub_1000BA294(&qword_100BC3370);
        memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v117 - 8) + 16))(v115, v116, v117);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v115, 0, 1, v117);
      }
      v119 = *(int *)(v113 + 24);
      v120 = &v108[v119];
      v121 = &v109[v119];
      v122 = type metadata accessor for BackgroundMoonData(0);
      v221 = v113;
      v217 = v122;
      v218 = v117;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v121, 1, v122))
      {
        v123 = sub_1000BA294(&qword_100BC3378);
        memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v122 - 8) + 16))(v120, v121, v122);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v120, 0, 1, v122);
      }
      v124 = v226[9];
      v125 = &v227[v124];
      v126 = &v228[v124];
      v127 = *((_QWORD *)v126 + 1);
      *(_QWORD *)v125 = *(_QWORD *)v126;
      *((_QWORD *)v125 + 1) = v127;
      v128 = *((_QWORD *)v126 + 3);
      *((_QWORD *)v125 + 2) = *((_QWORD *)v126 + 2);
      *((_QWORD *)v125 + 3) = v128;
      v129 = *((_QWORD *)v126 + 5);
      *((_QWORD *)v125 + 4) = *((_QWORD *)v126 + 4);
      *((_QWORD *)v125 + 5) = v129;
      v130 = *((_QWORD *)v126 + 7);
      *((_QWORD *)v125 + 6) = *((_QWORD *)v126 + 6);
      *((_QWORD *)v125 + 7) = v130;
      v131 = *((_QWORD *)v126 + 9);
      *((_QWORD *)v125 + 8) = *((_QWORD *)v126 + 8);
      *((_QWORD *)v125 + 9) = v131;
      v132 = *((_QWORD *)v126 + 11);
      *((_QWORD *)v125 + 10) = *((_QWORD *)v126 + 10);
      *((_QWORD *)v125 + 11) = v132;
      v133 = *((_QWORD *)v126 + 13);
      *((_QWORD *)v125 + 12) = *((_QWORD *)v126 + 12);
      *((_QWORD *)v125 + 13) = v133;
      v134 = v226[10];
      v135 = &v227[v134];
      v136 = &v228[v134];
      v137 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v98 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v138 = swift_bridgeObjectRetain();
      v137(v135, v136, v98, v138);
      v139 = *(int *)(type metadata accessor for UVIndexComponentPreprocessedDataModel(0) + 20);
      v140 = &v135[v139];
      v141 = &v136[v139];
      v142 = *((_QWORD *)v141 + 1);
      *(_QWORD *)v140 = *(_QWORD *)v141;
      *((_QWORD *)v140 + 1) = v142;
      v143 = v226[11];
      v144 = &v227[v143];
      v145 = &v228[v143];
      v146 = *((_QWORD *)v145 + 1);
      *(_QWORD *)v144 = *(_QWORD *)v145;
      *((_QWORD *)v144 + 1) = v146;
      v147 = *((_QWORD *)v145 + 3);
      *((_QWORD *)v144 + 2) = *((_QWORD *)v145 + 2);
      *((_QWORD *)v144 + 3) = v147;
      v148 = *((_QWORD *)v145 + 5);
      *((_QWORD *)v144 + 4) = *((_QWORD *)v145 + 4);
      *((_QWORD *)v144 + 5) = v148;
      v149 = v226[12];
      v150 = &v227[v149];
      v151 = &v228[v149];
      v152 = type metadata accessor for PressureTrend(0);
      v153 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v152 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v154 = swift_bridgeObjectRetain();
      v153(v150, v151, v152, v154);
      v155 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
      v156 = v155[5];
      v157 = &v150[v156];
      v158 = &v151[v156];
      v159 = *((_QWORD *)v158 + 1);
      *(_QWORD *)v157 = *(_QWORD *)v158;
      *((_QWORD *)v157 + 1) = v159;
      v160 = v155[6];
      v161 = &v150[v160];
      v162 = &v151[v160];
      v216 = *((_QWORD *)v162 + 1);
      *(_QWORD *)v161 = *(_QWORD *)v162;
      *((_QWORD *)v161 + 1) = v216;
      v163 = v155[7];
      v164 = &v150[v163];
      v165 = &v151[v163];
      v215 = *((_QWORD *)v165 + 1);
      *(_QWORD *)v164 = *(_QWORD *)v165;
      *((_QWORD *)v164 + 1) = v215;
      *(_QWORD *)&v150[v155[8]] = *(_QWORD *)&v151[v155[8]];
      v166 = v155[9];
      v167 = &v150[v166];
      v168 = &v151[v166];
      v214 = *((_QWORD *)v168 + 1);
      *(_QWORD *)v167 = *(_QWORD *)v168;
      *((_QWORD *)v167 + 1) = v214;
      v169 = v226[13];
      v170 = &v227[v169];
      v171 = &v228[v169];
      v172 = *((_QWORD *)v171 + 1);
      *(_QWORD *)v170 = *(_QWORD *)v171;
      *((_QWORD *)v170 + 1) = v172;
      v173 = *((_QWORD *)v171 + 3);
      *((_QWORD *)v170 + 2) = *((_QWORD *)v171 + 2);
      *((_QWORD *)v170 + 3) = v173;
      v174 = *((_QWORD *)v171 + 5);
      *((_QWORD *)v170 + 4) = *((_QWORD *)v171 + 4);
      *((_QWORD *)v170 + 5) = v174;
      v175 = *((_QWORD *)v171 + 7);
      *((_QWORD *)v170 + 6) = *((_QWORD *)v171 + 6);
      *((_QWORD *)v170 + 7) = v175;
      v176 = *((_QWORD *)v171 + 9);
      *((_QWORD *)v170 + 8) = *((_QWORD *)v171 + 8);
      *((_QWORD *)v170 + 9) = v176;
      v177 = *((_QWORD *)v171 + 11);
      *((_QWORD *)v170 + 10) = *((_QWORD *)v171 + 10);
      *((_QWORD *)v170 + 11) = v177;
      v178 = *((_QWORD *)v171 + 13);
      *((_QWORD *)v170 + 12) = *((_QWORD *)v171 + 12);
      *((_QWORD *)v170 + 13) = v178;
      v179 = *((_QWORD *)v171 + 15);
      *((_QWORD *)v170 + 14) = *((_QWORD *)v171 + 14);
      *((_QWORD *)v170 + 15) = v179;
      v180 = *((_QWORD *)v171 + 17);
      *((_QWORD *)v170 + 16) = *((_QWORD *)v171 + 16);
      *((_QWORD *)v170 + 17) = v180;
      v181 = *((_QWORD *)v171 + 19);
      *((_QWORD *)v170 + 18) = *((_QWORD *)v171 + 18);
      *((_QWORD *)v170 + 19) = v181;
      v182 = *((_QWORD *)v171 + 21);
      *((_QWORD *)v170 + 20) = *((_QWORD *)v171 + 20);
      *((_QWORD *)v170 + 21) = v182;
      v183 = *((_QWORD *)v171 + 23);
      *((_QWORD *)v170 + 22) = *((_QWORD *)v171 + 22);
      *((_QWORD *)v170 + 23) = v183;
      v184 = *((_QWORD *)v171 + 25);
      *((_QWORD *)v170 + 24) = *((_QWORD *)v171 + 24);
      *((_QWORD *)v170 + 25) = v184;
      *((_OWORD *)v170 + 13) = *((_OWORD *)v171 + 13);
      *((_QWORD *)v170 + 28) = *((_QWORD *)v171 + 28);
      v185 = v226[14];
      v186 = &v227[v185];
      v187 = &v228[v185];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v188 = swift_bridgeObjectRetain();
      v219(v186, v187, v220, v188);
      v189 = *(int *)(v221 + 20);
      v190 = &v186[v189];
      v191 = &v187[v189];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v187[v189], 1, v218))
      {
        v192 = sub_1000BA294(&qword_100BC3370);
        memcpy(v190, v191, *(_QWORD *)(*(_QWORD *)(v192 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v218 - 8) + 16))(v190, v191, v218);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v190, 0, 1, v218);
      }
      v193 = *(int *)(v221 + 24);
      v194 = &v186[v193];
      v195 = &v187[v193];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v187[v193], 1, v217))
      {
        v196 = sub_1000BA294(&qword_100BC3378);
        memcpy(v194, v195, *(_QWORD *)(*(_QWORD *)(v196 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v217 - 8) + 16))(v194, v195, v217);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v194, 0, 1, v217);
      }
      v197 = v226[15];
      v198 = &v227[v197];
      v199 = &v228[v197];
      v200 = *((_QWORD *)v199 + 1);
      *(_QWORD *)v198 = *(_QWORD *)v199;
      *((_QWORD *)v198 + 1) = v200;
      v201 = *((_QWORD *)v199 + 3);
      *((_QWORD *)v198 + 2) = *((_QWORD *)v199 + 2);
      *((_QWORD *)v198 + 3) = v201;
      v202 = *((_QWORD *)v199 + 5);
      *((_QWORD *)v198 + 4) = *((_QWORD *)v199 + 4);
      *((_QWORD *)v198 + 5) = v202;
      v203 = *((_QWORD *)v199 + 7);
      *((_QWORD *)v198 + 6) = *((_QWORD *)v199 + 6);
      *((_QWORD *)v198 + 7) = v203;
      v204 = *((_QWORD *)v199 + 9);
      *((_QWORD *)v198 + 8) = *((_QWORD *)v199 + 8);
      *((_QWORD *)v198 + 9) = v204;
      v205 = *((_QWORD *)v199 + 11);
      *((_QWORD *)v198 + 10) = *((_QWORD *)v199 + 10);
      *((_QWORD *)v198 + 11) = v205;
      v206 = *((_QWORD *)v199 + 13);
      *((_QWORD *)v198 + 12) = *((_QWORD *)v199 + 12);
      *((_QWORD *)v198 + 13) = v206;
      v207 = *(int *)(v222 + 64);
      v208 = (_QWORD *)((char *)v225 + v207);
      v209 = (_QWORD *)((char *)v223 + v207);
      v210 = type metadata accessor for NewsDataModel(0);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (swift_getEnumCaseMultiPayload(v209) == 1)
      {
        *v208 = *v209;
        swift_bridgeObjectRetain();
        v211 = 1;
      }
      else
      {
        v212 = type metadata accessor for News(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v212 - 8) + 16))(v208, v209, v212);
        v211 = 0;
      }
      swift_storeEnumTagMultiPayload(v208, v210, v211);
      a1 = v225;
      v15 = v225;
      v16 = v224;
      v17 = 1;
      goto LABEL_55;
    case 0:
      v9 = type metadata accessor for NewsDataModel(0);
      if (swift_getEnumCaseMultiPayload(a2) == 1)
      {
        *a1 = *a2;
        swift_bridgeObjectRetain();
        v10 = a1;
        v11 = v9;
        v12 = 1;
      }
      else
      {
        v25 = type metadata accessor for News(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(a1, a2, v25);
        v10 = a1;
        v11 = v9;
        v12 = 0;
      }
      swift_storeEnumTagMultiPayload(v10, v11, v12);
      v15 = a1;
      v16 = a3;
      v17 = 0;
      goto LABEL_55;
  }
  memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  return a1;
}

_QWORD *sub_10066B704(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  int EnumCaseMultiPayload;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t, __n128);
  __n128 v70;
  int *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t, __n128);
  __n128 v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  void (*v112)(char *, char *, uint64_t, __n128);
  __n128 v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  void (*v124)(char *, char *, uint64_t, __n128);
  __n128 v125;
  int *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  __n128 v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v164;
  void (*v165)(char *, char *, uint64_t, __n128);
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  _QWORD *v171;
  int *v172;
  char *v173;
  char *v174;

  v3 = (_QWORD *)a1;
  if ((_QWORD *)a1 == a2)
    return v3;
  sub_1000215BC(a1, type metadata accessor for LocationWeatherDataState);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      *v3 = *a2;
      v3[1] = a2[1];
      swift_bridgeObjectRetain();
      v11 = v3;
      v12 = a3;
      v13 = 2;
LABEL_54:
      swift_storeEnumTagMultiPayload(v11, v12, v13);
      return v3;
    case 1:
      v170 = a3;
      *v3 = *a2;
      v3[1] = a2[1];
      v14 = (int *)type metadata accessor for WeatherData(0);
      v15 = v14[5];
      v16 = (char *)v3 + v15;
      v17 = (char *)a2 + v15;
      v18 = type metadata accessor for Locale(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v17, 1, v18))
      {
        v19 = sub_1000BA294(&qword_100BC3340);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v16, 0, 1, v18);
      }
      v21 = v14[6];
      v22 = (char *)v3 + v21;
      v23 = (char *)a2 + v21;
      v24 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
      v25 = v14[7];
      v26 = (char *)v3 + v25;
      v27 = (char *)a2 + v25;
      v28 = sub_1000BA294(&qword_100BC3348);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v27, 1, v28))
      {
        v29 = type metadata accessor for WeatherData.CachingState(0);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        v30 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v26, v27, v30);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v26, 0, 1, v28);
      }
      v31 = v14[8];
      v32 = (_QWORD *)((char *)v3 + v31);
      v33 = (_QWORD *)((char *)a2 + v31);
      v34 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
      v35 = swift_getEnumCaseMultiPayload(v33);
      if (v35 == 1)
      {
        v39 = type metadata accessor for WeatherStatisticsModel(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v32, v33, v39);
        v36 = v32;
        v37 = v34;
        v38 = 1;
      }
      else
      {
        if (v35)
        {
          memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
          goto LABEL_23;
        }
        *v32 = *v33;
        v32[1] = v33[1];
        swift_bridgeObjectRetain();
        v36 = v32;
        v37 = v34;
        v38 = 0;
      }
      swift_storeEnumTagMultiPayload(v36, v37, v38);
LABEL_23:
      v40 = v14[9];
      v41 = (char *)v3 + v40;
      v42 = (char *)a2 + v40;
      v43 = type metadata accessor for WeatherDataOverrides(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v42, 1, v43))
      {
        v44 = sub_1000BA294(&qword_100BC3350);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        v45 = type metadata accessor for Date(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v42, 1, v45))
        {
          v46 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v41, v42, v45);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v41, 0, 1, v45);
        }
        v47 = *(int *)(v43 + 20);
        v48 = &v41[v47];
        v49 = &v42[v47];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v42[v47], 1, v45))
        {
          v50 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v48, v49, v45);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v48, 0, 1, v45);
        }
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v41, 0, 1, v43);
      }
      v168 = sub_1000BA294(&qword_100BC3358);
      v51 = *(int *)(v168 + 48);
      v171 = v3;
      v52 = (char *)v3 + v51;
      v169 = a2;
      v53 = (char *)a2 + v51;
      v54 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v53, v54);
      v55 = type metadata accessor for PreprocessedWeatherData(0);
      *(_QWORD *)&v52[*(int *)(v55 + 20)] = *(_QWORD *)&v53[*(int *)(v55 + 20)];
      v172 = (int *)v55;
      v173 = v52;
      v56 = *(int *)(v55 + 24);
      v57 = &v52[v56];
      v174 = v53;
      v58 = &v53[v56];
      *(_QWORD *)v57 = *(_QWORD *)&v53[v56];
      *((_QWORD *)v57 + 1) = *(_QWORD *)&v53[v56 + 8];
      *((_QWORD *)v57 + 2) = *(_QWORD *)&v53[v56 + 16];
      *((_QWORD *)v57 + 3) = *(_QWORD *)&v53[v56 + 24];
      *((_QWORD *)v57 + 4) = *(_QWORD *)&v53[v56 + 32];
      *((_QWORD *)v57 + 5) = *(_QWORD *)&v53[v56 + 40];
      v59 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
      v60 = *(int *)(v59 + 28);
      v61 = &v57[v60];
      v62 = &v58[v60];
      v63 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v62, 1, v63))
      {
        v64 = sub_1000BA294(&qword_100BC3360);
        memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v61 = *(_QWORD *)v62;
        *((_QWORD *)v61 + 1) = *((_QWORD *)v62 + 1);
        v65 = *(int *)(v63 + 20);
        v66 = &v61[v65];
        v67 = &v62[v65];
        v68 = type metadata accessor for TemperatureScaleConfiguration(0);
        v69 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v68 - 8) + 16);
        v70 = swift_bridgeObjectRetain();
        v69(v66, v67, v68, v70);
        v71 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
        *(_QWORD *)&v66[v71[5]] = *(_QWORD *)&v67[v71[5]];
        *(_QWORD *)&v66[v71[6]] = *(_QWORD *)&v67[v71[6]];
        *(_QWORD *)&v66[v71[7]] = *(_QWORD *)&v67[v71[7]];
        v72 = v71[8];
        v73 = &v66[v72];
        v74 = &v67[v72];
        *(_QWORD *)v73 = *(_QWORD *)v74;
        *((_QWORD *)v73 + 1) = *((_QWORD *)v74 + 1);
        v66[v71[9]] = v67[v71[9]];
        swift_bridgeObjectRetain();
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v61, 0, 1, v63);
      }
      v75 = *(int *)(v59 + 32);
      v76 = &v57[v75];
      v77 = &v58[v75];
      *(_QWORD *)v76 = *(_QWORD *)v77;
      *((_QWORD *)v76 + 1) = *((_QWORD *)v77 + 1);
      v78 = v172[7];
      v79 = &v173[v78];
      v80 = &v174[v78];
      *(_QWORD *)&v173[v78] = *(_QWORD *)&v174[v78];
      v81 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
      v82 = &v79[v81];
      v83 = &v80[v81];
      v84 = type metadata accessor for WeatherDescription(0);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v83, 1, v84))
      {
        v85 = sub_1000BA294(&qword_100BC3368);
        memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 16))(v82, v83, v84);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v82, 0, 1, v84);
      }
      v86 = v172[8];
      v87 = &v173[v86];
      v88 = &v174[v86];
      *(_QWORD *)v87 = *(_QWORD *)&v174[v86];
      *((_QWORD *)v87 + 1) = *(_QWORD *)&v174[v86 + 8];
      *((_QWORD *)v87 + 2) = *(_QWORD *)&v174[v86 + 16];
      *((_QWORD *)v87 + 3) = *(_QWORD *)&v174[v86 + 24];
      *((_QWORD *)v87 + 4) = *(_QWORD *)&v174[v86 + 32];
      *((_QWORD *)v87 + 5) = *(_QWORD *)&v174[v86 + 40];
      *((_QWORD *)v87 + 6) = *(_QWORD *)&v174[v86 + 48];
      *((_QWORD *)v87 + 7) = *(_QWORD *)&v174[v86 + 56];
      v89 = *(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32);
      v90 = &v87[v89];
      v91 = &v88[v89];
      v92 = type metadata accessor for Date(0);
      v93 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v92 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v94 = swift_bridgeObjectRetain();
      v165 = v93;
      v166 = v92;
      v93(v90, v91, v92, v94);
      v95 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
      v96 = *(int *)(v95 + 20);
      v97 = &v90[v96];
      v98 = &v91[v96];
      v99 = type metadata accessor for Elevation(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v98, 1, v99))
      {
        v100 = sub_1000BA294(&qword_100BC3370);
        memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v99 - 8) + 16))(v97, v98, v99);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v97, 0, 1, v99);
      }
      v101 = *(int *)(v95 + 24);
      v102 = &v90[v101];
      v103 = &v91[v101];
      v104 = type metadata accessor for BackgroundMoonData(0);
      v167 = v95;
      v164 = v99;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v103, 1, v104))
      {
        v105 = sub_1000BA294(&qword_100BC3378);
        memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 16))(v102, v103, v104);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v102, 0, 1, v104);
      }
      v106 = v172[9];
      v107 = &v173[v106];
      v108 = &v174[v106];
      *(_QWORD *)v107 = *(_QWORD *)v108;
      *((_QWORD *)v107 + 1) = *((_QWORD *)v108 + 1);
      *((_QWORD *)v107 + 2) = *((_QWORD *)v108 + 2);
      *((_QWORD *)v107 + 3) = *((_QWORD *)v108 + 3);
      *((_QWORD *)v107 + 4) = *((_QWORD *)v108 + 4);
      *((_QWORD *)v107 + 5) = *((_QWORD *)v108 + 5);
      *((_QWORD *)v107 + 6) = *((_QWORD *)v108 + 6);
      *((_QWORD *)v107 + 7) = *((_QWORD *)v108 + 7);
      *((_QWORD *)v107 + 8) = *((_QWORD *)v108 + 8);
      *((_QWORD *)v107 + 9) = *((_QWORD *)v108 + 9);
      *((_QWORD *)v107 + 10) = *((_QWORD *)v108 + 10);
      *((_QWORD *)v107 + 11) = *((_QWORD *)v108 + 11);
      *((_QWORD *)v107 + 12) = *((_QWORD *)v108 + 12);
      *((_QWORD *)v107 + 13) = *((_QWORD *)v108 + 13);
      v109 = v172[10];
      v110 = &v173[v109];
      v111 = &v174[v109];
      v112 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v84 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v113 = swift_bridgeObjectRetain();
      v112(v110, v111, v84, v113);
      v114 = *(int *)(type metadata accessor for UVIndexComponentPreprocessedDataModel(0) + 20);
      v115 = &v110[v114];
      v116 = &v111[v114];
      *(_QWORD *)v115 = *(_QWORD *)v116;
      *((_QWORD *)v115 + 1) = *((_QWORD *)v116 + 1);
      v117 = v172[11];
      v118 = &v173[v117];
      v119 = &v174[v117];
      *(_QWORD *)v118 = *(_QWORD *)v119;
      *((_QWORD *)v118 + 1) = *((_QWORD *)v119 + 1);
      *((_QWORD *)v118 + 2) = *((_QWORD *)v119 + 2);
      *((_QWORD *)v118 + 3) = *((_QWORD *)v119 + 3);
      *((_QWORD *)v118 + 4) = *((_QWORD *)v119 + 4);
      *((_QWORD *)v118 + 5) = *((_QWORD *)v119 + 5);
      v120 = v172[12];
      v121 = &v173[v120];
      v122 = &v174[v120];
      v123 = type metadata accessor for PressureTrend(0);
      v124 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v123 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v125 = swift_bridgeObjectRetain();
      v124(v121, v122, v123, v125);
      v126 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
      v127 = v126[5];
      v128 = &v121[v127];
      v129 = &v122[v127];
      *(_QWORD *)v128 = *(_QWORD *)v129;
      *((_QWORD *)v128 + 1) = *((_QWORD *)v129 + 1);
      v130 = v126[6];
      v131 = &v121[v130];
      v132 = &v122[v130];
      *(_QWORD *)v131 = *(_QWORD *)v132;
      *((_QWORD *)v131 + 1) = *((_QWORD *)v132 + 1);
      v133 = v126[7];
      v134 = &v121[v133];
      v135 = &v122[v133];
      *(_QWORD *)v134 = *(_QWORD *)v135;
      *((_QWORD *)v134 + 1) = *((_QWORD *)v135 + 1);
      *(_QWORD *)&v121[v126[8]] = *(_QWORD *)&v122[v126[8]];
      v136 = v126[9];
      v137 = &v121[v136];
      v138 = &v122[v136];
      *(_QWORD *)v137 = *(_QWORD *)v138;
      *((_QWORD *)v137 + 1) = *((_QWORD *)v138 + 1);
      v139 = v172[13];
      v140 = &v173[v139];
      v141 = &v174[v139];
      *(_QWORD *)v140 = *(_QWORD *)v141;
      *((_QWORD *)v140 + 1) = *((_QWORD *)v141 + 1);
      *((_QWORD *)v140 + 2) = *((_QWORD *)v141 + 2);
      *((_QWORD *)v140 + 3) = *((_QWORD *)v141 + 3);
      *((_QWORD *)v140 + 4) = *((_QWORD *)v141 + 4);
      *((_QWORD *)v140 + 5) = *((_QWORD *)v141 + 5);
      *((_QWORD *)v140 + 6) = *((_QWORD *)v141 + 6);
      *((_QWORD *)v140 + 7) = *((_QWORD *)v141 + 7);
      *((_QWORD *)v140 + 8) = *((_QWORD *)v141 + 8);
      *((_QWORD *)v140 + 9) = *((_QWORD *)v141 + 9);
      *((_QWORD *)v140 + 10) = *((_QWORD *)v141 + 10);
      *((_QWORD *)v140 + 11) = *((_QWORD *)v141 + 11);
      *((_QWORD *)v140 + 12) = *((_QWORD *)v141 + 12);
      *((_QWORD *)v140 + 13) = *((_QWORD *)v141 + 13);
      *((_QWORD *)v140 + 14) = *((_QWORD *)v141 + 14);
      *((_QWORD *)v140 + 15) = *((_QWORD *)v141 + 15);
      *((_QWORD *)v140 + 16) = *((_QWORD *)v141 + 16);
      *((_QWORD *)v140 + 17) = *((_QWORD *)v141 + 17);
      *((_QWORD *)v140 + 18) = *((_QWORD *)v141 + 18);
      *((_QWORD *)v140 + 19) = *((_QWORD *)v141 + 19);
      *((_QWORD *)v140 + 20) = *((_QWORD *)v141 + 20);
      *((_QWORD *)v140 + 21) = *((_QWORD *)v141 + 21);
      *((_QWORD *)v140 + 22) = *((_QWORD *)v141 + 22);
      *((_QWORD *)v140 + 23) = *((_QWORD *)v141 + 23);
      *((_QWORD *)v140 + 24) = *((_QWORD *)v141 + 24);
      *((_QWORD *)v140 + 25) = *((_QWORD *)v141 + 25);
      *((_QWORD *)v140 + 26) = *((_QWORD *)v141 + 26);
      *((_QWORD *)v140 + 27) = *((_QWORD *)v141 + 27);
      *((_QWORD *)v140 + 28) = *((_QWORD *)v141 + 28);
      v142 = v172[14];
      v143 = &v173[v142];
      v144 = &v174[v142];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v145 = swift_bridgeObjectRetain();
      v165(v143, v144, v166, v145);
      v146 = *(int *)(v167 + 20);
      v147 = &v143[v146];
      v148 = &v144[v146];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v144[v146], 1, v164))
      {
        v149 = sub_1000BA294(&qword_100BC3370);
        memcpy(v147, v148, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v164 - 8) + 16))(v147, v148, v164);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v147, 0, 1, v164);
      }
      v150 = *(int *)(v167 + 24);
      v151 = &v143[v150];
      v152 = &v144[v150];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v144[v150], 1, v104))
      {
        v153 = sub_1000BA294(&qword_100BC3378);
        memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 16))(v151, v152, v104);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v151, 0, 1, v104);
      }
      v154 = v172[15];
      v155 = &v173[v154];
      v156 = &v174[v154];
      *(_QWORD *)v155 = *(_QWORD *)v156;
      *((_QWORD *)v155 + 1) = *((_QWORD *)v156 + 1);
      *((_QWORD *)v155 + 2) = *((_QWORD *)v156 + 2);
      *((_QWORD *)v155 + 3) = *((_QWORD *)v156 + 3);
      *((_QWORD *)v155 + 4) = *((_QWORD *)v156 + 4);
      *((_QWORD *)v155 + 5) = *((_QWORD *)v156 + 5);
      *((_QWORD *)v155 + 6) = *((_QWORD *)v156 + 6);
      *((_QWORD *)v155 + 7) = *((_QWORD *)v156 + 7);
      *((_QWORD *)v155 + 8) = *((_QWORD *)v156 + 8);
      *((_QWORD *)v155 + 9) = *((_QWORD *)v156 + 9);
      *((_QWORD *)v155 + 10) = *((_QWORD *)v156 + 10);
      *((_QWORD *)v155 + 11) = *((_QWORD *)v156 + 11);
      *((_QWORD *)v155 + 12) = *((_QWORD *)v156 + 12);
      *((_QWORD *)v155 + 13) = *((_QWORD *)v156 + 13);
      v157 = *(int *)(v168 + 64);
      v158 = (_QWORD *)((char *)v171 + v157);
      v159 = (_QWORD *)((char *)v169 + v157);
      v160 = type metadata accessor for NewsDataModel(0);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (swift_getEnumCaseMultiPayload(v159) == 1)
      {
        *v158 = *v159;
        swift_bridgeObjectRetain();
        v161 = 1;
      }
      else
      {
        v162 = type metadata accessor for News(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v162 - 8) + 16))(v158, v159, v162);
        v161 = 0;
      }
      swift_storeEnumTagMultiPayload(v158, v160, v161);
      v3 = v171;
      v11 = v171;
      v12 = v170;
      v13 = 1;
      goto LABEL_54;
    case 0:
      v7 = type metadata accessor for NewsDataModel(0);
      if (swift_getEnumCaseMultiPayload(a2) == 1)
      {
        *v3 = *a2;
        swift_bridgeObjectRetain();
        v8 = v3;
        v9 = v7;
        v10 = 1;
      }
      else
      {
        v20 = type metadata accessor for News(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v3, a2, v20);
        v8 = v3;
        v9 = v7;
        v10 = 0;
      }
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      v11 = v3;
      v12 = a3;
      v13 = 0;
      goto LABEL_54;
  }
  memcpy(v3, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return v3;
}

_OWORD *sub_10066C600(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  __int128 v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  int *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  void (*v122)(char *, char *);
  uint64_t v123;
  uint64_t v124;
  _OWORD *v125;
  uint64_t v126;
  _OWORD *v127;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
  if (EnumCaseMultiPayload == 1)
  {
    v126 = a3;
    *a1 = *a2;
    v8 = (int *)type metadata accessor for WeatherData(0);
    v9 = v8[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Locale(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12))
    {
      v13 = sub_1000BA294(&qword_100BC3340);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
    }
    v18 = v8[6];
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    v21 = type metadata accessor for WeatherDataModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
    v22 = v8[7];
    v23 = (char *)a1 + v22;
    v24 = (char *)a2 + v22;
    v25 = sub_1000BA294(&qword_100BC3348);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v24, 1, v25))
    {
      v26 = type metadata accessor for WeatherData.CachingState(0);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v27 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v23, v24, v27);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v23, 0, 1, v25);
    }
    v28 = v8[8];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
    if (swift_getEnumCaseMultiPayload(v30) == 1)
    {
      v32 = type metadata accessor for WeatherStatisticsModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v29, v30, v32);
      swift_storeEnumTagMultiPayload(v29, v31, 1);
    }
    else
    {
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    v33 = v8[9];
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v36 = type metadata accessor for WeatherDataOverrides(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v35, 1, v36))
    {
      v37 = sub_1000BA294(&qword_100BC3350);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      v38 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v35, 1, v38))
      {
        v39 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v34, v35, v38);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v34, 0, 1, v38);
      }
      v40 = *(int *)(v36 + 20);
      v41 = &v34[v40];
      v42 = &v35[v40];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v35[v40], 1, v38))
      {
        v43 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v41, v42, v38);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v41, 0, 1, v38);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v34, 0, 1, v36);
    }
    v124 = sub_1000BA294(&qword_100BC3358);
    v125 = a2;
    v44 = *(int *)(v124 + 48);
    v127 = a1;
    v45 = (char *)a1 + v44;
    v46 = (char *)a2 + v44;
    v47 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v45, v46, v47);
    v48 = (int *)type metadata accessor for PreprocessedWeatherData(0);
    *(_QWORD *)&v45[v48[5]] = *(_QWORD *)&v46[v48[5]];
    v49 = v48[6];
    v50 = &v45[v49];
    v51 = &v46[v49];
    v52 = *(_OWORD *)&v46[v49 + 16];
    *(_OWORD *)v50 = *(_OWORD *)&v46[v49];
    *((_OWORD *)v50 + 1) = v52;
    *((_OWORD *)v50 + 2) = *(_OWORD *)&v46[v49 + 32];
    v53 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
    v54 = *(int *)(v53 + 28);
    v55 = &v50[v54];
    v56 = &v51[v54];
    v57 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v56, 1, v57))
    {
      v58 = sub_1000BA294(&qword_100BC3360);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v55 = *(_OWORD *)v56;
      v59 = *(int *)(v57 + 20);
      v60 = &v55[v59];
      v61 = &v56[v59];
      v62 = type metadata accessor for TemperatureScaleConfiguration(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 32))(v60, v61, v62);
      v63 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
      *(_QWORD *)&v60[v63[5]] = *(_QWORD *)&v61[v63[5]];
      *(_QWORD *)&v60[v63[6]] = *(_QWORD *)&v61[v63[6]];
      *(_QWORD *)&v60[v63[7]] = *(_QWORD *)&v61[v63[7]];
      *(_OWORD *)&v60[v63[8]] = *(_OWORD *)&v61[v63[8]];
      v60[v63[9]] = v61[v63[9]];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v55, 0, 1, v57);
    }
    *(_OWORD *)&v50[*(int *)(v53 + 32)] = *(_OWORD *)&v51[*(int *)(v53 + 32)];
    v64 = v48[7];
    v65 = &v45[v64];
    v66 = &v46[v64];
    *(_QWORD *)&v45[v64] = *(_QWORD *)&v46[v64];
    v67 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
    v68 = &v65[v67];
    v69 = &v66[v67];
    v70 = type metadata accessor for WeatherDescription(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v69, 1, v70))
    {
      v71 = sub_1000BA294(&qword_100BC3368);
      memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 32))(v68, v69, v70);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v68, 0, 1, v70);
    }
    v72 = v48[8];
    v73 = &v45[v72];
    v74 = &v46[v72];
    v75 = *(_OWORD *)&v46[v72 + 16];
    *(_OWORD *)v73 = *(_OWORD *)&v46[v72];
    *((_OWORD *)v73 + 1) = v75;
    v76 = *(_OWORD *)&v46[v72 + 48];
    *((_OWORD *)v73 + 2) = *(_OWORD *)&v46[v72 + 32];
    *((_OWORD *)v73 + 3) = v76;
    v77 = *(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32);
    v78 = &v73[v77];
    v79 = &v74[v77];
    v80 = type metadata accessor for Date(0);
    v122 = *(void (**)(char *, char *))(*(_QWORD *)(v80 - 8) + 32);
    v123 = v80;
    v122(v78, v79);
    v81 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
    v82 = *(int *)(v81 + 20);
    v83 = &v78[v82];
    v84 = &v79[v82];
    v85 = type metadata accessor for Elevation(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v84, 1, v85))
    {
      v86 = sub_1000BA294(&qword_100BC3370);
      memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 32))(v83, v84, v85);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v83, 0, 1, v85);
    }
    v87 = *(int *)(v81 + 24);
    v88 = &v78[v87];
    v89 = &v79[v87];
    v90 = type metadata accessor for BackgroundMoonData(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v89, 1, v90))
    {
      v91 = sub_1000BA294(&qword_100BC3378);
      memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 32))(v88, v89, v90);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v88, 0, 1, v90);
    }
    memcpy(&v45[v48[9]], &v46[v48[9]], 0x70uLL);
    v92 = v48[10];
    v93 = &v45[v92];
    v94 = &v46[v92];
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 32))(&v45[v92], &v46[v92], v70);
    v95 = type metadata accessor for UVIndexComponentPreprocessedDataModel(0);
    *(_OWORD *)&v93[*(int *)(v95 + 20)] = *(_OWORD *)&v94[*(int *)(v95 + 20)];
    v96 = v48[11];
    v97 = &v45[v96];
    v98 = &v46[v96];
    v99 = *((_OWORD *)v98 + 1);
    *(_OWORD *)v97 = *(_OWORD *)v98;
    *((_OWORD *)v97 + 1) = v99;
    *((_OWORD *)v97 + 2) = *((_OWORD *)v98 + 2);
    v100 = v48[12];
    v101 = &v45[v100];
    v102 = &v46[v100];
    v103 = type metadata accessor for PressureTrend(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 32))(v101, v102, v103);
    v104 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
    *(_OWORD *)&v101[v104[5]] = *(_OWORD *)&v102[v104[5]];
    *(_OWORD *)&v101[v104[6]] = *(_OWORD *)&v102[v104[6]];
    *(_OWORD *)&v101[v104[7]] = *(_OWORD *)&v102[v104[7]];
    *(_QWORD *)&v101[v104[8]] = *(_QWORD *)&v102[v104[8]];
    *(_OWORD *)&v101[v104[9]] = *(_OWORD *)&v102[v104[9]];
    memcpy(&v45[v48[13]], &v46[v48[13]], 0xE8uLL);
    v105 = v48[14];
    v106 = &v45[v105];
    v107 = &v46[v105];
    ((void (*)(char *, char *, uint64_t))v122)(&v45[v105], &v46[v105], v123);
    v108 = *(int *)(v81 + 20);
    v109 = &v106[v108];
    v110 = &v107[v108];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v107[v108], 1, v85))
    {
      v111 = sub_1000BA294(&qword_100BC3370);
      memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 32))(v109, v110, v85);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v109, 0, 1, v85);
    }
    v112 = *(int *)(v81 + 24);
    v113 = &v106[v112];
    v114 = &v107[v112];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v114, 1, v90))
    {
      v115 = sub_1000BA294(&qword_100BC3378);
      memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 32))(v113, v114, v90);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v113, 0, 1, v90);
    }
    memcpy(&v45[v48[15]], &v46[v48[15]], 0x70uLL);
    v116 = *(int *)(v124 + 64);
    a1 = v127;
    v117 = (char *)v127 + v116;
    v118 = (char *)v125 + v116;
    v119 = type metadata accessor for NewsDataModel(0);
    if (swift_getEnumCaseMultiPayload(v118))
    {
      memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
    }
    else
    {
      v120 = type metadata accessor for News(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v120 - 8) + 32))(v117, v118, v120);
      swift_storeEnumTagMultiPayload(v117, v119, 0);
    }
    v15 = v127;
    v16 = v126;
    v17 = 1;
    goto LABEL_48;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = type metadata accessor for NewsDataModel(0);
    if (swift_getEnumCaseMultiPayload(a2))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      v14 = type metadata accessor for News(0);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
      swift_storeEnumTagMultiPayload(a1, v7, 0);
    }
    v15 = a1;
    v16 = a3;
    v17 = 0;
LABEL_48:
    swift_storeEnumTagMultiPayload(v15, v16, v17);
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

double destroy for WeatherDataState(_QWORD *a1)
{
  double result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1[3]).n128_u64[0];
  return result;
}

_QWORD *initializeWithCopy for WeatherDataState(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  v5 = a2[3];
  a1[2] = v4;
  a1[3] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for WeatherDataState(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

_QWORD *assignWithTake for WeatherDataState(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  v5 = a1[3];
  a1[3] = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  return a1;
}

ValueMetadata *type metadata accessor for WeatherDataState()
{
  return &type metadata for WeatherDataState;
}

void sub_10066D12C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_10066D138(a1, a2, a3, a4, a5, a6, (uint64_t)&static AvailableDataSets.weatherAlertNotifications.getter, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_10066D138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t);
  void (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t EnumCaseMultiPayload;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);

  sub_1000986AC();
  a19 = v22;
  a20 = v23;
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v31 = v30;
  sub_1000BA294(&qword_100BC3650);
  sub_1000B42B0();
  __chkstk_darwin(v32);
  v33 = sub_1000BE9F0();
  v34 = type metadata accessor for AvailableDataSets(v33);
  v35 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  sub_10003BC68();
  __chkstk_darwin(v36);
  v38 = (char *)&a9 - v37;
  if (v29)
  {
    if (*(_QWORD *)(v27 + 16))
    {
      swift_bridgeObjectRetain(v29);
      v39 = sub_1000991C8(v31);
      if ((v40 & 1) != 0)
      {
        v41 = v39;
        v42 = *(_QWORD *)(v27 + 56);
        v43 = type metadata accessor for LocationAvailableDataSetState(0);
        sub_100095B78(v42 + *(_QWORD *)(*(_QWORD *)(v43 - 8) + 72) * v41, v20, type metadata accessor for LocationAvailableDataSetState);
        v44 = v20;
        v45 = 0;
      }
      else
      {
        v43 = type metadata accessor for LocationAvailableDataSetState(0);
        v44 = v20;
        v45 = 1;
      }
      sub_1000988B8(v44, v45);
      swift_bridgeObjectRelease(v29);
      type metadata accessor for LocationAvailableDataSetState(0);
      sub_100088FC8(v20, 1, v43);
      if (!v48)
      {
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v20, v43);
        if ((_DWORD)EnumCaseMultiPayload)
        {
          sub_1000878B4(EnumCaseMultiPayload, type metadata accessor for LocationAvailableDataSetState);
        }
        else
        {
          v50 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 32))(v38, v20, v34);
          v25(v50);
          sub_100086DA4((unint64_t *)&qword_100BFB1D8, (uint64_t (*)(uint64_t))&type metadata accessor for AvailableDataSets, (uint64_t)&protocol conformance descriptor for AvailableDataSets);
          dispatch thunk of SetAlgebra.isSuperset(of:)(v21, v34, v51);
          v52 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
          v52(v21, v34);
          v52((uint64_t)v38, v34);
        }
        goto LABEL_12;
      }
    }
    else
    {
      v46 = type metadata accessor for LocationAvailableDataSetState(0);
      sub_10009926C(v20, 1, v47, v46);
    }
    sub_100021A14(v20, &qword_100BC3650);
  }
LABEL_12:
  sub_100098640();
}

void sub_10066D324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v6;
  char v7;

  v6 = a1 == a5 && a2 == a6;
  if (v6 || (sub_100099264(a1, a2, a5, a6) & 1) != 0)
  {
    sub_1000987A8();
    sub_10009E970();
    if ((v7 & 1) != 0)
      sub_10009B6B0();
  }
}

void sub_10066D398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;

  sub_1000CF948();
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100098694();
  v3 = sub_1000BA294(&qword_100BFB1C8);
  __chkstk_darwin(v3);
  sub_100099864();
  sub_100095B78(v0, v1, type metadata accessor for LocationWeatherDataState);
  v4 = (char *)sub_10066D438 + 4 * byte_1009BBB94[sub_10009F7EC(v1)];
  __asm { BR              X10 }
}

uint64_t sub_10066D438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  sub_1000DA740(1937204590, v5, v4);
  sub_1000215BC(v2, type metadata accessor for LocationWeatherDataState);
  *(_QWORD *)(v0 + 24) = v1;
  sub_10029E5F4(&qword_100BFB1D0, &qword_100BFB1C8);
  sub_1000C4B18(v6);
  return sub_1000F4120(v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
}

void sub_10066D5BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  sub_1000986AC();
  v56 = v1;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v50 = v8;
  v9 = sub_1000D91D0();
  v54 = *(_QWORD *)(v9 - 8);
  v55 = v9;
  sub_10009D98C();
  __chkstk_darwin(v10);
  v11 = sub_1000BE9F0();
  type metadata accessor for NewsDataModel(v11);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_1000AE8A8(v13, v46);
  sub_1000DC4C8();
  sub_1000B42B0();
  __chkstk_darwin(v14);
  sub_1000CE53C(v15, v46);
  v16 = (int *)sub_1000C2148();
  sub_1000B42B0();
  __chkstk_darwin(v17);
  sub_10009883C();
  v20 = (_QWORD *)(v18 - v19);
  __chkstk_darwin(v21);
  v23 = (uint64_t *)((char *)&v46 - v22);
  sub_1000BA294(&qword_100BC3380);
  sub_1000B42B0();
  __chkstk_darwin(v24);
  sub_10009883C();
  v27 = v25 - v26;
  __chkstk_darwin(v28);
  sub_10009DF40();
  __chkstk_darwin(v29);
  v31 = (char *)&v46 - v30;
  v57 = v3;
  swift_bridgeObjectRetain(v3);
  sub_100099360();
  v51 = v7;
  sub_1000EED10(v7, v5, v3);
  swift_bridgeObjectRelease();
  v32 = type metadata accessor for LocationWeatherDataState(0);
  sub_100088FC8((uint64_t)v31, 1, v32);
  if (!v33)
  {
    sub_10003773C((uint64_t)v31, v0, &qword_100BC3380);
    if (swift_getEnumCaseMultiPayload(v0) == 1)
    {
      v34 = sub_1000BA294(&qword_100BC3358);
      v35 = v0 + *(int *)(v34 + 48);
      v36 = v0 + *(int *)(v34 + 64);
      v48 = v34;
      v49 = v36;
      sub_10007C77C(v0, (uint64_t)v23, type metadata accessor for WeatherData);
      sub_10007C77C(v35, v53, type metadata accessor for PreprocessedWeatherData);
      sub_10007C77C(v49, v52, type metadata accessor for NewsDataModel);
      v47 = *v23;
      v49 = v23[1];
      sub_10003773C((uint64_t)v23 + v16[5], (uint64_t)v20 + v16[5], &qword_100BC3340);
      v37 = v16[6];
      v38 = (char *)v23 + v37;
      v39 = (char *)v20 + v37;
      v40 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v39, v38, v40);
      sub_100095B78(v50, (uint64_t)v20 + v16[8], type metadata accessor for WeatherData.WeatherStatisticsState);
      sub_100095B78((uint64_t)v23 + v16[7], (uint64_t)v20 + v16[7], type metadata accessor for WeatherData.CachingState);
      sub_10003773C((uint64_t)v23 + v16[9], (uint64_t)v20 + v16[9], &qword_100BC3350);
      v41 = v48;
      v42 = v49;
      *v20 = v47;
      v20[1] = v42;
      v43 = v27 + *(int *)(v41 + 48);
      v44 = v27 + *(int *)(v41 + 64);
      sub_100095B78((uint64_t)v20, v27, type metadata accessor for WeatherData);
      sub_100095B78(v53, v43, type metadata accessor for PreprocessedWeatherData);
      v45 = v52;
      sub_100095B78(v52, v44, type metadata accessor for NewsDataModel);
      sub_10009525C(v27, v32);
      _s7Weather24LocationCompositionStateOwst_0(v27, 0, 1, v32);
      sub_100099360();
      swift_bridgeObjectRetain(v49);
      sub_10011E704();
      sub_100079F9C((uint64_t)v20);
      sub_1000B3B44(v45);
      sub_1000215BC(v53, type metadata accessor for PreprocessedWeatherData);
      sub_100079F9C((uint64_t)v23);
    }
    else
    {
      sub_1000215BC(v0, type metadata accessor for LocationWeatherDataState);
    }
  }
  sub_100021A14((uint64_t)v31, &qword_100BC3380);
  sub_100099360();
  sub_10067187C();
  sub_1000B32C8();
  sub_1000D13D4(v54);
  sub_100098640();
}

uint64_t sub_10066D970(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v9;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v5 = 0xEA00000000007265;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1635017060, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x80000001009F04A0)
  {
    swift_bridgeObjectRelease(0x80000001009F04A0);
    return 2;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001009F04A0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10066DAB8(char a1)
{
  if (!a1)
    return 0x696669746E656469;
  if (a1 == 1)
    return 1635017060;
  return 0xD000000000000011;
}

uint64_t sub_10066DB10(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  char v12;

  if (a1 == 0x676E6964616F6CLL && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676E6964616F6CLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1937204590 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1937204590, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    v10 = 0xE400000000000000;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1635017060, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0x64656C696166 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 3;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x64656C696166, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_10066DC9C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10066DCD0 + 4 * byte_1009BBBA0[a1]))(0x676E6964616F6CLL, 0xE700000000000000);
}

uint64_t sub_10066DCD0()
{
  return 1937204590;
}

uint64_t sub_10066DCE0()
{
  return 1635017060;
}

uint64_t sub_10066DCF0()
{
  return 0x64656C696166;
}

uint64_t sub_10066DD04(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v10;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(12383, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 12639 && a2 == 0xE200000000000000)
  {
    v8 = 0xE200000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(12639, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 12895 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease(0xE200000000000000);
    return 2;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(12895, 0xE200000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

unint64_t sub_10066DE0C(unsigned __int8 a1)
{
  return ((unint64_t)a1 << 8) + 12383;
}

uint64_t sub_10066DE20()
{
  return 0x726F727265;
}

uint64_t sub_10066DE34()
{
  char *v0;

  return sub_10066DAB8(*v0);
}

uint64_t sub_10066DE3C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10066D970(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10066DE60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100670798();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10066DE88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100670798();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10066DEB0()
{
  unsigned __int8 *v0;

  return sub_10066DC9C(*v0);
}

uint64_t sub_10066DEB8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10066DB10(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10066DEDC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006709E4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10066DF04(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006709E4();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_10066DF2C()
{
  unsigned __int8 *v0;

  return sub_10066DE0C(*v0);
}

uint64_t sub_10066DF34@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10066DD04(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10066DF58(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100670A5C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10066DF80(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100670A5C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10066DFAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10066E2CC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10066DFD4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100670A20();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10066DFFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100670A20();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10066E024(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100670AD4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10066E04C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100670AD4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10066E074@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10066E26C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10066E09C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100670A98();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10066E0C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100670A98();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10066E0EC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v10;

  if (a1 == 0x676E6964616F6CLL && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676E6964616F6CLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1635017060, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x64656C696166 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 2;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x64656C696166, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10066E220(char a1)
{
  if (!a1)
    return 0x676E6964616F6CLL;
  if (a1 == 1)
    return 1635017060;
  return 0x64656C696166;
}

uint64_t sub_10066E26C(uint64_t a1, uint64_t a2)
{
  char v2;
  char v4;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    sub_100099264(12383, 0xE200000000000000, a1, a2);
    sub_10009DED8();
    v4 = v2 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_10066E2CC(uint64_t a1, uint64_t a2)
{
  char v2;
  char v4;

  if (a1 == 0x726F727265 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    sub_100099264(0x726F727265, 0xE500000000000000, a1, a2);
    sub_10009DED8();
    v4 = v2 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_10066E33C()
{
  char *v0;

  return sub_10066E220(*v0);
}

uint64_t sub_10066E344@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10066E0EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10066E368(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100670B10();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10066E390(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100670B10();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10066E3B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100670B88();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10066E3E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100670B88();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10066E408(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100670B4C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10066E430(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100670B4C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10066E458(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100670BC4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10066E480(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100670BC4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10066E4A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;

  sub_1000986AC();
  v4 = v3;
  v6 = v5;
  v7 = type metadata accessor for AvailableDataSets(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100099864();
  type metadata accessor for LocationAvailableDataSetState(0);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_1000BEDA4();
  __chkstk_darwin(v10);
  sub_100079F7C();
  v24 = v11;
  sub_1000BA294(&qword_100BC9ED0);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_1000B2634();
  v14 = (uint64_t *)(v0 + v13);
  sub_10008611C(v6, v0);
  sub_10008611C(v4, (uint64_t)v14);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_100095B78(v0, (uint64_t)v2, type metadata accessor for LocationAvailableDataSetState);
      v17 = *v2;
      v16 = v2[1];
      v18 = sub_1000BDD7C();
      if ((_DWORD)v18 == 1)
      {
        if (v17 == *v14 && v16 == v14[1])
        {
          v21 = sub_1000BC0C8();
        }
        else
        {
          sub_1000BEB50(v18, v19, *v14);
          sub_1000B4720();
          sub_10003BC58();
        }
        goto LABEL_17;
      }
      sub_10003BC58();
    }
    else
    {
      v21 = sub_1000BDD7C();
      if ((_DWORD)v21 == 2)
      {
LABEL_17:
        sub_100098AD4(v21, type metadata accessor for LocationAvailableDataSetState);
        goto LABEL_18;
      }
    }
  }
  else
  {
    sub_100095B78(v0, v24, type metadata accessor for LocationAvailableDataSetState);
    if (!sub_1000BDD7C())
    {
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v8 + 32))(v1, v14, v7);
      sub_100086DA4((unint64_t *)&qword_100BC9EE8, (uint64_t (*)(uint64_t))&type metadata accessor for AvailableDataSets, (uint64_t)&protocol conformance descriptor for AvailableDataSets);
      sub_10009E36C();
      sub_10009E36C();
      v22 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
      v22(v1, v7);
      v23 = ((uint64_t (*)(uint64_t, uint64_t))v22)(v24, v7);
      sub_100098AD4(v23, type metadata accessor for LocationAvailableDataSetState);
      goto LABEL_18;
    }
    v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v24, v7);
  }
  sub_1000B3B00(v21, &qword_100BC9ED0);
LABEL_18:
  sub_100098640();
}

void sub_10066E6DC(uint64_t *a1, uint64_t *a2)
{
  sub_10066D324(*a1, a1[1], a1[2], a1[3], *a2, a2[1]);
}

uint64_t sub_10066E700@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = sub_1000BA294(&qword_100BC31F0);
  inited = swift_initStackObject(v6, &v12);
  *(_OWORD *)(inited + 16) = xmmword_10097DA20;
  *(_QWORD *)(inited + 32) = 1635017060;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  v8 = sub_1000BA294(&qword_100BFB1E8);
  *(_QWORD *)(inited + 48) = a1;
  *(_QWORD *)(inited + 72) = v8;
  *(_QWORD *)(inited + 80) = 0xD000000000000011;
  *(_QWORD *)(inited + 88) = 0x80000001009F04A0;
  *(_QWORD *)(inited + 120) = sub_1000BA294(&qword_100BFB1F0);
  *(_QWORD *)(inited + 96) = a2;
  swift_bridgeObjectRetain();
  sub_1000989F8();
  v9 = Dictionary.init(dictionaryLiteral:)(inited);
  *(_QWORD *)(a3 + 24) = sub_1000BA294(&qword_100BFB1F8);
  sub_10029E5F4(&qword_100BFB200, &qword_100BFB1F8);
  sub_1000C4B18(v10);
  return ShortDescription.init(name:_:)(0xD000000000000010, 0x80000001009BBC00, v9, &type metadata for WeatherDataState);
}

uint64_t sub_10066E838@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10066E700(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10066E840(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10067075C();
  return ShortDescribable.description.getter(a1, v2);
}

void sub_10066E868()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  sub_1000986AC();
  sub_1000BA294(&qword_100BC3358);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100098694();
  sub_1000C22D0();
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_10009E540();
  type metadata accessor for LocationWeatherDataState(0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_10007A130();
  sub_1000BA294(&qword_100BFB1C8);
  sub_10009D98C();
  __chkstk_darwin(v5);
  sub_100099864();
  sub_1000C3608(v0, v1);
  v6 = (char *)sub_10066E954 + 4 * byte_1009BBBA8[sub_10009F7EC(v1)];
  __asm { BR              X10 }
}

void sub_10066E954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_10007C77C(v3, v1, type metadata accessor for NewsDataModel);
  v5 = sub_1000BA294(&qword_100BC31F0);
  inited = swift_initStackObject(v5, v4 - 328);
  *(_OWORD *)(inited + 16) = xmmword_10097CA50;
  *(_QWORD *)(inited + 32) = 0x617461447377656ELL;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  *(_QWORD *)(inited + 72) = v2;
  sub_100077A84((_QWORD *)(inited + 48));
  sub_10008611C(v1, v7);
  v8 = Dictionary.init(dictionaryLiteral:)(inited);
  sub_1000DA740(1937204590, v9, v8);
  sub_1000215BC(v1, type metadata accessor for NewsDataModel);
  v10 = *(_QWORD *)(v4 - 344);
  *(_QWORD *)(*(_QWORD *)(v4 - 336) + 24) = v0;
  sub_10029E5F4(&qword_100BFB1D0, &qword_100BFB1C8);
  sub_1000C4B18(v11);
  sub_1000F4120(v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 32));
  sub_100098640();
}

uint64_t sub_10066EBE4(uint64_t a1)
{
  uint64_t v2;

  sub_100086DA4(&qword_100BFB210, type metadata accessor for LocationWeatherDataState, (uint64_t)&unk_1009BBE94);
  return ShortDescribable.description.getter(a1, v2);
}

void sub_10066EC24()
{
  uint64_t v0;
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 *inited;
  __n128 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_1000986AC();
  v3 = v2;
  v4 = type metadata accessor for AvailableDataSets(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = sub_1000992A8();
  type metadata accessor for LocationAvailableDataSetState(v6);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_10004A2E8();
  v8 = sub_1000BA294(&qword_100BFB218);
  v27 = *(_QWORD *)(v8 - 8);
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_100099864();
  v10 = sub_1000878D0();
  sub_10009F7F4(v10, v11);
  v12 = sub_10009F7EC((uint64_t)v1);
  if (v12)
  {
    if (v12 == 1)
    {
      v13 = *v1;
      v14 = v1[1];
      v15 = sub_1000BA294(&qword_100BC31F0);
      inited = (__n128 *)swift_initStackObject(v15, &v29);
      v17 = sub_1000D19D8(inited, (__n128)xmmword_10097CA50);
      v17[4].n128_u64[1] = (unint64_t)&type metadata for String;
      v17[3].n128_u64[0] = v13;
      v17[3].n128_u64[1] = v14;
      Dictionary.init(dictionaryLiteral:)(v17);
      v18 = sub_1000DA0A8();
    }
    else
    {
      Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
      v18 = sub_1000C578C();
    }
    sub_100099A28(v18, v19, v20);
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t *, uint64_t))(v5 + 32))(v0, v1, v4);
    v21 = sub_1000BA294(&qword_100BC31F0);
    v22 = swift_initStackObject(v21, &v28);
    *(_OWORD *)(v22 + 16) = xmmword_10097CA50;
    *(_QWORD *)(v22 + 32) = 0xD000000000000010;
    *(_QWORD *)(v22 + 40) = 0x8000000100A0E980;
    *(_QWORD *)(v22 + 72) = v4;
    sub_100077A84((_QWORD *)(v22 + 48));
    (*(void (**)(uint64_t))(v5 + 16))(v23);
    v24 = Dictionary.init(dictionaryLiteral:)(v22);
    sub_1000B4C34(v24);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0, v4);
  }
  *(_QWORD *)(v3 + 24) = v8;
  sub_10029E5F4(&qword_100BFB220, &qword_100BFB218);
  sub_1000C4B18(v25);
  sub_1000F4120(v26, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 32));
  sub_100098640();
}

void sub_10066EE3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;

  sub_100099310();
  a19 = v22;
  a20 = v23;
  v39 = v25;
  v40 = v24;
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v32 = sub_1000BA294(&qword_100BFB260);
  v33 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  sub_100079FBC();
  v35 = v31[3];
  v34 = v31[4];
  sub_1000DB418(v31, v35);
  v36 = sub_100670798();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WeatherDataState.CodingKeys, &type metadata for WeatherDataState.CodingKeys, v36, v35, v34);
  LOBYTE(a10) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v29, v27, &a10, v32);
  if (!v20)
  {
    a10 = v40;
    sub_1000BA294(&qword_100BFB1E8);
    v37 = sub_1006708DC();
    sub_1000C1038(v37);
    a10 = v39;
    sub_1000BA294(&qword_100BFB1F0);
    v38 = sub_100670960();
    sub_1000C1038(v38);
  }
  sub_100098820(v21, *(uint64_t (**)(uint64_t, uint64_t))(v33 + 8));
  sub_1000B44B0();
}

uint64_t sub_10066EF68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  sub_100099310();
  v17 = v1;
  v18 = v2;
  v4 = v3;
  v5 = sub_1000BA294(&qword_100BFB230);
  __chkstk_darwin(v5);
  sub_10009E540();
  v6 = v4[3];
  v7 = v4[4];
  sub_1000DB418(v4, v6);
  v8 = sub_100670798();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WeatherDataState.CodingKeys, &type metadata for WeatherDataState.CodingKeys, v8, v6, v7);
  if (v0)
  {
    sub_1000998EC();
  }
  else
  {
    v16 = 0;
    v7 = KeyedDecodingContainer.decode(_:forKey:)(&v16, v5);
    sub_1000BA294(&qword_100BFB1E8);
    sub_1006707D4();
    sub_100099360();
    v10 = sub_1000CDFD8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v10, v11, v12);
    sub_1000BA294(&qword_100BFB1F0);
    sub_100670858();
    sub_10009E3E0();
    v13 = sub_1000CDFD8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v13, v14, v15);
    sub_100098B9C();
    sub_1000989F8();
    sub_1000998EC();
    swift_bridgeObjectRelease();
    sub_100098964();
    sub_100075DF4();
  }
  return v7;
}

void sub_10066F130()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31[17];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_100099310();
  v2 = v1;
  v3 = sub_1000BA294(&qword_100BFB2E8);
  v31[7] = *(_QWORD *)(v3 - 8);
  v31[8] = v3;
  sub_10009D98C();
  __chkstk_darwin(v4);
  sub_10009BE88(v5, v31[0]);
  v6 = sub_1000BA294(&qword_100BFB2F0);
  v31[11] = *(_QWORD *)(v6 - 8);
  v31[12] = v6;
  sub_10009D98C();
  __chkstk_darwin(v7);
  v31[10] = (uint64_t)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10009876C();
  v31[0] = type metadata accessor for PreprocessedWeatherData(v9);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100088FDC();
  v31[14] = v11;
  v12 = sub_10009876C();
  v31[5] = type metadata accessor for WeatherData(v12);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  sub_100088FDC();
  v31[13] = v14;
  v15 = sub_1000BA294(&qword_100BFB2F8);
  v31[3] = *(_QWORD *)(v15 - 8);
  v31[4] = v15;
  sub_10009D98C();
  __chkstk_darwin(v16);
  sub_100088FDC();
  v31[2] = v17;
  v18 = sub_10009876C();
  v31[15] = type metadata accessor for NewsDataModel(v18);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  sub_1000986FC();
  v31[9] = v20;
  sub_10009D2A4();
  __chkstk_darwin(v21);
  sub_100079F7C();
  v31[1] = v22;
  v23 = sub_1000BA294(&qword_100BFB300);
  __chkstk_darwin(v23);
  v24 = sub_1000BE9F0();
  type metadata accessor for LocationWeatherDataState(v24);
  sub_1000B42B0();
  __chkstk_darwin(v25);
  sub_10007A130();
  v32 = sub_1000BA294(&qword_100BFB308);
  v33 = *(_QWORD *)(v32 - 8);
  sub_10009D98C();
  __chkstk_darwin(v26);
  sub_100079F58();
  v28 = v2[3];
  v27 = v2[4];
  sub_1000DB418(v2, v28);
  v29 = sub_1006709E4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LocationWeatherDataState.CodingKeys, &type metadata for LocationWeatherDataState.CodingKeys, v29, v28, v27);
  sub_100095B78(v34, v0, type metadata accessor for LocationWeatherDataState);
  v30 = (char *)sub_10066F358 + 4 * byte_1009BBBAC[swift_getEnumCaseMultiPayload(v0)];
  __asm { BR              X10 }
}

void sub_10066F358()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v1 - 248);
  sub_1000FEC50(v0);
  sub_10011E560();
  v3 = *(_QWORD *)(v1 - 128);
  v4 = *(_QWORD *)(v1 - 120);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for LocationWeatherDataState.NewsCodingKeys, v1 - 70, v4, &type metadata for LocationWeatherDataState.NewsCodingKeys);
  sub_100086DA4(&qword_100BFB318, type metadata accessor for NewsDataModel, (uint64_t)&unk_1009DC07C);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v2, v6, *(_QWORD *)(v1 - 224), *(_QWORD *)(v1 - 136), v5);
  sub_1000BC4EC(*(_QWORD *)(v1 - 232));
  sub_1000215BC(v2, type metadata accessor for NewsDataModel);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 104) + 8))(v3, v4);
  sub_1000B44B0();
}

void sub_10066F674()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51[5];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;

  sub_100099310();
  v67 = v1;
  v5 = v4;
  v57 = v6;
  v55 = sub_1000BA294(&qword_100BFB288);
  v53 = *(_QWORD *)(v55 - 8);
  sub_10009D98C();
  __chkstk_darwin(v7);
  sub_1000D0278(v8, v51[0]);
  v56 = sub_1000BA294(&qword_100BFB290);
  v63 = *(_QWORD *)(v56 - 8);
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_10009DA80(v10, v51[0]);
  v54 = sub_1000BA294(&qword_100BFB298);
  v62 = *(_QWORD *)(v54 - 8);
  sub_10009D98C();
  __chkstk_darwin(v11);
  v59 = (char *)v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000BA294(&qword_100BFB2A0);
  v60 = *(_QWORD *)(v13 - 8);
  v61 = v13;
  sub_10009D98C();
  __chkstk_darwin(v14);
  sub_100088FDC();
  v58 = v15;
  v16 = sub_1000BA294(&qword_100BFB2A8);
  v64 = *(_QWORD *)(v16 - 8);
  v65 = v16;
  sub_10009D98C();
  __chkstk_darwin(v17);
  sub_100079F58();
  v18 = type metadata accessor for LocationWeatherDataState(0);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  sub_1000BEDA4();
  __chkstk_darwin(v20);
  sub_10009DF40();
  __chkstk_darwin(v21);
  v23 = (char *)v51 - v22;
  __chkstk_darwin(v24);
  v26 = (char *)v51 - v25;
  v27 = v5[3];
  v28 = v5[4];
  v66 = v5;
  sub_1000DB418(v5, v27);
  v29 = sub_1006709E4();
  v30 = v67;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LocationWeatherDataState.CodingKeys, &type metadata for LocationWeatherDataState.CodingKeys, v29, v27, v28);
  if (!v30)
  {
    v51[2] = (uint64_t)v23;
    v51[1] = v3;
    v51[3] = v2;
    v51[4] = (uint64_t)v26;
    v52 = v18;
    v31 = v65;
    v67 = v0;
    v32 = KeyedDecodingContainer.allKeys.getter(v65);
    v33 = *(_QWORD *)(v32 + 16);
    if (v33)
    {
      v34 = v31;
      v51[0] = 0;
      v35 = *(unsigned __int8 *)(v32 + 32);
      sub_10055FF58(1, v33, v32, v32 + 32, 0, (2 * v33) | 1);
      v37 = v36;
      v39 = v38;
      sub_100098964();
      if (v37 == v39 >> 1)
        __asm { BR              X9 }
      v31 = v34;
    }
    v40 = v52;
    v41 = type metadata accessor for DecodingError(0);
    sub_10009D46C(v41, (uint64_t)&protocol witness table for DecodingError);
    v43 = v42;
    sub_1000BA294(&qword_100BC6CF8);
    *v43 = v40;
    v44 = KeyedDecodingContainer.codingPath.getter(v31);
    v46 = sub_10003BD2C(v44, v45, 0x80000001009F2600);
    v47 = sub_10009D478(v46, enum case for DecodingError.typeMismatch(_:));
    swift_willThrow(v47, v48);
    sub_1000C0EBC();
    v49 = sub_10011DD10();
    v50(v49, v31);
  }
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v66);
  sub_1000B44B0();
}

void sub_10066F9B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_10011E560();
  sub_1000BECFC();
  v2 = *(_QWORD *)(v1 - 96);
  sub_1000D07CC(v3, v4, v5, v6);
  if (v0)
  {
    sub_1000C0EBC();
    JUMPOUT(0x10066F99CLL);
  }
  v7 = type metadata accessor for NewsDataModel(0);
  sub_100086DA4(&qword_100BFB2D0, type metadata accessor for NewsDataModel, (uint64_t)&unk_1009DC0A4);
  v8 = *(_QWORD *)(v1 - 256);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v7, v9, *(_QWORD *)(v1 - 216));
  v10 = *(_QWORD *)(v1 - 120);
  sub_1000C61A0();
  sub_1000C0EBC();
  sub_100098820(v2, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
  swift_storeEnumTagMultiPayload(v8, *(_QWORD *)(v1 - 232), 0);
  sub_10007C77C(v8, *(_QWORD *)(v1 - 240), type metadata accessor for LocationWeatherDataState);
  JUMPOUT(0x10066FCBCLL);
}

void sub_10066FA00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1000B2F60();
  sub_1000BECFC();
  sub_1000D07CC(v2, v3, v4, v5);
  if (!v0)
  {
    v6 = type metadata accessor for WeatherData(0);
    *(_BYTE *)(v1 - 67) = 0;
    sub_100086DA4(&qword_100BCF1E0, type metadata accessor for WeatherData, (uint64_t)&unk_1009CD624);
    v7 = *(_QWORD *)(v1 - 248);
    v8 = *(_QWORD *)(v1 - 200);
    sub_10009501C(v6, v1 - 67);
    v9 = sub_1000BA294(&qword_100BC3358);
    *(_QWORD *)(v1 - 136) = v9;
    v10 = v7 + *(int *)(v9 + 48);
    v11 = type metadata accessor for PreprocessedWeatherData(0);
    *(_BYTE *)(v1 - 68) = 1;
    sub_100086DA4(&qword_100BFB2C8, type metadata accessor for PreprocessedWeatherData, (uint64_t)&unk_1009D2F30);
    sub_10009501C(v11, v1 - 68);
    *(_QWORD *)(v1 - 144) = v10;
    v12 = type metadata accessor for NewsDataModel(0);
    *(_BYTE *)(v1 - 69) = 2;
    sub_100086DA4(&qword_100BFB2D0, type metadata accessor for NewsDataModel, (uint64_t)&unk_1009DC0A4);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v12, v1 - 69, v8);
    sub_1000CD914();
    sub_1000C0EBC();
    sub_1000D1F4C();
    v13 = *(_QWORD *)(v1 - 248);
    swift_storeEnumTagMultiPayload(v13, *(_QWORD *)(v1 - 232), 1);
    sub_10007C77C(v13, *(_QWORD *)(v1 - 240), type metadata accessor for LocationWeatherDataState);
    JUMPOUT(0x10066FCBCLL);
  }
  sub_1000C0EBC();
  JUMPOUT(0x10066F99CLL);
}

void sub_10066FAA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  sub_100075E4C();
  sub_1000BECFC();
  v2 = *(_QWORD *)(v1 - 96);
  v7 = sub_1000D07CC(v3, v4, v5, v6);
  if (v0)
  {
    sub_1000C0EBC();
    JUMPOUT(0x10066FBBCLL);
  }
  v8 = KeyedDecodingContainer.decode(_:forKey:)(v7, *(_QWORD *)(v1 - 208));
  v9 = *(_QWORD *)(v1 - 120);
  v10 = v8;
  v12 = v11;
  sub_1000B3194();
  sub_1000C0EBC();
  sub_100098748(v2, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
  v13 = *(uint64_t **)(v1 - 264);
  *v13 = v10;
  v13[1] = v12;
  swift_storeEnumTagMultiPayload(v13, *(_QWORD *)(v1 - 232), 2);
  JUMPOUT(0x10066FCB0);
}

void sub_10066FDA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int EnumCaseMultiPayload;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  sub_100099310();
  a23 = v28;
  a24 = v29;
  v63 = v24;
  v31 = v30;
  v60 = sub_1000BA294(&qword_100BFB368);
  v58 = *(_QWORD *)(v60 - 8);
  sub_10009D98C();
  __chkstk_darwin(v32);
  sub_1000D0278(v33, v52);
  v61 = sub_1000BA294(&qword_100BFB370);
  v55 = *(_QWORD *)(v61 - 8);
  sub_10009D98C();
  __chkstk_darwin(v34);
  sub_10009DA80(v35, v53);
  v59 = type metadata accessor for AvailableDataSets(0);
  v56 = *(_QWORD *)(v59 - 8);
  sub_10009D98C();
  __chkstk_darwin(v36);
  sub_1000CE53C(v37, v54);
  v38 = sub_1000BA294(&qword_100BFB378);
  v39 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v40 = sub_1000992A8();
  type metadata accessor for LocationAvailableDataSetState(v40);
  sub_1000B42B0();
  __chkstk_darwin(v41);
  sub_10004A2E8();
  v42 = sub_1000BA294(&qword_100BFB380);
  v64 = *(_QWORD *)(v42 - 8);
  v65 = v42;
  sub_10009D98C();
  __chkstk_darwin(v43);
  sub_100098694();
  v45 = v31[3];
  v44 = v31[4];
  sub_1000DB418(v31, v45);
  v46 = sub_100670B10();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LocationAvailableDataSetState.CodingKeys, &type metadata for LocationAvailableDataSetState.CodingKeys, v46, v45, v44);
  sub_100095B78(v63, (uint64_t)v27, type metadata accessor for LocationAvailableDataSetState);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v27);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v48 = *v27;
      v49 = v27[1];
      sub_10009E694();
      sub_10009DC18((uint64_t)&type metadata for LocationAvailableDataSetState.FailedCodingKeys, (uint64_t)&a14);
      KeyedEncodingContainer.encode(_:forKey:)(v48, v49, v50, v60);
      swift_bridgeObjectRelease();
      sub_1000BC4EC(v58);
      sub_100098748(v25, *(uint64_t (**)(uint64_t, uint64_t))(v64 + 8));
    }
    else
    {
      a12 = 0;
      sub_100670BC4();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for LocationAvailableDataSetState.LoadingCodingKeys, &a12, v65, &type metadata for LocationAvailableDataSetState.LoadingCodingKeys);
      sub_100098B40(v26, *(uint64_t (**)(uint64_t, uint64_t))(v39 + 8));
      sub_100098820(v25, *(uint64_t (**)(uint64_t, uint64_t))(v64 + 8));
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v56 + 32))(v62, v27, v59);
    sub_10009C9C8();
    sub_10009DC18((uint64_t)&type metadata for LocationAvailableDataSetState.DataCodingKeys, (uint64_t)&a13);
    sub_100086DA4(&qword_100BFB388, (uint64_t (*)(uint64_t))&type metadata accessor for AvailableDataSets, (uint64_t)&protocol conformance descriptor for AvailableDataSets);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v62, v51, v61, v59);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v57, v61);
    sub_100098B40(v62, *(uint64_t (**)(uint64_t, uint64_t))(v56 + 8));
    sub_100098748(v25, *(uint64_t (**)(uint64_t, uint64_t))(v64 + 8));
  }
  sub_1000B44B0();
}

void sub_100670094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, __int16 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;

  sub_100099310();
  a21 = v24;
  a22 = v25;
  v106 = v22;
  v27 = v26;
  v101 = v28;
  v100 = sub_1000BA294(&qword_100BFB320);
  v96 = *(_QWORD *)(v100 - 8);
  sub_10009D98C();
  __chkstk_darwin(v29);
  v103 = (char *)&v90 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_1000BA294(&qword_100BFB328);
  v95 = *(_QWORD *)(v99 - 8);
  sub_10009D98C();
  __chkstk_darwin(v31);
  sub_1000CE53C(v32, v90);
  v33 = sub_1000BA294(&qword_100BFB330);
  v97 = *(_QWORD *)(v33 - 8);
  v98 = v33;
  sub_10009D98C();
  __chkstk_darwin(v34);
  sub_1000AE8A8(v35, v90);
  v36 = sub_1000BA294(&qword_100BFB338);
  v104 = *(_QWORD *)(v36 - 8);
  v105 = v36;
  sub_10009D98C();
  __chkstk_darwin(v37);
  v39 = (char *)&v90 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for LocationAvailableDataSetState(0);
  sub_1000B42B0();
  __chkstk_darwin(v41);
  sub_10009883C();
  sub_1000F3FD8();
  __chkstk_darwin(v42);
  v44 = (char *)&v90 - v43;
  __chkstk_darwin(v45);
  v47 = (char *)&v90 - v46;
  v48 = v27[3];
  v49 = v27[4];
  sub_1000DB418(v27, v48);
  v50 = sub_100670B10();
  v51 = v106;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LocationAvailableDataSetState.CodingKeys, &type metadata for LocationAvailableDataSetState.CodingKeys, v50, v48, v49);
  if (v51)
    goto LABEL_11;
  v91 = v23;
  v92 = v44;
  v93 = v47;
  v94 = v40;
  v106 = v27;
  v52 = v105;
  v53 = v39;
  v54 = KeyedDecodingContainer.allKeys.getter(v105);
  v55 = *(_QWORD *)(v54 + 16);
  if (!v55)
  {
LABEL_8:
    v65 = v104;
    v66 = v94;
    v67 = type metadata accessor for DecodingError(0);
    sub_10009D46C(v67, (uint64_t)&protocol witness table for DecodingError);
    v69 = v68;
    sub_1000BA294(&qword_100BC6CF8);
    *v69 = v66;
    v70 = KeyedDecodingContainer.codingPath.getter(v52);
    v72 = sub_10003BD2C(v70, v71, 0x80000001009F2600);
    v73 = sub_10009D478(v72, enum case for DecodingError.typeMismatch(_:));
    swift_willThrow(v73, v74);
    sub_1000DA0C4();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v53, v52);
    v27 = v106;
LABEL_11:
    v81 = v27;
    goto LABEL_12;
  }
  v56 = v52;
  v57 = *(unsigned __int8 *)(v54 + 32);
  sub_10055FF58(1, v55, v54, v54 + 32, 0, (2 * v55) | 1);
  v59 = v58;
  v61 = v60;
  sub_100075DF4();
  if (v59 != v61 >> 1)
  {
    v52 = v56;
    v53 = v39;
    goto LABEL_8;
  }
  if ((_DWORD)v57)
  {
    if ((_DWORD)v57 == 1)
    {
      sub_10009C9C8();
      sub_1000C6F08((uint64_t)&type metadata for LocationAvailableDataSetState.DataCodingKeys, (uint64_t)&a12);
      v62 = type metadata accessor for AvailableDataSets(0);
      sub_100086DA4(&qword_100BFB358, (uint64_t (*)(uint64_t))&type metadata accessor for AvailableDataSets, (uint64_t)&protocol conformance descriptor for AvailableDataSets);
      v63 = (uint64_t)v92;
      KeyedDecodingContainer.decode<A>(_:forKey:)(v62, v64, v99);
      sub_1000BC4EC(v95);
      sub_1000DA0C4();
      sub_100098748(v57, *(uint64_t (**)(uint64_t, uint64_t))(v104 + 8));
      swift_storeEnumTagMultiPayload(v63, v94, 0);
      v85 = v63;
    }
    else
    {
      sub_10009E694();
      v80 = sub_1000C6F08((uint64_t)&type metadata for LocationAvailableDataSetState.FailedCodingKeys, (uint64_t)&a12 + 1);
      v86 = KeyedDecodingContainer.decode(_:forKey:)(v80, v100);
      v88 = v87;
      sub_1000BC4EC(v96);
      sub_1000DA0C4();
      sub_100098748(v57, *(uint64_t (**)(uint64_t, uint64_t))(v104 + 8));
      v89 = v91;
      *v91 = v86;
      v89[1] = v88;
      swift_storeEnumTagMultiPayload(v89, v94, 1);
      v85 = (uint64_t)v89;
    }
    v84 = (uint64_t)v93;
    sub_10007C77C(v85, (uint64_t)v93, type metadata accessor for LocationAvailableDataSetState);
  }
  else
  {
    sub_100670BC4();
    v75 = v102;
    sub_1000BECFC();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(v76, v77, v78, v79);
    (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v75, v98);
    sub_1000DA0C4();
    v82 = sub_10011AC10();
    sub_100098748(v82, v83);
    v84 = (uint64_t)v93;
    swift_storeEnumTagMultiPayload(v93, v94, 2);
  }
  sub_10007C77C(v84, v101, type metadata accessor for LocationAvailableDataSetState);
  v81 = v106;
LABEL_12:
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v81);
  sub_1000B44B0();
}

uint64_t sub_100670554(uint64_t a1)
{
  uint64_t v2;

  sub_100086DA4(&qword_100BFB228, type metadata accessor for LocationAvailableDataSetState, (uint64_t)&unk_1009BBE3C);
  return ShortDescribable.description.getter(a1, v2);
}

uint64_t sub_100670594@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_10066EF68();
  if (!v1)
  {
    *a1 = result;
    a1[1] = v4;
    a1[2] = v5;
    a1[3] = v6;
  }
  return result;
}

#error "1006705D0: call analysis failed (funcsize=7)"

void sub_1006705DC()
{
  sub_10066F674();
}

void sub_1006705F0()
{
  sub_10066F130();
}

#error "10067060C: call analysis failed (funcsize=5)"

#error "100670620: call analysis failed (funcsize=5)"

uint64_t sub_10067062C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_1006B325C();
  if (!v1)
  {
    *a1 = result;
    a1[1] = v4;
    a1[2] = v5;
    a1[3] = v6;
  }
  return result;
}

uint64_t sub_100670658(uint64_t a1)
{
  uint64_t *v1;

  return sub_1006B33B8(a1, *v1, v1[1], v1[2]);
}

void sub_100670674()
{
  sub_1006B34F8();
}

void sub_100670688()
{
  sub_1006B3728();
}

void sub_10067069C()
{
  sub_1006B3A0C();
}

void sub_1006706B0()
{
  sub_1006B3B48();
}

void sub_1006706C4()
{
  sub_100086DA4(&qword_100BFB1A8, type metadata accessor for LocationAvailableDataSetState, (uint64_t)&unk_1009BBE14);
}

void sub_1006706F0()
{
  sub_100086DA4(&qword_100BFB1B0, type metadata accessor for LocationWeatherDataState, (uint64_t)&unk_1009BBE6C);
}

unint64_t sub_100670720()
{
  unint64_t result;

  result = qword_100BFB1B8;
  if (!qword_100BFB1B8)
  {
    result = swift_getWitnessTable(&unk_1009BBEC4, &type metadata for WeatherDataState);
    atomic_store(result, (unint64_t *)&qword_100BFB1B8);
  }
  return result;
}

unint64_t sub_10067075C()
{
  unint64_t result;

  result = qword_100BFB208;
  if (!qword_100BFB208)
  {
    result = swift_getWitnessTable(&unk_1009BBEEC, &type metadata for WeatherDataState);
    atomic_store(result, (unint64_t *)&qword_100BFB208);
  }
  return result;
}

unint64_t sub_100670798()
{
  unint64_t result;

  result = qword_100BFB238;
  if (!qword_100BFB238)
  {
    result = swift_getWitnessTable(&unk_1009BC940, &type metadata for WeatherDataState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB238);
  }
  return result;
}

unint64_t sub_1006707D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFB240;
  if (!qword_100BFB240)
  {
    v1 = sub_100075EB0(&qword_100BFB1E8);
    sub_100086DA4(&qword_100BFB248, type metadata accessor for LocationWeatherDataState, (uint64_t)&unk_1009BBD9C);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100BFB240);
  }
  return result;
}

unint64_t sub_100670858()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFB250;
  if (!qword_100BFB250)
  {
    v1 = sub_100075EB0(&qword_100BFB1F0);
    sub_100086DA4(&qword_100BFB258, type metadata accessor for LocationAvailableDataSetState, (uint64_t)&unk_1009BBD4C);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100BFB250);
  }
  return result;
}

unint64_t sub_1006708DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFB268;
  if (!qword_100BFB268)
  {
    v1 = sub_100075EB0(&qword_100BFB1E8);
    sub_100086DA4(&qword_100BFB270, type metadata accessor for LocationWeatherDataState, (uint64_t)&unk_1009BBD74);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100BFB268);
  }
  return result;
}

unint64_t sub_100670960()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFB278;
  if (!qword_100BFB278)
  {
    v1 = sub_100075EB0(&qword_100BFB1F0);
    sub_100086DA4(&qword_100BFB280, type metadata accessor for LocationAvailableDataSetState, (uint64_t)&unk_1009BBD24);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100BFB278);
  }
  return result;
}

unint64_t sub_1006709E4()
{
  unint64_t result;

  result = qword_100BFB2B0;
  if (!qword_100BFB2B0)
  {
    result = swift_getWitnessTable(&unk_1009BC8F0, &type metadata for LocationWeatherDataState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB2B0);
  }
  return result;
}

unint64_t sub_100670A20()
{
  unint64_t result;

  result = qword_100BFB2B8;
  if (!qword_100BFB2B8)
  {
    result = swift_getWitnessTable(&unk_1009BC8A0, &type metadata for LocationWeatherDataState.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB2B8);
  }
  return result;
}

unint64_t sub_100670A5C()
{
  unint64_t result;

  result = qword_100BFB2C0;
  if (!qword_100BFB2C0)
  {
    result = swift_getWitnessTable(&unk_1009BC850, &type metadata for LocationWeatherDataState.DataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB2C0);
  }
  return result;
}

unint64_t sub_100670A98()
{
  unint64_t result;

  result = qword_100BFB2D8;
  if (!qword_100BFB2D8)
  {
    result = swift_getWitnessTable(&unk_1009BC800, &type metadata for LocationWeatherDataState.NewsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB2D8);
  }
  return result;
}

unint64_t sub_100670AD4()
{
  unint64_t result;

  result = qword_100BFB2E0;
  if (!qword_100BFB2E0)
  {
    result = swift_getWitnessTable(&unk_1009BC7B0, &type metadata for LocationWeatherDataState.LoadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB2E0);
  }
  return result;
}

unint64_t sub_100670B10()
{
  unint64_t result;

  result = qword_100BFB340;
  if (!qword_100BFB340)
  {
    result = swift_getWitnessTable(&unk_1009BC760, &type metadata for LocationAvailableDataSetState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB340);
  }
  return result;
}

unint64_t sub_100670B4C()
{
  unint64_t result;

  result = qword_100BFB348;
  if (!qword_100BFB348)
  {
    result = swift_getWitnessTable(&unk_1009BC710, &type metadata for LocationAvailableDataSetState.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB348);
  }
  return result;
}

unint64_t sub_100670B88()
{
  unint64_t result;

  result = qword_100BFB350;
  if (!qword_100BFB350)
  {
    result = swift_getWitnessTable(&unk_1009BC6C0, &type metadata for LocationAvailableDataSetState.DataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB350);
  }
  return result;
}

unint64_t sub_100670BC4()
{
  unint64_t result;

  result = qword_100BFB360;
  if (!qword_100BFB360)
  {
    result = swift_getWitnessTable(&unk_1009BC670, &type metadata for LocationAvailableDataSetState.LoadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB360);
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationAvailableDataSetState.CodingKeys()
{
  return &type metadata for LocationAvailableDataSetState.CodingKeys;
}

ValueMetadata *type metadata accessor for LocationAvailableDataSetState.LoadingCodingKeys()
{
  return &type metadata for LocationAvailableDataSetState.LoadingCodingKeys;
}

ValueMetadata *type metadata accessor for LocationAvailableDataSetState.DataCodingKeys()
{
  return &type metadata for LocationAvailableDataSetState.DataCodingKeys;
}

ValueMetadata *type metadata accessor for LocationAvailableDataSetState.FailedCodingKeys()
{
  return &type metadata for LocationAvailableDataSetState.FailedCodingKeys;
}

uint64_t storeEnumTagSinglePayload for LocationWeatherDataState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100670C94 + 4 * byte_1009BBBB9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100670CC8 + 4 * byte_1009BBBB4[v4]))();
}

uint64_t sub_100670CC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100670CD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100670CD8);
  return result;
}

uint64_t sub_100670CE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100670CECLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100670CF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100670CF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocationWeatherDataState.CodingKeys()
{
  return &type metadata for LocationWeatherDataState.CodingKeys;
}

ValueMetadata *type metadata accessor for LocationWeatherDataState.LoadingCodingKeys()
{
  return &type metadata for LocationWeatherDataState.LoadingCodingKeys;
}

ValueMetadata *type metadata accessor for LocationWeatherDataState.NewsCodingKeys()
{
  return &type metadata for LocationWeatherDataState.NewsCodingKeys;
}

ValueMetadata *type metadata accessor for LocationWeatherDataState.DataCodingKeys()
{
  return &type metadata for LocationWeatherDataState.DataCodingKeys;
}

uint64_t _s7Weather29LocationAvailableDataSetStateO14DataCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100670D84 + 4 * byte_1009BBBBE[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100670DA4 + 4 * byte_1009BBBC3[v4]))();
}

_BYTE *sub_100670D84(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100670DA4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100670DAC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100670DB4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100670DBC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100670DC4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LocationWeatherDataState.FailedCodingKeys()
{
  return &type metadata for LocationWeatherDataState.FailedCodingKeys;
}

uint64_t _s7Weather29LocationAvailableDataSetStateO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100670E2C + 4 * byte_1009BBBCD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100670E60 + 4 * byte_1009BBBC8[v4]))();
}

uint64_t sub_100670E60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100670E68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100670E70);
  return result;
}

uint64_t sub_100670E7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100670E84);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100670E88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100670E90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WeatherDataState.CodingKeys()
{
  return &type metadata for WeatherDataState.CodingKeys;
}

uint64_t *sub_100670EAC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v13);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v14 = a2[1];
      *a1 = *a2;
      a1[1] = v14;
      swift_bridgeObjectRetain(v14);
      v10 = a1;
      v11 = a3;
      v12 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        return a1;
      }
      v9 = type metadata accessor for AvailableDataSets(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = a1;
      v11 = a3;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }
  return a1;
}

_QWORD *sub_100670F80(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_1000215BC((uint64_t)a1, type metadata accessor for LocationAvailableDataSetState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      v8 = a1;
      v9 = a3;
      v10 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
      v7 = type metadata accessor for AvailableDataSets(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = a3;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

void *sub_10067104C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for AvailableDataSets(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

void *sub_1006710D4(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_1000215BC((uint64_t)a1, type metadata accessor for LocationAvailableDataSetState);
    if (swift_getEnumCaseMultiPayload(a2))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for AvailableDataSets(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

unint64_t sub_100671178()
{
  unint64_t result;

  result = qword_100BFB438;
  if (!qword_100BFB438)
  {
    result = swift_getWitnessTable(&unk_1009BC0A0, &type metadata for WeatherDataState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB438);
  }
  return result;
}

unint64_t sub_1006711B8()
{
  unint64_t result;

  result = qword_100BFB440;
  if (!qword_100BFB440)
  {
    result = swift_getWitnessTable(&unk_1009BC158, &type metadata for LocationWeatherDataState.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB440);
  }
  return result;
}

unint64_t sub_1006711F8()
{
  unint64_t result;

  result = qword_100BFB448;
  if (!qword_100BFB448)
  {
    result = swift_getWitnessTable(&unk_1009BC210, &type metadata for LocationWeatherDataState.DataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB448);
  }
  return result;
}

unint64_t sub_100671238()
{
  unint64_t result;

  result = qword_100BFB450;
  if (!qword_100BFB450)
  {
    result = swift_getWitnessTable(&unk_1009BC2C8, &type metadata for LocationWeatherDataState.NewsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB450);
  }
  return result;
}

unint64_t sub_100671278()
{
  unint64_t result;

  result = qword_100BFB458;
  if (!qword_100BFB458)
  {
    result = swift_getWitnessTable(&unk_1009BC3D0, &type metadata for LocationWeatherDataState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB458);
  }
  return result;
}

unint64_t sub_1006712B8()
{
  unint64_t result;

  result = qword_100BFB460;
  if (!qword_100BFB460)
  {
    result = swift_getWitnessTable(&unk_1009BC488, &type metadata for LocationAvailableDataSetState.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB460);
  }
  return result;
}

unint64_t sub_1006712F8()
{
  unint64_t result;

  result = qword_100BFB468;
  if (!qword_100BFB468)
  {
    result = swift_getWitnessTable(&unk_1009BC540, &type metadata for LocationAvailableDataSetState.DataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB468);
  }
  return result;
}

unint64_t sub_100671338()
{
  unint64_t result;

  result = qword_100BFB470;
  if (!qword_100BFB470)
  {
    result = swift_getWitnessTable(&unk_1009BC648, &type metadata for LocationAvailableDataSetState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB470);
  }
  return result;
}

unint64_t sub_100671378()
{
  unint64_t result;

  result = qword_100BFB478;
  if (!qword_100BFB478)
  {
    result = swift_getWitnessTable(&unk_1009BC568, &type metadata for LocationAvailableDataSetState.LoadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB478);
  }
  return result;
}

unint64_t sub_1006713B8()
{
  unint64_t result;

  result = qword_100BFB480;
  if (!qword_100BFB480)
  {
    result = swift_getWitnessTable(&unk_1009BC590, &type metadata for LocationAvailableDataSetState.LoadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB480);
  }
  return result;
}

unint64_t sub_1006713F8()
{
  unint64_t result;

  result = qword_100BFB488;
  if (!qword_100BFB488)
  {
    result = swift_getWitnessTable(&unk_1009BC4B0, &type metadata for LocationAvailableDataSetState.DataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB488);
  }
  return result;
}

unint64_t sub_100671438()
{
  unint64_t result;

  result = qword_100BFB490;
  if (!qword_100BFB490)
  {
    result = swift_getWitnessTable(&unk_1009BC4D8, &type metadata for LocationAvailableDataSetState.DataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB490);
  }
  return result;
}

unint64_t sub_100671478()
{
  unint64_t result;

  result = qword_100BFB498;
  if (!qword_100BFB498)
  {
    result = swift_getWitnessTable(&unk_1009BC3F8, &type metadata for LocationAvailableDataSetState.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB498);
  }
  return result;
}

unint64_t sub_1006714B8()
{
  unint64_t result;

  result = qword_100BFB4A0;
  if (!qword_100BFB4A0)
  {
    result = swift_getWitnessTable(&unk_1009BC420, &type metadata for LocationAvailableDataSetState.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB4A0);
  }
  return result;
}

unint64_t sub_1006714F8()
{
  unint64_t result;

  result = qword_100BFB4A8;
  if (!qword_100BFB4A8)
  {
    result = swift_getWitnessTable(&unk_1009BC5B8, &type metadata for LocationAvailableDataSetState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB4A8);
  }
  return result;
}

unint64_t sub_100671538()
{
  unint64_t result;

  result = qword_100BFB4B0;
  if (!qword_100BFB4B0)
  {
    result = swift_getWitnessTable(&unk_1009BC5E0, &type metadata for LocationAvailableDataSetState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB4B0);
  }
  return result;
}

unint64_t sub_100671578()
{
  unint64_t result;

  result = qword_100BFB4B8;
  if (!qword_100BFB4B8)
  {
    result = swift_getWitnessTable(&unk_1009BC2F0, &type metadata for LocationWeatherDataState.LoadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB4B8);
  }
  return result;
}

unint64_t sub_1006715B8()
{
  unint64_t result;

  result = qword_100BFB4C0;
  if (!qword_100BFB4C0)
  {
    result = swift_getWitnessTable(&unk_1009BC318, &type metadata for LocationWeatherDataState.LoadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB4C0);
  }
  return result;
}

unint64_t sub_1006715F8()
{
  unint64_t result;

  result = qword_100BFB4C8;
  if (!qword_100BFB4C8)
  {
    result = swift_getWitnessTable(&unk_1009BC238, &type metadata for LocationWeatherDataState.NewsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB4C8);
  }
  return result;
}

unint64_t sub_100671638()
{
  unint64_t result;

  result = qword_100BFB4D0;
  if (!qword_100BFB4D0)
  {
    result = swift_getWitnessTable(&unk_1009BC260, &type metadata for LocationWeatherDataState.NewsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB4D0);
  }
  return result;
}

unint64_t sub_100671678()
{
  unint64_t result;

  result = qword_100BFB4D8;
  if (!qword_100BFB4D8)
  {
    result = swift_getWitnessTable(&unk_1009BC180, &type metadata for LocationWeatherDataState.DataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB4D8);
  }
  return result;
}

unint64_t sub_1006716B8()
{
  unint64_t result;

  result = qword_100BFB4E0;
  if (!qword_100BFB4E0)
  {
    result = swift_getWitnessTable(&unk_1009BC1A8, &type metadata for LocationWeatherDataState.DataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB4E0);
  }
  return result;
}

unint64_t sub_1006716F8()
{
  unint64_t result;

  result = qword_100BFB4E8;
  if (!qword_100BFB4E8)
  {
    result = swift_getWitnessTable(&unk_1009BC0C8, &type metadata for LocationWeatherDataState.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB4E8);
  }
  return result;
}

unint64_t sub_100671738()
{
  unint64_t result;

  result = qword_100BFB4F0;
  if (!qword_100BFB4F0)
  {
    result = swift_getWitnessTable(&unk_1009BC0F0, &type metadata for LocationWeatherDataState.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB4F0);
  }
  return result;
}

unint64_t sub_100671778()
{
  unint64_t result;

  result = qword_100BFB4F8;
  if (!qword_100BFB4F8)
  {
    result = swift_getWitnessTable(&unk_1009BC340, &type metadata for LocationWeatherDataState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB4F8);
  }
  return result;
}

unint64_t sub_1006717B8()
{
  unint64_t result;

  result = qword_100BFB500;
  if (!qword_100BFB500)
  {
    result = swift_getWitnessTable(&unk_1009BC368, &type metadata for LocationWeatherDataState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB500);
  }
  return result;
}

unint64_t sub_1006717F8()
{
  unint64_t result;

  result = qword_100BFB508;
  if (!qword_100BFB508)
  {
    result = swift_getWitnessTable(&unk_1009BC010, &type metadata for WeatherDataState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB508);
  }
  return result;
}

unint64_t sub_100671838()
{
  unint64_t result;

  result = qword_100BFB510;
  if (!qword_100BFB510)
  {
    result = swift_getWitnessTable(&unk_1009BC038, &type metadata for WeatherDataState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB510);
  }
  return result;
}

uint64_t sub_10067187C()
{
  return UUID.init()();
}

unint64_t sub_100671884(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_10008D47C(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (_QWORD *)(a1 + v9);
    v11 = (_QWORD *)(a2 + v9);
    v12 = sub_1000BA294(&qword_100BC37E8);
    if (swift_getEnumCaseMultiPayload(v11) == 1)
    {
      v13 = type metadata accessor for Font.Context(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      *v10 = *v11;
      swift_retain();
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
    v16 = *(int *)(a3 + 24);
    v17 = a1 + v16;
    v18 = a2 + v16;
    v19 = *(_QWORD *)(a2 + v16 + 8);
    *(_QWORD *)v17 = *(_QWORD *)(a2 + v16);
    *(_QWORD *)(v17 + 8) = v19;
    v20 = *(_QWORD *)(a2 + v16 + 16);
    v21 = *(_QWORD *)(v18 + 24);
    v22 = *(_QWORD *)(v18 + 32);
    v23 = *(_QWORD *)(v18 + 40);
    v24 = *(_BYTE *)(v18 + 48);
    swift_bridgeObjectRetain();
    sub_100176D88(v20, v21, v22, v23, v24);
    *(_QWORD *)(v17 + 16) = v20;
    *(_QWORD *)(v17 + 24) = v21;
    *(_QWORD *)(v17 + 32) = v22;
    *(_QWORD *)(v17 + 40) = v23;
    *(_BYTE *)(v17 + 48) = v24;
    v25 = *(_QWORD *)(v18 + 64);
    *(_QWORD *)(v17 + 56) = *(_QWORD *)(v18 + 56);
    *(_QWORD *)(v17 + 64) = v25;
    v26 = *(_QWORD *)(v18 + 80);
    *(_QWORD *)(v17 + 72) = *(_QWORD *)(v18 + 72);
    *(_QWORD *)(v17 + 80) = v26;
    v27 = *(_QWORD *)(v18 + 96);
    *(_QWORD *)(v17 + 88) = *(_QWORD *)(v18 + 88);
    *(_QWORD *)(v17 + 96) = v27;
    v28 = *(_QWORD *)(v18 + 112);
    *(_QWORD *)(v17 + 104) = *(_QWORD *)(v18 + 104);
    *(_QWORD *)(v17 + 112) = v28;
    v29 = *(_QWORD *)(v18 + 128);
    *(_QWORD *)(v17 + 120) = *(_QWORD *)(v18 + 120);
    *(_QWORD *)(v17 + 128) = v29;
    *(_BYTE *)(v17 + 136) = *(_BYTE *)(v18 + 136);
    *(_WORD *)(v17 + 137) = *(_WORD *)(v18 + 137);
    v30 = *(_QWORD *)(v18 + 152);
    *(_QWORD *)(v17 + 144) = *(_QWORD *)(v18 + 144);
    *(_QWORD *)(v17 + 152) = v30;
    *(_BYTE *)(v17 + 160) = *(_BYTE *)(v18 + 160);
    *(_BYTE *)(v17 + 161) = *(_BYTE *)(v18 + 161);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

double sub_100671A44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  sub_1000B15F8(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  sub_1000BA294(&qword_100BC37E8);
  if (swift_getEnumCaseMultiPayload(v4) == 1)
  {
    v5 = type metadata accessor for Font.Context(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  v6 = a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease();
  sub_100176DD4(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), *(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40), *(_BYTE *)(v6 + 48));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_100671B14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10008D47C(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = sub_1000BA294(&qword_100BC37E8);
  if (swift_getEnumCaseMultiPayload(v10) == 1)
  {
    v12 = type metadata accessor for Font.Context(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = 1;
  }
  else
  {
    *v9 = *v10;
    swift_retain();
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v13);
  v14 = *(int *)(a3 + 24);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = *(_QWORD *)(a2 + v14 + 8);
  *(_QWORD *)v15 = *(_QWORD *)(a2 + v14);
  *(_QWORD *)(v15 + 8) = v17;
  v18 = *(_QWORD *)(a2 + v14 + 16);
  v19 = *(_QWORD *)(v16 + 24);
  v20 = *(_QWORD *)(v16 + 32);
  v21 = *(_QWORD *)(v16 + 40);
  v22 = *(_BYTE *)(v16 + 48);
  swift_bridgeObjectRetain();
  sub_100176D88(v18, v19, v20, v21, v22);
  *(_QWORD *)(v15 + 16) = v18;
  *(_QWORD *)(v15 + 24) = v19;
  *(_QWORD *)(v15 + 32) = v20;
  *(_QWORD *)(v15 + 40) = v21;
  *(_BYTE *)(v15 + 48) = v22;
  v23 = *(_QWORD *)(v16 + 64);
  *(_QWORD *)(v15 + 56) = *(_QWORD *)(v16 + 56);
  *(_QWORD *)(v15 + 64) = v23;
  v24 = *(_QWORD *)(v16 + 80);
  *(_QWORD *)(v15 + 72) = *(_QWORD *)(v16 + 72);
  *(_QWORD *)(v15 + 80) = v24;
  v25 = *(_QWORD *)(v16 + 96);
  *(_QWORD *)(v15 + 88) = *(_QWORD *)(v16 + 88);
  *(_QWORD *)(v15 + 96) = v25;
  v26 = *(_QWORD *)(v16 + 112);
  *(_QWORD *)(v15 + 104) = *(_QWORD *)(v16 + 104);
  *(_QWORD *)(v15 + 112) = v26;
  v27 = *(_QWORD *)(v16 + 128);
  *(_QWORD *)(v15 + 120) = *(_QWORD *)(v16 + 120);
  *(_QWORD *)(v15 + 128) = v27;
  *(_BYTE *)(v15 + 136) = *(_BYTE *)(v16 + 136);
  *(_WORD *)(v15 + 137) = *(_WORD *)(v16 + 137);
  v28 = *(_QWORD *)(v16 + 152);
  *(_QWORD *)(v15 + 144) = *(_QWORD *)(v16 + 144);
  *(_QWORD *)(v15 + 152) = v28;
  *(_BYTE *)(v15 + 160) = *(_BYTE *)(v16 + 160);
  *(_BYTE *)(v15 + 161) = *(_BYTE *)(v16 + 161);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100671CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10008D47C(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1000B15F8(v8, v9);
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 20);
    v11 = (_QWORD *)(a1 + v10);
    v12 = (_QWORD *)(a2 + v10);
    sub_100021A14(a1 + v10, &qword_100BC37E8);
    v13 = sub_1000BA294(&qword_100BC37E8);
    if (swift_getEnumCaseMultiPayload(v12) == 1)
    {
      v14 = type metadata accessor for Font.Context(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      *v11 = *v12;
      swift_retain();
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
  }
  v16 = *(int *)(a3 + 24);
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_QWORD *)v17 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(v17 + 8) = *(_QWORD *)(a2 + v16 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(v18 + 16);
  v20 = *(_QWORD *)(v18 + 24);
  v21 = *(_QWORD *)(v18 + 32);
  v22 = *(_QWORD *)(v18 + 40);
  v23 = *(_BYTE *)(v18 + 48);
  sub_100176D88(v19, v20, v21, v22, v23);
  v24 = *(_QWORD *)(v17 + 16);
  v25 = *(_QWORD *)(v17 + 24);
  v26 = *(_QWORD *)(v17 + 32);
  v27 = *(_QWORD *)(v17 + 40);
  *(_QWORD *)(v17 + 16) = v19;
  *(_QWORD *)(v17 + 24) = v20;
  *(_QWORD *)(v17 + 32) = v21;
  *(_QWORD *)(v17 + 40) = v22;
  v28 = *(_BYTE *)(v17 + 48);
  *(_BYTE *)(v17 + 48) = v23;
  sub_100176DD4(v24, v25, v26, v27, v28);
  *(_QWORD *)(v17 + 56) = *(_QWORD *)(v18 + 56);
  *(_QWORD *)(v17 + 64) = *(_QWORD *)(v18 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v17 + 72) = *(_QWORD *)(v18 + 72);
  *(_QWORD *)(v17 + 80) = *(_QWORD *)(v18 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v17 + 88) = *(_QWORD *)(v18 + 88);
  *(_QWORD *)(v17 + 96) = *(_QWORD *)(v18 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v17 + 104) = *(_QWORD *)(v18 + 104);
  *(_QWORD *)(v17 + 112) = *(_QWORD *)(v18 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v17 + 120) = *(_QWORD *)(v18 + 120);
  *(_QWORD *)(v17 + 128) = *(_QWORD *)(v18 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v17 + 136) = *(_BYTE *)(v18 + 136);
  *(_BYTE *)(v17 + 137) = *(_BYTE *)(v18 + 137);
  *(_BYTE *)(v17 + 138) = *(_BYTE *)(v18 + 138);
  *(_QWORD *)(v17 + 144) = *(_QWORD *)(v18 + 144);
  *(_QWORD *)(v17 + 152) = *(_QWORD *)(v18 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v17 + 160) = *(_BYTE *)(v18 + 160);
  *(_BYTE *)(v17 + 161) = *(_BYTE *)(v18 + 161);
  return a1;
}

uint64_t sub_100671EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 20);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_1000BA294(&qword_100BC37E8);
  if (swift_getEnumCaseMultiPayload(v8) == 1)
  {
    v10 = type metadata accessor for Font.Context(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  memcpy((void *)(a1 + *(int *)(a3 + 24)), (const void *)(a2 + *(int *)(a3 + 24)), 0xA2uLL);
  return a1;
}

uint64_t sub_100671FC4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1000B15F8(v8, v9);
  if ((uint64_t *)a1 != a2)
  {
    v10 = *(int *)(a3 + 20);
    v11 = (void *)(a1 + v10);
    v12 = (char *)a2 + v10;
    sub_100021A14(a1 + v10, &qword_100BC37E8);
    v13 = sub_1000BA294(&qword_100BC37E8);
    if (swift_getEnumCaseMultiPayload(v12) == 1)
    {
      v14 = type metadata accessor for Font.Context(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  v15 = *(int *)(a3 + 24);
  v16 = a1 + v15;
  v17 = (uint64_t)a2 + v15;
  v18 = *(_QWORD *)(v17 + 8);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_QWORD *)(v16 + 8) = v18;
  swift_bridgeObjectRelease();
  v19 = *(_BYTE *)(v17 + 48);
  v20 = *(_QWORD *)(v16 + 16);
  v21 = *(_QWORD *)(v16 + 24);
  v22 = *(_QWORD *)(v16 + 32);
  v23 = *(_QWORD *)(v16 + 40);
  v24 = *(_OWORD *)(v17 + 32);
  *(_OWORD *)(v16 + 16) = *(_OWORD *)(v17 + 16);
  *(_OWORD *)(v16 + 32) = v24;
  v25 = *(_BYTE *)(v16 + 48);
  *(_BYTE *)(v16 + 48) = v19;
  sub_100176DD4(v20, v21, v22, v23, v25);
  v26 = *(_QWORD *)(v17 + 64);
  *(_QWORD *)(v16 + 56) = *(_QWORD *)(v17 + 56);
  *(_QWORD *)(v16 + 64) = v26;
  swift_bridgeObjectRelease();
  v27 = *(_QWORD *)(v17 + 80);
  *(_QWORD *)(v16 + 72) = *(_QWORD *)(v17 + 72);
  *(_QWORD *)(v16 + 80) = v27;
  swift_bridgeObjectRelease();
  v28 = *(_QWORD *)(v17 + 96);
  *(_QWORD *)(v16 + 88) = *(_QWORD *)(v17 + 88);
  *(_QWORD *)(v16 + 96) = v28;
  swift_bridgeObjectRelease();
  v29 = *(_QWORD *)(v17 + 112);
  *(_QWORD *)(v16 + 104) = *(_QWORD *)(v17 + 104);
  *(_QWORD *)(v16 + 112) = v29;
  swift_bridgeObjectRelease();
  v30 = *(_QWORD *)(v17 + 128);
  *(_QWORD *)(v16 + 120) = *(_QWORD *)(v17 + 120);
  *(_QWORD *)(v16 + 128) = v30;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v16 + 136) = *(_BYTE *)(v17 + 136);
  *(_BYTE *)(v16 + 137) = *(_BYTE *)(v17 + 137);
  *(_BYTE *)(v16 + 138) = *(_BYTE *)(v17 + 138);
  v31 = *(_QWORD *)(v17 + 152);
  *(_QWORD *)(v16 + 144) = *(_QWORD *)(v17 + 144);
  *(_QWORD *)(v16 + 152) = v31;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v16 + 160) = *(_BYTE *)(v17 + 160);
  *(_BYTE *)(v16 + 161) = *(_BYTE *)(v17 + 161);
  return a1;
}

uint64_t sub_10067216C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100672178);
}

uint64_t sub_100672178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;

  v6 = sub_1000BA294(&qword_100BC3810);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return _s7Weather24LocationCompositionStateOwet_0(a1 + *(int *)(a3 + 20), a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

uint64_t sub_1006721FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100672208);
}

uint64_t sub_100672208(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = sub_1000BA294(&qword_100BC3810);
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return _s7Weather24LocationCompositionStateOwst_0(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

void sub_100672288(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "\t";
  sub_100672304(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_1009BC9D8;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_100672304(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BC3898)
  {
    v2 = type metadata accessor for Font.Context(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BC3898);
  }
}

uint64_t sub_100672358(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABC89C, 1);
}

uint64_t sub_100672368()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v17;

  v1 = type metadata accessor for Font.Leading(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000BA294(&qword_100BC3B98);
  __chkstk_darwin(v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)v0;
  v9 = *(_BYTE *)(v0 + 8);
  sub_10008D47C(v8, v9);
  sub_100109B54();
  v10 = sub_1000B15F8(v8, v9);
  v11 = static Font.Weight.thin.getter(v10);
  v12 = type metadata accessor for Font.Design(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 1, 1, v12);
  v13 = static Font.system(size:weight:design:)(*(_QWORD *)&v11, 0, v7);
  sub_100021A14((uint64_t)v7, &qword_100BC3B98);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for Font.Leading.tight(_:), v1);
  v14 = Font.leading(_:)(v4, v13);
  v15 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v2 + 8))(v4, v1, v15);
  return v14;
}

uint64_t sub_1006724E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v17;

  v1 = type metadata accessor for Font.Leading(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000BA294(&qword_100BC3B98);
  __chkstk_darwin(v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)v0;
  v9 = *(_BYTE *)(v0 + 8);
  sub_10008D47C(v8, v9);
  sub_100109B54();
  v10 = sub_1000B15F8(v8, v9);
  v11 = static Font.Weight.light.getter(v10);
  v12 = type metadata accessor for Font.Design(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 1, 1, v12);
  v13 = static Font.system(size:weight:design:)(*(_QWORD *)&v11, 0, v7);
  sub_100021A14((uint64_t)v7, &qword_100BC3B98);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for Font.Leading.tight(_:), v1);
  v14 = Font.leading(_:)(v4, v13);
  v15 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v2 + 8))(v4, v1, v15);
  return v14;
}

uint64_t sub_100672660()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t OpaqueTypeConformance2;
  _QWORD v22[2];

  v1 = type metadata accessor for AccessibilityChildBehavior(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_100098728();
  v5 = v4 - v3;
  v6 = sub_1000BA294(&qword_100BFB5B0);
  __chkstk_darwin(v6);
  sub_100098728();
  v9 = v8 - v7;
  v10 = sub_1000BA294(&qword_100BFB5B8);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_100098728();
  v14 = v13 - v12;
  *(_QWORD *)v9 = static HorizontalAlignment.leading.getter(v15);
  *(_QWORD *)(v9 + 8) = 0;
  *(_BYTE *)(v9 + 16) = 0;
  v16 = sub_1000BA294(&qword_100BFB5C0);
  sub_100672804(v0, (_QWORD *)(v9 + *(int *)(v16 + 44)));
  static AccessibilityChildBehavior.combine.getter(v17);
  sub_10003D310(&qword_100BFB5C8, &qword_100BFB5B0, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v19 = v18;
  View.accessibilityElement(children:)(v5, v6, v18);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v5, v1);
  sub_100021A14(v9, &qword_100BFB5B0);
  v22[0] = v6;
  v22[1] = v19;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v22, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibilityRespondsToUserInteraction(_:)(1, v10, OpaqueTypeConformance2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v14, v10);
}

void sub_100672804(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  double v77;
  double v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  char v93;
  char v94;
  char v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  int v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int16 v122;
  __int128 v123;
  __int128 v124;
  unsigned __int8 v125;
  char v126;

  v114 = a2;
  v3 = sub_1000BA294(&qword_100BFB5D0);
  __chkstk_darwin(v3);
  v113 = (uint64_t)&v110 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v116 = (uint64_t *)((char *)&v110 - v6);
  v7 = sub_100672F14();
  v9 = v8;
  v11 = v10;
  v13 = v12 & 1;
  static Color.black.getter(v7);
  v14 = sub_1004EB1C0();
  v15 = Color.opacity(_:)(v14);
  swift_release();
  v16 = sub_1004EB1EC();
  v17 = sub_1004EB210();
  v18 = sub_1004EB230();
  v118 = Text.shadow(color:radius:x:y:)(v15, v7, v9, v13, v11, v16, v17, v18);
  v117 = v19;
  v115 = v20;
  v119 = v21;
  swift_release();
  sub_1000D31B4(v7, v9, v13);
  swift_bridgeObjectRelease();
  v22 = a1 + *(int *)(type metadata accessor for LocationHeaderViewLargeText(0) + 24);
  if (*(_BYTE *)(v22 + 48))
  {
    if (*(_BYTE *)(v22 + 48) == 1)
    {
      v23 = *(_QWORD *)(v22 + 40);
      *(_QWORD *)&v123 = *(_QWORD *)(v22 + 32);
      *((_QWORD *)&v123 + 1) = v23;
      v24 = sub_100114EF8();
      swift_bridgeObjectRetain();
      v25 = Text.init<A>(_:)(&v123, &type metadata for String, v24);
      v27 = v26;
      v29 = v28;
      v111 = a1;
      v31 = v30 & 1;
      v32 = static Font.footnote.getter(v25);
      v33 = Text.font(_:)(v32, v25, v27, v31, v29);
      v35 = v34;
      v37 = v36;
      v39 = v38;
      swift_release();
      v40 = v37 & 1;
      sub_1000D31B4(v25, v27, v31);
      swift_bridgeObjectRelease();
      static Color.black.getter(v41);
      v42 = sub_1004EB1C0();
      v43 = Color.opacity(_:)(v42);
      swift_release();
      v44 = sub_1004EB1EC();
      v45 = sub_1004EB210();
      v46 = sub_1004EB230();
      v47 = Text.shadow(color:radius:x:y:)(v43, v33, v35, v40, v39, v44, v45, v46);
      v49 = v48;
      LOBYTE(v29) = v50;
      v52 = v51;
      swift_release();
      sub_1000D31B4(v33, v35, v40);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v120 = v47;
      *((_QWORD *)&v120 + 1) = v49;
      *(_QWORD *)&v121 = v29 & 1;
      *((_QWORD *)&v121 + 1) = v52;
      a1 = v111;
      v122 = 256;
      v53 = sub_1000BA294(&qword_100BFB5D8);
      v54 = sub_100675140();
      v55 = v53;
    }
    else
    {
      LOBYTE(v122) = 0;
      v120 = 0u;
      v121 = 0u;
      _ConditionalContent<>.init(storage:)(&v120, &type metadata for EmptyView, &type metadata for Text, &protocol witness table for EmptyView, &protocol witness table for Text);
      v120 = v123;
      v121 = v124;
      v122 = v125;
      v90 = sub_1000BA294(&qword_100BFB5D8);
      v54 = sub_100675140();
      v55 = v90;
    }
    v89 = _ConditionalContent<>.init(storage:)(&v120, v55, &type metadata for Text, v54, &protocol witness table for Text);
  }
  else
  {
    v56 = *(_QWORD *)(v22 + 24);
    *(_QWORD *)&v123 = *(_QWORD *)(v22 + 16);
    *((_QWORD *)&v123 + 1) = v56;
    v57 = sub_100114EF8();
    swift_bridgeObjectRetain();
    v58 = Text.init<A>(_:)(&v123, &type metadata for String, v57);
    v60 = v59;
    v62 = v61;
    v111 = a1;
    v64 = v63 & 1;
    v65 = static Font.footnote.getter(v58);
    v66 = Text.font(_:)(v65, v58, v60, v64, v62);
    v68 = v67;
    v70 = v69;
    v72 = v71;
    swift_release();
    v73 = v70 & 1;
    sub_1000D31B4(v58, v60, v64);
    swift_bridgeObjectRelease();
    static Color.black.getter(v74);
    v75 = sub_1004EB1C0();
    v76 = Color.opacity(_:)(v75);
    swift_release();
    v77 = sub_1004EB1EC();
    v78 = sub_1004EB210();
    v79 = sub_1004EB230();
    v80 = Text.shadow(color:radius:x:y:)(v76, v66, v68, v73, v72, v77, v78, v79);
    v82 = v81;
    LOBYTE(v64) = v83;
    v85 = v84;
    swift_release();
    v86 = v64 & 1;
    sub_1000D31B4(v66, v68, v73);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v120 = v80;
    *((_QWORD *)&v120 + 1) = v82;
    *(_QWORD *)&v121 = v86;
    *((_QWORD *)&v121 + 1) = v85;
    LOBYTE(v122) = 1;
    sub_1000D55D4(v80, v82, v86);
    swift_bridgeObjectRetain();
    _ConditionalContent<>.init(storage:)(&v120, &type metadata for EmptyView, &type metadata for Text, &protocol witness table for EmptyView, &protocol witness table for Text);
    v120 = v123;
    v121 = v124;
    v122 = v125;
    v87 = sub_1000BA294(&qword_100BFB5D8);
    v88 = sub_100675140();
    _ConditionalContent<>.init(storage:)(&v120, v87, &type metadata for Text, v88, &protocol witness table for Text);
    a1 = v111;
    sub_1000D31B4(v80, v82, v86);
    swift_bridgeObjectRelease();
  }
  v91 = *((_QWORD *)&v123 + 1);
  v112 = v123;
  v92 = v124;
  v93 = v125;
  v94 = v126;
  v115 &= 1u;
  v95 = v115;
  v96 = static Alignment.topLeading.getter(v89);
  v97 = v116;
  *v116 = v96;
  v97[1] = v98;
  v99 = sub_1000BA294(&qword_100BFB5E8);
  sub_100672FFC(a1, (uint64_t)v97 + *(int *)(v99 + 44));
  v100 = (uint64_t)v97;
  v101 = v113;
  sub_100037794(v100, v113, &qword_100BFB5D0);
  v102 = v114;
  *v114 = 0;
  *((_BYTE *)v102 + 8) = 1;
  v103 = v118;
  v104 = v117;
  v102[2] = v118;
  v102[3] = v104;
  *((_BYTE *)v102 + 32) = v95;
  v105 = v112;
  v102[5] = v119;
  v102[6] = v105;
  v102[7] = v91;
  *((_OWORD *)v102 + 4) = v92;
  *((_BYTE *)v102 + 80) = v93;
  *((_BYTE *)v102 + 81) = v94;
  v106 = sub_1000BA294(&qword_100BFB5F0);
  sub_100037794(v101, (uint64_t)v102 + *(int *)(v106 + 80), &qword_100BFB5D0);
  v107 = (char *)v102 + *(int *)(v106 + 96);
  *(_QWORD *)v107 = 0;
  v107[8] = 1;
  v108 = v103;
  v109 = v117;
  sub_1000D55D4(v108, v117, v115);
  swift_bridgeObjectRetain();
  sub_1006751A4(v105, v91, v92, *((uint64_t *)&v92 + 1), v93, v94);
  sub_100021A14((uint64_t)v116, &qword_100BFB5D0);
  sub_100021A14(v101, &qword_100BFB5D0);
  sub_100675214(v105, v91, v92, *((uint64_t *)&v92 + 1), v93, v94);
  sub_1000D31B4(v118, v109, v115);
  swift_bridgeObjectRelease();
}

uint64_t sub_100672F14()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for LocationHeaderViewLargeText(0) + 24));
  v2 = v1[1];
  v14[0] = *v1;
  v14[1] = v2;
  v3 = sub_100114EF8();
  swift_bridgeObjectRetain();
  v4 = Text.init<A>(_:)(v14, &type metadata for String, v3);
  v6 = v5;
  v8 = v7;
  v10 = v9 & 1;
  v11 = static Font.largeTitle.getter(v4);
  v12 = Text.font(_:)(v11, v4, v6, v10, v8);
  swift_release();
  sub_1000D31B4(v4, v6, v10);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_100672FFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t OpaqueTypeConformance2;
  unint64_t v23;
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];

  v25[1] = a2;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BFB5F8);
  __chkstk_darwin(v7);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BFB600);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v9 = static HorizontalAlignment.leading.getter(v14);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 0;
  v15 = sub_1000BA294(&qword_100BFB608);
  sub_1006731E4(a1, (uint64_t *)&v9[*(int *)(v15 + 44)]);
  static AccessibilityChildBehavior.ignore.getter(v16);
  sub_10003D310(&qword_100BFB610, &qword_100BFB5F8, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v18 = v17;
  View.accessibilityElement(children:)(v6, v7, v17);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100021A14((uint64_t)v9, &qword_100BFB5F8);
  v19 = a1 + *(int *)(type metadata accessor for LocationHeaderViewLargeText(0) + 24);
  v21 = *(_QWORD *)(v19 + 144);
  v20 = *(_QWORD *)(v19 + 152);
  v27[0] = v21;
  v27[1] = v20;
  v26[0] = v7;
  v26[1] = v18;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v26, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v23 = sub_100114EF8();
  View.accessibilityLabel<A>(_:)(v27, v10, &type metadata for String, OpaqueTypeConformance2, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

void sub_1006731E4(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t (*v46)(char *, _QWORD, uint64_t);
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  double v71;
  double v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  __n128 v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  double v119;
  double v120;
  double v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  _BYTE v148[624];
  _BYTE v149[624];
  _BYTE v150[624];
  _BYTE v151[624];
  _BYTE v152[624];
  _BYTE v153[648];
  _QWORD v154[78];
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  unsigned __int8 v158;

  v145 = a2;
  v3 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v3);
  v137 = (char *)&v122 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BlendMode(0);
  v135 = *(_QWORD *)(v5 - 8);
  v136 = v5;
  __chkstk_darwin(v5);
  v134 = (char *)&v122 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BCCDA8);
  __chkstk_darwin(v7);
  v138 = (uint64_t)&v122 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v130 = (char *)&v122 - v10;
  v11 = type metadata accessor for Font.TextStyle(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v122 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_1000BA294(&qword_100BC3B90);
  __chkstk_darwin(v131);
  v16 = (char *)&v122 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v147 = (uint64_t)&v122 - v18;
  v19 = type metadata accessor for LocationHeaderViewLargeText(0);
  __chkstk_darwin(v19);
  v133 = (uint64_t)&v122 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v132 = (uint64_t)&v122 - v22;
  __chkstk_darwin(v23);
  v25 = (char *)&v122 - v24;
  __chkstk_darwin(v26);
  v28 = (char *)&v122 - v27;
  sub_100673BE8(a1, &v155);
  v142 = *((_QWORD *)&v155 + 1);
  v143 = v155;
  v140 = v157;
  v141 = v156;
  v139 = v158;
  v146 = a1 + *(int *)(v19 + 24);
  v29 = *(unsigned __int8 *)(v146 + 136);
  sub_10000AB54(a1, (uint64_t)v28, type metadata accessor for LocationHeaderViewLargeText);
  v144 = v16;
  v122 = v19;
  if (v29 != 1)
  {
    sub_1000215BC((uint64_t)v28, type metadata accessor for LocationHeaderViewLargeText);
    sub_10000AB54(a1, (uint64_t)v25, type metadata accessor for LocationHeaderViewLargeText);
LABEL_12:
    sub_1000215BC((uint64_t)v25, type metadata accessor for LocationHeaderViewLargeText);
    goto LABEL_13;
  }
  v30 = &v28[*(int *)(v19 + 24)];
  v32 = *((_QWORD *)v30 + 13);
  v31 = *((_QWORD *)v30 + 14);
  v33 = v32 & 0xFFFFFFFFFFFFLL;
  if ((v31 & 0x2000000000000000) != 0)
    v34 = HIBYTE(v31) & 0xF;
  else
    v34 = v33;
  sub_1000215BC((uint64_t)v28, type metadata accessor for LocationHeaderViewLargeText);
  sub_10000AB54(a1, (uint64_t)v25, type metadata accessor for LocationHeaderViewLargeText);
  if (!v34)
    goto LABEL_12;
  v35 = &v25[*(int *)(v122 + 24)];
  v37 = *((_QWORD *)v35 + 15);
  v36 = *((_QWORD *)v35 + 16);
  v38 = v37 & 0xFFFFFFFFFFFFLL;
  if ((v36 & 0x2000000000000000) != 0)
    v39 = HIBYTE(v36) & 0xF;
  else
    v39 = v38;
  sub_1000215BC((uint64_t)v25, type metadata accessor for LocationHeaderViewLargeText);
  if (v39)
  {
    sub_100674178(v153);
    memcpy(v154, v153, 0x26BuLL);
    LocationSearchEntityFromStringResolver.init()();
    goto LABEL_14;
  }
LABEL_13:
  sub_100675284((uint64_t)v154);
LABEL_14:
  sub_1000F111C((uint64_t)v154, (uint64_t)&v155, &qword_100BFB618);
  v40 = *(_QWORD *)(v146 + 64);
  v154[0] = *(_QWORD *)(v146 + 56);
  v154[1] = v40;
  v41 = sub_100114EF8();
  swift_bridgeObjectRetain();
  v42 = Text.init<A>(_:)(v154, &type metadata for String, v41);
  v127 = v43;
  v128 = v42;
  v129 = v44;
  v126 = v45 & 1;
  v46 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v12 + 104);
  v47 = v46(v14, enum case for Font.TextStyle.title3(_:), v11);
  static Font.Weight.medium.getter(v47);
  v48 = static Font.system(_:weight:)(v14);
  v49 = *(void (**)(char *, uint64_t))(v12 + 8);
  v49(v14, v11);
  v50 = v46(v14, enum case for Font.TextStyle.body(_:), v11);
  static Font.Weight.medium.getter(v50);
  v51 = static Font.system(_:weight:)(v14);
  v49(v14, v11);
  v52 = *(_QWORD *)a1;
  LOBYTE(v49) = *(_BYTE *)(a1 + 8);
  sub_10008D47C(*(_QWORD *)a1, (char)v49);
  sub_100109B54();
  v54 = v53;
  sub_1000B15F8(v52, (char)v49);
  v55 = enum case for Font.Leading.tight(_:);
  v56 = type metadata accessor for Font.Leading(0);
  v57 = (uint64_t)v130;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 104))(v130, v55, v56);
  _s7Weather24LocationCompositionStateOwst_0(v57, 0, 1, v56);
  v58 = v138;
  sub_100037794(v57, v138, &qword_100BCCDA8);
  swift_retain();
  swift_retain();
  v59 = sub_10040BDEC(v48, v51, v54 & 1, v58);
  v61 = v127;
  v60 = v128;
  v62 = v126;
  v63 = Text.font(_:)(v59, v128, v127, v126, v129);
  v123 = v64;
  v124 = v63;
  v138 = a1;
  v66 = v65;
  v125 = v67;
  swift_release();
  swift_release();
  swift_release();
  LOBYTE(v51) = v66 & 1;
  sub_1000D31B4(v60, v61, v62);
  swift_bridgeObjectRelease();
  sub_100021A14(v57, &qword_100BCCDA8);
  static Color.black.getter(v68);
  v69 = sub_1004EB1C0();
  v70 = Color.opacity(_:)(v69);
  swift_release();
  v71 = sub_1004EB1EC();
  v72 = sub_1004EB210();
  v73 = sub_1004EB230();
  v75 = v123;
  v74 = v124;
  v76 = Text.shadow(color:radius:x:y:)(v70, v124, v123, v66 & 1, v125, v71, v72, v73);
  v78 = v77;
  LOBYTE(v60) = v79;
  v81 = v80;
  swift_release();
  LOBYTE(v70) = v60 & 1;
  sub_1000D31B4(v74, v75, v51);
  v82 = swift_bridgeObjectRelease();
  LODWORD(v154[0]) = static HierarchicalShapeStyle.secondary.getter(v82);
  v83 = Text.foregroundStyle<A>(_:)(v154, v76, v78, v60 & 1, v81, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v85 = v84;
  v87 = v86;
  LOBYTE(v74) = v88 & 1;
  sub_1000D31B4(v76, v78, v70);
  v89 = swift_bridgeObjectRelease();
  v90 = v134;
  v91 = v135;
  v92 = v136;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v135 + 104))(v134, enum case for BlendMode.plusLighter(_:), v136, v89);
  v93 = (uint64_t)v137;
  (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v137, v90, v92);
  v94 = (uint64_t)v144;
  sub_10000AB54(v93, (uint64_t)&v144[*(int *)(v131 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *(_QWORD *)v94 = v83;
  *(_QWORD *)(v94 + 8) = v85;
  *(_BYTE *)(v94 + 16) = v74;
  *(_QWORD *)(v94 + 24) = v87;
  sub_1000D55D4(v83, v85, v74);
  swift_bridgeObjectRetain();
  v95 = v93;
  v96 = v138;
  sub_1000215BC(v95, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v90, v92);
  sub_1000D31B4(v83, v85, v74);
  swift_bridgeObjectRelease();
  v97 = v147;
  sub_1000F111C(v94, v147, &qword_100BC3B90);
  LOBYTE(v87) = *(_BYTE *)(v146 + 136);
  v98 = v132;
  sub_10000AB54(v96, v132, type metadata accessor for LocationHeaderViewLargeText);
  if ((v87 & 1) != 0)
  {
    sub_1000215BC(v98, type metadata accessor for LocationHeaderViewLargeText);
    v99 = v133;
    sub_10000AB54(v96, v133, type metadata accessor for LocationHeaderViewLargeText);
LABEL_25:
    sub_1000215BC(v99, type metadata accessor for LocationHeaderViewLargeText);
LABEL_26:
    sub_100675284((uint64_t)v153);
    goto LABEL_27;
  }
  v100 = v122;
  v101 = v98 + *(int *)(v122 + 24);
  v103 = *(_QWORD *)(v101 + 104);
  v102 = *(_QWORD *)(v101 + 112);
  v104 = v103 & 0xFFFFFFFFFFFFLL;
  if ((v102 & 0x2000000000000000) != 0)
    v105 = HIBYTE(v102) & 0xF;
  else
    v105 = v104;
  sub_1000215BC(v98, type metadata accessor for LocationHeaderViewLargeText);
  v99 = v133;
  sub_10000AB54(v96, v133, type metadata accessor for LocationHeaderViewLargeText);
  if (!v105)
    goto LABEL_25;
  v106 = v99 + *(int *)(v100 + 24);
  v108 = *(_QWORD *)(v106 + 120);
  v107 = *(_QWORD *)(v106 + 128);
  v109 = v108 & 0xFFFFFFFFFFFFLL;
  if ((v107 & 0x2000000000000000) != 0)
    v110 = HIBYTE(v107) & 0xF;
  else
    v110 = v109;
  sub_1000215BC(v99, type metadata accessor for LocationHeaderViewLargeText);
  if (!v110)
    goto LABEL_26;
  sub_100674178(v152);
  memcpy(v153, v152, 0x26BuLL);
  LocationSearchEntityFromStringResolver.init()();
LABEL_27:
  sub_1000F111C((uint64_t)v153, (uint64_t)v154, &qword_100BFB618);
  sub_1000F111C((uint64_t)&v155, (uint64_t)v149, &qword_100BFB618);
  sub_100037794(v97, v94, &qword_100BC3B90);
  sub_1000F111C((uint64_t)v154, (uint64_t)v148, &qword_100BFB618);
  v111 = v145;
  v113 = v142;
  v112 = v143;
  *v145 = v143;
  v111[1] = v113;
  v114 = v140;
  v115 = v141;
  v111[2] = v141;
  v111[3] = v114;
  *((_BYTE *)v111 + 32) = v139;
  sub_1000F111C((uint64_t)v149, (uint64_t)v150, &qword_100BFB618);
  sub_1000F111C((uint64_t)v150, (uint64_t)(v111 + 5), &qword_100BFB618);
  v116 = sub_1000BA294(&qword_100BFB620);
  sub_100037794(v94, (uint64_t)v111 + *(int *)(v116 + 64), &qword_100BC3B90);
  v117 = (uint64_t)v111 + *(int *)(v116 + 80);
  sub_1000F111C((uint64_t)v148, (uint64_t)v151, &qword_100BFB618);
  sub_1000F111C((uint64_t)v151, v117, &qword_100BFB618);
  v118 = sub_100177CCC(v112, v113, v115, v114);
  sub_100675814(v150, sub_1006752B4, v118);
  sub_100675814(v151, sub_1006752B4, v119);
  sub_100021A14(v147, &qword_100BC3B90);
  sub_1000F111C((uint64_t)v148, (uint64_t)v152, &qword_100BFB618);
  sub_100675814(v152, sub_10067592C, v120);
  sub_100021A14(v94, &qword_100BC3B90);
  sub_1000F111C((uint64_t)v149, (uint64_t)v153, &qword_100BFB618);
  sub_100675814(v153, sub_10067592C, v121);
  sub_100177CF4(v112, v113, v115, v114);
}

double sub_100673BE8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  __n128 v40;
  void (*v41)(char *, uint64_t, __n128);
  uint64_t v42;
  uint64_t v43;
  double v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  double v94;
  double v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  double result;
  __int128 v104;
  char v105;
  _OWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _OWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  _OWORD v121[2];
  char v122;

  v115 = a2;
  v3 = type metadata accessor for Font.Context(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v107 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocationHeaderViewLargeText(0);
  v8 = (_QWORD *)(a1 + *(int *)(v7 + 24));
  v9 = v8[12];
  if (v9)
  {
    v107 = v8[11];
    v110 = v4;
    v10 = v8[10];
    *(_QWORD *)&v121[0] = v8[9];
    *((_QWORD *)&v121[0] + 1) = v10;
    v109 = v7;
    v11 = sub_100114EF8();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12 = Text.init<A>(_:)(v121, &type metadata for String, v11);
    v108 = v3;
    v14 = v13;
    v16 = v15;
    v18 = v17 & 1;
    v19 = sub_100672368();
    v113 = Text.font(_:)(v19, v12, v14, v18, v16);
    v112 = v20;
    v22 = v21;
    v114 = v23;
    swift_release();
    v111 = v22 & 1;
    sub_1000D31B4(v12, v14, v18);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v121[0] = v107;
    *((_QWORD *)&v121[0] + 1) = v9;
    v24 = Text.init<A>(_:)(v121, &type metadata for String, v11);
    v26 = v25;
    v28 = v27;
    v30 = v29 & 1;
    v31 = sub_1006724E4();
    v32 = Text.font(_:)(v31, v24, v26, v30, v28);
    v34 = v33;
    LOBYTE(v12) = v35;
    v107 = v36;
    swift_release();
    v37 = v12 & 1;
    sub_1000D31B4(v24, v26, v30);
    swift_bridgeObjectRelease();
    v38 = sub_100672368();
    sub_10015905C();
    v39 = Font.capHeight(in:)(v6, v38);
    v40 = swift_release();
    v41 = *(void (**)(char *, uint64_t, __n128))(v110 + 8);
    v42 = v108;
    v41(v6, v108, v40);
    v43 = sub_1006724E4();
    sub_10015905C();
    v44 = Font.capHeight(in:)(v6, v43);
    v45 = swift_release();
    v41(v6, v42, v45);
    v46 = Text.baselineOffset(_:)(v32, v34, v37, v107, v39 - v44 + -1.0);
    v48 = v47;
    v50 = v49;
    v52 = v51 & 1;
    sub_1000D31B4(v32, v34, v37);
    swift_bridgeObjectRelease();
    static Color.black.getter(v53);
    v54 = sub_1004EB1C0();
    v55 = Color.opacity(_:)(v54);
    swift_release();
    v56 = sub_1004EB1EC();
    v57 = sub_1004EB210();
    v58 = sub_1004EB230();
    v59 = Text.shadow(color:radius:x:y:)(v55, v46, v48, v52, v50, v56, v57, v58);
    v61 = v60;
    LOBYTE(v32) = v62;
    v64 = v63;
    swift_release();
    v65 = v32 & 1;
    sub_1000D31B4(v46, v48, v52);
    swift_bridgeObjectRelease();
    v66 = v113;
    v67 = v112;
    LOBYTE(v37) = v111;
    v110 = static Text.+ infix(_:_:)(v113, v112, v111, v114, v59, v61, v65, v64);
    v109 = v68;
    v70 = v69;
    v72 = v71 & 1;
    sub_1000D31B4(v59, v61, v65);
    swift_bridgeObjectRelease();
    sub_1000D31B4(v66, v67, v37);
    swift_bridgeObjectRelease();
    v116 = v110;
    v117 = v109;
    v118 = v72;
    v119 = v70;
    v120 = 0;
  }
  else
  {
    v73 = v8[10];
    *(_QWORD *)&v121[0] = v8[9];
    *((_QWORD *)&v121[0] + 1) = v73;
    v74 = sub_100114EF8();
    swift_bridgeObjectRetain();
    v75 = Text.init<A>(_:)(v121, &type metadata for String, v74);
    v77 = v76;
    v79 = v78;
    v81 = v80 & 1;
    v82 = sub_100672368();
    v83 = Text.font(_:)(v82, v75, v77, v81, v79);
    v85 = v84;
    v87 = v86;
    v89 = v88;
    swift_release();
    v90 = v87 & 1;
    sub_1000D31B4(v75, v77, v81);
    swift_bridgeObjectRelease();
    static Color.black.getter(v91);
    v92 = sub_1004EB1C0();
    v93 = Color.opacity(_:)(v92);
    swift_release();
    v94 = sub_1004EB1EC();
    v95 = sub_1004EB210();
    v96 = sub_1004EB230();
    v97 = Text.shadow(color:radius:x:y:)(v93, v83, v85, v90, v89, v94, v95, v96);
    v99 = v98;
    LOBYTE(v77) = v100;
    v102 = v101;
    swift_release();
    sub_1000D31B4(v83, v85, v90);
    swift_bridgeObjectRelease();
    v116 = v97;
    v117 = v99;
    v118 = v77 & 1;
    v119 = v102;
    v120 = 1;
  }
  _ConditionalContent<>.init(storage:)(&v116, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
  result = *(double *)v121;
  v104 = v121[1];
  v105 = v122;
  v106 = v115;
  *v115 = v121[0];
  v106[1] = v104;
  *((_BYTE *)v106 + 32) = v105;
  return result;
}

void *sub_100674178@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  id v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  id v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  uint64_t (*v57)(char *, _QWORD, uint64_t, __n128);
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  void *v88;
  char *v89;
  _BYTE v90[592];
  _BYTE v91[608];
  _BYTE v92[640];
  uint64_t v93;
  uint64_t v94;
  char v95;
  _BYTE v96[599];
  __int16 v97;
  _BYTE v98[619];
  Swift::String v99;
  Swift::String v100;

  v2 = v1;
  v4 = sub_1000BA294(&qword_100BCCDA8);
  __chkstk_darwin(v4);
  v6 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v81 - v8;
  v10 = type metadata accessor for Font.TextStyle(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = v2 + *(int *)(type metadata accessor for LocationHeaderViewLargeText(0) + 24);
  if (*(_BYTE *)(v17 + 136) == 1)
  {
    v18 = (void *)objc_opt_self(NSBundle);
    v19 = objc_msgSend(v18, "mainBundle");
    v99._countAndFlagsBits = 0xD000000000000051;
    v99._object = (void *)0x8000000100A0E9A0;
    v20._countAndFlagsBits = 0x98ABE9809CE6;
    v20._object = (void *)0xA600000000000000;
    v21._countAndFlagsBits = 0;
    v21._object = (void *)0xE000000000000000;
    v22 = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, (Swift::String_optional)0, (NSBundle)v19, v21, v99);

    v23 = objc_msgSend(v18, "mainBundle");
    v100._object = (void *)0x8000000100A0EA00;
    v24._countAndFlagsBits = 0x8EBDE4809CE6;
    v24._object = (void *)0xA600000000000000;
    v25._countAndFlagsBits = 0;
    v25._object = (void *)0xE000000000000000;
    v100._countAndFlagsBits = 0xD000000000000050;
    v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v24, (Swift::String_optional)0, (NSBundle)v23, v25, v100);

    v28 = static VerticalAlignment.center.getter(v27);
    sub_100674784(v22._countAndFlagsBits, (unint64_t)v22._object, v2, v26._countAndFlagsBits, (unint64_t)v26._object, (uint64_t)v90);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v91[600] = 0;
    memcpy(&v91[7], v90, 0x250uLL);
    v93 = v28;
    v94 = 0x4020000000000000;
    v95 = 0;
    memcpy(v96, v91, sizeof(v96));
    v97 = 256;
    sub_100675F1C((uint64_t)&v93);
  }
  else
  {
    v89 = v9;
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(6, 2);
    v29._countAndFlagsBits = 14920;
    v29._object = (void *)0xE200000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v29);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(v17 + 104));
    v30._countAndFlagsBits = 978067488;
    v30._object = (void *)0xE400000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v30);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(v17 + 120));
    v31._countAndFlagsBits = 0;
    v31._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v31);
    v32 = LocalizedStringKey.init(stringInterpolation:)(v16);
    v36 = Text.init(_:tableName:bundle:comment:)(v32, v34, v33 & 1, v35, 0, 0, 0, "High temperature and Low temperature with 2 space separation", 60, 2);
    v81 = v11;
    v82 = v2;
    v37 = v36;
    v39 = v38;
    v88 = a1;
    v41 = v40;
    v43 = v42 & 1;
    static Color.black.getter(v36);
    v44 = sub_1004EB1C0();
    v45 = Color.opacity(_:)(v44);
    v87 = v6;
    v46 = v45;
    swift_release();
    v47 = sub_1004EB1EC();
    v48 = sub_1004EB210();
    v49 = sub_1004EB230();
    v50 = Text.shadow(color:radius:x:y:)(v46, v37, v39, v43, v41, v47, v48, v49);
    v84 = v51;
    v85 = v50;
    v53 = v52;
    v86 = v54;
    swift_release();
    v83 = v53 & 1;
    sub_1000D31B4(v37, v39, v43);
    v55 = swift_bridgeObjectRelease();
    v56 = v81;
    v57 = *(uint64_t (**)(char *, _QWORD, uint64_t, __n128))(v81 + 104);
    v58 = v57(v13, enum case for Font.TextStyle.title3(_:), v10, v55);
    static Font.Weight.medium.getter(v58);
    v59 = static Font.system(_:weight:)(v13);
    v60 = *(void (**)(char *, uint64_t))(v56 + 8);
    v60(v13, v10);
    v61 = ((uint64_t (*)(char *, _QWORD, uint64_t))v57)(v13, enum case for Font.TextStyle.body(_:), v10);
    static Font.Weight.medium.getter(v61);
    v62 = static Font.system(_:weight:)(v13);
    v60(v13, v10);
    v63 = *(_QWORD *)v82;
    LOBYTE(v60) = *(_BYTE *)(v82 + 8);
    sub_10008D47C(*(_QWORD *)v82, (char)v60);
    sub_100109B54();
    LOBYTE(v46) = v64;
    sub_1000B15F8(v63, (char)v60);
    v65 = enum case for Font.Leading.tight(_:);
    v66 = type metadata accessor for Font.Leading(0);
    v67 = (uint64_t)v89;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 104))(v89, v65, v66);
    _s7Weather24LocationCompositionStateOwst_0(v67, 0, 1, v66);
    v68 = (uint64_t)v87;
    sub_100037794(v67, (uint64_t)v87, &qword_100BCCDA8);
    swift_retain();
    swift_retain();
    v69 = sub_10040BDEC(v59, v62, v46 & 1, v68);
    v70 = v84;
    v71 = v85;
    v72 = v83;
    v82 = Text.font(_:)(v69, v85, v84, v83, v86);
    v74 = v73;
    v76 = v75;
    v87 = (char *)v77;
    swift_release();
    a1 = v88;
    swift_release();
    swift_release();
    sub_1000D31B4(v71, v70, v72);
    swift_bridgeObjectRelease();
    sub_100021A14((uint64_t)v89, &qword_100BCCDA8);
    v93 = v82;
    v94 = v74;
    v95 = v76 & 1;
    *(_QWORD *)&v96[7] = v87;
    sub_100675E8C((uint64_t)&v93);
  }
  sub_1000F111C((uint64_t)&v93, (uint64_t)v92, &qword_100BFB628);
  v78 = sub_1000BA294(&qword_100BFB630);
  v79 = sub_100675E98();
  _ConditionalContent<>.init(storage:)(v92, v78, &type metadata for Text, v79, &protocol witness table for Text);
  return memcpy(a1, v98, 0x26BuLL);
}

uint64_t sub_100674784@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  __n128 v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  __n128 v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  void (*v58)(char *, uint64_t, __n128);
  void (*v59)(char *);
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  UIFontTextStyle v69;
  unint64_t v70;
  _QWORD *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  _QWORD v85[29];
  uint64_t v86;
  char v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  _QWORD v98[37];
  unsigned __int8 v99;
  uint64_t v100;
  unsigned __int8 v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE v104[208];
  _BYTE v105[224];
  _BYTE v106[215];
  _BYTE v107[208];
  _BYTE v108[224];
  _BYTE v109[215];
  _BYTE v110[232];
  _QWORD v111[30];

  v76 = a4;
  v77 = a5;
  v80 = a6;
  v57 = type metadata accessor for Font.Leading(0);
  v9 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = static HorizontalAlignment.center.getter(v12);
  v62 = a3;
  sub_100674D54(a1, a2);
  v105[216] = 0;
  memcpy(&v105[7], v104, 0xD0uLL);
  v78 = 0;
  memcpy(v106, v105, sizeof(v106));
  v71 = (_QWORD *)(a3 + *(int *)(type metadata accessor for LocationHeaderViewLargeText(0) + 24));
  v13 = v71[14];
  v111[0] = v71[13];
  v111[1] = v13;
  v14 = sub_100114EF8();
  v70 = v14;
  swift_bridgeObjectRetain();
  v15 = Text.init<A>(_:)(v111, &type metadata for String, v14);
  v17 = v16;
  v68 = v18;
  v20 = v19 & 1;
  sub_100675F24();
  v69 = UIFontTextStyleBody;
  v21.n128_u64[0] = 0x4043800000000000;
  v22.n128_u64[0] = 0x404C000000000000;
  v23 = static UIFont.scaledSystemFont(ofSize:style:maxSize:weight:traits:)(UIFontTextStyleBody, 0, v21, v22, UIFontWeightLight);
  v24 = Font.init(_:)(v23);
  v60 = enum case for Font.Leading.tight(_:);
  v59 = *(void (**)(char *))(v9 + 104);
  v25 = v11;
  v26 = v11;
  v27 = v57;
  v59(v26);
  v28 = Font.leading(_:)(v25, v24);
  v29 = swift_release();
  v58 = *(void (**)(char *, uint64_t, __n128))(v9 + 8);
  v58(v25, v27, v29);
  v30 = Text.font(_:)(v28, v15, v17, v20, v68);
  v73 = v31;
  v74 = v30;
  v72 = v32;
  v75 = v33;
  swift_release();
  sub_1000D31B4(v15, v17, v20);
  swift_bridgeObjectRelease();
  static Alignment.center.getter(v34);
  v35 = _FrameLayout.init(width:height:alignment:)(0x4018000000000000, 0, 0, 1);
  v68 = v98[36];
  v67 = v99;
  v66 = v100;
  v65 = v101;
  v63 = v103;
  v64 = v102;
  v61 = static HorizontalAlignment.center.getter(v35);
  sub_100674D54(v76, v77);
  v108[216] = 0;
  memcpy(&v108[7], v107, 0xD0uLL);
  LODWORD(v77) = 0;
  memcpy(v109, v108, sizeof(v109));
  v36 = v71[16];
  v111[0] = v71[15];
  v111[1] = v36;
  swift_bridgeObjectRetain();
  v37 = Text.init<A>(_:)(v111, &type metadata for String, v70);
  v39 = v38;
  v41 = v40;
  v43 = v42 & 1;
  v44.n128_u64[0] = 0x4043800000000000;
  v45.n128_u64[0] = 0x404C000000000000;
  v46 = static UIFont.scaledSystemFont(ofSize:style:maxSize:weight:traits:)(v69, 0, v44, v45, UIFontWeightLight);
  v47 = Font.init(_:)(v46);
  ((void (*)(char *, _QWORD, uint64_t))v59)(v25, v60, v27);
  v48 = Font.leading(_:)(v25, v47);
  v49 = swift_release();
  v58(v25, v27, v49);
  v50 = Text.font(_:)(v48, v37, v39, v43, v41);
  v52 = v51;
  LOBYTE(v9) = v53;
  v55 = v54;
  swift_release();
  sub_1000D31B4(v37, v39, v43);
  swift_bridgeObjectRelease();
  v98[0] = v79;
  v98[1] = 0;
  LOBYTE(v98[2]) = v78;
  memcpy((char *)&v98[2] + 1, v106, 0xD7uLL);
  v94 = v74;
  v95 = v73;
  v96 = v72 & 1;
  v97 = v75;
  v98[29] = v98;
  v98[30] = &v94;
  v86 = 0;
  v87 = 1;
  v88 = v68;
  v89 = v67;
  v90 = v66;
  v91 = v65;
  v92 = v64;
  v93 = v63;
  v98[31] = &v86;
  v85[0] = v61;
  v85[1] = 0;
  LOBYTE(v85[2]) = v77;
  memcpy((char *)&v85[2] + 1, v109, 0xD7uLL);
  v81 = v50;
  v82 = v52;
  v83 = v9 & 1;
  v84 = v55;
  v98[32] = v85;
  v98[33] = &v81;
  sub_10035E7F8();
  sub_1000D31B4(v81, v82, v83);
  swift_bridgeObjectRelease();
  memcpy(v110, v85, sizeof(v110));
  sub_100675F60((uint64_t)v110);
  sub_1000D31B4(v94, v95, v96);
  swift_bridgeObjectRelease();
  memcpy(v111, v98, 0xE8uLL);
  return sub_100675F60((uint64_t)v111);
}

unint64_t sub_100674C80(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v4 = HIBYTE(a3) & 0xF;
    else
      v4 = a2 & 0xFFFFFFFFFFFFLL;
    v5 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v5 = 11;
    v6 = v5 | (v4 << 16);
    result = String.index(_:offsetBy:limitedBy:)(v6, -(uint64_t)result, 15, a2, a3);
    if ((v7 & 1) != 0)
      result = 15;
    if (4 * v4 >= result >> 14)
    {
      v8 = String.subscript.getter(result, v6);
      swift_bridgeObjectRelease(a3);
      return v8;
    }
  }
  __break(1u);
  return result;
}

void sub_100674D54(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  __n128 v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  __n128 v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, __n128);
  void (*v54)(uint64_t);
  unsigned int v55;
  unint64_t v57;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  char v108;
  __int128 v109;

  v4 = type metadata accessor for Font.Leading(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100098728();
  v8 = v7 - v6;
  static Alignment.center.getter(v9);
  sub_1000C3E4C();
  v68 = v99;
  v67 = v100;
  v66 = v101;
  v65 = v102;
  v63 = v104;
  v64 = v103;
  swift_bridgeObjectRetain();
  v86 = sub_100280C14(1, a1, a2);
  v87 = v10;
  v88 = v11;
  v89 = v12;
  v57 = sub_10023E9AC();
  v13 = Text.init<A>(_:)(&v86, &type metadata for Substring, v57);
  v15 = v14;
  v52 = v16;
  v18 = v17 & 1;
  sub_100675F24();
  v19.n128_u64[0] = 14.0;
  v20.n128_u64[0] = 20.0;
  v21 = sub_1000DDDD4((uint64_t)UIFontTextStyleBody, v19, v20);
  v22 = Font.init(_:)(v21);
  v55 = enum case for Font.Leading.tight(_:);
  v54 = *(void (**)(uint64_t))(v5 + 104);
  v54(v8);
  v23 = Font.leading(_:)(v8, v22);
  v24 = swift_release();
  v53 = *(void (**)(uint64_t, uint64_t, __n128))(v5 + 8);
  v53(v8, v4, v24);
  v25 = Text.font(_:)(v23, v13, v15, v18, v52);
  v60 = v26;
  v61 = v25;
  v59 = v27;
  v62 = v28;
  swift_release();
  sub_1000D31B4(v13, v15, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v86 = sub_100674C80(1uLL, a1, a2);
  v87 = v29;
  v88 = v30;
  v89 = v31;
  v32 = Text.init<A>(_:)(&v86, &type metadata for Substring, v57);
  v34 = v33;
  v36 = v35;
  v38 = v37 & 1;
  v39.n128_u64[0] = 14.0;
  v40.n128_u64[0] = 20.0;
  v41 = sub_1000DDDD4((uint64_t)UIFontTextStyleBody, v39, v40);
  v42 = Font.init(_:)(v41);
  ((void (*)(uint64_t, _QWORD, uint64_t))v54)(v8, v55, v4);
  v43 = Font.leading(_:)(v8, v42);
  v44 = swift_release();
  v53(v8, v4, v44);
  v45 = Text.font(_:)(v43, v32, v34, v38, v36);
  v47 = v46;
  LOBYTE(v15) = v48;
  v50 = v49;
  swift_release();
  sub_1000D31B4(v32, v34, v38);
  swift_bridgeObjectRelease();
  static Alignment.center.getter(v51);
  sub_1000C3E4C();
  v86 = 0;
  LOBYTE(v87) = 1;
  v88 = v68;
  LOBYTE(v89) = v67;
  v90 = v66;
  v91 = v65;
  v92 = v64;
  v93 = v63;
  v82 = v61;
  v83 = v60;
  v84 = v59 & 1;
  v85 = v62;
  v94 = &v86;
  v95 = &v82;
  v79 = v50;
  v80 = 0;
  v81 = 0;
  v76 = v45;
  v77 = v47;
  v78 = v15 & 1;
  v96 = &v80;
  v97 = &v76;
  v69 = 0;
  v70 = 1;
  v71 = v105;
  v72 = v106;
  v73 = v107;
  v74 = v108;
  v75 = v109;
  v98 = &v69;
  sub_10035E968();
  sub_1000D31B4(v76, v77, v78);
  swift_bridgeObjectRelease();
  sub_1000D31B4(v82, v83, v84);
  swift_bridgeObjectRelease();
}

unint64_t sub_100675140()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFB5E0;
  if (!qword_100BFB5E0)
  {
    v1 = sub_100075EB0(&qword_100BFB5D8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFB5E0);
  }
  return result;
}

double sub_1006751A4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6)
{
  double result;

  if ((a6 & 1) == 0)
    return sub_1006751E4(a1, a2, a3, a4, a5 & 1);
  sub_1000D55D4(a1, a2, a3 & 1);
  *(_QWORD *)&result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

double sub_1006751E4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  double result;

  if ((a5 & 1) != 0)
  {
    sub_1000D55D4(a1, a2, a3 & 1);
    *(_QWORD *)&result = swift_bridgeObjectRetain().n128_u64[0];
  }
  return result;
}

double sub_100675214(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6)
{
  double result;

  if ((a6 & 1) == 0)
    return sub_100675254(a1, a2, a3, a4, a5 & 1);
  sub_1000D31B4(a1, a2, a3 & 1);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

double sub_100675254(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  double result;

  if ((a5 & 1) != 0)
  {
    sub_1000D31B4(a1, a2, a3 & 1);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  }
  return result;
}

void sub_100675284(uint64_t a1)
{
  bzero((void *)a1, 0x268uLL);
  *(_BYTE *)(a1 + 618) = -1;
  *(_WORD *)(a1 + 616) = 0;
}

double sub_1006752B4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  double result;
  unint64_t v69;

  v63 = STACK[0x428];
  if (BYTE2(LODWORD(STACK[0x428])) != 255)
  {
    v69 = STACK[0x420];
    v64 = STACK[0x418];
    v65 = STACK[0x410];
    v66 = STACK[0x408];
    v67 = STACK[0x400];
    LOWORD(STACK[0x428]) = v63;
    STACK[0x420] = v69;
    STACK[0x418] = v64;
    STACK[0x410] = v65;
    STACK[0x408] = v66;
    STACK[0x400] = v67;
    LOBYTE(STACK[0x42A]) = BYTE2(v63) & 1;
    return sub_1006756C4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48,
             a49,
             a50,
             a51,
             a52,
             a53,
             a54,
             a55,
             a56,
             a57,
             a58,
             a59,
             a60,
             a61,
             a62,
             a63);
  }
  return result;
}

double sub_1006756C4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  char v64;
  double result;
  char v66;
  unint64_t v67;
  unint64_t v68;

  if ((STACK[0x2EA] & 1) != 0)
  {
    v64 = a3 & 1;
  }
  else
  {
    v68 = STACK[0x2D0];
    v67 = STACK[0x2C8];
    v66 = STACK[0x2D8] & 1;
    sub_1000D55D4(a15, a16, a17 & 1);
    swift_bridgeObjectRetain();
    sub_1000D55D4(a21, a22, a23 & 1);
    swift_bridgeObjectRetain();
    sub_1000D55D4(a33, a34, a35 & 1);
    swift_bridgeObjectRetain();
    sub_1000D55D4(a56, a57, a58 & 1);
    swift_bridgeObjectRetain();
    sub_1000D55D4(a62, a63, a64 & 1);
    swift_bridgeObjectRetain();
    a1 = v67;
    a2 = v68;
    v64 = v66;
  }
  sub_1000D55D4(a1, a2, v64);
  *(_QWORD *)&result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

#error "100675904: call analysis failed (funcsize=70)"

double sub_10067592C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  double result;
  unint64_t v69;

  v63 = STACK[0x428];
  if (BYTE2(LODWORD(STACK[0x428])) != 255)
  {
    v69 = STACK[0x420];
    v64 = STACK[0x418];
    v65 = STACK[0x410];
    v66 = STACK[0x408];
    v67 = STACK[0x400];
    LOWORD(STACK[0x428]) = v63;
    STACK[0x420] = v69;
    STACK[0x418] = v64;
    STACK[0x410] = v65;
    STACK[0x408] = v66;
    STACK[0x400] = v67;
    LOBYTE(STACK[0x42A]) = BYTE2(v63) & 1;
    return sub_100675D3C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48,
             a49,
             a50,
             a51,
             a52,
             a53,
             a54,
             a55,
             a56,
             a57,
             a58,
             a59,
             a60,
             a61,
             a62,
             a63);
  }
  return result;
}

double sub_100675D3C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  char v64;
  double result;
  char v66;
  unint64_t v67;
  unint64_t v68;

  if ((STACK[0x2EA] & 1) != 0)
  {
    v64 = a3 & 1;
  }
  else
  {
    v68 = STACK[0x2D0];
    v67 = STACK[0x2C8];
    v66 = STACK[0x2D8] & 1;
    sub_1000D31B4(a15, a16, a17 & 1);
    swift_bridgeObjectRelease();
    sub_1000D31B4(a21, a22, a23 & 1);
    swift_bridgeObjectRelease();
    sub_1000D31B4(a33, a34, a35 & 1);
    swift_bridgeObjectRelease();
    sub_1000D31B4(a56, a57, a58 & 1);
    swift_bridgeObjectRelease();
    sub_1000D31B4(a62, a63, a64 & 1);
    swift_bridgeObjectRelease();
    a1 = v67;
    a2 = v68;
    v64 = v66;
  }
  sub_1000D31B4(a1, a2, v64);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_100675E8C(uint64_t result)
{
  *(_BYTE *)(result + 618) = 1;
  return result;
}

unint64_t sub_100675E98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFB638;
  if (!qword_100BFB638)
  {
    v1 = sub_100075EB0(&qword_100BFB630);
    sub_10003D310(&qword_100BFB640, &qword_100BFB648, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFB638);
  }
  return result;
}

uint64_t sub_100675F1C(uint64_t result)
{
  *(_BYTE *)(result + 618) = 0;
  return result;
}

unint64_t sub_100675F24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD35F0;
  if (!qword_100BD35F0)
  {
    v1 = objc_opt_self(UIFont);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100BD35F0);
  }
  return result;
}

uint64_t sub_100675F60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 136);
  v3 = *(_QWORD *)(a1 + 144);
  v4 = *(_BYTE *)(a1 + 152);
  sub_1000D31B4(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_BYTE *)(a1 + 104));
  swift_bridgeObjectRelease();
  sub_1000D31B4(v2, v3, v4);
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_100675FD4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_100BFB650;
  if (!qword_100BFB650)
  {
    v1 = sub_100075EB0(&qword_100BFB658);
    v2 = sub_100075EB0(&qword_100BFB5B0);
    sub_10003D310(&qword_100BFB5C8, &qword_100BFB5B0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v4[0] = v2;
    v4[1] = v3;
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10025B380();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFB650);
  }
  return result;
}

id sub_100676088()
{
  uint64_t v0;
  _QWORD v2[5];

  type metadata accessor for NotificationsOptInNotificationPermissionView.Coordinator();
  sub_100043CA8(v0, (uint64_t)v2);
  return sub_1006760C8(v2);
}

id sub_1006760C8(_QWORD *a1)
{
  objc_class *v1;
  id v3;
  id v4;
  objc_super v6;

  v3 = objc_allocWithZone(v1);
  sub_100043CA8((uint64_t)a1, (uint64_t)v3 + OBJC_IVAR____TtCV7Weather44NotificationsOptInNotificationPermissionView11Coordinator_interactor);
  v6.receiver = v3;
  v6.super_class = v1;
  v4 = objc_msgSendSuper2(&v6, "init");
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  return v4;
}

id sub_100676138()
{
  id v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  objc_class *v7;
  NSBundle v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  objc_class *v16;
  NSBundle v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  objc_class *v27;
  NSBundle v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  id v39;
  objc_class *v40;
  NSBundle v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  id v50;
  void *v51;
  NSString v52;
  id v53;
  id v54;
  id v56;
  void *v57;
  void *v58;
  id v59;
  void *v60;

  v0 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:", 60.0);
  v1 = (void *)objc_opt_self(_UIImageSymbolConfiguration);
  v2 = objc_msgSend(v1, "configurationWithFont:scale:", v0, -1);

  v3 = objc_msgSend((id)objc_opt_self(UIColor), "systemBlueColor");
  v4 = objc_msgSend(v1, "configurationWithHierarchicalColor:", v3);

  sub_100120444();
  v59 = v2;
  v5 = sub_100292720(0x6461622E6C6C6562, 0xEF6C6C69662E6567, v2);
  v57 = v4;
  v58 = v5;
  if (v5)
    v6 = objc_msgSend(v5, "imageByApplyingSymbolConfiguration:", v4);
  else
    v6 = 0;
  v7 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  sub_1000BA330();
  v8.super.isa = v7;
  v12 = sub_1000BA340(0xD000000000000013, 0x8000000100A0EAB0, 0, 0, v8, v9, v10, v11);
  v14 = v13;

  v16 = (objc_class *)sub_1000C4D58(v15, "mainBundle");
  sub_1000BA330();
  v17.super.isa = v16;
  v21 = sub_1000BA340(0x10000000000000A9, 0x8000000100A0EB10, 0, 0, v17, v18, v19, v20);
  v23 = v22;

  v24 = objc_allocWithZone((Class)OBWelcomeController);
  v56 = v6;
  v25 = sub_100292A78(v12, v14, v21, v23, v6);
  v26 = objc_msgSend((id)objc_opt_self(OBBoldTrayButton), "boldButton");
  v27 = (objc_class *)sub_1000C4D58((uint64_t)v26, "mainBundle");
  sub_1000BA330();
  v28.super.isa = v27;
  v32 = sub_1000BA340(0x65756E69746E6F43, 0xE800000000000000, 0, 0, v28, v29, v30, v31);
  v34 = v33;

  sub_100292B14(v32, v34, 0, v26);
  v35 = sub_1000BA294(&qword_100BFB698);
  UIViewControllerRepresentableContext.coordinator.getter(&v60, v35);
  v36 = v60;
  sub_1000CCE28(v26, "addTarget:action:forControlEvents:", v37, (uint64_t)"continueButtonTapped");

  v38 = objc_msgSend(v25, "buttonTray");
  objc_msgSend(v38, "addButton:", v26);

  v39 = objc_msgSend((id)objc_opt_self(OBLinkTrayButton), "linkButton");
  v40 = (objc_class *)sub_1000C4D58((uint64_t)v39, "mainBundle");
  sub_1000BA330();
  v41.super.isa = v40;
  v45 = sub_1000BA340(0x776F4E20746F4ELL, 0xE700000000000000, 0, 0, v41, v42, v43, v44);
  v47 = v46;

  sub_100292B14(v45, v47, 0, v39);
  UIViewControllerRepresentableContext.coordinator.getter(&v60, v35);
  v48 = v60;
  sub_1000CCE28(v39, "addTarget:action:forControlEvents:", v49, (uint64_t)"notNowButtonTapped");

  v50 = sub_1000DDDE0();
  objc_msgSend(v50, "addButton:", v39);

  v51 = (void *)objc_opt_self(OBPrivacyLinkController);
  v52 = String._bridgeToObjectiveC()();
  v53 = objc_msgSend(v51, "linkWithBundleIdentifier:", v52);

  v54 = sub_1000DDDE0();
  objc_msgSend(v54, "setPrivacyLinkController:", v53);

  objc_msgSend(v25, "setModalPresentationStyle:", 2);
  return v25;
}

id sub_100676644()
{
  return sub_100676138();
}

id sub_100676658@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = sub_100676088();
  *a1 = result;
  return result;
}

uint64_t sub_10067667C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100676850();
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1006766CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100676850();
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10067671C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100676850();
  UIViewControllerRepresentable.body.getter(a1, v2);
  __break(1u);
}

void sub_100676740()
{
  uint64_t v0;

  sub_1000C2AEC(OBJC_IVAR____TtCV7Weather44NotificationsOptInNotificationPermissionView11Coordinator_interactor);
  sub_1000C25C8(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  sub_100079F70();
}

void sub_1006767A0()
{
  uint64_t v0;

  sub_1000C2AEC(OBJC_IVAR____TtCV7Weather44NotificationsOptInNotificationPermissionView11Coordinator_interactor);
  sub_1000C25C8(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 16));
  sub_100079F70();
}

uint64_t type metadata accessor for NotificationsOptInNotificationPermissionView.Coordinator()
{
  return objc_opt_self(_TtCV7Weather44NotificationsOptInNotificationPermissionView11Coordinator);
}

ValueMetadata *type metadata accessor for NotificationsOptInNotificationPermissionView()
{
  return &type metadata for NotificationsOptInNotificationPermissionView;
}

unint64_t sub_100676850()
{
  unint64_t result;

  result = qword_100BFB690;
  if (!qword_100BFB690)
  {
    result = swift_getWitnessTable(&unk_1009BCAB0, &type metadata for NotificationsOptInNotificationPermissionView);
    atomic_store(result, (unint64_t *)&qword_100BFB690);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LocationViewerAlertState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v5;

  if (!a2)
  {
    v5 = -1;
    return v5 + 1;
  }
  if (a2 >= 0x3F)
  {
    if (a2 + 193 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 193) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 194;
    return v5 + 1;
  }
LABEL_17:
  v5 = ((*a1 >> 1) & 0x3E | (*a1 >> 7)) ^ 0x3F;
  if (v5 >= 0x3E)
    v5 = -1;
  return v5 + 1;
}

uint64_t storeEnumTagSinglePayload for LocationViewerAlertState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 193 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 193) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x3F)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x3E)
    return ((uint64_t (*)(void))((char *)&loc_100676970 + 4 * byte_1009BCB85[v4]))();
  *a1 = a2 - 63;
  return ((uint64_t (*)(void))((char *)sub_1006769A4 + 4 * byte_1009BCB80[v4]))();
}

uint64_t sub_1006769A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006769AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1006769B4);
  return result;
}

uint64_t sub_1006769CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1006769D4);
  *(_BYTE *)result = 4 * (((-a2 >> 1) & 0x1F) - 32 * a2);
  return result;
}

uint64_t sub_1006769D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006769E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006769EC(unsigned __int8 *a1)
{
  return *a1 >> 7;
}

_BYTE *sub_1006769F8(_BYTE *result)
{
  *result &= ~0x80u;
  return result;
}

_BYTE *sub_100676A08(_BYTE *result, char a2)
{
  *result = *result & 3 | (a2 << 7);
  return result;
}

ValueMetadata *type metadata accessor for LocationViewerAlertState()
{
  return &type metadata for LocationViewerAlertState;
}

uint64_t sub_100676A2C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000011)
  {
    v4 = 0x8000000100A0EC30;
    if (a2 == 0x8000000100A0EC30)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100A0EC30, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100A0EC50)
  {
    swift_bridgeObjectRelease(0x8000000100A0EC50);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100A0EC50, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_100676B14(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000010;
  else
    return 0xD000000000000011;
}

uint64_t sub_100676B50(_QWORD *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v4 = sub_1000BA294(&qword_100BFB6D0);
  v25 = *(_QWORD *)(v4 - 8);
  v26 = v4;
  sub_10009D98C();
  __chkstk_darwin(v5);
  sub_100098728();
  v8 = v7 - v6;
  v9 = sub_1000BA294(&qword_100BFB6D8);
  v27 = *(_QWORD *)(v9 - 8);
  sub_10009D98C();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = v12 - v11;
  v14 = sub_1000BA294(&qword_100BFB6E0);
  v28 = *(_QWORD *)(v14 - 8);
  sub_10009D98C();
  __chkstk_darwin(v15);
  sub_100098728();
  v18 = v17 - v16;
  v19 = a1[3];
  v20 = a1[4];
  sub_1000DB418(a1, v19);
  v21 = sub_100677238();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LocationViewerAlertState.CodingKeys, &type metadata for LocationViewerAlertState.CodingKeys, v21, v19, v20);
  if (a2 < 0)
  {
    sub_1000B4C50();
    sub_1000BA504((uint64_t)&type metadata for LocationViewerAlertState.AddLocationAlertCodingKeys, (uint64_t)&v32);
    v31 = a2 & 1;
    sub_1001F5600();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, v23, v26, &type metadata for AddLocationAlertState);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v8, v26);
  }
  else
  {
    v30 = 0;
    sub_1006772B0();
    sub_1000BA504((uint64_t)&type metadata for LocationViewerAlertState.NotificationAlertCodingKeys, (uint64_t)&v30);
    v29 = a2;
    sub_1001F5510();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v29, v22, v9, &unk_100B773D8);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v13, v9);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v18, v14);
}

unint64_t sub_100676D4C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  _BYTE v36[2];
  char v37;

  v32 = sub_1000BA294(&qword_100BFB6A0);
  sub_10009D98C();
  __chkstk_darwin(v2);
  sub_100098728();
  v31 = sub_1000BA294(&qword_100BFB6A8);
  __chkstk_darwin(v31);
  sub_100098728();
  v3 = sub_1000BA294(&qword_100BFB6B0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100098728();
  v7 = (_QWORD *)(v6 - v5);
  v8 = a1[3];
  v9 = a1[4];
  v10 = (unint64_t)sub_1000DB418(a1, v8);
  v11 = sub_100677238();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LocationViewerAlertState.CodingKeys, &type metadata for LocationViewerAlertState.CodingKeys, v11, v8, v9);
  if (v33)
    goto LABEL_7;
  v30 = a1;
  v34 = v4;
  v12 = KeyedDecodingContainer.allKeys.getter(v3);
  v13 = v12;
  v14 = *(_QWORD *)(v12 + 16);
  if (!v14
    || (v15 = *(_BYTE *)(v12 + 32),
        v16 = sub_10055FF58(1, v14, v12, v12 + 32, 0, (2 * v14) | 1),
        v18 = v17,
        v20 = v19,
        swift_bridgeObjectRelease(),
        v13 = v16,
        v18 != v20 >> 1))
  {
    v10 = (unint64_t)v7;
    v22 = type metadata accessor for DecodingError(0);
    swift_allocError(v22, &protocol witness table for DecodingError, 0, 0);
    v24 = v23;
    sub_1000BA294(&qword_100BC6CF8);
    *v24 = &type metadata for LocationViewerAlertState;
    v25 = KeyedDecodingContainer.codingPath.getter(v3);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v25, 0xD00000000000002BLL, 0x80000001009F2600, 0);
    v26 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, enum case for DecodingError.typeMismatch(_:), v22);
    swift_willThrow(v26, v27);
    swift_unknownObjectRelease(v13);
    sub_1000C4D60(*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8));
    a1 = v30;
LABEL_7:
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
    return v10;
  }
  if ((v15 & 1) != 0)
  {
    sub_1000B4C50();
    sub_1000BC814((uint64_t)&type metadata for LocationViewerAlertState.AddLocationAlertCodingKeys, (uint64_t)&v37);
    sub_1001F5F60();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for AddLocationAlertState, v21, v32);
    sub_1000C2DD4();
    swift_unknownObjectRelease(v16);
    sub_1000C4D60(*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8));
    v10 = v36[1] | 0xFFFFFF80;
  }
  else
  {
    v36[0] = 0;
    sub_1006772B0();
    sub_1000BC814((uint64_t)&type metadata for LocationViewerAlertState.NotificationAlertCodingKeys, (uint64_t)v36);
    sub_1001F5F24();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&unk_100B773D8, v29, v31);
    sub_1000C3E60();
    swift_unknownObjectRelease(v16);
    sub_1000C4D60(*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8));
    v10 = v35;
  }
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v30);
  return v10;
}

uint64_t sub_1006770D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100677274();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006770F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100677274();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_100677120()
{
  char *v0;

  return sub_100676B14(*v0);
}

uint64_t sub_100677128@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100676A2C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10067714C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100677238();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100677174(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100677238();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10067719C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006772B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006771C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006772B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_1006771EC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1001315B0(*a1, *a2);
}

unint64_t sub_1006771F8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = sub_100676D4C(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_100677220(_QWORD *a1)
{
  char *v1;

  return sub_100676B50(a1, *v1);
}

unint64_t sub_100677238()
{
  unint64_t result;

  result = qword_100BFB6B8;
  if (!qword_100BFB6B8)
  {
    result = swift_getWitnessTable(&unk_1009BCF44, &type metadata for LocationViewerAlertState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB6B8);
  }
  return result;
}

unint64_t sub_100677274()
{
  unint64_t result;

  result = qword_100BFB6C0;
  if (!qword_100BFB6C0)
  {
    result = swift_getWitnessTable(&unk_1009BCEF4, &type metadata for LocationViewerAlertState.AddLocationAlertCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB6C0);
  }
  return result;
}

unint64_t sub_1006772B0()
{
  unint64_t result;

  result = qword_100BFB6C8;
  if (!qword_100BFB6C8)
  {
    result = swift_getWitnessTable(&unk_1009BCEA4, &type metadata for LocationViewerAlertState.NotificationAlertCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB6C8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LocationViewerAlertState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100677338 + 4 * byte_1009BCB8F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10067736C + 4 * byte_1009BCB8A[v4]))();
}

uint64_t sub_10067736C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100677374(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10067737CLL);
  return result;
}

uint64_t sub_100677388(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100677390);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100677394(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10067739C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocationViewerAlertState.CodingKeys()
{
  return &type metadata for LocationViewerAlertState.CodingKeys;
}

ValueMetadata *type metadata accessor for LocationViewerAlertState.NotificationAlertCodingKeys()
{
  return &type metadata for LocationViewerAlertState.NotificationAlertCodingKeys;
}

uint64_t _s7Weather24LocationViewerAlertStateO27NotificationAlertCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10067740C + 4 * byte_1009BCB94[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10067742C + 4 * byte_1009BCB99[v4]))();
}

_BYTE *sub_10067740C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10067742C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100677434(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10067743C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100677444(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10067744C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LocationViewerAlertState.AddLocationAlertCodingKeys()
{
  return &type metadata for LocationViewerAlertState.AddLocationAlertCodingKeys;
}

unint64_t sub_10067746C()
{
  unint64_t result;

  result = qword_100BFB6E8;
  if (!qword_100BFB6E8)
  {
    result = swift_getWitnessTable(&unk_1009BCD0C, &type metadata for LocationViewerAlertState.AddLocationAlertCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB6E8);
  }
  return result;
}

unint64_t sub_1006774AC()
{
  unint64_t result;

  result = qword_100BFB6F0;
  if (!qword_100BFB6F0)
  {
    result = swift_getWitnessTable(&unk_1009BCDC4, &type metadata for LocationViewerAlertState.NotificationAlertCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB6F0);
  }
  return result;
}

unint64_t sub_1006774EC()
{
  unint64_t result;

  result = qword_100BFB6F8;
  if (!qword_100BFB6F8)
  {
    result = swift_getWitnessTable(&unk_1009BCE7C, &type metadata for LocationViewerAlertState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB6F8);
  }
  return result;
}

unint64_t sub_10067752C()
{
  unint64_t result;

  result = qword_100BFB700;
  if (!qword_100BFB700)
  {
    result = swift_getWitnessTable(&unk_1009BCD34, &type metadata for LocationViewerAlertState.NotificationAlertCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB700);
  }
  return result;
}

unint64_t sub_10067756C()
{
  unint64_t result;

  result = qword_100BFB708;
  if (!qword_100BFB708)
  {
    result = swift_getWitnessTable(&unk_1009BCD5C, &type metadata for LocationViewerAlertState.NotificationAlertCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB708);
  }
  return result;
}

unint64_t sub_1006775AC()
{
  unint64_t result;

  result = qword_100BFB710;
  if (!qword_100BFB710)
  {
    result = swift_getWitnessTable(&unk_1009BCC7C, &type metadata for LocationViewerAlertState.AddLocationAlertCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB710);
  }
  return result;
}

unint64_t sub_1006775EC()
{
  unint64_t result;

  result = qword_100BFB718;
  if (!qword_100BFB718)
  {
    result = swift_getWitnessTable(&unk_1009BCCA4, &type metadata for LocationViewerAlertState.AddLocationAlertCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB718);
  }
  return result;
}

unint64_t sub_10067762C()
{
  unint64_t result;

  result = qword_100BFB720;
  if (!qword_100BFB720)
  {
    result = swift_getWitnessTable(&unk_1009BCDEC, &type metadata for LocationViewerAlertState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB720);
  }
  return result;
}

unint64_t sub_10067766C()
{
  unint64_t result;

  result = qword_100BFB728;
  if (!qword_100BFB728)
  {
    result = swift_getWitnessTable(&unk_1009BCE14, &type metadata for LocationViewerAlertState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFB728);
  }
  return result;
}

uint64_t sub_1006776A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t);
  uint64_t (*v83)(uint64_t);
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int EnumCaseMultiPayload;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;

  v173 = a2;
  sub_1000BA294(&qword_100BC5F50);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100088FDC();
  v169 = v4;
  sub_1000BA294(&qword_100BC5F48);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100088FDC();
  v168 = v6;
  v172 = type metadata accessor for LocationPreviewModalViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_1000986FC();
  v165 = v8;
  sub_10009D2A4();
  __chkstk_darwin(v9);
  v170 = (uint64_t)&v164 - v10;
  v180 = type metadata accessor for LocationPreviewViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_1000986FC();
  v166 = v12;
  sub_10009D2A4();
  __chkstk_darwin(v13);
  v171 = (char *)&v164 - v14;
  sub_1000BA294(&qword_100BC5F60);
  sub_1000B42B0();
  __chkstk_darwin(v15);
  sub_100088FDC();
  v176 = v16;
  sub_1000BA294(&qword_100BC5F88);
  sub_1000B42B0();
  __chkstk_darwin(v17);
  sub_100088FDC();
  v175 = v18;
  sub_1000BA294(&qword_100BC5F90);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  sub_100088FDC();
  v174 = v20;
  sub_1000BA294(&qword_100BC5F98);
  sub_1000B42B0();
  __chkstk_darwin(v21);
  sub_100088FDC();
  v177 = v22;
  sub_1000BA294(&qword_100BC5FA0);
  sub_1000B42B0();
  __chkstk_darwin(v23);
  sub_100088FDC();
  v179 = v24;
  sub_1000BA294(&qword_100BC5FA8);
  sub_1000B42B0();
  __chkstk_darwin(v25);
  sub_100088FDC();
  v178 = v26;
  sub_1000BA294(&qword_100BC5FB0);
  sub_1000B42B0();
  __chkstk_darwin(v27);
  sub_100088FDC();
  v181 = v28;
  type metadata accessor for MoonDetailViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v29);
  sub_1000986FC();
  v167 = v30;
  sub_10009D2A4();
  __chkstk_darwin(v31);
  v164 = (uint64_t)&v164 - v32;
  sub_10009D2A4();
  __chkstk_darwin(v33);
  v35 = (char *)&v164 - v34;
  v36 = type metadata accessor for ModalViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v37);
  v39 = (char *)&v164 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v42 = (char *)&v164 - v41;
  __chkstk_darwin(v43);
  v45 = (char *)&v164 - v44;
  v46 = type metadata accessor for ModalViewState.LocationDetailModal(0);
  sub_1000B42B0();
  __chkstk_darwin(v47);
  v49 = (char *)&v164 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50);
  v52 = (char *)&v164 - v51;
  v182 = a1;
  v53 = a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_modalView;
  sub_100080C0C(v53, (uint64_t)v45, type metadata accessor for ModalViewState);
  if (sub_10009D644((uint64_t)v45) != 5)
  {
    v83 = type metadata accessor for ModalViewState;
    v84 = (uint64_t)v45;
    goto LABEL_6;
  }
  sub_10007802C((uint64_t)v45, (uint64_t)v52, type metadata accessor for ModalViewState.LocationDetailModal);
  sub_100080C0C((uint64_t)v52, (uint64_t)v49, type metadata accessor for ModalViewState.LocationDetailModal);
  if (swift_getEnumCaseMultiPayload(v49) != 4)
  {
    sub_1000215BC((uint64_t)v52, type metadata accessor for ModalViewState.LocationDetailModal);
    v84 = (uint64_t)v49;
    v83 = type metadata accessor for ModalViewState.LocationDetailModal;
LABEL_6:
    sub_1000215BC(v84, v83);
    sub_100080C0C(v53, (uint64_t)v42, type metadata accessor for ModalViewState);
    v85 = sub_10009D644((uint64_t)v42);
    v86 = v180;
    if (v85)
    {
      v87 = type metadata accessor for ModalViewState;
      v88 = (uint64_t)v42;
    }
    else
    {
      v52 = v171;
      sub_10007802C((uint64_t)v42, (uint64_t)v171, type metadata accessor for LocationPreviewViewState);
      v89 = v170;
      sub_100080C0C((uint64_t)&v52[*(int *)(v86 + 20)], v170, type metadata accessor for LocationPreviewModalViewState);
      v90 = v172;
      if (swift_getEnumCaseMultiPayload(v89) == 5)
      {
        v91 = v164;
        sub_10007802C(v89, v164, type metadata accessor for MoonDetailViewState);
        v92 = sub_1000C08E4();
        v93 = sub_1000C2DE8(v92);
        v96 = sub_1000B4474(v178, v94, v95, v93);
        v99 = sub_1000B49D8(v179, v97, v98, v96);
        v100 = v177;
        v103 = sub_1000B4458(v177, v101, v102, v99);
        v104 = v174;
        v107 = sub_1000CC9E4(v174, v105, v106, v103);
        sub_1000C61B0(v107);
        v108 = type metadata accessor for PreviewLocation(0);
        v109 = v168;
        sub_10009D34C(v168, v110, v111, v108);
        v112 = v169;
        sub_1006780F0(v173, v169);
        sub_1000BD630(v112, v90);
        _s7Weather24LocationCompositionStateOwst_0(v112, 0, 1, v90);
        v113 = v176;
        sub_1003804CC(v109, v112, v176);
        sub_100021A14(v112, &qword_100BC5F50);
        sub_100098898(v114, &qword_100BC5F48);
        swift_storeEnumTagMultiPayload(v113, v36, 0);
        _s7Weather24LocationCompositionStateOwst_0(v113, 0, 1, v36);
        sub_1000DBC6C();
        v115 = v181;
        v76 = sub_10009D358(0, 3, v181, v178, v179, v116, v117, v118, v100, v104, v89, v113, v168, v169, v170, (uint64_t)v171, v172, v173, v174,
                v175);
        sub_1000B3B00(v76, &qword_100BC5F60);
        sub_1000988A0(v119, &qword_100BC5F88);
        sub_1000988B0(v120, &qword_100BC5F90);
        sub_100094EEC(v121, &qword_100BC5F98);
        sub_10004A2CC(v122, &qword_100BC5FA0);
        sub_100098898(v123, &qword_100BC5FA8);
        sub_100021A14(v115, &qword_100BC5FB0);
        sub_1000215BC(v91, type metadata accessor for MoonDetailViewState);
        v82 = type metadata accessor for LocationPreviewViewState;
        goto LABEL_10;
      }
      sub_1000215BC((uint64_t)v52, type metadata accessor for LocationPreviewViewState);
      v87 = type metadata accessor for LocationPreviewModalViewState;
      v88 = v89;
    }
    sub_1000215BC(v88, v87);
    sub_100080C0C(v53, (uint64_t)v39, type metadata accessor for ModalViewState);
    if (sub_10009D644((uint64_t)v39) == 4)
    {
      v125 = type metadata accessor for ModalViewState.MapViewModal(0);
      v126 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v39, 1, v125);
      if ((_DWORD)v126 != 1)
      {
        v128 = v166;
        sub_10007802C((uint64_t)v39, v166, type metadata accessor for LocationPreviewViewState);
        v129 = v165;
        sub_100080C0C(v128 + *(int *)(v86 + 20), v165, type metadata accessor for LocationPreviewModalViewState);
        v130 = v172;
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v129);
        v76 = v182;
        if (EnumCaseMultiPayload == 5)
        {
          sub_10007802C(v129, v167, type metadata accessor for MoonDetailViewState);
          v132 = sub_1000C08E4();
          v133 = sub_1000C2DE8(v132);
          v136 = sub_1000B4474(v178, v134, v135, v133);
          v139 = sub_1000B49D8(v179, v137, v138, v136);
          v142 = sub_1000B4458(v177, v140, v141, v139);
          v143 = v174;
          v146 = sub_1000CC9E4(v174, v144, v145, v142);
          v147 = v175;
          _s7Weather24LocationCompositionStateOwst_0(v175, 1, 1, v146);
          v148 = type metadata accessor for PreviewLocation(0);
          v149 = v168;
          sub_10009D34C(v168, v150, v151, v148);
          v152 = v169;
          sub_1006780F0(v173, v169);
          sub_1000BD630(v152, v130);
          _s7Weather24LocationCompositionStateOwst_0(v152, 0, 1, v130);
          v153 = v176;
          sub_1003804CC(v149, v152, v176);
          sub_1000B3B00(v154, &qword_100BC5F50);
          sub_100021A14(v149, &qword_100BC5F48);
          _s7Weather24LocationCompositionStateOwst_0(v153, 0, 1, v125);
          swift_storeEnumTagMultiPayload(v153, v36, 4);
          _s7Weather24LocationCompositionStateOwst_0(v153, 0, 1, v36);
          v155 = v178;
          v76 = sub_10009D358(0, 3, v181, v178, v179, v156, v157, v158, v177, v143, v147, v153, 0, 0, 0, 0, 0, 0, 0,
                  v76);
          sub_100098898(v76, &qword_100BC5F60);
          sub_1000988B0(v159, &qword_100BC5F88);
          sub_100094EEC(v160, &qword_100BC5F90);
          sub_1000988A0(v161, &qword_100BC5F98);
          sub_10004A2CC(v162, &qword_100BC5FA0);
          sub_100021A14(v155, &qword_100BC5FA8);
          sub_1000B3B00(v163, &qword_100BC5FB0);
          sub_1000215BC(v167, type metadata accessor for MoonDetailViewState);
          v82 = type metadata accessor for LocationPreviewViewState;
          v124 = v128;
          goto LABEL_11;
        }
        sub_1000215BC(v128, type metadata accessor for LocationPreviewViewState);
        sub_1000215BC(v129, type metadata accessor for LocationPreviewModalViewState);
LABEL_18:
        swift_retain();
        return v76;
      }
      sub_100094EEC(v126, &qword_100BC5F58);
    }
    else
    {
      sub_1000215BC((uint64_t)v39, type metadata accessor for ModalViewState);
    }
    v76 = v182;
    goto LABEL_18;
  }
  sub_10007802C((uint64_t)v49, (uint64_t)v35, type metadata accessor for MoonDetailViewState);
  v54 = sub_1000C08E4();
  v55 = sub_1000C2DE8(v54);
  v56 = v178;
  v59 = sub_1000B4474(v178, v57, v58, v55);
  v60 = v179;
  v63 = sub_1000B49D8(v179, v61, v62, v59);
  v64 = v177;
  v67 = sub_1000B4458(v177, v65, v66, v63);
  v68 = v174;
  v71 = sub_1000CC9E4(v174, v69, v70, v67);
  sub_1000C61B0(v71);
  v72 = v176;
  sub_1006780F0(v173, v176);
  swift_storeEnumTagMultiPayload(v72, v46, 4);
  sub_1000BD630(v72, v36);
  _s7Weather24LocationCompositionStateOwst_0(v72, 0, 1, v36);
  sub_1000DBC6C();
  v76 = sub_10009D358(0, 3, v181, v56, v60, v73, v74, v75, v64, v68, (uint64_t)v45, v72, v168, v169, v170, (uint64_t)v171, v172, v173, v174,
          v175);
  sub_100098898(v76, &qword_100BC5F60);
  sub_1000988A0(v77, &qword_100BC5F88);
  sub_1000988B0(v78, &qword_100BC5F90);
  sub_100094EEC(v79, &qword_100BC5F98);
  sub_100021A14(v60, &qword_100BC5FA0);
  sub_1000B3B00(v80, &qword_100BC5FA8);
  sub_10004A2CC(v81, &qword_100BC5FB0);
  sub_1000215BC((uint64_t)v35, type metadata accessor for MoonDetailViewState);
  v82 = type metadata accessor for ModalViewState.LocationDetailModal;
LABEL_10:
  v124 = (uint64_t)v52;
LABEL_11:
  sub_1000215BC(v124, v82);
  return v76;
}

void sub_1006780F0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t (*v26)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, _QWORD, uint64_t);
  uint64_t v43;
  __n128 v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  char v66;

  v58 = a1;
  v61 = a2;
  v2 = sub_1000BA294(&qword_100BC6CB8);
  __chkstk_darwin(v2);
  v63 = (uint64_t)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000BA294(&qword_100BC35F8);
  __chkstk_darwin(v4);
  v62 = (uint64_t)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for Date(0);
  v57 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DateComponents(0);
  v53 = *(_QWORD *)(v8 - 8);
  v54 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v11);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TimeZone(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Calendar(0);
  v55 = *(_QWORD *)(v18 - 8);
  v56 = v18;
  __chkstk_darwin(v18);
  v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for MoonDetailSelectedDate(0);
  __chkstk_darwin(v59);
  v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for MoonDetailViewAction(0);
  __chkstk_darwin(v23);
  v25 = (unsigned __int8 *)&v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100080C0C(v58, (uint64_t)v25, v26);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v25);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v28 = v57;
      v29 = v60;
      (*(void (**)(char *, unsigned __int8 *, uint64_t))(v57 + 32))(v7, v25, v60);
      v30 = type metadata accessor for Location(0);
      v31 = v62;
      _s7Weather24LocationCompositionStateOwst_0(v62, 1, 1, v30);
      v32 = v63;
      _s7Weather24LocationCompositionStateOwst_0(v63, 1, 1, v59);
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v13, v7, v29);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, v29);
      v64 = 0u;
      v65 = 0u;
      v66 = 1;
      sub_1002CF364(v31, v32, (uint64_t)v13, (uint64_t)&v64, 3, v61);
      sub_100021A14((uint64_t)v13, (uint64_t *)&unk_100BD35A0);
      sub_100021A14(v32, &qword_100BC6CB8);
      sub_100021A14(v31, &qword_100BC35F8);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v29);
    }
    else
    {
      v49 = *v25;
      v50 = type metadata accessor for Location(0);
      v51 = v62;
      _s7Weather24LocationCompositionStateOwst_0(v62, 1, 1, v50);
      v52 = v63;
      _s7Weather24LocationCompositionStateOwst_0(v63, 1, 1, v59);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 1, 1, v60);
      v64 = 0u;
      v65 = 0u;
      v66 = 1;
      sub_1002CF364(v51, v52, (uint64_t)v13, (uint64_t)&v64, v49, v61);
      sub_100021A14((uint64_t)v13, (uint64_t *)&unk_100BD35A0);
      sub_100021A14(v52, &qword_100BC6CB8);
      sub_100021A14(v51, &qword_100BC35F8);
    }
  }
  else
  {
    sub_10007802C((uint64_t)v25, (uint64_t)v22, type metadata accessor for MoonDetailSelectedDate);
    Location.timeZone.getter(v33);
    static Calendar.currentCalendar(with:)(v17);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    v34 = sub_1000BA294(&qword_100BC4E50);
    v35 = type metadata accessor for Calendar.Component(0);
    v36 = *(_QWORD *)(v35 - 8);
    v37 = *(_QWORD *)(v36 + 72);
    v38 = *(unsigned __int8 *)(v36 + 80);
    v39 = (v38 + 32) & ~v38;
    v40 = swift_allocObject(v34, v39 + 2 * v37, v38 | 7);
    *(_OWORD *)(v40 + 16) = xmmword_10097DA20;
    v41 = v40 + v39;
    v42 = *(void (**)(uint64_t, _QWORD, uint64_t))(v36 + 104);
    v42(v41, enum case for Calendar.Component.year(_:), v35);
    v42(v41 + v37, enum case for Calendar.Component.month(_:), v35);
    v43 = sub_1000A8278(v40);
    sub_1006692BC((uint64_t)v7);
    Calendar.dateComponents(_:from:)(v43, v7);
    v44 = swift_bridgeObjectRelease();
    v45 = (*(double (**)(char *, uint64_t, __n128))(v57 + 8))(v7, v60, v44);
    Calendar.date(from:)(v10, v45);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v10, v54);
    v46 = type metadata accessor for Location(0);
    v47 = v62;
    _s7Weather24LocationCompositionStateOwst_0(v62, 1, 1, v46);
    v48 = v63;
    sub_100080C0C((uint64_t)v22, v63, type metadata accessor for MoonDetailSelectedDate);
    _s7Weather24LocationCompositionStateOwst_0(v48, 0, 1, v59);
    v64 = 0u;
    v65 = 0u;
    v66 = 1;
    sub_1002CF364(v47, v48, (uint64_t)v13, (uint64_t)&v64, 3, v61);
    sub_100021A14(v48, &qword_100BC6CB8);
    sub_100021A14(v47, &qword_100BC35F8);
    sub_100021A14((uint64_t)v13, (uint64_t *)&unk_100BD35A0);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v20, v56);
    sub_1000215BC((uint64_t)v22, type metadata accessor for MoonDetailSelectedDate);
  }
}

uint64_t sub_100678704(uint64_t a1)
{
  return sub_100678728(a1, (uint64_t)&unk_100B87F88, (uint64_t)sub_1006791A8);
}

uint64_t sub_100678728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;

  v98 = a2;
  v99 = a3;
  v88 = a1;
  v4 = sub_1000DD1A8();
  v5 = *(_QWORD *)(v4 - 8);
  v74 = v4;
  v6 = *(_QWORD *)(v5 + 64);
  v96 = v5;
  v97 = v6;
  __chkstk_darwin(v4);
  v95 = (uint64_t)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BA294(&qword_100BE55E8);
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_100088FDC();
  v92 = v9;
  v10 = sub_10009876C();
  v11 = type metadata accessor for DetailViewOrigin(v10);
  v90 = *(_QWORD *)(v11 - 8);
  v91 = v11;
  sub_10009D98C();
  __chkstk_darwin(v12);
  sub_100088FDC();
  v89 = v13;
  v14 = sub_10009876C();
  v15 = type metadata accessor for DetailViewOriginationData(v14);
  v103 = *(_QWORD *)(v15 - 8);
  v16 = *(_QWORD *)(v103 + 64);
  v93 = v15;
  v94 = v16;
  __chkstk_darwin(v15);
  v102 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v101 = (char *)&v73 - v19;
  v20 = sub_10009876C();
  v87 = type metadata accessor for ViewAction(v20);
  v85 = *(_QWORD *)(v87 - 8);
  sub_10009D98C();
  __chkstk_darwin(v21);
  sub_100088FDC();
  v82 = v22;
  v23 = sub_10009876C();
  v80 = type metadata accessor for ViewType(v23);
  v79 = *(_QWORD *)(v80 - 8);
  sub_10009D98C();
  __chkstk_darwin(v24);
  sub_100088FDC();
  v78 = v25;
  v26 = sub_10009876C();
  v76 = type metadata accessor for UUID(v26);
  v75 = *(_QWORD *)(v76 - 8);
  sub_10009D98C();
  __chkstk_darwin(v27);
  v29 = (char *)&v73 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_1000C4A10();
  v83 = *(_QWORD *)(v86 - 8);
  v30 = *(_QWORD *)(v83 + 64);
  __chkstk_darwin(v86);
  v81 = (char *)&v73 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v100 = (char *)&v73 - v32;
  v33 = sub_10009876C();
  v34 = type metadata accessor for Location.Identifier(v33);
  v35 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v37 = (char *)&v73 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = v3;
  v38 = v3[4];
  v39 = v3[5];
  v40 = sub_1000DB418(v3 + 1, v38);
  v41 = v88;
  Location.identifier.getter(v40);
  v84 = dispatch thunk of LocationPrivacySamplerType.canRecordLocation(_:)(v37, v38, v39);
  v42 = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v37, v34);
  v43 = UUID.init()(v42);
  v44 = UUID.uuidString.getter(v43);
  v46 = v45;
  (*(void (**)(char *, uint64_t))(v75 + 8))(v29, v76);
  v47 = v78;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v79 + 104))(v78, enum case for ViewType.detail(_:), v80);
  v48 = v82;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v85 + 104))(v82, enum case for ViewAction.unknown(_:), v87);
  v49 = v100;
  ViewData.init(viewSessionID:viewType:viewAction:)(v44, v46, v47, v48);
  v50 = v89;
  v51.n128_f64[0] = (*(double (**)(uint64_t, uint64_t, uint64_t))(v90 + 16))(v89, v41 + *(int *)(v74 + 24), v91);
  v52 = type metadata accessor for ComponentData(0, v51);
  v53 = v92;
  _s7Weather24LocationCompositionStateOwst_0(v92, 1, 1, v52);
  v54 = v101;
  DetailViewOriginationData.init(origin:componentData:)(v50, v53);
  v92 = *v77;
  v55 = v83;
  v56 = v81;
  v57 = v86;
  (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v81, v49, v86);
  v58 = v95;
  sub_10067911C(v41, v95);
  v59 = v103;
  v60 = v93;
  (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v102, v54, v93);
  v61 = *(unsigned __int8 *)(v55 + 80);
  v62 = v55;
  v63 = (v61 + 16) & ~v61;
  v64 = *(unsigned __int8 *)(v96 + 80);
  v65 = (v30 + v64 + v63) & ~v64;
  v66 = v65 + v97;
  v67 = *(unsigned __int8 *)(v59 + 80);
  v68 = (v67 + v65 + v97 + 1) & ~v67;
  v69 = swift_allocObject(v98, v68 + v94, v61 | v64 | v67 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v62 + 32))(v69 + v63, v56, v57);
  sub_100679164(v58, v69 + v65);
  *(_BYTE *)(v69 + v66) = v84 & 1;
  v70 = v103;
  (*(void (**)(uint64_t, char *, uint64_t))(v103 + 32))(v69 + v68, v102, v60);
  swift_retain();
  Tracker.diagnosticTransaction(block:)(v99, v69);
  swift_release();
  v71 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v70 + 8))(v101, v60, v71);
  return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v100, v57);
}

double sub_100678C38()
{
  return sub_100678C4C();
}

double sub_100678C4C()
{
  double result;

  swift_retain();
  Tracker.diagnosticTransaction(block:)(sub_100679058, 0);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_100678C84(uint64_t a1)
{
  return sub_100678728(a1, (uint64_t)&unk_100B87F60, (uint64_t)sub_1006791A8);
}

uint64_t sub_100678CA8(uint64_t a1)
{
  return sub_100678728(a1, (uint64_t)&unk_100B87EE8, (uint64_t)sub_1006791A8);
}

uint64_t sub_100678CCC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  double v32;
  char *v33;
  double v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v54 = a5;
  v50 = a4;
  v45 = a1;
  v46 = a3;
  v44 = a2;
  v5 = type metadata accessor for Location(0);
  v48 = *(_QWORD *)(v5 - 8);
  v49 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocationData(0);
  v52 = *(_QWORD *)(v8 - 8);
  v53 = v8;
  __chkstk_darwin(v8);
  v51 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DetailType(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DetailViewData(0, v12);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for ViewData(0);
  v20 = sub_100051B90(&qword_100BD4610, (uint64_t (*)(uint64_t))&type metadata accessor for ViewData, (uint64_t)&protocol conformance descriptor for ViewData);
  v47 = (unint64_t)"onDetailViewStateReducer";
  AccessTracker.push<A>(data:traits:file:line:)(v44, _swiftEmptyArrayStorage, 0xD00000000000005DLL, 0x8000000100A0ECA0, 37, v19, v20);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v22 = v46;
  v21(v14, v46, v10);
  DetailViewData.init(type:)(v14);
  v23 = sub_100051B90(&qword_100BFB7D0, (uint64_t (*)(uint64_t))&type metadata accessor for DetailViewData, (uint64_t)&protocol conformance descriptor for DetailViewData);
  AccessTracker.push<A>(data:traits:file:line:)(v18, _swiftEmptyArrayStorage, 0xD00000000000005DLL, 0x8000000100A0ECA0, 38, v15, v23);
  v24 = *(void (**)(char *, uint64_t))(v16 + 8);
  v25 = v18;
  v27 = v48;
  v26 = v49;
  v24(v25, v15);
  v28 = type metadata accessor for DetailViewVisibilityTrackerModel(0);
  v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 16))(v7, v22 + *(int *)(v28 + 20), v26);
  if ((v50 & 1) != 0)
  {
    v30 = Location.coordinate.getter(v29);
    Location.coordinate.getter(v31);
    v33 = v51;
    v34 = v30;
  }
  else
  {
    v34 = 999.0;
    v33 = v51;
    v32 = 999.0;
  }
  LocationData.init(latitudeDouble:longitudeDouble:)(v34, v32);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v26);
  v35 = sub_100051B90(&qword_100BD1218, (uint64_t (*)(uint64_t))&type metadata accessor for LocationData, (uint64_t)&protocol conformance descriptor for LocationData);
  v36 = v47 | 0x8000000000000000;
  v37 = v53;
  AccessTracker.push<A>(data:traits:file:line:)(v33, _swiftEmptyArrayStorage, 0xD00000000000005DLL, v47 | 0x8000000000000000, 39, v53, v35);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v33, v37);
  v38 = type metadata accessor for DetailViewOriginationData(0);
  v39 = sub_100051B90(&qword_100BFB7D8, (uint64_t (*)(uint64_t))&type metadata accessor for DetailViewOriginationData, (uint64_t)&protocol conformance descriptor for DetailViewOriginationData);
  AccessTracker.push<A>(data:traits:file:line:)(v54, _swiftEmptyArrayStorage, 0xD00000000000005DLL, v36, 40, v38, v39);
  v40 = type metadata accessor for DetailViewEvent(0);
  v41 = sub_100051B90(&qword_100BFB7C8, (uint64_t (*)(uint64_t))&type metadata accessor for DetailViewEvent, (uint64_t)&protocol conformance descriptor for DetailViewEvent);
  return AccessTracker.time<A>(_:submitAndRestartWithSession:)(v40, 1, v40, v41);
}

uint64_t sub_100679058()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD v3[2];

  v0 = type metadata accessor for DetailViewEvent(0);
  v1 = sub_100051B90(&qword_100BFB7C8, (uint64_t (*)(uint64_t))&type metadata accessor for DetailViewEvent, (uint64_t)&protocol conformance descriptor for DetailViewEvent);
  memset(v3, 0, sizeof(v3));
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v0, 1, v3, 0, 0, v0, v1);
  return sub_1002CAAB4((uint64_t)v3);
}

uint64_t sub_1006790D4(uint64_t a1)
{
  return sub_100678728(a1, (uint64_t)&unk_100B87F38, (uint64_t)sub_1006791A8);
}

uint64_t sub_1006790F8(uint64_t a1)
{
  return sub_100678728(a1, (uint64_t)&unk_100B87EC0, (uint64_t)sub_1006791A8);
}

uint64_t sub_10067911C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DetailViewVisibilityTrackerModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100679164(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DetailViewVisibilityTrackerModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1006791B0(uint64_t a1)
{
  return sub_100678728(a1, (uint64_t)&unk_100B87F10, (uint64_t)sub_1006791A8);
}

uint64_t sub_1006791E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(sub_1000C4A10() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(sub_1000DD1A8() - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v7 + *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DetailViewOriginationData(0) - 8) + 80);
  return sub_100678CCC(a1, v1 + v4, v1 + v7, *(unsigned __int8 *)(v1 + v8), v1 + ((v8 + v9 + 1) & ~v9));
}

double sub_100679278(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  double result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[2];
  uint64_t v20;
  _OWORD v21[5];
  uint64_t v22;
  uint64_t v23;

  sub_1001C4B3C(a1, v21);
  v17 = v21[1];
  v18 = v21[0];
  v16 = v21[2];
  v15 = v21[3];
  v14 = v21[4];
  v3 = v22;
  v4 = v23;
  v5 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(uint64_t (**)(uint64_t))(v1 + 16);
  v8 = *(_QWORD *)(v1 + 24);
  v10 = v17;
  *(_OWORD *)v7 = v18;
  *((_OWORD *)v7 + 1) = v10;
  v11 = v15;
  *((_OWORD *)v7 + 2) = v16;
  *((_OWORD *)v7 + 3) = v11;
  *((_OWORD *)v7 + 4) = v14;
  *((_QWORD *)v7 + 10) = v3;
  *((_QWORD *)v7 + 11) = v4;
  v12 = type metadata accessor for ModalViewAction(0);
  swift_storeEnumTagMultiPayload(v7, v12, 3);
  swift_storeEnumTagMultiPayload(v7, v5, 7);
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  swift_retain();
  sub_1006795DC((uint64_t *)a1);
  sub_1000A5EBC((uint64_t)v7, (uint64_t)v19, v9);
  sub_100159C94((uint64_t)v19);
  sub_1000A0AA4((uint64_t)v7);
  *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  return result;
}

uint64_t sub_1006793C4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double v14;

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000DB418(v1 + 4, v1[7]);
  sub_100287A34(a1);
  v7 = v1[12];
  v8 = v1[13];
  sub_1000DB418(v1 + 9, v7);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
  if ((*(_BYTE *)(a1 + OBJC_IVAR____TtCV7Weather29ReportWeatherContentViewModel8_Storage_entrySource) & 1) == 0)
  {
    if (qword_100BC2088 != -1)
      result = swift_once(&qword_100BC2088, sub_10015B3B4);
    v10 = qword_100CAE8C0;
    v11 = Date.init()(result);
    v12 = Date.timeIntervalSince1970.getter(v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v14 = v12;
    sub_1006795A0(&qword_100BFB898, (uint64_t)&unk_1009BD0A8);
    sub_1000BB308(v10, (uint64_t)&v14);
    if (qword_100BC2090 != -1)
      swift_once(&qword_100BC2090, sub_10015B308);
    HIBYTE(v13) = 1;
    return sub_1000BB308(qword_100CAE8C8, (uint64_t)&v13 + 7);
  }
  return result;
}

uint64_t type metadata accessor for ReportWeatherInteractor()
{
  return objc_opt_self(_TtC7Weather23ReportWeatherInteractor);
}

uint64_t sub_10067957C()
{
  return sub_1006795A0(&qword_100BFB890, (uint64_t)&unk_1009BD068);
}

uint64_t sub_1006795A0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for ReportWeatherInteractor();
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_1006795DC(uint64_t *a1)
{
  sub_10019D33C(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
  return a1;
}

void sub_10067962C()
{
  sub_10014D300(&qword_100BFB9E0);
}

void sub_100679638()
{
  sub_10014D300(&qword_100BFBA78);
}

void sub_100679644()
{
  sub_10014D300(&qword_100BFBA70);
}

void sub_100679650()
{
  sub_10014D300(&qword_100BFBA68);
}

void sub_10067965C()
{
  sub_10014D300(&qword_100BFBA60);
}

void sub_100679668()
{
  sub_10014D300(&qword_100BFBA58);
}

void sub_100679674()
{
  sub_10014D300(&qword_100BFBA50);
}

void sub_100679680()
{
  sub_10014D300(&qword_100BFBA48);
}

void sub_10067968C()
{
  sub_10014D300(&qword_100BFBA18);
}

void sub_100679698()
{
  sub_10014D300(&qword_100BFBA98);
}

void sub_1006796A4()
{
  sub_10014D300(&qword_100BFBA90);
}

void sub_1006796B0()
{
  sub_10014D300(&qword_100BFBA88);
}

void sub_1006796BC()
{
  sub_10014D300(&qword_100BFBAA0);
}

void sub_1006796C8()
{
  sub_10014D300(&qword_100BFBA00);
}

void sub_1006796D4()
{
  sub_10014D300(&qword_100BFB9F8);
}

void sub_1006796E0()
{
  sub_10014D300(&qword_100BFB9F0);
}

void sub_1006796EC()
{
  sub_10014D300(&qword_100BFBA10);
}

void sub_1006796F8()
{
  sub_10014D300(&qword_100BFBA40);
}

void sub_100679704()
{
  sub_10014D300(&qword_100BFBA38);
}

void sub_100679710()
{
  sub_10014D300(&qword_100BFBA30);
}

void sub_10067971C()
{
  sub_10014D300(&qword_100BFBA28);
}

void sub_100679728()
{
  sub_10014D300(&qword_100BFBA80);
}

void sub_100679734(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v6 = sub_1000BA294(&qword_100BFB998);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100037794(a2, (uint64_t)v8, &qword_100BFB998);
  v9 = type metadata accessor for OpenURLOptions(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9) == 1)
  {
    sub_100021AA4((uint64_t)v8, &qword_100BFB998);
    v10 = 0;
    v11 = 0;
  }
  else
  {
    v12 = (void *)OpenURLOptions.uiSceneOpenURLOptions.getter();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
    v10 = sub_1002F91F8(v12);
    v11 = v13;
  }
  v14 = a3[3];
  v15 = a3[4];
  sub_1000DB418(a3, v14);
  v16 = sub_1000BA294(&qword_100BE0098);
  v17 = dispatch thunk of ResolverType.resolve<A>(_:)(v16, v16, v14, v15);
  if (v17)
  {
    v18 = v17;
    v19[0] = v10;
    v19[1] = v11;
    URLHandlerManager.handle(url:context:)(a1, v19);
    swift_release(v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10067988C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  _BYTE v5[9];
  uint64_t v6;

  v5[1] = a2;
  v6 = a3;
  v5[0] = UIAccessibilityIsInvertColorsEnabled();
  v3 = sub_1000BA294(&qword_100BC5608);
  return State.wrappedValue.setter(v5, v3);
}

uint64_t *sub_1006798E0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1000BA294(&qword_100BFB8A8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100679978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = sub_1000BA294(&qword_100BFB8A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1006799F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1000BA294(&qword_100BFB8A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100679A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_1000BA294(&qword_100BFB8A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100679AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100679AD4);
}

uint64_t sub_100679AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;

  v6 = sub_1000BA294(&qword_100BFB8A8);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return _s7Weather24LocationCompositionStateOwet_0(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

uint64_t sub_100679B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100679B60);
}

void sub_100679B60(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;

  v8 = sub_1000BA294(&qword_100BFB8A8);
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    _s7Weather24LocationCompositionStateOwst_0(a1, a2, a2, v8);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
    sub_100079F70();
  }
}

uint64_t sub_100679BD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(sub_1000C3E74() - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = ((v2 + 56) & ~v2) + *(_QWORD *)(v1 + 64);
  v4 = v2 | 7;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  v5 = sub_1000BA294(&qword_100BFB8A8);
  sub_1000989A0(v5);
  sub_1000CD0A8();
  return sub_100098B00(v0, v3, v4);
}

uint64_t sub_100679C40()
{
  uint64_t v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

void sub_100679C64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100679734(a1, a2, (_QWORD *)(v2 + 16));
}

uint64_t sub_100679C6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(sub_1000C3E74() - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = v2 | 7;
  v4 = (*(_QWORD *)(v1 + 64) + ((v2 + 16) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = sub_1000BA294(&qword_100BFB8A8);
  sub_1000989A0(v5);
  sub_1000CD0A8();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + v4));
  return sub_100098B00(v0, v4 + 40, v3);
}

void sub_100679CE4(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = type metadata accessor for ColorScheme(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 16))(v5, a1, v3);
  EnvironmentValues.colorScheme.setter(v5);
  sub_100079F70();
}

void sub_100679D58()
{
  _BYTE *v0;

  *v0 = sub_1000C61C8() & 1;
  sub_10004A298();
}

void sub_100679D78(char *a1)
{
  sub_1000B4C5C(a1);
  sub_10004A298();
}

uint64_t sub_100679D90(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MainView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t assignWithCopy for InvertedColorSchemeStatusBarCorrectionModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain(v4);
  swift_release(v3);
  return a1;
}

uint64_t assignWithTake for InvertedColorSchemeStatusBarCorrectionModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release(v3);
  return a1;
}

uint64_t sub_100679E4C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[2];

  v0 = sub_100075EB0(&qword_100BFB948);
  sub_10003D2DC(&qword_100BFB958, &qword_100BFB948);
  v3[0] = v0;
  v3[1] = v1;
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of Scene.extendedLaunchTestName(_:)>>, 1);
}

void sub_100679EB0()
{
  EnvironmentValues.colorScheme.getter();
  sub_10004A298();
}

uint64_t sub_100679ED0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100679EF4(uint64_t a1)
{
  uint64_t v1;

  return sub_10067988C(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_100679F00()
{
  sub_10003D2DC(&qword_100BFB9E8, &qword_100BFB9D0);
}

uint64_t sub_100679F2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char v4;
  uint64_t v6;

  v1 = type metadata accessor for ActivityAction(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000DB418((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  swift_storeEnumTagMultiPayload(v3, v1, 4);
  LOBYTE(v1) = static LocationSearchEntityFromStringResolver.__derived_struct_equals(_:_:)();
  v4 = variable initialization expression of SessionEventsAndDataCoordinator.loadedViaReferral();
  sub_10026563C((uint64_t)v3, v1 & 1, v4 & 1);
  return sub_1001C8E48((uint64_t)v3);
}

uint64_t type metadata accessor for WeatherStaticConfigurationActivityHandler()
{
  return objc_opt_self(_TtC7Weather41WeatherStaticConfigurationActivityHandler);
}

uint64_t type metadata accessor for NoAqiSevereContentView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NoAqiSevereContentView);
}

uint64_t sub_10067A018(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100ABCC08, 1);
}

uint64_t sub_10067A04C@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  void *v24;
  uint64_t v25;
  uint64_t (*v26)(_QWORD, _QWORD);
  uint64_t WitnessTable;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t (*v51)(_QWORD, _QWORD);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  _QWORD v63[2];
  _QWORD v64[2];
  _QWORD v65[4];
  _BYTE v66[456];
  _QWORD v67[58];

  v62 = a4;
  v55 = a3;
  v60 = a7;
  v67[0] = a5;
  v67[1] = a5;
  v67[2] = a5;
  v67[3] = a5;
  v10 = a2;
  v11 = a2 & 0x100;
  v67[4] = a5;
  v67[5] = a5;
  v67[6] = a5;
  v67[7] = a5;
  v12 = sub_1000BBB64(255, 8, (uint64_t)v67);
  v53 = sub_1000AE86C(v12);
  v13 = type metadata accessor for Group(0, v53);
  v14 = *(_QWORD *)(v13 - 8);
  v56 = v13;
  v57 = v14;
  __chkstk_darwin(v13);
  sub_1000986FC();
  v59 = v15;
  __chkstk_darwin(v16);
  v58 = (char *)&v48 - v17;
  v67[0] = a5;
  v67[1] = type metadata accessor for Optional(255, a5);
  v67[2] = a5;
  v67[3] = a5;
  v67[4] = a5;
  v67[5] = a5;
  v18 = sub_1000BBB64(255, 6, (uint64_t)v67);
  v51 = (uint64_t (*)(_QWORD, _QWORD))sub_1000AE86C(v18);
  v54 = type metadata accessor for Group(0, v51);
  v52 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  sub_1000986FC();
  v20 = v19;
  __chkstk_darwin(v21);
  v61 = (char *)&v48 - v22;
  if (v10)
  {
    if (v10 == 1)
    {
      if (v11)
      {
        v23 = &unk_100BFD7D0;
        goto LABEL_11;
      }
    }
    else if (v11)
    {
      v23 = &unk_100BFDB60;
      goto LABEL_11;
    }
    v23 = &unk_100BFD998;
    goto LABEL_11;
  }
  if (v11)
    v23 = &unk_100BFD440;
  else
    v23 = &unk_100BFD608;
LABEL_11:
  memcpy(v67, v23, 0x1C8uLL);
  v24 = memcpy(v66, v67, sizeof(v66));
  v50 = &v48;
  __chkstk_darwin(v24);
  *(&v48 - 8) = a5;
  *(&v48 - 7) = a6;
  v48 = a1;
  *(&v48 - 6) = a1;
  *((_BYTE *)&v48 - 40) = v10;
  HIDWORD(v49) = v11 >> 8;
  *((_BYTE *)&v48 - 39) = BYTE1(v11);
  v25 = v62;
  *(&v48 - 4) = v55;
  *(&v48 - 3) = v25;
  *(&v48 - 2) = (uint64_t)v66;
  v26 = v51;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v51);
  Group<A>.init(content:)(sub_10067B454, &v48 - 10, v26, WitnessTable);
  v65[3] = WitnessTable;
  v28 = v54;
  v50 = (uint64_t *)swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v54);
  sub_1000B2074(v20, v28, v50);
  v29 = v52;
  v51 = *(uint64_t (**)(_QWORD, _QWORD))(v52 + 8);
  v30 = v51(v20, v28);
  __chkstk_darwin(v30);
  *(&v48 - 8) = a5;
  *(&v48 - 7) = a6;
  *(&v48 - 6) = v48;
  *((_BYTE *)&v48 - 40) = v10;
  *((_BYTE *)&v48 - 39) = BYTE4(v49);
  v31 = v62;
  *(&v48 - 4) = v32;
  *(&v48 - 3) = v31;
  *(&v48 - 2) = (uint64_t)v66;
  v33 = v53;
  v34 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v53);
  v35 = v59;
  Group<A>.init(content:)(sub_10067B460, &v48 - 10, v33, v34);
  v65[2] = v34;
  v36 = v56;
  v37 = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v56);
  v38 = (uint64_t)v58;
  sub_1000B2074(v35, v36, v37);
  v39 = v57;
  sub_1000C3530(v35);
  v40 = *(void (**)(uint64_t, char *, uint64_t))(v29 + 16);
  v41 = v61;
  v40(v20, v61, v28);
  v65[0] = v20;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v35, v38, v36);
  v65[1] = v35;
  v64[0] = v28;
  v64[1] = v36;
  v63[0] = v50;
  v63[1] = v37;
  sub_10052800C((uint64_t)v65, 2, (uint64_t)v64, (uint64_t)v63, v42, v43, v44, v45, v48, v49, (uint64_t)v50, (uint64_t)v51, v52, v53, v54, v55, v56, v57);
  sub_1000C3530(v38);
  v46 = v51;
  v51(v41, v28);
  sub_1000C3530(v35);
  return v46(v20, v28);
}

uint64_t sub_10067A46C@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X2>, _QWORD *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  void (*v65)(uint64_t, char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t);
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t);
  void (*v90)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _BYTE v107[24];
  _BYTE v108[40];
  _QWORD v109[4];
  char v110;

  v98 = a5;
  v90 = a2;
  v88 = a6;
  v9 = sub_1000BA294(&qword_100BC4A98);
  __chkstk_darwin(v9);
  v11 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = type metadata accessor for Optional(0, a4);
  v93 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v102 = (uint64_t)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v99 = (uint64_t)&v80 - v14;
  v82 = type metadata accessor for LocationComponentContainerViewModel(0);
  __chkstk_darwin(v82);
  v80 = (uint64_t)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v80 - v17;
  v19 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(v20);
  v87 = (uint64_t)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v96 = (char *)&v80 - v23;
  __chkstk_darwin(v24);
  v95 = (char *)&v80 - v25;
  __chkstk_darwin(v26);
  v94 = (char *)&v80 - v27;
  __chkstk_darwin(v28);
  v86 = (uint64_t)&v80 - v29;
  __chkstk_darwin(v30);
  v84 = (uint64_t)&v80 - v31;
  __chkstk_darwin(v32);
  v92 = (char *)&v80 - v33;
  __chkstk_darwin(v34);
  v101 = (char *)&v80 - v35;
  __chkstk_darwin(v36);
  v38 = (char *)&v80 - v37;
  __chkstk_darwin(v39);
  v41 = (char *)&v80 - v40;
  sub_100080E30(a1 + OBJC_IVAR____TtCV7Weather18NoAqiSevereContent8_Storage_severeAlert, (uint64_t)v18);
  v90((uint64_t)v18, a3[37], a3[38], a3[39], a3[40]);
  v81 = v18;
  sub_100080DF4((uint64_t)v18);
  v91 = v41;
  sub_1000B2074(v38, a4, v98);
  v83 = v19;
  v42 = *(void (**)(char *, uint64_t))(v19 + 8);
  v100 = v38;
  v43 = v42;
  v42(v38, a4);
  v85 = a1;
  v44 = a1 + OBJC_IVAR____TtCV7Weather18NoAqiSevereContent8_Storage_map;
  swift_beginAccess(a1 + OBJC_IVAR____TtCV7Weather18NoAqiSevereContent8_Storage_map, v107, 0, 0);
  sub_1001A1D04(v44, (uint64_t)v11);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v82) == 1)
  {
    sub_1001A1D4C((uint64_t)v11);
  }
  else
  {
    v45 = v80;
    sub_1001A1D8C((uint64_t)v11, v80);
    sub_1001A1DD0((uint64_t)(a3 + 20), (uint64_t)v108);
    sub_1001A1DD0((uint64_t)v108, (uint64_t)v109);
    if (v110 != 1)
    {
      v48 = v101;
      v47 = v90;
      v90(v45, v109[0], v109[1], v109[2], v109[3]);
      sub_100080DF4(v45);
      v49 = (uint64_t)v100;
      sub_1000B2074(v48, a4, v98);
      v43(v48, a4);
      sub_1000B1100(v49, a4, v102);
      v43((char *)v49, a4);
      v46 = 0;
      goto LABEL_7;
    }
    sub_100080DF4(v45);
  }
  v46 = 1;
  v47 = v90;
LABEL_7:
  v50 = v102;
  _s7Weather24LocationCompositionStateOwst_0(v102, v46, 1, a4);
  v51 = v98;
  sub_100158984(v50, a4, v99);
  v90 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v93 + 8);
  ((void (*)(uint64_t, uint64_t))v90)(v50, v97);
  v52 = v85;
  v53 = (uint64_t)v81;
  sub_100080E30(*(_QWORD *)(v85 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, (uint64_t)v81);
  v54 = v101;
  v47(v53, a3[12], a3[13], a3[14], a3[15]);
  sub_100080DF4(v53);
  sub_1000B2074(v54, a4, v51);
  v89 = v43;
  v43(v54, a4);
  v55 = v52;
  sub_100080E30(*(_QWORD *)(v52 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v53);
  v56 = v92;
  v47(v53, a3[4], a3[5], a3[6], a3[7]);
  sub_100080DF4(v53);
  sub_1000B2074(v56, a4, v51);
  v89(v56, a4);
  sub_100080E30(*(_QWORD *)(v55 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex, v53);
  v57 = v84;
  v47(v53, a3[45], a3[46], a3[47], a3[48]);
  sub_100080DF4(v53);
  sub_1000B2074(v57, a4, v51);
  v58 = (void (*)(uint64_t, uint64_t))v89;
  v89((char *)v57, a4);
  sub_100080E30(*(_QWORD *)(v55 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, v53);
  v59 = a3[41];
  v60 = a3[42];
  v61 = a3[43];
  v62 = a3[44];
  v63 = v86;
  v47(v53, v59, v60, v61, v62);
  sub_100080DF4(v53);
  sub_1000B2074(v63, a4, v51);
  v58(v63, a4);
  v64 = v58;
  v65 = *(void (**)(uint64_t, char *, uint64_t))(v83 + 16);
  v65(v63, v91, a4);
  v106[0] = v63;
  v66 = v63;
  v67 = v102;
  v68 = v97;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 16))(v102, v99, v97);
  v106[1] = v67;
  v69 = v94;
  v65((uint64_t)v94, v100, a4);
  v106[2] = v69;
  v70 = v95;
  v65((uint64_t)v95, v101, a4);
  v106[3] = v70;
  v71 = v96;
  v72 = v92;
  v65((uint64_t)v96, v92, a4);
  v106[4] = v71;
  v73 = v87;
  v65(v87, (char *)v57, a4);
  v106[5] = v73;
  v105[0] = a4;
  v105[1] = v68;
  v105[2] = a4;
  v105[3] = a4;
  v105[4] = a4;
  v105[5] = a4;
  v103 = v51;
  v104[0] = v51;
  v104[1] = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v68);
  v104[2] = v51;
  v104[3] = v51;
  v104[4] = v51;
  v104[5] = v51;
  sub_10052800C((uint64_t)v106, 6, (uint64_t)v105, (uint64_t)v104, v74, v75, v76, v77, v80, (uint64_t)v81, v82, v83, v84, v85, v86, v87, v88, (uint64_t)v89);
  v64(v57, a4);
  v64((uint64_t)v72, a4);
  v64((uint64_t)v101, a4);
  v64((uint64_t)v100, a4);
  v78 = (void (*)(uint64_t, uint64_t))v90;
  ((void (*)(uint64_t, uint64_t))v90)(v99, v68);
  v64((uint64_t)v91, a4);
  v64(v73, a4);
  v64((uint64_t)v96, a4);
  v64((uint64_t)v95, a4);
  v64((uint64_t)v94, a4);
  v78(v102, v68);
  return ((uint64_t (*)(uint64_t, uint64_t))v64)(v66, a4);
}

uint64_t sub_10067ABE4@<X0>(uint64_t a1@<X0>, void (*a2)(char *, _QWORD, _QWORD, _QWORD, _QWORD)@<X2>, _QWORD *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  _QWORD v93[8];
  _QWORD v94[8];
  _QWORD v95[8];

  v78 = a6;
  v11 = type metadata accessor for LocationComponentContainerViewModel(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(v14);
  v77 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v76 = (char *)&v74 - v17;
  __chkstk_darwin(v18);
  v92 = (char *)&v74 - v19;
  __chkstk_darwin(v20);
  v91 = (char *)&v74 - v21;
  __chkstk_darwin(v22);
  v89 = (char *)&v74 - v23;
  __chkstk_darwin(v24);
  v87 = (char *)&v74 - v25;
  __chkstk_darwin(v26);
  v86 = (char *)&v74 - v27;
  __chkstk_darwin(v28);
  v85 = (char *)&v74 - v29;
  __chkstk_darwin(v30);
  v75 = (uint64_t)&v74 - v31;
  __chkstk_darwin(v32);
  v83 = (char *)&v74 - v33;
  __chkstk_darwin(v34);
  v81 = (char *)&v74 - v35;
  __chkstk_darwin(v36);
  v79 = (char *)&v74 - v37;
  __chkstk_darwin(v38);
  v80 = (char *)&v74 - v39;
  __chkstk_darwin(v40);
  v42 = (char *)&v74 - v41;
  __chkstk_darwin(v43);
  v45 = (char *)&v74 - v44;
  __chkstk_darwin(v46);
  v88 = (char *)&v74 - v47;
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind, (uint64_t)v13);
  a2(v13, a3[53], a3[54], a3[55], a3[56]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v45, a4, a5);
  v48 = *(void (**)(char *, uint64_t))(v90 + 8);
  v84 = v45;
  v48(v45, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)v13);
  a2(v13, a3[33], a3[34], a3[35], a3[36]);
  sub_100080DF4((uint64_t)v13);
  v49 = a5;
  sub_1000B2074(v42, a4, a5);
  v82 = v42;
  v48(v42, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike, (uint64_t)v13);
  v50 = (uint64_t)v80;
  a2(v13, a3[8], a3[9], a3[10], a3[11]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v50, a4, v49);
  v48((char *)v50, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)v13);
  v51 = (uint64_t)v79;
  a2(v13, a3[16], a3[17], a3[18], a3[19]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v51, a4, v49);
  v48((char *)v51, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility, (uint64_t)v13);
  v52 = (uint64_t)v81;
  a2(v13, a3[49], a3[50], a3[51], a3[52]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v52, a4, v49);
  v48((char *)v52, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, (uint64_t)v13);
  v53 = (uint64_t)v83;
  a2(v13, a3[29], a3[30], a3[31], a3[32]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v53, a4, v49);
  v48((char *)v53, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, (uint64_t)v13);
  v54 = v75;
  a2(v13, a3[25], a3[26], a3[27], a3[28]);
  sub_100080DF4((uint64_t)v13);
  v55 = v54;
  v74 = v49;
  sub_1000B2074(v54, a4, v49);
  v48((char *)v54, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, (uint64_t)v13);
  v56 = v85;
  a2(v13, *a3, a3[1], a3[2], a3[3]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v56, a4, v49);
  v48(v56, a4);
  v57 = *(void (**)(char *, char *, uint64_t))(v90 + 16);
  v57(v56, v88, a4);
  v95[0] = v56;
  v58 = v86;
  v57(v86, v84, a4);
  v95[1] = v58;
  v59 = v87;
  v57(v87, v82, a4);
  v95[2] = v59;
  v60 = v89;
  v61 = (uint64_t)v80;
  v57(v89, v80, a4);
  v95[3] = v60;
  v62 = v91;
  v63 = (uint64_t)v79;
  v57(v91, v79, a4);
  v95[4] = v62;
  v64 = v92;
  v65 = (uint64_t)v81;
  v57(v92, v81, a4);
  v95[5] = v64;
  v66 = (uint64_t)v76;
  v67 = (uint64_t)v83;
  v57(v76, v83, a4);
  v95[6] = v66;
  v68 = (uint64_t)v77;
  v57(v77, (char *)v55, a4);
  v95[7] = v68;
  v94[0] = a4;
  v94[1] = a4;
  v94[2] = a4;
  v94[3] = a4;
  v94[4] = a4;
  v94[5] = a4;
  v94[6] = a4;
  v94[7] = a4;
  v93[0] = v74;
  v93[1] = v74;
  v93[2] = v74;
  v93[3] = v74;
  v93[4] = v74;
  v93[5] = v74;
  v93[6] = v74;
  v93[7] = v74;
  sub_10052800C((uint64_t)v95, 8, (uint64_t)v94, (uint64_t)v93, v69, v70, v71, v72, v74, v75, (uint64_t)v76, (uint64_t)v77, v78, (uint64_t)v79, (uint64_t)v80, (uint64_t)v81, (uint64_t)v82, (uint64_t)v83);
  v48((char *)v55, a4);
  v48((char *)v67, a4);
  v48((char *)v65, a4);
  v48((char *)v63, a4);
  v48((char *)v61, a4);
  v48(v82, a4);
  v48(v84, a4);
  v48(v88, a4);
  v48((char *)v68, a4);
  v48((char *)v66, a4);
  v48(v92, a4);
  v48(v91, a4);
  v48(v89, a4);
  v48(v87, a4);
  v48(v86, a4);
  return ((uint64_t (*)(char *, uint64_t))v48)(v85, a4);
}

uint64_t sub_10067B428@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int16 v3;

  if (*(_BYTE *)(v2 + 9))
    v3 = 256;
  else
    v3 = 0;
  return sub_10067A04C(*(_QWORD *)v2, v3 | *(unsigned __int8 *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t sub_10067B454()
{
  return sub_1001A1CD4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10067A46C);
}

uint64_t sub_10067B460()
{
  return sub_1001A1CD4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10067ABE4);
}

uint64_t assignWithTake for ContentStatusBannerViewStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  swift_release(*(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release(v5);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t *sub_10067B4D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = a2[1];
    *v4 = *a2;
    v4[1] = v7;
    v8 = a2[3];
    v4[2] = a2[2];
    v4[3] = v8;
    v9 = a2[5];
    v4[4] = a2[4];
    v4[5] = v9;
    v10 = a2 + 6;
    v11 = a2[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v11 >= 2)
    {
      v4[6] = *v10;
      v4[7] = v11;
      swift_bridgeObjectRetain();
    }
    else
    {
      *((_OWORD *)v4 + 3) = *(_OWORD *)v10;
    }
    v13 = *(int *)(a3 + 20);
    v14 = (uint64_t *)((char *)v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
    if (swift_getEnumCaseMultiPayload(v15) == 1)
    {
      v17 = type metadata accessor for UserInterfaceSizeClass(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v17))
      {
        v18 = sub_1000BA294(&qword_100BC5A68);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
        v19 = 1;
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v15, v17);
        v19 = 1;
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 0, 1, v17);
      }
    }
    else
    {
      *v14 = *v15;
      swift_retain();
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v14, v16, v19);
    v20 = *(int *)(a3 + 24);
    v21 = (char *)v4 + v20;
    v22 = (char *)a2 + v20;
    v23 = *((_QWORD *)v22 + 1);
    *(_QWORD *)v21 = *(_QWORD *)v22;
    *((_QWORD *)v21 + 1) = v23;
    v24 = *((_QWORD *)v22 + 3);
    *((_QWORD *)v21 + 2) = *((_QWORD *)v22 + 2);
    *((_QWORD *)v21 + 3) = v24;
    v21[32] = v22[32];
    *((_QWORD *)v21 + 5) = *((_QWORD *)v22 + 5);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

_OWORD *sub_10067B6B0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (swift_getEnumCaseMultiPayload(v10) == 1)
  {
    v12 = type metadata accessor for UserInterfaceSizeClass(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v12))
    {
      v13 = sub_1000BA294(&qword_100BC5A68);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v12);
    }
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v14 = *(int *)(a3 + 24);
  v15 = (_OWORD *)((char *)a1 + v14);
  v16 = (_OWORD *)((char *)a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v15[2] = v16[2];
  return a1;
}

uint64_t sub_10067B7E4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;

  v6 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  v9 = a2 + 6;
  if (*(_QWORD *)(a1 + 56) < 2uLL)
    goto LABEL_4;
  v10 = a2[7];
  if (v10 < 2)
  {
    sub_1001A27B4(a1 + 48);
LABEL_4:
    *(_OWORD *)(a1 + 48) = *v9;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)v9;
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease();
LABEL_6:
  if ((_QWORD *)a1 != a2)
  {
    v11 = *(int *)(a3 + 20);
    v12 = (void *)(a1 + v11);
    v13 = (char *)a2 + v11;
    sub_100021AA4(a1 + v11, (uint64_t *)&unk_100C09CD0);
    v14 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
    if (swift_getEnumCaseMultiPayload(v13) == 1)
    {
      v15 = type metadata accessor for UserInterfaceSizeClass(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v15))
      {
        v16 = sub_1000BA294(&qword_100BC5A68);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v12, v13, v15);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v15);
      }
      swift_storeEnumTagMultiPayload(v12, v14, 1);
    }
    else
    {
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
  }
  v17 = *(int *)(a3 + 24);
  v18 = a1 + v17;
  v19 = (char *)a2 + v17;
  *(_QWORD *)(a1 + v17) = *(_QWORD *)v19;
  swift_release();
  *(_QWORD *)(v18 + 8) = *((_QWORD *)v19 + 1);
  swift_release();
  *(_QWORD *)(v18 + 16) = *((_QWORD *)v19 + 2);
  swift_release();
  *(_QWORD *)(v18 + 24) = *((_QWORD *)v19 + 3);
  swift_release();
  *(_BYTE *)(v18 + 32) = v19[32];
  *(_QWORD *)(v18 + 40) = *((_QWORD *)v19 + 5);
  swift_release();
  return a1;
}

uint64_t sub_10067B9D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000BA294((uint64_t *)&unk_100C09CB0);
    return _s7Weather24LocationCompositionStateOwet_0(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

void sub_10067BA50(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
    sub_100079F70();
  }
  else
  {
    v7 = sub_1000BA294((uint64_t *)&unk_100C09CB0);
    _s7Weather24LocationCompositionStateOwst_0(a1 + *(int *)(a4 + 20), a2, a2, v7);
  }
}

uint64_t sub_10067BAB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = sub_1000C4D6C();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + v4 + 56) >= 2uLL)
    swift_bridgeObjectRelease();
  v6 = v0 + v4 + *(int *)(v1 + 20);
  sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (swift_getEnumCaseMultiPayload(v6) == 1)
  {
    v7 = type metadata accessor for UserInterfaceSizeClass(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v6, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10067BBEC()
{
  _QWORD v1[4];

  v1[0] = sub_100075EB0(&qword_100BFBC68);
  v1[1] = sub_100075EB0(&qword_100BC5A68);
  v1[2] = sub_100156E04();
  v1[3] = sub_1001546F8();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

uint64_t sub_10067BC5C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[5];
  _QWORD v26[3];
  uint64_t v27;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BFBD98);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (v27)
  {
    v8 = a1[3];
    v9 = a1[4];
    sub_1000DB418(a1, v8);
    v10 = sub_1000BA294(&qword_100BC47D8);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
    if (result)
    {
      v11 = result;
      v12 = sub_100068EB4((uint64_t)v26, v27);
      __chkstk_darwin(v12);
      v14 = (_QWORD *)((char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *))(v15 + 16))(v14);
      v16 = *v14;
      v17 = type metadata accessor for MoonScrubberInteractor();
      v25[3] = v17;
      v25[4] = &off_100B820C8;
      v25[0] = v16;
      v18 = type metadata accessor for MoonScrubberModule();
      v19 = (_QWORD *)swift_allocObject(v18, 64, 7);
      v20 = sub_100068EB4((uint64_t)v25, v17);
      __chkstk_darwin(v20);
      v22 = (_QWORD *)((char *)v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *))(v23 + 16))(v22);
      v24 = *v22;
      v19[5] = v17;
      v19[6] = &off_100B820C8;
      v19[2] = v24;
      v19[7] = v11;
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v25);
      result = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v26);
      a2[3] = v18;
      a2[4] = &off_100B8C7F8;
      *a2 = v19;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

double sub_10067BE34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v0 = sub_1000BA294(&qword_100BFBD98);
  v1 = RegistrationContainer.register<A>(_:name:factory:)(v0, 0, 0, sub_10067BEFC, 0, v0);
  swift_release(v1);
  v2 = sub_1000BA294(&qword_100BFBDA0);
  v3 = RegistrationContainer.register<A>(_:name:factory:)(v2, 0, 0, sub_10067BF94, 0, v2);
  swift_release(v3);
  v4 = sub_1000BA294(qword_100BFBDA8);
  v5 = RegistrationContainer.register<A>(_:name:factory:)(v4, 0, 0, sub_10067BFD8, 0, v4);
  swift_release(v5);
  v6 = sub_1000BA294(&qword_100BC47D8);
  v7 = RegistrationContainer.register<A>(_:name:factory:)(v6, 0, 0, sub_10067C06C, 0, v6);
  *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  return result;
}

uint64_t sub_10067BEFC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = sub_1000BA294(&qword_100BC43F0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (v8)
  {
    v7 = type metadata accessor for MoonScrubberInteractor();
    result = swift_allocObject(v7, 32, 7);
    *(_QWORD *)(result + 16) = v8;
    *(_QWORD *)(result + 24) = v9;
    a2[3] = v7;
    a2[4] = (uint64_t)&off_100B820C8;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10067BF94@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for MoonScrubberInputFactory();
  result = swift_allocObject(v2, 16, 7);
  a1[3] = v2;
  a1[4] = (uint64_t)&off_100B6E658;
  *a1 = result;
  return result;
}

uint64_t sub_10067BFD8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&type metadata for MoonDetailDayRangeProvider, &type metadata for MoonDetailDayRangeProvider, v3, v4);
  if ((v7 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v6 = type metadata accessor for MoonScrubberViewModelFactory();
    swift_allocObject(v6, 32, 7);
    result = sub_1003E6CC0();
    a2[3] = v6;
    a2[4] = (uint64_t)&off_100B71ED0;
    *a2 = result;
  }
  return result;
}

uint64_t sub_10067C06C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22[2];
  _QWORD v23[3];
  uint64_t v24;
  _UNKNOWN **v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BC43B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  v6 = v28;
  if (!v28)
  {
    __break(1u);
    goto LABEL_6;
  }
  v8 = v30;
  v7 = v31;
  v9 = v29;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1000BA294(&qword_100BFBDA0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v12, v12, v10, v11);
  if (!v27)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v13 = *sub_1000DB418(v26, v27);
  v24 = type metadata accessor for MoonScrubberInputFactory();
  v25 = &off_100B6E658;
  v23[0] = v13;
  sub_100043CA8((uint64_t)v23, (uint64_t)v22);
  v14 = swift_allocObject(&unk_100B88368, 56, 7);
  sub_10003C800(v22, v14 + 16);
  swift_retain();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v23);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v26);
  v15 = swift_allocObject(&unk_100B88390, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_10067C378;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = a1[3];
  v17 = a1[4];
  sub_1000DB418(a1, v16);
  v18 = sub_1000BA294(qword_100BFBDA8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v18, v18, v16, v17);
  if (v27)
  {
    v19 = *sub_1000DB418(v26, v27);
    v24 = type metadata accessor for MoonScrubberViewModelFactory();
    v25 = &off_100B71ED0;
    v23[0] = v19;
    sub_100043CA8((uint64_t)v23, (uint64_t)v22);
    v20 = swift_allocObject(&unk_100B883B8, 56, 7);
    sub_10003C800(v22, v20 + 16);
    swift_retain();
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v23);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v26);
    v21 = sub_1000BA294(&qword_100BC47D8);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    return sub_100184248(v6, v9, v8, v7, sub_100182F48, 0, sub_1000A22C0, v15, sub_10067C3A4, v20);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_10067C2C4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  sub_1000DB418(a2, a2[3]);
  return sub_10034DF5C(a1, a3);
}

uint64_t sub_10067C30C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  sub_1000DB418(a2, a2[3]);
  return sub_1003E6D54(a1, a3);
}

uint64_t sub_10067C354()
{
  uint64_t v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10067C378@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10067C2C4(a1, (_QWORD *)(v2 + 16), a2);
}

uint64_t sub_10067C380()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10067C3A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10067C30C(a1, (_QWORD *)(v2 + 16), a2);
}

uint64_t type metadata accessor for DefaultContentView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DefaultContentView);
}

uint64_t sub_10067C3BC(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100ABCD28, 1);
}

uint64_t sub_10067C3F0@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  void *v24;
  uint64_t v25;
  uint64_t (*v26)(_QWORD, _QWORD);
  uint64_t WitnessTable;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t (*v51)(_QWORD, _QWORD);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  _QWORD v63[2];
  _QWORD v64[2];
  _QWORD v65[4];
  _BYTE v66[456];
  _QWORD v67[58];

  v62 = a4;
  v55 = a3;
  v60 = a7;
  v67[0] = a5;
  v67[1] = a5;
  v67[2] = a5;
  v67[3] = a5;
  v10 = a2;
  v11 = a2 & 0x100;
  v67[4] = a5;
  v67[5] = a5;
  v67[6] = a5;
  v67[7] = a5;
  v12 = sub_1000BBB64(255, 8, (uint64_t)v67);
  v53 = sub_1000AE86C(v12);
  v13 = type metadata accessor for Group(0, v53);
  v14 = *(_QWORD *)(v13 - 8);
  v56 = v13;
  v57 = v14;
  __chkstk_darwin(v13);
  sub_1000986FC();
  v59 = v15;
  __chkstk_darwin(v16);
  v58 = (char *)&v48 - v17;
  v67[0] = a5;
  v67[1] = type metadata accessor for Optional(255, a5);
  v67[2] = a5;
  v67[3] = a5;
  v67[4] = a5;
  v67[5] = a5;
  v18 = sub_1000BBB64(255, 6, (uint64_t)v67);
  v51 = (uint64_t (*)(_QWORD, _QWORD))sub_1000AE86C(v18);
  v54 = type metadata accessor for Group(0, v51);
  v52 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  sub_1000986FC();
  v20 = v19;
  __chkstk_darwin(v21);
  v61 = (char *)&v48 - v22;
  if (v10)
  {
    if (v10 == 1)
    {
      if (v11)
      {
        v23 = &qword_100BE6BF8;
        goto LABEL_11;
      }
    }
    else if (v11)
    {
      v23 = &qword_100BE6F88;
      goto LABEL_11;
    }
    v23 = &qword_100BE6DC0;
    goto LABEL_11;
  }
  if (v11)
    v23 = &qword_100BE6868;
  else
    v23 = &qword_100BE6A30;
LABEL_11:
  memcpy(v67, v23, 0x1C8uLL);
  v24 = memcpy(v66, v67, sizeof(v66));
  v50 = &v48;
  __chkstk_darwin(v24);
  *(&v48 - 8) = a5;
  *(&v48 - 7) = a6;
  v48 = a1;
  *(&v48 - 6) = a1;
  *((_BYTE *)&v48 - 40) = v10;
  HIDWORD(v49) = v11 >> 8;
  *((_BYTE *)&v48 - 39) = BYTE1(v11);
  v25 = v62;
  *(&v48 - 4) = v55;
  *(&v48 - 3) = v25;
  *(&v48 - 2) = (uint64_t)v66;
  v26 = v51;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v51);
  Group<A>.init(content:)(sub_10067CFB4, &v48 - 10, v26, WitnessTable);
  v65[3] = WitnessTable;
  v28 = v54;
  v50 = (uint64_t *)swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v54);
  sub_1000B2074(v20, v28, v50);
  v29 = v52;
  v51 = *(uint64_t (**)(_QWORD, _QWORD))(v52 + 8);
  v30 = v51(v20, v28);
  __chkstk_darwin(v30);
  *(&v48 - 8) = a5;
  *(&v48 - 7) = a6;
  *(&v48 - 6) = v48;
  *((_BYTE *)&v48 - 40) = v10;
  *((_BYTE *)&v48 - 39) = BYTE4(v49);
  v31 = v62;
  *(&v48 - 4) = v32;
  *(&v48 - 3) = v31;
  *(&v48 - 2) = (uint64_t)v66;
  v33 = v53;
  v34 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v53);
  v35 = v59;
  Group<A>.init(content:)(sub_100240828, &v48 - 10, v33, v34);
  v65[2] = v34;
  v36 = v56;
  v37 = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v56);
  v38 = (uint64_t)v58;
  sub_1000B2074(v35, v36, v37);
  v39 = v57;
  sub_1000C3530(v35);
  v40 = *(void (**)(uint64_t, char *, uint64_t))(v29 + 16);
  v41 = v61;
  v40(v20, v61, v28);
  v65[0] = v20;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v35, v38, v36);
  v65[1] = v35;
  v64[0] = v28;
  v64[1] = v36;
  v63[0] = v50;
  v63[1] = v37;
  sub_10052800C((uint64_t)v65, 2, (uint64_t)v64, (uint64_t)v63, v42, v43, v44, v45, v48, v49, (uint64_t)v50, (uint64_t)v51, v52, v53, v54, v55, v56, v57);
  sub_1000C3530(v38);
  v46 = v51;
  v51(v41, v28);
  sub_1000C3530(v35);
  return v46(v20, v28);
}

uint64_t sub_10067C810@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X2>, uint64_t *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  void (*v65)(uint64_t, char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t);
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t);
  void (*v90)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _BYTE v107[24];
  _BYTE v108[40];
  _QWORD v109[4];
  char v110;

  v98 = a5;
  v90 = a2;
  v88 = a6;
  v9 = sub_1000BA294(&qword_100BC4A98);
  __chkstk_darwin(v9);
  v11 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = type metadata accessor for Optional(0, a4);
  v93 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v102 = (uint64_t)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v99 = (uint64_t)&v80 - v14;
  v82 = type metadata accessor for LocationComponentContainerViewModel(0);
  __chkstk_darwin(v82);
  v80 = (uint64_t)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v80 - v17;
  v19 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(v20);
  v87 = (uint64_t)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v96 = (char *)&v80 - v23;
  __chkstk_darwin(v24);
  v95 = (char *)&v80 - v25;
  __chkstk_darwin(v26);
  v94 = (char *)&v80 - v27;
  __chkstk_darwin(v28);
  v86 = (uint64_t)&v80 - v29;
  __chkstk_darwin(v30);
  v84 = (uint64_t)&v80 - v31;
  __chkstk_darwin(v32);
  v92 = (char *)&v80 - v33;
  __chkstk_darwin(v34);
  v101 = (char *)&v80 - v35;
  __chkstk_darwin(v36);
  v38 = (char *)&v80 - v37;
  __chkstk_darwin(v39);
  v41 = (char *)&v80 - v40;
  sub_100080E30(a1 + OBJC_IVAR____TtCV7Weather14DefaultContent8_Storage_airQuality, (uint64_t)v18);
  v90((uint64_t)v18, *a3, a3[1], a3[2], a3[3]);
  v81 = v18;
  sub_100080DF4((uint64_t)v18);
  v91 = v41;
  sub_1000B2074(v38, a4, v98);
  v83 = v19;
  v42 = *(void (**)(char *, uint64_t))(v19 + 8);
  v100 = v38;
  v43 = v42;
  v42(v38, a4);
  v85 = a1;
  v44 = a1 + OBJC_IVAR____TtCV7Weather14DefaultContent8_Storage_map;
  swift_beginAccess(a1 + OBJC_IVAR____TtCV7Weather14DefaultContent8_Storage_map, v107, 0, 0);
  sub_1001A1D04(v44, (uint64_t)v11);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v82) == 1)
  {
    sub_1001A1D4C((uint64_t)v11);
  }
  else
  {
    v45 = v80;
    sub_1001A1D8C((uint64_t)v11, v80);
    sub_1001A1DD0((uint64_t)(a3 + 24), (uint64_t)v108);
    sub_1001A1DD0((uint64_t)v108, (uint64_t)v109);
    if (v110 != 1)
    {
      v48 = v101;
      v47 = v90;
      v90(v45, v109[0], v109[1], v109[2], v109[3]);
      sub_100080DF4(v45);
      v49 = (uint64_t)v100;
      sub_1000B2074(v48, a4, v98);
      v43(v48, a4);
      sub_1000B1100(v49, a4, v102);
      v43((char *)v49, a4);
      v46 = 0;
      goto LABEL_7;
    }
    sub_100080DF4(v45);
  }
  v46 = 1;
  v47 = v90;
LABEL_7:
  v50 = v102;
  _s7Weather24LocationCompositionStateOwst_0(v102, v46, 1, a4);
  v51 = v98;
  sub_100158984(v50, a4, v99);
  v90 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v93 + 8);
  ((void (*)(uint64_t, uint64_t))v90)(v50, v97);
  v52 = v85;
  v53 = (uint64_t)v81;
  sub_100080E30(*(_QWORD *)(v85 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, (uint64_t)v81);
  v54 = v101;
  v47(v53, a3[16], a3[17], a3[18], a3[19]);
  sub_100080DF4(v53);
  sub_1000B2074(v54, a4, v51);
  v89 = v43;
  v43(v54, a4);
  v55 = v52;
  sub_100080E30(*(_QWORD *)(v52 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v53);
  v56 = v92;
  v47(v53, a3[8], a3[9], a3[10], a3[11]);
  sub_100080DF4(v53);
  sub_1000B2074(v56, a4, v51);
  v89(v56, a4);
  sub_100080E30(*(_QWORD *)(v55 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex, v53);
  v57 = v84;
  v47(v53, a3[45], a3[46], a3[47], a3[48]);
  sub_100080DF4(v53);
  sub_1000B2074(v57, a4, v51);
  v58 = (void (*)(uint64_t, uint64_t))v89;
  v89((char *)v57, a4);
  sub_100080E30(*(_QWORD *)(v55 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, v53);
  v59 = a3[41];
  v60 = a3[42];
  v61 = a3[43];
  v62 = a3[44];
  v63 = v86;
  v47(v53, v59, v60, v61, v62);
  sub_100080DF4(v53);
  sub_1000B2074(v63, a4, v51);
  v58(v63, a4);
  v64 = v58;
  v65 = *(void (**)(uint64_t, char *, uint64_t))(v83 + 16);
  v65(v63, v91, a4);
  v106[0] = v63;
  v66 = v63;
  v67 = v102;
  v68 = v97;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 16))(v102, v99, v97);
  v106[1] = v67;
  v69 = v94;
  v65((uint64_t)v94, v100, a4);
  v106[2] = v69;
  v70 = v95;
  v65((uint64_t)v95, v101, a4);
  v106[3] = v70;
  v71 = v96;
  v72 = v92;
  v65((uint64_t)v96, v92, a4);
  v106[4] = v71;
  v73 = v87;
  v65(v87, (char *)v57, a4);
  v106[5] = v73;
  v105[0] = a4;
  v105[1] = v68;
  v105[2] = a4;
  v105[3] = a4;
  v105[4] = a4;
  v105[5] = a4;
  v103 = v51;
  v104[0] = v51;
  v104[1] = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v68);
  v104[2] = v51;
  v104[3] = v51;
  v104[4] = v51;
  v104[5] = v51;
  sub_10052800C((uint64_t)v106, 6, (uint64_t)v105, (uint64_t)v104, v74, v75, v76, v77, v80, (uint64_t)v81, v82, v83, v84, v85, v86, v87, v88, (uint64_t)v89);
  v64(v57, a4);
  v64((uint64_t)v72, a4);
  v64((uint64_t)v101, a4);
  v64((uint64_t)v100, a4);
  v78 = (void (*)(uint64_t, uint64_t))v90;
  ((void (*)(uint64_t, uint64_t))v90)(v99, v68);
  v64((uint64_t)v91, a4);
  v64(v73, a4);
  v64((uint64_t)v96, a4);
  v64((uint64_t)v95, a4);
  v64((uint64_t)v94, a4);
  v78(v102, v68);
  return ((uint64_t (*)(uint64_t, uint64_t))v64)(v66, a4);
}

uint64_t sub_10067CF88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int16 v3;

  if (*(_BYTE *)(v2 + 9))
    v3 = 256;
  else
    v3 = 0;
  return sub_10067C3F0(*(_QWORD *)v2, v3 | *(unsigned __int8 *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t sub_10067CFB4()
{
  return sub_1001A1CD4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10067C810);
}

uint64_t sub_10067CFC0(uint64_t a1, char a2)
{
  int v2;

  if ((a2 & 1) != 0)
    v2 = 1;
  else
    v2 = 2;
  return sub_10067CFD0(a1, v2);
}

uint64_t sub_10067CFD0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  char v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t);
  uint64_t v74;
  uint64_t (*v75)(uint64_t);
  uint64_t v76;
  uint64_t v77;
  int EnumCaseMultiPayload;
  uint64_t v79;
  uint64_t (*v80)(uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _OWORD *v102;
  char v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t (*v110)(uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  NSObject *v114;
  uint64_t v115;
  os_log_type_t v116;
  uint8_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _OWORD *v136;
  char v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;

  v155 = a2;
  v3 = sub_1000BA294(&qword_100BC5F50);
  __chkstk_darwin(v3);
  v149 = (char *)&v145 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000BA294(&qword_100BC5F48);
  __chkstk_darwin(v5);
  v148 = (uint64_t)&v145 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = type metadata accessor for LocationPreviewModalViewState(0);
  __chkstk_darwin(v163);
  v146 = (uint64_t)&v145 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v151 = (uint64_t)&v145 - v9;
  v153 = type metadata accessor for LocationPreviewViewState(0);
  __chkstk_darwin(v153);
  v147 = (uint64_t)&v145 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v152 = (uint64_t)&v145 - v12;
  v13 = sub_1000BA294(&qword_100BC5F60);
  __chkstk_darwin(v13);
  v159 = (uint64_t)&v145 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000BA294(&qword_100BC5F88);
  __chkstk_darwin(v15);
  v158 = (uint64_t)&v145 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000BA294(&qword_100BC5F90);
  __chkstk_darwin(v17);
  v157 = (uint64_t)&v145 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000BA294(&qword_100BC5F98);
  __chkstk_darwin(v19);
  v156 = (uint64_t)&v145 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000BA294(&qword_100BC5FA0);
  __chkstk_darwin(v21);
  v160 = (uint64_t)&v145 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_1000BA294(&qword_100BC5FA8);
  __chkstk_darwin(v23);
  v162 = (uint64_t)&v145 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_1000BA294(&qword_100BC5FB0);
  __chkstk_darwin(v25);
  v161 = (uint64_t)&v145 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = type metadata accessor for SunriseSunsetDetailViewState(0);
  __chkstk_darwin(v154);
  v145 = (uint64_t)&v145 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v150 = (uint64_t)&v145 - v29;
  __chkstk_darwin(v30);
  v32 = (char *)&v145 - v31;
  v33 = type metadata accessor for ModalViewState(0);
  __chkstk_darwin(v33);
  v35 = (char *)&v145 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v38 = (char *)&v145 - v37;
  __chkstk_darwin(v39);
  v41 = (char *)&v145 - v40;
  v42 = type metadata accessor for ModalViewState.LocationDetailModal(0);
  __chkstk_darwin(v42);
  v44 = (char *)&v145 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  v47 = (char *)&v145 - v46;
  v164 = a1;
  v48 = a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_modalView;
  sub_100080C0C(v48, (uint64_t)v41, type metadata accessor for ModalViewState);
  v165 = v33;
  if (swift_getEnumCaseMultiPayload(v41) == 5)
  {
    sub_10007802C((uint64_t)v41, (uint64_t)v47, type metadata accessor for ModalViewState.LocationDetailModal);
    sub_100080C0C((uint64_t)v47, (uint64_t)v44, type metadata accessor for ModalViewState.LocationDetailModal);
    if (swift_getEnumCaseMultiPayload(v44) == 3)
    {
      v49 = (uint64_t)v32;
      sub_10007802C((uint64_t)v44, (uint64_t)v32, type metadata accessor for SunriseSunsetDetailViewState);
      v50 = type metadata accessor for AppConfigurationState(0);
      v51 = v161;
      _s7Weather24LocationCompositionStateOwst_0(v161, 1, 1, v50);
      v52 = type metadata accessor for EnvironmentState(0);
      v53 = v162;
      _s7Weather24LocationCompositionStateOwst_0(v162, 1, 1, v52);
      v54 = type metadata accessor for LocationsState(0);
      v55 = v160;
      _s7Weather24LocationCompositionStateOwst_0(v160, 1, 1, v54);
      v56 = type metadata accessor for NotificationsOptInState(0);
      v57 = v156;
      _s7Weather24LocationCompositionStateOwst_0(v156, 1, 1, v56);
      v58 = type metadata accessor for TimeState(0);
      v59 = v157;
      _s7Weather24LocationCompositionStateOwst_0(v157, 1, 1, v58);
      v60 = type metadata accessor for ViewState(0);
      v61 = v158;
      _s7Weather24LocationCompositionStateOwst_0(v158, 1, 1, v60);
      v62 = type metadata accessor for Location(0);
      v63 = v159;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v159, v49, v62);
      v64 = v154;
      v65 = *(int *)(v154 + 20);
      v66 = (_OWORD *)(v49 + v65);
      v67 = *(_BYTE *)(v49 + v65 + 32);
      v68 = v63 + v65;
      v69 = v66[1];
      *(_OWORD *)v68 = *v66;
      *(_OWORD *)(v68 + 16) = v69;
      *(_BYTE *)(v68 + 32) = v67;
      *(_BYTE *)(v63 + *(int *)(v64 + 24)) = v155;
      swift_storeEnumTagMultiPayload(v63, v42, 3);
      v70 = v165;
      swift_storeEnumTagMultiPayload(v63, v165, 5);
      _s7Weather24LocationCompositionStateOwst_0(v63, 0, 1, v70);
      v71 = v51;
      v72 = sub_1000DEBAC(0, 3, v51, v53, v55, 0, 0, 0, v57, v59, v61, v63, 0, 0, 0, 0, 0, 0, 0,
              v164);
      sub_100021A14(v63, &qword_100BC5F60);
      sub_100021A14(v61, &qword_100BC5F88);
      sub_100021A14(v59, &qword_100BC5F90);
      sub_100021A14(v57, &qword_100BC5F98);
      sub_100021A14(v55, &qword_100BC5FA0);
      sub_100021A14(v53, &qword_100BC5FA8);
      sub_100021A14(v71, &qword_100BC5FB0);
      sub_1000215BC(v49, type metadata accessor for SunriseSunsetDetailViewState);
      v73 = type metadata accessor for ModalViewState.LocationDetailModal;
      v74 = (uint64_t)v47;
LABEL_23:
      sub_1000215BC(v74, v73);
      return v72;
    }
    sub_1000215BC((uint64_t)v47, type metadata accessor for ModalViewState.LocationDetailModal);
    v76 = (uint64_t)v44;
    v75 = type metadata accessor for ModalViewState.LocationDetailModal;
  }
  else
  {
    v75 = type metadata accessor for ModalViewState;
    v76 = (uint64_t)v41;
  }
  sub_1000215BC(v76, v75);
  sub_100080C0C(v48, (uint64_t)v38, type metadata accessor for ModalViewState);
  v77 = v165;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v38);
  v79 = v163;
  if (EnumCaseMultiPayload)
  {
    v80 = type metadata accessor for ModalViewState;
    v81 = (uint64_t)v38;
  }
  else
  {
    v82 = (uint64_t)v38;
    v83 = v152;
    sub_10007802C(v82, v152, type metadata accessor for LocationPreviewViewState);
    v84 = v151;
    sub_100080C0C(v83 + *(int *)(v153 + 20), v151, type metadata accessor for LocationPreviewModalViewState);
    if (swift_getEnumCaseMultiPayload(v84) == 4)
    {
      v85 = v150;
      sub_10007802C(v84, v150, type metadata accessor for SunriseSunsetDetailViewState);
      v86 = type metadata accessor for AppConfigurationState(0);
      _s7Weather24LocationCompositionStateOwst_0(v161, 1, 1, v86);
      v87 = type metadata accessor for EnvironmentState(0);
      _s7Weather24LocationCompositionStateOwst_0(v162, 1, 1, v87);
      v88 = type metadata accessor for LocationsState(0);
      v89 = v160;
      _s7Weather24LocationCompositionStateOwst_0(v160, 1, 1, v88);
      v90 = type metadata accessor for NotificationsOptInState(0);
      v91 = v156;
      _s7Weather24LocationCompositionStateOwst_0(v156, 1, 1, v90);
      v92 = type metadata accessor for TimeState(0);
      v93 = v157;
      _s7Weather24LocationCompositionStateOwst_0(v157, 1, 1, v92);
      v94 = type metadata accessor for ViewState(0);
      v95 = v158;
      _s7Weather24LocationCompositionStateOwst_0(v158, 1, 1, v94);
      v96 = type metadata accessor for PreviewLocation(0);
      v97 = v148;
      _s7Weather24LocationCompositionStateOwst_0(v148, 1, 1, v96);
      v98 = type metadata accessor for Location(0);
      v99 = (uint64_t)v149;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 16))(v149, v85, v98);
      v100 = v154;
      v101 = *(int *)(v154 + 20);
      v102 = (_OWORD *)(v85 + v101);
      v103 = *(_BYTE *)(v85 + v101 + 32);
      v104 = v99 + v101;
      v105 = v102[1];
      *(_OWORD *)v104 = *v102;
      *(_OWORD *)(v104 + 16) = v105;
      *(_BYTE *)(v104 + 32) = v103;
      *(_BYTE *)(v99 + *(int *)(v100 + 24)) = v155;
      swift_storeEnumTagMultiPayload(v99, v79, 4);
      _s7Weather24LocationCompositionStateOwst_0(v99, 0, 1, v79);
      v106 = v159;
      sub_1003804CC(v97, v99, v159);
      sub_100021A14(v99, &qword_100BC5F50);
      sub_100021A14(v97, &qword_100BC5F48);
      swift_storeEnumTagMultiPayload(v106, v77, 0);
      _s7Weather24LocationCompositionStateOwst_0(v106, 0, 1, v77);
      v107 = v161;
      v108 = v162;
      v72 = sub_1000DEBAC(0, 3, v161, v162, v89, 0, 0, 0, v91, v93, v95, v106, 0, 0, 0, 0, 0, 0, 0,
              v164);
      sub_100021A14(v106, &qword_100BC5F60);
      sub_100021A14(v95, &qword_100BC5F88);
      sub_100021A14(v93, &qword_100BC5F90);
      sub_100021A14(v91, &qword_100BC5F98);
      sub_100021A14(v89, &qword_100BC5FA0);
      sub_100021A14(v108, &qword_100BC5FA8);
      sub_100021A14(v107, &qword_100BC5FB0);
      sub_1000215BC(v150, type metadata accessor for SunriseSunsetDetailViewState);
      v73 = type metadata accessor for LocationPreviewViewState;
      v74 = v83;
      goto LABEL_23;
    }
    sub_1000215BC(v83, type metadata accessor for LocationPreviewViewState);
    v80 = type metadata accessor for LocationPreviewModalViewState;
    v81 = v84;
  }
  sub_1000215BC(v81, v80);
  sub_100080C0C(v48, (uint64_t)v35, type metadata accessor for ModalViewState);
  if (swift_getEnumCaseMultiPayload(v35) != 4)
  {
    v110 = type metadata accessor for ModalViewState;
    v111 = (uint64_t)v35;
LABEL_15:
    sub_1000215BC(v111, v110);
    goto LABEL_16;
  }
  v109 = type metadata accessor for ModalViewState.MapViewModal(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v35, 1, v109) != 1)
  {
    v118 = v147;
    sub_10007802C((uint64_t)v35, v147, type metadata accessor for LocationPreviewViewState);
    v119 = v146;
    sub_100080C0C(v118 + *(int *)(v153 + 20), v146, type metadata accessor for LocationPreviewModalViewState);
    if (swift_getEnumCaseMultiPayload(v119) == 4)
    {
      v120 = v145;
      sub_10007802C(v119, v145, type metadata accessor for SunriseSunsetDetailViewState);
      v121 = type metadata accessor for AppConfigurationState(0);
      _s7Weather24LocationCompositionStateOwst_0(v161, 1, 1, v121);
      v122 = type metadata accessor for EnvironmentState(0);
      _s7Weather24LocationCompositionStateOwst_0(v162, 1, 1, v122);
      v123 = type metadata accessor for LocationsState(0);
      _s7Weather24LocationCompositionStateOwst_0(v160, 1, 1, v123);
      v124 = type metadata accessor for NotificationsOptInState(0);
      v125 = v156;
      _s7Weather24LocationCompositionStateOwst_0(v156, 1, 1, v124);
      v126 = type metadata accessor for TimeState(0);
      v127 = v157;
      _s7Weather24LocationCompositionStateOwst_0(v157, 1, 1, v126);
      v128 = type metadata accessor for ViewState(0);
      v129 = v158;
      _s7Weather24LocationCompositionStateOwst_0(v158, 1, 1, v128);
      v130 = type metadata accessor for PreviewLocation(0);
      v131 = v148;
      _s7Weather24LocationCompositionStateOwst_0(v148, 1, 1, v130);
      v132 = type metadata accessor for Location(0);
      v133 = (uint64_t)v149;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v132 - 8) + 16))(v149, v120, v132);
      v134 = v154;
      v135 = *(int *)(v154 + 20);
      v136 = (_OWORD *)(v120 + v135);
      v137 = *(_BYTE *)(v120 + v135 + 32);
      v138 = v133 + v135;
      v139 = v136[1];
      *(_OWORD *)v138 = *v136;
      *(_OWORD *)(v138 + 16) = v139;
      *(_BYTE *)(v138 + 32) = v137;
      *(_BYTE *)(v133 + *(int *)(v134 + 24)) = v155;
      swift_storeEnumTagMultiPayload(v133, v79, 4);
      _s7Weather24LocationCompositionStateOwst_0(v133, 0, 1, v79);
      v140 = v159;
      sub_1003804CC(v131, v133, v159);
      sub_100021A14(v133, &qword_100BC5F50);
      sub_100021A14(v131, &qword_100BC5F48);
      _s7Weather24LocationCompositionStateOwst_0(v140, 0, 1, v109);
      swift_storeEnumTagMultiPayload(v140, v77, 4);
      _s7Weather24LocationCompositionStateOwst_0(v140, 0, 1, v77);
      v141 = v161;
      v142 = v162;
      v143 = v160;
      v72 = sub_1000DEBAC(0, 3, v161, v162, v160, 0, 0, 0, v125, v127, v129, v140, 0, 0, 0, 0, 0, 0, 0,
              v164);
      sub_100021A14(v140, &qword_100BC5F60);
      sub_100021A14(v129, &qword_100BC5F88);
      sub_100021A14(v127, &qword_100BC5F90);
      sub_100021A14(v125, &qword_100BC5F98);
      sub_100021A14(v143, &qword_100BC5FA0);
      sub_100021A14(v142, &qword_100BC5FA8);
      sub_100021A14(v141, &qword_100BC5FB0);
      sub_1000215BC(v145, type metadata accessor for SunriseSunsetDetailViewState);
      v73 = type metadata accessor for LocationPreviewViewState;
      v74 = v118;
      goto LABEL_23;
    }
    sub_1000215BC(v118, type metadata accessor for LocationPreviewViewState);
    v110 = type metadata accessor for LocationPreviewModalViewState;
    v111 = v119;
    goto LABEL_15;
  }
  sub_100021A14((uint64_t)v35, &qword_100BC5F58);
LABEL_16:
  v72 = v164;
  if (qword_100BC2450 != -1)
    swift_once(&qword_100BC2450, sub_1006F3844);
  v112 = type metadata accessor for Logger(0);
  v113 = sub_1000AECD4(v112, (uint64_t)qword_100CAF0E8);
  v114 = Logger.logObject.getter(v113);
  v116 = static os_log_type_t.error.getter(v114, v115);
  if (os_log_type_enabled(v114, v116))
  {
    v117 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v117 = 0;
    _os_log_impl((void *)&_mh_execute_header, v114, v116, "Update data state when there is no modal presented", v117, 2u);
    swift_slowDealloc(v117, -1, -1);
  }

  swift_retain();
  return v72;
}

uint64_t sub_10067DEB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;
  int *v7;
  int v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  int v14;
  _BOOL4 v15;
  BOOL v16;
  int v17;
  int v18;
  uint64_t v20;

  v3 = type metadata accessor for ViewState(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100410440(a1, (uint64_t)v5);
  v6 = sub_1004B04B4((uint64_t)v5);
  v7 = (int *)type metadata accessor for NotificationsOptInInput(0);
  v8 = *(unsigned __int8 *)(a1 + v7[5]);
  v9 = *(unsigned __int8 *)(a1 + v7[6]);
  v10 = v9 == 1;
  v11 = *(unsigned __int8 *)(a1 + v7[8]);
  v12 = *(unsigned __int8 *)(a1 + v7[9]);
  sub_10067E084(v6, v8, (_DWORD)v9 == 1, v11, v12, *(unsigned __int8 *)(a1 + v7[10]), *(_BYTE *)(a1 + v7[7]));
  v14 = *(unsigned __int8 *)(v1 + 16);
  v15 = v8 == 2;
  v16 = v15 && v10;
  if (v15 && v10)
    v17 = 0x2000000;
  else
    v17 = 0;
  if (!v16 && (_DWORD)v12)
  {
    if (v8)
      __asm { BR              X9 }
    v17 = 0;
  }
  *(_BYTE *)(v1 + 16) = v13;
  if ((_DWORD)v11)
    v18 = 0x10000;
  else
    v18 = 0;
  return v18 | v17 | (v14 << 8) | v13;
}

void sub_10067E084(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if ((a7 & 1) == 0 && (a1 == 2 || (a1 & 1) != 0))
    sub_10067E0E0(a2);
}

void sub_10067E0E0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10067E154()
{
  swift_bridgeObjectRelease(0xED000064656E696DLL);
  return 0;
}

uint64_t sub_10067E3A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v55 = a2;
  v3 = type metadata accessor for AirQualityScale(0);
  v51 = *(_QWORD *)(v3 - 8);
  v52 = v3;
  sub_10009D98C();
  __chkstk_darwin(v4);
  sub_100098728();
  v7 = v6 - v5;
  v53 = type metadata accessor for AirQualityScaleCategory(0);
  v8 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  sub_100098728();
  v11 = v10 - v9;
  v12 = type metadata accessor for ProviderDataOrigination(0);
  v49 = *(_QWORD *)(v12 - 8);
  v50 = v12;
  sub_10009D98C();
  v14 = __chkstk_darwin(v13);
  v48 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v48 - v16;
  sub_1000BA294(&qword_100BD11F8);
  sub_10009D98C();
  __chkstk_darwin(v18);
  sub_100098728();
  v21 = v20 - v19;
  sub_1000BA294(&qword_100BE7C80);
  sub_10009D98C();
  __chkstk_darwin(v22);
  sub_100098728();
  v25 = v24 - v23;
  v26 = type metadata accessor for AirQuality(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  sub_100098728();
  v30 = v29 - v28;
  v54 = a1;
  sub_10067E72C(a1, v21);
  v31 = type metadata accessor for WeatherDataModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0(v21, 1, v31) == 1)
  {
    sub_100021A68(v21, &qword_100BD11F8);
    _s7Weather24LocationCompositionStateOwst_0(v25, 1, 1, v26);
LABEL_4:
    sub_100021A68(v54, &qword_100BD11F8);
    sub_100021A68(v25, &qword_100BE7C80);
    v33 = 1;
    v34 = v55;
LABEL_10:
    v47 = type metadata accessor for AQIData(0);
    return _s7Weather24LocationCompositionStateOwst_0(v34, v33, 1, v47);
  }
  WeatherDataModel.airQuality.getter(v32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v21, v31);
  if (_s7Weather24LocationCompositionStateOwet_0(v25, 1, v26) == 1)
    goto LABEL_4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v30, v25, v26);
  v35 = sub_10067E774((uint64_t)v17);
  result = AirQuality.index.getter(v35);
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_12;
  }
  v37 = result;
  if (result > 0x7FFFFFFF)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v38 = AirQuality.currentScaleCategory.getter(result);
  v39 = AirQualityScaleCategory.number.getter(v38);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v11, v53);
  if (v39 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v39 <= 0x7FFFFFFF)
  {
    v40 = AirQuality.scale.getter(result);
    v53 = AirQualityScale.displayName.getter(v40);
    v42 = v41;
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v7, v52);
    v43 = v48;
    v44 = v49;
    v45 = v50;
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v48, v17, v50);
    v46 = v37;
    v34 = v55;
    AQIData.init(index:category:scale:providerDataOrigination:)(v46, v39, v53, v42, v43);
    sub_100021A68(v54, &qword_100BD11F8);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v17, v45);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v30, v26);
    v33 = 0;
    goto LABEL_10;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_10067E72C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BD11F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10067E774@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  unsigned int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = type metadata accessor for AirQualitySourceKind(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AirQualitySource(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = AirQuality.source.getter(v8);
  AirQualitySource.kind.getter(v11);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v12 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v12 == enum case for AirQualitySourceKind.modeled(_:))
  {
    v13 = (unsigned int *)&enum case for ProviderDataOrigination.modeled(_:);
LABEL_5:
    v15 = *v13;
    v16 = type metadata accessor for ProviderDataOrigination(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(a1, v15, v16);
  }
  v14 = v12;
  if (v12 == enum case for AirQualitySourceKind.station(_:))
  {
    v13 = (unsigned int *)&enum case for ProviderDataOrigination.station(_:);
    goto LABEL_5;
  }
  v18 = enum case for AirQualitySourceKind.unknown(_:);
  v19 = enum case for ProviderDataOrigination.unknown(_:);
  v20 = type metadata accessor for ProviderDataOrigination(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(a1, v19, v20);
  if (v14 != v18)
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return result;
}

void sub_10067E90C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD v44[30];

  v44[19] = a1;
  sub_1000BA294(&qword_100BC3340);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100098728();
  v44[8] = type metadata accessor for EnvironmentState(0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100098728();
  type metadata accessor for PreviewLocation(0);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100088FDC();
  v44[1] = v6;
  type metadata accessor for LocationViewerActiveLocationState(0);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100098728();
  type metadata accessor for SavedLocation(0);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100088FDC();
  v44[3] = v9;
  sub_1000BA294(&qword_100BC5F60);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100088FDC();
  v44[11] = v11;
  sub_1000BA294(&qword_100BC5F88);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100088FDC();
  v44[12] = v13;
  sub_1000BA294(&qword_100BC5F90);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  sub_100088FDC();
  v44[13] = v15;
  sub_1000BA294(&qword_100BC5F98);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  sub_100088FDC();
  v44[14] = v17;
  sub_1000BA294(&qword_100BC5FA0);
  sub_1000B42B0();
  __chkstk_darwin(v18);
  sub_100088FDC();
  v44[16] = v19;
  sub_1000BA294(&qword_100BC5FA8);
  sub_1000B42B0();
  __chkstk_darwin(v20);
  sub_100088FDC();
  v44[17] = v21;
  sub_1000BA294(&qword_100BC5FB0);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  sub_100088FDC();
  v44[18] = v23;
  sub_1000BA294(&qword_100BC5F68);
  sub_1000B42B0();
  __chkstk_darwin(v24);
  sub_100088FDC();
  v44[4] = v25;
  sub_1000BA294(&qword_100BC5F70);
  sub_1000B42B0();
  __chkstk_darwin(v26);
  sub_100088FDC();
  v44[5] = v27;
  sub_1000BA294(&qword_100BC5F78);
  sub_1000B42B0();
  __chkstk_darwin(v28);
  sub_100098728();
  sub_1000BA294(&qword_100BC5F80);
  sub_1000B42B0();
  __chkstk_darwin(v29);
  sub_100088FDC();
  v44[6] = v30;
  v44[9] = type metadata accessor for ViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v31);
  __chkstk_darwin(v32);
  v44[7] = (char *)v44 - v33;
  __chkstk_darwin(v34);
  type metadata accessor for ActivityAction(0);
  sub_1000B42B0();
  __chkstk_darwin(v35);
  sub_100098728();
  v38 = v37 - v36;
  type metadata accessor for ModalViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v39);
  sub_100098728();
  v44[15] = v41 - v40;
  v44[10] = v42;
  swift_storeEnumTagMultiPayload(v41 - v40, v42, 6);
  sub_100080C0C(a2, v38, type metadata accessor for ActivityAction);
  v43 = (char *)sub_10067ECD4 + 4 * word_1009BD680[swift_getEnumCaseMultiPayload(v38)];
  __asm { BR              X10 }
}

uint64_t (*sub_10067ECD4())(uint64_t a1)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  sub_10007802C(v1, *(_QWORD *)(v3 - 296), (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
  if (qword_100BC24B0 != -1)
    swift_once(&qword_100BC24B0, sub_1006F391C);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_1000AECD4(v4, (uint64_t)qword_100CAF1F8);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v3 - 200);
  if (v8)
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "ActivityActionReducer handling location activity", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = sub_1000C0B30(OBJC_IVAR____TtCV7Weather9MainState8_Storage_view);
  sub_100080C0C(v11, v2, type metadata accessor for ViewState);
  SavedLocation.identifier.getter(v12);
  v13 = type metadata accessor for Location.Identifier(0);
  sub_100098974(v0, v14, v15, v13);
  v16 = type metadata accessor for LocationViewerViewState._Storage(0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  sub_100133204(v0, 0, 0, 2, 0, 0);
  v17 = *(_QWORD **)(v3 - 272);
  *v17 = v18;
  v19 = type metadata accessor for ViewState.SecondaryViewState(0);
  sub_1000CF964((uint64_t)v17);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v17, 0, 1, v19);
  v20 = type metadata accessor for SearchViewState(0);
  sub_1000B4C68(v20);
  sub_1000D0E2C();
  v25 = sub_100098F98(*(_QWORD *)(v21 - 256), v22, v23, v24);
  sub_10009D34C(*(_QWORD *)(v3 - 288), v26, v27, v25);
  v28 = *(_QWORD *)(v3 - 264);
  sub_100112494();
  sub_10004A2CC(v29, &qword_100BC5F68);
  sub_1000B3B00(v30, &qword_100BC5F70);
  sub_1000988A8(v31, &qword_100BC5F78);
  sub_100098898(v32, &qword_100BC5F80);
  sub_1000215BC(v2, type metadata accessor for ViewState);
  v33 = sub_1000C08E4();
  v34 = *(_QWORD *)(v3 - 176);
  sub_10009D34C(v34, v35, v36, v33);
  v37 = *(_QWORD *)(v3 - 184);
  v38 = sub_1000C4D74(v37, 1);
  v39 = *(_QWORD *)(v3 - 192);
  v42 = sub_1000B49D8(v39, v40, v41, v38);
  v43 = *(_QWORD *)(v3 - 208);
  v46 = sub_1000B4458(v43, v44, v45, v42);
  v47 = *(_QWORD *)(v3 - 216);
  sub_10009D34C(v47, v48, v49, v46);
  v50 = *(_QWORD *)(v3 - 224);
  sub_100080C0C(v28, v50, type metadata accessor for ViewState);
  sub_1000DBC88(v50, 0);
  v51 = *(_QWORD *)(v3 - 232);
  sub_100080C0C(v9, v51, type metadata accessor for ModalViewState);
  v52 = sub_10009D77C();
  _s7Weather24LocationCompositionStateOwst_0(v52, v53, v54, *(_QWORD *)(v3 - 240));
  sub_1000C3E7C();
  v55 = sub_100099B8C();
  sub_10009D358(v55, v56, v34, v37, v39, v57, v58, v59, v43, v47, v50, v51, v68, v69, v70, v71, v72, v73, v74, v75);
  sub_1000C6624();
  sub_1000992DC(v60, &qword_100BC5F60);
  sub_1000988B0(v61, &qword_100BC5F88);
  sub_1000988A0(v62, &qword_100BC5F90);
  sub_10004A2CC(v63, &qword_100BC5F98);
  sub_100098898(v64, &qword_100BC5FA0);
  sub_1000988A8(v65, &qword_100BC5FA8);
  sub_10009518C(v66, &qword_100BC5FB0);
  sub_1000215BC(v28, type metadata accessor for ViewState);
  sub_1000215BC(*(_QWORD *)(v3 - 296), (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
  sub_1000215BC(v9, type metadata accessor for ModalViewState);
  return type metadata accessor for ViewState;
}

uint64_t sub_10067FA40(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t active;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  _BOOL4 v57;
  uint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint8_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  NSObject *v133;
  os_log_type_t v134;
  _BOOL4 v135;
  uint64_t v136;
  uint64_t v137;
  uint8_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  NSObject *v145;
  os_log_type_t v146;
  _BOOL4 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint8_t *v152;
  uint64_t v153;
  uint64_t v154;
  _BYTE *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t (*v176)(uint64_t);
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char v190;
  __n128 v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  __n128 v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  id v203;
  id v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _BYTE *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  _BYTE *v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char v272[8];
  char v273[8];
  uint64_t v274;
  __int128 v275;
  __int128 v276;
  uint64_t v277;

  LODWORD(v249) = a2;
  v3 = sub_1000BA294(&qword_100BC61F0);
  __chkstk_darwin(v3);
  v243 = (uint64_t)&v237 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v242 = type metadata accessor for SavedLocation(0);
  __chkstk_darwin(v242);
  v238 = (uint64_t)&v237 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v252 = type metadata accessor for Location.Identifier(0);
  v241 = *(_QWORD *)(v252 - 8);
  __chkstk_darwin(v252);
  v240 = (char *)&v237 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ViewState.SecondaryViewState(0);
  __chkstk_darwin(v7);
  v246 = (uint64_t *)((char *)&v237 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_1000BA294(&qword_100BC5F60);
  __chkstk_darwin(v9);
  v259 = (uint64_t)&v237 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000BA294(&qword_100BC5F68);
  __chkstk_darwin(v11);
  v256 = (uint64_t)&v237 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000BA294(&qword_100BC5F70);
  __chkstk_darwin(v13);
  v257 = (uint64_t)&v237 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000BA294(&qword_100BC5F78);
  __chkstk_darwin(v15);
  v258 = (uint64_t)&v237 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  active = type metadata accessor for LocationViewerActiveLocationState(0);
  __chkstk_darwin(active);
  v239 = (uint64_t)&v237 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v248 = (uint64_t)&v237 - v20;
  __chkstk_darwin(v21);
  v264 = (uint64_t)&v237 - v22;
  v23 = sub_1000BA294(&qword_100BC5F80);
  __chkstk_darwin(v23);
  v255 = (uint64_t *)((char *)&v237 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v266 = type metadata accessor for ViewState(0);
  __chkstk_darwin(v266);
  v245 = (uint64_t)&v237 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v254 = (uint64_t)&v237 - v27;
  v28 = sub_1000BA294(&qword_100BC5F88);
  __chkstk_darwin(v28);
  v262 = (char *)&v237 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_1000BA294(&qword_100BC5F90);
  __chkstk_darwin(v30);
  v263 = (uint64_t)&v237 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_1000BA294(&qword_100BC5F98);
  __chkstk_darwin(v32);
  v270 = (uint64_t)&v237 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_1000BA294(&qword_100BC5FA0);
  __chkstk_darwin(v34);
  v36 = (char *)&v237 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_1000BA294(&qword_100BC3340);
  __chkstk_darwin(v37);
  v250 = (uint64_t)&v237 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v267 = type metadata accessor for EnvironmentState(0);
  __chkstk_darwin(v267);
  v251 = (uint64_t)&v237 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_1000BA294(&qword_100BC5FA8);
  __chkstk_darwin(v40);
  v261 = (char *)&v237 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_1000BA294(&qword_100BC5FB0);
  __chkstk_darwin(v42);
  v269 = (uint64_t)&v237 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_1000BA294((uint64_t *)&unk_100C0D170);
  __chkstk_darwin(v44);
  v244 = (uint64_t)&v237 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v265 = type metadata accessor for LocationsState(0);
  __chkstk_darwin(v265);
  v47 = (char *)&v237 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for CurrentLocation(0);
  __chkstk_darwin(v48);
  v247 = (uint64_t)&v237 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for ModalViewState(0);
  __chkstk_darwin(v50);
  v260 = (uint64_t)&v237 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v253 = v52;
  swift_storeEnumTagMultiPayload(v260, v52, 6);
  if (qword_100BC24B0 != -1)
    swift_once(&qword_100BC24B0, sub_1006F391C);
  v53 = type metadata accessor for Logger(0);
  sub_1000AECD4(v53, (uint64_t)qword_100CAF1F8);
  swift_retain();
  v55 = Logger.logObject.getter(v54);
  v56 = static os_log_type_t.default.getter(v55);
  v57 = os_log_type_enabled(v55, v56);
  v271 = a1;
  v268 = v36;
  if (v57)
  {
    v58 = v7;
    v59 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v59 = 67240192;
    v60 = v271 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment;
    swift_beginAccess(v271 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment, v272, 0, 0);
    LODWORD(v274) = *(unsigned __int8 *)(v60 + *(int *)(v267 + 48));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, (char *)&v274 + 4);
    swift_release(v271);
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "ActivityActionReducer handling current location activity; was pending = %{BOOL,public}d",
      v59,
      8u);
    v61 = v59;
    v7 = v58;
    a1 = v271;
    swift_slowDealloc(v61, -1, -1);

  }
  else
  {

    swift_release(a1);
  }
  v62 = a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment;
  swift_beginAccess(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment, v273, 0, 0);
  v63 = LocationAuthorizationState.rawValue.getter(*(_BYTE *)(v62 + 1));
  if (v63 == 0x7265746544746F6ELL && v64 == 0xED000064656E696DLL)
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  v66 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v64, 0x7265746544746F6ELL, 0xED000064656E696DLL, 0);
  swift_bridgeObjectRelease();
  if ((v66 & 1) != 0)
  {
LABEL_17:
    v103 = Logger.logObject.getter(v67);
    v104 = static os_log_type_t.default.getter(v103);
    if (os_log_type_enabled(v103, v104))
    {
      v105 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v105 = 0;
      _os_log_impl((void *)&_mh_execute_header, v103, v104, "ActivityActionReducer handling current location activity with undetermined authorization", v105, 2u);
      swift_slowDealloc(v105, -1, -1);
    }

    v106 = type metadata accessor for AppConfigurationState(0);
    _s7Weather24LocationCompositionStateOwst_0(v269, 1, 1, v106);
    v107 = v62;
    v108 = v251;
    sub_100080C0C(v107, v251, type metadata accessor for EnvironmentState);
    v109 = type metadata accessor for Locale(0);
    v110 = v250;
    _s7Weather24LocationCompositionStateOwst_0(v250, 1, 1, v109);
    v274 = 1;
    v275 = 0u;
    v276 = 0u;
    v277 = 0;
    v111 = v261;
    sub_1007686D0(2u, 5, 5, v110, 0, 0, 2, 2, v261, 2, v249 & 1, 0, 1, 2, 2, (uint64_t)&v274);
    sub_100021A14(v110, &qword_100BC3340);
    sub_1000215BC(v108, type metadata accessor for EnvironmentState);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v111, 0, 1, v267);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v268, 1, 1, v265);
    v112 = type metadata accessor for NotificationsOptInState(0);
    _s7Weather24LocationCompositionStateOwst_0(v270, 1, 1, v112);
    v113 = type metadata accessor for TimeState(0);
    v114 = v263;
    _s7Weather24LocationCompositionStateOwst_0(v263, 1, 1, v113);
    v115 = v271;
    v116 = v254;
    sub_100080C0C(v271 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, v254, type metadata accessor for ViewState);
    v117 = v264;
    _s7Weather24LocationCompositionStateOwst_0(v264, 1, 1, v252);
    v118 = type metadata accessor for LocationViewerViewState._Storage(0);
    swift_allocObject(v118, *(unsigned int *)(v118 + 48), *(unsigned __int16 *)(v118 + 52));
    sub_100133204(v117, 0, 0, 2, 0, 0);
    v119 = (uint64_t)v255;
    *v255 = v120;
    swift_storeEnumTagMultiPayload(v119, v7, 0);
    _s7Weather24LocationCompositionStateOwst_0(v119, 0, 1, v7);
    v121 = type metadata accessor for SearchViewState(0);
    v122 = v258;
    _s7Weather24LocationCompositionStateOwst_0(v258, 1, 1, v121);
    v123 = type metadata accessor for DisplayMetrics(0);
    v124 = v257;
    _s7Weather24LocationCompositionStateOwst_0(v257, 1, 1, v123);
    v125 = type metadata accessor for WeatherMapPresentationState(0);
    v126 = v256;
    _s7Weather24LocationCompositionStateOwst_0(v256, 1, 1, v125);
    v127 = (uint64_t)v262;
    sub_100112494();
    sub_100021A14(v126, &qword_100BC5F68);
    sub_100021A14(v124, &qword_100BC5F70);
    sub_100021A14(v122, &qword_100BC5F78);
    sub_100021A14(v119, &qword_100BC5F80);
    sub_1000215BC(v116, type metadata accessor for ViewState);
    _s7Weather24LocationCompositionStateOwst_0(v127, 0, 1, v266);
    v97 = v260;
    v128 = v259;
    sub_100080C0C(v260, v259, type metadata accessor for ModalViewState);
    _s7Weather24LocationCompositionStateOwst_0(v128, 0, 1, v253);
    v236 = v115;
    v129 = v270;
    v131 = (uint64_t)v268;
    v130 = v269;
    v101 = sub_1000DEBAC(0, 3, v269, (uint64_t)v111, (uint64_t)v268, 0, 0, 0, v270, v114, v127, v128, 0, 0, 0, 0, 0, 0, 0,
             v236);
    sub_100021A14(v128, &qword_100BC5F60);
    sub_100021A14(v127, &qword_100BC5F88);
    sub_100021A14(v114, &qword_100BC5F90);
    sub_100021A14(v129, &qword_100BC5F98);
    sub_100021A14(v131, &qword_100BC5FA0);
    sub_100021A14((uint64_t)v111, &qword_100BC5FA8);
    v102 = v130;
    goto LABEL_20;
  }
  if (*(unsigned __int8 *)(v62 + 1) - 1 > 1)
  {
    v133 = Logger.logObject.getter(v67);
    v134 = static os_log_type_t.default.getter(v133);
    v135 = os_log_type_enabled(v133, v134);
    v136 = v266;
    v137 = v252;
    if (v135)
    {
      v138 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v138 = 0;
      _os_log_impl((void *)&_mh_execute_header, v133, v134, "ActivityActionReducer handling current location activity without authorization", v138, 2u);
      swift_slowDealloc(v138, -1, -1);
    }

    v139 = v271;
    v140 = v271 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view;
    v141 = v245;
    sub_100080C0C(v271 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, v245, type metadata accessor for ViewState);
    v142 = v246;
    sub_100080C0C(v141 + *(int *)(v136 + 20), (uint64_t)v246, type metadata accessor for ViewState.SecondaryViewState);
    sub_1000215BC(v141, type metadata accessor for ViewState);
    if (swift_getEnumCaseMultiPayload(v142) == 1)
    {
      sub_1000215BC((uint64_t)v142, type metadata accessor for ViewState.SecondaryViewState);
      v143 = (uint64_t)v268;
    }
    else
    {
      v178 = *v142;
      v179 = *v142 + OBJC_IVAR____TtCV7Weather23LocationViewerViewState8_Storage_activeLocationState;
      v180 = v239;
      sub_100080C0C(v179, v239, type metadata accessor for LocationViewerActiveLocationState);
      v181 = _s7Weather24LocationCompositionStateOwet_0(v180, 1, v137);
      v143 = (uint64_t)v268;
      if (v181 == 1)
      {
        swift_release(v178);
        sub_1000215BC(v180, type metadata accessor for LocationViewerActiveLocationState);
      }
      else
      {
        v182 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v241 + 32))(v240, v180, v137);
        v183 = Location.Identifier.kind.getter(v182);
        v184 = Location.Identifier.Kind.rawValue.getter(v183 & 1);
        v186 = v185;
        v187 = Location.Identifier.Kind.rawValue.getter(1);
        if (v184 == v187 && v186 == v188)
        {
          swift_bridgeObjectRelease_n(v186, 2);
        }
        else
        {
          v190 = _stringCompareWithSmolCheck(_:_:expecting:)(v184, v186, v187, v188, 0);
          swift_bridgeObjectRelease();
          v191 = swift_bridgeObjectRelease();
          if ((v190 & 1) == 0)
          {
            v192 = v241;
            v193 = v248;
            v194 = v143;
            v195 = v240;
            (*(void (**)(uint64_t, char *, uint64_t, __n128))(v241 + 16))(v248, v240, v137, v191);
            _s7Weather24LocationCompositionStateOwst_0(v193, 0, 1, v137);
            v196 = type metadata accessor for ListViewState._Storage();
            swift_allocObject(v196, 90, 7);
            sub_100149094(0, 0, 1, 0, 0, 0xE000000000000000, 0, 0, 0, 0, 0, 1, 0);
            v249 = v197;
            v198 = swift_release(v178);
            v199 = v195;
            v143 = v194;
            (*(void (**)(char *, uint64_t, __n128))(v192 + 8))(v199, v137, v198);
            goto LABEL_44;
          }
        }
        (*(void (**)(char *, uint64_t, __n128))(v241 + 8))(v240, v137, v191);
        swift_release(v178);
      }
      v139 = v271;
    }
    v200 = v243;
    sub_1002F6FCC(*(_QWORD *)(v139 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations + *(int *)(v265 + 20)), v243);
    if (_s7Weather24LocationCompositionStateOwet_0(v200, 1, v242) == 1)
    {
      sub_100021A14(v200, &qword_100BC61F0);
      _s7Weather24LocationCompositionStateOwst_0(v248, 1, 1, v137);
      v201 = type metadata accessor for ListViewState._Storage();
      swift_allocObject(v201, 90, 7);
      LODWORD(v252) = 1;
      sub_100149094(0, 0, 1, 0, 0, 0xE000000000000000, 0, 0, 1, 0, 0, 1, 0);
      v249 = v202;
      v203 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
      v204 = objc_msgSend(v203, "userInterfaceIdiom");

      v205 = v251;
      v206 = v250;
      if (v204 == (id)1)
        goto LABEL_46;
      goto LABEL_45;
    }
    v207 = v238;
    sub_10007802C(v200, v238, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
    v208 = type metadata accessor for ListViewState._Storage();
    swift_allocObject(v208, 90, 7);
    sub_100149094(0, 0, 1, 0, 0, 0xE000000000000000, 0, 0, 0, 0, 0, 1, 0);
    v249 = v209;
    v210 = v264;
    SavedLocation.identifier.getter(v209);
    sub_1000215BC(v207, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
    _s7Weather24LocationCompositionStateOwst_0(v210, 0, 1, v137);
    sub_10007802C(v210, v248, type metadata accessor for LocationViewerActiveLocationState);
LABEL_44:
    v205 = v251;
    v206 = v250;
LABEL_45:
    LODWORD(v252) = *(unsigned __int8 *)(v140 + *(int *)(v136 + 44));
LABEL_46:
    v211 = type metadata accessor for AppConfigurationState(0);
    _s7Weather24LocationCompositionStateOwst_0(v269, 1, 1, v211);
    sub_100080C0C(v62, v205, type metadata accessor for EnvironmentState);
    v212 = type metadata accessor for Locale(0);
    _s7Weather24LocationCompositionStateOwst_0(v206, 1, 1, v212);
    v274 = 1;
    v275 = 0u;
    v276 = 0u;
    v277 = 0;
    v213 = v261;
    sub_1007686D0(2u, 5, 5, v206, 0, 0, 2, 2, v261, 2, 0, 0, 1, 2, 2, (uint64_t)&v274);
    sub_100021A14(v206, &qword_100BC3340);
    sub_1000215BC(v205, type metadata accessor for EnvironmentState);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v213, 0, 1, v267);
    _s7Weather24LocationCompositionStateOwst_0(v143, 1, 1, v265);
    v214 = type metadata accessor for NotificationsOptInState(0);
    _s7Weather24LocationCompositionStateOwst_0(v270, 1, 1, v214);
    v215 = type metadata accessor for TimeState(0);
    v216 = v263;
    _s7Weather24LocationCompositionStateOwst_0(v263, 1, 1, v215);
    v217 = v254;
    sub_100080C0C(v140, v254, type metadata accessor for ViewState);
    v218 = v264;
    sub_100080C0C(v248, v264, type metadata accessor for LocationViewerActiveLocationState);
    v219 = type metadata accessor for LocationViewerViewState._Storage(0);
    swift_allocObject(v219, *(unsigned int *)(v219 + 48), *(unsigned __int16 *)(v219 + 52));
    sub_100133204(v218, 0, 0, 2, 0, 0);
    v220 = (uint64_t)v255;
    *v255 = v221;
    swift_storeEnumTagMultiPayload(v220, v7, 0);
    _s7Weather24LocationCompositionStateOwst_0(v220, 0, 1, v7);
    v222 = type metadata accessor for SearchViewState(0);
    v223 = v258;
    _s7Weather24LocationCompositionStateOwst_0(v258, 1, 1, v222);
    v224 = type metadata accessor for DisplayMetrics(0);
    v225 = v257;
    _s7Weather24LocationCompositionStateOwst_0(v257, 1, 1, v224);
    v226 = type metadata accessor for WeatherMapPresentationState(0);
    v227 = v256;
    _s7Weather24LocationCompositionStateOwst_0(v256, 1, 1, v226);
    v228 = v249;
    swift_retain();
    v229 = (uint64_t)v262;
    sub_100112494();
    swift_release(v228);
    sub_100021A14(v227, &qword_100BC5F68);
    sub_100021A14(v225, &qword_100BC5F70);
    sub_100021A14(v223, &qword_100BC5F78);
    sub_100021A14(v220, &qword_100BC5F80);
    sub_1000215BC(v217, type metadata accessor for ViewState);
    _s7Weather24LocationCompositionStateOwst_0(v229, 0, 1, v266);
    v230 = v260;
    v231 = v259;
    sub_100080C0C(v260, v259, type metadata accessor for ModalViewState);
    _s7Weather24LocationCompositionStateOwst_0(v231, 0, 1, v253);
    v232 = v270;
    v234 = (uint64_t)v268;
    v233 = v269;
    v101 = sub_1000DEBAC(0, 3, v269, (uint64_t)v213, (uint64_t)v268, 0, 0, 0, v270, v216, v229, v231, 0, 0, 0, 0, 0, 0, 0,
             v271);
    swift_release(v228);
    sub_100021A14(v231, &qword_100BC5F60);
    sub_100021A14(v229, &qword_100BC5F88);
    sub_100021A14(v216, &qword_100BC5F90);
    sub_100021A14(v232, &qword_100BC5F98);
    sub_100021A14(v234, &qword_100BC5FA0);
    v235 = (uint64_t)v213;
    v97 = v230;
    sub_100021A14(v235, &qword_100BC5FA8);
    sub_100021A14(v233, &qword_100BC5FB0);
    v177 = v248;
    v176 = type metadata accessor for LocationViewerActiveLocationState;
LABEL_47:
    sub_1000215BC(v177, v176);
    goto LABEL_21;
  }
  sub_100080C0C(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations, (uint64_t)v47, type metadata accessor for LocationsState);
  v68 = v244;
  sub_10009C514((uint64_t)v47, v244);
  sub_1000215BC((uint64_t)v47, type metadata accessor for LocationsState);
  if (_s7Weather24LocationCompositionStateOwet_0(v68, 1, v48) != 1)
  {
    sub_10007802C(v68, v247, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
    v145 = Logger.logObject.getter(v144);
    v146 = static os_log_type_t.default.getter(v145);
    v147 = os_log_type_enabled(v145, v146);
    v148 = (uint64_t)v268;
    v149 = v252;
    v150 = v251;
    v151 = v250;
    if (v147)
    {
      v152 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v152 = 0;
      _os_log_impl((void *)&_mh_execute_header, v145, v146, "ActivityActionReducer handling current location activity with authorization and current location", v152, 2u);
      swift_slowDealloc(v152, -1, -1);
    }

    v153 = type metadata accessor for AppConfigurationState(0);
    _s7Weather24LocationCompositionStateOwst_0(v269, 1, 1, v153);
    sub_100080C0C(v62, v150, type metadata accessor for EnvironmentState);
    v154 = type metadata accessor for Locale(0);
    _s7Weather24LocationCompositionStateOwst_0(v151, 1, 1, v154);
    v274 = 1;
    v275 = 0u;
    v276 = 0u;
    v277 = 0;
    v155 = v261;
    sub_1007686D0(2u, 5, 5, v151, 0, 0, 2, 2, v261, 2, 0, 0, 1, 2, 2, (uint64_t)&v274);
    sub_100021A14(v151, &qword_100BC3340);
    sub_1000215BC(v150, type metadata accessor for EnvironmentState);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v155, 0, 1, v267);
    _s7Weather24LocationCompositionStateOwst_0(v148, 1, 1, v265);
    v156 = type metadata accessor for NotificationsOptInState(0);
    _s7Weather24LocationCompositionStateOwst_0(v270, 1, 1, v156);
    v157 = type metadata accessor for TimeState(0);
    v158 = v263;
    _s7Weather24LocationCompositionStateOwst_0(v263, 1, 1, v157);
    v159 = v254;
    sub_100080C0C(v271 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, v254, type metadata accessor for ViewState);
    v160 = v264;
    CurrentLocation.identifier.getter(v161);
    _s7Weather24LocationCompositionStateOwst_0(v160, 0, 1, v149);
    v162 = type metadata accessor for LocationViewerViewState._Storage(0);
    swift_allocObject(v162, *(unsigned int *)(v162 + 48), *(unsigned __int16 *)(v162 + 52));
    sub_100133204(v160, 0, 0, 2, 0, 0);
    v163 = (uint64_t)v255;
    *v255 = v164;
    swift_storeEnumTagMultiPayload(v163, v7, 0);
    _s7Weather24LocationCompositionStateOwst_0(v163, 0, 1, v7);
    v165 = type metadata accessor for SearchViewState(0);
    v166 = v258;
    _s7Weather24LocationCompositionStateOwst_0(v258, 1, 1, v165);
    v167 = type metadata accessor for DisplayMetrics(0);
    v168 = v257;
    _s7Weather24LocationCompositionStateOwst_0(v257, 1, 1, v167);
    v169 = type metadata accessor for WeatherMapPresentationState(0);
    v170 = v256;
    _s7Weather24LocationCompositionStateOwst_0(v256, 1, 1, v169);
    v171 = v148;
    v172 = (uint64_t)v262;
    sub_100112494();
    sub_100021A14(v170, &qword_100BC5F68);
    sub_100021A14(v168, &qword_100BC5F70);
    sub_100021A14(v166, &qword_100BC5F78);
    sub_100021A14(v163, &qword_100BC5F80);
    sub_1000215BC(v159, type metadata accessor for ViewState);
    _s7Weather24LocationCompositionStateOwst_0(v172, 0, 1, v266);
    v97 = v260;
    v173 = v259;
    sub_100080C0C(v260, v259, type metadata accessor for ModalViewState);
    _s7Weather24LocationCompositionStateOwst_0(v173, 0, 1, v253);
    v174 = v270;
    v175 = v269;
    v101 = sub_1000DEBAC(0, 3, v269, (uint64_t)v155, v171, 0, 0, 0, v270, v158, v172, v173, 0, 0, 0, 0, 0, 0, 0,
             v271);
    sub_100021A14(v173, &qword_100BC5F60);
    sub_100021A14(v172, &qword_100BC5F88);
    sub_100021A14(v158, &qword_100BC5F90);
    sub_100021A14(v174, &qword_100BC5F98);
    sub_100021A14(v171, &qword_100BC5FA0);
    sub_100021A14((uint64_t)v155, &qword_100BC5FA8);
    sub_100021A14(v175, &qword_100BC5FB0);
    v176 = (uint64_t (*)(uint64_t))&type metadata accessor for CurrentLocation;
    v177 = v247;
    goto LABEL_47;
  }
  sub_100021A14(v68, (uint64_t *)&unk_100C0D170);
  v70 = Logger.logObject.getter(v69);
  v71 = static os_log_type_t.default.getter(v70);
  v72 = os_log_type_enabled(v70, v71);
  v73 = (uint64_t)v268;
  v74 = v252;
  v75 = v251;
  v76 = v250;
  if (v72)
  {
    v77 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v77 = 0;
    _os_log_impl((void *)&_mh_execute_header, v70, v71, "ActivityActionReducer handling current location activity with authorization but no current location", v77, 2u);
    swift_slowDealloc(v77, -1, -1);
  }

  v78 = type metadata accessor for AppConfigurationState(0);
  _s7Weather24LocationCompositionStateOwst_0(v269, 1, 1, v78);
  sub_100080C0C(v62, v75, type metadata accessor for EnvironmentState);
  v79 = type metadata accessor for Locale(0);
  _s7Weather24LocationCompositionStateOwst_0(v76, 1, 1, v79);
  v274 = 1;
  v275 = 0u;
  v276 = 0u;
  v277 = 0;
  v80 = v261;
  sub_1007686D0(2u, 5, 5, v76, 0, 0, 2, 2, v261, 2, 0, 0, 1, 2, 2, (uint64_t)&v274);
  sub_100021A14(v76, &qword_100BC3340);
  sub_1000215BC(v75, type metadata accessor for EnvironmentState);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v80, 0, 1, v267);
  _s7Weather24LocationCompositionStateOwst_0(v73, 1, 1, v265);
  v81 = type metadata accessor for NotificationsOptInState(0);
  _s7Weather24LocationCompositionStateOwst_0(v270, 1, 1, v81);
  v82 = type metadata accessor for TimeState(0);
  v83 = v263;
  _s7Weather24LocationCompositionStateOwst_0(v263, 1, 1, v82);
  v84 = v254;
  sub_100080C0C(v271 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, v254, type metadata accessor for ViewState);
  v85 = v264;
  _s7Weather24LocationCompositionStateOwst_0(v264, 1, 1, v74);
  v86 = type metadata accessor for LocationViewerViewState._Storage(0);
  swift_allocObject(v86, *(unsigned int *)(v86 + 48), *(unsigned __int16 *)(v86 + 52));
  sub_100133204(v85, 0, 0, 2, 0, 0);
  v87 = (uint64_t)v255;
  *v255 = v88;
  swift_storeEnumTagMultiPayload(v87, v7, 0);
  _s7Weather24LocationCompositionStateOwst_0(v87, 0, 1, v7);
  v89 = type metadata accessor for SearchViewState(0);
  v90 = v258;
  _s7Weather24LocationCompositionStateOwst_0(v258, 1, 1, v89);
  v91 = type metadata accessor for DisplayMetrics(0);
  v92 = v257;
  _s7Weather24LocationCompositionStateOwst_0(v257, 1, 1, v91);
  v93 = type metadata accessor for WeatherMapPresentationState(0);
  v94 = v256;
  _s7Weather24LocationCompositionStateOwst_0(v256, 1, 1, v93);
  v95 = v73;
  v96 = (uint64_t)v262;
  sub_100112494();
  sub_100021A14(v94, &qword_100BC5F68);
  sub_100021A14(v92, &qword_100BC5F70);
  sub_100021A14(v90, &qword_100BC5F78);
  sub_100021A14(v87, &qword_100BC5F80);
  sub_1000215BC(v84, type metadata accessor for ViewState);
  _s7Weather24LocationCompositionStateOwst_0(v96, 0, 1, v266);
  v97 = v260;
  v98 = v259;
  sub_100080C0C(v260, v259, type metadata accessor for ModalViewState);
  _s7Weather24LocationCompositionStateOwst_0(v98, 0, 1, v253);
  v99 = v270;
  v100 = v269;
  v101 = sub_1000DEBAC(0, 3, v269, (uint64_t)v80, v95, 0, 0, 0, v270, v83, v96, v98, 0, 0, 0, 0, 0, 0, 0,
           v271);
  sub_100021A14(v98, &qword_100BC5F60);
  sub_100021A14(v96, &qword_100BC5F88);
  sub_100021A14(v83, &qword_100BC5F90);
  sub_100021A14(v99, &qword_100BC5F98);
  sub_100021A14(v95, &qword_100BC5FA0);
  sub_100021A14((uint64_t)v80, &qword_100BC5FA8);
  v102 = v100;
LABEL_20:
  sub_100021A14(v102, &qword_100BC5FB0);
LABEL_21:
  sub_1000215BC(v97, type metadata accessor for ModalViewState);
  return v101;
}

ValueMetadata *type metadata accessor for ContentStatusBannerState()
{
  return &type metadata for ContentStatusBannerState;
}

uint64_t sub_1006819F4(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000014 && a2 == 0x80000001009F3130)
  {
    swift_bridgeObjectRelease(0x80000001009F3130);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001009F3130, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

unint64_t sub_100681A78()
{
  return 0xD000000000000014;
}

uint64_t sub_100681A94(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  sub_1000BA294(&qword_100BFC0C8);
  sub_1000BA514();
  __chkstk_darwin(v5);
  sub_100094EC4();
  v6 = a1[3];
  v7 = a1[4];
  sub_1000DB418(a1, v6);
  v8 = sub_100681D7C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ContentStatusBannerState.CodingKeys, &type metadata for ContentStatusBannerState.CodingKeys, v8, v6, v7);
  v12 = a2;
  v9 = sub_1000BA294(&qword_100BFC0B0);
  sub_100681E34();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v12, v10, v2, v9);
  return sub_1000BA528();
}

_QWORD *sub_100681B70(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;

  sub_1000BA294(&qword_100BFC0A0);
  sub_1000BA514();
  __chkstk_darwin(v4);
  sub_100094EC4();
  v5 = a1[3];
  v6 = a1[4];
  v7 = sub_1000DB418(a1, v5);
  v8 = sub_100681D7C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ContentStatusBannerState.CodingKeys, &type metadata for ContentStatusBannerState.CodingKeys, v8, v5, v6);
  if (v1)
  {
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  }
  else
  {
    v9 = sub_1000BA294(&qword_100BFC0B0);
    sub_100681DB8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v9, v10, v2);
    sub_1000BA528();
    v7 = v12;
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  }
  return v7;
}

uint64_t sub_100681C78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1006819F4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100681CA0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100681D7C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100681CC8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100681D7C();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_100681CF0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_100681B70(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_100681D18(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100681A94(a1, *v1);
}

void sub_100681D30(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  sub_1006B3C9C();
  if (!v1)
    *a1 = v3;
}

void sub_100681D58()
{
  sub_1006B3D3C();
}

uint64_t sub_100681D70(_QWORD *a1, _QWORD *a2)
{
  return sub_1006819F0(*a1, *a2);
}

unint64_t sub_100681D7C()
{
  unint64_t result;

  result = qword_100BFC0A8;
  if (!qword_100BFC0A8)
  {
    result = swift_getWitnessTable(&unk_1009BD948, &type metadata for ContentStatusBannerState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFC0A8);
  }
  return result;
}

unint64_t sub_100681DB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFC0B8;
  if (!qword_100BFC0B8)
  {
    v1 = sub_100075EB0(&qword_100BFC0B0);
    sub_10062E1C0();
    sub_100681EB0(&qword_100BFC0C0, (uint64_t)&unk_1009B8C20);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100BFC0B8);
  }
  return result;
}

unint64_t sub_100681E34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFC0D0;
  if (!qword_100BFC0D0)
  {
    v1 = sub_100075EB0(&qword_100BFC0B0);
    sub_10062E238();
    sub_100681EB0(&qword_100BFC0D8, (uint64_t)&unk_1009B8BF8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100BFC0D0);
  }
  return result;
}

uint64_t sub_100681EB0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for ContentStatusBanner(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ContentStatusBannerState.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100681F30 + 4 * asc_1009BD790[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100681F50 + 4 * byte_1009BD795[v4]))();
}

_BYTE *sub_100681F30(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100681F50(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100681F58(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100681F60(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100681F68(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100681F70(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ContentStatusBannerState.CodingKeys()
{
  return &type metadata for ContentStatusBannerState.CodingKeys;
}

unint64_t sub_100681F90()
{
  unint64_t result;

  result = qword_100BFC0E0;
  if (!qword_100BFC0E0)
  {
    result = swift_getWitnessTable(&unk_1009BD920, &type metadata for ContentStatusBannerState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFC0E0);
  }
  return result;
}

unint64_t sub_100681FD0()
{
  unint64_t result;

  result = qword_100BFC0E8;
  if (!qword_100BFC0E8)
  {
    result = swift_getWitnessTable(&unk_1009BD890, &type metadata for ContentStatusBannerState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFC0E8);
  }
  return result;
}

unint64_t sub_100682010()
{
  unint64_t result;

  result = qword_100BFC0F0;
  if (!qword_100BFC0F0)
  {
    result = swift_getWitnessTable(&unk_1009BD8B8, &type metadata for ContentStatusBannerState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFC0F0);
  }
  return result;
}

uint64_t sub_10068204C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[15];
  BOOL v13;

  v0 = type metadata accessor for Access(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v12[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Domain(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v9 = objc_msgSend(v8, "userInterfaceIdiom");

  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Domain.standard(_:), v4);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for Access.public(_:), v0);
  v13 = v9 == (id)1;
  v10 = sub_1000BA294(&qword_100BD0228);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  result = Setting.init(_:defaultValue:domain:access:)(0xD000000000000024, 0x8000000100A0EF10, &v13, v7, v3);
  qword_100CAEEC8 = result;
  return result;
}

uint64_t *sub_1006821C0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t, __n128);
  __n128 v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    v10 = *(int *)(a3 + 28);
    v11 = (uint64_t *)((char *)a1 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    a1[4] = a2[4];
    a1[5] = v9;
    v13 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v13))
    {
      v14 = sub_1000BA294(&qword_100BC3360);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v16 = v12[1];
      *v11 = *v12;
      v11[1] = v16;
      v17 = *(int *)(v13 + 20);
      v18 = (char *)v11 + v17;
      v19 = (char *)v12 + v17;
      v20 = type metadata accessor for TemperatureScaleConfiguration(0);
      v21 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v20 - 8) + 16);
      v22 = swift_bridgeObjectRetain();
      v21(v18, v19, v20, v22);
      v23 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
      *(_QWORD *)&v18[v23[5]] = *(_QWORD *)&v19[v23[5]];
      *(_QWORD *)&v18[v23[6]] = *(_QWORD *)&v19[v23[6]];
      *(_QWORD *)&v18[v23[7]] = *(_QWORD *)&v19[v23[7]];
      v24 = v23[8];
      v25 = &v18[v24];
      v26 = &v19[v24];
      v28 = *(_QWORD *)v26;
      v27 = *((_QWORD *)v26 + 1);
      *(_QWORD *)v25 = v28;
      *((_QWORD *)v25 + 1) = v27;
      v18[v23[9]] = v19[v23[9]];
      swift_bridgeObjectRetain();
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v13);
    }
    v29 = *(int *)(a3 + 32);
    v30 = (uint64_t *)((char *)v4 + v29);
    v31 = (uint64_t *)((char *)a2 + v29);
    v32 = v31[1];
    *v30 = *v31;
    v30[1] = v32;
    swift_bridgeObjectRetain();
  }
  return v4;
}

double sub_100682374(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v4, 1, v5))
  {
    swift_bridgeObjectRelease();
    v6 = v4 + *(int *)(v5 + 20);
    v7 = type metadata accessor for TemperatureScaleConfiguration(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
    type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

_QWORD *sub_10068242C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t, __n128);
  __n128 v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  v9 = *(int *)(a3 + 28);
  v10 = (_QWORD *)((char *)a1 + v9);
  v11 = (_QWORD *)((char *)a2 + v9);
  a1[4] = a2[4];
  a1[5] = v8;
  v12 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12))
  {
    v13 = sub_1000BA294(&qword_100BC3360);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = v11[1];
    *v10 = *v11;
    v10[1] = v14;
    v15 = *(int *)(v12 + 20);
    v16 = (char *)v10 + v15;
    v17 = (char *)v11 + v15;
    v18 = type metadata accessor for TemperatureScaleConfiguration(0);
    v19 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v18 - 8) + 16);
    v20 = swift_bridgeObjectRetain();
    v19(v16, v17, v18, v20);
    v21 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
    *(_QWORD *)&v16[v21[5]] = *(_QWORD *)&v17[v21[5]];
    *(_QWORD *)&v16[v21[6]] = *(_QWORD *)&v17[v21[6]];
    *(_QWORD *)&v16[v21[7]] = *(_QWORD *)&v17[v21[7]];
    v22 = v21[8];
    v23 = &v16[v22];
    v24 = &v17[v22];
    v26 = *(_QWORD *)v24;
    v25 = *((_QWORD *)v24 + 1);
    *(_QWORD *)v23 = v26;
    *((_QWORD *)v23 + 1) = v25;
    v16[v21[9]] = v17[v21[9]];
    swift_bridgeObjectRetain();
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
  }
  v27 = *(int *)(a3 + 32);
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_1006825B4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t, __n128);
  __n128 v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  char *v33;
  char *v34;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
  v10 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v9);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9);
  if (!v10)
  {
    if (!v11)
    {
      *v7 = *v8;
      v7[1] = v8[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v27 = *(int *)(v9 + 20);
      v28 = (char *)v7 + v27;
      v29 = (char *)v8 + v27;
      v30 = type metadata accessor for TemperatureScaleConfiguration(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
      v31 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
      *(_QWORD *)&v28[v31[5]] = *(_QWORD *)&v29[v31[5]];
      *(_QWORD *)&v28[v31[6]] = *(_QWORD *)&v29[v31[6]];
      *(_QWORD *)&v28[v31[7]] = *(_QWORD *)&v29[v31[7]];
      v32 = v31[8];
      v33 = &v28[v32];
      v34 = &v29[v32];
      *(_QWORD *)v33 = *(_QWORD *)v34;
      *((_QWORD *)v33 + 1) = *((_QWORD *)v34 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v28[v31[9]] = v29[v31[9]];
      goto LABEL_7;
    }
    sub_1000215BC((uint64_t)v7, type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    v22 = sub_1000BA294(&qword_100BC3360);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  *v7 = *v8;
  v7[1] = v8[1];
  v12 = *(int *)(v9 + 20);
  v13 = (char *)v7 + v12;
  v14 = (char *)v8 + v12;
  v15 = type metadata accessor for TemperatureScaleConfiguration(0);
  v16 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v15 - 8) + 16);
  v17 = swift_bridgeObjectRetain();
  v16(v13, v14, v15, v17);
  v18 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
  *(_QWORD *)&v13[v18[5]] = *(_QWORD *)&v14[v18[5]];
  *(_QWORD *)&v13[v18[6]] = *(_QWORD *)&v14[v18[6]];
  *(_QWORD *)&v13[v18[7]] = *(_QWORD *)&v14[v18[7]];
  v19 = v18[8];
  v20 = &v13[v19];
  v21 = &v14[v19];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *((_QWORD *)v20 + 1) = *((_QWORD *)v21 + 1);
  v13[v18[9]] = v14[v18[9]];
  swift_bridgeObjectRetain();
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v9);
LABEL_7:
  v23 = *(int *)(a3 + 32);
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  *v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_100682874(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int *v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = *(int *)(a3 + 28);
  v8 = (_OWORD *)((char *)a1 + v7);
  v9 = (_OWORD *)((char *)a2 + v7);
  v10 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10))
  {
    v11 = sub_1000BA294(&qword_100BC3360);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    *v8 = *v9;
    v12 = *(int *)(v10 + 20);
    v13 = (char *)v8 + v12;
    v14 = (char *)v9 + v12;
    v15 = type metadata accessor for TemperatureScaleConfiguration(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
    v16 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
    *(_QWORD *)&v13[v16[5]] = *(_QWORD *)&v14[v16[5]];
    *(_QWORD *)&v13[v16[6]] = *(_QWORD *)&v14[v16[6]];
    *(_QWORD *)&v13[v16[7]] = *(_QWORD *)&v14[v16[7]];
    *(_OWORD *)&v13[v16[8]] = *(_OWORD *)&v14[v16[8]];
    v13[v16[9]] = v14[v16[9]];
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 32)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 32));
  return a1;
}

_QWORD *sub_1006829AC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 28);
  v10 = (_QWORD *)((char *)a1 + v9);
  v11 = (_QWORD *)((char *)a2 + v9);
  v12 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
  v13 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v12);
  v14 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12);
  if (!v13)
  {
    if (!v14)
    {
      v27 = v11[1];
      *v10 = *v11;
      v10[1] = v27;
      swift_bridgeObjectRelease();
      v28 = *(int *)(v12 + 20);
      v29 = (char *)v10 + v28;
      v30 = (char *)v11 + v28;
      v31 = type metadata accessor for TemperatureScaleConfiguration(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 40))(v29, v30, v31);
      v32 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
      *(_QWORD *)&v29[v32[5]] = *(_QWORD *)&v30[v32[5]];
      *(_QWORD *)&v29[v32[6]] = *(_QWORD *)&v30[v32[6]];
      *(_QWORD *)&v29[v32[7]] = *(_QWORD *)&v30[v32[7]];
      v33 = v32[8];
      v34 = &v29[v33];
      v35 = &v30[v33];
      v37 = *(_QWORD *)v35;
      v36 = *((_QWORD *)v35 + 1);
      *(_QWORD *)v34 = v37;
      *((_QWORD *)v34 + 1) = v36;
      swift_bridgeObjectRelease();
      v29[v32[9]] = v30[v32[9]];
      goto LABEL_7;
    }
    sub_1000215BC((uint64_t)v10, type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v20 = sub_1000BA294(&qword_100BC3360);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)v10 = *(_OWORD *)v11;
  v15 = *(int *)(v12 + 20);
  v16 = (char *)v10 + v15;
  v17 = (char *)v11 + v15;
  v18 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
  *(_QWORD *)&v16[v19[5]] = *(_QWORD *)&v17[v19[5]];
  *(_QWORD *)&v16[v19[6]] = *(_QWORD *)&v17[v19[6]];
  *(_QWORD *)&v16[v19[7]] = *(_QWORD *)&v17[v19[7]];
  *(_OWORD *)&v16[v19[8]] = *(_OWORD *)&v17[v19[8]];
  v16[v19[9]] = v17[v19[9]];
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
LABEL_7:
  v21 = *(int *)(a3 + 32);
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  v25 = *v23;
  v24 = v23[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100682BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100682BE4);
}

uint64_t sub_100682BE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000BA294(&qword_100BC3360);
    return _s7Weather24LocationCompositionStateOwet_0(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_100682C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100682C68);
}

uint64_t sub_100682C68(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1000BA294(&qword_100BC3360);
    return _s7Weather24LocationCompositionStateOwst_0(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for FeelsLikeComponentPreprocessedDataModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100BFC150;
  if (!qword_100BFC150)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FeelsLikeComponentPreprocessedDataModel);
  return result;
}

void sub_100682D10(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_1009BDA08;
  v4[1] = &unk_1009BDA08;
  v4[2] = &unk_1009BDA20;
  sub_1002E6E98(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = &unk_1009BDA08;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

uint64_t sub_100682D90(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v54;

  type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100094EC4();
  v6 = sub_1000BA294(&qword_100BD5C20);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100098728();
  v10 = v9 - v8;
  sub_1000BA294(&qword_100BC3360);
  sub_1000B42B0();
  v12 = __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v54 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v54 - v18;
  v20 = a1[1];
  v21 = a2[1];
  v22 = *a1 == *a2 && v20 == v21;
  if (v22 || (v23 = sub_100099264(*a1, v20, *a2, v21), v24 = 0, (v23 & 1) != 0))
  {
    v25 = a1[2];
    v26 = a1[3];
    v27 = a2[2];
    v28 = a2[3];
    v29 = v25 == v27 && v26 == v28;
    if (v29 || (v30 = sub_100099264(v25, v26, v27, v28), v24 = 0, (v30 & 1) != 0))
    {
      v31 = a1[5];
      v32 = a2[5];
      if (v31)
      {
        if (!v32)
          goto LABEL_30;
        v33 = a1[4];
        v34 = a2[4];
        if (v33 != v34 || v31 != v32)
        {
          v36 = sub_100099264(v33, v31, v34, v32);
          v24 = 0;
          if ((v36 & 1) == 0)
            return v24 & 1;
        }
      }
      else if (v32)
      {
        goto LABEL_30;
      }
      v37 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
      sub_1002E8B2C((uint64_t)a1 + *(int *)(v37 + 28), (uint64_t)v19);
      sub_1002E8B2C((uint64_t)a2 + *(int *)(v37 + 28), (uint64_t)v17);
      v38 = v10 + *(int *)(v6 + 48);
      sub_1002E8B2C((uint64_t)v19, v10);
      sub_1002E8B2C((uint64_t)v17, v38);
      sub_1000B4744(v10);
      if (v22)
      {
        sub_100021A14((uint64_t)v17, &qword_100BC3360);
        sub_100021A14((uint64_t)v19, &qword_100BC3360);
        sub_1000B4744(v38);
        if (v22)
        {
          sub_100021A14(v10, &qword_100BC3360);
LABEL_38:
          v48 = *(int *)(v37 + 32);
          v49 = *(uint64_t *)((char *)a1 + v48);
          v50 = *(uint64_t *)((char *)a1 + v48 + 8);
          v51 = (uint64_t *)((char *)a2 + v48);
          v52 = v51[1];
          if (v49 == *v51 && v50 == v52)
            v24 = 1;
          else
            v24 = sub_100099264(v49, v50, *v51, v52);
          return v24 & 1;
        }
      }
      else
      {
        sub_1002E8B2C(v10, (uint64_t)v14);
        sub_1000B4744(v38);
        if (!v39)
        {
          sub_10022DE08(v38, (uint64_t)v2);
          v43 = v14[1];
          v44 = v2[1];
          v45 = *v14 == *v2 && v43 == v44;
          if (v45 || (sub_100099264(*v14, v43, *v2, v44) & 1) != 0)
          {
            sub_1002E7940();
            v47 = v46;
            sub_1000215BC((uint64_t)v2, type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference);
            sub_1000B3B4C((uint64_t)v17);
            sub_1000B3B4C((uint64_t)v19);
            sub_1000215BC((uint64_t)v14, type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference);
            sub_1000B3B4C(v10);
            if ((v47 & 1) != 0)
              goto LABEL_38;
LABEL_30:
            v24 = 0;
            return v24 & 1;
          }
          sub_1000215BC((uint64_t)v2, type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference);
          sub_100021A14((uint64_t)v17, &qword_100BC3360);
          sub_100021A14((uint64_t)v19, &qword_100BC3360);
          sub_1000215BC((uint64_t)v14, type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference);
          v41 = v10;
          v40 = &qword_100BC3360;
LABEL_29:
          sub_100021A14(v41, v40);
          goto LABEL_30;
        }
        sub_100021A14((uint64_t)v17, &qword_100BC3360);
        sub_100021A14((uint64_t)v19, &qword_100BC3360);
        sub_1000215BC((uint64_t)v14, type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference);
      }
      v40 = &qword_100BD5C20;
      v41 = v10;
      goto LABEL_29;
    }
  }
  return v24 & 1;
}

uint64_t sub_100683100(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  char v13;

  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x74617265706D6574 && a2 == 0xEB00000000657275)
  {
    v8 = 0xEB00000000657275;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74617265706D6574, 0xEB00000000657275, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x74617265706D6574 && a2 == 0xEF74696E55657275)
  {
    v10 = 0xEF74696E55657275;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74617265706D6574, 0xEF74696E55657275, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0xD00000000000001ALL)
  {
    v11 = 0x8000000100A0EF40;
    if (a2 == 0x8000000100A0EF40)
      goto LABEL_29;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x8000000100A0EF40, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_29:
    swift_bridgeObjectRelease(v11);
    return 3;
  }
  if (a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69)
  {
    swift_bridgeObjectRelease(0xEB000000006E6F69);
    return 4;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7470697263736564, 0xEB000000006E6F69, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_10068334C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10068337C + 4 * byte_1009BD9A0[a1]))(0x656C746974, 0xE500000000000000);
}

uint64_t sub_10068337C()
{
  return 0x74617265706D6574;
}

unint64_t sub_1006833B0()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1006833CC()
{
  return 0x7470697263736564;
}

uint64_t sub_1006833EC(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;

  v3 = v1;
  v5 = sub_1000BA294(&qword_100BFC1B0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100098728();
  v9 = v8 - v7;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_10068392C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FeelsLikeComponentPreprocessedDataModel.CodingKeys, &type metadata for FeelsLikeComponentPreprocessedDataModel.CodingKeys, v12, v10, v11);
  v13 = *v3;
  v14 = v3[1];
  v31 = 0;
  sub_1000BC254(v13, v14, (uint64_t)&v31);
  if (!v2)
  {
    v15 = v3[2];
    v16 = v3[3];
    v30 = 1;
    sub_1000BC254(v15, v16, (uint64_t)&v30);
    v17 = v3[4];
    v18 = v3[5];
    v29 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v29, v5);
    v19 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
    v20 = (char *)v3 + *(int *)(v19 + 28);
    v28 = 3;
    v21 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
    sub_1006839F4(&qword_100BFC1B8, (uint64_t)&unk_1009934E8);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20, &v28, v5, v21, v22);
    v23 = (uint64_t *)((char *)v3 + *(int *)(v19 + 32));
    v24 = *v23;
    v25 = v23[1];
    v27 = 4;
    sub_1000BC254(v24, v25, (uint64_t)&v27);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

void sub_100683590(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;

  sub_1000BA294(&qword_100BC3360);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100098728();
  v24 = v5 - v4;
  v25 = sub_1000BA294(&qword_100BFC198);
  __chkstk_darwin(v25);
  sub_100094EC4();
  v6 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100098728();
  v10 = (uint64_t *)(v9 - v8);
  v12 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v12);
  v13 = sub_10068392C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FeelsLikeComponentPreprocessedDataModel.CodingKeys, &type metadata for FeelsLikeComponentPreprocessedDataModel.CodingKeys, v13, v12, v11);
  if (v26)
  {
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  }
  else
  {
    v31 = 0;
    v14 = (uint64_t)v10;
    *v10 = sub_1000C61D4((uint64_t)&v31, v25);
    v10[1] = v15;
    v30 = 1;
    v10[2] = sub_1000C61D4((uint64_t)&v30, v25);
    v10[3] = v16;
    v29 = 2;
    v10[4] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v29, v25);
    v10[5] = v17;
    v18 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
    v28 = 3;
    sub_1006839F4(&qword_100BFC1A8, (uint64_t)&unk_100993510);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v18, &v28, v25, v18);
    sub_100683968(v24, (uint64_t)v10 + *(int *)(v6 + 28));
    v27 = 4;
    v19 = sub_1000C61D4((uint64_t)&v27, v25);
    v21 = v20;
    sub_1000BB318();
    v22 = (uint64_t *)(v14 + *(int *)(v6 + 32));
    *v22 = v19;
    v22[1] = v21;
    sub_1006839B0(v14, a2);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(0);
    sub_1000215BC(v14, type metadata accessor for FeelsLikeComponentPreprocessedDataModel);
  }
}

uint64_t sub_100683884()
{
  unsigned __int8 *v0;

  return sub_10068334C(*v0);
}

uint64_t sub_10068388C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100683100(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006838B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10068392C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006838D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10068392C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100683900(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100683590(a1, a2);
}

uint64_t sub_100683914(_QWORD *a1)
{
  return sub_1006833EC(a1);
}

unint64_t sub_10068392C()
{
  unint64_t result;

  result = qword_100BFC1A0;
  if (!qword_100BFC1A0)
  {
    result = swift_getWitnessTable(&unk_1009BDB74, &type metadata for FeelsLikeComponentPreprocessedDataModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFC1A0);
  }
  return result;
}

uint64_t sub_100683968(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BC3360);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1006839B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1006839F4(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(255);
    atomic_store(swift_getWitnessTable(a2, v4), a1);
  }
  sub_10004A298();
}

uint64_t storeEnumTagSinglePayload for FeelsLikeComponentPreprocessedDataModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100683A7C + 4 * byte_1009BD9AA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100683AB0 + 4 * byte_1009BD9A5[v4]))();
}

uint64_t sub_100683AB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100683AB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100683AC0);
  return result;
}

uint64_t sub_100683ACC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100683AD4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100683AD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100683AE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FeelsLikeComponentPreprocessedDataModel.CodingKeys()
{
  return &type metadata for FeelsLikeComponentPreprocessedDataModel.CodingKeys;
}

unint64_t sub_100683B00()
{
  unint64_t result;

  result = qword_100BFC1C0;
  if (!qword_100BFC1C0)
  {
    result = swift_getWitnessTable(&unk_1009BDB4C, &type metadata for FeelsLikeComponentPreprocessedDataModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFC1C0);
  }
  return result;
}

unint64_t sub_100683B40()
{
  unint64_t result;

  result = qword_100BFC1C8;
  if (!qword_100BFC1C8)
  {
    result = swift_getWitnessTable(&unk_1009BDABC, &type metadata for FeelsLikeComponentPreprocessedDataModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFC1C8);
  }
  return result;
}

unint64_t sub_100683B80()
{
  unint64_t result;

  result = qword_100BFC1D0;
  if (!qword_100BFC1D0)
  {
    result = swift_getWitnessTable(&unk_1009BDAE4, &type metadata for FeelsLikeComponentPreprocessedDataModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BFC1D0);
  }
  return result;
}

uint64_t sub_100683BBC(uint64_t a1)
{
  return sub_1000BB1D8(a1, 35, 0x8000000100A0F230, &qword_100CAEED0);
}

uint64_t sub_100683BDC(uint64_t a1)
{
  return sub_1000BB1D8(a1, 34, 0x8000000100A0F200, &qword_100CAEED8);
}

uint64_t sub_100683BFC(uint64_t a1)
{
  return sub_1000BB1D8(a1, 33, 0x8000000100A0F1D0, &qword_100CAEEE0);
}

uint64_t sub_100683C1C(uint64_t a1)
{
  return sub_1000BB1D8(a1, 29, 0x8000000100A0F1B0, &qword_100CAEEE8);
}

uint64_t sub_100683C3C(uint64_t a1)
{
  return sub_1000BB1D8(a1, 38, 0x8000000100A0F180, &qword_100CAEEF0);
}

uint64_t sub_100683C5C(uint64_t a1)
{
  return sub_1000BB1D8(a1, 37, 0x8000000100A0F150, &qword_100CAEEF8);
}

uint64_t sub_100683C7C(uint64_t a1)
{
  return sub_1000BB1D8(a1, 33, 0x8000000100A0F120, &qword_100CAEF00);
}

uint64_t sub_100683C9C(uint64_t a1)
{
  return sub_1000BB1D8(a1, 24, 0x8000000100A0F100, &qword_100CAEF08);
}

uint64_t sub_100683CBC(uint64_t a1)
{
  return sub_1000BB1D8(a1, 39, 0x8000000100A0F0A0, &qword_100CAEF10);
}

uint64_t sub_100683CDC(uint64_t a1)
{
  return sub_1000BB1D8(a1, 36, 0x8000000100A0F0D0, &qword_100CAEF18);
}

uint64_t sub_100683CFC(uint64_t a1)
{
  return sub_1000BB1D8(a1, 35, 0x8000000100A0F070, &qword_100CAEF20);
}

uint64_t sub_100683D1C(uint64_t a1)
{
  return sub_1000BB1D8(a1, 23, 0x8000000100A0F050, &qword_100CAEF28);
}

uint64_t sub_100683D3C(uint64_t a1)
{
  return sub_1000BB1D8(a1, 33, 0x8000000100A0F020, &qword_100CAEF30);
}

uint64_t sub_100683D5C(uint64_t a1)
{
  return sub_1000BB1D8(a1, 35, 0x8000000100A0EFF0, &qword_100CAEF38);
}

uint64_t sub_100683D7C(uint64_t a1)
{
  return sub_1000BB1D8(a1, 29, 0x8000000100A0EFD0, &qword_100CAEF40);
}

uint64_t sub_100683D9C()
{
  return _s4NewsV18PlaceholderContentCMa(0);
}

uint64_t sub_100683DA4(uint64_t a1)
{
  return sub_1000BB1D8(a1, 36, 0x8000000100A0EFA0, &qword_100CAEF50);
}

void sub_100683DC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000B466C();
  sub_1000DDDEC();
  __chkstk_darwin(v1);
  sub_1000BCED8();
  v2 = sub_1000BA294(&qword_100BD0220);
  v4 = 0;
  v5 = 0;
  v3 = 10;
  sub_1000C2E0C(v2, enum case for Access.protected(_:));
  qword_100CAEF58 = Setting<>.init(_:defaultValue:min:max:access:)(0xD000000000000022, 0x8000000100A0F260, &v5, &v4, &v3, v0, &protocol witness table for Int);
  sub_100079F70();
}

uint64_t sub_100683E68(uint64_t a1)
{
  return sub_1000BB1D8(a1, 35, 0x8000000100A0F290, &qword_100CAEF60);
}

uint64_t sub_100683E88()
{
  uint64_t v0;
  id v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v5;

  v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5._object = (void *)0x8000000100A0F700;
  v2._countAndFlagsBits = 0x6553206F74206F47;
  v2._object = (void *)0xEE0073676E697474;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0xD000000000000042;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v2, (Swift::String_optional)0, (NSBundle)v1, v3, v5);
  sub_1000C13F4();

  return v0;
}

double sub_100683F38@<D0>(uint64_t a1@<X8>)
{
  void *v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  id v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  Swift::String v20;
  Swift::String v21;

  v2 = (void *)objc_opt_self(NSBundle);
  v3 = objc_msgSend(v2, "mainBundle");
  v20._countAndFlagsBits = 0xD000000000000033;
  v20._object = (void *)0x8000000100A0F5F0;
  v4._object = (void *)0x8000000100A0F5D0;
  v4._countAndFlagsBits = 0xD000000000000018;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v20);

  v7 = objc_msgSend(v2, "mainBundle");
  v21._countAndFlagsBits = 0xD00000000000005ELL;
  v21._object = (void *)0x8000000100A0F6A0;
  v8._object = (void *)0x8000000100A0F630;
  v8._countAndFlagsBits = 0x1000000000000060;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v21);

  v11 = sub_100683E88();
  v13 = v12;
  v15 = static Color.blue.getter(v14);
  v16 = Color.hex.getter();
  v18 = v17;
  swift_release(v15);
  *(_QWORD *)&result = 0x8000000000000001;
  *(_OWORD *)a1 = xmmword_1009BDC10;
  *(_QWORD *)(a1 + 16) = 0x8000000100A092D0;
  *(Swift::String *)(a1 + 24) = v6;
  *(Swift::String *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v16;
  *(_QWORD *)(a1 + 88) = v18;
  return result;
}

double sub_1006840CC@<D0>(uint64_t a1@<X8>)
{
  void *v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  id v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  Swift::String v20;
  Swift::String v21;

  v2 = (void *)objc_opt_self(NSBundle);
  v3 = objc_msgSend(v2, "mainBundle");
  v20._countAndFlagsBits = 0xD000000000000054;
  v20._object = (void *)0x8000000100A0F790;
  v4._object = (void *)0x8000000100A0F770;
  v4._countAndFlagsBits = 0xD000000000000013;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v20);

  v7 = objc_msgSend(v2, "mainBundle");
  v21._countAndFlagsBits = 0xD000000000000067;
  v21._object = (void *)0x8000000100A0F860;
  v8._object = (void *)0x8000000100A0F7F0;
  v8._countAndFlagsBits = 0x100000000000006DLL;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v21);

  v11 = sub_100683E88();
  v13 = v12;
  v15 = static Color.blue.getter(v14);
  v16 = Color.hex.getter();
  v18 = v17;
  swift_release(v15);
  *(_QWORD *)&result = 0x8000000000000001;
  *(_OWORD *)a1 = xmmword_1009BDC20;
  *(_QWORD *)(a1 + 16) = 0x8000000100A0F750;
  *(Swift::String *)(a1 + 24) = v6;
  *(Swift::String *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v16;
  *(_QWORD *)(a1 + 88) = v18;
  return result;
}

void sub_100684258(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  _OWORD *v103;
  uint64_t v104;
  uint64_t v105;
  __n128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  objc_class *v137;
  uint64_t v138;
  NSBundle v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  objc_class *v172;
  uint64_t v173;
  NSBundle v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  __n128 v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void (*v194)(uint64_t, uint64_t);
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  objc_class *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  NSBundle v202;
  uint64_t v203;
  uint64_t v204;
  NSBundle v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  __n128 v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  objc_class *v239;
  NSBundle v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  objc_class *v247;
  NSBundle v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  objc_class *v252;
  NSBundle v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  objc_class *v260;
  NSBundle v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  void (*v265)(char *, char *, uint64_t);
  char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  void (*v271)(char *, uint64_t);
  uint64_t v272;
  void (*v273)(uint64_t, uint64_t);
  uint64_t v274;
  char *v275;
  void *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  __int128 v314;
  uint64_t v315;
  char *v316;
  uint64_t v317;
  __int128 v318;
  uint64_t (*v319)(uint64_t, _QWORD);
  uint64_t v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  uint64_t v324;
  __int128 v325;
  uint64_t v326;
  uint64_t v327;
  __int128 v328;
  __int128 v329;
  _OWORD *v330;
  _QWORD v331[25];
  _BYTE v332[200];
  uint64_t v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  uint64_t v340;
  unint64_t v341;
  __int16 v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  __int16 v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  __int16 v352;

  HIDWORD(v285) = a2;
  v330 = a3;
  v287 = type metadata accessor for ModalViewState(0);
  sub_10009D98C();
  __chkstk_darwin(v4);
  sub_100088FDC();
  v288 = v5;
  v6 = sub_10009876C();
  type metadata accessor for TimeState(v6);
  sub_10009D98C();
  __chkstk_darwin(v7);
  sub_100088FDC();
  *(_QWORD *)&v314 = v8;
  v9 = sub_10009876C();
  v10 = type metadata accessor for AirQualityScaleCategory(v9);
  v277 = *(_QWORD *)(v10 - 8);
  v278 = v10;
  sub_10009D98C();
  __chkstk_darwin(v11);
  sub_100088FDC();
  v276 = v12;
  v13 = sub_10009876C();
  v282 = type metadata accessor for AirQualityScale(v13);
  v280 = *(_QWORD *)(v282 - 8);
  sub_10009D98C();
  __chkstk_darwin(v14);
  sub_100088FDC();
  v281 = v15;
  sub_1000BA294(&qword_100BE7C80);
  sub_10009D98C();
  __chkstk_darwin(v16);
  sub_100088FDC();
  v312 = v17;
  v18 = sub_10009876C();
  v313 = type metadata accessor for AirQuality(v18);
  v286 = *(_QWORD *)(v313 - 8);
  sub_10009D98C();
  __chkstk_darwin(v19);
  sub_100088FDC();
  v283 = v20;
  sub_1000BA294(&qword_100BC3340);
  sub_10009D98C();
  __chkstk_darwin(v21);
  sub_100088FDC();
  v305 = v22;
  v23 = sub_10009876C();
  v24 = type metadata accessor for NSUnitSpeed.WeatherFormatUsage(v23);
  v303 = *(_QWORD *)(v24 - 8);
  v304 = v24;
  sub_10009D98C();
  __chkstk_darwin(v25);
  sub_100088FDC();
  v302 = v26;
  v27 = sub_10009876C();
  v28 = type metadata accessor for NSUnitSpeed.BaseWeatherFormatStyle(v27);
  v310 = *(_QWORD *)(v28 - 8);
  v311 = v28;
  sub_10009D98C();
  __chkstk_darwin(v29);
  sub_100088FDC();
  v309 = v30;
  v31 = sub_1000BA294(&qword_100BCB938);
  v307 = *(_QWORD *)(v31 - 8);
  v308 = v31;
  sub_10009D98C();
  __chkstk_darwin(v32);
  sub_100088FDC();
  v306 = v33;
  v34 = sub_10009876C();
  v35 = type metadata accessor for Wind(v34);
  v299 = *(_QWORD *)(v35 - 8);
  v300 = v35;
  sub_10009D98C();
  __chkstk_darwin(v36);
  sub_100088FDC();
  v298 = v37;
  v38 = sub_10009876C();
  v301 = type metadata accessor for WeatherFormatPlaceholder(v38);
  v297 = *(_QWORD *)(v301 - 8);
  sub_10009D98C();
  __chkstk_darwin(v39);
  sub_100088FDC();
  v315 = v40;
  v41 = sub_10009876C();
  v42 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(v41);
  v295 = *(_QWORD *)(v42 - 8);
  v296 = v42;
  sub_10009D98C();
  __chkstk_darwin(v43);
  sub_100088FDC();
  v294 = v44;
  v45 = sub_1000BA294(&qword_100BC4E68);
  v292 = *(_QWORD *)(v45 - 8);
  v293 = v45;
  sub_10009D98C();
  __chkstk_darwin(v46);
  sub_100088FDC();
  v291 = v47;
  v48 = sub_10009876C();
  *(_QWORD *)&v323 = type metadata accessor for CurrentWeather(v48);
  v290 = *(_QWORD *)(v323 - 8);
  sub_10009D98C();
  __chkstk_darwin(v49);
  sub_100088FDC();
  *(_QWORD *)&v322 = v50;
  sub_1000BA294(&qword_100BD4280);
  sub_10009D98C();
  __chkstk_darwin(v51);
  sub_1000986FC();
  v279 = v52;
  __chkstk_darwin(v53);
  *(_QWORD *)&v321 = (char *)&v272 - v54;
  v55 = sub_10009876C();
  *(_QWORD *)&v325 = type metadata accessor for URL(v55);
  v317 = *(_QWORD *)(v325 - 8);
  sub_10009D98C();
  __chkstk_darwin(v56);
  sub_1000986FC();
  v284 = (char *)v57;
  v59 = __chkstk_darwin(v58);
  v61 = (char *)&v272 - v60;
  __chkstk_darwin(v59);
  v316 = (char *)&v272 - v62;
  v63 = sub_10009876C();
  v64 = type metadata accessor for ReportWeatherConfiguration(v63);
  v319 = *(uint64_t (**)(uint64_t, _QWORD))(v64 - 8);
  v320 = v64;
  sub_10009D98C();
  __chkstk_darwin(v65);
  sub_100088FDC();
  *(_QWORD *)&v318 = v66;
  v67 = sub_10009876C();
  type metadata accessor for AppConfigurationState(v67);
  sub_10009D98C();
  __chkstk_darwin(v68);
  sub_100098728();
  v71 = v70 - v69;
  v289 = type metadata accessor for WeatherData(0);
  sub_10009D98C();
  __chkstk_darwin(v72);
  sub_100088FDC();
  v324 = v73;
  sub_1000BA294(&qword_100BC3380);
  sub_10009D98C();
  __chkstk_darwin(v74);
  sub_100098728();
  v77 = v76 - v75;
  v78 = type metadata accessor for LocationWeatherDataState(0);
  sub_10009D98C();
  v80 = __chkstk_darwin(v79);
  v82 = (char *)&v272 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v80);
  v326 = (uint64_t)&v272 - v83;
  sub_1000BA294((uint64_t *)&unk_100C0D170);
  sub_10009D98C();
  __chkstk_darwin(v84);
  sub_100098728();
  v87 = v86 - v85;
  type metadata accessor for LocationsState(0);
  sub_10009D98C();
  __chkstk_darwin(v88);
  sub_100098728();
  v91 = v90 - v89;
  v92 = type metadata accessor for CurrentLocation(0);
  sub_10009D98C();
  __chkstk_darwin(v93);
  sub_100088FDC();
  v327 = v94;
  *(_QWORD *)&v328 = a1;
  v95 = a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment;
  swift_beginAccess(v95, &v333, 0, 0);
  if (*(_BYTE *)(v95 + 2) != 4)
  {
    if (*(unsigned __int8 *)(v95 + 1) - 1 > 1)
    {
LABEL_6:
      sub_1000CD924();
      goto LABEL_7;
    }
    v275 = v61;
    v96 = v328;
    sub_100080C0C(v328 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations, v91, type metadata accessor for LocationsState);
    sub_10009C514(v91, v87);
    sub_1000215BC(v91, type metadata accessor for LocationsState);
    if (_s7Weather24LocationCompositionStateOwet_0(v87, 1, v92) == 1)
    {
      sub_100021A14(v87, (uint64_t *)&unk_100C0D170);
      goto LABEL_6;
    }
    v104 = v327;
    sub_10007802C(v87, v327, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
    v105 = *(_QWORD *)(v96 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 16);
    v106 = swift_bridgeObjectRetain(v105);
    v107 = CurrentLocation.id.getter(v106);
    v109 = v108;
    sub_1000EED10(v107, v108, v105);
    swift_bridgeObjectRelease(v109);
    swift_bridgeObjectRelease(v105);
    if (_s7Weather24LocationCompositionStateOwet_0(v77, 1, v78) == 1)
    {
      sub_100021A14(v77, &qword_100BC3380);
      sub_1000CD924();
      sub_1000DD1BC();
LABEL_16:
      sub_1000215BC(v104, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
      v102 = v321;
      v101 = v322;
      v100 = v323;
      v99 = v325;
      v97 = v328;
      v98 = v329;
      goto LABEL_8;
    }
    v110 = v326;
    sub_10007802C(v77, v326, type metadata accessor for LocationWeatherDataState);
    sub_100080C0C(v110, (uint64_t)v82, type metadata accessor for LocationWeatherDataState);
    if (swift_getEnumCaseMultiPayload(v82, v78) != 1)
    {
      sub_1000215BC((uint64_t)v82, type metadata accessor for LocationWeatherDataState);
      sub_1000DBC94();
      sub_1000DD1BC();
      v121 = v110;
      goto LABEL_15;
    }
    v111 = sub_1000BA294(&qword_100BC3358);
    v112 = (uint64_t)&v82[*(int *)(v111 + 48)];
    v113 = (uint64_t)&v82[*(int *)(v111 + 64)];
    v114 = v324;
    sub_10007802C((uint64_t)v82, v324, type metadata accessor for WeatherData);
    sub_1000215BC(v113, type metadata accessor for NewsDataModel);
    sub_1000215BC(v112, type metadata accessor for PreprocessedWeatherData);
    sub_100080C0C(v328 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_appConfiguration, v71, type metadata accessor for AppConfigurationState);
    v115 = v318;
    AppConfiguration.reportWeather.getter();
    v116 = type metadata accessor for AppConfiguration(0);
    v117 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 8))(v71, v116);
    v118 = v115;
    ReportWeatherConfiguration.onlineFeedbackURL.getter(v117);
    sub_1000C13F4();
    sub_1000D13D4((uint64_t)v319);
    v119 = v321;
    URL.init(string:)(v118, v71);
    swift_bridgeObjectRelease(v71);
    v120 = v325;
    if (_s7Weather24LocationCompositionStateOwet_0(v119, 1, v325) == 1)
    {
      sub_100021A14(v119, &qword_100BD4280);
      sub_1000DBC94();
      v328 = v335;
      v329 = v334;
      v325 = v336;
      v322 = v338;
      v323 = v337;
      v321 = v339;
      sub_1000215BC(v114, type metadata accessor for WeatherData);
      v121 = v110;
LABEL_15:
      sub_1000215BC(v121, type metadata accessor for LocationWeatherDataState);
      goto LABEL_16;
    }
    v122 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v317 + 32))(v316, v119, v120);
    v320 = v114 + *(int *)(v289 + 24);
    v123 = v322;
    v124 = WeatherDataModel.currentWeather.getter(v122);
    v125 = v291;
    CurrentWeather.temperature.getter(v124);
    v319 = *(uint64_t (**)(uint64_t, _QWORD))(v290 + 8);
    v126 = v319(v123, v323);
    v127 = v294;
    static WeatherFormatStyle<>.weather.getter(v126);
    LODWORD(v290) = enum case for WeatherFormatPlaceholder.none(_:);
    v128 = v297;
    v289 = *(_QWORD *)(v297 + 104);
    v129 = v315;
    v130 = v301;
    ((void (*)(uint64_t))v289)(v315);
    v274 = type metadata accessor for UnitManager(0);
    v131 = ((uint64_t (*)(void))static UnitManager.standard.getter)();
    sub_100086DA4((unint64_t *)&qword_100BCB9D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle, (uint64_t)&protocol conformance descriptor for NSUnitTemperature.BaseWeatherFormatStyle);
    v132 = v293;
    v133 = v296;
    v135 = Measurement.formatted<A>(_:placeholder:unitManager:)(v127, v129, v131, &protocol witness table for UnitManager, v293, v296, v134);
    v272 = v136;
    swift_release(v131);
    v273 = *(void (**)(uint64_t, uint64_t))(v128 + 8);
    v273(v129, v130);
    (*(void (**)(uint64_t, unint64_t))(v295 + 8))(v127, v133);
    (*(void (**)(uint64_t, uint64_t))(v292 + 8))(v125, v132);
    *(_QWORD *)&v321 = objc_opt_self(NSBundle);
    v137 = (objc_class *)objc_msgSend((id)v321, "mainBundle");
    sub_1000D97E8();
    v138 = sub_1000C2E1C();
    v139.super.isa = v137;
    v146 = sub_1000BA340(v138, v140, v141, v142, v139, v143, v144, v145);
    v148 = v147;

    v297 = sub_1000BA294(&qword_100BC3C38);
    v149 = sub_1000D0970(v297);
    v318 = xmmword_10097CA50;
    *(_OWORD *)(v149 + 16) = xmmword_10097CA50;
    *(_QWORD *)(v149 + 56) = &type metadata for String;
    v296 = sub_1000B2E24();
    *(_QWORD *)(v149 + 64) = v296;
    v150 = v272;
    *(_QWORD *)(v149 + 32) = v135;
    *(_QWORD *)(v149 + 40) = v150;
    v294 = String.init(format:_:)(v146, v148, v149);
    v295 = v151;
    swift_bridgeObjectRelease(v148);
    v152 = v322;
    v154 = WeatherDataModel.currentWeather.getter(v153);
    CurrentWeather.wind.getter(v154);
    v155 = v319(v152, v323);
    v156 = v306;
    Wind.speed.getter(v155);
    sub_1000D13D4(v299);
    v158 = v302;
    v157 = v303;
    v159 = v304;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v303 + 104))(v302, enum case for NSUnitSpeed.WeatherFormatUsage.windSpeed(_:), v304);
    v160 = type metadata accessor for Locale(0);
    v161 = v305;
    v162 = _s7Weather24LocationCompositionStateOwst_0(v305, 1, 1, v160);
    v163 = static Set<>.full.getter(v162);
    v164 = v309;
    static WeatherFormatStyle<>.weather(_:usage:locale:)(v163, v158, v161);
    swift_bridgeObjectRelease(v163);
    sub_100021A14(v161, &qword_100BC3340);
    (*(void (**)(uint64_t, uint64_t))(v157 + 8))(v158, v159);
    v165 = v315;
    v166 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t))v289)(v315, v290, v130);
    v167 = static UnitManager.standard.getter(v166);
    sub_100086DA4(&qword_100BCE748, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitSpeed.BaseWeatherFormatStyle, (uint64_t)&protocol conformance descriptor for NSUnitSpeed.BaseWeatherFormatStyle);
    v168 = v308;
    v169 = v311;
    Measurement.formatted<A>(_:placeholder:unitManager:)(v164, v165, v167, &protocol witness table for UnitManager, v308, v311, v170);
    sub_1000C13F4();
    swift_release(v167);
    v273(v165, v130);
    (*(void (**)(uint64_t, uint64_t))(v310 + 8))(v164, v169);
    (*(void (**)(uint64_t, uint64_t))(v307 + 8))(v156, v168);
    v171 = (void *)v321;
    v172 = (objc_class *)objc_msgSend((id)v321, "mainBundle");
    sub_1000D97E8();
    v173 = sub_1000C2E1C();
    v174.super.isa = v172;
    v181 = sub_1000BA340(v173, v175, v176, v177, v174, v178, v179, v180);
    v183 = v182;

    v184 = sub_1000D0970(v297);
    *(_OWORD *)(v184 + 16) = v318;
    v185 = v296;
    *(_QWORD *)(v184 + 56) = &type metadata for String;
    *(_QWORD *)(v184 + 64) = v185;
    *(_QWORD *)(v184 + 32) = v156;
    *(_QWORD *)(v184 + 40) = v165;
    v311 = String.init(format:_:)(v181, v183, v184);
    v315 = v186;
    v187 = swift_bridgeObjectRelease(v183);
    v188 = v312;
    WeatherDataModel.airQuality.getter(v187);
    v189 = v313;
    if (_s7Weather24LocationCompositionStateOwet_0(v188, 1, v313) == 1)
    {
      sub_100021A14(v188, &qword_100BE7C80);
      v309 = 0;
      v310 = 0;
      *(_QWORD *)&v318 = 0;
      v312 = 0;
      sub_1000BD638();
    }
    else
    {
      v191 = v283;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v286 + 32))(v283, v188, v189);
      v183 = v281;
      v192 = sub_100098FB4();
      v310 = AirQualityScale.displayLabel.getter(v192);
      v312 = v193;
      v194 = *(void (**)(uint64_t, uint64_t))(v280 + 8);
      v195 = v282;
      v194(v183, v282);
      v196 = sub_100098FB4();
      v197 = AirQualityScale.isNumerical.getter(v196);
      v194(v183, v195);
      v198 = (objc_class *)objc_msgSend(v171, "mainBundle");
      sub_1000D97E8();
      if ((v197 & 1) != 0)
      {
        v274 = 0x8000000100A0F4F0;
        v202.super.isa = v198;
        sub_1000BA340(0x7361206E776F6853, 0xEC0000006425203ALL, 0, 0, v202, v199, v200, v201 + 14);
        sub_1000DA0CC();
        v181 = sub_1000D0970(v297);
        *(_OWORD *)(v181 + 16) = v318;
        v203 = AirQuality.index.getter();
        *(_QWORD *)(v181 + 56) = &type metadata for Int;
        *(_QWORD *)(v181 + 64) = &protocol witness table for Int;
        *(_QWORD *)(v181 + 32) = v203;
      }
      else
      {
        v204 = sub_1000C2E1C();
        v205.super.isa = v198;
        sub_1000BA340(v204, v206, v207, v208, v205, v209, v210, v211);
        sub_1000DA0CC();
        v181 = sub_1000D0970(v297);
        *(_OWORD *)(v181 + 16) = v318;
        v171 = v276;
        v212 = AirQuality.currentScaleCategory.getter(v181);
        v213 = AirQualityScaleCategory.description.getter(v212);
        v183 = v214;
        (*(void (**)(void *, uint64_t))(v277 + 8))(v171, v278);
        v215 = v296;
        *(_QWORD *)(v181 + 56) = &type metadata for String;
        *(_QWORD *)(v181 + 64) = v215;
        *(_QWORD *)(v181 + 32) = v213;
        *(_QWORD *)(v181 + 40) = v183;
      }
      v309 = String.init(format:_:)(v194, v197, v181);
      *(_QWORD *)&v318 = v216;
      sub_1000BD638();
      v217 = v286;
      v218 = swift_bridgeObjectRelease(v197);
      v190 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v217 + 8))(v191, v189, v218);
    }
    v219 = v322;
    WeatherDataModel.currentWeather.getter(v190);
    v220 = v328;
    v221 = v314;
    sub_100080C0C(v328 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_time, v314, type metadata accessor for TimeState);
    v320 = sub_1006856A8();
    v223 = v222;
    v313 = v224;
    *(_QWORD *)&v329 = v225;
    ((void (*)(uint64_t, _QWORD))v171)(v219, v323);
    v226 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v226 - 8) + 8))(v221, v226);
    sub_100080C0C(v220 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_modalView, v181, type metadata accessor for ModalViewState);
    if (swift_getEnumCaseMultiPayload(v181, v183) == 3)
    {
      v227 = *(_QWORD *)v181;
      v228 = *(_QWORD *)(*(_QWORD *)v181 + 16);
      v229 = v321;
      if ((v228 & 0x8000000000000000) == 0)
      {
        v230 = *(_QWORD *)(v227 + 104);
        v319 = *(uint64_t (**)(uint64_t, _QWORD))(v227 + 96);
        v320 = v230;
        v314 = *(_OWORD *)(v227 + 80);
        *(_QWORD *)&v328 = *(_QWORD *)(v227 + 72);
        *(_QWORD *)&v323 = *(_QWORD *)(v227 + 64);
        *(_QWORD *)&v322 = *(_QWORD *)(v227 + 56);
        *(_QWORD *)&v321 = *(_QWORD *)(v227 + 48);
        v313 = *(_QWORD *)(v227 + 40);
        v231 = *(_QWORD *)(v227 + 32);
        v307 = *(_QWORD *)(v227 + 24);
        v308 = v231;
        swift_retain();
        swift_bridgeObjectRelease(v329);
        swift_bridgeObjectRelease(v223);
        memcpy(v331, (const void *)(v228 + 16), 0xC2uLL);
        memmove(v332, (const void *)(v228 + 16), 0xC2uLL);
        LocationSearchEntityFromStringResolver.init()();
        sub_1004DFC44((uint64_t)v332, (uint64_t)&v334);
        v232 = v279;
        v233 = v325;
        _s7Weather24LocationCompositionStateOwst_0(v279, 1, 1, v325);
        sub_1001F5330(v331);
        v234 = v318;
        v235 = v312;
        v236 = v295;
        v237 = v315;
        v238 = sub_1004DF6E8((uint64_t *)&v334, v294, v295, 3u, v311, v315, 3u, v310, v312, v309, v318, 3u, 0, 0, v232, 2, 2, v228);
        swift_bridgeObjectRelease(v236);
        swift_bridgeObjectRelease(v237);
        swift_release(v227);
        sub_1001F53E4(v331);
        sub_10019D2B8(v228, v307, v308, v313, v321, v322, v323, v328, v314, *((uint64_t *)&v314 + 1), (uint64_t)v319, v320);
        swift_bridgeObjectRelease(v235);
        swift_bridgeObjectRelease(v234);
        sub_100021A14(v232, &qword_100BD4280);
        (*(void (**)(char *, uint64_t))(v317 + 8))(v316, v233);
LABEL_29:
        sub_1000215BC(v324, type metadata accessor for WeatherData);
        sub_1000215BC(v326, type metadata accessor for LocationWeatherDataState);
        sub_1000215BC(v327, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
        v97 = 0uLL;
        v98 = (unint64_t)v238;
        v99 = 0uLL;
        v100 = 0uLL;
        v101 = 0uLL;
        v102 = 0uLL;
        goto LABEL_8;
      }
      *(_QWORD *)&v328 = v223;
      swift_release(v227);
    }
    else
    {
      *(_QWORD *)&v328 = v223;
      sub_1000215BC(v181, type metadata accessor for ModalViewState);
      v229 = v321;
    }
    LODWORD(v323) = BYTE4(v285) & 1;
    v239 = (objc_class *)sub_1000CD0B8();
    sub_1000D97E8();
    sub_1000989C4();
    v240.super.isa = v239;
    v244 = sub_1000BA340(0x7364756F6C43, 0xE600000000000000, 0, 0, v240, v241, v242, v243);
    v246 = v245;

    v247 = (objc_class *)sub_1000CD0B8();
    sub_1000989C4();
    v248.super.isa = v247;
    v249 = sub_1000E7344(1852399954, 0xE400000000000000, 0, 0, v248);
    v251 = v250;

    v252 = (objc_class *)sub_1000CD0B8();
    sub_1000989C4();
    v253.super.isa = v252;
    v257 = sub_1000BA340(0x7465656C53, 0xE500000000000000, 0, 0, v253, v254, v255, v256);
    v259 = v258;

    v260 = (objc_class *)sub_1000CD0B8();
    sub_1000989C4();
    v261.super.isa = v260;
    sub_1000E7344(2003791443, 0xE400000000000000, 0, 0, v261);
    sub_1000C13F4();

    *(_QWORD *)&v334 = v320;
    *((_QWORD *)&v334 + 1) = v328;
    *(_QWORD *)&v335 = v313;
    *((_QWORD *)&v335 + 1) = v329;
    LOBYTE(v336) = 0;
    *((_QWORD *)&v336 + 1) = v244;
    *(_QWORD *)&v337 = v246;
    *((_QWORD *)&v337 + 1) = 0x69662E64756F6C63;
    *(_QWORD *)&v338 = 0xEA00000000006C6CLL;
    WORD4(v338) = 0;
    *(_QWORD *)&v339 = v249;
    *((_QWORD *)&v339 + 1) = v251;
    v340 = 0x61722E64756F6C63;
    v341 = 0xEF6C6C69662E6E69;
    v342 = 0;
    v343 = v257;
    v344 = v259;
    sub_1000D97E8();
    v345 = v262 - 33;
    v346 = 0x8000000100A0F440;
    v347 = 0;
    v348 = v229;
    v349 = 0x100BBC000;
    v350 = 0x6B616C66776F6E73;
    v351 = 0xE900000000000065;
    v352 = 0;
    v264 = v316;
    v263 = v317;
    v265 = *(void (**)(char *, char *, uint64_t))(v317 + 16);
    v266 = v275;
    v267 = v325;
    v265(v275, v316, v325);
    v268 = (uint64_t)v284;
    v265(v284, v266, v267);
    v269 = type metadata accessor for ReportWeatherContentViewModel._Storage(0);
    swift_allocObject(v269, *(unsigned int *)(v269 + 48), *(unsigned __int16 *)(v269 + 52));
    BYTE1(v283) = v323;
    LOBYTE(v283) = 0;
    LOBYTE(v279) = 1;
    sub_1001EE2F0((uint64_t)&v334, v294, v295, 1, v311, v315, 1, v310, v312, v309, v318, v279, (uint64_t)&_swiftEmptySetSingleton, (uint64_t)&_swiftEmptySetSingleton, v268, v283, (uint64_t)v284, v285, v286,
      v287,
      v288,
      v289,
      v290,
      v291,
      v292,
      v293,
      v294,
      v295,
      v296,
      v297,
      v298,
      v299,
      v300,
      v301,
      SBYTE1(v301));
    v238 = v270;
    v271 = *(void (**)(char *, uint64_t))(v263 + 8);
    v271(v266, v267);
    v271(v264, v267);
    goto LABEL_29;
  }
  sub_1000DBC94();
LABEL_7:
  v98 = v334;
  v97 = v335;
  v99 = v336;
  v100 = v337;
  v101 = v338;
  v102 = v339;
LABEL_8:
  v103 = v330;
  *v330 = v98;
  v103[1] = v97;
  v103[2] = v99;
  v103[3] = v100;
  v103[4] = v101;
  v103[5] = v102;
}

uint64_t sub_1006856A8()
{
  void *v0;
  id v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t countAndFlagsBits;
  id v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v10;
  Swift::String v11;

  v0 = (void *)objc_opt_self(NSBundle);
  v1 = objc_msgSend(v0, "mainBundle");
  v10._object = (void *)0x8000000100A0F530;
  v2._countAndFlagsBits = 0x796E6E7553;
  v2._object = (void *)0xE500000000000000;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v10._countAndFlagsBits = 0xD000000000000030;
  v4 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, (Swift::String_optional)0, (NSBundle)v1, v3, v10);
  countAndFlagsBits = v4._countAndFlagsBits;

  if ((CurrentWeather.isDaylight.getter() & 1) == 0)
  {
    v6 = objc_msgSend(v0, "mainBundle", swift_bridgeObjectRelease(v4._object).n128_f64[0]);
    v7._countAndFlagsBits = 0xD000000000000010;
    v11._object = (void *)0x8000000100A0F590;
    v7._object = (void *)0x8000000100A0F570;
    v8._countAndFlagsBits = 0x7261656C43;
    v8._object = (void *)0xE500000000000000;
    v11._countAndFlagsBits = 0xD000000000000030;
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v11)._countAndFlagsBits;

  }
  return countAndFlagsBits;
}

uint64_t sub_100685830()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v18;

  v1 = v0;
  v2 = type metadata accessor for ContentSizeCategory(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 != enum case for ContentSizeCategory.extraSmall(_:)
    && v6 != enum case for ContentSizeCategory.small(_:)
    && v6 != enum case for ContentSizeCategory.medium(_:)
    && v6 != enum case for ContentSizeCategory.large(_:)
    && v6 != enum case for ContentSizeCategory.extraLarge(_:)
    && v6 != enum case for ContentSizeCategory.extraExtraLarge(_:)
    && v6 != enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
  {
    if (v6 == enum case for ContentSizeCategory.accessibilityMedium(_:)
      || v6 == enum case for ContentSizeCategory.accessibilityLarge(_:)
      || v6 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
      || v6 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
      || v6 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
    {
      return 1;
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return 0;
}

double sub_100685998@<D0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  uint64_t v23;
  double result;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;

  v3 = type metadata accessor for Location.Identifier(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for SavedLocation(0);
  v7 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v1[5];
  v11 = v1[6];
  sub_1000DB418(v1 + 2, v10);
  v12 = dispatch thunk of SavedLocationsManagerType.savedLocations.getter(v10, v11);
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v25[1] = v12;
    v26 = a1;
    v14 = v12 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v15 = *(_QWORD *)(v7 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100084050(v14, (uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
      v17 = SavedLocation.identifier.getter(v16);
      v18 = Location.Identifier.name.getter(v17);
      v20 = v19;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      if (v18 == 0x6B726F592077654ELL && v20 == 0xE800000000000000)
        break;
      v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, 0x6B726F592077654ELL);
      swift_bridgeObjectRelease();
      if ((v22 & 1) != 0)
        goto LABEL_12;
      sub_1000215BC((uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
      v14 += v15;
      if (!--v13)
      {
        swift_bridgeObjectRelease();
        v23 = 1;
        a1 = v26;
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease();
LABEL_12:
    swift_bridgeObjectRelease();
    a1 = v26;
    sub_1001C6CE4((uint64_t)v9, v26);
    v23 = 0;
  }
  else
  {
    v23 = 1;
  }
LABEL_13:
  _s7Weather24LocationCompositionStateOwst_0(a1, v23, 1, v27);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_100685BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(_QWORD);
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  type metadata accessor for Location.Identifier(0);
  sub_10009D98C();
  __chkstk_darwin(v2);
  sub_100088FDC();
  v4 = sub_1000F3E84(v3);
  sub_1000B43A4(v4, (uint64_t)&v77);
  sub_10009D98C();
  __chkstk_darwin(v5);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v6);
  v15 = sub_1000DC258(v7, v8, v9, v10, v11, v12, v13, v14, v66);
  v16 = type metadata accessor for WeatherCondition(v15);
  sub_1000B43A4(v16, (uint64_t)&v79);
  sub_10009D98C();
  __chkstk_darwin(v17);
  sub_100088FDC();
  type metadata accessor for SavedLocation(0);
  sub_10009D98C();
  __chkstk_darwin(v18);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v19);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v20);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v21);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v22);
  sub_100079F7C();
  sub_10009502C(v23);
  sub_10009D98C();
  __chkstk_darwin(v24);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v25);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v26);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v27);
  __chkstk_darwin(v28);
  __chkstk_darwin(v29);
  sub_100079F7C();
  type metadata accessor for LocationViewerActiveLocationState(0);
  sub_1000B42B0();
  __chkstk_darwin(v30);
  sub_1000CFCF0(v31, v67);
  sub_1000BA294(&qword_100BC61F0);
  sub_1000B42B0();
  __chkstk_darwin(v32);
  __chkstk_darwin(v33);
  __chkstk_darwin(v34);
  sub_1000BA294(&qword_100BC35F8);
  sub_1000B42B0();
  __chkstk_darwin(v35);
  sub_100098728();
  type metadata accessor for Location(0);
  sub_10009D98C();
  __chkstk_darwin(v36);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v37);
  sub_100079F7C();
  v38 = type metadata accessor for DetailCondition(0);
  sub_1000B43A4(v38, (uint64_t)&v78);
  sub_10009D98C();
  __chkstk_darwin(v39);
  sub_100088FDC();
  sub_1000BA294(&qword_100BC5F60);
  sub_1000B42B0();
  __chkstk_darwin(v40);
  sub_1000D0278(v41, v68);
  sub_1000BA294(&qword_100BC5F68);
  sub_1000B42B0();
  __chkstk_darwin(v42);
  sub_1000BEA84(v43, v69);
  sub_1000BA294(&qword_100BC5F70);
  sub_1000B42B0();
  __chkstk_darwin(v44);
  sub_100099B38(v45, v70);
  sub_1000BA294(&qword_100BC5F78);
  sub_1000B42B0();
  __chkstk_darwin(v46);
  sub_10009BE88(v47, v71);
  sub_1000BA294(&qword_100BC5F80);
  sub_1000B42B0();
  __chkstk_darwin(v48);
  sub_1000ED02C(v49, v72);
  type metadata accessor for ViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v50);
  sub_10009BFB8(v51, v73);
  sub_1000BA294(&qword_100BC5F88);
  sub_1000B42B0();
  __chkstk_darwin(v52);
  sub_100088FDC();
  sub_1000BA294(&qword_100BC5F90);
  sub_1000B42B0();
  __chkstk_darwin(v53);
  sub_100088FDC();
  sub_1000BA294(&qword_100BC5F98);
  sub_1000B42B0();
  __chkstk_darwin(v54);
  sub_100088FDC();
  sub_1000BA294(&qword_100BC5FA0);
  sub_1000B42B0();
  __chkstk_darwin(v55);
  sub_1000CE53C(v56, v74);
  sub_1000BA294(&qword_100BC5FA8);
  sub_1000B42B0();
  __chkstk_darwin(v57);
  sub_1000986CC(v58, v75);
  sub_1000BA294(&qword_100BC5FB0);
  sub_1000B42B0();
  __chkstk_darwin(v59);
  sub_100088FDC();
  type metadata accessor for PerformanceTestAction(0);
  sub_1000B42B0();
  __chkstk_darwin(v60);
  sub_100098728();
  v63 = v62 - v61;
  sub_100084050(a2, v62 - v61, v64);
  v65 = (char *)&loc_1006860E4 + *((int *)qword_1006875D8 + swift_getEnumCaseMultiPayload(v63));
  __asm { BR              X10 }
}

void sub_1006860F4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, _QWORD);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, _QWORD);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t, uint64_t, _QWORD);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;

  v5 = *(_QWORD *)(v4 - 328);
  v6 = *(_QWORD *)(v4 - 320);
  v7 = *(_QWORD *)(v4 - 312);
  sub_10008908C(v6, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32));
  sub_1000B2F6C(v2);
  v8 = sub_10009EED0(v2, 1);
  if (v9)
  {
    sub_100094EEC(v8, &qword_100BC61F0);
    v10 = _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, *(_QWORD *)(v4 - 232));
  }
  else
  {
    SavedLocation.location.getter(v8);
    sub_1000215BC(v2, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
    v0 = *(void **)(v4 - 232);
    v10 = sub_10009EED0(v1, 1);
    if (!v9)
    {
      v18 = *(_QWORD *)(v4 - 272);
      v19 = *(_QWORD *)(v4 - 424);
      (*(void (**)(uint64_t, uint64_t, void *))(v18 + 32))(v19, v1, v0);
      v20 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
      v21 = objc_msgSend(v20, "userInterfaceIdiom");

      v22 = sub_1000C08E4();
      v25 = sub_1000DD1EC(v22, v23, v24, v22);
      v28 = sub_1000B4474(*(_QWORD *)(v4 - 112), v26, v27, v25);
      v31 = sub_1000B49D8(*(_QWORD *)(v4 - 120), v29, v30, v28);
      v32 = *(_QWORD *)(v4 - 144);
      v35 = sub_1000B4458(v32, v33, v34, v31);
      v36 = *(_QWORD *)(v4 - 160);
      sub_10009D34C(v36, v37, v38, v35);
      v41 = *(_QWORD *)(v4 - 128);
      if (v21)
      {
        v42 = *(_QWORD *)(v4 - 192);
        sub_100084050(v41 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, v42, type metadata accessor for ViewState);
        sub_10009E6A0();
        Location.identifier.getter(v43);
        v44 = sub_1000D1A10();
        sub_1000860C4(v44);
        sub_1000C57AC();
        v46 = sub_1000DAAD4(v45);
        sub_1000D91D8(v46);
        v47 = sub_1000C4D90();
        v50 = sub_1000CD930(*(_QWORD *)(v4 - 208), v48, v49, v47);
        v51 = sub_1000DF854(v50);
        sub_10009D34C(*(_QWORD *)(v4 - 224), v52, v53, v51);
        v54 = *(_QWORD *)(v4 - 176);
        sub_100112494();
        sub_1000988B0(v55, &qword_100BC5F68);
        sub_1000988A0(v56, &qword_100BC5F70);
        sub_10004A2CC(v57, &qword_100BC5F78);
        sub_1000B3B00(v58, &qword_100BC5F80);
        sub_1000215BC(v42, type metadata accessor for ViewState);
        _s7Weather24LocationCompositionStateOwst_0(v54, 0, 1, *(_QWORD *)(v4 - 184));
        v59 = sub_10008620C();
        v61 = *(_QWORD *)(v60 - 256);
        sub_1006882A0(v59, v61, v62);
        v63 = type metadata accessor for ConditionDetailViewState(0);
        sub_10007A0A8(v42 + *(int *)(v63 + 20), v19, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 16));
        v64 = sub_1000BE7D8();
        v65 = sub_1000DC4D0(v64);
        sub_1000BD014(v65);
        *(_BYTE *)(v66 + 32) = 1;
        v67 = sub_1000F3FE8();
        sub_1000916FC(v42, v67);
        v68 = sub_1000BD65C();
        sub_1000BDB2C(v68);
        _s7Weather24LocationCompositionStateOwst_0(v42, 0, 1, v63);
        v109 = *(_QWORD *)(v4 - 128);
        sub_1000CDEF4();
        sub_10009D358(0, 3, *(_QWORD *)(v4 - 432), *(_QWORD *)(v4 - 112), *(_QWORD *)(v4 - 120), v69, v70, v71, *(_QWORD *)(v4 - 144), *(_QWORD *)(v4 - 160), v54, v42, v103, v104, v105, v106, v107, v108, 0,
          v109);
        sub_1000DA75C();
        sub_1000992DC(v72, &qword_100BC5F60);
        sub_1000988A8(v73, &qword_100BC5F88);
        sub_1000988A0(v74, &qword_100BC5F90);
        sub_100098898(v75, &qword_100BC5F98);
        sub_10009ED60(v76, &qword_100BC5FA0);
        sub_10009518C(v77, &qword_100BC5FA8);
        sub_1000B3B00(v78, &qword_100BC5FB0);
        sub_10011DD20(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 272) + 8));
        v79 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 328) + 8);
        v80 = v61;
      }
      else
      {
        v81 = v19;
        v82 = *(_QWORD *)(v4 - 176);
        sub_10009D34C(v82, v39, v40, *(_QWORD *)(v4 - 184));
        v83 = sub_10008620C();
        sub_1006882A0(v83, *(_QWORD *)(v84 - 256), v85);
        v86 = type metadata accessor for ConditionDetailViewState(0);
        sub_10007A0A8(v3 + *(int *)(v86 + 20), v81, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 16));
        v87 = sub_1000BE7D8();
        v88 = sub_1000DC4D0(v87);
        sub_1000BD014(v88);
        *(_BYTE *)(v89 + 32) = 1;
        v90 = sub_1000F3FE8();
        sub_1000916FC(v3, v90);
        v91 = sub_1000BD65C();
        sub_1000BDB2C(v91);
        _s7Weather24LocationCompositionStateOwst_0(v3, 0, 1, v86);
        sub_1000CDEF4();
        v95 = v18;
        v96 = sub_10009D358(0, 3, *(_QWORD *)(v4 - 432), *(_QWORD *)(v4 - 112), *(_QWORD *)(v4 - 120), v92, v93, v94, v32, v36, v82, v3, v103, v104, v105, v106, v107, v108, 0,
                v41);
        sub_1000992DC(v96, &qword_100BC5F60);
        sub_100098898(v97, &qword_100BC5F88);
        sub_1000988A8(v98, &qword_100BC5F90);
        sub_10009ED60(v99, &qword_100BC5F98);
        sub_1000988B0(v100, &qword_100BC5FA0);
        sub_1000988A0(v101, &qword_100BC5FA8);
        sub_10009518C(v102, &qword_100BC5FB0);
        sub_10011DD20(*(uint64_t (**)(_QWORD, uint64_t))(v95 + 8));
        v79 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 328) + 8);
        v80 = *(_QWORD *)(v4 - 320);
      }
      v79(v80, *(_QWORD *)(v4 - 312));
      goto LABEL_13;
    }
  }
  sub_1000988B0(v10, &qword_100BC35F8);
  v11 = *(_QWORD *)(v4 - 400);
  v13 = static Logger.automation.getter(v12);
  Logger.logObject.getter(v13);
  v14 = sub_100094F54();
  if (sub_1000B42F4(v14))
  {
    v15 = (_WORD *)sub_100098710(2);
    sub_1000CF710(v15);
    sub_10009D290((void *)&_mh_execute_header, v16, v17, "Failed to find New York location");
    sub_1000986F0(v5);
  }

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 248) + 8))(v11, *(_QWORD *)(v4 - 240));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  swift_retain();
LABEL_13:
  sub_100098640();
}

void sub_1006875F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t (*v73)(_QWORD);
  void (*v74)(uint64_t, _QWORD, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  _BOOL8 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t (*v99)(uint64_t, uint64_t);
  os_log_type_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  _BOOL8 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t (*v122)(uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t (*v128)(uint64_t, uint64_t);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t (*v165)(uint64_t, uint64_t);
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215[4];
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  void (*v238)(_QWORD, _QWORD, _QWORD);
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  void (*v243)(_QWORD, _QWORD, _QWORD);
  char v244[8];
  uint64_t v245;
  uint64_t v246;

  v236 = a3;
  v237 = a1;
  v238 = (void (*)(_QWORD, _QWORD, _QWORD))a2;
  sub_1000BA294(&qword_100BC5F60);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_1000D0278(v6, v215[0]);
  sub_1000BA294(&qword_100BC5F68);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_1000ED02C(v8, v215[0]);
  sub_1000BA294(&qword_100BC5F70);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_10009BE88(v10, v215[0]);
  sub_1000BA294(&qword_100BC5F78);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_1000BEA84(v12, v215[0]);
  type metadata accessor for LocationViewerActiveLocationState(0);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  sub_1000CFCF0(v14, v215[0]);
  sub_1000BA294(&qword_100BC5F80);
  sub_1000B42B0();
  __chkstk_darwin(v15);
  sub_100088FDC();
  v228 = v16;
  v17 = type metadata accessor for ViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v18);
  sub_100088FDC();
  v227 = v19;
  sub_1000BA294(&qword_100BC5F88);
  sub_1000B42B0();
  __chkstk_darwin(v20);
  sub_100088FDC();
  v232 = v21;
  sub_1000BA294(&qword_100BC5F90);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  sub_1000986CC(v23, v215[0]);
  sub_1000BA294(&qword_100BC5F98);
  sub_1000B42B0();
  __chkstk_darwin(v24);
  sub_1000CE53C(v25, v215[0]);
  sub_1000BA294(&qword_100BC5FA0);
  sub_1000B42B0();
  __chkstk_darwin(v26);
  sub_10009BFB8(v27, v215[0]);
  sub_1000BA294(&qword_100BC5FA8);
  sub_1000B42B0();
  __chkstk_darwin(v28);
  sub_100099B38(v29, v215[0]);
  sub_1000BA294(&qword_100BC5FB0);
  sub_1000B42B0();
  __chkstk_darwin(v30);
  sub_100088FDC();
  v239 = v31;
  v235 = type metadata accessor for Location.Identifier(0);
  v216 = *(_QWORD *)(v235 - 8);
  sub_10009D98C();
  __chkstk_darwin(v32);
  sub_100088FDC();
  v34 = sub_1000F3E84(v33);
  v35 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v36);
  v45 = sub_1000DC258(v37, v38, v39, v40, v41, v42, v43, v44, v215[0]);
  type metadata accessor for SavedLocation(v45);
  sub_1000B42B0();
  __chkstk_darwin(v46);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v47);
  sub_100079F7C();
  v49 = sub_10009502C(v48);
  sub_1000B43A4(v49, (uint64_t)&v246);
  v221 = v50;
  sub_10009D98C();
  __chkstk_darwin(v51);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v52);
  sub_100079F7C();
  v219 = v53;
  sub_1000BA294(&qword_100BC6000);
  sub_1000B42B0();
  __chkstk_darwin(v54);
  sub_100098728();
  v57 = v56 - v55;
  sub_1000BA294(qword_100BC6008);
  sub_1000B42B0();
  __chkstk_darwin(v58);
  sub_100098728();
  v61 = v60 - v59;
  v223 = type metadata accessor for DisplayMetrics(0);
  sub_1000B42B0();
  __chkstk_darwin(v62);
  sub_100098728();
  v65 = v64 - v63;
  v224 = type metadata accessor for WeatherMapPresentationState(0);
  sub_1000B42B0();
  __chkstk_darwin(v66);
  v68 = (char *)v215 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v69);
  v71 = (char *)v215 - v70;
  v233 = a4;
  v72 = a4 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view;
  sub_100084050(a4 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view + *(int *)(v17 + 40), (uint64_t)v68, v73);
  sub_10004A000(v65);
  v220 = v35;
  v74 = *(void (**)(uint64_t, _QWORD, uint64_t))(v35 + 16);
  v74(v61, v238, v34);
  sub_100099444();
  v75 = v34;
  _s7Weather24LocationCompositionStateOwst_0(v76, v77, v78, v34);
  v79 = type metadata accessor for WeatherMapTrackingState(0);
  sub_10009D34C(v57, v80, v81, v79);
  if ((v236 & 1) != 0)
    v82 = 3;
  else
    v82 = 5;
  v226 = v71;
  sub_1001514A0(v82);
  sub_100021A14(v57, &qword_100BC6000);
  sub_100021A14(v61, qword_100BC6008);
  sub_1000215BC(v65, type metadata accessor for DisplayMetrics);
  sub_1000215BC((uint64_t)v68, type metadata accessor for WeatherMapPresentationState);
  v229 = v17;
  v83 = *(int *)(v17 + 36);
  v222 = v72;
  sub_100084050(v72 + v83, v65, type metadata accessor for DisplayMetrics);
  sub_100403A6C();
  v85 = v84;
  sub_1000215BC(v65, type metadata accessor for DisplayMetrics);
  if ((v85 & 1) != 0)
  {
    sub_1000FDA64();
    v86 = v237;
    v87 = v215[2];
    sub_1000D07D8(v237, v88, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
    v89 = sub_1000F412C((uint64_t)&v245);
    v90 = Logger.logObject.getter(v89);
    v91 = static os_log_type_t.default.getter(v90);
    v92 = os_log_type_enabled(v90, v91);
    if (v92)
    {
      v75 = sub_100098710(28);
      v238 = (void (*)(_QWORD, _QWORD, _QWORD))sub_100098710(64);
      v243 = v238;
      *(_DWORD *)v75 = 136315650;
      sub_10009E6A0();
      v94 = SavedLocation.identifier.getter(v93);
      v95 = Location.Identifier.name.getter(v94);
      v86 = v87;
      v87 = v96;
      (*(void (**)(void (*)(uint64_t, _QWORD, uint64_t), uint64_t))(v216 + 8))(v74, v235);
      v242 = sub_1000CE1C8(v95, v87, (uint64_t *)&v243);
      sub_100688298((uint64_t)&v242, (uint64_t)&v243);
      swift_bridgeObjectRelease();
      sub_1000215BC(v86, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
      *(_WORD *)(v75 + 12) = 2082;
      sub_100688258();
      v65 = v218;
      v97 = dispatch thunk of CustomStringConvertible.description.getter(v72);
      v242 = sub_100098CFC(v97, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, &v243);
      sub_1000986C4();
      sub_1000E7CF8();
      sub_10009BCF8(v65, v99);
      *(_WORD *)(v75 + 22) = 1026;
      LODWORD(v242) = v236 & 1;
      sub_1000BF23C();
      v100 = v91;
      v101 = v235;
      _os_log_impl((void *)&_mh_execute_header, v90, v100, "Create new MainState for displaying map in regular/unspecified mode. location=%s, overlayKind=%{public}s, fullscreen=%{BOOL,public}d", (uint8_t *)v75, 0x1Cu);
      v74 = v238;
      sub_1000C6694((uint64_t)v238);
      sub_1000986F0((uint64_t)v74);
      sub_1000986F0(v75);

      sub_1000C0B3C(*(uint64_t (**)(_QWORD, _QWORD))(v221 + 8));
      sub_10009DF50();
    }
    else
    {
      sub_10003BCC0(v92, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
      sub_1000E7CF8();
      sub_10009BCF8(v218, v128);

      sub_1000C0B3C(*(uint64_t (**)(_QWORD, _QWORD))(v221 + 8));
      sub_10009DF50();
      v101 = v235;
    }
    v129 = sub_1000C08E4();
    v132 = sub_1000C43F0((uint64_t)v74, v130, v131, v129);
    v133 = v230;
    v136 = sub_1000B4474(v230, v134, v135, v132);
    v124 = v231;
    v139 = sub_1000B49D8(v231, v137, v138, v136);
    v142 = sub_1000B4458(v87, v140, v141, v139);
    sub_10009D34C(v75, v143, v144, v142);
    v145 = v227;
    sub_1000D07D8(v222, v146, type metadata accessor for ViewState);
    v147 = v225;
    SavedLocation.identifier.getter(v148);
    sub_100099444();
    _s7Weather24LocationCompositionStateOwst_0(v149, v150, v151, v101);
    v152 = type metadata accessor for LocationViewerViewState._Storage(0);
    sub_1000860C4(v152);
    sub_1000DB04C(v147, 0, 0, 2);
    v154 = sub_1000DAAD4(v153);
    sub_1000D91D8(v154);
    v155 = sub_1000C4D90();
    v156 = sub_1000E7884(v155);
    sub_10011AC20(v156, v157, type metadata accessor for WeatherMapPresentationState);
    sub_1000BEF44();
    sub_1000BD64C();
    sub_1000988B0(v158, &qword_100BC5F68);
    sub_100094EEC(v159, &qword_100BC5F70);
    sub_10009ED60(v160, &qword_100BC5F78);
    sub_1000B3B00(v161, &qword_100BC5F80);
    sub_1000215BC(v145, type metadata accessor for ViewState);
    _s7Weather24LocationCompositionStateOwst_0(v86, 0, 1, v229);
    v162 = sub_1000BD65C();
    v121 = v234;
    v163 = v234;
    v164 = 1;
  }
  else
  {
    sub_1000FDA64();
    v102 = v237;
    sub_1000D07D8(v237, v103, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
    v104 = sub_1000F412C((uint64_t)v244);
    v105 = Logger.logObject.getter(v104);
    v106 = static os_log_type_t.default.getter(v105);
    v107 = os_log_type_enabled(v105, v106);
    if (v107)
    {
      v108 = sub_100098710(28);
      v109 = sub_100098710(64);
      v238 = (void (*)(_QWORD, _QWORD, _QWORD))v109;
      v243 = (void (*)(_QWORD, _QWORD, _QWORD))v109;
      *(_DWORD *)v108 = 136315650;
      v110 = v215[3];
      v111 = SavedLocation.identifier.getter(v109);
      v112 = Location.Identifier.name.getter(v111);
      v114 = v113;
      v115 = v110;
      v116 = v235;
      (*(void (**)(uint64_t, uint64_t))(v216 + 8))(v115, v235);
      v242 = sub_1000CE1C8(v112, v114, (uint64_t *)&v243);
      sub_100688298((uint64_t)&v242, (uint64_t)&v243);
      swift_bridgeObjectRelease();
      sub_10003BCC0(v117, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
      *(_WORD *)(v108 + 12) = 2080;
      sub_100688258();
      v118 = v217;
      v119 = dispatch thunk of CustomStringConvertible.description.getter(v72);
      v242 = sub_1000CE1C8(v119, v120, (uint64_t *)&v243);
      v121 = v237;
      sub_100688298((uint64_t)&v242, (uint64_t)&v243);
      swift_bridgeObjectRelease();
      sub_1000E7CF8();
      sub_10009BCF8(v118, v122);
      *(_WORD *)(v108 + 22) = 1024;
      LODWORD(v242) = v236 & 1;
      sub_1000BF23C();
      _os_log_impl((void *)&_mh_execute_header, v105, v106, "Create new MainState for displaying map in compact mode. location=%s, overlayKind=%s, fullscreen=%{BOOL}d", (uint8_t *)v108, 0x1Cu);
      v123 = (uint64_t)v238;
      sub_1000C6694((uint64_t)v238);
      sub_1000986F0(v123);
      sub_1000986F0(v108);

      sub_1000C0B3C(*(uint64_t (**)(_QWORD, _QWORD))(v221 + 8));
      v124 = v231;
      v86 = v232;
      v125 = v240;
      v126 = v241;
      v127 = v239;
    }
    else
    {
      v121 = v102;
      sub_10003BCC0(v107, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
      sub_1000E7CF8();
      sub_10009BCF8(v217, v165);

      sub_1000C0B3C(*(uint64_t (**)(_QWORD, _QWORD))(v221 + 8));
      v124 = v231;
      v86 = v232;
      v125 = v240;
      v126 = v241;
      v127 = v239;
      v116 = v235;
    }
    v166 = sub_1000C08E4();
    v169 = sub_1000C43F0(v127, v167, v168, v166);
    v133 = v230;
    v172 = sub_1000B4474(v230, v170, v171, v169);
    v175 = sub_1000B49D8(v124, v173, v174, v172);
    v178 = sub_1000B4458(v125, v176, v177, v175);
    sub_10009D34C(v126, v179, v180, v178);
    v181 = v227;
    sub_1000D07D8(v222, v182, type metadata accessor for ViewState);
    sub_1000CF970();
    sub_100099444();
    _s7Weather24LocationCompositionStateOwst_0(v183, v184, v185, v116);
    v186 = type metadata accessor for LocationViewerViewState._Storage(0);
    sub_1000860C4(v186);
    sub_1000C57AC();
    v188 = sub_1000DAAD4(v187);
    sub_1000D91D8(v188);
    v189 = sub_1000C4D90();
    v190 = sub_1000E7884(v189);
    v65 = (uint64_t)v226;
    sub_10011AC20(v190, v191, type metadata accessor for WeatherMapPresentationState);
    sub_1000BEF44();
    sub_1000BD64C();
    sub_1000988B0(v192, &qword_100BC5F68);
    sub_100094EEC(v193, &qword_100BC5F70);
    sub_10009ED60(v194, &qword_100BC5F78);
    sub_1000B3B00(v195, &qword_100BC5F80);
    sub_1000215BC(v181, type metadata accessor for ViewState);
    _s7Weather24LocationCompositionStateOwst_0(v86, 0, 1, v229);
    v196 = type metadata accessor for ModalViewState.MapViewModal(0);
    sub_1000BDD88(v196);
    v197 = sub_1000BD65C();
    swift_storeEnumTagMultiPayload(v121, v197, 4);
    v163 = v121;
    v164 = 0;
    v162 = v197;
  }
  _s7Weather24LocationCompositionStateOwst_0(v163, v164, 1, v162);
  v214 = v233;
  sub_1000CDEF4();
  v201 = sub_10009D358(0, 3, v239, v133, v124, v198, v199, v200, v240, v241, v86, v121, v208, v209, v210, v211, v212, v213, 0,
           v214);
  sub_10009518C(v201, &qword_100BC5F60);
  sub_1000988A8(v202, &qword_100BC5F88);
  sub_1000988B0(v203, &qword_100BC5F90);
  sub_10004A2CC(v204, &qword_100BC5F98);
  sub_1000988A0(v205, &qword_100BC5FA0);
  sub_1000992DC(v206, &qword_100BC5FA8);
  sub_100094EEC(v207, &qword_100BC5FB0);
  sub_1000215BC(v65, type metadata accessor for WeatherMapPresentationState);
  sub_100098640();
}

unint64_t sub_100688258()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF1958;
  if (!qword_100BF1958)
  {
    v1 = type metadata accessor for WeatherMapOverlayKind(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for WeatherMapOverlayKind, v1);
    atomic_store(result, (unint64_t *)&qword_100BF1958);
  }
  return result;
}

uint64_t sub_100688298(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t sub_1006882A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 - 312));
}

void sub_1006882AC(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9[2];

  v3 = sub_1000BA294(&qword_100BC6518);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(v1 + 16);
  sub_100043CA8(v1 + 24, (uint64_t)v9);
  *v5 = swift_getKeyPath(&unk_1009BDD48);
  v7 = sub_1000BA294(&qword_100BC4F28);
  swift_storeEnumTagMultiPayload(v5, v7, 0);
  swift_retain();
  sub_1001CCF18((uint64_t)v5, v6, v9, 0, a1);
}

uint64_t type metadata accessor for ReportWeatherModule()
{
  return objc_opt_self(_TtC7Weather19ReportWeatherModule);
}

void sub_100688390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1006885BC(a1, a2, a3, &qword_100BC3118, (uint64_t (*)(uint64_t))&type metadata accessor for LocationOfInterest, (void (*)(_QWORD))&type metadata accessor for LocationModel, (uint64_t)sub_1005FEB60);
}

void sub_1006883C4(void (*a1)(_QWORD), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  void (*v25)(_QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_1000BA294(&qword_100BF9DB0);
  sub_10009D98C();
  __chkstk_darwin(v9);
  v10 = sub_100089108();
  v27 = type metadata accessor for ComparisonCapsuleViewModel.Row(v10);
  v24 = *(_QWORD *)(v27 - 8);
  sub_10009D98C();
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v24 - v15;
  v17 = _swiftEmptyArrayStorage;
  v25 = a1;
  v26 = a4;
  while (1)
  {
    v28 = a3;
    a1(&v28);
    if (v4)
      break;
    if (_s7Weather24LocationCompositionStateOwet_0(v5, 1, v27) == 1)
    {
      sub_100021A68(v5, &qword_100BF9DB0);
    }
    else
    {
      sub_100080BA8(v5, (uint64_t)v16, type metadata accessor for ComparisonCapsuleViewModel.Row);
      sub_100080BA8((uint64_t)v16, (uint64_t)v14, type metadata accessor for ComparisonCapsuleViewModel.Row);
      if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
      {
        sub_1000DF87C();
        v17 = v22;
      }
      v18 = v17[2];
      if (v18 >= v17[3] >> 1)
      {
        sub_1000DF87C();
        v17 = v23;
      }
      v17[2] = v18 + 1;
      sub_1000DD214();
      sub_100080BA8((uint64_t)v14, v19 + v20 * v18, type metadata accessor for ComparisonCapsuleViewModel.Row);
      a1 = v25;
      a4 = v26;
    }
    if (a4 == a3)
      goto LABEL_15;
    if (__OFADD__(a3++, 1))
    {
      __break(1u);
      return;
    }
  }
  sub_10009D2E0();
LABEL_15:
  sub_1000B44B0();
}

void sub_100688588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1006885BC(a1, a2, a3, &qword_100BFC4B8, (uint64_t (*)(uint64_t))&type metadata accessor for HourTemperatureStatistics, (void (*)(_QWORD))&type metadata accessor for HourWeather, (uint64_t)sub_1005FED30);
}

void sub_1006885BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(uint64_t), void (*a6)(_QWORD), uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  void (*v12)(_QWORD, __n128);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  uint64_t v33;
  void (*v34)(_QWORD, __n128);
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v32[0] = a7;
  v39 = a2;
  v12 = (void (*)(_QWORD, __n128))a1;
  sub_1000D1A34(a1, a2, a3, a4);
  sub_10009D98C();
  __chkstk_darwin(v13);
  v14 = sub_100089108();
  v15 = a5(v14);
  v38 = *(_QWORD *)(v15 - 8);
  sub_10009D98C();
  __chkstk_darwin(v16);
  sub_1000986FC();
  v37 = v17;
  __chkstk_darwin(v18);
  v35 = (uint64_t)v32 - v19;
  v20 = *(_QWORD *)(a3 + 16);
  if (v20)
  {
    a6(0);
    sub_1000BBD24();
    v21 = a3;
    v23 = a3 + v22;
    v25 = *(_QWORD *)(v24 + 72);
    v32[1] = v21;
    v26 = swift_bridgeObjectRetain(v21);
    v27 = _swiftEmptyArrayStorage;
    v33 = v15;
    v34 = v12;
    while (1)
    {
      v12(v23, v26);
      if (v7)
        break;
      if (_s7Weather24LocationCompositionStateOwet_0(v8, 1, v15) == 1)
      {
        sub_100021A68(v8, v36);
      }
      else
      {
        v28 = v35;
        sub_1000CD94C(v35, v8);
        sub_1000CD94C(v37, v28);
        if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
          v27 = (_QWORD *)sub_1000B4C8C(0, v27[2] + 1);
        v30 = v27[2];
        v29 = v27[3];
        if (v30 >= v29 >> 1)
          v27 = (_QWORD *)sub_1000B4C8C(v29 > 1, v30 + 1);
        v27[2] = v30 + 1;
        v31 = (uint64_t)v27
            + ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))
            + *(_QWORD *)(v38 + 72) * v30;
        v15 = v33;
        sub_1000CD94C(v31, v37);
        v12 = v34;
      }
      v23 += v25;
      if (!--v20)
      {
        sub_1000DBCA0();
        goto LABEL_15;
      }
    }
    sub_10009895C();
    sub_1000DBCA0();
  }
LABEL_15:
  sub_1000B44B0();
}

void sub_1006887BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1006885BC(a1, a2, a3, &qword_100C0B8D0, (uint64_t (*)(uint64_t))&type metadata accessor for LocationModel, (void (*)(_QWORD))&type metadata accessor for SavedLocation, (uint64_t)sub_10009AD98);
}

void sub_1006887F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100688824(a1, a2, a3, &qword_100BC3380, type metadata accessor for LocationWeatherDataState, (void (*)(_QWORD))&type metadata accessor for Location.Identifier, (uint64_t)sub_1005FF224);
}

void sub_100688824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(_QWORD), void (*a6)(_QWORD), uint64_t a7)
{
  uint64_t v7;
  void (*v12)(_QWORD, __n128);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t (*v28)(_QWORD);
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  void (*v34)(_QWORD, __n128);
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t (*v38)(_QWORD);
  uint64_t v39;
  uint64_t v40;

  v12 = (void (*)(_QWORD, __n128))a1;
  sub_1000D1A34(a1, a2, a3, a4);
  sub_10009D98C();
  __chkstk_darwin(v13);
  v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = a5;
  v40 = a5(0);
  v36 = *(_QWORD *)(v40 - 8);
  sub_10009D98C();
  __chkstk_darwin(v16);
  sub_1000986FC();
  v39 = v17;
  __chkstk_darwin(v18);
  v35 = (uint64_t)v33 - v19;
  v20 = *(_QWORD *)(a3 + 16);
  if (v20)
  {
    v33[0] = a7;
    a6(0);
    sub_1000BBD24();
    v22 = a3 + v21;
    v24 = *(_QWORD *)(v23 + 72);
    v33[1] = a3;
    v25 = swift_bridgeObjectRetain(a3);
    v26 = _swiftEmptyArrayStorage;
    v34 = v12;
    while (1)
    {
      v12(v22, v25);
      if (v7)
        break;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v40) == 1)
      {
        sub_100021A68((uint64_t)v15, v37);
      }
      else
      {
        v27 = v35;
        v28 = v38;
        sub_100080BA8((uint64_t)v15, v35, v38);
        sub_100080BA8(v27, v39, v28);
        if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
          v26 = (_QWORD *)sub_1000CD0C4(0, v26[2] + 1);
        v30 = v26[2];
        v29 = v26[3];
        if (v30 >= v29 >> 1)
          v26 = (_QWORD *)sub_1000CD0C4(v29 > 1, v30 + 1);
        v26[2] = v30 + 1;
        sub_1000DD214();
        sub_100080BA8(v39, v31 + v32 * v30, v38);
        v12 = v34;
      }
      v22 += v24;
      if (!--v20)
      {
        sub_1000DBCA0();
        goto LABEL_15;
      }
    }
    sub_10009D2E0();
    sub_1000DBCA0();
  }
LABEL_15:
  sub_1000B44B0();
}

_QWORD *sub_100688A24(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __n128 v8;
  _QWORD *v9;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;

  v5 = *(_QWORD *)(a3 + 16);
  if (!v5)
    return _swiftEmptyArrayStorage;
  type metadata accessor for Location(0);
  sub_1000E7358();
  v33 = a3;
  v34 = *(_QWORD *)(v7 + 72);
  v8 = swift_bridgeObjectRetain(a3);
  v9 = _swiftEmptyArrayStorage;
  while (1)
  {
    isUniquelyReferenced_nonNull_native = (uint64_t)a1(&v37, v4, v8);
    if (v3)
      break;
    v18 = v38;
    if (v38)
    {
      v19 = v37;
      v42 = v39;
      v36 = v40;
      v20 = v41;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000DA0DC(0, v9[2] + 1);
        v9 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v22 = v9[2];
      v21 = v9[3];
      if (v22 >= v21 >> 1)
      {
        sub_1000DA0DC(v21 > 1, v22 + 1);
        v9 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v9[2] = v22 + 1;
      v23 = &v9[5 * v22];
      v23[4] = v19;
      v23[5] = v18;
      v23[6] = v42;
      v23[7] = v36;
      *((_BYTE *)v23 + 64) = v20 & 1;
      *((_BYTE *)v23 + 65) = BYTE1(v20) & 1;
      *((_BYTE *)v23 + 66) = BYTE2(v20) & 1;
      *((_BYTE *)v23 + 67) = HIBYTE(v20) & 1;
    }
    v4 += v34;
    if (!--v5)
    {
      sub_1000C61DC(isUniquelyReferenced_nonNull_native, v11, v12, v13, v14, v15, v16, v17, v33);
      return v9;
    }
  }
  swift_bridgeObjectRelease(v9);
  sub_1000C61DC(v24, v25, v26, v27, v28, v29, v30, v31, v33);
  return v9;
}

uint64_t sub_100688B9C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  Class isa;
  uint64_t v23;
  Class v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  __n128 v48;
  __n128 v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(void);
  Class v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, char *, uint64_t, __n128);
  uint64_t v69;
  void *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(void);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v72 = a2;
  v75 = type metadata accessor for TimeZone(0);
  v80 = *(_QWORD *)(v75 - 8);
  sub_10009D98C();
  __chkstk_darwin(v3);
  sub_100088FDC();
  v79 = v4;
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_10009D98C();
  __chkstk_darwin(v5);
  sub_100088FDC();
  v74 = v6;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v67 - v13;
  v15 = __chkstk_darwin(v12);
  v78 = (uint64_t)&v67 - v16;
  __chkstk_darwin(v15);
  v18 = (char *)&v67 - v17;
  v76 = *(void (**)(void))(v8 + 16);
  v76();
  v19 = (int *)type metadata accessor for DayPickerInput(0);
  v69 = v19[5];
  v77 = *(_QWORD *)(a1 + v69);
  if (qword_100BC23A8 != -1)
    swift_once(&qword_100BC23A8, sub_1006892CC);
  v20 = qword_100BFC410;
  v21 = a1 + v19[7];
  isa = TimeZone._bridgeToObjectiveC()().super.isa;
  v71 = v20;
  sub_1000C17C8((uint64_t)isa, "setTimeZone:");

  if (qword_100BC23B0 != -1)
    swift_once(&qword_100BC23B0, sub_100689338);
  v23 = qword_100BFC418;
  v81 = v21;
  v24 = TimeZone._bridgeToObjectiveC()().super.isa;
  v70 = (void *)v23;
  sub_1000C17C8((uint64_t)v24, "setTimeZone:");

  v25 = v74;
  sub_10007C714(a1 + v19[6], v74);
  if (_s7Weather24LocationCompositionStateOwet_0(v25, 1, v7) == 1)
  {
    v26 = sub_100021A68(v25, (uint64_t *)&unk_100BD35A0);
  }
  else
  {
    v27 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 32);
    v27(v14, v25, v7);
    v28 = v77;
    v29 = *(_QWORD *)(v77 + 16);
    if (v29)
    {
      v68 = (uint64_t (*)(uint64_t, char *, uint64_t, __n128))v27;
      sub_100098FC0();
      sub_1000BBD24();
      v31 = v28 + v30;
      v33 = *(_QWORD *)(v32 + 72);
      swift_bridgeObjectRetain(v28);
      while (1)
      {
        DayWeather.date.getter(v34);
        v35 = static Date.== infix(_:_:)(v11, v14);
        v34 = sub_1000C2EA0();
        if ((v35 & 1) != 0)
          break;
        v31 += v33;
        if (!--v29)
        {
          swift_bridgeObjectRelease(v77);
          a1 = v74;
          goto LABEL_12;
        }
      }
      v49 = swift_bridgeObjectRelease(v77);
      v45 = v78;
      v46 = v68(v78, v14, v7, v49);
      goto LABEL_21;
    }
LABEL_12:
    v26 = sub_1000C3E98((uint64_t)v14);
  }
  v36 = v81;
  v37 = *(_QWORD *)(a1 + v69);
  v38 = *(_QWORD *)(v37 + 16);
  if (v38)
  {
    sub_100098FC0();
    sub_1000BBD24();
    v40 = v37 + v39;
    v42 = *(_QWORD *)(v41 + 72);
    swift_bridgeObjectRetain(v37);
    while (1)
    {
      DayWeather.date.getter(v43);
      v44 = static Date.== infix(_:_:)(v11, v18);
      v43 = sub_1000C2EA0();
      if ((v44 & 1) != 0)
        break;
      v40 += v42;
      if (!--v38)
      {
        swift_bridgeObjectRelease(v37);
        a1 = v74;
        v36 = v81;
        goto LABEL_18;
      }
    }
    v48 = swift_bridgeObjectRelease(v37);
    v45 = v78;
    v46 = ((uint64_t (*)(uint64_t, char *, uint64_t, __n128))v76)(v78, v18, v7, v48);
LABEL_21:
    v47 = v72;
    a1 = v74;
    goto LABEL_22;
  }
LABEL_18:
  static Date.now.getter(v26);
  v45 = v78;
  Date.midnight(timeZone:)(v36);
  v46 = sub_1000C2EA0();
  v47 = v72;
LABEL_22:
  v50 = v70;
  __chkstk_darwin(v46);
  v73 = v18;
  *(&v67 - 4) = (uint64_t)v18;
  *(&v67 - 3) = v51;
  *(&v67 - 2) = a1;
  sub_100688824((uint64_t)sub_1006893F8, (uint64_t)(&v67 - 6), v77, &qword_100BDD010, type metadata accessor for DayPickerViewModel.CalendarDayViewModel, (void (*)(_QWORD))&type metadata accessor for DayWeather, (uint64_t)sub_1005FF118);
  v77 = v52;
  v53 = v76;
  ((void (*)(char *, uint64_t, uint64_t))v76)(v11, v45, v7);
  v54 = Date._bridgeToObjectiveC()().super.isa;
  v55 = objc_msgSend(v50, "stringFromDate:", v54);

  v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
  v58 = v57;

  v59 = v75;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 16))(v79, v81, v75);
  *(_QWORD *)v47 = v77;
  v60 = (int *)type metadata accessor for DayPickerViewModel(0);
  ((void (*)(char *, char *, uint64_t))v53)(&v47[v60[5]], v11, v7);
  v61 = (uint64_t *)&v47[v60[6]];
  *v61 = v56;
  v61[1] = v58;
  swift_bridgeObjectRetain(v58);
  v62 = sub_10092B4C8((uint64_t)v11, v56, v58);
  v64 = v63;
  swift_bridgeObjectRelease(v58);
  sub_1000C3E98((uint64_t)v11);
  v65 = (uint64_t *)&v47[v60[7]];
  *v65 = v62;
  v65[1] = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v80 + 32))(&v47[v60[8]], v79, v59);
  sub_1000C3E98(v78);
  sub_1000C3E98((uint64_t)v73);
  return _s7Weather24LocationCompositionStateOwst_0((uint64_t)v47, 0, 1, (uint64_t)v60);
}

uint64_t sub_1006890D4@<X0>(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t (*v14)(char *, uint64_t);
  uint64_t v15;
  int v16;
  char v17;
  Class isa;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v33;
  int v34;

  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  DayWeather.date.getter(v10);
  v13 = static Date.== infix(_:_:)(v12, a1);
  v14 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
  v15 = v14(v12, v8);
  if ((v13 & 1) != 0)
  {
    v16 = 1;
  }
  else
  {
    DayWeather.date.getter(v15);
    v17 = static Date.> infix(_:_:)(v12, a1);
    v15 = v14(v12, v8);
    if ((v17 & 1) != 0)
      v16 = 2;
    else
      v16 = 0;
  }
  v34 = v16;
  DayWeather.date.getter(v15);
  isa = Date._bridgeToObjectiveC()().super.isa;
  v14(v12, v8);
  v19 = objc_msgSend(a2, "stringFromDate:", isa);

  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v33 = v21;

  v22 = sub_10012059C();
  DayWeather.date.getter(v22);
  v23 = type metadata accessor for DayPickerInput(0);
  v24 = static NSNumberFormatter.dayDigits(from:timeZone:)(v12, a3 + *(int *)(v23 + 28));
  v26 = v25;
  v27 = v14(v12, v8);
  DayWeather.date.getter(v27);
  v28 = (int *)type metadata accessor for DayPickerViewModel.CalendarDayViewModel(0);
  v29 = (uint64_t *)(a4 + v28[5]);
  v30 = v33;
  *v29 = v20;
  v29[1] = v30;
  v31 = (uint64_t *)(a4 + v28[6]);
  *v31 = v24;
  v31[1] = v26;
  *(_BYTE *)(a4 + v28[7]) = v34;
  return _s7Weather24LocationCompositionStateOwst_0(a4, 0, 1, (uint64_t)v28);
}

void sub_1006892CC()
{
  id v0;
  NSString v1;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setLocalizedDateFormatFromTemplate:", v1);

  qword_100BFC410 = (uint64_t)v0;
}

id sub_100689338()
{
  id result;

  result = sub_100689354();
  qword_100BFC418 = (uint64_t)result;
  return result;
}

id sub_100689354()
{
  id v0;
  NSString v1;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setLocalizedDateFormatFromTemplate:", v1);

  objc_msgSend(v0, "setFormattingContext:", 2);
  return v0;
}

uint64_t type metadata accessor for DayPickerViewModelFactory()
{
  return objc_opt_self(_TtC7Weather25DayPickerViewModelFactory);
}

uint64_t sub_1006893F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1006890D4(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

void sub_100689414(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    v8 = *(_QWORD *)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 56);
    v9 = *(double *)(a1 + 64);
    v10 = *(_QWORD *)(a1 + 72);
    v11 = *(_BYTE *)(a1 + 80);
    v12 = v4 - 1;
    if (v4 == 1)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(a1 + 40));
      swift_bridgeObjectRetain(v7);
      swift_retain(v10);
    }
    else
    {
      v20 = *(_BYTE *)(a1 + 80);
      v19 = a2;
      v21 = *(_QWORD *)(a1 + 48);
      swift_bridgeObjectRetain_n(a1, 2);
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRetain(v7);
      swift_retain(v10);
      v13 = 0;
      do
      {
        v14 = a1 + v13;
        v15 = *(double *)(a1 + v13 + 120);
        if (v9 < v15)
        {
          v20 = *(_BYTE *)(v14 + 136);
          v16 = *(_QWORD *)(v14 + 128);
          v17 = *(_QWORD *)(v14 + 112);
          v21 = *(_QWORD *)(v14 + 104);
          v5 = *(_QWORD *)(v14 + 88);
          v18 = *(_QWORD *)(v14 + 96);
          swift_bridgeObjectRetain(v18);
          swift_bridgeObjectRetain(v17);
          swift_retain(v16);
          swift_release(v10);
          swift_bridgeObjectRelease(v7);
          swift_bridgeObjectRelease(v6);
          v6 = v18;
          v7 = v17;
          v9 = v15;
          v10 = v16;
        }
        v13 += 56;
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease_n(a1, 2);
      v8 = v21;
      a2 = v19;
      v11 = v20;
    }
    LOBYTE(v4) = v11 & 1;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v8 = 0;
    v7 = 0;
    v10 = 0;
    v9 = 0.0;
  }
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v8;
  *(_QWORD *)(a2 + 32) = v7;
  *(double *)(a2 + 40) = v9;
  *(_QWORD *)(a2 + 48) = v10;
  *(_BYTE *)(a2 + 56) = v4;
}

BOOL sub_10068959C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[6];
  char v50;
  _QWORD v51[6];
  char v52;

  if ((sub_10094871C(*(_QWORD *)a1, *(_QWORD *)a2) & 1) == 0)
    return 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_BYTE *)(a1 + 56);
  v12 = *(_QWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  v14 = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 32);
  v16 = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 48);
  v17 = *(_BYTE *)(a2 + 56);
  if (!v5)
  {
    if (!v11)
      return 1;
    goto LABEL_7;
  }
  if (!v11)
  {
LABEL_7:
    v45 = v4;
    v47 = v8;
    sub_1000C2EB0(v4, v5, v7, v6, v8);
    sub_1000BC878();
    sub_100238738(v30, v31, v32, v33, v34, v35);
    sub_100238858(v45, v5, v7, v6, v47, v48);
    sub_1000BC878();
    sub_100238858(v36, v37, v38, v39, v40, v41);
    return 0;
  }
  v49[0] = v4;
  v49[1] = v5;
  v49[2] = v7;
  v49[3] = v6;
  v49[4] = v8;
  v49[5] = v9;
  v50 = v10 & 1;
  v51[0] = v12;
  v51[1] = v11;
  v51[2] = v14;
  v51[3] = v13;
  v51[4] = v16;
  v51[5] = v15;
  v52 = v17 & 1;
  v44 = v4;
  v46 = v8;
  sub_1000C2EB0(v4, v5, v7, v6, v8);
  v18 = sub_1000BB328();
  sub_100238738(v18, v19, v20, v21, v22, v23);
  v43 = sub_100689764((uint64_t)v49, (uint64_t)v51);
  v24 = sub_1000BB328();
  sub_100238858(v24, v25, v26, v27, v28, v29);
  sub_100238858(v44, v5, v7, v6, v46, v48);
  return (v43 & 1) != 0;
}

BOOL sub_100689720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  char v9;
  _BOOL8 result;

  if (a1 == a3 && a2 == a4)
    return a5 == a6;
  v9 = sub_100099264(a1, a2, a3, a4);
  result = 0;
  if ((v9 & 1) != 0)
    return a5 == a6;
  return result;
}

uint64_t sub_100689764(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  char v17;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v4 == *(_QWORD *)a2 && v5 == v6;
  if (v7 || (v8 = sub_100099264(v4, v5, *(_QWORD *)a2, v6), v9 = 0, (v8 & 1) != 0))
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(double *)(a1 + 32);
    v13 = *(_QWORD *)(a2 + 16);
    v14 = *(_QWORD *)(a2 + 24);
    v15 = *(double *)(a2 + 32);
    if (v10 == v13 && v11 == v14)
    {
      if (v12 != v15)
        goto LABEL_16;
    }
    else
    {
      v17 = sub_100099264(v10, v11, v13, v14);
      v9 = 0;
      if ((v17 & 1) == 0 || v12 != v15)
        return v9 & 1;
    }
    if ((static Color.== infix(_:_:)(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40)) & 1) != 0)
    {
      v9 = ((*(_BYTE *)(a1 + 48) & 1) == 0) ^ *(_BYTE *)(a2 + 48);
      return v9 & 1;
    }
LABEL_16:
    v9 = 0;
  }
  return v9 & 1;
}

BOOL sub_100689820(uint64_t a1, uint64_t a2)
{
  return sub_100689720(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(double *)(a1 + 16), *(double *)(a2 + 16));
}

uint64_t sub_100689840(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_release(a1[5]);
}

uint64_t sub_100689870(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t sub_1006898CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_retain(v8);
  swift_release(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t sub_100689960(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v8);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t sub_1006899C4(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 49))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100689A04(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ComparisonBarChartRowViewModel()
{
  sub_100098884();
}

_QWORD *sub_100689A64(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *sub_100689A98(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

_QWORD *sub_100689AEC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

void type metadata accessor for ComparisonBarChartRowViewModel.LabeledValue()
{
  sub_100098884();
}

uint64_t sub_100689B34(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(*a1);
  result = a1[2];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[4]);
    return swift_release(a1[6]);
  }
  return result;
}

uint64_t sub_100689B7C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  v5 = a2[2];
  swift_bridgeObjectRetain(v4);
  if (v5)
  {
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v5;
    v6 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v6;
    v7 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v7;
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_retain(v7);
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(a1 + 24) = v8;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  }
  return a1;
}

uint64_t sub_100689C20(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 8);
  v5 = (__int128 *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_retain();
      swift_release();
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    }
    else
    {
      sub_10036EB00((_QWORD *)(a1 + 8));
      v8 = *(_OWORD *)(a2 + 24);
      v7 = *(_OWORD *)(a2 + 40);
      v9 = *v5;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_OWORD *)(a1 + 24) = v8;
      *(_OWORD *)(a1 + 40) = v7;
      *v4 = v9;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    v10 = *v5;
    v11 = *(_OWORD *)(a2 + 24);
    v12 = *(_OWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_OWORD *)(a1 + 24) = v11;
    *(_OWORD *)(a1 + 40) = v12;
    *v4 = v10;
  }
  return a1;
}

uint64_t sub_100689D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
  {
    sub_10036EB00((_QWORD *)(a1 + 8));
LABEL_5:
    v6 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    return a1;
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t sub_100689E30(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 57))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100689E70(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ComparisonBarChartViewModel()
{
  sub_100098884();
}

void sub_100689ED0(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = 0x746361706D6F63;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x72616C75676572;
    else
      v4 = 0x6669636570736E75;
    if (v3 == 1)
      v5 = 0xE700000000000000;
    else
      v5 = 0xEB00000000646569;
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x746361706D6F63;
  }
  if ((_BYTE)a2)
  {
    if (a2 == 1)
      v2 = 0x72616C75676572;
    else
      v2 = 0x6669636570736E75;
    if (a2 == 1)
      v6 = 0xE700000000000000;
    else
      v6 = 0xEB00000000646569;
  }
  else
  {
    v6 = 0xE700000000000000;
  }
  if (v4 == v2 && v5 == v6)
    sub_1000CD0D4();
  else
    sub_1000BB348(v4, a2, v2);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

void sub_100689FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v3 == v6 && v5 == v7)
    sub_1000CD0D4();
  else
    sub_1000BB348(v3, v7, v6);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

void sub_10068A02C()
{
  sub_1000FCC94();
  sub_1000FD970();
  __asm { BR              X10 }
}

uint64_t sub_10068A06C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10068A0D8 + 4 * byte_1009BDEA5[a2]))(0x7469617274726F70);
}

void sub_10068A0D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 == 0x7469617274726F70 && v2 == 0xE800000000000000)
    sub_1000CD0D4();
  else
    sub_1000BB348(a1, a2, 0x7469617274726F70);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

BOOL sub_10068A158(int a1, int a2)
{
  return a1 == a2;
}

void sub_10068A164(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_10068A1CC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10068A28C + 4 * byte_1009BDEB2[a2]))(0x7261646E6F636573);
}

void sub_10068A28C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 == 0x7261646E6F636573 && v2 == 0xE900000000000079)
    sub_1000CD0D4();
  else
    sub_1000BB348(a1, a2, 0x7261646E6F636573);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

void sub_10068A358(char a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x74736554786676;
  else
    v3 = 0x6E6F697461636F6CLL;
  if (v2)
    v4 = 0xEE00726577656956;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x74736554786676;
  else
    v5 = 0x6E6F697461636F6CLL;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xEE00726577656956;
  if (v3 == v5 && v4 == v6)
    sub_1000CD0D4();
  else
    sub_1000BB348(v3, a2, v5);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

void sub_10068A3E4(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = 1701869940;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x6E6F697461636F6CLL;
    else
      v4 = 0x74736554786676;
    if (v3 == 1)
      v5 = 0xEE00726577656956;
    else
      v5 = 0xE700000000000000;
  }
  else
  {
    v5 = 0xE400000000000000;
    v4 = sub_1000BE7E8();
  }
  if ((_BYTE)a2)
  {
    if (a2 == 1)
      v2 = 0x6E6F697461636F6CLL;
    else
      v2 = 0x74736554786676;
    if (a2 == 1)
      v6 = 0xEE00726577656956;
    else
      v6 = 0xE700000000000000;
  }
  else
  {
    v6 = 0xE400000000000000;
  }
  if (v4 == v2 && v5 == v6)
    sub_1000CD0D4();
  else
    sub_1000BB348(v4, a2, v2);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

void sub_10068A4D0(char a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6552686372616573;
  else
    v3 = 1701736302;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xED000073746C7573;
  if ((a2 & 1) != 0)
    v5 = 0x6552686372616573;
  else
    v5 = 1701736302;
  if ((a2 & 1) != 0)
    v6 = 0xED000073746C7573;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    sub_1000CD0D4();
  else
    sub_1000BB348(v3, a2, v5);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

uint64_t sub_10068A554(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 1953720684;
  else
    v2 = 1701869940;
  if ((a2 & 1) != 0)
    v3 = 1953720684;
  else
    v3 = 1701869940;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_100099264(v2, 0xE400000000000000, v3, 0xE400000000000000);
  sub_100098718(0xE400000000000000);
  return v4 & 1;
}

uint64_t sub_10068A5B8(uint64_t a1, uint64_t a2)
{
  return sub_10068A5D4(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for DetailChartCondition, &qword_100BFC670, (uint64_t)&protocol conformance descriptor for DetailChartCondition);
}

uint64_t sub_10068A5D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = a3;
  a3(0);
  sub_100086DA4(a4, v7, a5);
  sub_1000FC530();
  sub_1000FC530();
  if (v13 == v11 && v14 == v12)
    sub_1000CD0D4();
  else
    LOBYTE(v7) = sub_1000BB348(v13, v8, v11);
  sub_1000986E8();
  sub_1000986C4();
  return v7 & 1;
}

uint64_t sub_10068A680(uint64_t a1, uint64_t a2)
{
  return sub_10068A5D4(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for DetailType, &qword_100BFC690, (uint64_t)&protocol conformance descriptor for DetailType);
}

uint64_t sub_10068A69C(uint64_t a1, uint64_t a2)
{
  return sub_10068A5D4(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for DetailViewOrigin, &qword_100BFC688, (uint64_t)&protocol conformance descriptor for DetailViewOrigin);
}

void sub_10068A6B8(uint64_t a1, uint64_t a2)
{
  sub_10068BD5C(a1, a2, (uint64_t (*)(void))sub_100381C5C);
}

void sub_10068A6C4(uint64_t a1, uint64_t a2)
{
  sub_10068BD5C(a1, a2, (uint64_t (*)(void))sub_100381A0C);
}

uint64_t sub_10068A6D0(uint64_t a1, uint64_t a2)
{
  return sub_10068A5D4(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Temperature, &qword_100BFC678, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Temperature);
}

void sub_10068A6EC()
{
  sub_1000C1F8C();
  sub_1000D0AAC();
  __asm { BR              X10 }
}

uint64_t sub_10068A72C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(unint64_t))((char *)sub_10068A790 + 4 * byte_1009BDEC7[a2]))(0xD000000000000013);
}

void sub_10068A790(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v3 = a2 - 32;
  if (a1 == 0xD000000000000013 && v2 == (v3 | 0x8000000000000000))
    sub_1000D1F60();
  else
    sub_100099264(a1, v2, 0xD000000000000013, v3 | 0x8000000000000000);
  sub_1000986C4();
  sub_1000986E8();
  sub_100079F70();
}

void sub_10068A810()
{
  sub_1000BE940();
  sub_1000DB32C();
  __asm { BR              X10 }
}

uint64_t sub_10068A84C()
{
  uint64_t v0;
  unsigned __int8 v1;

  v0 = sub_1000CF980();
  return ((uint64_t (*)(uint64_t))((char *)sub_10068A894 + 4 * byte_1009BDED0[v1]))(v0);
}

void sub_10068A894()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000D07E0();
  if (v2 == v3 && v1 == v0)
    sub_1000D1F60();
  else
    sub_100099264(v2, v1, v3, v0);
  sub_1000986C4();
  sub_1000986E8();
  sub_100079F70();
}

void sub_10068A8F8()
{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v0 = 0xEE00726564616548;
  sub_1000C57CC();
  if (v1)
  {
    sub_1000CDDA8();
    if (v5 == 1)
      v8 = v6;
    else
      v8 = 0xD000000000000016;
    if (v5 == 1)
      v9 = v7;
    else
      v9 = (v4 - 32) | 0x8000000000000000;
  }
  else
  {
    v8 = sub_10009D78C();
    v9 = 0xEE00726564616548;
  }
  if (v2)
  {
    sub_1000CDDA8();
    sub_1000C0AA4();
    if (v11 == 1)
      v3 = v12;
    else
      v3 = 0xD000000000000016;
    if (v11 == 1)
      v0 = v13;
    else
      v0 = v10;
  }
  if (v8 == v3 && v9 == v0)
    sub_1000D1F60();
  else
    sub_100099264(v8, v9, v3, v0);
  sub_1000986C4();
  sub_1000986E8();
  sub_100079F70();
}

void sub_10068A9C0()
{
  sub_1000DC4FC();
  __asm { BR              X10 }
}

uint64_t sub_10068AA04()
{
  unint64_t v0;
  unsigned __int8 v1;

  v0 = sub_10009EEE8();
  return ((uint64_t (*)(unint64_t))((char *)sub_10068AA5C + 4 * byte_1009BDED8[v1]))(v0);
}

void sub_10068AA5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000BED14();
  sub_10011DBC4();
  if (v2 == v4 && v0 == v1)
    sub_1000CD0D4();
  else
    sub_1000BB348(v2, v3, v4);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

void sub_10068AAC4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10068AB20(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10068ABA0 + 4 * byte_1009BDEE3[a2]))(0x79746964696D7568);
}

void sub_10068ABA0(uint64_t a1)
{
  uint64_t v1;

  if (a1 == 0x79746964696D7568 && v1 == 0xE800000000000000)
    sub_1000D1F60();
  else
    sub_100099264(a1, v1, 0x79746964696D7568, 0xE800000000000000);
  sub_1000986C4();
  sub_1000986E8();
  sub_100079F70();
}

void sub_10068AC3C(char a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x656369746F6ELL;
  else
    v3 = 0x616D7269666E6F63;
  if (v2)
    v4 = 0xEC0000006E6F6974;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x656369746F6ELL;
  else
    v5 = 0x616D7269666E6F63;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xEC0000006E6F6974;
  if (v3 == v5 && v4 == v6)
    sub_1000CD0D4();
  else
    sub_1000BB348(v3, a2, v5);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

void sub_10068ACC0(uint64_t a1, uint64_t a2)
{
  sub_10068BD5C(a1, a2, (uint64_t (*)(void))sub_100103744);
}

void sub_10068ACCC(uint64_t a1, uint64_t a2)
{
  sub_10068BD5C(a1, a2, (uint64_t (*)(void))sub_100281014);
}

BOOL sub_10068ACD8(char a1, char a2)
{
  return dbl_1009BE2C8[a1] == dbl_1009BE2C8[a2];
}

uint64_t sub_10068ACFC(uint64_t a1, uint64_t a2)
{
  return sub_10068A5D4(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for ArticlePlacementLocation, &qword_100BFC658, (uint64_t)&protocol conformance descriptor for ArticlePlacementLocation);
}

uint64_t sub_10068AD18(uint64_t a1, uint64_t a2)
{
  return sub_10068A5D4(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for TargetWindowSizeClass, &qword_100BFC698, (uint64_t)&protocol conformance descriptor for TargetWindowSizeClass);
}

BOOL sub_10068AD34(char a1, char a2)
{
  double v2;
  double v3;

  v2 = 1024.0;
  if ((a1 & 1) != 0)
    v3 = 1024.0;
  else
    v3 = 0.0;
  if ((a2 & 1) == 0)
    v2 = 0.0;
  return v3 == v2;
}

void sub_10068AD5C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10068ADC0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10068AE1C + 4 * byte_1009BDEEF[a2]))(0x656D614E79746963);
}

void sub_10068AE1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1 == 0x656D614E79746963 && v2 == v1)
    sub_1000D1F60();
  else
    sub_100099264(a1, v2, 0x656D614E79746963, v1);
  sub_1000986C4();
  sub_1000986E8();
  sub_100079F70();
}

void sub_10068AE94(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_10068AEF8(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10068AF6C + 4 * byte_1009BDEFA[a2]))(a3 + 2);
}

void sub_10068AF6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = a3 + 2;
  if (a1 == v5 && v4 == ((v3 - 32) | 0x8000000000000000))
    sub_1000CD0D4();
  else
    sub_1000BB348(a1, a2, v5);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

void sub_10068AFF0(uint64_t a1, uint64_t a2)
{
  sub_10068BD5C(a1, a2, (uint64_t (*)(void))sub_1007B2D60);
}

void sub_10068AFFC(char a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x736C6961746564;
  else
    v3 = 7368564;
  if (v2)
    v4 = 0xE300000000000000;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x736C6961746564;
  else
    v5 = 7368564;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE300000000000000;
  if (v3 == v5 && v4 == v6)
    sub_1000CD0D4();
  else
    sub_1000BB348(v3, a2, v5);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

void sub_10068B074(unsigned __int8 a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = 0xE900000000000065;
  v3 = 0x6C62616C69617661;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD000000000000016;
    else
      v5 = 0x616C696176616E75;
    if (v4 == 1)
      v6 = 0x80000001009F0670;
    else
      v6 = 0xEB00000000656C62;
  }
  else
  {
    v5 = 0x6C62616C69617661;
    v6 = 0xE900000000000065;
  }
  if (a2)
  {
    sub_1000C0AA4();
    if (v8 == 1)
      v3 = 0xD000000000000016;
    else
      v3 = 0x616C696176616E75;
    if (v8 == 1)
      v2 = v7;
    else
      v2 = 0xEB00000000656C62;
  }
  if (v5 == v3 && v6 == v2)
    sub_1000D1F60();
  else
    sub_100099264(v5, v6, v3, v2);
  sub_1000986C4();
  sub_1000986E8();
  sub_100079F70();
}

void sub_10068B174(unsigned __int8 a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = 0xEA0000000000646ELL;
  v3 = 0x756F72676B636162;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x756F726765726F66;
    else
      v5 = 0x6E6968636E75616CLL;
    if (v4 == 1)
      v6 = 0xEA0000000000646ELL;
    else
      v6 = 0xE900000000000067;
  }
  else
  {
    v5 = 0x756F72676B636162;
    v6 = 0xEA0000000000646ELL;
  }
  if (a2)
  {
    v3 = a2 == 1 ? 0x756F726765726F66 : 0x6E6968636E75616CLL;
    if (a2 != 1)
      v2 = 0xE900000000000067;
  }
  if (v5 == v3 && v6 == v2)
    sub_1000D1F60();
  else
    sub_100099264(v5, v6, v3, v2);
  sub_1000986C4();
  sub_1000986E8();
  sub_100079F70();
}

void sub_10068B268()
{
  sub_1000DC4FC();
  __asm { BR              X10 }
}

uint64_t sub_10068B2A4()
{
  uint64_t v0;

  sub_10011DD30();
  return ((uint64_t (*)(void))((char *)sub_10068B2F4 + 4 * byte_1009BDF0C[v0]))();
}

void sub_10068B2F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 == 0x72616C756C6C6563 && v2 == 0xE800000000000000)
    sub_1000CD0D4();
  else
    sub_1000BB348(a1, a2, 0x72616C756C6C6563);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

BOOL sub_10068B358(char a1, char a2)
{
  return dbl_1009BE2E0[a1] == dbl_1009BE2E0[a2];
}

void sub_10068B37C(char a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x746E657261707061;
  else
    v3 = 0x6C6175746361;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x746E657261707061;
  else
    v5 = 0x6C6175746361;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
    sub_1000CD0D4();
  else
    sub_1000BB348(v3, a2, v5);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

void sub_10068B3F8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10068B448(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10068B4C8 + 4 * byte_1009BDF15[a2]))(0x676E6964616F6CLL);
}

void sub_10068B4C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 == 0x676E6964616F6CLL && v2 == 0xE700000000000000)
    sub_1000CD0D4();
  else
    sub_1000BB348(a1, a2, 0x676E6964616F6CLL);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

void sub_10068B554()
{
  sub_1000DC4FC();
  sub_1000BE7E8();
  __asm { BR              X10 }
}

uint64_t sub_10068B58C()
{
  uint64_t v0;

  sub_10011DD30();
  return ((uint64_t (*)(void))((char *)sub_10068B5DC + 4 * byte_1009BDF1E[v0]))();
}

void sub_10068B5DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 == 0x726F727265 && v2 == 0xE500000000000000)
    sub_1000CD0D4();
  else
    sub_1000BB348(a1, a2, 0x726F727265);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

void sub_10068B640()
{
  sub_1000C57CC();
  sub_10009D78C();
  __asm { BR              X10 }
}

uint64_t sub_10068B680()
{
  unint64_t v0;
  unsigned __int8 v1;

  v0 = sub_1000BEF78();
  return ((uint64_t (*)(unint64_t))((char *)sub_10068B6B4 + 4 * byte_1009BDF26[v1]))(v0);
}

void sub_10068B6B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000EB0CC();
  if (v2 == v4 && v0 == v1)
    sub_1000CD0D4();
  else
    sub_1000BB348(v2, v3, v4);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

void sub_10068B6FC()
{
  sub_1000DC4FC();
  sub_1000BE7E8();
  __asm { BR              X10 }
}

uint64_t sub_10068B73C()
{
  uint64_t v0;
  unsigned __int8 v1;

  v0 = sub_10009D78C();
  return ((uint64_t (*)(uint64_t))((char *)sub_10068B788 + 4 * byte_1009BDF30[v1]))(v0);
}

void sub_10068B788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000C57CC();
  if (v1 == v3 && v0 == 0xE800000000000000)
    sub_1000CD0D4();
  else
    sub_1000BB348(v1, v2, v3);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

void sub_10068B7E8(uint64_t a1, uint64_t a2)
{
  sub_10068BD5C(a1, a2, (uint64_t (*)(void))sub_1004142A4);
}

void sub_10068B7F4(char a1, char a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((a1 & 1) != 0)
    v2 = 0xEF77656976657250;
  else
    v2 = 0xEE00726577656956;
  if ((a2 & 1) != 0)
    v3 = 0xEF77656976657250;
  else
    v3 = 0xEE00726577656956;
  if (v2 == v3)
  {
    sub_1000CD0D4();
  }
  else
  {
    sub_10009D78C();
    sub_1000C57CC();
    sub_100099264(v4, v5, v6, v3);
  }
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

void sub_10068B870(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10068B8C0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10068B93C + 4 * byte_1009BDF3C[a2]))(0x656C746974627573);
}

void sub_10068B93C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 == 0x656C746974627573 && v2 == 0xE800000000000000)
    sub_1000CD0D4();
  else
    sub_1000BB348(a1, a2, 0x656C746974627573);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

void sub_10068B9C4(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_10068BA1C()
{
  uint64_t v0;
  unsigned __int8 v1;

  v0 = sub_10009D78C();
  return ((uint64_t (*)(uint64_t))((char *)sub_10068BAD0 + 4 * byte_1009BDF4A[v1]))(v0);
}

void sub_10068BAD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000C57CC();
  if (v1 == v3 && v0 == 0xEF77656976657250)
    sub_1000CD0D4();
  else
    sub_1000BB348(v1, v2, v3);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

void sub_10068BB8C(uint64_t a1, uint64_t a2)
{
  sub_10068BD5C(a1, a2, (uint64_t (*)(void))sub_100731564);
}

void sub_10068BB98(unsigned __int8 a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = 0xD00000000000002ALL;
  v3 = 0x80000001009EF9B0;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD00000000000001FLL;
    else
      v5 = 0xD00000000000001ELL;
    if (v4 == 1)
      v6 = 0x80000001009EF9E0;
    else
      v6 = 0x80000001009EFA00;
  }
  else
  {
    v5 = 0xD00000000000002ALL;
    v6 = 0x80000001009EF9B0;
  }
  if (a2)
  {
    sub_1000ED320();
    if (v7)
      v2 = v8 + 1;
    else
      v2 = v8;
    if (v7)
      v3 = v10;
    else
      v3 = v9;
  }
  if (v5 == v2 && v6 == v3)
    sub_1000D1F60();
  else
    sub_100099264(v5, v6, v2, v3);
  sub_1000986C4();
  sub_1000986E8();
  sub_100079F70();
}

void sub_10068BC50(char a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x656E696C66666FLL;
  else
    v3 = 0x6C62616863616572;
  if (v2)
    v4 = 0xE900000000000065;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x656E696C66666FLL;
  else
    v5 = 0x6C62616863616572;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE900000000000065;
  if (v3 == v5 && v4 == v6)
    sub_1000CD0D4();
  else
    sub_1000BB348(v3, a2, v5);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

void sub_10068BCD4(char a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6361667265746E69;
  else
    v3 = 1701869940;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE900000000000065;
  if ((a2 & 1) != 0)
    v5 = 0x6361667265746E69;
  else
    v5 = 1701869940;
  if ((a2 & 1) != 0)
    v6 = 0xE900000000000065;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    sub_1000CD0D4();
  else
    sub_1000BB348(v3, a2, v5);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

void sub_10068BD50(uint64_t a1, uint64_t a2)
{
  sub_10068BD5C(a1, a2, (uint64_t (*)(void))DetailKind.rawValue.getter);
}

void sub_10068BD5C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = a3();
  v7 = v6;
  v8 = ((uint64_t (*)(uint64_t))a3)(a2);
  if (v5 == v8 && v7 == v9)
    sub_1000CD0D4();
  else
    sub_1000BB348(v5, v9, v8);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

void sub_10068BDC4()
{
  sub_10011E64C();
  __asm { BR              X10 }
}

uint64_t sub_10068BE24()
{
  uint64_t v0;
  unsigned __int8 v1;

  v0 = sub_1000DB32C();
  return ((uint64_t (*)(uint64_t))((char *)sub_10068BE6C + 4 * byte_1009BDF58[v1]))(v0);
}

void sub_10068BE6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000BE940();
  if (v1 == v2 && v0 == 0xEA00000000007974)
    sub_1000D1F60();
  else
    sub_100099264(v1, v0, v2, 0xEA00000000007974);
  sub_1000986C4();
  sub_1000986E8();
  sub_100079F70();
}

void sub_10068BEF8()
{
  unint64_t v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;

  sub_1000FC6A4();
  v4 = v1;
  if (v1)
  {
    if (v1 == 1)
      v5 = 0xD000000000000011;
    else
      v5 = 0x6974736974617473;
    if (v4 == 1)
      v0 = 0x80000001009F04A0;
    else
      v0 = 0xEA00000000007363;
  }
  else
  {
    v5 = sub_100089190();
  }
  if ((_BYTE)v2)
  {
    sub_1000C0AA4();
    if (v7 == 1)
      v3 = 0xD000000000000011;
    else
      v3 = 0x6974736974617473;
    if (v7 == 1)
      v8 = v6;
    else
      v8 = 0xEA00000000007363;
  }
  else
  {
    v8 = 0xE700000000000000;
  }
  if (v5 == v3 && v0 == v8)
    sub_1000CD0D4();
  else
    sub_1000BB348(v5, v2, v3);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

uint64_t sub_10068BFC8(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 0x6567617373656DLL;
  else
    v2 = 0x746E65746E6F63;
  if ((a2 & 1) != 0)
    v3 = 0x6567617373656DLL;
  else
    v3 = 0x746E65746E6F63;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_100099264(v2, 0xE700000000000000, v3, 0xE700000000000000);
  sub_100098718(0xE700000000000000);
  return v4 & 1;
}

void sub_10068C03C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v2 = 1701869940;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0xD00000000000001DLL;
    else
      v4 = 0xD000000000000015;
    if (v3 == 1)
      v5 = 0x80000001009F0010;
    else
      v5 = 0x80000001009F0030;
  }
  else
  {
    v5 = 0xE400000000000000;
    v4 = sub_1000BE7E8();
  }
  if ((_BYTE)a2)
  {
    sub_1000ED320();
    if (v6)
      v2 = v10;
    else
      v2 = v7;
    if (v6)
      v11 = v9;
    else
      v11 = v8;
  }
  else
  {
    v11 = 0xE400000000000000;
  }
  if (v4 == v2 && v5 == v11)
    sub_1000CD0D4();
  else
    sub_1000BB348(v4, a2, v2);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

void sub_10068C0F0()
{
  sub_1000DC4FC();
  __asm { BR              X10 }
}

uint64_t sub_10068C12C()
{
  uint64_t v0;

  sub_10011DD30();
  return ((uint64_t (*)(void))((char *)sub_10068C218 + 4 * byte_1009BDF68[v0]))();
}

void sub_10068C218(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 == 0x696152746867696CLL && v2 == 0xE90000000000006ELL)
    sub_1000CD0D4();
  else
    sub_1000BB348(a1, a2, 0x696152746867696CLL);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

void sub_10068C318(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = 0x72656D726177;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x616365726F467361;
    else
      v4 = 0x7265646C6F63;
    if (v3 == 1)
      v5 = 0xEA00000000007473;
    else
      v5 = 0xE600000000000000;
  }
  else
  {
    v5 = 0xE600000000000000;
    v4 = 0x72656D726177;
  }
  if ((_BYTE)a2)
  {
    if (a2 == 1)
      v2 = 0x616365726F467361;
    else
      v2 = 0x7265646C6F63;
    if (a2 == 1)
      v6 = 0xEA00000000007473;
    else
      v6 = 0xE600000000000000;
  }
  else
  {
    v6 = 0xE600000000000000;
  }
  if (v4 == v2 && v5 == v6)
    sub_1000CD0D4();
  else
    sub_1000BB348(v4, a2, v2);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

void sub_10068C3F8()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;

  sub_10011DBC4();
  v1 = (v0 - 32) | 0x8000000000000000;
  if (v2)
  {
    sub_1000DC9F8();
    if (v6 == 1)
      v9 = v7;
    else
      v9 = v4;
    if (v6 == 1)
      v10 = v8;
    else
      v10 = (v5 - 32) | 0x8000000000000000;
  }
  else
  {
    v9 = sub_10009EEE8();
    v10 = v1;
  }
  if (v3)
  {
    sub_1000DC9F8();
    sub_1000C0AA4();
    if (v14 == 1)
    {
      v4 = v12;
      v1 = v13;
    }
    else
    {
      v1 = v11;
    }
  }
  if (v9 == v4 && v10 == v1)
    sub_1000D1F60();
  else
    sub_100099264(v9, v10, v4, v1);
  sub_1000986C4();
  sub_1000986E8();
  sub_100079F70();
}

void sub_10068C4A4(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v2 = 0xD000000000000012;
  v3 = 0x80000001009F03D0;
  if (a1)
  {
    sub_10009DC58();
    if (v6 == 1)
      v9 = v7;
    else
      v9 = v4;
    if (v6 == 1)
      v10 = v8;
    else
      v10 = (v5 - 32) | 0x8000000000000000;
  }
  else
  {
    v9 = 0xD000000000000012;
    v10 = 0x80000001009F03D0;
  }
  if (a2)
  {
    sub_10009DC58();
    v16 = (v15 - 32) | 0x8000000000000000;
    if (v12 == 1)
      v2 = v13;
    else
      v2 = v11;
    if (v12 == 1)
      v3 = v14;
    else
      v3 = v16;
  }
  if (v9 == v2 && v10 == v3)
    sub_1000D1F60();
  else
    sub_100099264(v9, v10, v2, v3);
  sub_1000986C4();
  sub_1000986E8();
  sub_100079F70();
}

void sub_10068C55C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10068C5AC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10068C64C + 4 * byte_1009BDF7A[a2]))(0x617361656C706E75);
}

void sub_10068C64C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 == 0x617361656C706E75 && v2 == 0xEA0000000000746ELL)
    sub_1000CD0D4();
  else
    sub_1000BB348(a1, a2, 0x617361656C706E75);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

void sub_10068C6FC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10068C74C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10068C7C8 + 4 * byte_1009BDF88[a2]))(0x6E696E746867696CLL);
}

void sub_10068C7C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 == 0x6E696E746867696CLL && v2 == 0xE900000000000067)
    sub_1000CD0D4();
  else
    sub_1000BB348(a1, a2, 0x6E696E746867696CLL);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

void sub_10068C854()
{
  sub_1000DC4FC();
  __asm { BR              X10 }
}

uint64_t sub_10068C890()
{
  uint64_t v0;

  sub_10011DD30();
  return ((uint64_t (*)(void))((char *)sub_10068C8E0 + 4 * byte_1009BDF92[v0]))();
}

void sub_10068C8E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 == 0x796C74726170 && v2 == 0xE600000000000000)
    sub_1000CD0D4();
  else
    sub_1000BB348(a1, a2, 0x796C74726170);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

void sub_10068C944(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10068C98C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10068CA58 + 4 * byte_1009BDFA2[a2]))(0x6C6C616D73);
}

void sub_10068CA58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 == 0x6C6C616D73 && v2 == 0xE500000000000000)
    sub_1000CD0D4();
  else
    sub_1000BB348(a1, a2, 0x6C6C616D73);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

void sub_10068CB34(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10068CB84(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10068CC34 + 4 * byte_1009BDFB5[a2]))(0x7261656C63);
}

void sub_10068CC34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 == 0x7261656C63 && v2 == 0xE500000000000000)
    sub_1000CD0D4();
  else
    sub_1000BB348(a1, a2, 0x7261656C63);
  sub_1000986E8();
  sub_1000986C4();
  sub_100079F70();
}

uint64_t sub_10068CCF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v14[4];

  v5 = sub_10068E82C(a1, 0, 0, 0, 1, 0, 0);
  v6 = *(_QWORD *)(a3 + 16);
  if (v6)
  {
    ObjectType = swift_getObjectType(*(_QWORD *)(a3 + 16));
    swift_unknownObjectRetain(v6);
    v8 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType);
    v10 = v9;
    swift_unknownObjectRelease(v6);
  }
  else
  {
    v8 = 0;
    v10 = 0;
  }
  v11 = swift_allocObject(&unk_100B889B8, 32, 7);
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  if (v10 | v8)
  {
    v14[0] = 0;
    v14[1] = 0;
    v12 = v14;
    v14[2] = v8;
    v14[3] = v10;
  }
  else
  {
    v12 = 0;
  }
  return swift_task_create(v5, v12, (char *)&type metadata for () + 8, &unk_100BFFAA0, v11);
}

uint64_t sub_10068CDF4(unsigned __int8 a1)
{
  return ((uint64_t (*)())((char *)sub_10068CE10 + 4 * byte_1009BDFBC[a1]))();
}

uint64_t sub_10068CE28(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = 2 * a1 + 2;
  if (a2)
  {
    if (v3 == a3)
      return static Alignment.bottomTrailing.getter();
  }
  else if (v3 != a3)
  {
    return static Alignment.bottomLeading.getter();
  }
  return static Alignment.bottom.getter();
}

uint64_t sub_10068CE50()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[31];
  char v23;

  v0 = type metadata accessor for UVIndex(0);
  v21 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v2 = (char *)&v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for HourWeather(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10068D01C();
  if (!v7)
    goto LABEL_8;
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
  {
LABEL_7:
    swift_bridgeObjectRelease(v7);
LABEL_8:
    v16 = 0;
    goto LABEL_9;
  }
  v9 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v20 = v7;
  v10 = v7 + v9;
  v11 = *(_QWORD *)(v4 + 72);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16);
  while (1)
  {
    v13 = v12(v6, v10, v3);
    v14 = HourWeather.uvIndex.getter(v13);
    v15 = UVIndex.value.getter(v14);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v2, v0);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (v15 >= 1)
      break;
    v10 += v11;
    if (!--v8)
    {
      v7 = v20;
      goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v20);
  v16 = 1;
LABEL_9:
  if (qword_100BC2038 != -1)
    swift_once(&qword_100BC2038, sub_10014D1E8);
  v17 = sub_1000BA294(&qword_100BC3130);
  v18 = sub_1000AECD4(v17, (uint64_t)&unk_100CAE7E0);
  v23 = v16;
  swift_beginAccess(v18, v22, 33, 0);
  Tips.Parameter.wrappedValue.setter(&v23, v17);
  return swift_endAccess(v22);
}

void sub_10068D01C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_getKeyPath(&unk_1009BE278);
  sub_1000D91EC();
  sub_100086DA4(&qword_100BFC628, type metadata accessor for TipCoordinator, (uint64_t)&unk_1009BE0A0);
  sub_1000DDE00(v1, v2);
  sub_100089020();
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
  sub_100099960();
}

uint64_t sub_10068D084(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;
  swift_bridgeObjectRelease(v2);
  return sub_10068CE50();
}

double sub_10068D0A4()
{
  uint64_t v0;

  swift_bridgeObjectRetain();
  return sub_100146570(v0, (uint64_t)&unk_1009BE278);
}

double sub_10068D0DC(uint64_t a1)
{
  return sub_100146570(a1, (uint64_t)&unk_1009BE278);
}

uint64_t sub_10068D0F0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain(a2);
  return sub_10068D084(a2);
}

uint64_t sub_10068D128()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v17;

  v1 = v0;
  sub_10068D334();
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    swift_bridgeObjectRelease(v2);
    v4 = v3 > 9;
  }
  else
  {
    v4 = 0;
  }
  KeyPath = swift_getKeyPath(&unk_1009BE200);
  v17 = v1;
  sub_100086DA4(&qword_100BFC628, type metadata accessor for TipCoordinator, (uint64_t)&unk_1009BE0A0);
  v7 = v6;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v17, KeyPath, v6);
  swift_release(KeyPath);
  v17 = v1;
  v8 = swift_getKeyPath(&unk_1009BE200);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(&v17, v8, v7);
  swift_release(v8);
  v1[32] = v4;
  v17 = v1;
  v9 = swift_getKeyPath(&unk_1009BE200);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v17, v9, v7);
  swift_release(v9);
  v10 = swift_getKeyPath(&unk_1009BE228);
  v17 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v17, v10, v7);
  swift_release(v10);
  v17 = v1;
  v11 = swift_getKeyPath(&unk_1009BE228);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(&v17, v11, v7);
  swift_release(v11);
  v1[33] = v4;
  v17 = v1;
  v12 = swift_getKeyPath(&unk_1009BE228);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v17, v12, v7);
  swift_release(v12);
  v13 = swift_getKeyPath(&unk_1009BE250);
  v17 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v17, v13, v7);
  swift_release(v13);
  v17 = v1;
  v14 = swift_getKeyPath(&unk_1009BE250);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(&v17, v14, v7);
  swift_release(v14);
  v1[34] = v4;
  v17 = v1;
  v15 = swift_getKeyPath(&unk_1009BE250);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v17, v15, v7);
  return swift_release(v15);
}

void sub_10068D334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_getKeyPath(&unk_1009BE2A0);
  sub_1000D91EC();
  sub_100086DA4(&qword_100BFC628, type metadata accessor for TipCoordinator, (uint64_t)&unk_1009BE0A0);
  sub_1000DDE00(v1, v2);
  sub_100089020();
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  sub_100099960();
}

uint64_t sub_10068D39C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = a1;
  swift_bridgeObjectRelease(v2);
  return sub_10068D128();
}

double sub_10068D3BC()
{
  uint64_t v0;

  swift_bridgeObjectRetain();
  return sub_100146570(v0, (uint64_t)&unk_1009BE2A0);
}

double sub_10068D3F4(uint64_t a1)
{
  return sub_100146570(a1, (uint64_t)&unk_1009BE2A0);
}

uint64_t sub_10068D408(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain(a2);
  return sub_10068D39C(a2);
}

void sub_10068D440()
{
  uint64_t v0;
  uint64_t v1;

  swift_getKeyPath(&unk_1009BE160);
  sub_1000D91EC();
  sub_100086DA4(&qword_100BFC628, type metadata accessor for TipCoordinator, (uint64_t)&unk_1009BE0A0);
  sub_1000DDE00(v0, v1);
  sub_100089020();
  sub_100099960();
}

void sub_10068D4A4()
{
  uint64_t v0;
  uint64_t v1;

  swift_getKeyPath(&unk_1009BE188);
  sub_1000D91EC();
  sub_100086DA4(&qword_100BFC628, type metadata accessor for TipCoordinator, (uint64_t)&unk_1009BE0A0);
  sub_1000DDE00(v0, v1);
  sub_100089020();
  sub_100099960();
}

void sub_10068D508()
{
  uint64_t v0;
  uint64_t v1;

  swift_getKeyPath(&unk_1009BE1B0);
  sub_1000D91EC();
  sub_100086DA4(&qword_100BFC628, type metadata accessor for TipCoordinator, (uint64_t)&unk_1009BE0A0);
  sub_1000DDE00(v0, v1);
  sub_100089020();
  sub_100099960();
}

void sub_10068D56C()
{
  uint64_t v0;
  uint64_t v1;

  swift_getKeyPath(&unk_1009BE1D8);
  sub_1000D91EC();
  sub_100086DA4(&qword_100BFC628, type metadata accessor for TipCoordinator, (uint64_t)&unk_1009BE0A0);
  sub_1000DDE00(v0, v1);
  sub_100089020();
  sub_100099960();
}

double sub_10068D5D0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  double result;
  uint64_t v11;
  uint64_t v12[3];
  uint64_t v13;
  uint64_t v14;

  if (qword_100BC2500 != -1)
    swift_once(&qword_100BC2500, sub_100159654);
  v1 = sub_100098720();
  sub_1000AECD4(v1, (uint64_t)qword_100CAF2E8);
  swift_retain_n(v0, 2);
  v2 = sub_10009E6AC();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)sub_100098710(12);
    v5 = sub_100098710(32);
    v12[0] = v5;
    *(_DWORD *)v4 = 136315138;
    sub_10068EF14();
    v13 = v6;
    sub_1000BA294(&qword_100BFC630);
    v7 = String.init<A>(describing:)(&v13);
    v13 = sub_1000CE1C8(v7, v8, v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
    sub_1000DBCA8();
    sub_1000986C4();
    sub_10009D7A0((void *)&_mh_execute_header, v2, v3, "Picking tip, tipQueue=%s", v4);
    sub_1000988D8(v5);
    sub_1000986F0(v5);
    sub_1000986F0((uint64_t)v4);

  }
  else
  {

    sub_1000DBCA8();
  }
  result = sub_10068EF14();
  if (v9)
  {
    v11 = v9;
    if (*(_QWORD *)(v9 + 16))
    {
      swift_bridgeObjectRetain(v9);
      __asm { BR              X8 }
    }
    *(_QWORD *)&result = swift_bridgeObjectRelease(v9).n128_u64[0];
  }
  return result;
}

double sub_10068D9F4()
{
  uint64_t v0;

  swift_bridgeObjectRetain();
  return sub_100146570(v0, (uint64_t)&unk_1009BE0E8);
}

uint64_t sub_10068DA2C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v5 + 40) = a5;
  *(_BYTE *)(v5 + 145) = a4;
  v6 = type metadata accessor for ContinuousClock(0);
  *(_QWORD *)(v5 + 48) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 56) = v7;
  *(_QWORD *)(v5 + 64) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Tips.ConfigurationOption.DatastoreLocation(0);
  *(_QWORD *)(v5 + 72) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v5 + 80) = v9;
  *(_QWORD *)(v5 + 88) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Tips.ConfigurationOption.DisplayFrequency(0);
  *(_QWORD *)(v5 + 96) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v5 + 104) = v11;
  *(_QWORD *)(v5 + 112) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10068DAE0, 0, 0);
}

uint64_t sub_10068DAE0()
{
  NSObject *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  if (qword_100BC2500 != -1)
    swift_once(&qword_100BC2500, sub_100159654);
  v3 = sub_100098720();
  v4 = sub_1000AECD4(v3, (uint64_t)qword_100CAF2E8);
  *(_QWORD *)(v2 + 120) = v4;
  v25 = v4;
  sub_1000999A8();
  v5 = sub_10009C0A4();
  if (sub_1000C23F4(v5))
  {
    v6 = (uint8_t *)sub_100098710(2);
    *(_WORD *)v6 = 0;
    sub_1000D00B0((void *)&_mh_execute_header, v0, v1, "Configuring tips", v6);
    sub_1000986F0((uint64_t)v6);
  }
  v7 = *(unsigned __int8 *)(v2 + 145);

  v8 = sub_1000BA294(&qword_100BFC618);
  v9 = *(_QWORD *)(type metadata accessor for Tips.ConfigurationOption(0) - 8);
  v10 = swift_allocObject(v8, ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ 2 * *(_QWORD *)(v9 + 72), *(unsigned __int8 *)(v9 + 80) | 7);
  *(_OWORD *)(v10 + 16) = xmmword_10097DA20;
  if (v7 == 1)
    static Tips.ConfigurationOption.DisplayFrequency.immediate.getter();
  else
    static Tips.ConfigurationOption.DisplayFrequency.daily.getter();
  v11 = *(_QWORD *)(v2 + 104);
  v12 = *(_QWORD *)(v2 + 88);
  v13 = *(_QWORD *)(v2 + 80);
  static Tips.ConfigurationOption.displayFrequency(_:)(*(_QWORD *)(v2 + 112));
  v14 = sub_1000F3E94(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  static Tips.ConfigurationOption.DatastoreLocation.applicationDefault.getter(v14);
  static Tips.ConfigurationOption.datastoreLocation(_:)(v12);
  sub_1000B3BDC(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
  static Tips.configure(_:)(v10);
  swift_bridgeObjectRelease();
  sub_10003634C(0);
  sub_10003634C(1);
  sub_10003634C(2);
  sub_10003634C(3);
  sub_10003634C(4);
  sub_10003634C(5);
  if (qword_100BC2000 != -1)
    swift_once(&qword_100BC2000, sub_1001446E0);
  v15 = sub_1000BA294(&qword_100BC3130);
  v16 = sub_1000AECD4(v15, (uint64_t)&unk_100CAE738);
  sub_1000C5FF8(v16, v2 + 16);
  Tips.Parameter.wrappedValue.getter((_QWORD *)(v2 + 144), v15);
  swift_endAccess(v2 + 16);
  Logger.logObject.getter(v17);
  v18 = sub_10009C0A4();
  if (sub_1000C1990(v18))
  {
    v19 = (uint8_t *)sub_100098710(2);
    *(_WORD *)v19 = 0;
    sub_1000D00B0((void *)&_mh_execute_header, v25, (os_log_type_t)v13, "Started observing tip statuses", v19);
    sub_1000986F0((uint64_t)v19);
  }

  ContinuousClock.init()();
  v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_100BFC620 + dword_100BFC620);
  v20 = (_QWORD *)swift_task_alloc(unk_100BFC624);
  *(_QWORD *)(v2 + 128) = v20;
  *v20 = v2;
  v20[1] = sub_10068DE54;
  sub_10003BC90();
  return v26(v21, v22, v23, 0, 1);
}

uint64_t sub_10068DE54()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  sub_10004A3FC(&v3);
  if (v0)
    swift_errorRelease(v0);
  sub_1000EFA20();
  sub_10003BC90();
  return sub_1000BBE68();
}

uint64_t sub_10068DEC4(uint64_t a1)
{
  os_log_type_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(NSObject **)(v2 + 120);
  Logger.logObject.getter(a1);
  v4 = sub_10009C0A4();
  if (sub_1000C1990(v4))
  {
    v5 = (uint8_t *)sub_100098710(2);
    *(_WORD *)v5 = 0;
    sub_1000D00B0((void *)&_mh_execute_header, v3, v1, "TipCoordinator configured", v5);
    sub_1000986F0((uint64_t)v5);
  }

  v6 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v2 + 136) = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6);
  return swift_task_switch(sub_10068DF84, v7, v8);
}

uint64_t sub_10068DF84()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  sub_10000B5EC(1, (uint64_t)&unk_1009BE0C0);
  sub_1000F4278();
  sub_1000B30A8();
  swift_task_dealloc(v0);
  return sub_1000F4508(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10068DFDC(uint64_t a1)
{
  return 1000000000000000000 * a1;
}

void sub_10068E00C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;

  type metadata accessor for LocationComponentViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100099864();
  sub_100018A98(a1, v1);
  v4 = sub_10000B29C(v1);
  if (v4 != 6)
    sub_10068E074(v4);
}

void sub_10068E074(char a1)
{
  NSObject *v1;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  char v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = type metadata accessor for Tips.InvalidationReason(0);
  __chkstk_darwin(v3);
  sub_100099864();
  if (qword_100BC2500 != -1)
    swift_once(&qword_100BC2500, sub_100159654);
  v4 = sub_100098720();
  sub_1000AECD4(v4, (uint64_t)qword_100CAF2E8);
  sub_1000999A8();
  v5 = sub_10009C0A4();
  if (os_log_type_enabled(v1, v5))
  {
    v6 = a1;
    v7 = (uint8_t *)sub_100098710(12);
    v8 = sub_100098710(32);
    v14 = v8;
    *(_DWORD *)v7 = 136315138;
    LOBYTE(v13) = v6;
    v9 = String.init<A>(describing:)(&v13);
    v11 = v10;
    v13 = sub_1000CE1C8(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
    swift_bridgeObjectRelease(v11);
    sub_10009D7A0((void *)&_mh_execute_header, v1, v5, "Invalidating tip=%s", v7);
    sub_1000988D8(v8);
    sub_1000986F0(v8);
    v12 = (uint64_t)v7;
    a1 = v6;
    sub_1000986F0(v12);
  }

  __asm { BR              X10 }
}

uint64_t sub_10068E338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_BYTE *)(v5 + 192) = a5;
  *(_QWORD *)(v5 + 56) = a4;
  v6 = type metadata accessor for Tips.Status(0);
  *(_QWORD *)(v5 + 64) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 72) = v7;
  *(_QWORD *)(v5 + 80) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000BA294(&qword_100BC30B8);
  *(_QWORD *)(v5 + 88) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BC30E0);
  *(_QWORD *)(v5 + 96) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v5 + 104) = v10;
  *(_QWORD *)(v5 + 112) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000BA294(&qword_100BC30E8);
  *(_QWORD *)(v5 + 120) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v5 + 128) = v12;
  *(_QWORD *)(v5 + 136) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v5 + 144) = v13;
  *(_QWORD *)(v5 + 152) = static MainActor.shared.getter(v13);
  v14 = dispatch thunk of Actor.unownedExecutor.getter(v13);
  *(_QWORD *)(v5 + 160) = v14;
  *(_QWORD *)(v5 + 168) = v15;
  return swift_task_switch(sub_10068E450, v14, v15);
}

uint64_t sub_10068E450()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 96);
  sub_10014691C(*(_BYTE *)(v0 + 192));
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  sub_1000DB418((_QWORD *)(v0 + 16), v3);
  Tip.statusUpdates.getter(v3, v4);
  AsyncStream.makeAsyncIterator()(v2);
  sub_1000F3E94(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  v5 = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  v6 = static MainActor.shared.getter(v5);
  *(_QWORD *)(v0 + 176) = v6;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v8 = sub_1000DC274(v7);
  return AsyncStream.Iterator.next(isolation:)(v8, v6, &protocol witness table for MainActor);
}

uint64_t sub_10068E534()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  sub_10004A3FC(&v2);
  sub_10009880C();
  return sub_1000BBE68();
}

uint64_t sub_10068E578()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  if (_s7Weather24LocationCompositionStateOwet_0(v1, 1, v2) == 1)
  {
    v3 = *(_QWORD *)(v0 + 136);
    v4 = *(_QWORD *)(v0 + 112);
    v5 = *(_QWORD *)(v0 + 80);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(v3, *(_QWORD *)(v0 + 120));
    swift_release();
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v1);
    swift_task_dealloc(v5);
    return sub_1000F4508(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 72);
    v7 = *(_QWORD *)(v0 + 80);
    v9 = *(unsigned __int8 *)(v0 + 192);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v7, v1, v2);
    sub_1000541B0(v7, v9);
    v10 = sub_1000BD208(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
    v11 = static MainActor.shared.getter(v10);
    *(_QWORD *)(v0 + 176) = v11;
    v12 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    v13 = sub_1000DC274(v12);
    return AsyncStream.Iterator.next(isolation:)(v13, v11, &protocol witness table for MainActor);
  }
}

void sub_10068E69C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v0 = type metadata accessor for ObservationRegistrar(0);
  sub_10003BC44(v0);
  sub_10004A298();
}

uint64_t sub_10068E6E4()
{
  uint64_t v0;

  sub_10068E69C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10068E708()
{
  return type metadata accessor for TipCoordinator(0);
}

uint64_t sub_10068E710()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10068E73C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_BYTE *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = swift_task_alloc(dword_100BFC5FC);
  v4 = (_QWORD *)sub_1000C00C0(v3);
  v5 = sub_1000BEB64(v4);
  return sub_10068DA2C(v5, v6, v7, v1, v2);
}

uint64_t sub_10068E7A4(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v7 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = swift_task_alloc(a2[1]);
  v5 = (_QWORD *)sub_1000C00C0(v4);
  *v5 = v2;
  v5[1] = sub_10068E804;
  return v7(a1);
}

uint64_t sub_10068E804()
{
  uint64_t v0;

  sub_100098D14();
  return sub_1000950D8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10068E82C(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  unsigned __int8 v19;
  uint64_t v20;

  sub_1000BA294(&qword_100BC30C8);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100120F64(a1, (uint64_t)v16);
  v17 = type metadata accessor for TaskPriority(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v17) == 1)
  {
    sub_100120F24((uint64_t)v16);
    result = 0;
    if ((a2 & 1) == 0)
      goto LABEL_3;
  }
  else
  {
    v19 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
    result = v19;
    if ((a2 & 1) == 0)
    {
LABEL_3:
      if ((a3 & 1) != 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  result |= 0x100uLL;
  if ((a3 & 1) != 0)
  {
LABEL_4:
    result |= 0x400uLL;
    if ((a4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  if ((a4 & 1) == 0)
  {
LABEL_5:
    if ((a5 & 1) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_15:
  result |= 0x800uLL;
  if ((a5 & 1) != 0)
LABEL_6:
    result |= 0x1000uLL;
LABEL_7:
  if ((a6 & 1) != 0)
    result |= 0x2000uLL;
  if ((a7 & 1) != 0)
    return result | 0x4000;
  return result;
}

uint64_t sub_10068E954()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10068E978()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v2 = *(_QWORD *)(*v1 + 104);
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *(_QWORD *)(*v1 + 64);
  v6 = *v1;
  *(_QWORD *)(v6 + 112) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0)
  {
    sub_10003BC90();
    return swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v6 + 88));
    sub_1000B30A8();
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
}

uint64_t sub_10068EA1C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  sub_1000B30A8();
  return sub_1000950D8(*(uint64_t (**)(void))(v0 + 8));
}

void sub_10068EA4C()
{
  uint64_t v0;

  sub_1000CD954();
  sub_100028CC8();
  sub_1000C0E60(v0);
  sub_10004A298();
}

void sub_10068EA6C(unsigned __int8 *a1)
{
  uint64_t v1;

  v1 = sub_10009968C(a1);
  sub_10000B5EC(v1, (uint64_t)&unk_1009BE0C0);
  sub_10004A298();
}

void sub_10068EA98()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 41) = *(_BYTE *)(v0 + 24);
  sub_1001465DC();
}

void sub_10068EACC()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1000CD954();
  sub_1001464E8();
  *v0 = v1;
  sub_10004A298();
}

uint64_t sub_10068EAF0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_10068EB1C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_BYTE *)(v0 + 40);
  v3 = swift_task_alloc(dword_100BFC64C);
  v4 = (_QWORD *)sub_1000C00C0(v3);
  v5 = sub_1000BEB64(v4);
  return sub_10068E338(v5, v6, v7, v1, v2);
}

void sub_10068EB84()
{
  uint64_t v0;

  sub_1000CD954();
  sub_10001C170();
  sub_1000C0E60(v0);
  sub_10004A298();
}

void sub_10068EBA4(unsigned __int8 *a1)
{
  uint64_t v1;

  v1 = sub_10009968C(a1);
  sub_10000B5EC(v1, (uint64_t)&unk_1009BE110);
  sub_10004A298();
}

void sub_10068EBD0()
{
  uint64_t v0;

  sub_1000CD954();
  sub_100146AE8();
  sub_1000C0E60(v0);
  sub_10004A298();
}

void sub_10068EBF0(unsigned __int8 *a1)
{
  uint64_t v1;

  v1 = sub_10009968C(a1);
  sub_10000B5EC(v1, (uint64_t)&unk_1009BE138);
  sub_10004A298();
}

void sub_10068EC1C()
{
  uint64_t v0;

  sub_1000CD954();
  sub_10068D440();
  sub_1000C0E60(v0);
  sub_10004A298();
}

void sub_10068EC3C(unsigned __int8 *a1)
{
  uint64_t v1;

  v1 = sub_10009968C(a1);
  sub_10000B5EC(v1, (uint64_t)&unk_1009BE160);
  sub_10004A298();
}

void sub_10068EC68()
{
  uint64_t v0;

  sub_1000CD954();
  sub_10068D4A4();
  sub_1000C0E60(v0);
  sub_10004A298();
}

void sub_10068EC88(unsigned __int8 *a1)
{
  uint64_t v1;

  v1 = sub_10009968C(a1);
  sub_10000B5EC(v1, (uint64_t)&unk_1009BE188);
  sub_10004A298();
}

void sub_10068ECB4()
{
  uint64_t v0;

  sub_1000CD954();
  sub_10068D508();
  sub_1000C0E60(v0);
  sub_10004A298();
}

void sub_10068ECD4(unsigned __int8 *a1)
{
  uint64_t v1;

  v1 = sub_10009968C(a1);
  sub_10000B5EC(v1, (uint64_t)&unk_1009BE1B0);
  sub_10004A298();
}

void sub_10068ED00()
{
  uint64_t v0;

  sub_1000CD954();
  sub_10068D56C();
  sub_1000C0E60(v0);
  sub_10004A298();
}

void sub_10068ED20(unsigned __int8 *a1)
{
  uint64_t v1;

  v1 = sub_10009968C(a1);
  sub_10000B5EC(v1, (uint64_t)&unk_1009BE1D8);
  sub_10004A298();
}

void sub_10068ED4C()
{
  uint64_t v0;

  sub_1000CD954();
  sub_100146A74();
  sub_1000C0E60(v0);
  sub_10004A298();
}

void sub_10068ED6C(unsigned __int8 *a1)
{
  uint64_t v1;

  v1 = sub_10009968C(a1);
  sub_10000B5EC(v1, (uint64_t)&unk_1009BE200);
  sub_10004A298();
}

void sub_10068ED98()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 32) = *(_BYTE *)(v0 + 24);
}

void sub_10068EDA8()
{
  uint64_t v0;

  sub_1000CD954();
  sub_1001468B8();
  sub_1000C0E60(v0);
  sub_10004A298();
}

void sub_10068EDC8(unsigned __int8 *a1)
{
  uint64_t v1;

  v1 = sub_10009968C(a1);
  sub_10000B5EC(v1, (uint64_t)&unk_1009BE228);
  sub_10004A298();
}

void sub_10068EDF4()
{
  uint64_t v0;

  sub_1000CD954();
  sub_100146A10();
  sub_1000C0E60(v0);
  sub_10004A298();
}

void sub_10068EE14(unsigned __int8 *a1)
{
  uint64_t v1;

  v1 = sub_10009968C(a1);
  sub_10000B5EC(v1, (uint64_t)&unk_1009BE250);
  sub_10004A298();
}

void sub_10068EE40()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 34) = *(_BYTE *)(v0 + 24);
}

void sub_10068EE50()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1000CD954();
  sub_10068D01C();
  *v0 = v1;
  sub_10004A298();
}

uint64_t sub_10068EE74()
{
  uint64_t v0;

  return sub_10068D0F0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_10068EE8C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1000CD954();
  sub_10068D334();
  *v0 = v1;
  sub_10004A298();
}

uint64_t sub_10068EEB0()
{
  uint64_t v0;

  return sub_10068D408(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10068EEC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MapComponentViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double sub_10068EF14()
{
  return sub_1001464E8();
}

uint64_t sub_10068EF1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int v46;
  int v47;
  char v48;
  char v49;
  uint64_t v50;
  int v51;
  void *v52;
  id v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  id v57;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  void *v80;
  int *v81;
  uint64_t *v82;
  uint64_t v84;
  uint64_t countAndFlagsBits;
  uint64_t v86;
  uint64_t v87;
  void *object;
  int v89;
  _BOOL4 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  Swift::String v104;
  Swift::String v105;

  v3 = v2;
  v100 = type metadata accessor for WeatherMenuInput(0);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v87 = v7;
  v8 = sub_10009876C();
  v9 = type metadata accessor for WeatherMapOverlayKind(v8);
  v98 = *(_QWORD *)(v9 - 8);
  v99 = v9;
  __chkstk_darwin(v9);
  sub_100088FDC();
  v97 = v10;
  sub_1000BA294(&qword_100BC35F8);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100088FDC();
  v103 = v12;
  v13 = sub_10009876C();
  v14 = type metadata accessor for MapsConfiguration(v13);
  v95 = *(_QWORD *)(v14 - 8);
  v96 = v14;
  __chkstk_darwin(v14);
  sub_100088FDC();
  v94 = v15;
  v16 = sub_10009876C();
  v17 = type metadata accessor for AppConfiguration(v16);
  v92 = *(_QWORD *)(v17 - 8);
  v93 = v17;
  __chkstk_darwin(v17);
  sub_100088FDC();
  v91 = v18;
  sub_1000BA294(qword_100BC6008);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  sub_1000986FC();
  v86 = v20;
  __chkstk_darwin(v21);
  v102 = (uint64_t)&v84 - v22;
  v23 = sub_10009876C();
  v24 = type metadata accessor for PreviewLocation(v23);
  sub_1000B42B0();
  __chkstk_darwin(v25);
  sub_100098728();
  v28 = v27 - v26;
  type metadata accessor for ModalViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v29);
  sub_100098728();
  v32 = v31 - v30;
  type metadata accessor for LocationPreviewViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v33);
  sub_100098728();
  v36 = v35 - v34;
  sub_1000BA294(&qword_100BC5F48);
  sub_1000B42B0();
  __chkstk_darwin(v37);
  sub_1000986FC();
  v101 = v38;
  __chkstk_darwin(v39);
  v41 = (char *)&v84 - v40;
  __chkstk_darwin(v42);
  v44 = (char *)&v84 - v43;
  sub_1000988B8((uint64_t)&v84 - v43, 1);
  sub_100080C0C(a1, v32, type metadata accessor for ModalViewState);
  if (swift_getEnumCaseMultiPayload(v32))
  {
    sub_1000215BC(v32, type metadata accessor for ModalViewState);
    v89 = 2;
    v45 = v102;
  }
  else
  {
    sub_100021A14((uint64_t)v44, &qword_100BC5F48);
    sub_10007802C(v32, v36, type metadata accessor for LocationPreviewViewState);
    sub_100080C0C(v36, (uint64_t)v44, type metadata accessor for PreviewLocation);
    sub_1000988B8((uint64_t)v44, 0);
    sub_100037768((uint64_t)v44, (uint64_t)v41, &qword_100BC5F48);
    v46 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v41, 1, v24);
    v45 = v102;
    if (v46 == 1)
    {
      sub_1000215BC(v36, type metadata accessor for LocationPreviewViewState);
      sub_100021A14((uint64_t)v41, &qword_100BC5F48);
      v47 = 2;
    }
    else
    {
      sub_10007802C((uint64_t)v41, v28, type metadata accessor for PreviewLocation);
      sub_1000DB418(v3 + 22, v3[25]);
      sub_1003EB0DC(v28, *(_QWORD *)(a1 + *(int *)(v100 + 44)));
      v49 = v48;
      sub_1000215BC(v28, type metadata accessor for PreviewLocation);
      sub_1000215BC(v36, type metadata accessor for LocationPreviewViewState);
      v47 = v49 & 1;
    }
    v89 = v47;
  }
  sub_10068F648(a1, v45);
  v50 = v100;
  v51 = *(unsigned __int8 *)(a1 + *(int *)(v100 + 28));
  v52 = (void *)objc_opt_self(NSBundle);
  v53 = objc_msgSend(v52, "mainBundle");
  v104._object = (void *)0x8000000100A0FB40;
  v54._countAndFlagsBits = 0x657370616C6C6F43;
  v54._object = (void *)0xEC00000070614D20;
  v55._countAndFlagsBits = 0;
  v55._object = (void *)0xE000000000000000;
  v104._countAndFlagsBits = 0xD000000000000039;
  v56 = NSLocalizedString(_:tableName:bundle:value:comment:)(v54, (Swift::String_optional)0, (NSBundle)v53, v55, v104);
  countAndFlagsBits = v56._countAndFlagsBits;
  object = v56._object;

  v57 = objc_msgSend(v52, "mainBundle");
  v105._countAndFlagsBits = 0xD000000000000049;
  v105._object = (void *)0x8000000100A0FB80;
  v58._countAndFlagsBits = 0x4D20646E61707845;
  v58._object = (void *)0xEA00000000007061;
  v59._countAndFlagsBits = 0;
  v59._object = (void *)0xE000000000000000;
  v60 = NSLocalizedString(_:tableName:bundle:value:comment:)(v58, (Swift::String_optional)0, (NSBundle)v57, v59, v105);
  v84 = v60._countAndFlagsBits;

  v90 = sub_10068F9A8((uint64_t)v44, (uint64_t)v3);
  v61 = v3[5];
  v62 = v3[6];
  sub_1000DB418(v3 + 2, v61);
  v63 = v91;
  v64 = dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v61, v62);
  v65 = v94;
  AppConfiguration.maps.getter(v64);
  v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v92 + 8))(v63, v93);
  LODWORD(v93) = MapsConfiguration.windOverlayEnabled.getter(v66);
  (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v65, v96);
  v67 = type metadata accessor for UnitManager(0);
  v68 = static UnitManager.standard.getter(v67);
  v69 = UnitManager.temperature.getter();
  swift_release(v68);
  v70 = (uint64_t)v44;
  v71 = v101;
  sub_1000787D4(v70, v101, &qword_100BC5F48);
  sub_100037768(a1 + *(int *)(v50 + 20), v103, &qword_100BC35F8);
  v96 = v69;
  if (v51 == 128)
  {
    v72 = v86;
    sub_1000787D4(v102, v86, qword_100BC6008);
    v73 = v87;
    sub_100080C0C(a1, v87, type metadata accessor for WeatherMenuInput);
    v74 = _s7Weather24LocationCompositionStateOwet_0(v72, 1, v99);
    v75 = v97;
    v76 = v98;
    if (v74 == 1)
    {
      sub_10007A0A8(v97, v73 + *(int *)(v50 + 32), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 16));
      sub_1000215BC(v73, type metadata accessor for WeatherMenuInput);
      sub_100021A14(v72, qword_100BC6008);
    }
    else
    {
      sub_1000215BC(v73, type metadata accessor for WeatherMenuInput);
      sub_10007A0A8(v75, v72, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 32));
    }
    v80 = v60._object;
    v71 = v101;
    v79 = v89;
    v78 = v84;
  }
  else
  {
    sub_100021A14(v102, qword_100BC6008);
    v77 = a1 + *(int *)(v50 + 32);
    v75 = v97;
    v76 = v98;
    sub_10007A0A8(v97, v77, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 16));
    v78 = countAndFlagsBits;
    v79 = v89;
    v80 = object;
  }
  swift_bridgeObjectRelease();
  sub_1000787D4(v71, a2, &qword_100BC5F48);
  v81 = (int *)type metadata accessor for WeatherMenuViewModel(0);
  *(_BYTE *)(a2 + v81[5]) = v79;
  sub_1000787D4(v103, a2 + v81[6], &qword_100BC35F8);
  *(_BYTE *)(a2 + v81[7]) = v51 != 128;
  sub_10007A0A8(a2 + v81[8], v75, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 32));
  v82 = (uint64_t *)(a2 + v81[9]);
  *v82 = v78;
  v82[1] = (uint64_t)v80;
  *(_BYTE *)(a2 + v81[10]) = v90;
  *(_QWORD *)(a2 + v81[11]) = v96;
  *(_BYTE *)(a2 + v81[12]) = v93 & 1;
  return _s7Weather24LocationCompositionStateOwst_0(a2, 0, 1, (uint64_t)v81);
}

uint64_t sub_10068F648@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = a2;
  v3 = sub_1000BA294(&qword_100BC3380);
  __chkstk_darwin(v3);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100BC3460);
  __chkstk_darwin(v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WeatherData(0);
  __chkstk_darwin(v9);
  v38 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000BA294(&qword_100BCD680);
  __chkstk_darwin(v11);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Location.Identifier(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (int *)type metadata accessor for WeatherMenuInput(0);
  sub_100037768(a1 + v18[6], (uint64_t)v13, &qword_100BCD680);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v14) == 1)
  {
    v19 = &qword_100BCD680;
    v20 = (uint64_t)v13;
  }
  else
  {
    v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    v22 = *(_QWORD *)(a1 + v18[9] + 16);
    v23 = Location.Identifier.id.getter(v21);
    sub_1000EED10(v23, v24, v22);
    swift_bridgeObjectRelease();
    v25 = type metadata accessor for LocationWeatherDataState(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v5, 1, v25) == 1)
    {
      sub_100021A14((uint64_t)v5, &qword_100BC3380);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 1, 1, v9);
    }
    else
    {
      sub_1000EADE8();
      sub_1000215BC((uint64_t)v5, type metadata accessor for LocationWeatherDataState);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9) != 1)
      {
        v30 = v38;
        sub_10007802C((uint64_t)v8, v38, type metadata accessor for WeatherData);
        v31 = *(_BYTE *)(a1 + v18[12]);
        v32 = v39;
        sub_1000DB418((_QWORD *)(v39 + 56), *(_QWORD *)(v39 + 80));
        v33 = sub_100023644(v30, v31);
        v35 = v34;
        sub_1000DB418((_QWORD *)(v32 + 96), *(_QWORD *)(v32 + 120));
        v36 = v30 + *(int *)(v9 + 24);
        v27 = v40;
        sub_10005886C(v36, (uint64_t)v33, v35, (uint64_t)v17, v40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000215BC(v30, type metadata accessor for WeatherData);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
        v26 = 0;
        goto LABEL_8;
      }
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    v19 = &qword_100BC3460;
    v20 = (uint64_t)v8;
  }
  sub_100021A14(v20, v19);
  v26 = 1;
  v27 = v40;
LABEL_8:
  v28 = type metadata accessor for WeatherMapOverlayKind(0);
  return _s7Weather24LocationCompositionStateOwst_0(v27, v26, 1, v28);
}

BOOL sub_10068F9A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _BOOL8 v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = sub_1000BA294(&qword_100BC61F0);
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BC5F48);
  __chkstk_darwin(v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PreviewLocation(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100037768(a1, (uint64_t)v9, &qword_100BC5F48);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10) == 1)
  {
    sub_100021A14((uint64_t)v9, &qword_100BC5F48);
    return 0;
  }
  else
  {
    sub_10007802C((uint64_t)v9, (uint64_t)v12, type metadata accessor for PreviewLocation);
    sub_10062FD88();
    v15 = v14;
    v17 = v16;
    sub_10062FB68();
    v19 = v18;
    v21 = v20;
    sub_1000DB418((_QWORD *)(a2 + 136), *(_QWORD *)(a2 + 160));
    sub_1004E18B4(v19, v21, (uint64_t)v6, v15, v17);
    swift_bridgeObjectRelease();
    sub_1000215BC((uint64_t)v12, type metadata accessor for PreviewLocation);
    v22 = type metadata accessor for SavedLocation(0);
    v13 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v6, 1, v22) == 1;
    sub_100021A14((uint64_t)v6, &qword_100BC61F0);
  }
  return v13;
}

_QWORD *sub_10068FB7C()
{
  _QWORD *v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 2);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 7);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 12);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 17);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 22);
  return v0;
}

uint64_t sub_10068FBB8()
{
  uint64_t v0;

  sub_10068FB7C();
  return swift_deallocClassInstance(v0, 216, 7);
}

uint64_t type metadata accessor for WeatherMenuViewModelFactory()
{
  return objc_opt_self(_TtC7Weather27WeatherMenuViewModelFactory);
}

_QWORD *sub_10068FBF8()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 4);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 9);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 14);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 19);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 24);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 29);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 34);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 39);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 44);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 49);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 54);
  return v0;
}

uint64_t sub_10068FC6C()
{
  uint64_t v0;

  sub_10068FBF8();
  return swift_deallocClassInstance(v0, 472, 7);
}

void sub_10068FC8C(uint64_t a1)
{
  sub_1006B71EC(a1);
}

void WeatherChange.Direction.write(to:)(uint64_t a1)
{
  sub_1006B7048(a1);
}

void sub_10068FCB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;

  v3 = v1;
  v5 = sub_100696A54(a1);
  if (!v2)
  {
    v7 = v5;
    v8 = v6;
    sub_1000C3EA0(a1);
    sub_1006B93B8();
    v10 = v9;
    v11 = sub_1000DA104();
    v13 = v12;
    v14 = sub_10009F070();
    static ExternalSearchQuery.read(from:)(v14);
    v20 = v15;
    v21 = v16;
    sub_1000C3EA0(a1);
    sub_1000CDD44(a1, (uint64_t)&type metadata for String);
    v17 = sub_10009F070();
    static ListSessionTrigger.read(from:)(v17);
    v19 = v18;
    sub_1000C3EA0(a1);
    sub_100098740(v3, 90);
    sub_100149094(v7, v8 & 1, v26, v10, v11, v13, v20, v21, v25, v22, v23, v19 & 1, v24);
  }
}

void sub_10068FEAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1006BA978();
  sub_100696B38(v4, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
  if (!v2)
  {
    sub_1000D91F8();
    sub_1006B92C8();
    v6 = v3[4];
    v5 = v3[5];
    sub_1000989F8();
    sub_1000ED338(v0, v6, v5);
    sub_1000986C4();
    if (!v6)
    {
      v8 = v3[6];
      v7 = v3[7];
      sub_1000989F8();
      ExternalSearchQuery.write(to:)(v0, v8, v7);
      sub_1000986C4();
      sub_1000D91F8();
      v9 = sub_1000BA294(&qword_100BC5AA8);
      sub_1000BED20(v0, v9, (uint64_t)&protocol witness table for String);
      v10 = sub_1000BEF10();
      ListSessionTrigger.write(to:)(v10);
      sub_1000D91F8();
    }
  }
  sub_1000B26E8();
}

void sub_100690004()
{
  uint64_t v0;

  sub_10009C82C();
  type metadata accessor for ListViewState._Storage();
  v0 = sub_1006B9530();
  sub_10068FCB4(v0);
  sub_10004A298();
}

void sub_10069002C()
{
  sub_10068FEAC();
  sub_10009ED00();
}

void sub_100690048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;

  sub_1000BE9DC();
  v4 = sub_1006B9C78();
  type metadata accessor for LocationViewerActiveLocationState(v4);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100079FBC();
  sub_10009F070();
  sub_1006B8B9C();
  if (!v1)
  {
    sub_1006B93B8();
    v7 = v6;
    sub_1006B9FAC(v3);
    v9 = v8;
    v10 = sub_10009F070();
    static NotificationAuthorizationState.read(from:)(v10);
    v12 = v11;
    sub_1000C3EA0(v3);
    sub_1006B93B8();
    v14 = v13;
    swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
    sub_100133204(v2, v7, v9 & 1, v12, v15, v14);
  }
  sub_10009ECD4();
  sub_100089054();
}

#error "1006901E0: call analysis failed (funcsize=71)"

void sub_1006902A4()
{
  uint64_t v0;

  v0 = sub_10009C82C();
  type metadata accessor for LocationViewerViewState._Storage(v0);
  sub_1006B9530();
  sub_100690048();
  sub_10004A298();
}

void sub_1006902CC()
{
  sub_10069016C();
  sub_10009ED00();
}

void sub_1006902E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, unsigned __int8 a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char v108;

  sub_100099310();
  v107 = v15;
  v100 = v14;
  v21 = sub_1000BDD30();
  type metadata accessor for ModalViewState(v21);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  v24 = sub_1000BF254(v23, v90);
  type metadata accessor for ViewState(v24);
  sub_1000B42B0();
  __chkstk_darwin(v25);
  v104 = (uint64_t)&v90 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100098778();
  v102 = *(_QWORD *)(v27 - 8);
  v103 = v27;
  sub_10009D98C();
  __chkstk_darwin(v28);
  v105 = (char *)&v90 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimeState(0);
  sub_1000B42B0();
  __chkstk_darwin(v30);
  v31 = sub_1000C1E78();
  type metadata accessor for NotificationsOptInState(v31);
  sub_1000B42B0();
  __chkstk_darwin(v32);
  v33 = sub_100089108();
  type metadata accessor for LocationsState(v33);
  sub_1000B42B0();
  __chkstk_darwin(v34);
  v35 = sub_1000C19E4();
  type metadata accessor for EnvironmentState(v35);
  sub_1000B42B0();
  __chkstk_darwin(v36);
  v37 = sub_1000BE9F0();
  type metadata accessor for AppConfiguration(v37);
  sub_100099300();
  __chkstk_darwin(v38);
  sub_1006B98B8();
  sub_1000B42B0();
  __chkstk_darwin(v39);
  sub_10007A130();
  v106 = v13;
  v40 = v107;
  v41 = static Set<>.read(from:)(v13, &type metadata for String, &protocol witness table for String, &protocol witness table for String, &protocol witness table for String);
  if (!v40)
  {
    v107 = v41;
    v95 = v17;
    v96 = v18;
    v97 = v14;
    v98 = v16;
    v99 = v20;
    v42 = v106;
    sub_1006B71EC(v106);
    v44 = v43;
    static AppConfiguration.read(from:)(v42);
    sub_10011DF3C(v99, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 32));
    v45 = sub_1006B91B8();
    sub_1006B45EC(v45, v46, v47, v48, v49, v50, v51, v52, v90, v91, SBYTE1(v91), SBYTE2(v91), SBYTE3(v91), SBYTE4(v91), SBYTE5(v91), SBYTE6(v91), SHIBYTE(v91));
    sub_1006B4F50();
    static NotificationAuthorizationState.read(from:)(v42);
    v108 = v53;
    v54 = sub_1006BA394();
    sub_1000D02A0((uint64_t)&unk_100BFCA30);
    v56 = v55;
    sub_1000D02A0((uint64_t)&unk_100BFCA38);
    v58 = v57;
    v94 = v54;
    v59 = sub_1000F3EA0(v42, v54, v56, v57);
    v60 = static Array<A>.read(from:)(v42, v94, v56, v58);
    v94 = v59;
    sub_100696020(v42, v61, v62, v63, v64, v65, v66, v67, v90, v91, SBYTE1(v91), SBYTE2(v91), SBYTE3(v91), SBYTE4(v91), SBYTE5(v91), SBYTE6(v91), SHIBYTE(v91));
    v68 = v105;
    static Date.read(from:)(v42);
    (*(void (**)(uint64_t, char *, uint64_t))(v102 + 32))(v95, v68, v103);
    v69 = sub_1006B91B8();
    sub_1005E249C(v69, v70, v71, v72, v73, v74, v75, v76, v90, v91, SWORD2(v91), SBYTE6(v91), SHIBYTE(v91));
    sub_1006B5A88(v106, v77, v78, v79, v80, v81, v82, v83, v90, v91, SWORD2(v91), SBYTE6(v91), SHIBYTE(v91));
    v84 = sub_1000DA104();
    v105 = v85;
    v86 = v84;
    sub_10003BDE0();
    sub_1000BD044((uint64_t)&unk_100BFCA40);
    sub_1000BD044((uint64_t)&unk_100BFCA48);
    v87 = sub_1006B934C();
    sub_10009E900();
    sub_1000BD044((uint64_t)&unk_100BFCA50);
    sub_1000BD044((uint64_t)&unk_100BFCA58);
    v103 = sub_1006B934C();
    sub_1000C3EA0(v106);
    v93 = a13;
    sub_1006B9148();
    sub_1000BD044((uint64_t)&unk_100BFCA60);
    sub_1000BD044((uint64_t)&unk_100BFCA68);
    v102 = sub_1006B934C();
    v92 = sub_10009985C();
    v91 = sub_10016ED30();
    sub_1006B6D94();
    sub_1006B6DD0();
    sub_1000C67A8((uint64_t)&unk_100BFCA80);
    sub_1000C67A8((uint64_t)&unk_100BFCA88);
    v88 = sub_1006B934C();
    swift_allocObject(v100, *(unsigned int *)(v100 + 48), *(unsigned __int16 *)(v100 + 52));
    *(_QWORD *)&v89 = v86;
    *((_QWORD *)&v89 + 1) = v105;
    sub_1000DB488(v107, v44, v99, v98, v97, v108, v94, v60, v96, v95, v104, v101, v89, v87, v103, v93, v102, v88);
  }
  sub_1000B44B0();
}

void sub_100690A4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  sub_100099310();
  v6 = v5;
  sub_1000BD65C();
  sub_1000B42B0();
  __chkstk_darwin(v7);
  v9 = sub_1006B9B64(v8, v65);
  type metadata accessor for ViewState(v9);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  v12 = sub_1000BF254(v11, v66);
  type metadata accessor for TimeState(v12);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  v14 = sub_1000BD1E4();
  type metadata accessor for NotificationsOptInState(v14);
  sub_1000B42B0();
  __chkstk_darwin(v15);
  v16 = sub_1000BE9F0();
  v17 = type metadata accessor for LocationsState(v16);
  sub_1000B42B0();
  __chkstk_darwin(v18);
  v19 = sub_1000C1E78();
  type metadata accessor for EnvironmentState(v19);
  sub_1000B42B0();
  __chkstk_darwin(v20);
  sub_1006B98B8();
  sub_1000B42B0();
  __chkstk_darwin(v21);
  sub_100099234();
  v22 = *(_QWORD *)(v0 + 16);
  sub_100094EDC();
  v71 = v6;
  Set<>.write(to:)(v6, v22, &type metadata for String, &protocol witness table for String, &protocol witness table for String, &protocol witness table for String);
  if (!v1)
  {
    v70 = (int *)v17;
    v72 = v2;
    sub_10009934C();
    sub_1006B7048(v6);
    v23 = v0;
    sub_100078058(v0 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_appConfiguration, v4, type metadata accessor for AppConfigurationState);
    AppConfiguration.write(to:)(v6);
    sub_1000BF3B4();
    v24 = v0 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment;
    swift_beginAccess(v23 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment, &v73, 0, 0);
    sub_100078058(v24, v3, type metadata accessor for EnvironmentState);
    sub_1006B4418();
    sub_1000BF3B4();
    sub_100078058(v23 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations, v2, type metadata accessor for LocationsState);
    v25 = sub_1000BA294((uint64_t *)&unk_100C0D170);
    sub_1000BF24C((uint64_t)&unk_100BFCB28);
    v27 = v26;
    sub_1000BF24C((uint64_t)&unk_100BFCB30);
    Optional<A>.write(to:)(v6, v25, v27);
    v69 = v23;
    v28 = *(_QWORD *)(v2 + v70[5]);
    v29 = sub_1000DB35C();
    sub_1000D02A0((uint64_t)&unk_100BFCB38);
    v31 = v30;
    sub_1000D02A0((uint64_t)&unk_100BFCB40);
    Array<A>.write(to:)(v6, v28, v29, v31, v32);
    v33 = *(_QWORD *)(v72 + v70[6]);
    v34 = sub_1000BE878();
    sub_1000BD664((uint64_t)&unk_100BFCB48);
    v36 = v35;
    sub_1000BD664((uint64_t)&unk_100BFCB50);
    sub_1006B9A9C(v71, v33, v34, v36, v37);
    sub_1000AE824();
    sub_1000BD664((uint64_t)&unk_100BFCB58);
    v39 = v38;
    sub_1000BD664((uint64_t)&unk_100BFCB60);
    v40 = sub_1006BA77C();
    sub_1006B9A9C(v40, v41, v42, v39, v43);
    v44 = *(_QWORD *)(v72 + v70[8]);
    v45 = sub_1000992C4();
    sub_1000BF24C((uint64_t)&unk_100BFCA08);
    v47 = v46;
    sub_1000BF24C((uint64_t)&unk_100BFCA10);
    v68 = v47;
    sub_1006B9484(v71, v44, v45, v47, v48);
    sub_100098AA0();
    sub_10007A100((uint64_t)&unk_100BFCB68);
    v50 = v49;
    sub_10007A100((uint64_t)&unk_100BFCB70);
    v51 = sub_1006BA77C();
    sub_1006B9A9C(v51, v52, v53, v50, v54);
    Dictionary<>.write(to:)(v71, *(_QWORD *)(v72 + v70[10]), &type metadata for String, v34);
    sub_1006B9AC4();
    sub_1006B4DB0(v71, *(_QWORD *)(v72 + v70[12]), *(_QWORD *)(v72 + v70[12] + 8), *(unsigned __int8 *)(v72 + v70[12] + 16), v55, v56, v57, v58, v67, v68);
    sub_1006BA8F4();
    sub_1000BF24C((uint64_t)&unk_100BFCB78);
    sub_1000BF24C((uint64_t)&unk_100BFCB80);
    sub_1006B9AC4();
    sub_1006BA1F4();
    sub_1000BF3B4();
    v59 = *(_BYTE *)(v69 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notifications);
    sub_10009EF94();
    sub_1000989F8();
    NotificationAuthorizationState.write(to:)(v71, v59);
    sub_1006BA394();
    sub_1000D02A0((uint64_t)&unk_100BFCA30);
    sub_1000D02A0((uint64_t)&unk_100BFCA38);
    sub_1000BE954();
    sub_1000BE954();
    swift_bridgeObjectRelease();
    sub_1000986E8();
    sub_10009F04C(v69 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notificationsOptIn, v60, type metadata accessor for NotificationsOptInState);
    sub_1006BA24C();
    sub_1006962D4();
    sub_1000BF3B4();
    sub_1006B9E70(v69 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_time);
    v61 = sub_1006BA24C();
    Date.write(to:)(v61);
    sub_1006B97E0();
    sub_1006B9E70(v69 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view);
    v62 = sub_1006BA24C();
    sub_1005E22D8(v62);
    sub_1006B97E0();
    sub_1006B9E70(v69 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_modalView);
    sub_1006BA24C();
    sub_1006B568C();
    sub_1006B97E0();
    v64 = *(_QWORD *)(v69 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData);
    v63 = *(_QWORD *)(v69 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 8);
    sub_10009EF94();
    sub_100094EDC();
    sub_1000989F8();
    String.write(to:)(v71, v64, v63);
    sub_10003BDE0();
    sub_1000BD044((uint64_t)&unk_100BFCA40);
    sub_1000BD044((uint64_t)&unk_100BFCA48);
    sub_1006B9AC4();
    sub_1006BA1F4();
    sub_10009E900();
    sub_1000BD044((uint64_t)&unk_100BFCA50);
    sub_1000BD044((uint64_t)&unk_100BFCA58);
    sub_1006B9AC4();
    sub_1006BA1F4();
    sub_1000986C4();
    sub_10009934C();
    sub_1000986E8();
    sub_10009EF94();
    sub_1006B9DC4(v71);
    sub_1006B9148();
    sub_1000BF24C((uint64_t)&unk_100BFCA60);
    sub_1000BF24C((uint64_t)&unk_100BFCA68);
    sub_1006B9AC4();
    sub_1006BA1F4();
    sub_1000986E8();
    sub_10009985C();
    sub_10016ED30();
    sub_1006B6D94();
    sub_1006B6DD0();
    sub_1000BF24C((uint64_t)&unk_100BFCA80);
    sub_1000BF24C((uint64_t)&unk_100BFCA88);
    sub_10009EF94();
    sub_1006B9AC4();
    sub_1006BA1F4();
  }
  swift_bridgeObjectRelease();
  sub_1000B44B0();
}

void sub_10069150C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v0 = sub_10009C82C();
  type metadata accessor for MainState._Storage(v0);
  v1 = sub_1006B9530();
  sub_1006902E8(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, SWORD2(v10), SBYTE6(v10), HIBYTE(v10));
  sub_10004A298();
}

void sub_100691534()
{
  sub_100690A4C();
  sub_10009ED00();
}

void sub_100691550(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;

  sub_100695918(a1);
  v4 = v3;
  if (!v2)
  {
    v5 = HIBYTE(v3);
    v6 = v3 >> 8;
    v7 = (_BYTE *)sub_100098740(v1, 20);
    v7[16] = v4;
    v7[17] = v6;
    v7[18] = BYTE2(v4) & 1;
    v7[19] = v5;
  }
}

void sub_1006915AC()
{
  sub_1006BA1B0();
}

void sub_1006915DC(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;

  sub_100695918(a1);
  v3 = v2;
  if (!v1)
  {
    v4 = HIBYTE(v2);
    v5 = v2 >> 8;
    v6 = type metadata accessor for NotificationsOptInViewState._Storage();
    v7 = (_BYTE *)sub_100098740(v6, 20);
    v7[16] = v3;
    v7[17] = v5;
    v7[18] = BYTE2(v3) & 1;
    v7[19] = v4;
  }
}

void sub_10069163C()
{
  sub_1006BA1B0();
}

void sub_10069166C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57[3];
  char v58;
  char v59;
  unsigned int v60;

  sub_100099310();
  v16 = v13;
  v18 = v17;
  sub_10009896C();
  sub_1000AE898();
  __chkstk_darwin(v19);
  sub_10004A2E8();
  v20 = sub_10009F070();
  sub_100695A8C(v20, v21);
  if (!v14)
  {
    v22 = sub_1000DA104();
    v24 = v23;
    sub_1006B93B8();
    v60 = v25;
    v26 = sub_1000DA104();
    v28 = v27;
    v52 = v26;
    sub_1006B93B8();
    HIDWORD(v51) = v29;
    sub_1000CDD44(v18, (uint64_t)&type metadata for String);
    sub_1000CDD44(v18, (uint64_t)&type metadata for String);
    sub_1006B9D24();
    v49 = v30;
    sub_1006B9D18();
    v50 = v31;
    sub_1006B93B8();
    HIDWORD(v47) = v32;
    v33 = sub_100483D64();
    sub_1006BA6B0(v33);
    sub_1006B84F0();
    v34 = sub_1006B852C();
    v46 = sub_1006B9C50(v34, (uint64_t)&unk_100B76520, v35, v36, v34);
    v37 = sub_1006B8568();
    sub_1006BA6B0(v37);
    sub_1006B85A4();
    v38 = sub_1006B85E0();
    v41 = sub_1006B9C50(v38, (uint64_t)&unk_100B76490, v39, v40, v38);
    sub_1006BA6B0(v41);
    v42 = sub_10009F070();
    static URL.read(from:)(v42);
    sub_1000C3EA0(v18);
    sub_1006B9FAC(v18);
    BYTE1(v45) = v43 & 1;
    LOBYTE(v45) = a13;
    LOBYTE(v44) = BYTE4(v47);
    swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    sub_1001EE2F0((uint64_t)v57, v22, v24, v60, v52, v28, HIDWORD(v51), v55, v56, v49, v50, v44, v46, v48, v15, v45, v46, v47, v28,
      v48,
      v49,
      v50,
      v55,
      v56,
      v51,
      v52,
      v53,
      v54,
      v55,
      v56,
      v57[0],
      v57[1],
      v57[2],
      v58,
      v59);
  }
  sub_10009C884();
  sub_1000B44B0();
}

void sub_1006919F4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[26];

  sub_100099310();
  v5 = v1;
  v6 = sub_1000BDD30();
  type metadata accessor for URL(v6);
  sub_100098B6C();
  __chkstk_darwin(v7);
  sub_10009E540();
  memcpy(v20, v1 + 2, 0xC2uLL);
  sub_1001F5330(v20);
  v8 = sub_1000BEF10();
  sub_100695E5C(v8);
  if (v2)
  {
    sub_1001F53E4(v20);
  }
  else
  {
    sub_1001F53E4(v20);
    v10 = v1[27];
    v9 = v1[28];
    sub_1000989F8();
    sub_1000ED338(v0, v10, v9);
    if (v10)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_1006B92C8();
      v12 = v5[30];
      v11 = v5[31];
      sub_1000989F8();
      sub_1000ED338(v0, v12, v11);
      sub_1000986C4();
      if (!v12)
      {
        sub_1006B92C8();
        v13 = sub_1000BA294(&qword_100BC5AA8);
        sub_1000BED20(v0, v13, (uint64_t)&protocol witness table for String);
        sub_1000BED20(v0, v13, (uint64_t)&protocol witness table for String);
        sub_1006B92C8();
        sub_100483D64();
        sub_1006B84F0();
        v14 = sub_1006B852C();
        v15 = sub_1000989F8();
        sub_1006B9934(v15, v16, (uint64_t)&unk_100B76520);
        sub_1000986C4();
        if (!v14)
        {
          sub_1006B8568();
          sub_1006B85A4();
          v17 = sub_1006B85E0();
          v18 = sub_1000989F8();
          sub_1006B9934(v18, v19, (uint64_t)&unk_100B76490);
          sub_1000986C4();
          if (!v17)
          {
            sub_100099B30(v3, (uint64_t)v5 + OBJC_IVAR____TtCV7Weather29ReportWeatherContentViewModel8_Storage_onlineFeedbackURL, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
            URL.write(to:)(v0);
            sub_1000EFA30(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
            sub_1000D91F8();
            sub_1006BA310();
          }
        }
      }
    }
  }
  sub_1000DB350();
  sub_1000B44B0();
}

void sub_100691C7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v0 = sub_10009C82C();
  type metadata accessor for ReportWeatherContentViewModel._Storage(v0);
  v1 = sub_1006B9530();
  sub_10069166C(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, SWORD2(v10), SBYTE6(v10), SHIBYTE(v10));
  sub_10004A298();
}

void sub_100691CA4()
{
  sub_1006919F4();
  sub_10009ED00();
}

void sub_100691CC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11[12];

  sub_100693274(a1, (uint64_t)v11);
  if (!v2)
  {
    v3 = sub_100098740(v1, 112);
    sub_1006BA520(v3, v4, v5, v6, v7, v8, v9, v10, v11[0]);
  }
  sub_1006B9F24();
  sub_1006BA66C();
}

void sub_100691D00(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = v1[2];
  v4 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[8];
  v9 = v1[12];
  v10 = v1[13];
  v19 = v1[7];
  v20 = v1[9];
  v17 = v1[11];
  v18 = v1[10];
  if (v5 < 0)
  {
    sub_1006BA0A8();
    v16 = v7;
    v12 = v11;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v6);
    sub_100094EDC();
    swift_bridgeObjectRetain(v8);
    sub_1006BA73C();
    if (!v2)
      sub_100696774(a1);
    sub_10019D2B8(v5, v4, v6, v16, v12, v19, v8, v20, v18, v17, v9, v10);
  }
  else
  {
    v14 = v1[6];
    v15 = v1[8];
    swift_retain();
    sub_1006BA73C();
    if (!v2)
      sub_1006919F4();
    sub_10019D2B8(v5, v4, v6, v7, v14, v19, v15, v20, v18, v17, v9, v10);
  }
}

void sub_100691E90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11[12];

  sub_100693274(a1, (uint64_t)v11);
  if (!v1)
  {
    v2 = type metadata accessor for ReportWeatherViewState._Storage();
    v3 = sub_100098740(v2, 112);
    sub_1006BA520(v3, v4, v5, v6, v7, v8, v9, v10, v11[0]);
  }
  sub_1006B9F24();
  sub_1006BA66C();
}

void sub_100691ED4(uint64_t a1)
{
  sub_100691D00(a1);
  sub_10009ED00();
}

void static NotificationAuthorizationState.read(from:)(uint64_t a1)
{
  sub_1006B4960(a1);
}

void NotificationAuthorizationState.write(to:)(uint64_t a1, char a2)
{
  sub_1006B488C(a1, a2);
}

void static LocationAuthorizationState.read(from:)(uint64_t a1)
{
  sub_1006A80AC(a1);
}

void LocationAuthorizationState.write(to:)(uint64_t a1, char a2)
{
  sub_1006A8134(a1, a2);
}

void sub_100691F40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  sub_100099310();
  v4 = v3;
  v6 = v5;
  sub_1000BA294(&qword_100BCB0D0);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  v8 = sub_1000BE9F0();
  type metadata accessor for Location(v8);
  sub_100098B6C();
  __chkstk_darwin(v9);
  v10 = sub_1006B9A00();
  static Location.read(from:)(v10);
  if (!v0)
  {
    sub_1006B69A8(v4);
    v17 = v11;
    v12 = sub_1006BA90C();
    sub_10007A100((uint64_t)&unk_100BFCAB0);
    sub_10007A100((uint64_t)&unk_100BFCAB8);
    sub_10009F80C(v4, v12);
    sub_1006B9528();
    v14 = v13;
    sub_10007A100((uint64_t)&unk_100BFCAA0);
    sub_10007A100((uint64_t)&unk_100BFCAA8);
    sub_10009F80C(v4, v14);
    sub_1006BA610();
    sub_10009C94C(v6, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32));
    v15 = (int *)sub_1006B9BC4();
    *(_BYTE *)(v6 + v15[5]) = v17 & 1;
    sub_1006B9968((uint64_t)v15, v6 + v15[6], &qword_100BCB0D0);
    sub_1006B957C((__n128 *)(v6 + v15[7]));
    *(_QWORD *)(v16 + 16) = v18;
    *(_QWORD *)(v16 + 24) = v19;
    *(_BYTE *)(v16 + 32) = v20;
  }
  sub_10009E33C();
  sub_1000B44B0();
}

void sub_100692124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1006B99A4();
  if (!v0)
  {
    sub_1006B9BC4();
    sub_1006B9FDC();
    sub_1006BA9A4();
    sub_1006B96D8();
    v4 = sub_1000BA294(&qword_100BCB0D0);
    sub_1000C67A8((uint64_t)&unk_100BFCAB0);
    v6 = v5;
    sub_1000C67A8((uint64_t)&unk_100BFCAB8);
    sub_1000FEC5C(v1, v4, v6);
    sub_1000DC624(v2 + *(int *)(v3 + 28));
    sub_1000BA294(&qword_100BC40B0);
    sub_1000BD664((uint64_t)&unk_100BFCAA0);
    sub_1000BD664((uint64_t)&unk_100BFCAA8);
    sub_10011E56C();
  }
  sub_1006B9354();
}

#error "1006922A4: call analysis failed (funcsize=81)"

void sub_100692388()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1006BA570();
  sub_100095100(v2);
  if (!v0)
  {
    type metadata accessor for SearchViewState(0);
    sub_1006B9558();
    sub_1006925F0();
    sub_1006B96E4();
    v3 = sub_1000BA294(&qword_100BC35F8);
    sub_1000D02A0((uint64_t)&unk_100BFCA08);
    v5 = v4;
    sub_1000D02A0((uint64_t)&unk_100BFCA10);
    sub_1000FEC5C(v1, v3, v5);
  }
  sub_1000D9830();
}

void sub_100692450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  sub_100110560();
  v17 = v16;
  v18 = sub_1006B93C4();
  type metadata accessor for CodableError(v18);
  sub_1000C6D9C();
  __chkstk_darwin(v19);
  sub_10009E540();
  sub_1000C3EA0(v17);
  if (!v13)
  {
    switch(a13)
    {
      case 1:
        v20 = sub_1006B91B8();
        static CodableError.read(from:)(v20);
        sub_10011DF3C((uint64_t)v14, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 32));
        sub_1006B98FC();
        v21 = sub_1006B964C();
        goto LABEL_11;
      case 2:
        sub_1006B98FC();
        v21 = sub_1006B9BE4();
        goto LABEL_11;
      case 3:
        v28 = sub_10009BEBC();
        sub_1000D02A0((uint64_t)&unk_100BFCB88);
        v30 = v29;
        sub_1000D02A0((uint64_t)&unk_100BFCB90);
        *v14 = sub_1000F3EA0(v17, v28, v30, v31);
        sub_1006B98FC();
        v21 = sub_1006B965C();
        goto LABEL_11;
      case 4:
        v22 = sub_1006B98FC();
        v21 = (uint64_t)v14;
        v23 = 3;
        goto LABEL_11;
      case 5:
        v22 = sub_1006B98FC();
        v21 = (uint64_t)v14;
        v23 = 4;
LABEL_11:
        swift_storeEnumTagMultiPayload(v21, v22, v23);
        break;
      default:
        sub_1000C56E0();
        sub_10007A100((uint64_t)&qword_100BF4CC0);
        v25 = sub_1000BC670(v24);
        v27 = sub_1000D0A50(v25, v26);
        sub_1000C3D70(v27, enum case for BinaryDecoder.Error.valueNotSupported(_:));
        sub_1000C2294();
        break;
    }
  }
  sub_10009ECD4();
  sub_1000C60F8();
}

void sub_1006925F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  uint64_t v5;
  char *v6;
  uint64_t v7;

  sub_1000BE9DC();
  v0 = sub_1000BDD30();
  type metadata accessor for CodableError(v0);
  sub_100099300();
  __chkstk_darwin(v1);
  v2 = sub_1000992A8();
  type metadata accessor for SearchViewState.ViewState(v2);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_1000DC798(v4, v5, v7);
  v6 = (char *)sub_100692674 + 4 * byte_1009BE42D[sub_1006B9920()];
  __asm { BR              X10 }
}

void sub_100692674()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10009C94C(v2, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
  *(_BYTE *)(v4 - 69) = 1;
  sub_1000E738C();
  if (!v1)
  {
    v5 = sub_1006B9460();
    CodableError.write(to:)(v5);
  }
  sub_10009171C(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_1006B9A90();
  sub_100089054();
}

void static WeatherChange.Direction.read(from:)(uint64_t a1)
{
  sub_1006B71EC(a1);
}

void sub_1006927D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  int *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  sub_100099310();
  v18 = v17;
  v19 = sub_1000C0C34();
  type metadata accessor for WeatherMapTrackingState(v19);
  sub_1000B42B0();
  __chkstk_darwin(v20);
  v21 = sub_1000C1E78();
  type metadata accessor for WeatherMapOverlayKind(v21);
  sub_100098B6C();
  __chkstk_darwin(v22);
  v23 = sub_1006B9EC8();
  sub_100692A78(v23);
  if (!v14)
  {
    v25 = v24;
    sub_100692BD0(v18);
    v27 = v26;
    static WeatherMapOverlayKind.read(from:)(v18);
    sub_1006B9758(v18, (uint64_t)&type metadata for String);
    sub_100692D74();
    sub_10003BDD4();
    *v13 = v25;
    v13[1] = v27;
    v28 = (int *)type metadata accessor for WeatherMapPresentationState(0);
    sub_10011DF3C((uint64_t)&v13[v28[6]], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 32));
    v29 = &v13[v28[7]];
    *v29 = v30;
    v29[1] = v31;
    sub_10007C75C(v15, (uint64_t)&v13[v28[8]], type metadata accessor for WeatherMapTrackingState);
    v13[v28[9]] = a13;
  }
  sub_10009EDB4();
  sub_1000B44B0();
}

void sub_100692984(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;

  sub_100692B34(a1, *v1);
  if (!v2)
  {
    v3 = sub_1006B9150();
    sub_100692CAC(v3, v4);
    type metadata accessor for WeatherMapPresentationState(0);
    v5 = sub_1006B9150();
    WeatherMapOverlayKind.write(to:)(v5);
    sub_1000BA294(&qword_100BC5AA8);
    sub_10009BD8C();
    sub_1006B9150();
    sub_100692F00();
    sub_1000E738C();
  }
  sub_10009EFE8();
}

void sub_100692A78(uint64_t a1)
{
  uint64_t v1;
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000C1780(a1);
  if (!v1)
  {
    sub_100094FFC();
    if (!v3)
    {
      if (v2 == 3)
      {
        sub_1006B9F50();
      }
      else if (v2 != 2)
      {
        sub_1000C56E0();
        sub_10007A100((uint64_t)&qword_100BF4CC0);
        v5 = sub_1000BC670(v4);
        v7 = sub_1000D0A50(v5, v6);
        sub_1000C3D70(v7, enum case for BinaryDecoder.Error.valueNotSupported(_:));
        sub_1000C2294();
      }
    }
  }
  sub_1000C1348();
}

void sub_100692B34(uint64_t a1, char a2)
{
  uint64_t v2;

  if (a2 == 5)
    goto LABEL_4;
  if (a2 == 4)
  {
    sub_1006BA660();
LABEL_4:
    sub_1000BEB7C();
    goto LABEL_7;
  }
  sub_1000BEB7C();
  if (!v2)
    sub_1006BA960();
LABEL_7:
  sub_1000C1348();
}

void sub_100692BD0(uint64_t a1)
{
  uint64_t v1;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000C1780(a1);
  if (!v1)
  {
    sub_100094FFC();
    if (!v4)
    {
      if (v3 == 3 || v3 == 2)
      {
        sub_1006B9FAC(a1);
      }
      else
      {
        sub_1000C56E0();
        sub_10007A100((uint64_t)&qword_100BF4CC0);
        v6 = sub_1000BC670(v5);
        v8 = sub_1000D0A50(v6, v7);
        sub_1000C3D70(v8, enum case for BinaryDecoder.Error.valueNotSupported(_:));
        sub_1000C2294();
      }
    }
  }
  sub_1000C1348();
}

void sub_100692CAC(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2;

  if (a2 >> 6 && a2 >> 6 != 1)
  {
    sub_1006BA660();
    sub_1000BEB7C();
  }
  else
  {
    sub_1000BEB7C();
    if (!v2)
      sub_1006B6950(a1);
  }
  sub_1000C1348();
}

void static ListSessionTrigger.read(from:)(uint64_t a1)
{
  sub_1006B69A8(a1);
}

void ListSessionTrigger.write(to:)(uint64_t a1)
{
  sub_1006B6950(a1);
}

void sub_100692D74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1000BE9DC();
  v2 = sub_1006B9168();
  type metadata accessor for WeatherMapOverlayKind(v2);
  sub_1000C6D9C();
  __chkstk_darwin(v3);
  sub_100094EC4();
  sub_1000C3EA0(v1);
  if (!v0)
  {
    sub_1006B9AE4();
    if (!(!v6 & v5))
      __asm { BR              X10 }
    sub_1000C56E0();
    sub_10007A100((uint64_t)&qword_100BF4CC0);
    v8 = sub_1000BC670(v7);
    v10 = sub_1000D0A50(v8, v9);
    sub_1000C3D70(v10, enum case for BinaryDecoder.Error.valueNotSupported(_:));
    sub_1000C2294();
  }
  sub_10009ECD4();
  sub_100089054();
}

void sub_100692F00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  sub_1000BE9DC();
  v1 = sub_1000BDD30();
  type metadata accessor for WeatherMapOverlayKind(v1);
  sub_1000C6D9C();
  __chkstk_darwin(v2);
  v3 = sub_1000992A8();
  type metadata accessor for WeatherMapTrackingState(v3);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_1000DC798(v5, v6, v9);
  v7 = sub_1000BA294(&qword_100BC5FD0);
  v8 = (char *)sub_100692F9C + 4 * byte_1009BE436[_s7Weather24LocationCompositionStateOwet_0(v0, 3, v7)];
  __asm { BR              X10 }
}

void sub_100692F9C()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v7 = *v1;
  sub_10008908C(v3, (uint64_t)&v1[*(int *)(v4 + 48)], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32));
  *(_BYTE *)(v6 - 66) = 3;
  sub_1000D91F8();
  if (!v2)
  {
    *(_BYTE *)(v6 - 67) = v7;
    sub_1000D91F8();
    WeatherMapOverlayKind.write(to:)(v0);
  }
  sub_100098748(v3, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  sub_1000C1FB4();
  sub_100089054();
}

void sub_100693094()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[7];
  char v21;

  sub_100099310();
  v3 = v2;
  v5 = v4;
  sub_1000992C4();
  sub_100099300();
  __chkstk_darwin(v6);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10009F070();
  static Location.read(from:)(v9);
  if (!v0)
  {
    sub_1006B9FAC(v3);
    v11 = v10;
    sub_1006B9528();
    v13 = v12;
    sub_10007A100((uint64_t)&unk_100BFCAA0);
    sub_10007A100((uint64_t)&unk_100BFCAA8);
    sub_1000CDD44(v3, v13);
    v14 = v11 & 1;
    sub_1006BA610();
    v15 = v20[5];
    v16 = v20[6];
    v17 = v21;
    sub_10008908C(v5, (uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32));
    v18 = sub_1006B9BDC();
    *(_BYTE *)(v5 + *(int *)(v18 + 20)) = v14;
    sub_1006B957C((__n128 *)(v5 + *(int *)(v18 + 24)));
    *(_QWORD *)(v19 + 16) = v15;
    *(_QWORD *)(v19 + 24) = v16;
    *(_BYTE *)(v19 + 32) = v17;
  }
  sub_10009C884();
  sub_1000B44B0();
}

void sub_1006931CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  Location.write(to:)(a1);
  if (!v2)
  {
    v3 = sub_1006B9BDC();
    sub_1006BA9A4();
    sub_1000DC624(v1 + *(int *)(v3 + 24));
    sub_1000BA294(&qword_100BC40B0);
    sub_1000BD664((uint64_t)&unk_100BFCAA0);
    sub_1000BD664((uint64_t)&unk_100BFCAA8);
    sub_10011E56C();
  }
  sub_1006B92E0();
}

void sub_100693274(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  sub_1000C1780(a1);
  if (!v2)
  {
    if (HIBYTE(v29) == 2)
    {
      v22 = sub_1006B91B8();
      sub_100696630(v22, v23);
      v13 = v31;
      v14 = v32;
      v15 = v33;
      v16 = v34;
      v17 = v35;
      v18 = v36;
      v20 = v37;
      v21 = v38;
      v19 = v39;
      v12 = v30 | 0x8000000000000000;
      goto LABEL_6;
    }
    if (HIBYTE(v29) == 1)
    {
      type metadata accessor for ReportWeatherContentViewModel._Storage(0);
      v4 = sub_1006B91B8();
      sub_10069166C(v4, v5, v6, v7, v8, v9, v10, v11, v28, v29, SWORD2(v29), SBYTE6(v29), SHIBYTE(v29));
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0uLL;
      v21 = 0uLL;
LABEL_6:
      *(_QWORD *)a2 = v12;
      *(_QWORD *)(a2 + 8) = v13;
      *(_QWORD *)(a2 + 16) = v14;
      *(_QWORD *)(a2 + 24) = v15;
      *(_QWORD *)(a2 + 32) = v16;
      *(_QWORD *)(a2 + 40) = v17;
      *(_QWORD *)(a2 + 48) = v18;
      *(_OWORD *)(a2 + 56) = v20;
      *(_OWORD *)(a2 + 72) = v21;
      *(_QWORD *)(a2 + 88) = v19;
      return;
    }
    sub_1000C56E0();
    sub_10007A100((uint64_t)&qword_100BF4CC0);
    v25 = sub_1000BC670(v24);
    v27 = sub_1000D0A50(v25, v26);
    sub_1000C3D70(v27, enum case for BinaryDecoder.Error.valueNotSupported(_:));
    sub_1000C2294();
  }
}

void sub_1006933B8()
{
  const void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD v4[12];
  _QWORD __src[12];
  _BYTE __dst[96];

  sub_1006B95D4();
  sub_1001C4B3C(v0, v4);
  sub_1001C4B3C(v2, __src);
  if ((__src[0] & 0x8000000000000000) != 0)
  {
    __src[0] &= ~0x8000000000000000;
    memcpy(__dst, __src, sizeof(__dst));
    sub_1006BA640();
    sub_1000E738C();
    if (!v1)
    {
      v3 = sub_1006B9150();
      sub_100696774(v3);
    }
  }
  else
  {
    swift_retain();
    sub_1000E738C();
    if (!v1)
    {
      sub_1006B9460();
      sub_1006919F4();
    }
    sub_1006B8694((uint64_t *)v2);
  }
}

void sub_1006934A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  sub_100099310();
  v6 = v5;
  v8 = v7;
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100099234();
  sub_1000BA294(&qword_100BC6CB8);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  v11 = sub_1000992A8();
  type metadata accessor for Location(v11);
  sub_1000AE898();
  __chkstk_darwin(v12);
  v13 = sub_1006B932C();
  static Location.read(from:)(v13);
  if (!v0)
  {
    v29 = v4;
    v23 = v8;
    sub_1006BA914();
    sub_10011DFBC((uint64_t)&unk_100BFCAD0);
    sub_10011DFBC((uint64_t)&unk_100BFCAD8);
    v14 = sub_100098FCC();
    sub_1000CDD44(v14, v15);
    v16 = sub_100098778();
    sub_1000CDD44(v6, v16);
    sub_1006B9528();
    v18 = v17;
    sub_1006B9224((uint64_t)&unk_100BFCAA0);
    sub_1006B9224((uint64_t)&unk_100BFCAA8);
    sub_1000CDD44(v6, v18);
    sub_1006BA9D8();
    v20 = v19;
    v21 = (int *)type metadata accessor for MoonDetailViewState(0);
    v22 = v23 + v21[7];
    sub_10008908C(v23, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32));
    sub_10009E8CC(v2, v23 + v21[5], &qword_100BC6CB8);
    sub_10009E8CC(v29, v23 + v21[6], (uint64_t *)&unk_100BD35A0);
    *(_QWORD *)v22 = v24;
    *(_QWORD *)(v22 + 8) = v25;
    *(_QWORD *)(v22 + 16) = v26;
    *(_QWORD *)(v22 + 24) = v27;
    *(_BYTE *)(v22 + 32) = v28;
    *(_BYTE *)(v23 + v21[8]) = v20;
  }
  sub_10009C884();
  sub_1000B44B0();
}

void sub_100693718()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1006B99A4();
  if (!v0)
  {
    type metadata accessor for MoonDetailViewState(0);
    sub_1006B9C68();
    v4 = sub_1000BA294(&qword_100BC6CB8);
    sub_1000C67A8((uint64_t)&unk_100BFCAD0);
    v6 = v5;
    sub_1000C67A8((uint64_t)&unk_100BFCAD8);
    sub_1000FEC5C(v1, v4, v6);
    sub_1006B96D8();
    v7 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    sub_1000FEC5C(v1, v7, (uint64_t)&protocol witness table for Date);
    sub_1000DC624(v2 + *(int *)(v3 + 28));
    v8 = sub_1000BA294(&qword_100BC40B0);
    sub_1000BD664((uint64_t)&unk_100BFCAA0);
    v10 = v9;
    sub_1000BD664((uint64_t)&unk_100BFCAA8);
    sub_1000FEC5C(v1, v8, v10);
    sub_1006B96E4();
  }
  sub_1006B9354();
}

void sub_100693868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  sub_100099310();
  v39 = v19;
  v21 = v20;
  sub_1000BA294(&qword_100BD0B58);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  sub_100099B54(v23, v35);
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v24);
  v25 = sub_10008909C();
  type metadata accessor for Location(v25);
  sub_10009C7D0();
  __chkstk_darwin(v26);
  v27 = sub_1000C4668();
  type metadata accessor for DetailCondition(v27);
  sub_100098B6C();
  __chkstk_darwin(v28);
  sub_100095304();
  static DetailCondition.read(from:)(v21);
  if (!v14)
  {
    v37 = v13;
    v29 = sub_1006B9150();
    static Location.read(from:)(v29);
    v30 = sub_100098778();
    sub_1006B9758(v21, v30);
    sub_1006B9528();
    sub_10011DFBC((uint64_t)&unk_100BFCAA0);
    sub_10011DFBC((uint64_t)&unk_100BFCAA8);
    v31 = sub_1000C1A00();
    sub_1006B9758(v31, v32);
    v36 = sub_1006BA8FC();
    sub_10011DFBC((uint64_t)&unk_100BFCAC0);
    sub_10011DFBC((uint64_t)&unk_100BFCAC8);
    sub_1006B9758(v21, v36);
    sub_10003BDD4();
    sub_1000B2FD0(v39, v15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 32));
    v33 = (int *)type metadata accessor for ConditionDetailViewState(0);
    sub_10008908C(v39 + v33[5], v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 32));
    sub_10009E8CC(v16, v39 + v33[6], (uint64_t *)&unk_100BD35A0);
    v34 = v39 + v33[7];
    *(_QWORD *)v34 = v40;
    *(_QWORD *)(v34 + 8) = v41;
    *(_QWORD *)(v34 + 16) = v42;
    *(_QWORD *)(v34 + 24) = v43;
    *(_BYTE *)(v34 + 32) = v44;
    sub_10009E8CC(v38, v39 + v33[8], &qword_100BD0B58);
    *(_BYTE *)(v39 + v33[9]) = a13;
  }
  sub_10009EDB4();
  sub_1000B44B0();
}

void sub_100693BA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1006B9690();
  DetailCondition.write(to:)(v2);
  if (!v0)
  {
    v3 = type metadata accessor for ConditionDetailViewState(0);
    v4 = sub_1006B9150();
    Location.write(to:)(v4);
    sub_1006B96D8();
    sub_1000BA294((uint64_t *)&unk_100BD35A0);
    sub_10009BD8C();
    sub_1000DC624(v1 + *(int *)(v3 + 28));
    sub_1000BA294(&qword_100BC40B0);
    sub_1000BD664((uint64_t)&unk_100BFCAA0);
    sub_1000BD664((uint64_t)&unk_100BFCAA8);
    sub_10009BD8C();
    sub_1000BA294(&qword_100BD0B58);
    sub_1000C67A8((uint64_t)&unk_100BFCAC0);
    sub_1000C67A8((uint64_t)&unk_100BFCAC8);
    sub_10009BD8C();
    sub_1000E738C();
  }
  sub_1006B9354();
}

void sub_100693D34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = sub_1000C0C34();
  type metadata accessor for LocationPreviewModalViewState(v4);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  v6 = sub_1000C19E4();
  type metadata accessor for PreviewLocation(v6);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100095304();
  sub_1006BA4E4();
  sub_1006B2980();
  if (!v2)
  {
    v8 = sub_1006BA4E4();
    sub_100693E40(v8, v9, v10, v11, v12, v13, v14, v15, v18, v19, SWORD2(v19), SBYTE6(v19), SHIBYTE(v19));
    sub_10009F7BC(v3, v16, type metadata accessor for PreviewLocation);
    v17 = type metadata accessor for LocationPreviewViewState(0);
    sub_10007C75C(v1, v0 + *(int *)(v17 + 20), type metadata accessor for LocationPreviewModalViewState);
  }
  sub_1006BA1C0();
  sub_1000FDBD8();
}

void sub_100693DF8()
{
  uint64_t v0;

  sub_1006B2BB4();
  if (!v0)
  {
    type metadata accessor for LocationPreviewViewState(0);
    sub_1006B9558();
    sub_100694764();
  }
  sub_1000C1348();
}

void sub_100693E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t);
  uint64_t v94;
  char v95;
  char v96;
  char v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  char *v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t (*v114)(_QWORD, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char v154;

  sub_100099310();
  v149 = v14;
  v20 = v19;
  v141 = v21;
  v22 = sub_1000AE824();
  v136 = *(_QWORD *)(v22 - 8);
  v137 = v22;
  sub_10009D98C();
  __chkstk_darwin(v23);
  v148 = (char *)&v126 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_1006B9BCC();
  sub_1000B42B0();
  __chkstk_darwin(v25);
  sub_10009511C((uint64_t)&v126 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000BA294(&qword_100BCB0D0);
  sub_1000B42B0();
  __chkstk_darwin(v27);
  v135 = (char *)&v126 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_1006B9BC4();
  sub_1000B42B0();
  __chkstk_darwin(v29);
  sub_10009ECB4(v30, v126);
  sub_1000B42B0();
  __chkstk_darwin(v31);
  v33 = sub_10009E408(v32, v126);
  type metadata accessor for MoonDetailViewState(v33);
  sub_1000B42B0();
  __chkstk_darwin(v34);
  v36 = sub_1006B9B84(v35, v126);
  v131 = type metadata accessor for SunriseSunsetDetailViewState(v36);
  sub_1000B42B0();
  __chkstk_darwin(v37);
  v130 = (uint64_t)&v126 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = sub_1006B981C();
  sub_1000B42B0();
  __chkstk_darwin(v39);
  v133 = (char *)&v126 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_1000992C4();
  v139 = *(_QWORD *)(v41 - 8);
  v140 = v41;
  sub_10009D98C();
  __chkstk_darwin(v42);
  sub_1000986FC();
  v144 = v43;
  sub_10009D2A4();
  __chkstk_darwin(v44);
  sub_1000860D0();
  v138 = v45;
  sub_10009D2A4();
  __chkstk_darwin(v46);
  sub_1000860D0();
  v143 = v47;
  sub_10009D2A4();
  __chkstk_darwin(v48);
  sub_1000860D0();
  v142 = v49;
  sub_10009D2A4();
  __chkstk_darwin(v50);
  v51 = sub_1006B9A34();
  v52 = type metadata accessor for AirQualityDetailViewState(v51);
  sub_1000B42B0();
  __chkstk_darwin(v53);
  sub_1006B9880();
  sub_1000B42B0();
  __chkstk_darwin(v54);
  v55 = sub_1000C1E78();
  v56 = type metadata accessor for URL(v55);
  sub_100098BB4();
  __chkstk_darwin(v57);
  sub_100079FBC();
  v58 = v20;
  sub_1006BA40C();
  if (!v14)
  {
    v128 = v17;
    v149 = v56;
    v127 = v13;
    v66 = v18;
    v67 = v146;
    v69 = v147;
    v68 = v148;
    v70 = v58;
    v71 = 9;
    switch(a13)
    {
      case 1:
        goto LABEL_14;
      case 2:
        static URL.read(from:)(v70);
        sub_1006B9D24();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 32))(v141, v15, v149);
        v71 = 0;
        goto LABEL_14;
      case 3:
        sub_100693868(v70, v59, v60, v61, v62, v63, v64, v65, v126, v127, SWORD2(v127), SBYTE6(v127), SHIBYTE(v127));
        sub_1006B9E64(v16, v78, type metadata accessor for ConditionDetailViewState);
        v71 = 1;
        goto LABEL_14;
      case 4:
        sub_1006BA290(v70);
        sub_1006B69A8(9);
        v90 = v89;
        type metadata accessor for CGRect(0);
        sub_1000BD044((uint64_t)&unk_100BFCAA0);
        sub_1000BD044((uint64_t)&unk_100BFCAA8);
        sub_1006BA328(9);
        v103 = sub_1006BA2EC();
        v104 = v152;
        v105 = v153;
        v106 = v154;
        v107 = v127;
        (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v139 + 32))(v127, v66, v140, v103);
        *(_BYTE *)(v107 + *(int *)(v52 + 20)) = v90;
        sub_1006B957C((__n128 *)(v107 + *(int *)(v52 + 24)));
        *(_QWORD *)(v108 + 16) = v104;
        *(_QWORD *)(v108 + 24) = v105;
        *(_BYTE *)(v108 + 32) = v106;
        sub_1006BA320(v107, v109, type metadata accessor for AirQualityDetailViewState);
        v71 = 2;
        goto LABEL_14;
      case 5:
        v79 = v70;
        static Location.read(from:)(v70);
        sub_1006B9EF8();
        sub_1000BD664((uint64_t)&unk_100BFCAA0);
        sub_1000BD664((uint64_t)&unk_100BFCAA8);
        sub_1006B97A8(v79);
        sub_1006B9E48();
        v91 = (uint64_t)v133;
        v92 = sub_100079FDC();
        v93(v92);
        sub_1006BA5F0((__n128 *)(v91 + *(int *)(v134 + 20)));
        sub_1006BA320(v91, v94, type metadata accessor for NextHourPrecipitationDetailViewState);
        v71 = 3;
        goto LABEL_14;
      case 6:
        sub_1006BA290(v70);
        sub_1006B9EF8();
        sub_1000BD664((uint64_t)&unk_100BFCAA0);
        sub_1000BD664((uint64_t)&unk_100BFCAA8);
        sub_1006B97A8(9);
        v80 = v150;
        v81 = v151;
        v82 = v152;
        v83 = v153;
        v84 = v154;
        sub_1006B71EC(9);
        v98 = v97;
        v99 = v130;
        sub_10009BCF8(v130, *(uint64_t (**)(uint64_t, uint64_t))(v139 + 32));
        v100 = v131;
        v101 = v99 + *(int *)(v131 + 20);
        *(_QWORD *)v101 = v80;
        *(_QWORD *)(v101 + 8) = v81;
        *(_QWORD *)(v101 + 16) = v82;
        *(_QWORD *)(v101 + 24) = v83;
        *(_BYTE *)(v101 + 32) = v84;
        *(_BYTE *)(v99 + *(int *)(v100 + 24)) = v98;
        sub_1006BA320(v99, v102, type metadata accessor for SunriseSunsetDetailViewState);
        v71 = 4;
        goto LABEL_14;
      case 7:
        v85 = v145;
        sub_1006934A8();
        sub_1006B9E64(v85, v86, type metadata accessor for MoonDetailViewState);
        v71 = 5;
        goto LABEL_14;
      case 8:
        sub_1006B5EF8();
        sub_1006B9E64(v67, v87, type metadata accessor for NewsArticle);
        v71 = 6;
        goto LABEL_14;
      case 9:
        sub_1006BA7D8(v70);
        sub_1006B69A8(v66);
        v96 = v95;
        type metadata accessor for DetailHeroChartLollipopPosition(0);
        sub_1000BD044((uint64_t)&unk_100BFCAB0);
        sub_1000BD044((uint64_t)&unk_100BFCAB8);
        sub_1006BA328(v66);
        sub_1006B9528();
        v111 = v110;
        sub_1000D02A0((uint64_t)&unk_100BFCAA0);
        sub_1000D02A0((uint64_t)&unk_100BFCAA8);
        v112 = sub_1006BA220();
        static Optional<A>.read(from:)(v112, v111);
        v113 = v139;
        sub_1006BA2EC();
        v117 = v152;
        v148 = v153;
        v118 = v154;
        v119 = v69;
        v120 = sub_10007A0A8(v69, v138, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v113 + 32));
        v121 = v129;
        *(_BYTE *)(v119 + *(int *)(v129 + 20)) = v96;
        sub_1006B9968(v120, v119 + *(int *)(v121 + 24), &qword_100BCB0D0);
        sub_1006B957C((__n128 *)(v119 + *(int *)(v121 + 28)));
        v122 = v148;
        *(_QWORD *)(v123 + 16) = v117;
        *(_QWORD *)(v123 + 24) = v122;
        *(_BYTE *)(v123 + 32) = v118;
        sub_1006B94F0(v119, v124, type metadata accessor for AveragesDetailViewState);
        v71 = 7;
        goto LABEL_14;
      case 10:
        v88 = v70;
        static Location.read(from:)(v70);
        static LocationOfInterest.read(from:)(v88);
        sub_1006B9EF8();
        sub_1000BD664((uint64_t)&unk_100BFCAA0);
        sub_1000BD664((uint64_t)&unk_100BFCAA8);
        sub_1006B97A8(v88);
        sub_1006B9E48();
        sub_1006B97FC(v114);
        v115 = v132;
        (*(void (**)(uint64_t, char *, uint64_t))(v136 + 32))(v66 + *(int *)(v132 + 20), v68, v137);
        sub_1006BA5F0((__n128 *)(v66 + *(int *)(v115 + 24)));
        sub_1006BA320(v66, v116, type metadata accessor for HomeAndWorkRefinementViewState);
        v71 = 8;
LABEL_14:
        v125 = type metadata accessor for LocationPreviewModalViewState(0);
        swift_storeEnumTagMultiPayload(v141, v125, v71);
        break;
      default:
        v73 = sub_1000C56E0();
        sub_10007A100((uint64_t)&qword_100BF4CC0);
        v75 = sub_10009D46C(v73, v74);
        v77 = sub_1006B9678(v75, v76);
        sub_1000AE9B0(v77, enum case for BinaryDecoder.Error.valueNotSupported(_:));
        sub_10009C808();
        break;
    }
  }
  sub_1000B44B0();
}

void sub_100694764()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(_QWORD);
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  sub_100099310();
  sub_1006B9BCC();
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_10009CC24(v3, v25);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  v27 = sub_10009ECB4(v5, v26);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_10009CC04(v7, v27);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  v10 = sub_10009E408(v9, v28);
  type metadata accessor for SunriseSunsetDetailViewState(v10);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  v13 = sub_1000DF598(v12, v29);
  type metadata accessor for NextHourPrecipitationDetailViewState(v13);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  v16 = sub_10009E4B4(v15, v30);
  type metadata accessor for AirQualityDetailViewState(v16);
  sub_1000B42B0();
  __chkstk_darwin(v17);
  v18 = sub_1000C4668();
  type metadata accessor for ConditionDetailViewState(v18);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  sub_100088FDC();
  sub_10009896C();
  sub_1000C6D9C();
  __chkstk_darwin(v20);
  v21 = sub_1000992A8();
  type metadata accessor for LocationPreviewModalViewState(v21);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  sub_10007A130();
  sub_100078058(v0, v1, v23);
  v24 = (char *)sub_1006948D4 + 4 * word_1009BE44E[swift_getEnumCaseMultiPayload(v1)];
  __asm { BR              X10 }
}

void sub_1006948D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000992E4(v1, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32));
  *(_BYTE *)(v4 - 128) = 2;
  sub_1006B9414(*(_QWORD *)(v4 - 72));
  if (!v0)
  {
    v5 = sub_1006BA4C4();
    URL.write(to:)(v5);
  }
  sub_100098820(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1006B93E0();
  sub_1000B44B0();
}

void sub_1006952B0()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 128) = 1;
  sub_1006B9414(*(_QWORD *)(v0 - 72));
  JUMPOUT(0x1006952A4);
}

void sub_1006952EC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_100098778();
  sub_1000C6D9C();
  __chkstk_darwin(v7);
  sub_100094EC4();
  sub_1005D9854();
  sub_100095050();
  if (!v2)
  {
    static Date.read(from:)(a1);
    sub_100095050();
    sub_100095050();
    *a2 = v11;
    v8 = (int *)sub_1006BA90C();
    sub_10008908C((uint64_t)a2 + v8[5], v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
    *(_QWORD *)((char *)a2 + v8[6]) = v10;
    *(_QWORD *)((char *)a2 + v8[7]) = v9;
  }
  sub_1000DB350();
}

void sub_10069542C()
{
  uint64_t v0;
  uint64_t v1;

  sub_1006B95D4();
  sub_1005D9854();
  sub_1000E738C();
  if (!v0)
  {
    v1 = sub_1006BA90C();
    sub_1006B936C();
    sub_1006B9DCC(*(int *)(v1 + 24));
    sub_1000E738C();
    sub_1006B9DCC(*(int *)(v1 + 28));
    sub_1000E738C();
  }
  sub_1000FDBD8();
}

uint64_t sub_1006954E4(uint64_t a1)
{
  return static Set<>.read(from:)(a1, &type metadata for String, &protocol witness table for String, &protocol witness table for String, &protocol witness table for String);
}

uint64_t sub_100695518(uint64_t a1, uint64_t a2)
{
  return Set<>.write(to:)(a1, a2, &type metadata for String, &protocol witness table for String, &protocol witness table for String, &protocol witness table for String);
}

void sub_10069554C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = sub_1000C1780(a1);
  if (!v1
    && sub_1006BA5A0(v2, v3, v4, v5, v6, v7, v8, v9, v14, v15, SWORD2(v15), SBYTE6(v15), HIBYTE(v15)) >= 0xA)
  {
    sub_1000C56E0();
    sub_10007A100((uint64_t)&qword_100BF4CC0);
    v11 = sub_1000BC670(v10);
    v13 = sub_1000D0A50(v11, v12);
    sub_1000C3D70(v13, enum case for BinaryDecoder.Error.valueNotSupported(_:));
    sub_1000C2294();
  }
  sub_100089028();
}

void sub_1006955D4(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100695600(uint64_t a1)
{
  return FixedSizeTypeBinaryCodable.write(to:)(a1);
}

void sub_10069574C(uint64_t a1)
{
  sub_1006B254C(a1);
}

void sub_100695760(uint64_t a1, char a2)
{
  sub_1006B25D4(a1, a2);
}

void static MoonPhase.read(from:)(uint64_t a1)
{
  sub_1006A4B48(a1);
}

void MoonPhase.write(to:)(uint64_t a1, char a2)
{
  sub_1006A4BD0(a1, a2);
}

uint64_t sub_10069579C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_100110560();
  v3 = v2;
  static NotificationAuthorizationState.read(from:)(v2);
  if (!v1)
  {
    v0 = v4;
    v5 = sub_1006BA394();
    sub_1000BF24C((uint64_t)&unk_100BFCA30);
    v7 = v6;
    sub_1000BF24C((uint64_t)&unk_100BFCA38);
    v9 = v8;
    sub_1000F3EA0(v3, v5, v7, v8);
    sub_1000F3EA0(v3, v5, v7, v9);
  }
  return v0;
}

void sub_100695870()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_100110560();
  v2 = v1;
  v4 = v3;
  NotificationAuthorizationState.write(to:)(v3, v5);
  if (!v0)
  {
    v6 = sub_1006BA394();
    sub_1000C67A8((uint64_t)&unk_100BFCA30);
    v8 = v7;
    sub_1000C67A8((uint64_t)&unk_100BFCA38);
    v10 = v9;
    sub_1006BA7BC();
    sub_1006B9484(v11, v12, v13, v14, v15);
    sub_1006B9484(v4, v2, v6, v8, v10);
  }
  sub_1000C60F8();
}

void sub_100695918(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  sub_1006B254C(a1);
  if (!v1)
  {
    sub_1006B8478();
    sub_1006B84B4();
    sub_1000CDD44(a1, (uint64_t)&unk_100B772C0);
    sub_1000C3EA0(a1);
    v3 = sub_1006B91B8();
    sub_1006A4D00(v3);
  }
}

void sub_1006959E0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  sub_1006BA034();
  sub_1006B25D4(v1, v2);
  if (!v0)
  {
    sub_1000BA294(&qword_100BE6330);
    sub_1006B8478();
    sub_1006B84B4();
    sub_1006BA8A0();
    sub_1000FEC5C(v3, v4, v5);
    sub_100098F20();
    v6 = sub_1006B9558();
    sub_1006A4DCC(v6, v7);
  }
  sub_1006B910C();
}

void sub_100695A8C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;

  v5 = static String.read(from:)(a1);
  if (!v2)
  {
    v7 = v5;
    v8 = v6;
    v9 = sub_1000DA104();
    v11 = v10;
    sub_1000C3EA0(a1);
    v12 = sub_1000DA104();
    v14 = v13;
    v43 = v12;
    v15 = sub_1000DA104();
    v41 = v16;
    v42 = v14;
    sub_1000C3EA0(a1);
    sub_1006B4960(a1);
    v40 = v17;
    v18 = sub_1000DA104();
    v39 = v19;
    v37 = sub_1000DA104();
    v38 = v20;
    sub_1000C3EA0(a1);
    sub_1006B9E1C();
    v36 = v21;
    v34 = sub_1000DA104();
    v35 = v22;
    v32 = sub_1000DA104();
    v33 = v23;
    sub_1000C3EA0(a1);
    sub_1006B9E1C();
    v31 = v24;
    v29 = sub_1000DA104();
    v30 = v25;
    sub_1000DA104();
    sub_1000C3EA0(a1);
    sub_1006B9E1C();
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = v9;
    *(_QWORD *)(a2 + 24) = v11;
    *(_BYTE *)(a2 + 32) = v48;
    *(_QWORD *)(a2 + 40) = v43;
    *(_QWORD *)(a2 + 48) = v42;
    *(_QWORD *)(a2 + 56) = v15;
    *(_QWORD *)(a2 + 64) = v41;
    *(_BYTE *)(a2 + 72) = v47;
    *(_BYTE *)(a2 + 73) = v40;
    *(_QWORD *)(a2 + 80) = v18;
    *(_QWORD *)(a2 + 88) = v39;
    *(_QWORD *)(a2 + 96) = v37;
    *(_QWORD *)(a2 + 104) = v38;
    *(_BYTE *)(a2 + 112) = v46;
    *(_BYTE *)(a2 + 113) = v36;
    *(_QWORD *)(a2 + 120) = v34;
    *(_QWORD *)(a2 + 128) = v35;
    *(_QWORD *)(a2 + 136) = v32;
    *(_QWORD *)(a2 + 144) = v33;
    *(_BYTE *)(a2 + 152) = v45;
    *(_BYTE *)(a2 + 153) = v31;
    *(_QWORD *)(a2 + 160) = v29;
    *(_QWORD *)(a2 + 168) = v30;
    sub_1006BA748();
    *(_QWORD *)(a2 + 176) = v27;
    *(_QWORD *)(a2 + 184) = v26;
    *(_BYTE *)(a2 + 192) = v44;
    *(_BYTE *)(a2 + 193) = v28;
  }
}

void sub_100695E5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = sub_1000B2F80(a1);
  if (!v3)
  {
    sub_1000B31A8(v4, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
    v5 = sub_1000BEB7C();
    v6 = sub_1000B31A8(v5, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
    sub_1000B31A8(v6, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
    sub_1000BEB7C();
    sub_1006B488C(v1, *(_BYTE *)(v2 + 73));
    v8 = sub_1000B31A8(v7, *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88));
    sub_1000B31A8(v8, *(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 104));
    v9 = sub_1000BEB7C();
    sub_1006BA948(v9, *(_BYTE *)(v2 + 113));
    v11 = sub_1000B31A8(v10, *(_QWORD *)(v2 + 120), *(_QWORD *)(v2 + 128));
    sub_1000B31A8(v11, *(_QWORD *)(v2 + 136), *(_QWORD *)(v2 + 144));
    v12 = sub_1000BEB7C();
    sub_1006BA948(v12, *(_BYTE *)(v2 + 153));
    v14 = sub_1000B31A8(v13, *(_QWORD *)(v2 + 160), *(_QWORD *)(v2 + 168));
    sub_1000B31A8(v14, *(_QWORD *)(v2 + 176), *(_QWORD *)(v2 + 184));
    v15 = sub_1000BEB7C();
    sub_1006BA948(v15, *(_BYTE *)(v2 + 193));
  }
  sub_1000C1348();
}

void sub_100695FD0()
{
  sub_1006AB6CC();
}

uint64_t sub_100695FFC(uint64_t a1)
{
  return sub_1006AB79C(a1, (uint64_t (*)(void))&Date.write(to:));
}

void sub_100696020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11, char a12, char a13, char a14, char a15, char a16, char a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;

  sub_100099310();
  v20 = v19;
  v22 = v21;
  sub_100098778();
  sub_100098B6C();
  __chkstk_darwin(v23);
  sub_100098694();
  sub_1000C3EA0(v20);
  if (!v17)
  {
    v24 = static Set<>.read(from:)(v20, &type metadata for String, &protocol witness table for String, &protocol witness table for String, &protocol witness table for String);
    sub_1000C3EA0(v20);
    sub_1000C3EA0(v20);
    sub_1000C3EA0(v20);
    sub_1000C3EA0(v20);
    sub_1006B947C(v20);
    sub_1000C3EA0(v20);
    sub_1006BA9D8();
    v26 = v25;
    sub_1000C3EA0(v20);
    sub_1000C3EA0(v20);
    sub_1000C3EA0(v20);
    sub_1000C3EA0(v20);
    sub_100521308(a17, v24, a16, a15, a14, a13, v18, a12, v22, v26, a11, a10, v28, v27);
  }
  sub_10009C884();
  sub_1000B44B0();
}

void sub_1006962D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1006BA984();
  FixedSizeTypeBinaryCodable.write(to:)(v1);
  if (!v0)
  {
    v2 = sub_1000BEF10();
    Set<>.write(to:)(v2, v3, v4, v5, v6, v7);
    sub_1000D91F8();
    sub_1000D91F8();
    sub_1000D91F8();
    sub_1000D91F8();
    type metadata accessor for NotificationsOptInState(0);
    sub_10009C7E8();
    sub_1000D91F8();
    sub_1006B92C8();
    sub_1000D91F8();
    sub_1000D91F8();
    sub_1000D91F8();
    sub_1000D91F8();
  }
  sub_10009EFE8();
}

uint64_t sub_100696500(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000C1780(a1);
  if (!v2)
  {
    sub_100094FFC();
    if (v3)
    {
      sub_1006B9F50();
      v1 = v4;
      sub_1000DA104();
    }
    else
    {
      v1 = sub_1000C56E0();
      sub_10007A100((uint64_t)&qword_100BF4CC0);
      v6 = sub_1000BC670(v5);
      v8 = sub_1000D0A50(v6, v7);
      sub_1000C3D70(v8, enum case for BinaryDecoder.Error.valueNotSupported(_:));
      sub_1000C2294();
    }
  }
  return v1;
}

void sub_1006965C4(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_1006BA584(a1);
  if (!v4)
  {
    sub_1006B488C(a1, a2);
    String.write(to:)(a1, a3, a4);
  }
  sub_1000FDBD8();
}

void sub_100696630(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_1006B69A8(a1);
  if (!v2)
  {
    v6 = v5;
    v7 = sub_1000DA104();
    v9 = v8;
    v10 = sub_1000DA104();
    v12 = v11;
    v16 = sub_1000DA104();
    v20 = v13;
    sub_1006B861C();
    sub_1006B8658();
    sub_1000CDD44(a1, (uint64_t)&unk_100B7EE40);
    v14 = sub_1000DA104();
    *(_BYTE *)a2 = v6 & 1;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v9;
    *(_QWORD *)(a2 + 24) = v10;
    *(_QWORD *)(a2 + 32) = v12;
    *(_QWORD *)(a2 + 40) = v16;
    *(_QWORD *)(a2 + 48) = v20;
    *(_QWORD *)(a2 + 56) = v17;
    *(_QWORD *)(a2 + 64) = v18;
    *(_QWORD *)(a2 + 72) = v19;
    *(_QWORD *)(a2 + 80) = v14;
    *(_QWORD *)(a2 + 88) = v15;
  }
  sub_100099C50();
}

void sub_100696774(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];

  sub_1006B6950(a1);
  if (!v2)
  {
    v4 = sub_1000CF9A4(v3, v1[1], v1[2]);
    v5 = sub_1000CF9A4(v4, v1[3], v1[4]);
    sub_1000CF9A4(v5, v1[5], v1[6]);
    sub_1006B9BF4((uint64_t)(v1 + 7), (uint64_t)v8);
    sub_1006B9BF4((uint64_t)v8, (uint64_t)&v7);
    sub_1000BA294(&qword_100BEE980);
    sub_1006B861C();
    sub_1006B8658();
    sub_1006BA8A0();
    v6 = sub_10009BD8C();
    sub_1000CF9A4(v6, v1[10], v1[11]);
  }
  sub_1006B9564();
}

void sub_10069684C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  sub_100099310();
  v6 = v5;
  v7 = sub_1000C0C34();
  type metadata accessor for LocationOfInterest(v7);
  sub_100099300();
  __chkstk_darwin(v8);
  v9 = sub_1000C1E78();
  v10 = type metadata accessor for Location(v9);
  sub_100098B6C();
  __chkstk_darwin(v11);
  v12 = sub_1006B932C();
  static Location.read(from:)(v12);
  if (!v1)
  {
    static LocationOfInterest.read(from:)(v6);
    sub_1006B9528();
    v16 = v13;
    sub_10007A100((uint64_t)&unk_100BFCAA0);
    sub_10007A100((uint64_t)&unk_100BFCAA8);
    sub_1006B9758(v6, v16);
    sub_1006BA610();
    sub_10011DF3C(v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
    sub_1006B9BCC();
    sub_1006B9FDC();
    sub_1000B2FD0(v0 + v14, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
    sub_1006B957C((__n128 *)(v0 + *(int *)(v10 + 24)));
    *(_QWORD *)(v15 + 16) = v17;
    *(_QWORD *)(v15 + 24) = v18;
    *(_BYTE *)(v15 + 32) = v19;
  }
  sub_10009EDB4();
  sub_1000B44B0();
}

void sub_1006969AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1006B99A4();
  if (!v0)
  {
    v2 = sub_1006B9BCC();
    v3 = sub_1006B9558();
    LocationOfInterest.write(to:)(v3);
    sub_1000DC624(v1 + *(int *)(v2 + 24));
    sub_1000BA294(&qword_100BC40B0);
    sub_1000BD664((uint64_t)&unk_100BFCAA0);
    sub_1000BD664((uint64_t)&unk_100BFCAA8);
    sub_10011E56C();
  }
  sub_1006B92E0();
}

uint64_t sub_100696A54(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  result = sub_1000C1780(a1);
  if (!v1)
  {
    if (v9 == 1)
    {
      return 0;
    }
    else if (v9 == 2)
    {
      sub_1000C3EA0(a1);
      return v8;
    }
    else
    {
      sub_1000C56E0();
      sub_10007A100((uint64_t)&unk_100BF4CC0);
      v5 = sub_1000BC670(v4);
      v7 = sub_1000D0A50(v5, v6);
      sub_1000C3D70(v7, enum case for BinaryDecoder.Error.valueNotSupported(_:));
      return sub_1000C2294();
    }
  }
  return result;
}

uint64_t sub_100696B38(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t result;

  if ((a3 & 1) != 0)
    return sub_1000BEB7C();
  result = sub_1000BEB7C();
  if (!v3)
    return sub_1000BEB7C();
  return result;
}

void static ExternalSearchQuery.read(from:)(uint64_t a1)
{
  uint64_t v1;
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000C1780(a1);
  if (!v1)
  {
    sub_100094FFC();
    if (!v3)
    {
      if (v2 == 2)
      {
        sub_1000DA104();
      }
      else
      {
        sub_1000C56E0();
        sub_10007A100((uint64_t)&unk_100BF4CC0);
        v5 = sub_1000BC670(v4);
        v7 = sub_1000D0A50(v5, v6);
        sub_1000C3D70(v7, enum case for BinaryDecoder.Error.valueNotSupported(_:));
        sub_1000C2294();
      }
    }
  }
  sub_1000C1348();
}

void ExternalSearchQuery.write(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3)
  {
    sub_1006BA640();
    sub_1000BEB7C();
    if (!v3)
      sub_1006BA47C();
  }
  else
  {
    sub_1000BEB7C();
  }
  sub_1000B26E8();
}

void sub_100696CF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int *v19;
  char *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  sub_1000B4C9C();
  v29 = v3;
  v30 = v4;
  v6 = v5;
  v8 = v7;
  sub_100098778();
  sub_100098BB4();
  __chkstk_darwin(v9);
  sub_10009DF40();
  __chkstk_darwin(v10);
  sub_1000F3FD8();
  __chkstk_darwin(v11);
  v13 = (char *)&v21 - v12;
  v14 = sub_1000DA104();
  if (!v0)
  {
    v16 = v15;
    v25 = v14;
    sub_1006B947C(v6);
    sub_1006B947C(v6);
    sub_1006B947C(v6);
    v24 = v8;
    sub_1005D9854();
    sub_1000C3EA0(v6);
    v17 = v28;
    sub_1005D8670();
    sub_1005D86B0();
    sub_1000CDD44(v6, (uint64_t)&type metadata for CGFloat);
    v23 = v26;
    v22 = v27;
    v18 = v24;
    *v24 = v25;
    v18[1] = v16;
    v19 = (int *)sub_1006BA8FC();
    sub_1006BA6A8((uint64_t)v18 + v19[5], (uint64_t)v13);
    sub_1006BA6A8((uint64_t)v18 + v19[6], v1);
    sub_1006BA6A8((uint64_t)v18 + v19[7], v2);
    *(uint64_t *)((char *)v18 + v19[8]) = v17;
    v20 = (char *)v18 + v19[9];
    *(_QWORD *)v20 = v23;
    v20[8] = v22;
  }
  sub_10009C884();
  sub_1000DF888();
}

void sub_100696EE8(uint64_t a1)
{
  uint64_t v1;

  sub_1000B2F80(a1);
  if (!v1)
  {
    sub_1006BA8FC();
    sub_1006B936C();
    sub_1006B96D8();
    sub_1006B936C();
    sub_1006B936C();
    sub_1005D9854();
    sub_1000E738C();
    sub_1000BA294(&qword_100BC5BC0);
    sub_1005D8670();
    sub_1005D86B0();
    sub_10009BD8C();
  }
  sub_10009EFE8();
}

void static AirPollutant.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_100099310();
  type metadata accessor for AirPollutantUnit(0);
  sub_1000B42B0();
  __chkstk_darwin(v1);
  sub_1006B9864();
  sub_100098B6C();
  __chkstk_darwin(v2);
  sub_1006B98D4();
  sub_1000C0120();
  __chkstk_darwin(v3);
  sub_1006B9E90();
  v4 = sub_1000DAFE4();
  static AirPollutantKind.read(from:)(v4);
  if (!v0)
  {
    sub_1000DAFE4();
    static AirPollutantMeasurement.read(from:)();
    v5 = sub_1000DAFE4();
    static AirPollutantUnit.read(from:)(v5, v6, v7, v8, v9, v10, v11, v12);
    v13 = sub_1006B9E3C();
    AirPollutant.init(kind:amount:displayUnit:)(v13);
  }
  sub_1006B93E0();
  sub_1000B44B0();
}

void AirPollutant.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;

  sub_100099310();
  v5 = sub_1006BA298();
  type metadata accessor for AirPollutantUnit(v5);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_1006B9864();
  sub_100099300();
  __chkstk_darwin(v7);
  sub_1006B98D4();
  sub_1000AE898();
  __chkstk_darwin(v8);
  sub_1006B930C();
  AirPollutant.kind.getter();
  AirPollutantKind.write(to:)();
  if (v1)
  {
    v9 = sub_1000DF794();
  }
  else
  {
    v12 = sub_10007A170(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    AirPollutant.amount.getter(v12);
    AirPollutantMeasurement.write(to:)();
    v13 = sub_1000BE774(v3, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
    AirPollutant.displayUnit.getter(v13);
    AirPollutantUnit.write(to:)();
    v9 = sub_1006BA924();
  }
  v11(v9, v10);
  sub_1006B93E0();
  sub_1000B44B0();
}

void static AirPollutantCategory.read(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  sub_1006BA5DC(a1);
  if (!v1)
  {
    sub_1000C3EA0(a1);
    v3 = sub_1000878C4();
    AirPollutantCategory.init(description:number:)(v3);
  }
  sub_1000FDBD8();
}

void AirPollutantCategory.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;

  sub_1006BA564();
  v2 = AirPollutantCategory.description.getter();
  sub_10009DE70(v1, v2, v3);
  if (v0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = swift_bridgeObjectRelease();
    AirPollutantCategory.number.getter(v4);
    sub_100098F20();
  }
  sub_1000B26E8();
}

void static AirPollutantKind.read(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  sub_1000C1780(a1);
  if (!v1)
  {
    switch(v8)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
        v6 = sub_10011E00C();
        v7 = type metadata accessor for AirPollutantKind(v6);
        sub_1000C229C(v7);
        break;
      default:
        sub_1000C56E0();
        sub_10007A100((uint64_t)&qword_100BF4CC0);
        v3 = sub_1000BC670(v2);
        v5 = sub_1000D0A50(v3, v4);
        sub_1000C3D70(v5, enum case for BinaryDecoder.Error.valueNotSupported(_:));
        sub_1000C2294();
        break;
    }
  }
  sub_1000C1348();
}

void AirPollutantKind.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v0 = sub_1000DC28C();
  type metadata accessor for AirPollutantKind(v0);
  sub_10009D5D4();
  __chkstk_darwin(v1);
  sub_1000C57E0(v2, v4);
  v3 = sub_1000FDC00();
  if (v3 == enum case for AirPollutantKind.pm2point5(_:)
    || v3 == enum case for AirPollutantKind.pm10(_:)
    || v3 == enum case for AirPollutantKind.o3(_:)
    || v3 == enum case for AirPollutantKind.ozone(_:)
    || v3 == enum case for AirPollutantKind.no(_:)
    || v3 == enum case for AirPollutantKind.no2(_:)
    || v3 == enum case for AirPollutantKind.nox(_:)
    || v3 == enum case for AirPollutantKind.so2(_:)
    || v3 == enum case for AirPollutantKind.co(_:)
    || v3 == enum case for AirPollutantKind.nmhc(_:)
    || v3 == enum case for AirPollutantKind.nmhcs(_:)
    || v3 == enum case for AirPollutantKind.nh3(_:)
    || v3 == enum case for AirPollutantKind.c6h6(_:)
    || v3 == enum case for AirPollutantKind.trs(_:)
    || v3 == enum case for AirPollutantKind.unknown(_:))
  {
    sub_100098F20();
    sub_1000D9830();
  }
  else
  {
    sub_1000F4288();
    __break(1u);
  }
}

void static AirPollutantUnit.read(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_1006ADF9C(a1, (uint64_t)&enum case for AirPollutantUnit.ppb(_:), (uint64_t)&type metadata accessor for AirPollutantUnit, (uint64_t)&enum case for AirPollutantUnit.microgramsPerM3(_:), a5, a6, a7, a8, vars0, vars8, SWORD2(vars8), SBYTE6(vars8), SHIBYTE(vars8));
}

void AirPollutantUnit.write(to:)()
{
  sub_1006AE078();
}

void static AirPollutantMeasurement.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  sub_1000B4C9C();
  v18 = v4;
  sub_1000BA294(&qword_100BFC858);
  sub_1000AE898();
  __chkstk_darwin(v5);
  sub_10004A2E8();
  sub_1000BA294(&qword_100BFC860);
  sub_100099300();
  __chkstk_darwin(v6);
  sub_100094EC4();
  sub_10003BDD4();
  if (!v1)
  {
    if (v19 == 2)
    {
      v10 = sub_10003BDD4();
      sub_100079FE8(v10, &qword_100BF4D58, NSUnitConcentrationMass_ptr);
      v11 = sub_1006BA530();
      static NSUnitConcentrationMass.read(from:)(v11);
      sub_1000C4CA8(v12);
      sub_1006B9E08(v2);
    }
    else
    {
      if (v19 != 1)
      {
        v15 = sub_1000C56E0();
        sub_10007A100((uint64_t)&qword_100BF4CC0);
        sub_10009D46C(v15, v16);
        sub_1000AE9B0(v17, enum case for BinaryDecoder.Error.valueNotSupported(_:));
        sub_1006BA754();
        goto LABEL_2;
      }
      v7 = sub_10003BDD4();
      sub_100079FE8(v7, &qword_100BF4D50, NSUnitDispersion_ptr);
      v8 = sub_1006BA530();
      static NSUnitDispersion.read(from:)(v8);
      sub_1000C4CA8(v9);
      sub_1006B9E08(v3);
    }
    v13 = sub_10011E00C();
    v14 = type metadata accessor for AirPollutantMeasurement(v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v18, v0, v14);
  }
LABEL_2:
  sub_10009EDB4();
  sub_1000DF888();
}

void AirPollutantMeasurement.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;

  sub_100099310();
  v20 = v7;
  v19 = sub_1000BA294(&qword_100BFC858);
  sub_1000C0120();
  __chkstk_darwin(v8);
  sub_100094EC4();
  sub_1000BA294(&qword_100BFC860);
  sub_1000AE898();
  __chkstk_darwin(v9);
  v10 = sub_100089108();
  type metadata accessor for AirPollutantMeasurement(v10);
  sub_1000BD980();
  __chkstk_darwin(v11);
  sub_10007A130();
  v12 = sub_1006BA284();
  sub_1000B2FD0(v12, v13, v14);
  v15 = sub_1000C13A8(v6, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 88));
  if (v15 == enum case for AirPollutantMeasurement.unitDispersion(_:))
  {
    sub_1000C13A8(v6, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
    sub_1000C5B18(v5, v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
    sub_1000BEB7C();
    if (!v1)
      sub_1006B9304();
    v16 = sub_1006B9FA0();
LABEL_9:
    v18(v16, v17);
    sub_10009EDB4();
    sub_1000B44B0();
    return;
  }
  if (v15 == enum case for AirPollutantMeasurement.concentration(_:))
  {
    sub_1000C13A8(v6, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
    sub_10007A0A8(v4, v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 32));
    sub_1006BA0A8();
    sub_1006B91F8(v20);
    if (!v1)
      sub_1006B9304();
    v18 = *(void (**)(uint64_t, uint64_t))(v0 + 8);
    v16 = v4;
    v17 = v19;
    goto LABEL_9;
  }
  sub_1000F4288();
  __break(1u);
}

void static AirQuality.read(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  uint64_t v75[2];
  double v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned __int8 v106;

  sub_100099310();
  v104 = v11;
  v105 = v17;
  v91 = v18;
  sub_1000D0A5C();
  sub_1000B42B0();
  __chkstk_darwin(v19);
  v94 = (char *)v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10009876C();
  v22 = type metadata accessor for AirQualitySourceKind(v21);
  v95 = *(_QWORD *)(v22 - 8);
  v96 = v22;
  sub_10009D98C();
  __chkstk_darwin(v23);
  v25 = sub_1006B9B84(v24, v75[0]);
  v26 = type metadata accessor for AirQualitySource(v25);
  v92 = *(_QWORD *)(v26 - 8);
  v93 = v26;
  sub_10009D98C();
  __chkstk_darwin(v27);
  sub_1000ED02C(v28, v75[0]);
  v29 = type metadata accessor for AirQualityPreviousDayComparison(0);
  v97 = *(_QWORD *)(v29 - 8);
  v98 = v29;
  sub_10009D98C();
  __chkstk_darwin(v30);
  sub_1000D0278(v31, v75[0]);
  sub_1000BA294(&qword_100BDACB0);
  sub_1000B42B0();
  __chkstk_darwin(v32);
  v100 = (char *)v75 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_10009896C();
  v101 = *(_QWORD *)(v34 - 8);
  v102 = v34;
  sub_10009D98C();
  __chkstk_darwin(v35);
  sub_10009DE08(v36, v75[0]);
  sub_1000BA294(&qword_100BFC868);
  sub_1000B42B0();
  __chkstk_darwin(v37);
  v39 = sub_1006B9B64(v38, v75[0]);
  v103 = type metadata accessor for AirQualityScaleCategory(v39);
  sub_10009C7D0();
  __chkstk_darwin(v40);
  v41 = sub_1000C1E78();
  v42 = type metadata accessor for AirQualityScale(v41);
  sub_10009D5D4();
  __chkstk_darwin(v43);
  v45 = (char *)v75 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100098778();
  sub_100099300();
  __chkstk_darwin(v47);
  sub_1000C24A0();
  __chkstk_darwin(v48);
  sub_1006B9A20();
  v49 = v104;
  static Date.read(from:)(v105);
  if (!v49)
  {
    v104 = v46;
    v84 = v10;
    v90 = v14;
    v85 = v13;
    v86 = v15;
    v88 = v45;
    v87 = v42;
    v89 = v16;
    v50 = v105;
    static Date.read(from:)(v105);
    v83 = v12;
    v51 = static String.read(from:)(v50);
    v53 = v52;
    static AirQualityScale.read(from:)();
    sub_1000C1780(v50);
    v82 = v51;
    sub_1000F4510();
    static AirQualityScaleCategory.read(from:)(v50);
    v80 = a10;
    v81 = v53;
    sub_1000C1780(v50);
    v78 = v106;
    v79 = type metadata accessor for ProviderAttribution(0);
    sub_10007A100((uint64_t)&unk_100BFC870);
    sub_10007A100((uint64_t)&unk_100BFC878);
    sub_1000CDD44(v50, v79);
    static URL.read(from:)(v105);
    v54 = type metadata accessor for AirPollutant(0);
    sub_10007A100((uint64_t)&unk_100BFC880);
    v79 = v55;
    sub_10007A100((uint64_t)&unk_100BFC888);
    v77 = v54;
    v76 = v56;
    v57 = sub_1006B934C();
    sub_1006BA6B0(v57);
    sub_1000CDD44(v105, v77);
    static AirQualityPreviousDayComparison.read(from:)(v105);
    static AirQualitySourceKind.read(from:)(v105, v58, v59, v60, v61, v62, v63, v64);
    v65 = sub_1000DA104();
    sub_1006BA634(v99, v66, v65, v66);
    static WeatherMetadata.read(from:)(v67, v68, v69, v70, v71, v72, v73, v74, *(double *)v75, *(double *)&v75[1], v76, *(double *)&v77);
    sub_1006BA80C();
    AirQuality.init(measurementDate:expirationDate:scaleIdentifier:scale:index:currentScaleCategory:isSignificant:providerAttribution:learnMoreURL:pollutants:primaryPollutant:previousDayComparison:source:metadata:)(v90, v83, v82, v81, v88, v80, v85, v78);
  }
  sub_1000B44B0();
}

void AirQuality.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64[3];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;

  sub_100099310();
  v81 = v1;
  v82 = v5;
  v66 = sub_1000D0A5C();
  v65 = *(_QWORD *)(v66 - 8);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_1000BD41C(v7, v64[0]);
  v8 = type metadata accessor for AirQualitySource(0);
  v68 = *(_QWORD *)(v8 - 8);
  v69 = v8;
  sub_10009D98C();
  __chkstk_darwin(v9);
  v70 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AirQualityPreviousDayComparison(0);
  v71 = *(_QWORD *)(v11 - 8);
  v72 = v11;
  sub_10009D98C();
  __chkstk_darwin(v12);
  sub_1000ED02C(v13, v64[0]);
  v73 = sub_1000BA294(&qword_100BDACB0);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  v74 = (char *)v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10009896C();
  v75 = *(_QWORD *)(v16 - 8);
  v76 = v16;
  sub_10009D98C();
  __chkstk_darwin(v17);
  sub_10009DA80(v18, v64[0]);
  v77 = sub_1000BA294(&qword_100BFC868);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  v21 = sub_100095214(v20, v64[0]);
  v22 = type metadata accessor for AirQualityScaleCategory(v21);
  v78 = *(_QWORD *)(v22 - 8);
  v79 = v22;
  sub_10009D98C();
  __chkstk_darwin(v23);
  v24 = sub_100089108();
  v25 = type metadata accessor for AirQualityScale(v24);
  sub_100098BB4();
  __chkstk_darwin(v26);
  v28 = (char *)v64 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100098778();
  sub_10009D5D4();
  __chkstk_darwin(v30);
  sub_1000B3B34();
  v32 = __chkstk_darwin(v31);
  v34 = (char *)v64 - v33;
  v80 = v0;
  AirQuality.measurementDate.getter(v32);
  v35 = v81;
  Date.write(to:)(v82);
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v34, v29);
  }
  else
  {
    v64[1] = (uint64_t)v28;
    v64[2] = v2;
    v81 = v25;
    v64[0] = v4;
    v36 = *(void (**)(char *, uint64_t))(v3 + 8);
    v36(v34, v29);
    sub_1006B966C();
    AirQuality.expirationDate.getter();
    v37 = v82;
    sub_1006B936C();
    v38 = sub_1006BA284();
    ((void (*)(uint64_t))v36)(v38);
    sub_1006B966C();
    v39 = AirQuality.scaleIdentifier.getter();
    sub_1000E7D08(v37, v39, v40);
    sub_1006BA1DC();
    swift_bridgeObjectRelease();
    sub_1006B92F4();
    AirQuality.scale.getter(v41);
    sub_10009C7B4();
    AirQualityScale.write(to:)();
    v42 = sub_1006BA70C();
    v43(v42);
    sub_1006B966C();
    AirQuality.index.getter(v44);
    sub_1000E738C();
    sub_1006B966C();
    AirQuality.currentScaleCategory.getter(v45);
    sub_10009C7B4();
    AirQualityScaleCategory.write(to:)();
    sub_1000F4380(v78);
    sub_1006B966C();
    v83 = AirQuality.isSignificant.getter(v46) & 1;
    v47 = sub_1000E738C();
    AirQuality.providerAttribution.getter(v47);
    sub_1000BD664((uint64_t)&unk_100BFC870);
    v49 = v48;
    sub_1000BD664((uint64_t)&unk_100BFC878);
    v50 = sub_1000BED20(v37, v77, v49);
    sub_1006BA27C(v50, (uint64_t)&qword_100BFC868);
    sub_1006B966C();
    AirQuality.learnMoreURL.getter();
    v51 = sub_10009C7B4();
    URL.write(to:)(v51);
    v52 = sub_1000F4380(v75);
    AirQuality.pollutants.getter(v52);
    v53 = sub_10009C82C();
    v54 = type metadata accessor for AirPollutant(v53);
    sub_1000BF24C((uint64_t)&unk_100BFC880);
    v56 = v55;
    sub_1000BF24C((uint64_t)&unk_100BFC888);
    v57 = sub_1000BCF4C();
    Dictionary<>.write(to:)(v57, v58, v59, v54);
    swift_bridgeObjectRelease();
    AirQuality.primaryPollutant.getter(v60);
    v61 = sub_1000DB348(v37, v73, v56);
    sub_1006B9C28(v61, (uint64_t)&qword_100BDACB0);
    AirQuality.previousDayComparison.getter();
    AirQualityPreviousDayComparison.write(to:)();
    sub_1006B93AC(v71);
    sub_1006BA304();
    AirQuality.source.getter(v62);
    sub_1006B9C04();
    AirQualitySource.write(to:)();
    sub_1006BA048();
    sub_1006BA304();
    AirQuality.metadata.getter(v63);
    sub_1006BA96C();
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v67, v66);
  }
  sub_10009E33C();
  sub_1000B44B0();
}

#error "100698898: call analysis failed (funcsize=66)"

void AirQualityData.write(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;

  sub_100099310();
  a19 = v25;
  a20 = v26;
  v27 = sub_1000BDD30();
  type metadata accessor for AirQuality(v27);
  sub_100099300();
  __chkstk_darwin(v28);
  v29 = sub_1000992A8();
  type metadata accessor for AirQualityData(v29);
  sub_100098B6C();
  __chkstk_darwin(v30);
  v32 = (char *)&a9 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B2FD0((uint64_t)v32, v20, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 16));
  v33 = sub_1000C13A8((uint64_t)v32, *(uint64_t (**)(uint64_t, uint64_t))(v24 + 88));
  if (v33 == enum case for AirQualityData.available(_:))
  {
    sub_1000C13A8((uint64_t)v32, *(uint64_t (**)(uint64_t, uint64_t))(v24 + 96));
    sub_10009C94C(v22, (uint64_t)v32, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 32));
    sub_1006B9CD0();
    sub_1000E738C();
    if (!v21)
    {
      sub_1006B9460();
      AirQuality.write(to:)();
    }
    sub_10009171C(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
    goto LABEL_10;
  }
  if (v33 == enum case for AirQualityData.temporarilyUnavailable(_:))
  {
    sub_1006B9A14();
LABEL_9:
    sub_1000E738C();
LABEL_10:
    sub_10009EDB4();
    sub_1000B44B0();
    return;
  }
  if (v33 == enum case for AirQualityData.unsupported(_:))
  {
    sub_1006B99B0();
    goto LABEL_9;
  }
  sub_1000F4288();
  __break(1u);
}

void static AirQualityPreviousDayComparison.read(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  sub_1000C1780(a1);
  if (!v1)
  {
    switch(v8)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
        v6 = sub_10011E00C();
        v7 = type metadata accessor for AirQualityPreviousDayComparison(v6);
        sub_1000C229C(v7);
        break;
      default:
        sub_1000C56E0();
        sub_10007A100((uint64_t)&qword_100BF4CC0);
        v3 = sub_1000BC670(v2);
        v5 = sub_1000D0A50(v3, v4);
        sub_1000C3D70(v5, enum case for BinaryDecoder.Error.valueNotSupported(_:));
        sub_1000C2294();
        break;
    }
  }
  sub_1000C1348();
}

void AirQualityPreviousDayComparison.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v0 = sub_1000DC28C();
  type metadata accessor for AirQualityPreviousDayComparison(v0);
  sub_10009D5D4();
  __chkstk_darwin(v1);
  sub_1000C57E0(v2, v4);
  v3 = sub_1000FDC00();
  if (v3 == enum case for AirQualityPreviousDayComparison.muchWorse(_:)
    || v3 == enum case for AirQualityPreviousDayComparison.worse(_:)
    || v3 == enum case for AirQualityPreviousDayComparison.same(_:)
    || v3 == enum case for AirQualityPreviousDayComparison.better(_:)
    || v3 == enum case for AirQualityPreviousDayComparison.muchBetter(_:)
    || v3 == enum case for AirQualityPreviousDayComparison.unknown(_:))
  {
    sub_100098F20();
    sub_1000D9830();
  }
  else
  {
    sub_1000F4288();
    __break(1u);
  }
}

void static AirQualityScale.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_100099310();
  v2 = v1;
  type metadata accessor for AirQualityScaleGradient(0);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100099234();
  v4 = sub_1000DA104();
  if (!v0)
  {
    v5 = v4;
    sub_1000DA104();
    sub_1000CDD44(v2, (uint64_t)&type metadata for String);
    sub_1000CDD44(v2, (uint64_t)&type metadata for String);
    sub_1000DA104();
    sub_1000C3EA0(v2);
    v6 = sub_10009F070();
    static Range<>.read(from:)(v6);
    v17 = type metadata accessor for AirQualityScaleCategory(0);
    sub_1000BF24C((uint64_t)&unk_100BFC890);
    v8 = v7;
    sub_1000BF24C((uint64_t)&unk_100BFC898);
    v9 = sub_1006BA79C();
    sub_1000F3EA0(v9, v17, v8, v10);
    sub_1006BA39C();
    sub_10007A100((uint64_t)&unk_100BFC8A0);
    v12 = v11;
    sub_10007A100((uint64_t)&unk_100BFC8A8);
    v13 = sub_1006BA210();
    v16 = sub_1000F3EA0(v13, v14, v12, v15);
    AirQualityScaleGradient.init(stops:)(v16);
    AirQualityScale.init(identifier:displayName:shortDisplayName:longDisplayName:displayLabel:isNumerical:range:categories:gradient:)(v5);
  }
  sub_10009C884();
  sub_1000B44B0();
}

void AirQualityScale.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;

  sub_100099310();
  v4 = sub_1006B9C78();
  type metadata accessor for AirQualityScaleGradient(v4);
  sub_100098B6C();
  __chkstk_darwin(v5);
  sub_100098694();
  v6 = AirQualityScale.identifier.getter();
  sub_1000E7D08(v2, v6, v7);
  if (v0)
  {
    sub_1000986C4();
  }
  else
  {
    sub_1000986C4();
    v9 = AirQualityScale.displayName.getter(v8);
    sub_1000E7D08(v2, v9, v10);
    v11 = sub_1000986C4();
    AirQualityScale.shortDisplayName.getter(v11);
    sub_1000BA294(&qword_100BC5AA8);
    sub_10009BD8C();
    sub_100098964();
    AirQualityScale.longDisplayName.getter(v12);
    sub_10009BD8C();
    sub_100098964();
    v14 = AirQualityScale.displayLabel.getter(v13);
    sub_1000E7D08(v2, v14, v15);
    sub_1000986C4();
    AirQualityScale.isNumerical.getter(v16);
    v17 = sub_1000DB074(v2);
    AirQualityScale.range.getter(v17);
    sub_1000BA294(&qword_100BDF688);
    v18 = sub_1006BA9F8();
    v19 = Range<>.write(to:)(v18);
    AirQualityScale.categories.getter(v19);
    v20 = sub_10009C82C();
    type metadata accessor for AirQualityScaleCategory(v20);
    sub_10007A100((uint64_t)&unk_100BFC890);
    sub_10007A100((uint64_t)&unk_100BFC898);
    sub_1006BA338();
    sub_1000BE954();
    v21 = sub_1000986C4();
    v22 = AirQualityScale.gradient.getter(v21);
    AirQualityScaleGradient.stops.getter(v22);
    sub_1006BA39C();
    sub_1000C67A8((uint64_t)&unk_100BFC8A0);
    sub_1000C67A8((uint64_t)&unk_100BFC8A8);
    sub_1000BE954();
    sub_1000986C4();
    sub_100098820(v1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  }
  sub_10009EDB4();
  sub_1000B44B0();
}

void static AirQualityScaleCategory.read(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  static String.read(from:)(a1);
  if (!v1)
  {
    sub_1006BAA10();
    sub_1000C3EA0(a1);
    v3 = sub_1000DA104();
    v5 = v4;
    sub_1000CDD44(a1, (uint64_t)&type metadata for String);
    static Range<>.read(from:)(a1);
    sub_1000CDD44(a1, (uint64_t)&type metadata for String);
    v6 = sub_1000C213C();
    AirQualityScaleCategory.init(description:number:color:recommendation:range:glyph:)(v6, v7, v8, v3, v5);
  }
}

void AirQualityScaleCategory.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;

  sub_1006BA034();
  sub_1006BA570();
  v3 = AirQualityScaleCategory.description.getter(v2);
  sub_100075E58(v3, v4);
  if (!v0)
  {
    sub_1000986C4();
    AirQualityScaleCategory.number.getter(v5);
    v6 = sub_100098F20();
    v7 = AirQualityScaleCategory.color.getter(v6);
    sub_100075E58(v7, v8);
    sub_1000986C4();
    AirQualityScaleCategory.recommendation.getter(v9);
    v10 = sub_1000BA294(&qword_100BC5AA8);
    sub_1000FEC5C(v1, v10, (uint64_t)&protocol witness table for String);
    v11 = sub_10009D2E0();
    AirQualityScaleCategory.range.getter(v11);
    sub_1000BA294(&qword_100BDF688);
    v12 = sub_1006B9558();
    v13 = Range<>.write(to:)(v12);
    AirQualityScaleCategory.glyph.getter(v13);
    sub_1000FEC5C(v1, v10, (uint64_t)&protocol witness table for String);
  }
  swift_bridgeObjectRelease();
  sub_1006B910C();
}

void static AirQualityScaleGradient.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_1000C0C34();
  type metadata accessor for AirQualityScaleGradientStop(v1);
  sub_1000D02A0((uint64_t)&unk_100BFC8A0);
  sub_1000D02A0((uint64_t)&unk_100BFC8A8);
  v3 = sub_1006B9374(v2);
  if (!v0)
    AirQualityScaleGradient.init(stops:)(v3);
  sub_1000D9830();
}

void AirQualityScaleGradient.write(to:)()
{
  uint64_t v0;
  uint64_t v1;

  sub_1006BA564();
  AirQualityScaleGradient.stops.getter(v0);
  sub_1006BA39C();
  sub_1000D02A0((uint64_t)&unk_100BFC8A0);
  sub_1000D02A0((uint64_t)&unk_100BFC8A8);
  sub_10011AC30(v1);
  sub_1000986C4();
  sub_1000D9830();
}

uint64_t static AirQualityScaleGradientStop.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  sub_1006BA558();
  result = sub_1000C1780(v1);
  if (!v0)
  {
    v3 = sub_1000B301C();
    return AirQualityScaleGradientStop.init(location:color:)(v3, v4);
  }
  return result;
}

void AirQualityScaleGradientStop.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1006BA570();
  AirQualityScaleGradientStop.location.getter();
  v1 = sub_100098F20();
  if (!v0)
  {
    v2 = AirQualityScaleGradientStop.color.getter(v1);
    sub_100075E58(v2, v3);
    sub_1000986C4();
  }
  sub_1000B26E8();
}

void static AirQualitySource.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = sub_1000C0C34();
  type metadata accessor for AirQualitySourceKind(v1);
  sub_10009D5D4();
  __chkstk_darwin(v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1006BA9F8();
  static AirQualitySourceKind.read(from:)(v5, v6, v7, v8, v9, v10, v11, v12);
  if (!v0)
  {
    v13 = sub_1006BA9F8();
    v14 = static String.read(from:)(v13);
    sub_1006BA634((uint64_t)v4, v15, v14, v15);
  }
  sub_1006BA1C0();
  sub_1000D9830();
}

void AirQualitySource.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_100110560();
  v3 = sub_1000DC28C();
  type metadata accessor for AirQualitySourceKind(v3);
  sub_1000C6D9C();
  __chkstk_darwin(v4);
  sub_10009C224();
  AirQualitySource.kind.getter(v5);
  AirQualitySourceKind.write(to:)(v1);
  if (v0)
  {
    sub_1000EFA30(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  }
  else
  {
    v6 = sub_1000EFA30(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    v7 = AirQualitySource.description.getter(v6);
    sub_100075E58(v7, v8);
    sub_1000986C4();
  }
  sub_10009ECD4();
  sub_1000C60F8();
}

void static AirQualitySourceKind.read(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_1006ADD7C(a1, (uint64_t)&enum case for AirQualitySourceKind.modeled(_:), (uint64_t)&type metadata accessor for AirQualitySourceKind, (uint64_t)&enum case for AirQualitySourceKind.station(_:), (uint64_t)&enum case for AirQualitySourceKind.unknown(_:), a6, a7, a8, vars0, vars8, SWORD2(vars8), SBYTE6(vars8), SHIBYTE(vars8));
}

#error "100699944: call analysis failed (funcsize=13)"

void static AvailableDataSets.read(from:)(uint64_t a1)
{
  uint64_t v1;

  sub_1000C1780(a1);
  if (!v1)
    ((void (*)())AvailableDataSets.init(rawValue:))();
  sub_100089028();
}

void AvailableDataSets.write(to:)()
{
  sub_1006BA564();
  AvailableDataSets.rawValue.getter();
  sub_100098F20();
  sub_1000C1348();
}

uint64_t static CurrentWeather.read(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t result;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  uint64_t v79;
  double v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t (*v84)(uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  uint64_t v115;
  double v116;
  double v117;
  double v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD v141[5];
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD v152[2];
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156[7];
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;

  v155 = a1;
  v133 = a2;
  sub_1000D0A5C();
  sub_1000B42B0();
  __chkstk_darwin(v7);
  v9 = sub_10009ED50((uint64_t)&v115 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000B43A4(v9, (uint64_t)&v153);
  v130 = v10;
  sub_10009D98C();
  __chkstk_darwin(v11);
  sub_100088FDC();
  sub_10009511C(v12);
  v13 = sub_1000BA294(&qword_100BCB0A8);
  sub_1000B43A4(v13, (uint64_t)v152);
  v128 = v14;
  sub_10009D98C();
  __chkstk_darwin(v15);
  sub_100088FDC();
  v17 = sub_10009E598(v16);
  sub_1000B43A4(v17, (uint64_t)&v155);
  v129 = v18;
  sub_10009D98C();
  __chkstk_darwin(v19);
  sub_100088FDC();
  sub_10009511C(v20);
  sub_1000BA294(qword_100BC4E80);
  sub_1000B42B0();
  __chkstk_darwin(v21);
  v131 = (char *)&v115 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v23);
  sub_100079F7C();
  v136 = sub_10011DE54(v24);
  v134 = *(_QWORD *)(v136 - 8);
  sub_10009D98C();
  __chkstk_darwin(v25);
  v27 = sub_1006B9184(v26, v115);
  v28 = type metadata accessor for PrecipitationAmountByType(v27);
  sub_1000B43A4(v28, (uint64_t)&v162);
  v138 = v29;
  sub_10009D98C();
  __chkstk_darwin(v30);
  sub_1000986FC();
  v137 = v31;
  sub_10009D2A4();
  __chkstk_darwin(v32);
  sub_1000860D0();
  v139 = v33;
  sub_10009D2A4();
  __chkstk_darwin(v34);
  sub_1000860D0();
  v140 = v35;
  sub_10009D2A4();
  __chkstk_darwin(v36);
  sub_1000860D0();
  v141[0] = v37;
  sub_10009D2A4();
  __chkstk_darwin(v38);
  sub_1000860D0();
  v141[1] = v39;
  sub_10009D2A4();
  __chkstk_darwin(v40);
  sub_100079F7C();
  v42 = sub_1000987B4(v41);
  v143 = type metadata accessor for PrecipitationAmount(v42);
  v141[4] = *(_QWORD *)(v143 - 8);
  sub_10009D98C();
  __chkstk_darwin(v43);
  v142 = (uint64_t)&v115 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v45);
  sub_100079F7C();
  v145 = sub_1006B9700(v46);
  v144 = *(_QWORD *)(v145 - 8);
  sub_10009D98C();
  __chkstk_darwin(v47);
  sub_100088FDC();
  sub_10009511C(v48);
  v49 = sub_1000BA294(&qword_100BCB948);
  sub_1000B43A4(v49, (uint64_t)&v164);
  v146 = v50;
  sub_10009D98C();
  __chkstk_darwin(v51);
  v148 = (uint64_t)&v115 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_1000BA294(&qword_100BCB938);
  v149 = *(_QWORD *)(v53 - 8);
  v150 = v53;
  sub_10009D98C();
  __chkstk_darwin(v54);
  sub_1006B9EAC(v55, v115);
  v56 = sub_1000BA294(&qword_100BC4E68);
  v152[0] = *(_QWORD *)(v56 - 8);
  v152[1] = v56;
  sub_10009D98C();
  __chkstk_darwin(v57);
  sub_1000986FC();
  v126 = v58;
  sub_10009D2A4();
  __chkstk_darwin(v59);
  sub_1000860D0();
  v127 = v60;
  sub_10009D2A4();
  __chkstk_darwin(v61);
  sub_100079F7C();
  v153 = v62;
  v63 = sub_1006B9148();
  sub_10009C7D0();
  __chkstk_darwin(v64);
  v65 = sub_1000BE9F0();
  v66 = type metadata accessor for CloudCoverByAltitude(v65);
  sub_1000C6D9C();
  __chkstk_darwin(v67);
  v69 = (char *)&v115 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100098778();
  sub_10009D5D4();
  __chkstk_darwin(v71);
  sub_1000E78C0();
  v72 = v154;
  result = static Date.read(from:)(v155);
  if (!v72)
  {
    v118 = v2;
    v119 = v63;
    v121 = v3;
    v122 = v6;
    v120 = v66;
    v123 = v69;
    v124 = v5;
    v125 = v4;
    v154 = v70;
    v74 = v155;
    sub_1000C1780(v155);
    sub_1000C1780(v74);
    sub_1000C1780(v74);
    sub_1000C1780(v74);
    sub_1000F4510();
    static CloudCoverByAltitude.read(from:)(v74);
    v75 = v121;
    static WeatherCondition.read(from:)(v74);
    v76 = static String.read(from:)(v74);
    v77 = v122;
    v115 = v76;
    v116 = v78;
    sub_1000C1780(v74);
    sub_1006B9100();
    v80 = v118;
    sub_100079FE8(v79, (unint64_t *)&qword_100BC5658, NSUnitTemperature_ptr);
    v81 = v117;
    static NSUnitTemperature.read(from:)(v74);
    sub_1006B9100();
    if (v81 != 0.0)
    {
      sub_10009D9A8((uint64_t)v141);
      sub_100098748(v75, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)&v80 + 8));
      sub_100094F10(v5, *(uint64_t (**)(uint64_t, _QWORD))(v77 + 8));
      v83 = sub_1006BA0F4();
      return v84(v83, v154);
    }
    sub_1000C4CA8(v82);
    sub_100110768(v74);
    sub_1006B9100();
    sub_10009EEF4();
    sub_1006B9100();
    sub_100079FE8(v85, (unint64_t *)&qword_100BCB990, NSUnitSpeed_ptr);
    v86 = sub_1006B9C30();
    static NSUnitSpeed.read(from:)(v86);
    sub_1006B9100();
    sub_1000C4CA8(v87);
    sub_10009EEF4();
    sub_1006B9100();
    sub_100079FE8(v88, &qword_100BCB9A8, NSUnitPressure_ptr);
    v89 = sub_1006B9C30();
    static NSUnitPressure.read(from:)(v89);
    sub_1006B9100();
    sub_1000C4CA8(v90);
    v91 = sub_1006B9A60();
    static PressureTrend.read(from:)(v91, v92, v93, v94, v95, v96, v97, v98);
    sub_1006BA82C();
    sub_1006B9D24();
    sub_1006BA82C();
    sub_10011E1A4();
    sub_10011E1A4();
    sub_10011E1A4();
    sub_10011E1A4();
    sub_10011E1A4();
    sub_10011E1A4();
    static ApparentPrecipitationIntensity.read(from:)(v155);
    sub_1006B9100();
    sub_100110768(v155);
    sub_1006B9100();
    sub_10009EEF4();
    sub_1006B9100();
    sub_1006B9E7C();
    sub_1006B9100();
    sub_1006B9AA4(v99);
    sub_10009EEF4();
    sub_1006B9100();
    sub_1006B9E7C();
    sub_1006B9100();
    sub_1006B9AA4(v100);
    sub_1006B22C0((uint64_t)&unk_100BFC8B0);
    sub_1006B22C0((uint64_t)&unk_100BFC8C8);
    sub_1006B95A8();
    sub_1006B9100();
    sub_1006B95A8();
    sub_1006B9100();
    sub_10009EEF4();
    sub_1006B9100();
    v102 = *(_QWORD *)(v101 - 256);
    static LocationAuthorizationState.read(from:)(v155);
    sub_1006B9100();
    if (v102)
    {
      sub_10009D9A8((uint64_t)v141);
      sub_1006B9D3C((uint64_t)v156);
      sub_1005E5ABC(v132, (uint64_t)qword_100BC4E80);
      sub_10009554C(v126);
      sub_10009554C(v127);
      sub_100094F10(v135, *(uint64_t (**)(uint64_t, _QWORD))(v134 + 8));
      sub_1000DD7B4(v137);
      sub_10009C020((uint64_t)&v157);
      sub_10009C020((uint64_t)&v158);
      sub_10009C020((uint64_t)&v159);
      sub_10009C020((uint64_t)&v160);
      sub_10009C020((uint64_t)&v161);
      sub_1000DD7B4(v142);
      sub_10009C020((uint64_t)&v163);
      sub_100094F10(v147, *(uint64_t (**)(uint64_t, _QWORD))(v144 + 8));
      sub_100094F10(v148, *(uint64_t (**)(uint64_t, _QWORD))(v146 + 8));
      sub_1006B9294();
      sub_10009554C(v153);
      sub_100094F10(v121, *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)&v118 + 8));
      sub_100094F10((uint64_t)v123, *(uint64_t (**)(uint64_t, _QWORD))(v122 + 8));
      v83 = sub_1006BA3AC();
      return v84(v83, v154);
    }
    sub_1006B9D48(v103, v103);
    sub_10009EEF4();
    sub_1006B9100();
    sub_100079FE8(v104, (unint64_t *)&qword_100BCB0D8, NSUnitLength_ptr);
    v105 = sub_1006B9C30();
    static NSUnitLength.read(from:)(v105);
    sub_1006B9100();
    sub_1000C4CA8(v106);
    sub_1006B9A60();
    static Wind.read(from:)();
    sub_1006B9100();
    sub_1006B9A60();
    static WeatherMetadata.read(from:)(v107, v108, v109, v110, v111, v112, v113, v114, *(double *)&v115, v116, v117, v118);
    sub_1006BA6EC();
    sub_1006B9710();
    sub_1006BA6E0();
    return CurrentWeather.init(date:cloudCover:cloudCoverLow:cloudCoverMid:cloudCoverHigh:cloudCoverByAltitude:condition:symbolName:dewPoint:humidity:precipitationIntensity:pressure:pressureTrend:rainfallAmount:snowfallAmount:pastHourPrecipitationAmountByType:pastSixHoursPrecipitationAmountByType:pastTwentyFourHoursPrecipitationAmountByType:nextHourPrecipitationAmountByType:nextSixHoursPrecipitationAmountByType:nextTwentyFourHoursPrecipitationAmountByType:apparentPrecipitationIntensity:isDaylight:temperature:apparentTemperature:highTemperature:lowTemperature:uvIndex:visibility:wind:metadata:)(v125, v123, v121, v115, *(_QWORD *)&v116, v153, v151, v148);
  }
  return result;
}

void CurrentWeather.write(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t (*v114)(uint64_t, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t (*v120)(char *, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t (*v123)(uint64_t, _QWORD);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t (*v136)(uint64_t, _QWORD);
  uint64_t v137;
  uint64_t (*v138)(uint64_t, _QWORD);
  uint64_t v139;
  uint64_t v140;
  uint64_t (*v141)(uint64_t, _QWORD);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD v177[2];
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;

  sub_100099310();
  a19 = v26;
  a20 = v27;
  v188 = v28;
  v166 = sub_1000D0A5C();
  v165 = *(_QWORD *)(v166 - 8);
  sub_10009D98C();
  __chkstk_darwin(v29);
  v164 = sub_10009ED50((uint64_t)&v143 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v163 = *(_QWORD *)(v164 - 8);
  sub_10009D98C();
  __chkstk_darwin(v31);
  sub_10009511C((uint64_t)&v143 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  v162 = sub_1000BA294(&qword_100BCB0A8);
  v161 = *(_QWORD *)(v162 - 8);
  sub_10009D98C();
  __chkstk_darwin(v33);
  sub_100088FDC();
  v160 = sub_10009E598(v34);
  v159 = *(_QWORD *)(v160 - 8);
  sub_10009D98C();
  __chkstk_darwin(v35);
  sub_100088FDC();
  sub_10009511C(v36);
  v157 = sub_1000BA294(qword_100BC4E80);
  sub_1000B42B0();
  __chkstk_darwin(v37);
  sub_1000986FC();
  v158 = v38;
  sub_10009D2A4();
  __chkstk_darwin(v39);
  sub_100079F7C();
  v156 = sub_10011DE54(v40);
  v155 = *(_QWORD *)(v156 - 8);
  sub_10009D98C();
  __chkstk_darwin(v41);
  sub_100088FDC();
  v154 = v42;
  v169 = sub_10009E260();
  v168 = *(_QWORD *)(v169 - 8);
  sub_10009D98C();
  __chkstk_darwin(v43);
  v153 = (char *)&v143 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v45);
  sub_1000860D0();
  v151 = v46;
  sub_10009D2A4();
  __chkstk_darwin(v47);
  sub_1000860D0();
  v149 = v48;
  sub_10009D2A4();
  __chkstk_darwin(v49);
  sub_1000860D0();
  v148 = v50;
  sub_10009D2A4();
  __chkstk_darwin(v51);
  sub_1000860D0();
  v167 = v52;
  sub_10009D2A4();
  __chkstk_darwin(v53);
  sub_1006BA694(v54, v55, v56, v57, v58, v59, v60, v61, v143);
  v62 = type metadata accessor for PrecipitationAmount(0);
  v172 = *(_QWORD *)(v62 - 8);
  v173 = v62;
  sub_10009D98C();
  __chkstk_darwin(v63);
  sub_1000986FC();
  v171 = v64;
  sub_10009D2A4();
  __chkstk_darwin(v65);
  v174 = (char *)&v143 - v66;
  v67 = type metadata accessor for PressureTrend(0);
  v175 = *(_QWORD *)(v67 - 8);
  v176 = v67;
  sub_10009D98C();
  __chkstk_darwin(v68);
  sub_1000ED02C(v69, v143);
  v70 = sub_1000BA294(&qword_100BCB948);
  v177[0] = *(_QWORD *)(v70 - 8);
  v177[1] = v70;
  sub_10009D98C();
  __chkstk_darwin(v71);
  sub_1000BD964(v72, v143);
  v73 = sub_1000BA294(&qword_100BCB938);
  v179 = *(_QWORD *)(v73 - 8);
  v180 = v73;
  sub_10009D98C();
  __chkstk_darwin(v74);
  sub_100098678(v75, v143);
  v76 = sub_1000BA294(&qword_100BC4E68);
  v183 = *(_QWORD *)(v76 - 8);
  v184 = v76;
  sub_10009D98C();
  __chkstk_darwin(v77);
  v152 = (char *)&v143 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v79);
  sub_1000860D0();
  v150 = v80;
  sub_10009D2A4();
  __chkstk_darwin(v81);
  sub_1000C66D0(v82, v83, v84, v85, v86, v87, v88, v89, v143);
  v185 = sub_1006B9148();
  sub_10009D5D4();
  __chkstk_darwin(v90);
  v91 = sub_100089108();
  v92 = type metadata accessor for CloudCoverByAltitude(v91);
  sub_100099300();
  __chkstk_darwin(v93);
  v95 = (char *)&v143 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100098778();
  sub_1000BD980();
  __chkstk_darwin(v96);
  sub_100095304();
  v186 = v20;
  CurrentWeather.date.getter(v97);
  Date.write(to:)(v188);
  if (v21)
  {
    v98 = sub_1000878C4();
  }
  else
  {
    v146 = v95;
    v147 = v25;
    v187 = v92;
    v144 = v24;
    v145 = v23;
    v100 = sub_10009171C(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
    CurrentWeather.cloudCover.getter(v100);
    v101 = v188;
    v102 = sub_1000ED058(v188);
    CurrentWeather.cloudCoverLow.getter(v102);
    v103 = sub_1000DB074(v101);
    CurrentWeather.cloudCoverMid.getter(v103);
    v104 = sub_1000DB074(v101);
    CurrentWeather.cloudCoverHigh.getter(v104);
    v105 = sub_1000DB074(v101);
    CurrentWeather.cloudCoverByAltitude.getter(v105);
    sub_1006BA510();
    sub_1006B92B8(v147);
    v106 = v144;
    sub_1006BA270();
    CurrentWeather.condition.getter(v107);
    WeatherCondition.write(to:)();
    v108 = sub_1006BA058(v106, *(uint64_t (**)(uint64_t, _QWORD))(v145 + 8));
    CurrentWeather.symbolName.getter(v108);
    v109 = sub_1006BA258();
    sub_10009DE70(v109, v110, v111);
    swift_bridgeObjectRelease();
    v112 = v182;
    sub_1006BA270();
    CurrentWeather.dewPoint.getter(v113);
    sub_1006AFED0();
    v114 = *(uint64_t (**)(uint64_t, uint64_t))(v183 + 8);
    v115 = v114(v112, v184);
    CurrentWeather.humidity.getter(v115);
    v116 = sub_1000ED058(v101);
    CurrentWeather.precipitationIntensity.getter(v116);
    sub_1006AFED0();
    (*(void (**)(uint64_t, uint64_t))(v179 + 8))(v181, v180);
    sub_1000DE27C();
    CurrentWeather.pressure.getter(v117);
    sub_1006B917C();
    sub_1006B96BC();
    sub_1000DE27C();
    CurrentWeather.pressureTrend.getter(v118);
    v119 = sub_1001092E4();
    PressureTrend.write(to:)(v119);
    sub_1006B93AC(v175);
    sub_1000DE27C();
    CurrentWeather.rainfallAmount.getter();
    sub_1001092E4();
    PrecipitationAmount.write(to:)();
    v120 = *(uint64_t (**)(char *, uint64_t))(v172 + 8);
    v121 = v120(v174, v173);
    CurrentWeather.snowfallAmount.getter(v121);
    PrecipitationAmount.write(to:)();
    v120(v171, v173);
    sub_1000DE27C();
    CurrentWeather.pastHourPrecipitationAmountByType.getter();
    sub_1001092E4();
    PrecipitationAmountByType.write(to:)();
    sub_1006B95C8();
    sub_1006B94D4(v170, (uint64_t)&a18);
    sub_1006B92F4();
    CurrentWeather.pastSixHoursPrecipitationAmountByType.getter();
    sub_1006B925C();
    sub_1006B91E8((uint64_t)&a16);
    sub_1006B92F4();
    CurrentWeather.pastTwentyFourHoursPrecipitationAmountByType.getter();
    sub_1006B925C();
    sub_1006B91E8((uint64_t)&v175);
    sub_1006B92F4();
    CurrentWeather.nextHourPrecipitationAmountByType.getter();
    sub_1006B925C();
    sub_1006B91E8((uint64_t)&v176);
    sub_1006B92F4();
    CurrentWeather.nextSixHoursPrecipitationAmountByType.getter();
    sub_1006B925C();
    sub_1006B91E8((uint64_t)v177);
    sub_1006B92F4();
    CurrentWeather.nextTwentyFourHoursPrecipitationAmountByType.getter();
    sub_1006B925C();
    sub_1006B91E8((uint64_t)&v178);
    sub_1000DE27C();
    CurrentWeather.apparentPrecipitationIntensity.getter();
    sub_1001092E4();
    ApparentPrecipitationIntensity.write(to:)();
    v122 = sub_1006BA180();
    v124 = sub_100094F10(v122, v123);
    CurrentWeather.isDaylight.getter(v124);
    sub_1006B91F8(v188);
    sub_1000DE27C();
    CurrentWeather.temperature.getter(v125);
    sub_1006B917C();
    v114(v150, v184);
    sub_1006B92F4();
    CurrentWeather.apparentTemperature.getter(v126);
    sub_1006B917C();
    v127 = sub_1006B9F68();
    ((void (*)(uint64_t))v114)(v127);
    sub_1006BA58C();
    CurrentWeather.highTemperature.getter();
    sub_1006B22C0((uint64_t)&unk_100BFC8B0);
    v129 = v128;
    sub_1006B22C0((uint64_t)&unk_100BFC8C8);
    v130 = sub_1000DB348(v188, v157, v129);
    sub_10009E498(v130, (uint64_t)qword_100BC4E80);
    sub_1006BA58C();
    CurrentWeather.lowTemperature.getter();
    v131 = sub_1000DB348(v188, v157, v129);
    sub_10009E498(v131, (uint64_t)qword_100BC4E80);
    sub_1006B966C();
    v133 = CurrentWeather.uvIndex.getter(v132);
    UVIndex.value.getter(v133);
    sub_1000DB074(v188);
    v134 = sub_1006BA5AC();
    LocationAuthorizationState.write(to:)(v188, v134);
    v135 = sub_1006B9C84();
    sub_100094F10(v135, v136);
    sub_1000DE27C();
    CurrentWeather.visibility.getter();
    sub_1006B917C();
    v137 = sub_10011738C();
    sub_100094F10(v137, v138);
    sub_1006B966C();
    CurrentWeather.wind.getter(v139);
    sub_1006B9B0C();
    Wind.write(to:)();
    v140 = sub_1006BA150();
    sub_100094F10(v140, v141);
    sub_1000DE27C();
    CurrentWeather.metadata.getter(v142);
    sub_1001092E4();
    WeatherMetadata.write(to:)();
    v98 = sub_1006BA720();
  }
  v99(v98);
  sub_10009E33C();
  sub_1000B44B0();
}

uint64_t static CloudCoverByAltitude.read(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = sub_1000C1780(a1);
  if (!v1)
  {
    sub_1000C3EA0(a1);
    sub_1000C3EA0(a1);
    return CloudCoverByAltitude.init(low:medium:high:)();
  }
  return result;
}

void CloudCoverByAltitude.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1006B95D4();
  CloudCoverByAltitude.low.getter();
  v1 = sub_1000E738C();
  if (!v0)
  {
    CloudCoverByAltitude.medium.getter(v1);
    v2 = sub_1000E738C();
    CloudCoverByAltitude.high.getter(v2);
    sub_1000E738C();
  }
  sub_1000B26E8();
}

void sub_10069B75C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  unsigned __int8 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  sub_1000B4C9C();
  v93 = v5;
  v94 = v6;
  v86 = v1;
  v8 = v7;
  v81 = v9;
  sub_1000BA294(&qword_100BCB338);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_1000BD964(v11, v62);
  v12 = sub_1000BA294(&qword_100BC4E68);
  v83 = *(_QWORD *)(v12 - 8);
  v84 = v12;
  sub_10009D98C();
  __chkstk_darwin(v13);
  sub_1006B93F4();
  __chkstk_darwin(v14);
  v16 = (char *)&v62 - v15;
  v17 = sub_100099928();
  sub_100099300();
  __chkstk_darwin(v18);
  v20 = (char *)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100098778();
  sub_100098B6C();
  __chkstk_darwin(v22);
  sub_100095304();
  v85 = v8;
  v23 = v86;
  static Date.read(from:)(v8);
  if (!v23)
  {
    v75 = v0;
    v76 = v16;
    v78 = v3;
    v79 = v2;
    v86 = v4;
    v80 = v21;
    v77 = v17;
    v24 = v85;
    v25 = static String.read(from:)(v85);
    v27 = v26;
    v28 = static String.read(from:)(v24);
    v30 = v29;
    v31 = v28;
    static TimeZone.read(from:)(v24, v80);
    v73 = v31;
    v74 = v20;
    v32 = sub_1000C1780(v24);
    sub_100079FE8(v32, (unint64_t *)&qword_100BC5658, NSUnitTemperature_ptr);
    static NSUnitTemperature.read(from:)(v24);
    v72 = v25;
    sub_1006B9AF4(v33);
    sub_1000C3EA0(v24);
    static NSUnitTemperature.read(from:)(v85);
    v70 = v30;
    v71 = v27;
    sub_1006B95E4();
    Measurement.init(value:unit:)(v34, v35);
    sub_1000CDD44(v85, (uint64_t)&type metadata for String);
    v36 = v92;
    v69 = v91;
    static Optional<A>.read(from:)(v85, &type metadata for String);
    v37 = v36;
    v39 = v89;
    v38 = v90;
    sub_1000C3EA0(v85);
    sub_1000C3EA0(v85);
    v68 = v88;
    v40 = sub_1000DA104();
    v42 = v41;
    v43 = sub_10011E110();
    sub_1000C67A8((uint64_t)&unk_100BFCB98);
    sub_1000C67A8((uint64_t)&unk_100BFCBA0);
    sub_1000CDD44(v85, v43);
    sub_1000C3EA0(v85);
    LOBYTE(v43) = v87;
    v67 = sub_1000DA104();
    v45 = v44;
    v65 = sub_1000DA104();
    v66 = v46;
    v63 = sub_1000DA104();
    v64 = v47;
    v48 = sub_1006B86E4();
    v49 = sub_1006B8720();
    v61 = sub_1000F3EA0(v85, (uint64_t)&unk_100B8D730, v48, v49);
    sub_1006B9D24();
    v60 = v50;
    v59 = v63;
    v58 = v66;
    sub_1006B9D18();
    v57 = v51;
    sub_1006BA6EC();
    v55 = v82;
    v54 = v68;
    v52 = sub_1006BA8CC();
    sub_1005F96D4(v79, v72, v71, v73, v70, (uint64_t)v74, (uint64_t)v76, v75, v81, v52, v53, v37, v39, v38, v54, v40, v42, v55, v43,
      v56,
      v45,
      v57,
      v58,
      v59,
      v60,
      v61);
  }
  sub_1000DF888();
}

void sub_10069BD54()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1000B4C9C();
  sub_1006BA978();
  Date.write(to:)(v3);
  if (!v1)
  {
    sub_1006B9EE4();
    sub_1006B9FDC();
    sub_1000DCA14(v4);
    sub_1000DCA14(v2[6]);
    sub_1006BA110();
    sub_1006BA41C();
    sub_1006BA41C();
    v5 = sub_1000BA294(&qword_100BC5AA8);
    sub_1000BED20(v0, v5, (uint64_t)&protocol witness table for String);
    sub_1000BED20(v0, v5, (uint64_t)&protocol witness table for String);
    sub_1000D91F8();
    sub_1000D91F8();
    sub_1000DCA14(v2[14]);
    v6 = sub_1000BA294(&qword_100BCB338);
    sub_1000C67A8((uint64_t)&unk_100BFCB98);
    v8 = v7;
    sub_1000C67A8((uint64_t)&unk_100BFCBA0);
    sub_1000BED20(v0, v6, v8);
    sub_1000D91F8();
    sub_1000DCA14(v2[17]);
    sub_1000DCA14(v2[18]);
    sub_1000DCA14(v2[19]);
    v9 = sub_1006B86E4();
    sub_1006B8720();
    v10 = sub_1000BCF4C();
    sub_1006B992C(v10, v11, v12, v9, v13);
  }
  sub_1006B9394();
}

void sub_10069BFE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = sub_10009C82C();
  v2 = type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(v1);
  sub_1000BF24C((uint64_t)&unk_100BFCBB8);
  v4 = v3;
  sub_1000BF24C((uint64_t)&unk_100BFCBC0);
  sub_1000F3EA0(v0, v2, v4, v5);
  sub_1000FDBD8();
}

void sub_10069C054()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10011E270();
  type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(v0);
  sub_1000D02A0((uint64_t)&unk_100BFCBB8);
  sub_1000D02A0((uint64_t)&unk_100BFCBC0);
  sub_10011AC30(v1);
  sub_1000D9830();
}

uint64_t static DayWeather.read(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t result;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  uint64_t v84[29];
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD v100[2];
  uint64_t v101;
  uint64_t v102[4];
  uint64_t v103;
  uint64_t v104;

  v102[0] = a1;
  v84[20] = a2;
  sub_1000BA294(&qword_100BFC8D0);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100088FDC();
  v9 = sub_1000987B4(v8);
  v10 = type metadata accessor for DayPartForecast(v9);
  sub_1000B43A4(v10, (uint64_t)v102);
  v84[13] = v11;
  sub_10009D98C();
  __chkstk_darwin(v12);
  sub_1000986FC();
  v84[12] = v13;
  sub_10009D2A4();
  __chkstk_darwin(v14);
  sub_100079F7C();
  sub_10009511C(v15);
  v16 = sub_1000BA294(&qword_100BCB938);
  sub_1000B43A4(v16, (uint64_t)&v103);
  v84[17] = v17;
  sub_10009D98C();
  __chkstk_darwin(v18);
  sub_1000986FC();
  v84[16] = v19;
  sub_10009D2A4();
  __chkstk_darwin(v20);
  sub_1000860D0();
  v84[19] = v21;
  sub_10009D2A4();
  __chkstk_darwin(v22);
  sub_100079F7C();
  sub_10009511C(v23);
  sub_1000BA294(&qword_100BCE728);
  sub_1000B42B0();
  __chkstk_darwin(v24);
  v26 = sub_10009ED50((uint64_t)v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000B43A4(v26, (uint64_t)&v104);
  v84[24] = v27;
  sub_10009D98C();
  __chkstk_darwin(v28);
  sub_100088FDC();
  v85 = sub_10009E598(v29);
  v84[27] = *(_QWORD *)(v85 - 8);
  sub_10009D98C();
  __chkstk_darwin(v30);
  sub_100088FDC();
  v88 = sub_1006BA120(v31);
  v86 = *(_QWORD *)(v88 - 8);
  sub_10009D98C();
  __chkstk_darwin(v32);
  v87 = (char *)v84 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for SunEvents(0);
  v89 = *(_QWORD *)(v91 - 8);
  sub_10009D98C();
  __chkstk_darwin(v34);
  sub_100088FDC();
  v90 = v35;
  v93 = sub_10009E260();
  v92 = *(_QWORD *)(v93 - 8);
  sub_10009D98C();
  __chkstk_darwin(v36);
  sub_100088FDC();
  sub_10009511C(v37);
  v97 = sub_1000BA294(&qword_100BCB0A8);
  v94 = *(_QWORD *)(v97 - 8);
  sub_10009D98C();
  __chkstk_darwin(v38);
  v95 = (char *)v84 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v40);
  sub_100079F7C();
  v96 = v41;
  v99 = sub_100087944();
  v98 = *(_QWORD *)(v99 - 8);
  sub_10009D98C();
  __chkstk_darwin(v42);
  sub_10009511C((uint64_t)v84 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v44);
  v100[0] = (char *)v84 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v46);
  sub_1006BA694(v47, v48, v49, v50, v51, v52, v53, v54, v84[0]);
  v100[1] = sub_1000BA294(&qword_100BC4E68);
  sub_1000C0120();
  __chkstk_darwin(v55);
  sub_10009BE6C();
  __chkstk_darwin(v56);
  v58 = (char *)v84 - v57;
  v59 = sub_1006B9148();
  sub_100098BB4();
  __chkstk_darwin(v60);
  v61 = sub_100098778();
  sub_1000AE898();
  __chkstk_darwin(v62);
  sub_1000B3BE8();
  v63 = v101;
  result = static Date.read(from:)(v102[0]);
  if (!v63)
  {
    v101 = v61;
    v84[6] = v2;
    v84[5] = v3;
    v84[7] = (uint64_t)v58;
    v84[8] = v5;
    v84[9] = v59;
    v84[11] = v4;
    v84[10] = v6;
    v65 = v102[0];
    static WeatherCondition.read(from:)(v102[0]);
    v66 = static String.read(from:)(v65);
    v68 = v67;
    v69 = sub_1000C1780(v65);
    v70 = sub_100079FE8(v69, (unint64_t *)&qword_100BC5658, NSUnitTemperature_ptr);
    v71 = sub_10009F070();
    static NSUnitTemperature.read(from:)(v71);
    v84[3] = v66;
    v84[4] = v68;
    sub_1000F4510();
    sub_1000C4CA8(v72);
    sub_1000CDD44(v65, v101);
    sub_1000C1780(v65);
    static NSUnitTemperature.read(from:)(v102[0]);
    Measurement.init(value:unit:)(v73, v70);
    sub_1006B99BC();
    sub_1000CDD44(v102[0], v101);
    sub_1000C1780(v102[0]);
    sub_1000C3EA0(v102[0]);
    sub_1000C3EA0(v102[0]);
    sub_1000C3EA0(v102[0]);
    sub_1000C3EA0(v102[0]);
    v74 = sub_1006B9598();
    static Precipitation.read(from:)(v74);
    sub_1000C3EA0(v102[0]);
    v75 = sub_1000C3EA0(v102[0]);
    sub_100079FE8(v75, (unint64_t *)&qword_100BCB0D8, NSUnitLength_ptr);
    sub_1006BA23C();
    sub_1006B9D18();
    sub_1006B9AF4(v76);
    sub_1000C3EA0(v102[0]);
    sub_1006BA23C();
    sub_1006B9D24();
    sub_1006B9AF4(v77);
    sub_1006B9598();
    static PrecipitationAmountByType.read(from:)();
    sub_1006B9598();
    static SunEvents.read(from:)();
    sub_1006B9598();
    static MoonEvents.read(from:)();
    sub_1000C3EA0(v102[0]);
    sub_1006BA9F0(v102[0]);
    sub_1006B9D48(v78, v78);
    sub_1000C3EA0(v102[0]);
    sub_1000C3EA0(v102[0]);
    sub_1000C3EA0(v102[0]);
    v84[2] = v102[3];
    sub_1000C3EA0(v102[0]);
    v84[1] = v102[2];
    sub_1006B9598();
    static Wind.read(from:)();
    sub_1006B2340((uint64_t)&unk_100BFC8D8);
    sub_1006B2340((uint64_t)&unk_100BFC8F0);
    sub_1000CDD44(v102[0], v84[22]);
    v79 = sub_1000C3EA0(v102[0]);
    v84[0] = v102[1];
    sub_100079FE8(v79, (unint64_t *)&qword_100BCB990, NSUnitSpeed_ptr);
    static NSUnitSpeed.read(from:)(v102[0]);
    sub_10011DE24(v80);
    sub_1000C3EA0(v102[0]);
    sub_1006B9768();
    sub_10011DE24(v81);
    sub_1000C3EA0(v102[0]);
    sub_1006B9768();
    sub_10011DE24(v82);
    sub_1006BA130((uint64_t)v100);
    sub_1006BA130((uint64_t)&v99);
    sub_1000BD044((uint64_t)&unk_100BFC8F8);
    sub_1000BD044((uint64_t)&unk_100BFC900);
    sub_1000CDD44(v102[0], v84[18]);
    sub_1006BA6EC();
    sub_1006B9710();
    sub_1006BA6E0();
    v83 = sub_1006B9CA0();
    return DayWeather.init(date:condition:symbolName:highTemperature:highTemperatureTime:lowTemperature:lowTemperatureTime:humidity:humidityMax:humidityMin:maximumHumidity:minimumHumidity:precipitation:precipitationChance:rainfallAmount:snowfallAmount:precipitationAmountByType:sun:moon:uvIndex:visibilityMax:visibilityMin:maximumVisibility:minimumVisibility:wind:highWindSpeed:windGustSpeedMax:windSpeedAvg:windSpeedMax:daytimeForecast:overnightForecast:restOfDayForecast:)(v83);
  }
  return result;
}

void DayWeather.write(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t);
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t (*v92)(char *, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __n128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t (*v106)(uint64_t, _QWORD);
  uint64_t v107;
  uint64_t (*v108)(uint64_t, _QWORD);
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t (*v112)(uint64_t, _QWORD);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126[4];
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;

  sub_100099310();
  a19 = v25;
  a20 = v26;
  v161 = v22;
  v162 = v27;
  v144 = sub_1000BA294(&qword_100BFC8D0);
  sub_1000B42B0();
  __chkstk_darwin(v28);
  v145 = (char *)v126 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = type metadata accessor for DayPartForecast(0);
  v141 = *(_QWORD *)(v143 - 8);
  sub_10009D98C();
  __chkstk_darwin(v30);
  sub_1000986FC();
  v142 = v31;
  sub_10009D2A4();
  __chkstk_darwin(v32);
  sub_100079F7C();
  sub_10009511C(v33);
  v140 = sub_1000BA294(&qword_100BCB938);
  v137 = *(_QWORD *)(v140 - 8);
  sub_10009D98C();
  __chkstk_darwin(v34);
  sub_1000986FC();
  v139 = v35;
  sub_10009D2A4();
  __chkstk_darwin(v36);
  sub_1000860D0();
  v138 = v37;
  sub_10009D2A4();
  __chkstk_darwin(v38);
  sub_100079F7C();
  sub_10009511C(v39);
  v135 = sub_1000BA294(&qword_100BCE728);
  sub_1000B42B0();
  __chkstk_darwin(v40);
  v134 = sub_10009ED50((uint64_t)v126 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
  v133 = *(_QWORD *)(v134 - 8);
  sub_10009D98C();
  __chkstk_darwin(v42);
  v131 = sub_10009E598((uint64_t)v126 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  v130 = *(_QWORD *)(v131 - 8);
  sub_10009D98C();
  __chkstk_darwin(v44);
  sub_100088FDC();
  v129 = sub_1006BA120(v45);
  v128 = *(_QWORD *)(v129 - 8);
  sub_10009D98C();
  __chkstk_darwin(v46);
  v48 = sub_1006B9184(v47, v126[0]);
  v127 = type metadata accessor for SunEvents(v48);
  v126[3] = *(_QWORD *)(v127 - 8);
  sub_10009D98C();
  __chkstk_darwin(v49);
  sub_100088FDC();
  v126[2] = v50;
  v51 = sub_10009E260();
  v146 = *(_QWORD *)(v51 - 8);
  v147 = v51;
  sub_10009D98C();
  __chkstk_darwin(v52);
  sub_100099B38(v53, v126[0]);
  v54 = sub_1000BA294(&qword_100BCB0A8);
  v149 = *(_QWORD *)(v54 - 8);
  v150 = v54;
  sub_10009D98C();
  __chkstk_darwin(v55);
  v148 = (char *)v126 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v57);
  sub_100079F7C();
  v151 = v58;
  v59 = sub_100087944();
  v152 = *(_QWORD *)(v59 - 8);
  v153 = v59;
  sub_10009D98C();
  __chkstk_darwin(v60);
  sub_10009DA80(v61, v126[0]);
  v157 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v62);
  sub_1000986FC();
  v155 = v63;
  sub_10009D2A4();
  __chkstk_darwin(v64);
  sub_1000C66D0(v65, v66, v67, v68, v69, v70, v71, v72, v126[0]);
  v73 = sub_1000BA294(&qword_100BC4E68);
  v158 = *(_QWORD *)(v73 - 8);
  v159 = v73;
  sub_10009D98C();
  __chkstk_darwin(v74);
  sub_1000C0CD0();
  __chkstk_darwin(v75);
  v77 = (char *)v126 - v76;
  sub_1006B9148();
  sub_1000BD980();
  __chkstk_darwin(v78);
  v80 = (char *)v126 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100098778();
  sub_1000C0120();
  __chkstk_darwin(v81);
  sub_1000B3BE8();
  v160 = v21;
  DayWeather.date.getter(v82);
  v83 = v161;
  Date.write(to:)(v162);
  if (v83)
  {
    v84 = sub_1006B9FA0();
    v87(v84);
  }
  else
  {
    v161 = v77;
    v126[1] = v24;
    v85 = sub_10009CC44(*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8));
    DayWeather.condition.getter(v85);
    v86 = v162;
    WeatherCondition.write(to:)();
    sub_10009BCF8((uint64_t)v80, *(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
    sub_1006B966C();
    v88 = DayWeather.symbolName.getter();
    sub_1000E7D08(v86, v88, v89);
    sub_1006BA1DC();
    swift_bridgeObjectRelease();
    v90 = v161;
    DayWeather.highTemperature.getter(v91);
    sub_10009C7B4();
    sub_1006AFED0();
    v92 = *(uint64_t (**)(char *, uint64_t))(v158 + 8);
    v93 = v92(v90, v159);
    v94 = v156;
    DayWeather.highTemperatureTime.getter(v93);
    sub_1000BED20(v86, v157, (uint64_t)&protocol witness table for Date);
    sub_1005E5ABC(v94, (uint64_t)&unk_100BD35A0);
    DayWeather.lowTemperature.getter(v95);
    sub_1006BA41C();
    v96 = sub_1006B9E3C();
    ((void (*)(uint64_t))v92)(v96);
    v97 = v155;
    sub_10009E910();
    DayWeather.lowTemperatureTime.getter();
    sub_10009BD8C();
    sub_1005E5ABC(v97, (uint64_t)&unk_100BD35A0);
    sub_10009E910();
    DayWeather.humidity.getter();
    sub_1000E738C();
    sub_10009E910();
    DayWeather.humidityMax.getter();
    sub_1000E738C();
    sub_10009E910();
    DayWeather.humidityMin.getter();
    sub_1000E738C();
    sub_10009E910();
    DayWeather.maximumHumidity.getter();
    v98 = sub_1000E738C();
    DayWeather.minimumHumidity.getter(v98);
    v99 = sub_1000ED058(v162);
    DayWeather.precipitation.getter(v99);
    sub_1006B9AFC();
    Precipitation.write(to:)();
    v100 = (*(uint64_t (**)(uint64_t, uint64_t))(v152 + 8))(v154, v153);
    DayWeather.precipitationChance.getter(v100);
    v101 = sub_1000ED058(v162);
    DayWeather.rainfallAmount.getter(v101);
    sub_1006B97D4();
    (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v151, v150);
    sub_1006BA820();
    DayWeather.snowfallAmount.getter(v102);
    sub_1006B9304();
    v103 = sub_1006BA8C0();
    DayWeather.precipitationAmountByType.getter(v103);
    sub_1006B9B0C();
    PrecipitationAmountByType.write(to:)();
    sub_1006B93D0();
    sub_1006B956C();
    DayWeather.sun.getter(v104);
    sub_1006B9AFC();
    SunEvents.write(to:)();
    v105 = sub_1006BA168();
    sub_100094F10(v105, v106);
    sub_1006B956C();
    DayWeather.moon.getter();
    sub_1006B9AFC();
    MoonEvents.write(to:)();
    v107 = sub_1006BA198();
    sub_100094F10(v107, v108);
    sub_1006B956C();
    v109 = DayWeather.uvIndex.getter();
    UVIndex.value.getter(v109);
    sub_1000ED058(v162);
    v110 = sub_1006BA5AC();
    LocationAuthorizationState.write(to:)(v162, v110);
    v111 = sub_1006B9CFC();
    v113 = sub_100094F10(v111, v112);
    DayWeather.visibilityMax.getter(v113);
    v114 = sub_1000ED058(v162);
    DayWeather.visibilityMin.getter(v114);
    v115 = sub_1000ED058(v162);
    DayWeather.maximumVisibility.getter(v115);
    v116 = sub_1000ED058(v162);
    DayWeather.minimumVisibility.getter(v116);
    sub_1000ED058(v162);
    sub_1006B956C();
    DayWeather.wind.getter();
    sub_1006B9AFC();
    Wind.write(to:)();
    sub_100094F10(v132, *(uint64_t (**)(uint64_t, _QWORD))(v133 + 8));
    sub_1006BA820();
    DayWeather.highWindSpeed.getter();
    sub_1006B2340((uint64_t)&unk_100BFC8D8);
    sub_1006B2340((uint64_t)&unk_100BFC8F0);
    v117 = sub_10009BD8C();
    sub_1006B9FC0(v117, (uint64_t)&qword_100BCE728);
    v118 = v136;
    sub_10011DDE8();
    DayWeather.windGustSpeedMax.getter();
    sub_1006B97D4();
    sub_1006B95C8();
    sub_1006B94D4(v118, (uint64_t)&a15);
    v119 = v138;
    sub_1006B9470();
    DayWeather.windSpeedAvg.getter();
    sub_1006B9304();
    v120 = sub_1006B94D4(v119, (uint64_t)&a15);
    v121 = v139;
    DayWeather.windSpeedMax.getter(v120);
    sub_1006AFED0();
    sub_1006B94D4(v121, (uint64_t)&a15);
    sub_1006B9470();
    DayWeather.daytimeForecast.getter();
    sub_1006B9B0C();
    DayPartForecast.write(to:)();
    sub_1006B95C8();
    sub_1006B9D30((uint64_t)&a16);
    sub_1006B956C();
    DayWeather.overnightForecast.getter();
    DayPartForecast.write(to:)();
    v122 = sub_1006B9D30((uint64_t)&a18);
    v123 = (uint64_t)v145;
    DayWeather.restOfDayForecast.getter(v122);
    sub_1006B9200((uint64_t)&unk_100BFC8F8);
    v125 = v124;
    sub_1006B9200((uint64_t)&unk_100BFC900);
    sub_1006BA2FC(v162, v144, v125);
    sub_1005E5ABC(v123, (uint64_t)&qword_100BFC8D0);
  }
  sub_10009E33C();
  sub_1000B44B0();
}

uint64_t static Elevation.read(from:)()
{
  uint64_t v0;
  uint64_t result;
  unsigned __int8 v2;

  sub_1005D9854();
  result = sub_10003BDD4();
  if (!v0)
  {
    sub_10003BDD4();
    return ((uint64_t (*)(_QWORD))Elevation.init(degrees:isPM:))(v2);
  }
  return result;
}

void Elevation.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1006B95D4();
  Elevation.degrees.getter(v1);
  sub_1005D9854();
  v2 = sub_1000E738C();
  if (!v0)
  {
    Elevation.isPM.getter(v2);
    sub_1000E738C();
  }
  sub_1000B26E8();
}

void sub_10069DC88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_100099310();
  v2 = v1;
  v4 = v3;
  sub_1000BA294(&qword_100BC3360);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  v6 = sub_1000DA104();
  if (!v0)
  {
    v8 = v6;
    v9 = v7;
    v10 = sub_1000DA104();
    v12 = v11;
    sub_1000CDD44(v2, (uint64_t)&type metadata for String);
    v20 = sub_1006BA904();
    sub_10007A100((uint64_t)&unk_100BFCBC8);
    sub_10007A100((uint64_t)&unk_100BFCBD0);
    sub_1000CDD44(v2, v20);
    v13 = sub_1000DA104();
    *v4 = v8;
    v4[1] = v9;
    v4[2] = v10;
    v4[3] = v12;
    v4[4] = v18;
    v4[5] = v19;
    v15 = v14;
    v16 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
    sub_1006B9968(v16, (uint64_t)v4 + *(int *)(v16 + 28), &qword_100BC3360);
    v17 = (uint64_t *)((char *)v4 + *(int *)(v16 + 32));
    *v17 = v13;
    v17[1] = v15;
  }
  sub_10009C884();
  sub_1000B44B0();
}

void sub_10069DE50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000B4C9C();
  v3 = sub_1000B2F80(v2);
  if (!v1)
  {
    sub_1000CF9A4(v3, *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
    sub_1000BA294(&qword_100BC5AA8);
    sub_10009BD8C();
    v4 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
    sub_1000BA294(&qword_100BC3360);
    sub_1000C67A8((uint64_t)&unk_100BFCBC8);
    sub_1000C67A8((uint64_t)&unk_100BFCBD0);
    v5 = sub_10009BD8C();
    sub_1000CF9A4(v5, *(_QWORD *)(v0 + *(int *)(v4 + 32)), *(_QWORD *)(v0 + *(int *)(v4 + 32) + 8));
  }
  sub_1006B9394();
}

void sub_10069DF58()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = sub_1000C0C34();
  type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(v2);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000B301C();
  if (!v1)
  {
    v8 = v6;
    v9 = v7;
    sub_1006B9F88();
    sub_10069E044();
    *v0 = v8;
    v0[1] = v9;
    v10 = sub_1006BA904();
    sub_10007C75C((uint64_t)v5, (uint64_t)v0 + *(int *)(v10 + 20), type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance);
  }
  sub_1006BA61C();
  sub_1000D9830();
}

void sub_10069E000(uint64_t a1)
{
  uint64_t v1;

  sub_100095100(a1);
  if (!v1)
  {
    sub_1006BA904();
    sub_1006B9558();
    sub_10069E1D0();
  }
  sub_1000C1348();
}

void sub_10069E044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_1006B9168();
  type metadata accessor for TemperatureScaleConfiguration(v5);
  sub_100098B6C();
  __chkstk_darwin(v6);
  v7 = sub_1006B9A00();
  static TemperatureScaleConfiguration.read(from:)(v7);
  if (!v0)
  {
    sub_1000C3EA0(v3);
    sub_1000C3EA0(v3);
    sub_1000C3EA0(v3);
    v8 = sub_1000DA104();
    v10 = v9;
    sub_1000C3EA0(v3);
    sub_10009C94C(v1, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
    v11 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
    *(_QWORD *)(v1 + v11[5]) = v16;
    *(_QWORD *)(v1 + v11[6]) = v15;
    *(_QWORD *)(v1 + v11[7]) = v14;
    v12 = (uint64_t *)(v1 + v11[8]);
    *v12 = v8;
    v12[1] = v10;
    *(_BYTE *)(v1 + v11[9]) = v13;
  }
  sub_1006B969C();
}

void sub_10069E1D0()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;

  sub_1006B9690();
  TemperatureScaleConfiguration.write(to:)();
  if (!v0)
  {
    type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
    sub_1006B9FDC();
    sub_1006B9DCC(v3);
    sub_1000E738C();
    sub_1006B9DCC(v2[6]);
    sub_1000E738C();
    sub_1006B9DCC(v2[7]);
    v4 = sub_1000E738C();
    sub_1000CF9A4(v4, *(_QWORD *)(v1 + v2[8]), *(_QWORD *)(v1 + v2[8] + 8));
    sub_1000E738C();
  }
  sub_1000FDBD8();
}

void sub_10069E2C0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1000BE9DC();
  sub_1006BA558();
  sub_1000BA294(&qword_100BC3368);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  v5 = sub_1000C19E4();
  v6 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem(v5);
  sub_1000BDDA0((uint64_t)&unk_100BFCBD8);
  v8 = v7;
  sub_1000BDDA0((uint64_t)&unk_100BFCBE0);
  v9 = sub_10009BD44();
  static Array<A>.read(from:)(v9, v6, v8, v10);
  if (!v2)
  {
    v11 = sub_1006B9C78();
    v12 = type metadata accessor for WeatherDescription(v11);
    sub_1000C67A8((uint64_t)&unk_100BFCBE8);
    sub_1000C67A8((uint64_t)&unk_100BFCBF0);
    sub_1006B9BFC(v3, v12);
    *v0 = v6;
    v13 = sub_1006BA384();
    sub_10009E8CC(v1, (uint64_t)v0 + *(int *)(v13 + 20), &qword_100BC3368);
  }
  sub_1000C1FB4();
  sub_100089054();
}

void sub_10069E3E8()
{
  uint64_t v0;

  sub_100110560();
  sub_1006B9634();
  sub_1000BDDA0((uint64_t)&unk_100BFCBD8);
  sub_1000BDDA0((uint64_t)&unk_100BFCBE0);
  sub_1000BE954();
  if (!v0)
  {
    sub_1006BA384();
    sub_1000BA294(&qword_100BC3368);
    sub_1000D02A0((uint64_t)&unk_100BFCBE8);
    sub_1000D02A0((uint64_t)&unk_100BFCBF0);
    sub_10009BD8C();
  }
  sub_1000C60F8();
}

void sub_10069E4D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = sub_10009C82C();
  v2 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem(v1);
  sub_1000BF24C((uint64_t)&unk_100BFCBD8);
  v4 = v3;
  sub_1000BF24C((uint64_t)&unk_100BFCBE0);
  sub_1000F3EA0(v0, v2, v4, v5);
  sub_1000FDBD8();
}

void sub_10069E54C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10011E270();
  type metadata accessor for HourlyForecastComponentViewModel.HourlyItem(v0);
  sub_1000D02A0((uint64_t)&unk_100BFCBD8);
  sub_1000D02A0((uint64_t)&unk_100BFCBE0);
  sub_10011AC30(v1);
  sub_1000D9830();
}

void sub_10069E5B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_100110560();
  v6 = v5;
  v7 = sub_1000C0C34();
  type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel(v7);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  v9 = sub_1000C1E78();
  type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(v9);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_1000C0CD0();
  __chkstk_darwin(v11);
  sub_1001FB944();
  sub_1000FDA70(v6);
  if (!v1)
  {
    sub_1006BA070();
    if (v13)
    {
      sub_1006BA07C();
      sub_10069EC14();
      sub_10009F7BC(v2, v16, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel);
      v15 = 2;
    }
    else if (v12 == 2)
    {
      sub_1006BA9B0();
      sub_10009F7BC(v3, v17, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel);
      v15 = 1;
    }
    else
    {
      if (v12 != 1)
      {
        v19 = sub_1000C56E0();
        sub_10007A100((uint64_t)&qword_100BF4CC0);
        v21 = sub_10009D46C(v19, v20);
        v23 = sub_1006B9678(v21, v22);
        sub_1000AE9B0(v23, enum case for BinaryDecoder.Error.valueNotSupported(_:));
        sub_10009C808();
        goto LABEL_2;
      }
      sub_1006BA9B0();
      sub_10009F7BC(v4, v14, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel);
      v15 = 0;
    }
    v18 = sub_1006B9634();
    swift_storeEnumTagMultiPayload(v0, v18, v15);
  }
LABEL_2:
  sub_1006BA08C();
  sub_1000C60F8();
}

void sub_10069E734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t (*v35)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  sub_100099310();
  a19 = v24;
  a20 = v25;
  v26 = sub_1000BDD30();
  type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel(v26);
  sub_1000B42B0();
  __chkstk_darwin(v27);
  v28 = sub_100089108();
  v29 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(v28);
  sub_1000B42B0();
  __chkstk_darwin(v30);
  sub_1000C0CD0();
  __chkstk_darwin(v31);
  v33 = (char *)&a9 - v32;
  sub_1006B9634();
  sub_1000B42B0();
  __chkstk_darwin(v34);
  sub_100099234();
  sub_100078058(v20, v23, v35);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v23);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_1006B94F0(v23, v37, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel);
      sub_1006B9A14();
      sub_1000E738C();
      if (!v21)
      {
        sub_1006B936C();
        sub_1006BA93C();
        v38 = sub_1000BE954();
        v39 = sub_1000CF9A4(v38, *(_QWORD *)(v22 + *(int *)(v29 + 28)), *(_QWORD *)(v22 + *(int *)(v29 + 28) + 8));
        sub_1000CF9A4(v39, *(_QWORD *)(v22 + *(int *)(v29 + 32)), *(_QWORD *)(v22 + *(int *)(v29 + 32) + 8));
      }
    }
    else
    {
      sub_1006B94C4(v23, v37, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel);
      sub_1006B99B0();
      sub_1000E738C();
      if (!v21)
        sub_10069EFCC();
    }
  }
  else
  {
    sub_10007C75C(v23, (uint64_t)v33, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel);
    sub_1006B9CD0();
    sub_1000E738C();
    if (!v21)
    {
      sub_1006B936C();
      sub_1006BA93C();
      v40 = sub_1000BE954();
      v41 = sub_1000CF9A4(v40, *(_QWORD *)&v33[*(int *)(v29 + 28)], *(_QWORD *)&v33[*(int *)(v29 + 28) + 8]);
      sub_1000CF9A4(v41, *(_QWORD *)&v33[*(int *)(v29 + 32)], *(_QWORD *)&v33[*(int *)(v29 + 32) + 8]);
    }
  }
  sub_1000BF3B4();
  sub_10009EDB4();
  sub_1000B44B0();
}

void sub_10069E9E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  sub_100099310();
  v5 = v4;
  v7 = v6;
  sub_100099928();
  sub_100098B6C();
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100098778();
  sub_100099300();
  __chkstk_darwin(v11);
  v12 = sub_1006B932C();
  static Date.read(from:)(v12);
  if (!v0)
  {
    static TimeZone.read(from:)(v5, v13);
    v25 = sub_1006B99F8(v5, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, (uint64_t)&protocol witness table for String);
    v23 = sub_1000B301C();
    v24 = v14;
    v15 = sub_1000B301C();
    v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v18 = v17;
    sub_10008908C(v7, v1, v16);
    v19 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(0);
    sub_1000992E4(v7 + v19[5], (uint64_t)v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
    *(_QWORD *)(v7 + v19[6]) = v25;
    v20 = (uint64_t *)(v7 + v19[7]);
    v21 = v24;
    *v20 = v23;
    v20[1] = v21;
    v22 = (uint64_t *)(v7 + v19[8]);
    *v22 = v15;
    v22[1] = v18;
  }
  sub_10009E33C();
  sub_1000B44B0();
}

void sub_10069EB60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;

  sub_1006B9FE8(a1);
  if (!v1)
  {
    v4 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(0);
    v5 = sub_1006B9558();
    TimeZone.write(to:)(v5);
    sub_1006B9484(v2, *(_QWORD *)(v3 + v4[6]), (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, (uint64_t)&protocol witness table for String);
    sub_10009DE70(v2, *(_QWORD *)(v3 + v4[7]), *(_QWORD *)(v3 + v4[7] + 8));
    sub_10009DE70(v2, *(_QWORD *)(v3 + v4[8]), *(_QWORD *)(v3 + v4[8] + 8));
  }
  sub_1000FDBD8();
}

void sub_10069EC14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  unsigned __int8 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  sub_1000B4C9C();
  v67 = v5;
  v68 = v6;
  v63 = v1;
  v8 = v7;
  v60 = v9;
  v61 = sub_100099928();
  sub_1000C0120();
  __chkstk_darwin(v10);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100098778();
  sub_1000BD980();
  __chkstk_darwin(v14);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10011E110();
  sub_100098B6C();
  __chkstk_darwin(v18);
  sub_10009E540();
  v62 = v8;
  v19 = v63;
  static FixedSizeTypeBinaryCodable.read(from:)(v8);
  if (!v19)
  {
    v53 = v0;
    v54 = v2;
    v55 = v13;
    v56 = v12;
    v58 = v17;
    v59 = v4;
    v57 = v16;
    v63 = v3;
    v20 = v62;
    sub_10009F80C(v62, (uint64_t)&type metadata for String);
    v21 = v66;
    v22 = sub_1000B301C();
    v24 = v23;
    sub_1000C1780(v20);
    sub_1000C1780(v20);
    v25 = v65;
    static Precipitation.read(from:)(v20);
    v50 = sub_1000DA104();
    v51 = v25;
    v52 = v26;
    v48 = sub_1000DA104();
    v49 = v27;
    v46 = sub_1000DA104();
    v47 = v28;
    v29 = sub_1006B91B8();
    static Date.read(from:)(v29);
    v30 = sub_1006B91B8();
    static TimeZone.read(from:)(v30, v31);
    sub_1000C3EA0(v62);
    v32 = v64;
    v45 = sub_1000F3EA0(v62, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, (uint64_t)&protocol witness table for String);
    v44 = (uint64_t)v56;
    v43 = (uint64_t)v57;
    v42 = v47;
    sub_1006B99BC();
    v41 = v33;
    v40 = v49;
    v39 = v48;
    v38 = v52;
    v34 = sub_100098FCC();
    sub_100547820(v34, v35, v21, v22, v24, v51, v63, v50, v36, v37, v38, v39, v40, v41, v42, v43, v44, v32, v45);
  }
  sub_10009E33C();
  sub_1000DF888();
}

void sub_10069EFCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;

  sub_1006BA978();
  FixedSizeTypeBinaryCodable.write(to:)(v3);
  if (!v1)
  {
    v4 = sub_1000BA294(&qword_100BC5AA8);
    v5 = sub_1000BED20(v0, v4, (uint64_t)&protocol witness table for String);
    sub_1000BDB40(v5, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
    sub_1000D91F8();
    sub_1000D91F8();
    v6 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel(0);
    sub_1000BEF10();
    Precipitation.write(to:)();
    sub_1000DCA14(v6[10]);
    sub_1000DCA14(v6[11]);
    sub_1000DCA14(v6[12]);
    sub_10009C7E8();
    sub_1006BA110();
    sub_1000D91F8();
    sub_1006B992C(v0, *(_QWORD *)(v2 + v6[16]), (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, (uint64_t)&protocol witness table for String);
  }
  sub_10009EFE8();
}

uint64_t static HourWeather.read(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int8 v104;

  v103 = a1;
  v85 = a2;
  sub_1006B963C();
  sub_1000B42B0();
  __chkstk_darwin(v7);
  v84 = sub_10009E598((uint64_t)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v83 = *(_QWORD *)(v84 - 8);
  sub_10009D98C();
  __chkstk_darwin(v9);
  v87 = sub_1006B9700((uint64_t)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v86 = *(_QWORD *)(v87 - 8);
  sub_10009D98C();
  __chkstk_darwin(v11);
  sub_10009511C((uint64_t)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v89 = sub_1000BA294(&qword_100BCB948);
  v88 = *(_QWORD *)(v89 - 8);
  sub_10009D98C();
  __chkstk_darwin(v13);
  sub_100088FDC();
  v91 = sub_10011DE54(v14);
  v90 = *(_QWORD *)(v91 - 8);
  sub_10009D98C();
  __chkstk_darwin(v15);
  sub_10009511C((uint64_t)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v94 = sub_1000BA294(&qword_100BCB0A8);
  v93 = *(_QWORD *)(v94 - 8);
  sub_10009D98C();
  __chkstk_darwin(v17);
  sub_1000986FC();
  v81 = v18;
  sub_10009D2A4();
  __chkstk_darwin(v19);
  sub_1000860D0();
  v92 = v20;
  sub_10009D2A4();
  __chkstk_darwin(v21);
  sub_100079F7C();
  v95 = v22;
  v97 = sub_100087944();
  v96 = *(_QWORD *)(v97 - 8);
  sub_10009D98C();
  __chkstk_darwin(v23);
  sub_1000BD41C(v24, v70);
  v25 = sub_1000BA294(&qword_100BC4E68);
  v99 = *(_QWORD *)(v25 - 8);
  v100 = v25;
  sub_10009D98C();
  __chkstk_darwin(v26);
  v80 = (char *)&v70 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v28);
  sub_1000860D0();
  v82 = v29;
  sub_10009D2A4();
  __chkstk_darwin(v30);
  v101 = (char *)&v70 - v31;
  v32 = sub_1006B9148();
  sub_1000C0120();
  __chkstk_darwin(v33);
  v34 = sub_1006B989C();
  sub_100098B6C();
  __chkstk_darwin(v35);
  v37 = (char *)&v70 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100098778();
  sub_100098BB4();
  __chkstk_darwin(v39);
  sub_10009C8C4();
  v40 = v102;
  result = static Date.read(from:)(v103);
  if (!v40)
  {
    v72 = v2;
    v73 = v32;
    v74 = v5;
    v75 = v6;
    v79 = v3;
    v76 = v34;
    v77 = v37;
    v78 = v4;
    v102 = v38;
    v42 = v103;
    sub_1000C1780(v103);
    sub_1000C1780(v42);
    sub_1000C1780(v42);
    sub_1000C1780(v42);
    static CloudCoverByAltitude.read(from:)(v42);
    static WeatherCondition.read(from:)(v42);
    v70 = static String.read(from:)(v42);
    v71 = v43;
    v44 = sub_1000C1780(v42);
    sub_100079FE8(v44, (unint64_t *)&qword_100BC5658, NSUnitTemperature_ptr);
    sub_1006BA890(v103);
    sub_1000C4CA8(v45);
    sub_1000FDA70(v103);
    sub_1000C3EA0(v103);
    v46 = v104;
    v47 = sub_1006BA344();
    static Precipitation.read(from:)(v47);
    sub_1000C3EA0(v103);
    v48 = sub_1000C3EA0(v103);
    sub_100079FE8(v48, (unint64_t *)&qword_100BCB0D8, NSUnitLength_ptr);
    sub_1006B9838();
    sub_1006B9734(v49);
    sub_1000C3EA0(v103);
    sub_1006B9838();
    sub_1006B9734(v50);
    sub_1006B9D18();
    v51 = sub_1006BA344();
    static ApparentPrecipitationIntensity.read(from:)(v51);
    v52 = sub_1000C3EA0(v103);
    sub_100079FE8(v52, &qword_100BCB9A8, NSUnitPressure_ptr);
    v53 = sub_1006BA344();
    static NSUnitPressure.read(from:)(v53);
    sub_1000C4CA8(v54);
    v55 = sub_1006BA344();
    static PressureTrend.read(from:)(v55, v56, v57, v58, v59, v60, v61, v62);
    sub_1000C3EA0(v103);
    sub_1006B9D98();
    sub_1006BA140(v63);
    sub_1000C3EA0(v103);
    sub_1006B9D98();
    sub_1006BA140(v64);
    sub_1000C3EA0(v103);
    sub_1006BA9F0(v103);
    sub_1006B9D48(v65, v65);
    sub_1000C3EA0(v103);
    sub_1006B9838();
    sub_1006B9734(v66);
    sub_1006BA344();
    static Wind.read(from:)();
    sub_1006BA6EC();
    sub_1006B9D18();
    sub_1006BA6E0();
    sub_1006B99BC();
    v69 = v67;
    v68 = sub_1006B9CA0();
    return HourWeather.init(date:cloudCover:cloudCoverLow:cloudCoverMid:cloudCoverHigh:cloudCoverByAltitude:condition:symbolName:dewPoint:humidity:isDaylight:precipitation:precipitationChance:precipitationAmount:snowfallAmount:apparentPrecipitationIntensity:pressure:pressureTrend:temperature:apparentTemperature:uvIndex:visibility:wind:)(v79, v77, v74, v70, v71, v101, v46, v98, v68, v69);
  }
  return result;
}

void HourWeather.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(char *, uint64_t);
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  uint64_t v83[4];
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  sub_100099310();
  v113 = v1;
  v114 = v7;
  v90 = sub_1006B963C();
  v89 = *(_QWORD *)(v90 - 8);
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_100088FDC();
  v10 = sub_10009E598(v9);
  v111 = *(_QWORD *)(v10 - 8);
  v112 = v10;
  sub_10009D98C();
  __chkstk_darwin(v11);
  v93 = sub_1006B9700((uint64_t)v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v92 = *(_QWORD *)(v93 - 8);
  sub_10009D98C();
  __chkstk_darwin(v13);
  sub_10009511C((uint64_t)v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v95 = sub_1000BA294(&qword_100BCB948);
  v94 = *(_QWORD *)(v95 - 8);
  sub_10009D98C();
  __chkstk_darwin(v15);
  v17 = sub_10011DE54((uint64_t)v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v96 = *(_QWORD *)(v17 - 8);
  v97 = v17;
  sub_10009D98C();
  __chkstk_darwin(v18);
  sub_1006B9EAC(v19, v83[0]);
  v20 = sub_1000BA294(&qword_100BCB0A8);
  v100 = *(_QWORD *)(v20 - 8);
  v101 = v20;
  sub_10009D98C();
  __chkstk_darwin(v21);
  sub_1000986FC();
  v109 = v22;
  sub_10009D2A4();
  __chkstk_darwin(v23);
  sub_1000860D0();
  v99 = v24;
  sub_10009D2A4();
  __chkstk_darwin(v25);
  v102 = (char *)v83 - v26;
  v27 = sub_100087944();
  v103 = *(_QWORD *)(v27 - 8);
  v104 = v27;
  sub_10009D98C();
  __chkstk_darwin(v28);
  sub_1000BD964(v29, v83[0]);
  v30 = sub_1000BA294(&qword_100BC4E68);
  v106 = *(_QWORD *)(v30 - 8);
  v107 = v30;
  sub_10009D98C();
  __chkstk_darwin(v31);
  sub_1000986FC();
  v86 = v32;
  sub_10009D2A4();
  __chkstk_darwin(v33);
  sub_1000860D0();
  v85 = v34;
  sub_10009D2A4();
  __chkstk_darwin(v35);
  sub_100079F7C();
  v105 = v36;
  v108 = sub_1006B9148();
  sub_100099300();
  __chkstk_darwin(v37);
  v38 = sub_1000C1E78();
  v39 = type metadata accessor for CloudCoverByAltitude(v38);
  sub_100098BB4();
  __chkstk_darwin(v40);
  v42 = (char *)v83 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_100098778();
  sub_10009D5D4();
  __chkstk_darwin(v44);
  sub_10009C8C4();
  v110 = v0;
  HourWeather.date.getter(v45);
  v46 = v113;
  Date.write(to:)(v114);
  if (v46)
  {
    v47 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v48 = v2;
    v49 = v43;
LABEL_3:
    v47(v48, v49);
    goto LABEL_5;
  }
  v83[3] = (uint64_t)v42;
  v84 = v4;
  v113 = v39;
  v83[1] = v3;
  v83[2] = v6;
  v50 = v109;
  v51 = v111;
  v52 = sub_10007A170(v2, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  HourWeather.cloudCover.getter(v52);
  v53 = v114;
  sub_1000DB074(v114);
  sub_10009E910();
  HourWeather.cloudCoverLow.getter();
  sub_1000DB074(v53);
  sub_10009E910();
  HourWeather.cloudCoverMid.getter();
  sub_1000DB074(v53);
  sub_10009E910();
  HourWeather.cloudCoverHigh.getter();
  sub_1000DB074(v53);
  sub_10009E910();
  HourWeather.cloudCoverByAltitude.getter();
  sub_1006BA510();
  sub_1006B92B8(v84);
  sub_10009E910();
  HourWeather.condition.getter(v54);
  sub_1006B9C04();
  WeatherCondition.write(to:)();
  v55 = sub_1006BA6F8();
  v56(v55);
  sub_10009E910();
  HourWeather.symbolName.getter();
  v57 = sub_1006BA258();
  sub_1000E7D08(v57, v58, v59);
  sub_1006BA1DC();
  v60 = swift_bridgeObjectRelease();
  v61 = v105;
  HourWeather.dewPoint.getter(v60);
  sub_1006B9304();
  v62 = (*(uint64_t (**)(uint64_t, uint64_t))(v106 + 8))(v61, v107);
  HourWeather.humidity.getter(v62);
  sub_1000ED058(v53);
  HourWeather.isDaylight.getter(v63);
  v64 = sub_1006B9DC4(v53);
  HourWeather.precipitation.getter(v64);
  Precipitation.write(to:)();
  v65 = sub_1006B96BC();
  HourWeather.precipitationChance.getter(v65);
  v66 = FixedSizeTypeBinaryCodable.write(to:)(v114);
  HourWeather.precipitationAmount.getter(v66);
  sub_1006BA41C();
  v67 = *(uint64_t (**)(char *, uint64_t))(v100 + 8);
  v68 = v67(v102, v101);
  v69 = v99;
  HourWeather.snowfallAmount.getter(v68);
  sub_1006AFED0();
  v67(v69, v101);
  sub_1006BA2A4();
  HourWeather.apparentPrecipitationIntensity.getter();
  ApparentPrecipitationIntensity.write(to:)();
  if (v67)
  {
    (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v98, v97);
    goto LABEL_5;
  }
  v70 = sub_1006B9294();
  HourWeather.pressure.getter(v70);
  sub_1006B917C();
  v71 = sub_1006BA434();
  v72(v71, v95);
  sub_1006BA2A4();
  HourWeather.pressureTrend.getter();
  PressureTrend.write(to:)(v114);
  v73 = sub_100094F10(v91, *(uint64_t (**)(uint64_t, _QWORD))(v92 + 8));
  v74 = v85;
  HourWeather.temperature.getter(v73);
  sub_1006B917C();
  sub_1006BA098();
  if (!v74)
  {
    v75 = v86;
    sub_1006BA2A4();
    HourWeather.apparentTemperature.getter(v76);
    sub_1006B917C();
    v77 = sub_1006BA098();
    if (!v75)
    {
      v78 = HourWeather.uvIndex.getter(v77);
      UVIndex.value.getter(v78);
      sub_1006B91F8(v114);
      v79 = sub_1006BA5AC();
      LocationAuthorizationState.write(to:)(v114, v79);
      v80 = sub_1000B3274(v87, *(uint64_t (**)(uint64_t, uint64_t))(v51 + 8));
      HourWeather.visibility.getter(v80);
      sub_1006B9304();
      v81 = v67(v50, v101);
      HourWeather.wind.getter(v81, v82);
      Wind.write(to:)();
      sub_1000988C4();
      v48 = v88;
      v49 = v90;
      goto LABEL_3;
    }
  }
LABEL_5:
  sub_10009E33C();
  sub_1000B44B0();
}

void sub_1006A05B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1006BA7E0(a1);
  if (!v1)
  {
    sub_1006BAA10();
    sub_1000CDD44(v5, (uint64_t)&type metadata for String);
    v6 = sub_1000DA104();
    v8 = v7;
    v16 = sub_1000DA104();
    v19 = v9;
    v14 = sub_1000DA104();
    v15 = v10;
    sub_1000DA104();
    sub_1000CDD44(v5, (uint64_t)&type metadata for String);
    *(_QWORD *)v3 = v4;
    *(_QWORD *)(v3 + 8) = v2;
    *(_QWORD *)(v3 + 16) = v17;
    *(_QWORD *)(v3 + 24) = v18;
    *(_QWORD *)(v3 + 32) = v6;
    *(_QWORD *)(v3 + 40) = v8;
    *(_QWORD *)(v3 + 48) = v16;
    *(_QWORD *)(v3 + 56) = v19;
    *(_QWORD *)(v3 + 64) = v14;
    *(_QWORD *)(v3 + 72) = v15;
    sub_1006BA748();
    *(_QWORD *)(v3 + 80) = v12;
    *(_QWORD *)(v3 + 88) = v11;
    *(_OWORD *)(v3 + 96) = v13;
  }
}

void sub_1006A0748(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[16];
  _BYTE v8[16];
  _BYTE v9[16];

  sub_1000B2F80(a1);
  if (!v2)
  {
    sub_1006B9BF4((uint64_t)(v1 + 2), (uint64_t)v9);
    sub_1006B9BF4((uint64_t)v9, (uint64_t)v7);
    sub_1000BA294(&qword_100BC5AA8);
    v3 = sub_10009BD8C();
    v4 = sub_1000CF9A4(v3, v1[4], v1[5]);
    v5 = sub_1000CF9A4(v4, v1[6], v1[7]);
    v6 = sub_1000CF9A4(v5, v1[8], v1[9]);
    sub_1000CF9A4(v6, v1[10], v1[11]);
    sub_1006B9BF4((uint64_t)(v1 + 12), (uint64_t)v8);
    sub_1006B9BF4((uint64_t)v8, (uint64_t)v7);
    sub_10009BD8C();
  }
  sub_1006B92E0();
}

void sub_1006A0854()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_100099310();
  v3 = v2;
  v5 = v4;
  sub_1006B9644();
  sub_1000B42B0();
  __chkstk_darwin(v6);
  v7 = sub_1000992A8();
  type metadata accessor for WeatherConditionBackgroundPreprocessedDataModel(v7);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000DA104();
  if (!v0)
  {
    v13 = v11;
    v14 = v12;
    sub_1000CDD44(v3, (uint64_t)&type metadata for String);
    v16 = v27;
    v15 = v28;
    v25 = sub_1000DA104();
    v26 = v16;
    v29 = v17;
    v18 = sub_1000DA104();
    v20 = v19;
    v24 = v18;
    sub_1006B91B8();
    sub_1006AC14C();
    sub_1006B938C(v1, v21, type metadata accessor for WeatherConditionBackgroundTimeData);
    *v5 = v13;
    v5[1] = v14;
    v5[2] = v26;
    v5[3] = v15;
    v5[4] = v25;
    v5[5] = v29;
    v5[6] = v24;
    v5[7] = v20;
    v22 = type metadata accessor for ListPreprocessedDataModel(0);
    sub_10007C75C((uint64_t)v10, (uint64_t)v5 + *(int *)(v22 + 32), type metadata accessor for WeatherConditionBackgroundPreprocessedDataModel);
  }
  sub_10009C884();
  sub_1000B44B0();
}

void sub_1006A09D0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000B4C9C();
  sub_1000B2F80(v2);
  if (!v1)
  {
    sub_1000BA294(&qword_100BC5AA8);
    v3 = sub_10009BD8C();
    v4 = sub_1000CF9A4(v3, v0[4], v0[5]);
    sub_1000CF9A4(v4, v0[6], v0[7]);
    type metadata accessor for ListPreprocessedDataModel(0);
    v5 = sub_10009C7B4();
    Date.write(to:)(v5);
    sub_1006B9644();
    sub_1006B9C68();
    sub_1000BA294(&qword_100BC3370);
    sub_1000C67A8((uint64_t)&unk_100BFCBF8);
    sub_1000C67A8((uint64_t)&unk_100BFCC00);
    sub_10009BD8C();
    sub_1006B96D8();
    sub_1000BA294(&qword_100BC3378);
    sub_1000D02A0((uint64_t)&unk_100BFCC08);
    sub_1000D02A0((uint64_t)&unk_100BFCC10);
    sub_10009BD8C();
  }
  sub_1006B9394();
}

void static MinuteCondition.read(from:)()
{
  sub_1006A2440();
}

void MinuteCondition.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  sub_100099310();
  sub_1006BA0B4();
  sub_10009D98C();
  __chkstk_darwin(v4);
  sub_10009E45C(v5, v22);
  sub_1000BD980();
  __chkstk_darwin(v6);
  sub_100098694();
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100098778();
  sub_100099300();
  __chkstk_darwin(v8);
  sub_1006B9BA4();
  MinuteCondition.date.getter();
  sub_1006B9CBC();
  if (v0)
  {
    v9 = sub_1006BA838();
  }
  else
  {
    sub_10007A170(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    sub_1000DE27C();
    v11 = MinuteCondition.expirationDate.getter();
    v13 = sub_1006B99C8(v11, v12, (uint64_t)&protocol witness table for Date);
    sub_1006BA950(v13, (uint64_t)&unk_100BD35A0);
    v14 = MinuteCondition.shortDescription.getter();
    sub_1000B32D0(v14, v15);
    v16 = sub_1000986E8();
    v17 = MinuteCondition.longDescription.getter(v16);
    sub_1000B32D0(v17, v18);
    v19 = sub_1000986E8();
    v20 = MinuteCondition.parameters.getter(v19);
    sub_1006B9F74(v20, v21, (uint64_t)&type metadata for String);
    sub_1000986E8();
    sub_1000DE27C();
    MinuteCondition.token.getter();
    sub_1006BA4F0();
    sub_1006B92B8(v1);
    sub_1000DE27C();
    MinuteCondition.shift.getter();
    sub_1006BA500();
    v9 = sub_10011738C();
  }
  v10(v9);
  sub_1006B95F8();
  sub_1000B44B0();
}

void static MinuteSummary.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[8];
  uint64_t v20;
  uint64_t v21;

  sub_1000B4C9C();
  v20 = v4;
  v21 = v5;
  v7 = v6;
  v19[3] = v8;
  sub_1000BA294(&qword_100BFC908);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  v19[4] = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[5] = sub_100087944();
  sub_100098B6C();
  __chkstk_darwin(v11);
  sub_100089068();
  __chkstk_darwin(v12);
  sub_1000D0024();
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  v14 = sub_100098778();
  sub_1000BD980();
  __chkstk_darwin(v15);
  sub_1000E78C0();
  static Date.read(from:)(v7);
  if (!v0)
  {
    v19[1] = v3;
    v19[2] = v2;
    v19[6] = v1;
    sub_1000CDD44(v7, v14);
    sub_1006BA100();
    sub_1006BA100();
    sub_1000C3EA0(v7);
    v16 = *(double *)&v19[7];
    v17 = sub_1006B962C();
    sub_1000D02A0((uint64_t)&unk_100BFC910);
    sub_1000D02A0((uint64_t)&unk_100BFC918);
    sub_1000CDD44(v7, v17);
    v18 = sub_1000890B8();
    MinuteSummary.init(date:expirationDate:precipitation:precipitationKind:precipitationChance:apparentPrecipitationIntensity:)(v18, v16);
  }
  sub_10009C884();
  sub_1000DF888();
}

void MinuteSummary.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  sub_100099310();
  v35 = v0;
  v5 = v4;
  v30 = sub_1000BA294(&qword_100BFC908);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  v29[1] = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100087944();
  v31 = *(_QWORD *)(v8 - 8);
  v32 = v8;
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_100089068();
  __chkstk_darwin(v10);
  v12 = (char *)v29 - v11;
  v33 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  v14 = sub_100098778();
  sub_100099300();
  __chkstk_darwin(v15);
  sub_100095304();
  MinuteSummary.date.getter();
  v34 = v5;
  sub_1006BA2E4(v5);
  if (v0)
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v14);
  }
  else
  {
    v35 = v2;
    v16 = sub_100098820(v1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    MinuteSummary.expirationDate.getter(v16);
    v17 = v34;
    v18 = sub_1006BA790(v34, v33, (uint64_t)&protocol witness table for Date);
    sub_1006B9120(v18, (uint64_t)&unk_100BD35A0);
    MinuteSummary.precipitation.getter();
    sub_1006BA888();
    v19 = v32;
    v20 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8);
    v21 = sub_10009554C((uint64_t)v12);
    v22 = v35;
    MinuteSummary.precipitationKind.getter(v21);
    sub_1006BA888();
    v23 = v20(v22, v19);
    MinuteSummary.precipitationChance.getter(v23);
    v24 = sub_1006BA898(v17);
    MinuteSummary.apparentPrecipitationIntensity.getter(v24);
    sub_1006B9200((uint64_t)&unk_100BFC910);
    v26 = v25;
    sub_1006B9200((uint64_t)&unk_100BFC918);
    v27 = sub_1006BA79C();
    v28 = sub_1006BA790(v27, v30, v26);
    sub_1006B9120(v28, (uint64_t)&qword_100BFC908);
  }
  sub_1006B95F8();
  sub_1000B44B0();
}

void static MinuteWeather.read(from:)(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  sub_1006B91CC();
  v44 = v14;
  v16 = v15;
  v40 = v17;
  sub_1006B962C();
  sub_1000B42B0();
  __chkstk_darwin(v18);
  sub_100088FDC();
  v43 = v19;
  v20 = sub_1000BA294(&qword_100BCB938);
  v41 = *(_QWORD *)(v20 - 8);
  v42 = v20;
  sub_10009D98C();
  __chkstk_darwin(v21);
  v23 = (char *)&v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10011E110();
  sub_100098B6C();
  __chkstk_darwin(v25);
  v26 = sub_100098778();
  sub_1000C0120();
  __chkstk_darwin(v27);
  sub_10009E4D4();
  v28 = v44;
  static Date.read(from:)(v16);
  if (!v28)
  {
    v36 = v23;
    v38 = v12;
    v39 = v13;
    v44 = v26;
    v37 = v24;
    static Precipitation.read(from:)(v16);
    sub_1000FDA70(v16);
    v29 = sub_1000FDA70(v16);
    sub_100079FE8(v29, (unint64_t *)&qword_100BCB990, NSUnitSpeed_ptr);
    static NSUnitSpeed.read(from:)(v16);
    v30 = v36;
    sub_1000C4CA8(v31);
    v32 = v43;
    static ApparentPrecipitationIntensity.read(from:)(v16);
    v33 = sub_1000890B8();
    MinuteWeather.init(date:precipitation:precipitationChance:precipitationIntensity:apparentPrecipitationIntensity:)(v33, v34, v30, v32, a12);
  }
  sub_1000E72CC();
}

void MinuteWeather.write(to:)()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[3];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;

  sub_100099310();
  v30 = v1;
  v6 = v5;
  v7 = sub_1006B962C();
  v25[1] = *(_QWORD *)(v7 - 8);
  v25[2] = v7;
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_100099B54(v9, v25[0]);
  v10 = sub_1000BA294(&qword_100BCB938);
  v26 = *(_QWORD *)(v10 - 8);
  v27 = v10;
  sub_10009D98C();
  __chkstk_darwin(v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10011E110();
  sub_1000AE898();
  __chkstk_darwin(v14);
  v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100098778();
  sub_100098BB4();
  __chkstk_darwin(v18);
  sub_10009C224();
  v29 = v0;
  MinuteWeather.date.getter();
  v28 = v6;
  sub_1006BA2E4(v6);
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v17);
  }
  else
  {
    v30 = v13;
    v19 = sub_100098748(v4, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    MinuteWeather.precipitation.getter(v19);
    v20 = v28;
    sub_1006BA888();
    v23 = sub_10009BCF8((uint64_t)v16, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    MinuteWeather.precipitationChance.getter(v23);
    sub_1006BA898(v20);
    sub_1000DE27C();
    MinuteWeather.precipitationIntensity.getter();
    sub_1006B9140();
    sub_1000C51C8(v26);
    sub_1000DE27C();
    MinuteWeather.apparentPrecipitationIntensity.getter();
    ApparentPrecipitationIntensity.write(to:)();
    v24 = sub_10011738C();
    v22(v24, v21);
  }
  sub_1006B95F8();
  sub_1000B44B0();
}

void static Article.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_100099310();
  sub_1006B9FC8();
  sub_100098B6C();
  __chkstk_darwin(v3);
  sub_100098694();
  v4 = sub_1000DA104();
  if (!v0)
  {
    v6 = v4;
    v7 = v5;
    v8 = sub_1000F3EA0(v2, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, (uint64_t)&protocol witness table for String);
    sub_1006BA9E4();
    sub_1000CDD44(v2, (uint64_t)&type metadata for String);
    sub_1000F3EA0(v2, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, (uint64_t)&protocol witness table for String);
    v9 = sub_1000D91D0();
    sub_1000F3EA0(v2, v9, (uint64_t)&protocol witness table for UUID, (uint64_t)&protocol witness table for UUID);
    Article.init(id:supportedStorefronts:locale:headlineOverride:phenomena:alertIds:)(v6, v7, v8, v1, v10, v11);
  }
  sub_10009C884();
  sub_1000B44B0();
}

void Article.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;

  sub_100110560();
  v3 = sub_1000BDD30();
  type metadata accessor for Locale(v3);
  sub_1000C6D9C();
  __chkstk_darwin(v4);
  sub_10009E540();
  v5 = Article.id.getter();
  sub_1000E7D08(v0, v5, v6);
  sub_1006BA1DC();
  if (!v1)
  {
    v7 = swift_bridgeObjectRelease();
    Article.supportedStorefronts.getter(v7);
    sub_1000BE954();
    v8 = sub_1000986C4();
    Article.locale.getter(v8);
    Locale.write(to:)(v0);
    v9 = sub_1000EFA30(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    Article.headlineOverride.getter(v9);
    sub_1000BA294(&qword_100BC5AA8);
    sub_10009BD8C();
    v10 = sub_10009934C();
    Article.phenomena.getter(v10);
    sub_1000BE954();
    v11 = sub_1000986C4();
    Article.alertIds.getter(v11);
    v12 = sub_10009C82C();
    type metadata accessor for UUID(v12);
    sub_1000BE954();
    sub_1006BA1DC();
  }
  swift_bridgeObjectRelease();
  sub_1006B9A90();
  sub_1000C60F8();
}

void static ArticlePlacementLocation.read(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  sub_1000C1780(a1);
  if (!v1)
  {
    switch(v8)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
        v6 = sub_10011E00C();
        v7 = type metadata accessor for ArticlePlacementLocation(v6);
        sub_1000C229C(v7);
        break;
      default:
        sub_1000C56E0();
        sub_10007A100((uint64_t)&qword_100BF4CC0);
        v3 = sub_1000BC670(v2);
        v5 = sub_1000D0A50(v3, v4);
        sub_1000C3D70(v5, enum case for BinaryDecoder.Error.valueNotSupported(_:));
        sub_1000C2294();
        break;
    }
  }
  sub_1000C1348();
}

void ArticlePlacementLocation.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v0 = sub_1000DC28C();
  type metadata accessor for ArticlePlacementLocation(v0);
  sub_10009D5D4();
  __chkstk_darwin(v1);
  sub_1000C57E0(v2, v4);
  v3 = sub_1000FDC00();
  if (v3 == enum case for ArticlePlacementLocation.airQualityDetail(_:)
    || v3 == enum case for ArticlePlacementLocation.feelsLikeDetail(_:)
    || v3 == enum case for ArticlePlacementLocation.humidityDetail(_:)
    || v3 == enum case for ArticlePlacementLocation.moonDetail(_:)
    || v3 == enum case for ArticlePlacementLocation.precipitationDetail(_:)
    || v3 == enum case for ArticlePlacementLocation.precipitationAveragesDetail(_:)
    || v3 == enum case for ArticlePlacementLocation.pressureDetail(_:)
    || v3 == enum case for ArticlePlacementLocation.severe(_:)
    || v3 == enum case for ArticlePlacementLocation.sunriseSunsetDetail(_:)
    || v3 == enum case for ArticlePlacementLocation.temperatureDetail(_:)
    || v3 == enum case for ArticlePlacementLocation.trend(_:)
    || v3 == enum case for ArticlePlacementLocation.temperatureAveragesDetail(_:)
    || v3 == enum case for ArticlePlacementLocation.uvIndexDetail(_:)
    || v3 == enum case for ArticlePlacementLocation.visibilityDetail(_:)
    || v3 == enum case for ArticlePlacementLocation.windDetail(_:))
  {
    sub_100098F20();
    sub_1000D9830();
  }
  else
  {
    sub_1000F4288();
    __break(1u);
  }
}

void static News.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_1000C0C34();
  type metadata accessor for ArticlePlacement(v1);
  sub_1000D02A0((uint64_t)&unk_100BFC920);
  sub_1000D02A0((uint64_t)&unk_100BFC928);
  v3 = sub_1006B9374(v2);
  if (!v0)
    News.init(placements:)(v3);
  sub_1000D9830();
}

void News.write(to:)()
{
  uint64_t v0;
  uint64_t v1;

  sub_1006BA564();
  News.placements.getter(v0);
  sub_1006BA38C();
  sub_1000D02A0((uint64_t)&unk_100BFC920);
  sub_1000D02A0((uint64_t)&unk_100BFC928);
  sub_10011AC30(v1);
  sub_1000986C4();
  sub_1000D9830();
}

void static ArticlePlacement.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100110560();
  v2 = v1;
  sub_1006BA628();
  sub_1000B42B0();
  __chkstk_darwin(v3);
  v4 = sub_1000BE9F0();
  type metadata accessor for Article(v4);
  sub_1000BDDA0((uint64_t)&unk_100BFC930);
  sub_1000BDDA0((uint64_t)&unk_100BFC938);
  sub_10009DFEC(v5);
  if (!v0)
  {
    static ArticlePlacementLocation.read(from:)(v2);
    v6 = sub_1000C213C();
    ArticlePlacement.init(articles:location:)(v6, v7);
  }
  sub_1000C1FB4();
  sub_1000C60F8();
}

void ArticlePlacement.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_100099310();
  v3 = sub_1006B9C78();
  type metadata accessor for ArticlePlacementLocation(v3);
  sub_1000AE898();
  __chkstk_darwin(v4);
  sub_100079FBC();
  ArticlePlacement.articles.getter(v5);
  v6 = sub_1006BA298();
  type metadata accessor for Article(v6);
  sub_1006B9224((uint64_t)&unk_100BFC930);
  sub_1006B9DB8((uint64_t)&unk_100BFC938);
  sub_1006B9208(v7);
  sub_10009D2E0();
  if (!v0)
  {
    ArticlePlacement.location.getter(v8);
    ArticlePlacementLocation.write(to:)();
    sub_100098820(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  }
  sub_10011E690();
  sub_1000B44B0();
}

void sub_1006A20D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  sub_100099310();
  v17 = v16;
  v18 = sub_1006B93C4();
  type metadata accessor for News(v18);
  sub_100098B6C();
  __chkstk_darwin(v19);
  sub_10009E540();
  sub_1000C3EA0(v17);
  if (!v13)
  {
    if (a13 == 2)
    {
      v28 = sub_1006BA3A4();
      sub_1000D02A0((uint64_t)&unk_100BFCC18);
      v30 = v29;
      sub_1000D02A0((uint64_t)&unk_100BFCC20);
      *v14 = sub_1000F3EA0(v17, v28, v30, v31);
      type metadata accessor for NewsDataModel(0);
      v25 = sub_1006B965C();
    }
    else
    {
      if (a13 != 1)
      {
        sub_1000C56E0();
        sub_10007A100((uint64_t)&qword_100BF4CC0);
        v33 = sub_1000BC670(v32);
        v35 = sub_1000D0A50(v33, v34);
        sub_1000C3D70(v35, enum case for BinaryDecoder.Error.valueNotSupported(_:));
        sub_1000C2294();
        goto LABEL_2;
      }
      v20 = sub_1006BA38C();
      sub_1000C67A8((uint64_t)&unk_100BFC920);
      v22 = v21;
      sub_1000C67A8((uint64_t)&unk_100BFC928);
      v24 = sub_1000F3EA0(v17, v20, v22, v23);
      News.init(placements:)(v24);
      sub_10011DF3C((uint64_t)v14, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 32));
      type metadata accessor for NewsDataModel(0);
      v25 = sub_1006B964C();
    }
    swift_storeEnumTagMultiPayload(v25, v26, v27);
  }
LABEL_2:
  sub_10009C884();
  sub_1000B44B0();
}

#error "1006A22D8: call analysis failed (funcsize=95)"

void static NextHourCondition.read(from:)()
{
  sub_1006A2440();
}

void sub_1006A2440()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t HourToken;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v42;

  sub_100099310();
  v41 = (void (*)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v5;
  v7 = v6;
  v39 = v8;
  type metadata accessor for PrecipitationShift(0);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  v40 = (uint64_t)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  HourToken = type metadata accessor for NextHourToken(0);
  sub_10009D5D4();
  __chkstk_darwin(v12);
  sub_100094EC4();
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100098778();
  sub_1000C6D9C();
  __chkstk_darwin(v17);
  sub_1006B941C();
  static Date.read(from:)(v7);
  if (!v0)
  {
    v42 = v4;
    v35 = v2;
    v36 = HourToken;
    v37 = v1;
    v38 = v3;
    v18 = v41;
    sub_10009F80C(v7, v16);
    sub_1000B301C();
    sub_1006BAA10();
    v19 = sub_1000B301C();
    v21 = v20;
    v22 = static Dictionary<>.read(from:)(v7, &type metadata for String, v16, &protocol witness table for String, &protocol witness table for String, &protocol witness table for String, &protocol witness table for Date, &protocol witness table for Date);
    v33 = v19;
    v34 = v22;
    v23 = v37;
    static NextHourToken.read(from:)(v7);
    v32 = v1;
    v24 = v40;
    static PrecipitationShift.read(from:)(v7, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, (uint64_t)v41);
    v18(v42, v15, v32, v7, v33, v21, v34, v23, v24);
  }
  sub_10009E33C();
  sub_1000B44B0();
}

void NextHourCondition.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t Hour;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  sub_100099310();
  sub_1006BA0B4();
  sub_10009D98C();
  __chkstk_darwin(v4);
  sub_10009E45C(v5, v22);
  sub_1000BD980();
  __chkstk_darwin(v6);
  sub_100098694();
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100098778();
  sub_100099300();
  __chkstk_darwin(v8);
  sub_1006B9BA4();
  NextHourCondition.date.getter();
  sub_1006B9CBC();
  if (v0)
  {
    v9 = sub_1006BA838();
  }
  else
  {
    sub_10007A170(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    sub_1000DE27C();
    Hour = NextHourCondition.expirationDate.getter();
    v13 = sub_1006B99C8(Hour, v12, (uint64_t)&protocol witness table for Date);
    sub_1006BA950(v13, (uint64_t)&unk_100BD35A0);
    v14 = NextHourCondition.shortDescription.getter();
    sub_1000B32D0(v14, v15);
    v16 = sub_1000986E8();
    v17 = NextHourCondition.longDescription.getter(v16);
    sub_1000B32D0(v17, v18);
    v19 = sub_1000986E8();
    v20 = NextHourCondition.parameters.getter(v19);
    sub_1006B9F74(v20, v21, (uint64_t)&type metadata for String);
    sub_1000986E8();
    sub_1000DE27C();
    NextHourCondition.token.getter();
    sub_1006BA4F0();
    sub_1006B92B8(v1);
    sub_1000DE27C();
    NextHourCondition.shift.getter();
    sub_1006BA500();
    v9 = sub_10011738C();
  }
  v10(v9);
  sub_1006B95F8();
  sub_1000B44B0();
}

void static NextHourData.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t HourData;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_100110560();
  v5 = sub_1006B9168();
  type metadata accessor for NextHourPrecipitation(v5);
  sub_1000C6D9C();
  __chkstk_darwin(v6);
  sub_100094EC4();
  sub_1000C3EA0(v3);
  if (!v0)
  {
    sub_1006BA070();
    if (!v8 && v7 != 2)
    {
      if (v7 != 1)
      {
        sub_1000C56E0();
        sub_10007A100((uint64_t)&qword_100BF4CC0);
        v12 = sub_1000BC670(v11);
        v14 = sub_1000D0A50(v12, v13);
        sub_1000C3D70(v14, enum case for BinaryDecoder.Error.valueNotSupported(_:));
        sub_1000C2294();
        goto LABEL_9;
      }
      sub_1006B9B1C();
      static NextHourPrecipitation.read(from:)();
      sub_10009C94C(v1, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
    }
    v9 = sub_10011E00C();
    HourData = type metadata accessor for NextHourData(v9);
    sub_1000C229C(HourData);
  }
LABEL_9:
  sub_10009ECD4();
  sub_1000C60F8();
}

void NextHourData.write(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;

  sub_100099310();
  a19 = v25;
  a20 = v26;
  v27 = sub_1000BDD30();
  type metadata accessor for NextHourPrecipitation(v27);
  sub_100099300();
  __chkstk_darwin(v28);
  v29 = sub_1000992A8();
  type metadata accessor for NextHourData(v29);
  sub_100098B6C();
  __chkstk_darwin(v30);
  v32 = (char *)&a9 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B2FD0((uint64_t)v32, v20, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 16));
  v33 = sub_1000C13A8((uint64_t)v32, *(uint64_t (**)(uint64_t, uint64_t))(v24 + 88));
  if (v33 == enum case for NextHourData.available(_:))
  {
    sub_1000C13A8((uint64_t)v32, *(uint64_t (**)(uint64_t, uint64_t))(v24 + 96));
    sub_10009C94C(v22, (uint64_t)v32, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 32));
    sub_1006B9CD0();
    sub_1000E738C();
    if (!v21)
    {
      sub_1006B9460();
      NextHourPrecipitation.write(to:)();
    }
    sub_10009171C(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
    goto LABEL_10;
  }
  if (v33 == enum case for NextHourData.temporarilyUnavailable(_:))
  {
    sub_1006B9A14();
LABEL_9:
    sub_1000E738C();
LABEL_10:
    sub_10009EDB4();
    sub_1000B44B0();
    return;
  }
  if (v33 == enum case for NextHourData.unsupported(_:))
  {
    sub_1006B99B0();
    goto LABEL_9;
  }
  sub_1000F4288();
  __break(1u);
}

void static NextHourMinute.read(from:)(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  sub_1006B91CC();
  v39 = v18;
  v40 = v14;
  v19 = sub_1006B9C78();
  type metadata accessor for NextHourPerceivedIntensity(v19);
  sub_1000B42B0();
  __chkstk_darwin(v20);
  sub_100079F58();
  v21 = sub_1000BA294(&qword_100BCB938);
  sub_10009D5D4();
  __chkstk_darwin(v22);
  v24 = (char *)v34 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100098778();
  sub_100098B6C();
  __chkstk_darwin(v26);
  sub_10009E4D4();
  v27 = v40;
  static Date.read(from:)(v15);
  if (!v27)
  {
    v37 = v13;
    v38 = v17;
    v34[2] = v21;
    v35 = v24;
    v40 = v25;
    v34[1] = v16;
    v36 = v12;
    sub_1006B9980(v15);
    v28 = sub_1006B9980(v15);
    sub_100079FE8(v28, (unint64_t *)&qword_100BCB990, NSUnitSpeed_ptr);
    v29 = sub_1006B9F5C();
    static NSUnitSpeed.read(from:)(v29);
    v30 = v35;
    sub_1000C4CA8(v31);
    v32 = v36;
    v33 = sub_1006B9F5C();
    static NextHourPerceivedIntensity.read(from:)(v33);
    NextHourMinute.init(startDate:precipitationChance:precipitationIntensity:perceivedIntensity:)(v37, v30, v32, a12);
  }
  sub_1000E72CC();
}

void NextHourMinute.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t HourPerceivedIntensity;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[5];
  uint64_t v19;

  sub_100099310();
  v5 = v4;
  HourPerceivedIntensity = type metadata accessor for NextHourPerceivedIntensity(0);
  v18[1] = *(_QWORD *)(HourPerceivedIntensity - 8);
  v18[2] = HourPerceivedIntensity;
  sub_10009D98C();
  __chkstk_darwin(v7);
  sub_1000DC160(v8, v18[0]);
  sub_1000BA294(&qword_100BCB938);
  sub_100098BB4();
  __chkstk_darwin(v9);
  v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100098778();
  sub_1000AE898();
  __chkstk_darwin(v12);
  sub_1006B930C();
  NextHourMinute.startDate.getter();
  v19 = v5;
  sub_1006B97A0();
  if (v1)
  {
    v13 = sub_1000DF794();
  }
  else
  {
    v15 = sub_10007A170(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    NextHourMinute.precipitationChance.getter(v15);
    v16 = sub_1006B91F8(v19);
    NextHourMinute.precipitationIntensity.getter(v16);
    sub_1006B917C();
    v17 = sub_1000B3274((uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    NextHourMinute.perceivedIntensity.getter(v17);
    NextHourPerceivedIntensity.write(to:)();
    v13 = sub_10011738C();
  }
  v14(v13);
  sub_1006B93E0();
  sub_1000B44B0();
}

void static NextHourPerceivedIntensity.read(from:)(uint64_t a1)
{
  sub_1006AB0B4(a1, (uint64_t (*)(_QWORD))&type metadata accessor for NextHourPerceivedIntensityScale, (void (*)(uint64_t))static NextHourPerceivedIntensityScale.read(from:), (void (*)(char *, double))&NextHourPerceivedIntensity.init(value:category:));
}

void NextHourPerceivedIntensity.write(to:)()
{
  sub_1006AB1B0();
}

void static NextHourPerceivedIntensityScale.read(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_1006ADD7C(a1, (uint64_t)&enum case for NextHourPerceivedIntensityScale.light(_:), (uint64_t)&type metadata accessor for NextHourPerceivedIntensityScale, (uint64_t)&enum case for NextHourPerceivedIntensityScale.medium(_:), (uint64_t)&enum case for NextHourPerceivedIntensityScale.heavy(_:), a6, a7, a8, vars0, vars8, SWORD2(vars8), SBYTE6(vars8), SHIBYTE(vars8));
}

#error "1006A2EC4: call analysis failed (funcsize=13)"

void static NextHourPrecipitation.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t HourSummary;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_100099310();
  v3 = v2;
  sub_100098778();
  sub_100098BB4();
  __chkstk_darwin(v4);
  sub_10003BC68();
  __chkstk_darwin(v5);
  v7 = (char *)&v16 - v6;
  sub_1006BA1CC(v3);
  if (!v0)
  {
    sub_1006BA1CC(v3);
    type metadata accessor for NextHourCondition(0);
    sub_1006B9224((uint64_t)&unk_100BFC940);
    sub_1006B9224((uint64_t)&unk_100BFC948);
    v17 = sub_1006B9AAC(v8);
    HourSummary = type metadata accessor for NextHourSummary(0);
    sub_10011DFBC((uint64_t)&unk_100BFC950);
    v11 = v10;
    sub_10011DFBC((uint64_t)&unk_100BFC958);
    v13 = static Array<A>.read(from:)(v3, HourSummary, v11, v12);
    type metadata accessor for NextHourMinute(0);
    sub_10007A100((uint64_t)&unk_100BFC960);
    sub_10007A100((uint64_t)&unk_100BFC968);
    v15 = sub_1006B9AAC(v14);
    NextHourPrecipitation.init(startDate:expirationDate:conditions:summaries:minutes:)(v7, v1, v17, v13, v15);
  }
  sub_10009EDB4();
  sub_1000B44B0();
}

void NextHourPrecipitation.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  uint64_t v14;

  sub_1000BE9DC();
  v3 = sub_100098778();
  sub_100099300();
  __chkstk_darwin(v4);
  sub_100089068();
  __chkstk_darwin(v5);
  sub_1000D0024();
  NextHourPrecipitation.startDate.getter();
  sub_1006B936C();
  if (v0)
  {
    sub_1000BE774(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  }
  else
  {
    v6 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
    v7 = v6(v1, v3);
    NextHourPrecipitation.expirationDate.getter(v7);
    sub_1006B936C();
    v8 = sub_1006B9E28();
    v9 = ((uint64_t (*)(uint64_t))v6)(v8);
    NextHourPrecipitation.conditions.getter(v9);
    v10 = sub_10009C82C();
    type metadata accessor for NextHourCondition(v10);
    sub_1000BDDA0((uint64_t)&unk_100BFC940);
    sub_1000BDDA0((uint64_t)&unk_100BFC948);
    sub_1000BE954();
    v11 = sub_1000986C4();
    NextHourPrecipitation.summaries.getter(v11);
    v12 = sub_10009C82C();
    type metadata accessor for NextHourSummary(v12);
    sub_1000BDDA0((uint64_t)&unk_100BFC950);
    sub_1000BDDA0((uint64_t)&unk_100BFC958);
    sub_1000BE954();
    v13 = sub_1000986C4();
    NextHourPrecipitation.minutes.getter(v13);
    v14 = sub_10009C82C();
    type metadata accessor for NextHourMinute(v14);
    sub_1000D02A0((uint64_t)&unk_100BFC960);
    sub_1000D02A0((uint64_t)&unk_100BFC968);
    sub_1000BCF4C();
    sub_1000BE954();
    sub_1000986C4();
  }
  sub_1006B9A90();
  sub_100089054();
}

void static NextHourSummary.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t HourPerceivedIntensity;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[5];
  char *v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;

  sub_1000B4C9C();
  v35 = v5;
  v36 = v6;
  v33 = v0;
  v8 = v7;
  v31[3] = v9;
  sub_1000BA294(&qword_100BFC970);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_1000986CC(v11, v31[0]);
  sub_1000BA294(&qword_100BFC908);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  v32 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100087944();
  sub_100098BB4();
  __chkstk_darwin(v15);
  sub_10007A130();
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  v18 = (char *)v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100098778();
  sub_10009D5D4();
  __chkstk_darwin(v19);
  sub_1000B3BE8();
  v20 = v33;
  static Date.read(from:)(v8);
  if (!v20)
  {
    v31[1] = v14;
    v31[2] = v1;
    v33 = v2;
    v21 = v8;
    v22 = sub_10054C56C();
    sub_10009F80C(v22, v23);
    static Precipitation.read(from:)(v8);
    sub_1000C1780(v8);
    v24 = v34;
    sub_1006B962C();
    sub_1006B9224((uint64_t)&unk_100BFC910);
    sub_1006B9224((uint64_t)&unk_100BFC918);
    v25 = v32;
    v26 = sub_1006BA838();
    sub_1000CDD44(v26, v27);
    HourPerceivedIntensity = type metadata accessor for NextHourPerceivedIntensity(0);
    sub_10011DFBC((uint64_t)&unk_100BFC978);
    v31[0] = v29;
    sub_10011DFBC((uint64_t)&unk_100BFC980);
    v30 = v31[4];
    static Optional<A>.read(from:)(v21, HourPerceivedIntensity);
    NextHourSummary.init(startDate:endDate:precipitation:precipitationChance:apparentPrecipitationIntensity:perceivedIntensity:)(v3, v18, v4, v25, v30, v24);
  }
  sub_10009E33C();
  sub_1000DF888();
}

void NextHourSummary.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  sub_100099310();
  v34 = v1;
  v35 = v4;
  v30 = sub_1000BA294(&qword_100BFC970);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_1000AE8A8(v6, v29);
  v31 = sub_1000BA294(&qword_100BFC908);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  v32 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100087944();
  sub_1000C0120();
  __chkstk_darwin(v10);
  sub_100094EC4();
  v33 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100098778();
  sub_100098B6C();
  __chkstk_darwin(v12);
  sub_1000B3BE8();
  NextHourSummary.startDate.getter();
  v13 = v34;
  Date.write(to:)(v35);
  if (v13)
  {
    v14 = sub_100098FCC();
    v15(v14);
  }
  else
  {
    v29 = v0;
    v34 = v9;
    v16 = sub_10009BCF8(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    NextHourSummary.endDate.getter(v16);
    v17 = v35;
    v18 = sub_10009BD8C();
    sub_10009E498(v18, (uint64_t)&unk_100BD35A0);
    NextHourSummary.precipitation.getter();
    Precipitation.write(to:)();
    v19 = sub_1006BA424();
    v21 = v20(v19);
    NextHourSummary.precipitationChance.getter(v21);
    v22 = sub_1000ED058(v17);
    NextHourSummary.apparentPrecipitationIntensity.getter(v22);
    sub_1006B9200((uint64_t)&unk_100BFC910);
    v24 = v23;
    sub_1006B9200((uint64_t)&unk_100BFC918);
    v25 = sub_1000BED20(v17, v31, v24);
    sub_1006B9120(v25, (uint64_t)&qword_100BFC908);
    NextHourSummary.perceivedIntensity.getter();
    sub_1006B9200((uint64_t)&unk_100BFC978);
    v27 = v26;
    sub_1006B9200((uint64_t)&unk_100BFC980);
    v28 = sub_1000BED20(v17, v30, v27);
    sub_1006B9120(v28, (uint64_t)&qword_100BFC970);
  }
  sub_10009E33C();
  sub_1000B44B0();
}

void static NextHourToken.read(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t HourToken;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  sub_1000C1780(a1);
  if (!v1)
  {
    switch(v8)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
LABEL_4:
        v2 = sub_10011E00C();
        HourToken = type metadata accessor for NextHourToken(v2);
        sub_1000C229C(HourToken);
        break;
      default:
        switch(v8)
        {
          case 'A':
          case 'B':
          case 'C':
          case 'D':
          case 'E':
          case 'F':
          case 'G':
          case 'H':
          case 'I':
          case 'J':
          case 'K':
          case 'L':
          case 'M':
          case 'N':
          case 'O':
          case 'P':
          case 'Q':
          case 'R':
          case 'S':
          case 'T':
          case 'U':
          case 'V':
          case 'W':
          case 'X':
          case 'Y':
          case 'Z':
          case '[':
          case '\\':
          case ']':
          case '^':
          case '_':
          case 'a':
          case 'b':
          case 'c':
          case 'd':
          case 'e':
            goto LABEL_4;
          default:
            sub_1000C56E0();
            sub_10007A100((uint64_t)&qword_100BF4CC0);
            v5 = sub_1000BC670(v4);
            v7 = sub_1000D0A50(v5, v6);
            sub_1000C3D70(v7, enum case for BinaryDecoder.Error.valueNotSupported(_:));
            sub_1000C2294();
            break;
        }
        break;
    }
  }
  sub_1000C1348();
}

void NextHourToken.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v0 = sub_1000DC28C();
  type metadata accessor for NextHourToken(v0);
  sub_10009D5D4();
  __chkstk_darwin(v1);
  sub_1000C57E0(v2, v4);
  v3 = sub_1000FDC00();
  if (v3 == enum case for NextHourToken.possibleDrizzle(_:)
    || v3 == enum case for NextHourToken.possibleDrizzleStart(_:)
    || v3 == enum case for NextHourToken.possibleDrizzleStop(_:)
    || v3 == enum case for NextHourToken.possibleDrizzleStartStop(_:)
    || v3 == enum case for NextHourToken.possibleDrizzleStopStart(_:)
    || v3 == enum case for NextHourToken.drizzle(_:)
    || v3 == enum case for NextHourToken.drizzleStart(_:)
    || v3 == enum case for NextHourToken.drizzleStop(_:)
    || v3 == enum case for NextHourToken.drizzleStartStop(_:)
    || v3 == enum case for NextHourToken.drizzleStopStart(_:)
    || v3 == enum case for NextHourToken.rain(_:)
    || v3 == enum case for NextHourToken.rainStart(_:)
    || v3 == enum case for NextHourToken.rainStop(_:)
    || v3 == enum case for NextHourToken.rainStartStop(_:)
    || v3 == enum case for NextHourToken.rainStopStart(_:)
    || v3 == enum case for NextHourToken.heavyRain(_:)
    || v3 == enum case for NextHourToken.heavyRainStart(_:)
    || v3 == enum case for NextHourToken.heavyRainStop(_:)
    || v3 == enum case for NextHourToken.heavyRainStopStart(_:)
    || v3 == enum case for NextHourToken.heavyRainStartStop(_:)
    || v3 == enum case for NextHourToken.drizzleToHeavyRain(_:)
    || v3 == enum case for NextHourToken.heavyRainToDrizzle(_:)
    || v3 == enum case for NextHourToken.rainToHeavyRain(_:)
    || v3 == enum case for NextHourToken.heavyRainToRain(_:)
    || v3 == enum case for NextHourToken.drizzleToHeavyRainStart(_:)
    || v3 == enum case for NextHourToken.heavyRainToDrizzleStart(_:)
    || v3 == enum case for NextHourToken.rainToHeavyRainStart(_:)
    || v3 == enum case for NextHourToken.heavyRainToRainStart(_:)
    || v3 == enum case for NextHourToken.drizzleToHeavyRainStop(_:)
    || v3 == enum case for NextHourToken.heavyRainToDrizzleStop(_:)
    || v3 == enum case for NextHourToken.rainToHeavyRainStop(_:)
    || v3 == enum case for NextHourToken.heavyRainToRainStop(_:)
    || v3 == enum case for NextHourToken.drizzleToHeavyRainStartStop(_:)
    || v3 == enum case for NextHourToken.heavyRainToDrizzleStartStop(_:)
    || v3 == enum case for NextHourToken.rainToHeavyRainStartStop(_:)
    || v3 == enum case for NextHourToken.heavyRainToRainStartStop(_:)
    || v3 == enum case for NextHourToken.drizzleToHeavyRainStopStart(_:)
    || v3 == enum case for NextHourToken.heavyRainToDrizzleStopStart(_:)
    || v3 == enum case for NextHourToken.rainToHeavyRainStopStart(_:)
    || v3 == enum case for NextHourToken.heavyRainToRainStopStart(_:)
    || v3 == enum case for NextHourToken.possibleFlurries(_:)
    || v3 == enum case for NextHourToken.possibleFlurriesStart(_:)
    || v3 == enum case for NextHourToken.possibleFlurriesStop(_:)
    || v3 == enum case for NextHourToken.possibleFlurriesStartStop(_:)
    || v3 == enum case for NextHourToken.possibleFlurriesStopStart(_:)
    || v3 == enum case for NextHourToken.flurries(_:)
    || v3 == enum case for NextHourToken.flurriesStart(_:)
    || v3 == enum case for NextHourToken.flurriesStop(_:)
    || v3 == enum case for NextHourToken.flurriesStartStop(_:)
    || v3 == enum case for NextHourToken.flurriesStopStart(_:)
    || v3 == enum case for NextHourToken.snow(_:)
    || v3 == enum case for NextHourToken.snowStart(_:)
    || v3 == enum case for NextHourToken.snowStop(_:)
    || v3 == enum case for NextHourToken.snowStartStop(_:)
    || v3 == enum case for NextHourToken.snowStopStart(_:)
    || v3 == enum case for NextHourToken.heavySnow(_:)
    || v3 == enum case for NextHourToken.heavySnowStart(_:)
    || v3 == enum case for NextHourToken.heavySnowStop(_:)
    || v3 == enum case for NextHourToken.heavySnowStopStart(_:)
    || v3 == enum case for NextHourToken.heavySnowStartStop(_:)
    || v3 == enum case for NextHourToken.flurriesToHeavySnow(_:)
    || v3 == enum case for NextHourToken.heavySnowToFlurries(_:)
    || v3 == enum case for NextHourToken.snowToHeavySnow(_:)
    || v3 == enum case for NextHourToken.heavySnowToSnow(_:)
    || v3 == enum case for NextHourToken.flurriesToHeavySnowStart(_:)
    || v3 == enum case for NextHourToken.heavySnowToFlurriesStart(_:)
    || v3 == enum case for NextHourToken.snowToHeavySnowStart(_:)
    || v3 == enum case for NextHourToken.heavySnowToSnowStart(_:)
    || v3 == enum case for NextHourToken.flurriesToHeavySnowStop(_:)
    || v3 == enum case for NextHourToken.heavySnowToFlurriesStop(_:)
    || v3 == enum case for NextHourToken.snowToHeavySnowStop(_:)
    || v3 == enum case for NextHourToken.heavySnowToSnowStop(_:)
    || v3 == enum case for NextHourToken.flurriesToHeavySnowStartStop(_:)
    || v3 == enum case for NextHourToken.heavySnowToFlurriesStartStop(_:)
    || v3 == enum case for NextHourToken.snowToHeavySnowStartStop(_:)
    || v3 == enum case for NextHourToken.heavySnowToSnowStartStop(_:)
    || v3 == enum case for NextHourToken.flurriesToHeavySnowStopStart(_:)
    || v3 == enum case for NextHourToken.heavySnowToFlurriesStopStart(_:)
    || v3 == enum case for NextHourToken.snowToHeavySnowStopStart(_:)
    || v3 == enum case for NextHourToken.heavySnowToSnowStopStart(_:)
    || v3 == enum case for NextHourToken.possibleSleet(_:)
    || v3 == enum case for NextHourToken.possibleSleetStart(_:)
    || v3 == enum case for NextHourToken.possibleSleetStop(_:)
    || v3 == enum case for NextHourToken.possibleSleetStartStop(_:)
    || v3 == enum case for NextHourToken.possibleSleetStopStart(_:)
    || v3 == enum case for NextHourToken.sleet(_:)
    || v3 == enum case for NextHourToken.sleetStart(_:)
    || v3 == enum case for NextHourToken.sleetStop(_:)
    || v3 == enum case for NextHourToken.sleetStartStop(_:)
    || v3 == enum case for NextHourToken.sleetStopStart(_:)
    || v3 == enum case for NextHourToken.possibleHail(_:)
    || v3 == enum case for NextHourToken.possibleHailStart(_:)
    || v3 == enum case for NextHourToken.possibleHailStop(_:)
    || v3 == enum case for NextHourToken.possibleHailStartStop(_:)
    || v3 == enum case for NextHourToken.possibleHailStopStart(_:)
    || v3 == enum case for NextHourToken.hail(_:)
    || v3 == enum case for NextHourToken.hailStart(_:)
    || v3 == enum case for NextHourToken.hailStop(_:)
    || v3 == enum case for NextHourToken.hailStartStop(_:)
    || v3 == enum case for NextHourToken.hailStopStart(_:)
    || v3 == enum case for NextHourToken.clear(_:))
  {
    sub_100098F20();
    sub_1000D9830();
  }
  else
  {
    sub_1000F4288();
    __break(1u);
  }
}

void static MoonEvents.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_100110560();
  sub_1006BA558();
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_10009BE6C();
  __chkstk_darwin(v5);
  sub_1000B2FD8();
  static MoonPhase.read(from:)(v2);
  if (!v1)
  {
    v7 = v6;
    v8 = sub_100098778();
    sub_1006B9BFC(v2, v8);
    sub_1006B9BFC(v2, v8);
    MoonEvents.init(phase:moonrise:moonset:)(v7, v3, v0);
  }
  sub_1000C1FB4();
  sub_1000C60F8();
}

void MoonEvents.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  sub_100110560();
  v2 = v1;
  v3 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_1000C24A0();
  __chkstk_darwin(v5);
  sub_1000D0024();
  v6 = MoonEvents.phase.getter();
  MoonPhase.write(to:)(v2, v6);
  if (!v0)
  {
    MoonEvents.moonrise.getter();
    v7 = sub_1000DB348(v2, v3, (uint64_t)&protocol witness table for Date);
    sub_1006B9C28(v7, (uint64_t)&unk_100BD35A0);
    sub_1006BA8E0();
    MoonEvents.moonset.getter();
    v8 = sub_1000DB348(v2, v3, (uint64_t)&protocol witness table for Date);
    sub_1006B9120(v8, (uint64_t)&unk_100BD35A0);
  }
  sub_1000C60F8();
}

void sub_1006A4B48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = sub_1000C1780(a1);
  if (!v1)
  {
    sub_1006BA024(v2, v3, v4, v5, v6, v7, v8, v9, v15, v16, SWORD2(v16), SBYTE6(v16), HIBYTE(v16));
    if (v10 >= 8)
    {
      sub_1000C56E0();
      sub_10007A100((uint64_t)&qword_100BF4CC0);
      v12 = sub_1000BC670(v11);
      v14 = sub_1000D0A50(v12, v13);
      sub_1000C3D70(v14, enum case for BinaryDecoder.Error.valueNotSupported(_:));
      sub_1000C2294();
    }
  }
  sub_100089028();
}

void sub_1006A4BD0(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

void sub_1006A4BF8(uint64_t a1)
{
  FixedSizeTypeBinaryCodable.write(to:)(a1);
  sub_10009ED00();
}

void sub_1006A4D00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  sub_1000C1780(a1);
  if (!v1 && v7 != 3 && v7 != 2)
  {
    if (v7 == 1)
    {
      sub_1000C3EA0(a1);
    }
    else
    {
      sub_1000C56E0();
      sub_10007A100((uint64_t)&qword_100BF4CC0);
      v4 = sub_1000BC670(v3);
      v6 = sub_1000D0A50(v4, v5);
      sub_1000C3D70(v6, enum case for BinaryDecoder.Error.valueNotSupported(_:));
      sub_1000C2294();
    }
  }
  sub_1000C1348();
}

void sub_1006A4DCC(uint64_t a1, char a2)
{
  uint64_t v2;

  if (a2 == 2 || a2 == 3 || (sub_1006BA660(), sub_1000BEB7C(), !v2))
    sub_1000BEB7C();
  sub_1000C1348();
}

void static Precipitation.read(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  sub_1000C1780(a1);
  if (!v1)
  {
    switch(v7)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
        v6 = sub_10011E110();
        sub_1000C229C(v6);
        break;
      default:
        sub_1000C56E0();
        sub_10007A100((uint64_t)&qword_100BF4CC0);
        v3 = sub_1000BC670(v2);
        v5 = sub_1000D0A50(v3, v4);
        sub_1000C3D70(v5, enum case for BinaryDecoder.Error.valueNotSupported(_:));
        sub_1000C2294();
        break;
    }
  }
  sub_1000C1348();
}

void Precipitation.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v0 = sub_1000DC28C();
  type metadata accessor for Precipitation(v0);
  sub_10009D5D4();
  __chkstk_darwin(v1);
  sub_1000C57E0(v2, v4);
  v3 = sub_1000FDC00();
  if (v3 == enum case for Precipitation.none(_:)
    || v3 == enum case for Precipitation.hail(_:)
    || v3 == enum case for Precipitation.mixed(_:)
    || v3 == enum case for Precipitation.rain(_:)
    || v3 == enum case for Precipitation.sleet(_:)
    || v3 == enum case for Precipitation.snow(_:))
  {
    sub_100098F20();
    sub_1000D9830();
  }
  else
  {
    sub_1000F4288();
    __break(1u);
  }
}

void static PrecipitationAmount.read(from:)()
{
  sub_1006A57DC();
}

void PrecipitationAmount.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  uint64_t v15;
  __n128 v16;
  _QWORD v17[4];

  sub_100099310();
  sub_1000DA9E8();
  sub_100098BB4();
  __chkstk_darwin(v3);
  v17[0] = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v5);
  v17[1] = (char *)v17 - v6;
  sub_10009D2A4();
  __chkstk_darwin(v7);
  v17[2] = (char *)v17 - v8;
  sub_10009D2A4();
  __chkstk_darwin(v9);
  sub_1000B3B34();
  __chkstk_darwin(v10);
  sub_1000F3FD8();
  __chkstk_darwin(v11);
  sub_1006BA0CC();
  PrecipitationAmount.pastHour.getter(v12);
  sub_1006B9C10();
  sub_1006B915C();
  if (!v0)
  {
    PrecipitationAmount.pastSixHours.getter(v13);
    sub_1006B9140();
    sub_1000D1880(v1);
    PrecipitationAmount.pastTwentyFourHours.getter(v14);
    sub_1006B9140();
    v15 = sub_1000D1880(v2);
    PrecipitationAmount.nextHour.getter(v15);
    sub_1001092AC();
    sub_1006B9128();
    sub_1006BA378();
    PrecipitationAmount.nextSixHours.getter();
    sub_1001092AC();
    sub_1006B9128();
    sub_1006BA378();
    PrecipitationAmount.nextTwentyFourHours.getter(v16);
    sub_1001092AC();
    sub_1006B9128();
  }
  sub_1006B95F8();
  sub_1000B44B0();
}

void static PrecipitationAmountByType.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_1000B4C9C();
  v2 = v1;
  type metadata accessor for SnowfallAmount(0);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_1000DC160(v4, v17);
  sub_1000BA294(&qword_100BCB0A8);
  sub_100099300();
  __chkstk_darwin(v5);
  sub_1006B93F4();
  __chkstk_darwin(v6);
  sub_1000BEB28();
  __chkstk_darwin(v7);
  sub_1000B3B34();
  __chkstk_darwin(v8);
  sub_1000F3FD8();
  __chkstk_darwin(v9);
  v10 = sub_100095050();
  if (!v0)
  {
    sub_100079FE8(v10, (unint64_t *)&qword_100BCB0D8, NSUnitLength_ptr);
    static NSUnitLength.read(from:)(v2);
    sub_1006B94A8(v11);
    sub_100095050();
    sub_1006B922C();
    sub_1006B94A8(v12);
    sub_100095050();
    sub_1006B922C();
    sub_1006B94A8(v13);
    sub_100095050();
    sub_1006B922C();
    sub_1006B94A8(v14);
    sub_100095050();
    sub_1006B922C();
    sub_1006B94A8(v15);
    static SnowfallAmount.read(from:)();
    v16 = sub_1000DF7CC();
    PrecipitationAmountByType.init(hail:mixed:rainfall:sleet:precipitation:snowfallAmount:)(v16);
  }
  sub_1000DB350();
  sub_1000DF888();
}

void PrecipitationAmountByType.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  sub_100099310();
  v4 = type metadata accessor for SnowfallAmount(0);
  v22 = *(_QWORD *)(v4 - 8);
  v23 = v4;
  sub_10009D98C();
  __chkstk_darwin(v5);
  sub_1000AE8A8(v6, v21);
  v7 = sub_1000BA294(&qword_100BCB0A8);
  sub_100098BB4();
  __chkstk_darwin(v8);
  v24 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v10);
  v25 = (char *)&v21 - v11;
  sub_10009D2A4();
  __chkstk_darwin(v12);
  sub_1006B93F4();
  __chkstk_darwin(v13);
  sub_1000C0E4C();
  __chkstk_darwin(v14);
  sub_1006BA680();
  v26 = v0;
  PrecipitationAmountByType.hail.getter();
  sub_1006AFED0();
  v15 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v15(v2, v7);
  if (!v1)
  {
    sub_1006BA378();
    PrecipitationAmountByType.mixed.getter();
    sub_1006AFED0();
    v16 = sub_1000DF7CC();
    v17 = ((uint64_t (*)(uint64_t))v15)(v16);
    PrecipitationAmountByType.rainfall.getter(v17);
    sub_1006B9970();
    v18 = sub_1006B9828();
    PrecipitationAmountByType.sleet.getter(v18);
    sub_1006B9970();
    v19 = sub_1006B9828();
    PrecipitationAmountByType.precipitation.getter(v19);
    sub_1006B9970();
    v20 = sub_1006B9828();
    PrecipitationAmountByType.snowfallAmount.getter(v20);
    SnowfallAmount.write(to:)();
    sub_1000C51C8(v22);
  }
  sub_1006B9B2C();
  sub_1000B44B0();
}

void static SnowfallAmount.read(from:)()
{
  sub_1006A57DC();
}

void sub_1006A57DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  void (*v28)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  sub_1000B4C9C();
  v31 = v5;
  v32 = v6;
  v27[1] = v8;
  v28 = v7;
  v10 = v9;
  v30 = sub_1000BA294(&qword_100BCB0A8);
  sub_10009D5D4();
  __chkstk_darwin(v11);
  sub_1000B3B34();
  __chkstk_darwin(v12);
  sub_10009DF40();
  __chkstk_darwin(v13);
  sub_1000BEB28();
  __chkstk_darwin(v14);
  sub_1006B91A8();
  __chkstk_darwin(v15);
  v29 = (char *)v27 - v16;
  sub_10009D2A4();
  __chkstk_darwin(v17);
  v19 = (char *)v27 - v18;
  v20 = sub_100095050();
  if (!v0)
  {
    v27[0] = sub_100079FE8(v20, (unint64_t *)&qword_100BCB0D8, NSUnitLength_ptr);
    static NSUnitLength.read(from:)(v10);
    sub_1000F4B18(v21);
    sub_100095050();
    sub_10011E3F0();
    sub_1000F4B18(v22);
    sub_100095050();
    sub_10011E3F0();
    sub_1000F4B18(v23);
    sub_100095050();
    sub_10011E3F0();
    sub_1000F4B18(v24);
    sub_100095050();
    sub_10011E3F0();
    sub_1000F4B18(v25);
    sub_100095050();
    sub_10011E3F0();
    sub_1000F4B18(v26);
    v28(v19, v29, v3, v1, v2, v4);
  }
  sub_1000DB350();
  sub_1000DF888();
}

