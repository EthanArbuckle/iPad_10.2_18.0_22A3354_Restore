uint64_t sub_10072F9C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100731EB8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10072F9F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100731EB8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10072FA1C()
{
  sub_10072D880();
}

void sub_10072FA30()
{
  sub_10072D6F8();
}

uint64_t sub_10072FA44(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100731E04();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10072FA6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100731E04();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10072FA94(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100731D14();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10072FABC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100731D14();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10072FAE4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100731CD8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10072FB0C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100731CD8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10072FB34()
{
  unsigned __int8 *v0;

  return sub_10072E62C(*v0);
}

uint64_t sub_10072FB3C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10072E2A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10072FB60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100731C60();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10072FB88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100731C60();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10072FBB0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100731E40();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10072FBD8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100731E40();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10072FC00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100731C9C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10072FC28(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100731C9C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10072FC50(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100731D50();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10072FC78(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100731D50();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10072FCA0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100731DC8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10072FCC8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100731DC8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10072FCF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100731D8C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10072FD18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100731D8C();
  return CodingKey.debugDescription.getter(a1, v2);
}

#error "10072FD4C: call analysis failed (funcsize=5)"

void sub_10072FD58()
{
  sub_10072E740();
}

void sub_10072FD6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  sub_1000986AC();
  type metadata accessor for ModalViewState.LocationDetailModal(0);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_1000BA294(&qword_100BC5F58);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_10009883C();
  sub_10009DF40();
  __chkstk_darwin(v4);
  sub_1000B3C04();
  sub_1000B42B0();
  __chkstk_darwin(v5);
  v6 = sub_1000C4668();
  type metadata accessor for ModalViewState(v6);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100079FBC();
  sub_1000BA294(&qword_100C01DA0);
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_100088FDC();
  sub_100080C0C(v0, v1, type metadata accessor for ModalViewState);
  v9 = (char *)sub_10072FEA0 + 4 * word_1009C369E[swift_getEnumCaseMultiPayload(v1)];
  __asm { BR              X10 }
}

void sub_10072FEA0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1000BEC60(v2, v4);
  v5 = sub_1000BA294(&qword_100BC31F0);
  inited = swift_initStackObject(v5, v0 + 4);
  *(_OWORD *)(inited + 16) = xmmword_10097CA50;
  sub_100732DE8();
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = 0xEC00000065746174;
  *(_QWORD *)(inited + 72) = v1;
  sub_100077A84(v8);
  sub_100086100(v4, v9);
  sub_100075E74();
  v10 = sub_1000DB37C();
  sub_1000BD04C(v10, 0xEF77656976657250, v11);
  sub_1000215BC(v4, type metadata accessor for LocationPreviewViewState);
  v12 = v0[1];
  *(_QWORD *)(v0[3] + 24) = v0[2];
  sub_10029E5F4(&qword_100C01DA8, &qword_100C01DA0);
  sub_10009C9E0(v13);
  sub_100089084(v14, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32));
  sub_100098640();
}

uint64_t sub_100730430@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD);
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[128];

  v4 = sub_1000B3C04();
  sub_1000B42B0();
  __chkstk_darwin(v5);
  v6 = sub_1000BE9F0();
  v7 = type metadata accessor for ModalViewState.MapViewModal(v6);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_10009E540();
  v9 = sub_100079FDC();
  sub_100080C0C(v9, v10, v11);
  sub_10009C0AC(v2, v1);
  v12 = sub_1000BA294(&qword_100BC31F0);
  inited = swift_initStackObject(v12, v21);
  *(_OWORD *)(inited + 16) = xmmword_10097DA20;
  *(_QWORD *)(inited + 32) = 1701869940;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  *(_QWORD *)(inited + 48) = 0x6E6F697461636F6CLL;
  *(_QWORD *)(inited + 56) = 0xEF77656976657250;
  sub_100732DE8();
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 80) = v14;
  *(_QWORD *)(inited + 88) = 0xEC00000065746174;
  *(_QWORD *)(inited + 120) = v4;
  sub_100077A84(v15);
  sub_100080C0C(v1, v16, type metadata accessor for LocationPreviewViewState);
  v17 = sub_100079FDC();
  v18 = Dictionary.init(dictionaryLiteral:)(v17);
  sub_10009BEDC();
  a1[3] = sub_1000BA294(&qword_100C01D88);
  sub_10029E5F4(&qword_100C01D90, &qword_100C01D88);
  a1[4] = v19;
  sub_100077A84(a1);
  return ShortDescription.init(name:_:)(0xD00000000000001BLL, 0x8000000100A11FF0, v18, v7);
}

void sub_1007305DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  sub_1000986AC();
  type metadata accessor for HomeAndWorkRefinementViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100088FDC();
  type metadata accessor for URL(0);
  sub_10009D98C();
  __chkstk_darwin(v3);
  sub_100088FDC();
  type metadata accessor for AveragesDetailViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100088FDC();
  type metadata accessor for MoonDetailViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100088FDC();
  type metadata accessor for SunriseSunsetDetailViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100088FDC();
  type metadata accessor for NextHourPrecipitationDetailViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_10004A2E8();
  type metadata accessor for AirQualityDetailViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100094EC4();
  type metadata accessor for ConditionDetailViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  v10 = sub_1000C4668();
  type metadata accessor for ModalViewState.LocationDetailModal(v10);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100098694();
  sub_1000BA294(&qword_100C01DA0);
  sub_10009D98C();
  __chkstk_darwin(v12);
  sub_100088FDC();
  sub_100080C0C(v0, v1, type metadata accessor for ModalViewState.LocationDetailModal);
  v13 = (char *)sub_1007307B8 + 4 * word_1009C36AE[swift_getEnumCaseMultiPayload(v1)];
  __asm { BR              X10 }
}

void sub_1007307B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *inited;
  __n128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_1000BEC60(v2, v3);
  v5 = sub_1000BA294(&qword_100BC31F0);
  inited = (__n128 *)swift_initStackObject(v5, v0 + 17);
  v7 = sub_1000C4E2C(inited, (__n128)xmmword_10097CA50);
  inited[4].n128_u64[1] = v4;
  sub_100077A84(v7);
  sub_100086100(v3, v8);
  sub_1000B48FC();
  sub_1000DB0D8();
  sub_10011E4B4(0x6F697469646E6F63, 0xEF6C69617465446ELL, v9, v10);
  sub_1000215BC(v3, type metadata accessor for ConditionDetailViewState);
  *(_QWORD *)(v0[16] + 24) = v0[15];
  sub_10029E5F4(&qword_100C01DA8, &qword_100C01DA0);
  sub_10009C9E0(v11);
  sub_100089084(v12, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0[14] + 32));
  sub_100098640();
}

void sub_100730CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44[7];
  _QWORD *v45;
  uint64_t v46;

  sub_100099310();
  a22 = v25;
  a23 = v26;
  v46 = v23;
  v28 = v27;
  v44[6] = v29;
  v44[3] = type metadata accessor for ModalViewState.LocationDetailModal(0);
  sub_1000B42B0();
  __chkstk_darwin(v30);
  v44[4] = (uint64_t)v44 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_10009876C();
  v44[1] = type metadata accessor for ModalViewState.MapViewModal(v32);
  sub_1000B42B0();
  __chkstk_darwin(v33);
  v35 = sub_100095214(v34, v44[0]);
  v44[5] = type metadata accessor for LocationPreviewViewState(v35);
  sub_1000B42B0();
  __chkstk_darwin(v36);
  sub_100098694();
  v37 = sub_1000BA294(&qword_100C01ED0);
  __chkstk_darwin(v37);
  v38 = sub_1000BD1E4();
  type metadata accessor for ModalViewState(v38);
  sub_1000B42B0();
  __chkstk_darwin(v39);
  sub_10009E540();
  v41 = v28[3];
  v40 = v28[4];
  v45 = v28;
  sub_1000DB418(v28, v41);
  v42 = sub_100731EF4();
  v43 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ModalViewState.CodingKeys, &type metadata for ModalViewState.CodingKeys, v42, v41, v40);
  if (!v43)
  {
    v46 = v24;
    a13 = 0;
    sub_100731F30();
    sub_1000C1BD4((uint64_t)&type metadata for ModalViewState.CodingType, (uint64_t)&a13, v37, (uint64_t)&type metadata for ModalViewState.CodingType);
    __asm { BR              X10 }
  }
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v45);
  sub_1000B44B0();
}

void sub_100730E64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000CD1BC();
  v3 = *(_QWORD *)(v2 - 96);
  swift_storeEnumTagMultiPayload(v3, v1, 6);
  sub_10007802C(v3, v0, type metadata accessor for ModalViewState);
  JUMPOUT(0x100730E24);
}

void sub_1007310A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19[10];

  sub_100099310();
  v2 = v0;
  v4 = v3;
  v19[2] = type metadata accessor for ModalViewState.LocationDetailModal(0);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  v19[4] = (uint64_t)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = sub_1000BA294(&qword_100BC5F58);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  v9 = sub_1000BF254(v8, v19[0]);
  type metadata accessor for LocationPreviewViewState(v9);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  type metadata accessor for ModalViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100079FBC();
  v12 = sub_1000BA294(&qword_100C01F10);
  v13 = *(_QWORD *)(v12 - 8);
  v19[7] = v12;
  v19[8] = v13;
  sub_10009D98C();
  __chkstk_darwin(v14);
  sub_10004A2E8();
  v16 = *(_QWORD *)(v4 + 24);
  v15 = *(_QWORD *)(v4 + 32);
  sub_1000FC6D8();
  v17 = sub_100731EF4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ModalViewState.CodingKeys, &type metadata for ModalViewState.CodingKeys, v17, v16, v15);
  sub_100080C0C(v2, v1, type metadata accessor for ModalViewState);
  v18 = (char *)sub_1007311FC + 4 * byte_1009C36C6[swift_getEnumCaseMultiPayload(v1)];
  __asm { BR              X10 }
}

void sub_1007311FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_10007802C(v3, v5, type metadata accessor for LocationPreviewViewState);
  *(_BYTE *)(v6 - 88) = 1;
  v7 = sub_1000D0B4C();
  sub_1000D922C(v7, v8, v9, (uint64_t)&type metadata for ModalViewState.CodingType, v7);
  if (!v2)
  {
    *(_BYTE *)(v6 - 88) = 1;
    sub_100086DA4(&qword_100C01EC8, type metadata accessor for LocationPreviewViewState, (uint64_t)&unk_100998344);
    sub_1001104C4();
    sub_1000AE908(v5, v10, v4, v0, v11);
  }
  sub_1000215BC(v5, type metadata accessor for LocationPreviewViewState);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 96) + 8))(v1, v4);
  sub_1000B44B0();
}

unint64_t sub_100731518(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100B5B138, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7)
    return 7;
  else
    return v3;
}

uint64_t sub_100731564(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100731590 + 4 * byte_1009C36CE[a1]))(1701869940, 0xE400000000000000);
}

unint64_t sub_100731590()
{
  return 0xD000000000000014;
}

unint64_t sub_1007315B8()
{
  return 0xD000000000000017;
}

uint64_t sub_100731628(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100731654 + 4 * byte_1009C36D5[a1]))(1701869940, 0xE400000000000000);
}

unint64_t sub_100731654()
{
  return 0xD000000000000014;
}

unint64_t sub_10073167C()
{
  return 0xD000000000000017;
}

unint64_t sub_1007316EC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100B5B200, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 8)
    return 8;
  else
    return v3;
}

uint64_t sub_100731734(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100731760 + 4 * byte_1009C36DC[a1]))(1701736302, 0xE400000000000000);
}

uint64_t sub_100731760()
{
  return 0x6E6F697461636F6CLL;
}

void sub_100731810(unsigned __int8 *a1, unsigned __int8 *a2)
{
  sub_10068BB8C(*a1, *a2);
}

void sub_10073181C()
{
  unsigned __int8 *v0;

  sub_1004A75D4(*v0);
}

double sub_100731824(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_1001D8F54(a1, *v1);
}

void sub_10073182C(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1001D9D28(a1, *v1);
}

unint64_t sub_100731834@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100731518(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100731860@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100731564(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100731888()
{
  unsigned __int8 *v0;

  return sub_100731628(*v0);
}

uint64_t sub_100731890@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100731560(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1007318B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100731EF4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1007318DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100731EF4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100731904(char *a1)
{
  sub_10068B9C4(*a1);
}

void sub_100731910()
{
  unsigned __int8 *v0;

  sub_1004A75E0(*v0);
}

void sub_100731918()
{
  sub_1001D8E88();
}

void sub_100731920(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1001D9D34(a1, *v1);
}

unint64_t sub_100731928@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1007316EC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100731954@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100731734(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10073197C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100732DAC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1007319D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100732DAC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

#error "100731A30: call analysis failed (funcsize=5)"

void sub_100731A3C()
{
  sub_1007310A0();
}

uint64_t sub_100731A54(uint64_t a1)
{
  uint64_t v2;

  sub_100086DA4(&qword_100C01F50, type metadata accessor for ModalViewState, (uint64_t)&unk_1009C3788);
  return ShortDescribable.description.getter(a1, v2);
}

void sub_100731A94()
{
  sub_100086DA4(&qword_100C01D50, type metadata accessor for ModalViewState, (uint64_t)&unk_1009C3760);
}

void sub_100731AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_1006B5A88(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8, SWORD2(vars8), SBYTE6(vars8), SHIBYTE(vars8));
}

void sub_100731AD4()
{
  sub_1006B568C();
}

void sub_100731AE8(uint64_t a1)
{
  sub_1006B8944(a1);
}

void sub_100731AFC()
{
  sub_1006B8850();
}

void sub_100731B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_1006B7BAC(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8, SWORD2(vars8), SBYTE6(vars8), SHIBYTE(vars8));
}

void sub_100731B24()
{
  sub_1006B7274();
}

uint64_t sub_100731B3C(uint64_t a1)
{
  uint64_t v2;

  sub_100086DA4(&qword_100C01D98, type metadata accessor for ModalViewState.MapViewModal, (uint64_t)&unk_1009C39A0);
  return ShortDescribable.description.getter(a1, v2);
}

uint64_t sub_100731B80(uint64_t a1)
{
  uint64_t v2;

  sub_100086DA4(&qword_100C01DB0, type metadata accessor for ModalViewState.LocationDetailModal, (uint64_t)&unk_1009C3948);
  return ShortDescribable.description.getter(a1, v2);
}

void sub_100731BC0()
{
  sub_100086DA4(&qword_100C01D58, type metadata accessor for ModalViewState.LocationDetailModal, (uint64_t)&unk_1009C3920);
}

void sub_100731BEC()
{
  sub_100086DA4(&qword_100C01D60, type metadata accessor for ModalViewState.MapViewModal, (uint64_t)&unk_1009C3978);
}

uint64_t sub_100731C18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BC5F58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100731C60()
{
  unint64_t result;

  result = qword_100C01E00;
  if (!qword_100C01E00)
  {
    result = swift_getWitnessTable(&unk_1009C4948, &type metadata for ModalViewState.LocationDetailModal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01E00);
  }
  return result;
}

unint64_t sub_100731C9C()
{
  unint64_t result;

  result = qword_100C01E08;
  if (!qword_100C01E08)
  {
    result = swift_getWitnessTable(&unk_1009C48F8, &type metadata for ModalViewState.LocationDetailModal.HomeAndWorkRefinementCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01E08);
  }
  return result;
}

unint64_t sub_100731CD8()
{
  unint64_t result;

  result = qword_100C01E10;
  if (!qword_100C01E10)
  {
    result = swift_getWitnessTable(&unk_1009C48A8, &type metadata for ModalViewState.LocationDetailModal.CallToActionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01E10);
  }
  return result;
}

unint64_t sub_100731D14()
{
  unint64_t result;

  result = qword_100C01E18;
  if (!qword_100C01E18)
  {
    result = swift_getWitnessTable(&unk_1009C4858, &type metadata for ModalViewState.LocationDetailModal.AveragesDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01E18);
  }
  return result;
}

unint64_t sub_100731D50()
{
  unint64_t result;

  result = qword_100C01E20;
  if (!qword_100C01E20)
  {
    result = swift_getWitnessTable(&unk_1009C4808, &type metadata for ModalViewState.LocationDetailModal.MoonDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01E20);
  }
  return result;
}

unint64_t sub_100731D8C()
{
  unint64_t result;

  result = qword_100C01E28;
  if (!qword_100C01E28)
  {
    result = swift_getWitnessTable(&unk_1009C47B8, &type metadata for ModalViewState.LocationDetailModal.SunriseSunsetDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01E28);
  }
  return result;
}

unint64_t sub_100731DC8()
{
  unint64_t result;

  result = qword_100C01E30;
  if (!qword_100C01E30)
  {
    result = swift_getWitnessTable(&unk_1009C4768, &type metadata for ModalViewState.LocationDetailModal.NextHourPrecipitationDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01E30);
  }
  return result;
}

unint64_t sub_100731E04()
{
  unint64_t result;

  result = qword_100C01E38;
  if (!qword_100C01E38)
  {
    result = swift_getWitnessTable(&unk_1009C4718, &type metadata for ModalViewState.LocationDetailModal.AirQualityDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01E38);
  }
  return result;
}

unint64_t sub_100731E40()
{
  unint64_t result;

  result = qword_100C01E40;
  if (!qword_100C01E40)
  {
    result = swift_getWitnessTable(&unk_1009C46C8, &type metadata for ModalViewState.LocationDetailModal.ConditionDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01E40);
  }
  return result;
}

unint64_t sub_100731E7C()
{
  unint64_t result;

  result = qword_100C01EA0;
  if (!qword_100C01EA0)
  {
    result = swift_getWitnessTable(&unk_1009C4678, &type metadata for ModalViewState.MapViewModal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01EA0);
  }
  return result;
}

unint64_t sub_100731EB8()
{
  unint64_t result;

  result = qword_100C01EA8;
  if (!qword_100C01EA8)
  {
    result = swift_getWitnessTable(&unk_1009C4628, &type metadata for ModalViewState.MapViewModal.LocationPreviewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01EA8);
  }
  return result;
}

unint64_t sub_100731EF4()
{
  unint64_t result;

  result = qword_100C01ED8;
  if (!qword_100C01ED8)
  {
    result = swift_getWitnessTable(&unk_1009C45D8, &type metadata for ModalViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01ED8);
  }
  return result;
}

unint64_t sub_100731F30()
{
  unint64_t result;

  result = qword_100C01EE0;
  if (!qword_100C01EE0)
  {
    result = swift_getWitnessTable(&unk_1009C45B0, &type metadata for ModalViewState.CodingType);
    atomic_store(result, (unint64_t *)&qword_100C01EE0);
  }
  return result;
}

unint64_t sub_100731F6C()
{
  unint64_t result;

  result = qword_100C01EF8;
  if (!qword_100C01EF8)
  {
    result = swift_getWitnessTable(&unk_100986698, &unk_100B63320);
    atomic_store(result, (unint64_t *)&qword_100C01EF8);
  }
  return result;
}

unint64_t sub_100731FA8()
{
  unint64_t result;

  result = qword_100C01F00;
  if (!qword_100C01F00)
  {
    result = swift_getWitnessTable(&unk_100986670, &unk_100B63348);
    atomic_store(result, (unint64_t *)&qword_100C01F00);
  }
  return result;
}

unint64_t sub_100731FE4()
{
  unint64_t result;

  result = qword_100C01F08;
  if (!qword_100C01F08)
  {
    result = swift_getWitnessTable(&unk_1009C1CB8, &type metadata for NotificationSettingsViewState);
    atomic_store(result, (unint64_t *)&qword_100C01F08);
  }
  return result;
}

unint64_t sub_100732020()
{
  unint64_t result;

  result = qword_100C01F18;
  if (!qword_100C01F18)
  {
    result = swift_getWitnessTable(&unk_1009C4588, &type metadata for ModalViewState.CodingType);
    atomic_store(result, (unint64_t *)&qword_100C01F18);
  }
  return result;
}

unint64_t sub_10073205C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C01F28;
  if (!qword_100C01F28)
  {
    v1 = sub_100075EB0(&qword_100BC5F58);
    sub_100086DA4(&qword_100C01F30, type metadata accessor for ModalViewState.MapViewModal, (uint64_t)&unk_1009C3830);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100C01F28);
  }
  return result;
}

unint64_t sub_1007320D8()
{
  unint64_t result;

  result = qword_100C01F38;
  if (!qword_100C01F38)
  {
    result = swift_getWitnessTable(&unk_100986648, &unk_100B63320);
    atomic_store(result, (unint64_t *)&qword_100C01F38);
  }
  return result;
}

unint64_t sub_100732114()
{
  unint64_t result;

  result = qword_100C01F40;
  if (!qword_100C01F40)
  {
    result = swift_getWitnessTable(&unk_100986620, &unk_100B63348);
    atomic_store(result, (unint64_t *)&qword_100C01F40);
  }
  return result;
}

unint64_t sub_100732150()
{
  unint64_t result;

  result = qword_100C01F48;
  if (!qword_100C01F48)
  {
    result = swift_getWitnessTable(&unk_1009C1C90, &type metadata for NotificationSettingsViewState);
    atomic_store(result, (unint64_t *)&qword_100C01F48);
  }
  return result;
}

ValueMetadata *type metadata accessor for ModalViewState.CodingType()
{
  return &type metadata for ModalViewState.CodingType;
}

uint64_t storeEnumTagSinglePayload for ModalViewState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1007321F0 + 4 * byte_1009C36E9[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100732224 + 4 * byte_1009C36E4[v4]))();
}

uint64_t sub_100732224(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10073222C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100732234);
  return result;
}

uint64_t sub_100732240(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100732248);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10073224C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100732254(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModalViewState.CodingKeys()
{
  return &type metadata for ModalViewState.CodingKeys;
}

ValueMetadata *type metadata accessor for ModalViewState.MapViewModal.CodingKeys()
{
  return &type metadata for ModalViewState.MapViewModal.CodingKeys;
}

ValueMetadata *type metadata accessor for ModalViewState.MapViewModal.LocationPreviewCodingKeys()
{
  return &type metadata for ModalViewState.MapViewModal.LocationPreviewCodingKeys;
}

uint64_t _s7Weather14ModalViewStateO10CodingTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1007322E0 + 4 * byte_1009C36F3[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100732314 + 4 * byte_1009C36EE[v4]))();
}

uint64_t sub_100732314(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10073231C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100732324);
  return result;
}

uint64_t sub_100732330(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100732338);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_10073233C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100732344(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModalViewState.LocationDetailModal.CodingKeys()
{
  return &type metadata for ModalViewState.LocationDetailModal.CodingKeys;
}

ValueMetadata *type metadata accessor for ModalViewState.LocationDetailModal.ConditionDetailCodingKeys()
{
  return &type metadata for ModalViewState.LocationDetailModal.ConditionDetailCodingKeys;
}

ValueMetadata *type metadata accessor for ModalViewState.LocationDetailModal.AirQualityDetailCodingKeys()
{
  return &type metadata for ModalViewState.LocationDetailModal.AirQualityDetailCodingKeys;
}

ValueMetadata *type metadata accessor for ModalViewState.LocationDetailModal.NextHourPrecipitationDetailCodingKeys()
{
  return &type metadata for ModalViewState.LocationDetailModal.NextHourPrecipitationDetailCodingKeys;
}

ValueMetadata *type metadata accessor for ModalViewState.LocationDetailModal.SunriseSunsetDetailCodingKeys()
{
  return &type metadata for ModalViewState.LocationDetailModal.SunriseSunsetDetailCodingKeys;
}

ValueMetadata *type metadata accessor for ModalViewState.LocationDetailModal.MoonDetailCodingKeys()
{
  return &type metadata for ModalViewState.LocationDetailModal.MoonDetailCodingKeys;
}

ValueMetadata *type metadata accessor for ModalViewState.LocationDetailModal.AveragesDetailCodingKeys()
{
  return &type metadata for ModalViewState.LocationDetailModal.AveragesDetailCodingKeys;
}

ValueMetadata *type metadata accessor for ModalViewState.LocationDetailModal.CallToActionCodingKeys()
{
  return &type metadata for ModalViewState.LocationDetailModal.CallToActionCodingKeys;
}

uint64_t _s7Weather14ModalViewStateO12MapViewModalO10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100732410 + 4 * byte_1009C36F8[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100732430 + 4 * byte_1009C36FD[v4]))();
}

_BYTE *sub_100732410(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100732430(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100732438(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100732440(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100732448(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100732450(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ModalViewState.LocationDetailModal.HomeAndWorkRefinementCodingKeys()
{
  return &type metadata for ModalViewState.LocationDetailModal.HomeAndWorkRefinementCodingKeys;
}

unint64_t sub_100732470()
{
  unint64_t result;

  result = qword_100C01F58;
  if (!qword_100C01F58)
  {
    result = swift_getWitnessTable(&unk_1009C3CA0, &type metadata for ModalViewState.LocationDetailModal.HomeAndWorkRefinementCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01F58);
  }
  return result;
}

unint64_t sub_1007324B0()
{
  unint64_t result;

  result = qword_100C01F60;
  if (!qword_100C01F60)
  {
    result = swift_getWitnessTable(&unk_1009C3D58, &type metadata for ModalViewState.LocationDetailModal.CallToActionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01F60);
  }
  return result;
}

unint64_t sub_1007324F0()
{
  unint64_t result;

  result = qword_100C01F68;
  if (!qword_100C01F68)
  {
    result = swift_getWitnessTable(&unk_1009C3E10, &type metadata for ModalViewState.LocationDetailModal.AveragesDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01F68);
  }
  return result;
}

unint64_t sub_100732530()
{
  unint64_t result;

  result = qword_100C01F70;
  if (!qword_100C01F70)
  {
    result = swift_getWitnessTable(&unk_1009C3EC8, &type metadata for ModalViewState.LocationDetailModal.MoonDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01F70);
  }
  return result;
}

unint64_t sub_100732570()
{
  unint64_t result;

  result = qword_100C01F78;
  if (!qword_100C01F78)
  {
    result = swift_getWitnessTable(&unk_1009C3F80, &type metadata for ModalViewState.LocationDetailModal.SunriseSunsetDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01F78);
  }
  return result;
}

unint64_t sub_1007325B0()
{
  unint64_t result;

  result = qword_100C01F80;
  if (!qword_100C01F80)
  {
    result = swift_getWitnessTable(&unk_1009C4038, &type metadata for ModalViewState.LocationDetailModal.NextHourPrecipitationDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01F80);
  }
  return result;
}

unint64_t sub_1007325F0()
{
  unint64_t result;

  result = qword_100C01F88;
  if (!qword_100C01F88)
  {
    result = swift_getWitnessTable(&unk_1009C40F0, &type metadata for ModalViewState.LocationDetailModal.AirQualityDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01F88);
  }
  return result;
}

unint64_t sub_100732630()
{
  unint64_t result;

  result = qword_100C01F90;
  if (!qword_100C01F90)
  {
    result = swift_getWitnessTable(&unk_1009C41A8, &type metadata for ModalViewState.LocationDetailModal.ConditionDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01F90);
  }
  return result;
}

unint64_t sub_100732670()
{
  unint64_t result;

  result = qword_100C01F98;
  if (!qword_100C01F98)
  {
    result = swift_getWitnessTable(&unk_1009C4260, &type metadata for ModalViewState.LocationDetailModal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01F98);
  }
  return result;
}

unint64_t sub_1007326B0()
{
  unint64_t result;

  result = qword_100C01FA0;
  if (!qword_100C01FA0)
  {
    result = swift_getWitnessTable(&unk_1009C4318, &type metadata for ModalViewState.MapViewModal.LocationPreviewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01FA0);
  }
  return result;
}

unint64_t sub_1007326F0()
{
  unint64_t result;

  result = qword_100C01FA8;
  if (!qword_100C01FA8)
  {
    result = swift_getWitnessTable(&unk_1009C43D0, &type metadata for ModalViewState.MapViewModal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01FA8);
  }
  return result;
}

unint64_t sub_100732730()
{
  unint64_t result;

  result = qword_100C01FB0;
  if (!qword_100C01FB0)
  {
    result = swift_getWitnessTable(&unk_1009C44C0, &type metadata for ModalViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01FB0);
  }
  return result;
}

unint64_t sub_100732770()
{
  unint64_t result;

  result = qword_100C01FB8;
  if (!qword_100C01FB8)
  {
    result = swift_getWitnessTable(&unk_1009C4560, &type metadata for ModalViewState.CodingType);
    atomic_store(result, (unint64_t *)&qword_100C01FB8);
  }
  return result;
}

unint64_t sub_1007327B0()
{
  unint64_t result;

  result = qword_100C01FC0;
  if (!qword_100C01FC0)
  {
    result = swift_getWitnessTable(&unk_1009C43F8, &type metadata for ModalViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01FC0);
  }
  return result;
}

unint64_t sub_1007327F0()
{
  unint64_t result;

  result = qword_100C01FC8;
  if (!qword_100C01FC8)
  {
    result = swift_getWitnessTable(&unk_1009C4420, &type metadata for ModalViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01FC8);
  }
  return result;
}

unint64_t sub_100732830()
{
  unint64_t result;

  result = qword_100C01FD0;
  if (!qword_100C01FD0)
  {
    result = swift_getWitnessTable(&unk_1009C4288, &type metadata for ModalViewState.MapViewModal.LocationPreviewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01FD0);
  }
  return result;
}

unint64_t sub_100732870()
{
  unint64_t result;

  result = qword_100C01FD8;
  if (!qword_100C01FD8)
  {
    result = swift_getWitnessTable(&unk_1009C42B0, &type metadata for ModalViewState.MapViewModal.LocationPreviewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01FD8);
  }
  return result;
}

unint64_t sub_1007328B0()
{
  unint64_t result;

  result = qword_100C01FE0;
  if (!qword_100C01FE0)
  {
    result = swift_getWitnessTable(&unk_1009C4340, &type metadata for ModalViewState.MapViewModal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01FE0);
  }
  return result;
}

unint64_t sub_1007328F0()
{
  unint64_t result;

  result = qword_100C01FE8;
  if (!qword_100C01FE8)
  {
    result = swift_getWitnessTable(&unk_1009C4368, &type metadata for ModalViewState.MapViewModal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01FE8);
  }
  return result;
}

unint64_t sub_100732930()
{
  unint64_t result;

  result = qword_100C01FF0;
  if (!qword_100C01FF0)
  {
    result = swift_getWitnessTable(&unk_1009C4118, &type metadata for ModalViewState.LocationDetailModal.ConditionDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01FF0);
  }
  return result;
}

unint64_t sub_100732970()
{
  unint64_t result;

  result = qword_100C01FF8;
  if (!qword_100C01FF8)
  {
    result = swift_getWitnessTable(&unk_1009C4140, &type metadata for ModalViewState.LocationDetailModal.ConditionDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C01FF8);
  }
  return result;
}

unint64_t sub_1007329B0()
{
  unint64_t result;

  result = qword_100C02000;
  if (!qword_100C02000)
  {
    result = swift_getWitnessTable(&unk_1009C4060, &type metadata for ModalViewState.LocationDetailModal.AirQualityDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02000);
  }
  return result;
}

unint64_t sub_1007329F0()
{
  unint64_t result;

  result = qword_100C02008;
  if (!qword_100C02008)
  {
    result = swift_getWitnessTable(&unk_1009C4088, &type metadata for ModalViewState.LocationDetailModal.AirQualityDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02008);
  }
  return result;
}

unint64_t sub_100732A30()
{
  unint64_t result;

  result = qword_100C02010;
  if (!qword_100C02010)
  {
    result = swift_getWitnessTable(&unk_1009C3FA8, &type metadata for ModalViewState.LocationDetailModal.NextHourPrecipitationDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02010);
  }
  return result;
}

unint64_t sub_100732A70()
{
  unint64_t result;

  result = qword_100C02018;
  if (!qword_100C02018)
  {
    result = swift_getWitnessTable(&unk_1009C3FD0, &type metadata for ModalViewState.LocationDetailModal.NextHourPrecipitationDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02018);
  }
  return result;
}

unint64_t sub_100732AB0()
{
  unint64_t result;

  result = qword_100C02020;
  if (!qword_100C02020)
  {
    result = swift_getWitnessTable(&unk_1009C3EF0, &type metadata for ModalViewState.LocationDetailModal.SunriseSunsetDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02020);
  }
  return result;
}

unint64_t sub_100732AF0()
{
  unint64_t result;

  result = qword_100C02028;
  if (!qword_100C02028)
  {
    result = swift_getWitnessTable(&unk_1009C3F18, &type metadata for ModalViewState.LocationDetailModal.SunriseSunsetDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02028);
  }
  return result;
}

unint64_t sub_100732B30()
{
  unint64_t result;

  result = qword_100C02030;
  if (!qword_100C02030)
  {
    result = swift_getWitnessTable(&unk_1009C3E38, &type metadata for ModalViewState.LocationDetailModal.MoonDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02030);
  }
  return result;
}

unint64_t sub_100732B70()
{
  unint64_t result;

  result = qword_100C02038;
  if (!qword_100C02038)
  {
    result = swift_getWitnessTable(&unk_1009C3E60, &type metadata for ModalViewState.LocationDetailModal.MoonDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02038);
  }
  return result;
}

unint64_t sub_100732BB0()
{
  unint64_t result;

  result = qword_100C02040;
  if (!qword_100C02040)
  {
    result = swift_getWitnessTable(&unk_1009C3D80, &type metadata for ModalViewState.LocationDetailModal.AveragesDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02040);
  }
  return result;
}

unint64_t sub_100732BF0()
{
  unint64_t result;

  result = qword_100C02048;
  if (!qword_100C02048)
  {
    result = swift_getWitnessTable(&unk_1009C3DA8, &type metadata for ModalViewState.LocationDetailModal.AveragesDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02048);
  }
  return result;
}

unint64_t sub_100732C30()
{
  unint64_t result;

  result = qword_100C02050;
  if (!qword_100C02050)
  {
    result = swift_getWitnessTable(&unk_1009C3CC8, &type metadata for ModalViewState.LocationDetailModal.CallToActionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02050);
  }
  return result;
}

unint64_t sub_100732C70()
{
  unint64_t result;

  result = qword_100C02058;
  if (!qword_100C02058)
  {
    result = swift_getWitnessTable(&unk_1009C3CF0, &type metadata for ModalViewState.LocationDetailModal.CallToActionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02058);
  }
  return result;
}

unint64_t sub_100732CB0()
{
  unint64_t result;

  result = qword_100C02060;
  if (!qword_100C02060)
  {
    result = swift_getWitnessTable(&unk_1009C3C10, &type metadata for ModalViewState.LocationDetailModal.HomeAndWorkRefinementCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02060);
  }
  return result;
}

unint64_t sub_100732CF0()
{
  unint64_t result;

  result = qword_100C02068;
  if (!qword_100C02068)
  {
    result = swift_getWitnessTable(&unk_1009C3C38, &type metadata for ModalViewState.LocationDetailModal.HomeAndWorkRefinementCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02068);
  }
  return result;
}

unint64_t sub_100732D30()
{
  unint64_t result;

  result = qword_100C02070;
  if (!qword_100C02070)
  {
    result = swift_getWitnessTable(&unk_1009C41D0, &type metadata for ModalViewState.LocationDetailModal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02070);
  }
  return result;
}

unint64_t sub_100732D70()
{
  unint64_t result;

  result = qword_100C02078;
  if (!qword_100C02078)
  {
    result = swift_getWitnessTable(&unk_1009C41F8, &type metadata for ModalViewState.LocationDetailModal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02078);
  }
  return result;
}

unint64_t sub_100732DAC()
{
  unint64_t result;

  result = qword_100C02080;
  if (!qword_100C02080)
  {
    result = swift_getWitnessTable(&unk_1009C44E8, &type metadata for ModalViewState.CodingType);
    atomic_store(result, (unint64_t *)&qword_100C02080);
  }
  return result;
}

unint64_t sub_100732DFC()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 69) = 3;
  return sub_100731D8C();
}

void sub_100732E08()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_1000215BC(v1, v0);
}

uint64_t sub_100732E14()
{
  uint64_t v0;

  return v0;
}

uint64_t *sub_100732E28(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for LocationModel(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_100732EE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for LocationModel(0);
  result = _s7Weather24LocationCompositionStateOwet_0(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return result;
}

void *sub_100732F38(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for LocationModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
  }
  return a1;
}

void *sub_100732FCC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  v6 = type metadata accessor for LocationModel(0);
  v7 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 1, v6);
  v8 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6);
  if (!v7)
  {
    v9 = *(_QWORD *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
  return a1;
}

void *sub_1007330B0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for LocationModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
  }
  return a1;
}

void *sub_100733144(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  v6 = type metadata accessor for LocationModel(0);
  v7 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 1, v6);
  v8 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6);
  if (!v7)
  {
    v9 = *(_QWORD *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
  return a1;
}

uint64_t sub_100733228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100733234);
}

uint64_t sub_100733234(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = sub_1000BE878();
  v5 = _s7Weather24LocationCompositionStateOwet_0(a1, a2, v4);
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t sub_100733274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100733280);
}

uint64_t sub_100733280(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 1);
  else
    v5 = 0;
  v6 = sub_1000BE878();
  return _s7Weather24LocationCompositionStateOwst_0(a1, v5, a3, v6);
}

uint64_t sub_1007332C4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LocationModel(0);
  return _s7Weather24LocationCompositionStateOwet_0(a1, 1, v2);
}

uint64_t sub_1007332F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocationModel(0);
  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, 1, v4);
}

uint64_t sub_10073332C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 0x746E6572727563 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E6572727563, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100733418(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E6F697461636F6CLL;
  else
    return 0x746E6572727563;
}

void sub_100733450(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;

  v2 = sub_1000BA294(&qword_100C02138);
  v21 = *(_QWORD *)(v2 - 8);
  v22 = v2;
  sub_10009D98C();
  __chkstk_darwin(v3);
  sub_100088FDC();
  v20 = v4;
  v5 = sub_1000BE878();
  v19 = *(_QWORD *)(v5 - 8);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v24 = v7;
  sub_1000BA294(&qword_100C02140);
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_100079FBC();
  type metadata accessor for NotificationLocation(0);
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_100098728();
  v12 = v11 - v10;
  v13 = sub_1000BA294(&qword_100C02148);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_100098728();
  v15 = a1[3];
  v16 = a1[4];
  sub_1000DB418(a1, v15);
  v17 = sub_100733D94();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NotificationLocation.CodingKeys, &type metadata for NotificationLocation.CodingKeys, v17, v15, v16);
  sub_100733E48(v23, v12);
  if (_s7Weather24LocationCompositionStateOwet_0(v12, 1, v5) == 1)
  {
    v25 = 0;
    sub_100733E0C();
    sub_1000B4D3C((uint64_t)&type metadata for NotificationLocation.CurrentCodingKeys, (uint64_t)&v25);
    sub_1000CD1CC();
    sub_1000C5AC8(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v24, v12, v5);
    v26 = 1;
    sub_100733DD0();
    sub_1000B4D3C((uint64_t)&type metadata for NotificationLocation.LocationCodingKeys, (uint64_t)&v26);
    sub_100733E8C(&qword_100BDDDB8, (uint64_t)&protocol conformance descriptor for LocationModel);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v24, v18, v22, v5);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v24, v5);
    sub_1000C5AC8(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
  }
  sub_1000B44B0();
}

void sub_1007336AC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  int v58;
  char v59;
  char v60;

  v53 = a2;
  v3 = sub_1000BA294(&qword_100C02108);
  v4 = *(_QWORD *)(v3 - 8);
  v51 = v3;
  v52 = v4;
  sub_10009D98C();
  __chkstk_darwin(v5);
  sub_100088FDC();
  v55 = v6;
  v7 = sub_1000BA294(&qword_100C02110);
  v49 = *(_QWORD *)(v7 - 8);
  v50 = v7;
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_100088FDC();
  v54 = v9;
  v10 = sub_1000BA294(&qword_100C02118);
  v56 = *(_QWORD *)(v10 - 8);
  sub_10009D98C();
  __chkstk_darwin(v11);
  sub_100098728();
  v12 = type metadata accessor for NotificationLocation(0);
  sub_10009D98C();
  __chkstk_darwin(v13);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v46 - v17;
  v20 = a1[3];
  v19 = a1[4];
  sub_1000DB418(a1, v20);
  v21 = sub_100733D94();
  v22 = v57;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NotificationLocation.CodingKeys, &type metadata for NotificationLocation.CodingKeys, v21, v20, v19);
  if (v22)
    goto LABEL_10;
  v47 = v15;
  v48 = v18;
  v57 = a1;
  v23 = KeyedDecodingContainer.allKeys.getter(v10);
  v24 = *(_QWORD *)(v23 + 16);
  v25 = v10;
  if (!v24)
  {
    v35 = v23;
LABEL_8:
    v36 = v56;
    v37 = type metadata accessor for DecodingError(0);
    swift_allocError(v37, &protocol witness table for DecodingError, 0, 0);
    v39 = v38;
    sub_1000BA294(&qword_100BC6CF8);
    *v39 = v12;
    v40 = KeyedDecodingContainer.codingPath.getter(v25);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v40, 0xD00000000000002BLL, 0x80000001009F2600, 0);
    v41 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v39, enum case for DecodingError.typeMismatch(_:), v37);
    swift_willThrow(v41, v42);
    swift_unknownObjectRelease(v35);
    sub_1000C0B74(*(uint64_t (**)(uint64_t, uint64_t))(v36 + 8));
    a1 = v57;
LABEL_10:
    v43 = a1;
    goto LABEL_11;
  }
  v58 = *(unsigned __int8 *)(v23 + 32);
  v26 = sub_10055FF58(1, v24, v23, v23 + 32, 0, (2 * v24) | 1);
  v28 = v27;
  v30 = v29;
  swift_bridgeObjectRelease();
  if (v28 != v30 >> 1)
  {
    v35 = v26;
    goto LABEL_8;
  }
  if ((v58 & 1) != 0)
  {
    v60 = 1;
    sub_100733DD0();
    sub_1000DA1B0((uint64_t)&type metadata for NotificationLocation.LocationCodingKeys, (uint64_t)&v60);
    v54 = v26;
    v31 = sub_1000BE878();
    sub_100733E8C(&qword_100BDDD08, (uint64_t)&protocol conformance descriptor for LocationModel);
    v32 = (uint64_t)v47;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v31, v33, v51);
    v34 = v56;
    sub_1000D1AC0();
    swift_unknownObjectRelease(v54);
    sub_1000C0B74(*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8));
    _s7Weather24LocationCompositionStateOwst_0(v32, 0, 1, v31);
    v45 = (uint64_t)v48;
    sub_1002964C4(v32, (uint64_t)v48);
  }
  else
  {
    v59 = 0;
    sub_100733E0C();
    sub_1000DA1B0((uint64_t)&type metadata for NotificationLocation.CurrentCodingKeys, (uint64_t)&v59);
    sub_1000CD1CC();
    swift_unknownObjectRelease(v26);
    sub_1000C0B74(*(uint64_t (**)(uint64_t, uint64_t))(v56 + 8));
    v44 = sub_1000BE878();
    v45 = (uint64_t)v48;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v48, 1, 1, v44);
  }
  sub_1002964C4(v45, v53);
  v43 = v57;
LABEL_11:
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v43);
  sub_1000B44B0();
}

uint64_t sub_100733AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  void (*v19)(uint64_t, uint64_t);

  v5 = sub_1000BE878();
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100098728();
  v9 = v8 - v7;
  type metadata accessor for NotificationLocation(0);
  sub_10009D98C();
  __chkstk_darwin(v10);
  sub_100079FBC();
  sub_1000BA294(&qword_100C02150);
  sub_10009D98C();
  __chkstk_darwin(v11);
  sub_100098728();
  v14 = v13 - v12;
  v16 = v13 - v12 + *(int *)(v15 + 48);
  sub_100733E48(a1, v13 - v12);
  sub_100733E48(a2, v16);
  sub_1000B489C(v14);
  if (!v18)
  {
    sub_100733E48(v14, v2);
    sub_1000B489C(v16);
    if (!v18)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v9, v16, v5);
      v17 = static LocationModel.== infix(_:_:)(v2, v9);
      v19 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
      v19(v9, v5);
      v19(v2, v5);
      sub_100733F0C(v14);
      return v17 & 1;
    }
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v5);
LABEL_9:
    sub_100733ECC(v14);
    v17 = 0;
    return v17 & 1;
  }
  sub_1000B489C(v16);
  if (!v18)
    goto LABEL_9;
  sub_100733F0C(v14);
  v17 = 1;
  return v17 & 1;
}

uint64_t sub_100733C24()
{
  char *v0;

  return sub_100733418(*v0);
}

uint64_t sub_100733C2C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10073332C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100733C50(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100733D94();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100733C78(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100733D94();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100733CA0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100733E0C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100733CC8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100733E0C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100733CF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100733DD0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100733D18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100733DD0();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100733D40(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1007336AC(a1, a2);
}

void sub_100733D54(_QWORD *a1)
{
  sub_100733450(a1);
}

void sub_100733D68()
{
  sub_1006B8B78();
}

uint64_t sub_100733D7C()
{
  return sub_1006B8A24();
}

unint64_t sub_100733D94()
{
  unint64_t result;

  result = qword_100C02120;
  if (!qword_100C02120)
  {
    result = swift_getWitnessTable(&unk_1009C4D44, &type metadata for NotificationLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02120);
  }
  return result;
}

unint64_t sub_100733DD0()
{
  unint64_t result;

  result = qword_100C02128;
  if (!qword_100C02128)
  {
    result = swift_getWitnessTable(&unk_1009C4CF4, &type metadata for NotificationLocation.LocationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02128);
  }
  return result;
}

unint64_t sub_100733E0C()
{
  unint64_t result;

  result = qword_100C02130;
  if (!qword_100C02130)
  {
    result = swift_getWitnessTable(&unk_1009C4CA4, &type metadata for NotificationLocation.CurrentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02130);
  }
  return result;
}

uint64_t sub_100733E48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NotificationLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100733E8C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for LocationModel(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100733ECC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100C02150);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100733F0C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NotificationLocation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for NotificationLocation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100733F94 + 4 * byte_1009C49A5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100733FC8 + 4 * byte_1009C49A0[v4]))();
}

uint64_t sub_100733FC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100733FD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100733FD8);
  return result;
}

uint64_t sub_100733FE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100733FECLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100733FF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100733FF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotificationLocation.CodingKeys()
{
  return &type metadata for NotificationLocation.CodingKeys;
}

ValueMetadata *type metadata accessor for NotificationLocation.CurrentCodingKeys()
{
  return &type metadata for NotificationLocation.CurrentCodingKeys;
}

uint64_t storeEnumTagSinglePayload for NotificationLocation.LocationCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100734064 + 4 * byte_1009C49AA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100734084 + 4 * byte_1009C49AF[v4]))();
}

_BYTE *sub_100734064(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100734084(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10073408C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100734094(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10073409C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1007340A4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NotificationLocation.LocationCodingKeys()
{
  return &type metadata for NotificationLocation.LocationCodingKeys;
}

unint64_t sub_1007340C4()
{
  unint64_t result;

  result = qword_100C02158;
  if (!qword_100C02158)
  {
    result = swift_getWitnessTable(&unk_1009C4B74, &type metadata for NotificationLocation.LocationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02158);
  }
  return result;
}

unint64_t sub_100734104()
{
  unint64_t result;

  result = qword_100C02160;
  if (!qword_100C02160)
  {
    result = swift_getWitnessTable(&unk_1009C4C7C, &type metadata for NotificationLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02160);
  }
  return result;
}

unint64_t sub_100734144()
{
  unint64_t result;

  result = qword_100C02168;
  if (!qword_100C02168)
  {
    result = swift_getWitnessTable(&unk_1009C4B9C, &type metadata for NotificationLocation.CurrentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02168);
  }
  return result;
}

unint64_t sub_100734184()
{
  unint64_t result;

  result = qword_100C02170;
  if (!qword_100C02170)
  {
    result = swift_getWitnessTable(&unk_1009C4BC4, &type metadata for NotificationLocation.CurrentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02170);
  }
  return result;
}

unint64_t sub_1007341C4()
{
  unint64_t result;

  result = qword_100C02178;
  if (!qword_100C02178)
  {
    result = swift_getWitnessTable(&unk_1009C4AE4, &type metadata for NotificationLocation.LocationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02178);
  }
  return result;
}

unint64_t sub_100734204()
{
  unint64_t result;

  result = qword_100C02180;
  if (!qword_100C02180)
  {
    result = swift_getWitnessTable(&unk_1009C4B0C, &type metadata for NotificationLocation.LocationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02180);
  }
  return result;
}

unint64_t sub_100734244()
{
  unint64_t result;

  result = qword_100C02188;
  if (!qword_100C02188)
  {
    result = swift_getWitnessTable(&unk_1009C4BEC, &type metadata for NotificationLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02188);
  }
  return result;
}

unint64_t sub_100734284()
{
  unint64_t result;

  result = qword_100C02190;
  if (!qword_100C02190)
  {
    result = swift_getWitnessTable(&unk_1009C4C14, &type metadata for NotificationLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02190);
  }
  return result;
}

ValueMetadata *type metadata accessor for Repeat()
{
  return &type metadata for Repeat;
}

uint64_t sub_1007342D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for MainActor(0);
  v3[5] = static MainActor.shared.getter(v4);
  v3[6] = dispatch thunk of Actor.unownedExecutor.getter(v4);
  v3[7] = v5;
  return sub_1000BA5E8();
}

void sub_100734338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);

  if (qword_100BC24D8 != -1)
    goto LABEL_14;
  while (1)
  {
    v1 = type metadata accessor for Logger(0);
    v2 = sub_1000AECD4(v1, (uint64_t)qword_100CAF270);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Performing Repeat instruction", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }
    v6 = *(_QWORD *)(v0 + 24);

    if (v6 < 0)
      break;
    v7 = *(_QWORD *)(v0 + 24);
    if (!v7)
    {
LABEL_11:
      sub_1000DDEE4();
      sub_1000BC590(*(uint64_t (**)(void))(v0 + 8));
      return;
    }
    v8 = 0;
    v9 = *(_QWORD *)(v0 + 32);
    v10 = *(_QWORD *)(v9 + 16);
    *(_QWORD *)(v0 + 64) = v10;
    while (v7 != v8)
    {
      if (v10)
      {
        *(_QWORD *)(v0 + 72) = v8;
        *(_QWORD *)(v0 + 80) = 0;
        v11 = (_QWORD *)(v9 + 32);
        swift_bridgeObjectRetain();
        v12 = (_QWORD *)sub_1000BB0F4(v11);
        *(_QWORD *)(v0 + 88) = v12;
        v13 = sub_1000DD304(v12, (uint64_t)sub_10073448C);
        sub_1000C2CF4(v13, v14, v15, v16);
        return;
      }
      if (v7 == ++v8)
      {
        *(_QWORD *)(v0 + 72) = v7 - 1;
        goto LABEL_11;
      }
    }
    *(_QWORD *)(v0 + 72) = v7;
    __break(1u);
LABEL_14:
    swift_once(&qword_100BC24D8, sub_1006F39A0);
  }
  __break(1u);
}

uint64_t sub_10073448C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc(v2);
  if (v0)
    swift_bridgeObjectRelease();
  return sub_1000BA5E8();
}

uint64_t sub_1007344F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);

  v1 = *(_QWORD *)(v0 + 80) + 1;
  v2 = *(_QWORD *)(v0 + 32);
  if (v1 == *(_QWORD *)(v0 + 64))
  {
    swift_bridgeObjectRelease();
    v3 = *(_QWORD *)(v0 + 24);
    v4 = *(_QWORD *)(v0 + 72) + 1;
    while (v3 != v4)
    {
      *(_QWORD *)(v0 + 72) = v4++;
      if (*(_QWORD *)(v0 + 64))
      {
        swift_bridgeObjectRetain();
        v1 = 0;
        goto LABEL_6;
      }
    }
    sub_1000DDEE4();
    return sub_1000BC590(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
LABEL_6:
    *(_QWORD *)(v0 + 80) = v1;
    v5 = (_QWORD *)sub_1000BB0F4((_QWORD *)(v2 + 40 * v1 + 32));
    *(_QWORD *)(v0 + 88) = v5;
    v6 = sub_1000DD304(v5, (uint64_t)sub_10073448C);
    return sub_1000C2CF4(v6, v7, v8, v9);
  }
}

uint64_t sub_100734598()
{
  uint64_t v0;

  sub_1000DDEE4();
  return sub_1000950D8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1007345C0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *v1;
  v4 = v1[1];
  v6 = (_QWORD *)swift_task_alloc(dword_100C021A4);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100223BE0;
  return sub_1007342D0(a1, v5, v4);
}

ValueMetadata *type metadata accessor for VisibilityComparisonTextBuilder()
{
  return &type metadata for VisibilityComparisonTextBuilder;
}

uint64_t sub_100734630(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  const char *v64;
  char v65;
  _QWORD v66[3];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v66[1] = a2;
  v3 = sub_1000BA294(&qword_100BCB0A8);
  v66[2] = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v68 = (uint64_t)v66 - v7;
  __chkstk_darwin(v8);
  v69 = (uint64_t)v66 - v9;
  __chkstk_darwin(v10);
  v67 = (uint64_t)v66 - v11;
  v12 = sub_1000BA294(&qword_100BCB720);
  __chkstk_darwin(v12);
  v14 = (char *)v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)v66 - v16;
  v18 = type metadata accessor for ConditionUnits(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (int *)type metadata accessor for PastDataComparisonTextContext(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, a1 + v22[9], v18);
  sub_100326438(a1 + v22[12], (uint64_t)v17);
  v23 = type metadata accessor for ExtremaResult(0);
  v24 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v17, 1, v23);
  if ((_DWORD)v24 != 1)
  {
    v66[0] = v19;
    ExtremaResult.maxValue.getter(v24);
    v25 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8);
    v25(v17, v23);
    sub_100326438(a1 + v22[10], (uint64_t)v14);
    v26 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, v23);
    if ((_DWORD)v26 != 1)
    {
      ExtremaResult.maxValue.getter(v26);
      v39 = ((uint64_t (*)(char *, uint64_t))v25)(v14, v23);
      v40 = ConditionUnits.visibility.getter(v39);
      v41 = sub_10012085C();
      v42 = v67;
      v43 = Measurement.init(value:unit:)(v40, v41);
      v44 = ConditionUnits.visibility.getter(v43);
      v45 = v69;
      Measurement.init(value:unit:)(v44, v41);
      v46 = v68;
      VisibilityFormatter.localizedMeasurement(for:useSmallUnits:)(v42, 1);
      VisibilityFormatter.localizedMeasurement(for:useSmallUnits:)(v45, 1);
      v47 = sub_1003F0038();
      v37 = v3;
      if ((dispatch thunk of static Comparable.< infix(_:_:)(v46, v5, v3, v47) & 1) != 0)
      {
        v48 = sub_1000BA908(0xD00000000000002BLL, (uint64_t)"Visibility today is greater than yesterday.");
        sub_1000C2638(v48, v50, v49 & 1, v51, v52, v53, v54, (uint64_t)"Comparasion description of yesterday and today in visibility L2. It indicates today’s maximum visibility is sufficiently higher than yesterday’s");
        sub_1000BB4DC();
        sub_1000BC9DC(v68);
        sub_1000BC9DC(v69);
        sub_1000BC9DC(v42);
        v19 = v66[0];
      }
      else
      {
        v55 = static Measurement.< infix<A, B>(_:_:)(v5, v46, v41, v41, v41);
        v19 = v66[0];
        if ((v55 & 1) != 0)
        {
          v56 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000028, 0x8000000100A12110);
          v63 = v62 & 1;
          v64 = "Comparasion description of yesterday and today in visibility L2. It indicates today’s maximum visibility"
                " is sufficiently lower than yesterday’s";
        }
        else
        {
          v56 = sub_1000BA908(0xD000000000000029, (uint64_t)"Visibility today is similar to yesterday.");
          v63 = v65 & 1;
          v64 = "Comparasion description of yesterday and today in visibility L2. It indicates today’s maximum visibility"
                " is similar to yesterday’s";
        }
        sub_1000C2638(v56, v57, v63, v58, v59, v60, v61, (uint64_t)v64);
        sub_1000BB4DC();
        sub_1000BC9DC(v68);
        sub_1000BC9DC(v69);
        sub_1000BC9DC(v67);
      }
      goto LABEL_9;
    }
    v17 = v14;
    v19 = v66[0];
  }
  sub_100326480((uint64_t)v17);
  if (qword_100BC2450 != -1)
    swift_once(&qword_100BC2450, sub_1006F3844);
  v27 = type metadata accessor for Logger(0);
  v28 = sub_1000AECD4(v27, (uint64_t)qword_100CAF0E8);
  v29 = Logger.logObject.getter(v28);
  v31 = static os_log_type_t.error.getter(v29, v30);
  if (os_log_type_enabled(v29, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v31, "Missing extrema values for building feels like comparison text", v32, 2u);
    swift_slowDealloc(v32, -1, -1);
  }

  v33 = LocalizedStringKey.init(stringLiteral:)(0, 0xE000000000000000);
  v37 = Text.init(_:tableName:bundle:comment:)(v33, v35, v34 & 1, v36, 0, 0, 0, 0, 0, 256);
LABEL_9:
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  return v37;
}

uint64_t sub_100734B24(uint64_t a1)
{
  uint64_t *v1;

  return sub_100734630(a1, *v1);
}

_QWORD *sub_100734B48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v0 = type metadata accessor for TemperatureScaleConfiguration.Gradient(0);
  __chkstk_darwin(v0);
  sub_100098728();
  v3 = v2 - v1;
  static TemperatureScaleConfiguration.Gradient.default.getter();
  result = sub_1000ADC80(v3);
  qword_100CAF338 = (uint64_t)result;
  return result;
}

uint64_t sub_100734BAC(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 0x6F7453726F6C6F63 && a2 == 0xEA00000000007370)
  {
    swift_bridgeObjectRelease(0xEA00000000007370);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F7453726F6C6F63, 0xEA00000000007370, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

uint64_t sub_100734C3C()
{
  return 0x6F7453726F6C6F63;
}

void sub_100734C58(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_1000BA294(&qword_100C021D0);
  sub_100099300();
  __chkstk_darwin(v5);
  sub_1000DB418(a1, a1[3]);
  v6 = sub_100735994();
  sub_1000B44E8((uint64_t)&type metadata for TemperatureGradient.CodingKeys, v7, v6);
  v10 = a2;
  v8 = sub_1000BA294(&qword_100C021B8);
  sub_100735A0C(&qword_100C021D8, (void (*)(void))sub_100735A74, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v10, v9, v4, v8);
  sub_1000BA528();
  sub_100089054();
}

_QWORD *sub_100734D44(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;

  v3 = sub_1000BA294(&qword_100C021A8);
  sub_100099300();
  __chkstk_darwin(v4);
  v5 = sub_1000DB418(a1, a1[3]);
  v6 = sub_100735994();
  sub_1000E7410((uint64_t)&type metadata for TemperatureGradient.CodingKeys, (uint64_t)&type metadata for TemperatureGradient.CodingKeys, v6);
  if (v1)
  {
    sub_1000998EC();
  }
  else
  {
    v7 = sub_1000BA294(&qword_100C021B8);
    sub_100735A0C(&qword_100C021C0, (void (*)(void))sub_1007359D0, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v7, v8, v3);
    sub_1000BA528();
    v5 = v10;
    sub_1000998EC();
  }
  return v5;
}

BOOL sub_100734E64(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  _BOOL4 v8;

  v8 = a1 == a5;
  if (a2 != a6)
    v8 = 0;
  if (a3 != a7)
    v8 = 0;
  return a4 == a8 && v8;
}

uint64_t sub_100734E88(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  char v12;

  if (a1 == 6579570 && a2 == 0xE300000000000000)
  {
    v5 = 0xE300000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(6579570, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E65657267 && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E65657267, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 1702194274 && a2 == 0xE400000000000000)
  {
    v10 = 0xE400000000000000;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1702194274, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0x6168706C61 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 3;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6168706C61, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_100735004(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100735030 + 4 * byte_1009C4DE0[a1]))(6579570, 0xE300000000000000);
}

uint64_t sub_100735030()
{
  return 0x6E65657267;
}

uint64_t sub_100735044()
{
  return 1702194274;
}

uint64_t sub_100735054()
{
  return 0x6168706C61;
}

uint64_t sub_100735068(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v9;
  char v10;
  char v11;
  char v12;

  v3 = sub_1000BA294(&qword_100C021F8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100079FBC();
  v5 = a1[3];
  v6 = a1[4];
  sub_1000DB418(a1, v5);
  v7 = sub_100735AB0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for TemperatureGradientColor.CodingKeys, &type metadata for TemperatureGradientColor.CodingKeys, v7, v5, v6);
  v12 = 0;
  sub_1000BC9E4((uint64_t)&v12);
  if (!v1)
  {
    v11 = 1;
    sub_1000BC9E4((uint64_t)&v11);
    v10 = 2;
    sub_1000BC9E4((uint64_t)&v10);
    v9 = 3;
    sub_1000BC9E4((uint64_t)&v9);
  }
  return sub_1000C1D6C(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
}

double sub_10073519C(_QWORD *a1)
{
  uint64_t v1;
  double v2;
  uint64_t v4;
  unint64_t v5;
  double v6;
  char v8;
  char v9;
  char v10;
  char v11;

  sub_1000BA294(&qword_100C021E8);
  sub_100099300();
  __chkstk_darwin(v4);
  sub_1000DB418(a1, a1[3]);
  v5 = sub_100735AB0();
  sub_1000E7410((uint64_t)&type metadata for TemperatureGradientColor.CodingKeys, (uint64_t)&type metadata for TemperatureGradientColor.CodingKeys, v5);
  if (v1)
  {
    sub_1000998EC();
  }
  else
  {
    v11 = 0;
    sub_1000BB504((uint64_t)&v11);
    v2 = v6;
    v10 = 1;
    sub_1000BB504((uint64_t)&v10);
    v9 = 2;
    sub_1000BB504((uint64_t)&v9);
    v8 = 3;
    sub_1000BB504((uint64_t)&v8);
    sub_1000BAE28();
    sub_1000998EC();
  }
  return v2;
}

BOOL sub_1007352F0(double *a1, double *a2)
{
  BOOL v2;
  BOOL v3;

  if (*a1 == *a2 && (a1[1] == a2[1] ? (v2 = a1[2] == a2[2]) : (v2 = 0), v2 ? (v3 = a1[3] == a2[3]) : (v3 = 0), v3))
    return a1[4] == a2[4];
  else
    return 0;
}

uint64_t sub_10073533C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 0x726F6C6F63 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F6C6F63, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100735420(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E6F697461636F6CLL;
  else
    return 0x726F6C6F63;
}

void sub_100735454(_QWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  _OWORD v12[2];

  v4 = v1;
  v6 = sub_1000BA294(&qword_100C02218);
  sub_100099300();
  __chkstk_darwin(v7);
  sub_100079FBC();
  sub_1000DB418(a1, a1[3]);
  v8 = sub_100735AEC();
  sub_1000B44E8((uint64_t)&type metadata for TemperatureGradientColorStop.CodingKeys, v9, v8);
  v10 = v4[1];
  v12[0] = *v4;
  v12[1] = v10;
  v11 = 0;
  sub_100735B64();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v12, &v11, v6, &unk_100B8D6A8);
  if (!v2)
  {
    LOBYTE(v12[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v12, v6);
  }
  sub_1000C1D6C(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_100089054();
}

uint64_t sub_100735544@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t result;
  char v15;
  _QWORD v16[4];

  v5 = sub_1000BA294(&qword_100C02200);
  __chkstk_darwin(v5);
  sub_100098728();
  v6 = a1[3];
  v7 = a1[4];
  sub_1000DB418(a1, v6);
  v8 = sub_100735AEC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for TemperatureGradientColorStop.CodingKeys, &type metadata for TemperatureGradientColorStop.CodingKeys, v8, v6, v7);
  if (v2)
    return sub_1000998EC();
  v15 = 0;
  sub_100735B28();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&unk_100B8D6A8, &v15, v5);
  v9 = v16[0];
  v10 = v16[1];
  v11 = v16[2];
  v12 = v16[3];
  LOBYTE(v16[0]) = 1;
  v13 = KeyedDecodingContainer.decode(_:forKey:)(v16, v5);
  sub_1000CCE48();
  result = sub_1000998EC();
  *(_QWORD *)a2 = v9;
  *((_QWORD *)a2 + 1) = v10;
  *((_QWORD *)a2 + 2) = v11;
  *((_QWORD *)a2 + 3) = v12;
  a2[4] = v13;
  return result;
}

uint64_t sub_1007356B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100734BAC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1007356DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100735994();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100735704(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100735994();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_10073572C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_100734D44(a1);
  if (!v2)
    *a2 = result;
  return result;
}

void sub_100735754(_QWORD *a1)
{
  uint64_t *v1;

  sub_100734C58(a1, *v1);
}

uint64_t sub_10073576C(_QWORD *a1, _QWORD *a2)
{
  return sub_100734BA8(*a1, *a2);
}

uint64_t sub_100735778()
{
  unsigned __int8 *v0;

  return sub_100735004(*v0);
}

uint64_t sub_100735780@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100734E88(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1007357A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100735AB0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1007357CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100735AB0();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1007357F4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_10073519C(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_QWORD *)(a2 + 24) = v7;
  }
}

uint64_t sub_100735820(_QWORD *a1)
{
  return sub_100735068(a1);
}

BOOL sub_10073583C(double *a1, double *a2)
{
  return sub_100734E64(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t sub_100735850()
{
  char *v0;

  return sub_100735420(*v0);
}

uint64_t sub_100735858@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10073533C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10073587C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100735AEC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1007358A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100735AEC();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1007358CC@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_100735544(a1, (double *)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

void sub_100735910(_QWORD *a1)
{
  sub_100735454(a1);
}

void type metadata accessor for TemperatureGradient()
{
  sub_100098884();
}

void type metadata accessor for TemperatureGradientColor()
{
  sub_100098884();
}

uint64_t sub_100735940(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100735960(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

unint64_t sub_100735994()
{
  unint64_t result;

  result = qword_100C021B0;
  if (!qword_100C021B0)
  {
    result = swift_getWitnessTable(&unk_1009C52AC, &type metadata for TemperatureGradient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C021B0);
  }
  return result;
}

unint64_t sub_1007359D0()
{
  unint64_t result;

  result = qword_100C021C8;
  if (!qword_100C021C8)
  {
    result = swift_getWitnessTable(&unk_1009C4EC0, &unk_100B8D730);
    atomic_store(result, (unint64_t *)&qword_100C021C8);
  }
  return result;
}

uint64_t sub_100735A0C(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_100075EB0(&qword_100C021B8);
    a2();
    result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100735A74()
{
  unint64_t result;

  result = qword_100C021E0;
  if (!qword_100C021E0)
  {
    result = swift_getWitnessTable(&unk_1009C4E98, &unk_100B8D730);
    atomic_store(result, (unint64_t *)&qword_100C021E0);
  }
  return result;
}

unint64_t sub_100735AB0()
{
  unint64_t result;

  result = qword_100C021F0;
  if (!qword_100C021F0)
  {
    result = swift_getWitnessTable(&unk_1009C525C, &type metadata for TemperatureGradientColor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C021F0);
  }
  return result;
}

unint64_t sub_100735AEC()
{
  unint64_t result;

  result = qword_100C02208;
  if (!qword_100C02208)
  {
    result = swift_getWitnessTable(&unk_1009C520C, &type metadata for TemperatureGradientColorStop.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02208);
  }
  return result;
}

unint64_t sub_100735B28()
{
  unint64_t result;

  result = qword_100C02210;
  if (!qword_100C02210)
  {
    result = swift_getWitnessTable(&unk_1009C4F38, &unk_100B8D6A8);
    atomic_store(result, (unint64_t *)&qword_100C02210);
  }
  return result;
}

unint64_t sub_100735B64()
{
  unint64_t result;

  result = qword_100C02220;
  if (!qword_100C02220)
  {
    result = swift_getWitnessTable(&unk_1009C4F10, &unk_100B8D6A8);
    atomic_store(result, (unint64_t *)&qword_100C02220);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TemperatureGradientColorStop.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100735BEC + 4 * byte_1009C4DE9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100735C20 + 4 * byte_1009C4DE4[v4]))();
}

uint64_t sub_100735C20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100735C28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100735C30);
  return result;
}

uint64_t sub_100735C3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100735C44);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100735C48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100735C50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TemperatureGradientColorStop.CodingKeys()
{
  return &type metadata for TemperatureGradientColorStop.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for TemperatureGradientColor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100735CB8 + 4 * byte_1009C4DF3[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100735CEC + 4 * byte_1009C4DEE[v4]))();
}

uint64_t sub_100735CEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100735CF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100735CFCLL);
  return result;
}

uint64_t sub_100735D08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100735D10);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100735D14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100735D1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TemperatureGradientColor.CodingKeys()
{
  return &type metadata for TemperatureGradientColor.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for TemperatureGradient.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100735D78 + 4 * byte_1009C4DF8[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100735D98 + 4 * byte_1009C4DFD[v4]))();
}

_BYTE *sub_100735D78(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100735D98(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100735DA0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100735DA8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100735DB0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100735DB8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TemperatureGradient.CodingKeys()
{
  return &type metadata for TemperatureGradient.CodingKeys;
}

unint64_t sub_100735DD8()
{
  unint64_t result;

  result = qword_100C02228;
  if (!qword_100C02228)
  {
    result = swift_getWitnessTable(&unk_1009C5074, &type metadata for TemperatureGradient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02228);
  }
  return result;
}

unint64_t sub_100735E18()
{
  unint64_t result;

  result = qword_100C02230;
  if (!qword_100C02230)
  {
    result = swift_getWitnessTable(&unk_1009C512C, &type metadata for TemperatureGradientColor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02230);
  }
  return result;
}

unint64_t sub_100735E58()
{
  unint64_t result;

  result = qword_100C02238;
  if (!qword_100C02238)
  {
    result = swift_getWitnessTable(&unk_1009C51E4, &type metadata for TemperatureGradientColorStop.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02238);
  }
  return result;
}

unint64_t sub_100735E98()
{
  unint64_t result;

  result = qword_100C02240;
  if (!qword_100C02240)
  {
    result = swift_getWitnessTable(&unk_1009C5154, &type metadata for TemperatureGradientColorStop.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02240);
  }
  return result;
}

unint64_t sub_100735ED8()
{
  unint64_t result;

  result = qword_100C02248;
  if (!qword_100C02248)
  {
    result = swift_getWitnessTable(&unk_1009C517C, &type metadata for TemperatureGradientColorStop.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02248);
  }
  return result;
}

unint64_t sub_100735F18()
{
  unint64_t result;

  result = qword_100C02250;
  if (!qword_100C02250)
  {
    result = swift_getWitnessTable(&unk_1009C509C, &type metadata for TemperatureGradientColor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02250);
  }
  return result;
}

unint64_t sub_100735F58()
{
  unint64_t result;

  result = qword_100C02258;
  if (!qword_100C02258)
  {
    result = swift_getWitnessTable(&unk_1009C50C4, &type metadata for TemperatureGradientColor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02258);
  }
  return result;
}

unint64_t sub_100735F98()
{
  unint64_t result;

  result = qword_100C02260;
  if (!qword_100C02260)
  {
    result = swift_getWitnessTable(&unk_1009C4FE4, &type metadata for TemperatureGradient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02260);
  }
  return result;
}

unint64_t sub_100735FD8()
{
  unint64_t result;

  result = qword_100C02268;
  if (!qword_100C02268)
  {
    result = swift_getWitnessTable(&unk_1009C500C, &type metadata for TemperatureGradient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02268);
  }
  return result;
}

void sub_100736014(char a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94[32];

  v93 = a3;
  v5 = type metadata accessor for TipPriorityQueue.GridEntry(0);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_1000986FC();
  v92 = v7;
  __chkstk_darwin(v8);
  v91 = (uint64_t)&v68 - v9;
  __chkstk_darwin(v10);
  v90 = (uint64_t)&v68 - v11;
  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100098728();
  v15 = v14 - v13;
  type metadata accessor for LocationComponentViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v68 - v20;
  sub_1000BA294(&qword_100BCC760);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  sub_1000986FC();
  v89 = v23;
  __chkstk_darwin(v24);
  v26 = (char *)&v68 - v25;
  __chkstk_darwin(v27);
  v29 = (char *)&v68 - v28;
  __chkstk_darwin(v30);
  v32 = (char *)&v68 - v31;
  if (a1)
  {
    if (a1 == 1)
    {
      if ((a2 & 1) != 0)
      {
        v33 = &qword_100C02640;
        goto LABEL_11;
      }
    }
    else if ((a2 & 1) != 0)
    {
      v33 = &qword_100C02A10;
      goto LABEL_11;
    }
    v33 = &qword_100C02828;
  }
  else if ((a2 & 1) != 0)
  {
    v33 = &qword_100C02270;
  }
  else
  {
    v33 = &qword_100C02458;
  }
LABEL_11:
  v34 = *((_BYTE *)v33 + 224);
  v76 = *v33;
  v75 = v33[1];
  v74 = v33[2];
  v73 = v33[3];
  v35 = v33[8];
  v79 = v33[9];
  v80 = v35;
  v36 = v33[10];
  v77 = v33[11];
  v78 = v36;
  v37 = v33[24];
  v72 = v33[25];
  v71 = v33[26];
  v70 = v33[27];
  v38 = v33[49];
  v83 = v33[50];
  v84 = v38;
  v39 = v33[51];
  v81 = v33[52];
  v82 = v39;
  v40 = v33[57];
  v87 = v33[58];
  v88 = v40;
  v41 = v93 + OBJC_IVAR____TtCV7Weather22ElevatedAqiNewsContent8_Storage_map;
  v43 = v33[59];
  v42 = v33[60];
  v85 = v43;
  v86 = v42;
  sub_1000992EC(v93 + OBJC_IVAR____TtCV7Weather22ElevatedAqiNewsContent8_Storage_map, (uint64_t)v94);
  sub_10003773C(v41, v15, &qword_100BC4A98);
  v44 = sub_1000878BC();
  if (_s7Weather24LocationCompositionStateOwet_0(v15, 1, v44) == 1)
  {
    sub_100021A14(v15, &qword_100BC4A98);
LABEL_16:
    v45 = 1;
    goto LABEL_17;
  }
  v69 = v37;
  sub_10009D3BC(v15 + *(int *)(v44 + 20), (uint64_t)v18);
  sub_1000215BC(v15, type metadata accessor for LocationComponentContainerViewModel);
  sub_10007C77C((uint64_t)v18, (uint64_t)v21, type metadata accessor for LocationComponentViewModel);
  if ((v34 & 1) != 0)
  {
    sub_1000215BC((uint64_t)v21, type metadata accessor for LocationComponentViewModel);
    goto LABEL_16;
  }
  sub_10007C77C((uint64_t)v21, (uint64_t)v29, type metadata accessor for LocationComponentViewModel);
  v45 = 0;
  v46 = &v29[*(int *)(v5 + 20)];
  v47 = v72;
  *(_QWORD *)v46 = v69;
  *((_QWORD *)v46 + 1) = v47;
  v48 = v70;
  *((_QWORD *)v46 + 2) = v71;
  *((_QWORD *)v46 + 3) = v48;
LABEL_17:
  sub_1000988B8((uint64_t)v29, v45);
  sub_1002228F0((uint64_t)v29, (uint64_t)v32);
  sub_10009D3BC(v93 + *(int *)(v44 + 20) + OBJC_IVAR____TtCV7Weather22ElevatedAqiNewsContent8_Storage_airQuality, (uint64_t)v26);
  v49 = &v26[*(int *)(v5 + 20)];
  v50 = v75;
  *(_QWORD *)v49 = v76;
  *((_QWORD *)v49 + 1) = v50;
  v51 = v73;
  *((_QWORD *)v49 + 2) = v74;
  *((_QWORD *)v49 + 3) = v51;
  sub_1000988B8((uint64_t)v26, 0);
  v52 = sub_10009D3C4(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast);
  v53 = v90;
  sub_10009D3BC(v52, v90);
  v54 = (uint64_t *)(v53 + *(int *)(v5 + 20));
  v55 = v79;
  *v54 = v80;
  v54[1] = v55;
  v56 = v77;
  v54[2] = v78;
  v54[3] = v56;
  v57 = v89;
  sub_10003773C((uint64_t)v32, v89, &qword_100BCC760);
  v58 = sub_10009D3C4(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex);
  v59 = v91;
  sub_10009D3BC(v58, v91);
  v60 = (uint64_t *)(v59 + *(int *)(v5 + 20));
  v61 = v83;
  *v60 = v84;
  v60[1] = v61;
  v62 = v81;
  v60[2] = v82;
  v60[3] = v62;
  v63 = sub_10009D3C4(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind);
  v64 = v92;
  sub_10009D3BC(v63, v92);
  v65 = (uint64_t *)(v64 + *(int *)(v5 + 20));
  v66 = v87;
  *v65 = v88;
  v65[1] = v66;
  v67 = v86;
  v65[2] = v85;
  v65[3] = v67;
  sub_10087CED0((uint64_t)v26, v53, v57, v59, v64);
  sub_100021A14((uint64_t)v32, &qword_100BCC760);
  sub_100098640();
}

void sub_100736510(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;
  __n128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 *v39;
  uint64_t v40;
  uint64_t v41;
  __n128 *v42;
  uint64_t v43;
  uint64_t v44;
  __n128 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 *v60;
  __n128 *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __n128 *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __n128 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __n128 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __n128 *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  _BYTE v107[24];

  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100098728();
  v6 = v5 - v4;
  v7 = sub_1000878BC();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10009E540();
  v9 = a1;
  v10 = a1 + OBJC_IVAR____TtCV7Weather22ElevatedAqiNewsContent8_Storage_map;
  sub_1000992EC(a1 + OBJC_IVAR____TtCV7Weather22ElevatedAqiNewsContent8_Storage_map, (uint64_t)v107);
  sub_10003773C(v10, v6, &qword_100BC4A98);
  if (_s7Weather24LocationCompositionStateOwet_0(v6, 1, v7) == 1)
  {
    sub_100021A14(v6, &qword_100BC4A98);
    v11 = sub_1000BA294(&qword_100BCC750);
    v12 = swift_allocObject(v11, 248, 7);
    *(_OWORD *)(v12 + 16) = xmmword_10098E040;
    v13 = sub_1000BA294(&qword_100BCC758);
    v14 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v15 = *(_QWORD *)(v8 + 72);
    v16 = v13;
    v17 = (__n128 *)sub_1000BA6B8(v13);
    v18 = sub_100099954(v17, (__n128)xmmword_10097CA50);
    sub_10009F7F4(a1 + OBJC_IVAR____TtCV7Weather22ElevatedAqiNewsContent8_Storage_airQuality, (uint64_t)v18 + v14);
    *(_QWORD *)(v12 + 32) = sub_1000B4580();
    *(_QWORD *)(v12 + 40) = v19;
    *(_QWORD *)(v12 + 48) = v20;
    v21 = sub_1000BA6B8(v16);
    *(_OWORD *)(v21 + 16) = v106;
    sub_10009F7F4(a1 + OBJC_IVAR____TtCV7Weather22ElevatedAqiNewsContent8_Storage_newsArticle, v21 + v14);
    *(_QWORD *)(v12 + 56) = sub_1000B4580();
    *(_QWORD *)(v12 + 64) = v22;
    *(_QWORD *)(v12 + 72) = v23;
    v24 = (__n128 *)sub_1000BA6B8(v16);
    sub_10009D458(v24);
    sub_10009F7F4(v25 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, v26);
    *(_QWORD *)(v12 + 80) = sub_1000B4580();
    *(_QWORD *)(v12 + 88) = v27;
    *(_QWORD *)(v12 + 96) = v28;
    v29 = (__n128 *)sub_1000BA6B8(v16);
    sub_10009D458(v29);
    sub_10009F7F4(v30 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v31);
    *(_QWORD *)(v12 + 104) = sub_100080C44((uint64_t)v29);
    *(_QWORD *)(v12 + 112) = v32;
    *(_QWORD *)(v12 + 120) = v33;
    v34 = (__n128 *)sub_1000C2514(v16, v14 + 2 * v15);
    v35 = (char *)sub_100099954(v34, (__n128)xmmword_10097DA20) + v14;
    v36 = *(_QWORD *)(a1 + 16);
    sub_10009F7F4(v36 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex, (uint64_t)v35);
    sub_10009F7F4(v36 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, (uint64_t)&v35[v15]);
    *(_QWORD *)(v12 + 128) = sub_1000B4580();
    *(_QWORD *)(v12 + 136) = v37;
    *(_QWORD *)(v12 + 144) = v38;
    v39 = (__n128 *)sub_1000BA6B8(v16);
    sub_1000B46B8(v39);
    sub_100095B78(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind, (uint64_t)v35, type metadata accessor for LocationComponentContainerViewModel);
    sub_100098B48(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)&v35[v15]);
    *(_QWORD *)(v12 + 152) = sub_1000B4580();
    *(_QWORD *)(v12 + 160) = v40;
    *(_QWORD *)(v12 + 168) = v41;
    v42 = (__n128 *)sub_1000BA6B8(v16);
    sub_1000B46B8(v42);
    sub_100098A1C(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike, (uint64_t)v35);
    sub_100098A1C(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)&v35[v15]);
    *(_QWORD *)(v12 + 176) = sub_1000B4580();
    *(_QWORD *)(v12 + 184) = v43;
    *(_QWORD *)(v12 + 192) = v44;
    v45 = (__n128 *)sub_1000BA6B8(v16);
    sub_1000B46B8(v45);
    sub_100098B48(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility, (uint64_t)v35);
    sub_100098B48(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, (uint64_t)&v35[v15]);
    *(_QWORD *)(v12 + 200) = sub_1000B4580();
    *(_QWORD *)(v12 + 208) = v46;
    *(_QWORD *)(v12 + 216) = v47;
    v48 = sub_1000BA6B8(v16);
    *(_OWORD *)(v48 + 16) = v106;
    v49 = *(_QWORD *)(a1 + 16);
    sub_10009D3BC(v49 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, v48 + v14);
    sub_10009D3BC(v49 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, v48 + v14 + v15);
    *(_QWORD *)(v12 + 224) = sub_100080C44(v48);
    *(_QWORD *)(v12 + 232) = v50;
    *(_QWORD *)(v12 + 240) = v51;
  }
  else
  {
    sub_10007C77C(v6, v1, type metadata accessor for LocationComponentContainerViewModel);
    v52 = sub_1000BA294(&qword_100BCC750);
    v53 = swift_allocObject(v52, 272, 7);
    *(_OWORD *)(v53 + 16) = xmmword_10097FA60;
    v54 = sub_1000BA294(&qword_100BCC758);
    v55 = *(_QWORD *)(v8 + 72);
    v56 = *(unsigned __int8 *)(v8 + 80);
    v57 = (v56 + 32) & ~v56;
    v105 = v1;
    v58 = v56 | 7;
    v59 = v54;
    v60 = (__n128 *)swift_allocObject(v54, v57 + v55, v56 | 7);
    v61 = sub_100099954(v60, (__n128)xmmword_10097CA50);
    sub_1000B4590(v9 + OBJC_IVAR____TtCV7Weather22ElevatedAqiNewsContent8_Storage_airQuality, (uint64_t)v61 + v57);
    *(_QWORD *)(v53 + 32) = sub_1000B4588();
    *(_QWORD *)(v53 + 40) = v62;
    *(_QWORD *)(v53 + 48) = v63;
    v64 = sub_1000BA5D8();
    *(_OWORD *)(v64 + 16) = v106;
    sub_1000B4590(v9 + OBJC_IVAR____TtCV7Weather22ElevatedAqiNewsContent8_Storage_newsArticle, v64 + v57);
    *(_QWORD *)(v53 + 56) = sub_1000B4588();
    *(_QWORD *)(v53 + 64) = v65;
    *(_QWORD *)(v53 + 72) = v66;
    v67 = (__n128 *)sub_1000BA5D8();
    sub_100098A48(v67);
    sub_1000B4590(v68 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, v69);
    *(_QWORD *)(v53 + 80) = sub_1000B4588();
    *(_QWORD *)(v53 + 88) = v70;
    *(_QWORD *)(v53 + 96) = v71;
    v72 = (__n128 *)sub_1000BA5D8();
    sub_100098A48(v72);
    sub_1000B4590(v73 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v74);
    *(_QWORD *)(v53 + 104) = sub_1000B4588();
    *(_QWORD *)(v53 + 112) = v75;
    *(_QWORD *)(v53 + 120) = v76;
    v77 = sub_1000BA5D8();
    *(_OWORD *)(v77 + 16) = v106;
    sub_1000B4590(v1, v77 + v57);
    *(_QWORD *)(v53 + 128) = sub_1000B4580();
    *(_QWORD *)(v53 + 136) = v78;
    *(_QWORD *)(v53 + 144) = v79;
    v80 = v9;
    v81 = (__n128 *)swift_allocObject(v59, v57 + 2 * v55, v58);
    v82 = (char *)sub_100099954(v81, (__n128)xmmword_10097DA20) + v57;
    v83 = *(_QWORD *)(v80 + 16);
    v103 = v80;
    sub_1000B4590(v83 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex, (uint64_t)v82);
    v104 = v55;
    sub_1000B4590(v83 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, (uint64_t)&v82[v55]);
    *(_QWORD *)(v53 + 152) = sub_1000B4588();
    *(_QWORD *)(v53 + 160) = v84;
    *(_QWORD *)(v53 + 168) = v85;
    v86 = (__n128 *)sub_1000C2514(v59, v57 + 2 * v55);
    sub_1000C52D8(v86);
    v87 = *(_QWORD *)(v80 + 16);
    sub_1000B4590(v87 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind, (uint64_t)v82);
    sub_1000B4590(v87 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)&v82[v55]);
    *(_QWORD *)(v53 + 176) = sub_1000B4588();
    *(_QWORD *)(v53 + 184) = v88;
    *(_QWORD *)(v53 + 192) = v89;
    v90 = v57 + 2 * v55;
    v91 = (__n128 *)sub_1000C2514(v59, v90);
    sub_1000C52D8(v91);
    v92 = *(_QWORD *)(v103 + 16);
    sub_1000B4590(v92 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike, (uint64_t)v82);
    sub_100098A1C(v92 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)&v82[v55]);
    *(_QWORD *)(v53 + 200) = sub_1000B4588();
    *(_QWORD *)(v53 + 208) = v93;
    *(_QWORD *)(v53 + 216) = v94;
    v95 = (__n128 *)sub_1000C2514(v59, v90);
    sub_1000C52D8(v95);
    v96 = *(_QWORD *)(v103 + 16);
    sub_100095B78(v96 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility, (uint64_t)v82, type metadata accessor for LocationComponentContainerViewModel);
    sub_100095B78(v96 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, (uint64_t)&v82[v55], type metadata accessor for LocationComponentContainerViewModel);
    *(_QWORD *)(v53 + 224) = sub_1000B4588();
    *(_QWORD *)(v53 + 232) = v97;
    *(_QWORD *)(v53 + 240) = v98;
    v99 = swift_allocObject(v59, v90, v58);
    *(_OWORD *)(v99 + 16) = v106;
    v100 = *(_QWORD *)(v103 + 16);
    sub_100098B48(v100 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, v99 + v57);
    sub_100098B48(v100 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, v99 + v57 + v104);
    *(_QWORD *)(v53 + 248) = sub_100080C44(v99);
    *(_QWORD *)(v53 + 256) = v101;
    *(_QWORD *)(v53 + 264) = v102;
    sub_1000215BC(v105, type metadata accessor for LocationComponentContainerViewModel);
  }
  sub_100098640();
}

void sub_100736C54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = sub_1000878BC();
  sub_1000B42B0();
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v16 - v7;
  type metadata accessor for LocationViewComponent(0);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_10009E540();
  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = v12 - v11;
  v14 = *(_QWORD *)(a1 + 16);
  swift_retain();
  sub_100520630();
  v17 = v15;
  swift_release(v14);
  sub_1000C5D34(OBJC_IVAR____TtCV7Weather36LocationElevatedAqiNewsConfiguration8_Storage_map);
  sub_1000C661C();
  sub_100098B50();
  _s7Weather24LocationCompositionStateOwst_0(v13, 0, 1, v2);
  sub_1000C5D34(OBJC_IVAR____TtCV7Weather36LocationElevatedAqiNewsConfiguration8_Storage_airQuality);
  sub_1000C661C();
  sub_100098B50();
  sub_1000C5D34(OBJC_IVAR____TtCV7Weather36LocationElevatedAqiNewsConfiguration8_Storage_newsArticle);
  sub_1000C661C();
  sub_100098B50();
  sub_1001DAD78(v17, v13, (uint64_t)v8, (uint64_t)v6);
  sub_100098640();
}

uint64_t sub_100736DC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  double v39;
  char *v40;
  void (*v41)(uint64_t, char *, uint64_t);
  char *v42;
  void (**v43)(char *, uint64_t);
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, _QWORD, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __n128 *v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __n128 *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, _QWORD, uint64_t);
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  char v107;
  void (*v108)(char *, uint64_t);
  char *v109;
  uint64_t (**v110)(uint64_t, uint64_t);
  __n128 *v111;
  __n128 v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __n128 *v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __n128 *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  NSObject *v140;
  uint64_t v141;
  os_log_type_t v142;
  _DWORD *v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __n128 *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t (*v159)(uint64_t, _QWORD);
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v165;
  id v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  objc_class *v181;
  NSBundle v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  __n128 *v188;
  _QWORD *v189;
  uint64_t v190;
  objc_class *v191;
  NSBundle v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __n128 *v197;
  _QWORD *v198;
  uint64_t v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  char *v204;
  uint64_t v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  void (**v219)(uint64_t, uint64_t, uint64_t);
  uint64_t v220;
  uint64_t v221;
  uint64_t v222[2];

  v218 = a3;
  type metadata accessor for AttributeContainer(0);
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_100088FDC();
  v208 = v9;
  v209 = type metadata accessor for DateComponents(0);
  v215 = *(_QWORD *)(v209 - 8);
  sub_10009D98C();
  __chkstk_darwin(v10);
  v200 = (char *)&v200 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v12);
  v204 = (char *)&v200 - v13;
  sub_10009D2A4();
  __chkstk_darwin(v14);
  v202 = (char *)&v200 - v15;
  sub_10009D2A4();
  __chkstk_darwin(v16);
  *(_QWORD *)&v206 = (char *)&v200 - v17;
  v18 = sub_100098778();
  v219 = *(void (***)(uint64_t, uint64_t, uint64_t))(v18 - 8);
  v220 = v18;
  sub_10009D98C();
  __chkstk_darwin(v19);
  sub_1000986FC();
  *(_QWORD *)&v207 = v20;
  sub_10009D2A4();
  __chkstk_darwin(v21);
  v216 = (uint64_t)&v200 - v22;
  v23 = sub_10009C050();
  v24 = *(char **)(v23 - 8);
  __chkstk_darwin(v23);
  v201 = (char *)&v200 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v26);
  v203 = (char *)&v200 - v27;
  sub_10009D2A4();
  __chkstk_darwin(v28);
  sub_1000B2688();
  __chkstk_darwin(v29);
  v31 = (char *)&v200 - v30;
  v213 = type metadata accessor for SunriseSunsetEventCalculator(0);
  v210 = *(_QWORD *)(v213 - 8);
  sub_10009D98C();
  __chkstk_darwin(v32);
  v33 = sub_1000C4668();
  v214 = type metadata accessor for Calendar(v33);
  v212 = *(_QWORD *)(v214 - 8);
  sub_10009D98C();
  __chkstk_darwin(v34);
  sub_1000E78C0();
  v35 = static Calendar.currentCalendar(with:)(a2);
  v36 = SunriseSunsetEventCalculator.init()(v35);
  v37 = Location.coordinate.getter(v36);
  v38 = a1;
  v211 = v4;
  SunriseSunsetEventCalculator.nextEvent(coordinate:date:timeZone:)(a1, a2, v37, v39);
  v40 = (char *)v23;
  v41 = (void (*)(uint64_t, char *, uint64_t))*((_QWORD *)v24 + 2);
  v217 = v31;
  v42 = v31;
  v43 = (void (**)(char *, uint64_t))v24;
  v41(v5, v42, v23);
  v44 = (*((uint64_t (**)(uint64_t, uint64_t))v24 + 11))(v5, v23);
  v205 = a1;
  if (v44 == enum case for SunriseSunsetEvent.sunrise(_:))
  {
    sub_1000C6F6C();
    v45 = v216;
    v219[4](v216, v5, v220);
    v46 = sub_1000BA294(&qword_100BC4E50);
    v47 = sub_10009BDC4();
    v48 = *(_QWORD *)(v47 - 8);
    v49 = *(_QWORD *)(v48 + 72);
    v50 = *(unsigned __int8 *)(v48 + 80);
    v51 = (v50 + 32) & ~v50;
    v203 = v24;
    v52 = v51 + v49;
    v201 = (char *)v46;
    v200 = (char *)(v50 | 7);
    v53 = swift_allocObject(v46, v51 + v49, v50 | 7);
    v204 = v40;
    v207 = xmmword_10097CA50;
    *(_OWORD *)(v53 + 16) = xmmword_10097CA50;
    v54 = *(void (**)(uint64_t, _QWORD, uint64_t))(v48 + 104);
    v54(v53 + v51, enum case for Calendar.Component.hour(_:), v47);
    v55 = sub_1000FC570();
    v56 = v206;
    Calendar.dateComponents(_:from:to:)(v55, v38, v45);
    swift_bridgeObjectRelease();
    v58 = DateComponents.hour.getter(v57);
    v60 = v59;
    v61 = *(void (**)(char *, uint64_t))(v215 + 8);
    v62 = v56;
    v63 = v209;
    sub_1000B3174(v62);
    if ((v60 & 1) == 0)
    {
      v64 = v216;
      if (v58 > 48)
      {
        v65 = (__n128 *)swift_allocObject(v201, v52, v200);
        v66 = v63;
        v67 = (uint64_t)v65;
        v68 = sub_1000ED07C(v65);
        ((void (*)(uint64_t, _QWORD, uint64_t, __n128))v54)(v69 + v51, enum case for Calendar.Component.day(_:), v47, v68);
        v70 = sub_1000A8278(v67);
        v71 = v202;
        v72 = v64;
        v73 = v3;
        Calendar.dateComponents(_:from:to:)(v70, v205, v64);
        sub_1000986E8();
        v75 = DateComponents.day.getter(v74);
        v77 = v76;
        v61(v71, v66);
        if ((v77 & 1) != 0)
        {
          v75 = 0;
          v78 = v218;
          v165 = (uint64_t)v219;
          v79 = v220;
        }
        else
        {
          v78 = v218;
          v79 = v220;
          if (v75 >= 8)
          {
            v80 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
            sub_1000989C4();
            sub_1000BC298(v81, 0x8000000100A12520, v82, v83, v84, v85, v86, v87);
            sub_1000D1AD4();
            v88 = sub_1000BA294(&qword_100BC3C38);
            v89 = (__n128 *)sub_1000D0970(v88);
            sub_1000ED07C(v89);
            sub_1000DD324(v90, v91);
            sub_100099018();
            sub_1000986E8();
            sub_1000F42C8();
            AttributedString.init(_:attributes:)(v77, 7, v89);
            ((void (*)(uint64_t, uint64_t))v219[1])(v64, v79);
LABEL_27:
            sub_1000CFEFC();
            sub_1000DBD2C();
            sub_1000C588C(v73, *(uint64_t (**)(uint64_t, _QWORD))(v212 + 8));
            v179 = sub_1000B4928();
            v180 = v78;
            return sub_100098974(v180, v177, v178, v179);
          }
          v165 = (uint64_t)v219;
        }
        v181 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        sub_1000989C4();
        v182.super.isa = v181;
        sub_1000BA340(v183, 0x8000000100A124C0, 0, 0, v182, v184, v185, v186);
        sub_1000BD3AC();
        v187 = sub_1000BA294(&qword_100BC3C38);
        v188 = (__n128 *)sub_1000D0970(v187);
        sub_1000ED07C(v188);
        sub_1000C10B4(v189, v190);
        sub_1000E7D48();
        sub_1000986C4();
        sub_10011DBDC();
        AttributedString.init(_:attributes:)(v75, 0xD000000000000011, v188);
        (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v72, v79);
        goto LABEL_27;
      }
    }
    v148 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    sub_10009DC90();
    sub_1000989C4();
    sub_1000BC298(0xD000000000000011, 0x8000000100A12460, v149, v150, v151, v152, v153, v154);
    sub_1000D1AD4();
    v155 = sub_1000BA294(&qword_100BC3C38);
    v156 = (__n128 *)sub_1000D0970(v155);
    sub_1000ED07C(v156);
    sub_1000DD324(v157, v158);
    sub_100099018();
    sub_1000986E8();
    sub_1000F4008();
    sub_100099708();
    sub_100099CA4((uint64_t)v219);
    sub_1000CFEFC();
    sub_1000DBD2C();
    v159 = *(uint64_t (**)(uint64_t, _QWORD))(v212 + 8);
    v160 = v3;
LABEL_23:
    sub_1000C588C(v160, v159);
    v179 = sub_1000B4928();
    v180 = (uint64_t)v156;
    return sub_100098974(v180, v177, v178, v179);
  }
  v92 = v215;
  v93 = v218;
  v216 = v3;
  if (v44 == enum case for SunriseSunsetEvent.sunset(_:))
  {
    sub_1000C6F6C();
    v219[4](v207, v5, v220);
    v94 = sub_1000BA294(&qword_100BC4E50);
    v95 = sub_10009BDC4();
    v96 = *(_QWORD *)(v95 - 8);
    v97 = *(unsigned __int8 *)(v96 + 80);
    v98 = (v97 + 32) & ~v97;
    v99 = (char *)(v98 + *(_QWORD *)(v96 + 72));
    v203 = (char *)v94;
    v202 = v99;
    v201 = (char *)(v97 | 7);
    v100 = swift_allocObject(v94, v99, v97 | 7);
    v101 = (uint64_t)v40;
    v206 = xmmword_10097CA50;
    *(_OWORD *)(v100 + 16) = xmmword_10097CA50;
    v102 = *(void (**)(uint64_t, _QWORD, uint64_t))(v96 + 104);
    v102(v100 + v98, enum case for Calendar.Component.hour(_:), v95);
    sub_1000FC570();
    v103 = v204;
    sub_1000DC2B0();
    swift_bridgeObjectRelease();
    v105 = DateComponents.hour.getter(v104);
    v107 = v106;
    v108 = *(void (**)(char *, uint64_t))(v92 + 8);
    v109 = v103;
    v110 = (uint64_t (**)(uint64_t, uint64_t))v24;
    v108(v109, v209);
    if ((v107 & 1) == 0)
    {
      if (v105 > 48)
      {
        v111 = (__n128 *)swift_allocObject(v203, v202, v201);
        v112 = sub_1000C01FC(v111);
        ((void (*)(uint64_t, _QWORD, uint64_t, __n128))v102)(v113 + v98, enum case for Calendar.Component.day(_:), v95, v112);
        sub_1000FC570();
        v114 = v200;
        v115 = v207;
        sub_1000DC2B0();
        sub_1000986E8();
        v117 = DateComponents.day.getter(v116);
        v119 = v118;
        v108(v114, v209);
        if ((v119 & 1) != 0)
        {
          v117 = 0;
          v120 = v218;
        }
        else
        {
          v120 = v218;
          if (v117 >= 8)
          {
            v121 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
            sub_10009DC90();
            sub_1000989C4();
            sub_1000BC298(v122, 0x8000000100A123F0, v123, v124, v125, v126, v127, v128);
            sub_1000D1AD4();
            v129 = sub_1000BA294(&qword_100BC3C38);
            v130 = (__n128 *)sub_1000D0970(v129);
            sub_1000C01FC(v130);
            sub_1000DD324(v131, v132);
            sub_100099018();
            sub_1000986E8();
            sub_1000F42C8();
            v133 = v119;
            v134 = 7;
            v135 = v130;
LABEL_30:
            AttributedString.init(_:attributes:)(v133, v134, v135);
            ((void (*)(uint64_t, uint64_t))v219[1])(v115, v220);
            v43[1](v217, v101);
            sub_1000DBD2C();
            sub_1000C588C(v101, *(uint64_t (**)(uint64_t, _QWORD))(v212 + 8));
            v179 = sub_1000B4928();
            v180 = v120;
            return sub_100098974(v180, v177, v178, v179);
          }
        }
        v191 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        sub_1000989C4();
        v192.super.isa = v191;
        sub_1000BA340(0xD000000000000011, 0x8000000100A12390, 0, 0, v192, v193, v194, v195);
        sub_1000BD3AC();
        v196 = sub_1000BA294(&qword_100BC3C38);
        v197 = (__n128 *)sub_1000D0970(v196);
        sub_1000C01FC(v197);
        sub_1000C10B4(v198, v199);
        sub_1000E7D48();
        sub_1000986C4();
        sub_10011DBDC();
        v133 = v117;
        v134 = (uint64_t)v114;
        v135 = v197;
        goto LABEL_30;
      }
      v101 = v216;
      v110 = (uint64_t (**)(uint64_t, uint64_t))v24;
    }
    v166 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    sub_10009DC90();
    sub_1000989C4();
    sub_1000BC298(v167, 0x8000000100A12330, v168, v169, v170, v171, v172, v173);
    sub_1000D1AD4();
    v174 = sub_1000BA294(&qword_100BC3C38);
    v156 = (__n128 *)sub_1000D0970(v174);
    sub_1000C01FC(v156);
    sub_1000DD324(v175, v176);
    sub_100099018();
    sub_1000986E8();
    sub_1000F4008();
    sub_100099708();
    ((void (*)(_QWORD, uint64_t))v219[1])(v207, v220);
    sub_1000B3274((uint64_t)v217, v110[1]);
    sub_1000DBD2C();
    v159 = *(uint64_t (**)(uint64_t, _QWORD))(v212 + 8);
    v160 = v101;
    goto LABEL_23;
  }
  v136 = v40;
  if (qword_100BC2450 != -1)
    swift_once(&qword_100BC2450, sub_1006F3844);
  v137 = sub_100098720();
  sub_1000AECD4(v137, (uint64_t)qword_100CAF0E8);
  v138 = (uint64_t)v203;
  v139 = ((uint64_t (*)(char *, char *, char *))v41)(v203, v217, v40);
  v140 = Logger.logObject.getter(v139);
  v142 = static os_log_type_t.error.getter(v140, v141);
  if (os_log_type_enabled(v140, v142))
  {
    v143 = (_DWORD *)sub_100098710(12);
    v220 = sub_100098710(32);
    v222[0] = v220;
    *v143 = 136446210;
    v219 = (void (**)(uint64_t, uint64_t, uint64_t))(v143 + 1);
    v144 = v201;
    v41((uint64_t)v201, (char *)v138, (uint64_t)v136);
    v145 = String.init<A>(describing:)(v144);
    v221 = sub_1000CE1C8(v145, v146, v222);
    v93 = v218;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v221, v222);
    swift_bridgeObjectRelease();
    sub_1000CDDF4(v138);
    sub_1000BE984((void *)&_mh_execute_header, v140, v142, "Unexpected sunEvent type:%{public}s");
    v147 = v220;
    swift_arrayDestroy(v220, 1);
    sub_1000986F0(v147);
    sub_1000986F0((uint64_t)v143);
  }
  else
  {
    sub_1000CDDF4(v138);
  }

  sub_1000C0B80();
  sub_1000CDDF4((uint64_t)v217);
  sub_1000DBD2C();
  sub_1000C588C(v216, *(uint64_t (**)(uint64_t, _QWORD))(v212 + 8));
  v161 = sub_1000B4928();
  sub_100098974(v93, v162, v163, v161);
  return sub_1000CDDF4(v5);
}

void sub_100737A4C()
{
  void (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char v56;
  id v57;
  unsigned __int16 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __n128 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  uint64_t v94;
  os_log_type_t v95;
  _DWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  objc_class *v101;
  NSBundle v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __n128 *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(uint64_t, uint64_t);
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;

  sub_1000C5FBC();
  v3 = v2;
  v131 = v5;
  v132 = v4;
  v128 = v6;
  v137 = v7;
  v8 = type metadata accessor for String.LocalizationValue(0);
  v124 = *(_QWORD *)(v8 - 8);
  v125 = v8;
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_100088FDC();
  v123 = v10;
  v129 = sub_10009C050();
  v140 = *(_QWORD *)(v129 - 8);
  sub_10009D98C();
  __chkstk_darwin(v11);
  v120 = (uint64_t)&v120 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v13);
  v122 = (uint64_t)&v120 - v14;
  sub_10009D2A4();
  __chkstk_darwin(v15);
  sub_1000860D0();
  v138 = v16;
  sub_10009D2A4();
  __chkstk_darwin(v17);
  v130 = (char *)&v120 - v18;
  type metadata accessor for AttributeContainer(0);
  sub_10009D98C();
  __chkstk_darwin(v19);
  sub_100088FDC();
  v127 = v20;
  v21 = sub_10009BDC4();
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  sub_100098728();
  v25 = v24 - v23;
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_10009D98C();
  __chkstk_darwin(v26);
  sub_100098728();
  v29 = v28 - v27;
  v30 = sub_100098778();
  v31 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v121 = (uint64_t)&v120 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v33);
  v126 = (uint64_t)&v120 - v34;
  sub_10009D2A4();
  __chkstk_darwin(v35);
  v37 = (char *)&v120 - v36;
  v38 = type metadata accessor for SunriseSunsetEventCalculator(0);
  v134 = *(_QWORD *)(v38 - 8);
  v135 = v38;
  sub_10009D98C();
  __chkstk_darwin(v39);
  sub_1000BCED8();
  v136 = sub_1000D95F0();
  v133 = *(_QWORD *)(v136 - 8);
  sub_10009D98C();
  __chkstk_darwin(v40);
  sub_1000E78C0();
  v41 = static Calendar.currentCalendar(with:)(v3);
  v139 = v0;
  v42 = SunriseSunsetEventCalculator.init()(v41);
  SunEvents.civilDusk.getter(v42);
  if (_s7Weather24LocationCompositionStateOwet_0(v29, 1, v30) == 1)
  {
    v43 = v31;
    v131 = v1;
    v44 = sub_1001C8EF4(v29);
    v45 = v132;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v37, v29, v30);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 104))(v25, enum case for Calendar.Component.minute(_:), v21);
    v46 = v132;
    v47 = Calendar.compare(_:to:toGranularity:)(v132, v37, v25);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v25, v21);
    if (!v47)
    {
      v101 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      sub_1000989C4();
      v102.super.isa = v101;
      sub_1000BA340(0x67694C207473614CLL, 0xEA00000000007468, 0, 0, v102, v103, v104, v105);
      sub_1000BD3AC();
      v106 = v127;
      AttributeContainer.init()(v107);
      v108 = v137;
      AttributedString.init(_:attributes:)(v25, v30, v106);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v37, v30);
      sub_1000BDB64();
      sub_1000C588C(v1, *(uint64_t (**)(uint64_t, _QWORD))(v133 + 8));
      v81 = sub_1000B4928();
      v82 = v108;
      goto LABEL_20;
    }
    v45 = v46;
    v131 = v1;
    v43 = v31;
    v44 = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v37, v30);
  }
  v48 = Location.coordinate.getter(v44);
  v49 = (uint64_t)v130;
  v50 = v139;
  SunriseSunsetEventCalculator.nextEvent(coordinate:date:timeZone:)(v45, v3, v48, v51);
  v52 = v140;
  v53 = v138;
  v54 = v129;
  sub_1000CE644(v138, v49);
  v55 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 88))(v53, v54);
  if (v55 == enum case for SunriseSunsetEvent.sunrise(_:))
  {
    sub_1000B3274(v53, *(uint64_t (**)(uint64_t, uint64_t))(v52 + 96));
    sub_1000ED498(v126, v53, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 32));
    Date.timeIntervalSince(_:)(v45);
    sub_1000EFA7C();
    if (!v56)
    {
      sub_1000C2314();
      String.LocalizationValue.init(stringLiteral:)(v83, v84);
      v85 = sub_1000BA294(&qword_100BC6A10);
      v86 = (__n128 *)sub_100098740(v85, 48);
      v87 = sub_1000C6C8C(v86, (__n128)xmmword_10097CA50);
      sub_1000D0324(v87, v88);
      sub_1000986E8();
      sub_1000F4538();
      sub_1000C1BDC();
      v89 = *(uint64_t (**)(uint64_t, uint64_t))(v140 + 8);
LABEL_19:
      sub_1000B3274(v49, v89);
      sub_1000BDDB8();
      sub_1000C588C(v131, *(uint64_t (**)(uint64_t, _QWORD))(v133 + 8));
      v81 = sub_1000B4928();
      v82 = v30;
      goto LABEL_20;
    }
    v57 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v58 = sub_1000BE788();
    v65 = sub_1000BC298(v58 | 0x657369726E0000, 0xE700000000000000, v59, v60, v61, v62, v63, v64);
LABEL_13:
    v74 = v65;
    v75 = v66;

    v76 = v127;
    AttributeContainer.init()(v77);
    v78 = v137;
    AttributedString.init(_:attributes:)(v74, v75, v76);
    sub_1000C1BDC();
    sub_1000B3274(v49, *(uint64_t (**)(uint64_t, uint64_t))(v140 + 8));
    sub_1000BDDB8();
    sub_1000C588C(v131, *(uint64_t (**)(uint64_t, _QWORD))(v133 + 8));
    v81 = sub_1000B4928();
    v82 = v78;
LABEL_20:
    sub_100098974(v82, v79, v80, v81);
    goto LABEL_23;
  }
  if (v55 == enum case for SunriseSunsetEvent.sunset(_:))
  {
    sub_1000B3274(v53, *(uint64_t (**)(uint64_t, uint64_t))(v52 + 96));
    sub_1000ED498(v121, v53, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 32));
    Date.timeIntervalSince(_:)(v45);
    sub_1000EFA7C();
    if (!v56)
    {
      v109 = v52;
      sub_1000C2314();
      String.LocalizationValue.init(stringLiteral:)(0xD00000000000002DLL, v110);
      v111 = sub_1000BA294(&qword_100BC6A10);
      v112 = (__n128 *)sub_100098740(v111, 48);
      v113 = sub_1000C6C8C(v112, (__n128)xmmword_10097CA50);
      sub_1000D0324(v113, v114);
      sub_1000986E8();
      sub_1000F4538();
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v53, v30);
      v89 = *(uint64_t (**)(uint64_t, uint64_t))(v109 + 8);
      goto LABEL_19;
    }
    v57 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v67 = sub_1000BE788();
    v65 = sub_1000BC298(v67 & 0xFFFF00000000FFFFLL | 0x7465736E0000, 0xE600000000000000, v68, v69, v70, v71, v72, v73);
    goto LABEL_13;
  }
  if (qword_100BC2450 != -1)
    swift_once(&qword_100BC2450, sub_1006F3844);
  v90 = sub_100098720();
  sub_1000AECD4(v90, (uint64_t)qword_100CAF0E8);
  v91 = v122;
  v92 = sub_1000CE644(v122, v49);
  v93 = Logger.logObject.getter(v92);
  v95 = static os_log_type_t.error.getter(v93, v94);
  if (os_log_type_enabled(v93, v95))
  {
    v96 = (_DWORD *)sub_100098710(12);
    v97 = sub_100098710(32);
    v142 = v97;
    *v96 = 136446210;
    v50 = (void (*)(uint64_t, uint64_t))(v96 + 3);
    v98 = v120;
    sub_1000CE644(v120, v91);
    v99 = String.init<A>(describing:)(v98);
    v141 = sub_1000891C0(v99, v100);
    v49 = (uint64_t)v130;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142);
    swift_bridgeObjectRelease();
    sub_1000CFA08();
    sub_1000BE984((void *)&_mh_execute_header, v93, v95, "Unexpected sunEvent type:%{public}s");
    swift_arrayDestroy(v97, 1);
    sub_1000986F0(v97);
    sub_1000986F0((uint64_t)v96);
  }
  else
  {
    sub_1000CFA08();
  }

  v115 = v137;
  v116 = v138;
  sub_1000C0B80();
  v50(v49, v54);
  sub_1000BDB64();
  sub_1000C588C(v131, *(uint64_t (**)(uint64_t, _QWORD))(v133 + 8));
  v117 = sub_1000B4928();
  sub_100098974(v115, v118, v119, v117);
  v50(v116, v54);
LABEL_23:
  sub_10009990C();
}

uint64_t sub_10073827C(double a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_1004DB80C(a1);
  if (!v3)
  {
    if (qword_100BC2450 != -1)
      swift_once(&qword_100BC2450, sub_1006F3844);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_1000AECD4(v4, (uint64_t)qword_100CAF0E8);
    v6 = Logger.logObject.getter(v5);
    v8 = static os_log_type_t.error.getter(v6, v7);
    if (os_log_type_enabled(v6, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v15 = v10;
      *(_DWORD *)v9 = 136446210;
      v11 = Double.description.getter(a1);
      v13 = v12;
      v14 = sub_1000CE1C8(v11, v12, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15);
      swift_bridgeObjectRelease(v13);
      _os_log_impl((void *)&_mh_execute_header, v6, v8, "Failed to generate duration string for %{public}s ", v9, 0xCu);
      swift_arrayDestroy(v10, 1);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }

    return 0;
  }
  return result;
}

void sub_100738404()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 *v27;
  unint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  sub_1000C5FBC();
  v34 = v3;
  v35 = v4;
  v32 = v5;
  v33 = v6;
  v7 = type metadata accessor for String.LocalizationValue(0);
  v30 = *(_QWORD *)(v7 - 8);
  v31 = v7;
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_100088FDC();
  v9 = sub_1000D95F0();
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = sub_1000C4668();
  v12 = type metadata accessor for TimeZone(v11);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_100098728();
  v16 = v15 - v14;
  sub_1000E741C();
  sub_1000ED258();
  __chkstk_darwin(v17);
  sub_100098728();
  v20 = v19 - v18;
  v21 = sub_100098778();
  __chkstk_darwin(v21);
  sub_1000BCED8();
  (*(void (**)(uint64_t, uint64_t))(v22 + 16))(v0, v32);
  sub_1000992E4(v20, v33, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v16, v34, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v2, v35, v9);
  sub_1007385F8();
  if (v23 == -1)
  {
    sub_1000C0B80();
  }
  else
  {
    if ((v23 & 1) != 0)
    {
      sub_10011DD58();
      v24 = 0xD000000000000035;
    }
    else
    {
      sub_10011DD58();
    }
    String.LocalizationValue.init(stringLiteral:)(v24, v25);
    v26 = sub_1000BA294(&qword_100BC6A10);
    v27 = (__n128 *)sub_100098740(v26, 48);
    v27[2].n128_u64[0] = sub_1000C6C8C(v27, (__n128)xmmword_10097CA50);
    v27[2].n128_u64[1] = v28;
    static AttributedString.makeLowercaseSmallCapsStyledString(localized:bundle:_:)(v0, 0, v27);
    v29 = sub_1000986E8();
    (*(void (**)(uint64_t, uint64_t, double))(v30 + 8))(v0, v31, v29);
  }
  sub_10009990C();
}

uint64_t sub_1007385F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  uint64_t v88;
  os_log_type_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  double v101;
  void (*v102)(uint64_t, uint64_t, double);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  double v123;
  uint64_t v124;
  void (*v125)(uint64_t, uint64_t);
  void (*v126)(uint64_t, uint64_t);
  uint64_t v127;
  uint64_t result;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  double v133;
  uint64_t v134;
  double v135;
  double v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;

  sub_1000C5FBC();
  v163 = v3;
  v164 = v5;
  v154 = v6;
  v158 = v7;
  v9 = v8;
  v11 = v10;
  v12 = type metadata accessor for TimeZone(0);
  v13 = *(_QWORD *)(v12 - 8);
  v159 = v12;
  v160 = v13;
  sub_10009D98C();
  __chkstk_darwin(v14);
  sub_100088FDC();
  v157 = v15;
  v16 = sub_1000D95F0();
  v155 = *(_QWORD *)(v16 - 8);
  v156 = v16;
  sub_10009D98C();
  __chkstk_darwin(v17);
  sub_100088FDC();
  v149 = v18;
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_10009D98C();
  __chkstk_darwin(v19);
  sub_1000986FC();
  v145 = v20;
  sub_10009D2A4();
  __chkstk_darwin(v21);
  sub_1000B2688();
  __chkstk_darwin(v22);
  sub_1000860D0();
  v148 = v23;
  sub_10009D2A4();
  v25 = __chkstk_darwin(v24);
  v27 = (char *)&v138 - v26;
  v28 = __chkstk_darwin(v25);
  v30 = (char *)&v138 - v29;
  __chkstk_darwin(v28);
  v32 = (char *)&v138 - v31;
  sub_100098778();
  sub_1000ED258();
  __chkstk_darwin(v33);
  sub_1000986FC();
  v152 = v34;
  sub_10009D2A4();
  __chkstk_darwin(v35);
  sub_1000860D0();
  v140 = v36;
  sub_10009D2A4();
  __chkstk_darwin(v37);
  v146 = (char *)&v138 - v38;
  sub_10009D2A4();
  __chkstk_darwin(v39);
  sub_1000860D0();
  v147 = v40;
  sub_10009D2A4();
  __chkstk_darwin(v41);
  v142 = (uint64_t)&v138 - v42;
  sub_10009D2A4();
  __chkstk_darwin(v43);
  sub_1000860D0();
  v151 = v44;
  sub_10009D2A4();
  __chkstk_darwin(v45);
  sub_1000860D0();
  v141 = v46;
  sub_10009D2A4();
  __chkstk_darwin(v47);
  v143 = (uint64_t)&v138 - v48;
  sub_10009D2A4();
  __chkstk_darwin(v49);
  v144 = (uint64_t)&v138 - v50;
  sub_10009D2A4();
  __chkstk_darwin(v51);
  sub_1000860D0();
  v153 = v52;
  sub_10009D2A4();
  v54 = __chkstk_darwin(v53);
  v56 = (char *)&v138 - v55;
  v57 = __chkstk_darwin(v54);
  v59 = (char *)&v138 - v58;
  SunEvents.sunrise.getter(v57);
  sub_1000B489C((uint64_t)v32);
  if (v64)
  {
    v60 = sub_1001C8EF4((uint64_t)v32);
    v61 = v9;
  }
  else
  {
    v150 = v11;
    v62 = *(uint64_t (**)(char *, char *, uint64_t))(v1 + 32);
    v63 = v62(v59, v32, v0);
    SunEvents.sunset.getter(v63);
    sub_1000B489C((uint64_t)v30);
    if (v64)
    {
      (*(void (**)(char *, uint64_t))(v1 + 8))(v59, v0);
      v60 = sub_1001C8EF4((uint64_t)v30);
    }
    else
    {
      v62(v56, v30, v0);
      v65 = static Date.> infix(_:_:)(v56, v59);
      if ((v65 & 1) != 0)
      {
        v66 = v150;
        if ((static Date.> infix(_:_:)(v150, v59) & 1) != 0 && (static Date.< infix(_:_:)(v66, v56) & 1) != 0)
        {
          v4 = Date.timeIntervalSince(_:)(v66);
          sub_1000C588C(v154, *(uint64_t (**)(uint64_t, _QWORD))(v155 + 8));
          sub_100099CA4(v160);
          v67 = sub_1000E741C();
          sub_1000B2568(v67);
          sub_10009C1DC(v66);
          sub_10009C1DC((uint64_t)v56);
          v68 = (uint64_t)v59;
        }
        else
        {
          v4 = Date.timeIntervalSince(_:)(v59);
          sub_1000C588C(v154, *(uint64_t (**)(uint64_t, _QWORD))(v155 + 8));
          sub_100099CA4(v160);
          v130 = sub_1000E741C();
          sub_1000B2568(v130);
          sub_10009C1DC(v66);
          sub_10009C1DC((uint64_t)v56);
          v68 = (uint64_t)v59;
        }
        goto LABEL_42;
      }
      sub_10009C1DC((uint64_t)v56);
      v60 = sub_10009C1DC((uint64_t)v59);
    }
    v11 = v150;
    v61 = v9;
  }
  v69 = v1;
  SunEvents.sunrise.getter(v60);
  sub_1000B489C((uint64_t)v27);
  v70 = v152;
  v71 = v153;
  if (v64)
  {
    v72 = sub_1001C8EF4((uint64_t)v27);
    v74 = v158;
    v73 = v159;
    v75 = v157;
  }
  else
  {
    v76 = sub_1000B31E0(v153);
    v77 = v148;
    SunEvents.sunset.getter(v76);
    sub_1000B489C(v77);
    if (v78)
    {
      (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v71, v0);
      v72 = sub_1001C8EF4(v77);
      v74 = v158;
      v75 = v157;
      v69 = v1;
      v73 = v159;
    }
    else
    {
      v150 = v11;
      v139 = v1;
      v79 = v144;
      sub_1000B31E0(v144);
      v80 = sub_100051B90((unint64_t *)&qword_100BCB0E0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v81 = dispatch thunk of static Comparable.< infix(_:_:)(v71, v79, v0, v80);
      v75 = v157;
      if ((v81 & 1) == 0)
      {
        sub_1000C2314();
        v116 = v158;
        v117 = Date.startOfDay(timeZone:)(v158);
        v118 = v149;
        static Calendar.current.getter(v117);
        v119 = v141;
        Date.wc_addDays(_:calendar:)(1, v118);
        (*(void (**)(uint64_t, uint64_t))(v155 + 8))(v118, v156);
        v120 = v150;
        v121 = static Date.> infix(_:_:)(v150, v71);
        v122 = v159;
        if ((v121 & 1) != 0)
        {
          sub_1000AE9CC();
          v4 = v123;
          sub_100109A98();
          (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v116, v122);
          v124 = sub_1000E741C();
          sub_1000BA9C0(v124);
          sub_1000BD054();
          sub_10009C1DC(v120);
          sub_10009C1DC(v119);
          sub_10009C1DC(v143);
          sub_10009C1DC(v144);
          v68 = v71;
        }
        else
        {
          v131 = v144;
          if ((static Date.< infix(_:_:)(v120, v144) & 1) == 0)
          {
            v133 = Date.timeIntervalSince(_:)(v143);
            v134 = v141;
            sub_1000AE9CC();
            v136 = v135;
            sub_100109A98();
            sub_1000DB39C();
            v137 = sub_1000E741C();
            sub_1000BA9C0(v137);
            sub_1000BD054();
            sub_10009C1DC(v150);
            sub_10009C1DC(v134);
            sub_10009C1DC(v143);
            sub_10009C1DC(v131);
            sub_10009C1DC(v153);
            *(double *)&result = v133 + v136;
            return result;
          }
          v4 = Date.timeIntervalSince(_:)(v120);
          sub_100109A98();
          sub_1000DB39C();
          v132 = sub_1000E741C();
          sub_1000BA9C0(v132);
          sub_1000BD054();
          sub_10009C1DC(v120);
          sub_10009C1DC(v141);
          sub_10009C1DC(v143);
          sub_10009C1DC(v131);
          v68 = v153;
        }
LABEL_42:
        sub_10009C1DC(v68);
        *(double *)&result = v4;
        return result;
      }
      v69 = v139;
      sub_10009C1DC(v79);
      v72 = sub_10009C1DC(v71);
      v74 = v158;
      v73 = v159;
      v11 = v150;
    }
  }
  SunEvents.sunrise.getter(v72);
  sub_1000B489C(v2);
  if (!v64)
  {
    v153 = v61;
    v104 = v151;
    sub_1000992E4(v151, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v69 + 32));
    v105 = v147;
    v106 = Date.startOfDay(timeZone:)(v74);
    v107 = v149;
    static Calendar.current.getter(v106);
    v108 = v11;
    v109 = (uint64_t)v146;
    Date.wc_addDays(_:calendar:)(1, v107);
    (*(void (**)(uint64_t, uint64_t))(v155 + 8))(v107, v156);
    v110 = static Date.< infix(_:_:)(v108, v104);
    if ((v110 & 1) != 0)
      Date.timeIntervalSince(_:)(v104);
    else
      Date.timeIntervalSince(_:)(v108);
    sub_1000DAD8C();
    sub_1000D083C();
    v111 = sub_1000E741C();
    sub_1000C3FB0(v111);
    sub_10009C1DC(v108);
    sub_10009C1DC(v109);
    sub_10009C1DC(v105);
    v68 = v151;
    goto LABEL_42;
  }
  v82 = sub_1001C8EF4(v2);
  v83 = v145;
  SunEvents.sunset.getter(v82);
  sub_1000B489C(v83);
  if (!v64)
  {
    v153 = v61;
    v112 = v142;
    sub_1000992E4(v142, v83, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v69 + 32));
    v113 = static Date.> infix(_:_:)(v11, v112);
    if ((v113 & 1) != 0)
    {
      v114 = v140;
      Date.startOfDay(timeZone:)(v74);
      Date.timeIntervalSince(_:)(v114);
      sub_1000C1FF4();
      sub_1000D0B54();
      v115 = sub_1000E741C();
      sub_1000C3FB0(v115);
      sub_10009C1DC(v11);
      sub_10009C1DC(v114);
    }
    else
    {
      sub_1000AE9CC();
      sub_1000C1FF4();
      sub_1000D0B54();
      v129 = sub_1000E741C();
      sub_1000C3FB0(v129);
      sub_10009C1DC(v11);
    }
    v68 = v112;
    goto LABEL_42;
  }
  sub_1001C8EF4(v83);
  v84 = v160;
  if (qword_100BC2450 != -1)
    swift_once(&qword_100BC2450, sub_1006F3844);
  v85 = sub_100098720();
  sub_1000AECD4(v85, (uint64_t)qword_100CAF0E8);
  sub_1000992E4(v70, v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v69 + 16));
  v86 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 16))(v75, v74, v73);
  v87 = Logger.logObject.getter(v86);
  v89 = static os_log_type_t.error.getter(v87, v88);
  v90 = v89;
  if (os_log_type_enabled(v87, v89))
  {
    v91 = sub_100098710(22);
    LODWORD(v151) = v90;
    v92 = v91;
    v93 = sub_100098710(64);
    v153 = v61;
    v94 = v93;
    v162 = v93;
    *(_DWORD *)v92 = 136315394;
    sub_100051B90((unint64_t *)&qword_100BC52F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v95 = dispatch thunk of CustomStringConvertible.description.getter(v0);
    v161 = sub_1000891C0(v95, v96);
    v150 = v11;
    sub_1000BEFD4();
    sub_1000986C4();
    sub_1000B3174(v70);
    *(_WORD *)(v92 + 12) = 2080;
    sub_100051B90(&qword_100BF1168, (uint64_t (*)(uint64_t))&type metadata accessor for TimeZone, (uint64_t)&protocol conformance descriptor for TimeZone);
    v97 = v157;
    v98 = v159;
    v99 = dispatch thunk of CustomStringConvertible.description.getter(v159);
    v161 = sub_1000891C0(v99, v100);
    sub_1000BEFD4();
    v101 = sub_1000986C4();
    v102 = *(void (**)(uint64_t, uint64_t, double))(v160 + 8);
    v102(v97, v98, v101);
    _os_log_impl((void *)&_mh_execute_header, v87, (os_log_type_t)v151, "Unexpected condition in makeDaylightString with date:%s, timeZone:%s", (uint8_t *)v92, 0x16u);
    swift_arrayDestroy(v94, 2);
    sub_1000986F0(v94);
    sub_1000986F0(v92);

    sub_1000C588C(v154, *(uint64_t (**)(uint64_t, _QWORD))(v155 + 8));
    ((void (*)(uint64_t, uint64_t))v102)(v158, v98);
    v103 = sub_1000E741C();
    sub_1000C3FB0(v103);
    sub_1000B3174(v150);
  }
  else
  {

    v125 = *(void (**)(uint64_t, uint64_t))(v84 + 8);
    v125(v157, v73);
    v126 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
    v126(v70, v0);
    sub_1000C588C(v154, *(uint64_t (**)(uint64_t, _QWORD))(v155 + 8));
    v125(v74, v73);
    v127 = sub_1000E741C();
    sub_1000BA9C0(v127);
    v126(v11, v0);
  }
  *(double *)&result = 0.0;
  return result;
}

ValueMetadata *type metadata accessor for DaylightStringBuilder()
{
  return &type metadata for DaylightStringBuilder;
}

unint64_t sub_100739120(uint64_t a1)
{
  unint64_t result;

  result = sub_100739144();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100739144()
{
  unint64_t result;

  result = qword_100C02BF8;
  if (!qword_100C02BF8)
  {
    result = swift_getWitnessTable(&unk_1009C5338, &type metadata for DaylightStringBuilder);
    atomic_store(result, (unint64_t *)&qword_100C02BF8);
  }
  return result;
}

uint64_t sub_100739180(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + 16);
    swift_retain();
    swift_bridgeObjectRetain(a2);
    sub_10068D0DC(v7);
    swift_release(v5);
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_1007391FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[8];
  char v31[24];

  v6 = type metadata accessor for Location.Identifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v30[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a1 += 16;
  swift_beginAccess(a1, v31, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v11 = result;
    if (qword_100BC22A0 != -1)
      swift_once(&qword_100BC22A0, sub_1005C6284);
    v12 = qword_100CAEE20;
    v13 = type metadata accessor for LocationViewerStoreObserver(0);
    sub_100086DA4(&qword_100C02CC0, type metadata accessor for LocationViewerStoreObserver, (uint64_t)&unk_1009C53EC);
    Configurable.setting<A>(_:)(v12, v13, v14);
    LODWORD(v12) = v30[7];
    v15 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
    if ((_DWORD)v12 == 1)
    {
      v16 = Location.Identifier.kind.getter(v15);
      v17 = Location.Identifier.Kind.rawValue.getter(v16 & 1);
      v19 = v18;
      v20 = Location.Identifier.Kind.rawValue.getter(1);
      if (v17 == v20 && v19 == v21)
      {
        swift_bridgeObjectRelease_n(v19, 2);
        (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
LABEL_14:
        v29 = *(_QWORD *)(v11 + 16);
        swift_retain();
        sub_10068D3F4(0);
        swift_release(v29);
        v28 = v11;
        return swift_release(v28);
      }
      v23 = v21;
      v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, v20, v21, 0);
      swift_bridgeObjectRelease(v19);
      v25 = swift_bridgeObjectRelease(v23);
      (*(void (**)(_BYTE *, uint64_t, __n128))(v7 + 8))(v9, v6, v25);
      if ((v24 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
    }
    v26 = *(_QWORD *)(v11 + 16);
    swift_retain();
    swift_bridgeObjectRetain(a3);
    sub_10068D3F4(v27);
    swift_release(v11);
    v28 = v26;
    return swift_release(v28);
  }
  return result;
}

uint64_t sub_10073941C()
{
  uint64_t v0;

  sub_10009C0B4();
  sub_100021A14(v0 + OBJC_IVAR____TtC7Weather27LocationViewerStoreObserver_lastViewedLocationIdentifier, &qword_100BCD680);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100739458()
{
  return type metadata accessor for LocationViewerStoreObserver(0);
}

uint64_t sub_100739460()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100739484()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_100098AA0();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  sub_10009C0B4();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10073950C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(sub_100098AA0() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1007391FC(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10073954C()
{
  uint64_t v0;

  sub_10009C0B4();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100739574()
{
  uint64_t v0;

  return sub_100739180(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

_QWORD *sub_100739584()
{
  _QWORD *v0;

  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 4);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 9);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 14);
  swift_release();
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 23);
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 29);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 34);
  return v0;
}

uint64_t sub_1007395F4()
{
  uint64_t v0;

  sub_100739584();
  return swift_deallocClassInstance(v0, 312, 7);
}

uint64_t type metadata accessor for ToolbarSearchInteractor()
{
  return objc_opt_self(_TtC7Weather23ToolbarSearchInteractor);
}

void sub_100739634()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD v5[2];
  uint64_t v6;

  sub_1000DD33C();
  sub_1000DDEEC();
  __chkstk_darwin(v2);
  sub_1000BC5E8();
  *v0 = v1;
  v3 = type metadata accessor for SearchViewAction(0);
  swift_storeEnumTagMultiPayload(v0, v3, 1);
  v4 = type metadata accessor for ViewAction(0);
  sub_1000BB144(v4);
  sub_1000C4E4C();
  v6 = 0;
  memset(v5, 0, sizeof(v5));
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1000BB514();
  sub_100159C94((uint64_t)v5);
  sub_1000A0AA4((uint64_t)v0);
  swift_release();
  sub_10004A2A0();
}

void sub_1007396D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD v5[2];
  uint64_t v6;

  sub_1000DD33C();
  sub_1000DDEEC();
  __chkstk_darwin(v2);
  sub_1000BC5E8();
  swift_retain();
  swift_errorRetain(v1);
  CodableError.init(_:)(v1);
  v3 = type metadata accessor for SearchViewAction(0);
  swift_storeEnumTagMultiPayload(v0, v3, 0);
  v4 = type metadata accessor for ViewAction(0);
  sub_1000BB144(v4);
  sub_1000C4E4C();
  v6 = 0;
  memset(v5, 0, sizeof(v5));
  sub_1000BB514();
  sub_100159C94((uint64_t)v5);
  sub_1000A0AA4(v0);
  swift_release();
  sub_10004A2A0();
}

void sub_100739784(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (a2 == 1 && a4 == 1)
    sub_1001EE814(a1, a3);
}

uint64_t sub_1007397E0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char v7;
  char v8;
  int v9;
  uint64_t v11[2];
  uint64_t v12[2];
  _OWORD v13[3];
  _OWORD v14[3];
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;

  v4 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v4;
  v14[2] = *(_OWORD *)(a1 + 32);
  v5 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v5;
  v13[2] = *(_OWORD *)(a2 + 32);
  if ((sub_10009A7F8((uint64_t)v14, (id *)v13) & 1) == 0)
    goto LABEL_6;
  sub_10073A66C((uint64_t *)(a1 + 48), (uint64_t)v12);
  sub_10073A66C((uint64_t *)(a2 + 48), (uint64_t)v11);
  sub_10073A66C(v12, (uint64_t)&v15);
  if (v16)
  {
    if (v16 == 1)
    {
      v6 = v15;
      sub_10073A66C(v11, (uint64_t)&v17);
      if (v18 != 1 || (sub_1001EE814(v6, v17), (v7 & 1) == 0))
      {
LABEL_6:
        v8 = 0;
        return v8 & 1;
      }
LABEL_12:
      v8 = ((*(_BYTE *)(a1 + 57) & 1) == 0) ^ *(_BYTE *)(a2 + 57);
      return v8 & 1;
    }
    sub_10073A66C(v11, (uint64_t)&v17);
    v8 = 0;
    if (v18 == 2 && !v17)
      goto LABEL_12;
  }
  else
  {
    v9 = v15;
    sub_10073A66C(v11, (uint64_t)&v17);
    v8 = 0;
    if (!v18 && v9 == v17)
      goto LABEL_12;
  }
  return v8 & 1;
}

void sub_100739910()
{
  unsigned __int8 *v0;

  _s7Weather22LocationSessionTriggerO9hashValueSivg_0(*v0);
}

void sub_100739918(uint64_t a1, uint64_t a2)
{
  sub_100739784(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

uint64_t sub_100739930(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  _OWORD v6[2];
  _OWORD v7[2];
  _OWORD v8[2];

  v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  v6[0] = a1[2];
  *(_OWORD *)((char *)v6 + 10) = *(_OWORD *)((char *)a1 + 42);
  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v8[0] = a2[2];
  *(_OWORD *)((char *)v8 + 10) = *(_OWORD *)((char *)a2 + 42);
  return sub_1007397E0((uint64_t)v5, (uint64_t)v7) & 1;
}

void sub_100739988(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  uint64_t v24;
  _WORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _WORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int EnumCaseMultiPayload;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  _WORD *v74;
  id v75;
  char *v76;
  __int16 v77;
  __int16 v78;
  char *v79;
  uint64_t v80;
  os_log_type_t v81;
  uint64_t v82;
  NSObject *v83;
  _WORD *v84;
  id v85;
  char *v86;
  uint64_t v87;
  _WORD *v88;
  _WORD *v89;
  _WORD *v90;
  uint64_t (*v91)(uint64_t);
  _WORD *v92;
  _WORD *v93;
  uint64_t (*v94)(uint64_t);
  uint64_t v95;
  uint64_t v96;
  _WORD *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;

  v105 = a2;
  v107 = a1;
  v2 = type metadata accessor for Logger(0);
  v99 = *(_QWORD *)(v2 - 8);
  v100 = v2;
  __chkstk_darwin(v2);
  v98 = (char *)&v87 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10009876C();
  v96 = type metadata accessor for ModalViewState.LocationDetailModal(v4);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_1000986FC();
  v91 = (uint64_t (*)(uint64_t))v6;
  sub_10009D2A4();
  __chkstk_darwin(v7);
  v94 = (uint64_t (*)(uint64_t))((char *)&v87 - v8);
  sub_10009D2A4();
  __chkstk_darwin(v9);
  sub_100079F7C();
  v95 = v10;
  v11 = sub_10009876C();
  type metadata accessor for AveragesDetailViewState(v11);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_1000986FC();
  v88 = v13;
  sub_10009D2A4();
  __chkstk_darwin(v14);
  sub_100079F7C();
  v90 = v15;
  v16 = sub_10009876C();
  v104 = type metadata accessor for LocationPreviewModalViewState(v16);
  sub_1000B42B0();
  __chkstk_darwin(v17);
  sub_1000986FC();
  v93 = (_WORD *)v18;
  sub_10009D2A4();
  __chkstk_darwin(v19);
  sub_100079F7C();
  v103 = v20;
  v21 = sub_10009876C();
  type metadata accessor for ConditionDetailViewState(v21);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  sub_1000986FC();
  v89 = v23;
  sub_10009D2A4();
  __chkstk_darwin(v24);
  sub_100079F7C();
  v92 = v25;
  sub_1000BA294(&qword_100BC5F58);
  sub_1000B42B0();
  __chkstk_darwin(v26);
  sub_1000986FC();
  v97 = (_WORD *)v27;
  sub_10009D2A4();
  __chkstk_darwin(v28);
  v30 = (uint64_t (*)(uint64_t))((char *)&v87 - v29);
  type metadata accessor for ModalViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v31);
  sub_1000986FC();
  v101 = v32;
  sub_10009D2A4();
  v34 = __chkstk_darwin(v33);
  v36 = (char *)&v87 - v35;
  __chkstk_darwin(v34);
  v38 = (_WORD *)((char *)&v87 - v37);
  v39 = type metadata accessor for LocationPreviewViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v40);
  sub_1000986FC();
  v102 = (char *)v41;
  sub_10009D2A4();
  v43 = __chkstk_darwin(v42);
  v45 = ((char *)&v87 - v44);
  __chkstk_darwin(v43);
  v47 = (uint64_t (*)(uint64_t))((char *)&v87 - v46);
  sub_1000BA294(&qword_100C02E48);
  sub_1000B42B0();
  v49 = __chkstk_darwin(v48);
  v51 = (char *)&v87 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v49);
  v53 = (char *)&v87 - v52;
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)&v87 - v52, 1, 1, v39);
  sub_100021A14((uint64_t)v53, &qword_100C02E48);
  v54 = &v107[OBJC_IVAR____TtCV7Weather9MainState8_Storage_modalView];
  sub_100080C0C((uint64_t)&v107[OBJC_IVAR____TtCV7Weather9MainState8_Storage_modalView], (uint64_t)v38, type metadata accessor for ModalViewState);
  v55 = sub_1000E7434((uint64_t)v38);
  v106 = v53;
  if (v55)
  {
    v47 = type metadata accessor for ModalViewState;
    sub_1000215BC((uint64_t)v38, type metadata accessor for ModalViewState);
    sub_100080C0C((uint64_t)v54, (uint64_t)v36, type metadata accessor for ModalViewState);
    if (sub_1000E7434((uint64_t)v36) != 4)
    {
      sub_1000215BC((uint64_t)v36, type metadata accessor for ModalViewState);
      goto LABEL_7;
    }
    sub_1002E3E2C((uint64_t)v36, (uint64_t)v30);
    v38 = v97;
    sub_1002E3E2C((uint64_t)v30, (uint64_t)v97);
    v56 = type metadata accessor for ModalViewState.MapViewModal(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v38, 1, v56) == 1)
    {
      sub_100021A14((uint64_t)v38, &qword_100BC5F58);
LABEL_7:
      v59 = 1;
      v53 = v106;
      goto LABEL_10;
    }
    v30 = type metadata accessor for LocationPreviewViewState;
    sub_10007802C((uint64_t)v38, (uint64_t)v45, type metadata accessor for LocationPreviewViewState);
    v57 = (uint64_t)v45;
    v53 = v106;
    v58 = (uint64_t)v106;
  }
  else
  {
    v45 = type metadata accessor for LocationPreviewViewState;
    sub_1000C0CEC((uint64_t)v38, (uint64_t)v47);
    v57 = (uint64_t)v47;
    v58 = (uint64_t)v53;
  }
  sub_10007802C(v57, v58, type metadata accessor for LocationPreviewViewState);
  v59 = 0;
LABEL_10:
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v53, v59, 1, v39);
  sub_10073A684((uint64_t)v53, (uint64_t)v51);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v51, 1, v39) != 1)
  {
    v53 = v102;
    sub_10007802C((uint64_t)v51, (uint64_t)v102, type metadata accessor for LocationPreviewViewState);
    v65 = (uint64_t)&v53[*(int *)(v39 + 20)];
    v66 = v103;
    sub_100080C0C(v65, v103, type metadata accessor for LocationPreviewModalViewState);
    v67 = v104;
    if (swift_getEnumCaseMultiPayload(v66, v104) == 1)
    {
      v45 = type metadata accessor for ConditionDetailViewState;
      v68 = v66;
      v38 = v92;
      sub_1000C3FEC(v68);
      sub_1000D98C0();
      sub_1000C2FEC();
      v69 = type metadata accessor for LocationPreviewViewState;
      v70 = (uint64_t)v53;
      goto LABEL_23;
    }
    v30 = type metadata accessor for LocationPreviewModalViewState;
    sub_1000215BC(v66, type metadata accessor for LocationPreviewModalViewState);
    v38 = v93;
    sub_100080C0C(v65, (uint64_t)v93, type metadata accessor for LocationPreviewModalViewState);
    sub_1000215BC((uint64_t)v53, type metadata accessor for LocationPreviewViewState);
    if (swift_getEnumCaseMultiPayload(v38, v67) != 7)
    {
      sub_1000215BC((uint64_t)v38, type metadata accessor for LocationPreviewModalViewState);
      v63 = v105;
      v64 = v107;
      goto LABEL_29;
    }
    v45 = type metadata accessor for AveragesDetailViewState;
    v71 = (uint64_t)v38;
    v38 = v90;
    sub_1000C3FEC(v71);
    sub_1000DA1C4();
    sub_1000C2FEC();
LABEL_20:
    v63 = v105;
    v64 = v107;
    goto LABEL_24;
  }
  sub_100021A14((uint64_t)v51, &qword_100C02E48);
  v60 = v101;
  sub_100080C0C((uint64_t)v54, v101, type metadata accessor for ModalViewState);
  if (sub_1000E7434(v60) != 5)
  {
    sub_1000215BC(v60, type metadata accessor for ModalViewState);
    v30 = 0;
    LOBYTE(v39) = 2;
    goto LABEL_20;
  }
  v61 = v95;
  sub_1000C0CEC(v60, v95);
  v30 = v94;
  sub_100080C0C(v61, (uint64_t)v94, type metadata accessor for ModalViewState.LocationDetailModal);
  v38 = (_WORD *)v96;
  if (!swift_getEnumCaseMultiPayload(v30, v96))
  {
    v45 = type metadata accessor for ConditionDetailViewState;
    v38 = v89;
    sub_1000C3FEC((uint64_t)v30);
    sub_1000D98C0();
    sub_1000C2FEC();
    v69 = type metadata accessor for ModalViewState.LocationDetailModal;
    v70 = v61;
LABEL_23:
    sub_1000215BC(v70, v69);
    v63 = v105;
    v64 = v107;
    if ((_BYTE)v39 != 0xFF)
      goto LABEL_24;
    goto LABEL_29;
  }
  sub_1000215BC((uint64_t)v30, type metadata accessor for ModalViewState.LocationDetailModal);
  v30 = v91;
  sub_1000C0CEC(v61, (uint64_t)v91);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v30, v38);
  v63 = v105;
  v64 = v107;
  if (EnumCaseMultiPayload == 5)
  {
    v45 = type metadata accessor for AveragesDetailViewState;
    v38 = v88;
    sub_1000C3FEC((uint64_t)v30);
    sub_1000DA1C4();
    sub_1000C2FEC();
LABEL_24:
    sub_1000DDF00(OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment);
    v72 = type metadata accessor for EnvironmentState(0);
    sub_1000CD1EC(v72);
    v73 = v45;
    v74 = v38;
    v75 = v64;
    v76 = v53;
    if ((static Settings.Features.homeAndWorkEnabled.getter(v54) & 1) != 0)
      v77 = 256;
    else
      v77 = 0;
    v78 = v77 & 0xFF00 | v39;
    goto LABEL_35;
  }
  sub_1000215BC((uint64_t)v30, type metadata accessor for ModalViewState.LocationDetailModal);
LABEL_29:
  v79 = v98;
  v80 = static Logger.locale.getter();
  v45 = Logger.logObject.getter(v80);
  v81 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v45, v81))
  {
    v38 = (_WORD *)swift_slowAlloc(2, -1);
    *v38 = 0;
    _os_log_impl((void *)&_mh_execute_header, v45, v81, "Missing representation for unit selection", (uint8_t *)v38, 2u);
    swift_slowDealloc(v38, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v99 + 8))(v79, v100);
  sub_1000DDF00(OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment);
  v82 = type metadata accessor for EnvironmentState(0);
  sub_1000CD1EC(v82);
  v83 = v45;
  v84 = v38;
  v85 = v64;
  v86 = v53;
  if ((static Settings.Features.homeAndWorkEnabled.getter(v54) & 1) != 0)
    v78 = 257;
  else
    v78 = 1;
  v30 = (uint64_t (*)(uint64_t))&_swiftEmptySetSingleton;
LABEL_35:
  sub_100021A14((uint64_t)v106, &qword_100C02E48);
  *(_QWORD *)v63 = v45;
  *(_QWORD *)(v63 + 8) = v38;
  *(_QWORD *)(v63 + 16) = v64;
  *(_QWORD *)(v63 + 24) = v53;
  *(_QWORD *)(v63 + 32) = v54;
  *(_QWORD *)(v63 + 40) = v47;
  *(_QWORD *)(v63 + 48) = v30;
  *(_WORD *)(v63 + 56) = v78;
}

uint64_t sub_10073A178(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v2 = type metadata accessor for DetailCondition(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for DetailCondition.conditions(_:))
  {
    v7 = sub_100227940((uint64_t)&off_100B59A58);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return v7;
  }
  if (v6 == enum case for DetailCondition.humidity(_:))
    return 0;
  if (v6 == enum case for DetailCondition.pressure(_:))
    return 2;
  if (v6 == enum case for DetailCondition.precipitationTotal(_:))
    return 1;
  if (v6 == enum case for DetailCondition.uvIndex(_:))
    return 0;
  if (v6 == enum case for DetailCondition.visibility(_:))
    return 0;
  if (v6 == enum case for DetailCondition.wind(_:))
    return 4;
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v2, v2);
  __break(1u);
  return result;
}

uint64_t sub_10073A2FC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + *(int *)(type metadata accessor for AveragesDetailViewState(0) + 20)))
    return 1;
  else
    return 3;
}

uint64_t type metadata accessor for UnitsConfigurationInputFactory()
{
  return objc_opt_self(_TtC7Weather30UnitsConfigurationInputFactory);
}

double sub_10073A358(uint64_t a1)
{

  return sub_10019D680(*(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
}

uint64_t sub_10073A3AC(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  char v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;

  v4 = *(void **)a2;
  v5 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(void **)(a2 + 16);
  v7 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(void **)(a2 + 32);
  v9 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_BYTE *)(a2 + 56);
  v12 = v4;
  v13 = v5;
  v14 = v6;
  v15 = v7;
  v16 = v8;
  v17 = v9;
  sub_10019D564(v10, v11);
  *(_QWORD *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

uint64_t sub_10073A444(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  v10 = *(void **)(a1 + 16);
  v11 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  v12 = v11;

  v13 = *(void **)(a1 + 24);
  v14 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v14;
  v15 = v14;

  v16 = *(void **)(a1 + 32);
  v17 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v17;
  v18 = v17;

  v19 = *(void **)(a1 + 40);
  v20 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v20;
  v21 = v20;

  v22 = *(_QWORD *)(a2 + 48);
  v23 = *(_BYTE *)(a2 + 56);
  sub_10019D564(v22, v23);
  v24 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v22;
  v25 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v23;
  sub_10019D680(v24, v25);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

uint64_t sub_10073A518(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  char v7;
  uint64_t v8;
  char v9;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  v6 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);

  v7 = *(_BYTE *)(a2 + 56);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v9 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v7;
  sub_10019D680(v8, v9);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

uint64_t sub_10073A5A8(uint64_t *a1, unsigned int a2)
{
  int v2;
  uint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 58))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10073A5FC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 58) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 58) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

void type metadata accessor for UnitsConfigurationInput()
{
  sub_100098884();
}

uint64_t sub_10073A66C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a1 + 8);
  *(_QWORD *)a2 = v2;
  return a2;
}

uint64_t sub_10073A684(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100C02E48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10073A6CC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10073A718 + 4 * byte_1009C5525[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10073A74C + 4 * byte_1009C5520[v4]))();
}

uint64_t sub_10073A74C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10073A754(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10073A75CLL);
  return result;
}

uint64_t sub_10073A768(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10073A770);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10073A774(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10073A77C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for UnitsConfigurationUnitType()
{
  sub_100098884();
}

uint64_t sub_10073A794(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_10019D564(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

double sub_10073A7D8(uint64_t a1)
{
  return sub_10019D680(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_10073A7E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_10019D564(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_10019D680(v5, v6);
  return a1;
}

uint64_t sub_10073A838(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  char v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_10019D680(v4, v5);
  return a1;
}

uint64_t sub_10073A874(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 2)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10073A8B4(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_10073A8F8(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_10073A910(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

void type metadata accessor for UnitsConfigurationInput.Representation()
{
  sub_100098884();
}

unint64_t sub_10073A938()
{
  unint64_t result;

  result = qword_100C02E50;
  if (!qword_100C02E50)
  {
    result = swift_getWitnessTable(&unk_1009C5664, &unk_100B8DCC8);
    atomic_store(result, (unint64_t *)&qword_100C02E50);
  }
  return result;
}

ValueMetadata *type metadata accessor for AppLifecycleState()
{
  return &type metadata for AppLifecycleState;
}

unint64_t sub_10073A990()
{
  unint64_t result;

  result = qword_100C02E58;
  if (!qword_100C02E58)
  {
    result = swift_getWitnessTable(&unk_1009C57FC, &type metadata for AppLifecycleState);
    atomic_store(result, (unint64_t *)&qword_100C02E58);
  }
  return result;
}

unint64_t sub_10073A9CC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 v14;

  v3 = sub_1000BA294(&qword_100C02E68);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100098728();
  v7 = v6 - v5;
  v8 = a1[3];
  v9 = a1[4];
  v10 = (unint64_t)sub_1000DB418(a1, v8);
  v11 = sub_10073B11C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AppLifecycleState.CodingKeys, &type metadata for AppLifecycleState.CodingKeys, v11, v8, v9);
  if (v1)
  {
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  }
  else
  {
    sub_10073B158();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for AppLifecycleState.CodingType, v12, v3);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
    v10 = v14;
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  }
  return v10;
}

uint64_t sub_10073AAE4(_QWORD *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char v15;
  char v16;
  char v17;

  v4 = sub_1000BA294(&qword_100C02E80);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100098728();
  v8 = v7 - v6;
  v9 = a1[3];
  v10 = a1[4];
  sub_1000DB418(a1, v9);
  v11 = sub_10073B11C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AppLifecycleState.CodingKeys, &type metadata for AppLifecycleState.CodingKeys, v11, v9, v10);
  if (a2)
  {
    if (a2 == 1)
    {
      v16 = 1;
      sub_10073B194();
      v13 = &v16;
    }
    else
    {
      v17 = 2;
      sub_10073B194();
      v13 = &v17;
    }
  }
  else
  {
    v15 = 0;
    sub_10073B194();
    v13 = &v15;
  }
  KeyedEncodingContainer.encode<A>(_:forKey:)(v13, v12, v4, &type metadata for AppLifecycleState.CodingType);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
}

BOOL sub_10073AC20(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100B5B2E0, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

BOOL sub_10073AC64(Swift::String a1)
{
  return sub_10073AC20(a1);
}

unint64_t sub_10073AC7C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100B5B318, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_10073ACC4(char a1)
{
  if (!a1)
    return 0x756F72676B636162;
  if (a1 == 1)
    return 0x756F726765726F66;
  return 0x6E6968636E75616CLL;
}

BOOL sub_10073AD20@<W0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = sub_10073AC20(*a1);
  *a2 = result;
  return result;
}

BOOL sub_10073AD50@<W0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = sub_10073AC64(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10073AD78(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10073B11C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10073ADA0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10073B11C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10073ADC8(unsigned __int8 *a1, char *a2)
{
  sub_10068B174(*a1, *a2);
}

void sub_10073ADD4()
{
  char *v0;

  sub_1004A7640(*v0);
}

double sub_10073ADDC(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_1001D8A6C(a1, *v1);
}

void sub_10073ADE4(uint64_t a1)
{
  char *v1;

  sub_1001D9E60(a1, *v1);
}

unint64_t sub_10073ADEC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10073AC7C(*a1);
  *a2 = result;
  return result;
}

void sub_10073AE18(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t v3;

  *a1 = sub_10073ACC4(*v1);
  a1[1] = v3;
  sub_10004A298();
}

uint64_t sub_10073AE3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10073B4B8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10073AE98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10073B4B8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_10073AEE4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = sub_10073A9CC(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10073AF0C(_QWORD *a1)
{
  char *v1;

  return sub_10073AAE4(a1, *v1);
}

uint64_t sub_10073AF24@<X0>(char a1@<W0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  v4 = sub_1000BA294(&qword_100C02E90);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100098728();
  v8 = v7 - v6;
  if (a1)
  {
    if (a1 != 1)
    {
      v9 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
      v11 = 0x6E6968636E75616CLL;
      v12 = 0xE900000000000067;
      goto LABEL_7;
    }
    v9 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
    v10 = 1701998438;
  }
  else
  {
    v9 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
    v10 = 1801675106;
  }
  v11 = v10 | 0x756F726700000000;
  v12 = 0xEA0000000000646ELL;
LABEL_7:
  ShortDescription.init(name:_:)(v11, v12, v9, &type metadata for AppLifecycleState);
  a2[3] = v4;
  a2[4] = sub_10073B1D0();
  v13 = sub_10005F164(a2);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v5 + 32))(v13, v8, v4);
}

uint64_t sub_10073B0AC@<X0>(_QWORD *a1@<X8>)
{
  char *v1;

  return sub_10073AF24(*v1, a1);
}

uint64_t sub_10073B0B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10073B214();
  return ShortDescribable.description.getter(a1, v2);
}

unint64_t sub_10073B0E0()
{
  unint64_t result;

  result = qword_100C02E60;
  if (!qword_100C02E60)
  {
    result = swift_getWitnessTable(&unk_1009C5754, &type metadata for AppLifecycleState);
    atomic_store(result, (unint64_t *)&qword_100C02E60);
  }
  return result;
}

unint64_t sub_10073B11C()
{
  unint64_t result;

  result = qword_100C02E70;
  if (!qword_100C02E70)
  {
    result = swift_getWitnessTable(&unk_1009C5A1C, &type metadata for AppLifecycleState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02E70);
  }
  return result;
}

unint64_t sub_10073B158()
{
  unint64_t result;

  result = qword_100C02E78;
  if (!qword_100C02E78)
  {
    result = swift_getWitnessTable(&unk_1009C59F4, &type metadata for AppLifecycleState.CodingType);
    atomic_store(result, (unint64_t *)&qword_100C02E78);
  }
  return result;
}

unint64_t sub_10073B194()
{
  unint64_t result;

  result = qword_100C02E88;
  if (!qword_100C02E88)
  {
    result = swift_getWitnessTable(&unk_1009C59CC, &type metadata for AppLifecycleState.CodingType);
    atomic_store(result, (unint64_t *)&qword_100C02E88);
  }
  return result;
}

unint64_t sub_10073B1D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C02E98;
  if (!qword_100C02E98)
  {
    v1 = sub_100075EB0(&qword_100C02E90);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100C02E98);
  }
  return result;
}

unint64_t sub_10073B214()
{
  unint64_t result;

  result = qword_100C02EA0;
  if (!qword_100C02EA0)
  {
    result = swift_getWitnessTable(&unk_1009C577C, &type metadata for AppLifecycleState);
    atomic_store(result, (unint64_t *)&qword_100C02EA0);
  }
  return result;
}

uint64_t _s7Weather17AppLifecycleStateOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10073B29C + 4 * byte_1009C5695[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10073B2D0 + 4 * byte_1009C5690[v4]))();
}

uint64_t sub_10073B2D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10073B2D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10073B2E0);
  return result;
}

uint64_t sub_10073B2EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10073B2F4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10073B2F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10073B300(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppLifecycleState.CodingType()
{
  return &type metadata for AppLifecycleState.CodingType;
}

uint64_t storeEnumTagSinglePayload for AppLifecycleState.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10073B35C + 4 * byte_1009C569A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10073B37C + 4 * byte_1009C569F[v4]))();
}

_BYTE *sub_10073B35C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10073B37C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10073B384(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10073B38C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10073B394(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10073B39C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AppLifecycleState.CodingKeys()
{
  return &type metadata for AppLifecycleState.CodingKeys;
}

unint64_t sub_10073B3BC()
{
  unint64_t result;

  result = qword_100C02EA8;
  if (!qword_100C02EA8)
  {
    result = swift_getWitnessTable(&unk_1009C5904, &type metadata for AppLifecycleState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02EA8);
  }
  return result;
}

unint64_t sub_10073B3FC()
{
  unint64_t result;

  result = qword_100C02EB0;
  if (!qword_100C02EB0)
  {
    result = swift_getWitnessTable(&unk_1009C59A4, &type metadata for AppLifecycleState.CodingType);
    atomic_store(result, (unint64_t *)&qword_100C02EB0);
  }
  return result;
}

unint64_t sub_10073B43C()
{
  unint64_t result;

  result = qword_100C02EB8;
  if (!qword_100C02EB8)
  {
    result = swift_getWitnessTable(&unk_1009C583C, &type metadata for AppLifecycleState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02EB8);
  }
  return result;
}

unint64_t sub_10073B47C()
{
  unint64_t result;

  result = qword_100C02EC0;
  if (!qword_100C02EC0)
  {
    result = swift_getWitnessTable(&unk_1009C5864, &type metadata for AppLifecycleState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C02EC0);
  }
  return result;
}

unint64_t sub_10073B4B8()
{
  unint64_t result;

  result = qword_100C02EC8;
  if (!qword_100C02EC8)
  {
    result = swift_getWitnessTable(&unk_1009C592C, &type metadata for AppLifecycleState.CodingType);
    atomic_store(result, (unint64_t *)&qword_100C02EC8);
  }
  return result;
}

void sub_10073B4F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1000986AC();
  v4 = v3;
  v16 = v5;
  v6 = sub_1000BA294(&qword_100C032E0);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100079FBC();
  v8 = sub_1000BA294(&qword_100BD78E0);
  sub_10011DBE8();
  v9 = *(_QWORD *)(v8 - 8);
  sub_10009C94C(v0, *v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16));
  sub_1000BA294(&qword_100BD78D0);
  sub_1000F4014();
  type metadata accessor for BasicChartSymbolShape(255);
  sub_100748080((uint64_t)&qword_100BD78E8);
  sub_1000DCA50();
  v10 = *(_QWORD *)(v1 - 8);
  sub_100099B30(v2, v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16));
  v12 = sub_1000BA294(&qword_100BD78B0);
  v13 = v0 + *(int *)(v6 + 64);
  v14 = v4[2];
  v15 = *(_QWORD *)(v12 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, v14, v12);
  sub_10009C94C(v16, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32));
  sub_100099B30(v16 + *(int *)(v6 + 48), v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 32));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v16 + *(int *)(v6 + 64), v13, v12);
  sub_100098640();
}

void sub_10073B624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1000986AC();
  v3 = v2;
  v13 = v4;
  v5 = (int *)sub_1000BA294(&qword_100C032D8);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100079FBC();
  v7 = sub_1000BA294(&qword_100BDCD28);
  sub_100396480();
  v14 = *(_QWORD *)(v7 - 8);
  sub_10009C94C(v0, *v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16));
  v8 = sub_1000BA294(&qword_100BDCD20);
  sub_100396544();
  sub_1000DCA50();
  v9 = *(_QWORD *)(v8 - 8);
  sub_100099B30(v1, v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16));
  sub_100396680();
  v11 = v0 + v5[16];
  sub_100037768(v3[2], v11, &qword_100BDCB80);
  sub_100747FE8((uint64_t)&qword_100BDCB90);
  v12 = v0 + v5[20];
  sub_1000CE570(v3[3], v12);
  sub_10009C94C(v13, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 32));
  sub_100099B30(v13 + v5[12], v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32));
  sub_1000787D4(v11, v13 + v5[16], &qword_100BDCB80);
  sub_1000787D4(v12, v13 + v5[20], &qword_100BDCB98);
  sub_100098640();
}

void sub_10073B770()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);

  sub_1000C6C98();
  v4 = sub_1000BA294(&qword_100C032B0);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  v6 = sub_1000BE9F0();
  type metadata accessor for PeakUpperMark(v6);
  sub_100748080((uint64_t)&unk_100BDCBB0);
  sub_10009BC20(*v0);
  v7 = sub_1000C6F7C();
  sub_100080C0C(v7, v8, v9);
  sub_1000C0208(v2, v1);
  sub_1000C0208(v3, v1 + *(int *)(v4 + 48));
  sub_10004A2A0();
}

void sub_10073B808()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t *, uint64_t);
  uint64_t v13;
  uint64_t v14;

  sub_1000986AC();
  v2 = v1;
  v13 = v3;
  v4 = (int *)sub_1000BA294(&qword_100C032B8);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100079FBC();
  v6 = sub_1000BA294(&qword_100BF23B8);
  sub_10011DBE8();
  v14 = *(_QWORD *)(v6 - 8);
  sub_10009C94C(v0, *v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16));
  v7 = sub_1000BA294(&qword_100BF2250);
  sub_1005A0BC0((uint64_t)&unk_100BF2248);
  sub_1000DCA50();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t *))(v8 + 16);
  v9(&qword_100BF2250);
  v10 = v0 + v4[16];
  ((void (*)(uint64_t, uint64_t, uint64_t))v9)(v10, v2[2], v7);
  sub_100747FE8((uint64_t)&qword_100BF22A0);
  v11 = v0 + v4[20];
  sub_1000CE570(v2[3], v11);
  sub_10009C94C(v13, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 32));
  v12 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v8 + 32);
  v12(v13 + v4[12], &qword_100BF2250, v7);
  v12(v13 + v4[16], (uint64_t *)v10, v7);
  sub_1000787D4(v11, v13 + v4[20], &qword_100BF22A8);
  sub_100098640();
}

void sub_10073B974()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_10008900C();
  v3 = v2;
  v5 = v4;
  v6 = sub_1000BA294(&qword_100C032C0);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  v8 = sub_1000BE9F0();
  type metadata accessor for PeakKnockoutMark(v8);
  sub_100748080((uint64_t)&unk_100BDCB88);
  sub_10009BC20(*v3);
  sub_1000BA294(&qword_100BD78B0);
  sub_1000F4014();
  type metadata accessor for BasicChartSymbolShape(255);
  sub_100748080((uint64_t)&qword_100BD78E8);
  v9 = v0 + *(int *)(v6 + 48);
  v10 = v3[1];
  v11 = *(_QWORD *)(v1 - 8);
  sub_100099B30(v9, v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16));
  sub_1000C0208(v0, v5);
  sub_100099B30(v5 + *(int *)(v6 + 48), v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 32));
  sub_10009D300();
}

void sub_10073BA5C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_10008900C();
  v2 = v1;
  v4 = v3;
  v5 = sub_1000BA294(&qword_100C032C8);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100079FBC();
  v7 = sub_1000BA294(&qword_100BF23D0);
  type metadata accessor for LineMark(255);
  sub_10011DBE8();
  v8 = *(_QWORD *)(v7 - 8);
  sub_10009C94C(v0, *v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16));
  sub_1005A0BC0((uint64_t)&unk_100BF2280);
  sub_1000B31EC(v2[1]);
  v9 = sub_10009C94C(v4, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32));
  sub_1000ED4A4(v9, v4 + *(int *)(v5 + 48));
  sub_10009D300();
}

void sub_10073BB2C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10008900C();
  sub_1000FC6F4();
  v3 = sub_1000BA294(&qword_100C03308);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100079FBC();
  v5 = sub_1000BA294(&qword_100BF4408);
  sub_100748054((uint64_t)&unk_100BF4270);
  v6 = *(_QWORD *)(v5 - 8);
  sub_10009C94C(v2, *v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
  sub_1005CFF5C();
  sub_1000BCF38(v1[1], v2 + *(int *)(v3 + 48));
  sub_10009C94C(v0, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32));
  sub_1000E78DC();
  sub_10009D300();
}

void sub_10073BBE8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10008900C();
  sub_1000C6C98();
  v2 = sub_1000BA294(&qword_100C03300);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100079FBC();
  sub_1005CFE1C();
  sub_1000C6220(*v0);
  sub_1005A0BC0((uint64_t)&unk_100BF4290);
  sub_1000B31EC(v0[1]);
  sub_1000C5894();
  sub_1000ED4A4(v4, v1 + *(int *)(v2 + 48));
  sub_10009D300();
}

void sub_10073BC8C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10008900C();
  sub_1000FC6F4();
  v3 = sub_1000BA294(&qword_100C03310);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100079FBC();
  sub_1005D1894();
  sub_1000C6220(*v1);
  v5 = type metadata accessor for ChartLineMark(0);
  sub_100748080((uint64_t)&unk_100BF4458);
  v6 = v2 + *(int *)(v3 + 48);
  v7 = v1[1];
  v8 = *(_QWORD *)(v5 - 8);
  sub_100099B30(v6, v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16));
  sub_1000D1FF8(v2, v0);
  sub_100099B30(v0 + *(int *)(v3 + 48), v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32));
  sub_10009D300();
}

void sub_10073BD4C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  sub_1000C6C98();
  v3 = sub_1000BA294(&qword_100C03318);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100079FBC();
  sub_1000CDDFC((uint64_t)&unk_100BF4420);
  sub_1000C6220(*v0);
  v5 = sub_1000C6F7C();
  sub_100037768(v5, v6, v7);
  sub_1000C5894();
  sub_1000D1FF8(v2, v1 + *(int *)(v3 + 48));
  sub_10004A2A0();
}

uint64_t sub_10073BDDC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19[6];

  v4 = (int *)sub_1000BA294(&qword_100C03268);
  __chkstk_darwin(v4);
  v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100C03228);
  sub_100748054((uint64_t)&unk_100C03028);
  sub_100746D3C();
  (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v6, *a1, v7);
  v19[0] = (uint64_t)v6;
  v8 = sub_1000BA294(&qword_100C03220);
  type metadata accessor for RectangleMark(255);
  sub_100747780((uint64_t)&unk_100C03068);
  v9 = (uint64_t)&v6[v4[12]];
  v10 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  v10(v9, a1[1], v8);
  v19[1] = v9;
  v11 = (uint64_t)&v6[v4[16]];
  v10(v11, a1[2], v8);
  v19[2] = v11;
  v12 = sub_1000BA294(&qword_100C03218);
  type metadata accessor for RuleMark(255);
  v13 = (uint64_t)&v6[v4[20]];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v13, a1[3], v12);
  v19[3] = v13;
  v14 = sub_1000BA294(&qword_100C03210);
  type metadata accessor for PointMark(255);
  sub_100746DC0();
  v15 = (uint64_t)&v6[v4[24]];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v15, a1[4], v14);
  v19[4] = v15;
  v16 = sub_1000BA294(&qword_100C03208);
  sub_100748054((uint64_t)&unk_100C030A0);
  v17 = (uint64_t)&v6[v4[28]];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v17, a1[5], v16);
  v19[5] = v17;
  return sub_1007449EC(v19, a2);
}

uint64_t sub_10073BFF8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, _QWORD, uint64_t);
  char *v10;
  char *v11;
  void (*v12)(uint64_t, char *, uint64_t);
  uint64_t v14;

  v4 = sub_1000BA294(&qword_100C03290);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100C03248);
  sub_100747834();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(char *, _QWORD, uint64_t))(v8 + 16);
  v9(v6, *a1, v7);
  v10 = &v6[*(int *)(v4 + 48)];
  v9(v10, a1[1], v7);
  v11 = &v6[*(int *)(v4 + 64)];
  v9(v11, a1[2], v7);
  v12 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 32);
  v12(a2, v6, v7);
  v12(a2 + *(int *)(v4 + 48), v10, v7);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v12)(a2 + *(int *)(v4 + 64), v11, v7);
}

uint64_t sub_10073C110@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = sub_1000BA294(&qword_100C03280);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100C03278);
  type metadata accessor for BasicChartSymbolShape(255);
  type metadata accessor for PointMark(255);
  sub_100748080((uint64_t)&qword_100BD78E8);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 16))(v6, *a1, v7);
  v9 = sub_1000BA294(&qword_100C03078);
  sub_100746DC0();
  v10 = &v6[*(int *)(v4 + 48)];
  v11 = a1[1];
  v12 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v10, v11, v9);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v6, v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a2 + *(int *)(v4 + 48), v10, v9);
}

void sub_10073C240()
{
  sub_10073C438();
}

void sub_10073C254()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000C6C98();
  sub_1000BA294(&qword_100C032D0);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100079FBC();
  sub_1000CDDFC((uint64_t)&unk_100BDCCC8);
  sub_1000C6220(*v0);
  sub_10039738C();
  v3 = sub_1000C2324();
  sub_1000CE570(v3, v1);
  sub_1000C5894();
  sub_100099028();
  sub_10004A2A0();
}

void sub_10073C2E8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10008900C();
  sub_1000FC6F4();
  v3 = sub_1000BA294(&qword_100C03298);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100079FBC();
  v5 = sub_1000BA294(&qword_100BDCC88);
  type metadata accessor for AxisGridLine(255);
  v6 = *(_QWORD *)(v5 - 8);
  sub_10009C94C(v2, *v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
  sub_1003970D8();
  sub_1000BCF38(v1[1], v2 + *(int *)(v3 + 48));
  sub_10009C94C(v0, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32));
  sub_1000E78DC();
  sub_10009D300();
}

void sub_10073C390()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000C6C98();
  sub_1000BA294(&qword_100C032A8);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100079FBC();
  sub_1000CDDFC((uint64_t)&unk_100BF2330);
  sub_1000C6220(*v0);
  sub_100747F6C();
  v3 = sub_1000C2324();
  sub_1000CE570(v3, v1);
  sub_1000C5894();
  sub_100099028();
  sub_10004A2A0();
}

void sub_10073C424()
{
  sub_10073C438();
}

void sub_10073C438()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_10008900C();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = sub_1000BA294(v7);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100098694();
  v10 = sub_1000BA294(v2);
  type metadata accessor for AxisGridLine(255);
  v11 = *(_QWORD *)(v10 - 8);
  sub_100089084(v0, *v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16));
  v12 = sub_1000BA294(&qword_100BDCD08);
  type metadata accessor for AxisTick(255);
  v13 = v0 + *(int *)(v8 + 48);
  v14 = v4[1];
  v15 = *(_QWORD *)(v12 - 8);
  sub_100099B30(v13, v14, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 16));
  sub_100089084(v6, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 32));
  sub_100099B30(v6 + *(int *)(v8 + 48), v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 32));
  sub_10009D300();
}

void sub_10073C504()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000C6C98();
  sub_1000BA294(&qword_100C032F0);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100079FBC();
  sub_1000CDDFC((uint64_t)&unk_100BF43D0);
  sub_1000C6220(*v0);
  sub_1005D1654();
  v3 = sub_1000C2324();
  sub_1000CE570(v3, v1);
  sub_1000C5894();
  sub_100099028();
  sub_10004A2A0();
}

void sub_10073C598()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_10008900C();
  v2 = v1;
  v4 = v3;
  v5 = sub_1000BA294(&qword_100C032E8);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100079FBC();
  sub_1007476F8((uint64_t)&qword_100BF4398);
  sub_1000C6220(*v2);
  v7 = sub_1000BA294(&qword_100BF43B8);
  sub_100748054((uint64_t)&unk_100BF43B0);
  v8 = v0 + *(int *)(v5 + 48);
  v9 = v2[1];
  v10 = *(_QWORD *)(v7 - 8);
  sub_100099B30(v8, v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16));
  sub_1000D1FF8(v0, v4);
  sub_100099B30(v4 + *(int *)(v5 + 48), v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 32));
  sub_10009D300();
}

void sub_10073C67C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = sub_1000BA294(&qword_100C03200);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1007476F8((uint64_t)&unk_100C031D0);
  sub_100037768(*a1, (uint64_t)v6, &qword_100C031D8);
  v7 = sub_1000BA294(&qword_100C031E8);
  sub_100748054((uint64_t)&unk_100C031E0);
  v8 = &v6[*(int *)(v4 + 48)];
  v9 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v8, a1[1], v7);
  sub_1007476F8((uint64_t)&qword_100BF4398);
  v10 = (uint64_t)&v6[*(int *)(v4 + 64)];
  sub_100037768(a1[2], v10, &qword_100BF43A0);
  sub_1000787D4((uint64_t)v6, a2, &qword_100C031D8);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2 + *(int *)(v4 + 48), v8, v7);
  sub_1000787D4(v10, a2 + *(int *)(v4 + 64), &qword_100BF43A0);
}

void sub_10073C7FC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  id v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, unint64_t, uint64_t, __n128);
  __n128 v50;
  _QWORD *v51;
  uint64_t v52;
  double v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD v89[2];

  v86 = a2;
  v87 = a3;
  v84 = a1;
  v6 = sub_1000BD520();
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = sub_1000C19E4();
  v79 = type metadata accessor for TimeZone(v8);
  v77 = *(_QWORD *)(v79 - 8);
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_100088FDC();
  v76 = v10;
  v11 = sub_10009876C();
  v80 = type metadata accessor for Calendar(v11);
  v78 = *(_QWORD *)(v80 - 8);
  sub_10009D98C();
  __chkstk_darwin(v12);
  sub_10009883C();
  v74 = v13 - v14;
  __chkstk_darwin(v15);
  v75 = (char *)&v71 - v16;
  v17 = sub_10009876C();
  v73 = type metadata accessor for SunriseSunsetPointSampler(v17);
  v72 = *(_QWORD *)(v73 - 8);
  sub_10009D98C();
  __chkstk_darwin(v18);
  sub_100088FDC();
  v85 = v19;
  v20 = sub_10009876C();
  v21 = type metadata accessor for Color.RGBColorSpace(v20);
  v82 = *(_QWORD *)(v21 - 8);
  v83 = v21;
  sub_10009D98C();
  __chkstk_darwin(v22);
  sub_100088FDC();
  v81 = v23;
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v24);
  sub_10009883C();
  __chkstk_darwin(v25);
  v27 = (char *)&v71 - v26;
  sub_100098778();
  v28 = sub_10009DCA0();
  sub_100037768(v28, v29, (uint64_t *)&unk_100BD35A0);
  sub_10011AC58();
  sub_100021A14((uint64_t)v27, (uint64_t *)&unk_100BD35A0);
  v30 = (int *)sub_1000DA1D0();
  v31 = sub_10009DCA0();
  sub_100037768(v31, v32, (uint64_t *)&unk_100BD35A0);
  sub_10011AC58();
  sub_100021A14((uint64_t)v27, (uint64_t *)&unk_100BD35A0);
  v33 = v30[7];
  v88 = 0;
  State.init(wrappedValue:)(&v88, &type metadata for Int);
  *(_OWORD *)(a4 + v33) = v89[0];
  v34 = (_QWORD *)(a4 + v30[9]);
  *v34 = swift_getKeyPath(&unk_1009C5A90);
  v35 = sub_1000BA294(&qword_100BC2908);
  v36 = swift_storeEnumTagMultiPayload(v34, v35, 0);
  *(_QWORD *)(a4 + v30[13]) = 0x4030000000000000;
  *(_QWORD *)(a4 + v30[14]) = 0x4008000000000000;
  v37 = v30[15];
  v38 = v81;
  (*(void (**)(uint64_t, _QWORD, uint64_t, __n128))(v82 + 104))(v81, enum case for Color.RGBColorSpace.sRGB(_:), v83, v36);
  *(_QWORD *)(a4 + v37) = Color.init(_:red:green:blue:opacity:)(v38, 0.31372549, 0.31372549, 0.37254902, 1.0);
  *(_QWORD *)(a4 + v30[16]) = 0x4024000000000000;
  *(_QWORD *)(a4 + v30[17]) = 0x4052800000000000;
  *(_QWORD *)(a4 + v30[18]) = 0x4057C00000000000;
  *(_QWORD *)(a4 + v30[19]) = 0xC056800000000000;
  *(_QWORD *)(a4 + v30[20]) = 0x4030000000000000;
  *(_QWORD *)(a4 + v30[21]) = 0x4000000000000000;
  v39 = (_OWORD *)v84;
  v40 = *(_QWORD *)(v84 + 8);
  *(_QWORD *)&v89[0] = *(_QWORD *)v84;
  v41 = a4 + v30[5];
  *(_BYTE *)(v41 + 32) = *(_BYTE *)(v84 + 32);
  v42 = v39[1];
  *(_OWORD *)v41 = *v39;
  *(_OWORD *)(v41 + 16) = v42;
  sub_100037768(v86, a4 + v30[8], &qword_100C02ED0);
  v43 = objc_allocWithZone((Class)UISelectionFeedbackGenerator);
  sub_10017989C(v89);
  v82 = v40;
  *(_QWORD *)(a4 + v30[10]) = objc_msgSend(v43, "init", swift_retain().n128_f64[0]);
  v83 = (uint64_t)v30;
  v84 = a4;
  v44 = v87;
  sub_100080C0C(v87, a4 + v30[11], _s14ChartViewModelVMa);
  v46 = *(_QWORD *)(*(_QWORD *)v44 + 16);
  if (v46)
  {
    v47 = *(_QWORD *)v44 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v48 = *(_QWORD *)(v7 + 72);
    v49 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, __n128))(v7 + 16);
    v81 = *(_QWORD *)v44;
    v50 = swift_bridgeObjectRetain();
    v51 = _swiftEmptyArrayStorage;
    do
    {
      v52 = v49(v4, v47, v6, v50);
      v53 = DetailChartDataElement.value.getter(v52);
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v6);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10009EF34();
        v51 = v55;
      }
      v54 = v51[2];
      if (v54 >= v51[3] >> 1)
      {
        sub_10009EF34();
        v51 = v56;
      }
      v51[2] = v54 + 1;
      *(double *)&v51[v54 + 4] = v53;
      v47 += v48;
      --v46;
    }
    while (v46);
    v45 = swift_bridgeObjectRelease();
  }
  else
  {
    v51 = _swiftEmptyArrayStorage;
  }
  v57 = v85;
  SunriseSunsetPointSampler.init(sampleSize:precisionNeededFor:)(9, v51, v45);
  v58 = v87;
  v59 = *(_QWORD *)(*(_QWORD *)v87 + 16);
  if (v59)
  {
    v60 = SunriseSunsetPointSampler.computeIndices(range:)(0, v59 - 1);
    v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v72 + 8))(v57, v73);
    v63 = v83;
    v62 = v84;
    *(_QWORD *)(v84 + *(int *)(v83 + 48)) = v60;
    v64 = v74;
    static Calendar.current.getter(v61);
    v65 = sub_1000C0B8C();
    v66 = v76;
    v67 = Location.timeZone.getter(v65);
    v68 = v75;
    Calendar.withTimeZone(_:)(v66, v67);
    sub_1004446CC(v89);
    swift_release();
    sub_100021A14(v86, &qword_100C02ED0);
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v66, v79);
    v69 = v78;
    v70 = v80;
    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v64, v80);
    sub_1000215BC(v58, _s14ChartViewModelVMa);
    (*(void (**)(uint64_t, char *, uint64_t))(v69 + 32))(v62 + *(int *)(v63 + 88), v68, v70);
    sub_10009990C();
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for SunriseSunsetInteractiveChartView(uint64_t a1)
{
  uint64_t result;

  result = qword_100C02F30;
  if (!qword_100C02F30)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SunriseSunsetInteractiveChartView);
  return result;
}

uint64_t sub_10073CDA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __n128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __n128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char v185[8];
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  _QWORD v191[2];
  _UNKNOWN **v192;
  uint64_t v193;
  uint64_t v194;
  char v195[8];
  char v196[8];
  _OWORD v197[2];
  __int128 v198;
  uint64_t v199;
  uint64_t v200;

  v6 = v2;
  v182 = a1;
  v7 = sub_1000DA1D0();
  v8 = sub_1000B43A4(v7, (uint64_t)&v184);
  v179 = v9;
  __chkstk_darwin(v8);
  v180 = v10;
  v181 = (uint64_t)&v151 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10009876C();
  v12 = type metadata accessor for DynamicTypeSize(v11);
  sub_1000B43A4(v12, (uint64_t)&v200);
  v177 = v13;
  sub_10009D98C();
  __chkstk_darwin(v14);
  sub_100088FDC();
  v176 = v15;
  v16 = sub_10009876C();
  v17 = type metadata accessor for PlotDimensionScaleRange(v16);
  sub_1000B43A4(v17, (uint64_t)v191);
  v158 = v18;
  sub_10009D98C();
  __chkstk_darwin(v19);
  sub_100088FDC();
  sub_10009511C(v20);
  sub_1000BA294(&qword_100BDCAB0);
  sub_1000B42B0();
  __chkstk_darwin(v21);
  sub_100099234();
  v22 = sub_1000BA294(&qword_100C02FB8);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  sub_100098694();
  v24 = sub_1000BA294(&qword_100C02FC0);
  sub_1000B42B0();
  __chkstk_darwin(v25);
  sub_100079F58();
  v26 = sub_1000BA294(&qword_100C02FC8);
  sub_1000B42B0();
  __chkstk_darwin(v27);
  sub_10007A130();
  v28 = sub_1000BA294(&qword_100C02FD0);
  sub_1000B43A4(v28, (uint64_t)&v186);
  v154 = v29;
  sub_10009D98C();
  __chkstk_darwin(v30);
  sub_100088FDC();
  sub_10009511C(v31);
  v32 = sub_1000BA294(&qword_100C02FD8);
  sub_1000B43A4(v32, (uint64_t)&v190);
  v156 = v33;
  sub_10009D98C();
  __chkstk_darwin(v34);
  sub_100088FDC();
  sub_10009511C(v35);
  v36 = sub_1000BA294(&qword_100C02FE0);
  sub_1000B43A4(v36, (uint64_t)&v194);
  v162 = v37;
  sub_10009D98C();
  __chkstk_darwin(v38);
  sub_100088FDC();
  sub_10009511C(v39);
  v40 = sub_1000BA294(&qword_100C02FE8);
  sub_1000B43A4(v40, (uint64_t)v196);
  v165 = v41;
  sub_10009D98C();
  __chkstk_darwin(v42);
  sub_100088FDC();
  sub_10009511C(v43);
  v44 = sub_1000BA294(&qword_100C02FF0);
  sub_1000B43A4(v44, (uint64_t)v197 + 8);
  v168 = v45;
  sub_10009D98C();
  __chkstk_darwin(v46);
  sub_100088FDC();
  sub_10009511C(v47);
  v48 = sub_1000BA294(&qword_100C02FF8);
  sub_1000B43A4(v48, (uint64_t)&v198);
  v171 = v49;
  sub_10009D98C();
  __chkstk_darwin(v50);
  sub_100088FDC();
  sub_10009511C(v51);
  v52 = sub_1000BA294(&qword_100C03000);
  sub_1000B43A4(v52, (uint64_t)&v199);
  v174 = v53;
  sub_10009D98C();
  __chkstk_darwin(v54);
  sub_100088FDC();
  sub_10009511C(v55);
  v186 = v6;
  v56 = sub_1000BA294(&qword_100C03008);
  v57 = sub_100746A14();
  v58 = Chart.init(content:)(sub_100746A0C, v185, v56, v57);
  LOBYTE(v56) = static Edge.Set.bottom.getter(v58);
  v152 = *(int *)(v152 + 64);
  v59 = EdgeInsets.init(_all:)(*(double *)(v6 + v152));
  v61 = v60;
  v63 = v62;
  v65 = v64;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v1, v3, v22);
  v66 = v1 + *(int *)(v24 + 36);
  *(_BYTE *)v66 = v56;
  *(double *)(v66 + 8) = v59;
  *(_QWORD *)(v66 + 16) = v61;
  *(_QWORD *)(v66 + 24) = v63;
  *(_QWORD *)(v66 + 32) = v65;
  *(_BYTE *)(v66 + 40) = 0;
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v3, v22);
  if (qword_100BC20C0 != -1)
    swift_once(&qword_100BC20C0, sub_1004049E8);
  swift_beginAccess(&qword_100CAE968, v195, 1, 0);
  sub_1004043F8();
  static Alignment.center.getter(v67);
  sub_1000FC578(0, 1);
  sub_1000BCF38(v1, v5);
  v68 = (_OWORD *)(v5 + *(int *)(v26 + 36));
  v69 = v197[1];
  *v68 = v197[0];
  v68[1] = v69;
  v68[2] = v198;
  sub_100021A14(v1, &qword_100C02FC0);
  sub_10073F150(&v194);
  v193 = v194;
  type metadata accessor for ScaleType(0);
  sub_1000BEA20(v4);
  v70 = sub_1000BA294(&qword_100BC69E0);
  sub_1003208AC((uint64_t)&unk_100C030A8);
  v72 = v71;
  sub_100747780((uint64_t)&unk_100BF42C8);
  v73 = v4;
  v75 = v74;
  v76 = v153;
  View.chartXScale<A>(domain:type:)(&v193, v73, v26, v70, v72, v74);
  sub_100021A14(v73, &qword_100BDCAB0);
  swift_bridgeObjectRelease();
  sub_100021A14(v5, &qword_100C02FC8);
  v192 = &off_100B5B380;
  v77 = v157;
  static PositionScaleRange<>.plotDimension(startPadding:endPadding:)(0.0, *(double *)(v6 + v152));
  sub_1000BEA20(v73);
  v78 = sub_1000BA294(&qword_100C030C0);
  v187 = v26;
  v188 = v70;
  v189 = v72;
  v190 = v75;
  v79 = sub_10009885C((uint64_t)&v187, (uint64_t)&opaque type descriptor for <<opaque return type of View.chartXScale<A>(domain:type:)>>);
  sub_100747780((uint64_t)&unk_100C030C8);
  v81 = v80;
  v82 = v155;
  v83 = v160;
  v84 = v76;
  View.chartYScale<A, B>(domain:range:type:)(&v192, v77, v73, v155, v78, v160, v79, v80, &protocol witness table for PlotDimensionScaleRange);
  sub_100021A14(v73, &qword_100BDCAB0);
  sub_100098B40(v77, (uint64_t (*)(uint64_t, uint64_t))v158[1]);
  v85 = swift_bridgeObjectRelease();
  v86 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v154 + 8))(v76, v82, v85);
  v158 = &v151;
  __chkstk_darwin(v86);
  sub_1000ED088();
  v87 = v6;
  v183 = v6;
  *(_QWORD *)(v88 - 16) = v6;
  v89 = sub_1000BA294(&qword_100C030D0);
  v187 = v82;
  v188 = v78;
  v189 = v83;
  v190 = v79;
  v191[0] = v81;
  v191[1] = &protocol witness table for PlotDimensionScaleRange;
  v90 = sub_10009885C((uint64_t)&v187, (uint64_t)&opaque type descriptor for <<opaque return type of View.chartYScale<A, B>(domain:range:type:)>>);
  v91 = sub_1000AE9D4();
  v92 = sub_100075EB0(&qword_100C030E0);
  sub_1000F3EBC((uint64_t)&unk_100C030E8);
  v94 = v93;
  v95 = sub_100746EC8();
  v187 = v91;
  v188 = v92;
  v189 = v94;
  v190 = v95;
  v96 = sub_10009885C((uint64_t)&v187, (uint64_t)&opaque type descriptor for <<opaque return type of AxisContent.compositingLayer<A>(style:)>>);
  v97 = v161;
  v98 = v84;
  v99 = v159;
  v100 = v184;
  View.chartXAxis<A>(content:)(sub_100746EA8, v98, v159, v89, v90, v96);
  v101 = sub_1000B3274(v100, *(uint64_t (**)(uint64_t, uint64_t))(v156 + 8));
  __chkstk_darwin(v101);
  sub_1000ED088();
  *(_QWORD *)(v102 - 16) = v87;
  v103 = sub_1000BA294(&qword_100C03108);
  v187 = v99;
  v188 = v89;
  v189 = v90;
  v190 = v96;
  v104 = sub_10009885C((uint64_t)&v187, (uint64_t)&opaque type descriptor for <<opaque return type of View.chartXAxis<A>(content:)>>);
  v105 = sub_1000AE9D4();
  v106 = sub_100075EB0(&qword_100C03118);
  sub_1000F3EBC((uint64_t)&unk_100C03120);
  v108 = v107;
  v109 = sub_100746F60();
  v187 = v105;
  v188 = v106;
  v189 = v108;
  v190 = v109;
  v110 = sub_10009885C((uint64_t)&v187, (uint64_t)&opaque type descriptor for <<opaque return type of AxisContent.compositingLayer<A>(style:)>>);
  v111 = v163;
  v112 = v164;
  View.chartYAxis<A>(content:)(sub_100746F4C, v100, v164, v103, v104, v110);
  sub_1000B3274(v97, *(uint64_t (**)(uint64_t, uint64_t))(v162 + 8));
  v113 = v177;
  v114 = v176;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v177 + 104))(v176, enum case for DynamicTypeSize.large(_:), v178);
  v187 = v112;
  v188 = v103;
  v189 = v104;
  v190 = v110;
  v115 = sub_10009885C((uint64_t)&v187, (uint64_t)&opaque type descriptor for <<opaque return type of View.chartYAxis<A>(content:)>>);
  v116 = v166;
  v117 = v167;
  View.dynamicTypeSize(_:)(v114, v167, v115);
  sub_100098748(v114, *(uint64_t (**)(uint64_t, uint64_t))(v113 + 8));
  v118 = sub_100099254(v111, *(uint64_t (**)(uint64_t, uint64_t))(v165 + 8));
  __chkstk_darwin(v118);
  sub_1000ED088();
  v119 = v183;
  *(_QWORD *)(v120 - 16) = v183;
  v121 = sub_1000BA294(&qword_100BF9E18);
  v178 = v121;
  v187 = v117;
  v188 = v115;
  v122 = sub_10009885C((uint64_t)&v187, (uint64_t)&opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>);
  v123 = sub_10064732C();
  v124 = v170;
  v125 = v169;
  View.accessibilityRepresentation<A>(representation:)(sub_100746FE4, v111, v169, v121, v122, v123);
  sub_100098B40(v116, *(uint64_t (**)(uint64_t, uint64_t))(v168 + 8));
  v126 = v181;
  sub_100080C0C(v119, v181, type metadata accessor for SunriseSunsetInteractiveChartView);
  v127 = *(unsigned __int8 *)(v179 + 80);
  v128 = (v127 + 16) & ~v127;
  v184 = v128 + v180;
  v180 = v127 | 7;
  v129 = swift_allocObject(&unk_100B8E068, v184, v127 | 7);
  sub_10007802C(v126, v129 + v128, type metadata accessor for SunriseSunsetInteractiveChartView);
  v131 = static Alignment.center.getter(v130);
  v133 = v132;
  v134 = sub_1000BA294(&qword_100C03140);
  v179 = v134;
  v187 = v125;
  v188 = v178;
  v189 = v122;
  v190 = v123;
  v135 = sub_10009885C((uint64_t)&v187, (uint64_t)&opaque type descriptor for <<opaque return type of View.accessibilityRepresentation<A>(representation:)>>);
  sub_1005A0BC0((uint64_t)&unk_100C03148);
  v137 = v136;
  v138 = v173;
  v139 = v133;
  v140 = v172;
  View.chartBackground<A>(alignment:content:)(v131, v139, sub_100746FF0, v129, v172, v134, v135, v136);
  v141 = swift_release();
  (*(void (**)(uint64_t, uint64_t, __n128))(v171 + 8))(v124, v140, v141);
  sub_100080C0C(v183, v126, type metadata accessor for SunriseSunsetInteractiveChartView);
  v142 = swift_allocObject(&unk_100B8E090, v184, v180);
  sub_10007802C(v126, v142 + v128, type metadata accessor for SunriseSunsetInteractiveChartView);
  v144 = static Alignment.center.getter(v143);
  v146 = v145;
  v147 = sub_1000BA294(&qword_100C03170);
  v187 = v140;
  v188 = v179;
  v189 = v135;
  v190 = v137;
  v148 = sub_10009885C((uint64_t)&v187, (uint64_t)&opaque type descriptor for <<opaque return type of View.chartBackground<A>(alignment:content:)>>);
  v149 = sub_100747078();
  View.chartOverlay<A>(alignment:content:)(v144, v146, sub_10074706C, v142, v175, v147, v148, v149);
  swift_release();
  return sub_100098748(v138, *(uint64_t (**)(uint64_t, uint64_t))(v174 + 8));
}

uint64_t sub_10073D9C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  void (*v52)(char *, uint64_t, uint64_t);
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  void (*v66)(char *, uint64_t);
  char *v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t);
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char v105[16];
  uint64_t v106;
  char v107[8];
  uint64_t v108;
  _QWORD v109[6];

  v78 = a1;
  v92 = a2;
  v87 = sub_1000BA294(&qword_100C03098);
  v89 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v83 = (char *)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_1000BA294(&qword_100C03208);
  v102 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v104 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v85 = (char *)&v77 - v6;
  v91 = sub_1000BA294(&qword_100C03210);
  v90 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v101 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v98 = (uint64_t)&v77 - v9;
  v86 = sub_1000BA294(&qword_100C03218);
  v84 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v99 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v94 = (uint64_t)&v77 - v12;
  v82 = sub_1000BA294(&qword_100C03220);
  v100 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v97 = (char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v96 = (char *)&v77 - v15;
  __chkstk_darwin(v16);
  v93 = (uint64_t)&v77 - v17;
  __chkstk_darwin(v18);
  v103 = (uint64_t)&v77 - v19;
  v20 = sub_1000BA294(&qword_100C03018);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v77 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1000BA294(&qword_100C03228);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = (char *)&v77 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v30 = (char *)&v77 - v29;
  v95 = (char *)&v77 - v29;
  v108 = a1;
  v31 = sub_1000BA294(&qword_100C03230);
  v32 = sub_1007477C4();
  Plot.init(content:)(sub_1007477BC, v107, v31, v32);
  v33 = sub_1000BA294(&qword_100C03020);
  sub_100748054((uint64_t)&unk_100C03028);
  v35 = v34;
  v36 = sub_100746D3C();
  ChartContent.compositingLayer<A>(style:)(sub_100742674, 0, v20, v33, v35, v36);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  v37 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
  v80 = v25;
  v79 = v24;
  v37(v30, v27, v24);
  v38 = v78;
  sub_10073E098(v103);
  v39 = v93;
  sub_10073E57C(v93);
  v40 = v94;
  sub_10073EA5C(v94);
  sub_10073ECA0(v98, v41);
  v106 = v38;
  v42 = sub_1000BA294(&qword_100C03258);
  v43 = sub_10074796C();
  v44 = v83;
  Plot.init(content:)(sub_100747964, v105, v42, v43);
  v45 = type metadata accessor for RectangleMark(0);
  sub_100748054((uint64_t)&unk_100C030A0);
  v46 = v104;
  v47 = v87;
  ChartContent.mask<A>(content:)(sub_100743188, 0, v87, v45, v48, &protocol witness table for RectangleMark);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v44, v47);
  v49 = v85;
  v50 = v88;
  (*(void (**)(char *, char *, uint64_t))(v102 + 32))(v85, v46, v88);
  v51 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  v81 = v27;
  v51(v27, v95, v24);
  v109[0] = v27;
  v52 = *(void (**)(char *, uint64_t, uint64_t))(v100 + 16);
  v53 = v96;
  v54 = v82;
  v52(v96, v103, v82);
  v109[1] = v53;
  v55 = v97;
  v52(v97, v39, v54);
  v109[2] = v55;
  v56 = v84;
  v57 = v99;
  v58 = v40;
  v59 = v86;
  (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v99, v58, v86);
  v109[3] = v57;
  v60 = v90;
  v61 = v101;
  v62 = v98;
  v63 = v91;
  (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v101, v98, v91);
  v109[4] = v61;
  v64 = v102;
  v65 = v104;
  (*(void (**)(char *, char *, uint64_t))(v102 + 16))(v104, v49, v50);
  v109[5] = v65;
  sub_10073BDDC(v109, v92);
  v66 = *(void (**)(char *, uint64_t))(v64 + 8);
  v67 = v49;
  v68 = v50;
  v66(v67, v50);
  v69 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
  v70 = v63;
  v69(v62, v63);
  v71 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
  v72 = v59;
  v71(v94, v59);
  v73 = *(void (**)(uint64_t, uint64_t))(v100 + 8);
  v73(v93, v54);
  v73(v103, v54);
  v74 = *(void (**)(char *, uint64_t))(v80 + 8);
  v75 = v79;
  v74(v95, v79);
  v66(v104, v68);
  v69((uint64_t)v101, v70);
  v71((uint64_t)v99, v72);
  v73((uint64_t)v97, v54);
  v73((uint64_t)v96, v54);
  return ((uint64_t (*)(char *, uint64_t))v74)(v81, v75);
}

uint64_t sub_10073E098@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t OpaqueTypeConformance2;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51[16];
  uint64_t v52;
  _QWORD v53[2];
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  _QWORD v57[5];
  _OWORD v58[2];
  uint64_t v59;

  v50 = a1;
  v2 = type metadata accessor for SunriseSunsetInteractiveChartView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100C03060);
  v43 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100C03058);
  v44 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_1000BA294(&qword_100C03050);
  v47 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v42 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_1000BA294(&qword_100C03048);
  v49 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v45 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(int *)(v2 + 48);
  v41 = v1;
  *(_QWORD *)&v58[0] = *(_QWORD *)(v1 + v14);
  KeyPath = swift_getKeyPath(&unk_1009C5B70);
  sub_100080C0C(v1, (uint64_t)v5, type metadata accessor for SunriseSunsetInteractiveChartView);
  v16 = *(unsigned __int8 *)(v3 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = swift_allocObject(&unk_100B8E158, v17 + v4, v16 | 7);
  sub_10007802C((uint64_t)v5, v18 + v17, type metadata accessor for SunriseSunsetInteractiveChartView);
  swift_bridgeObjectRetain();
  v19 = sub_1000BA294(&qword_100C030C0);
  v20 = type metadata accessor for LineMark(0);
  sub_100748054((uint64_t)&unk_100C03288);
  ForEach<>.init(_:id:content:)(v58, KeyPath, sub_100747B70, v18, v19, v20, v21, &protocol witness table for Int, &protocol witness table for LineMark);
  sub_100747780((uint64_t)&unk_100C03068);
  v23 = v22;
  ChartContent.interpolationMethod(_:)(1, 3, v6, v22);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v8, v6);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v57, 0, 1, 4.0, 10.0, 0.0);
  *(_QWORD *)&v58[0] = v6;
  *((_QWORD *)&v58[0] + 1) = v23;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v58, &opaque type descriptor for <<opaque return type of ChartContent.interpolationMethod(_:)>>, 1);
  v25 = v42;
  ChartContent.lineStyle(_:)(v57, v9, OpaqueTypeConformance2);
  sub_100158A28((uint64_t)v57);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v11, v9);
  v26 = v41;
  v27 = sub_1007415B4(0.05, 0.3, 0.35, 0.05);
  v28 = static UnitPoint.leading.getter(v27);
  v30 = v29;
  v32 = static UnitPoint.trailing.getter(v31);
  LinearGradient.init(gradient:startPoint:endPoint:)(v58, v27, v28, v30, v32, v33);
  v54 = v58[0];
  v55 = v58[1];
  v56 = v59;
  v53[0] = v9;
  v53[1] = OpaqueTypeConformance2;
  v34 = swift_getOpaqueTypeConformance2(v53, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 1);
  v35 = v45;
  v36 = v46;
  ChartContent.foregroundStyle<A>(_:)(&v54, v46, &type metadata for LinearGradient, v34, &protocol witness table for LinearGradient);
  sub_100158858(v58);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v25, v36);
  v52 = v26;
  v37 = type metadata accessor for RectangleMark(0);
  *(_QWORD *)&v54 = v36;
  *((_QWORD *)&v54 + 1) = &type metadata for LinearGradient;
  *(_QWORD *)&v55 = v34;
  *((_QWORD *)&v55 + 1) = &protocol witness table for LinearGradient;
  v38 = swift_getOpaqueTypeConformance2(&v54, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
  v39 = v48;
  ChartContent.mask<A>(content:)(sub_100747BDC, v51, v48, v37, v38, &protocol witness table for RectangleMark);
  return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v35, v39);
}

uint64_t sub_10073E57C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t OpaqueTypeConformance2;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51[16];
  uint64_t v52;
  _QWORD v53[2];
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  _QWORD v57[5];
  _OWORD v58[2];
  uint64_t v59;

  v50 = a1;
  v2 = type metadata accessor for SunriseSunsetInteractiveChartView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100C03060);
  v43 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100C03058);
  v44 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_1000BA294(&qword_100C03050);
  v47 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v42 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_1000BA294(&qword_100C03048);
  v49 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v45 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(int *)(v2 + 48);
  v41 = v1;
  *(_QWORD *)&v58[0] = *(_QWORD *)(v1 + v14);
  KeyPath = swift_getKeyPath(&unk_1009C5B70);
  sub_100080C0C(v1, (uint64_t)v5, type metadata accessor for SunriseSunsetInteractiveChartView);
  v16 = *(unsigned __int8 *)(v3 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = swift_allocObject(&unk_100B8E130, v17 + v4, v16 | 7);
  sub_10007802C((uint64_t)v5, v18 + v17, type metadata accessor for SunriseSunsetInteractiveChartView);
  swift_bridgeObjectRetain();
  v19 = sub_1000BA294(&qword_100C030C0);
  v20 = type metadata accessor for LineMark(0);
  sub_100748054((uint64_t)&unk_100C03288);
  ForEach<>.init(_:id:content:)(v58, KeyPath, sub_100747B54, v18, v19, v20, v21, &protocol witness table for Int, &protocol witness table for LineMark);
  sub_100747780((uint64_t)&unk_100C03068);
  v23 = v22;
  ChartContent.interpolationMethod(_:)(1, 3, v6, v22);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v8, v6);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v57, 0, 1, 4.0, 10.0, 0.0);
  *(_QWORD *)&v58[0] = v6;
  *((_QWORD *)&v58[0] + 1) = v23;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v58, &opaque type descriptor for <<opaque return type of ChartContent.interpolationMethod(_:)>>, 1);
  v25 = v42;
  ChartContent.lineStyle(_:)(v57, v9, OpaqueTypeConformance2);
  sub_100158A28((uint64_t)v57);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v11, v9);
  v26 = v41;
  v27 = sub_1007415B4(0.35, 0.5, 0.85, 0.5);
  v28 = static UnitPoint.leading.getter(v27);
  v30 = v29;
  v32 = static UnitPoint.trailing.getter(v31);
  LinearGradient.init(gradient:startPoint:endPoint:)(v58, v27, v28, v30, v32, v33);
  v54 = v58[0];
  v55 = v58[1];
  v56 = v59;
  v53[0] = v9;
  v53[1] = OpaqueTypeConformance2;
  v34 = swift_getOpaqueTypeConformance2(v53, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 1);
  v35 = v45;
  v36 = v46;
  ChartContent.foregroundStyle<A>(_:)(&v54, v46, &type metadata for LinearGradient, v34, &protocol witness table for LinearGradient);
  sub_100158858(v58);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v25, v36);
  v52 = v26;
  v37 = type metadata accessor for RectangleMark(0);
  *(_QWORD *)&v54 = v36;
  *((_QWORD *)&v54 + 1) = &type metadata for LinearGradient;
  *(_QWORD *)&v55 = v34;
  *((_QWORD *)&v55 + 1) = &protocol witness table for LinearGradient;
  v38 = swift_getOpaqueTypeConformance2(&v54, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
  v39 = v48;
  ChartContent.mask<A>(content:)(sub_100747B64, v51, v48, v37, v38, &protocol witness table for RectangleMark);
  return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v35, v39);
}

uint64_t sub_10073EA5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t OpaqueTypeConformance2;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  _QWORD v27[5];

  v24 = a1;
  v1 = sub_1000BA294(&qword_100C03270);
  __chkstk_darwin(v1);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for RuleMark(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000BA294(&qword_100C03070);
  v23 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = LocalizedStringKey.init(stringLiteral:)(0x6E6F7A69726F48, 0xE700000000000000);
  v27[0] = 0;
  static PlottableValue.value(_:_:)(v11, v13, v12 & 1, v14, v27, &type metadata for Int, &protocol witness table for Int);
  swift_bridgeObjectRelease();
  v15 = swift_bridgeObjectRelease();
  RuleMark.init<A>(xStart:xEnd:y:)(0, 1, 0, 1, v3, &type metadata for Int, &protocol witness table for Int, v15);
  v16 = type metadata accessor for SunriseSunsetInteractiveChartView(0);
  v17 = v22;
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v27, 0, 0, *(double *)(v22 + *(int *)(v16 + 56)), 10.0, 0.0);
  ChartContent.lineStyle(_:)(v27, v4, &protocol witness table for RuleMark);
  sub_100158A28((uint64_t)v27);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v18 = *(_QWORD *)(v17 + *(int *)(v16 + 60));
  v25[1] = &protocol witness table for RuleMark;
  v26 = v18;
  v25[0] = v4;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v25, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 1);
  ChartContent.foregroundStyle<A>(_:)(&v26, v8, &type metadata for Color, OpaqueTypeConformance2, &protocol witness table for Color);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v10, v8);
}

uint64_t sub_10073ECA0@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  __n128 v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t OpaqueTypeConformance2;
  char *v54;
  double v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75[16];
  uint64_t v76;
  double v77;
  void *v78;
  void *v79;
  void *v80;
  uint64_t v81;

  v74 = a1;
  v3 = type metadata accessor for AnnotationPosition(0, a2);
  v72 = *(_QWORD *)(v3 - 8);
  v73 = v3;
  __chkstk_darwin(v3);
  v67 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000BA294(&qword_100BD78B8);
  __chkstk_darwin(v5);
  v63 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v61 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BD78D8);
  __chkstk_darwin(v10);
  v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PointMark(0);
  v14 = *(_QWORD *)(v13 - 8);
  v65 = v13;
  v66 = v14;
  __chkstk_darwin(v13);
  v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000BA294(&qword_100C03080);
  v18 = *(_QWORD *)(v17 - 8);
  v68 = v17;
  v69 = v18;
  __chkstk_darwin(v17);
  v62 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000BA294(&qword_100C03078);
  v21 = *(_QWORD *)(v20 - 8);
  v70 = v20;
  v71 = v21;
  __chkstk_darwin(v20);
  v64 = (char *)&v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = LocalizedStringKey.init(stringLiteral:)(120, 0xE100000000000000);
  v25 = v24;
  v27 = v26;
  v29 = v28;
  type metadata accessor for SunriseSunsetInteractiveChartView(0);
  v30 = _s14ChartViewModelVMa(0);
  DetailChartDataElement.date.getter(v30);
  static PlottableValue.value(_:_:)(v23, v25, v27 & 1, v29, v9, v7, &protocol witness table for Date);
  swift_bridgeObjectRelease();
  v31 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, __n128))(v61 + 8))(v9, v7, v31);
  v32 = LocalizedStringKey.init(stringLiteral:)(121, 0xE100000000000000);
  v34 = v33;
  LOBYTE(v25) = v35;
  v37 = v36;
  v77 = DetailChartDataElement.value.getter(v32);
  v38 = v63;
  static PlottableValue.value(_:_:)(v32, v34, v25 & 1, v37, &v77, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease();
  v39 = swift_bridgeObjectRelease();
  v40 = PointMark.init<A, B>(x:y:)(v12, v38, v7, &type metadata for Double, &protocol witness table for Date, &protocol witness table for Double, v39);
  v41 = v67;
  v42 = static AnnotationPosition.overlay.getter(v40);
  v76 = v2;
  v43 = static Alignment.center.getter(v42);
  v45 = v44;
  v46 = sub_1000BA294(&qword_100C03088);
  v47 = sub_100746DC0();
  v48 = v62;
  v49 = v45;
  v50 = *(double *)&v65;
  ChartContent.annotation<A>(position:alignment:spacing:content:)(v41, v43, v49, 0, 1, sub_100747B30, v75, v65, v46, &protocol witness table for PointMark, v47);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v41, v73);
  v51 = (*(uint64_t (**)(char *, double))(v66 + 8))(v16, COERCE_DOUBLE(*(_QWORD *)&v50));
  v52 = static Color.clear.getter(v51);
  v80 = (void *)v47;
  v81 = v52;
  v77 = v50;
  v78 = (void *)v46;
  v79 = &protocol witness table for PointMark;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v77, &opaque type descriptor for <<opaque return type of ChartContent.annotation<A>(position:alignment:spacing:content:)>>, 1);
  v54 = v64;
  v55 = *(double *)&v68;
  ChartContent.foregroundStyle<A>(_:)(&v81, v68, &type metadata for Color, OpaqueTypeConformance2, &protocol witness table for Color);
  v56 = swift_release();
  (*(void (**)(char *, double, __n128))(v69 + 8))(v48, COERCE_DOUBLE(*(_QWORD *)&v55), v56);
  v57 = type metadata accessor for RectangleMark(0);
  v77 = v55;
  v78 = &type metadata for Color;
  v79 = (void *)OpaqueTypeConformance2;
  v80 = &protocol witness table for Color;
  v58 = swift_getOpaqueTypeConformance2(&v77, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
  v59 = v70;
  ChartContent.mask<A>(content:)(sub_100742688, 0, v70, v57, v58, &protocol witness table for RectangleMark);
  return (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v54, v59);
}

uint64_t sub_10073F150@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void (*v26)(uint64_t, uint64_t);
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;

  v49 = a1;
  v2 = sub_1000BA294(&qword_100BCB0A0);
  __chkstk_darwin(v2);
  v46 = (uint64_t)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v44 - v5;
  v7 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v44 - v11;
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v45 = (char *)&v44 - v18;
  __chkstk_darwin(v19);
  v21 = (char *)&v44 - v20;
  v47 = type metadata accessor for SunriseSunsetInteractiveChartView(0);
  v48 = v1;
  v22 = (uint64_t *)(v1 + *(int *)(v47 + 44));
  sub_1002F6F6C(*v22, (uint64_t)v6);
  v23 = type metadata accessor for DetailChartDataElement(0);
  v24 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v6, 1, v23);
  if ((_DWORD)v24 == 1)
  {
    sub_100021A14((uint64_t)v6, &qword_100BCB0A0);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 1, 1, v13);
LABEL_4:
    v9 = v12;
    goto LABEL_9;
  }
  DetailChartDataElement.date.getter(v24);
  v25 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8);
  v25(v6, v23);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v13);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v13) == 1)
    goto LABEL_4;
  v26 = (void (*)(uint64_t, uint64_t))v25;
  v27 = v12;
  v28 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v28(v21, v27, v13);
  v29 = v46;
  sub_10020CBD0(*v22, v46);
  v30 = _s7Weather24LocationCompositionStateOwet_0(v29, 1, v23);
  if ((_DWORD)v30 == 1)
  {
    sub_100021A14(v29, &qword_100BCB0A0);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 1, 1, v13);
  }
  else
  {
    DetailChartDataElement.date.getter(v30);
    v26(v29, v23);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v13);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v13) != 1)
    {
      v38 = v45;
      v28(v45, v9, v13);
      v39 = sub_1000BA294(&qword_100BCB0F0);
      v40 = *(_QWORD *)(v14 + 72);
      v41 = *(unsigned __int8 *)(v14 + 80);
      v42 = (v41 + 32) & ~v41;
      v36 = swift_allocObject(v39, v42 + 2 * v40, v41 | 7);
      *(_OWORD *)(v36 + 16) = xmmword_10097DA20;
      v43 = v36 + v42;
      (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v43, v21, v13);
      v28((char *)(v43 + v40), v38, v13);
      goto LABEL_10;
    }
  }
  (*(void (**)(char *, uint64_t))(v14 + 8))(v21, v13);
LABEL_9:
  sub_100021A14((uint64_t)v9, (uint64_t *)&unk_100BD35A0);
  v31 = v48 + *(int *)(v47 + 88);
  v32 = _s14ChartViewModelVMa(0);
  Calendar.startOfDay(for:)((char *)v22 + *(int *)(v32 + 44));
  v33 = sub_1000BA294(&qword_100BCB0F0);
  v34 = *(unsigned __int8 *)(v14 + 80);
  v35 = (v34 + 32) & ~v34;
  v36 = swift_allocObject(v33, v35 + 2 * *(_QWORD *)(v14 + 72), v34 | 7);
  *(_OWORD *)(v36 + 16) = xmmword_10097DA20;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v36 + v35, v16, v13);
  Date.wc_addDays(_:calendar:)(1, v31);
  v21 = v16;
LABEL_10:
  result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v21, v13);
  *v49 = v36;
  return result;
}

void sub_10073F55C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  sub_1000986AC();
  v46 = v4;
  type metadata accessor for AxisMarkPosition(0);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100088FDC();
  v45 = v6;
  v7 = sub_10009876C();
  type metadata accessor for AxisMarkPreset(v7, v8);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100088FDC();
  v44 = v10;
  v11 = sub_1000DA1D0();
  v41 = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(v41 + 64);
  __chkstk_darwin(v11);
  v40 = (uint64_t)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BA294(&qword_100BDCCB0);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  sub_10007A130();
  v14 = type metadata accessor for Calendar.Component(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AxisMarkValues(0, v16);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  sub_100079F58();
  v20 = sub_1000BA294(&qword_100C030D8);
  v21 = *(_QWORD *)(v20 - 8);
  v42 = v20;
  v43 = v21;
  sub_10009D98C();
  __chkstk_darwin(v22);
  sub_10009E540();
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for Calendar.Component.hour(_:), v14);
  v23 = v1 + *(int *)(v11 + 88);
  v24 = sub_1000D95F0();
  sub_100089084(v3, v23, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16));
  _s7Weather24LocationCompositionStateOwst_0(v3, 0, 1, v24);
  static AxisMarkValues.stride(by:count:roundLowerBound:roundUpperBound:calendar:)(v18, 6, 2, 2, v3);
  sub_100021A14(v3, &qword_100BDCCB0);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  v25 = v40;
  sub_100080C0C(v1, v40, type metadata accessor for SunriseSunsetInteractiveChartView);
  v26 = *(unsigned __int8 *)(v41 + 80);
  v27 = (v26 + 16) & ~v26;
  v28 = swift_allocObject(&unk_100B8E108, v27 + v12, v26 | 7);
  sub_10007802C(v25, v28 + v27, type metadata accessor for SunriseSunsetInteractiveChartView);
  v29 = v44;
  v31 = static AxisMarkPreset.automatic.getter(v30);
  v32 = v45;
  static AxisMarkPosition.automatic.getter(v31);
  v33 = sub_1000BA294(&qword_100C031C0);
  v34 = sub_100747624();
  AxisMarks.init(preset:position:values:content:)(v29, v32, v0, sub_1007475D8, v28, v33, v34);
  v35 = sub_1000BA294(&qword_100C030E0);
  sub_100748054((uint64_t)&unk_100C030E8);
  v37 = v36;
  v38 = sub_100746EC8();
  AxisContent.compositingLayer<A>(style:)(sub_100744030, 0, v42, v35, v37, v38);
  sub_100099254(v2, *(uint64_t (**)(uint64_t, uint64_t))(v43 + 8));
  sub_100098640();
}

void sub_10073F848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  sub_1000986AC();
  type metadata accessor for AxisMarkPosition(0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  v5 = sub_1000C19E4();
  type metadata accessor for AxisMarkPreset(v5, v6);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100098694();
  type metadata accessor for AxisMarkValues(0, v8);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_10009E540();
  v10 = sub_1000BA294(&qword_100C03110);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_100079FBC();
  v21 = 0x403E000000000000;
  v12 = sub_10010D1D0();
  static AxisMarkValues.stride<A>(by:roundLowerBound:roundUpperBound:)(&v21, 2, 2, &type metadata for Double, v12);
  v14 = static AxisMarkPreset.automatic.getter(v13);
  static AxisMarkPosition.automatic.getter(v14);
  v15 = sub_1000BA294(&qword_100BF43A0);
  v16 = sub_1007476F8((uint64_t)&qword_100BF4398);
  AxisMarks.init(preset:position:values:content:)(v2, v0, v3, sub_100744044, 0, v15, v16);
  v17 = sub_1000BA294(&qword_100C03118);
  sub_100748054((uint64_t)&unk_100C03120);
  v19 = v18;
  v20 = sub_100746F60();
  AxisContent.compositingLayer<A>(style:)(sub_1007442E0, 0, v10, v17, v19, v20);
  sub_100099254(v1, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  sub_100098640();
}

void sub_10073F9EC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[2];
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  _QWORD v83[2];
  _QWORD *v84;

  v79 = a1;
  v75 = a2;
  v2 = type metadata accessor for AccessibilityCustomContentKey(0);
  __chkstk_darwin(v2);
  v82 = (char *)v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = _s14ChartViewModelV26SunEventAccessibilityModelVMa(0);
  v73 = *(_QWORD *)(v81 - 8);
  v4 = __chkstk_darwin(v81);
  v6 = (char *)v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for AccessibilityCustomContentEntry(0, v4);
  v7 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v78 = (char *)v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v9);
  v11 = (_OWORD *)((char *)v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v76 = sub_1000BA294(&qword_100BF9E18);
  __chkstk_darwin(v76);
  v13 = (char *)v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v77 = (char *)v72 - v15;
  __chkstk_darwin(v16);
  v74 = (char *)v72 - v17;
  v18 = (char *)v11 + *(int *)(v9 + 20);
  v19 = enum case for RoundedCornerStyle.continuous(_:);
  v20 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v18, v19, v20);
  __asm { FMOV            V0.2D, #5.0 }
  *v11 = _Q0;
  v26 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000021, 0x8000000100A12810);
  v30 = Text.init(_:tableName:bundle:comment:)(v26, v28, v27 & 1, v29, 0, 0, 0, 0, 0, 256);
  v32 = v31;
  v34 = v33;
  v36 = v35 & 1;
  sub_100748080((uint64_t)&qword_100BDAFB8);
  View.accessibilityLabel(_:)(v30, v32, v36, v34, v9, v37);
  sub_1000D31B4(v30, v32, v36);
  swift_bridgeObjectRelease();
  sub_1000215BC((uint64_t)v11, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v38 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000033, 0x8000000100A12840);
  LOWORD(v71) = 256;
  v42 = Text.init(_:tableName:bundle:comment:)(v38, v40, v39 & 1, v41, 0, 0, 0, 0, 0, v71);
  v44 = v43;
  LOBYTE(v34) = v45 & 1;
  v46 = v76;
  ModifiedContent<>.accessibilityHint(_:)();
  sub_1000D31B4(v42, v44, v34);
  swift_bridgeObjectRelease();
  sub_100021A14((uint64_t)v13, &qword_100BF9E18);
  v47 = v79 + *(int *)(type metadata accessor for SunriseSunsetInteractiveChartView(0) + 44);
  v48 = *(_QWORD *)(v47 + *(int *)(_s14ChartViewModelVMa(0) + 48));
  v49 = *(_QWORD *)(v48 + 16);
  v50 = _swiftEmptyArrayStorage;
  if (v49)
  {
    v84 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1006062DC();
    v51 = *(unsigned __int8 *)(v73 + 80);
    v72[1] = v48;
    v52 = v48 + ((v51 + 32) & ~v51);
    v79 = *(_QWORD *)(v73 + 72);
    v53 = v78;
    do
    {
      sub_100080C0C(v52, (uint64_t)v6, _s14ChartViewModelV26SunEventAccessibilityModelVMa);
      v54 = v81;
      v55 = &v6[*(int *)(v81 + 20)];
      v56 = *(_QWORD *)v55;
      v57 = *((_QWORD *)v55 + 1);
      v58 = swift_bridgeObjectRetain();
      v59 = LocalizedStringKey.init(_:)(v56, v57, v58);
      v60 = v82;
      AccessibilityCustomContentKey.init(_:)(v59);
      v61 = &v6[*(int *)(v54 + 24)];
      v62 = *((_QWORD *)v61 + 1);
      v83[0] = *(_QWORD *)v61;
      v83[1] = v62;
      v63 = sub_100114EF8();
      swift_bridgeObjectRetain();
      v64 = Text.init<A>(_:)(v83, &type metadata for String, v63);
      AccessibilityCustomContentEntry.init(_:value:importance:)(v60, v64, v66, v65 & 1, v67, 0);
      sub_1000215BC((uint64_t)v6, _s14ChartViewModelV26SunEventAccessibilityModelVMa);
      v50 = v84;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1006062DC();
        v53 = v78;
        v50 = v84;
      }
      v68 = v50[2];
      if (v68 >= v50[3] >> 1)
      {
        sub_1006062DC();
        v53 = v78;
        v50 = v84;
      }
      v50[2] = v68 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))((unint64_t)v50+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v68, v53, v80);
      v84 = v50;
      v52 += v79;
      --v49;
    }
    while (v49);
    swift_bridgeObjectRelease();
    v46 = v76;
  }
  v69 = (uint64_t)v74;
  v70 = (uint64_t)v77;
  ModifiedContent<>.accessibilityCustomContent(_:)(v50, v46);
  swift_bridgeObjectRelease();
  sub_100021A14(v70, &qword_100BF9E18);
  sub_1000787D4(v69, v75, &qword_100BF9E18);
}

void sub_10073FF54(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  _QWORD __src[27];
  _BYTE __dst[216];
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  _QWORD v44[27];

  v44[0] = 0;
  *(double *)&v4 = COERCE_DOUBLE(ChartProxy.position<A>(forY:)(v44, &type metadata for Int, &protocol witness table for Int));
  if ((v5 & 1) != 0)
  {
    sub_1007475CC(__dst);
  }
  else
  {
    v6 = *(double *)&v4;
    v7 = type metadata accessor for SunriseSunsetInteractiveChartView(0);
    v8 = a1 + *(int *)(v7 + 44);
    v9 = v8 + *(int *)(_s14ChartViewModelVMa(0) + 28);
    swift_bridgeObjectRetain();
    LinearGradient.init(gradient:startPoint:endPoint:)(&v24, v10, 0.0, 1.0, 0.0, 0.0);
    v11 = v24;
    v21 = v25;
    v12 = v26;
    v13 = v27;
    v14 = ChartProxy.plotSize.getter(v25);
    v15 = *(double *)(a1 + *(int *)(v7 + 56)) * 0.5 + v6;
    static Alignment.center.getter(v16);
    v17 = _FrameLayout.init(width:height:alignment:)(*(_QWORD *)&v14, 0, *(_QWORD *)&v15, 0);
    v18 = *(_QWORD *)(v9 + 8);
    v33 = v11;
    v34 = v21;
    v35 = v12;
    v36 = v13;
    v37 = 256;
    v38 = v28;
    v39 = v29;
    v40 = v30;
    v41 = v31;
    v42 = v32;
    v43 = v18;
    v19 = static Alignment.topLeading.getter(v17);
    sub_1009467B0(__src, 0, 1, 0, 1, 0x7FF0000000000000, 0, 0, 1, 0, 1, 0x7FF0000000000000, 0, v19, v20);
    sub_100158858(&v24);
    memcpy(__dst, __src, sizeof(__dst));
    LocationSearchEntityFromStringResolver.init()();
  }
  sub_1000787D4((uint64_t)__dst, (uint64_t)v44, &qword_100C03140);
  sub_1000787D4((uint64_t)v44, a2, &qword_100C03140);
}

void sub_100740158(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = sub_1000BA294(&qword_100C03188);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v6 = static Alignment.topLeading.getter(v7);
  v6[1] = v8;
  v9 = sub_1000BA294(&qword_100C03190);
  v10 = sub_100740254(a2, a1, (uint64_t)v6 + *(int *)(v9 + 44));
  static Alignment.topLeading.getter(v10);
  sub_100946894();
  sub_100021A14((uint64_t)v6, &qword_100C03188);
}

uint64_t sub_100740254@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t OpaqueTypeConformance2;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE v100[128];
  _QWORD v101[21];
  _QWORD v102[2];
  _BYTE v103[128];
  double v104;
  double v105;
  char v106;
  _BYTE v107[256];
  uint64_t v108;
  double v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  double v116;
  uint64_t v117;
  char v118;
  _BYTE v119[168];
  void (*v120)(char *, uint64_t, uint64_t);
  unsigned __int8 v121;
  uint64_t v122;
  unsigned __int8 v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD v126[2];
  __int128 v127;
  char v128;

  v98 = a3;
  v5 = type metadata accessor for LocalCoordinateSpace(0);
  v96 = *(_QWORD *)(v5 - 8);
  v97 = v5;
  __chkstk_darwin(v5);
  v95 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for ChartProxy(0);
  v80 = *(_QWORD *)(v90 - 8);
  v7 = *(_QWORD *)(v80 + 64);
  __chkstk_darwin(v90);
  v88 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for SunriseSunsetInteractiveChartView(0);
  v9 = *((_QWORD *)v8 - 1);
  v10 = __chkstk_darwin(v8);
  v81 = v11;
  v84 = (uint64_t)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)&v85 = COERCE_DOUBLE(type metadata accessor for ChartDragGestureRecognizerRepresentable(0, v10));
  v83 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v82 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_1000BA294(&qword_100C03198);
  v87 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v86 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000BA294(&qword_100C031A0);
  v93 = *(_QWORD *)(v14 - 8);
  v94 = v14;
  __chkstk_darwin(v14);
  v92 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v91 = (char *)&v72 - v17;
  v18 = a1;
  v19 = a1 + v8[5];
  v20 = *(_QWORD *)(v19 + 8);
  v21 = *(_BYTE *)(v19 + 32);
  v126[0] = *(_QWORD *)v19;
  v126[1] = v20;
  v127 = *(_OWORD *)(v19 + 16);
  v128 = v21;
  v22 = sub_1000BA294(&qword_100C031A8);
  Binding.wrappedValue.getter(v22);
  v99 = a2;
  if ((v110 & 1) != 0)
  {
    sub_1007470FC(&v108);
    sub_1000787D4((uint64_t)&v108, (uint64_t)v126, &qword_100C031B0);
  }
  else
  {
    v24 = *(double *)&v108;
    v25 = v109;
    v126[0] = *(_QWORD *)(a1 + v8[19]);
    v26 = ChartProxy.position<A>(forY:)(v126, &type metadata for Double, &protocol witness table for Double);
    v77 = v7;
    if ((v27 & 1) != 0)
    {
      *(double *)&v29 = 0.0;
      *(double *)&v73 = 0.0;
      v78 = 0;
      v79 = 0;
      *(double *)&v75 = 0.0;
      v76 = 0;
      v31 = 0;
      v32 = 0;
      v30 = 0.0;
    }
    else
    {
      v28 = v26;
      *(double *)&v29 = COERCE_DOUBLE(static Color.white.getter(v26));
      static Alignment.center.getter(v29);
      v26 = _FrameLayout.init(width:height:alignment:)(0x3FF0000000000000, 0, v28, 0);
      v78 = v121;
      v79 = v120;
      v75 = v123;
      v76 = v122;
      v73 = 256;
      v30 = v24;
      v31 = v124;
      v32 = v125;
    }
    v33 = static Alignment.center.getter(v26);
    v35 = v34;
    sub_1007409E8(v18, (uint64_t)v100);
    v36 = *(double *)(v18 + v8[20]) * 0.5;
    v37 = v24 - v36;
    v38 = v25 - v36;
    memcpy(v103, v100, sizeof(v103));
    v101[0] = v33;
    v101[1] = v35;
    memcpy(&v101[2], v100, 0x80uLL);
    *(double *)&v101[18] = v37;
    *(double *)&v101[19] = v38;
    LOBYTE(v101[20]) = 0;
    memcpy(&v107[7], v101, 0xA1uLL);
    v102[0] = v33;
    v102[1] = v35;
    v104 = v37;
    v105 = v38;
    v106 = 0;
    swift_retain();
    sub_100747564((uint64_t)v101);
    sub_100747598((uint64_t)v102);
    swift_release();
    v108 = v29;
    v109 = *(double *)&v73;
    v110 = (unint64_t)v79;
    v111 = v78;
    v112 = v76;
    v113 = v75;
    v114 = v31;
    v115 = v32;
    v116 = v30;
    v117 = 0;
    v118 = 0;
    memcpy(v119, v107, sizeof(v119));
    LocationSearchEntityFromStringResolver.init()();
    sub_1000787D4((uint64_t)&v108, (uint64_t)v126, &qword_100C031B0);
    a2 = v99;
    v7 = v77;
  }
  *(double *)&v108 = COERCE_DOUBLE(static Color.clear.getter(v23));
  LOWORD(v109) = 256;
  BYTE2(v109) = 0;
  v74 = v18;
  v39 = v84;
  sub_100080C0C(v18, v84, type metadata accessor for SunriseSunsetInteractiveChartView);
  v40 = v80;
  v79 = *(void (**)(char *, uint64_t, uint64_t))(v80 + 16);
  v41 = v88;
  v42 = v90;
  v79(v88, a2, v90);
  v43 = *(unsigned __int8 *)(v9 + 80);
  v44 = *(unsigned __int8 *)(v40 + 80);
  v45 = (v43 + 16) & ~v43;
  v77 = ((v81 + v44 + v45) & ~v44) + v7;
  v78 = v45;
  v81 = (v81 + v44 + v45) & ~v44;
  v46 = v81;
  v76 = v43 | v44 | 7;
  v47 = swift_allocObject(&unk_100B8E0B8, v77, v76);
  sub_10007802C(v39, v47 + v45, type metadata accessor for SunriseSunsetInteractiveChartView);
  v80 = *(_QWORD *)(v40 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v80)(v47 + v46, v41, v42);
  v48 = v82;
  ChartDragGestureRecognizerRepresentable.init(isRecognizedHandler:)(sub_100747108, v47);
  *(double *)&v49 = COERCE_DOUBLE(sub_1000BA294(&qword_100BF26E8));
  v75 = v49;
  v50 = sub_1005AB438();
  sub_100748080((uint64_t)&qword_100BF26F8);
  v52 = v51;
  v53 = v86;
  v54 = v49;
  v55 = v85;
  View.gestureRecognizer<A>(_:)(v48, v54, v85, v50, v51);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v48, v55);
  swift_release();
  sub_100080C0C(v74, v39, type metadata accessor for SunriseSunsetInteractiveChartView);
  v79(v41, v99, v42);
  v56 = swift_allocObject(&unk_100B8E0E0, v77, v76);
  sub_10007802C(v39, v56 + v78, type metadata accessor for SunriseSunsetInteractiveChartView);
  v57 = ((uint64_t (*)(uint64_t, char *, uint64_t))v80)(v56 + v81, v41, v42);
  v58 = v95;
  static CoordinateSpaceProtocol<>.local.getter(v57);
  v108 = v75;
  v109 = *(double *)&v55;
  v110 = v50;
  v111 = v52;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v108, &opaque type descriptor for <<opaque return type of View.gestureRecognizer<A>(_:)>>, 1);
  v60 = v92;
  v61 = v89;
  v62 = v97;
  View.onContinuousHover<A>(coordinateSpace:perform:)(v58, sub_1007473C8, v56, v89, v97, OpaqueTypeConformance2, &protocol witness table for LocalCoordinateSpace);
  v63 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v96 + 8))(v58, v62, v63);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v53, v61);
  v65 = v93;
  v64 = v94;
  v66 = v91;
  (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v91, v60, v94);
  sub_1000787D4((uint64_t)v126, (uint64_t)v102, &qword_100C031B0);
  v67 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
  v67(v60, v66, v64);
  sub_1000787D4((uint64_t)v102, (uint64_t)v107, &qword_100C031B0);
  v68 = v98;
  sub_1000787D4((uint64_t)v107, v98, &qword_100C031B0);
  v69 = sub_1000BA294(&qword_100C031B8);
  v67((char *)(v68 + *(int *)(v69 + 48)), v60, v64);
  sub_1007474A0((uint64_t)v107);
  v70 = *(void (**)(char *, uint64_t))(v65 + 8);
  v70(v66, v64);
  v70(v60, v64);
  sub_1000787D4((uint64_t)v102, (uint64_t)&v108, &qword_100C031B0);
  return sub_1007474A0((uint64_t)&v108);
}

double sub_1007409E8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  __int128 v22;

  v4 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemBackgroundColor");
  v11 = Color.init(_:)(v4);
  v5 = type metadata accessor for SunriseSunsetInteractiveChartView(0);
  v6 = *(double *)(a1 + *(int *)(v5 + 80));
  static Alignment.center.getter(v5);
  v7 = _FrameLayout.init(width:height:alignment:)(*(_QWORD *)&v6, 0, *(_QWORD *)&v6, 0);
  v8 = static Color.white.getter(v7);
  v9 = v6 - *(double *)(a1 + *(int *)(v5 + 84));
  static Alignment.center.getter(v8);
  _FrameLayout.init(width:height:alignment:)(*(_QWORD *)&v9, 0, *(_QWORD *)&v9, 0);
  *(_QWORD *)a2 = v11;
  *(_WORD *)(a2 + 8) = 256;
  *(_QWORD *)(a2 + 16) = v12;
  *(_BYTE *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 32) = v14;
  *(_BYTE *)(a2 + 40) = v15;
  *(_QWORD *)(a2 + 48) = v16;
  *(_QWORD *)(a2 + 56) = v17;
  *(_QWORD *)(a2 + 64) = v8;
  *(_WORD *)(a2 + 72) = 256;
  *(_QWORD *)(a2 + 80) = v18;
  *(_BYTE *)(a2 + 88) = v19;
  *(_QWORD *)(a2 + 96) = v20;
  *(_BYTE *)(a2 + 104) = v21;
  result = *(double *)&v22;
  *(_OWORD *)(a2 + 112) = v22;
  return result;
}

void sub_100740B50(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  char v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  char v37;

  v10 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v10);
  v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)v32 - v14;
  v16 = sub_1000BA294(&qword_100BCB0A0);
  __chkstk_darwin(v16);
  v18 = (char *)v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)v32 - v20;
  if ((a3 & 1) != 0)
  {
    v24 = (uint64_t *)(a4 + *(int *)(type metadata accessor for SunriseSunsetInteractiveChartView(0) + 20));
    v25 = v24[1];
    v26 = *((_BYTE *)v24 + 32);
    v34 = *v24;
    v35 = v25;
    v36 = *((_OWORD *)v24 + 1);
    v37 = v26;
    v32[0] = a1;
    v32[1] = a2;
    v33 = 1;
    v27 = sub_1000BA294(&qword_100C031A8);
    Binding.wrappedValue.setter(v32, v27);
    v28 = type metadata accessor for DetailChartDataElement(0);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v21, 1, 1, v28);
    sub_100037768((uint64_t)v21, (uint64_t)v18, &qword_100BCB0A0);
    v29 = sub_1000BA294(&qword_100C02ED0);
    Binding.wrappedValue.setter(v18, v29);
    sub_100021A14((uint64_t)v21, &qword_100BCB0A0);
    v30 = type metadata accessor for Date(0);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 1, 1, v30);
    sub_100037768((uint64_t)v15, (uint64_t)v12, (uint64_t *)&unk_100BD35A0);
    v31 = sub_1000BA294(&qword_100BDD670);
    State.wrappedValue.setter(v12, v31);
    sub_100021A14((uint64_t)v15, (uint64_t *)&unk_100BD35A0);
  }
  else
  {
    v22 = type metadata accessor for Date(0);
    ChartProxy.value<A>(atX:as:)(v22, v22, &protocol witness table for Date, *(double *)&a1);
    sub_100037768((uint64_t)v15, (uint64_t)v12, (uint64_t *)&unk_100BD35A0);
    v23 = sub_1000BA294(&qword_100BDD670);
    State.wrappedValue.setter(v12, v23);
    sub_100021A14((uint64_t)v15, (uint64_t *)&unk_100BD35A0);
    sub_100740DE0(a5);
  }
}

void sub_100740DE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  double v26;
  char v27;
  char v28;
  uint64_t (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  char v76;
  double v77;
  uint64_t v78;
  __int128 v79;
  char v80;

  v70 = a1;
  v2 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v2);
  v69 = (uint64_t)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v61 - v5);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v61 - v12;
  v14 = sub_1000BA294(&qword_100BCB0A0);
  __chkstk_darwin(v14);
  v73 = (uint64_t)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v72 = (char *)&v61 - v17;
  __chkstk_darwin(v18);
  v20 = (char *)&v61 - v19;
  v21 = type metadata accessor for DetailChartDataElement(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = v1;
  sub_1007443B8((uint64_t)v20);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v20, 1, v21) == 1)
  {
    sub_100021A14((uint64_t)v20, &qword_100BCB0A0);
LABEL_9:
    v53 = (uint64_t)v72;
    v54 = v73;
    v55 = v71;
    v56 = v55 + *(int *)(type metadata accessor for SunriseSunsetInteractiveChartView(0) + 20);
    v57 = *(_QWORD *)(v56 + 8);
    v58 = *(_BYTE *)(v56 + 32);
    v77 = *(double *)v56;
    v78 = v57;
    v79 = *(_OWORD *)(v56 + 16);
    v80 = v58;
    v74 = 0.0;
    v75 = 0;
    v76 = 1;
    v59 = sub_1000BA294(&qword_100C031A8);
    Binding.wrappedValue.setter(&v74, v59);
    _s7Weather24LocationCompositionStateOwst_0(v53, 1, 1, v21);
    sub_100037768(v53, v54, &qword_100BCB0A0);
    v60 = sub_1000BA294(&qword_100C02ED0);
    Binding.wrappedValue.setter(v54, v60);
    sub_100021A14(v53, &qword_100BCB0A0);
    return;
  }
  v67 = v6;
  v68 = v10;
  v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v22 + 32))(v24, v20, v21);
  DetailChartDataElement.date.getter(v25);
  v26 = COERCE_DOUBLE(ChartProxy.position<A>(forX:)(v13, v7, &protocol witness table for Date));
  v28 = v27;
  v29 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
  v30 = v29(v13, v7);
  if ((v28 & 1) != 0
    || (v77 = DetailChartDataElement.value.getter(v30),
        v31 = ChartProxy.position<A>(forY:)(&v77, &type metadata for Double, &protocol witness table for Double),
        (v32 & 1) != 0))
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
    goto LABEL_9;
  }
  v61 = v31;
  v64 = (void (*)(char *, uint64_t))v29;
  v65 = v21;
  v66 = v8;
  v33 = (uint64_t)v68;
  DetailChartDataElement.date.getter(v31);
  v34 = (int *)type metadata accessor for SunriseSunsetInteractiveChartView(0);
  v35 = v34[10];
  v36 = v71;
  objc_msgSend(*(id *)(v71 + v35), "prepare");
  v37 = v36 + v34[6];
  v38 = sub_1000BA294(&qword_100BDD670);
  v39 = v67;
  v62 = v38;
  v63 = v37;
  State.wrappedValue.getter(v67, v38);
  LOBYTE(v37) = sub_1004B4D58(v33, (uint64_t)v39);
  sub_100021A14((uint64_t)v39, (uint64_t *)&unk_100BD35A0);
  if ((v37 & 1) != 0)
    objc_msgSend(*(id *)(v36 + v35), "selectionChanged");
  v40 = sub_100744548(v70, v26);
  v41 = v36 + v34[5];
  v42 = *(_QWORD *)(v41 + 8);
  v43 = *(_BYTE *)(v41 + 32);
  v77 = *(double *)v41;
  v78 = v42;
  v79 = *(_OWORD *)(v41 + 16);
  v80 = v43;
  v74 = v40;
  v75 = v61;
  v76 = 0;
  v44 = sub_1000BA294(&qword_100C031A8);
  Binding.wrappedValue.setter(&v74, v44);
  v45 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
  v46 = v22;
  v47 = (uint64_t)v72;
  v48 = v65;
  v45(v72, v24, v65);
  _s7Weather24LocationCompositionStateOwst_0(v47, 0, 1, v48);
  v49 = v73;
  sub_100037768(v47, v73, &qword_100BCB0A0);
  v50 = sub_1000BA294(&qword_100C02ED0);
  Binding.wrappedValue.setter(v49, v50);
  sub_100021A14(v47, &qword_100BCB0A0);
  v51 = v68;
  (*(void (**)(_QWORD *, char *, uint64_t))(v66 + 16))(v39, v68, v7);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v39, 0, 1, v7);
  v52 = v69;
  sub_100037768((uint64_t)v39, v69, (uint64_t *)&unk_100BD35A0);
  State.wrappedValue.setter(v52, v62);
  sub_100021A14((uint64_t)v39, (uint64_t *)&unk_100BD35A0);
  v64(v51, v7);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v24, v48);
}

void sub_100741330(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  char v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  char v36;

  v9 = sub_1000BA294(&qword_100BCB0A0);
  __chkstk_darwin(v9);
  v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)v31 - v13;
  v15 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v15);
  v17 = (char *)v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)v31 - v19;
  if ((a3 & 1) != 0)
  {
    v23 = (uint64_t *)(a4 + *(int *)(type metadata accessor for SunriseSunsetInteractiveChartView(0) + 20));
    v24 = v23[1];
    v25 = *((_BYTE *)v23 + 32);
    v33 = *v23;
    v34 = v24;
    v35 = *((_OWORD *)v23 + 1);
    v36 = v25;
    v31[0] = 0;
    v31[1] = 0;
    v32 = 1;
    v26 = sub_1000BA294(&qword_100C031A8);
    Binding.wrappedValue.setter(v31, v26);
    v27 = type metadata accessor for DetailChartDataElement(0);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 1, 1, v27);
    sub_100037768((uint64_t)v14, (uint64_t)v11, &qword_100BCB0A0);
    v28 = sub_1000BA294(&qword_100C02ED0);
    Binding.wrappedValue.setter(v11, v28);
    sub_100021A14((uint64_t)v14, &qword_100BCB0A0);
    v29 = type metadata accessor for Date(0);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v20, 1, 1, v29);
    sub_100037768((uint64_t)v20, (uint64_t)v17, (uint64_t *)&unk_100BD35A0);
    v30 = sub_1000BA294(&qword_100BDD670);
    State.wrappedValue.setter(v17, v30);
    sub_100021A14((uint64_t)v20, (uint64_t *)&unk_100BD35A0);
  }
  else
  {
    v21 = type metadata accessor for Date(0);
    ChartProxy.value<A>(atX:as:)(v21, v21, &protocol witness table for Date, *(double *)&a1);
    sub_100037768((uint64_t)v20, (uint64_t)v17, (uint64_t *)&unk_100BD35A0);
    v22 = sub_1000BA294(&qword_100BDD670);
    State.wrappedValue.setter(v17, v22);
    sub_100021A14((uint64_t)v20, (uint64_t *)&unk_100BD35A0);
    sub_100740DE0(a5);
  }
}

uint64_t sub_1007415B4(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v8 = type metadata accessor for Color.RGBColorSpace(0);
  __chkstk_darwin(v8);
  sub_1000BCED8();
  v9 = sub_1000BA294(&qword_100BCB960);
  v10 = swift_allocObject(v9, 112, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1009891E0;
  sub_1000B4D4C();
  v11 = Color.init(_:white:opacity:)(v4, 1.0, a1);
  *(_QWORD *)(v10 + 32) = Gradient.Stop.init(color:location:)(v11);
  *(_QWORD *)(v10 + 40) = v12;
  sub_1000B4D4C();
  v13 = sub_1000E7D58();
  *(_QWORD *)(v10 + 48) = Gradient.Stop.init(color:location:)(v13);
  *(_QWORD *)(v10 + 56) = v14;
  sub_1000B4D4C();
  v15 = Color.init(_:white:opacity:)(v4, 1.0, a3);
  *(_QWORD *)(v10 + 64) = Gradient.Stop.init(color:location:)(v15);
  *(_QWORD *)(v10 + 72) = v16;
  sub_1000B4D4C();
  v17 = sub_1000E7D58();
  *(_QWORD *)(v10 + 80) = Gradient.Stop.init(color:location:)(v17);
  *(_QWORD *)(v10 + 88) = v18;
  sub_1000B4D4C();
  v19 = Color.init(_:white:opacity:)(v4, 1.0, a4);
  *(_QWORD *)(v10 + 96) = Gradient.Stop.init(color:location:)(v19);
  *(_QWORD *)(v10 + 104) = v20;
  return Gradient.init(stops:)(v10);
}

uint64_t sub_10074170C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v21;
  uint64_t v22;

  v2 = sub_1000BA294(&qword_100BD78B8);
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v21 - v6;
  v8 = LocalizedStringKey.init(stringLiteral:)(121, 0xE100000000000000);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v22 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for SunriseSunsetInteractiveChartView(0) + 76));
  static PlottableValue.value(_:_:)(v8, v10, v12 & 1, v14, &v22, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = LocalizedStringKey.init(stringLiteral:)(121, 0xE100000000000000);
  v22 = 0;
  static PlottableValue.value(_:_:)(v15, v17, v16 & 1, v18, &v22, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease();
  v19 = swift_bridgeObjectRelease();
  return RectangleMark.init<A>(xStart:xEnd:yStart:yEnd:)(0, 1, 0, 1, v7, v4, &type metadata for Double, &protocol witness table for Double, v19);
}

void sub_10074187C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t (*v46)(uint64_t, unint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v57[2];

  sub_1000BA294(&qword_100BDCD58);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100099234();
  sub_1000BA294(&qword_100BD78B8);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100088FDC();
  v49 = v11;
  v12 = sub_10009876C();
  v55 = type metadata accessor for Date(v12);
  v53 = *(_QWORD *)(v55 - 8);
  sub_10009D98C();
  __chkstk_darwin(v13);
  sub_100079F58();
  v14 = sub_1000BD520();
  sub_10009D5D4();
  __chkstk_darwin(v15);
  sub_1000BCED8();
  sub_1000BA294(&qword_100BD78D8);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  sub_100088FDC();
  v54 = v17;
  v18 = *a1;
  v52 = LocalizedStringKey.init(stringLiteral:)(1702125924, 0xE400000000000000);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  v25 = sub_1000DA1D0();
  if ((v18 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  v26 = *(_QWORD *)(a2 + *(int *)(v25 + 44));
  if (v18 >= *(_QWORD *)(v26 + 16))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v47 = v7;
  v48 = *(int *)(v25 + 44);
  v27 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v28 = *(_QWORD *)(v6 + 72) * v18;
  v46 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
  v29 = v46(v5, v26 + v27 + v28, v14);
  DetailChartDataElement.date.getter(v29);
  sub_10009C05C();
  static PlottableValue.value(_:_:)(v52, v20, v22 & 1, v24, v4, v55, &protocol witness table for Date);
  swift_bridgeObjectRelease();
  sub_10009895C();
  sub_100099254(v4, *(uint64_t (**)(uint64_t, uint64_t))(v53 + 8));
  v30 = LocalizedStringKey.init(stringLiteral:)(0x65756C6176, 0xE500000000000000);
  v34 = *(_QWORD *)(a2 + v48);
  if (v18 < *(_QWORD *)(v34 + 16))
  {
    v35 = v30;
    v36 = v31;
    v37 = v32;
    v38 = v33;
    v39 = v46(v5, v34 + v27 + v28, v14);
    v40 = DetailChartDataElement.value.getter(v39);
    sub_10009C05C();
    *(double *)v57 = v40;
    static PlottableValue.value(_:_:)(v35, v36, v37 & 1, v38, v57, &type metadata for Double, &protocol witness table for Double);
    sub_10009895C();
    swift_bridgeObjectRelease();
    v41 = LocalizedStringKey.init(stringLiteral:)(0x53657369726E7553, 0xED00007465736E75);
    v57[0] = a3;
    v57[1] = a4;
    static PlottableValue.value(_:_:)(v41, v43, v42 & 1, v44, v57, &type metadata for String, &protocol witness table for String);
    sub_10009895C();
    v45 = swift_bridgeObjectRelease();
    LineMark.init<A, B, C>(x:y:series:)(v54, v49, v47, v55, &type metadata for Double, &type metadata for String, &protocol witness table for Date, &protocol witness table for Double, v45, &protocol witness table for String);
    sub_10009990C();
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t sub_100741B90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v21;
  uint64_t v22;

  v2 = sub_1000BA294(&qword_100BD78B8);
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v21 - v6;
  v8 = LocalizedStringKey.init(stringLiteral:)(121, 0xE100000000000000);
  v22 = 0;
  static PlottableValue.value(_:_:)(v8, v10, v9 & 1, v11, &v22, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = LocalizedStringKey.init(stringLiteral:)(121, 0xE100000000000000);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v22 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for SunriseSunsetInteractiveChartView(0) + 72));
  static PlottableValue.value(_:_:)(v12, v14, v16 & 1, v18, &v22, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease();
  v19 = swift_bridgeObjectRelease();
  return RectangleMark.init<A>(xStart:xEnd:yStart:yEnd:)(0, 1, 0, 1, v7, v4, &type metadata for Double, &protocol witness table for Double, v19);
}

uint64_t sub_100741D08@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  __n128 v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t OpaqueTypeConformance2;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  double v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v62 = a1;
  v63 = a2;
  v2 = type metadata accessor for BasicChartSymbolShape(0);
  v3 = *(_QWORD *)(v2 - 8);
  v60 = v2;
  v61 = v3;
  __chkstk_darwin(v2);
  v59 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000BA294(&qword_100BD78B8);
  __chkstk_darwin(v5);
  v54 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v50 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BD78D8);
  __chkstk_darwin(v10);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)&v13 = COERCE_DOUBLE(type metadata accessor for PointMark(0));
  v53 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000BA294(&qword_100BF42B8);
  v17 = *(_QWORD *)(v16 - 8);
  v55 = v16;
  v56 = v17;
  __chkstk_darwin(v16);
  v51 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000BA294(&qword_100C03250);
  v20 = *(_QWORD *)(v19 - 8);
  v57 = v19;
  v58 = v20;
  __chkstk_darwin(v19);
  v52 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = LocalizedStringKey.init(stringLiteral:)(1702125924, 0xE400000000000000);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  DetailChartDataElement.date.getter(v22);
  static PlottableValue.value(_:_:)(v22, v24, v26 & 1, v28, v9, v7, &protocol witness table for Date);
  swift_bridgeObjectRelease(v28);
  v29 = swift_bridgeObjectRelease(v24);
  (*(void (**)(char *, uint64_t, __n128))(v50 + 8))(v9, v7, v29);
  v30 = LocalizedStringKey.init(stringLiteral:)(0x65756C6176, 0xE500000000000000);
  v32 = v31;
  LOBYTE(v28) = v33;
  v35 = v34;
  v64 = DetailChartDataElement.value.getter();
  v36 = v54;
  static PlottableValue.value(_:_:)(v30, v32, v28 & 1, v35, &v64, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease(v35);
  v37 = swift_bridgeObjectRelease(v32);
  PointMark.init<A, B>(x:y:)(v12, v36, v7, &type metadata for Double, &protocol witness table for Date, &protocol witness table for Double, v37);
  v38 = v51;
  ChartContent.symbolSize(_:)(v13, &protocol witness table for PointMark, 16.0);
  v39 = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v15, v13);
  v40 = v59;
  static ChartSymbolShape<>.circle.getter(v39);
  v64 = *(double *)&v13;
  v65 = &protocol witness table for PointMark;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v64, &opaque type descriptor for <<opaque return type of ChartContent.symbolSize(_:)>>, 1);
  sub_100748080((uint64_t)&qword_100BD78E8);
  v43 = v42;
  v44 = v52;
  v45 = *(double *)&v55;
  v46 = (void *)v60;
  ChartContent.symbol<A>(_:)(v40, v55, v60, OpaqueTypeConformance2, v42);
  (*(void (**)(char *, void *))(v61 + 8))(v40, v46);
  (*(void (**)(char *, double))(v56 + 8))(v38, COERCE_DOUBLE(*(_QWORD *)&v45));
  v67 = v43;
  v68 = v62;
  v64 = v45;
  v65 = v46;
  v66 = OpaqueTypeConformance2;
  v47 = swift_getOpaqueTypeConformance2(&v64, &opaque type descriptor for <<opaque return type of ChartContent.symbol<A>(_:)>>, 1);
  v48 = v57;
  ChartContent.foregroundStyle<A>(_:)(&v68, v57, &type metadata for Color, v47, &protocol witness table for Color);
  return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v44, v48);
}

uint64_t sub_10074213C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD);
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t OpaqueTypeConformance2;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, _QWORD, uint64_t);
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  void (*v65)(char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  char *v74;
  void (*v75)(char *, _QWORD, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;

  v86 = a2;
  v3 = type metadata accessor for Color.RGBColorSpace(0);
  v4 = *(_QWORD *)(v3 - 8);
  v76 = v3;
  __chkstk_darwin(v3);
  v6 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_1000BA294(&qword_100C03248);
  v84 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v85 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v83 = (char *)&v68 - v9;
  __chkstk_darwin(v10);
  v82 = (char *)&v68 - v11;
  __chkstk_darwin(v12);
  v81 = (char *)&v68 - v13;
  __chkstk_darwin(v14);
  v80 = (char *)&v68 - v15;
  __chkstk_darwin(v16);
  v89 = (char *)&v68 - v17;
  v18 = a1 + *(int *)(type metadata accessor for SunriseSunsetInteractiveChartView(0) + 44);
  v78 = v18;
  v77 = _s14ChartViewModelVMa(0);
  v19 = *(_QWORD *)(v18 + *(int *)(v77 + 32));
  v20 = *(void (**)(_QWORD))(v4 + 104);
  v74 = v6;
  v75 = (void (*)(char *, _QWORD, uint64_t))v20;
  v21 = v6;
  v22 = v6;
  v23 = enum case for Color.RGBColorSpace.sRGB(_:);
  v73 = enum case for Color.RGBColorSpace.sRGB(_:);
  v20(v22);
  v24 = Color.init(_:white:opacity:)(v21, 0.5, 1.0);
  v94 = v19;
  swift_bridgeObjectRetain();
  v88 = sub_1000BA294(&qword_100BDCD30);
  v25 = type metadata accessor for Date(0);
  v26 = sub_1000BA294(&qword_100C03278);
  v70 = v26;
  sub_100748054((uint64_t)&unk_100BDCD40);
  v28 = v27;
  v69 = v27;
  v29 = sub_100075EB0(&qword_100C03250);
  v30 = sub_100075EB0(&qword_100BF42B8);
  v31 = type metadata accessor for BasicChartSymbolShape(255);
  v90 = type metadata accessor for PointMark(255);
  v91 = &protocol witness table for PointMark;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v90, &opaque type descriptor for <<opaque return type of ChartContent.symbolSize(_:)>>, 1);
  sub_100748080((uint64_t)&qword_100BD78E8);
  v90 = v30;
  v91 = (void *)v31;
  v92 = OpaqueTypeConformance2;
  v93 = v33;
  v34 = swift_getOpaqueTypeConformance2(&v90, &opaque type descriptor for <<opaque return type of ChartContent.symbol<A>(_:)>>, 1);
  v90 = v29;
  v91 = &type metadata for Color;
  v92 = v34;
  v93 = &protocol witness table for Color;
  v35 = swift_getOpaqueTypeConformance2(&v90, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
  v87 = v35;
  sub_100748080((uint64_t)&unk_100BF23C0);
  v37 = v36;
  v71 = v36;
  v38 = v24;
  v39 = v88;
  v72 = v25;
  ForEach<>.init(_:content:)(&v94, sub_100747BE4, v38, v88, v25, v26, v28, v35, v36);
  v41 = v77;
  v40 = v78;
  v42 = *(_QWORD *)(v78 + *(int *)(v77 + 36));
  v43 = v74;
  v44 = v75;
  v45 = v76;
  v75(v74, v23, v76);
  v46 = v43;
  v47 = Color.init(_:white:opacity:)(v43, 0.35, 1.0);
  v90 = v42;
  swift_bridgeObjectRetain();
  v67 = v37;
  v48 = v80;
  v49 = v39;
  v50 = v25;
  v51 = v70;
  v52 = v69;
  ForEach<>.init(_:content:)(&v90, sub_100747BE4, v47, v49, v50, v70, v69, v87, v67);
  v53 = *(_QWORD *)(v40 + *(int *)(v41 + 40));
  v44(v46, v73, v45);
  v54 = Color.init(_:white:opacity:)(v46, 0.2, 1.0);
  v90 = v53;
  swift_bridgeObjectRetain();
  v55 = v81;
  ForEach<>.init(_:content:)(&v90, sub_100747BE4, v54, v88, v72, v51, v52, v87, v71);
  v56 = v84;
  v57 = *(void (**)(char *, char *, uint64_t))(v84 + 16);
  v58 = v82;
  v59 = v89;
  v60 = v79;
  v57(v82, v89, v79);
  v90 = (uint64_t)v58;
  v61 = v83;
  v62 = v48;
  v57(v83, v48, v60);
  v91 = v61;
  v63 = v61;
  v64 = v85;
  v57(v85, v55, v60);
  v92 = (uint64_t)v64;
  sub_10073BFF8(&v90, v86);
  v65 = *(void (**)(char *, uint64_t))(v56 + 8);
  v65(v55, v60);
  v65(v62, v60);
  v65(v59, v60);
  v65(v64, v60);
  v65(v63, v60);
  return ((uint64_t (*)(char *, uint64_t))v65)(v58, v60);
}

void sub_100742674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_1007442F4(a1, (uint64_t)&qword_100C03020, (uint64_t)&unk_100C03040, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

void sub_100742688()
{
  sub_100743190();
}

uint64_t sub_100742690@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  __n128 v46;
  char *v47;
  double v48;
  uint64_t v49;
  char *v50;
  uint64_t OpaqueTypeConformance2;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  double v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  __n128 v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  __n128 v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  void (*v109)(char *, char *, uint64_t);
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  void (*v115)(char *, uint64_t);
  void (*v116)(char *, uint64_t);
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  void (*v123)(char *, uint64_t, __n128);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154[8];
  uint64_t v155;
  double v156;
  void *v157;
  void *v158;
  unint64_t v159;
  uint64_t v160;

  v153 = a1;
  v144 = a2;
  v139 = type metadata accessor for AnnotationPosition(0, a3);
  v137 = *(_QWORD *)(v139 - 8);
  __chkstk_darwin(v139);
  v134 = (char *)&v118 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_1000BA294(&qword_100C03080);
  v143 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v135 = (char *)&v118 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = sub_1000BA294(&qword_100C03078);
  v140 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v136 = (char *)&v118 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v138 = (char *)&v118 - v7;
  v133 = type metadata accessor for Color.RGBColorSpace(0);
  v132 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v131 = (char *)&v118 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = type metadata accessor for BasicChartSymbolShape(0);
  v130 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v127 = (char *)&v118 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BD78B8);
  __chkstk_darwin(v10);
  v147 = (char *)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145);
  v14 = (char *)&v118 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000BA294(&qword_100BD78D8);
  __chkstk_darwin(v15);
  v17 = (char *)&v118 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = type metadata accessor for PointMark(0);
  v125 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v146 = (char *)&v118 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_1000BA294(&qword_100BF42B8);
  v124 = *(_QWORD *)(v122 - 8);
  __chkstk_darwin(v122);
  v20 = (char *)&v118 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = sub_1000BA294(&qword_100C03250);
  v128 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126);
  v121 = (char *)&v118 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1000BA294(&qword_100C03278);
  v151 = *(_QWORD *)(v22 - 8);
  v152 = v22;
  __chkstk_darwin(v22);
  v148 = (char *)&v118 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v150 = (char *)&v118 - v25;
  v26 = LocalizedStringKey.init(stringLiteral:)(120, 0xE100000000000000);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  v33 = v153 + *(int *)(type metadata accessor for SunriseSunsetInteractiveChartView(0) + 44);
  v34 = _s14ChartViewModelVMa(0);
  v120 = v33 + *(int *)(v34 + 20);
  DetailChartDataElement.date.getter(v34);
  v119 = v17;
  v35 = v145;
  static PlottableValue.value(_:_:)(v26, v28, v30 & 1, v32, v14, v145, &protocol witness table for Date);
  swift_bridgeObjectRelease();
  v36 = swift_bridgeObjectRelease();
  v123 = *(void (**)(char *, uint64_t, __n128))(v12 + 8);
  v37 = v35;
  v123(v14, v35, v36);
  v38 = LocalizedStringKey.init(stringLiteral:)(121, 0xE100000000000000);
  v40 = v39;
  LOBYTE(v28) = v41;
  v43 = v42;
  v156 = DetailChartDataElement.value.getter(v38);
  v44 = v28 & 1;
  v45 = v147;
  static PlottableValue.value(_:_:)(v38, v40, v44, v43, &v156, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease();
  v46 = swift_bridgeObjectRelease();
  v47 = v146;
  PointMark.init<A, B>(x:y:)(v17, v45, v37, &type metadata for Double, &protocol witness table for Date, &protocol witness table for Double, v46);
  v48 = *(double *)&v149;
  ChartContent.symbolSize(_:)(v149, &protocol witness table for PointMark, 256.0);
  v125 = *(_QWORD *)(v125 + 8);
  v49 = ((uint64_t (*)(char *, _QWORD))v125)(v47, *(_QWORD *)&v48);
  v50 = v127;
  static ChartSymbolShape<>.circle.getter(v49);
  v156 = v48;
  v157 = &protocol witness table for PointMark;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v156, &opaque type descriptor for <<opaque return type of ChartContent.symbolSize(_:)>>, 1);
  sub_100748080((uint64_t)&qword_100BD78E8);
  v53 = v52;
  v54 = v121;
  v55 = *(double *)&v122;
  v56 = v129;
  ChartContent.symbol<A>(_:)(v50, v122, v129, OpaqueTypeConformance2, v52);
  (*(void (**)(char *, uint64_t))(v130 + 8))(v50, v56);
  (*(void (**)(char *, double))(v124 + 8))(v20, COERCE_DOUBLE(*(_QWORD *)&v55));
  v57 = v131;
  (*(void (**)(char *, _QWORD, uint64_t))(v132 + 104))(v131, enum case for Color.RGBColorSpace.sRGB(_:), v133);
  v58 = Color.init(_:white:opacity:)(v57, 0.3, 1.0);
  v159 = v53;
  v160 = v58;
  v156 = v55;
  v157 = (void *)v56;
  v158 = (void *)OpaqueTypeConformance2;
  v59 = swift_getOpaqueTypeConformance2(&v156, &opaque type descriptor for <<opaque return type of ChartContent.symbol<A>(_:)>>, 1);
  v60 = v148;
  v61 = v126;
  ChartContent.foregroundStyle<A>(_:)(&v160, v126, &type metadata for Color, v59, &protocol witness table for Color);
  v62 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v128 + 8))(v54, v61, v62);
  (*(void (**)(char *, char *, uint64_t))(v151 + 32))(v150, v60, v152);
  v63 = LocalizedStringKey.init(stringLiteral:)(120, 0xE100000000000000);
  v65 = v64;
  LOBYTE(v56) = v66;
  v68 = v67;
  DetailChartDataElement.date.getter(v63);
  v69 = v119;
  v70 = v63;
  v71 = v145;
  static PlottableValue.value(_:_:)(v70, v65, v56 & 1, v68, v14, v145, &protocol witness table for Date);
  swift_bridgeObjectRelease();
  v72 = swift_bridgeObjectRelease();
  v73 = v71;
  v123(v14, v71, v72);
  v74 = LocalizedStringKey.init(stringLiteral:)(121, 0xE100000000000000);
  v76 = v75;
  LOBYTE(v56) = v77;
  v79 = v78;
  v156 = DetailChartDataElement.value.getter(v74);
  v80 = v56 & 1;
  v81 = v147;
  static PlottableValue.value(_:_:)(v74, v76, v80, v79, &v156, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease();
  v82 = swift_bridgeObjectRelease();
  v83 = v146;
  v84 = PointMark.init<A, B>(x:y:)(v69, v81, v73, &type metadata for Double, &protocol witness table for Date, &protocol witness table for Double, v82);
  v85 = v134;
  v86 = static AnnotationPosition.overlay.getter(v84);
  v155 = v153;
  v87 = static Alignment.center.getter(v86);
  v89 = v88;
  v90 = sub_1000BA294(&qword_100C03088);
  v91 = sub_100746DC0();
  v92 = v135;
  v93 = v89;
  v94 = *(double *)&v149;
  ChartContent.annotation<A>(position:alignment:spacing:content:)(v85, v87, v93, 0, 1, sub_100747B10, v154, v149, v90, &protocol witness table for PointMark, v91);
  (*(void (**)(char *, uint64_t))(v137 + 8))(v85, v139);
  v95 = ((uint64_t (*)(char *, _QWORD))v125)(v83, *(_QWORD *)&v94);
  v96 = static Color.clear.getter(v95);
  v159 = v91;
  v160 = v96;
  v156 = v94;
  v157 = (void *)v90;
  v158 = &protocol witness table for PointMark;
  v97 = swift_getOpaqueTypeConformance2(&v156, &opaque type descriptor for <<opaque return type of ChartContent.annotation<A>(position:alignment:spacing:content:)>>, 1);
  v98 = v136;
  v99 = v141;
  ChartContent.foregroundStyle<A>(_:)(&v160, v141, &type metadata for Color, v97, &protocol witness table for Color);
  v100 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v143 + 8))(v92, v99, v100);
  v101 = v140;
  v102 = v138;
  v103 = v98;
  v104 = v142;
  (*(void (**)(char *, char *, uint64_t))(v140 + 32))(v138, v98, v142);
  v106 = v150;
  v105 = v151;
  v107 = v148;
  v108 = v152;
  (*(void (**)(char *, char *, uint64_t))(v151 + 16))(v148, v150, v152);
  v156 = *(double *)&v107;
  v109 = *(void (**)(char *, char *, uint64_t))(v101 + 16);
  v110 = v101;
  v111 = v98;
  v112 = v102;
  v113 = v104;
  v109(v111, v102, v104);
  v157 = v103;
  v114 = v103;
  sub_10073C110(&v156, v144);
  v115 = *(void (**)(char *, uint64_t))(v110 + 8);
  v115(v112, v113);
  v116 = *(void (**)(char *, uint64_t))(v105 + 8);
  v116(v106, v108);
  v115(v114, v113);
  return ((uint64_t (*)(char *, uint64_t))v116)(v107, v108);
}

void sub_100743094()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t (*v5)(void);
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  __int128 v17;

  sub_10008900C();
  v5 = v4;
  sub_1000FC6F4();
  v7 = type metadata accessor for Image.ResizingMode(0, v6);
  sub_10009D5D4();
  __chkstk_darwin(v8);
  sub_100098694();
  v9 = v5();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v2, enum case for Image.ResizingMode.stretch(_:), v7);
  v10 = Image.resizable(capInsets:resizingMode:)(v2, v9, 0.0, 0.0, 0.0, 0.0);
  swift_release();
  sub_100098748(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  v11 = sub_1000DA1D0();
  v12 = *(_QWORD *)(v1 + *(int *)(v11 + 68));
  static Alignment.center.getter(v11);
  sub_1000FC578(v12, 0);
  *(_QWORD *)v0 = v10;
  *(_QWORD *)(v0 + 8) = v13;
  *(_BYTE *)(v0 + 16) = v14;
  *(_QWORD *)(v0 + 24) = v15;
  *(_BYTE *)(v0 + 32) = v16;
  *(_OWORD *)(v0 + 40) = v17;
  sub_10009D300();
}

void sub_100743188()
{
  sub_100743190();
}

void sub_100743190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;

  sub_10008900C();
  v1 = v0;
  sub_1000BA294(&qword_100C03270);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_10009883C();
  v5 = v3 - v4;
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - v7;
  v9 = sub_1000F42D4();
  v19 = 0;
  sub_1000EFA90(v9, v11, v10 & 1, v12, (uint64_t)&v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13 = sub_1000F42D4();
  v19 = v1;
  sub_1000EFA90(v13, v15, v14 & 1, v16, (uint64_t)&v19);
  swift_bridgeObjectRelease();
  v17 = swift_bridgeObjectRelease();
  RectangleMark.init<A>(xStart:xEnd:yStart:yEnd:)(0, 1, 0, 1, v8, v5, &type metadata for Int, &protocol witness table for Int, v17);
  sub_10009D300();
}

void sub_100743298(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  __n128 v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t);
  _QWORD v85[4];
  __int128 v86;
  __int128 v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111[3];
  uint64_t v112;
  uint64_t v113;
  _OWORD v114[2];
  uint64_t v115;
  _OWORD v116[2];
  uint64_t v117;
  _OWORD v118[2];
  uint64_t v119;
  _QWORD v120[62];
  _OWORD v121[2];
  uint64_t v122;
  _QWORD v123[63];

  *(_QWORD *)&v100 = a2;
  v108 = a3;
  v4 = type metadata accessor for AxisGridLine(0);
  v95 = *(_QWORD *)(v4 - 8);
  v96 = v4;
  __chkstk_darwin(v4);
  v94 = (char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_1000BA294(&qword_100BDCC88);
  v93 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v92 = (char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BF43A0);
  __chkstk_darwin(v7);
  v107 = (uint64_t)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v106 = (char *)&v86 - v10;
  v11 = type metadata accessor for AxisValueLabelOrientation(0);
  v12 = __chkstk_darwin(v11);
  v99 = (char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AxisValueLabelCollisionResolution(0, v12);
  __chkstk_darwin(v14);
  v98 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_1000BA294(&qword_100C031E8);
  v110 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v103 = (char *)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v97 = (char *)&v86 - v18;
  v20 = __chkstk_darwin(v19);
  v109 = (char *)&v86 - v21;
  v22 = type metadata accessor for AxisTick.Length(0, v20);
  __chkstk_darwin(v22);
  v24 = (char *)&v86 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for AxisTick(0);
  v90 = *(_QWORD *)(v25 - 8);
  v91 = v25;
  __chkstk_darwin(v25);
  v27 = (char *)&v86 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_1000BA294(&qword_100BDCD08);
  v89 = *(_QWORD *)(v28 - 8);
  v29 = __chkstk_darwin(v28);
  v88 = (char *)&v86 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for AxisValue(0, v29);
  v32 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v34 = (char *)&v86 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_1000BA294(&qword_100C031D8);
  __chkstk_darwin(v35);
  v102 = (uint64_t)&v86 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __chkstk_darwin(v37);
  *(_QWORD *)&v101 = (char *)&v86 - v39;
  v40 = AxisValue.isFirst.getter(v38);
  v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 16))(v34, a1, v31);
  if ((v40 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
LABEL_4:
    v44 = 1;
    v45 = v101;
    goto LABEL_8;
  }
  v42 = AxisValue.isLast.getter(v41);
  v43 = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v34, v31);
  if ((v42 & 1) != 0)
    goto LABEL_4;
  static AxisTick.Length.longestLabel.getter(v43);
  if (qword_100BC20C0 != -1)
    swift_once(&qword_100BC20C0, sub_1004049E8);
  swift_beginAccess(&qword_100CAE968, &v113, 0, 0);
  memcpy(v123, &qword_100CAE968, 0x1F0uLL);
  v46 = sub_100397408(v123);
  v47 = AxisValue.isLast.getter(v46);
  sub_10040451C((v47 & 1) == 0, (double *)v114);
  v86 = v114[1];
  v87 = v114[0];
  v48 = v115;
  sub_1003974A8(v123);
  v121[0] = v87;
  v121[1] = v86;
  v122 = v48;
  AxisTick.init(centered:length:stroke:)(2, v24, v121);
  swift_beginAccess(&qword_100CAE968, v120, 33, 0);
  sub_10040441C();
  v50 = v49;
  swift_endAccess(v120);
  v120[0] = v50;
  v51 = v88;
  v52 = v91;
  AxisMark.foregroundStyle<A>(_:)(v120, v91, &type metadata for Color, &protocol witness table for AxisTick, &protocol witness table for Color);
  v53 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v90 + 8))(v27, v52, v53);
  v45 = v101;
  (*(void (**)(_QWORD, char *, uint64_t))(v89 + 32))(v101, v51, v28);
  v44 = 0;
LABEL_8:
  v54 = 1;
  v55 = _s7Weather24LocationCompositionStateOwst_0(v45, v44, 1, v28);
  v56 = __chkstk_darwin(v55);
  v57 = v98;
  v58 = static AxisValueLabelCollisionResolution.automatic.getter(v56);
  v59 = v99;
  static AxisValueLabelOrientation.automatic.getter(v58);
  v60 = sub_1000BA294(&qword_100C031F0);
  sub_100747780((uint64_t)&unk_100C031F8);
  v85[2] = v60;
  v85[3] = v61;
  v85[1] = v85;
  v62 = v97;
  ((void (*)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, char *, char, char *, _QWORD, char, _QWORD, char, void (*)(uint64_t *@<X8>)))AxisValueLabel.init(centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:content:))(2, 0, 0, 1, 0, 0, 1, v57, 2, v59, 0, 1, 0, 1, sub_100747778);
  v63 = v104;
  v64.n128_f64[0] = (*(double (**)(char *, char *))(v110 + 32))(v109, v62);
  v65 = AxisValue.isFirst.getter(v64);
  v66 = v105;
  v67 = (uint64_t)v106;
  if ((v65 & 1) == 0)
  {
    if (qword_100BC20C0 != -1)
      swift_once(&qword_100BC20C0, sub_1004049E8);
    swift_beginAccess(&qword_100CAE968, &v112, 0, 0);
    memcpy(v120, &qword_100CAE968, sizeof(v120));
    v68 = sub_100397408(v120);
    v69 = AxisValue.isLast.getter(v68);
    sub_10040451C((v69 & 1) == 0, (double *)v116);
    v100 = v116[1];
    v101 = v116[0];
    v70 = v117;
    sub_1003974A8(v120);
    v118[0] = v101;
    v118[1] = v100;
    v119 = v70;
    v71 = v94;
    AxisGridLine.init(centered:stroke:)(2, v118);
    swift_beginAccess(&qword_100CAE968, v111, 33, 0);
    sub_10040441C();
    v73 = v72;
    swift_endAccess(v111);
    v111[0] = v73;
    v74 = v92;
    v75 = v96;
    AxisMark.foregroundStyle<A>(_:)(v111, v96, &type metadata for Color, &protocol witness table for AxisGridLine, &protocol witness table for Color);
    v76 = swift_release();
    (*(void (**)(char *, uint64_t, __n128))(v95 + 8))(v71, v75, v76);
    (*(void (**)(uint64_t, char *, uint64_t))(v93 + 32))(v67, v74, v66);
    v54 = 0;
  }
  _s7Weather24LocationCompositionStateOwst_0(v67, v54, 1, v66);
  v77 = v45;
  v78 = v45;
  v79 = v102;
  sub_100037768(v77, v102, &qword_100C031D8);
  v111[0] = v79;
  v81 = v109;
  v80 = v110;
  v82 = (uint64_t)v103;
  (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v103, v109, v63);
  v111[1] = v82;
  v83 = v107;
  sub_100037768(v67, v107, &qword_100BF43A0);
  v111[2] = v83;
  sub_10073C67C(v111, v108);
  sub_100021A14(v67, &qword_100BF43A0);
  v84 = *(void (**)(char *, uint64_t))(v80 + 8);
  v84(v81, v63);
  sub_100021A14(v78, &qword_100C031D8);
  sub_100021A14(v83, &qword_100BF43A0);
  v84((char *)v82, v63);
  sub_100021A14(v79, &qword_100C031D8);
}

void sub_100743B00(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (**v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t, __n128);
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t *v73;
  char *v74;
  uint64_t v75;
  _QWORD v76[3];

  v73 = a2;
  v3 = type metadata accessor for TimeStyle(0);
  v67 = *(_QWORD *)(v3 - 8);
  v68 = v3;
  __chkstk_darwin(v3);
  v71 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000BA294(&qword_100BCB0A0);
  __chkstk_darwin(v5);
  v70 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for DetailChartDataElement(0);
  v7 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v9 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v69 = (char *)&v66 - v11;
  v12 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v12);
  v14 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Date(0);
  v16 = *(void (***)(char *, char *, uint64_t))(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v66 - v20;
  AxisValue.as<A>(_:)(v22, v22, &protocol witness table for Date);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, v15) == 1)
  {
    sub_100021A14((uint64_t)v14, (uint64_t *)&unk_100BD35A0);
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
LABEL_15:
    v38 = v73;
    goto LABEL_16;
  }
  v16[4](v21, v14, v15);
  v27 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for SunriseSunsetInteractiveChartView(0) + 44));
  v28 = *(_QWORD *)(v27 + 16);
  v74 = v21;
  v75 = v15;
  if (v28)
  {
    v29 = v27 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v30 = *(_QWORD *)(v7 + 72);
    v31 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16);
    v66 = v27;
    v32 = swift_bridgeObjectRetain();
    v33 = v72;
    while (1)
    {
      v34 = v31(v9, v29, v33, v32);
      v35 = v33;
      DetailChartDataElement.date.getter(v34);
      v36 = static Date.== infix(_:_:)(v18, v74);
      ((void (*)(char *, uint64_t))v16[1])(v18, v75);
      if ((v36 & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v35);
      v29 += v30;
      --v28;
      v33 = v35;
      if (!v28)
      {
        v37 = 1;
        v38 = v73;
        v21 = v74;
        v15 = v75;
        v39 = (uint64_t)v70;
        goto LABEL_10;
      }
    }
    v39 = (uint64_t)v70;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v70, v9, v35);
    v37 = 0;
    v38 = v73;
    v21 = v74;
    v15 = v75;
    v33 = v35;
  }
  else
  {
    swift_bridgeObjectRetain();
    v37 = 1;
    v33 = v72;
    v38 = v73;
    v39 = (uint64_t)v70;
  }
LABEL_10:
  _s7Weather24LocationCompositionStateOwst_0(v39, v37, 1, v33);
  swift_bridgeObjectRelease();
  v40 = _s7Weather24LocationCompositionStateOwet_0(v39, 1, v33);
  v41 = v71;
  if (v40 != 1)
  {
    v70 = (char *)v16;
    v42 = v69;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v69, v39, v33);
    type metadata accessor for Style(0);
    v43 = static Style.componentTime.getter();
    v44 = DetailChartDataElement.dateLabel.getter(v43);
    v46 = v45;
    sub_1000B375C();
    v48 = static NSDateFormatter.prevailingPeriodSymbols.getter(v47);
    v66 = v7;
    if (qword_100BC20C0 != -1)
      swift_once(&qword_100BC20C0, sub_1004049E8);
    swift_beginAccess(&qword_100CAE968, v76, 33, 0);
    v49 = sub_10040459C();
    swift_endAccess(v76);
    v50 = TimeStyle.formatTime(_:periodSymbols:font:)(v44, v46, v48, v49);
    v52 = v51;
    v54 = v53;
    v56 = v55;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v57 = swift_release();
    v58 = v54 & 1;
    (*(void (**)(char *, uint64_t, __n128))(v67 + 8))(v41, v68, v57);
    swift_beginAccess(&qword_100CAE968, v76, 33, 0);
    sub_100404670();
    v60 = v59;
    swift_endAccess(v76);
    v76[0] = v60;
    v61 = v50;
    v23 = Text.foregroundStyle<A>(_:)(v76, v50, v52, v58, v56, &type metadata for Color, &protocol witness table for Color);
    v24 = v62;
    v26 = v63;
    v25 = v64 & 1;
    sub_1000D31B4(v61, v52, v58);
    swift_release();
    v65 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, __n128))(v66 + 8))(v42, v72, v65);
    (*((void (**)(char *, uint64_t))v70 + 1))(v74, v75);
    goto LABEL_15;
  }
  ((void (*)(char *, uint64_t))v16[1])(v21, v15);
  sub_100021A14(v39, &qword_100BCB0A0);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
LABEL_16:
  *v38 = v23;
  v38[1] = v24;
  v38[2] = v25;
  v38[3] = v26;
}

void sub_100744030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_1007442F4(a1, (uint64_t)&unk_100C030E0, (uint64_t)&unk_100C03100, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_100744044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  void (*v23)(uint64_t, char *, uint64_t);
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;

  v28 = a2;
  v3 = type metadata accessor for AxisGridLine(0);
  v27 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100BDCC88);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AxisValue(0, v8);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = AxisValue.isLast.getter(v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  if ((v16 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
LABEL_5:
    v17 = 1;
    v18 = v28;
    return _s7Weather24LocationCompositionStateOwst_0(v18, v17, 1, v6);
  }
  AxisValue.as<A>(_:)(&type metadata for Double, &type metadata for Double, &protocol witness table for Double);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if ((BYTE8(v33[0]) & 1) == 0 && *(double *)v33 == 0.0)
    goto LABEL_5;
  if (qword_100BC20C0 != -1)
    swift_once(&qword_100BC20C0, sub_1004049E8);
  swift_beginAccess(&qword_100CAE968, v33, 33, 0);
  sub_100404780();
  v25 = v31;
  v26 = v30;
  v19 = v32;
  swift_endAccess(v33);
  v33[0] = v26;
  v33[1] = v25;
  v34 = v19;
  AxisGridLine.init(centered:stroke:)(2, v33);
  swift_beginAccess(&qword_100CAE968, v29, 33, 0);
  sub_10040441C();
  v21 = v20;
  swift_endAccess(v29);
  v29[0] = v21;
  AxisMark.foregroundStyle<A>(_:)(v29, v3, &type metadata for Color, &protocol witness table for AxisGridLine, &protocol witness table for Color);
  v22 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v27 + 8))(v5, v3, v22);
  v23 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  v18 = v28;
  v23(v28, v10, v6);
  v17 = 0;
  return _s7Weather24LocationCompositionStateOwst_0(v18, v17, 1, v6);
}

void sub_1007442E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_1007442F4(a1, (uint64_t)&unk_100C03118, (uint64_t)&unk_100C03138, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

void sub_1007442F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;

  sub_10008900C();
  a17 = v19;
  a18 = v20;
  v22 = v21;
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v29 = type metadata accessor for BlendMode(0);
  sub_10009D5D4();
  v31 = __chkstk_darwin(v30);
  v33 = (char *)&a9 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v18 + 104))(v33, enum case for BlendMode.plusLighter(_:), v29, v31);
  v34 = sub_1000BA294(v24);
  sub_10009C94C(v28 + *(int *)(v34 + 36), (uint64_t)v33, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 16));
  v35 = sub_1000BA294(v22);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v28, v26, v35);
  sub_1000BDD1C((uint64_t)v33, *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
  sub_10009D300();
}

uint64_t sub_1007443B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  __n128 v13;
  _BYTE v14[16];

  v2 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v2);
  v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_1000BA294(&qword_100BDD670);
  State.wrappedValue.getter(v4, v9);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v4, 1, v5) == 1)
  {
    sub_100021A14((uint64_t)v4, (uint64_t *)&unk_100BD35A0);
    v10 = type metadata accessor for DetailChartDataElement(0);
    return _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, v10);
  }
  else
  {
    (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v8, v4, v5);
    v12 = type metadata accessor for SunriseSunsetInteractiveChartView(0);
    __chkstk_darwin(v12);
    *(_QWORD *)&v14[-16] = v8;
    swift_bridgeObjectRetain();
    sub_10084B38C();
    v13 = swift_bridgeObjectRelease();
    return (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v6 + 8))(v8, v5, v13);
  }
}

double sub_100744548(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char v49;
  double v50;
  uint64_t v51;
  double v52;
  char v53;
  double v54;
  void (*v55)(char *, uint64_t);
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v63 = a1;
  v4 = sub_1000BA294(&qword_100BCB0A0);
  __chkstk_darwin(v4);
  v62 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v64 = (uint64_t)&v58 - v7;
  v8 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v8);
  v60 = (uint64_t)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v61 = (char *)&v58 - v11;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v58 - v17;
  v19 = type metadata accessor for LayoutDirection(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v58 - v24;
  v26 = type metadata accessor for SunriseSunsetInteractiveChartView(0);
  v65 = v2;
  sub_1001591C8();
  (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v22, enum case for LayoutDirection.rightToLeft(_:), v19);
  v27 = static LayoutDirection.== infix(_:_:)(v25, v22);
  v28 = *(void (**)(char *, uint64_t))(v20 + 8);
  v28(v22, v19);
  v28(v25, v19);
  if ((v27 & 1) == 0)
    return a2;
  v29 = (uint64_t)v61;
  v30 = (uint64_t)v62;
  v58 = v15;
  v59 = v13;
  v31 = (uint64_t)v18;
  v32 = v64;
  v33 = *(int *)(v26 + 44);
  v34 = v65;
  sub_10020CBD0(*(_QWORD *)(v65 + v33), v64);
  v35 = type metadata accessor for DetailChartDataElement(0);
  v36 = _s7Weather24LocationCompositionStateOwet_0(v32, 1, v35);
  if ((_DWORD)v36 == 1)
  {
    sub_100021A14(v32, &qword_100BCB0A0);
    v37 = v29;
    _s7Weather24LocationCompositionStateOwst_0(v29, 1, 1, v12);
LABEL_5:
    v41 = v37;
LABEL_6:
    sub_100021A14(v41, (uint64_t *)&unk_100BD35A0);
    return a2;
  }
  v37 = v29;
  DetailChartDataElement.date.getter(v36);
  v38 = v32;
  v39 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8);
  v39(v38, v35);
  v40 = v12;
  _s7Weather24LocationCompositionStateOwst_0(v37, 0, 1, v12);
  if (_s7Weather24LocationCompositionStateOwet_0(v37, 1, v12) == 1)
    goto LABEL_5;
  v43 = v37;
  v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 32);
  v64 = v31;
  v44(v31, v43, v12);
  sub_1002F6F6C(*(_QWORD *)(v34 + v33), v30);
  v45 = _s7Weather24LocationCompositionStateOwet_0(v30, 1, v35);
  if ((_DWORD)v45 == 1)
  {
    sub_100021A14(v30, &qword_100BCB0A0);
    v46 = v60;
    _s7Weather24LocationCompositionStateOwst_0(v60, 1, 1, v12);
LABEL_11:
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v64, v40);
    v41 = v46;
    goto LABEL_6;
  }
  v46 = v60;
  DetailChartDataElement.date.getter(v45);
  v40 = v12;
  v39(v30, v35);
  _s7Weather24LocationCompositionStateOwst_0(v46, 0, 1, v12);
  if (_s7Weather24LocationCompositionStateOwet_0(v46, 1, v12) == 1)
    goto LABEL_11;
  v47 = v58;
  v44((uint64_t)v58, v46, v12);
  v48 = ChartProxy.position<A>(forX:)(v47, v12, &protocol witness table for Date);
  if ((v49 & 1) != 0)
  {
    v56 = *(void (**)(char *, uint64_t))(v59 + 8);
    v56(v47, v12);
    v57 = v64;
LABEL_20:
    v56((char *)v57, v12);
    return a2;
  }
  v50 = *(double *)&v48;
  v51 = v64;
  v52 = COERCE_DOUBLE(ChartProxy.position<A>(forX:)(v64, v12, &protocol witness table for Date));
  if ((v53 & 1) != 0)
  {
    v56 = *(void (**)(char *, uint64_t))(v59 + 8);
    v56(v47, v12);
    v57 = v51;
    goto LABEL_20;
  }
  if (v50 > v52)
    v54 = v50;
  else
    v54 = v52;
  v55 = *(void (**)(char *, uint64_t))(v59 + 8);
  v55(v47, v12);
  v55((char *)v51, v12);
  return v54 - a2;
}

uint64_t sub_1007449EC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *a1;
  v5 = sub_1000BA294(&qword_100C03228);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, v4, v5);
  v6 = (int *)sub_1000BA294(&qword_100C03268);
  v7 = a2 + v6[12];
  v8 = a1[1];
  v9 = sub_1000BA294(&qword_100C03220);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(a2 + v6[16], a1[2], v9);
  v11 = a2 + v6[20];
  v12 = a1[3];
  v13 = sub_1000BA294(&qword_100C03218);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = a2 + v6[24];
  v15 = a1[4];
  v16 = sub_1000BA294(&qword_100C03210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  v17 = a2 + v6[28];
  v18 = a1[5];
  v19 = sub_1000BA294(&qword_100C03208);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
}

uint64_t *sub_100744B30(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  char *v43;
  char *v44;
  int *v45;
  uint64_t v46;
  char *v47;
  id v48;
  __n128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t, __n128);
  __n128 v71;
  void (*v73)(char *, char *, uint64_t, __n128);
  void (*v74)(char *, char *, uint64_t, __n128);
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v7))
    {
      v8 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v7);
    }
    v10 = sub_1000BA294(&qword_100BDD670);
    *(uint64_t *)((char *)a1 + *(int *)(v10 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(v10 + 28));
    v11 = a3[5];
    v12 = a3[6];
    v13 = (char *)a1 + v11;
    v14 = (char *)a2 + v11;
    v13[32] = v14[32];
    v15 = *((_QWORD *)v14 + 1);
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *((_QWORD *)v13 + 1) = v15;
    *((_OWORD *)v13 + 1) = *((_OWORD *)v14 + 1);
    v16 = (char *)a1 + v12;
    v17 = (char *)a2 + v12;
    swift_retain();
    swift_retain();
    swift_retain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v17, 1, v7))
    {
      v18 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v16, v17, v7);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v16, 0, 1, v7);
    }
    *(_QWORD *)&v16[*(int *)(v10 + 28)] = *(_QWORD *)&v17[*(int *)(v10 + 28)];
    v19 = a3[7];
    v20 = a3[8];
    v21 = (uint64_t *)((char *)a1 + v19);
    v22 = (uint64_t *)((char *)a2 + v19);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = (uint64_t *)((char *)a1 + v20);
    v25 = (char *)a2 + v20;
    v26 = *(uint64_t *)((char *)a2 + v20 + 8);
    *v24 = *(uint64_t *)((char *)a2 + v20);
    v24[1] = v26;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v27 = *(int *)(sub_1000BA294(&qword_100C02ED0) + 32);
    v28 = (char *)v24 + v27;
    v29 = &v25[v27];
    v30 = type metadata accessor for DetailChartDataElement(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v29, 1, v30))
    {
      v31 = sub_1000BA294(&qword_100BCB0A0);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v28, 0, 1, v30);
    }
    v32 = a3[9];
    v33 = (uint64_t *)((char *)a1 + v32);
    v34 = (uint64_t *)((char *)a2 + v32);
    v35 = sub_1000BA294(&qword_100BC2908);
    v77 = v30;
    v79 = v7;
    if (swift_getEnumCaseMultiPayload(v34) == 1)
    {
      v36 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v33, v34, v36);
      v37 = v33;
      v38 = v35;
      v39 = 1;
    }
    else
    {
      *v33 = *v34;
      swift_retain();
      v37 = v33;
      v38 = v35;
      v39 = 0;
    }
    swift_storeEnumTagMultiPayload(v37, v38, v39);
    v40 = a3[10];
    v41 = a3[11];
    v42 = *(void **)((char *)a2 + v40);
    *(uint64_t *)((char *)a1 + v40) = (uint64_t)v42;
    v43 = (char *)a1 + v41;
    v44 = (char *)a2 + v41;
    *(uint64_t *)((char *)a1 + v41) = *(uint64_t *)((char *)a2 + v41);
    v45 = (int *)_s14ChartViewModelVMa(0);
    v46 = v45[5];
    v47 = &v44[v46];
    v73 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v77 - 8) + 16);
    v75 = &v43[v46];
    v48 = v42;
    v49 = swift_bridgeObjectRetain();
    v73(v75, v47, v77, v49);
    v50 = v45[6];
    v51 = &v43[v50];
    v52 = &v44[v50];
    v53 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v51, v52, v53);
    v54 = v45[7];
    v55 = &v43[v54];
    v56 = &v44[v54];
    v57 = *(_QWORD *)v56;
    v58 = *((_QWORD *)v56 + 1);
    *(_QWORD *)v55 = v57;
    *((_QWORD *)v55 + 1) = v58;
    *(_QWORD *)&v43[v45[8]] = *(_QWORD *)&v44[v45[8]];
    *(_QWORD *)&v43[v45[9]] = *(_QWORD *)&v44[v45[9]];
    *(_QWORD *)&v43[v45[10]] = *(_QWORD *)&v44[v45[10]];
    v59 = v45[11];
    v76 = &v44[v59];
    v78 = &v43[v59];
    v74 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v79 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v60 = swift_bridgeObjectRetain();
    v74(v78, v76, v79, v60);
    *(_QWORD *)&v43[v45[12]] = *(_QWORD *)&v44[v45[12]];
    v61 = a3[13];
    *(uint64_t *)((char *)a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    *(uint64_t *)((char *)a1 + v61) = *(uint64_t *)((char *)a2 + v61);
    v62 = a3[15];
    *(uint64_t *)((char *)a1 + a3[14]) = *(uint64_t *)((char *)a2 + a3[14]);
    *(uint64_t *)((char *)a1 + v62) = *(uint64_t *)((char *)a2 + v62);
    v63 = a3[17];
    *(uint64_t *)((char *)a1 + a3[16]) = *(uint64_t *)((char *)a2 + a3[16]);
    *(uint64_t *)((char *)a1 + v63) = *(uint64_t *)((char *)a2 + v63);
    v64 = a3[19];
    *(uint64_t *)((char *)a1 + a3[18]) = *(uint64_t *)((char *)a2 + a3[18]);
    *(uint64_t *)((char *)a1 + v64) = *(uint64_t *)((char *)a2 + v64);
    v65 = a3[21];
    *(uint64_t *)((char *)a1 + a3[20]) = *(uint64_t *)((char *)a2 + a3[20]);
    v66 = a3[22];
    v67 = (char *)a1 + v66;
    v68 = (char *)a2 + v66;
    *(uint64_t *)((char *)a1 + v65) = *(uint64_t *)((char *)a2 + v65);
    v69 = type metadata accessor for Calendar(0);
    v70 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v69 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v71 = swift_retain();
    v70(v67, v68, v69, v71);
  }
  return a1;
}

uint64_t sub_100744FF8(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for Date(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  sub_1000BA294(&qword_100BDD670);
  swift_release();
  swift_release();
  swift_release();
  v5 = a1 + a2[6];
  if (!_s7Weather24LocationCompositionStateOwet_0(v5, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v5, v4);
  swift_release();
  swift_release();
  v6 = a1 + a2[8];
  swift_release();
  swift_release();
  v7 = v6 + *(int *)(sub_1000BA294(&qword_100C02ED0) + 32);
  v8 = type metadata accessor for DetailChartDataElement(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[9];
  sub_1000BA294(&qword_100BC2908);
  if (swift_getEnumCaseMultiPayload(v9) == 1)
  {
    v10 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  }
  else
  {
    swift_release();
  }

  v11 = a1 + a2[11];
  swift_bridgeObjectRelease();
  v12 = (int *)_s14ChartViewModelVMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v11 + v12[5], v8);
  v13 = v11 + v12[6];
  v14 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v4 - 8) + 8))(v11 + v12[11], v4, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v16 = a1 + a2[22];
  v17 = type metadata accessor for Calendar(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
}

char *sub_10074527C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char *v42;
  char *v43;
  int *v44;
  uint64_t v45;
  char *v46;
  id v47;
  __n128 v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t, __n128);
  __n128 v70;
  void (*v72)(char *, char *, uint64_t, __n128);
  void (*v73)(char *, char *, uint64_t, __n128);
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;

  v6 = type metadata accessor for Date(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6))
  {
    v7 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
  }
  v8 = sub_1000BA294(&qword_100BDD670);
  *(_QWORD *)&a1[*(int *)(v8 + 28)] = *(_QWORD *)&a2[*(int *)(v8 + 28)];
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  v11[32] = v12[32];
  v13 = *((_QWORD *)v12 + 1);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_QWORD *)v11 + 1) = v13;
  *((_OWORD *)v11 + 1) = *((_OWORD *)v12 + 1);
  v14 = &a1[v10];
  v15 = &a2[v10];
  swift_retain();
  swift_retain();
  swift_retain();
  v77 = v6;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v6))
  {
    v16 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v14, v15, v6);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 0, 1, v6);
  }
  *(_QWORD *)&v14[*(int *)(v8 + 28)] = *(_QWORD *)&v15[*(int *)(v8 + 28)];
  v17 = a3[7];
  v18 = a3[8];
  v19 = &a1[v17];
  v20 = &a2[v17];
  v21 = *((_QWORD *)v20 + 1);
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *((_QWORD *)v19 + 1) = v21;
  v22 = &a1[v18];
  v23 = &a2[v18];
  v24 = *(_QWORD *)&a2[v18 + 8];
  *(_QWORD *)v22 = *(_QWORD *)&a2[v18];
  *((_QWORD *)v22 + 1) = v24;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v25 = *(int *)(sub_1000BA294(&qword_100C02ED0) + 32);
  v26 = &v22[v25];
  v27 = &v23[v25];
  v28 = type metadata accessor for DetailChartDataElement(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v27, 1, v28))
  {
    v29 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v26, 0, 1, v28);
  }
  v30 = a3[9];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = sub_1000BA294(&qword_100BC2908);
  v34 = a1;
  if (swift_getEnumCaseMultiPayload(v32) == 1)
  {
    v35 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v31, v32, v35);
    v36 = v31;
    v37 = v33;
    v38 = 1;
  }
  else
  {
    *(_QWORD *)v31 = *(_QWORD *)v32;
    swift_retain();
    v36 = v31;
    v37 = v33;
    v38 = 0;
  }
  swift_storeEnumTagMultiPayload(v36, v37, v38);
  v39 = a3[10];
  v40 = a3[11];
  v41 = *(void **)&a2[v39];
  *(_QWORD *)&v34[v39] = v41;
  v42 = &v34[v40];
  v43 = &a2[v40];
  *(_QWORD *)&v34[v40] = *(_QWORD *)&a2[v40];
  v44 = (int *)_s14ChartViewModelVMa(0);
  v45 = v44[5];
  v46 = &v42[v45];
  v75 = &v43[v45];
  v73 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v28 - 8) + 16);
  v47 = v41;
  v48 = swift_bridgeObjectRetain();
  v73(v46, v75, v28, v48);
  v49 = v44[6];
  v50 = &v42[v49];
  v51 = &v43[v49];
  v52 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v50, v51, v52);
  v53 = v44[7];
  v54 = &v42[v53];
  v55 = &v43[v53];
  v56 = *(_QWORD *)v55;
  v57 = *((_QWORD *)v55 + 1);
  *(_QWORD *)v54 = v56;
  *((_QWORD *)v54 + 1) = v57;
  *(_QWORD *)&v42[v44[8]] = *(_QWORD *)&v43[v44[8]];
  *(_QWORD *)&v42[v44[9]] = *(_QWORD *)&v43[v44[9]];
  *(_QWORD *)&v42[v44[10]] = *(_QWORD *)&v43[v44[10]];
  v58 = v44[11];
  v74 = &v43[v58];
  v76 = &v42[v58];
  v72 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v77 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v59 = swift_bridgeObjectRetain();
  v72(v76, v74, v77, v59);
  *(_QWORD *)&v42[v44[12]] = *(_QWORD *)&v43[v44[12]];
  v60 = a3[13];
  *(_QWORD *)&v34[a3[12]] = *(_QWORD *)&a2[a3[12]];
  *(_QWORD *)&v34[v60] = *(_QWORD *)&a2[v60];
  v61 = a3[15];
  *(_QWORD *)&v34[a3[14]] = *(_QWORD *)&a2[a3[14]];
  *(_QWORD *)&v34[v61] = *(_QWORD *)&a2[v61];
  v62 = a3[17];
  *(_QWORD *)&v34[a3[16]] = *(_QWORD *)&a2[a3[16]];
  *(_QWORD *)&v34[v62] = *(_QWORD *)&a2[v62];
  v63 = a3[19];
  *(_QWORD *)&v34[a3[18]] = *(_QWORD *)&a2[a3[18]];
  *(_QWORD *)&v34[v63] = *(_QWORD *)&a2[v63];
  v64 = a3[21];
  *(_QWORD *)&v34[a3[20]] = *(_QWORD *)&a2[a3[20]];
  v65 = a3[22];
  v66 = &v34[v65];
  v67 = &a2[v65];
  *(_QWORD *)&v34[v64] = *(_QWORD *)&a2[v64];
  v68 = type metadata accessor for Calendar(0);
  v69 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v68 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v70 = swift_retain();
  v69(v66, v67, v68, v70);
  return v34;
}

char *sub_10074571C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  id v47;
  uint64_t v48;
  char *v49;
  char *v50;
  int *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  __n128 v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;

  v6 = type metadata accessor for Date(0);
  v7 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 1, v6);
  v8 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    v10 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  v11 = sub_1000BA294(&qword_100BDD670);
  *(_QWORD *)&a1[*(int *)(v11 + 28)] = *(_QWORD *)&a2[*(int *)(v11 + 28)];
  swift_retain();
  swift_release();
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  swift_retain();
  swift_release();
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  swift_retain();
  swift_release();
  v15 = *((_OWORD *)v14 + 1);
  v13[32] = v14[32];
  *((_OWORD *)v13 + 1) = v15;
  v16 = a3[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  LODWORD(v14) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)&a1[v16], 1, v6);
  v19 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v18, 1, v6);
  if ((_DWORD)v14)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v17, v18, v6);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v17, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v20 = *(_QWORD *)(v6 - 8);
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v6);
LABEL_12:
    v21 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v17, v18, v6);
LABEL_13:
  *(_QWORD *)&v17[*(int *)(v11 + 28)] = *(_QWORD *)&v18[*(int *)(v11 + 28)];
  swift_retain();
  swift_release();
  v22 = a3[7];
  v23 = &a1[v22];
  v24 = &a2[v22];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *((_QWORD *)v23 + 1) = *((_QWORD *)v24 + 1);
  swift_retain();
  swift_release();
  v25 = a3[8];
  v26 = &a1[v25];
  v27 = &a2[v25];
  *(_QWORD *)&a1[v25] = *(_QWORD *)&a2[v25];
  swift_retain();
  swift_release();
  *((_QWORD *)v26 + 1) = *((_QWORD *)v27 + 1);
  swift_retain();
  swift_release();
  v28 = *(int *)(sub_1000BA294(&qword_100C02ED0) + 32);
  v29 = &v26[v28];
  v30 = &v27[v28];
  v31 = type metadata accessor for DetailChartDataElement(0);
  v32 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v29, 1, v31);
  v33 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v30, 1, v31);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v29, 0, 1, v31);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  v34 = *(_QWORD *)(v31 - 8);
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v29, v31);
LABEL_18:
    v35 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v34 + 24))(v29, v30, v31);
LABEL_19:
  if (a1 != a2)
  {
    v36 = a3[9];
    v37 = &a1[v36];
    v38 = &a2[v36];
    sub_100021A14((uint64_t)&a1[v36], &qword_100BC2908);
    v39 = sub_1000BA294(&qword_100BC2908);
    if (swift_getEnumCaseMultiPayload(v38) == 1)
    {
      v40 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v37, v38, v40);
      v41 = v37;
      v42 = v39;
      v43 = 1;
    }
    else
    {
      *(_QWORD *)v37 = *(_QWORD *)v38;
      swift_retain();
      v41 = v37;
      v42 = v39;
      v43 = 0;
    }
    swift_storeEnumTagMultiPayload(v41, v42, v43);
  }
  v44 = a3[10];
  v45 = *(void **)&a2[v44];
  v46 = *(void **)&a1[v44];
  *(_QWORD *)&a1[v44] = v45;
  v47 = v45;

  v48 = a3[11];
  v49 = &a1[v48];
  v50 = &a2[v48];
  *(_QWORD *)&a1[v48] = *(_QWORD *)&a2[v48];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v51 = (int *)_s14ChartViewModelVMa(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 24))(&v49[v51[5]], &v50[v51[5]], v31);
  v52 = v51[6];
  v53 = &v49[v52];
  v54 = &v50[v52];
  v55 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 24))(v53, v54, v55);
  v56 = v51[7];
  v57 = &v49[v56];
  v58 = &v50[v56];
  *(_QWORD *)&v49[v56] = *(_QWORD *)&v50[v56];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v57 + 1) = *((_QWORD *)v58 + 1);
  *(_QWORD *)&v49[v51[8]] = *(_QWORD *)&v50[v51[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v49[v51[9]] = *(_QWORD *)&v50[v51[9]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v49[v51[10]] = *(_QWORD *)&v50[v51[10]];
  swift_bridgeObjectRetain();
  v59 = swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v6 - 8) + 24))(&v49[v51[11]], &v50[v51[11]], v6, v59);
  *(_QWORD *)&v49[v51[12]] = *(_QWORD *)&v50[v51[12]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[13]] = *(_QWORD *)&a2[a3[13]];
  *(_QWORD *)&a1[a3[14]] = *(_QWORD *)&a2[a3[14]];
  *(_QWORD *)&a1[a3[15]] = *(_QWORD *)&a2[a3[15]];
  swift_retain();
  swift_release();
  *(_QWORD *)&a1[a3[16]] = *(_QWORD *)&a2[a3[16]];
  *(_QWORD *)&a1[a3[17]] = *(_QWORD *)&a2[a3[17]];
  *(_QWORD *)&a1[a3[18]] = *(_QWORD *)&a2[a3[18]];
  *(_QWORD *)&a1[a3[19]] = *(_QWORD *)&a2[a3[19]];
  *(_QWORD *)&a1[a3[20]] = *(_QWORD *)&a2[a3[20]];
  *(_QWORD *)&a1[a3[21]] = *(_QWORD *)&a2[a3[21]];
  v60 = a3[22];
  v61 = &a1[v60];
  v62 = &a2[v60];
  v63 = type metadata accessor for Calendar(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 24))(v61, v62, v63);
  return a1;
}

char *sub_100745D40(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;

  v6 = type metadata accessor for Date(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6))
  {
    v7 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
  }
  v8 = sub_1000BA294(&qword_100BDD670);
  *(_QWORD *)&a1[*(int *)(v8 + 28)] = *(_QWORD *)&a2[*(int *)(v8 + 28)];
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  v11[32] = v12[32];
  v13 = *((_OWORD *)v12 + 1);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v13;
  v14 = &a1[v10];
  v15 = &a2[v10];
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&a2[v10], 1, v6))
  {
    v16 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v14, v15, v6);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 0, 1, v6);
  }
  *(_QWORD *)&v14[*(int *)(v8 + 28)] = *(_QWORD *)&v15[*(int *)(v8 + 28)];
  v17 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = *(_QWORD *)&a2[v17];
  v21 = *(_QWORD *)&a2[v17 + 8];
  *(_QWORD *)v18 = v20;
  *((_QWORD *)v18 + 1) = v21;
  v22 = *(int *)(sub_1000BA294(&qword_100C02ED0) + 32);
  v23 = &v18[v22];
  v24 = &v19[v22];
  v25 = type metadata accessor for DetailChartDataElement(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v24, 1, v25))
  {
    v26 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v23, 0, 1, v25);
  }
  v27 = a3[9];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = sub_1000BA294(&qword_100BC2908);
  if (swift_getEnumCaseMultiPayload(v29) == 1)
  {
    v31 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v28, v29, v31);
    swift_storeEnumTagMultiPayload(v28, v30, 1);
  }
  else
  {
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  v32 = a3[11];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  v33 = &a1[v32];
  v34 = &a2[v32];
  *(_QWORD *)&a1[v32] = *(_QWORD *)&a2[v32];
  v35 = (int *)_s14ChartViewModelVMa(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(&v33[v35[5]], &v34[v35[5]], v25);
  v36 = v35[6];
  v37 = &v33[v36];
  v38 = &v34[v36];
  v39 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v37, v38, v39);
  *(_OWORD *)&v33[v35[7]] = *(_OWORD *)&v34[v35[7]];
  *(_QWORD *)&v33[v35[8]] = *(_QWORD *)&v34[v35[8]];
  *(_QWORD *)&v33[v35[9]] = *(_QWORD *)&v34[v35[9]];
  *(_QWORD *)&v33[v35[10]] = *(_QWORD *)&v34[v35[10]];
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(&v33[v35[11]], &v34[v35[11]], v6);
  *(_QWORD *)&v33[v35[12]] = *(_QWORD *)&v34[v35[12]];
  v40 = a3[13];
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  *(_QWORD *)&a1[v40] = *(_QWORD *)&a2[v40];
  v41 = a3[15];
  *(_QWORD *)&a1[a3[14]] = *(_QWORD *)&a2[a3[14]];
  *(_QWORD *)&a1[v41] = *(_QWORD *)&a2[v41];
  v42 = a3[17];
  *(_QWORD *)&a1[a3[16]] = *(_QWORD *)&a2[a3[16]];
  *(_QWORD *)&a1[v42] = *(_QWORD *)&a2[v42];
  v43 = a3[19];
  *(_QWORD *)&a1[a3[18]] = *(_QWORD *)&a2[a3[18]];
  *(_QWORD *)&a1[v43] = *(_QWORD *)&a2[v43];
  v44 = a3[21];
  *(_QWORD *)&a1[a3[20]] = *(_QWORD *)&a2[a3[20]];
  v45 = a3[22];
  v46 = &a1[v45];
  v47 = &a2[v45];
  *(_QWORD *)&a1[v44] = *(_QWORD *)&a2[v44];
  v48 = type metadata accessor for Calendar(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 32))(v46, v47, v48);
  return a1;
}

char *sub_10074611C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  int *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;

  v6 = type metadata accessor for Date(0);
  v7 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 1, v6);
  v8 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    v10 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  v11 = sub_1000BA294(&qword_100BDD670);
  *(_QWORD *)&a1[*(int *)(v11 + 28)] = *(_QWORD *)&a2[*(int *)(v11 + 28)];
  swift_release();
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  swift_release();
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  swift_release();
  *((_OWORD *)v13 + 1) = *((_OWORD *)v14 + 1);
  v13[32] = v14[32];
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)&a1[v15], 1, v6);
  v19 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v17, 1, v6);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v16, v17, v6);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v16, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v20 = *(_QWORD *)(v6 - 8);
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v16, v6);
LABEL_12:
    v21 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v16, v17, v6);
LABEL_13:
  *(_QWORD *)&v16[*(int *)(v11 + 28)] = *(_QWORD *)&v17[*(int *)(v11 + 28)];
  swift_release();
  v22 = a3[7];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v26 = *(_QWORD *)v24;
  v25 = *((_QWORD *)v24 + 1);
  *(_QWORD *)v23 = v26;
  *((_QWORD *)v23 + 1) = v25;
  swift_release();
  v27 = a3[8];
  v28 = &a1[v27];
  v29 = &a2[v27];
  *(_QWORD *)&a1[v27] = *(_QWORD *)&a2[v27];
  swift_release();
  *((_QWORD *)v28 + 1) = *((_QWORD *)v29 + 1);
  swift_release();
  v30 = *(int *)(sub_1000BA294(&qword_100C02ED0) + 32);
  v31 = &v28[v30];
  v32 = &v29[v30];
  v33 = type metadata accessor for DetailChartDataElement(0);
  v34 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v31, 1, v33);
  v35 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v32, 1, v33);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v31, 0, 1, v33);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  v36 = *(_QWORD *)(v33 - 8);
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v31, v33);
LABEL_18:
    v37 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 40))(v31, v32, v33);
LABEL_19:
  if (a1 != a2)
  {
    v38 = a3[9];
    v39 = &a1[v38];
    v40 = &a2[v38];
    sub_100021A14((uint64_t)&a1[v38], &qword_100BC2908);
    v41 = sub_1000BA294(&qword_100BC2908);
    if (swift_getEnumCaseMultiPayload(v40) == 1)
    {
      v42 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v39, v40, v42);
      swift_storeEnumTagMultiPayload(v39, v41, 1);
    }
    else
    {
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
  }
  v43 = a3[10];
  v44 = *(void **)&a1[v43];
  *(_QWORD *)&a1[v43] = *(_QWORD *)&a2[v43];

  v45 = a3[11];
  v46 = &a1[v45];
  v47 = &a2[v45];
  *(_QWORD *)&a1[v45] = *(_QWORD *)&a2[v45];
  swift_bridgeObjectRelease();
  v48 = (int *)_s14ChartViewModelVMa(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 40))(&v46[v48[5]], &v47[v48[5]], v33);
  v49 = v48[6];
  v50 = &v46[v49];
  v51 = &v47[v49];
  v52 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 40))(v50, v51, v52);
  v53 = v48[7];
  v54 = &v46[v53];
  v55 = &v47[v53];
  *(_QWORD *)&v46[v53] = *(_QWORD *)&v47[v53];
  swift_bridgeObjectRelease();
  *((_QWORD *)v54 + 1) = *((_QWORD *)v55 + 1);
  *(_QWORD *)&v46[v48[8]] = *(_QWORD *)&v47[v48[8]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v46[v48[9]] = *(_QWORD *)&v47[v48[9]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v46[v48[10]] = *(_QWORD *)&v47[v48[10]];
  v56 = swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v6 - 8) + 40))(&v46[v48[11]], &v47[v48[11]], v6, v56);
  *(_QWORD *)&v46[v48[12]] = *(_QWORD *)&v47[v48[12]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  swift_bridgeObjectRelease();
  v57 = a3[14];
  *(_QWORD *)&a1[a3[13]] = *(_QWORD *)&a2[a3[13]];
  *(_QWORD *)&a1[v57] = *(_QWORD *)&a2[v57];
  *(_QWORD *)&a1[a3[15]] = *(_QWORD *)&a2[a3[15]];
  swift_release();
  v58 = a3[17];
  *(_QWORD *)&a1[a3[16]] = *(_QWORD *)&a2[a3[16]];
  *(_QWORD *)&a1[v58] = *(_QWORD *)&a2[v58];
  v59 = a3[19];
  *(_QWORD *)&a1[a3[18]] = *(_QWORD *)&a2[a3[18]];
  *(_QWORD *)&a1[v59] = *(_QWORD *)&a2[v59];
  v60 = a3[21];
  *(_QWORD *)&a1[a3[20]] = *(_QWORD *)&a2[a3[20]];
  *(_QWORD *)&a1[v60] = *(_QWORD *)&a2[v60];
  v61 = a3[22];
  v62 = &a1[v61];
  v63 = &a2[v61];
  v64 = type metadata accessor for Calendar(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 40))(v62, v63, v64);
  return a1;
}

uint64_t sub_1007466A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1007466B4);
}

uint64_t sub_1007466B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  sub_1000BA294(&qword_100BDD670);
  sub_100088FF0();
  if (v13)
  {
    v7 = v6;
    v8 = a1;
    return _s7Weather24LocationCompositionStateOwet_0(v8, a2, v7);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    sub_1000BA294(&qword_100C02ED0);
    sub_100088FF0();
    if (v13)
    {
      v7 = v11;
      v12 = a3[8];
    }
    else
    {
      sub_1000BA294(&qword_100BC3800);
      sub_100088FF0();
      if (v13)
      {
        v7 = v14;
        v12 = a3[9];
      }
      else
      {
        sub_1000C0B8C();
        sub_100088FF0();
        if (v15)
        {
          v7 = v16;
          v12 = a3[11];
        }
        else
        {
          v7 = sub_1000D95F0();
          v12 = a3[22];
        }
      }
    }
    v8 = a1 + v12;
    return _s7Weather24LocationCompositionStateOwet_0(v8, a2, v7);
  }
  v9 = *(_QWORD *)(a1 + a3[5] + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1007467A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1007467B0);
}

void sub_1007467B0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  sub_1000BA294(&qword_100BDD670);
  sub_10009D2E8();
  if (v13)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[5] + 8) = (a2 - 1);
      return;
    }
    sub_1000BA294(&qword_100C02ED0);
    sub_10009D2E8();
    if (v13)
    {
      v9 = v11;
      v12 = a4[8];
    }
    else
    {
      sub_1000BA294(&qword_100BC3800);
      sub_10009D2E8();
      if (v13)
      {
        v9 = v14;
        v12 = a4[9];
      }
      else
      {
        sub_1000C0B8C();
        sub_10009D2E8();
        if (v15)
        {
          v9 = v16;
          v12 = a4[11];
        }
        else
        {
          v9 = sub_1000D95F0();
          v12 = a4[22];
        }
      }
    }
    v10 = a1 + v12;
  }
  _s7Weather24LocationCompositionStateOwst_0(v10, a2, a2, v9);
}

void sub_10074689C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[19];

  sub_100154520(319, (unint64_t *)&qword_100BDD6F8, (uint64_t *)&unk_100BD35A0, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    v12[1] = "!";
    v12[2] = v12[0];
    v12[3] = &unk_1009C5B00;
    sub_100154520(319, (unint64_t *)&unk_100C02F40, &qword_100BCB0A0, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
    if (v5 <= 0x3F)
    {
      v12[4] = *(_QWORD *)(v4 - 8) + 64;
      sub_100158C28(319);
      if (v7 <= 0x3F)
      {
        v12[5] = *(_QWORD *)(v6 - 8) + 64;
        v12[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
        v8 = _s14ChartViewModelVMa(319);
        if (v9 <= 0x3F)
        {
          v12[7] = *(_QWORD *)(v8 - 8) + 64;
          v12[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
          v12[9] = (char *)&value witness table for Builtin.Int64 + 64;
          v12[10] = (char *)&value witness table for Builtin.Int64 + 64;
          v12[11] = (char *)&value witness table for Builtin.NativeObject + 64;
          v12[12] = (char *)&value witness table for Builtin.Int64 + 64;
          v12[13] = (char *)&value witness table for Builtin.Int64 + 64;
          v12[14] = (char *)&value witness table for Builtin.Int64 + 64;
          v12[15] = (char *)&value witness table for Builtin.Int64 + 64;
          v12[16] = (char *)&value witness table for Builtin.Int64 + 64;
          v12[17] = (char *)&value witness table for Builtin.Int64 + 64;
          v10 = type metadata accessor for Calendar(319);
          if (v11 <= 0x3F)
          {
            v12[18] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 19, v12, a1 + 16);
          }
        }
      }
    }
  }
}

uint64_t sub_1007469FC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABFA18, 1);
}

uint64_t sub_100746A0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10073D9C0(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_100746A14()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t OpaqueTypeConformance2;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;

  result = qword_100C03010;
  if (!qword_100C03010)
  {
    v24 = sub_100075EB0(&qword_100C03008);
    v1 = sub_100075EB0(&qword_100C03018);
    v2 = sub_100075EB0(&qword_100C03020);
    sub_100748054((uint64_t)&unk_100C03028);
    OpaqueTypeConformance2 = v1;
    v30 = v2;
    v31 = v3;
    v32 = sub_100746D3C();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&OpaqueTypeConformance2, &opaque type descriptor for <<opaque return type of ChartContent.compositingLayer<A>(style:)>>, 1);
    v4 = sub_100075EB0(&qword_100C03048);
    v5 = type metadata accessor for RectangleMark(255);
    v6 = sub_100075EB0(&qword_100C03050);
    v7 = sub_100075EB0(&qword_100C03058);
    v8 = sub_100075EB0(&qword_100C03060);
    sub_100747780((uint64_t)&unk_100C03068);
    v25 = v8;
    v26 = v9;
    v10 = swift_getOpaqueTypeConformance2(&v25, &opaque type descriptor for <<opaque return type of ChartContent.interpolationMethod(_:)>>, 1);
    v25 = v7;
    v26 = (void *)v10;
    v11 = swift_getOpaqueTypeConformance2(&v25, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 1);
    v25 = v6;
    v26 = &type metadata for LinearGradient;
    v27 = (void *)v11;
    v28 = &protocol witness table for LinearGradient;
    v12 = swift_getOpaqueTypeConformance2(&v25, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    v25 = v4;
    v26 = (void *)v5;
    v27 = (void *)v12;
    v28 = &protocol witness table for RectangleMark;
    v30 = swift_getOpaqueTypeConformance2(&v25, &opaque type descriptor for <<opaque return type of ChartContent.mask<A>(content:)>>, 1);
    v31 = v30;
    v13 = sub_100075EB0(&qword_100C03070);
    v25 = type metadata accessor for RuleMark(255);
    v26 = &protocol witness table for RuleMark;
    v14 = swift_getOpaqueTypeConformance2(&v25, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 1);
    v25 = v13;
    v26 = &type metadata for Color;
    v27 = (void *)v14;
    v28 = &protocol witness table for Color;
    v32 = swift_getOpaqueTypeConformance2(&v25, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    v15 = sub_100075EB0(&qword_100C03078);
    v16 = sub_100075EB0(&qword_100C03080);
    v17 = type metadata accessor for PointMark(255);
    v18 = sub_100075EB0(&qword_100C03088);
    v19 = sub_100746DC0();
    v25 = v17;
    v26 = (void *)v18;
    v27 = &protocol witness table for PointMark;
    v28 = (void *)v19;
    v20 = swift_getOpaqueTypeConformance2(&v25, &opaque type descriptor for <<opaque return type of ChartContent.annotation<A>(position:alignment:spacing:content:)>>, 1);
    v25 = v16;
    v26 = &type metadata for Color;
    v27 = (void *)v20;
    v28 = &protocol witness table for Color;
    v21 = swift_getOpaqueTypeConformance2(&v25, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    v25 = v15;
    v26 = (void *)v5;
    v27 = (void *)v21;
    v28 = &protocol witness table for RectangleMark;
    v33 = swift_getOpaqueTypeConformance2(&v25, &opaque type descriptor for <<opaque return type of ChartContent.mask<A>(content:)>>, 1);
    v22 = sub_100075EB0(&qword_100C03098);
    sub_100748054((uint64_t)&unk_100C030A0);
    v25 = v22;
    v26 = (void *)v5;
    v27 = v23;
    v28 = &protocol witness table for RectangleMark;
    v34 = swift_getOpaqueTypeConformance2(&v25, &opaque type descriptor for <<opaque return type of ChartContent.mask<A>(content:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v24);
    atomic_store(result, (unint64_t *)&qword_100C03010);
  }
  return result;
}

unint64_t sub_100746D3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C03030;
  if (!qword_100C03030)
  {
    v1 = sub_100075EB0(&qword_100C03020);
    sub_100748054((uint64_t)&unk_100C03038);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C03030);
  }
  return result;
}

unint64_t sub_100746DC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C03090;
  if (!qword_100C03090)
  {
    v1 = sub_100075EB0(&qword_100C03088);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C03090);
  }
  return result;
}

unint64_t sub_100746E24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C030B0;
  if (!qword_100C030B0)
  {
    v1 = sub_100075EB0(&qword_100C02FC0);
    sub_100748054((uint64_t)&unk_100C030B8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C030B0);
  }
  return result;
}

void sub_100746EA8()
{
  sub_10073F55C();
}

unint64_t sub_100746EC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C030F0;
  if (!qword_100C030F0)
  {
    v1 = sub_100075EB0(&qword_100C030E0);
    sub_100748054((uint64_t)&unk_100C030F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C030F0);
  }
  return result;
}

void sub_100746F4C()
{
  sub_10073F848();
}

unint64_t sub_100746F60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C03128;
  if (!qword_100C03128)
  {
    v1 = sub_100075EB0(&qword_100C03118);
    sub_100748054((uint64_t)&unk_100C03130);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C03128);
  }
  return result;
}

void sub_100746FE4(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_10073F9EC(*(_QWORD *)(v1 + 16), a1);
}

void sub_100746FF0()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000DA1D0();
  sub_1000C130C();
  sub_10073FF54(v0, v1);
}

void sub_100747020()
{
  sub_1003208AC((uint64_t)&unk_100C03150);
}

void sub_100747044()
{
  sub_1003208AC((uint64_t)&unk_100C03160);
}

uint64_t sub_10074706C(uint64_t a1)
{
  return sub_1007475E4(a1, (uint64_t (*)(uint64_t))sub_100740158);
}

unint64_t sub_100747078()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C03178;
  if (!qword_100C03178)
  {
    v1 = sub_100075EB0(&qword_100C03170);
    sub_100748054((uint64_t)&unk_100C03180);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C03178);
  }
  return result;
}

void sub_1007470FC(void *a1)
{
  bzero(a1, 0xF9uLL);
}

uint64_t sub_100747108(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1007473D4(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t))sub_100740B50);
}

uint64_t sub_100747118()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = (int *)sub_1000DA1D0();
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v26 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for ChartProxy(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v27 = v6;
  v28 = v5;
  v25 = *(_QWORD *)(v6 + 64);
  v29 = v0;
  v8 = v0 + v4;
  v9 = sub_100098778();
  if (!sub_10007A06C(v0 + v4))
    sub_1000BDD1C(v0 + v4, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8));
  sub_1000BA294(&qword_100BDD670);
  swift_release();
  swift_release();
  swift_release();
  v10 = v8 + v1[6];
  if (!sub_10007A06C(v10))
    sub_1000BDD1C(v10, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8));
  swift_release();
  swift_release();
  v11 = v8 + v1[8];
  sub_1000891C8();
  swift_release();
  v12 = v11 + *(int *)(sub_1000BA294(&qword_100C02ED0) + 32);
  v13 = sub_1000BD520();
  if (!_s7Weather24LocationCompositionStateOwet_0(v12, 1, v13))
    sub_1000B3274(v12, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8));
  v14 = v8 + v1[9];
  sub_1000BA294(&qword_100BC2908);
  if (swift_getEnumCaseMultiPayload(v14) == 1)
  {
    type metadata accessor for LayoutDirection(0);
    sub_1000C092C();
    v15(v14);
  }
  else
  {
    sub_1000891C8();
  }
  v16 = v3 | v7 | 7;
  v17 = (v4 + v26 + v7) & ~v7;

  v18 = v8 + v1[11];
  swift_bridgeObjectRelease();
  v19 = (int *)sub_1000C0B8C();
  sub_1000B3274(v18 + v19[5], *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8));
  v20 = v18 + v19[6];
  type metadata accessor for Location(0);
  sub_1000C092C();
  v21(v20);
  sub_1000D0850(v19[7]);
  sub_1000D0850(v19[8]);
  sub_1000D0850(v19[9]);
  sub_1000D0850(v19[10]);
  sub_1000BDD1C(v18 + v19[11], *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8));
  sub_1000D0850(v19[12]);
  swift_bridgeObjectRelease();
  swift_release();
  v22 = v8 + v1[22];
  sub_1000D95F0();
  sub_1000C092C();
  v23(v22);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v29 + v17, v28);
  return swift_deallocObject(v29, v17 + v25, v16);
}

uint64_t sub_1007473C8(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1007473D4(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t))sub_100741330);
}

uint64_t sub_1007473D4(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = a3 & 1;
  v8 = *(_QWORD *)(sub_1000DA1D0() - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ChartProxy(0) - 8) + 80);
  return a4(a1, a2, v7, v4 + v9, v4 + ((v9 + v10 + v11) & ~v11));
}

double sub_100747460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  double result;

  if (a14)
  {
    swift_retain(a1);
    swift_retain(a14);
    *(_QWORD *)&result = swift_retain(a22).n128_u64[0];
  }
  return result;
}

uint64_t sub_1007474A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char);
  char v5;

  v2 = sub_10009987C(a1);
  v5 = *(_BYTE *)(v1 + 248);
  v3(v2, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 144),
    *(_QWORD *)(v1 + 152),
    *(_QWORD *)(v1 + 160),
    *(_QWORD *)(v1 + 168),
    *(_QWORD *)(v1 + 176),
    *(_QWORD *)(v1 + 184),
    *(_QWORD *)(v1 + 192),
    *(_QWORD *)(v1 + 200),
    *(_QWORD *)(v1 + 208),
    *(_QWORD *)(v1 + 216),
    *(_QWORD *)(v1 + 224),
    *(_QWORD *)(v1 + 232),
    *(_QWORD *)(v1 + 240),
    v5);
  return v1;
}

uint64_t sub_100747520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t result;

  result = a14;
  if (a14)
  {
    swift_release(a14);
    swift_release(a22);
    return swift_release(a1);
  }
  return result;
}

uint64_t sub_100747564(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 80);
  swift_retain(*(_QWORD *)(a1 + 16));
  swift_retain(v2);
  return a1;
}

uint64_t sub_100747598(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  swift_release(*(_QWORD *)(a1 + 80));
  swift_release(v2);
  return a1;
}

void sub_1007475CC(void *a1)
{
  bzero(a1, 0xD8uLL);
}

uint64_t sub_1007475D8(uint64_t a1)
{
  return sub_1007475E4(a1, (uint64_t (*)(uint64_t))sub_100743298);
}

uint64_t sub_1007475E4(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;

  sub_1000DA1D0();
  v2 = sub_1000C130C();
  return a2(v2);
}

unint64_t sub_100747624()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C031C8;
  if (!qword_100C031C8)
  {
    v1 = sub_100075EB0(&qword_100C031C0);
    sub_1007476F8((uint64_t)&unk_100C031D0);
    sub_100748054((uint64_t)&unk_100C031E0);
    sub_1007476F8((uint64_t)&qword_100BF4398);
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1);
    atomic_store(result, (unint64_t *)&qword_100C031C8);
  }
  return result;
}

unint64_t sub_1007476F8(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  unint64_t result;
  uint64_t *v5;
  _QWORD v6[4];

  result = sub_10009987C(a1);
  if (!result)
  {
    sub_1000AE8E8(0, v5);
    v6[0] = v3(255);
    v6[1] = &type metadata for Color;
    v6[2] = v2;
    v6[3] = &protocol witness table for Color;
    sub_10009885C((uint64_t)v6, (uint64_t)&opaque type descriptor for <<opaque return type of AxisMark.foregroundStyle<A>(_:)>>);
    result = sub_100099A04((uint64_t)&protocol conformance descriptor for <A> A?);
    atomic_store(result, v1);
  }
  return result;
}

void sub_100747778(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_100743B00(*(_QWORD *)(v1 + 24), a1);
}

void sub_100747780(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  if (!sub_10009987C(a1))
  {
    v3 = sub_1000AE8E8(0, v2);
    atomic_store(sub_1000FDC28(v3, v3), v1);
  }
  sub_100099960();
}

uint64_t sub_1007477BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10074213C(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1007477C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C03238;
  if (!qword_100C03238)
  {
    v1 = sub_100075EB0(&qword_100C03230);
    sub_100747834();
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1);
    atomic_store(result, (unint64_t *)&qword_100C03238);
  }
  return result;
}

unint64_t sub_100747834()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;

  result = qword_100C03240;
  if (!qword_100C03240)
  {
    v1 = sub_100075EB0(&qword_100C03248);
    v2 = sub_100075EB0(&qword_100C03250);
    v3 = sub_100075EB0(&qword_100BF42B8);
    v4 = type metadata accessor for BasicChartSymbolShape(255);
    v8 = type metadata accessor for PointMark(255);
    v9 = &protocol witness table for PointMark;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of ChartContent.symbolSize(_:)>>, 1);
    sub_100748080((uint64_t)&qword_100BD78E8);
    v8 = v3;
    v9 = (void *)v4;
    v10 = OpaqueTypeConformance2;
    v11 = v6;
    v7 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of ChartContent.symbol<A>(_:)>>, 1);
    v8 = v2;
    v9 = &type metadata for Color;
    v10 = v7;
    v11 = &protocol witness table for Color;
    swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100C03240);
  }
  return result;
}

uint64_t sub_100747964@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;

  return sub_100742690(*(_QWORD *)(v2 + 16), a1, a2);
}

unint64_t sub_10074796C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  result = qword_100C03260;
  if (!qword_100C03260)
  {
    v1 = sub_100075EB0(&qword_100C03258);
    v2 = sub_100075EB0(&qword_100C03250);
    v3 = sub_100075EB0(&qword_100BF42B8);
    v4 = type metadata accessor for BasicChartSymbolShape(255);
    v5 = type metadata accessor for PointMark(255);
    v13 = v5;
    v14 = &protocol witness table for PointMark;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v13, &opaque type descriptor for <<opaque return type of ChartContent.symbolSize(_:)>>, 1);
    sub_100748080((uint64_t)&qword_100BD78E8);
    v13 = v3;
    v14 = (void *)v4;
    v15 = (void *)OpaqueTypeConformance2;
    v16 = v7;
    v8 = swift_getOpaqueTypeConformance2(&v13, &opaque type descriptor for <<opaque return type of ChartContent.symbol<A>(_:)>>, 1);
    v13 = v2;
    v14 = &type metadata for Color;
    v15 = (void *)v8;
    v16 = &protocol witness table for Color;
    v17 = swift_getOpaqueTypeConformance2(&v13, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    v9 = sub_100075EB0(&qword_100C03080);
    v10 = sub_100075EB0(&qword_100C03088);
    v11 = sub_100746DC0();
    v13 = v5;
    v14 = (void *)v10;
    v15 = &protocol witness table for PointMark;
    v16 = (void *)v11;
    v12 = swift_getOpaqueTypeConformance2(&v13, &opaque type descriptor for <<opaque return type of ChartContent.annotation<A>(position:alignment:spacing:content:)>>, 1);
    v13 = v9;
    v14 = &type metadata for Color;
    v15 = (void *)v12;
    v16 = &protocol witness table for Color;
    v18 = swift_getOpaqueTypeConformance2(&v13, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1);
    atomic_store(result, (unint64_t *)&qword_100C03260);
  }
  return result;
}

void sub_100747B10()
{
  sub_100743094();
}

void sub_100747B30()
{
  sub_100743094();
}

void sub_100747B54(unint64_t *a1)
{
  sub_100747B84(a1, 7954788, 0xE300000000000000);
}

uint64_t sub_100747B64()
{
  uint64_t v0;

  return sub_100741B90(*(_QWORD *)(v0 + 16));
}

void sub_100747B70(unint64_t *a1)
{
  sub_100747B84(a1, 0x746867696ELL, 0xE500000000000000);
}

void sub_100747B84(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000DA1D0() - 8) + 80);
  sub_10074187C(a1, v3 + ((v7 + 16) & ~v7), a2, a3);
  sub_10004A2A0();
}

uint64_t sub_100747BDC()
{
  uint64_t v0;

  return sub_10074170C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100747BE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;

  sub_100075EB0(&qword_100C03000);
  sub_100075EB0(&qword_100C03170);
  sub_100075EB0(&qword_100C02FF8);
  sub_100075EB0(&qword_100C03140);
  sub_100075EB0(&qword_100C02FF0);
  sub_100075EB0(&qword_100BF9E18);
  v26 = sub_100075EB0(&qword_100C02FE8);
  sub_100075EB0(&qword_100C02FE0);
  sub_100075EB0(&qword_100C03108);
  v25 = sub_100075EB0(&qword_100C02FD8);
  v0 = sub_100075EB0(&qword_100C030D0);
  v1 = sub_100075EB0(&qword_100C02FD0);
  v2 = sub_100075EB0(&qword_100C030C0);
  v3 = type metadata accessor for PlotDimensionScaleRange(255);
  v4 = sub_100075EB0(&qword_100C02FC8);
  v5 = sub_100075EB0(&qword_100BC69E0);
  sub_1003208AC((uint64_t)&unk_100C030A8);
  v7 = v6;
  sub_100747780((uint64_t)&unk_100BF42C8);
  v27 = v4;
  v28 = v5;
  v29 = v7;
  v30 = v8;
  v9 = sub_10009885C((uint64_t)&v27, (uint64_t)&opaque type descriptor for <<opaque return type of View.chartXScale<A>(domain:type:)>>);
  sub_100747780((uint64_t)&unk_100C030C8);
  v27 = v1;
  v28 = v2;
  v29 = v3;
  v30 = v9;
  v31 = v10;
  v32 = &protocol witness table for PlotDimensionScaleRange;
  v11 = sub_10009885C((uint64_t)&v27, (uint64_t)&opaque type descriptor for <<opaque return type of View.chartYScale<A, B>(domain:range:type:)>>);
  v12 = sub_1000AE9D4();
  v13 = sub_100075EB0(&qword_100C030E0);
  sub_100748054((uint64_t)&unk_100C030E8);
  v15 = v14;
  v16 = sub_100746EC8();
  v27 = v12;
  v28 = v13;
  v29 = v15;
  v30 = v16;
  v17 = sub_10009885C((uint64_t)&v27, (uint64_t)&opaque type descriptor for <<opaque return type of AxisContent.compositingLayer<A>(style:)>>);
  v27 = v25;
  v28 = v0;
  v29 = v11;
  v30 = v17;
  sub_10009885C((uint64_t)&v27, (uint64_t)&opaque type descriptor for <<opaque return type of View.chartXAxis<A>(content:)>>);
  v18 = sub_100075EB0(&qword_100C03110);
  v19 = sub_100075EB0(&qword_100C03118);
  sub_100748054((uint64_t)&unk_100C03120);
  v21 = v20;
  v22 = sub_100746F60();
  v27 = v18;
  v28 = v19;
  v29 = v21;
  v30 = v22;
  sub_10009885C((uint64_t)&v27, (uint64_t)&opaque type descriptor for <<opaque return type of AxisContent.compositingLayer<A>(style:)>>);
  sub_100095074();
  v23 = sub_10009885C((uint64_t)&v27, (uint64_t)&opaque type descriptor for <<opaque return type of View.chartYAxis<A>(content:)>>);
  v27 = v26;
  v28 = v23;
  sub_10009885C((uint64_t)&v27, (uint64_t)&opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>);
  sub_10064732C();
  sub_100095074();
  sub_10009885C((uint64_t)&v27, (uint64_t)&opaque type descriptor for <<opaque return type of View.accessibilityRepresentation<A>(representation:)>>);
  sub_1005A0BC0((uint64_t)&unk_100C03148);
  sub_100095074();
  sub_10009885C((uint64_t)&v27, (uint64_t)&opaque type descriptor for <<opaque return type of View.chartBackground<A>(alignment:content:)>>);
  sub_100747078();
  sub_100095074();
  return sub_10009885C((uint64_t)&v27, (uint64_t)&opaque type descriptor for <<opaque return type of View.chartOverlay<A>(alignment:content:)>>);
}

unint64_t sub_100747F6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF2360;
  if (!qword_100BF2360)
  {
    v1 = sub_100075EB0(&qword_100BF2368);
    sub_100748054((uint64_t)&unk_100BF2370);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100BF2360);
  }
  return result;
}

void sub_100747FE8(uint64_t a1)
{
  unint64_t *v1;
  void (*v2)(void);
  uint64_t *v3;
  uint64_t v4;

  if (!sub_10009987C(a1))
  {
    v4 = sub_1000B4444(0, v3);
    v2();
    sub_100748080((uint64_t)&unk_100BDCBB8);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for <> BuilderConditional<A, B>, v4), v1);
  }
  sub_100099960();
}

void sub_100748054(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  if (!sub_10009987C(a1))
  {
    v3 = sub_1000B4444(0, v2);
    atomic_store(sub_1000FDC28(v3, v3), v1);
  }
  sub_10004A298();
}

void sub_100748080(uint64_t a1)
{
  unint64_t *v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  if (!sub_10009987C(a1))
  {
    v3 = v2(255);
    atomic_store(sub_1000FDC28(v3, v3), v1);
  }
  sub_10004A298();
}

id sub_1007480B4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC7Weather38DebugSevereNotificationsViewController____lazy_storage___dateFormatter;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC7Weather38DebugSevereNotificationsViewController____lazy_storage___dateFormatter);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC7Weather38DebugSevereNotificationsViewController____lazy_storage___dateFormatter);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
    sub_1000BD398(v4, "setDateStyle:");
    sub_1000BD398(v4, "setTimeStyle:");
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_100748144(uint64_t a1)
{
  char *v1;
  objc_super v3;

  *(_QWORD *)&v1[OBJC_IVAR____TtC7Weather38DebugSevereNotificationsViewController____lazy_storage___dateFormatter] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC7Weather38DebugSevereNotificationsViewController_notifications] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for DebugSevereNotificationsViewController();
  return objc_msgSendSuper2(&v3, "initWithStyle:", 2);
}

void sub_100748190()
{
  char *v0;

  *(_QWORD *)&v0[OBJC_IVAR____TtC7Weather38DebugSevereNotificationsViewController____lazy_storage___dateFormatter] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x706F2D6F6ELL, 0xE500000000000000, "Weather/DebugSevereNotificationsViewController.swift", 52, 2);
  __break(1u);
}

void sub_100748208()
{
  void *v0;
  id v1;
  void *v2;
  unint64_t v3;
  uint64_t ObjCClassFromMetadata;
  NSString v5;
  objc_super v6;

  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for DebugSevereNotificationsViewController();
  objc_msgSendSuper2(&v6, "viewDidLoad");
  v1 = objc_msgSend(v0, "tableView");
  if (v1)
  {
    v2 = v1;
    v3 = sub_1003E9A38();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v3);
    v5 = sub_1000B4550();
    objc_msgSend(v2, "registerClass:forCellReuseIdentifier:", ObjCClassFromMetadata, v5);

    sub_1001207F8(0xD000000000000014, 0x80000001009FF100, v0);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100748300()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC7Weather38DebugSevereNotificationsViewController_notifications)
                   + 16);
}

unint64_t sub_100748334(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  NSString v13;
  Class isa;
  id v15;
  uint64_t v16;
  __n128 v17;
  unint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  Class v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  void *v34;
  Swift::String v35;
  void (*v36)(uint64_t *, _QWORD);
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  unint64_t v47[2];

  v4 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for UIListContentConfiguration(0);
  v8 = *(_QWORD *)(v7 - 8);
  v41 = v7;
  v42 = v8;
  __chkstk_darwin(v7);
  sub_100099864();
  v9 = type metadata accessor for SevereNotificationEntity(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000B4550();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v15 = objc_msgSend(a1, "dequeueReusableCellWithIdentifier:forIndexPath:", v13, isa);

  v16 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7Weather38DebugSevereNotificationsViewController_notifications);
  result = IndexPath.row.getter(v17);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (result >= *(_QWORD *)(v16 + 16))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v19 = v9;
  v20 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, v16+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * result, v9);
  v21 = static UIListContentConfiguration.subtitleCell()(v20);
  SevereNotificationEntity.id.getter(v21);
  dispatch thunk of Column.value.getter(&v43);
  sub_10009880C();
  UIListContentConfiguration.text.setter(v43);
  UIListContentConfiguration.textProperties.modify(&v43);
  UIListContentConfiguration.TextProperties.adjustsFontSizeToFitWidth.setter(1);
  sub_100098D88();
  UIListContentConfiguration.textProperties.modify(&v43);
  UIListContentConfiguration.TextProperties.numberOfLines.setter(1);
  sub_100098D88();
  v43 = 0;
  v44 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  v43 = 0x203A65746144;
  v44 = 0xE600000000000000;
  v22 = sub_1007480B4();
  SevereNotificationEntity.date.getter();
  dispatch thunk of Column.value.getter(v6);
  sub_10009880C();
  v23 = type metadata accessor for Date(0);
  result = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v6, 1, v23);
  if ((_DWORD)result != 1)
  {
    v24 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v6, v23);
    v25 = objc_msgSend(v22, "stringFromDate:", v24);

    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v28 = v27;

    v29._countAndFlagsBits = v26;
    v29._object = v28;
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._object = (void *)0x80000001009F88C0;
    v30._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v30);
    SevereNotificationEntity.subscription.getter(v31);
    dispatch thunk of Column.value.getter(v47);
    sub_10009880C();
    v32 = sub_1004907AC(v47[0], v47[1]);
    v34 = v33;
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = v32;
    v35._object = v34;
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    UIListContentConfiguration.secondaryText.setter(v43);
    v36 = (void (*)(uint64_t *, _QWORD))UIListContentConfiguration.secondaryTextProperties.modify(&v43);
    UIListContentConfiguration.TextProperties.numberOfLines.setter(0);
    v36(&v43, 0);
    v37 = v41;
    v45 = v41;
    v46 = &protocol witness table for UIListContentConfiguration;
    v38 = sub_10005F164(&v43);
    v39 = v42;
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v42 + 16))(v38, v2, v37);
    UITableViewCell.contentConfiguration.setter(&v43);
    sub_1000BD398(v15, "setAccessoryType:");
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v2, v37);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v19);
    return (unint64_t)v15;
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_1007487BC()
{
  char *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  unint64_t v7;
  id v8;
  void *v9;
  id v10;
  id v11;

  v2 = v0;
  v3 = type metadata accessor for SevereNotificationEntity(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100099864();
  v5 = *(_QWORD *)&v0[OBJC_IVAR____TtC7Weather38DebugSevereNotificationsViewController_notifications];
  v7 = IndexPath.row.getter(v6);
  if ((v7 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v7 >= *(_QWORD *)(v5 + 16))
  {
LABEL_7:
    __break(1u);
    return;
  }
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v4 + 16))(v1, v5+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v7, v3);
  v8 = objc_allocWithZone((Class)type metadata accessor for DebugSevereNotificationViewController(0));
  v9 = (void *)sub_1003E8D54(v1);
  v10 = objc_msgSend(v2, "navigationController");
  if (v10)
  {
    v11 = v10;
    objc_msgSend(v10, "pushViewController:animated:", v9, 1);

    v9 = v11;
  }

}

void sub_100748970()
{
  _swift_stdlib_reportUnimplementedInitializer("Weather.DebugSevereNotificationsViewController", 46, "init(style:)", 12, 0);
  __break(1u);
}

void sub_1007489A8()
{
  _swift_stdlib_reportUnimplementedInitializer("Weather.DebugSevereNotificationsViewController", 46, "init(nibName:bundle:)", 21, 0);
  __break(1u);
}

id sub_1007489F8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DebugSevereNotificationsViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DebugSevereNotificationsViewController()
{
  return objc_opt_self(_TtC7Weather38DebugSevereNotificationsViewController);
}

uint64_t LocalSearchRequestService.__allocating_init(appConfigurationManager:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, 56, 7);
  sub_10003C800(a1, v3 + 16);
  return v3;
}

uint64_t LocalSearchRequestService.init(appConfigurationManager:)(__int128 *a1)
{
  uint64_t v1;

  sub_10003C800(a1, v1 + 16);
  return v1;
}

void LocalSearchRequestService.performLocalSearch(with:calloutTitle:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  _QWORD v7[6];

  v5 = objc_msgSend(objc_allocWithZone((Class)MKLocalSearchRequest), "initWithCompletion:", a1);
  v7[2] = v5;
  v7[3] = a2;
  v7[4] = a3;
  v6 = sub_1000BA294(&qword_100BF5B10);
  sub_1000860C4(v6);
  Promise.init(resolver:)(sub_100748D88, v7);

  sub_1000BA668();
}

void LocalSearchRequestService.performLocalSearch(with:)(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  _QWORD v6[6];

  sub_1000A0794(0, &qword_100C03358, MKLocalSearchRequest_ptr);
  swift_bridgeObjectRetain();
  v4 = sub_100748BEC(a1, a2);
  v6[2] = v4;
  v6[3] = a1;
  v6[4] = a2;
  v5 = sub_1000BA294(&qword_100BF5B10);
  sub_1000860C4(v5);
  Promise.init(resolver:)(sub_10074A114, v6);

  sub_1000BA668();
}

id sub_100748BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v4;
  NSString v5;
  id v6;

  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "initWithNaturalLanguageQuery:", v5, swift_bridgeObjectRelease(a2).n128_f64[0]);

  return v6;
}

void sub_100748C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  id v14;
  _QWORD *v15;
  void *v16;
  _QWORD v17[6];

  sub_100749DE8(a6, a7, a5);
  v14 = objc_msgSend(objc_allocWithZone((Class)MKLocalSearch), "initWithRequest:", a5);
  v15 = (_QWORD *)swift_allocObject(&unk_100B8E1D8, 64, 7);
  v15[2] = a6;
  v15[3] = a7;
  v15[4] = a3;
  v15[5] = a4;
  v15[6] = a1;
  v15[7] = a2;
  v17[4] = sub_100749E60;
  v17[5] = v15;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  v17[2] = sub_100749D10;
  v17[3] = &unk_100B8E1F0;
  v16 = _Block_copy(v17);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  objc_msgSend(v14, "startWithCompletionHandler:", v16, swift_release().n128_f64[0]);
  _Block_release(v16);

}

void sub_100748D88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_100748C5C(a1, a2, a3, a4, *(void **)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32));
}

void sub_100748D94(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(void), uint64_t a6, void (*a7)(char *), uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  void *v64;
  id v65;
  id v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  uint64_t v82;
  os_log_type_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  id v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  uint64_t v98;
  os_log_type_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  double v103;
  double v104;
  double v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  char *v114;
  id v115;
  uint64_t v116;
  id v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  id v133;
  NSObject *v134;
  os_log_type_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  __n128 v142;
  void (*v143)(char *, uint64_t, __n128);
  id v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  void (*v148)(void);
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  void (*v167)(char *);
  uint64_t v168;
  id v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  void (*v173)(void);
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178[2];

  v166 = a8;
  v167 = a7;
  v172 = a6;
  v173 = a5;
  v174 = a4;
  v171 = a3;
  v169 = a1;
  v9 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v9);
  v170 = (char *)&v154 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = type metadata accessor for Location(0);
  v165 = *(_QWORD *)(v168 - 8);
  __chkstk_darwin(v168);
  v164 = (char *)&v154 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v154 - v13;
  v15 = sub_1000BA294(&qword_100BCCC50);
  __chkstk_darwin(v15);
  v17 = (char *)&v154 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v154 - v19;
  __chkstk_darwin(v21);
  v23 = (char *)&v154 - v22;
  v24 = type metadata accessor for TimeZone(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = (char *)&v154 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v30 = (char *)&v154 - v29;
  v31 = type metadata accessor for Logger(0);
  v175 = *(_QWORD *)(v31 - 8);
  v176 = v31;
  __chkstk_darwin(v31);
  __chkstk_darwin(v32);
  __chkstk_darwin(v33);
  *(_QWORD *)&v39 = __chkstk_darwin(v34).n128_u64[0];
  if (a2)
  {
    v40 = (char *)&v154 - v36;
    v41 = swift_errorRetain(a2);
    static Logger.geocode.getter(v41);
    swift_errorRetain(a2);
    v42 = v174;
    swift_bridgeObjectRetain();
    swift_errorRetain(a2);
    swift_bridgeObjectRetain();
    v44 = Logger.logObject.getter(v43);
    v46 = static os_log_type_t.error.getter(v44, v45);
    if (os_log_type_enabled(v44, v46))
    {
      v47 = swift_slowAlloc(32, -1);
      v48 = swift_slowAlloc(64, -1);
      *(_DWORD *)v47 = 141558531;
      v177 = 1752392040;
      v178[0] = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178);
      *(_WORD *)(v47 + 12) = 2085;
      swift_bridgeObjectRetain();
      v177 = sub_1000CE1C8(v171, v42, v178);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178);
      swift_bridgeObjectRelease_n(v42, 3);
      *(_WORD *)(v47 + 22) = 2082;
      v177 = a2;
      swift_errorRetain(a2);
      sub_1000BA294(&qword_100BD7910);
      v49 = String.init<A>(describing:)(&v177);
      v177 = sub_1000CE1C8(v49, v50, v178);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178);
      swift_bridgeObjectRelease();
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v44, v46, "Failed to geocode. searchString=%{sensitive,mask.hash}s, error=%{public}s", (uint8_t *)v47, 0x20u);
      swift_arrayDestroy(v48, 2);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v47, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v42, 2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    (*(void (**)(char *, uint64_t))(v175 + 8))(v40, v176);
    v75 = sub_100749E70();
    v76 = swift_allocError(&type metadata for LocalSearchRequestService.LocalSearchRequestError, v75, 0, 0);
    *v77 = a2;
    swift_errorRetain(a2);
    ((void (*)(uint64_t))v173)(v76);
    swift_errorRelease(v76);
    v78 = a2;
LABEL_20:
    swift_errorRelease(v78);
    return;
  }
  v156 = (uint64_t)v17;
  v163 = v20;
  v158 = v23;
  v162 = (uint64_t)v27;
  v51 = v170;
  v159 = v30;
  v160 = v25;
  v161 = v24;
  v157 = v14;
  v52 = v174;
  v53 = v169;
  if (!v169)
  {
LABEL_16:
    v79 = v35;
    static Logger.geocode.getter(v53);
    v80 = swift_bridgeObjectRetain_n(v52, 2);
    v81 = Logger.logObject.getter(v80);
    v83 = static os_log_type_t.error.getter(v81, v82);
    if (os_log_type_enabled(v81, v83))
    {
      v84 = swift_slowAlloc(22, -1);
      v85 = swift_slowAlloc(32, -1);
      *(_DWORD *)v84 = 141558275;
      v177 = 1752392040;
      v178[0] = v85;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178);
      *(_WORD *)(v84 + 12) = 2085;
      swift_bridgeObjectRetain();
      v177 = sub_1000CE1C8(v171, v52, v178);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178);
      swift_bridgeObjectRelease_n(v52, 3);
      swift_arrayDestroy(v85, 1);
      swift_slowDealloc(v85, -1, -1);
      swift_slowDealloc(v84, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v52, 2);
    }
    (*(void (**)(uint64_t, uint64_t))(v175 + 8))(v79, v176);
    v86 = sub_100749E70();
    v87 = swift_allocError(&type metadata for LocalSearchRequestService.LocalSearchRequestError, v86, 0, 0);
    *v88 = 0;
    v173();
    v78 = v87;
    goto LABEL_20;
  }
  v54 = v35;
  v55 = v38;
  v155 = v37;
  v56 = objc_msgSend(v169, "mapItems", v39);
  v57 = sub_1000A0794(0, &qword_100C03408, MKMapItem_ptr);
  v58 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v56, v57);

  if ((unint64_t)v58 >> 62)
  {
    if (v58 < 0)
      v153 = v58;
    else
      v153 = v58 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v59 = _CocoaArrayWrapper.endIndex.getter(v153);
    swift_bridgeObjectRelease();
  }
  else
  {
    v59 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v60 = (uint64_t)v51;
  v62 = v162;
  v61 = (uint64_t)v163;
  if (!v59)
  {
    swift_bridgeObjectRelease();
    v35 = v54;
    goto LABEL_16;
  }
  sub_1001215C4(0, (v58 & 0xC000000000000001) == 0, v58);
  if ((v58 & 0xC000000000000001) != 0)
    v63 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v58);
  else
    v63 = *(id *)(v58 + 32);
  v64 = v63;
  v65 = objc_msgSend(v63, "placemark", swift_bridgeObjectRelease().n128_f64[0]);
  v66 = objc_msgSend(v65, "timeZone");

  if (!v66)
  {
    v89 = v61;
    v71 = v161;
    _s7Weather24LocationCompositionStateOwst_0(v89, 1, 1, v161);
    v67 = v160;
    v73 = v159;
    goto LABEL_22;
  }
  static TimeZone._unconditionallyBridgeFromObjectiveC(_:)(v66);

  v67 = v160;
  v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v160 + 32);
  v69 = v61;
  v70 = v61;
  v71 = v161;
  v68(v69, v62, v161);
  _s7Weather24LocationCompositionStateOwst_0(v70, 0, 1, v71);
  v72 = _s7Weather24LocationCompositionStateOwet_0(v70, 1, v71);
  v73 = v159;
  if (v72 == 1)
  {
LABEL_22:
    v90 = objc_msgSend(v64, "timeZone");
    if (v90)
    {
      v91 = v90;
      v92 = v156;
      static TimeZone._unconditionallyBridgeFromObjectiveC(_:)(v90);

      v93 = v92;
      v94 = 0;
      v74 = (uint64_t)v158;
    }
    else
    {
      v94 = 1;
      v74 = (uint64_t)v158;
      v93 = v156;
    }
    _s7Weather24LocationCompositionStateOwst_0(v93, v94, 1, v71);
    sub_100749EAC(v93, v74);
    sub_100379ADC((uint64_t)v163);
    goto LABEL_26;
  }
  v74 = (uint64_t)v158;
  v68((uint64_t)v158, (uint64_t)v163, v71);
  _s7Weather24LocationCompositionStateOwst_0(v74, 0, 1, v71);
LABEL_26:
  if (_s7Weather24LocationCompositionStateOwet_0(v74, 1, v71) == 1)
  {
    v95 = sub_100379ADC(v74);
    static Logger.geocode.getter(v95);
    v96 = swift_bridgeObjectRetain_n(v52, 2);
    v97 = Logger.logObject.getter(v96);
    v99 = static os_log_type_t.error.getter(v97, v98);
    if (os_log_type_enabled(v97, v99))
    {
      v100 = swift_slowAlloc(22, -1);
      v101 = swift_slowAlloc(32, -1);
      *(_DWORD *)v100 = 141558275;
      v177 = 1752392040;
      v178[0] = v101;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178);
      *(_WORD *)(v100 + 12) = 2085;
      swift_bridgeObjectRetain();
      v177 = sub_1000CE1C8(v171, v52, v178);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178);
      swift_bridgeObjectRelease_n(v52, 3);
      _os_log_impl((void *)&_mh_execute_header, v97, v99, "Time zone missing while geocoding, searchString=%{sensitive,mask.hash}s.", (uint8_t *)v100, 0x16u);
      swift_arrayDestroy(v101, 1);
      swift_slowDealloc(v101, -1, -1);
      swift_slowDealloc(v100, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v52, 2);
    }
    (*(void (**)(uint64_t, uint64_t))(v175 + 8))(v55, v176);
    v150 = sub_100749E70();
    v151 = swift_allocError(&type metadata for LocalSearchRequestService.LocalSearchRequestError, v150, 0, 0);
    *v152 = 1;
    v173();
    swift_errorRelease(v151);

  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(v73, v74, v71);
    v102 = objc_msgSend(v64, "placemark");
    objc_msgSend(v102, "coordinate");
    v104 = v103;
    v106 = v105;

    v107 = CLLocationCoordinate2D.id.getter(v104, v106);
    v172 = v108;
    v173 = (void (*)(void))v107;
    v109 = objc_msgSend(v64, "wc_weatherDisplayName");
    v169 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
    v163 = (char *)v110;

    v111 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v67 + 16))(v62, v73, v71);
    Date.init()(v111);
    v112 = type metadata accessor for Date(0);
    _s7Weather24LocationCompositionStateOwst_0(v60, 0, 1, v112);
    v113 = objc_msgSend(v64, "placemark");
    v162 = MKPlacemark.safeTitle.getter();
    v158 = v114;

    v115 = objc_msgSend(v64, "placemark");
    v156 = MKPlacemark.safeSubtitle.getter();
    v154 = v116;

    v117 = objc_msgSend(v64, "wc_weatherLocationName");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v117);

    v118 = objc_msgSend(v64, "wc_weatherLocationName");
    v119 = v62;
    v120 = static String._unconditionallyBridgeFromObjectiveC(_:)(v118);
    v122 = v121;

    v123 = objc_msgSend(v64, "wc_weatherDisplayName");
    v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(v123);
    v126 = v125;

    static Location.sanitizedSecondaryName(_:name:)(v120, v122, v124, v126);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v127 = v157;
    v128 = Location.init(id:name:timeZone:coordinate:lastRefreshDate:searchTitle:searchSubtitle:preciseName:secondaryName:)(v173, v172, v169, v163, v119, v170, v162, v158);
    v129 = v155;
    static Logger.geocode.getter(v128);
    v131 = v164;
    v130 = v165;
    v132 = v168;
    (*(void (**)(char *, char *, uint64_t))(v165 + 16))(v164, v127, v168);
    swift_bridgeObjectRetain_n(v52, 2);
    v133 = v64;
    v134 = Logger.logObject.getter(v133);
    v135 = static os_log_type_t.default.getter(v134);
    v136 = v135;
    if (os_log_type_enabled(v134, v135))
    {
      v137 = swift_slowAlloc(62, -1);
      v138 = swift_slowAlloc(96, -1);
      v173 = (void (*)(void))v138;
      *(_DWORD *)v137 = 141559299;
      v177 = 1752392040;
      v178[0] = v138;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178);
      *(_WORD *)(v137 + 12) = 2085;
      LODWORD(v172) = v136;
      swift_bridgeObjectRetain();
      v177 = sub_1000CE1C8(v171, v52, v178);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178);
      swift_bridgeObjectRelease_n(v52, 3);
      *(_WORD *)(v137 + 22) = 2160;
      v177 = 1752392040;
      v139 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178);
      *(_WORD *)(v137 + 32) = 2081;
      v140 = Location.id.getter(v139);
      v177 = sub_1000CE1C8(v140, v141, v178);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178);
      v142 = swift_bridgeObjectRelease();
      v143 = *(void (**)(char *, uint64_t, __n128))(v130 + 8);
      v143(v131, v168, v142);
      *(_WORD *)(v137 + 42) = 2160;
      v177 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178);
      *(_WORD *)(v137 + 52) = 2081;
      v144 = objc_msgSend(v133, "wc_weatherLocationName");
      v145 = static String._unconditionallyBridgeFromObjectiveC(_:)(v144);
      v147 = v146;

      v177 = sub_1000CE1C8(v145, v147, v178);
      v127 = v157;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v134, (os_log_type_t)v172, "Successfully geocoded location. searchString=%{sensitive,mask.hash}s, location=%{private,mask.hash}s, unsanitizedSecondaryName=%{private,mask.hash}s", (uint8_t *)v137, 0x3Eu);
      v148 = v173;
      swift_arrayDestroy(v173, 3);
      swift_slowDealloc(v148, -1, -1);
      v149 = v137;
      v132 = v168;
      swift_slowDealloc(v149, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n(v52, 2);
      v143 = *(void (**)(char *, uint64_t, __n128))(v130 + 8);
      ((void (*)(char *, uint64_t))v143)(v131, v132);

    }
    (*(void (**)(uint64_t, uint64_t))(v175 + 8))(v129, v176);
    v167(v127);

    ((void (*)(char *, uint64_t))v143)(v127, v132);
    (*(void (**)(char *, uint64_t))(v160 + 8))(v159, v161);
  }
}

void sub_100749D10(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t LocalSearchRequestService.deinit()
{
  uint64_t v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  return v0;
}

void sub_100749DA0(uint64_t a1, uint64_t a2)
{
  LocalSearchRequestService.performLocalSearch(with:)(a1, a2);
}

void sub_100749DB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LocalSearchRequestService.performLocalSearch(with:calloutTitle:)(a1, a2, a3);
}

uint64_t type metadata accessor for LocalSearchRequestService()
{
  return objc_opt_self(_TtC7Weather25LocalSearchRequestService);
}

void sub_100749DE8(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4;

  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(a3, "setNaturalLanguageQuery:", v4);

}

uint64_t sub_100749E2C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[5]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

void sub_100749E60(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_100748D94(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(void))(v2 + 32), *(_QWORD *)(v2 + 40), *(void (**)(char *))(v2 + 48), *(_QWORD *)(v2 + 56));
}

unint64_t sub_100749E70()
{
  unint64_t result;

  result = qword_100C03400;
  if (!qword_100C03400)
  {
    result = swift_getWitnessTable(&unk_1009C5C38, &type metadata for LocalSearchRequestService.LocalSearchRequestError);
    atomic_store(result, (unint64_t *)&qword_100C03400);
  }
  return result;
}

uint64_t sub_100749EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BCCC50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *initializeBufferWithCopyOfBuffer for LocalSearchRequestService.LocalSearchRequestError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = *a2;
  if (*a2 >= 0xFFFFFFFFuLL)
    swift_errorRetain(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for LocalSearchRequestService.LocalSearchRequestError(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_errorRelease(result);
  return result;
}

unint64_t *assignWithCopy for LocalSearchRequestService.LocalSearchRequestError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
      swift_errorRetain(*a2);
    *a1 = v4;
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
    *a1 = *a2;
  }
  else
  {
    swift_errorRetain(*a2);
    v5 = *a1;
    *a1 = v4;
    swift_errorRelease(v5);
  }
  return a1;
}

unint64_t *assignWithTake for LocalSearchRequestService.LocalSearchRequestError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
    goto LABEL_6;
  if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
LABEL_6:
    *a1 = v4;
    return a1;
  }
  *a1 = v4;
  swift_errorRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocalSearchRequestService.LocalSearchRequestError(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for LocalSearchRequestService.LocalSearchRequestError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

_QWORD *sub_10074A0E4(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for LocalSearchRequestService.LocalSearchRequestError()
{
  return &type metadata for LocalSearchRequestService.LocalSearchRequestError;
}

uint64_t *sub_10074A11C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v7);
  }
  else
  {
    v6 = type metadata accessor for AppConfiguration(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  return a1;
}

uint64_t sub_10074A18C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_10074A1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_10074A214(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_10074A258(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppConfiguration(0);
  return _s7Weather24LocationCompositionStateOwet_0(a1, a2, v4);
}

uint64_t sub_10074A28C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for AppConfiguration(0);
  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, a3, v6);
}

_QWORD *sub_10074A2D0(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, __n128);
  __n128 v21;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v8 = a3[6];
    v9 = (char *)(a1 + v8);
    v10 = (char *)a2 + v8;
    *(_QWORD *)(a1 + 40) = a2[5];
    v11 = type metadata accessor for DetailChartDataElement(0);
    swift_retain();
    swift_retain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v11))
    {
      v12 = sub_1000BA294(&qword_100BCB0A0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v11);
    }
    v14 = sub_1000BA294(&qword_100C03490);
    *(_QWORD *)&v9[*(int *)(v14 + 28)] = *(_QWORD *)&v10[*(int *)(v14 + 28)];
    v15 = a3[8];
    *(_QWORD *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    v16 = (char *)v4 + v15;
    v17 = (uint64_t)a2 + v15;
    v18 = *(_OWORD *)((char *)a2 + v15 + 24);
    *(_OWORD *)((char *)v4 + v15 + 24) = v18;
    v19 = v18;
    v20 = **(void (***)(char *, uint64_t, uint64_t, __n128))(v18 - 8);
    v21 = swift_retain();
    v20(v16, v17, v19, v21);
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  return v4;
}

uint64_t sub_10074A448(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release();
  swift_release();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for DetailChartDataElement(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  sub_1000BA294(&qword_100C03490);
  swift_release();
  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + *(int *)(a2 + 32)));
}

uint64_t sub_10074A4DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v19;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v7 = a3[6];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for DetailChartDataElement(0);
  swift_retain();
  swift_retain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10))
  {
    v11 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
  }
  v12 = sub_1000BA294(&qword_100C03490);
  *(_QWORD *)&v8[*(int *)(v12 + 28)] = *(_QWORD *)&v9[*(int *)(v12 + 28)];
  v13 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = *(_OWORD *)(a2 + v13 + 24);
  *(_OWORD *)(a1 + v13 + 24) = v16;
  v17 = v16;
  v18 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v16 - 8);
  v19 = swift_retain();
  v18(v14, v15, v17, v19);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10074A628(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v6 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  v7 = a3[6];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for DetailChartDataElement(0);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v10);
  v12 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10);
  if (!v11)
  {
    v13 = *(_QWORD *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v14 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
LABEL_7:
  v15 = sub_1000BA294(&qword_100C03490);
  *(_QWORD *)&v8[*(int *)(v15 + 28)] = *(_QWORD *)&v9[*(int *)(v15 + 28)];
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  sub_100094D04((_QWORD *)(a1 + a3[8]), (_QWORD *)(a2 + a3[8]));
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

_OWORD *sub_10074A7C4(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for DetailChartDataElement(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10))
  {
    v11 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
  }
  v12 = sub_1000BA294(&qword_100C03490);
  *(_QWORD *)&v8[*(int *)(v12 + 28)] = *(_QWORD *)&v9[*(int *)(v12 + 28)];
  v13 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
  v16 = *((_OWORD *)v15 + 1);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *((_OWORD *)v14 + 1) = v16;
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

uint64_t sub_10074A8D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  v7 = a3[6];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for DetailChartDataElement(0);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v10);
  v12 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10);
  if (!v11)
  {
    v13 = *(_QWORD *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v14 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
LABEL_7:
  v15 = sub_1000BA294(&qword_100C03490);
  *(_QWORD *)&v8[*(int *)(v15 + 28)] = *(_QWORD *)&v9[*(int *)(v15 + 28)];
  swift_release();
  v16 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v17 = a1 + v16;
  v18 = a2 + v16;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + v16));
  v19 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v19;
  *(_QWORD *)(v17 + 32) = *(_QWORD *)(v18 + 32);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10074AA5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10074AA68);
}

void sub_10074AA68()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000B26B8();
  if (v1)
  {
    sub_1000DD348();
    sub_100079F70();
  }
  else
  {
    v2 = v0;
    sub_1000BA294(&qword_100C03490);
    v3 = sub_10009E5E4(*(int *)(v2 + 24));
    sub_1000B250C(v3, v4, v5);
  }
}

uint64_t sub_10074AAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10074AAC0);
}

void sub_10074AAC0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000993A8();
  if (v1)
  {
    sub_100099CB0();
    sub_100079F70();
  }
  else
  {
    v2 = v0;
    sub_1000BA294(&qword_100C03490);
    v3 = sub_100099C94(*(int *)(v2 + 24));
    sub_1000987C4(v3, v4, v5, v6);
  }
}

uint64_t sub_10074AB08(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABFC00, 1);
}

uint64_t sub_10074AB18()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  char v15;

  v3 = v1;
  sub_1000BA294(&qword_100BCB0A0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100079F58();
  sub_1000D2000();
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100079FBC();
  v6 = sub_1000BA294(&qword_100BE2448);
  State.wrappedValue.getter(&v14, v6);
  v7 = v15;
  sub_100080C0C(v3, v2, type metadata accessor for SunriseSunsetDetailView);
  if ((v7 & 1) != 0)
  {
    sub_1000215BC(v2, type metadata accessor for SunriseSunsetDetailView);
    return 0;
  }
  else
  {
    v9 = sub_1000BA294(&qword_100C03490);
    State.wrappedValue.getter(v0, v9);
    sub_1000215BC(v2, type metadata accessor for SunriseSunsetDetailView);
    v10 = sub_1000BD520();
    v11 = sub_100088FC8((uint64_t)v0, 1, v10);
    if (v12)
      v8 = 0;
    else
      v8 = 1;
    sub_1000B3B00(v11, &qword_100BCB0A0);
  }
  return v8;
}

uint64_t sub_10074AC44()
{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = type metadata accessor for TimeZone(0);
  v41 = *(_QWORD *)(v4 - 8);
  v42 = v4;
  sub_10009D98C();
  __chkstk_darwin(v5);
  sub_100098728();
  v8 = v7 - v6;
  sub_10009903C();
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100098728();
  v12 = v11 - v10;
  v13 = sub_1000BD520();
  v39 = *(_QWORD *)(v13 - 8);
  sub_10009D98C();
  __chkstk_darwin(v14);
  sub_10007A130();
  sub_1000BA294(&qword_100BCB0A0);
  sub_1000B42B0();
  __chkstk_darwin(v15);
  sub_100079F58();
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  sub_100098728();
  v19 = v18 - v17;
  v20 = sub_100098778();
  v43 = *(_QWORD *)(v20 - 8);
  sub_10009D98C();
  __chkstk_darwin(v21);
  sub_100089068();
  __chkstk_darwin(v22);
  v24 = (char *)&v38 - v23;
  type metadata accessor for SunriseSunsetDetailView(0);
  v40 = v1;
  v25 = sub_1000BA294(&qword_100C03490);
  State.wrappedValue.getter(v0, v25);
  v26 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v0, 1, v13);
  if ((_DWORD)v26)
  {
    sub_1000B3B00(v26, &qword_100BCB0A0);
    sub_10009E61C(v19, 1);
    v28 = v41;
    v27 = v42;
LABEL_5:
    sub_100021A14(v19, (uint64_t *)&unk_100BD35A0);
    Date.init()(v34);
    goto LABEL_6;
  }
  v38 = v8;
  v29 = v39;
  v30 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(v39 + 16))(v3, v0, v13);
  sub_1000B3B00(v30, &qword_100BCB0A0);
  DetailChartDataElement.date.getter(v31);
  v32 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
  v8 = v38;
  v32(v3, v13);
  sub_10009E61C(v19, 0);
  sub_100088FC8(v19, 1, v20);
  v28 = v41;
  v27 = v42;
  if (v33)
    goto LABEL_5;
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 32))(v24, v19, v20);
  v2 = v24;
LABEL_6:
  sub_100094EE4();
  sub_10017BCE0();
  v35 = sub_10009880C();
  sub_10057FB04(v35);
  sub_1000215BC(v12, type metadata accessor for SunriseSunsetDetailViewModel);
  v36 = Date.formattedTime(timeZone:)(v8);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v8, v27);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v2, v20);
  return v36;
}

uint64_t sub_10074AEF0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, _QWORD *, uint64_t);
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  sub_10009903C();
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100088FDC();
  v53 = v5;
  v6 = sub_1000BD520();
  v50 = *(_QWORD *)(v6 - 8);
  sub_10009D98C();
  __chkstk_darwin(v7);
  sub_100079FBC();
  sub_1000BA294(&qword_100BCB0A0);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100089068();
  __chkstk_darwin(v9);
  v11 = (uint64_t (**)(uint64_t, _QWORD *, uint64_t))((char *)&v47 - v10);
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_10007A130();
  v13 = sub_100098778();
  v54 = *(_QWORD *)(v13 - 8);
  sub_10009D98C();
  __chkstk_darwin(v14);
  sub_1000986FC();
  v51 = v15;
  __chkstk_darwin(v16);
  v18 = (char *)&v47 - v17;
  type metadata accessor for SunriseSunsetDetailView(0);
  v52 = v0;
  v19 = sub_1000BA294(&qword_100C03490);
  State.wrappedValue.getter(v11, v19);
  v20 = sub_10003BD0C();
  v22 = _s7Weather24LocationCompositionStateOwet_0(v20, v21, v6);
  if ((_DWORD)v22)
  {
    sub_1000988A8(v22, &qword_100BCB0A0);
    _s7Weather24LocationCompositionStateOwst_0(v3, 1, 1, v13);
LABEL_5:
    sub_100021A14(v3, (uint64_t *)&unk_100BD35A0);
    v27 = v53;
    v28 = v54;
    goto LABEL_6;
  }
  v48 = v18;
  v49 = v2;
  v47 = *(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(v50 + 16);
  v23 = v47(v1, v11, v6);
  sub_1000988A8(v23, &qword_100BCB0A0);
  DetailChartDataElement.date.getter(v24);
  sub_1000D0B64();
  _s7Weather24LocationCompositionStateOwst_0(v3, 0, 1, v13);
  v25 = v13;
  sub_100088FC8(v3, 1, v13);
  if (v26)
    goto LABEL_5;
  v35 = v54;
  v36 = (uint64_t)v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 32))(v48, v3, v25);
  v37 = v49;
  State.wrappedValue.getter(v49, v19);
  v38 = sub_10003BD0C();
  v40 = _s7Weather24LocationCompositionStateOwet_0(v38, v39, v6);
  if ((_DWORD)v40)
  {
    sub_1000988A8(v40, &qword_100BCB0A0);
    sub_10007A170(v36, *(uint64_t (**)(uint64_t, uint64_t))(v35 + 8));
    v28 = v35;
    v27 = v53;
  }
  else
  {
    v41 = v47(v1, v37, v6);
    sub_1000988A8(v41, &qword_100BCB0A0);
    v43 = DetailChartDataElement.value.getter(v42);
    sub_1000D0B64();
    v28 = v35;
    sub_100094EE4();
    v44 = v36;
    v27 = v53;
    sub_10017BCE0();
    sub_10009880C();
    v31 = sub_100580484(v44, v43);
    v46 = v45;
    sub_1000215BC(v27, type metadata accessor for SunriseSunsetDetailViewModel);
    sub_10007A170(v44, *(uint64_t (**)(uint64_t, uint64_t))(v35 + 8));
    if (v46)
      return v31;
  }
LABEL_6:
  sub_100094EE4();
  sub_10017BCE0();
  v29 = sub_10009880C();
  v30 = v51;
  Date.init()(v29);
  v31 = sub_100580484(v30, 0.0);
  v33 = v32;
  sub_10007A170(v30, *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
  sub_1000215BC(v27, type metadata accessor for SunriseSunsetDetailViewModel);
  if (!v33)
    return 5849412;
  return v31;
}

void sub_10074B278(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a1;
  sub_10009903C();
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100088FDC();
  v41 = v5;
  sub_1000BA294(&qword_100BD8A00);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_1000986FC();
  v38 = v7;
  __chkstk_darwin(v8);
  v10 = (char *)&v37 - v9;
  v11 = sub_1000BD520();
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_100079F58();
  sub_1000BA294(&qword_100BCB0A0);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  sub_100094EC4();
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  sub_100098728();
  v17 = v16 - v15;
  v18 = sub_100098778();
  v40 = *(_QWORD *)(v18 - 8);
  sub_10009D98C();
  __chkstk_darwin(v19);
  v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v37 - v23;
  type metadata accessor for SunriseSunsetDetailView(0);
  v42 = v2;
  v25 = sub_1000BA294(&qword_100C03490);
  State.wrappedValue.getter(v3, v25);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v3, 1, v11))
  {
    sub_100021A14((uint64_t)v3, &qword_100BCB0A0);
    sub_1000CFA1C(v17, 1);
LABEL_5:
    sub_100021A14(v17, (uint64_t *)&unk_100BD35A0);
    v34 = v41;
    v33 = v40;
    goto LABEL_6;
  }
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v12 + 16))(v1, v3, v11);
  sub_100021A14((uint64_t)v3, &qword_100BCB0A0);
  DetailChartDataElement.date.getter(v26);
  sub_10007A170(v1, *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
  sub_1000CFA1C(v17, 0);
  sub_100088FC8(v17, 1, v18);
  if (v36)
    goto LABEL_5;
  v33 = v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v24, v17, v18);
  sub_100094EE4();
  v34 = v41;
  sub_10017BCE0();
  sub_10009880C();
  sub_100581854((uint64_t)v24, (uint64_t)v10);
  sub_1000215BC(v34, type metadata accessor for SunriseSunsetDetailViewModel);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v24, v18);
  v35 = sub_1000B4928();
  sub_100088FC8((uint64_t)v10, 1, v35);
  if (!v36)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v39, v10, v35);
    goto LABEL_9;
  }
  sub_100021A14((uint64_t)v10, &qword_100BD8A00);
LABEL_6:
  sub_100094EE4();
  sub_10017BCE0();
  v27 = sub_10009880C();
  Date.init()(v27);
  v28 = v38;
  sub_100581854((uint64_t)v21, v38);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v21, v18);
  sub_1000215BC(v34, type metadata accessor for SunriseSunsetDetailViewModel);
  v29 = sub_1000B4928();
  v30 = sub_10003BD0C();
  sub_100088FC8(v30, v31, v29);
  if (v36)
  {
    v32 = AttributedString.init(stringLiteral:)(0xD000000000000012, 0x8000000100A129C0);
    sub_1000988A8(v32, &qword_100BD8A00);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v39, v28, v29);
  }
LABEL_9:
  sub_100098640();
}

void sub_10074B5F0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD v88[6];

  v86 = a1;
  v87 = type metadata accessor for TaskPriority(0);
  v85 = *(_QWORD *)(v87 - 8);
  sub_10009D98C();
  __chkstk_darwin(v2);
  sub_100088FDC();
  v84 = v3;
  sub_1000BA294(&qword_100C03540);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100088FDC();
  v81 = v5;
  v78 = sub_1000D2000();
  v6 = *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64);
  v82 = *(_QWORD *)(v78 - 8);
  v83 = v6;
  __chkstk_darwin(v78);
  v80 = (uint64_t)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Location(0);
  v75 = *(_QWORD *)(v8 - 8);
  v76 = v8;
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_100088FDC();
  v74 = v10;
  v11 = type metadata accessor for DetailType(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_100094EC4();
  v71 = v1;
  sub_10009903C();
  sub_1000B42B0();
  __chkstk_darwin(v13);
  sub_1000986FC();
  v77 = v14;
  __chkstk_darwin(v15);
  v17 = (char *)&v70 - v16;
  v18 = type metadata accessor for DetailViewVisibilityTrackerModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  sub_100088FDC();
  v72 = v20;
  v21 = (int *)sub_1000BA294(&qword_100C03548);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  v24 = (uint64_t *)((char *)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v25);
  v79 = (uint64_t)&v70 - v26;
  swift_retain();
  sub_10017BCE0();
  v27 = swift_release();
  v28 = v1;
  v29 = v11;
  v30 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, __n128))(v12 + 104))(v28, enum case for DetailType.sunriseSunset(_:), v11, v27);
  v31 = v74;
  sub_100580014(v30);
  sub_1000215BC((uint64_t)v17, type metadata accessor for SunriseSunsetDetailViewModel);
  v32 = v72;
  v33 = v72 + *(int *)(v18 + 24);
  v34 = enum case for DetailViewOrigin.component(_:);
  v35 = type metadata accessor for DetailViewOrigin(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v33, v34, v35);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v32, v71, v29);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 32))(v32 + *(int *)(v18 + 20), v31, v76);
  v36 = v73;
  v37 = (_QWORD *)(v73 + *(int *)(v78 + 32));
  v38 = v37[3];
  v39 = v37[4];
  v40 = sub_1000DB418(v37, v38);
  v88[3] = v38;
  v88[4] = *(_QWORD *)(v39 + 8);
  v41 = sub_10005F164(v88);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v41, v40, v38);
  sub_100094EE4();
  sub_10017BCE0();
  sub_10009880C();
  sub_10057F66C();
  v43 = v42;
  v45 = v44;
  sub_1000C1CF4((uint64_t)v17);
  sub_100094EE4();
  v46 = v77;
  sub_10017BCE0();
  sub_10009880C();
  sub_10057F788();
  v48 = v47;
  v50 = v49;
  sub_1000C1CF4(v46);
  v51 = v80;
  sub_100080C0C(v36, v80, type metadata accessor for SunriseSunsetDetailView);
  *v24 = swift_getKeyPath(&unk_1009C5E38);
  v52 = sub_1000BA294(&qword_100BC4F28);
  swift_storeEnumTagMultiPayload(v24, v52, 0);
  sub_100080C0C(v32, (uint64_t)v24 + v21[9], type metadata accessor for DetailViewVisibilityTrackerModel);
  sub_100043CA8((uint64_t)v88, (uint64_t)v24 + v21[10]);
  v53 = (_QWORD *)((char *)v24 + v21[11]);
  *v53 = v43;
  v53[1] = v45;
  v54 = (_QWORD *)((char *)v24 + v21[12]);
  *v54 = v48;
  v54[1] = v50;
  *((_BYTE *)v24 + v21[13]) = 0;
  v55 = (_QWORD *)((char *)v24 + v21[14]);
  *v55 = 0;
  v55[1] = 0;
  *((_BYTE *)v24 + v21[15]) = 1;
  v56 = v81;
  sub_10074BB20(v51, v81);
  v57 = v51;
  sub_1000C1CF4(v51);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v88);
  sub_1000215BC(v32, type metadata accessor for DetailViewVisibilityTrackerModel);
  sub_1000787D4(v56, (uint64_t)v24 + v21[16], &qword_100C03540);
  v58 = v79;
  sub_1000787D4((uint64_t)v24, v79, &qword_100C03548);
  sub_100080C0C(v36, v57, type metadata accessor for SunriseSunsetDetailView);
  v59 = *(unsigned __int8 *)(v82 + 80);
  v60 = (v59 + 16) & ~v59;
  v61 = swift_allocObject(&unk_100B8E300, v60 + v83, v59 | 7);
  sub_10007802C(v57, v61 + v60, type metadata accessor for SunriseSunsetDetailView);
  v62 = v84;
  static TaskPriority.userInitiated.getter(v63);
  v64 = sub_1000BA294(&qword_100C03560);
  v65 = v86;
  v66 = (char *)(v86 + *(int *)(v64 + 36));
  v67 = type metadata accessor for _TaskModifier(0);
  v68 = v85;
  v69 = v87;
  (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(&v66[*(int *)(v67 + 20)], v62, v87);
  *(_QWORD *)v66 = &unk_100C03558;
  *((_QWORD *)v66 + 1) = v61;
  sub_100037768(v58, v65, &qword_100C03548);
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v62, v69);
  sub_100021A14(v58, &qword_100C03548);
  sub_100098640();
}

void sub_10074BB20(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t EnumCaseMultiPayload;
  uint64_t (*v25)(uint64_t);
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  __n128 v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v61 = type metadata accessor for AutomationInfo(0);
  __chkstk_darwin(v61);
  v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ScrollIndicatorVisibility(0);
  v54 = *(_QWORD *)(v6 - 8);
  v55 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100C03568);
  v52 = *(_QWORD *)(v9 - 8);
  v53 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_1000BA294(&qword_100BD9AD8);
  v56 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000BA294(&qword_100BD9AE0);
  __chkstk_darwin(v14);
  v59 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_1000BA294(&qword_100C03570);
  __chkstk_darwin(v63);
  v57 = (uint64_t)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v60 = (uint64_t)&v50 - v18;
  v62 = sub_1000BA294(&qword_100C03578);
  __chkstk_darwin(v62);
  v20 = (uint64_t *)((char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = type metadata accessor for SunriseSunsetDetailViewModel(0);
  __chkstk_darwin(v21);
  v23 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  sub_10017BCE0();
  swift_release();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v23);
  if ((_DWORD)EnumCaseMultiPayload)
  {
    if ((_DWORD)EnumCaseMultiPayload != 1)
    {
      *v20 = static Color.clear.getter(EnumCaseMultiPayload);
      swift_storeEnumTagMultiPayload(v20, v62, 0);
      v49 = sub_10074F434();
      _ConditionalContent<>.init(storage:)(v20, &type metadata for Color, v63, &protocol witness table for Color, v49);
      return;
    }
    v51 = a2;
    v25 = _s10PolarModelVMa;
    v26 = &qword_100BF18A0;
  }
  else
  {
    v51 = a2;
    v25 = _s11NormalModelVMa;
    v26 = &qword_100BF1898;
  }
  v27 = sub_1000BA294(v26);
  sub_100021A14((uint64_t)&v23[*(int *)(v27 + 48)], &qword_100BC68B8);
  sub_1000215BC((uint64_t)v23, v25);
  v29 = static Axis.Set.vertical.getter(v28);
  __chkstk_darwin(v29);
  *(&v50 - 2) = a1;
  v30 = sub_1000BA294(&qword_100C03580);
  sub_1001CDAD0(&qword_100C03588, &qword_100C03580);
  v32 = ScrollView.init(_:showsIndicators:content:)(v29, 1, sub_10074F42C, &v50 - 4, v30, v31);
  v33 = static ScrollIndicatorVisibility.never.getter(v32);
  v34 = static Axis.Set.vertical.getter(v33);
  v36 = static Axis.Set.horizontal.getter(v35);
  v37 = Axis.Set.init(rawValue:)(0);
  v38 = Axis.Set.init(rawValue:)(v37);
  if (Axis.Set.init(rawValue:)(v38 & v34) != v34)
    v37 = Axis.Set.init(rawValue:)(v37 | v34);
  v39 = Axis.Set.init(rawValue:)(v37);
  if (Axis.Set.init(rawValue:)(v39 & v36) != v36)
    v37 = Axis.Set.init(rawValue:)(v37 | v36);
  sub_1001CDAD0(&qword_100C03590, &qword_100C03568);
  v40 = v53;
  View.scrollIndicators(_:axes:)(v8, v37, v53, v41);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v8, v55);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v11, v40);
  v42 = type metadata accessor for AutomationViewInfo(0);
  swift_storeEnumTagMultiPayload(v5, v42, 8);
  swift_storeEnumTagMultiPayload(v5, v61, 0);
  v43 = (uint64_t)v59;
  sub_100335588();
  sub_1000215BC((uint64_t)v5, type metadata accessor for AutomationInfo);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v13, v58);
  if (qword_100BC2220 != -1)
    swift_once(&qword_100BC2220, sub_1005BA224);
  v44 = qword_100CAEDA0;
  v45 = v57;
  sub_100037768(v43, v57, &qword_100BD9AE0);
  v46 = v63;
  *(_QWORD *)(v45 + *(int *)(v63 + 36)) = v44;
  swift_retain();
  sub_100021A14(v43, &qword_100BD9AE0);
  v47 = v60;
  sub_1000787D4(v45, v60, &qword_100C03570);
  sub_100037768(v47, (uint64_t)v20, &qword_100C03570);
  swift_storeEnumTagMultiPayload(v20, v62, 1);
  v48 = sub_10074F434();
  _ConditionalContent<>.init(storage:)(v20, &type metadata for Color, v46, &protocol witness table for Color, v48);
  sub_100021A14(v47, &qword_100C03570);
}

uint64_t sub_10074C0BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v1 + 24) = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2);
  return swift_task_switch(sub_10074C128, v3, v4);
}

uint64_t sub_10074C128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  swift_release();
  v2 = sub_1000D2000();
  sub_1000DB418((_QWORD *)(v1 + *(int *)(v2 + 32)), *(_QWORD *)(v1 + *(int *)(v2 + 32) + 24));
  sub_10021DC60();
  return sub_1000950D8(*(uint64_t (**)(void))(v0 + 8));
}

void sub_10074C16C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  *(_QWORD *)a2 = static HorizontalAlignment.leading.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v4 = sub_1000BA294(&qword_100C035A8);
  sub_10074C1B4(a1, a2 + *(int *)(v4 + 44));
}

void sub_10074C1B4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __n128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t KeyPath;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  int *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  double v131;
  double v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  char *v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char v190[8];
  __int128 v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  __int128 v195;
  char v196;
  uint64_t v197;

  v185 = a2;
  v166 = sub_1000BA294(&qword_100BC68B0);
  __chkstk_darwin(v166);
  v168 = (uint64_t)&v150 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = sub_1000BA294(&qword_100C035B0);
  __chkstk_darwin(v182);
  v167 = (uint64_t)&v150 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000BA294(&qword_100BC68B8);
  __chkstk_darwin(v5);
  v179 = (char *)&v150 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = type metadata accessor for ConditionDetailPlatterViewModel(0);
  __chkstk_darwin(v176);
  v164 = (uint64_t)&v150 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v165 = (uint64_t)&v150 - v9;
  v10 = sub_1000BA294(&qword_100C035B8);
  __chkstk_darwin(v10);
  v184 = (uint64_t)&v150 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v183 = (char *)&v150 - v13;
  v175 = type metadata accessor for DetailNewsComponentView(0);
  __chkstk_darwin(v175);
  v163 = (uint64_t *)((char *)&v150 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_1000BA294(&qword_100BC68A0);
  __chkstk_darwin(v15);
  v173 = (char *)&v150 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for SunriseSunsetDetailViewModel(0);
  __chkstk_darwin(v17);
  v174 = (char *)&v150 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v172 = (char *)&v150 - v20;
  v171 = type metadata accessor for DetailComponentContainerViewModel(0);
  __chkstk_darwin(v171);
  v162 = (uint64_t)&v150 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v161 = (uint64_t)&v150 - v23;
  v24 = sub_1000BA294(&qword_100BC68A8);
  __chkstk_darwin(v24);
  v181 = (uint64_t)&v150 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v188 = (uint64_t)&v150 - v27;
  v156 = type metadata accessor for QuaternaryDividerStyle(0);
  v155 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v154 = (char *)&v150 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = type metadata accessor for Divider(0);
  v152 = *(_QWORD *)(v153 - 8);
  __chkstk_darwin(v153);
  v151 = (char *)&v150 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = sub_1000BA294(&qword_100BD6D20);
  v159 = *(_QWORD *)(v160 - 8);
  __chkstk_darwin(v160);
  v158 = (char *)&v150 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = sub_1000BA294(&qword_100BD6D28);
  __chkstk_darwin(v169);
  v157 = (char *)&v150 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_1000BA294(&qword_100C035C0);
  __chkstk_darwin(v32);
  v180 = (uint64_t)&v150 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v189 = (uint64_t)&v150 - v35;
  v36 = type metadata accessor for SunriseSunsetChartAndTable(0);
  __chkstk_darwin(v36);
  v38 = (char *)&v150 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = (char *)sub_1000BA294(&qword_100C035C8);
  __chkstk_darwin(v178);
  v40 = (char *)&v150 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41);
  v187 = (uint64_t)&v150 - v42;
  v43 = sub_1000BA294(&qword_100C035D0);
  __chkstk_darwin(v43);
  v177 = (uint64_t)&v150 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  v47 = (char *)&v150 - v46;
  __chkstk_darwin(v48);
  v50 = (char *)&v150 - v49;
  *(_QWORD *)v47 = static Alignment.center.getter(v51);
  *((_QWORD *)v47 + 1) = v52;
  v53 = sub_1000BA294(&qword_100C035D8);
  sub_10074D0B4(a1, &v47[*(int *)(v53 + 44)]);
  v186 = v50;
  sub_1000787D4((uint64_t)v47, (uint64_t)v50, &qword_100C035D0);
  v54 = *(_BYTE *)(a1 + 32);
  v55 = *(_QWORD *)(a1 + 40);
  v195 = *(_OWORD *)(a1 + 16);
  v196 = v54;
  v197 = v55;
  v56 = sub_1000BA294(&qword_100BE2448);
  State.projectedValue.getter(v56);
  v170 = v191;
  v57 = v192;
  v58 = v193;
  v59 = v194;
  v60 = type metadata accessor for SunriseSunsetDetailView(0);
  v61 = sub_1000BA294(&qword_100C03490);
  State.projectedValue.getter(v61);
  swift_retain();
  sub_10017BCE0();
  swift_release();
  *(_OWORD *)v38 = v170;
  *((_QWORD *)v38 + 2) = v57;
  *((_QWORD *)v38 + 3) = v58;
  v38[32] = v59;
  v62 = 1;
  v38[*(int *)(v36 + 28)] = 1;
  LOBYTE(v50) = static Edge.Set.horizontal.getter(v63);
  v64 = EdgeInsets.init(_all:)(*(double *)(a1 + *(int *)(v60 + 28)));
  v66 = v65;
  v68 = v67;
  v70 = v69;
  sub_100080C0C((uint64_t)v38, (uint64_t)v40, type metadata accessor for SunriseSunsetChartAndTable);
  v71 = &v40[*((int *)v178 + 9)];
  *v71 = (char)v50;
  *((double *)v71 + 1) = v64;
  *((_QWORD *)v71 + 2) = v66;
  *((_QWORD *)v71 + 3) = v68;
  *((_QWORD *)v71 + 4) = v70;
  v71[40] = 0;
  sub_1000215BC((uint64_t)v38, type metadata accessor for SunriseSunsetChartAndTable);
  v178 = v40;
  sub_1000787D4((uint64_t)v40, v187, &qword_100C035C8);
  *(_QWORD *)&v170 = v60;
  v73 = *(int *)(v60 + 36);
  v74 = v169;
  if (*(_BYTE *)(a1 + v73) == 1)
  {
    v75 = v151;
    v76 = Divider.init()(v72);
    v77 = v154;
    static DividerStyle<>.quaternary.getter(v76);
    sub_10000F1C8(&qword_100BC69B0, (uint64_t (*)(uint64_t))&type metadata accessor for Divider);
    v79 = v78;
    sub_10000F1C8(&qword_100BD6E68, (uint64_t (*)(uint64_t))&type metadata accessor for QuaternaryDividerStyle);
    v80 = v158;
    v81 = v153;
    v82 = v156;
    View.dividerStyle<A>(_:)(v77, v153, v156, v79, v83);
    (*(void (**)(char *, uint64_t))(v155 + 8))(v77, v82);
    v84 = (*(uint64_t (**)(char *, uint64_t))(v152 + 8))(v75, v81);
    LOBYTE(v82) = static Edge.Set.top.getter(v84);
    swift_beginAccess(&unk_100BE0830, v190, 1, 0);
    v85 = sub_10040922C();
    v86 = EdgeInsets.init(_all:)(v85);
    v88 = v87;
    v90 = v89;
    v92 = v91;
    v93 = v159;
    v94 = (uint64_t)v157;
    v95 = v160;
    (*(void (**)(char *, char *, uint64_t))(v159 + 16))(v157, v80, v160);
    v96 = v94 + *(int *)(v74 + 36);
    *(_BYTE *)v96 = v82;
    *(double *)(v96 + 8) = v86;
    *(_QWORD *)(v96 + 16) = v88;
    *(_QWORD *)(v96 + 24) = v90;
    *(_QWORD *)(v96 + 32) = v92;
    *(_BYTE *)(v96 + 40) = 0;
    (*(void (**)(char *, uint64_t))(v93 + 8))(v80, v95);
    sub_1000787D4(v94, v189, &qword_100BD6D28);
    v62 = 0;
  }
  _s7Weather24LocationCompositionStateOwst_0(v189, v62, 1, v74);
  swift_retain();
  v97 = (uint64_t)v172;
  sub_10017BCE0();
  v98 = swift_release();
  v99 = (uint64_t)v173;
  sub_100580348(v98);
  sub_1000215BC(v97, type metadata accessor for SunriseSunsetDetailViewModel);
  if (_s7Weather24LocationCompositionStateOwet_0(v99, 1, v171) == 1)
  {
    sub_100021A14(v99, &qword_100BC68A0);
    v100 = 1;
    v101 = (uint64_t)v183;
    v102 = v188;
    v103 = (uint64_t)v179;
    v104 = v175;
  }
  else
  {
    v105 = v99;
    v106 = v161;
    sub_10007802C(v105, v161, type metadata accessor for DetailComponentContainerViewModel);
    v107 = v162;
    sub_100080C0C(v106, v162, type metadata accessor for DetailComponentContainerViewModel);
    v108 = (_QWORD *)(a1 + *(int *)(v170 + 32));
    v109 = v108[3];
    v110 = v108[4];
    v111 = sub_1000DB418(v108, v109);
    v193 = v109;
    v194 = *(_QWORD *)(v110 + 8);
    v112 = sub_10005F164(&v191);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v109 - 8) + 16))(v112, v111, v109);
    sub_1000215BC(v106, type metadata accessor for DetailComponentContainerViewModel);
    LOBYTE(v109) = *(_BYTE *)(a1 + v73);
    KeyPath = swift_getKeyPath(&unk_1009C5E68);
    v114 = (uint64_t)v163;
    *v163 = KeyPath;
    v115 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
    swift_storeEnumTagMultiPayload(v114, v115, 0);
    v104 = v175;
    sub_10007802C(v107, v114 + *(int *)(v175 + 20), type metadata accessor for DetailComponentContainerViewModel);
    sub_10003C800(&v191, v114 + *(int *)(v104 + 24));
    *(_BYTE *)(v114 + *(int *)(v104 + 28)) = v109;
    v102 = v188;
    sub_10007802C(v114, v188, type metadata accessor for DetailNewsComponentView);
    v100 = 0;
    v101 = (uint64_t)v183;
    v103 = (uint64_t)v179;
  }
  _s7Weather24LocationCompositionStateOwst_0(v102, v100, 1, v104);
  swift_retain();
  v116 = (uint64_t)v174;
  sub_10017BCE0();
  swift_release();
  sub_100580274(v103);
  sub_1000215BC(v116, type metadata accessor for SunriseSunsetDetailViewModel);
  if (_s7Weather24LocationCompositionStateOwet_0(v103, 1, v176) == 1)
  {
    sub_100021A14(v103, &qword_100BC68B8);
    v117 = 1;
    v118 = v182;
  }
  else
  {
    v119 = v165;
    sub_10007802C(v103, v165, type metadata accessor for ConditionDetailPlatterViewModel);
    v120 = v164;
    sub_100080C0C(v119, v164, type metadata accessor for ConditionDetailPlatterViewModel);
    v121 = (_QWORD *)(a1 + *(int *)(v170 + 32));
    v122 = v121[3];
    v123 = v121[4];
    v124 = sub_1000DB418(v121, v122);
    v193 = v122;
    v194 = *(_QWORD *)(v123 + 8);
    v125 = sub_10005F164(&v191);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v122 - 8) + 16))(v125, v124, v122);
    v126 = v168;
    sub_100080C0C(v120, v168, type metadata accessor for ConditionDetailPlatterViewModel);
    v127 = (int *)v166;
    sub_100043CA8((uint64_t)&v191, v126 + *(int *)(v166 + 40));
    *(_BYTE *)(v126 + v127[9]) = 0;
    v128 = (_QWORD *)(v126 + v127[11]);
    *v128 = 0;
    v128[1] = 0;
    v129 = v127[12];
    swift_beginAccess(&unk_100BE0830, &v195, 1, 0);
    *(double *)(v126 + v129) = sub_10040908C();
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v191);
    sub_1000215BC(v120, type metadata accessor for ConditionDetailPlatterViewModel);
    LOBYTE(v129) = static Edge.Set.bottom.getter(v130);
    v131 = sub_1004092CC();
    v132 = EdgeInsets.init(_all:)(v131);
    v134 = v133;
    v136 = v135;
    v138 = v137;
    v139 = v167;
    sub_100037768(v126, v167, &qword_100BC68B0);
    v118 = v182;
    v140 = v139 + *(int *)(v182 + 36);
    *(_BYTE *)v140 = v129;
    *(double *)(v140 + 8) = v132;
    *(_QWORD *)(v140 + 16) = v134;
    *(_QWORD *)(v140 + 24) = v136;
    *(_QWORD *)(v140 + 32) = v138;
    *(_BYTE *)(v140 + 40) = 0;
    sub_100021A14(v126, &qword_100BC68B0);
    sub_1000215BC(v119, type metadata accessor for ConditionDetailPlatterViewModel);
    sub_1000787D4(v139, v101, &qword_100C035B0);
    v117 = 0;
  }
  _s7Weather24LocationCompositionStateOwst_0(v101, v117, 1, v118);
  v141 = v177;
  sub_100037768((uint64_t)v186, v177, &qword_100C035D0);
  v142 = v187;
  v143 = v101;
  v144 = (uint64_t)v178;
  sub_100037768(v187, (uint64_t)v178, &qword_100C035C8);
  v145 = v180;
  sub_100037768(v189, v180, &qword_100C035C0);
  v146 = v181;
  sub_100037768(v102, v181, &qword_100BC68A8);
  v147 = v184;
  sub_100037768(v143, v184, &qword_100C035B8);
  v148 = v185;
  sub_100037768(v141, v185, &qword_100C035D0);
  v149 = (int *)sub_1000BA294(&qword_100C035E0);
  sub_100037768(v144, v148 + v149[12], &qword_100C035C8);
  sub_100037768(v145, v148 + v149[16], &qword_100C035C0);
  sub_100037768(v146, v148 + v149[20], &qword_100BC68A8);
  sub_100037768(v147, v148 + v149[24], &qword_100C035B8);
  sub_100021A14(v143, &qword_100C035B8);
  sub_100021A14(v188, &qword_100BC68A8);
  sub_100021A14(v189, &qword_100C035C0);
  sub_100021A14(v142, &qword_100C035C8);
  sub_100021A14((uint64_t)v186, &qword_100C035D0);
  sub_100021A14(v147, &qword_100C035B8);
  sub_100021A14(v146, &qword_100BC68A8);
  sub_100021A14(v145, &qword_100C035C0);
  sub_100021A14(v144, &qword_100C035C8);
  sub_100021A14(v141, &qword_100C035D0);
}

uint64_t sub_10074D0B4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __n128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  uint64_t *v96;
  int *v97;
  uint64_t v98;
  _QWORD *v99;
  double v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  void (*v116)(char *, char *, uint64_t);
  uint64_t v117;
  char *v118;
  uint64_t v119;
  void (*v120)(char *, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t (*v123)(char *, uint64_t, uint64_t);
  uint64_t v124;
  char *v125;
  uint64_t v126;
  unsigned int v127;
  char *v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  _QWORD *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  __int128 v151;
  char v152;
  uint64_t v153;
  _QWORD v154[2];
  char v155;
  char v156[4];

  v134 = a2;
  v129 = type metadata accessor for SunriseSunsetDetailLollipopHeaderView(0);
  __chkstk_darwin(v129);
  v130 = (uint64_t *)((char *)&v121 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v131 = sub_1000BA294(&qword_100C035E8);
  __chkstk_darwin(v131);
  v132 = (uint64_t)&v121 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_1000BA294(&qword_100C035F0);
  v126 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v125 = (char *)&v121 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100C035F8);
  __chkstk_darwin(v6);
  v133 = (uint64_t)&v121 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v136 = (char *)&v121 - v9;
  v145 = sub_1000BA294((uint64_t *)&unk_100C0A510);
  __chkstk_darwin(v145);
  v148 = (char *)&v121 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = type metadata accessor for AttributedString(0);
  v142 = *(char **)(v147 - 8);
  __chkstk_darwin(v147);
  v12 = (char *)&v121 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SunriseSunsetDetailViewModel(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v121 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v121 - v17;
  __chkstk_darwin(v19);
  v21 = (char *)&v121 - v20;
  v22 = (int *)type metadata accessor for SunriseSunsetDetailHeaderView(0);
  __chkstk_darwin(v22);
  v24 = (uint64_t *)((char *)&v121 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v141 = (_QWORD *)sub_1000BA294(&qword_100C03600);
  v138 = *(v141 - 1);
  __chkstk_darwin(v141);
  v137 = (char *)&v121 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = sub_1000BA294(&qword_100C03608);
  __chkstk_darwin(v140);
  v139 = (char *)&v121 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_1000BA294(&qword_100C03610);
  v150 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144);
  v143 = (char *)&v121 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v149 = (char *)&v121 - v29;
  v146 = a1;
  swift_retain();
  sub_10017BCE0();
  swift_release();
  sub_10057F530();
  v31 = v30;
  v33 = v32;
  v128 = v21;
  sub_1000215BC((uint64_t)v21, type metadata accessor for SunriseSunsetDetailViewModel);
  swift_retain();
  sub_10017BCE0();
  v34 = swift_release();
  sub_10057F8A4(v34);
  sub_1000215BC((uint64_t)v18, type metadata accessor for SunriseSunsetDetailViewModel);
  swift_beginAccess(&unk_100BE0830, v156, 1, 0);
  sub_10040922C();
  v36 = v35;
  swift_retain();
  sub_10017BCE0();
  v37 = swift_release();
  v38 = sub_10057F9C4(v37);
  sub_1000215BC((uint64_t)v15, type metadata accessor for SunriseSunsetDetailViewModel);
  v40 = static HorizontalAlignment.leading.getter(v39);
  *v24 = v31;
  v24[1] = v33;
  v41 = (uint64_t)v148;
  v42 = (char *)v24 + v22[5];
  v43 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v142 + 4);
  v142 = v12;
  v43(v42, v12, v147);
  *(_QWORD *)((char *)v24 + v22[6]) = v36;
  *(_QWORD *)((char *)v24 + v22[7]) = v38;
  *(_QWORD *)((char *)v24 + v22[8]) = v40;
  v44 = enum case for DynamicTypeSize.accessibility1(_:);
  v45 = type metadata accessor for DynamicTypeSize(0);
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 104);
  v127 = v44;
  v46(v41, v44, v45);
  sub_10000F1C8(&qword_100C0A550, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  v48 = v47;
  result = dispatch thunk of static Equatable.== infix(_:_:)(v41, v41, v45, v47);
  if ((result & 1) != 0)
  {
    v123 = (uint64_t (*)(char *, uint64_t, uint64_t))v43;
    v124 = v48;
    sub_10000F1C8(&qword_100C03618, type metadata accessor for SunriseSunsetDetailHeaderView);
    v51 = v50;
    sub_1001CDAD0(&qword_100BC4E30, (uint64_t *)&unk_100C0A510);
    v52 = v137;
    v122 = v53;
    View.dynamicTypeSize<A>(_:)(v41, v22, v145, v51, v53);
    sub_100021A14(v41, (uint64_t *)&unk_100C0A510);
    sub_1000215BC((uint64_t)v24, type metadata accessor for SunriseSunsetDetailHeaderView);
    v55 = static Edge.Set.horizontal.getter(v54);
    v56 = *(int *)(type metadata accessor for SunriseSunsetDetailView(0) + 28);
    v57 = v146;
    v58 = EdgeInsets.init(_all:)(*(double *)(v146 + v56));
    v60 = v59;
    v62 = v61;
    v64 = v63;
    v65 = v138;
    v66 = (uint64_t)v139;
    v67 = v141;
    (*(void (**)(char *, char *, _QWORD *))(v138 + 16))(v139, v52, v141);
    v68 = v140;
    v69 = v66 + *(int *)(v140 + 36);
    *(_BYTE *)v69 = v55;
    *(double *)(v69 + 8) = v58;
    *(_QWORD *)(v69 + 16) = v60;
    *(_QWORD *)(v69 + 24) = v62;
    *(_QWORD *)(v69 + 32) = v64;
    *(_BYTE *)(v69 + 40) = 0;
    (*(void (**)(char *, _QWORD *))(v65 + 8))(v52, v67);
    v70 = sub_10074AB18();
    v71 = sub_10074F5C8();
    v72 = v143;
    View.isHidden(_:defaultAccessibilityHidden:)(v70 & 1, 0, v68, v71);
    sub_100021A14(v66, &qword_100C03608);
    v73 = v144;
    (*(void (**)(char *, char *, uint64_t))(v150 + 32))(v149, v72, v144);
    v74 = *(_BYTE *)(v57 + 32);
    v75 = *(_QWORD *)(v57 + 40);
    v151 = *(_OWORD *)(v57 + 16);
    v152 = v74;
    v153 = v75;
    v76 = sub_1000BA294(&qword_100BE2448);
    State.wrappedValue.getter(v154, v76);
    if ((v155 & 1) != 0)
    {
      v77 = 1;
      v78 = (uint64_t)v136;
      v79 = v135;
LABEL_6:
      _s7Weather24LocationCompositionStateOwst_0(v78, v77, 1, v79);
      v115 = v149;
      v114 = v150;
      v116 = *(void (**)(char *, char *, uint64_t))(v150 + 16);
      v116(v72, v149, v73);
      v117 = v133;
      sub_100037768(v78, v133, &qword_100C035F8);
      v118 = v134;
      v116(v134, v72, v73);
      v119 = sub_1000BA294(&qword_100C03628);
      sub_100037768(v117, (uint64_t)&v118[*(int *)(v119 + 48)], &qword_100C035F8);
      sub_100021A14(v78, &qword_100C035F8);
      v120 = *(void (**)(char *, uint64_t))(v114 + 8);
      v120(v115, v73);
      sub_100021A14(v117, &qword_100C035F8);
      return ((uint64_t (*)(char *, uint64_t))v120)(v72, v73);
    }
    v80 = v154[0];
    v81 = v154[1];
    v141 = v46;
    v82 = v146;
    v83 = sub_10074AEF0();
    v85 = v84;
    v86 = sub_10074AC44();
    v88 = v87;
    v89 = (uint64_t)v142;
    sub_10074B278((uint64_t)v142);
    swift_retain();
    v90 = (uint64_t)v128;
    sub_10017BCE0();
    v91 = swift_release();
    v92 = sub_10057F9C4(v91);
    sub_1000215BC(v90, type metadata accessor for SunriseSunsetDetailViewModel);
    v94 = static HorizontalAlignment.center.getter(v93);
    v95 = *(double *)(v82 + v56);
    v96 = v130;
    *v130 = v83;
    v96[1] = v85;
    v96[2] = v86;
    v96[3] = v88;
    v97 = (int *)v129;
    v98 = v123((char *)v96 + *(int *)(v129 + 24), v89, v147);
    *(uint64_t *)((char *)v96 + v97[7]) = v92;
    *(uint64_t *)((char *)v96 + v97[8]) = v94;
    *(double *)((char *)v96 + v97[9]) = v95;
    v99 = (uint64_t *)((char *)v96 + v97[10]);
    *v99 = v80;
    v99[1] = v81;
    LOBYTE(v97) = static Edge.Set.horizontal.getter(v98);
    v100 = EdgeInsets.init(_all:)(v95);
    v102 = v101;
    v104 = v103;
    v106 = v105;
    v107 = v132;
    sub_100080C0C((uint64_t)v96, v132, type metadata accessor for SunriseSunsetDetailLollipopHeaderView);
    v108 = v131;
    v109 = v107 + *(int *)(v131 + 36);
    *(_BYTE *)v109 = (_BYTE)v97;
    *(double *)(v109 + 8) = v100;
    *(_QWORD *)(v109 + 16) = v102;
    *(_QWORD *)(v109 + 24) = v104;
    *(_QWORD *)(v109 + 32) = v106;
    *(_BYTE *)(v109 + 40) = 0;
    sub_1000215BC((uint64_t)v96, type metadata accessor for SunriseSunsetDetailLollipopHeaderView);
    v110 = (uint64_t)v148;
    ((void (*)(char *, _QWORD, uint64_t))v141)(v148, v127, v45);
    result = dispatch thunk of static Equatable.== infix(_:_:)(v110, v110, v45, v124);
    if ((result & 1) != 0)
    {
      v111 = sub_10074F6B8();
      v112 = v125;
      View.dynamicTypeSize<A>(_:)(v110, v108, v145, v111, v122);
      sub_100021A14(v110, (uint64_t *)&unk_100C0A510);
      sub_100021A14(v107, &qword_100C035E8);
      v78 = (uint64_t)v136;
      v113 = v112;
      v79 = v135;
      (*(void (**)(char *, char *, uint64_t))(v126 + 32))(v136, v113, v135);
      v77 = 0;
      v73 = v144;
      v72 = v143;
      goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_10074DAD0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = v1;
  v4 = sub_1000BA294(&qword_100C03888);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v18 - v8;
  v10 = sub_1000BA294(&qword_100C03890);
  __chkstk_darwin(v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v12 = static HorizontalAlignment.center.getter(v13);
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 0;
  v14 = (uint64_t)&v12[*(int *)(sub_1000BA294(&qword_100C03898) + 44)];
  sub_10074DC78(v1, (uint64_t)v9);
  v15 = type metadata accessor for SunriseSunsetChartAndTable(0);
  v16 = sub_100580134();
  LOBYTE(v2) = *(_BYTE *)(v2 + *(int *)(v15 + 28));
  sub_100037768((uint64_t)v9, (uint64_t)v6, &qword_100C03888);
  sub_100037768((uint64_t)v6, v14, &qword_100C03888);
  v17 = v14 + *(int *)(sub_1000BA294(&qword_100C038A0) + 48);
  *(_QWORD *)v17 = v16;
  *(_BYTE *)(v17 + 8) = v2;
  swift_bridgeObjectRetain();
  sub_100021A14((uint64_t)v9, &qword_100C03888);
  swift_bridgeObjectRelease();
  sub_100021A14((uint64_t)v6, &qword_100C03888);
  sub_100037768((uint64_t)v12, a1, &qword_100C03890);
  sub_100021A14((uint64_t)v12, &qword_100C03890);
}

void sub_10074DC78(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD v13[2];
  __int128 v14;
  char v15;
  _BYTE v16[40];

  v4 = _s14ChartViewModelVMa(0);
  __chkstk_darwin(v4);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100C02ED0);
  __chkstk_darwin(v7);
  v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_BYTE *)(a1 + 32);
  v13[0] = *(_QWORD *)a1;
  v13[1] = v10;
  v14 = *(_OWORD *)(a1 + 16);
  v15 = v11;
  v12 = sub_1000BA294(&qword_100C031A8);
  Binding.projectedValue.getter(v12);
  type metadata accessor for SunriseSunsetChartAndTable(0);
  Binding.projectedValue.getter(v7);
  sub_10057FC24(v6);
  sub_10073C7FC((uint64_t)v16, (uint64_t)v9, (uint64_t)v6, a2);
}

void *sub_10074DDA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  __n128 v5;
  _BYTE v7[272];
  _BYTE __src[279];

  v4 = static HorizontalAlignment.leading.getter(a1);
  sub_10074DE18(v2, v5);
  memcpy(&__src[7], v7, 0x110uLL);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = 0x3FF0000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  return memcpy((void *)(a2 + 17), __src, 0x117uLL);
}

double sub_10074DE18(uint64_t a1, __n128 a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[24];
  uint64_t v56;
  _BYTE v57[24];
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t *v64;
  uint64_t *v65;
  char *v66;
  uint64_t *v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  __int128 v72;

  v32 = static Axis.Set.horizontal.getter(a2);
  sub_10074E0BC((uint64_t)&v52);
  v26 = v53;
  v27 = v52;
  v25 = v54;
  v24 = *(_OWORD *)v55;
  v23 = *(_QWORD *)&v55[16];
  v22 = v56;
  v31 = *(_QWORD *)&v57[16];
  v29 = BYTE1(v58);
  v30 = v58;
  v28 = BYTE2(v58);
  v20 = *(_OWORD *)v57;
  v21 = static Axis.Set.horizontal.getter(*(__n128 *)v57);
  sub_10074E414(a1, (uint64_t)&v52);
  v3 = v52;
  v4 = v53;
  v5 = v54;
  v6 = *(_QWORD *)&v55[16];
  v7 = v56;
  v8 = *(_QWORD *)&v57[16];
  v9 = v58;
  v10 = BYTE1(v58);
  v11 = BYTE2(v58);
  v18 = *(_OWORD *)v57;
  v19 = *(_OWORD *)v55;
  static Alignment.center.getter(v12);
  _FrameLayout.init(width:height:alignment:)(0, 1, 0x4024000000000000, 0);
  v62 = 0x4024000000000000;
  v63 = 0;
  LOBYTE(v52) = v32;
  v53 = v27;
  v54 = v26;
  v55[0] = v25;
  *(_OWORD *)&v55[8] = v24;
  v56 = v23;
  v57[0] = v22;
  *(_OWORD *)&v57[8] = v20;
  v58 = v31;
  v59 = v30;
  v60 = v29;
  v61 = v28;
  v64 = &v62;
  v65 = &v52;
  v40 = v21;
  v41 = v3;
  v42 = v4;
  v43 = v5;
  v44 = v19;
  v45 = v6;
  v46 = v7;
  v47 = v18;
  v48 = v8;
  v49 = v9;
  v50 = v10;
  v51 = v11;
  v33 = 0;
  v34 = 1;
  v35 = v68;
  v36 = v69;
  v37 = v70;
  v38 = v71;
  v39 = v72;
  v66 = &v40;
  v67 = &v33;
  sub_10035EC78();
  v13 = *((_QWORD *)&v44 + 1);
  v14 = v45;
  LOBYTE(v3) = v46;
  sub_1000D31B4(v41, v42, v43);
  swift_bridgeObjectRelease();
  sub_1000D31B4(v13, v14, v3);
  swift_release();
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)&v55[16];
  v16 = v56;
  LOBYTE(v3) = v57[0];
  sub_1000D31B4(v53, v54, v55[0]);
  swift_bridgeObjectRelease();
  sub_1000D31B4(v15, v16, v3);
  swift_release();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

double sub_10074E0BC@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t, __n128);
  uint64_t v12;
  __n128 v13;
  void (*v14)(char *, uint64_t, __n128);
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;

  v2 = type metadata accessor for Font.Leading(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = static Font.largeTitle.getter(v6);
  static Font.Weight.medium.getter(v7);
  v8 = Font.weight(_:)(v7);
  v9 = swift_release();
  v10 = enum case for Font.Leading.tight(_:);
  v11 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 104);
  v11(v5, enum case for Font.Leading.tight(_:), v2, v9);
  v12 = Font.leading(_:)(v5, v8);
  v13 = swift_release();
  v14 = *(void (**)(char *, uint64_t, __n128))(v3 + 8);
  v14(v5, v2, v13);
  v15 = sub_10074E2F4(v12);
  v36 = v16;
  v37 = v15;
  LOBYTE(v3) = v17;
  v38 = v18;
  swift_release();
  LOBYTE(v12) = v3 & 1;
  v20 = static Font.title2.getter(v19);
  static Font.Weight.medium.getter(v20);
  v21 = Font.weight(_:)(v20);
  v22 = swift_release();
  v11(v5, v10, v2, v22);
  v23 = Font.leading(_:)(v5, v21);
  v24 = swift_release();
  v14(v5, v2, v24);
  v25 = sub_10074E2F4(v23);
  v27 = v26;
  LOBYTE(v5) = v28;
  v30 = v29;
  swift_release();
  LOBYTE(v5) = v5 & 1;
  KeyPath = swift_getKeyPath(&unk_1009C6030);
  v39 = v12;
  v33 = v36;
  v32 = v37;
  *(_QWORD *)a1 = v37;
  *(_QWORD *)(a1 + 8) = v33;
  *(_BYTE *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v38;
  *(_QWORD *)(a1 + 32) = v25;
  *(_QWORD *)(a1 + 40) = v27;
  *(_BYTE *)(a1 + 48) = (_BYTE)v5;
  *(_QWORD *)(a1 + 56) = v30;
  *(_QWORD *)(a1 + 64) = KeyPath;
  *(_QWORD *)(a1 + 72) = 2;
  *(_BYTE *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 81) = 256;
  v34 = v32;
  sub_1000D55D4(v32, v33, v12);
  swift_bridgeObjectRetain();
  sub_1000D55D4(v25, v27, (char)v5);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000D31B4(v25, v27, (char)v5);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000D31B4(v34, v33, v39);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_10074E2F4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v21;

  v2 = v1;
  v4 = type metadata accessor for TimeStyle(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Style(0);
  static Style.componentTime.getter();
  v8 = *v1;
  v9 = v2[1];
  v10 = type metadata accessor for SunriseSunsetDetailHeaderView(0);
  v11 = TimeStyle.formatTime(_:periodSymbols:font:)(v8, v9, *(_QWORD *)((char *)v2 + *(int *)(v10 + 28)), a1);
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  v18.n128_f64[0] = (*(double (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v19 = Text.monospacedDigit()(v11, v13, v17, v15, v18);
  sub_1000D31B4(v11, v13, v17);
  swift_bridgeObjectRelease();
  return v19;
}

double sub_10074E414@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  double result;

  v3 = static Font.subheadline.getter(a1);
  static Font.Weight.medium.getter(v3);
  v4 = Font.weight(_:)(v3);
  swift_release();
  v5 = sub_10074E584(v4);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  swift_release();
  LOBYTE(v4) = v9 & 1;
  v13 = static Font.footnote.getter(v12);
  static Font.Weight.medium.getter(v13);
  v14 = Font.weight(_:)(v13);
  swift_release();
  v15 = sub_10074E584(v14);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  swift_release();
  KeyPath = swift_getKeyPath(&unk_1009C6030);
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v11;
  *(_QWORD *)(a2 + 32) = v15;
  *(_QWORD *)(a2 + 40) = v17;
  *(_BYTE *)(a2 + 48) = v19 & 1;
  *(_QWORD *)(a2 + 56) = v21;
  *(_QWORD *)(a2 + 64) = KeyPath;
  *(_QWORD *)(a2 + 72) = 2;
  *(_BYTE *)(a2 + 80) = 0;
  *(_WORD *)(a2 + 81) = 256;
  sub_1000D55D4(v5, v7, v4);
  swift_bridgeObjectRetain();
  sub_1000D55D4(v15, v17, v19 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000D31B4(v15, v17, v19 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000D31B4(v5, v7, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_10074E584(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v24;

  v2 = type metadata accessor for AttributedString(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SunriseSunsetDetailHeaderView(0);
  AttributedString.with(font:)(a1);
  v5 = Text.init(_:)(v4);
  v7 = v6;
  v9 = v8;
  v11 = v10 & 1;
  v13 = static Color.secondary.getter(v12);
  v14 = Text.foregroundColor(_:)(v13, v5, v7, v11, v9);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  swift_release();
  sub_1000D31B4(v5, v7, v11);
  v21 = swift_bridgeObjectRelease();
  v22 = Text.monospacedDigit()(v14, v16, v18 & 1, v20, v21);
  sub_1000D31B4(v14, v16, v18 & 1);
  swift_bridgeObjectRelease();
  return v22;
}

void sub_10074E6D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;

  v1 = sub_1000BA294(&qword_100C03838);
  __chkstk_darwin(v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v3 = static HorizontalAlignment.center.getter(v4);
  *((_QWORD *)v3 + 1) = 0;
  v3[16] = 0;
  v5 = sub_1000BA294(&qword_100C03840);
  sub_10074E7BC(v0, &v3[*(int *)(v5 + 44)]);
  v6 = *(double *)((char *)v0 + *(int *)(type metadata accessor for SunriseSunsetDetailLollipopHeaderView(0) + 40));
  sub_1001CDAD0(&qword_100C03848, &qword_100C03838);
  View.offsetXWithinBounds(_:)(v1, v7, v6);
  sub_100021A14((uint64_t)v3, &qword_100C03838);
}

void sub_10074E7BC(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t KeyPath;
  _QWORD *v49;
  uint64_t v50;
  __n128 v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _BOOL8 v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  uint64_t v83;
  __n128 v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __n128 v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  __n128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  __n128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  __n128 v120;
  uint64_t v121;
  void (*v122)(char *, _QWORD, uint64_t);
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(char *, char *, uint64_t);
  char *v128;
  char *v129;
  uint64_t v130;
  _QWORD *v131;
  int *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(char *, uint64_t, __n128);
  __n128 v140;
  __n128 v141;
  unint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t (*v165)(char *, uint64_t);
  void (*v166)(char *, _QWORD, uint64_t);
  uint64_t v167;
  char *v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;

  v162 = a2;
  v157 = type metadata accessor for AttributedString(0);
  v156 = *(_QWORD *)(v157 - 8);
  __chkstk_darwin(v157);
  v155 = (char *)&v142 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v158 = (char *)&v142 - v5;
  v152 = type metadata accessor for Font.Leading(0);
  v151 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v150 = (char *)&v142 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = type metadata accessor for TimeStyle(0);
  v153 = *(_QWORD *)(v154 - 8);
  __chkstk_darwin(v154);
  v149 = (char *)&v142 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = sub_1000BA294(&qword_100C03850);
  v160 = *(_QWORD *)(v161 - 8);
  __chkstk_darwin(v161);
  v159 = (char *)&v142 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v168 = (char *)&v142 - v10;
  v148 = type metadata accessor for CharacterSet(0);
  v147 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148);
  v145 = (char *)&v142 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000BA294(&qword_100BC3B98);
  __chkstk_darwin(v12);
  v14 = (char *)&v142 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Font.TextStyle(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = v15;
  __chkstk_darwin(v15);
  v19 = (char *)&v142 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000BA294(&qword_100C03858);
  __chkstk_darwin(v20);
  v167 = (uint64_t)&v142 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v144 = (char *)&v142 - v23;
  __chkstk_darwin(v24);
  v169 = (uint64_t)&v142 - v25;
  v163 = a1;
  v26 = *a1;
  v27 = a1[1];
  v170 = (_QWORD *)v26;
  v171 = v27;
  v28 = sub_100114EF8();
  v142 = v28;
  swift_bridgeObjectRetain();
  v29 = Text.init<A>(_:)(&v170, &type metadata for String, v28);
  v31 = v30;
  v33 = v32;
  v35 = v34 & 1;
  v166 = *(void (**)(char *, _QWORD, uint64_t))(v16 + 104);
  v36 = v17;
  v164 = v17;
  v166(v19, enum case for Font.TextStyle.footnote(_:), v17);
  v146 = type metadata accessor for Font.Design(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 1, 1, v146);
  v143 = v19;
  v37 = static Font.system(_:design:weight:)(v19, v14, 0, 1);
  sub_100021A14((uint64_t)v14, &qword_100BC3B98);
  v165 = *(uint64_t (**)(char *, uint64_t))(v16 + 8);
  v38 = v165(v19, v36);
  static Font.Weight.medium.getter(v38);
  v39 = Font.weight(_:)(v37);
  swift_release();
  v40 = Text.font(_:)(v39, v29, v31, v35, v33);
  v42 = v41;
  LOBYTE(v16) = v43;
  v45 = v44;
  swift_release();
  sub_1000D31B4(v29, v31, v35);
  v46 = swift_bridgeObjectRelease();
  v47 = static Color.secondary.getter(v46);
  KeyPath = swift_getKeyPath(&unk_1009C6060);
  v170 = (_QWORD *)v40;
  v171 = v42;
  LOBYTE(v172) = v16 & 1;
  v173 = v45;
  LOWORD(v174) = 257;
  v175 = KeyPath;
  v176 = v47;
  v49 = v163;
  v50 = v163[1];
  v182 = *v163;
  v183 = v50;
  v51 = swift_bridgeObjectRetain();
  v52 = v145;
  static CharacterSet.whitespacesAndNewlines.getter(v51);
  v53 = StringProtocol.trimmingCharacters(in:)(v52, &type metadata for String, v142);
  v55 = v54;
  (*(void (**)(char *, uint64_t))(v147 + 8))(v52, v148);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v56 = HIBYTE(v55) & 0xF;
  if ((v55 & 0x2000000000000000) == 0)
    v56 = v53 & 0xFFFFFFFFFFFFLL;
  v57 = v56 == 0;
  v58 = sub_1000BA294(&qword_100C03860);
  v59 = sub_1007611D4();
  v60 = (uint64_t)v144;
  View.accessibilityHidden(_:)(v57, v58, v59);
  sub_1000D31B4((uint64_t)v170, v171, v172);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000787D4(v60, v169, &qword_100C03858);
  type metadata accessor for Style(0);
  v61 = v149;
  static Style.componentTime.getter();
  v62 = v49[2];
  v63 = v49[3];
  v148 = type metadata accessor for SunriseSunsetDetailLollipopHeaderView(0);
  v64 = *(_QWORD *)((char *)v49 + *(int *)(v148 + 28));
  v65 = v143;
  v66 = v164;
  v166(v143, enum case for Font.TextStyle.largeTitle(_:), v164);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 1, 1, v146);
  v67 = static Font.system(_:design:weight:)(v65, v14, 0, 1);
  sub_100021A14((uint64_t)v14, &qword_100BC3B98);
  v165(v65, v66);
  v68 = v151;
  v69 = v150;
  v70 = v152;
  (*(void (**)(char *, _QWORD, uint64_t))(v151 + 104))(v150, enum case for Font.Leading.tight(_:), v152);
  v71 = Font.leading(_:)(v69, v67);
  v72 = swift_release();
  v73 = (*(uint64_t (**)(char *, uint64_t, __n128))(v68 + 8))(v69, v70, v72);
  static Font.Weight.bold.getter(v73);
  v74 = Font.weight(_:)(v71);
  swift_release();
  v75 = v61;
  v76 = TimeStyle.formatTime(_:periodSymbols:font:)(v62, v63, v64, v74);
  v78 = v77;
  LOBYTE(v62) = v79;
  v81 = v80;
  v82 = swift_release();
  LOBYTE(v61) = v62 & 1;
  v83 = (*(uint64_t (**)(char *, uint64_t, __n128))(v153 + 8))(v75, v154, v82);
  LOBYTE(v62) = static Edge.Set.vertical.getter(v83);
  v84.n128_f64[0] = EdgeInsets.init(_all:)(-1.0);
  v85 = v84.n128_u64[0];
  v87 = v86;
  v89 = v88;
  v91 = v90;
  v92 = static Color.primary.getter(v84);
  v93 = swift_getKeyPath(&unk_1009C6060);
  v170 = (_QWORD *)v76;
  v171 = v78;
  LOBYTE(v172) = (_BYTE)v61;
  v173 = v81;
  LOBYTE(v174) = v62;
  v175 = v85;
  v176 = v87;
  v177 = v89;
  v178 = v91;
  v179 = 0;
  v180 = v93;
  v181 = v92;
  v94 = sub_1000BA294(&qword_100C03870);
  sub_100761270();
  View.monospacedDigit()(v94);
  sub_1000D31B4(v76, v78, (char)v61);
  swift_release();
  swift_release();
  v95 = swift_bridgeObjectRelease();
  v96 = v156;
  v97 = v155;
  v98 = v157;
  (*(void (**)(char *, char *, uint64_t, __n128))(v156 + 16))(v155, (char *)v163 + *(int *)(v148 + 24), v157, v95);
  v99 = v164;
  v100 = ((uint64_t (*)(char *, _QWORD, uint64_t))v166)(v65, enum case for Font.TextStyle.caption2(_:), v164);
  static Font.Weight.medium.getter(v100);
  v101 = v65;
  v102 = static Font.system(_:weight:)(v65);
  v165(v101, v99);
  v103 = v158;
  AttributedString.with(font:)(v102);
  v104 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v96 + 8))(v97, v98, v104);
  v105 = Text.init(_:)(v103);
  v107 = v106;
  v109 = v108;
  v111 = v110 & 1;
  v113 = static Color.secondary.getter(v112);
  v114 = Text.foregroundColor(_:)(v113, v105, v107, v111, v109);
  v116 = v115;
  LOBYTE(v61) = v117;
  v119 = v118;
  swift_release();
  sub_1000D31B4(v105, v107, v111);
  v120 = swift_bridgeObjectRelease();
  v165 = (uint64_t (*)(char *, uint64_t))Text.monospacedDigit()(v114, v116, v61 & 1, v119, v120);
  v164 = v121;
  v166 = v122;
  LOBYTE(v111) = v123 & 1;
  sub_1000D31B4(v114, v116, v61 & 1);
  swift_bridgeObjectRelease();
  static Alignment.center.getter(v124);
  _FrameLayout.init(width:height:alignment:)(0, 1, 0x4018000000000000, 0);
  v163 = v170;
  LODWORD(v158) = v171;
  v157 = v172;
  LODWORD(v156) = v173;
  v155 = v174;
  v154 = v175;
  v125 = v167;
  sub_100037768(v169, v167, &qword_100C03858);
  v126 = v160;
  v127 = *(void (**)(char *, char *, uint64_t))(v160 + 16);
  v128 = v159;
  v129 = v168;
  v130 = v161;
  v127(v159, v168, v161);
  v131 = v162;
  *v162 = 0x4018000000000000;
  *((_BYTE *)v131 + 8) = 0;
  v132 = (int *)sub_1000BA294(&qword_100C03880);
  sub_100037768(v125, (uint64_t)v131 + v132[12], &qword_100C03858);
  v127((char *)v131 + v132[16], v128, v130);
  v133 = (char *)v131 + v132[20];
  v134 = (uint64_t)v165;
  v135 = v164;
  *(_QWORD *)v133 = v165;
  *((_QWORD *)v133 + 1) = v135;
  v133[16] = v111;
  *((_QWORD *)v133 + 3) = v166;
  v136 = (char *)v131 + v132[24];
  *(_QWORD *)v136 = 0;
  v136[8] = 1;
  *((_QWORD *)v136 + 2) = v163;
  v136[24] = (char)v158;
  *((_QWORD *)v136 + 4) = v157;
  v136[40] = v156;
  v137 = v154;
  *((_QWORD *)v136 + 6) = v155;
  *((_QWORD *)v136 + 7) = v137;
  v138 = v134;
  sub_1000D55D4(v134, v135, v111);
  v139 = *(void (**)(char *, uint64_t, __n128))(v126 + 8);
  v140 = swift_bridgeObjectRetain();
  v139(v129, v130, v140);
  sub_100021A14(v169, &qword_100C03858);
  sub_1000D31B4(v138, v135, v111);
  v141 = swift_bridgeObjectRelease();
  v139(v128, v130, v141);
  sub_100021A14(v167, &qword_100C03858);
}

uint64_t sub_10074F300()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = sub_1000D2000();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  swift_release();
  v6 = v0 + v4 + *(int *)(v1 + 24);
  v7 = sub_1000BD520();
  v8 = sub_10003BD0C();
  if (!_s7Weather24LocationCompositionStateOwet_0(v8, v9, v7))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  sub_1000BA294(&qword_100C03490);
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + v4 + *(int *)(v1 + 32)));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10074F3CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000D2000() - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_100C03554);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100223BE0;
  return sub_10074C0BC(v3);
}

void sub_10074F42C(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_10074C16C(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_10074F434()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C03598;
  if (!qword_100C03598)
  {
    v1 = sub_100075EB0(&qword_100C03570);
    sub_10074F4B8();
    sub_1001CDAD0(&qword_100BC4050, &qword_100BC4058);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C03598);
  }
  return result;
}

unint64_t sub_10074F4B8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_100C035A0;
  if (!qword_100C035A0)
  {
    v1 = sub_100075EB0(&qword_100BD9AE0);
    v2 = sub_100075EB0(&qword_100C03568);
    sub_1001CDAD0(&qword_100C03590, &qword_100C03568);
    v4[0] = v2;
    v4[1] = v3;
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.scrollIndicators(_:axes:)>>, 1);
    sub_10000F1C8((unint64_t *)&qword_100BC6768, type metadata accessor for AutomationInfoViewModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C035A0);
  }
  return result;
}

uint64_t type metadata accessor for SunriseSunsetChartAndTable(uint64_t a1)
{
  return sub_100098190(a1, qword_100C03698, (uint64_t)&nominal type descriptor for SunriseSunsetChartAndTable);
}

uint64_t type metadata accessor for SunriseSunsetDetailLollipopHeaderView(uint64_t a1)
{
  return sub_100098190(a1, qword_100C03730, (uint64_t)&nominal type descriptor for SunriseSunsetDetailLollipopHeaderView);
}

uint64_t type metadata accessor for SunriseSunsetDetailHeaderView(uint64_t a1)
{
  return sub_100098190(a1, qword_100C037D8, (uint64_t)&nominal type descriptor for SunriseSunsetDetailHeaderView);
}

unint64_t sub_10074F5C8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  result = qword_100C03620;
  if (!qword_100C03620)
  {
    v1 = sub_100075EB0(&qword_100C03608);
    v2 = type metadata accessor for SunriseSunsetDetailHeaderView(255);
    v3 = sub_100075EB0((uint64_t *)&unk_100C0A510);
    sub_10000F1C8(&qword_100C03618, type metadata accessor for SunriseSunsetDetailHeaderView);
    v5 = v4;
    sub_1001CDAD0(&qword_100BC4E30, (uint64_t *)&unk_100C0A510);
    v7[0] = v2;
    v7[1] = v3;
    v7[2] = v5;
    v7[3] = v6;
    swift_getOpaqueTypeConformance2(v7, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C03620);
  }
  return result;
}

unint64_t sub_10074F6B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C03630;
  if (!qword_100C03630)
  {
    v1 = sub_100075EB0(&qword_100C035E8);
    sub_10000F1C8(&qword_100C03638, type metadata accessor for SunriseSunsetDetailLollipopHeaderView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C03630);
  }
  return result;
}

uint64_t sub_10074F73C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, void *, __n128);
  __n128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  __n128 v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _QWORD *v58;
  __n128 v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  __n128 v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  void (*v81)(char *, char *, void *, __n128);
  __n128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  int *v97;
  uint64_t v98;
  char *v99;
  void (*v100)(char *, char *, uint64_t, __n128);
  __n128 v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  void (*v106)(char *, char *, uint64_t);
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  _QWORD *v114;
  __n128 v115;
  _QWORD *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  __n128 v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  void (*v159)(char *, char *, uint64_t, __n128);
  __n128 v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  void (*v172)(char *, char *, uint64_t, __n128);
  __n128 v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unsigned __int8 v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  const void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned __int8 v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  const void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v227;
  int *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  void (*v233)(char *, char *, void *, __n128);
  void (*v234)(char *, char *, void *, __n128);
  void *__dst;
  void *__dsta;
  uint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  void (*v243)(char *, char *, uint64_t, __n128);
  _QWORD *v244;
  _QWORD *v245;
  uint64_t v246;
  char *v247;
  char *v248;
  int *v249;
  uint64_t *v250;
  _QWORD *v251;
  _QWORD *v252;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) == 0)
  {
    v6 = a3;
    v7 = a2;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v8 = *(int *)(a3 + 20);
    v9 = (_QWORD *)(a1 + v8);
    v10 = (uint64_t)a2 + v8;
    v11 = *(uint64_t *)((char *)a2 + v8 + 8);
    *v9 = *(uint64_t *)((char *)a2 + v8);
    v9[1] = v11;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v12 = *(int *)(sub_1000BA294(&qword_100C02ED0) + 32);
    v13 = (char *)v9 + v12;
    v14 = (const void *)(v10 + v12);
    v246 = type metadata accessor for DetailChartDataElement(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, v246))
    {
      v15 = sub_1000BA294(&qword_100BCB0A0);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v246 - 8) + 16))(v13, v14, v246);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, v246);
    }
    v16 = *(int *)(v6 + 24);
    v17 = (_QWORD *)(a1 + v16);
    v18 = (uint64_t *)((char *)v7 + v16);
    v19 = type metadata accessor for SunriseSunsetDetailViewModel(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18);
    if (EnumCaseMultiPayload == 1)
    {
      v238 = v19;
      v240 = a1;
      v242 = v6;
      v239 = v7;
      v74 = v18[1];
      *v17 = *v18;
      v17[1] = v74;
      v75 = v18[3];
      v17[2] = v18[2];
      v17[3] = v75;
      *((_BYTE *)v17 + 32) = *((_BYTE *)v18 + 32);
      v76 = (int *)_s10PolarModelVMa(0);
      v77 = v76[7];
      v78 = (char *)v17 + v77;
      v79 = (char *)v18 + v77;
      v80 = type metadata accessor for Date(0);
      v81 = *(void (**)(char *, char *, void *, __n128))(*(_QWORD *)(v80 - 8) + 16);
      v234 = v81;
      __dsta = (void *)v80;
      swift_bridgeObjectRetain();
      v82 = swift_bridgeObjectRetain();
      v81(v78, v79, (void *)v80, v82);
      v83 = v76[8];
      v84 = (char *)v17 + v83;
      v85 = (char *)v18 + v83;
      v86 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 16))(v84, v85, v86);
      v87 = v76[9];
      v88 = (char *)v17 + v87;
      v89 = (char *)v18 + v87;
      v230 = type metadata accessor for AttributedString(0);
      (*(void (**)(char *, char *))(*(_QWORD *)(v230 - 8) + 16))(v88, v89);
      *(_QWORD *)((char *)v17 + v76[10]) = *(_QWORD *)((char *)v18 + v76[10]);
      v90 = v76[11];
      v91 = (_QWORD *)((char *)v17 + v90);
      v92 = (_QWORD *)((char *)v18 + v90);
      v93 = v92[1];
      *v91 = *v92;
      v91[1] = v93;
      v94 = v76[12];
      v252 = v17;
      v95 = (char *)v17 + v94;
      v96 = (char *)v18 + v94;
      *(_QWORD *)((char *)v17 + v94) = *(_QWORD *)((char *)v18 + v94);
      v97 = (int *)_s14ChartViewModelVMa(0);
      v98 = v97[5];
      v99 = &v95[v98];
      v232 = &v96[v98];
      v245 = v18;
      v100 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v246 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v101 = swift_bridgeObjectRetain();
      v100(v99, v232, v246, v101);
      v102 = v97[6];
      v103 = &v95[v102];
      v104 = &v96[v102];
      v105 = type metadata accessor for Location(0);
      v106 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v105 - 8) + 16);
      v106(v103, v104, v105);
      v107 = v97[7];
      v108 = &v95[v107];
      v109 = &v96[v107];
      v110 = *(_QWORD *)v109;
      v111 = *((_QWORD *)v109 + 1);
      *(_QWORD *)v108 = v110;
      *((_QWORD *)v108 + 1) = v111;
      *(_QWORD *)&v95[v97[8]] = *(_QWORD *)&v96[v97[8]];
      *(_QWORD *)&v95[v97[9]] = *(_QWORD *)&v96[v97[9]];
      *(_QWORD *)&v95[v97[10]] = *(_QWORD *)&v96[v97[10]];
      v112 = v97[11];
      v248 = &v95[v112];
      v113 = &v96[v112];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v114 = v245;
      v115 = swift_bridgeObjectRetain();
      v234(v248, v113, __dsta, v115);
      *(_QWORD *)&v95[v97[12]] = *(_QWORD *)&v96[v97[12]];
      v116 = v252;
      v117 = v76[13];
      v118 = (char *)v252 + v117;
      v119 = (char *)v245 + v117;
      v120 = swift_bridgeObjectRetain();
      ((void (*)(char *, char *, uint64_t, __n128))v106)(v118, v119, v105, v120);
      *(_QWORD *)((char *)v252 + v76[15]) = *(_QWORD *)((char *)v245 + v76[15]);
      v121 = v76[16];
      v122 = (_QWORD *)((char *)v252 + v121);
      v123 = (_QWORD *)((char *)v245 + v121);
      v124 = type metadata accessor for DetailComponentContainerViewModel(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v123, 1, v124))
      {
        v125 = sub_1000BA294(&qword_100BC68A0);
        memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
        v6 = v242;
      }
      else
      {
        v128 = v123[1];
        if (v128)
        {
          *v122 = *v123;
          v122[1] = v128;
          v129 = v123[3];
          v122[2] = v123[2];
          v122[3] = v129;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v141 = *((_OWORD *)v123 + 1);
          *(_OWORD *)v122 = *(_OWORD *)v123;
          *((_OWORD *)v122 + 1) = v141;
        }
        v142 = *(int *)(v124 + 20);
        v143 = (_QWORD *)((char *)v122 + v142);
        v144 = (_QWORD *)((char *)v123 + v142);
        v145 = type metadata accessor for NewsArticleComponentViewModel(0);
        if (swift_getEnumCaseMultiPayload(v144) == 1)
        {
          v227 = v145;
          v146 = v144[1];
          *v143 = *v144;
          v143[1] = v146;
          v249 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
          v147 = v249[5];
          v148 = (char *)v143 + v147;
          v149 = (char *)v144 + v147;
          v150 = type metadata accessor for URL(0);
          swift_bridgeObjectRetain();
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v149, 1, v150))
          {
            v151 = sub_1000BA294(&qword_100BD4280);
            memcpy(v148, v149, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v150 - 8) + 16))(v148, v149, v150);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v148, 0, 1, v150);
          }
          v165 = v249[6];
          v166 = (_QWORD *)((char *)v143 + v165);
          v167 = (_QWORD *)((char *)v144 + v165);
          v168 = v167[1];
          *v166 = *v167;
          v166[1] = v168;
          v169 = v249[7];
          v170 = (char *)v143 + v169;
          v171 = (char *)v144 + v169;
          v172 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v150 - 8) + 16);
          v173 = swift_bridgeObjectRetain();
          v172(v170, v171, v150, v173);
          v174 = v249[8];
          v175 = (char *)v143 + v174;
          v176 = (char *)v144 + v174;
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v144 + v174, 1, v150))
          {
            v177 = sub_1000BA294(&qword_100BD4280);
            memcpy(v175, v176, *(_QWORD *)(*(_QWORD *)(v177 - 8) + 64));
          }
          else
          {
            ((void (*)(char *, char *, uint64_t))v172)(v175, v176, v150);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v175, 0, 1, v150);
          }
          v116 = v252;
          *((_BYTE *)v143 + v249[9]) = *((_BYTE *)v144 + v249[9]);
          swift_storeEnumTagMultiPayload(v143, v227, 1);
        }
        else
        {
          memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v145 - 8) + 64));
        }
        v201 = *(int *)(v124 + 24);
        v202 = (char *)v122 + v201;
        v203 = (char *)v123 + v201;
        v204 = type metadata accessor for DetailComponentAction(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v203, 1, v204))
        {
          v205 = sub_1000BA294(&qword_100BD3100);
          memcpy(v202, v203, *(_QWORD *)(*(_QWORD *)(v205 - 8) + 64));
        }
        else
        {
          v206 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v206 - 8) + 16))(v202, v203, v206);
          v207 = sub_1000BA294(&qword_100BC5FE8);
          v202[*(int *)(v207 + 48)] = v203[*(int *)(v207 + 48)];
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v202, 0, 1, v204);
        }
        v6 = v242;
        v114 = v245;
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v122, 0, 1, v124);
      }
      v208 = *(int *)(sub_1000BA294(&qword_100BF18A0) + 48);
      v250 = (_QWORD *)((char *)v116 + v208);
      v209 = (uint64_t)v114 + v208;
      v210 = type metadata accessor for ConditionDetailPlatterViewModel(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v209, 1, v210))
      {
        v212 = *(_QWORD *)v209;
        v213 = *(_QWORD *)(v209 + 8);
        v214 = *(_BYTE *)(v209 + 16);
        sub_1000B2044(*(_QWORD *)v209, v213, v214);
        *v250 = v212;
        v250[1] = v213;
        *((_BYTE *)v250 + 16) = v214;
        v215 = *(_QWORD *)(v209 + 32);
        v250[3] = *(_QWORD *)(v209 + 24);
        v250[4] = v215;
        v216 = *(int *)(v210 + 24);
        v217 = (char *)v250 + v216;
        v218 = (const void *)(v209 + v216);
        v219 = type metadata accessor for WeatherDescription(0);
        swift_bridgeObjectRetain();
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v218, 1, v219))
        {
          v220 = sub_1000BA294(&qword_100BC3368);
          memcpy(v217, v218, *(_QWORD *)(*(_QWORD *)(v220 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v219 - 8) + 16))(v217, v218, v219);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v217, 0, 1, v219);
        }
        v221 = v209 + *(int *)(v210 + 28);
        type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
        v222 = (char *)&loc_100750628 + 4 * byte_1009C5CA0[swift_getEnumCaseMultiPayload(v221)];
        __asm { BR              X10 }
      }
      v211 = sub_1000BA294(&qword_100BC68B8);
      memcpy(v250, (const void *)v209, *(_QWORD *)(*(_QWORD *)(v211 - 8) + 64));
      v223 = v116;
      v224 = v238;
      v225 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
LABEL_58:
        *(_BYTE *)(a1 + *(int *)(v6 + 28)) = *((_BYTE *)v7 + *(int *)(v6 + 28));
        return a1;
      }
      v237 = v19;
      v240 = a1;
      v241 = v6;
      v239 = v7;
      v21 = v18[1];
      *v17 = *v18;
      v17[1] = v21;
      v22 = v18[3];
      v17[2] = v18[2];
      v17[3] = v22;
      v23 = v18[5];
      v17[4] = v18[4];
      v17[5] = v23;
      v24 = (int *)_s11NormalModelVMa(0);
      v25 = v24[7];
      v26 = (char *)v17 + v25;
      v27 = (char *)v18 + v25;
      v28 = type metadata accessor for Date(0);
      v29 = *(void (**)(char *, char *, void *, __n128))(*(_QWORD *)(v28 - 8) + 16);
      v233 = v29;
      __dst = (void *)v28;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v30 = swift_bridgeObjectRetain();
      v29(v26, v27, (void *)v28, v30);
      ((void (*)(char *, char *, uint64_t))v29)((char *)v17 + v24[8], (char *)v18 + v24[8], v28);
      ((void (*)(char *, char *, uint64_t))v29)((char *)v17 + v24[9], (char *)v18 + v24[9], v28);
      v31 = v24[10];
      v32 = (char *)v17 + v31;
      v33 = (char *)v18 + v31;
      v34 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
      v35 = v24[11];
      v36 = (char *)v17 + v35;
      v37 = (char *)v18 + v35;
      v231 = type metadata accessor for AttributedString(0);
      (*(void (**)(char *, char *))(*(_QWORD *)(v231 - 8) + 16))(v36, v37);
      *(_QWORD *)((char *)v17 + v24[12]) = *(_QWORD *)((char *)v18 + v24[12]);
      v38 = v24[13];
      v251 = v17;
      v39 = (char *)v17 + v38;
      v40 = (char *)v18 + v38;
      *(_QWORD *)((char *)v17 + v38) = *(_QWORD *)((char *)v18 + v38);
      v41 = (int *)_s14ChartViewModelVMa(0);
      v42 = v41[5];
      v43 = &v39[v42];
      v44 = &v40[v42];
      v243 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v246 - 8) + 16);
      swift_bridgeObjectRetain();
      v45 = swift_bridgeObjectRetain();
      v243(v43, v44, v246, v45);
      v46 = v41[6];
      v47 = &v39[v46];
      v244 = v18;
      v48 = &v40[v46];
      v49 = type metadata accessor for Location(0);
      v50 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
      v50(v47, v48, v49);
      v51 = v41[7];
      v52 = &v39[v51];
      v53 = &v40[v51];
      v54 = *(_QWORD *)v53;
      v55 = *((_QWORD *)v53 + 1);
      *(_QWORD *)v52 = v54;
      *((_QWORD *)v52 + 1) = v55;
      *(_QWORD *)&v39[v41[8]] = *(_QWORD *)&v40[v41[8]];
      *(_QWORD *)&v39[v41[9]] = *(_QWORD *)&v40[v41[9]];
      *(_QWORD *)&v39[v41[10]] = *(_QWORD *)&v40[v41[10]];
      v56 = v41[11];
      v247 = &v39[v56];
      v57 = &v40[v56];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v58 = v244;
      swift_bridgeObjectRetain();
      v59 = swift_bridgeObjectRetain();
      v233(v247, v57, __dst, v59);
      *(_QWORD *)&v39[v41[12]] = *(_QWORD *)&v40[v41[12]];
      v60 = v251;
      v61 = v24[14];
      v62 = (char *)v251 + v61;
      v63 = (char *)v244 + v61;
      v64 = swift_bridgeObjectRetain();
      ((void (*)(char *, char *, uint64_t, __n128))v50)(v62, v63, v49, v64);
      v65 = v24[15];
      v66 = (char *)v251 + v65;
      v67 = (char *)v244 + v65;
      v68 = type metadata accessor for SunEvents(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v66, v67, v68);
      *(_QWORD *)((char *)v251 + v24[16]) = *(_QWORD *)((char *)v244 + v24[16]);
      v69 = v24[18];
      v70 = (_QWORD *)((char *)v251 + v69);
      v71 = (_QWORD *)((char *)v244 + v69);
      v72 = type metadata accessor for DetailComponentContainerViewModel(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v71, 1, v72))
      {
        v73 = sub_1000BA294(&qword_100BC68A0);
        memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
        v6 = v241;
      }
      else
      {
        v126 = v71[1];
        if (v126)
        {
          *v70 = *v71;
          v70[1] = v126;
          v127 = v71[3];
          v70[2] = v71[2];
          v70[3] = v127;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v130 = *((_OWORD *)v71 + 1);
          *(_OWORD *)v70 = *(_OWORD *)v71;
          *((_OWORD *)v70 + 1) = v130;
        }
        v131 = *(int *)(v72 + 20);
        v132 = (_QWORD *)((char *)v70 + v131);
        v133 = (_QWORD *)((char *)v71 + v131);
        v134 = type metadata accessor for NewsArticleComponentViewModel(0);
        if (swift_getEnumCaseMultiPayload(v133) == 1)
        {
          v229 = v72;
          v135 = v133[1];
          *v132 = *v133;
          v132[1] = v135;
          v228 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
          v136 = v228[5];
          v137 = (char *)v132 + v136;
          v138 = (char *)v133 + v136;
          v139 = type metadata accessor for URL(0);
          swift_bridgeObjectRetain();
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v138, 1, v139))
          {
            v140 = sub_1000BA294(&qword_100BD4280);
            memcpy(v137, v138, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v139 - 8) + 16))(v137, v138, v139);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v137, 0, 1, v139);
          }
          v152 = v228[6];
          v153 = (_QWORD *)((char *)v132 + v152);
          v154 = (_QWORD *)((char *)v133 + v152);
          v155 = v154[1];
          *v153 = *v154;
          v153[1] = v155;
          v156 = v228[7];
          v157 = (char *)v132 + v156;
          v158 = (char *)v133 + v156;
          v159 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v139 - 8) + 16);
          v160 = swift_bridgeObjectRetain();
          v159(v157, v158, v139, v160);
          v161 = v228[8];
          v162 = (char *)v132 + v161;
          v163 = (char *)v133 + v161;
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v133 + v161, 1, v139))
          {
            v164 = sub_1000BA294(&qword_100BD4280);
            memcpy(v162, v163, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
          }
          else
          {
            ((void (*)(char *, char *, uint64_t))v159)(v162, v163, v139);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v162, 0, 1, v139);
          }
          v60 = v251;
          *((_BYTE *)v132 + v228[9]) = *((_BYTE *)v133 + v228[9]);
          swift_storeEnumTagMultiPayload(v132, v134, 1);
          v72 = v229;
        }
        else
        {
          memcpy(v132, v133, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
        }
        v178 = *(int *)(v72 + 24);
        v179 = (char *)v70 + v178;
        v180 = (char *)v71 + v178;
        v181 = type metadata accessor for DetailComponentAction(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v180, 1, v181))
        {
          v182 = sub_1000BA294(&qword_100BD3100);
          memcpy(v179, v180, *(_QWORD *)(*(_QWORD *)(v182 - 8) + 64));
        }
        else
        {
          v183 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v183 - 8) + 16))(v179, v180, v183);
          v184 = sub_1000BA294(&qword_100BC5FE8);
          v179[*(int *)(v184 + 48)] = v180[*(int *)(v184 + 48)];
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v179, 0, 1, v181);
        }
        v6 = v241;
        v58 = v244;
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v70, 0, 1, v72);
      }
      v185 = *(int *)(sub_1000BA294(&qword_100BF1898) + 48);
      v186 = (_QWORD *)((char *)v60 + v185);
      v187 = (uint64_t)v58 + v185;
      v188 = type metadata accessor for ConditionDetailPlatterViewModel(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v187, 1, v188))
      {
        v190 = *(_QWORD *)v187;
        v191 = *(_QWORD *)(v187 + 8);
        v192 = *(_BYTE *)(v187 + 16);
        sub_1000B2044(*(_QWORD *)v187, v191, v192);
        *v186 = v190;
        v186[1] = v191;
        *((_BYTE *)v186 + 16) = v192;
        v193 = *(_QWORD *)(v187 + 32);
        v186[3] = *(_QWORD *)(v187 + 24);
        v186[4] = v193;
        v194 = *(int *)(v188 + 24);
        v195 = (char *)v186 + v194;
        v196 = (const void *)(v187 + v194);
        v197 = type metadata accessor for WeatherDescription(0);
        swift_bridgeObjectRetain();
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v196, 1, v197))
        {
          v198 = sub_1000BA294(&qword_100BC3368);
          memcpy(v195, v196, *(_QWORD *)(*(_QWORD *)(v198 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v197 - 8) + 16))(v195, v196, v197);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v195, 0, 1, v197);
        }
        v199 = v187 + *(int *)(v188 + 28);
        type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
        v200 = (char *)&loc_1007503C0 + 4 * byte_1009C5CB0[swift_getEnumCaseMultiPayload(v199)];
        __asm { BR              X10 }
      }
      v189 = sub_1000BA294(&qword_100BC68B8);
      memcpy(v186, (const void *)v187, *(_QWORD *)(*(_QWORD *)(v189 - 8) + 64));
      v223 = v60;
      v224 = v237;
      v225 = 0;
    }
    swift_storeEnumTagMultiPayload(v223, v224, v225);
    v7 = v239;
    a1 = v240;
    goto LABEL_58;
  }
  a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return a1;
}

void sub_100752AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  __n128 v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  void (*v35)(uint64_t, uint64_t, __n128);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  __n128 v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  void (*v67)(uint64_t, uint64_t, __n128);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __n128 v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  void (*v91)(uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int *v96;
  uint64_t v97;
  uint64_t v98;
  __n128 v99;
  void (*v100)(uint64_t, uint64_t, __n128);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int *v130;
  uint64_t v131;
  int *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void (*v160)(uint64_t, uint64_t, __n128);
  uint64_t v161;
  void (*v162)(uint64_t, uint64_t, __n128);
  int *v163;
  int *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int *v169;
  int *v170;
  uint64_t v171;
  uint64_t v172;
  void (*v173)(uint64_t, uint64_t);
  void (*v174)(uint64_t, uint64_t);
  void (*v175)(uint64_t, uint64_t);
  void (*v176)(uint64_t, uint64_t);
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void (*v181)(uint64_t, uint64_t);
  void (*v182)(uint64_t, uint64_t);

  swift_release();
  swift_release();
  v4 = a1 + *(int *)(a2 + 20);
  swift_release();
  swift_release();
  v5 = v4 + *(int *)(sub_1000BA294(&qword_100C02ED0) + 32);
  v6 = type metadata accessor for DetailChartDataElement(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  type metadata accessor for SunriseSunsetDetailViewModel(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7);
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v46 = (int *)_s10PolarModelVMa(0);
    v47 = v7 + v46[7];
    v11 = type metadata accessor for Date(0);
    v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
    v12(v47, v11);
    v48 = v7 + v46[8];
    v49 = type metadata accessor for TimeZone(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v48, v49);
    v50 = v7 + v46[9];
    v16 = type metadata accessor for AttributedString(0);
    v182 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
    v182(v50, v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v51 = v7 + v46[12];
    swift_bridgeObjectRelease();
    v52 = (int *)_s14ChartViewModelVMa(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v51 + v52[5], v6);
    v53 = v51 + v52[6];
    v20 = type metadata accessor for Location(0);
    v54 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8);
    v54(v53, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v55 = swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t, __n128))v12)(v51 + v52[11], v11, v55);
    v56 = swift_bridgeObjectRelease();
    v181 = v54;
    ((void (*)(uint64_t, uint64_t, __n128))v54)(v7 + v46[13], v20, v56);
    swift_bridgeObjectRelease();
    v57 = v7 + v46[16];
    v58 = type metadata accessor for DetailComponentContainerViewModel(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v57, 1, v58))
    {
      v59 = v12;
      if (*(_QWORD *)(v57 + 8))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v60 = v57 + *(int *)(v58 + 20);
      type metadata accessor for NewsArticleComponentViewModel(0);
      if (swift_getEnumCaseMultiPayload(v60) == 1)
      {
        v179 = v11;
        v61 = v16;
        v62 = v58;
        swift_bridgeObjectRelease();
        v63 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
        v64 = v60 + v63[5];
        v65 = type metadata accessor for URL(0);
        if (!_s7Weather24LocationCompositionStateOwet_0(v64, 1, v65))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 8))(v64, v65);
        v66 = swift_bridgeObjectRelease();
        v67 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v65 - 8) + 8);
        v67(v60 + v63[7], v65, v66);
        v68 = v60 + v63[8];
        v58 = v62;
        v16 = v61;
        v11 = v179;
        if (!_s7Weather24LocationCompositionStateOwet_0(v68, 1, v65))
          ((void (*)(uint64_t, uint64_t))v67)(v68, v65);
      }
      v69 = v57 + *(int *)(v58 + 24);
      v70 = type metadata accessor for DetailComponentAction(0);
      v12 = v59;
      if (!_s7Weather24LocationCompositionStateOwet_0(v69, 1, v70))
      {
        v71 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 8))(v69, v71);
      }
    }
    v72 = v7 + *(int *)(sub_1000BA294(&qword_100BF18A0) + 48);
    v73 = (int *)type metadata accessor for ConditionDetailPlatterViewModel(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v72, 1, (uint64_t)v73))
    {
      v180 = v58;
      sub_10006BD8C(*(_QWORD *)v72, *(_QWORD *)(v72 + 8), *(_BYTE *)(v72 + 16));
      swift_bridgeObjectRelease();
      v74 = v72 + v73[6];
      v43 = type metadata accessor for WeatherDescription(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v74, 1, v43))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v74, v43);
      v75 = v72 + v73[7];
      v76 = type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
      switch(swift_getEnumCaseMultiPayload(v75))
      {
        case 0u:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v75, v43);
          goto LABEL_79;
        case 1u:
          goto LABEL_78;
        case 2u:
          v182(v75, v16);
          goto LABEL_79;
        case 3u:
          v85 = sub_1000BA294(&qword_100BD30F8);
          goto LABEL_73;
        case 4u:
          v174 = v12;
          if (*(_QWORD *)(v75 + 8))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v86 = v75 + *(int *)(v180 + 20);
          type metadata accessor for NewsArticleComponentViewModel(0);
          if (swift_getEnumCaseMultiPayload(v86) == 1)
          {
            swift_bridgeObjectRelease();
            v170 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
            v161 = v86 + v170[5];
            v166 = type metadata accessor for URL(0);
            if (!_s7Weather24LocationCompositionStateOwet_0(v161, 1, v166))
              (*(void (**)(uint64_t))(*(_QWORD *)(v166 - 8) + 8))(v161);
            v87 = swift_bridgeObjectRelease();
            v162 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v166 - 8) + 8);
            v162(v86 + v170[7], v166, v87);
            v88 = v86 + v170[8];
            if (!_s7Weather24LocationCompositionStateOwet_0(v88, 1, v166))
              ((void (*)(uint64_t, uint64_t))v162)(v88, v166);
          }
          v75 += *(int *)(v180 + 24);
          v89 = type metadata accessor for DetailComponentAction(0);
          v12 = v174;
          if (_s7Weather24LocationCompositionStateOwet_0(v75, 1, v89))
            goto LABEL_79;
          v85 = type metadata accessor for URL(0);
LABEL_73:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 8))(v75, v85);
LABEL_79:
          v83 = v72 + v73[8];
          v84 = v180;
          if (!_s7Weather24LocationCompositionStateOwet_0(v83, 1, v76))
          {
            switch(swift_getEnumCaseMultiPayload(v83))
            {
              case 0u:
LABEL_82:
                v91 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8);
                v92 = v83;
                v93 = v43;
                goto LABEL_149;
              case 1u:
                goto LABEL_102;
              case 2u:
LABEL_83:
                v92 = v83;
                v93 = v16;
                v91 = v182;
                goto LABEL_149;
              case 3u:
LABEL_84:
                v94 = sub_1000BA294(&qword_100BD30F8);
                goto LABEL_98;
              case 4u:
LABEL_85:
                if (*(_QWORD *)(v83 + 8))
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                v95 = v83 + *(int *)(v84 + 20);
                type metadata accessor for NewsArticleComponentViewModel(0);
                if (swift_getEnumCaseMultiPayload(v95) == 1)
                {
                  swift_bridgeObjectRelease();
                  v96 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
                  v97 = v95 + v96[5];
                  v98 = type metadata accessor for URL(0);
                  if (!_s7Weather24LocationCompositionStateOwet_0(v97, 1, v98))
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 8))(v97, v98);
                  v99 = swift_bridgeObjectRelease();
                  v100 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v98 - 8) + 8);
                  v100(v95 + v96[7], v98, v99);
                  v101 = v95 + v96[8];
                  if (!_s7Weather24LocationCompositionStateOwet_0(v101, 1, v98))
                    ((void (*)(uint64_t, uint64_t))v100)(v101, v98);
                }
                v102 = v83 + *(int *)(v84 + 24);
                v103 = type metadata accessor for DetailComponentAction(0);
                if (_s7Weather24LocationCompositionStateOwet_0(v102, 1, v103))
                  return;
                v104 = type metadata accessor for URL(0);
                goto LABEL_148;
              case 5u:
LABEL_94:
                if (*(_QWORD *)(v83 + 24))
                {
                  sub_1000D31B4(*(_QWORD *)v83, *(_QWORD *)(v83 + 8), *(_BYTE *)(v83 + 16));
                  swift_bridgeObjectRelease();
                }
                sub_1002387C0(*(_QWORD *)(v83 + 32), *(_QWORD *)(v83 + 40), *(_QWORD *)(v83 + 48), *(_QWORD *)(v83 + 56), *(_QWORD *)(v83 + 64), *(_QWORD *)(v83 + 72), *(_QWORD *)(v83 + 80), *(unsigned __int8 *)(v83 + 88), *(_BYTE *)(v83 + 89));
                return;
              case 6u:
LABEL_97:
                v94 = type metadata accessor for PrecipitationTotalPlatterViewModel(0);
LABEL_98:
                v93 = v94;
                v91 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 8);
                v92 = v83;
                goto LABEL_149;
              case 7u:
LABEL_99:
                type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
                v105 = swift_getEnumCaseMultiPayload(v83);
                if (v105 == 1)
                {
                  swift_bridgeObjectRelease();
                  v130 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
                  v181(v83 + v130[5], v20);
                  v131 = v83 + v130[6];
                  v132 = (int *)type metadata accessor for WeatherData(0);
                  if (!_s7Weather24LocationCompositionStateOwet_0(v131, 1, (uint64_t)v132))
                  {
                    swift_bridgeObjectRelease();
                    v133 = v131 + v132[5];
                    v134 = type metadata accessor for Locale(0);
                    if (!_s7Weather24LocationCompositionStateOwet_0(v133, 1, v134))
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v134 - 8) + 8))(v133, v134);
                    v135 = v131 + v132[6];
                    v136 = type metadata accessor for WeatherDataModel(0);
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v136 - 8) + 8))(v135, v136);
                    v137 = v131 + v132[7];
                    v138 = sub_1000BA294(&qword_100BC3348);
                    if (!_s7Weather24LocationCompositionStateOwet_0(v137, 1, v138))
                      v12(v137, v11);
                    v139 = v131 + v132[8];
                    type metadata accessor for WeatherData.WeatherStatisticsState(0);
                    v140 = swift_getEnumCaseMultiPayload(v139);
                    if (v140 == 1)
                    {
                      v153 = type metadata accessor for WeatherStatisticsModel(0);
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v153 - 8) + 8))(v139, v153);
                    }
                    else if (!v140)
                    {
                      swift_bridgeObjectRelease();
                    }
                    v154 = v131 + v132[9];
                    v155 = type metadata accessor for WeatherDataOverrides(0);
                    if (!_s7Weather24LocationCompositionStateOwet_0(v154, 1, v155))
                    {
                      if (!_s7Weather24LocationCompositionStateOwet_0(v154, 1, v11))
                        v12(v154, v11);
                      v156 = v154 + *(int *)(v155 + 20);
                      if (!_s7Weather24LocationCompositionStateOwet_0(v156, 1, v11))
                        v12(v156, v11);
                    }
                  }
                  swift_bridgeObjectRelease();
                  v102 = v83 + v130[8];
                  v104 = type metadata accessor for WeatherMapOverlayKind(0);
LABEL_148:
                  v93 = v104;
                  v91 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 8);
                  v92 = v102;
LABEL_149:
                  v91(v92, v93);
                }
                else if (!v105)
                {
                  swift_bridgeObjectRelease();
LABEL_102:
                  swift_bridgeObjectRelease();
                }
                break;
              default:
                return;
            }
          }
          break;
        case 5u:
          if (*(_QWORD *)(v75 + 24))
          {
            sub_1000D31B4(*(_QWORD *)v75, *(_QWORD *)(v75 + 8), *(_BYTE *)(v75 + 16));
            swift_bridgeObjectRelease();
          }
          sub_1002387C0(*(_QWORD *)(v75 + 32), *(_QWORD *)(v75 + 40), *(_QWORD *)(v75 + 48), *(_QWORD *)(v75 + 56), *(_QWORD *)(v75 + 64), *(_QWORD *)(v75 + 72), *(_QWORD *)(v75 + 80), *(unsigned __int8 *)(v75 + 88), *(_BYTE *)(v75 + 89));
          goto LABEL_79;
        case 6u:
          v85 = type metadata accessor for PrecipitationTotalPlatterViewModel(0);
          goto LABEL_73;
        case 7u:
          type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
          v90 = swift_getEnumCaseMultiPayload(v75);
          if (v90 == 1)
          {
            v176 = v12;
            swift_bridgeObjectRelease();
            v118 = type metadata accessor for ConditionDetailMapViewModel(0);
            v181(v75 + *(int *)(v118 + 20), v20);
            v168 = v118;
            v119 = v75 + *(int *)(v118 + 24);
            v120 = type metadata accessor for WeatherData(0);
            v172 = v119;
            v121 = v119;
            v122 = (int *)v120;
            if (!_s7Weather24LocationCompositionStateOwet_0(v121, 1, v120))
            {
              swift_bridgeObjectRelease();
              v164 = v122;
              v123 = v172 + v122[5];
              v124 = type metadata accessor for Locale(0);
              if (!_s7Weather24LocationCompositionStateOwet_0(v123, 1, v124))
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v124 - 8) + 8))(v123, v124);
              v158 = v172 + v164[6];
              v125 = type metadata accessor for WeatherDataModel(0);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v125 - 8) + 8))(v158, v125);
              v126 = v172 + v164[7];
              v127 = sub_1000BA294(&qword_100BC3348);
              if (!_s7Weather24LocationCompositionStateOwet_0(v126, 1, v127))
                v176(v126, v11);
              v128 = v172 + v164[8];
              type metadata accessor for WeatherData.WeatherStatisticsState(0);
              v129 = swift_getEnumCaseMultiPayload(v128);
              if (v129 == 1)
              {
                v147 = type metadata accessor for WeatherStatisticsModel(0);
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v147 - 8) + 8))(v128, v147);
              }
              else if (!v129)
              {
                swift_bridgeObjectRelease();
              }
              v148 = v172 + v164[9];
              v149 = type metadata accessor for WeatherDataOverrides(0);
              if (!_s7Weather24LocationCompositionStateOwet_0(v148, 1, v149))
              {
                if (!_s7Weather24LocationCompositionStateOwet_0(v148, 1, v11))
                  v176(v148, v11);
                v150 = v148 + *(int *)(v149 + 20);
                if (!_s7Weather24LocationCompositionStateOwet_0(v150, 1, v11))
                  v176(v150, v11);
              }
            }
            swift_bridgeObjectRelease();
            v151 = v75 + *(int *)(v168 + 32);
            v152 = type metadata accessor for WeatherMapOverlayKind(0);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v152 - 8) + 8))(v151, v152);
            v12 = v176;
          }
          else if (!v90)
          {
            swift_bridgeObjectRelease();
LABEL_78:
            swift_bridgeObjectRelease();
          }
          goto LABEL_79;
        default:
          goto LABEL_79;
      }
    }
  }
  else if (!EnumCaseMultiPayload)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = (int *)_s11NormalModelVMa(0);
    v10 = v7 + v9[7];
    v11 = type metadata accessor for Date(0);
    v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
    v12(v10, v11);
    v12(v7 + v9[8], v11);
    v12(v7 + v9[9], v11);
    v13 = v7 + v9[10];
    v14 = type metadata accessor for TimeZone(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
    v15 = v7 + v9[11];
    v16 = type metadata accessor for AttributedString(0);
    v182 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
    v182(v15, v16);
    swift_bridgeObjectRelease();
    v17 = v7 + v9[13];
    swift_bridgeObjectRelease();
    v18 = (int *)_s14ChartViewModelVMa(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v17 + v18[5], v6);
    v19 = v17 + v18[6];
    v20 = type metadata accessor for Location(0);
    v21 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8);
    v21(v19, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 = swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t, __n128))v12)(v17 + v18[11], v11, v22);
    v23 = swift_bridgeObjectRelease();
    v181 = v21;
    ((void (*)(uint64_t, uint64_t, __n128))v21)(v7 + v9[14], v20, v23);
    v24 = v7 + v9[15];
    v25 = type metadata accessor for SunEvents(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
    swift_bridgeObjectRelease();
    v26 = v7 + v9[18];
    v27 = type metadata accessor for DetailComponentContainerViewModel(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v26, 1, v27))
    {
      v28 = v12;
      if (*(_QWORD *)(v26 + 8))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v29 = v26 + *(int *)(v27 + 20);
      type metadata accessor for NewsArticleComponentViewModel(0);
      if (swift_getEnumCaseMultiPayload(v29) == 1)
      {
        v177 = v16;
        v30 = v27;
        swift_bridgeObjectRelease();
        v31 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
        v32 = v29 + v31[5];
        v33 = type metadata accessor for URL(0);
        if (!_s7Weather24LocationCompositionStateOwet_0(v32, 1, v33))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
        v34 = swift_bridgeObjectRelease();
        v35 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v33 - 8) + 8);
        v35(v29 + v31[7], v33, v34);
        v36 = v29 + v31[8];
        v27 = v30;
        v16 = v177;
        if (!_s7Weather24LocationCompositionStateOwet_0(v36, 1, v33))
          ((void (*)(uint64_t, uint64_t))v35)(v36, v33);
      }
      v37 = v26 + *(int *)(v27 + 24);
      v38 = type metadata accessor for DetailComponentAction(0);
      v12 = v28;
      if (!_s7Weather24LocationCompositionStateOwet_0(v37, 1, v38))
      {
        v39 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v37, v39);
      }
    }
    v40 = v7 + *(int *)(sub_1000BA294(&qword_100BF1898) + 48);
    v41 = (int *)type metadata accessor for ConditionDetailPlatterViewModel(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v40, 1, (uint64_t)v41))
    {
      v178 = v27;
      sub_10006BD8C(*(_QWORD *)v40, *(_QWORD *)(v40 + 8), *(_BYTE *)(v40 + 16));
      swift_bridgeObjectRelease();
      v42 = v40 + v41[6];
      v43 = type metadata accessor for WeatherDescription(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v42, 1, v43))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v42, v43);
      v44 = v40 + v41[7];
      v45 = type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
      switch(swift_getEnumCaseMultiPayload(v44))
      {
        case 0u:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v44, v43);
          goto LABEL_56;
        case 1u:
          goto LABEL_55;
        case 2u:
          v182(v44, v16);
          goto LABEL_56;
        case 3u:
          v77 = sub_1000BA294(&qword_100BD30F8);
          goto LABEL_50;
        case 4u:
          v173 = v12;
          if (*(_QWORD *)(v44 + 8))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v78 = v44 + *(int *)(v178 + 20);
          type metadata accessor for NewsArticleComponentViewModel(0);
          if (swift_getEnumCaseMultiPayload(v78) == 1)
          {
            swift_bridgeObjectRelease();
            v169 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
            v159 = v78 + v169[5];
            v165 = type metadata accessor for URL(0);
            if (!_s7Weather24LocationCompositionStateOwet_0(v159, 1, v165))
              (*(void (**)(uint64_t))(*(_QWORD *)(v165 - 8) + 8))(v159);
            v79 = swift_bridgeObjectRelease();
            v160 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v165 - 8) + 8);
            v160(v78 + v169[7], v165, v79);
            v80 = v78 + v169[8];
            if (!_s7Weather24LocationCompositionStateOwet_0(v80, 1, v165))
              ((void (*)(uint64_t, uint64_t))v160)(v80, v165);
          }
          v44 += *(int *)(v178 + 24);
          v81 = type metadata accessor for DetailComponentAction(0);
          v12 = v173;
          if (_s7Weather24LocationCompositionStateOwet_0(v44, 1, v81))
            goto LABEL_56;
          v77 = type metadata accessor for URL(0);
LABEL_50:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 8))(v44, v77);
LABEL_56:
          v83 = v40 + v41[8];
          v84 = v178;
          if (!_s7Weather24LocationCompositionStateOwet_0(v83, 1, v45))
          {
            switch(swift_getEnumCaseMultiPayload(v83))
            {
              case 0u:
                goto LABEL_82;
              case 1u:
                goto LABEL_102;
              case 2u:
                goto LABEL_83;
              case 3u:
                goto LABEL_84;
              case 4u:
                goto LABEL_85;
              case 5u:
                goto LABEL_94;
              case 6u:
                goto LABEL_97;
              case 7u:
                goto LABEL_99;
              default:
                return;
            }
          }
          break;
        case 5u:
          if (*(_QWORD *)(v44 + 24))
          {
            sub_1000D31B4(*(_QWORD *)v44, *(_QWORD *)(v44 + 8), *(_BYTE *)(v44 + 16));
            swift_bridgeObjectRelease();
          }
          sub_1002387C0(*(_QWORD *)(v44 + 32), *(_QWORD *)(v44 + 40), *(_QWORD *)(v44 + 48), *(_QWORD *)(v44 + 56), *(_QWORD *)(v44 + 64), *(_QWORD *)(v44 + 72), *(_QWORD *)(v44 + 80), *(unsigned __int8 *)(v44 + 88), *(_BYTE *)(v44 + 89));
          goto LABEL_56;
        case 6u:
          v77 = type metadata accessor for PrecipitationTotalPlatterViewModel(0);
          goto LABEL_50;
        case 7u:
          type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
          v82 = swift_getEnumCaseMultiPayload(v44);
          if (v82 == 1)
          {
            v175 = v12;
            swift_bridgeObjectRelease();
            v106 = type metadata accessor for ConditionDetailMapViewModel(0);
            v181(v44 + *(int *)(v106 + 20), v20);
            v167 = v106;
            v107 = v44 + *(int *)(v106 + 24);
            v108 = type metadata accessor for WeatherData(0);
            v171 = v107;
            v109 = v107;
            v110 = (int *)v108;
            if (!_s7Weather24LocationCompositionStateOwet_0(v109, 1, v108))
            {
              swift_bridgeObjectRelease();
              v163 = v110;
              v111 = v171 + v110[5];
              v112 = type metadata accessor for Locale(0);
              if (!_s7Weather24LocationCompositionStateOwet_0(v111, 1, v112))
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 8))(v111, v112);
              v157 = v171 + v163[6];
              v113 = type metadata accessor for WeatherDataModel(0);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 8))(v157, v113);
              v114 = v171 + v163[7];
              v115 = sub_1000BA294(&qword_100BC3348);
              if (!_s7Weather24LocationCompositionStateOwet_0(v114, 1, v115))
                v175(v114, v11);
              v116 = v171 + v163[8];
              type metadata accessor for WeatherData.WeatherStatisticsState(0);
              v117 = swift_getEnumCaseMultiPayload(v116);
              if (v117 == 1)
              {
                v141 = type metadata accessor for WeatherStatisticsModel(0);
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v141 - 8) + 8))(v116, v141);
              }
              else if (!v117)
              {
                swift_bridgeObjectRelease();
              }
              v142 = v171 + v163[9];
              v143 = type metadata accessor for WeatherDataOverrides(0);
              if (!_s7Weather24LocationCompositionStateOwet_0(v142, 1, v143))
              {
                if (!_s7Weather24LocationCompositionStateOwet_0(v142, 1, v11))
                  v175(v142, v11);
                v144 = v142 + *(int *)(v143 + 20);
                if (!_s7Weather24LocationCompositionStateOwet_0(v144, 1, v11))
                  v175(v144, v11);
              }
            }
            swift_bridgeObjectRelease();
            v145 = v44 + *(int *)(v167 + 32);
            v146 = type metadata accessor for WeatherMapOverlayKind(0);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v146 - 8) + 8))(v145, v146);
            v12 = v175;
          }
          else if (!v82)
          {
            swift_bridgeObjectRelease();
LABEL_55:
            swift_bridgeObjectRelease();
          }
          goto LABEL_56;
        default:
          goto LABEL_56;
      }
    }
  }
}

uint64_t sub_100753FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  int EnumCaseMultiPayload;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t, __n128);
  __n128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  int *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  __n128 v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  __n128 v57;
  _QWORD *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  __n128 v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t, __n128);
  __n128 v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  char *v95;
  int *v96;
  uint64_t v97;
  char *v98;
  void (*v99)(char *, char *, uint64_t, __n128);
  __n128 v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  void (*v105)(char *, char *, uint64_t);
  uint64_t v106;
  _QWORD *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  _QWORD *v113;
  __n128 v114;
  _QWORD *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  __n128 v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  int *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  int *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  void (*v161)(char *, char *, uint64_t, __n128);
  __n128 v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  void (*v174)(char *, char *, uint64_t, __n128);
  __n128 v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned __int8 v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  const void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned __int8 v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  const void *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  void (*v235)(char *, char *, uint64_t, __n128);
  void (*v236)(char *, char *, uint64_t, __n128);
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  void (*v243)(char *, char *, uint64_t, __n128);
  _QWORD *v244;
  _QWORD *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  char *v250;
  _QWORD *v251;
  _QWORD *v252;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a2 + v7 + 8);
  *v8 = *(_QWORD *)(a2 + v7);
  v8[1] = v10;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v11 = *(int *)(sub_1000BA294(&qword_100C02ED0) + 32);
  v12 = (char *)v8 + v11;
  v13 = (const void *)(v9 + v11);
  v248 = type metadata accessor for DetailChartDataElement(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v248))
  {
    v14 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v248 - 8) + 16))(v12, v13, v248);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v248);
  }
  v15 = *(int *)(v3 + 24);
  v16 = (_QWORD *)(v5 + v15);
  v17 = (_QWORD *)(v4 + v15);
  v18 = type metadata accessor for SunriseSunsetDetailViewModel(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17);
  if (EnumCaseMultiPayload == 1)
  {
    v247 = v18;
    v242 = v3;
    v239 = v4;
    v240 = v5;
    v73 = v17[1];
    *v16 = *v17;
    v16[1] = v73;
    v74 = v17[3];
    v16[2] = v17[2];
    v16[3] = v74;
    *((_BYTE *)v16 + 32) = *((_BYTE *)v17 + 32);
    v75 = (int *)_s10PolarModelVMa(0);
    v76 = v75[7];
    v77 = (char *)v16 + v76;
    v78 = (char *)v17 + v76;
    v79 = type metadata accessor for Date(0);
    v80 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v79 - 8) + 16);
    v236 = v80;
    v238 = v79;
    swift_bridgeObjectRetain();
    v81 = swift_bridgeObjectRetain();
    v80(v77, v78, v79, v81);
    v82 = v75[8];
    v83 = (char *)v16 + v82;
    v84 = (char *)v17 + v82;
    v85 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 16))(v83, v84, v85);
    v86 = v75[9];
    v87 = (char *)v16 + v86;
    v88 = (char *)v17 + v86;
    v232 = type metadata accessor for AttributedString(0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v232 - 8) + 16))(v87, v88);
    *(_QWORD *)((char *)v16 + v75[10]) = *(_QWORD *)((char *)v17 + v75[10]);
    v89 = v75[11];
    v90 = (_QWORD *)((char *)v16 + v89);
    v91 = (_QWORD *)((char *)v17 + v89);
    v92 = v91[1];
    *v90 = *v91;
    v90[1] = v92;
    v93 = v75[12];
    v252 = v16;
    v94 = (_QWORD *)((char *)v16 + v93);
    v95 = (char *)v17 + v93;
    *v94 = *(_QWORD *)((char *)v17 + v93);
    v96 = (int *)_s14ChartViewModelVMa(0);
    v97 = v96[5];
    v98 = (char *)v94 + v97;
    v234 = &v95[v97];
    v245 = v17;
    v99 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v248 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v100 = swift_bridgeObjectRetain();
    v99(v98, v234, v248, v100);
    v101 = v96[6];
    v102 = (char *)v94 + v101;
    v103 = &v95[v101];
    v104 = type metadata accessor for Location(0);
    v105 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 16);
    v105(v102, v103, v104);
    v106 = v96[7];
    v107 = (_QWORD *)((char *)v94 + v106);
    v108 = &v95[v106];
    v109 = *(_QWORD *)v108;
    v110 = *((_QWORD *)v108 + 1);
    *v107 = v109;
    v107[1] = v110;
    *(_QWORD *)((char *)v94 + v96[8]) = *(_QWORD *)&v95[v96[8]];
    *(_QWORD *)((char *)v94 + v96[9]) = *(_QWORD *)&v95[v96[9]];
    *(_QWORD *)((char *)v94 + v96[10]) = *(_QWORD *)&v95[v96[10]];
    v111 = v96[11];
    v250 = (char *)v94 + v111;
    v112 = &v95[v111];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v113 = v245;
    v114 = swift_bridgeObjectRetain();
    v236(v250, v112, v238, v114);
    *(_QWORD *)((char *)v94 + v96[12]) = *(_QWORD *)&v95[v96[12]];
    v115 = v252;
    v116 = v75[13];
    v117 = (char *)v252 + v116;
    v118 = (char *)v245 + v116;
    v119 = swift_bridgeObjectRetain();
    ((void (*)(char *, char *, uint64_t, __n128))v105)(v117, v118, v104, v119);
    *(_QWORD *)((char *)v252 + v75[15]) = *(_QWORD *)((char *)v245 + v75[15]);
    v120 = v75[16];
    v121 = (_QWORD *)((char *)v252 + v120);
    v122 = (_QWORD *)((char *)v245 + v120);
    v123 = type metadata accessor for DetailComponentContainerViewModel(0);
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v122, 1, v123))
    {
      v124 = sub_1000BA294(&qword_100BC68A0);
      memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
      v3 = v242;
      v125 = v247;
    }
    else
    {
      v128 = v122[1];
      if (v128)
      {
        *v121 = *v122;
        v121[1] = v128;
        v129 = v122[3];
        v121[2] = v122[2];
        v121[3] = v129;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v142 = *((_OWORD *)v122 + 1);
        *(_OWORD *)v121 = *(_OWORD *)v122;
        *((_OWORD *)v121 + 1) = v142;
      }
      v143 = *(int *)(v123 + 20);
      v144 = (_QWORD *)((char *)v121 + v143);
      v145 = (_QWORD *)((char *)v122 + v143);
      v146 = type metadata accessor for NewsArticleComponentViewModel(0);
      if (swift_getEnumCaseMultiPayload(v145) == 1)
      {
        v231 = v123;
        v147 = v145[1];
        *v144 = *v145;
        v144[1] = v147;
        v148 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
        v149 = v148[5];
        v150 = (char *)v144 + v149;
        v151 = (char *)v145 + v149;
        v152 = type metadata accessor for URL(0);
        swift_bridgeObjectRetain();
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v151, 1, v152))
        {
          v153 = sub_1000BA294(&qword_100BD4280);
          memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v152 - 8) + 16))(v150, v151, v152);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v150, 0, 1, v152);
        }
        v167 = v148[6];
        v168 = (_QWORD *)((char *)v144 + v167);
        v169 = (_QWORD *)((char *)v145 + v167);
        v170 = v169[1];
        *v168 = *v169;
        v168[1] = v170;
        v171 = v148[7];
        v172 = (char *)v144 + v171;
        v173 = (char *)v145 + v171;
        v174 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v152 - 8) + 16);
        v175 = swift_bridgeObjectRetain();
        v174(v172, v173, v152, v175);
        v176 = v148[8];
        v177 = (char *)v144 + v176;
        v178 = (char *)v145 + v176;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v145 + v176, 1, v152))
        {
          v179 = sub_1000BA294(&qword_100BD4280);
          memcpy(v177, v178, *(_QWORD *)(*(_QWORD *)(v179 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v174)(v177, v178, v152);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v177, 0, 1, v152);
        }
        v115 = v252;
        *((_BYTE *)v144 + v148[9]) = *((_BYTE *)v145 + v148[9]);
        swift_storeEnumTagMultiPayload(v144, v146, 1);
        v123 = v231;
        v113 = v245;
      }
      else
      {
        memcpy(v144, v145, *(_QWORD *)(*(_QWORD *)(v146 - 8) + 64));
      }
      v203 = *(int *)(v123 + 24);
      v204 = (char *)v121 + v203;
      v205 = (char *)v122 + v203;
      v206 = type metadata accessor for DetailComponentAction(0);
      v125 = v247;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v205, 1, v206))
      {
        v207 = sub_1000BA294(&qword_100BD3100);
        memcpy(v204, v205, *(_QWORD *)(*(_QWORD *)(v207 - 8) + 64));
      }
      else
      {
        v208 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v208 - 8) + 16))(v204, v205, v208);
        v209 = sub_1000BA294(&qword_100BC5FE8);
        v204[*(int *)(v209 + 48)] = v205[*(int *)(v209 + 48)];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v204, 0, 1, v206);
      }
      v3 = v242;
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v121, 0, 1, v123);
    }
    v210 = *(int *)(sub_1000BA294(&qword_100BF18A0) + 48);
    v211 = (_QWORD *)((char *)v115 + v210);
    v212 = (uint64_t)v113 + v210;
    v213 = type metadata accessor for ConditionDetailPlatterViewModel(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v212, 1, v213))
    {
      v215 = *(_QWORD *)v212;
      v216 = *(_QWORD *)(v212 + 8);
      v217 = *(_BYTE *)(v212 + 16);
      sub_1000B2044(*(_QWORD *)v212, v216, v217);
      *v211 = v215;
      v211[1] = v216;
      *((_BYTE *)v211 + 16) = v217;
      v218 = *(_QWORD *)(v212 + 32);
      v211[3] = *(_QWORD *)(v212 + 24);
      v211[4] = v218;
      v219 = *(int *)(v213 + 24);
      v220 = (char *)v211 + v219;
      v221 = (const void *)(v212 + v219);
      v222 = type metadata accessor for WeatherDescription(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v221, 1, v222))
      {
        v223 = sub_1000BA294(&qword_100BC3368);
        memcpy(v220, v221, *(_QWORD *)(*(_QWORD *)(v223 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v222 - 8) + 16))(v220, v221, v222);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v220, 0, 1, v222);
      }
      v224 = v212 + *(int *)(v213 + 28);
      type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
      v225 = (char *)&loc_100754EB0 + 4 * byte_1009C5CE8[swift_getEnumCaseMultiPayload(v224)];
      __asm { BR              X10 }
    }
    v214 = sub_1000BA294(&qword_100BC68B8);
    memcpy(v211, (const void *)v212, *(_QWORD *)(*(_QWORD *)(v214 - 8) + 64));
    v226 = v115;
    v227 = v125;
    v228 = 1;
    goto LABEL_55;
  }
  if (!EnumCaseMultiPayload)
  {
    v246 = v18;
    v241 = v3;
    v239 = v4;
    v240 = v5;
    v20 = v17[1];
    *v16 = *v17;
    v16[1] = v20;
    v21 = v17[3];
    v16[2] = v17[2];
    v16[3] = v21;
    v22 = v17[5];
    v16[4] = v17[4];
    v16[5] = v22;
    v23 = (int *)_s11NormalModelVMa(0);
    v24 = v23[7];
    v25 = (char *)v16 + v24;
    v26 = (char *)v17 + v24;
    v27 = type metadata accessor for Date(0);
    v28 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v27 - 8) + 16);
    v235 = v28;
    v237 = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29 = swift_bridgeObjectRetain();
    v28(v25, v26, v27, v29);
    ((void (*)(char *, char *, uint64_t))v28)((char *)v16 + v23[8], (char *)v17 + v23[8], v27);
    ((void (*)(char *, char *, uint64_t))v28)((char *)v16 + v23[9], (char *)v17 + v23[9], v27);
    v30 = v23[10];
    v31 = (char *)v16 + v30;
    v32 = (char *)v17 + v30;
    v33 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
    v34 = v23[11];
    v35 = (char *)v16 + v34;
    v36 = (char *)v17 + v34;
    v233 = type metadata accessor for AttributedString(0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v233 - 8) + 16))(v35, v36);
    *(_QWORD *)((char *)v16 + v23[12]) = *(_QWORD *)((char *)v17 + v23[12]);
    v37 = v23[13];
    v251 = v16;
    v38 = (_QWORD *)((char *)v16 + v37);
    v39 = (char *)v17 + v37;
    *v38 = *(_QWORD *)((char *)v17 + v37);
    v40 = (int *)_s14ChartViewModelVMa(0);
    v41 = v40[5];
    v42 = (char *)v38 + v41;
    v43 = &v39[v41];
    v243 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v248 - 8) + 16);
    swift_bridgeObjectRetain();
    v44 = swift_bridgeObjectRetain();
    v243(v42, v43, v248, v44);
    v45 = v40[6];
    v46 = (char *)v38 + v45;
    v47 = &v39[v45];
    v48 = type metadata accessor for Location(0);
    v49 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16);
    v49(v46, v47, v48);
    v50 = v40[7];
    v51 = (_QWORD *)((char *)v38 + v50);
    v52 = &v39[v50];
    v53 = *(_QWORD *)v52;
    v54 = *((_QWORD *)v52 + 1);
    *v51 = v53;
    v51[1] = v54;
    *(_QWORD *)((char *)v38 + v40[8]) = *(_QWORD *)&v39[v40[8]];
    *(_QWORD *)((char *)v38 + v40[9]) = *(_QWORD *)&v39[v40[9]];
    v244 = v17;
    *(_QWORD *)((char *)v38 + v40[10]) = *(_QWORD *)&v39[v40[10]];
    v55 = v40[11];
    v249 = (char *)v38 + v55;
    v56 = &v39[v55];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v57 = swift_bridgeObjectRetain();
    v235(v249, v56, v237, v57);
    *(_QWORD *)((char *)v38 + v40[12]) = *(_QWORD *)&v39[v40[12]];
    v58 = v251;
    v59 = v23[14];
    v60 = (char *)v251 + v59;
    v61 = (char *)v17 + v59;
    v62 = swift_bridgeObjectRetain();
    ((void (*)(char *, char *, uint64_t, __n128))v49)(v60, v61, v48, v62);
    v63 = v23[15];
    v64 = (char *)v251 + v63;
    v65 = (char *)v17 + v63;
    v66 = type metadata accessor for SunEvents(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v64, v65, v66);
    *(_QWORD *)((char *)v251 + v23[16]) = *(_QWORD *)((char *)v17 + v23[16]);
    v67 = v23[18];
    v68 = (_QWORD *)((char *)v251 + v67);
    v69 = (_QWORD *)((char *)v17 + v67);
    v70 = type metadata accessor for DetailComponentContainerViewModel(0);
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v69, 1, v70))
    {
      v71 = sub_1000BA294(&qword_100BC68A0);
      memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
      v3 = v241;
      v72 = v246;
    }
    else
    {
      v126 = v69[1];
      if (v126)
      {
        *v68 = *v69;
        v68[1] = v126;
        v127 = v69[3];
        v68[2] = v69[2];
        v68[3] = v127;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v130 = *((_OWORD *)v69 + 1);
        *(_OWORD *)v68 = *(_OWORD *)v69;
        *((_OWORD *)v68 + 1) = v130;
      }
      v131 = *(int *)(v70 + 20);
      v132 = (_QWORD *)((char *)v68 + v131);
      v133 = (_QWORD *)((char *)v69 + v131);
      v134 = type metadata accessor for NewsArticleComponentViewModel(0);
      if (swift_getEnumCaseMultiPayload(v133) == 1)
      {
        v230 = v134;
        v135 = v133[1];
        *v132 = *v133;
        v132[1] = v135;
        v136 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
        v137 = v136[5];
        v138 = (char *)v132 + v137;
        v139 = (char *)v133 + v137;
        v140 = type metadata accessor for URL(0);
        swift_bridgeObjectRetain();
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v139, 1, v140))
        {
          v141 = sub_1000BA294(&qword_100BD4280);
          memcpy(v138, v139, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v140 - 8) + 16))(v138, v139, v140);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v138, 0, 1, v140);
        }
        v154 = v136[6];
        v155 = (_QWORD *)((char *)v132 + v154);
        v156 = (_QWORD *)((char *)v133 + v154);
        v157 = v156[1];
        *v155 = *v156;
        v155[1] = v157;
        v158 = v136[7];
        v159 = (char *)v132 + v158;
        v160 = (char *)v133 + v158;
        v161 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v140 - 8) + 16);
        v162 = swift_bridgeObjectRetain();
        v161(v159, v160, v140, v162);
        v163 = v136[8];
        v164 = (char *)v132 + v163;
        v165 = (char *)v133 + v163;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v133 + v163, 1, v140))
        {
          v166 = sub_1000BA294(&qword_100BD4280);
          memcpy(v164, v165, *(_QWORD *)(*(_QWORD *)(v166 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v161)(v164, v165, v140);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v164, 0, 1, v140);
        }
        v58 = v251;
        *((_BYTE *)v132 + v136[9]) = *((_BYTE *)v133 + v136[9]);
        swift_storeEnumTagMultiPayload(v132, v230, 1);
        v17 = v244;
        v72 = v246;
      }
      else
      {
        memcpy(v132, v133, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
        v72 = v246;
      }
      v180 = *(int *)(v70 + 24);
      v181 = (char *)v68 + v180;
      v182 = (char *)v69 + v180;
      v183 = type metadata accessor for DetailComponentAction(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v182, 1, v183))
      {
        v184 = sub_1000BA294(&qword_100BD3100);
        memcpy(v181, v182, *(_QWORD *)(*(_QWORD *)(v184 - 8) + 64));
      }
      else
      {
        v185 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v185 - 8) + 16))(v181, v182, v185);
        v186 = sub_1000BA294(&qword_100BC5FE8);
        v181[*(int *)(v186 + 48)] = v182[*(int *)(v186 + 48)];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v181, 0, 1, v183);
      }
      v3 = v241;
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v68, 0, 1, v70);
    }
    v187 = *(int *)(sub_1000BA294(&qword_100BF1898) + 48);
    v188 = (_QWORD *)((char *)v58 + v187);
    v189 = (uint64_t)v17 + v187;
    v190 = type metadata accessor for ConditionDetailPlatterViewModel(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v189, 1, v190))
    {
      v192 = *(_QWORD *)v189;
      v193 = *(_QWORD *)(v189 + 8);
      v194 = *(_BYTE *)(v189 + 16);
      sub_1000B2044(*(_QWORD *)v189, v193, v194);
      *v188 = v192;
      v188[1] = v193;
      *((_BYTE *)v188 + 16) = v194;
      v195 = *(_QWORD *)(v189 + 32);
      v188[3] = *(_QWORD *)(v189 + 24);
      v188[4] = v195;
      v196 = *(int *)(v190 + 24);
      v197 = (char *)v188 + v196;
      v198 = (const void *)(v189 + v196);
      v199 = type metadata accessor for WeatherDescription(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v198, 1, v199))
      {
        v200 = sub_1000BA294(&qword_100BC3368);
        memcpy(v197, v198, *(_QWORD *)(*(_QWORD *)(v200 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v199 - 8) + 16))(v197, v198, v199);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v197, 0, 1, v199);
      }
      v201 = v189 + *(int *)(v190 + 28);
      type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
      v202 = (char *)&loc_100754C2C + 4 * byte_1009C5CF8[swift_getEnumCaseMultiPayload(v201)];
      __asm { BR              X10 }
    }
    v191 = sub_1000BA294(&qword_100BC68B8);
    memcpy(v188, (const void *)v189, *(_QWORD *)(*(_QWORD *)(v191 - 8) + 64));
    v226 = v58;
    v227 = v72;
    v228 = 0;
LABEL_55:
    swift_storeEnumTagMultiPayload(v226, v227, v228);
    v5 = v240;
    v4 = v239;
    goto LABEL_56;
  }
  memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
LABEL_56:
  *(_BYTE *)(v5 + *(int *)(v3 + 28)) = *(_BYTE *)(v4 + *(int *)(v3 + 28));
  return v5;
}

_QWORD *sub_1007573A4(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int EnumCaseMultiPayload;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t, __n128);
  __n128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  void (*v44)(char *, char *, uint64_t, __n128);
  __n128 v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  __n128 v56;
  uint64_t v57;
  char *v58;
  char *v59;
  __n128 v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  void (*v77)(char *, char *, uint64_t, __n128);
  __n128 v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  int *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  __n128 v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  void (*v101)(char *, char *, uint64_t);
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  _QWORD *v107;
  __n128 v108;
  uint64_t v109;
  char *v110;
  char *v111;
  __n128 v112;
  char *v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  void (*v145)(char *, char *, uint64_t, __n128);
  __n128 v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  char *v155;
  char *v156;
  void (*v157)(char *, char *, uint64_t, __n128);
  __n128 v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned __int8 v177;
  uint64_t v178;
  char *v179;
  const void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned __int8 v199;
  uint64_t v200;
  char *v201;
  const void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  char *__dst;
  uint64_t v212;
  uint64_t v213;
  int *v214;
  int *v215;
  _QWORD *v216;
  _QWORD *v217;
  char *v218;
  void (*v219)(char *, char *, uint64_t, __n128);
  char *v220;
  void (*v221)(char *, char *, uint64_t, __n128);
  void (*v222)(char *, char *, uint64_t, __n128);
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  _QWORD *v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  int *v230;
  int *v231;
  _QWORD *v232;
  _QWORD *v233;
  _QWORD *v234;
  _QWORD *v235;

  v4 = a2;
  v5 = a1;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v5[1] = v4[1];
  swift_retain();
  swift_release();
  v6 = *((_OWORD *)v4 + 1);
  *((_BYTE *)v5 + 32) = *((_BYTE *)v4 + 32);
  *((_OWORD *)v5 + 1) = v6;
  v7 = a3[5];
  v8 = (char *)v5 + v7;
  v9 = (char *)v4 + v7;
  *(_QWORD *)((char *)v5 + v7) = *(_QWORD *)((char *)v4 + v7);
  swift_retain();
  swift_release();
  *((_QWORD *)v8 + 1) = *((_QWORD *)v9 + 1);
  swift_retain();
  swift_release();
  v10 = *(int *)(sub_1000BA294(&qword_100C02ED0) + 32);
  v11 = &v8[v10];
  v12 = &v9[v10];
  v13 = type metadata accessor for DetailChartDataElement(0);
  v14 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v13);
  v15 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v13);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v16 = *(_QWORD *)(v13 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v13);
LABEL_6:
    v17 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v11, v12, v13);
LABEL_7:
  if (v5 != v4)
  {
    v18 = a3[6];
    v19 = (_QWORD *)((char *)v5 + v18);
    v20 = (_QWORD *)((char *)v4 + v18);
    sub_1000215BC((uint64_t)v5 + v18, type metadata accessor for SunriseSunsetDetailViewModel);
    v21 = type metadata accessor for SunriseSunsetDetailViewModel(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v20);
    if (EnumCaseMultiPayload == 1)
    {
      v229 = v21;
      v231 = a3;
      v225 = v5;
      v227 = v4;
      *v19 = *v20;
      v19[1] = v20[1];
      v19[2] = v20[2];
      v235 = v20;
      v19[3] = v20[3];
      *((_BYTE *)v19 + 32) = *((_BYTE *)v20 + 32);
      v72 = (int *)_s10PolarModelVMa(0);
      v73 = v72[7];
      v74 = (char *)v19 + v73;
      v75 = (char *)v20 + v73;
      v76 = type metadata accessor for Date(0);
      v77 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v76 - 8) + 16);
      v222 = v77;
      v224 = v76;
      swift_bridgeObjectRetain();
      v78 = swift_bridgeObjectRetain();
      v77(v74, v75, v76, v78);
      v79 = v72[8];
      v80 = (char *)v19 + v79;
      v81 = (char *)v20 + v79;
      v82 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 16))(v80, v81, v82);
      v83 = v72[9];
      v84 = (char *)v19 + v83;
      v85 = (char *)v235 + v83;
      v217 = (_QWORD *)type metadata accessor for AttributedString(0);
      (*(void (**)(char *, char *))(*(v217 - 1) + 16))(v84, v85);
      *(_QWORD *)((char *)v19 + v72[10]) = *(_QWORD *)((char *)v235 + v72[10]);
      v86 = v72[11];
      v87 = (_QWORD *)((char *)v19 + v86);
      v88 = (_QWORD *)((char *)v235 + v86);
      *v87 = *v88;
      v87[1] = v88[1];
      v89 = v72[12];
      v90 = (char *)v19 + v89;
      v91 = (char *)v235 + v89;
      *(_QWORD *)((char *)v19 + v89) = *(_QWORD *)((char *)v235 + v89);
      v92 = (int *)_s14ChartViewModelVMa(0);
      v93 = v92[5];
      v94 = &v90[v93];
      v233 = v19;
      v95 = &v91[v93];
      v219 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v13 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v96 = swift_bridgeObjectRetain();
      v219(v94, v95, v13, v96);
      v97 = v92[6];
      v98 = &v90[v97];
      v99 = &v91[v97];
      v100 = type metadata accessor for Location(0);
      v101 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 16);
      v101(v98, v99, v100);
      v102 = v92[7];
      v103 = &v90[v102];
      v104 = &v91[v102];
      *(_QWORD *)v103 = *(_QWORD *)v104;
      *((_QWORD *)v103 + 1) = *((_QWORD *)v104 + 1);
      *(_QWORD *)&v90[v92[8]] = *(_QWORD *)&v91[v92[8]];
      *(_QWORD *)&v90[v92[9]] = *(_QWORD *)&v91[v92[9]];
      *(_QWORD *)&v90[v92[10]] = *(_QWORD *)&v91[v92[10]];
      v105 = v92[11];
      v220 = &v90[v105];
      v106 = &v91[v105];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v107 = v233;
      swift_bridgeObjectRetain();
      v108 = swift_bridgeObjectRetain();
      v222(v220, v106, v224, v108);
      *(_QWORD *)&v90[v92[12]] = *(_QWORD *)&v91[v92[12]];
      v109 = v72[13];
      v110 = (char *)v233 + v109;
      v111 = (char *)v235 + v109;
      v112 = swift_bridgeObjectRetain();
      v113 = v111;
      v114 = v235;
      ((void (*)(char *, char *, uint64_t, __n128))v101)(v110, v113, v100, v112);
      *(_QWORD *)((char *)v233 + v72[15]) = *(_QWORD *)((char *)v235 + v72[15]);
      v115 = v72[16];
      v116 = (_QWORD *)((char *)v233 + v115);
      v117 = (_QWORD *)((char *)v235 + v115);
      v118 = type metadata accessor for DetailComponentContainerViewModel(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v117, 1, v118))
      {
        v119 = sub_1000BA294(&qword_100BC68A0);
        memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
        v4 = v227;
        a3 = v231;
      }
      else
      {
        if (v117[1])
        {
          *v116 = *v117;
          v116[1] = v117[1];
          v116[2] = v117[2];
          v116[3] = v117[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v130 = *((_OWORD *)v117 + 1);
          *(_OWORD *)v116 = *(_OWORD *)v117;
          *((_OWORD *)v116 + 1) = v130;
        }
        v131 = *(int *)(v118 + 20);
        v132 = (_QWORD *)((char *)v116 + v131);
        v133 = (_QWORD *)((char *)v117 + v131);
        v134 = type metadata accessor for NewsArticleComponentViewModel(0);
        if (swift_getEnumCaseMultiPayload(v133) == 1)
        {
          *v132 = *v133;
          v132[1] = v133[1];
          v215 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
          v135 = v215[5];
          __dst = (char *)v132 + v135;
          v136 = (char *)v133 + v135;
          v137 = type metadata accessor for URL(0);
          swift_bridgeObjectRetain();
          v213 = v134;
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v136, 1, v137))
          {
            v138 = sub_1000BA294(&qword_100BD4280);
            memcpy(__dst, v136, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v137 - 8) + 16))(__dst, v136, v137);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v137);
          }
          v151 = v215[6];
          v152 = (_QWORD *)((char *)v132 + v151);
          v153 = (_QWORD *)((char *)v133 + v151);
          *v152 = *v153;
          v152[1] = v153[1];
          v154 = v215[7];
          v155 = (char *)v132 + v154;
          v156 = (char *)v133 + v154;
          v157 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v137 - 8) + 16);
          v158 = swift_bridgeObjectRetain();
          v157(v155, v156, v137, v158);
          v159 = v215[8];
          v160 = (char *)v132 + v159;
          v161 = (char *)v133 + v159;
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v133 + v159, 1, v137))
          {
            v162 = sub_1000BA294(&qword_100BD4280);
            memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
          }
          else
          {
            ((void (*)(char *, char *, uint64_t))v157)(v160, v161, v137);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v160, 0, 1, v137);
          }
          v107 = v233;
          *((_BYTE *)v132 + v215[9]) = *((_BYTE *)v133 + v215[9]);
          swift_storeEnumTagMultiPayload(v132, v213, 1);
        }
        else
        {
          memcpy(v132, v133, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
        }
        v185 = *(int *)(v118 + 24);
        v186 = (char *)v116 + v185;
        v187 = (char *)v117 + v185;
        v188 = type metadata accessor for DetailComponentAction(0);
        a3 = v231;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v187, 1, v188))
        {
          v189 = sub_1000BA294(&qword_100BD3100);
          memcpy(v186, v187, *(_QWORD *)(*(_QWORD *)(v189 - 8) + 64));
        }
        else
        {
          v190 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v190 - 8) + 16))(v186, v187, v190);
          v191 = sub_1000BA294(&qword_100BC5FE8);
          v186[*(int *)(v191 + 48)] = v187[*(int *)(v191 + 48)];
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v186, 0, 1, v188);
        }
        v4 = v227;
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v116, 0, 1, v118);
        v114 = v235;
      }
      v192 = *(int *)(sub_1000BA294(&qword_100BF18A0) + 48);
      v193 = (_QWORD *)((char *)v107 + v192);
      v194 = (uint64_t)v114 + v192;
      v195 = type metadata accessor for ConditionDetailPlatterViewModel(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v194, 1, v195))
      {
        v197 = *(_QWORD *)v194;
        v198 = *(_QWORD *)(v194 + 8);
        v199 = *(_BYTE *)(v194 + 16);
        sub_1000B2044(*(_QWORD *)v194, v198, v199);
        *v193 = v197;
        v193[1] = v198;
        *((_BYTE *)v193 + 16) = v199;
        v193[3] = *(_QWORD *)(v194 + 24);
        v193[4] = *(_QWORD *)(v194 + 32);
        v200 = *(int *)(v195 + 24);
        v201 = (char *)v193 + v200;
        v202 = (const void *)(v194 + v200);
        v203 = type metadata accessor for WeatherDescription(0);
        swift_bridgeObjectRetain();
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v202, 1, v203))
        {
          v204 = sub_1000BA294(&qword_100BC3368);
          memcpy(v201, v202, *(_QWORD *)(*(_QWORD *)(v204 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v203 - 8) + 16))(v201, v202, v203);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v201, 0, 1, v203);
        }
        v205 = v194 + *(int *)(v195 + 28);
        type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
        v206 = (char *)&loc_1007583EC + 4 * byte_1009C5D08[swift_getEnumCaseMultiPayload(v205)];
        __asm { BR              X10 }
      }
      v196 = sub_1000BA294(&qword_100BC68B8);
      memcpy(v193, (const void *)v194, *(_QWORD *)(*(_QWORD *)(v196 - 8) + 64));
      v207 = v107;
      v208 = v229;
      v209 = 1;
      goto LABEL_60;
    }
    if (!EnumCaseMultiPayload)
    {
      v228 = v21;
      v230 = a3;
      v225 = v5;
      v226 = v4;
      *v19 = *v20;
      v234 = v20;
      v19[1] = v20[1];
      v19[2] = v20[2];
      v19[3] = v20[3];
      v19[4] = v20[4];
      v19[5] = v20[5];
      v23 = (int *)_s11NormalModelVMa(0);
      v24 = v23[7];
      v25 = (char *)v19 + v24;
      v26 = (char *)v20 + v24;
      v27 = type metadata accessor for Date(0);
      v28 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v27 - 8) + 16);
      v221 = v28;
      v223 = v27;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v29 = swift_bridgeObjectRetain();
      v28(v25, v26, v27, v29);
      ((void (*)(char *, char *, uint64_t))v28)((char *)v19 + v23[8], (char *)v20 + v23[8], v27);
      ((void (*)(char *, char *, uint64_t))v28)((char *)v19 + v23[9], (char *)v20 + v23[9], v27);
      v30 = v23[10];
      v31 = (char *)v19 + v30;
      v32 = (char *)v20 + v30;
      v33 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
      v34 = v23[11];
      v35 = (char *)v19 + v34;
      v36 = (char *)v234 + v34;
      v216 = (_QWORD *)type metadata accessor for AttributedString(0);
      (*(void (**)(char *, char *))(*(v216 - 1) + 16))(v35, v36);
      *(_QWORD *)((char *)v19 + v23[12]) = *(_QWORD *)((char *)v234 + v23[12]);
      v37 = v23[13];
      v38 = (char *)v19 + v37;
      v39 = (char *)v234 + v37;
      *(_QWORD *)((char *)v19 + v37) = *(_QWORD *)((char *)v234 + v37);
      v40 = (int *)_s14ChartViewModelVMa(0);
      v41 = v40[5];
      v42 = &v38[v41];
      v43 = &v39[v41];
      v232 = v19;
      v44 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v13 - 8) + 16);
      swift_bridgeObjectRetain();
      v45 = swift_bridgeObjectRetain();
      v44(v42, v43, v13, v45);
      v46 = v40[6];
      v47 = &v38[v46];
      v48 = &v39[v46];
      v49 = type metadata accessor for Location(0);
      v50 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
      v50(v47, v48, v49);
      v51 = v40[7];
      v52 = &v38[v51];
      v53 = &v39[v51];
      *(_QWORD *)v52 = *(_QWORD *)v53;
      *((_QWORD *)v52 + 1) = *((_QWORD *)v53 + 1);
      *(_QWORD *)&v38[v40[8]] = *(_QWORD *)&v39[v40[8]];
      *(_QWORD *)&v38[v40[9]] = *(_QWORD *)&v39[v40[9]];
      *(_QWORD *)&v38[v40[10]] = *(_QWORD *)&v39[v40[10]];
      v54 = v40[11];
      v218 = &v38[v54];
      v55 = &v39[v54];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v56 = swift_bridgeObjectRetain();
      v221(v218, v55, v223, v56);
      *(_QWORD *)&v38[v40[12]] = *(_QWORD *)&v39[v40[12]];
      v57 = v23[14];
      v58 = (char *)v232 + v57;
      v59 = (char *)v234 + v57;
      v60 = swift_bridgeObjectRetain();
      ((void (*)(char *, char *, uint64_t, __n128))v50)(v58, v59, v49, v60);
      v61 = v23[15];
      v62 = (char *)v232 + v61;
      v63 = (char *)v234 + v61;
      v64 = type metadata accessor for SunEvents(0);
      v65 = v63;
      v66 = v234;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v62, v65, v64);
      *(_QWORD *)((char *)v232 + v23[16]) = *(_QWORD *)((char *)v234 + v23[16]);
      v67 = v23[18];
      v68 = (_QWORD *)((char *)v232 + v67);
      v69 = (_QWORD *)((char *)v234 + v67);
      v70 = type metadata accessor for DetailComponentContainerViewModel(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v69, 1, v70))
      {
        v71 = sub_1000BA294(&qword_100BC68A0);
        memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
        v4 = v226;
        a3 = v230;
      }
      else
      {
        if (v69[1])
        {
          *v68 = *v69;
          v68[1] = v69[1];
          v68[2] = v69[2];
          v68[3] = v69[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v120 = *((_OWORD *)v69 + 1);
          *(_OWORD *)v68 = *(_OWORD *)v69;
          *((_OWORD *)v68 + 1) = v120;
        }
        v121 = *(int *)(v70 + 20);
        v122 = (_QWORD *)((char *)v68 + v121);
        v123 = (_QWORD *)((char *)v69 + v121);
        v124 = type metadata accessor for NewsArticleComponentViewModel(0);
        if (swift_getEnumCaseMultiPayload(v123) == 1)
        {
          *v122 = *v123;
          v122[1] = v123[1];
          v214 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
          v125 = v214[5];
          v126 = (char *)v122 + v125;
          v127 = (char *)v123 + v125;
          v128 = type metadata accessor for URL(0);
          swift_bridgeObjectRetain();
          v212 = v124;
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v127, 1, v128))
          {
            v129 = sub_1000BA294(&qword_100BD4280);
            memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v128 - 8) + 16))(v126, v127, v128);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v126, 0, 1, v128);
          }
          v139 = v214[6];
          v140 = (_QWORD *)((char *)v122 + v139);
          v141 = (_QWORD *)((char *)v123 + v139);
          *v140 = *v141;
          v140[1] = v141[1];
          v142 = v214[7];
          v143 = (char *)v122 + v142;
          v144 = (char *)v123 + v142;
          v145 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v128 - 8) + 16);
          v146 = swift_bridgeObjectRetain();
          v145(v143, v144, v128, v146);
          v147 = v214[8];
          v148 = (char *)v122 + v147;
          v149 = (char *)v123 + v147;
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v123 + v147, 1, v128))
          {
            v150 = sub_1000BA294(&qword_100BD4280);
            memcpy(v148, v149, *(_QWORD *)(*(_QWORD *)(v150 - 8) + 64));
          }
          else
          {
            ((void (*)(char *, char *, uint64_t))v145)(v148, v149, v128);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v148, 0, 1, v128);
          }
          a3 = v230;
          *((_BYTE *)v122 + v214[9]) = *((_BYTE *)v123 + v214[9]);
          swift_storeEnumTagMultiPayload(v122, v212, 1);
        }
        else
        {
          memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
          a3 = v230;
        }
        v163 = *(int *)(v70 + 24);
        v164 = (char *)v68 + v163;
        v165 = (char *)v69 + v163;
        v166 = type metadata accessor for DetailComponentAction(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v165, 1, v166))
        {
          v167 = sub_1000BA294(&qword_100BD3100);
          memcpy(v164, v165, *(_QWORD *)(*(_QWORD *)(v167 - 8) + 64));
        }
        else
        {
          v168 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v168 - 8) + 16))(v164, v165, v168);
          v169 = sub_1000BA294(&qword_100BC5FE8);
          v164[*(int *)(v169 + 48)] = v165[*(int *)(v169 + 48)];
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v164, 0, 1, v166);
        }
        v4 = v226;
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v68, 0, 1, v70);
        v66 = v234;
      }
      v170 = *(int *)(sub_1000BA294(&qword_100BF1898) + 48);
      v171 = (_QWORD *)((char *)v232 + v170);
      v172 = (uint64_t)v66 + v170;
      v173 = type metadata accessor for ConditionDetailPlatterViewModel(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v172, 1, v173))
      {
        v175 = *(_QWORD *)v172;
        v176 = *(_QWORD *)(v172 + 8);
        v177 = *(_BYTE *)(v172 + 16);
        sub_1000B2044(*(_QWORD *)v172, v176, v177);
        *v171 = v175;
        v171[1] = v176;
        *((_BYTE *)v171 + 16) = v177;
        v171[3] = *(_QWORD *)(v172 + 24);
        v171[4] = *(_QWORD *)(v172 + 32);
        v178 = *(int *)(v173 + 24);
        v179 = (char *)v171 + v178;
        v180 = (const void *)(v172 + v178);
        v181 = type metadata accessor for WeatherDescription(0);
        swift_bridgeObjectRetain();
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v180, 1, v181))
        {
          v182 = sub_1000BA294(&qword_100BC3368);
          memcpy(v179, v180, *(_QWORD *)(*(_QWORD *)(v182 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v181 - 8) + 16))(v179, v180, v181);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v179, 0, 1, v181);
        }
        v183 = v172 + *(int *)(v173 + 28);
        type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
        v184 = (char *)&loc_10075816C + 4 * byte_1009C5D18[swift_getEnumCaseMultiPayload(v183)];
        __asm { BR              X10 }
      }
      v174 = sub_1000BA294(&qword_100BC68B8);
      memcpy(v171, (const void *)v172, *(_QWORD *)(*(_QWORD *)(v174 - 8) + 64));
      v207 = v232;
      v208 = v228;
      v209 = 0;
LABEL_60:
      swift_storeEnumTagMultiPayload(v207, v208, v209);
      v5 = v225;
      goto LABEL_61;
    }
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
LABEL_61:
  *((_BYTE *)v5 + a3[7]) = *((_BYTE *)v4 + a3[7]);
  return v5;
}

void sub_100759F24(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void (*a21)(char *, char *, void *, __n128),void *__dst,uint64_t a23,uint64_t a24,uint64_t a25,void (*a26)(char *, char *, uint64_t),uint64_t a27)
{
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int EnumCaseMultiPayload;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  char *v36;
  __n128 v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  int v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  void (*v83)(uint64_t, char *, uint64_t, __n128);
  __n128 v84;
  char *v85;
  uint64_t v86;
  char *__dsta;
  int *v88;
  uint64_t v89;
  int *v90;

  v30 = type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v28);
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      *v27 = *v28;
      v27[1] = v28[1];
      v27[2] = v28[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload(v27, v30, 0);
    }
LABEL_31:
    JUMPOUT(0x100759E8CLL);
  }
  v89 = v30;
  *v27 = *v28;
  v27[1] = v28[1];
  v32 = type metadata accessor for ConditionDetailMapViewModel(0);
  v33 = *(int *)(v32 + 20);
  v34 = (char *)v27 + v33;
  v35 = v27;
  v36 = (char *)v28 + v33;
  v37 = swift_bridgeObjectRetain();
  a21(v34, v36, __dst, v37);
  v90 = (int *)v32;
  v38 = *(int *)(v32 + 24);
  *(_QWORD *)(v29 - 96) = v35;
  v39 = (_QWORD *)((char *)v35 + v38);
  v40 = (_QWORD *)((char *)v28 + v38);
  v41 = type metadata accessor for WeatherData(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v40, 1, v41))
  {
    v42 = sub_1000BA294(&qword_100BC3460);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
LABEL_30:
    v75 = *(_QWORD *)(v29 - 96);
    v76 = v90[7];
    v77 = (_QWORD *)(v75 + v76);
    v78 = (_QWORD *)((char *)v28 + v76);
    *v77 = *v78;
    v77[1] = v78[1];
    v79 = v90[8];
    v80 = v75 + v79;
    v81 = (char *)v28 + v79;
    v82 = type metadata accessor for WeatherMapOverlayKind(0);
    v83 = *(void (**)(uint64_t, char *, uint64_t, __n128))(*(_QWORD *)(v82 - 8) + 16);
    v84 = swift_bridgeObjectRetain();
    v85 = v81;
    v86 = *(_QWORD *)(v29 - 96);
    v83(v80, v85, v82, v84);
    *(_BYTE *)(v86 + v90[9]) = *((_BYTE *)v28 + v90[9]);
    swift_storeEnumTagMultiPayload(v86, v89, 1);
    goto LABEL_31;
  }
  *v39 = *v40;
  v39[1] = v40[1];
  v88 = (int *)v41;
  v43 = *(int *)(v41 + 20);
  v44 = (char *)v39 + v43;
  v45 = (char *)v40 + v43;
  v46 = type metadata accessor for Locale(0);
  swift_bridgeObjectRetain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v45, 1, v46))
  {
    v47 = sub_1000BA294(&qword_100BC3340);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v44, 0, 1, v46);
  }
  v48 = v88[6];
  v49 = (char *)v39 + v48;
  v50 = (char *)v40 + v48;
  v51 = type metadata accessor for WeatherDataModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v49, v50, v51);
  v52 = v88[7];
  v53 = (char *)v39 + v52;
  v54 = (char *)v40 + v52;
  v55 = sub_1000BA294(&qword_100BC3348);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v54, 1, v55))
  {
    v56 = type metadata accessor for WeatherData.CachingState(0);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    a26(v53, v54, a27);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v53, 0, 1, v55);
  }
  v57 = v88[8];
  v58 = (_QWORD *)((char *)v39 + v57);
  v59 = (_QWORD *)((char *)v40 + v57);
  v60 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
  v61 = swift_getEnumCaseMultiPayload(v59);
  if (v61 == 1)
  {
    v65 = type metadata accessor for WeatherStatisticsModel(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v58, v59, v65);
    v62 = v58;
    v63 = v60;
    v64 = 1;
  }
  else
  {
    if (v61)
    {
      memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
      goto LABEL_20;
    }
    *v58 = *v59;
    v58[1] = v59[1];
    swift_bridgeObjectRetain();
    v62 = v58;
    v63 = v60;
    v64 = 0;
  }
  swift_storeEnumTagMultiPayload(v62, v63, v64);
LABEL_20:
  v66 = v88[9];
  v67 = (char *)v39 + v66;
  v68 = (char *)v40 + v66;
  v69 = type metadata accessor for WeatherDataOverrides(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v68, 1, v69))
  {
    v70 = sub_1000BA294(&qword_100BC3350);
    memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
  }
  else
  {
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v68, 1, a27))
    {
      v71 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    }
    else
    {
      a26(v67, v68, a27);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v67, 0, 1, a27);
    }
    v72 = *(int *)(v69 + 20);
    __dsta = &v67[v72];
    v73 = &v68[v72];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v73, 1, a27))
    {
      v74 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(__dsta, v73, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    }
    else
    {
      a26(__dsta, v73, a27);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dsta, 0, 1, a27);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v67, 0, 1, v69);
  }
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v39, 0, 1, (uint64_t)v88);
  goto LABEL_30;
}

uint64_t sub_10075AA24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  __int128 v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  _OWORD *v46;
  _OWORD *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  int *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  int *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  _OWORD *v77;
  uint64_t v78;
  void (*v79)(char *, char *, uint64_t);
  uint64_t v80;
  _OWORD *v81;
  uint64_t v82;
  _OWORD *v83;
  _OWORD *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  int *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(char *, char *, uint64_t);
  __int128 v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  int *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(char *, char *, uint64_t);
  char *v111;
  void (*v112)(char *, char *, uint64_t);
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  void (*v118)(char *, char *, uint64_t);
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _OWORD *v131;
  _OWORD *v132;
  int *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _OWORD *v141;
  _OWORD *v142;
  uint64_t v143;
  _OWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _OWORD *v155;
  _OWORD *v156;
  int *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _OWORD *v165;
  _OWORD *v166;
  uint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  int *v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  void (*v183)(char *, char *, uint64_t);
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _OWORD *v188;
  uint64_t v189;
  uint64_t v190;
  int *v191;
  uint64_t v192;
  uint64_t v193;
  __int128 v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  int *v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  void (*v205)(char *, char *, uint64_t);
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _OWORD *v210;
  uint64_t v211;
  uint64_t v212;
  int *v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  char *v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  char *v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  _OWORD *v298;
  _OWORD *v299;
  uint64_t v300;
  _OWORD *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  __int128 v305;
  uint64_t v306;
  char *v307;
  uint64_t v308;
  int *v309;
  uint64_t v310;
  char *v311;
  char *v312;
  uint64_t v313;
  uint64_t v314;
  void (*v315)(char *, char *, uint64_t);
  uint64_t v316;
  uint64_t v317;
  int *v318;
  uint64_t v319;
  _OWORD *v320;
  _OWORD *v321;
  int *v322;
  uint64_t v323;
  char *v324;
  uint64_t v325;
  char *v326;
  char *v327;
  uint64_t v328;
  uint64_t v329;
  char *v330;
  char *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  char *v335;
  char *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  char *v342;
  uint64_t v343;
  char *v344;
  uint64_t v345;
  _OWORD *v346;
  _OWORD *v347;
  uint64_t v348;
  _OWORD *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  __int128 v353;
  uint64_t v354;
  char *v355;
  uint64_t v356;
  int *v357;
  uint64_t v358;
  char *v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  void (*v363)(char *, char *, uint64_t);
  uint64_t v364;
  uint64_t v365;
  int *v366;
  uint64_t v367;
  _OWORD *v368;
  _OWORD *v369;
  uint64_t v370;
  uint64_t v371;
  char *v372;
  uint64_t v373;
  char *v374;
  char *v375;
  uint64_t v376;
  uint64_t v377;
  char *v378;
  char *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  char *v383;
  char *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  char *v391;
  uint64_t v392;
  uint64_t v393;
  void *v394;
  char *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  char *v399;
  char *v400;
  uint64_t v401;
  uint64_t v402;
  char *v403;
  char *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  void *v408;
  char *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  char *v413;
  char *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  char *v418;
  char *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  char *v423;
  char *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  char *v430;
  char *v431;
  uint64_t v432;
  uint64_t v433;
  char *v434;
  char *v435;
  uint64_t v436;
  uint64_t v437;
  _OWORD *v438;
  char *v439;
  _OWORD *v440;
  char *v441;
  uint64_t v442;
  char *v443;
  _OWORD *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  _OWORD *v448;
  char *v449;
  _OWORD *v450;
  char *v451;
  uint64_t v452;
  char *v453;
  char *v455;
  char *v456;
  char *v457;
  char *v458;
  int *v459;
  int *v460;
  uint64_t v461;
  uint64_t v462;
  int *v463;
  int *v464;
  _OWORD *v465;
  _OWORD *v466;
  _OWORD *v467;
  _OWORD *v468;
  void (*v469)(char *, char *, uint64_t);
  void (*v470)(char *, char *, uint64_t);
  uint64_t v471;
  int *v472;
  uint64_t v473;
  int *v474;
  _OWORD *v475;
  _OWORD *v476;
  _OWORD *v477;
  _OWORD *v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  char *v483;
  char *v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  _OWORD *v495;
  _OWORD *v496;
  _OWORD *v497;
  _OWORD *v498;
  _OWORD *v499;
  _OWORD *v500;
  _OWORD *v501;
  _OWORD *v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  void (*v508)(char *, char *, uint64_t);
  void (*v509)(char *, char *, uint64_t);
  uint64_t v510;
  void (*v511)(char *, char *, uint64_t);
  uint64_t v512;
  void (*v513)(char *, char *, uint64_t);
  int *v514;
  uint64_t v515;
  void (*v516)(char *, char *);
  uint64_t v517;
  void (*v518)(char *, char *);
  uint64_t v519;
  uint64_t v520;
  _OWORD *v521;
  _OWORD *v522;
  uint64_t v523;
  void (*v524)(char *, char *, uint64_t);
  _OWORD *v525;
  _OWORD *v526;
  void (*v527)(char *, char *, uint64_t);
  uint64_t v528;
  char *v529;
  char *v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  char *v538;
  _OWORD *v539;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a2 + v7 + 8);
  *v8 = *(_QWORD *)(a2 + v7);
  v8[1] = v10;
  v11 = *(int *)(sub_1000BA294(&qword_100C02ED0) + 32);
  v12 = (char *)v8 + v11;
  v13 = (const void *)(v9 + v11);
  v14 = type metadata accessor for DetailChartDataElement(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v14))
  {
    v15 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v14);
  }
  v16 = *(int *)(v3 + 24);
  v17 = (_OWORD *)(v5 + v16);
  v18 = (_OWORD *)(v4 + v16);
  v19 = type metadata accessor for SunriseSunsetDetailViewModel(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18);
  if (EnumCaseMultiPayload == 1)
  {
    v535 = v4;
    v537 = v5;
    v532 = v19;
    v533 = v3;
    v57 = v18[1];
    *v17 = *v18;
    v17[1] = v57;
    *((_BYTE *)v17 + 32) = *((_BYTE *)v18 + 32);
    v58 = (int *)_s10PolarModelVMa(0);
    v59 = v58[7];
    v60 = (char *)v17 + v59;
    v61 = (char *)v18 + v59;
    v528 = type metadata accessor for Date(0);
    v524 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v528 - 8) + 32);
    v524(v60, v61, v528);
    v62 = v58[8];
    v63 = (char *)v17 + v62;
    v64 = (char *)v18 + v62;
    v65 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 32))(v63, v64, v65);
    v66 = v58[9];
    v67 = (char *)v17 + v66;
    v68 = (char *)v18 + v66;
    v69 = type metadata accessor for AttributedString(0);
    v516 = *(void (**)(char *, char *))(*(_QWORD *)(v69 - 8) + 32);
    v519 = v69;
    v516(v67, v68);
    *(_QWORD *)((char *)v17 + v58[10]) = *(_QWORD *)((char *)v18 + v58[10]);
    *(_OWORD *)((char *)v17 + v58[11]) = *(_OWORD *)((char *)v18 + v58[11]);
    v70 = v58[12];
    v71 = (char *)v17 + v70;
    v72 = (char *)v18 + v70;
    *(_QWORD *)((char *)v17 + v70) = *(_QWORD *)((char *)v18 + v70);
    v73 = (int *)_s14ChartViewModelVMa(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(&v71[v73[5]], &v72[v73[5]], v14);
    v74 = v73[6];
    v75 = &v71[v74];
    v76 = &v72[v74];
    v77 = v18;
    v78 = type metadata accessor for Location(0);
    v79 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 32);
    v79(v75, v76, v78);
    *(_OWORD *)&v71[v73[7]] = *(_OWORD *)&v72[v73[7]];
    *(_QWORD *)&v71[v73[8]] = *(_QWORD *)&v72[v73[8]];
    *(_QWORD *)&v71[v73[9]] = *(_QWORD *)&v72[v73[9]];
    *(_QWORD *)&v71[v73[10]] = *(_QWORD *)&v72[v73[10]];
    v524(&v71[v73[11]], &v72[v73[11]], v528);
    *(_QWORD *)&v71[v73[12]] = *(_QWORD *)&v72[v73[12]];
    v508 = v79;
    v510 = v78;
    v80 = v78;
    v81 = v77;
    v79((char *)v17 + v58[13], (char *)v77 + v58[13], v80);
    *(_QWORD *)((char *)v17 + v58[15]) = *(_QWORD *)((char *)v77 + v58[15]);
    v82 = v58[16];
    v83 = (_OWORD *)((char *)v17 + v82);
    v84 = (_OWORD *)((char *)v77 + v82);
    v85 = type metadata accessor for DetailComponentContainerViewModel(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v84, 1, v85))
    {
      v86 = sub_1000BA294(&qword_100BC68A0);
      memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
      v4 = v535;
      v5 = v537;
    }
    else
    {
      v99 = v84[1];
      *v83 = *v84;
      v83[1] = v99;
      v100 = *(int *)(v85 + 20);
      v101 = (char *)v83 + v100;
      v102 = (char *)v84 + v100;
      v103 = type metadata accessor for NewsArticleComponentViewModel(0);
      if (swift_getEnumCaseMultiPayload(v102) == 1)
      {
        v494 = v103;
        v504 = v85;
        *(_OWORD *)v101 = *(_OWORD *)v102;
        v104 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
        v105 = v104[5];
        v106 = &v101[v105];
        v107 = &v102[v105];
        v108 = type metadata accessor for URL(0);
        v539 = v17;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v107, 1, v108))
        {
          v109 = sub_1000BA294(&qword_100BD4280);
          memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
          v110 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v108 - 8) + 32);
        }
        else
        {
          v117 = v107;
          v110 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v108 - 8) + 32);
          v110(v106, v117, v108);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v106, 0, 1, v108);
        }
        *(_OWORD *)&v101[v104[6]] = *(_OWORD *)&v102[v104[6]];
        v118 = v110;
        v110(&v101[v104[7]], &v102[v104[7]], v108);
        v119 = v104[8];
        v120 = &v101[v119];
        v121 = &v102[v119];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v102[v119], 1, v108))
        {
          v122 = sub_1000BA294(&qword_100BD4280);
          memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
        }
        else
        {
          v118(v120, v121, v108);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v120, 0, 1, v108);
        }
        v17 = v539;
        v101[v104[9]] = v102[v104[9]];
        swift_storeEnumTagMultiPayload(v101, v494, 1);
        v4 = v535;
        v85 = v504;
      }
      else
      {
        memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
        v4 = v535;
      }
      v147 = *(int *)(v85 + 24);
      v148 = (char *)v83 + v147;
      v149 = (char *)v84 + v147;
      v150 = type metadata accessor for DetailComponentAction(0);
      v5 = v537;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v149, 1, v150))
      {
        v151 = sub_1000BA294(&qword_100BD3100);
        memcpy(v148, v149, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
      }
      else
      {
        v152 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v152 - 8) + 32))(v148, v149, v152);
        v153 = sub_1000BA294(&qword_100BC5FE8);
        v148[*(int *)(v153 + 48)] = v149[*(int *)(v153 + 48)];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v148, 0, 1, v150);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v83, 0, 1, v85);
    }
    v154 = *(int *)(sub_1000BA294(&qword_100BF18A0) + 48);
    v155 = (_OWORD *)((char *)v17 + v154);
    v156 = (_OWORD *)((char *)v81 + v154);
    v157 = (int *)type metadata accessor for ConditionDetailPlatterViewModel(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v156, 1, (uint64_t)v157))
    {
      v158 = sub_1000BA294(&qword_100BC68B8);
      memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v158 - 8) + 64));
    }
    else
    {
      *v155 = *v156;
      *((_BYTE *)v155 + 16) = *((_BYTE *)v156 + 16);
      *(_OWORD *)((char *)v155 + 24) = *(_OWORD *)((char *)v156 + 24);
      v159 = v157[6];
      v160 = (char *)v155 + v159;
      v161 = (char *)v156 + v159;
      v162 = type metadata accessor for WeatherDescription(0);
      v506 = v85;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v161, 1, v162))
      {
        v163 = sub_1000BA294(&qword_100BC3368);
        memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v162 - 8) + 32))(v160, v161, v162);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v160, 0, 1, v162);
      }
      v164 = v157[7];
      v165 = (_OWORD *)((char *)v155 + v164);
      v166 = (_OWORD *)((char *)v156 + v164);
      v167 = type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
      switch(swift_getEnumCaseMultiPayload(v166))
      {
        case 0u:
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v162 - 8) + 32))(v165, v166, v162);
          v168 = v165;
          v169 = v167;
          v170 = 0;
          goto LABEL_163;
        case 2u:
          ((void (*)(_OWORD *, _OWORD *, uint64_t))v516)(v165, v166, v519);
          v168 = v165;
          v169 = v167;
          v170 = 2;
          goto LABEL_163;
        case 3u:
          v193 = sub_1000BA294(&qword_100BD30F8);
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v193 - 8) + 32))(v165, v166, v193);
          v168 = v165;
          v169 = v167;
          v170 = 3;
          goto LABEL_163;
        case 4u:
          v476 = v166;
          v480 = v162;
          v194 = v166[1];
          *v165 = *v166;
          v165[1] = v194;
          v195 = *(int *)(v506 + 20);
          v196 = (char *)v165 + v195;
          v197 = (char *)v166 + v195;
          v198 = type metadata accessor for NewsArticleComponentViewModel(0);
          v497 = v165;
          if (swift_getEnumCaseMultiPayload(v197) == 1)
          {
            v473 = v198;
            v486 = v167;
            *(_OWORD *)v196 = *(_OWORD *)v197;
            v199 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
            v200 = v199[5];
            v201 = &v196[v200];
            v202 = &v197[v200];
            v203 = type metadata accessor for URL(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v202, 1, v203))
            {
              v204 = sub_1000BA294(&qword_100BD4280);
              memcpy(v201, v202, *(_QWORD *)(*(_QWORD *)(v204 - 8) + 64));
              v205 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v203 - 8) + 32);
            }
            else
            {
              v225 = v202;
              v205 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v203 - 8) + 32);
              v205(v201, v225, v203);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v201, 0, 1, v203);
            }
            *(_OWORD *)&v196[v199[6]] = *(_OWORD *)&v197[v199[6]];
            v470 = v205;
            v205(&v196[v199[7]], &v197[v199[7]], v203);
            v226 = v199[8];
            v227 = &v196[v226];
            v228 = &v197[v226];
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v197[v226], 1, v203))
            {
              v229 = sub_1000BA294(&qword_100BD4280);
              memcpy(v227, v228, *(_QWORD *)(*(_QWORD *)(v229 - 8) + 64));
            }
            else
            {
              v470(v227, v228, v203);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v227, 0, 1, v203);
            }
            v165 = v497;
            v196[v199[9]] = v197[v199[9]];
            swift_storeEnumTagMultiPayload(v196, v473, 1);
            v4 = v535;
            v167 = v486;
          }
          else
          {
            memcpy(v196, v197, *(_QWORD *)(*(_QWORD *)(v198 - 8) + 64));
          }
          v242 = *(int *)(v506 + 24);
          v243 = (char *)v165 + v242;
          v244 = (char *)v476 + v242;
          v245 = type metadata accessor for DetailComponentAction(0);
          v5 = v537;
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v244, 1, v245))
          {
            v246 = sub_1000BA294(&qword_100BD3100);
            memcpy(v243, v244, *(_QWORD *)(*(_QWORD *)(v246 - 8) + 64));
          }
          else
          {
            v247 = type metadata accessor for URL(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v247 - 8) + 32))(v243, v244, v247);
            v248 = sub_1000BA294(&qword_100BC5FE8);
            v243[*(int *)(v248 + 48)] = v244[*(int *)(v248 + 48)];
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v243, 0, 1, v245);
          }
          swift_storeEnumTagMultiPayload(v497, v167, 4);
          v162 = v480;
          break;
        case 6u:
          v206 = type metadata accessor for PrecipitationTotalPlatterViewModel(0);
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v206 - 8) + 32))(v165, v166, v206);
          v168 = v165;
          v169 = v167;
          v170 = 6;
          goto LABEL_163;
        case 7u:
          v474 = v157;
          v207 = type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
          if (swift_getEnumCaseMultiPayload(v166) == 1)
          {
            v462 = v207;
            *v165 = *v166;
            v208 = type metadata accessor for ConditionDetailMapViewModel(0);
            v508((char *)v165 + *(int *)(v208 + 20), (char *)v166 + *(int *)(v208 + 20), v510);
            v464 = (int *)v208;
            v209 = *(int *)(v208 + 24);
            v468 = (_OWORD *)((char *)v165 + v209);
            v210 = (_OWORD *)((char *)v166 + v209);
            v211 = type metadata accessor for WeatherData(0);
            v466 = v210;
            v212 = (uint64_t)v210;
            v213 = (int *)v211;
            v498 = v165;
            if (_s7Weather24LocationCompositionStateOwet_0(v212, 1, v211))
            {
              v214 = sub_1000BA294(&qword_100BC3460);
              memcpy(v468, v466, *(_QWORD *)(*(_QWORD *)(v214 - 8) + 64));
              v157 = v474;
            }
            else
            {
              v478 = v166;
              v482 = v162;
              *v468 = *v466;
              v460 = v213;
              v230 = v213[5];
              v231 = (char *)v468 + v230;
              v232 = (char *)v466 + v230;
              v233 = type metadata accessor for Locale(0);
              v157 = v474;
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v232, 1, v233))
              {
                v234 = sub_1000BA294(&qword_100BC3340);
                memcpy(v231, v232, *(_QWORD *)(*(_QWORD *)(v234 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v233 - 8) + 32))(v231, v232, v233);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v231, 0, 1, v233);
              }
              v256 = v460[6];
              v456 = (char *)v466 + v256;
              v458 = (char *)v468 + v256;
              v257 = type metadata accessor for WeatherDataModel(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v257 - 8) + 32))(v458, v456, v257);
              v258 = v460[7];
              v259 = (char *)v468 + v258;
              v260 = (char *)v466 + v258;
              v261 = sub_1000BA294(&qword_100BC3348);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v260, 1, v261))
              {
                v262 = type metadata accessor for WeatherData.CachingState(0);
                memcpy(v259, v260, *(_QWORD *)(*(_QWORD *)(v262 - 8) + 64));
              }
              else
              {
                v524(v259, v260, v528);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v259, 0, 1, v261);
              }
              v273 = v460[8];
              v274 = (char *)v468 + v273;
              v275 = (char *)v466 + v273;
              v276 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
              v488 = v167;
              if (swift_getEnumCaseMultiPayload(v275) == 1)
              {
                v277 = type metadata accessor for WeatherStatisticsModel(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v277 - 8) + 32))(v274, v275, v277);
                swift_storeEnumTagMultiPayload(v274, v276, 1);
              }
              else
              {
                memcpy(v274, v275, *(_QWORD *)(*(_QWORD *)(v276 - 8) + 64));
              }
              v278 = v460[9];
              v279 = (char *)v468 + v278;
              v280 = (char *)v466 + v278;
              v281 = type metadata accessor for WeatherDataOverrides(0);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v280, 1, v281))
              {
                v282 = sub_1000BA294(&qword_100BC3350);
                memcpy(v279, v280, *(_QWORD *)(*(_QWORD *)(v282 - 8) + 64));
              }
              else
              {
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v280, 1, v528))
                {
                  v284 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                  memcpy(v279, v280, *(_QWORD *)(*(_QWORD *)(v284 - 8) + 64));
                }
                else
                {
                  v524(v279, v280, v528);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v279, 0, 1, v528);
                }
                v289 = *(int *)(v281 + 20);
                v290 = &v279[v289];
                v291 = &v280[v289];
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v291, 1, v528))
                {
                  v292 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                  memcpy(v290, v291, *(_QWORD *)(*(_QWORD *)(v292 - 8) + 64));
                }
                else
                {
                  v524(v290, v291, v528);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v290, 0, 1, v528);
                }
                v4 = v535;
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v279, 0, 1, v281);
              }
              v165 = v498;
              v166 = v478;
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v468, 0, 1, (uint64_t)v460);
              v162 = v482;
              v167 = v488;
            }
            *(_OWORD *)((char *)v165 + v464[7]) = *(_OWORD *)((char *)v166 + v464[7]);
            v341 = v464[8];
            v342 = (char *)v165 + v341;
            v484 = (char *)v166 + v341;
            v343 = type metadata accessor for WeatherMapOverlayKind(0);
            v344 = v342;
            v165 = v498;
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v343 - 8) + 32))(v344, v484, v343);
            *((_BYTE *)v498 + v464[9]) = *((_BYTE *)v166 + v464[9]);
            swift_storeEnumTagMultiPayload(v498, v462, 1);
          }
          else
          {
            memcpy(v165, v166, *(_QWORD *)(*(_QWORD *)(v207 - 8) + 64));
            v157 = v474;
          }
          v168 = v165;
          v169 = v167;
          v170 = 7;
LABEL_163:
          swift_storeEnumTagMultiPayload(v168, v169, v170);
          break;
        default:
          memcpy(v165, v166, *(_QWORD *)(*(_QWORD *)(v167 - 8) + 64));
          break;
      }
      v345 = v157[8];
      v346 = (_OWORD *)((char *)v155 + v345);
      v347 = (_OWORD *)((char *)v156 + v345);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v156 + v345, 1, v167))
      {
        v348 = sub_1000BA294(&qword_100BD3108);
        memcpy(v346, v347, *(_QWORD *)(*(_QWORD *)(v348 - 8) + 64));
      }
      else
      {
        switch(swift_getEnumCaseMultiPayload(v347))
        {
          case 0u:
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v162 - 8) + 32))(v346, v347, v162);
            v349 = v346;
            v350 = v167;
            v351 = 0;
            goto LABEL_233;
          case 2u:
            ((void (*)(_OWORD *, _OWORD *, uint64_t))v516)(v346, v347, v519);
            v349 = v346;
            v350 = v167;
            v351 = 2;
            goto LABEL_233;
          case 3u:
            v352 = sub_1000BA294(&qword_100BD30F8);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v352 - 8) + 32))(v346, v347, v352);
            v349 = v346;
            v350 = v167;
            v351 = 3;
            goto LABEL_233;
          case 4u:
            v491 = v167;
            v353 = v347[1];
            *v346 = *v347;
            v346[1] = v353;
            v354 = *(int *)(v506 + 20);
            v530 = (char *)v346 + v354;
            v355 = (char *)v347 + v354;
            v356 = type metadata accessor for NewsArticleComponentViewModel(0);
            v501 = v346;
            if (swift_getEnumCaseMultiPayload(v355) == 1)
            {
              v521 = v347;
              *(_OWORD *)v530 = *(_OWORD *)v355;
              v357 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
              v358 = v357[5];
              v359 = &v530[v358];
              v360 = &v355[v358];
              v361 = type metadata accessor for URL(0);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v360, 1, v361))
              {
                v362 = sub_1000BA294(&qword_100BD4280);
                memcpy(v359, v360, *(_QWORD *)(*(_QWORD *)(v362 - 8) + 64));
                v363 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v361 - 8) + 32);
              }
              else
              {
                v372 = v360;
                v363 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v361 - 8) + 32);
                v363(v359, v372, v361);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v359, 0, 1, v361);
              }
              *(_OWORD *)&v530[v357[6]] = *(_OWORD *)&v355[v357[6]];
              v513 = v363;
              v363(&v530[v357[7]], &v355[v357[7]], v361);
              v373 = v357[8];
              v374 = &v530[v373];
              v375 = &v355[v373];
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v355[v373], 1, v361))
              {
                v376 = sub_1000BA294(&qword_100BD4280);
                memcpy(v374, v375, *(_QWORD *)(*(_QWORD *)(v376 - 8) + 64));
              }
              else
              {
                v513(v374, v375, v361);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v374, 0, 1, v361);
              }
              v346 = v501;
              v530[v357[9]] = v355[v357[9]];
              swift_storeEnumTagMultiPayload(v530, v356, 1);
              v4 = v535;
              v5 = v537;
              v347 = v521;
            }
            else
            {
              memcpy(v530, v355, *(_QWORD *)(*(_QWORD *)(v356 - 8) + 64));
            }
            v382 = *(int *)(v506 + 24);
            v383 = (char *)v346 + v382;
            v384 = (char *)v347 + v382;
            v385 = type metadata accessor for DetailComponentAction(0);
            v167 = v491;
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v384, 1, v385))
            {
              v386 = sub_1000BA294(&qword_100BD3100);
              memcpy(v383, v384, *(_QWORD *)(*(_QWORD *)(v386 - 8) + 64));
            }
            else
            {
              v387 = type metadata accessor for URL(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v387 - 8) + 32))(v383, v384, v387);
              v388 = sub_1000BA294(&qword_100BC5FE8);
              v383[*(int *)(v388 + 48)] = v384[*(int *)(v388 + 48)];
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v383, 0, 1, v385);
            }
            v346 = v501;
            v349 = v501;
            v350 = v491;
            v351 = 4;
            goto LABEL_233;
          case 6u:
            v364 = type metadata accessor for PrecipitationTotalPlatterViewModel(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v364 - 8) + 32))(v346, v347, v364);
            v349 = v346;
            v350 = v167;
            v351 = 6;
            goto LABEL_233;
          case 7u:
            v365 = type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
            if (swift_getEnumCaseMultiPayload(v347) == 1)
            {
              v517 = v365;
              v492 = v167;
              *v346 = *v347;
              v366 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
              v508((char *)v346 + v366[5], (char *)v347 + v366[5], v510);
              v367 = v366[6];
              v368 = (_OWORD *)((char *)v346 + v367);
              v369 = (_OWORD *)((char *)v347 + v367);
              v370 = type metadata accessor for WeatherData(0);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v369, 1, v370))
              {
                v371 = sub_1000BA294(&qword_100BC3460);
                memcpy(v368, v369, *(_QWORD *)(*(_QWORD *)(v371 - 8) + 64));
              }
              else
              {
                v522 = v347;
                v502 = v346;
                *v368 = *v369;
                v514 = (int *)v370;
                v377 = *(int *)(v370 + 20);
                v378 = (char *)v368 + v377;
                v379 = (char *)v369 + v377;
                v380 = type metadata accessor for Locale(0);
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v379, 1, v380))
                {
                  v381 = sub_1000BA294(&qword_100BC3340);
                  memcpy(v378, v379, *(_QWORD *)(*(_QWORD *)(v381 - 8) + 64));
                }
                else
                {
                  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v380 - 8) + 32))(v378, v379, v380);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v378, 0, 1, v380);
                }
                v398 = v514[6];
                v399 = (char *)v368 + v398;
                v400 = (char *)v369 + v398;
                v401 = type metadata accessor for WeatherDataModel(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v401 - 8) + 32))(v399, v400, v401);
                v402 = v514[7];
                v403 = (char *)v368 + v402;
                v404 = (char *)v369 + v402;
                v405 = sub_1000BA294(&qword_100BC3348);
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v404, 1, v405))
                {
                  v406 = type metadata accessor for WeatherData.CachingState(0);
                  memcpy(v403, v404, *(_QWORD *)(*(_QWORD *)(v406 - 8) + 64));
                }
                else
                {
                  v524(v403, v404, v528);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v403, 0, 1, v405);
                }
                v417 = v514[8];
                v418 = (char *)v368 + v417;
                v419 = (char *)v369 + v417;
                v420 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
                if (swift_getEnumCaseMultiPayload(v419) == 1)
                {
                  v421 = type metadata accessor for WeatherStatisticsModel(0);
                  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v421 - 8) + 32))(v418, v419, v421);
                  swift_storeEnumTagMultiPayload(v418, v420, 1);
                }
                else
                {
                  memcpy(v418, v419, *(_QWORD *)(*(_QWORD *)(v420 - 8) + 64));
                }
                v422 = v514[9];
                v423 = (char *)v368 + v422;
                v424 = (char *)v369 + v422;
                v425 = type metadata accessor for WeatherDataOverrides(0);
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v424, 1, v425))
                {
                  v426 = sub_1000BA294(&qword_100BC3350);
                  memcpy(v423, v424, *(_QWORD *)(*(_QWORD *)(v426 - 8) + 64));
                }
                else
                {
                  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v424, 1, v528))
                  {
                    v428 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                    memcpy(v423, v424, *(_QWORD *)(*(_QWORD *)(v428 - 8) + 64));
                  }
                  else
                  {
                    v524(v423, v424, v528);
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v423, 0, 1, v528);
                  }
                  v433 = *(int *)(v425 + 20);
                  v434 = &v423[v433];
                  v435 = &v424[v433];
                  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v435, 1, v528))
                  {
                    v436 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                    memcpy(v434, v435, *(_QWORD *)(*(_QWORD *)(v436 - 8) + 64));
                  }
                  else
                  {
                    v524(v434, v435, v528);
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v434, 0, 1, v528);
                  }
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v423, 0, 1, v425);
                }
                v346 = v502;
                v347 = v522;
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v368, 0, 1, (uint64_t)v514);
              }
              v167 = v492;
              *(_OWORD *)((char *)v346 + v366[7]) = *(_OWORD *)((char *)v347 + v366[7]);
              v447 = v366[8];
              v448 = v347;
              v449 = (char *)v346 + v447;
              v450 = v346;
              v451 = (char *)v448 + v447;
              v452 = type metadata accessor for WeatherMapOverlayKind(0);
              v453 = v451;
              v346 = v450;
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v452 - 8) + 32))(v449, v453, v452);
              *((_BYTE *)v450 + v366[9]) = *((_BYTE *)v448 + v366[9]);
              swift_storeEnumTagMultiPayload(v450, v517, 1);
              v4 = v535;
              v5 = v537;
            }
            else
            {
              memcpy(v346, v347, *(_QWORD *)(*(_QWORD *)(v365 - 8) + 64));
            }
            v349 = v346;
            v350 = v167;
            v351 = 7;
LABEL_233:
            swift_storeEnumTagMultiPayload(v349, v350, v351);
            break;
          default:
            memcpy(v346, v347, *(_QWORD *)(*(_QWORD *)(v167 - 8) + 64));
            break;
        }
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v346, 0, 1, v167);
      }
      *((_BYTE *)v155 + v157[9]) = *((_BYTE *)v156 + v157[9]);
      *((_BYTE *)v155 + v157[10]) = *((_BYTE *)v156 + v157[10]);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v155, 0, 1, (uint64_t)v157);
    }
    v444 = v17;
    v445 = v532;
    v446 = 1;
    goto LABEL_237;
  }
  if (!EnumCaseMultiPayload)
  {
    v534 = v4;
    v536 = v5;
    v531 = v19;
    v533 = v3;
    v21 = v18[1];
    *v17 = *v18;
    v17[1] = v21;
    v17[2] = v18[2];
    v22 = (int *)_s11NormalModelVMa(0);
    v23 = v22[7];
    v24 = (char *)v17 + v23;
    v25 = (char *)v18 + v23;
    v538 = (char *)v17;
    v26 = type metadata accessor for Date(0);
    v527 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32);
    v527(v24, v25, v26);
    v527(&v538[v22[8]], (char *)v18 + v22[8], v26);
    v527(&v538[v22[9]], (char *)v18 + v22[9], v26);
    v27 = v22[10];
    v28 = &v538[v27];
    v29 = (char *)v18 + v27;
    v30 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
    v31 = v22[11];
    v32 = &v538[v31];
    v33 = (char *)v18 + v31;
    v34 = type metadata accessor for AttributedString(0);
    v518 = *(void (**)(char *, char *))(*(_QWORD *)(v34 - 8) + 32);
    v523 = v34;
    v518(v32, v33);
    *(_QWORD *)&v538[v22[12]] = *(_QWORD *)((char *)v18 + v22[12]);
    v35 = v22[13];
    v36 = &v538[v35];
    v37 = (char *)v18 + v35;
    *(_QWORD *)&v538[v35] = *(_QWORD *)((char *)v18 + v35);
    v38 = (int *)_s14ChartViewModelVMa(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(&v36[v38[5]], &v37[v38[5]], v14);
    v39 = v38[6];
    v40 = &v36[v39];
    v41 = &v37[v39];
    v42 = type metadata accessor for Location(0);
    v43 = (char *)v18;
    v44 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32);
    v44(v40, v41, v42);
    *(_OWORD *)&v36[v38[7]] = *(_OWORD *)&v37[v38[7]];
    *(_QWORD *)&v36[v38[8]] = *(_QWORD *)&v37[v38[8]];
    *(_QWORD *)&v36[v38[9]] = *(_QWORD *)&v37[v38[9]];
    *(_QWORD *)&v36[v38[10]] = *(_QWORD *)&v37[v38[10]];
    v507 = v26;
    v45 = v26;
    v46 = v538;
    v527(&v36[v38[11]], &v37[v38[11]], v45);
    *(_QWORD *)&v36[v38[12]] = *(_QWORD *)&v37[v38[12]];
    v509 = v44;
    v515 = v42;
    v44(&v538[v22[14]], &v43[v22[14]], v42);
    v47 = v43;
    v48 = v22[15];
    v49 = &v538[v48];
    v50 = &v43[v48];
    v51 = type metadata accessor for SunEvents(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 32))(v49, v50, v51);
    *(_QWORD *)&v538[v22[16]] = *(_QWORD *)&v43[v22[16]];
    v52 = v22[18];
    v53 = &v538[v52];
    v54 = &v43[v52];
    v55 = type metadata accessor for DetailComponentContainerViewModel(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v54, 1, v55))
    {
      v56 = sub_1000BA294(&qword_100BC68A0);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
      v4 = v534;
      v5 = v536;
    }
    else
    {
      v87 = *((_OWORD *)v54 + 1);
      *(_OWORD *)v53 = *(_OWORD *)v54;
      *((_OWORD *)v53 + 1) = v87;
      v88 = *(int *)(v55 + 20);
      v89 = &v53[v88];
      v90 = &v54[v88];
      v91 = type metadata accessor for NewsArticleComponentViewModel(0);
      if (swift_getEnumCaseMultiPayload(v90) == 1)
      {
        v493 = v91;
        v503 = v55;
        *(_OWORD *)v89 = *(_OWORD *)v90;
        v92 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
        v93 = v92[5];
        v94 = &v89[v93];
        v95 = &v90[v93];
        v96 = type metadata accessor for URL(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v95, 1, v96))
        {
          v97 = sub_1000BA294(&qword_100BD4280);
          memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
          v98 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 32);
        }
        else
        {
          v111 = v95;
          v98 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 32);
          v98(v94, v111, v96);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v94, 0, 1, v96);
        }
        *(_OWORD *)&v89[v92[6]] = *(_OWORD *)&v90[v92[6]];
        v112 = v98;
        v98(&v89[v92[7]], &v90[v92[7]], v96);
        v113 = v92[8];
        v114 = &v89[v113];
        v115 = &v90[v113];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v90[v113], 1, v96))
        {
          v116 = sub_1000BA294(&qword_100BD4280);
          memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
        }
        else
        {
          v112(v114, v115, v96);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v114, 0, 1, v96);
        }
        v46 = v538;
        v89[v92[9]] = v90[v92[9]];
        swift_storeEnumTagMultiPayload(v89, v493, 1);
        v55 = v503;
      }
      else
      {
        memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
      }
      v123 = *(int *)(v55 + 24);
      v124 = &v53[v123];
      v125 = &v54[v123];
      v126 = type metadata accessor for DetailComponentAction(0);
      v4 = v534;
      v5 = v536;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v125, 1, v126))
      {
        v127 = sub_1000BA294(&qword_100BD3100);
        memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
      }
      else
      {
        v128 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v128 - 8) + 32))(v124, v125, v128);
        v129 = sub_1000BA294(&qword_100BC5FE8);
        v124[*(int *)(v129 + 48)] = v125[*(int *)(v129 + 48)];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v124, 0, 1, v126);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v53, 0, 1, v55);
    }
    v130 = *(int *)(sub_1000BA294(&qword_100BF1898) + 48);
    v131 = (_OWORD *)((char *)v46 + v130);
    v132 = (_OWORD *)((char *)v47 + v130);
    v133 = (int *)type metadata accessor for ConditionDetailPlatterViewModel(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v132, 1, (uint64_t)v133))
    {
      v134 = sub_1000BA294(&qword_100BC68B8);
      memcpy(v131, v132, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
    }
    else
    {
      *v131 = *v132;
      *((_BYTE *)v131 + 16) = *((_BYTE *)v132 + 16);
      *(_OWORD *)((char *)v131 + 24) = *(_OWORD *)((char *)v132 + 24);
      v135 = v133[6];
      v136 = (char *)v131 + v135;
      v137 = (char *)v132 + v135;
      v138 = type metadata accessor for WeatherDescription(0);
      v505 = v55;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v137, 1, v138))
      {
        v139 = sub_1000BA294(&qword_100BC3368);
        memcpy(v136, v137, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v138 - 8) + 32))(v136, v137, v138);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v136, 0, 1, v138);
      }
      v140 = v133[7];
      v141 = (_OWORD *)((char *)v131 + v140);
      v142 = (_OWORD *)((char *)v132 + v140);
      v143 = type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
      switch(swift_getEnumCaseMultiPayload(v142))
      {
        case 0u:
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v138 - 8) + 32))(v141, v142, v138);
          v144 = v141;
          v145 = v143;
          v146 = 0;
          goto LABEL_130;
        case 2u:
          ((void (*)(_OWORD *, _OWORD *, uint64_t))v518)(v141, v142, v523);
          v144 = v141;
          v145 = v143;
          v146 = 2;
          goto LABEL_130;
        case 3u:
          v171 = sub_1000BA294(&qword_100BD30F8);
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v171 - 8) + 32))(v141, v142, v171);
          v144 = v141;
          v145 = v143;
          v146 = 3;
          goto LABEL_130;
        case 4u:
          v475 = v142;
          v479 = v138;
          v172 = v142[1];
          *v141 = *v142;
          v141[1] = v172;
          v173 = *(int *)(v505 + 20);
          v174 = (char *)v141 + v173;
          v175 = (char *)v142 + v173;
          v176 = type metadata accessor for NewsArticleComponentViewModel(0);
          v495 = v141;
          if (swift_getEnumCaseMultiPayload(v175) == 1)
          {
            v471 = v176;
            v485 = v143;
            *(_OWORD *)v174 = *(_OWORD *)v175;
            v177 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
            v178 = v177[5];
            v179 = &v174[v178];
            v180 = &v175[v178];
            v181 = type metadata accessor for URL(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v180, 1, v181))
            {
              v182 = sub_1000BA294(&qword_100BD4280);
              memcpy(v179, v180, *(_QWORD *)(*(_QWORD *)(v182 - 8) + 64));
              v183 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v181 - 8) + 32);
            }
            else
            {
              v215 = v180;
              v183 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v181 - 8) + 32);
              v183(v179, v215, v181);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v179, 0, 1, v181);
            }
            *(_OWORD *)&v174[v177[6]] = *(_OWORD *)&v175[v177[6]];
            v469 = v183;
            v183(&v174[v177[7]], &v175[v177[7]], v181);
            v216 = v177[8];
            v217 = &v174[v216];
            v218 = &v175[v216];
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v175[v216], 1, v181))
            {
              v219 = sub_1000BA294(&qword_100BD4280);
              memcpy(v217, v218, *(_QWORD *)(*(_QWORD *)(v219 - 8) + 64));
            }
            else
            {
              v469(v217, v218, v181);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v217, 0, 1, v181);
            }
            v141 = v495;
            v174[v177[9]] = v175[v177[9]];
            swift_storeEnumTagMultiPayload(v174, v471, 1);
            v4 = v534;
            v143 = v485;
          }
          else
          {
            memcpy(v174, v175, *(_QWORD *)(*(_QWORD *)(v176 - 8) + 64));
          }
          v235 = *(int *)(v505 + 24);
          v236 = (char *)v141 + v235;
          v237 = (char *)v475 + v235;
          v238 = type metadata accessor for DetailComponentAction(0);
          v5 = v536;
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v237, 1, v238))
          {
            v239 = sub_1000BA294(&qword_100BD3100);
            memcpy(v236, v237, *(_QWORD *)(*(_QWORD *)(v239 - 8) + 64));
          }
          else
          {
            v240 = type metadata accessor for URL(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v240 - 8) + 32))(v236, v237, v240);
            v241 = sub_1000BA294(&qword_100BC5FE8);
            v236[*(int *)(v241 + 48)] = v237[*(int *)(v241 + 48)];
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v236, 0, 1, v238);
          }
          swift_storeEnumTagMultiPayload(v495, v143, 4);
          v138 = v479;
          break;
        case 6u:
          v184 = type metadata accessor for PrecipitationTotalPlatterViewModel(0);
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v184 - 8) + 32))(v141, v142, v184);
          v144 = v141;
          v145 = v143;
          v146 = 6;
          goto LABEL_130;
        case 7u:
          v472 = v133;
          v185 = type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
          if (swift_getEnumCaseMultiPayload(v142) == 1)
          {
            v461 = v185;
            *v141 = *v142;
            v186 = type metadata accessor for ConditionDetailMapViewModel(0);
            v509((char *)v141 + *(int *)(v186 + 20), (char *)v142 + *(int *)(v186 + 20), v515);
            v463 = (int *)v186;
            v187 = *(int *)(v186 + 24);
            v467 = (_OWORD *)((char *)v141 + v187);
            v188 = (_OWORD *)((char *)v142 + v187);
            v189 = type metadata accessor for WeatherData(0);
            v465 = v188;
            v190 = (uint64_t)v188;
            v191 = (int *)v189;
            v496 = v141;
            if (_s7Weather24LocationCompositionStateOwet_0(v190, 1, v189))
            {
              v192 = sub_1000BA294(&qword_100BC3460);
              memcpy(v467, v465, *(_QWORD *)(*(_QWORD *)(v192 - 8) + 64));
              v133 = v472;
            }
            else
            {
              v477 = v142;
              v481 = v138;
              *v467 = *v465;
              v459 = v191;
              v220 = v191[5];
              v221 = (char *)v467 + v220;
              v222 = (char *)v465 + v220;
              v223 = type metadata accessor for Locale(0);
              v133 = v472;
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v222, 1, v223))
              {
                v224 = sub_1000BA294(&qword_100BC3340);
                memcpy(v221, v222, *(_QWORD *)(*(_QWORD *)(v224 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v223 - 8) + 32))(v221, v222, v223);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v221, 0, 1, v223);
              }
              v249 = v459[6];
              v455 = (char *)v465 + v249;
              v457 = (char *)v467 + v249;
              v250 = type metadata accessor for WeatherDataModel(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v250 - 8) + 32))(v457, v455, v250);
              v251 = v459[7];
              v252 = (char *)v467 + v251;
              v253 = (char *)v465 + v251;
              v254 = sub_1000BA294(&qword_100BC3348);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v253, 1, v254))
              {
                v255 = type metadata accessor for WeatherData.CachingState(0);
                memcpy(v252, v253, *(_QWORD *)(*(_QWORD *)(v255 - 8) + 64));
              }
              else
              {
                v527(v252, v253, v507);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v252, 0, 1, v254);
              }
              v263 = v459[8];
              v264 = (char *)v467 + v263;
              v265 = (char *)v465 + v263;
              v266 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
              v487 = v143;
              if (swift_getEnumCaseMultiPayload(v265) == 1)
              {
                v267 = type metadata accessor for WeatherStatisticsModel(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v267 - 8) + 32))(v264, v265, v267);
                swift_storeEnumTagMultiPayload(v264, v266, 1);
              }
              else
              {
                memcpy(v264, v265, *(_QWORD *)(*(_QWORD *)(v266 - 8) + 64));
              }
              v268 = v459[9];
              v269 = (char *)v467 + v268;
              v270 = (char *)v465 + v268;
              v271 = type metadata accessor for WeatherDataOverrides(0);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v270, 1, v271))
              {
                v272 = sub_1000BA294(&qword_100BC3350);
                memcpy(v269, v270, *(_QWORD *)(*(_QWORD *)(v272 - 8) + 64));
              }
              else
              {
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v270, 1, v507))
                {
                  v283 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                  memcpy(v269, v270, *(_QWORD *)(*(_QWORD *)(v283 - 8) + 64));
                }
                else
                {
                  v527(v269, v270, v507);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v269, 0, 1, v507);
                }
                v285 = *(int *)(v271 + 20);
                v286 = &v269[v285];
                v287 = &v270[v285];
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v287, 1, v507))
                {
                  v288 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                  memcpy(v286, v287, *(_QWORD *)(*(_QWORD *)(v288 - 8) + 64));
                }
                else
                {
                  v527(v286, v287, v507);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v286, 0, 1, v507);
                }
                v46 = v538;
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v269, 0, 1, v271);
              }
              v141 = v496;
              v142 = v477;
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v467, 0, 1, (uint64_t)v459);
              v138 = v481;
              v143 = v487;
            }
            *(_OWORD *)((char *)v141 + v463[7]) = *(_OWORD *)((char *)v142 + v463[7]);
            v293 = v463[8];
            v294 = (char *)v141 + v293;
            v483 = (char *)v142 + v293;
            v295 = type metadata accessor for WeatherMapOverlayKind(0);
            v296 = v294;
            v141 = v496;
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v295 - 8) + 32))(v296, v483, v295);
            *((_BYTE *)v496 + v463[9]) = *((_BYTE *)v142 + v463[9]);
            swift_storeEnumTagMultiPayload(v496, v461, 1);
          }
          else
          {
            memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
            v133 = v472;
          }
          v144 = v141;
          v145 = v143;
          v146 = 7;
LABEL_130:
          swift_storeEnumTagMultiPayload(v144, v145, v146);
          break;
        default:
          memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
          break;
      }
      v297 = v133[8];
      v298 = (_OWORD *)((char *)v131 + v297);
      v299 = (_OWORD *)((char *)v132 + v297);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v132 + v297, 1, v143))
      {
        v300 = sub_1000BA294(&qword_100BD3108);
        memcpy(v298, v299, *(_QWORD *)(*(_QWORD *)(v300 - 8) + 64));
      }
      else
      {
        switch(swift_getEnumCaseMultiPayload(v299))
        {
          case 0u:
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v138 - 8) + 32))(v298, v299, v138);
            v301 = v298;
            v302 = v143;
            v303 = 0;
            goto LABEL_224;
          case 2u:
            ((void (*)(_OWORD *, _OWORD *, uint64_t))v518)(v298, v299, v523);
            v301 = v298;
            v302 = v143;
            v303 = 2;
            goto LABEL_224;
          case 3u:
            v304 = sub_1000BA294(&qword_100BD30F8);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v304 - 8) + 32))(v298, v299, v304);
            v301 = v298;
            v302 = v143;
            v303 = 3;
            goto LABEL_224;
          case 4u:
            v489 = v143;
            v305 = v299[1];
            *v298 = *v299;
            v298[1] = v305;
            v306 = *(int *)(v505 + 20);
            v529 = (char *)v298 + v306;
            v307 = (char *)v299 + v306;
            v308 = type metadata accessor for NewsArticleComponentViewModel(0);
            v499 = v298;
            if (swift_getEnumCaseMultiPayload(v307) == 1)
            {
              v525 = v299;
              *(_OWORD *)v529 = *(_OWORD *)v307;
              v309 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
              v310 = v309[5];
              v311 = &v529[v310];
              v312 = &v307[v310];
              v313 = type metadata accessor for URL(0);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v312, 1, v313))
              {
                v314 = sub_1000BA294(&qword_100BD4280);
                memcpy(v311, v312, *(_QWORD *)(*(_QWORD *)(v314 - 8) + 64));
                v315 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v313 - 8) + 32);
              }
              else
              {
                v324 = v312;
                v315 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v313 - 8) + 32);
                v315(v311, v324, v313);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v311, 0, 1, v313);
              }
              *(_OWORD *)&v529[v309[6]] = *(_OWORD *)&v307[v309[6]];
              v511 = v315;
              v315(&v529[v309[7]], &v307[v309[7]], v313);
              v325 = v309[8];
              v326 = &v529[v325];
              v327 = &v307[v325];
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v307[v325], 1, v313))
              {
                v328 = sub_1000BA294(&qword_100BD4280);
                memcpy(v326, v327, *(_QWORD *)(*(_QWORD *)(v328 - 8) + 64));
              }
              else
              {
                v511(v326, v327, v313);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v326, 0, 1, v313);
              }
              v298 = v499;
              v529[v309[9]] = v307[v309[9]];
              swift_storeEnumTagMultiPayload(v529, v308, 1);
              v4 = v534;
              v5 = v536;
              v299 = v525;
            }
            else
            {
              memcpy(v529, v307, *(_QWORD *)(*(_QWORD *)(v308 - 8) + 64));
            }
            v334 = *(int *)(v505 + 24);
            v335 = (char *)v298 + v334;
            v336 = (char *)v299 + v334;
            v337 = type metadata accessor for DetailComponentAction(0);
            v143 = v489;
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v336, 1, v337))
            {
              v338 = sub_1000BA294(&qword_100BD3100);
              memcpy(v335, v336, *(_QWORD *)(*(_QWORD *)(v338 - 8) + 64));
            }
            else
            {
              v339 = type metadata accessor for URL(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v339 - 8) + 32))(v335, v336, v339);
              v340 = sub_1000BA294(&qword_100BC5FE8);
              v335[*(int *)(v340 + 48)] = v336[*(int *)(v340 + 48)];
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v335, 0, 1, v337);
            }
            v298 = v499;
            v301 = v499;
            v302 = v489;
            v303 = 4;
            goto LABEL_224;
          case 6u:
            v316 = type metadata accessor for PrecipitationTotalPlatterViewModel(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v316 - 8) + 32))(v298, v299, v316);
            v301 = v298;
            v302 = v143;
            v303 = 6;
            goto LABEL_224;
          case 7u:
            v317 = type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
            if (swift_getEnumCaseMultiPayload(v299) == 1)
            {
              v520 = v317;
              v490 = v143;
              *v298 = *v299;
              v318 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
              v509((char *)v298 + v318[5], (char *)v299 + v318[5], v515);
              v319 = v318[6];
              v320 = (_OWORD *)((char *)v298 + v319);
              v321 = (_OWORD *)((char *)v299 + v319);
              v322 = (int *)type metadata accessor for WeatherData(0);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v321, 1, (uint64_t)v322))
              {
                v323 = sub_1000BA294(&qword_100BC3460);
                memcpy(v320, v321, *(_QWORD *)(*(_QWORD *)(v323 - 8) + 64));
              }
              else
              {
                v526 = v299;
                v500 = v298;
                *v320 = *v321;
                v512 = (uint64_t)v320;
                v329 = v322[5];
                v330 = (char *)v320 + v329;
                v331 = (char *)v321 + v329;
                v332 = type metadata accessor for Locale(0);
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v331, 1, v332))
                {
                  v333 = sub_1000BA294(&qword_100BC3340);
                  memcpy(v330, v331, *(_QWORD *)(*(_QWORD *)(v333 - 8) + 64));
                }
                else
                {
                  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v332 - 8) + 32))(v330, v331, v332);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v330, 0, 1, v332);
                }
                v389 = v322[6];
                v390 = v512 + v389;
                v391 = (char *)v321 + v389;
                v392 = type metadata accessor for WeatherDataModel(0);
                (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v392 - 8) + 32))(v390, v391, v392);
                v393 = v322[7];
                v394 = (void *)(v512 + v393);
                v395 = (char *)v321 + v393;
                v396 = sub_1000BA294(&qword_100BC3348);
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v395, 1, v396))
                {
                  v397 = type metadata accessor for WeatherData.CachingState(0);
                  memcpy(v394, v395, *(_QWORD *)(*(_QWORD *)(v397 - 8) + 64));
                }
                else
                {
                  v527((char *)v394, v395, v507);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v394, 0, 1, v396);
                }
                v407 = v322[8];
                v408 = (void *)(v512 + v407);
                v409 = (char *)v321 + v407;
                v410 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
                if (swift_getEnumCaseMultiPayload(v409) == 1)
                {
                  v411 = type metadata accessor for WeatherStatisticsModel(0);
                  (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v411 - 8) + 32))(v408, v409, v411);
                  swift_storeEnumTagMultiPayload(v408, v410, 1);
                }
                else
                {
                  memcpy(v408, v409, *(_QWORD *)(*(_QWORD *)(v410 - 8) + 64));
                }
                v412 = v322[9];
                v413 = (char *)(v512 + v412);
                v414 = (char *)v321 + v412;
                v415 = type metadata accessor for WeatherDataOverrides(0);
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v414, 1, v415))
                {
                  v416 = sub_1000BA294(&qword_100BC3350);
                  memcpy(v413, v414, *(_QWORD *)(*(_QWORD *)(v416 - 8) + 64));
                }
                else
                {
                  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v414, 1, v507))
                  {
                    v427 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                    memcpy(v413, v414, *(_QWORD *)(*(_QWORD *)(v427 - 8) + 64));
                  }
                  else
                  {
                    v527(v413, v414, v507);
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v413, 0, 1, v507);
                  }
                  v429 = *(int *)(v415 + 20);
                  v430 = &v413[v429];
                  v431 = &v414[v429];
                  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v431, 1, v507))
                  {
                    v432 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                    memcpy(v430, v431, *(_QWORD *)(*(_QWORD *)(v432 - 8) + 64));
                  }
                  else
                  {
                    v527(v430, v431, v507);
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v430, 0, 1, v507);
                  }
                  v46 = v538;
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v413, 0, 1, v415);
                }
                v298 = v500;
                v299 = v526;
                _s7Weather24LocationCompositionStateOwst_0(v512, 0, 1, (uint64_t)v322);
              }
              v143 = v490;
              *(_OWORD *)((char *)v298 + v318[7]) = *(_OWORD *)((char *)v299 + v318[7]);
              v437 = v318[8];
              v438 = v299;
              v439 = (char *)v298 + v437;
              v440 = v298;
              v441 = (char *)v438 + v437;
              v442 = type metadata accessor for WeatherMapOverlayKind(0);
              v443 = v441;
              v298 = v440;
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v442 - 8) + 32))(v439, v443, v442);
              *((_BYTE *)v440 + v318[9]) = *((_BYTE *)v438 + v318[9]);
              swift_storeEnumTagMultiPayload(v440, v520, 1);
              v4 = v534;
              v5 = v536;
            }
            else
            {
              memcpy(v298, v299, *(_QWORD *)(*(_QWORD *)(v317 - 8) + 64));
            }
            v301 = v298;
            v302 = v143;
            v303 = 7;
LABEL_224:
            swift_storeEnumTagMultiPayload(v301, v302, v303);
            break;
          default:
            memcpy(v298, v299, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
            break;
        }
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v298, 0, 1, v143);
      }
      *((_BYTE *)v131 + v133[9]) = *((_BYTE *)v132 + v133[9]);
      *((_BYTE *)v131 + v133[10]) = *((_BYTE *)v132 + v133[10]);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v131, 0, 1, (uint64_t)v133);
    }
    v444 = v46;
    v445 = v531;
    v446 = 0;
LABEL_237:
    swift_storeEnumTagMultiPayload(v444, v445, v446);
    v3 = v533;
    goto LABEL_238;
  }
  memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
LABEL_238:
  *(_BYTE *)(v5 + *(int *)(v3 + 28)) = *(_BYTE *)(v4 + *(int *)(v3 + 28));
  return v5;
}

_QWORD *sub_10075D6E0(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  int EnumCaseMultiPayload;
  __int128 v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  _OWORD *v47;
  _OWORD *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  int *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  int *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  _OWORD *v79;
  uint64_t v80;
  void (*v81)(char *, char *, uint64_t);
  uint64_t v82;
  _OWORD *v83;
  uint64_t v84;
  _OWORD *v85;
  _OWORD *v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, char *, uint64_t);
  __int128 v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(char *, char *, uint64_t);
  char *v111;
  void (*v112)(char *, char *, uint64_t);
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  void (*v118)(char *, char *, uint64_t);
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _OWORD *v131;
  _OWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  _OWORD *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _OWORD *v155;
  _OWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _OWORD *v165;
  _OWORD *v166;
  uint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  void (*v185)(char *, char *, uint64_t);
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _OWORD *v190;
  int *v191;
  uint64_t v192;
  _OWORD *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  void (*v206)(char *, char *, uint64_t);
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _OWORD *v211;
  int *v212;
  uint64_t v213;
  uint64_t v214;
  void (*v215)(char *, char *, uint64_t);
  uint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  void (*v225)(char *, char *, uint64_t);
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  _OWORD *v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  _OWORD *v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  char *v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  char *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  _OWORD *v304;
  _OWORD *v305;
  uint64_t v306;
  uint64_t v307;
  _OWORD *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  __int128 v312;
  uint64_t v313;
  _OWORD *v314;
  char *v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  char *v319;
  uint64_t v320;
  uint64_t v321;
  void (*v322)(char *, char *, uint64_t);
  uint64_t v323;
  uint64_t v324;
  int *v325;
  uint64_t v326;
  _OWORD *v327;
  int *v328;
  uint64_t v329;
  _OWORD *v330;
  void (*v331)(char *, char *, uint64_t);
  uint64_t v332;
  char *v333;
  char *v334;
  uint64_t v335;
  uint64_t v336;
  char *v337;
  char *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  _OWORD *v342;
  char *v343;
  char *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  char *v350;
  uint64_t v351;
  char *v352;
  uint64_t v353;
  _OWORD *v354;
  _OWORD *v355;
  uint64_t v356;
  uint64_t v357;
  _OWORD *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  __int128 v362;
  uint64_t v363;
  _OWORD *v364;
  char *v365;
  char *v366;
  uint64_t v367;
  uint64_t v368;
  char *v369;
  uint64_t v370;
  uint64_t v371;
  void (*v372)(char *, char *, uint64_t);
  uint64_t v373;
  uint64_t v374;
  int *v375;
  uint64_t v376;
  _OWORD *v377;
  int *v378;
  uint64_t v379;
  _OWORD *v380;
  void (*v381)(char *, char *, uint64_t);
  uint64_t v382;
  char *v383;
  char *v384;
  uint64_t v385;
  uint64_t v386;
  char *v387;
  char *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  _OWORD *v392;
  char *v393;
  char *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  char *v400;
  char *v401;
  uint64_t v402;
  uint64_t v403;
  char *v404;
  char *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  char *v409;
  char *v410;
  uint64_t v411;
  uint64_t v412;
  char *v413;
  char *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  char *v418;
  char *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  char *v423;
  char *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  char *v428;
  char *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  char *v433;
  char *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  char *v440;
  uint64_t v441;
  uint64_t v442;
  int *v443;
  _OWORD *v444;
  char *v445;
  uint64_t v446;
  char *v447;
  _OWORD *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  char *v452;
  uint64_t v453;
  uint64_t v454;
  int *v455;
  _OWORD *v456;
  char *v457;
  uint64_t v458;
  char *v459;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  void *v465;
  void *v466;
  char *v467;
  int *v468;
  void (*v469)(char *, char *, uint64_t);
  char *__dst;
  int *__dsta;
  _OWORD *__dstb;
  void (*__dstc)(char *, char *, uint64_t);
  _OWORD *__dstd;
  int *v475;
  char *v476;
  int *v477;
  _OWORD *v478;
  void (*v479)(char *, char *, uint64_t);
  void (*v480)(char *, char *, uint64_t);
  _OWORD *v481;
  uint64_t v482;
  _OWORD *v483;
  uint64_t v484;
  char *v485;
  char *v486;
  uint64_t v487;
  uint64_t v488;
  void *v489;
  void *v490;
  void *v491;
  _OWORD *v492;
  _OWORD *v493;
  void *v494;
  void *v495;
  void *v496;
  char *v497;
  int *v498;
  int *v499;
  void *v500;
  char *v501;
  char *v502;
  char *v503;
  void *v504;
  char *v505;
  void (*v506)(char *, char *, uint64_t);
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  int *v513;
  void (*v514)(char *, char *, uint64_t);
  void (*v515)(char *, char *);
  _OWORD *v516;
  _OWORD *v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  int *v522;
  _OWORD *v523;
  _OWORD *v524;
  void (*v525)(char *, char *);
  int *v526;
  int *v527;
  char *v528;
  _OWORD *v529;
  void (*v530)(char *, char *, uint64_t);
  _OWORD *v531;
  uint64_t v532;
  void (*v533)(char *, char *, uint64_t);
  _OWORD *v534;
  _OWORD *v535;
  uint64_t v536;
  void (*v537)(char *, char *, uint64_t);
  void *v538;
  int *v539;
  char *v540;
  void (*v541)(char *, char *, uint64_t);
  _QWORD *v542;
  _QWORD *v543;
  uint64_t v544;
  uint64_t v545;
  _OWORD *v546;
  _OWORD *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  int *v551;
  _QWORD *v552;
  _QWORD *v553;
  uint64_t v554;
  int *v555;
  uint64_t v556;
  char *v557;
  _OWORD *v558;

  v4 = a2;
  v5 = a1;
  *a1 = *a2;
  swift_release();
  v5[1] = v4[1];
  swift_release();
  *((_OWORD *)v5 + 1) = *((_OWORD *)v4 + 1);
  *((_BYTE *)v5 + 32) = *((_BYTE *)v4 + 32);
  v6 = a3[5];
  v7 = (char *)v5 + v6;
  v8 = (char *)v4 + v6;
  *(_QWORD *)((char *)v5 + v6) = *(_QWORD *)((char *)v4 + v6);
  swift_release();
  *((_QWORD *)v7 + 1) = *((_QWORD *)v8 + 1);
  swift_release();
  v9 = *(int *)(sub_1000BA294(&qword_100C02ED0) + 32);
  v10 = &v7[v9];
  v11 = &v8[v9];
  v12 = type metadata accessor for DetailChartDataElement(0);
  v13 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v12);
  v14 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v15 = *(_QWORD *)(v12 - 8);
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v12);
LABEL_6:
    v16 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v10, v11, v12);
LABEL_7:
  if (v5 != v4)
  {
    v17 = a3[6];
    v18 = (_OWORD *)((char *)v5 + v17);
    v19 = (_OWORD *)((char *)v4 + v17);
    sub_1000215BC((uint64_t)v5 + v17, type metadata accessor for SunriseSunsetDetailViewModel);
    v20 = type metadata accessor for SunriseSunsetDetailViewModel(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v19);
    if (EnumCaseMultiPayload == 1)
    {
      v543 = v5;
      v551 = a3;
      v553 = v4;
      v550 = v20;
      v58 = v19[1];
      *v18 = *v19;
      v18[1] = v58;
      *((_BYTE *)v18 + 32) = *((_BYTE *)v19 + 32);
      v59 = (int *)_s10PolarModelVMa(0);
      v60 = v59[7];
      v61 = (char *)v18 + v60;
      v62 = (char *)v19 + v60;
      v63 = type metadata accessor for Date(0);
      v533 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 32);
      v538 = (void *)v63;
      v533(v61, v62, v63);
      v64 = v59[8];
      v65 = (char *)v18 + v64;
      v66 = (char *)v19 + v64;
      v67 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 32))(v65, v66, v67);
      v68 = v59[9];
      v69 = (char *)v18 + v68;
      v70 = (char *)v19 + v68;
      v71 = type metadata accessor for AttributedString(0);
      v515 = *(void (**)(char *, char *))(*(_QWORD *)(v71 - 8) + 32);
      v520 = v71;
      v515(v69, v70);
      *(_QWORD *)((char *)v18 + v59[10]) = *(_QWORD *)((char *)v19 + v59[10]);
      *(_OWORD *)((char *)v18 + v59[11]) = *(_OWORD *)((char *)v19 + v59[11]);
      v72 = v59[12];
      v73 = (char *)v18 + v72;
      v74 = (char *)v19 + v72;
      *(_QWORD *)((char *)v18 + v72) = *(_QWORD *)((char *)v19 + v72);
      v75 = (int *)_s14ChartViewModelVMa(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(&v73[v75[5]], &v74[v75[5]], v12);
      v76 = v75[6];
      v77 = &v73[v76];
      v78 = &v74[v76];
      v79 = v19;
      v80 = type metadata accessor for Location(0);
      v81 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 32);
      v81(v77, v78, v80);
      *(_OWORD *)&v73[v75[7]] = *(_OWORD *)&v74[v75[7]];
      *(_QWORD *)&v73[v75[8]] = *(_QWORD *)&v74[v75[8]];
      *(_QWORD *)&v73[v75[9]] = *(_QWORD *)&v74[v75[9]];
      *(_QWORD *)&v73[v75[10]] = *(_QWORD *)&v74[v75[10]];
      v533(&v73[v75[11]], &v74[v75[11]], (uint64_t)v538);
      *(_QWORD *)&v73[v75[12]] = *(_QWORD *)&v74[v75[12]];
      v506 = v81;
      v512 = v80;
      v82 = v80;
      v83 = v79;
      v81((char *)v18 + v59[13], (char *)v79 + v59[13], v82);
      *(_QWORD *)((char *)v18 + v59[15]) = *(_QWORD *)((char *)v79 + v59[15]);
      v84 = v59[16];
      v85 = (_OWORD *)((char *)v18 + v84);
      v86 = (_OWORD *)((char *)v79 + v84);
      v87 = type metadata accessor for DetailComponentContainerViewModel(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v86, 1, v87))
      {
        v88 = sub_1000BA294(&qword_100BC68A0);
        memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
        v4 = v553;
        v5 = v543;
      }
      else
      {
        v558 = v18;
        v100 = v86[1];
        *v85 = *v86;
        v85[1] = v100;
        v526 = (int *)v87;
        v101 = *(int *)(v87 + 20);
        v102 = (char *)v85 + v101;
        v103 = (char *)v86 + v101;
        v104 = type metadata accessor for NewsArticleComponentViewModel(0);
        if (swift_getEnumCaseMultiPayload(v103) == 1)
        {
          v490 = (void *)v104;
          *(_OWORD *)v102 = *(_OWORD *)v103;
          v499 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
          v105 = v499[5];
          v106 = &v102[v105];
          v107 = &v103[v105];
          v108 = type metadata accessor for URL(0);
          v4 = v553;
          v5 = v543;
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v107, 1, v108))
          {
            v109 = sub_1000BA294(&qword_100BD4280);
            memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
            v110 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v108 - 8) + 32);
          }
          else
          {
            v117 = v107;
            v118 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v108 - 8) + 32);
            v118(v106, v117, v108);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v106, 0, 1, v108);
            v110 = v118;
          }
          *(_OWORD *)&v102[v499[6]] = *(_OWORD *)&v103[v499[6]];
          v480 = v110;
          v110(&v102[v499[7]], &v103[v499[7]], v108);
          v119 = v499[8];
          v120 = &v102[v119];
          v121 = &v103[v119];
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v103[v119], 1, v108))
          {
            v122 = sub_1000BA294(&qword_100BD4280);
            memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
          }
          else
          {
            v480(v120, v121, v108);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v120, 0, 1, v108);
          }
          v102[v499[9]] = v103[v499[9]];
          swift_storeEnumTagMultiPayload(v102, v490, 1);
        }
        else
        {
          memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
          v4 = v553;
          v5 = v543;
        }
        v87 = (uint64_t)v526;
        v147 = v526[6];
        v148 = (char *)v85 + v147;
        v149 = (char *)v86 + v147;
        v150 = type metadata accessor for DetailComponentAction(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v149, 1, v150))
        {
          v151 = sub_1000BA294(&qword_100BD3100);
          memcpy(v148, v149, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
        }
        else
        {
          v152 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v152 - 8) + 32))(v148, v149, v152);
          v153 = sub_1000BA294(&qword_100BC5FE8);
          v148[*(int *)(v153 + 48)] = v149[*(int *)(v153 + 48)];
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v148, 0, 1, v150);
        }
        v18 = v558;
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v85, 0, 1, (uint64_t)v526);
      }
      v154 = *(int *)(sub_1000BA294(&qword_100BF18A0) + 48);
      v155 = (_OWORD *)((char *)v18 + v154);
      v156 = (_OWORD *)((char *)v83 + v154);
      v157 = type metadata accessor for ConditionDetailPlatterViewModel(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v156, 1, v157))
      {
        v158 = sub_1000BA294(&qword_100BC68B8);
        memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v158 - 8) + 64));
      }
      else
      {
        *v155 = *v156;
        *((_BYTE *)v155 + 16) = *((_BYTE *)v156 + 16);
        *(_OWORD *)((char *)v155 + 24) = *(_OWORD *)((char *)v156 + 24);
        v545 = v157;
        v159 = *(int *)(v157 + 24);
        v160 = (char *)v155 + v159;
        v161 = (char *)v156 + v159;
        v162 = type metadata accessor for WeatherDescription(0);
        v527 = (int *)v87;
        v500 = (void *)v162;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v161, 1, v162))
        {
          v163 = sub_1000BA294(&qword_100BC3368);
          memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v162 - 8) + 32))(v160, v161, v162);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v160, 0, 1, v162);
        }
        v164 = *(int *)(v545 + 28);
        v165 = (_OWORD *)((char *)v155 + v164);
        v166 = (_OWORD *)((char *)v156 + v164);
        v167 = type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
        switch(swift_getEnumCaseMultiPayload(v166))
        {
          case 0u:
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v162 - 8) + 32))(v165, v166, v162);
            v168 = v165;
            v169 = v167;
            v170 = 0;
            goto LABEL_172;
          case 2u:
            ((void (*)(_OWORD *, _OWORD *, uint64_t))v515)(v165, v166, v520);
            v193 = v165;
            v194 = v167;
            v195 = 2;
            goto LABEL_75;
          case 3u:
            v196 = sub_1000BA294(&qword_100BD30F8);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v196 - 8) + 32))(v165, v166, v196);
            v193 = v165;
            v194 = v167;
            v195 = 3;
            goto LABEL_75;
          case 4u:
            v482 = v167;
            v197 = v166[1];
            *v165 = *v166;
            v165[1] = v197;
            v198 = v527[5];
            v199 = (char *)v165 + v198;
            v200 = (char *)v166 + v198;
            v201 = type metadata accessor for NewsArticleComponentViewModel(0);
            v492 = v165;
            if (swift_getEnumCaseMultiPayload(v200) == 1)
            {
              __dstb = v166;
              *(_OWORD *)v199 = *(_OWORD *)v200;
              v477 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
              v202 = v477[5];
              v467 = &v199[v202];
              v203 = &v200[v202];
              v204 = type metadata accessor for URL(0);
              v462 = v201;
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v203, 1, v204))
              {
                v205 = sub_1000BA294(&qword_100BD4280);
                memcpy(v467, v203, *(_QWORD *)(*(_QWORD *)(v205 - 8) + 64));
                v206 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v204 - 8) + 32);
              }
              else
              {
                v225 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v204 - 8) + 32);
                v225(v467, v203, v204);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v467, 0, 1, v204);
                v206 = v225;
              }
              *(_OWORD *)&v199[v477[6]] = *(_OWORD *)&v200[v477[6]];
              v469 = v206;
              v206(&v199[v477[7]], &v200[v477[7]], v204);
              v226 = v477[8];
              v227 = &v199[v226];
              v228 = &v200[v226];
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v200[v226], 1, v204))
              {
                v229 = sub_1000BA294(&qword_100BD4280);
                memcpy(v227, v228, *(_QWORD *)(*(_QWORD *)(v229 - 8) + 64));
              }
              else
              {
                v469(v227, v228, v204);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v227, 0, 1, v204);
              }
              v165 = v492;
              v166 = __dstb;
              v199[v477[9]] = v200[v477[9]];
              swift_storeEnumTagMultiPayload(v199, v462, 1);
            }
            else
            {
              memcpy(v199, v200, *(_QWORD *)(*(_QWORD *)(v201 - 8) + 64));
            }
            v242 = v527[6];
            v243 = (char *)v165 + v242;
            v244 = (char *)v166 + v242;
            v245 = type metadata accessor for DetailComponentAction(0);
            v162 = (uint64_t)v500;
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v244, 1, v245))
            {
              v246 = sub_1000BA294(&qword_100BD3100);
              memcpy(v243, v244, *(_QWORD *)(*(_QWORD *)(v246 - 8) + 64));
            }
            else
            {
              v247 = type metadata accessor for URL(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v247 - 8) + 32))(v243, v244, v247);
              v248 = sub_1000BA294(&qword_100BC5FE8);
              v243[*(int *)(v248 + 48)] = v244[*(int *)(v248 + 48)];
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v243, 0, 1, v245);
            }
            v167 = v482;
            v168 = v492;
            v169 = v482;
            v170 = 4;
            goto LABEL_172;
          case 6u:
            v207 = type metadata accessor for PrecipitationTotalPlatterViewModel(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v207 - 8) + 32))(v165, v166, v207);
            v193 = v165;
            v194 = v167;
            v195 = 6;
LABEL_75:
            swift_storeEnumTagMultiPayload(v193, v194, v195);
            break;
          case 7u:
            v208 = type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
            if (swift_getEnumCaseMultiPayload(v166) == 1)
            {
              v463 = v208;
              *v165 = *v166;
              v209 = type metadata accessor for ConditionDetailMapViewModel(0);
              v506((char *)v165 + *(int *)(v209 + 20), (char *)v166 + *(int *)(v209 + 20), v512);
              v468 = (int *)v209;
              v210 = *(int *)(v209 + 24);
              v478 = (_OWORD *)((char *)v165 + v210);
              v211 = (_OWORD *)((char *)v166 + v210);
              v212 = (int *)type metadata accessor for WeatherData(0);
              v493 = v165;
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v211, 1, (uint64_t)v212))
              {
                v213 = sub_1000BA294(&qword_100BC3460);
                memcpy(v478, v211, *(_QWORD *)(*(_QWORD *)(v213 - 8) + 64));
                v162 = (uint64_t)v500;
              }
              else
              {
                __dstd = v166;
                v484 = v167;
                *v478 = *v211;
                v461 = (uint64_t)v212;
                v230 = v212[5];
                v231 = (char *)v478 + v230;
                v232 = (char *)v211 + v230;
                v233 = type metadata accessor for Locale(0);
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v232, 1, v233))
                {
                  v234 = sub_1000BA294(&qword_100BC3340);
                  memcpy(v231, v232, *(_QWORD *)(*(_QWORD *)(v234 - 8) + 64));
                }
                else
                {
                  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v233 - 8) + 32))(v231, v232, v233);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v231, 0, 1, v233);
                }
                v260 = v212[6];
                v261 = (char *)v478 + v260;
                v262 = (char *)v211 + v260;
                v263 = type metadata accessor for WeatherDataModel(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v263 - 8) + 32))(v261, v262, v263);
                v264 = v212[7];
                v265 = (char *)v478 + v264;
                v266 = v211;
                v267 = (char *)v211 + v264;
                v268 = sub_1000BA294(&qword_100BC3348);
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v267, 1, v268))
                {
                  v269 = type metadata accessor for WeatherData.CachingState(0);
                  memcpy(v265, v267, *(_QWORD *)(*(_QWORD *)(v269 - 8) + 64));
                  v270 = (uint64_t)v538;
                }
                else
                {
                  v270 = (uint64_t)v538;
                  v533(v265, v267, (uint64_t)v538);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v265, 0, 1, v268);
                }
                v281 = *(int *)(v461 + 32);
                v282 = (char *)v478 + v281;
                v283 = (char *)v266 + v281;
                v284 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
                if (swift_getEnumCaseMultiPayload(v283) == 1)
                {
                  v285 = type metadata accessor for WeatherStatisticsModel(0);
                  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v285 - 8) + 32))(v282, v283, v285);
                  swift_storeEnumTagMultiPayload(v282, v284, 1);
                }
                else
                {
                  memcpy(v282, v283, *(_QWORD *)(*(_QWORD *)(v284 - 8) + 64));
                }
                v286 = *(int *)(v461 + 36);
                v287 = (char *)v478 + v286;
                v288 = (char *)v266 + v286;
                v289 = type metadata accessor for WeatherDataOverrides(0);
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v288, 1, v289))
                {
                  v290 = sub_1000BA294(&qword_100BC3350);
                  memcpy(v287, v288, *(_QWORD *)(*(_QWORD *)(v290 - 8) + 64));
                }
                else
                {
                  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v288, 1, v270))
                  {
                    v292 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                    memcpy(v287, v288, *(_QWORD *)(*(_QWORD *)(v292 - 8) + 64));
                  }
                  else
                  {
                    v533(v287, v288, v270);
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v287, 0, 1, v270);
                  }
                  v297 = *(int *)(v289 + 20);
                  v298 = &v287[v297];
                  v299 = &v288[v297];
                  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v299, 1, (uint64_t)v538))
                  {
                    v300 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                    memcpy(v298, v299, *(_QWORD *)(*(_QWORD *)(v300 - 8) + 64));
                  }
                  else
                  {
                    v533(v298, v299, (uint64_t)v538);
                    v4 = v553;
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v298, 0, 1, (uint64_t)v538);
                  }
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v287, 0, 1, v289);
                }
                v167 = v484;
                v162 = (uint64_t)v500;
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v478, 0, 1, v461);
                v165 = v493;
                v166 = __dstd;
              }
              *(_OWORD *)((char *)v165 + v468[7]) = *(_OWORD *)((char *)v166 + v468[7]);
              v349 = v468[8];
              v350 = (char *)v165 + v349;
              v486 = (char *)v166 + v349;
              v351 = type metadata accessor for WeatherMapOverlayKind(0);
              v352 = v350;
              v165 = v493;
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v351 - 8) + 32))(v352, v486, v351);
              *((_BYTE *)v493 + v468[9]) = *((_BYTE *)v166 + v468[9]);
              swift_storeEnumTagMultiPayload(v493, v463, 1);
            }
            else
            {
              memcpy(v165, v166, *(_QWORD *)(*(_QWORD *)(v208 - 8) + 64));
            }
            v168 = v165;
            v169 = v167;
            v170 = 7;
LABEL_172:
            swift_storeEnumTagMultiPayload(v168, v169, v170);
            break;
          default:
            memcpy(v165, v166, *(_QWORD *)(*(_QWORD *)(v167 - 8) + 64));
            break;
        }
        v353 = *(int *)(v545 + 32);
        v354 = (_OWORD *)((char *)v155 + v353);
        v355 = (_OWORD *)((char *)v156 + v353);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v156 + v353, 1, v167))
        {
          v356 = sub_1000BA294(&qword_100BD3108);
          memcpy(v354, v355, *(_QWORD *)(*(_QWORD *)(v356 - 8) + 64));
          v357 = v545;
        }
        else
        {
          switch(swift_getEnumCaseMultiPayload(v355))
          {
            case 0u:
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v162 - 8) + 32))(v354, v355, v162);
              v358 = v354;
              v359 = v167;
              v360 = 0;
              goto LABEL_242;
            case 2u:
              ((void (*)(_OWORD *, _OWORD *, uint64_t))v515)(v354, v355, v520);
              v358 = v354;
              v359 = v167;
              v360 = 2;
              goto LABEL_242;
            case 3u:
              v361 = sub_1000BA294(&qword_100BD30F8);
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v361 - 8) + 32))(v354, v355, v361);
              v358 = v354;
              v359 = v167;
              v360 = 3;
              goto LABEL_242;
            case 4u:
              v487 = v167;
              v362 = v355[1];
              *v354 = *v355;
              v354[1] = v362;
              v363 = v527[5];
              v364 = v355;
              v365 = (char *)v354 + v363;
              v523 = v364;
              v366 = (char *)v364 + v363;
              v367 = type metadata accessor for NewsArticleComponentViewModel(0);
              if (swift_getEnumCaseMultiPayload(v366) == 1)
              {
                v516 = v354;
                *(_OWORD *)v365 = *(_OWORD *)v366;
                v555 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
                v368 = v555[5];
                v540 = &v365[v368];
                v369 = &v366[v368];
                v370 = type metadata accessor for URL(0);
                v536 = v367;
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v369, 1, v370))
                {
                  v371 = sub_1000BA294(&qword_100BD4280);
                  memcpy(v540, v369, *(_QWORD *)(*(_QWORD *)(v371 - 8) + 64));
                  v372 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v370 - 8) + 32);
                }
                else
                {
                  v381 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v370 - 8) + 32);
                  v381(v540, v369, v370);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v540, 0, 1, v370);
                  v372 = v381;
                }
                *(_OWORD *)&v365[v555[6]] = *(_OWORD *)&v366[v555[6]];
                v541 = v372;
                v372(&v365[v555[7]], &v366[v555[7]], v370);
                v382 = v555[8];
                v383 = &v365[v382];
                v384 = &v366[v382];
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v366[v382], 1, v370))
                {
                  v385 = sub_1000BA294(&qword_100BD4280);
                  memcpy(v383, v384, *(_QWORD *)(*(_QWORD *)(v385 - 8) + 64));
                }
                else
                {
                  v541(v383, v384, v370);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v383, 0, 1, v370);
                }
                v365[v555[9]] = v366[v555[9]];
                swift_storeEnumTagMultiPayload(v365, v536, 1);
                v354 = v516;
              }
              else
              {
                memcpy(v365, v366, *(_QWORD *)(*(_QWORD *)(v367 - 8) + 64));
              }
              v391 = v527[6];
              v392 = v354;
              v393 = (char *)v354 + v391;
              v394 = (char *)v523 + v391;
              v395 = type metadata accessor for DetailComponentAction(0);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v394, 1, v395))
              {
                v396 = sub_1000BA294(&qword_100BD3100);
                memcpy(v393, v394, *(_QWORD *)(*(_QWORD *)(v396 - 8) + 64));
              }
              else
              {
                v397 = type metadata accessor for URL(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v397 - 8) + 32))(v393, v394, v397);
                v398 = sub_1000BA294(&qword_100BC5FE8);
                v393[*(int *)(v398 + 48)] = v394[*(int *)(v398 + 48)];
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v393, 0, 1, v395);
              }
              v354 = v392;
              v358 = v392;
              v167 = v487;
              v359 = v487;
              v360 = 4;
              goto LABEL_242;
            case 6u:
              v373 = type metadata accessor for PrecipitationTotalPlatterViewModel(0);
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v373 - 8) + 32))(v354, v355, v373);
              v358 = v354;
              v359 = v167;
              v360 = 6;
              goto LABEL_242;
            case 7u:
              v374 = type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
              if (swift_getEnumCaseMultiPayload(v355) == 1)
              {
                v504 = (void *)v374;
                *v354 = *v355;
                v375 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
                v506((char *)v354 + v375[5], (char *)v355 + v375[5], v512);
                v376 = v375[6];
                v524 = v355;
                v531 = (_OWORD *)((char *)v354 + v376);
                v377 = (_OWORD *)((char *)v355 + v376);
                v378 = (int *)type metadata accessor for WeatherData(0);
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v377, 1, (uint64_t)v378))
                {
                  v379 = sub_1000BA294(&qword_100BC3460);
                  memcpy(v531, v377, *(_QWORD *)(*(_QWORD *)(v379 - 8) + 64));
                  v380 = v524;
                }
                else
                {
                  v513 = v375;
                  v517 = v354;
                  v488 = v167;
                  *v531 = *v377;
                  v386 = v378[5];
                  v387 = (char *)v531 + v386;
                  v388 = (char *)v377 + v386;
                  v389 = type metadata accessor for Locale(0);
                  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v388, 1, v389))
                  {
                    v390 = sub_1000BA294(&qword_100BC3340);
                    memcpy(v387, v388, *(_QWORD *)(*(_QWORD *)(v390 - 8) + 64));
                  }
                  else
                  {
                    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v389 - 8) + 32))(v387, v388, v389);
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v387, 0, 1, v389);
                  }
                  v408 = v378[6];
                  v409 = (char *)v531 + v408;
                  v410 = (char *)v377 + v408;
                  v411 = type metadata accessor for WeatherDataModel(0);
                  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v411 - 8) + 32))(v409, v410, v411);
                  v412 = v378[7];
                  v413 = (char *)v531 + v412;
                  v414 = (char *)v377 + v412;
                  v415 = sub_1000BA294(&qword_100BC3348);
                  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v414, 1, v415))
                  {
                    v416 = type metadata accessor for WeatherData.CachingState(0);
                    memcpy(v413, v414, *(_QWORD *)(*(_QWORD *)(v416 - 8) + 64));
                  }
                  else
                  {
                    v533(v413, v414, (uint64_t)v538);
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v413, 0, 1, v415);
                  }
                  v427 = v378[8];
                  v428 = (char *)v531 + v427;
                  v429 = (char *)v377 + v427;
                  v430 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
                  if (swift_getEnumCaseMultiPayload(v429) == 1)
                  {
                    v431 = type metadata accessor for WeatherStatisticsModel(0);
                    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v431 - 8) + 32))(v428, v429, v431);
                    swift_storeEnumTagMultiPayload(v428, v430, 1);
                  }
                  else
                  {
                    memcpy(v428, v429, *(_QWORD *)(*(_QWORD *)(v430 - 8) + 64));
                  }
                  v510 = (uint64_t)v378;
                  v432 = v378[9];
                  v433 = (char *)v531 + v432;
                  v434 = (char *)v377 + v432;
                  v435 = type metadata accessor for WeatherDataOverrides(0);
                  v375 = v513;
                  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v434, 1, v435))
                  {
                    v436 = sub_1000BA294(&qword_100BC3350);
                    memcpy(v433, v434, *(_QWORD *)(*(_QWORD *)(v436 - 8) + 64));
                    v4 = v553;
                  }
                  else
                  {
                    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v434, 1, (uint64_t)v538))
                    {
                      v438 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                      memcpy(v433, v434, *(_QWORD *)(*(_QWORD *)(v438 - 8) + 64));
                    }
                    else
                    {
                      v533(v433, v434, (uint64_t)v538);
                      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v433, 0, 1, (uint64_t)v538);
                    }
                    v451 = *(int *)(v435 + 20);
                    v497 = &v433[v451];
                    v452 = &v434[v451];
                    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v452, 1, (uint64_t)v538))
                    {
                      v453 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                      memcpy(v497, v452, *(_QWORD *)(*(_QWORD *)(v453 - 8) + 64));
                    }
                    else
                    {
                      v533(v497, v452, (uint64_t)v538);
                      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v497, 0, 1, (uint64_t)v538);
                    }
                    v4 = v553;
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v433, 0, 1, v435);
                  }
                  v380 = v524;
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v531, 0, 1, v510);
                  v167 = v488;
                  v354 = v517;
                }
                *(_OWORD *)((char *)v354 + v375[7]) = *(_OWORD *)((char *)v380 + v375[7]);
                v454 = v375[8];
                v455 = v375;
                v456 = v354;
                v457 = (char *)v354 + v454;
                v556 = (uint64_t)v380 + v454;
                v458 = type metadata accessor for WeatherMapOverlayKind(0);
                v459 = v457;
                v354 = v456;
                (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v458 - 8) + 32))(v459, v556, v458);
                *((_BYTE *)v456 + v455[9]) = *((_BYTE *)v380 + v455[9]);
                swift_storeEnumTagMultiPayload(v456, v504, 1);
              }
              else
              {
                memcpy(v354, v355, *(_QWORD *)(*(_QWORD *)(v374 - 8) + 64));
              }
              v358 = v354;
              v359 = v167;
              v360 = 7;
LABEL_242:
              swift_storeEnumTagMultiPayload(v358, v359, v360);
              break;
            default:
              memcpy(v354, v355, *(_QWORD *)(*(_QWORD *)(v167 - 8) + 64));
              break;
          }
          v357 = v545;
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v354, 0, 1, v167);
        }
        *((_BYTE *)v155 + *(int *)(v357 + 36)) = *((_BYTE *)v156 + *(int *)(v357 + 36));
        *((_BYTE *)v155 + *(int *)(v357 + 40)) = *((_BYTE *)v156 + *(int *)(v357 + 40));
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v155, 0, 1, v357);
      }
      v448 = v18;
      v449 = v550;
      v450 = 1;
      goto LABEL_246;
    }
    if (!EnumCaseMultiPayload)
    {
      v542 = v5;
      v551 = a3;
      v552 = v4;
      v549 = v20;
      v22 = v19[1];
      *v18 = *v19;
      v18[1] = v22;
      v18[2] = v19[2];
      v23 = (int *)_s11NormalModelVMa(0);
      v24 = v23[7];
      v25 = (char *)v18 + v24;
      v26 = (char *)v19 + v24;
      v557 = (char *)v18;
      v27 = type metadata accessor for Date(0);
      v537 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32);
      v537(v25, v26, v27);
      v537(&v557[v23[8]], (char *)v19 + v23[8], v27);
      v537(&v557[v23[9]], (char *)v19 + v23[9], v27);
      v28 = v23[10];
      v29 = &v557[v28];
      v30 = (char *)v19 + v28;
      v31 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
      v32 = v23[11];
      v33 = &v557[v32];
      v34 = (char *)v19 + v32;
      v35 = type metadata accessor for AttributedString(0);
      v525 = *(void (**)(char *, char *))(*(_QWORD *)(v35 - 8) + 32);
      v532 = v35;
      v525(v33, v34);
      *(_QWORD *)&v557[v23[12]] = *(_QWORD *)((char *)v19 + v23[12]);
      v36 = v23[13];
      v37 = &v557[v36];
      v38 = (char *)v19 + v36;
      *(_QWORD *)&v557[v36] = *(_QWORD *)((char *)v19 + v36);
      v39 = (int *)_s14ChartViewModelVMa(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(&v37[v39[5]], &v38[v39[5]], v12);
      v40 = v39[6];
      v41 = &v37[v40];
      v42 = &v38[v40];
      v43 = type metadata accessor for Location(0);
      v44 = (char *)v19;
      v45 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32);
      v45(v41, v42, v43);
      *(_OWORD *)&v37[v39[7]] = *(_OWORD *)&v38[v39[7]];
      *(_QWORD *)&v37[v39[8]] = *(_QWORD *)&v38[v39[8]];
      *(_QWORD *)&v37[v39[9]] = *(_QWORD *)&v38[v39[9]];
      *(_QWORD *)&v37[v39[10]] = *(_QWORD *)&v38[v39[10]];
      v511 = v27;
      v46 = v27;
      v47 = v557;
      v537(&v37[v39[11]], &v38[v39[11]], v46);
      *(_QWORD *)&v37[v39[12]] = *(_QWORD *)&v38[v39[12]];
      v514 = v45;
      v519 = v43;
      v45(&v557[v23[14]], &v44[v23[14]], v43);
      v48 = v44;
      v49 = v23[15];
      v50 = &v557[v49];
      v51 = &v44[v49];
      v52 = type metadata accessor for SunEvents(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v50, v51, v52);
      *(_QWORD *)&v557[v23[16]] = *(_QWORD *)&v44[v23[16]];
      v53 = v23[18];
      v54 = &v557[v53];
      v55 = &v44[v53];
      v56 = type metadata accessor for DetailComponentContainerViewModel(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v55, 1, v56))
      {
        v57 = sub_1000BA294(&qword_100BC68A0);
        memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
        v4 = v552;
        v5 = v542;
      }
      else
      {
        v89 = *((_OWORD *)v55 + 1);
        *(_OWORD *)v54 = *(_OWORD *)v55;
        *((_OWORD *)v54 + 1) = v89;
        v90 = *(int *)(v56 + 20);
        v91 = &v54[v90];
        v92 = &v55[v90];
        v93 = type metadata accessor for NewsArticleComponentViewModel(0);
        if (swift_getEnumCaseMultiPayload(v92) == 1)
        {
          v489 = (void *)v93;
          v507 = v56;
          *(_OWORD *)v91 = *(_OWORD *)v92;
          v498 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
          v94 = v498[5];
          v95 = &v91[v94];
          v96 = &v92[v94];
          v97 = type metadata accessor for URL(0);
          v4 = v552;
          v5 = v542;
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v96, 1, v97))
          {
            v98 = sub_1000BA294(&qword_100BD4280);
            memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
            v99 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 32);
          }
          else
          {
            v111 = v96;
            v112 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 32);
            v112(v95, v111, v97);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v95, 0, 1, v97);
            v99 = v112;
          }
          *(_OWORD *)&v91[v498[6]] = *(_OWORD *)&v92[v498[6]];
          v479 = v99;
          v99(&v91[v498[7]], &v92[v498[7]], v97);
          v113 = v498[8];
          v114 = &v91[v113];
          v115 = &v92[v113];
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v92[v113], 1, v97))
          {
            v116 = sub_1000BA294(&qword_100BD4280);
            memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
          }
          else
          {
            v479(v114, v115, v97);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v114, 0, 1, v97);
          }
          v56 = v507;
          v47 = v557;
          v91[v498[9]] = v92[v498[9]];
          swift_storeEnumTagMultiPayload(v91, v489, 1);
        }
        else
        {
          memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
          v4 = v552;
          v5 = v542;
        }
        v123 = *(int *)(v56 + 24);
        v124 = &v54[v123];
        v125 = &v55[v123];
        v126 = type metadata accessor for DetailComponentAction(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v125, 1, v126))
        {
          v127 = sub_1000BA294(&qword_100BD3100);
          memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
        }
        else
        {
          v128 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v128 - 8) + 32))(v124, v125, v128);
          v129 = sub_1000BA294(&qword_100BC5FE8);
          v124[*(int *)(v129 + 48)] = v125[*(int *)(v129 + 48)];
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v124, 0, 1, v126);
        }
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v54, 0, 1, v56);
      }
      v130 = *(int *)(sub_1000BA294(&qword_100BF1898) + 48);
      v131 = (_OWORD *)((char *)v47 + v130);
      v132 = (_OWORD *)((char *)v48 + v130);
      v133 = type metadata accessor for ConditionDetailPlatterViewModel(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v132, 1, v133))
      {
        v134 = sub_1000BA294(&qword_100BC68B8);
        memcpy(v131, v132, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
      }
      else
      {
        *v131 = *v132;
        *((_BYTE *)v131 + 16) = *((_BYTE *)v132 + 16);
        *(_OWORD *)((char *)v131 + 24) = *(_OWORD *)((char *)v132 + 24);
        v554 = v133;
        v135 = *(int *)(v133 + 24);
        v136 = (char *)v131 + v135;
        v137 = (char *)v132 + v135;
        v138 = type metadata accessor for WeatherDescription(0);
        v508 = v56;
        v544 = v138;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v137, 1, v138))
        {
          v139 = sub_1000BA294(&qword_100BC3368);
          memcpy(v136, v137, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v138 - 8) + 32))(v136, v137, v138);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v136, 0, 1, v138);
        }
        v140 = *(int *)(v554 + 28);
        v141 = (char *)v131 + v140;
        v142 = (_OWORD *)((char *)v132 + v140);
        v143 = type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
        switch(swift_getEnumCaseMultiPayload(v142))
        {
          case 0u:
            (*(void (**)(char *, _OWORD *, uint64_t))(*(_QWORD *)(v138 - 8) + 32))(v141, v142, v138);
            v144 = v141;
            v145 = v143;
            v146 = 0;
            goto LABEL_139;
          case 2u:
            ((void (*)(char *, _OWORD *, uint64_t))v525)(v141, v142, v532);
            v171 = v141;
            v172 = v143;
            v173 = 2;
            goto LABEL_63;
          case 3u:
            v174 = sub_1000BA294(&qword_100BD30F8);
            (*(void (**)(char *, _OWORD *, uint64_t))(*(_QWORD *)(v174 - 8) + 32))(v141, v142, v174);
            v171 = v141;
            v172 = v143;
            v173 = 3;
            goto LABEL_63;
          case 4u:
            v175 = v142[1];
            *(_OWORD *)v141 = *v142;
            *((_OWORD *)v141 + 1) = v175;
            v176 = *(int *)(v508 + 20);
            v501 = v141;
            v177 = &v141[v176];
            v481 = v142;
            v178 = (char *)v142 + v176;
            v179 = type metadata accessor for NewsArticleComponentViewModel(0);
            v491 = (void *)v143;
            if (swift_getEnumCaseMultiPayload(v178) == 1)
            {
              *(_OWORD *)v177 = *(_OWORD *)v178;
              v180 = type metadata accessor for NewsArticleComponentContentViewModel(0);
              v181 = *(int *)(v180 + 20);
              __dst = &v177[v181];
              v475 = (int *)v180;
              v182 = &v178[v181];
              v183 = type metadata accessor for URL(0);
              v465 = (void *)v179;
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v182, 1, v183))
              {
                v184 = sub_1000BA294(&qword_100BD4280);
                memcpy(__dst, v182, *(_QWORD *)(*(_QWORD *)(v184 - 8) + 64));
                v185 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v183 - 8) + 32);
              }
              else
              {
                v215 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v183 - 8) + 32);
                v215(__dst, v182, v183);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v183);
                v185 = v215;
              }
              *(_OWORD *)&v177[v475[6]] = *(_OWORD *)&v178[v475[6]];
              __dstc = v185;
              v185(&v177[v475[7]], &v178[v475[7]], v183);
              v216 = v475[8];
              v217 = &v177[v216];
              v218 = &v178[v216];
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v178[v216], 1, v183))
              {
                v219 = sub_1000BA294(&qword_100BD4280);
                memcpy(v217, v218, *(_QWORD *)(*(_QWORD *)(v219 - 8) + 64));
              }
              else
              {
                __dstc(v217, v218, v183);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v217, 0, 1, v183);
              }
              v214 = v508;
              v177[v475[9]] = v178[v475[9]];
              swift_storeEnumTagMultiPayload(v177, v465, 1);
            }
            else
            {
              memcpy(v177, v178, *(_QWORD *)(*(_QWORD *)(v179 - 8) + 64));
              v214 = v508;
            }
            v235 = *(int *)(v214 + 24);
            v236 = &v501[v235];
            v237 = (char *)v481 + v235;
            v238 = type metadata accessor for DetailComponentAction(0);
            v138 = v544;
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v237, 1, v238))
            {
              v239 = sub_1000BA294(&qword_100BD3100);
              memcpy(v236, v237, *(_QWORD *)(*(_QWORD *)(v239 - 8) + 64));
            }
            else
            {
              v240 = type metadata accessor for URL(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v240 - 8) + 32))(v236, v237, v240);
              v241 = sub_1000BA294(&qword_100BC5FE8);
              v236[*(int *)(v241 + 48)] = v237[*(int *)(v241 + 48)];
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v236, 0, 1, v238);
            }
            v143 = (uint64_t)v491;
            v144 = v501;
            v145 = (uint64_t)v491;
            v146 = 4;
            goto LABEL_139;
          case 6u:
            v186 = type metadata accessor for PrecipitationTotalPlatterViewModel(0);
            (*(void (**)(char *, _OWORD *, uint64_t))(*(_QWORD *)(v186 - 8) + 32))(v141, v142, v186);
            v171 = v141;
            v172 = v143;
            v173 = 6;
LABEL_63:
            swift_storeEnumTagMultiPayload(v171, v172, v173);
            break;
          case 7u:
            v187 = type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
            if (swift_getEnumCaseMultiPayload(v142) == 1)
            {
              v466 = (void *)v187;
              *(_OWORD *)v141 = *v142;
              v188 = type metadata accessor for ConditionDetailMapViewModel(0);
              v514(&v141[*(int *)(v188 + 20)], (char *)v142 + *(int *)(v188 + 20), v519);
              v189 = *(int *)(v188 + 24);
              __dsta = (int *)v188;
              v476 = &v141[v189];
              v190 = (_OWORD *)((char *)v142 + v189);
              v191 = (int *)type metadata accessor for WeatherData(0);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v190, 1, (uint64_t)v191))
              {
                v192 = sub_1000BA294(&qword_100BC3460);
                memcpy(v476, v190, *(_QWORD *)(*(_QWORD *)(v192 - 8) + 64));
                v138 = v544;
              }
              else
              {
                v483 = v142;
                v494 = (void *)v143;
                v502 = v141;
                *(_OWORD *)v476 = *v190;
                v464 = (uint64_t)v191;
                v220 = v191[5];
                v221 = &v476[v220];
                v222 = (char *)v190 + v220;
                v223 = type metadata accessor for Locale(0);
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v222, 1, v223))
                {
                  v224 = sub_1000BA294(&qword_100BC3340);
                  memcpy(v221, v222, *(_QWORD *)(*(_QWORD *)(v224 - 8) + 64));
                }
                else
                {
                  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v223 - 8) + 32))(v221, v222, v223);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v221, 0, 1, v223);
                }
                v249 = v191[6];
                v250 = &v476[v249];
                v251 = (char *)v190 + v249;
                v252 = type metadata accessor for WeatherDataModel(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v252 - 8) + 32))(v250, v251, v252);
                v253 = v191[7];
                v254 = &v476[v253];
                v255 = v190;
                v256 = (char *)v190 + v253;
                v257 = sub_1000BA294(&qword_100BC3348);
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v256, 1, v257))
                {
                  v258 = type metadata accessor for WeatherData.CachingState(0);
                  memcpy(v254, v256, *(_QWORD *)(*(_QWORD *)(v258 - 8) + 64));
                  v259 = v511;
                }
                else
                {
                  v259 = v511;
                  v537(v254, v256, v511);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v254, 0, 1, v257);
                }
                v271 = *(int *)(v464 + 32);
                v272 = &v476[v271];
                v273 = (char *)v255 + v271;
                v274 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
                if (swift_getEnumCaseMultiPayload(v273) == 1)
                {
                  v275 = type metadata accessor for WeatherStatisticsModel(0);
                  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v275 - 8) + 32))(v272, v273, v275);
                  swift_storeEnumTagMultiPayload(v272, v274, 1);
                }
                else
                {
                  memcpy(v272, v273, *(_QWORD *)(*(_QWORD *)(v274 - 8) + 64));
                }
                v276 = *(int *)(v464 + 36);
                v277 = &v476[v276];
                v278 = (char *)v255 + v276;
                v279 = type metadata accessor for WeatherDataOverrides(0);
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v278, 1, v279))
                {
                  v280 = sub_1000BA294(&qword_100BC3350);
                  memcpy(v277, v278, *(_QWORD *)(*(_QWORD *)(v280 - 8) + 64));
                }
                else
                {
                  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v278, 1, v259))
                  {
                    v291 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                    memcpy(v277, v278, *(_QWORD *)(*(_QWORD *)(v291 - 8) + 64));
                  }
                  else
                  {
                    v537(v277, v278, v259);
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v277, 0, 1, v259);
                  }
                  v293 = *(int *)(v279 + 20);
                  v294 = &v277[v293];
                  v295 = &v278[v293];
                  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v295, 1, v511))
                  {
                    v296 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                    memcpy(v294, v295, *(_QWORD *)(*(_QWORD *)(v296 - 8) + 64));
                  }
                  else
                  {
                    v537(v294, v295, v511);
                    v47 = v557;
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v294, 0, 1, v511);
                  }
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v277, 0, 1, v279);
                }
                v143 = (uint64_t)v494;
                v138 = v544;
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v476, 0, 1, v464);
                v141 = v502;
                v142 = v483;
              }
              *(_OWORD *)&v141[__dsta[7]] = *(_OWORD *)((char *)v142 + __dsta[7]);
              v301 = __dsta[8];
              v503 = &v141[v301];
              v485 = (char *)v142 + v301;
              v302 = type metadata accessor for WeatherMapOverlayKind(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v302 - 8) + 32))(v503, v485, v302);
              v141[__dsta[9]] = *((_BYTE *)v142 + __dsta[9]);
              swift_storeEnumTagMultiPayload(v141, v466, 1);
            }
            else
            {
              memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v187 - 8) + 64));
            }
            v144 = v141;
            v145 = v143;
            v146 = 7;
LABEL_139:
            swift_storeEnumTagMultiPayload(v144, v145, v146);
            break;
          default:
            memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
            break;
        }
        v303 = *(int *)(v554 + 32);
        v304 = (_OWORD *)((char *)v131 + v303);
        v305 = (_OWORD *)((char *)v132 + v303);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v132 + v303, 1, v143))
        {
          v306 = sub_1000BA294(&qword_100BD3108);
          memcpy(v304, v305, *(_QWORD *)(*(_QWORD *)(v306 - 8) + 64));
          v307 = v554;
        }
        else
        {
          switch(swift_getEnumCaseMultiPayload(v305))
          {
            case 0u:
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v138 - 8) + 32))(v304, v305, v138);
              v308 = v304;
              v309 = v143;
              v310 = 0;
              goto LABEL_230;
            case 2u:
              ((void (*)(_OWORD *, _OWORD *, uint64_t))v525)(v304, v305, v532);
              v308 = v304;
              v309 = v143;
              v310 = 2;
              goto LABEL_230;
            case 3u:
              v311 = sub_1000BA294(&qword_100BD30F8);
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v311 - 8) + 32))(v304, v305, v311);
              v308 = v304;
              v309 = v143;
              v310 = 3;
              goto LABEL_230;
            case 4u:
              v495 = (void *)v143;
              v312 = v305[1];
              *v304 = *v305;
              v304[1] = v312;
              v313 = *(int *)(v508 + 20);
              v314 = v305;
              v315 = (char *)v304 + v313;
              v546 = v314;
              v316 = (char *)v314 + v313;
              v317 = type metadata accessor for NewsArticleComponentViewModel(0);
              if (swift_getEnumCaseMultiPayload(v316) == 1)
              {
                v534 = v304;
                *(_OWORD *)v315 = *(_OWORD *)v316;
                v539 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
                v318 = v539[5];
                v528 = &v315[v318];
                v319 = &v316[v318];
                v320 = type metadata accessor for URL(0);
                v521 = v317;
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v319, 1, v320))
                {
                  v321 = sub_1000BA294(&qword_100BD4280);
                  memcpy(v528, v319, *(_QWORD *)(*(_QWORD *)(v321 - 8) + 64));
                  v322 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v320 - 8) + 32);
                }
                else
                {
                  v331 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v320 - 8) + 32);
                  v331(v528, v319, v320);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v528, 0, 1, v320);
                  v322 = v331;
                }
                *(_OWORD *)&v315[v539[6]] = *(_OWORD *)&v316[v539[6]];
                v530 = v322;
                v322(&v315[v539[7]], &v316[v539[7]], v320);
                v332 = v539[8];
                v333 = &v315[v332];
                v334 = &v316[v332];
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v316[v332], 1, v320))
                {
                  v335 = sub_1000BA294(&qword_100BD4280);
                  memcpy(v333, v334, *(_QWORD *)(*(_QWORD *)(v335 - 8) + 64));
                }
                else
                {
                  v530(v333, v334, v320);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v333, 0, 1, v320);
                }
                v315[v539[9]] = v316[v539[9]];
                swift_storeEnumTagMultiPayload(v315, v521, 1);
                v304 = v534;
              }
              else
              {
                memcpy(v315, v316, *(_QWORD *)(*(_QWORD *)(v317 - 8) + 64));
              }
              v341 = *(int *)(v508 + 24);
              v342 = v304;
              v343 = (char *)v304 + v341;
              v344 = (char *)v546 + v341;
              v345 = type metadata accessor for DetailComponentAction(0);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v344, 1, v345))
              {
                v346 = sub_1000BA294(&qword_100BD3100);
                memcpy(v343, v344, *(_QWORD *)(*(_QWORD *)(v346 - 8) + 64));
              }
              else
              {
                v347 = type metadata accessor for URL(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v347 - 8) + 32))(v343, v344, v347);
                v348 = sub_1000BA294(&qword_100BC5FE8);
                v343[*(int *)(v348 + 48)] = v344[*(int *)(v348 + 48)];
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v343, 0, 1, v345);
              }
              v304 = v342;
              v308 = v342;
              v143 = (uint64_t)v495;
              v309 = (uint64_t)v495;
              v310 = 4;
              goto LABEL_230;
            case 6u:
              v323 = type metadata accessor for PrecipitationTotalPlatterViewModel(0);
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v323 - 8) + 32))(v304, v305, v323);
              v308 = v304;
              v309 = v143;
              v310 = 6;
              goto LABEL_230;
            case 7u:
              v324 = type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
              if (swift_getEnumCaseMultiPayload(v305) == 1)
              {
                v509 = v324;
                *v304 = *v305;
                v325 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
                v514((char *)v304 + v325[5], (char *)v305 + v325[5], v519);
                v326 = v325[6];
                v529 = (_OWORD *)((char *)v304 + v326);
                v547 = v305;
                v327 = (_OWORD *)((char *)v305 + v326);
                v328 = (int *)type metadata accessor for WeatherData(0);
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v327, 1, (uint64_t)v328))
                {
                  v329 = sub_1000BA294(&qword_100BC3460);
                  memcpy(v529, v327, *(_QWORD *)(*(_QWORD *)(v329 - 8) + 64));
                  v330 = v547;
                }
                else
                {
                  v522 = v325;
                  v535 = v304;
                  v496 = (void *)v143;
                  *v529 = *v327;
                  v336 = v328[5];
                  v337 = (char *)v529 + v336;
                  v338 = (char *)v327 + v336;
                  v339 = type metadata accessor for Locale(0);
                  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v338, 1, v339))
                  {
                    v340 = sub_1000BA294(&qword_100BC3340);
                    memcpy(v337, v338, *(_QWORD *)(*(_QWORD *)(v340 - 8) + 64));
                  }
                  else
                  {
                    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v339 - 8) + 32))(v337, v338, v339);
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v337, 0, 1, v339);
                  }
                  v399 = v328[6];
                  v400 = (char *)v529 + v399;
                  v401 = (char *)v327 + v399;
                  v402 = type metadata accessor for WeatherDataModel(0);
                  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v402 - 8) + 32))(v400, v401, v402);
                  v403 = v328[7];
                  v404 = (char *)v529 + v403;
                  v405 = (char *)v327 + v403;
                  v406 = sub_1000BA294(&qword_100BC3348);
                  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v405, 1, v406))
                  {
                    v407 = type metadata accessor for WeatherData.CachingState(0);
                    memcpy(v404, v405, *(_QWORD *)(*(_QWORD *)(v407 - 8) + 64));
                  }
                  else
                  {
                    v537(v404, v405, v511);
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v404, 0, 1, v406);
                  }
                  v417 = v328[8];
                  v418 = (char *)v529 + v417;
                  v419 = (char *)v327 + v417;
                  v420 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
                  if (swift_getEnumCaseMultiPayload(v419) == 1)
                  {
                    v421 = type metadata accessor for WeatherStatisticsModel(0);
                    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v421 - 8) + 32))(v418, v419, v421);
                    swift_storeEnumTagMultiPayload(v418, v420, 1);
                  }
                  else
                  {
                    memcpy(v418, v419, *(_QWORD *)(*(_QWORD *)(v420 - 8) + 64));
                  }
                  v518 = (uint64_t)v328;
                  v422 = v328[9];
                  v423 = (char *)v529 + v422;
                  v424 = (char *)v327 + v422;
                  v425 = type metadata accessor for WeatherDataOverrides(0);
                  v325 = v522;
                  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v424, 1, v425))
                  {
                    v426 = sub_1000BA294(&qword_100BC3350);
                    memcpy(v423, v424, *(_QWORD *)(*(_QWORD *)(v426 - 8) + 64));
                    v47 = v557;
                  }
                  else
                  {
                    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v424, 1, v511))
                    {
                      v437 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                      memcpy(v423, v424, *(_QWORD *)(*(_QWORD *)(v437 - 8) + 64));
                    }
                    else
                    {
                      v537(v423, v424, v511);
                      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v423, 0, 1, v511);
                    }
                    v439 = *(int *)(v425 + 20);
                    v505 = &v423[v439];
                    v440 = &v424[v439];
                    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v440, 1, v511))
                    {
                      v441 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                      memcpy(v505, v440, *(_QWORD *)(*(_QWORD *)(v441 - 8) + 64));
                    }
                    else
                    {
                      v537(v505, v440, v511);
                      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v505, 0, 1, v511);
                    }
                    v47 = v557;
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v423, 0, 1, v425);
                  }
                  v330 = v547;
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v529, 0, 1, v518);
                  v143 = (uint64_t)v496;
                  v304 = v535;
                }
                *(_OWORD *)((char *)v304 + v325[7]) = *(_OWORD *)((char *)v330 + v325[7]);
                v442 = v325[8];
                v443 = v325;
                v444 = v304;
                v445 = (char *)v304 + v442;
                v548 = (uint64_t)v330 + v442;
                v446 = type metadata accessor for WeatherMapOverlayKind(0);
                v447 = v445;
                v304 = v444;
                (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v446 - 8) + 32))(v447, v548, v446);
                *((_BYTE *)v444 + v443[9]) = *((_BYTE *)v330 + v443[9]);
                swift_storeEnumTagMultiPayload(v444, v509, 1);
              }
              else
              {
                memcpy(v304, v305, *(_QWORD *)(*(_QWORD *)(v324 - 8) + 64));
              }
              v308 = v304;
              v309 = v143;
              v310 = 7;
LABEL_230:
              swift_storeEnumTagMultiPayload(v308, v309, v310);
              break;
            default:
              memcpy(v304, v305, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
              break;
          }
          v307 = v554;
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v304, 0, 1, v143);
        }
        *((_BYTE *)v131 + *(int *)(v307 + 36)) = *((_BYTE *)v132 + *(int *)(v307 + 36));
        *((_BYTE *)v131 + *(int *)(v307 + 40)) = *((_BYTE *)v132 + *(int *)(v307 + 40));
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v131, 0, 1, v307);
      }
      v448 = v47;
      v449 = v549;
      v450 = 0;
LABEL_246:
      swift_storeEnumTagMultiPayload(v448, v449, v450);
      a3 = v551;
      goto LABEL_247;
    }
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
LABEL_247:
  *((_BYTE *)v5 + a3[7]) = *((_BYTE *)v4 + a3[7]);
  return v5;
}

uint64_t sub_100760494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1007604A0);
}

void sub_1007604A0()
{
  int v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000B26B8();
  if (v2)
  {
    sub_1000DD348();
    sub_100079F70();
  }
  else
  {
    v3 = v1;
    if (*(_DWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100C02ED0) - 8) + 84) == v0)
    {
      v4 = *(int *)(v3 + 20);
    }
    else
    {
      sub_10009903C();
      v4 = *(int *)(v3 + 24);
    }
    v5 = sub_10009E5E4(v4);
    sub_1000B250C(v5, v6, v7);
  }
}

uint64_t sub_10076050C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100760518);
}

void sub_100760518()
{
  int v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000993A8();
  if (v2)
  {
    sub_100099CB0();
    sub_100079F70();
  }
  else
  {
    v3 = v1;
    if (*(_DWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100C02ED0) - 8) + 84) == v0)
    {
      v4 = *(int *)(v3 + 20);
    }
    else
    {
      sub_10009903C();
      v4 = *(int *)(v3 + 24);
    }
    v5 = sub_100099C94(v4);
    sub_1000987C4(v5, v6, v7, v8);
  }
}

void sub_100760584(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = "!";
  sub_10076062C(319, (unint64_t *)&unk_100C02F40, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for SunriseSunsetDetailViewModel(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = &unk_1009C5DD0;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

void sub_10076062C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_100075EB0(&qword_100BCB0A0);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t *sub_100760688(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for AttributedString(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
    v14 = a3[7];
    v15 = a3[8];
    v16 = *(uint64_t *)((char *)a2 + v14);
    *(uint64_t *)((char *)v4 + v14) = v16;
    *(uint64_t *)((char *)v4 + v15) = *(uint64_t *)((char *)a2 + v15);
    v17 = a3[10];
    *(uint64_t *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(_OWORD *)((char *)v4 + v17) = *(_OWORD *)((char *)a2 + v17);
    swift_bridgeObjectRetain(v16);
  }
  return v4;
}

double sub_100760778(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 28))).n128_u64[0];
  return result;
}

_QWORD *sub_1007607DC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for AttributedString(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  v13 = a3[7];
  v14 = a3[8];
  v15 = *(_QWORD *)((char *)a2 + v13);
  *(_QWORD *)((char *)a1 + v13) = v15;
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  v16 = a3[10];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  *(_OWORD *)((char *)a1 + v16) = *(_OWORD *)((char *)a2 + v16);
  swift_bridgeObjectRetain(v15);
  return a1;
}

_QWORD *sub_1007608A0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[7];
  v15 = *(_QWORD *)((char *)a2 + v14);
  v16 = *(_QWORD *)((char *)a1 + v14);
  *(_QWORD *)((char *)a1 + v14) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  v17 = a3[10];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  *v18 = *v19;
  v18[1] = v19[1];
  return a1;
}

_OWORD *sub_100760994(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  v12 = a3[10];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  return a1;
}

_QWORD *sub_100760A28(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = a3[7];
  v15 = *(_QWORD *)((char *)a1 + v14);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  swift_bridgeObjectRelease(v15);
  v16 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v16) = *(_QWORD *)((char *)a2 + v16);
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  return a1;
}

uint64_t sub_100760AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100760AEC);
}

void sub_100760AEC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000B26B8();
  if (v1)
  {
    sub_1000DD348();
    sub_100079F70();
  }
  else
  {
    v2 = v0;
    sub_1000B4928();
    v3 = sub_10009E5E4(*(int *)(v2 + 24));
    sub_1000B250C(v3, v4, v5);
  }
}

uint64_t sub_100760B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100760B3C);
}

void sub_100760B3C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000993A8();
  if (v1)
  {
    sub_100099CB0();
    sub_100079F70();
  }
  else
  {
    v2 = v0;
    sub_1000B4928();
    v3 = sub_100099C94(*(int *)(v2 + 24));
    sub_1000987C4(v3, v4, v5, v6);
  }
}

uint64_t sub_100760B7C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_1009C5D88;
  v4[1] = &unk_1009C5D88;
  result = type metadata accessor for AttributedString(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[6] = &unk_1009C5F08;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_100760C18(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for AttributedString(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    v13 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    v14 = *(uint64_t *)((char *)a2 + v13);
    *(uint64_t *)((char *)v4 + v13) = v14;
    *(uint64_t *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    swift_bridgeObjectRetain(v14);
  }
  return v4;
}

double sub_100760CE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 28))).n128_u64[0];
  return result;
}

_QWORD *sub_100760D44(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for AttributedString(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v13 = *(_QWORD *)((char *)a2 + v12);
  *(_QWORD *)((char *)a1 + v12) = v13;
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain(v13);
  return a1;
}

_QWORD *sub_100760DE8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v12 = a3[7];
  v13 = *(_QWORD *)((char *)a2 + v12);
  v14 = *(_QWORD *)((char *)a1 + v12);
  *(_QWORD *)((char *)a1 + v12) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  return a1;
}

_OWORD *sub_100760EA0(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  return a1;
}

_QWORD *sub_100760F2C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v13 = *(_QWORD *)((char *)a1 + v12);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  return a1;
}

uint64_t sub_100760FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100760FD4);
}

void sub_100760FD4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000B26B8();
  if (v1)
  {
    sub_1000DD348();
    sub_100079F70();
  }
  else
  {
    v2 = v0;
    sub_1000B4928();
    v3 = sub_10009E5E4(*(int *)(v2 + 20));
    sub_1000B250C(v3, v4, v5);
  }
}

uint64_t sub_100761018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100761024);
}

void sub_100761024()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000993A8();
  if (v1)
  {
    sub_100099CB0();
    sub_100079F70();
  }
  else
  {
    v2 = v0;
    sub_1000B4928();
    v3 = sub_100099C94(*(int *)(v2 + 20));
    sub_1000987C4(v3, v4, v5, v6);
  }
}

uint64_t sub_100761064(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_1009C5D88;
  result = type metadata accessor for AttributedString(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_1007610F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C03820;
  if (!qword_100C03820)
  {
    v1 = sub_100075EB0(&qword_100C03560);
    sub_1001CDAD0(&qword_100C03828, &qword_100C03548);
    sub_10000F1C8(&qword_100C03830, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C03820);
  }
  return result;
}

uint64_t sub_100761194(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABFC78, 1);
}

uint64_t sub_1007611A4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABFC50, 1);
}

uint64_t sub_1007611B4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABFC28, 1);
}

unint64_t sub_1007611D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C03868;
  if (!qword_100C03868)
  {
    v1 = sub_100075EB0(&qword_100C03860);
    sub_10076130C((unint64_t *)&qword_100BD99D0, &qword_100BD99D8);
    sub_1001CDAD0((unint64_t *)&qword_100BC4B98, (uint64_t *)&unk_100C09EE0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C03868);
  }
  return result;
}

unint64_t sub_100761270()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C03878;
  if (!qword_100C03878)
  {
    v1 = sub_100075EB0(&qword_100C03870);
    sub_10076130C((unint64_t *)&qword_100BD0928, &qword_100BD0920);
    sub_1001CDAD0((unint64_t *)&qword_100BC4B98, (uint64_t *)&unk_100C09EE0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C03878);
  }
  return result;
}

void sub_10076130C(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_1000B4444(0, a2);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3), a1);
  }
  sub_100089028();
}

void sub_100761358()
{
  sub_1001CDAD0(&qword_100C038A8, &qword_100C038B0);
}

void sub_100761384()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v2[2];

  v0 = sub_100075EB0(&qword_100C03838);
  sub_1001CDAD0(&qword_100C03848, &qword_100C03838);
  v2[0] = v0;
  v2[1] = v1;
  swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.offsetXWithinBounds(_:)>>, 1);
  sub_100089028();
}

unint64_t sub_1007613E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C038B8;
  if (!qword_100C038B8)
  {
    v1 = sub_100075EB0(&qword_100C038C0);
    sub_1001CDAD0(&qword_100C038C8, &qword_100C03890);
    sub_100761468();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C038B8);
  }
  return result;
}

unint64_t sub_100761468()
{
  unint64_t result;

  result = qword_100C038D0;
  if (!qword_100C038D0)
  {
    result = swift_getWitnessTable(&unk_1009BAC74, &type metadata for OverviewTableBackgroundModifier);
    atomic_store(result, (unint64_t *)&qword_100C038D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for DetailComponentHeaderViewModel()
{
  return &type metadata for DetailComponentHeaderViewModel;
}

uint64_t sub_1007614B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v12;
  char v13;
  uint64_t result;

  v12 = a1 == a5 && a2 == a6;
  if (v12 || (v13 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a5, a6, 0), result = 0, (v13 & 1) != 0))
  {
    if (a3 == a7 && a4 == a8)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, a7, a8, 0);
  }
  return result;
}

uint64_t sub_100761540(uint64_t *a1, uint64_t *a2)
{
  return sub_1007614B4(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

double destroy for MessageCoverView(_QWORD *a1)
{
  double result;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for MessageCoverView(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v8;
  v9 = *(_QWORD *)(a2 + 120);
  v10 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v9;
  *(_QWORD *)(a1 + 128) = v10;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t assignWithCopy for MessageCoverView(uint64_t a1, uint64_t a2)
{
  sub_100094D04((_QWORD *)a1, (_QWORD *)a2);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MessageCoverView(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MessageCoverView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 136))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MessageCoverView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MessageCoverView()
{
  return &type metadata for MessageCoverView;
}

uint64_t sub_100761870(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABFD34, 1);
}

void sub_100761880(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)a2 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  v4 = sub_1000BA294(&qword_100C03970);
  sub_1007618C8(v2, (__n128 *)(a2 + *(int *)(v4 + 44)));
}

void sub_1007618C8(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  char v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __n128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  __n128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  unint64_t v103;
  char *v104;
  char v105;
  char *v106;
  uint64_t v107;
  char *v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  void (*v117)(char *, char *, uint64_t);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(char *, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  __n128 *v132;
  __n128 *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t KeyPath;
  uint64_t v142;
  char *v143;
  unint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __n128 *v157;
  uint64_t v158;
  char *v159;
  __n128 *v160;
  __n128 *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  char v176;
  unint64_t v177;
  uint64_t v178;
  char v179;
  char v180;
  __int128 v181;
  __int128 v182;
  char v183;
  uint64_t v184;
  char v185;
  __int16 v186;
  uint64_t v187;
  char v188;
  __int16 v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  char v193;
  uint64_t v194;
  char v195;
  uint64_t v196;
  uint64_t v197;
  __n128 *v198[8];
  uint64_t v199[22];
  unsigned __int8 v200;
  uint64_t v201;
  unsigned __int8 v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unsigned __int8 v206;
  uint64_t v207;
  char v208;
  uint64_t v209;
  uint64_t v210;

  v161 = a2;
  v158 = sub_1000BA294(&qword_100C03978);
  __chkstk_darwin(v158);
  v138 = (char **)((char *)&v134 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v137 = sub_1000BA294(&qword_100BC4FA0);
  v135 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v134 = (char *)&v134 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v136 = (char *)&v134 - v6;
  v155 = sub_1000BA294(&qword_100C03980);
  __chkstk_darwin(v155);
  v156 = (uint64_t)&v134 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000BA294(qword_100BDAEA8);
  __chkstk_darwin(v8);
  v10 = (__n128 *)((char *)&v134 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  v13 = (char *)&v134 - v12;
  v14 = type metadata accessor for Font.TextStyle(0);
  v147 = *(_QWORD *)(v14 - 8);
  v148 = v14;
  __chkstk_darwin(v14);
  v146 = (char *)&v134 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000BA294(&qword_100BCF148);
  __chkstk_darwin(v16);
  v18 = (uint64_t *)((char *)&v134 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = type metadata accessor for Image.Scale(0);
  v144 = *(_QWORD *)(v19 - 8);
  v145 = v19;
  __chkstk_darwin(v19);
  v162 = (char *)&v134 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000BA294(&qword_100BC3B98);
  __chkstk_darwin(v21);
  v23 = (char *)&v134 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = sub_1000BA294(&qword_100C03988);
  __chkstk_darwin(v163);
  v25 = (uint64_t *)((char *)&v134 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = sub_1000BA294(&qword_100BDAEA0);
  __chkstk_darwin(v26);
  v157 = (__n128 *)((char *)&v134 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v28);
  v143 = (char *)&v134 - v29;
  __chkstk_darwin(v30);
  v164 = (uint64_t)&v134 - v31;
  static Alignment.center.getter(v32);
  _FrameLayout.init(width:height:alignment:)(0, 1, 0x4028000000000000, 0);
  v154 = v199[21];
  v153 = v200;
  v152 = v201;
  v151 = v202;
  v149 = v204;
  v150 = v203;
  v33 = *(_QWORD *)(a1 + 48);
  v34 = *(_QWORD *)(a1 + 56);
  swift_bridgeObjectRetain();
  v35 = Image.init(systemName:)(v33, v34);
  v165 = (char *)a1;
  v37 = *(_BYTE *)(a1 + 40);
  v159 = v13;
  v160 = v10;
  v142 = v35;
  v38 = v18;
  if ((v37 & 1) != 0)
    v39 = static Color.secondary.getter(v36);
  else
    v39 = static Color.green.getter();
  v139 = v39;
  v40 = v16;
  KeyPath = swift_getKeyPath(&unk_1009C6188);
  v41 = type metadata accessor for Font.Design(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v23, 1, 1, v41);
  v140 = static Font.system(size:weight:design:)(0, 1, v23);
  sub_100021AA4((uint64_t)v23, &qword_100BC3B98);
  v42 = swift_getKeyPath(&unk_1009C61B8);
  v44 = v144;
  v43 = v145;
  v45 = v162;
  (*(void (**)(char *, _QWORD, uint64_t))(v144 + 104))(v162, enum case for Image.Scale.large(_:), v145);
  v46 = swift_getKeyPath(&unk_1009C61E8);
  (*(void (**)(char *, char *, uint64_t))(v44 + 16))((char *)v38 + *(int *)(v40 + 28), v45, v43);
  *v38 = v46;
  sub_10007EBC8((uint64_t)v38, (uint64_t)v25 + *(int *)(v163 + 36), &qword_100BCF148);
  *v25 = v142;
  v47 = v140;
  v48 = v139;
  v25[1] = KeyPath;
  v25[2] = v48;
  v25[3] = v42;
  v25[4] = v47;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100021AA4((uint64_t)v38, &qword_100BCF148);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v162, v43);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v49 = sub_1007626B0();
  v50 = (uint64_t)v143;
  View.accessibilityHidden(_:)(1, v163, v49);
  sub_100021AA4((uint64_t)v25, &qword_100C03988);
  sub_1007627B8(v50, v164);
  swift_beginAccess(&unk_100CAE510, v199, 33, 0);
  v51 = sub_10023F368();
  swift_endAccess(v199);
  objc_msgSend(v51, "_scaledValueForValue:", 46.0);
  v53 = v52;

  v54 = *((_QWORD *)v165 + 9);
  v199[0] = *((_QWORD *)v165 + 8);
  v199[1] = v54;
  v55 = sub_100114EF8();
  v144 = v55;
  swift_bridgeObjectRetain();
  v56 = Text.init<A>(_:)(v199, &type metadata for String, v55);
  v58 = v57;
  v60 = v59;
  v62 = v61 & 1;
  v64 = v146;
  v63 = v147;
  v65 = v148;
  v66 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v147 + 104))(v146, enum case for Font.TextStyle.title2(_:), v148);
  static Font.Weight.bold.getter(v66);
  v67 = static Font.system(_:weight:)(v64);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v65);
  v68 = Text.font(_:)(v67, v56, v58, v62, v60);
  v70 = v69;
  LOBYTE(v65) = v71;
  v73 = v72;
  swift_release();
  v74 = v65 & 1;
  sub_1000D31B4(v56, v58, v62);
  v75 = swift_bridgeObjectRelease();
  v76 = static Color.primary.getter(v75);
  v162 = (char *)Text.foregroundColor(_:)(v76, v68, v70, v74, v73);
  v163 = v77;
  v148 = v78;
  LODWORD(v147) = v79;
  swift_release();
  sub_1000D31B4(v68, v70, v74);
  swift_bridgeObjectRelease();
  v146 = (char *)swift_getKeyPath(&unk_1009C6218);
  LODWORD(v145) = static Edge.Set.horizontal.getter(v146);
  swift_beginAccess(&unk_100CAE510, v199, 33, 0);
  v80 = sub_10023F368();
  swift_endAccess(v199);
  objc_msgSend(v80, "_scaledValueForValue:", 24.0);
  v82 = v81;

  v83 = *((_QWORD *)v165 + 11);
  v199[0] = *((_QWORD *)v165 + 10);
  v199[1] = v83;
  swift_bridgeObjectRetain();
  v84 = Text.init<A>(_:)(v199, &type metadata for String, v144);
  v86 = v85;
  v88 = v87;
  v90 = v89 & 1;
  v91 = static Font.subheadline.getter(v84);
  v92 = Text.font(_:)(v91, v84, v86, v90, v88);
  v94 = v93;
  LOBYTE(v67) = v95;
  v97 = v96;
  swift_release();
  sub_1000D31B4(v84, v86, v90);
  v98 = swift_bridgeObjectRelease();
  v99 = static Color.secondary.getter(v98);
  v100 = Text.foregroundColor(_:)(v99, v92, v94, v67 & 1, v97);
  v142 = v101;
  v143 = (char *)v100;
  LODWORD(KeyPath) = v102;
  v144 = v103;
  swift_release();
  sub_1000D31B4(v92, v94, v67 & 1);
  v104 = v165;
  swift_bridgeObjectRelease();
  v140 = swift_getKeyPath(&unk_1009C6218);
  v105 = static Edge.Set.horizontal.getter(v140);
  v106 = (char *)*((_QWORD *)v104 + 14);
  if (v106)
  {
    v107 = *((_QWORD *)v104 + 12);
    v108 = (char *)*((_QWORD *)v104 + 13);
    swift_beginAccess(&unk_100CAE510, v199, 33, 0);
    v109 = sub_10023F368();
    swift_endAccess(v199);
    objc_msgSend(v109, "_scaledValueForValue:", 40.0);
    v111 = v110;

    sub_100762808((uint64_t)v104, (uint64_t)v199);
    v112 = swift_allocObject(&unk_100B8E4A0, 153, 7);
    v113 = memcpy((void *)(v112 + 16), v199, 0x88uLL);
    *(_BYTE *)(v112 + 152) = v107;
    __chkstk_darwin(v113);
    *(&v134 - 4) = v108;
    *(&v134 - 3) = v106;
    *(&v134 - 2) = v104;
    v114 = v136;
    Button.init(action:label:)(sub_100762888, v112, sub_100762890, &v134 - 6, &type metadata for Text, &protocol witness table for Text);
    v116 = v134;
    v115 = v135;
    v117 = *(void (**)(char *, char *, uint64_t))(v135 + 16);
    v118 = v137;
    v117(v134, v114, v137);
    v119 = (uint64_t)v138;
    *v138 = v111;
    *(_BYTE *)(v119 + 8) = 0;
    *(_WORD *)(v119 + 9) = 257;
    v120 = sub_1000BA294(&qword_100C039A8);
    v117((char *)(v119 + *(int *)(v120 + 48)), v116, v118);
    v121 = *(void (**)(char *, uint64_t))(v115 + 8);
    v121(v116, v118);
    v122 = v156;
    sub_10007EBC8(v119, v156, &qword_100C03978);
    swift_storeEnumTagMultiPayload(v122, v155, 1);
    sub_10003D310(&qword_100C039B0, &qword_100C03978, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v123 = (uint64_t)v159;
    _ConditionalContent<>.init(storage:)(v122, &type metadata for EmptyView, v158, &protocol witness table for EmptyView, v124);
    sub_100021AA4(v119, &qword_100C03978);
    v125 = ((uint64_t (*)(char *, uint64_t))v121)(v114, v118);
  }
  else
  {
    v126 = v156;
    swift_storeEnumTagMultiPayload(v156, v155, 0);
    sub_10003D310(&qword_100C039B0, &qword_100C03978, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v123 = (uint64_t)v159;
    v125 = _ConditionalContent<>.init(storage:)(v126, &type metadata for EmptyView, v158, &protocol witness table for EmptyView, v127);
  }
  static Alignment.center.getter(v125);
  _FrameLayout.init(width:height:alignment:)(0, 1, 0x4028000000000000, 0);
  v128 = v205;
  LODWORD(v165) = v206;
  v158 = v207;
  v129 = v208;
  v130 = v209;
  v156 = v210;
  v190 = 0;
  v191 = 1;
  v192 = v154;
  v193 = v153;
  v194 = v152;
  v195 = v151;
  v196 = v150;
  v197 = v149;
  v198[0] = (__n128 *)&v190;
  v131 = v164;
  v132 = v157;
  sub_10007EBC8(v164, (uint64_t)v157, &qword_100BDAEA0);
  v187 = v53;
  v188 = 0;
  v189 = 257;
  v198[1] = v132;
  v198[2] = (__n128 *)&v187;
  v199[0] = (uint64_t)v162;
  v199[1] = v148;
  LOBYTE(v199[2]) = v147 & 1;
  v199[3] = v163;
  v199[4] = (uint64_t)v146;
  LOBYTE(v199[5]) = 1;
  LOBYTE(v199[6]) = v145;
  memset(&v199[7], 0, 32);
  LOBYTE(v199[11]) = 1;
  v184 = v82;
  v185 = 0;
  v186 = 257;
  v198[3] = (__n128 *)v199;
  v198[4] = (__n128 *)&v184;
  v174 = v143;
  v175 = v142;
  v176 = KeyPath & 1;
  v177 = v144;
  v178 = v140;
  v179 = 1;
  v180 = v105;
  v181 = 0u;
  v182 = 0u;
  v183 = 1;
  v198[5] = (__n128 *)&v174;
  v133 = v160;
  sub_10007EBC8(v123, (uint64_t)v160, qword_100BDAEA8);
  v166 = 0;
  v167 = 1;
  v168 = v128;
  v169 = (char)v165;
  v170 = v158;
  v171 = v129;
  v172 = v130;
  v173 = v156;
  v198[6] = v133;
  v198[7] = (__n128 *)&v166;
  sub_10035EE30(v198, v161);
  sub_100021AA4(v123, qword_100BDAEA8);
  sub_100021AA4(v131, &qword_100BDAEA0);
  sub_100021AA4((uint64_t)v133, qword_100BDAEA8);
  sub_1000D31B4((uint64_t)v174, v175, v176);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000D31B4(v199[0], v199[1], v199[2]);
  swift_release();
  swift_bridgeObjectRelease();
  sub_100021AA4((uint64_t)v132, &qword_100BDAEA0);
}

void sub_10076254C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v32[2];

  v32[0] = a1;
  v32[1] = a2;
  v5 = sub_100114EF8();
  swift_bridgeObjectRetain();
  v6 = Text.init<A>(_:)(v32, &type metadata for String, v5);
  v8 = v7;
  v10 = v9;
  v12 = v11 & 1;
  v13 = static Font.subheadline.getter(v6);
  v14 = Text.font(_:)(v13, v6, v8, v12, v10);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  swift_release();
  v21 = v18 & 1;
  sub_1000D31B4(v6, v8, v12);
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(a3 + 120);
  v23 = *(_QWORD *)(a3 + 128);
  swift_bridgeObjectRetain();
  v24 = Color.init(hex:)(v22, v23);
  v25 = Text.foregroundColor(_:)(v24, v14, v16, v18 & 1, v20);
  v27 = v26;
  LOBYTE(v12) = v28;
  v30 = v29;
  swift_release();
  sub_1000D31B4(v14, v16, v21);
  swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v25;
  *(_QWORD *)(a4 + 8) = v27;
  *(_BYTE *)(a4 + 16) = v12 & 1;
  *(_QWORD *)(a4 + 24) = v30;
}

unint64_t sub_1007626B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C03990;
  if (!qword_100C03990)
  {
    v1 = sub_100075EB0(&qword_100C03988);
    sub_100762734();
    sub_10003D310((unint64_t *)&unk_100C0A520, &qword_100BCF148, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C03990);
  }
  return result;
}

unint64_t sub_100762734()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C03998;
  if (!qword_100C03998)
  {
    v1 = sub_100075EB0(&qword_100C039A0);
    sub_1002377CC();
    sub_10003D310(&qword_100BC4E20, &qword_100BC4E28, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C03998);
  }
  return result;
}

uint64_t sub_1007627B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BDAEA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100762808(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for MessageCoverView(a2, a1);
  return a2;
}

uint64_t sub_10076283C()
{
  uint64_t v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, 153, 7);
}

void sub_100762888()
{
  uint64_t v0;

  sub_10082FB80(*(_BYTE *)(v0 + 152));
}

void sub_100762890(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_10076254C(v1[2], v1[3], v1[4], a1);
}

void sub_10076289C()
{
  sub_10003D310(&qword_100C039B8, &qword_100C039C0, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

uint64_t SearchLocation.init(searchCompletion:)@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  double v26;
  double v27;
  uint64_t v28;
  double *v29;
  id v30;
  id v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  double v73;

  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v70 = v7;
  sub_1000BA294(&qword_100BC35F8);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100088FDC();
  v71 = v9;
  sub_1000BA294(&qword_100BCCC50);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  v11 = sub_1000C4668();
  v12 = type metadata accessor for TimeZone(v11);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_100089068();
  __chkstk_darwin(v14);
  v16 = (char *)&v61 - v15;
  *a2 = a1;
  v17 = a1;
  v18 = objc_msgSend(v17, "title");
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  a2[1] = v19;
  a2[2] = v21;
  v23 = sub_1000B4A40(v22, "subtitle");
  sub_1000D2008((uint64_t)v23);
  sub_1000BD6C8();
  a2[3] = v18;
  a2[4] = v19;
  v25 = sub_1000B4A40(v24, "w_calloutTitle");
  sub_1000D2008((uint64_t)v25);
  sub_1000BD6C8();
  a2[5] = v18;
  a2[6] = v19;
  v72 = 0.0;
  v73 = 0.0;
  if (objc_msgSend(v17, "w_getCoordinate:", &v72))
  {
    v26 = v72;
    v27 = v73;
    v28 = sub_10009BEBC();
    v69 = v28;
    v29 = (double *)((char *)a2 + *(int *)(v28 + 36));
    *v29 = v26;
    v29[1] = v27;
    *((_BYTE *)v29 + 16) = 0;
    v30 = sub_1000B4A40(v28, "w_mapItem");
    v31 = objc_msgSend(v30, "timeZone");

    if (v31)
    {
      static TimeZone._unconditionallyBridgeFromObjectiveC(_:)(v31);

      v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
      v32(v3, v2, v12);
      sub_1000C138C(v3, 0);
      if (_s7Weather24LocationCompositionStateOwet_0(v3, 1, v12) != 1)
      {
        v33 = ((uint64_t (*)(char *, uint64_t, uint64_t))v32)(v16, v3, v12);
        v34 = sub_1000B4A40(v33, "w_mapItem");
        v35 = sub_100764030(v34);
        if (v36)
        {
          v67 = v36;
          v68 = v35;
          v37 = sub_100762E60(v17, v35, v36);
          v63 = v38;
          v64 = v37;
          v39 = CLLocationCoordinate2D.id.getter(v26, v27);
          v65 = v40;
          v66 = v39;
          v41 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 16))(v2, v16, v12);
          v42 = v70;
          Date.init()(v41);
          v43 = type metadata accessor for Date(0);
          v45 = sub_10009926C(v42, 0, v44, v43);
          v46 = sub_1000B4A40(v45, "title");
          v47 = sub_1000D2008((uint64_t)v46);
          v61 = v48;
          v62 = v47;

          v50 = sub_1000B4A40(v49, "subtitle");
          sub_1000D2008((uint64_t)v50);

          v51 = v71;
          Location.init(id:name:timeZone:coordinate:lastRefreshDate:searchTitle:searchSubtitle:preciseName:secondaryName:)(v66, v65, v68, v67, v2, v42, v62, v61);

          sub_1000CCCD8(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
          v52 = sub_1000992C4();
          sub_10009926C(v51, 0, v53, v52);
          return sub_10015A074(v51, (uint64_t)a2 + *(int *)(v69 + 32));
        }

        sub_1000CCCD8(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
        goto LABEL_9;
      }
    }
    else
    {
      sub_1000C138C(v3, 1);
    }

    sub_100021AA4(v3, &qword_100BCCC50);
LABEL_9:
    v57 = *(int *)(v69 + 32);
    goto LABEL_10;
  }

  v55 = sub_10009BEBC();
  v56 = (char *)a2 + *(int *)(v55 + 36);
  *(_QWORD *)v56 = 0;
  *((_QWORD *)v56 + 1) = 0;
  v56[16] = 1;
  v57 = *(int *)(v55 + 32);
LABEL_10:
  v58 = (uint64_t)a2 + v57;
  v59 = sub_1000992C4();
  return sub_10009926C(v58, 1, v60, v59);
}

uint64_t SearchLocation.init(searchCompletion:title:subtitle:calloutTitle:location:coordinate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v14;
  uint64_t result;
  char *v16;

  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  v14 = sub_10009BEBC();
  result = sub_10015A074(a8, (uint64_t)a9 + *(int *)(v14 + 32));
  v16 = (char *)a9 + *(int *)(v14 + 36);
  *(_QWORD *)v16 = a10;
  *((_QWORD *)v16 + 1) = a11;
  v16[16] = a12 & 1;
  return result;
}

void SearchLocation.searchCompletion.getter()
{
  id *v0;
  id v1;

  v1 = *v0;
  sub_10004A298();
}

void SearchLocation.searchCompletion.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

void SearchLocation.title.getter()
{
  sub_1000989F8();
  sub_10004A298();
}

void SearchLocation.subtitle.getter()
{
  sub_1000989F8();
  sub_10004A298();
}

void SearchLocation.calloutTitle.getter()
{
  sub_1000989F8();
  sub_10004A298();
}

uint64_t SearchLocation.location.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(sub_10009BEBC() + 32);
  return sub_1005A1770(v3, a1);
}

uint64_t SearchLocation.coordinate.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(sub_10009BEBC() + 36));
}

uint64_t sub_100762E60(void *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  double v13;
  id v14;
  id v15;
  uint64_t v16;

  v6 = objc_msgSend(a1, "w_mapItem");
  v7 = objc_msgSend(v6, "wc_weatherDisplayName");

  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  if (v8 == a2 && v10 == a3)
  {
    swift_bridgeObjectRelease(a3);
    return 0;
  }
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v10, a2, a3, 0);
  *(_QWORD *)&v13 = swift_bridgeObjectRelease(v10).n128_u64[0];
  if ((v12 & 1) != 0)
    return 0;
  v14 = objc_msgSend(a1, "w_mapItem", v13);
  v15 = objc_msgSend(v14, "wc_weatherDisplayName");

  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  return v16;
}

uint64_t SearchLocation.shortDescription.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t inited;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v24;

  sub_1000BA294(&qword_100BC35F8);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100094EC4();
  v4 = sub_1000BA294(&qword_100BC31F0);
  inited = swift_initStackObject(v4, &v24);
  *(_OWORD *)(inited + 16) = xmmword_1009891E0;
  *(_QWORD *)(inited + 32) = 0xD000000000000010;
  *(_QWORD *)(inited + 40) = 0x8000000100A12A00;
  v6 = *(void **)v1;
  v7 = sub_1000BA294(&qword_100C039C8);
  *(_QWORD *)(inited + 48) = v6;
  *(_QWORD *)(inited + 72) = v7;
  *(_QWORD *)(inited + 80) = 0x656C746974;
  *(_QWORD *)(inited + 88) = 0xE500000000000000;
  v8 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(inited + 96) = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(inited + 104) = v8;
  *(_QWORD *)(inited + 120) = &type metadata for String;
  *(_QWORD *)(inited + 128) = 0x656C746974627573;
  *(_QWORD *)(inited + 136) = 0xE800000000000000;
  v9 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(inited + 144) = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(inited + 152) = v9;
  *(_QWORD *)(inited + 168) = &type metadata for String;
  strcpy((char *)(inited + 176), "calloutTitle");
  *(_BYTE *)(inited + 189) = 0;
  *(_WORD *)(inited + 190) = -5120;
  v10 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(inited + 192) = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(inited + 200) = v10;
  *(_QWORD *)(inited + 216) = &type metadata for String;
  *(_QWORD *)(inited + 224) = 0x6E6F697461636F6CLL;
  *(_QWORD *)(inited + 232) = 0xE800000000000000;
  *(_QWORD *)(inited + 264) = sub_1000BA294(&qword_100BC5AA8);
  v11 = sub_10009BEBC();
  sub_1005A1770(v1 + *(int *)(v11 + 32), v2);
  v12 = sub_1000992C4();
  sub_1000CD9B8(v2, 1);
  if (v13)
  {
    v14 = v6;
    sub_10003BCC8();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100021AA4(v2, &qword_100BC35F8);
    v18 = 0;
    v20 = 0;
  }
  else
  {
    sub_100086DA4(&qword_100C039E0, (uint64_t (*)(uint64_t))&type metadata accessor for Location, (uint64_t)&protocol conformance descriptor for Location);
    v16 = v15;
    v17 = v6;
    sub_10003BCC8();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18 = ShortDescribable.description.getter(v12, v16);
    v20 = v19;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v2, v12);
  }
  *(_QWORD *)(inited + 240) = v18;
  *(_QWORD *)(inited + 248) = v20;
  v21 = Dictionary.init(dictionaryLiteral:)(inited);
  a1[3] = sub_1000BA294(&qword_100C039D0);
  a1[4] = sub_10076409C();
  sub_10005F164(a1);
  return ShortDescription.init(name:_:)(0x6F4C686372616553, 0xEE006E6F69746163, v21, v11);
}

uint64_t sub_100763220(uint64_t a1)
{
  uint64_t v2;

  sub_100086DA4(&qword_100C03AE8, type metadata accessor for SearchLocation, (uint64_t)&protocol conformance descriptor for SearchLocation);
  return ShortDescribable.description.getter(a1, v2);
}

uint64_t static SearchLocation.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  char v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  double *v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v57 = sub_1000992C4();
  v6 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  sub_100088FDC();
  v56 = v7;
  v8 = sub_1000BA294(&qword_100BCE968);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100098694();
  sub_1000BA294(&qword_100BC35F8);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100089068();
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v54 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v54 - v15;
  v17 = *(void **)a1;
  v18 = *(void **)a2;
  if (*(_QWORD *)a1)
  {
    if (!v18)
      return 0;
    v55 = v6;
    sub_100324034();
    v19 = v18;
    v20 = v17;
    v21 = static NSObject.== infix(_:_:)(v20, v19);

    if ((v21 & 1) == 0)
      return 0;
  }
  else
  {
    v55 = v6;
    if (v18)
      return 0;
  }
  v22 = *(_QWORD *)(a1 + 8);
  v23 = *(_QWORD *)(a1 + 16);
  v24 = *(_QWORD *)(a2 + 8);
  v25 = *(_QWORD *)(a2 + 16);
  v26 = v22 == v24 && v23 == v25;
  if (v26 || (v27 = sub_100099264(v22, v23, v24, v25), result = 0, (v27 & 1) != 0))
  {
    v29 = *(_QWORD *)(a1 + 24);
    v30 = *(_QWORD *)(a1 + 32);
    v31 = *(_QWORD *)(a2 + 24);
    v32 = *(_QWORD *)(a2 + 32);
    v33 = v29 == v31 && v30 == v32;
    if (v33 || (v34 = sub_100099264(v29, v30, v31, v32), result = 0, (v34 & 1) != 0))
    {
      v35 = *(_QWORD *)(a1 + 40);
      v36 = *(_QWORD *)(a1 + 48);
      v37 = *(_QWORD *)(a2 + 40);
      v38 = *(_QWORD *)(a2 + 48);
      v39 = v35 == v37 && v36 == v38;
      if (v39 || (v40 = sub_100099264(v35, v36, v37, v38), result = 0, (v40 & 1) != 0))
      {
        v41 = sub_10009BEBC();
        sub_1005A1770(a1 + *(int *)(v41 + 32), (uint64_t)v16);
        sub_1005A1770(a2 + *(int *)(v41 + 32), (uint64_t)v14);
        v42 = v2 + *(int *)(v8 + 48);
        sub_1005A1770((uint64_t)v16, v2);
        sub_1005A1770((uint64_t)v14, v42);
        v43 = v57;
        sub_1000CD9B8(v2, 1);
        if (v26)
        {
          sub_1000C4034((uint64_t)v14);
          sub_1000C4034((uint64_t)v16);
          sub_1000CD9B8(v42, 1);
          if (v26)
          {
            sub_100021AA4(v2, &qword_100BC35F8);
LABEL_33:
            v50 = *(int *)(v41 + 36);
            v51 = (double *)(a1 + v50);
            v52 = *(_BYTE *)(a1 + v50 + 16);
            v53 = a2 + v50;
            if ((v52 & 1) != 0)
            {
              if ((*(_BYTE *)(v53 + 16) & 1) != 0)
                return 1;
            }
            else if ((*(_BYTE *)(v53 + 16) & 1) == 0
                   && (static CLLocationCoordinate2D.== infix(_:_:)(*v51, v51[1], *(double *)v53, *(double *)(v53 + 8)) & 1) != 0)
            {
              return 1;
            }
            return 0;
          }
        }
        else
        {
          sub_1005A1770(v2, v3);
          sub_1000CD9B8(v42, 1);
          if (!v44)
          {
            v54 = v41;
            v46 = v55;
            v45 = v56;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 32))(v56, v42, v43);
            sub_100086DA4((unint64_t *)&qword_100BC35B8, (uint64_t (*)(uint64_t))&type metadata accessor for Location, (uint64_t)&protocol conformance descriptor for Location);
            v48 = dispatch thunk of static Equatable.== infix(_:_:)(v3, v45, v43, v47);
            v49 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
            v49(v45, v43);
            sub_1000C4034((uint64_t)v14);
            sub_1000C4034((uint64_t)v16);
            v49(v3, v43);
            v41 = v54;
            sub_1000C4034(v2);
            if ((v48 & 1) == 0)
              return 0;
            goto LABEL_33;
          }
          sub_100021AA4((uint64_t)v14, &qword_100BC35F8);
          sub_100021AA4((uint64_t)v16, &qword_100BC35F8);
          (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v3, v43);
        }
        sub_100021AA4(v2, &qword_100BCE968);
        return 0;
      }
    }
  }
  return result;
}

void SearchLocation.hash(into:)(uint64_t a1)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  double v14;
  double v15;

  v4 = v1;
  v6 = sub_1000992C4();
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100098694();
  sub_1000BA294(&qword_100BC35F8);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100094EC4();
  v9 = *v1;
  if (*v1)
  {
    sub_100075E0C(1u);
    v10 = v9;
    NSObject.hash(into:)(a1);

  }
  else
  {
    sub_100075E0C(0);
  }
  sub_10003BCC8();
  sub_1000DD360();
  sub_10009D2E0();
  sub_10003BCC8();
  sub_1000DD360();
  sub_10009D2E0();
  sub_10003BCC8();
  sub_1000DD360();
  sub_10009D2E0();
  v11 = sub_10009BEBC();
  sub_1005A1770((uint64_t)v4 + *(int *)(v11 + 32), v3);
  if (_s7Weather24LocationCompositionStateOwet_0(v3, 1, v6) == 1)
  {
    sub_100075E0C(0);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v2, v3, v6);
    sub_100075E0C(1u);
    sub_100086DA4(&qword_100BC35B0, (uint64_t (*)(uint64_t))&type metadata accessor for Location, (uint64_t)&protocol conformance descriptor for Location);
    dispatch thunk of Hashable.hash(into:)(a1, v6, v12);
    sub_1000CCCD8(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  }
  v13 = (double *)((char *)v4 + *(int *)(v11 + 36));
  if (*((_BYTE *)v13 + 16) == 1)
  {
    sub_100075E0C(0);
  }
  else
  {
    v15 = *v13;
    v14 = v13[1];
    sub_100075E0C(1u);
    CLLocationCoordinate2D.hash(into:)(a1, v15, v14);
  }
}

Swift::Int SearchLocation.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  SearchLocation.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1007637D8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  SearchLocation.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

void SearchLocation.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  __int128 v30;
  char v31;
  char v32;

  v26 = a2;
  v5 = sub_1000BA294(&qword_100BC35F8);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_1000BA294(&qword_100C039E8);
  __chkstk_darwin(v27);
  v9 = sub_1000C4668();
  v28 = type metadata accessor for SearchLocation(v9);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100079FBC();
  *(_QWORD *)v3 = 0;
  v11 = a1[3];
  v12 = a1[4];
  v29 = a1;
  sub_1000DB418(a1, v11);
  v13 = sub_1007640E0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SearchLocation.CodingKeys, &type metadata for SearchLocation.CodingKeys, v13, v11, v12);
  if (v2)
  {
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v29);

  }
  else
  {
    v14 = v8;
    v16 = v26;
    v15 = v27;
    *(_QWORD *)v3 = 0;
    LOBYTE(v30) = 0;
    *(_QWORD *)(v3 + 8) = sub_1000C3000();
    *(_QWORD *)(v3 + 16) = v17;
    LOBYTE(v30) = 1;
    *(_QWORD *)(v3 + 24) = sub_1000C3000();
    *(_QWORD *)(v3 + 32) = v18;
    LOBYTE(v30) = 2;
    *(_QWORD *)(v3 + 40) = sub_1000C3000();
    *(_QWORD *)(v3 + 48) = v19;
    LOBYTE(v30) = 4;
    sub_100764158(&qword_100C039F8);
    sub_10009D7FC(v5, (uint64_t)&v30, v15, v5);
    v20 = (uint64_t)v14;
    v21 = v15;
    v22 = v28;
    sub_10015A074(v20, v3 + *(int *)(v28 + 32));
    v23 = sub_1000BA294(&qword_100BFCA18);
    v32 = 5;
    sub_1007641B4(&qword_100C03A00);
    sub_10009D7FC(v23, (uint64_t)&v32, v21, v23);
    sub_100099044();
    v24 = v31;
    v25 = v3 + *(int *)(v22 + 36);
    *(_OWORD *)v25 = v30;
    *(_BYTE *)(v25 + 16) = v24;
    sub_1005A17B8(v3, v16);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v29);
    sub_10076411C(v3);
  }
}

uint64_t SearchLocation.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  __int128 v27;
  char v28;

  v4 = v1;
  v6 = sub_1000BA294(&qword_100C03A08);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100079FBC();
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1007640E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SearchLocation.CodingKeys, &type metadata for SearchLocation.CodingKeys, v10, v8, v9);
  v11 = v4[1];
  v12 = v4[2];
  LOBYTE(v27) = 0;
  sub_1000C4020(v11, v12);
  if (!v2)
  {
    v13 = v4[3];
    v14 = v4[4];
    LOBYTE(v27) = 1;
    sub_1000C4020(v13, v14);
    v15 = v4[5];
    v16 = v4[6];
    LOBYTE(v27) = 2;
    sub_1000C4020(v15, v16);
    v17 = type metadata accessor for SearchLocation(0);
    v18 = (uint64_t)v4 + *(int *)(v17 + 32);
    LOBYTE(v27) = 4;
    v19 = sub_1000BA294(&qword_100BC35F8);
    sub_100764158(&qword_100C03A10);
    sub_1000B4634(v18, (uint64_t)&v27, v6, v19, v20);
    v21 = (char *)v4 + *(int *)(v17 + 36);
    v22 = v21[16];
    v27 = *(_OWORD *)v21;
    v28 = v22;
    v26 = 5;
    v23 = sub_1000BA294(&qword_100BFCA18);
    sub_1007641B4(&qword_100C03A18);
    sub_1000B4634((uint64_t)&v27, (uint64_t)&v26, v6, v23, v24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
}

unint64_t sub_100763D30(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100B5B3B0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

uint64_t sub_100763D7C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100763DAC + 4 * byte_1009C6248[a1]))(0x656C746974, 0xE500000000000000);
}

uint64_t sub_100763DAC()
{
  return 0x656C746974627573;
}

uint64_t sub_100763DC4()
{
  return 0x5474756F6C6C6163;
}

unint64_t sub_100763DE4()
{
  return 0xD000000000000014;
}

uint64_t sub_100763E00()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_100763E18()
{
  return 0x616E6964726F6F63;
}

uint64_t sub_100763E34(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100763E64 + 4 * byte_1009C624E[a1]))(0x656C746974, 0xE500000000000000);
}

uint64_t sub_100763E64()
{
  return 0x656C746974627573;
}

uint64_t sub_100763E7C()
{
  return 0x5474756F6C6C6163;
}

unint64_t sub_100763E9C()
{
  return 0xD000000000000014;
}

uint64_t sub_100763EB8()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_100763ED0()
{
  return 0x616E6964726F6F63;
}

void sub_100763EEC(char *a1)
{
  sub_10068B870(*a1);
}

void sub_100763EF8()
{
  unsigned __int8 *v0;

  sub_1004A75EC(*v0);
}

void sub_100763F00(uint64_t a1)
{
  char *v1;

  sub_1001D8DDC(a1, *v1);
}

void sub_100763F08(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1001D9D40(a1, *v1);
}

unint64_t sub_100763F10@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100763D30(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100763F3C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100763D7C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100763F64()
{
  unsigned __int8 *v0;

  return sub_100763E34(*v0);
}

uint64_t sub_100763F6C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100763D78(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100763F90(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007640E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100763FB8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007640E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100763FE0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  SearchLocation.init(from:)(a1, a2);
}

uint64_t sub_100763FF4(_QWORD *a1)
{
  return SearchLocation.encode(to:)(a1);
}

void sub_100764008()
{
  static SearchLocation.read(from:)();
}

void sub_10076401C()
{
  SearchLocation.write(to:)();
}

uint64_t sub_100764030(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, "name");

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

unint64_t sub_10076409C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C039D8;
  if (!qword_100C039D8)
  {
    v1 = sub_100075EB0(&qword_100C039D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100C039D8);
  }
  return result;
}

unint64_t sub_1007640E0()
{
  unint64_t result;

  result = qword_100C039F0;
  if (!qword_100C039F0)
  {
    result = swift_getWitnessTable(&unk_1009C651C, &type metadata for SearchLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C039F0);
  }
  return result;
}

uint64_t sub_10076411C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SearchLocation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100764158(unint64_t *a1)
{
  uint64_t v2;

  if (!*a1)
  {
    v2 = sub_100075EB0(&qword_100BC35F8);
    sub_1001103A8(v2, (uint64_t (*)(uint64_t))&type metadata accessor for Location);
    atomic_store(sub_1000E743C(), a1);
  }
  sub_1000BAB2C();
}

void sub_1007641B4(unint64_t *a1)
{
  uint64_t v2;

  if (!*a1)
  {
    v2 = sub_100075EB0(&qword_100BFCA18);
    sub_1001103A8(v2, (uint64_t (*)(uint64_t))type metadata accessor for CLLocationCoordinate2D);
    atomic_store(sub_1000E743C(), a1);
  }
  sub_1000BAB2C();
}

void sub_100764210()
{
  sub_100086DA4(&qword_100C03A20, type metadata accessor for SearchLocation, (uint64_t)&protocol conformance descriptor for SearchLocation);
}

void sub_10076423C()
{
  sub_100086DA4(&qword_100C03A28, type metadata accessor for SearchLocation, (uint64_t)&protocol conformance descriptor for SearchLocation);
}

char *initializeBufferWithCopyOfBuffer for SearchLocation(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a2[2];
    *((_QWORD *)a1 + 1) = a2[1];
    *((_QWORD *)a1 + 2) = v8;
    v9 = a2[4];
    *((_QWORD *)a1 + 3) = a2[3];
    *((_QWORD *)a1 + 4) = v9;
    v10 = a2[6];
    v11 = *(int *)(a3 + 32);
    v12 = &a1[v11];
    v13 = (char *)a2 + v11;
    *((_QWORD *)a1 + 5) = a2[5];
    *((_QWORD *)a1 + 6) = v10;
    v14 = type metadata accessor for Location(0);
    v15 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v14))
    {
      v16 = sub_1000BA294(&qword_100BC35F8);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v14);
    }
    v17 = *(int *)(a3 + 36);
    v18 = &v7[v17];
    v19 = (uint64_t)a2 + v17;
    *(_OWORD *)v18 = *(_OWORD *)v19;
    v18[16] = *(_BYTE *)(v19 + 16);
  }
  return v7;
}

uint64_t destroy for SearchLocation(id *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = (uint64_t)a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for Location(0);
  result = _s7Weather24LocationCompositionStateOwet_0(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return result;
}

_QWORD *initializeWithCopy for SearchLocation(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  const void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;

  v7 = *(void **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  v8 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v8;
  v9 = *(_QWORD *)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v9;
  v10 = *(int *)(a3 + 32);
  v11 = (char *)a1 + v10;
  v12 = (const void *)(a2 + v10);
  a1[6] = *(_QWORD *)(a2 + 48);
  v13 = type metadata accessor for Location(0);
  v14 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v13))
  {
    v15 = sub_1000BA294(&qword_100BC35F8);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v13);
  }
  v16 = *(int *)(a3 + 36);
  v17 = (char *)a1 + v16;
  v18 = a2 + v16;
  *(_OWORD *)v17 = *(_OWORD *)v18;
  v17[16] = *(_BYTE *)(v18 + 16);
  return a1;
}

uint64_t assignWithCopy for SearchLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 32);
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = type metadata accessor for Location(0);
  v13 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v12);
  v14 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12);
  if (!v13)
  {
    v15 = *(_QWORD *)(v12 - 8);
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 24))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v16 = sub_1000BA294(&qword_100BC35F8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
LABEL_7:
  v17 = *(int *)(a3 + 36);
  v18 = a1 + v17;
  v19 = (__int128 *)(a2 + v17);
  v20 = *v19;
  *(_BYTE *)(v18 + 16) = *((_BYTE *)v19 + 16);
  *(_OWORD *)v18 = v20;
  return a1;
}

uint64_t initializeWithTake for SearchLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v6 = *(int *)(a3 + 32);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Location(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9))
  {
    v10 = sub_1000BA294(&qword_100BC35F8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v9);
  }
  v11 = *(int *)(a3 + 36);
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
  return a1;
}

uint64_t assignWithTake for SearchLocation(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v7 = a2[2];
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = v7;
  swift_bridgeObjectRelease();
  v8 = a2[4];
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease();
  v9 = a2[6];
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = v9;
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 32);
  v11 = (void *)(a1 + v10);
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Location(0);
  v14 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v13);
  v15 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v13);
  if (!v14)
  {
    v16 = *(_QWORD *)(v13 - 8);
    if (!v15)
    {
      (*(void (**)(void *, char *, uint64_t))(v16 + 40))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v17 = sub_1000BA294(&qword_100BC35F8);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v13);
LABEL_7:
  v18 = *(int *)(a3 + 36);
  v19 = a1 + v18;
  v20 = (char *)a2 + v18;
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_BYTE *)(v19 + 16) = v20[16];
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10076493C);
}

uint64_t sub_10076493C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000BA294(&qword_100BC35F8);
    return _s7Weather24LocationCompositionStateOwet_0(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SearchLocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1007649C0);
}

uint64_t sub_1007649C0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_1000BA294(&qword_100BC35F8);
    return _s7Weather24LocationCompositionStateOwst_0(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SearchLocation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100764A7C + 4 * byte_1009C6259[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100764AB0 + 4 * byte_1009C6254[v4]))();
}

uint64_t sub_100764AB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100764AB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100764AC0);
  return result;
}

uint64_t sub_100764ACC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100764AD4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100764AD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100764AE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchLocation.CodingKeys()
{
  return &type metadata for SearchLocation.CodingKeys;
}

unint64_t sub_100764B00()
{
  unint64_t result;

  result = qword_100C03AD0;
  if (!qword_100C03AD0)
  {
    result = swift_getWitnessTable(&unk_1009C64F4, &type metadata for SearchLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C03AD0);
  }
  return result;
}

unint64_t sub_100764B40()
{
  unint64_t result;

  result = qword_100C03AD8;
  if (!qword_100C03AD8)
  {
    result = swift_getWitnessTable(&unk_1009C642C, &type metadata for SearchLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C03AD8);
  }
  return result;
}

unint64_t sub_100764B80()
{
  unint64_t result;

  result = qword_100C03AE0;
  if (!qword_100C03AE0)
  {
    result = swift_getWitnessTable(&unk_1009C6454, &type metadata for SearchLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C03AE0);
  }
  return result;
}

uint64_t sub_100764BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_100764BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_100764C3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_100764C80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_100764CC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_100764D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100764D14);
}

uint64_t sub_100764D14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_100098A00();
  return _s7Weather24LocationCompositionStateOwet_0(v1, v0, v2);
}

uint64_t sub_100764D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100764D48);
}

uint64_t sub_100764D48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_100098A00();
  return _s7Weather24LocationCompositionStateOwst_0(v1, v0, v0, v2);
}

uint64_t sub_100764D78(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 0x54746E6572727563 && a2 == 0xEB00000000656D69)
  {
    swift_bridgeObjectRelease(0xEB00000000656D69);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x54746E6572727563, 0xEB00000000656D69, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

uint64_t sub_100764E14()
{
  return 0x54746E6572727563;
}

uint64_t sub_100764E34(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = v1;
  v4 = sub_1000BA294(&qword_100C03B98);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100098728();
  v8 = v7 - v6;
  v9 = a1[3];
  v10 = a1[4];
  sub_1000DB418(a1, v9);
  v11 = sub_10076534C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for TimeState.CodingKeys, &type metadata for TimeState.CodingKeys, v11, v9, v10);
  v12 = type metadata accessor for Date(0);
  sub_100051B90(&qword_100BC3578, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v2, v13, v4, v12);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_100764F3C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v23 = type metadata accessor for Date(0);
  v20 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  sub_100098728();
  v22 = v5 - v4;
  v6 = sub_1000BA294(&qword_100C03B88);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100098728();
  v10 = v9 - v8;
  v11 = type metadata accessor for TimeState(0);
  __chkstk_darwin(v11);
  sub_100098728();
  v14 = v13 - v12;
  v15 = a1[3];
  v16 = a1[4];
  sub_1000DB418(a1, v15);
  v17 = sub_10076534C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for TimeState.CodingKeys, &type metadata for TimeState.CodingKeys, v17, v15, v16);
  if (!v2)
  {
    sub_100051B90(&qword_100BC3558, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v23, v18, v6);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v14, v22, v23);
    sub_100765388(v14, a2);
  }
  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
}

uint64_t sub_1007650EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100764D78(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100765114(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10076534C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10076513C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10076534C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100765168@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100764F3C(a1, a2);
}

uint64_t sub_10076517C(_QWORD *a1)
{
  return sub_100764E34(a1);
}

uint64_t sub_100765190@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = sub_1000BA294(&qword_100BC31F0);
  inited = swift_initStackObject(v3, &v10);
  *(_OWORD *)(inited + 16) = xmmword_10097CA50;
  *(_QWORD *)(inited + 32) = 0x54746E6572727563;
  *(_QWORD *)(inited + 40) = 0xEB00000000656D69;
  v5 = type metadata accessor for Date(0);
  *(_QWORD *)(inited + 72) = v5;
  v6 = sub_10005F164((_QWORD *)(inited + 48));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v6, v1, v5);
  v7 = Dictionary.init(dictionaryLiteral:)(inited);
  a1[3] = sub_1000BA294(&qword_100C03BA0);
  a1[4] = sub_1007653CC();
  sub_10005F164(a1);
  v8 = type metadata accessor for TimeState(0);
  return ShortDescription.init(name:_:)(0x74617453656D6954, 0xE900000000000065, v7, v8);
}

uint64_t sub_1007652B8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100051B90(&qword_100C03BB0, type metadata accessor for TimeState, (uint64_t)&unk_1009C65F8);
  return ShortDescribable.description.getter(a1, v2);
}

void sub_1007652F8()
{
  sub_1006B5A20();
}

uint64_t sub_10076530C()
{
  return sub_1006B5678();
}

uint64_t sub_100765320()
{
  return sub_100051B90(&qword_100C03B80, type metadata accessor for TimeState, (uint64_t)&unk_1009C65D0);
}

unint64_t sub_10076534C()
{
  unint64_t result;

  result = qword_100C03B90;
  if (!qword_100C03B90)
  {
    result = swift_getWitnessTable(&unk_1009C6764, &type metadata for TimeState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C03B90);
  }
  return result;
}

uint64_t sub_100765388(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TimeState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1007653CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C03BA8;
  if (!qword_100C03BA8)
  {
    v1 = sub_100075EB0(&qword_100C03BA0);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100C03BA8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TimeState.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100765450 + 4 * byte_1009C656C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100765470 + 4 * byte_1009C6571[v4]))();
}

_BYTE *sub_100765450(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100765470(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100765478(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100765480(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100765488(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100765490(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TimeState.CodingKeys()
{
  return &type metadata for TimeState.CodingKeys;
}

unint64_t sub_1007654B0()
{
  unint64_t result;

  result = qword_100C03BB8;
  if (!qword_100C03BB8)
  {
    result = swift_getWitnessTable(&unk_1009C673C, &type metadata for TimeState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C03BB8);
  }
  return result;
}

unint64_t sub_1007654F0()
{
  unint64_t result;

  result = qword_100C03BC0;
  if (!qword_100C03BC0)
  {
    result = swift_getWitnessTable(&unk_1009C66AC, &type metadata for TimeState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C03BC0);
  }
  return result;
}

unint64_t sub_100765530()
{
  unint64_t result;

  result = qword_100C03BC8;
  if (!qword_100C03BC8)
  {
    result = swift_getWitnessTable(&unk_1009C66D4, &type metadata for TimeState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C03BC8);
  }
  return result;
}

uint64_t sub_10076556C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  a1[3] = sub_1000BA294(&qword_100C03BD8);
  a1[4] = sub_100765670();
  sub_10005F164(a1);
  return ShortDescription.init(name:_:)(0xD000000000000011, 0x80000001009C6830, v2, &type metadata for LocationViewState);
}

uint64_t sub_100765600@<X0>(_QWORD *a1@<X8>)
{
  return sub_10076556C(a1);
}

uint64_t sub_100765608(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007656B4();
  return ShortDescribable.description.getter(a1, v2);
}

unint64_t sub_100765634()
{
  unint64_t result;

  result = qword_100C03BD0;
  if (!qword_100C03BD0)
  {
    result = swift_getWitnessTable(&unk_1009C67CC, &type metadata for LocationViewState);
    atomic_store(result, (unint64_t *)&qword_100C03BD0);
  }
  return result;
}

unint64_t sub_100765670()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C03BE0;
  if (!qword_100C03BE0)
  {
    v1 = sub_100075EB0(&qword_100C03BD8);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100C03BE0);
  }
  return result;
}

unint64_t sub_1007656B4()
{
  unint64_t result;

  result = qword_100C03BE8;
  if (!qword_100C03BE8)
  {
    result = swift_getWitnessTable(&unk_1009C67F4, &type metadata for LocationViewState);
    atomic_store(result, (unint64_t *)&qword_100C03BE8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LocationViewState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10076573C + 4 * byte_1009C67C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100765770 + 4 * byte_1009C67C0[v4]))();
}

uint64_t sub_100765770(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100765778(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100765780);
  return result;
}

uint64_t sub_10076578C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100765794);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100765798(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007657A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocationViewState()
{
  return &type metadata for LocationViewState;
}

void sub_1007657BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;

  v4 = type metadata accessor for WeatherMapOverlayKind(0);
  __chkstk_darwin(v4);
  sub_1000860DC();
  v5 = (char *)sub_100765844 + 4 * word_1009C6870[sub_100414254(a1, a2)];
  __asm { BR              X10 }
}

uint64_t sub_100765844()
{
  unsigned int v0;

  if (qword_100BC2568 != -1)
    swift_once(&qword_100BC2568, sub_100765EAC);
  v0 = byte_100CAF340;
  sub_1000860DC();
  return v0;
}

void sub_100765D50()
{
  sub_1000BA45C();
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001009F1D70, "Weather/PerformanceTestDefinitions_iPad.swift", 45, 2);
  __break(1u);
}

uint64_t type metadata accessor for PerformanceTestDefinitions_iPad()
{
  return objc_opt_self(_TtC7Weather31PerformanceTestDefinitions_iPad);
}

void sub_100765E98(uint64_t a1, uint64_t a2)
{
  sub_1007657BC(a1, a2);
}

uint64_t sub_100765EAC()
{
  uint64_t result;

  result = sub_100765ED4();
  byte_100CAF340 = 1;
  qword_100CAF348 = result;
  return result;
}

uint64_t sub_100765ED4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = type metadata accessor for Navigate(0);
  __chkstk_darwin(v0);
  v2 = (uint64_t *)((char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = type metadata accessor for SettingReader(0);
  static SettingReader.shared.getter(v3);
  if (qword_100BC2138 != -1)
    swift_once(&qword_100BC2138, sub_1004EB7A4);
  SettingReader.read<A>(_:)(&v12);
  swift_release();
  v4 = v12;
  *v2 = 2;
  v5 = type metadata accessor for Navigate.Destination(0);
  swift_storeEnumTagMultiPayload(v2, v5, 1);
  *((_BYTE *)v2 + *(int *)(v0 + 20)) = 0;
  v6 = sub_1000BA294(&qword_100BC5A28);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_10097CA50;
  *(_QWORD *)(v7 + 56) = &type metadata for Scroll;
  *(_QWORD *)(v7 + 64) = &off_100B6B770;
  *(_QWORD *)(v7 + 32) = sub_100766114;
  *(_QWORD *)(v7 + 40) = 0;
  v8 = swift_allocObject(v6, 432, 7);
  *(_OWORD *)(v8 + 16) = xmmword_10097FA60;
  *(_QWORD *)(v8 + 56) = &type metadata for Mica;
  *(_QWORD *)(v8 + 64) = &off_100B80EE8;
  *(_BYTE *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 96) = &type metadata for Delay;
  *(_QWORD *)(v8 + 104) = &off_100B674E0;
  *(_QWORD *)(v8 + 72) = 0x3FF0000000000000;
  *(_QWORD *)(v8 + 136) = &type metadata for UpdateWeather;
  *(_QWORD *)(v8 + 144) = &off_100B9D1D0;
  *(_BYTE *)(v8 + 112) = v4;
  *(_QWORD *)(v8 + 176) = &type metadata for Delay;
  *(_QWORD *)(v8 + 184) = &off_100B674E0;
  *(_QWORD *)(v8 + 152) = 0x3FF0000000000000;
  *(_QWORD *)(v8 + 216) = v0;
  *(_QWORD *)(v8 + 224) = &off_100B7C430;
  v9 = sub_10005F164((_QWORD *)(v8 + 192));
  sub_1000A6594((uint64_t)v2, (uint64_t)v9, type metadata accessor for Navigate);
  *(_QWORD *)(v8 + 256) = &type metadata for Delay;
  *(_QWORD *)(v8 + 264) = &off_100B674E0;
  *(_QWORD *)(v8 + 232) = 0x3FF0000000000000;
  *(_QWORD *)(v8 + 296) = &type metadata for Sidebar;
  *(_QWORD *)(v8 + 304) = &off_100B8FAA0;
  *(_BYTE *)(v8 + 272) = 0;
  *(_QWORD *)(v8 + 336) = &type metadata for Delay;
  *(_QWORD *)(v8 + 344) = &off_100B674E0;
  *(_QWORD *)(v8 + 312) = 0x3FF0000000000000;
  *(_QWORD *)(v8 + 376) = &type metadata for Measure;
  *(_QWORD *)(v8 + 384) = &off_100B65218;
  *(_QWORD *)(v8 + 352) = v7;
  *(_QWORD *)(v8 + 416) = &type metadata for Mica;
  *(_QWORD *)(v8 + 424) = &off_100B80EE8;
  *(_BYTE *)(v8 + 392) = 1;
  sub_10006BD20((uint64_t)v2, type metadata accessor for Navigate);
  return v8;
}

uint64_t sub_100766114(double a1, double a2, double a3, double a4)
{
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a4 + -240.0;
  v5 = (a4 + -240.0) * 3.0;
  v6 = sub_1000BA294(&qword_100BF2058);
  v7 = swift_allocObject(v6, 112, 7);
  *(_OWORD *)(v7 + 16) = xmmword_10097DA20;
  *(_QWORD *)(v7 + 56) = &type metadata for Down;
  *(_QWORD *)(v7 + 64) = &off_100B666B8;
  v8 = swift_allocObject(&unk_100B8E8F8, 64, 7);
  *(_QWORD *)(v7 + 32) = v8;
  *(_BYTE *)(v8 + 16) = 1;
  *(_OWORD *)(v8 + 24) = xmmword_1009C68E0;
  *(_QWORD *)(v8 + 40) = 0x4072C00000000000;
  *(double *)(v8 + 48) = v4;
  *(double *)(v8 + 56) = v5;
  *(_QWORD *)(v7 + 96) = &type metadata for Up;
  *(_QWORD *)(v7 + 104) = &off_100B6A800;
  v9 = swift_allocObject(&unk_100B8E8F8, 64, 7);
  *(_QWORD *)(v7 + 72) = v9;
  *(_BYTE *)(v9 + 16) = 0;
  *(_OWORD *)(v9 + 24) = xmmword_1009C68E0;
  *(_QWORD *)(v9 + 40) = 0x4072C00000000000;
  *(double *)(v9 + 48) = v4;
  *(double *)(v9 + 56) = v5;
  return v7;
}

uint64_t sub_100766218()
{
  uint64_t result;

  result = sub_100766240();
  byte_100CAF350 = 4;
  qword_100CAF358 = result;
  return result;
}

uint64_t sub_100766240()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;

  v0 = type metadata accessor for Navigate(0);
  __chkstk_darwin(v0);
  v2 = (uint64_t *)((char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = type metadata accessor for SettingReader(0);
  static SettingReader.shared.getter(v3);
  if (qword_100BC2138 != -1)
    swift_once(&qword_100BC2138, sub_1004EB7A4);
  SettingReader.read<A>(_:)(&v13);
  swift_release();
  v4 = v13;
  *v2 = 2;
  v5 = type metadata accessor for Navigate.Destination(0);
  swift_storeEnumTagMultiPayload(v2, v5, 1);
  *((_BYTE *)v2 + *(int *)(v0 + 20)) = 0;
  sub_100766444();
  v7 = v6;
  v8 = sub_1000BA294(&qword_100BC5A28);
  v9 = swift_allocObject(v8, 432, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10097FA60;
  *(_QWORD *)(v9 + 56) = &type metadata for Mica;
  *(_QWORD *)(v9 + 64) = &off_100B80EE8;
  *(_BYTE *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 96) = &type metadata for Delay;
  *(_QWORD *)(v9 + 104) = &off_100B674E0;
  *(_QWORD *)(v9 + 72) = 0x3FF0000000000000;
  *(_QWORD *)(v9 + 136) = &type metadata for UpdateWeather;
  *(_QWORD *)(v9 + 144) = &off_100B9D1D0;
  *(_BYTE *)(v9 + 112) = v4;
  *(_QWORD *)(v9 + 176) = &type metadata for Delay;
  *(_QWORD *)(v9 + 184) = &off_100B674E0;
  *(_QWORD *)(v9 + 152) = 0x3FF0000000000000;
  *(_QWORD *)(v9 + 216) = v0;
  *(_QWORD *)(v9 + 224) = &off_100B7C430;
  v10 = sub_10005F164((_QWORD *)(v9 + 192));
  sub_1000A6594((uint64_t)v2, (uint64_t)v10, type metadata accessor for Navigate);
  *(_QWORD *)(v9 + 256) = &type metadata for Delay;
  *(_QWORD *)(v9 + 264) = &off_100B674E0;
  *(_QWORD *)(v9 + 232) = 0x3FF0000000000000;
  *(_QWORD *)(v9 + 296) = &type metadata for Sidebar;
  *(_QWORD *)(v9 + 304) = &off_100B8FAA0;
  *(_BYTE *)(v9 + 272) = 1;
  *(_QWORD *)(v9 + 336) = &type metadata for Delay;
  *(_QWORD *)(v9 + 344) = &off_100B674E0;
  *(_QWORD *)(v9 + 312) = 0x3FF0000000000000;
  *(_QWORD *)(v9 + 376) = &type metadata for Measure;
  *(_QWORD *)(v9 + 384) = &off_100B65218;
  *(_QWORD *)(v9 + 352) = v7;
  *(_QWORD *)(v9 + 416) = &type metadata for Mica;
  *(_QWORD *)(v9 + 424) = &off_100B80EE8;
  *(_BYTE *)(v9 + 392) = 1;
  sub_10006BD20((uint64_t)v2, type metadata accessor for Navigate);
  return v9;
}

double sub_100766444()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v0 = sub_1000BA294(&qword_100BC5A28);
  v1 = swift_allocObject(v0, 112, 7);
  *(_OWORD *)(v1 + 16) = xmmword_10097DA20;
  *(_QWORD *)(v1 + 56) = &type metadata for Swipe;
  *(_QWORD *)(v1 + 64) = &off_100B77910;
  *(_QWORD *)(v1 + 32) = sub_1007665A4;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 96) = &type metadata for Delay;
  *(_QWORD *)(v1 + 104) = &off_100B674E0;
  *(_QWORD *)(v1 + 72) = 0x3FF0000000000000;
  v2 = swift_allocObject(v0, 112, 7);
  *(_OWORD *)(v2 + 16) = xmmword_10097DA20;
  *(_QWORD *)(v2 + 56) = &type metadata for Swipe;
  *(_QWORD *)(v2 + 64) = &off_100B77910;
  *(_QWORD *)(v2 + 32) = sub_1007665BC;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 96) = &type metadata for Delay;
  *(_QWORD *)(v2 + 104) = &off_100B674E0;
  *(_QWORD *)(v2 + 72) = 0x3FF0000000000000;
  v3 = swift_allocObject(v0, 112, 7);
  *(_OWORD *)(v3 + 16) = xmmword_10097DA20;
  *(_QWORD *)(v3 + 56) = &type metadata for Swipe;
  *(_QWORD *)(v3 + 64) = &off_100B77910;
  *(_QWORD *)(v3 + 32) = sub_1007665A4;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 96) = &type metadata for Delay;
  *(_QWORD *)(v3 + 104) = &off_100B674E0;
  *(_QWORD *)(v3 + 72) = 0x3FF0000000000000;
  v4 = swift_allocObject(v0, 152, 7);
  *(_QWORD *)&result = 3;
  *(_OWORD *)(v4 + 16) = xmmword_10098B610;
  *(_QWORD *)(v4 + 56) = &type metadata for Repeat;
  *(_QWORD *)(v4 + 64) = &off_100B8D5C0;
  *(_QWORD *)(v4 + 32) = 2;
  *(_QWORD *)(v4 + 40) = v1;
  *(_QWORD *)(v4 + 96) = &type metadata for Repeat;
  *(_QWORD *)(v4 + 104) = &off_100B8D5C0;
  *(_QWORD *)(v4 + 72) = 4;
  *(_QWORD *)(v4 + 80) = v2;
  *(_QWORD *)(v4 + 136) = &type metadata for Repeat;
  *(_QWORD *)(v4 + 144) = &off_100B8D5C0;
  *(_QWORD *)(v4 + 112) = 2;
  *(_QWORD *)(v4 + 120) = v3;
  return result;
}

uint64_t sub_1007665A4(double a1, double a2, double a3, double a4)
{
  return sub_1007665D4((uint64_t)&type metadata for Next, (uint64_t)&off_100B8BCB8, 0, a1, a2, a3, a4);
}

uint64_t sub_1007665BC(double a1, double a2, double a3, double a4)
{
  return sub_1007665D4((uint64_t)&type metadata for Previous, (uint64_t)&off_100B769E0, 1, a1, a2, a3, a4);
}

uint64_t sub_1007665D4(uint64_t a1, uint64_t a2, char a3, double a4, double a5, double a6, double a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v12 = sub_1000BA294(&qword_100BF2060);
  v13 = sub_100098740(v12, 72);
  *(_OWORD *)(v13 + 16) = xmmword_10097CA50;
  *(_QWORD *)(v13 + 56) = a1;
  *(_QWORD *)(v13 + 64) = a2;
  v14 = sub_100098740((uint64_t)&unk_100B8E920, 72);
  *(_QWORD *)(v13 + 32) = v14;
  *(_BYTE *)(v14 + 16) = a3;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  *(double *)(v14 + 40) = a7;
  *(double *)(v14 + 48) = a6;
  *(_QWORD *)(v14 + 56) = 1;
  *(_QWORD *)(v14 + 64) = 0x3FF0000000000000;
  return v13;
}

uint64_t sub_100766668()
{
  uint64_t result;

  result = sub_100766690();
  byte_100CAF360 = 5;
  qword_100CAF368 = result;
  return result;
}

uint64_t sub_100766690()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;

  v0 = type metadata accessor for DispatchAction(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for SettingReader(0);
  static SettingReader.shared.getter(v3);
  if (qword_100BC2138 != -1)
    swift_once(&qword_100BC2138, sub_1004EB7A4);
  SettingReader.read<A>(_:)(&v14);
  swift_release();
  v4 = v14;
  static Location.cupertino.getter(v5);
  v6 = type metadata accessor for PerformanceTestAction(0);
  swift_storeEnumTagMultiPayload(v2, v6, 2);
  v7 = type metadata accessor for MainAction(0);
  swift_storeEnumTagMultiPayload(v2, v7, 17);
  v2[*(int *)(v0 + 20)] = 0;
  v8 = sub_1007668B0();
  v9 = sub_1000BA294(&qword_100BC5A28);
  v10 = swift_allocObject(v9, 432, 7);
  *(_OWORD *)(v10 + 16) = xmmword_10097FA60;
  *(_QWORD *)(v10 + 56) = &type metadata for Mica;
  *(_QWORD *)(v10 + 64) = &off_100B80EE8;
  *(_BYTE *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 96) = &type metadata for Delay;
  *(_QWORD *)(v10 + 104) = &off_100B674E0;
  *(_QWORD *)(v10 + 72) = 0x3FF0000000000000;
  *(_QWORD *)(v10 + 136) = &type metadata for UpdateWeather;
  *(_QWORD *)(v10 + 144) = &off_100B9D1D0;
  *(_BYTE *)(v10 + 112) = v4;
  *(_QWORD *)(v10 + 176) = &type metadata for Delay;
  *(_QWORD *)(v10 + 184) = &off_100B674E0;
  *(_QWORD *)(v10 + 152) = 0x3FF0000000000000;
  *(_QWORD *)(v10 + 216) = v0;
  *(_QWORD *)(v10 + 224) = &off_100B9B100;
  v11 = sub_10005F164((_QWORD *)(v10 + 192));
  sub_1000A6594((uint64_t)v2, (uint64_t)v11, type metadata accessor for DispatchAction);
  *(_QWORD *)(v10 + 256) = &type metadata for Delay;
  *(_QWORD *)(v10 + 264) = &off_100B674E0;
  *(_QWORD *)(v10 + 232) = 0x3FF0000000000000;
  *(_QWORD *)(v10 + 296) = &type metadata for Sidebar;
  *(_QWORD *)(v10 + 304) = &off_100B8FAA0;
  *(_BYTE *)(v10 + 272) = 0;
  *(_QWORD *)(v10 + 336) = &type metadata for Delay;
  *(_QWORD *)(v10 + 344) = &off_100B674E0;
  *(_QWORD *)(v10 + 312) = 0x4008000000000000;
  *(_QWORD *)(v10 + 376) = &type metadata for Measure;
  *(_QWORD *)(v10 + 384) = &off_100B65218;
  *(_QWORD *)(v10 + 352) = v8;
  *(_QWORD *)(v10 + 416) = &type metadata for Mica;
  *(_QWORD *)(v10 + 424) = &off_100B80EE8;
  *(_BYTE *)(v10 + 392) = 1;
  sub_10006BD20((uint64_t)v2, type metadata accessor for DispatchAction);
  return v10;
}

uint64_t sub_1007668B0()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  v0 = type metadata accessor for DispatchAction(0);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Location.newYork.getter(v1);
  v4 = type metadata accessor for PerformanceTestAction(0);
  swift_storeEnumTagMultiPayload(v3, v4, 2);
  v5 = type metadata accessor for MainAction(0);
  swift_storeEnumTagMultiPayload(v3, v5, 17);
  v3[*(int *)(v0 + 20)] = 0;
  v6 = sub_1000BA294(&qword_100BC5A28);
  v7 = swift_allocObject(v6, 112, 7);
  *(_OWORD *)(v7 + 16) = xmmword_10097DA20;
  *(_QWORD *)(v7 + 56) = v0;
  *(_QWORD *)(v7 + 64) = &off_100B9B100;
  v8 = sub_10005F164((_QWORD *)(v7 + 32));
  sub_1000A6594((uint64_t)v3, (uint64_t)v8, type metadata accessor for DispatchAction);
  *(_QWORD *)(v7 + 96) = &type metadata for Delay;
  *(_QWORD *)(v7 + 104) = &off_100B674E0;
  *(_QWORD *)(v7 + 72) = 0x4008000000000000;
  sub_10006BD20((uint64_t)v3, type metadata accessor for DispatchAction);
  return v7;
}

void sub_1007669CC()
{
  uint64_t v0;

  sub_1007669F4();
  byte_100CAF370 = 7;
  qword_100CAF378 = v0;
}

double sub_1007669F4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;
  uint64_t v6;

  v0 = type metadata accessor for SettingReader(0);
  static SettingReader.shared.getter(v0);
  if (qword_100BC2138 != -1)
    swift_once(&qword_100BC2138, sub_1004EB7A4);
  SettingReader.read<A>(_:)(&v6);
  swift_release();
  v1 = v6;
  v2 = sub_1000BA294(&qword_100BC5A28);
  v3 = swift_allocObject(v2, 112, 7);
  *(_OWORD *)(v3 + 16) = xmmword_10097DA20;
  *(_QWORD *)(v3 + 56) = &type metadata for Rotate;
  *(_QWORD *)(v3 + 64) = &off_100B7CB90;
  *(_QWORD *)(v3 + 32) = 3;
  *(_QWORD *)(v3 + 96) = &type metadata for Delay;
  *(_QWORD *)(v3 + 104) = &off_100B674E0;
  *(_QWORD *)(v3 + 72) = 0x3FF0000000000000;
  v4 = swift_allocObject(v2, 352, 7);
  *(_QWORD *)&result = 8;
  *(_OWORD *)(v4 + 16) = xmmword_10098BCC0;
  *(_QWORD *)(v4 + 56) = &type metadata for Mica;
  *(_QWORD *)(v4 + 64) = &off_100B80EE8;
  *(_BYTE *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 96) = &type metadata for Delay;
  *(_QWORD *)(v4 + 104) = &off_100B674E0;
  *(_QWORD *)(v4 + 72) = 0x3FF0000000000000;
  *(_QWORD *)(v4 + 136) = &type metadata for UpdateWeather;
  *(_QWORD *)(v4 + 144) = &off_100B9D1D0;
  *(_BYTE *)(v4 + 112) = v1;
  *(_QWORD *)(v4 + 176) = &type metadata for Delay;
  *(_QWORD *)(v4 + 184) = &off_100B674E0;
  *(_QWORD *)(v4 + 152) = 0x3FF0000000000000;
  *(_QWORD *)(v4 + 216) = &type metadata for Sidebar;
  *(_QWORD *)(v4 + 224) = &off_100B8FAA0;
  *(_BYTE *)(v4 + 192) = 1;
  *(_QWORD *)(v4 + 256) = &type metadata for Delay;
  *(_QWORD *)(v4 + 264) = &off_100B674E0;
  *(_QWORD *)(v4 + 232) = 0x3FF0000000000000;
  *(_QWORD *)(v4 + 296) = &type metadata for Measure;
  *(_QWORD *)(v4 + 304) = &off_100B65218;
  *(_QWORD *)(v4 + 272) = v3;
  *(_QWORD *)(v4 + 336) = &type metadata for Mica;
  *(_QWORD *)(v4 + 344) = &off_100B80EE8;
  *(_BYTE *)(v4 + 312) = 1;
  return result;
}

uint64_t sub_100766B80()
{
  uint64_t result;

  result = sub_100766BA8();
  byte_100CAF380 = 8;
  qword_100CAF388 = result;
  return result;
}

uint64_t sub_100766BA8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = type metadata accessor for Navigate(0);
  __chkstk_darwin(v0);
  v2 = (uint64_t *)((char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = type metadata accessor for SettingReader(0);
  static SettingReader.shared.getter(v3);
  if (qword_100BC2138 != -1)
    swift_once(&qword_100BC2138, sub_1004EB7A4);
  SettingReader.read<A>(_:)(&v12);
  swift_release();
  v4 = v12;
  *v2 = 2;
  v5 = type metadata accessor for Navigate.Destination(0);
  swift_storeEnumTagMultiPayload(v2, v5, 1);
  *((_BYTE *)v2 + *(int *)(v0 + 20)) = 0;
  v6 = sub_1000BA294(&qword_100BC5A28);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_10097CA50;
  *(_QWORD *)(v7 + 56) = &type metadata for Scroll;
  *(_QWORD *)(v7 + 64) = &off_100B6B770;
  *(_QWORD *)(v7 + 32) = sub_100766DE8;
  *(_QWORD *)(v7 + 40) = 0;
  v8 = swift_allocObject(v6, 432, 7);
  *(_OWORD *)(v8 + 16) = xmmword_10097FA60;
  *(_QWORD *)(v8 + 56) = &type metadata for Mica;
  *(_QWORD *)(v8 + 64) = &off_100B80EE8;
  *(_BYTE *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 96) = &type metadata for Delay;
  *(_QWORD *)(v8 + 104) = &off_100B674E0;
  *(_QWORD *)(v8 + 72) = 0x3FF0000000000000;
  *(_QWORD *)(v8 + 136) = &type metadata for UpdateWeather;
  *(_QWORD *)(v8 + 144) = &off_100B9D1D0;
  *(_BYTE *)(v8 + 112) = v4;
  *(_QWORD *)(v8 + 176) = &type metadata for Delay;
  *(_QWORD *)(v8 + 184) = &off_100B674E0;
  *(_QWORD *)(v8 + 152) = 0x3FF0000000000000;
  *(_QWORD *)(v8 + 216) = v0;
  *(_QWORD *)(v8 + 224) = &off_100B7C430;
  v9 = sub_10005F164((_QWORD *)(v8 + 192));
  sub_1000A6594((uint64_t)v2, (uint64_t)v9, type metadata accessor for Navigate);
  *(_QWORD *)(v8 + 256) = &type metadata for Delay;
  *(_QWORD *)(v8 + 264) = &off_100B674E0;
  *(_QWORD *)(v8 + 232) = 0x3FF0000000000000;
  *(_QWORD *)(v8 + 296) = &type metadata for Sidebar;
  *(_QWORD *)(v8 + 304) = &off_100B8FAA0;
  *(_BYTE *)(v8 + 272) = 1;
  *(_QWORD *)(v8 + 336) = &type metadata for Delay;
  *(_QWORD *)(v8 + 344) = &off_100B674E0;
  *(_QWORD *)(v8 + 312) = 0x3FF0000000000000;
  *(_QWORD *)(v8 + 376) = &type metadata for Measure;
  *(_QWORD *)(v8 + 384) = &off_100B65218;
  *(_QWORD *)(v8 + 352) = v7;
  *(_QWORD *)(v8 + 416) = &type metadata for Mica;
  *(_QWORD *)(v8 + 424) = &off_100B80EE8;
  *(_BYTE *)(v8 + 392) = 1;
  sub_10006BD20((uint64_t)v2, type metadata accessor for Navigate);
  return v8;
}

uint64_t sub_100766DE8(double a1, double a2, double a3, double a4)
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CGRect v13;

  v13 = CGRectInset(*(CGRect *)&a1, 10.0, 90.0);
  x = v13.origin.x;
  y = v13.origin.y;
  width = v13.size.width;
  height = v13.size.height;
  v8 = sub_1000BA294(&qword_100BF2058);
  v9 = swift_allocObject(v8, 112, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10097DA20;
  *(_QWORD *)(v9 + 56) = &type metadata for Down;
  *(_QWORD *)(v9 + 64) = &off_100B666B8;
  v10 = swift_allocObject(&unk_100B8E8F8, 64, 7);
  *(_QWORD *)(v9 + 32) = v10;
  *(_BYTE *)(v10 + 16) = 1;
  *(CGFloat *)(v10 + 24) = x;
  *(CGFloat *)(v10 + 32) = y;
  *(CGFloat *)(v10 + 40) = width;
  *(CGFloat *)(v10 + 48) = height;
  *(CGFloat *)(v10 + 56) = height;
  *(_QWORD *)(v9 + 96) = &type metadata for Up;
  *(_QWORD *)(v9 + 104) = &off_100B6A800;
  v11 = swift_allocObject(&unk_100B8E8F8, 64, 7);
  *(_QWORD *)(v9 + 72) = v11;
  *(_BYTE *)(v11 + 16) = 0;
  *(CGFloat *)(v11 + 24) = x;
  *(CGFloat *)(v11 + 32) = y;
  *(CGFloat *)(v11 + 40) = width;
  *(CGFloat *)(v11 + 48) = height;
  *(CGFloat *)(v11 + 56) = height;
  return v9;
}

void sub_100766ED8()
{
  uint64_t v0;

  sub_100766F00();
  byte_100CAF390 = 9;
  qword_100CAF398 = v0;
}

double sub_100766F00()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;
  uint64_t v6;

  v0 = type metadata accessor for SettingReader(0);
  static SettingReader.shared.getter(v0);
  if (qword_100BC2138 != -1)
    swift_once(&qword_100BC2138, sub_1004EB7A4);
  SettingReader.read<A>(_:)(&v6);
  swift_release();
  v1 = v6;
  v2 = sub_1000BA294(&qword_100BC5A28);
  v3 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v3 + 16) = xmmword_10097CA50;
  *(_QWORD *)(v3 + 56) = &type metadata for Scroll;
  *(_QWORD *)(v3 + 64) = &off_100B6B770;
  *(_QWORD *)(v3 + 32) = sub_100767080;
  *(_QWORD *)(v3 + 40) = 0;
  v4 = swift_allocObject(v2, 352, 7);
  *(_QWORD *)&result = 8;
  *(_OWORD *)(v4 + 16) = xmmword_10098BCC0;
  *(_QWORD *)(v4 + 56) = &type metadata for Mica;
  *(_QWORD *)(v4 + 64) = &off_100B80EE8;
  *(_BYTE *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 96) = &type metadata for Delay;
  *(_QWORD *)(v4 + 104) = &off_100B674E0;
  *(_QWORD *)(v4 + 72) = 0x3FF0000000000000;
  *(_QWORD *)(v4 + 136) = &type metadata for UpdateWeather;
  *(_QWORD *)(v4 + 144) = &off_100B9D1D0;
  *(_BYTE *)(v4 + 112) = v1;
  *(_QWORD *)(v4 + 176) = &type metadata for Delay;
  *(_QWORD *)(v4 + 184) = &off_100B674E0;
  *(_QWORD *)(v4 + 152) = 0x3FF0000000000000;
  *(_QWORD *)(v4 + 216) = &type metadata for Sidebar;
  *(_QWORD *)(v4 + 224) = &off_100B8FAA0;
  *(_BYTE *)(v4 + 192) = 0;
  *(_QWORD *)(v4 + 256) = &type metadata for Delay;
  *(_QWORD *)(v4 + 264) = &off_100B674E0;
  *(_QWORD *)(v4 + 232) = 0x3FF0000000000000;
  *(_QWORD *)(v4 + 296) = &type metadata for Measure;
  *(_QWORD *)(v4 + 304) = &off_100B65218;
  *(_QWORD *)(v4 + 272) = v3;
  *(_QWORD *)(v4 + 336) = &type metadata for Mica;
  *(_QWORD *)(v4 + 344) = &off_100B80EE8;
  *(_BYTE *)(v4 + 312) = 1;
  return result;
}

uint64_t sub_100767080(double a1, double a2, double a3, double a4)
{
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = a3 + -5.0;
  v7 = sub_1000BA294(&qword_100BF2058);
  v8 = swift_allocObject(v7, 112, 7);
  *(_OWORD *)(v8 + 16) = xmmword_10097DA20;
  *(_QWORD *)(v8 + 56) = &type metadata for Down;
  *(_QWORD *)(v8 + 64) = &off_100B666B8;
  v9 = swift_allocObject(&unk_100B8E8F8, 64, 7);
  *(_QWORD *)(v8 + 32) = v9;
  *(_BYTE *)(v9 + 16) = 1;
  *(double *)(v9 + 24) = v6;
  *(double *)(v9 + 32) = a2;
  *(_QWORD *)(v9 + 40) = 0x4014000000000000;
  *(double *)(v9 + 48) = a4;
  *(_QWORD *)(v9 + 56) = 0x4072C00000000000;
  *(_QWORD *)(v8 + 96) = &type metadata for Up;
  *(_QWORD *)(v8 + 104) = &off_100B6A800;
  v10 = swift_allocObject(&unk_100B8E8F8, 64, 7);
  *(_QWORD *)(v8 + 72) = v10;
  *(_BYTE *)(v10 + 16) = 0;
  *(double *)(v10 + 24) = v6;
  *(double *)(v10 + 32) = a2;
  *(_QWORD *)(v10 + 40) = 0x4014000000000000;
  *(double *)(v10 + 48) = a4;
  *(_QWORD *)(v10 + 56) = 0x4072C00000000000;
  return v8;
}

void sub_10076717C()
{
  uint64_t v0;

  sub_10076751C((uint64_t (*)(__n128))sub_1007671E4, 0);
  byte_100CAF3A0 = 11;
  qword_100CAF3A8 = v0;
}

void sub_1007671B0()
{
  uint64_t v0;

  sub_10076751C((uint64_t (*)(__n128))sub_1007671E4, 0);
  byte_100CAF3B0 = 12;
  qword_100CAF3B8 = v0;
}

double sub_1007671E4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = sub_1000BA294(&qword_100BC5A28);
  v1 = sub_100098740(v0, 192);
  *(_QWORD *)&result = 4;
  *(_OWORD *)(v1 + 16) = xmmword_1009891D0;
  *(_QWORD *)(v1 + 56) = &type metadata for Sidebar;
  *(_QWORD *)(v1 + 64) = &off_100B8FAA0;
  *(_BYTE *)(v1 + 32) = 1;
  *(_QWORD *)(v1 + 96) = &type metadata for Delay;
  *(_QWORD *)(v1 + 104) = &off_100B674E0;
  *(_QWORD *)(v1 + 72) = 0x4000000000000000;
  *(_QWORD *)(v1 + 136) = &type metadata for Sidebar;
  *(_QWORD *)(v1 + 144) = &off_100B8FAA0;
  *(_BYTE *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 176) = &type metadata for Delay;
  *(_QWORD *)(v1 + 184) = &off_100B674E0;
  *(_QWORD *)(v1 + 152) = 0x4000000000000000;
  return result;
}

void sub_10076725C()
{
  uint64_t v0;

  sub_10076751C((uint64_t (*)(__n128))sub_1007672C4, 1);
  byte_100CAF3C0 = 13;
  qword_100CAF3C8 = v0;
}

void sub_100767290()
{
  uint64_t v0;

  sub_10076751C((uint64_t (*)(__n128))sub_1007672C4, 1);
  byte_100CAF3D0 = 14;
  qword_100CAF3D8 = v0;
}

uint64_t sub_1007672C4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v21;

  v0 = type metadata accessor for DispatchAction(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v5 = (char *)&v21 - v4;
  v6 = sub_1000BA294(&qword_100BC5FC8);
  v7 = &v5[*(int *)(v6 + 48)];
  v8 = (uint64_t)&v5[*(int *)(v6 + 64)];
  v9 = enum case for WeatherMapOverlayKind.temperature(_:);
  v10 = type metadata accessor for WeatherMapOverlayKind(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v5, v9, v10);
  v11 = type metadata accessor for LocationComponentAction(0);
  sub_1000DBD54(v11, v11);
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[32] = 1;
  v12 = type metadata accessor for Date(0);
  _s7Weather24LocationCompositionStateOwst_0(v8, 1, 1, v12);
  v13 = type metadata accessor for LocationViewAction(0);
  sub_1000DBD54(v13, v13);
  v14 = type metadata accessor for MainAction(0);
  swift_storeEnumTagMultiPayload(v5, v14, 8);
  v5[*(int *)(v0 + 20)] = 1;
  v15 = type metadata accessor for ViewAction(0);
  swift_storeEnumTagMultiPayload(v2, v15, 8);
  swift_storeEnumTagMultiPayload(v2, v14, 6);
  v2[*(int *)(v0 + 20)] = 1;
  v16 = sub_1000BA294(&qword_100BC5A28);
  v17 = sub_100098740(v16, 192);
  *(_OWORD *)(v17 + 16) = xmmword_1009891D0;
  *(_QWORD *)(v17 + 56) = v0;
  *(_QWORD *)(v17 + 64) = &off_100B9B100;
  v18 = sub_10005F164((_QWORD *)(v17 + 32));
  sub_1000A6594((uint64_t)v5, (uint64_t)v18, type metadata accessor for DispatchAction);
  *(_QWORD *)(v17 + 96) = &type metadata for Delay;
  *(_QWORD *)(v17 + 104) = &off_100B674E0;
  *(_QWORD *)(v17 + 72) = 0x4000000000000000;
  *(_QWORD *)(v17 + 136) = v0;
  *(_QWORD *)(v17 + 144) = &off_100B9B100;
  v19 = sub_10005F164((_QWORD *)(v17 + 112));
  sub_1000A6594((uint64_t)v2, (uint64_t)v19, type metadata accessor for DispatchAction);
  *(_QWORD *)(v17 + 176) = &type metadata for Delay;
  *(_QWORD *)(v17 + 184) = &off_100B674E0;
  *(_QWORD *)(v17 + 152) = 0x4000000000000000;
  sub_10006BD20((uint64_t)v2, type metadata accessor for DispatchAction);
  sub_10006BD20((uint64_t)v5, type metadata accessor for DispatchAction);
  return v17;
}

void sub_1007674E8()
{
  uint64_t v0;

  sub_10076751C((uint64_t (*)(__n128))sub_1007676AC, 1);
  byte_100CAF3E0 = 23;
  qword_100CAF3E8 = v0;
}

double sub_10076751C(uint64_t (*a1)(__n128), char a2)
{
  uint64_t v4;
  __n128 v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  uint64_t v12;

  v4 = type metadata accessor for SettingReader(0);
  static SettingReader.shared.getter(v4);
  if (qword_100BC2138 != -1)
    swift_once(&qword_100BC2138, sub_1004EB7A4);
  SettingReader.read<A>(_:)(&v12);
  v5 = swift_release();
  v6 = v12;
  v7 = a1(v5);
  v8 = sub_1000BA294(&qword_100BC5A28);
  v9 = sub_100098740(v8, 72);
  *(_OWORD *)(v9 + 16) = xmmword_10097CA50;
  *(_QWORD *)(v9 + 56) = &type metadata for Repeat;
  *(_QWORD *)(v9 + 64) = &off_100B8D5C0;
  *(_QWORD *)(v9 + 32) = 3;
  *(_QWORD *)(v9 + 40) = v7;
  v10 = sub_100098740(v8, 352);
  *(_QWORD *)&result = 8;
  *(_OWORD *)(v10 + 16) = xmmword_10098BCC0;
  *(_QWORD *)(v10 + 56) = &type metadata for Mica;
  *(_QWORD *)(v10 + 64) = &off_100B80EE8;
  *(_BYTE *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 96) = &type metadata for Delay;
  *(_QWORD *)(v10 + 104) = &off_100B674E0;
  *(_QWORD *)(v10 + 72) = 0x3FF0000000000000;
  *(_QWORD *)(v10 + 136) = &type metadata for UpdateWeather;
  *(_QWORD *)(v10 + 144) = &off_100B9D1D0;
  *(_BYTE *)(v10 + 112) = v6;
  *(_QWORD *)(v10 + 176) = &type metadata for Delay;
  *(_QWORD *)(v10 + 184) = &off_100B674E0;
  *(_QWORD *)(v10 + 152) = 0x3FF0000000000000;
  *(_QWORD *)(v10 + 216) = &type metadata for Sidebar;
  *(_QWORD *)(v10 + 224) = &off_100B8FAA0;
  *(_BYTE *)(v10 + 192) = a2;
  *(_QWORD *)(v10 + 256) = &type metadata for Delay;
  *(_QWORD *)(v10 + 264) = &off_100B674E0;
  *(_QWORD *)(v10 + 232) = 0x4000000000000000;
  *(_QWORD *)(v10 + 296) = &type metadata for Measure;
  *(_QWORD *)(v10 + 304) = &off_100B65218;
  *(_QWORD *)(v10 + 272) = v9;
  *(_QWORD *)(v10 + 336) = &type metadata for Mica;
  *(_QWORD *)(v10 + 344) = &off_100B80EE8;
  *(_BYTE *)(v10 + 312) = 1;
  return result;
}

uint64_t sub_1007676AC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v34;
  char *v35;

  v0 = type metadata accessor for DispatchAction(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v5 = (char *)&v34 - v4;
  __chkstk_darwin(v6);
  v8 = (char *)&v34 - v7;
  __chkstk_darwin(v9);
  v11 = (char *)&v34 - v10;
  v12 = sub_1000BA294(&qword_100BC5FC8);
  v13 = &v11[*(int *)(v12 + 48)];
  v14 = (uint64_t)&v11[*(int *)(v12 + 64)];
  v15 = enum case for WeatherMapPrecipitationOverlayKind.forecast(_:);
  v16 = type metadata accessor for WeatherMapPrecipitationOverlayKind(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v11, v15, v16);
  v17 = enum case for WeatherMapOverlayKind.precipitation(_:);
  v18 = type metadata accessor for WeatherMapOverlayKind(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v11, v17, v18);
  v19 = type metadata accessor for LocationComponentAction(0);
  swift_storeEnumTagMultiPayload(v11, v19, 1);
  *(_OWORD *)v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  v13[32] = 1;
  v20 = type metadata accessor for Date(0);
  _s7Weather24LocationCompositionStateOwst_0(v14, 1, 1, v20);
  v21 = type metadata accessor for LocationViewAction(0);
  swift_storeEnumTagMultiPayload(v11, v21, 1);
  v22 = type metadata accessor for MainAction(0);
  swift_storeEnumTagMultiPayload(v11, v22, 8);
  v11[*(int *)(v0 + 20)] = 1;
  v23 = type metadata accessor for ViewAction(0);
  swift_storeEnumTagMultiPayload(v8, v23, 9);
  swift_storeEnumTagMultiPayload(v8, v22, 6);
  v8[*(int *)(v0 + 20)] = 0;
  v34 = v5;
  swift_storeEnumTagMultiPayload(v5, v23, 9);
  swift_storeEnumTagMultiPayload(v5, v22, 6);
  v5[*(int *)(v0 + 20)] = 0;
  v35 = v2;
  swift_storeEnumTagMultiPayload(v2, v23, 8);
  swift_storeEnumTagMultiPayload(v2, v22, 6);
  v2[*(int *)(v0 + 20)] = 1;
  v24 = sub_1000BA294(&qword_100BC5A28);
  v25 = swift_allocObject(v24, 352, 7);
  *(_OWORD *)(v25 + 16) = xmmword_10098BCC0;
  *(_QWORD *)(v25 + 56) = v0;
  *(_QWORD *)(v25 + 64) = &off_100B9B100;
  v26 = sub_10005F164((_QWORD *)(v25 + 32));
  sub_1000A6594((uint64_t)v11, (uint64_t)v26, type metadata accessor for DispatchAction);
  *(_QWORD *)(v25 + 96) = &type metadata for Delay;
  *(_QWORD *)(v25 + 104) = &off_100B674E0;
  *(_QWORD *)(v25 + 72) = 0x4000000000000000;
  *(_QWORD *)(v25 + 136) = v0;
  *(_QWORD *)(v25 + 144) = &off_100B9B100;
  v27 = sub_10005F164((_QWORD *)(v25 + 112));
  v28 = (uint64_t)v8;
  sub_1000A6594((uint64_t)v8, (uint64_t)v27, type metadata accessor for DispatchAction);
  *(_QWORD *)(v25 + 176) = &type metadata for Delay;
  *(_QWORD *)(v25 + 184) = &off_100B674E0;
  *(_QWORD *)(v25 + 152) = 0x4000000000000000;
  *(_QWORD *)(v25 + 216) = v0;
  *(_QWORD *)(v25 + 224) = &off_100B9B100;
  v29 = sub_10005F164((_QWORD *)(v25 + 192));
  v30 = (uint64_t)v34;
  sub_1000A6594((uint64_t)v34, (uint64_t)v29, type metadata accessor for DispatchAction);
  *(_QWORD *)(v25 + 256) = &type metadata for Delay;
  *(_QWORD *)(v25 + 264) = &off_100B674E0;
  *(_QWORD *)(v25 + 232) = 0x4000000000000000;
  *(_QWORD *)(v25 + 296) = v0;
  *(_QWORD *)(v25 + 304) = &off_100B9B100;
  v31 = sub_10005F164((_QWORD *)(v25 + 272));
  v32 = (uint64_t)v35;
  sub_1000A6594((uint64_t)v35, (uint64_t)v31, type metadata accessor for DispatchAction);
  *(_QWORD *)(v25 + 336) = &type metadata for Delay;
  *(_QWORD *)(v25 + 344) = &off_100B674E0;
  *(_QWORD *)(v25 + 312) = 0x4000000000000000;
  sub_10006BD20(v32, type metadata accessor for DispatchAction);
  sub_10006BD20(v30, type metadata accessor for DispatchAction);
  sub_10006BD20(v28, type metadata accessor for DispatchAction);
  sub_10006BD20((uint64_t)v11, type metadata accessor for DispatchAction);
  return v25;
}

uint64_t sub_100767A14()
{
  uint64_t v0;

  return sub_100099AB0(v0, 64);
}

uint64_t sub_100767A20()
{
  uint64_t v0;

  return sub_100099AB0(v0, 72);
}

uint64_t sub_100767A2C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[5];
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BC43F0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  v8 = v43;
  if (!v43)
  {
    __break(1u);
    goto LABEL_6;
  }
  v9 = a1[3];
  v10 = a1[4];
  sub_1000DB418(a1, v9);
  v11 = sub_1000BA294(&qword_100BC43B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v11, v11, v9, v10);
  v12 = v39;
  if (!v39)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v34 = v42;
  v35 = v44;
  v32 = v40;
  v33 = v41;
  v13 = a1[3];
  v14 = a1[4];
  sub_1000DB418(a1, v13);
  v15 = sub_1000BA294(&qword_100BDC598);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v15, v15, v13, v14);
  if (v38)
  {
    v16 = sub_100068EB4((uint64_t)v37, v38);
    __chkstk_darwin(v16);
    v18 = (uint64_t *)((char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v19 + 16))(v18);
    v20 = *v18;
    v21 = type metadata accessor for NetworkActivityManager();
    v36[3] = v21;
    v36[4] = &off_100B6D7E8;
    v36[0] = v20;
    v22 = type metadata accessor for ToolbarAddButtonInteractor();
    v23 = (_QWORD *)swift_allocObject(v22, 104, 7);
    v24 = sub_100068EB4((uint64_t)v36, v21);
    __chkstk_darwin(v24);
    v26 = (uint64_t *)((char *)&v31 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v27 + 16))(v26);
    v28 = *v26;
    v23[11] = v21;
    v23[12] = &off_100B6D7E8;
    v29 = v35;
    v23[2] = v8;
    v23[3] = v29;
    v30 = v32;
    v23[4] = v12;
    v23[5] = v30;
    v23[6] = v33;
    v23[7] = v34;
    v23[8] = v28;
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v36);
    result = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v37);
    a2[3] = v22;
    a2[4] = &off_100B7D540;
    *a2 = v23;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

double destroy for ReportWeatherComponentView(_QWORD *a1)
{
  double result;

  swift_unknownObjectRelease(a1[1]);
  sub_10016F41C(a1[3], a1[4]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for ReportWeatherComponentView(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 40);
  swift_unknownObjectRetain(v4);
  sub_10009D328(v5, v6);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v9;
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v10;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ReportWeatherComponentView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v6);
  *(_QWORD *)(a1 + 16) = v5;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_BYTE *)(a2 + 40);
  sub_10009D328(v7, v8);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v9;
  sub_10016F41C(v10, v11);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ReportWeatherComponentView(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_unknownObjectRelease(*(_QWORD *)(a1 + 8));
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = v4;
  sub_10016F41C(v5, v6);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t sub_100767EFC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABFEA4, 1);
}

double sub_100767F0C@<D0>(uint64_t a1@<X8>)
{
  _BYTE *v1;
  char v3;
  uint64_t v4;
  double result;
  _BYTE __dst[72];

  memcpy(__dst, v1 + 24, sizeof(__dst));
  v3 = *v1 & 1;
  v4 = swift_allocObject(&unk_100B8E9E8, 120, 7);
  memcpy((void *)(v4 + 16), v1, 0x68uLL);
  sub_100768074(v1);
  sub_1004F37E4((uint64_t)__dst, v3, (uint64_t)LocationSearchEntityFromStringResolver.init(), 0, (uint64_t)sub_10076806C, v4, a1);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_100767FBC()
{
  sub_1006BE9F4();
}

double sub_100767FDC@<D0>(uint64_t a1@<X8>)
{
  const void *v1;
  _BYTE __dst[104];

  memcpy(__dst, v1, sizeof(__dst));
  return sub_100767F0C(a1);
}

uint64_t sub_10076801C()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[3]);
  sub_10016F41C(v0[5], v0[6]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, 120, 7);
}

void sub_10076806C()
{
  sub_100767FBC();
}

_QWORD *sub_100768074(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[3];
  v3 = a1[4];
  swift_unknownObjectRetain(a1[1]);
  sub_10009D328(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *sub_1007680FC(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v34 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v34 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v34);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_WORD *)(a1 + 1) = *(_WORD *)((char *)a2 + 1);
    v7 = a3[7];
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = type metadata accessor for Locale(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[8];
    v12 = a3[9];
    v13 = (_QWORD *)((char *)v4 + v11);
    v14 = (uint64_t *)((char *)a2 + v11);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    *((_BYTE *)v4 + v12) = *((_BYTE *)a2 + v12);
    v16 = a3[11];
    *((_BYTE *)v4 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    *((_BYTE *)v4 + v16) = *((_BYTE *)a2 + v16);
    v17 = a3[13];
    *((_BYTE *)v4 + a3[12]) = *((_BYTE *)a2 + a3[12]);
    *(_QWORD *)((char *)v4 + v17) = *(uint64_t *)((char *)a2 + v17);
    v18 = a3[15];
    *((_BYTE *)v4 + a3[14]) = *((_BYTE *)a2 + a3[14]);
    *((_BYTE *)v4 + v18) = *((_BYTE *)a2 + v18);
    v19 = a3[16];
    v20 = (_QWORD *)((char *)v4 + v19);
    v21 = (uint64_t)a2 + v19;
    v22 = *(void **)v21;
    v23 = *(void **)(v21 + 8);
    *v20 = *(_QWORD *)v21;
    v20[1] = v23;
    v24 = *(void **)(v21 + 16);
    v25 = *(void **)(v21 + 24);
    v20[2] = v24;
    v20[3] = v25;
    v26 = *(void **)(v21 + 32);
    v27 = *(void **)(v21 + 40);
    v20[4] = v26;
    v20[5] = v27;
    swift_bridgeObjectRetain(v15);
    v28 = v22;
    v29 = v23;
    v30 = v24;
    v31 = v25;
    v32 = v26;
    v33 = v27;
  }
  return v4;
}

_BYTE *sub_10076823C(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _BYTE *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  id v35;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v6 = a3[7];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Locale(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[8];
  v11 = &a1[v10];
  v12 = &a2[v10];
  *v11 = *v12;
  v13 = v12[1];
  v14 = v11[1];
  v11[1] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  a1[a3[9]] = a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  a1[a3[11]] = a2[a3[11]];
  a1[a3[12]] = a2[a3[12]];
  *(_QWORD *)&a1[a3[13]] = *(_QWORD *)&a2[a3[13]];
  a1[a3[14]] = a2[a3[14]];
  a1[a3[15]] = a2[a3[15]];
  v15 = a3[16];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = *(void **)&a1[v15];
  v19 = *(void **)v17;
  *v16 = *(_QWORD *)v17;
  v20 = v19;

  v21 = (void *)v16[1];
  v22 = (void *)*((_QWORD *)v17 + 1);
  v16[1] = v22;
  v23 = v22;

  v24 = (void *)v16[2];
  v25 = (void *)*((_QWORD *)v17 + 2);
  v16[2] = v25;
  v26 = v25;

  v27 = (void *)v16[3];
  v28 = (void *)*((_QWORD *)v17 + 3);
  v16[3] = v28;
  v29 = v28;

  v30 = (void *)v16[4];
  v31 = (void *)*((_QWORD *)v17 + 4);
  v16[4] = v31;
  v32 = v31;

  v33 = (void *)v16[5];
  v34 = (void *)*((_QWORD *)v17 + 5);
  v16[5] = v34;
  v35 = v34;

  return a1;
}

uint64_t sub_1007683BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Locale(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v11 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v12 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  v13 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[16];
  v15 = (_OWORD *)(a1 + v14);
  v16 = (__int128 *)(a2 + v14);
  v17 = v16[2];
  v18 = *v16;
  v15[1] = v16[1];
  v15[2] = v17;
  *v15 = v18;
  return a1;
}

uint64_t sub_10076849C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Locale(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[8];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (uint64_t *)(a2 + v10);
  v14 = *v12;
  v13 = v12[1];
  v15 = v11[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease(v15);
  v16 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
  v17 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  v18 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  v19 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  v22 = *(void **)(a1 + v19);
  *(_QWORD *)(a1 + v19) = *v21;

  v23 = (void *)v20[1];
  v20[1] = v21[1];

  v24 = (void *)v20[2];
  v20[2] = v21[2];

  v25 = (void *)v20[3];
  v20[3] = v21[3];

  v26 = (void *)v20[4];
  v20[4] = v21[4];

  v27 = (void *)v20[5];
  v20[5] = v21[5];

  return a1;
}

uint64_t sub_1007685DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;

  v6 = sub_1000988FC();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return _s7Weather24LocationCompositionStateOwet_0(a1 + *(int *)(a3 + 28), a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 32) + 8);
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

uint64_t sub_100768658(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = sub_1000988FC();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return _s7Weather24LocationCompositionStateOwst_0(a1 + *(int *)(a4 + 28), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32) + 8) = (a2 - 1);
  return result;
}

void sub_1007686D0(unsigned __int8 a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, _BYTE *a9@<X8>, char a10, char a11, uint64_t a12, char a13, char a14, char a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  int v58;
  uint64_t v59;
  uint64_t *v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  char v70;
  void *v71;
  char v72;
  uint64_t v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  _BYTE *v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  uint64_t v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  _BYTE *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  uint64_t v111;
  _QWORD v112[6];
  uint64_t v113;
  _QWORD v114[6];

  v17 = v16;
  v95 = a8;
  v93 = a7;
  v107 = a6;
  v111 = a5;
  v105 = a4;
  v109 = a2;
  v110 = a3;
  v103 = a9;
  v104 = a1;
  v100 = a16;
  sub_10006A7CC(a16, (uint64_t)v112);
  v102 = (void *)v112[0];
  v91 = (void *)v112[1];
  v90 = (void *)v112[2];
  v89 = (void *)v112[3];
  v88 = (void *)v112[4];
  v87 = (void *)v112[5];
  sub_1000BA294(&qword_100BC3340);
  sub_1000B42B0();
  __chkstk_darwin(v18);
  sub_100098728();
  v21 = v20 - v19;
  v22 = sub_1000988FC();
  v92 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  sub_100088FDC();
  v108 = v23;
  v106 = sub_1000D9204();
  sub_1000B42B0();
  __chkstk_darwin(v24);
  sub_1000BA30C();
  __chkstk_darwin(v25);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v26);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v27);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v28);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v29);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v30);
  v32 = (char *)&v86 - v31;
  __chkstk_darwin(v33);
  v35 = (char *)&v86 - v34;
  __chkstk_darwin(v36);
  v38 = (char *)&v86 - v37;
  __chkstk_darwin(v39);
  v41 = (char *)&v86 - v40;
  __chkstk_darwin(v42);
  v44 = (char *)&v86 - v43;
  __chkstk_darwin(v45);
  v47 = (char *)&v86 - v46;
  __chkstk_darwin(v48);
  v50 = (unsigned __int8 *)&v86 - v49;
  sub_10006A788(v17, (uint64_t)&v86 - v49);
  if (v104 == 2)
    v51 = *v50;
  else
    v51 = v104 & 1;
  v104 = v51;
  sub_10006A74C((uint64_t)v50);
  sub_10006A788(v17, (uint64_t)v47);
  if (v109 == 5)
    v109 = v47[1];
  sub_10006A74C((uint64_t)v47);
  sub_1000D2010();
  if (v110 == 5)
    v110 = v44[2];
  sub_10006A74C((uint64_t)v44);
  sub_10010A5AC(v105, v21);
  sub_1000D143C();
  v52 = _s7Weather24LocationCompositionStateOwet_0(v21, 1, v22);
  v53 = (int *)v106;
  if (v52 == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v92 + 16))(v108, &v41[*(int *)(v106 + 28)], v22);
    sub_1000DF93C();
    sub_1000AA25C(v21);
  }
  else
  {
    sub_1000DF93C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 32))(v108, v21, v22);
  }
  v54 = v111;
  v55 = v98;
  v56 = v97;
  v57 = v95;
  v58 = v93;
  sub_1000D9254();
  v59 = v107;
  if (v107)
  {
    v105 = v107;
  }
  else
  {
    v60 = (uint64_t *)&v38[v53[8]];
    v54 = *v60;
    v105 = v60[1];
    swift_bridgeObjectRetain(v105);
    v59 = v107;
  }
  swift_bridgeObjectRetain(v59);
  sub_10006A74C((uint64_t)v38);
  sub_1000C180C();
  if (v58 == 2)
    v61 = v35[v53[9]];
  else
    v61 = v58 & 1;
  LODWORD(v98) = v61;
  v62 = v94;
  sub_10006A74C((uint64_t)v35);
  sub_1000BD6D4();
  if (v57 == 2)
    v63 = v32[v53[10]];
  else
    v63 = v57 & 1;
  LODWORD(v97) = v63;
  v64 = v100;
  sub_10006A74C((uint64_t)v32);
  sub_1000D2010();
  v111 = v54;
  if (a10 == 2)
    v65 = *(unsigned __int8 *)(v62 + v53[11]);
  else
    v65 = a10 & 1;
  LODWORD(v100) = v65;
  v66 = v101;
  v67 = v96;
  v107 = a12;
  sub_10006A74C(v62);
  sub_1000BD6D4();
  if (a11 == 2)
    v68 = *(unsigned __int8 *)(v67 + v53[12]);
  else
    v68 = a11 & 1;
  LODWORD(v101) = v68;
  v69 = v99;
  sub_10006A74C(v67);
  sub_10006A788(v17, v56);
  if ((a13 & 1) != 0)
    v107 = *(_QWORD *)(v56 + v53[13]);
  sub_10006A74C(v56);
  sub_1000D143C();
  if (a14 == 2)
    v70 = *(_BYTE *)(v55 + v53[14]);
  else
    v70 = a14 & 1;
  v71 = v102;
  sub_1000DF93C();
  sub_1000C180C();
  if (a15 == 2)
    v72 = *(_BYTE *)(v69 + v53[15]);
  else
    v72 = a15 & 1;
  sub_10006A74C(v69);
  sub_1000D9254();
  sub_10006A7CC(v64, (uint64_t)&v113);
  if (v113 == 1)
  {
    v73 = v66 + v53[16];
    v71 = *(void **)v73;
    v74 = *(void **)(v73 + 8);
    v76 = *(void **)(v73 + 16);
    v75 = *(void **)(v73 + 24);
    v77 = *(void **)(v73 + 32);
    v78 = *(void **)(v73 + 40);
    v79 = v103;
  }
  else
  {
    v79 = v103;
    v76 = v90;
    v75 = v89;
    v77 = v88;
    v78 = v87;
    v74 = v91;
  }
  v80 = v78;
  v81 = v71;
  v82 = v74;
  v83 = v76;
  v84 = v75;
  v85 = v77;
  sub_1000DF93C();
  v114[0] = v71;
  v114[1] = v74;
  v114[2] = v76;
  v114[3] = v75;
  v114[4] = v77;
  v114[5] = v78;
  sub_100768D60(v104, v109, v110, v108, v111, v105, v98, v97, v79, v100, v101, v107, v70, v72, (uint64_t)v114);
  sub_100098640();
}

__n128 sub_100768D60@<Q0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, char a8@<W7>, _BYTE *a9@<X8>, char a10, char a11, uint64_t a12, char a13, char a14, uint64_t a15)
{
  int *v19;
  _BYTE *v20;
  uint64_t v21;
  _QWORD *v22;
  _BYTE *v23;
  __int128 v24;
  __n128 result;

  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  v19 = (int *)sub_1000D9204();
  v20 = &a9[v19[7]];
  v21 = sub_1000988FC();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20, a4, v21);
  v22 = &a9[v19[8]];
  *v22 = a5;
  v22[1] = a6;
  a9[v19[9]] = a7;
  a9[v19[10]] = a8;
  a9[v19[11]] = a10;
  a9[v19[12]] = a11;
  *(_QWORD *)&a9[v19[13]] = a12;
  a9[v19[14]] = a13;
  a9[v19[15]] = a14;
  v23 = &a9[v19[16]];
  v24 = *(_OWORD *)(a15 + 16);
  *(_OWORD *)v23 = *(_OWORD *)a15;
  *((_OWORD *)v23 + 1) = v24;
  result = *(__n128 *)(a15 + 32);
  *((__n128 *)v23 + 2) = result;
  return result;
}

uint64_t sub_100768E7C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v21;

  if (a1 == 0xD00000000000001CLL && a2 == 0x8000000100A12BF0)
  {
    v4 = 0x8000000100A12BF0;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x8000000100A12BF0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0xD000000000000015)
  {
    v6 = 0x8000000100A084D0;
    if (a2 == 0x8000000100A084D0)
      goto LABEL_11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100A084D0, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if (a1 == 0x6B726F7774656ELL && a2 == 0xE700000000000000)
  {
    v8 = 0xE700000000000000;
    goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6B726F7774656ELL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000)
  {
    v10 = 0xE600000000000000;
    goto LABEL_27;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C61636F6CLL, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_27:
    swift_bridgeObjectRelease(v10);
    return 3;
  }
  if (a1 == 0xD000000000000015)
  {
    v11 = 0x8000000100A12C10;
    if (a2 == 0x8000000100A12C10)
      goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100A12C10, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v11);
    return 4;
  }
  if (a1 == 0xD000000000000015)
  {
    v12 = 0x8000000100A08490;
    if (a2 == 0x8000000100A08490)
      goto LABEL_37;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100A08490, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v12);
    return 5;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x8000000100A08450)
  {
    v13 = 0x8000000100A08450;
LABEL_43:
    swift_bridgeObjectRelease(v13);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100A08450, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_43;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x8000000100A08410)
  {
    v14 = 0x8000000100A08410;
LABEL_49:
    swift_bridgeObjectRelease(v14);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100A08410, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_49;
  }
  if (a1 == 0xD000000000000021 && a2 == 0x8000000100A12C30)
  {
    v15 = 0x8000000100A12C30;
LABEL_55:
    swift_bridgeObjectRelease(v15);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021, 0x8000000100A12C30, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_55;
  }
  if (a1 == 0x636E75614C707061 && a2 == 0xEE00746E756F4368)
  {
    v17 = 0xEE00746E756F4368;
    goto LABEL_63;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x636E75614C707061, 0xEE00746E756F4368, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
LABEL_63:
    swift_bridgeObjectRelease(v17);
    return 9;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100A12C60)
  {
    v18 = 0x8000000100A12C60;
LABEL_69:
    swift_bridgeObjectRelease(v18);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100A12C60, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_69;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100A12C80)
  {
    v19 = 0x8000000100A12C80;
LABEL_75:
    swift_bridgeObjectRelease(v19);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100A12C80, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_75;
  }
  if (a1 == 0x72756769666E6F63 && a2 == 0xEF7374696E556465)
  {
    swift_bridgeObjectRelease(0xEF7374696E556465);
    return 12;
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(0x72756769666E6F63, 0xEF7374696E556465, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v21 & 1) != 0)
      return 12;
    else
      return 13;
  }
}

uint64_t sub_100769384(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1007693C0 + 4 * byte_1009C69A0[a1]))(0xD00000000000001CLL, 0x8000000100A12BF0);
}

unint64_t sub_1007693C0()
{
  return 0xD000000000000015;
}

uint64_t sub_100769420()
{
  uint64_t v0;

  return v0 + 1;
}

uint64_t sub_10076949C()
{
  return 0x72756769666E6F63;
}

uint64_t sub_1007694C0()
{
  unsigned __int8 *v0;

  return sub_100769384(*v0);
}

uint64_t sub_1007694C8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100768E7C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1007694EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10076A018();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100769514(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10076A018();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10076953C(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD v33[3];
  char v34;

  v3 = v1;
  v5 = sub_1000BA294(&qword_100C03E20);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100098728();
  v9 = v8 - v7;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_10076A018();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for EnvironmentState.CodingKeys, &type metadata for EnvironmentState.CodingKeys, v12, v10, v11);
  v13 = *v3;
  LOBYTE(v33[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v13, v33, v5);
  if (!v2)
  {
    LOBYTE(v33[0]) = v3[1];
    v34 = 1;
    v14 = sub_10076A108();
    sub_1000C403C(v14, v15, v16, (uint64_t)&type metadata for LocationAuthorizationState, v14);
    LOBYTE(v33[0]) = v3[2];
    v34 = 2;
    v17 = sub_10076A144();
    sub_1000C403C(v17, v18, v19, (uint64_t)&type metadata for NetworkState, v17);
    v20 = (int *)type metadata accessor for EnvironmentState(0);
    v21 = &v3[v20[7]];
    LOBYTE(v33[0]) = 3;
    v22 = type metadata accessor for Locale(0);
    sub_100051B90(&qword_100C03E38, (uint64_t (*)(uint64_t))&type metadata accessor for Locale, (uint64_t)&protocol conformance descriptor for Locale);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, v33, v5, v22);
    v23 = &v3[v20[8]];
    v24 = *(_QWORD *)v23;
    v25 = *((_QWORD *)v23 + 1);
    LOBYTE(v33[0]) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v24, v25, v33, v5);
    sub_1000BB528(v3[v20[9]], 5);
    sub_1000BB528(v3[v20[10]], 6);
    sub_1000BB528(v3[v20[11]], 7);
    sub_1000BB528(v3[v20[12]], 8);
    v26 = *(_QWORD *)&v3[v20[13]];
    LOBYTE(v33[0]) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v26, v33, v5);
    sub_1000BB528(v3[v20[14]], 10);
    sub_1000BB528(v3[v20[15]], 11);
    v27 = &v3[v20[16]];
    v28 = *((_OWORD *)v27 + 1);
    v33[0] = *(_OWORD *)v27;
    v33[1] = v28;
    v33[2] = *((_OWORD *)v27 + 2);
    v34 = 12;
    v29 = sub_10076A180();
    sub_1000C403C(v29, v30, v31, (uint64_t)&type metadata for ConfiguredUnitsState, v29);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

void sub_10076980C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  int *v31;
  _OWORD v32[3];
  char v33;

  v5 = type metadata accessor for Locale(0);
  v28 = *(_QWORD *)(v5 - 8);
  v29 = v5;
  __chkstk_darwin(v5);
  sub_100098728();
  v8 = v7 - v6;
  v27 = sub_1000BA294(&qword_100C03DF0);
  __chkstk_darwin(v27);
  sub_100098728();
  v31 = (int *)type metadata accessor for EnvironmentState(0);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100088FDC();
  v30 = v10;
  v11 = a1[3];
  v12 = a1[4];
  sub_1000DB418(a1, v11);
  v13 = sub_10076A018();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for EnvironmentState.CodingKeys, &type metadata for EnvironmentState.CodingKeys, v13, v11, v12);
  if (v2)
  {
    sub_1000998EC();
  }
  else
  {
    LOBYTE(v32[0]) = 0;
    *v30 = sub_1000C2C0C((uint64_t)v32, v27) & 1;
    v33 = 1;
    sub_10076A054();
    sub_1000CCC28((uint64_t)&type metadata for LocationAuthorizationState, (uint64_t)&v33, v27);
    v30[1] = v32[0];
    v33 = 2;
    sub_10076A090();
    sub_1000CCC28((uint64_t)&type metadata for NetworkState, (uint64_t)&v33, v27);
    v30[2] = v32[0];
    LOBYTE(v32[0]) = 3;
    sub_100051B90(&qword_100C03E10, (uint64_t (*)(uint64_t))&type metadata accessor for Locale, (uint64_t)&protocol conformance descriptor for Locale);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v29, v32, v27);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v28 + 32))(&v30[v31[7]], v8, v29);
    v14 = sub_1000D1AE4(4);
    v16 = KeyedDecodingContainer.decode(_:forKey:)(v14, v15);
    v17 = (uint64_t *)&v30[v31[8]];
    *v17 = v16;
    v17[1] = v18;
    v19 = sub_1000BCA04(5);
    sub_1000CFF1C(v19, v31[9]);
    v20 = sub_1000BCA04(6);
    sub_1000CFF1C(v20, v31[10]);
    v21 = sub_1000BCA04(7);
    sub_1000CFF1C(v21, v31[11]);
    v22 = sub_1000BCA04(8);
    sub_1000CFF1C(v22, v31[12]);
    v23 = sub_1000D1AE4(9);
    *(_QWORD *)&v30[v31[13]] = KeyedDecodingContainer.decode(_:forKey:)(v23, v24);
    LOBYTE(v32[0]) = 10;
    v30[v31[14]] = sub_1000C2C0C((uint64_t)v32, v27) & 1;
    LOBYTE(v32[0]) = 11;
    v30[v31[15]] = sub_1000C2C0C((uint64_t)v32, v27) & 1;
    v33 = 12;
    sub_10076A0CC();
    sub_1000CCC28((uint64_t)&type metadata for ConfiguredUnitsState, (uint64_t)&v33, v27);
    sub_1000B4D74();
    v25 = &v30[v31[16]];
    v26 = v32[1];
    *v25 = v32[0];
    v25[1] = v26;
    v25[2] = v32[2];
    sub_10006A788((uint64_t)v30, a2);
    sub_1000998EC();
    sub_10006A74C((uint64_t)v30);
  }
}

void sub_100769C78(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10076980C(a1, a2);
}

uint64_t sub_100769C8C(_QWORD *a1)
{
  return sub_10076953C(a1);
}

void sub_100769CA0(_QWORD *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int *v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = sub_1000BA294(&qword_100BC31F0);
  inited = swift_initStackObject(v3, &v23);
  *(_OWORD *)(inited + 16) = xmmword_1009A7FD0;
  *(_QWORD *)(inited + 32) = 0xD00000000000001CLL;
  *(_QWORD *)(inited + 40) = 0x8000000100A12BF0;
  *(_BYTE *)(inited + 48) = *v1;
  *(_QWORD *)(inited + 72) = &type metadata for Bool;
  *(_QWORD *)(inited + 80) = 0xD000000000000015;
  sub_1000C0AA4();
  *(_QWORD *)(v5 + 88) = v6;
  *(_BYTE *)(v5 + 96) = v1[1];
  *(_QWORD *)(v5 + 120) = &type metadata for LocationAuthorizationState;
  *(_QWORD *)(v5 + 128) = 0x6B726F7774656ELL;
  *(_QWORD *)(v5 + 136) = 0xE700000000000000;
  *(_BYTE *)(v5 + 144) = v1[2];
  v7 = (_QWORD *)(v5 + 192);
  *(_QWORD *)(v5 + 168) = &type metadata for NetworkState;
  *(_QWORD *)(v5 + 176) = 0x656C61636F6CLL;
  *(_QWORD *)(v5 + 184) = 0xE600000000000000;
  v8 = (int *)sub_1000D9204();
  v9 = &v1[v8[7]];
  v10 = sub_1000988FC();
  *(_QWORD *)(inited + 216) = v10;
  v11 = sub_10005F164(v7);
  (*(void (**)(_QWORD *, _BYTE *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v11, v9, v10);
  sub_1000C0AA4();
  *(_QWORD *)(inited + 224) = 0xD000000000000015;
  *(_QWORD *)(inited + 232) = v12;
  v13 = &v1[v8[8]];
  v14 = v13[1];
  *(_QWORD *)(inited + 240) = *v13;
  *(_QWORD *)(inited + 248) = v14;
  *(_QWORD *)(inited + 264) = &type metadata for String;
  *(_QWORD *)(inited + 272) = 0xD000000000000015;
  sub_1000C0AA4();
  *(_QWORD *)(inited + 280) = v15;
  *(_BYTE *)(inited + 288) = v1[v8[9]];
  *(_QWORD *)(inited + 312) = &type metadata for Bool;
  *(_QWORD *)(inited + 320) = 0xD000000000000016;
  sub_1000C0AA4();
  *(_QWORD *)(inited + 328) = v16;
  *(_BYTE *)(inited + 336) = v1[v8[10]];
  *(_QWORD *)(inited + 360) = &type metadata for Bool;
  *(_QWORD *)(inited + 368) = 0xD000000000000012;
  sub_1000C0AA4();
  *(_QWORD *)(inited + 376) = v17;
  *(_BYTE *)(inited + 384) = v1[v8[11]];
  *(_QWORD *)(inited + 408) = &type metadata for Bool;
  *(_QWORD *)(inited + 416) = 0xD000000000000021;
  sub_1000C0AA4();
  *(_QWORD *)(inited + 424) = v18;
  *(_BYTE *)(inited + 432) = v1[v8[12]];
  *(_QWORD *)(inited + 456) = &type metadata for Bool;
  strcpy((char *)(inited + 464), "appLaunchCount");
  *(_BYTE *)(inited + 479) = -18;
  *(_QWORD *)(inited + 480) = *(_QWORD *)&v1[v8[13]];
  *(_QWORD *)(inited + 504) = &type metadata for Int;
  *(_QWORD *)(inited + 512) = 0xD000000000000014;
  sub_1000C0AA4();
  *(_QWORD *)(inited + 520) = v19;
  LOBYTE(v19) = v1[v8[14]];
  *(_QWORD *)(inited + 552) = &type metadata for Bool;
  *(_BYTE *)(inited + 528) = v19;
  *(_QWORD *)(inited + 560) = 0xD000000000000013;
  sub_1000C0AA4();
  *(_QWORD *)(inited + 568) = v20;
  LOBYTE(v20) = v1[v8[15]];
  *(_QWORD *)(inited + 600) = &type metadata for Bool;
  *(_BYTE *)(inited + 576) = v20;
  swift_bridgeObjectRetain();
  v21 = Dictionary.init(dictionaryLiteral:)(inited);
  a1[3] = sub_1000BA294(&qword_100BDECB0);
  a1[4] = sub_100077ABC();
  sub_10005F164(a1);
  v22 = type metadata accessor for MainAction(0);
  ShortDescription.init(name:_:)(0xD000000000000010, 0x80000001009C69A0, v21, v22);
  sub_100098640();
}

uint64_t sub_100769F84(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100051B90(&qword_100C03E48, type metadata accessor for EnvironmentState, (uint64_t)&unk_1009C6AB0);
  return ShortDescribable.description.getter(a1, v2);
}

void sub_100769FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_1006B45EC(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8, SBYTE1(vars8), SBYTE2(vars8), SBYTE3(vars8), SBYTE4(vars8), SBYTE5(vars8), SBYTE6(vars8), SHIBYTE(vars8));
}

void sub_100769FD8()
{
  sub_1006B4418();
}

uint64_t sub_100769FEC()
{
  return sub_100051B90(&qword_100C03DE0, type metadata accessor for EnvironmentState, (uint64_t)&unk_1009C6A88);
}

unint64_t sub_10076A018()
{
  unint64_t result;

  result = qword_100C03DF8;
  if (!qword_100C03DF8)
  {
    result = swift_getWitnessTable(&unk_1009C6C1C, &type metadata for EnvironmentState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C03DF8);
  }
  return result;
}

unint64_t sub_10076A054()
{
  unint64_t result;

  result = qword_100C03E00;
  if (!qword_100C03E00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LocationAuthorizationState, &type metadata for LocationAuthorizationState);
    atomic_store(result, (unint64_t *)&qword_100C03E00);
  }
  return result;
}

unint64_t sub_10076A090()
{
  unint64_t result;

  result = qword_100C03E08;
  if (!qword_100C03E08)
  {
    result = swift_getWitnessTable(&unk_1009B5214, &type metadata for NetworkState);
    atomic_store(result, (unint64_t *)&qword_100C03E08);
  }
  return result;
}

unint64_t sub_10076A0CC()
{
  unint64_t result;

  result = qword_100C03E18;
  if (!qword_100C03E18)
  {
    result = swift_getWitnessTable(&unk_1009C86D0, &type metadata for ConfiguredUnitsState);
    atomic_store(result, (unint64_t *)&qword_100C03E18);
  }
  return result;
}

unint64_t sub_10076A108()
{
  unint64_t result;

  result = qword_100C03E28;
  if (!qword_100C03E28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LocationAuthorizationState, &type metadata for LocationAuthorizationState);
    atomic_store(result, (unint64_t *)&qword_100C03E28);
  }
  return result;
}

unint64_t sub_10076A144()
{
  unint64_t result;

  result = qword_100C03E30;
  if (!qword_100C03E30)
  {
    result = swift_getWitnessTable(&unk_1009B51EC, &type metadata for NetworkState);
    atomic_store(result, (unint64_t *)&qword_100C03E30);
  }
  return result;
}

unint64_t sub_10076A180()
{
  unint64_t result;

  result = qword_100C03E40;
  if (!qword_100C03E40)
  {
    result = swift_getWitnessTable(&unk_1009C86A8, &type metadata for ConfiguredUnitsState);
    atomic_store(result, (unint64_t *)&qword_100C03E40);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for EnvironmentState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_10076A208 + 4 * byte_1009C69B2[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_10076A23C + 4 * byte_1009C69AD[v4]))();
}

uint64_t sub_10076A23C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10076A244(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10076A24CLL);
  return result;
}

uint64_t sub_10076A258(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10076A260);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_10076A264(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10076A26C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentState.CodingKeys()
{
  return &type metadata for EnvironmentState.CodingKeys;
}

unint64_t sub_10076A28C()
{
  unint64_t result;

  result = qword_100C03E50;
  if (!qword_100C03E50)
  {
    result = swift_getWitnessTable(&unk_1009C6BF4, &type metadata for EnvironmentState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C03E50);
  }
  return result;
}

unint64_t sub_10076A2CC()
{
  unint64_t result;

  result = qword_100C03E58;
  if (!qword_100C03E58)
  {
    result = swift_getWitnessTable(&unk_1009C6B64, &type metadata for EnvironmentState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C03E58);
  }
  return result;
}

unint64_t sub_10076A30C()
{
  unint64_t result;

  result = qword_100C03E60;
  if (!qword_100C03E60)
  {
    result = swift_getWitnessTable(&unk_1009C6B8C, &type metadata for EnvironmentState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C03E60);
  }
  return result;
}

uint64_t sub_10076A348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = type metadata accessor for Location.Identifier(0);
  v22 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v21 = v3;
    v10 = 0;
    v11 = *(_QWORD *)(type metadata accessor for SavedLocation(0) - 8);
    v12 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v13 = *(_QWORD *)(v11 + 72);
    while (1)
    {
      v14 = SavedLocation.identifier.getter();
      v15 = Location.Identifier.id.getter(v14);
      v17 = v16;
      (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v23);
      if (v15 == a2 && v17 == a3)
      {
        swift_bridgeObjectRelease_n(a3, 2);
        return v10;
      }
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, a2, a3, 0);
      swift_bridgeObjectRelease(v17);
      if ((v19 & 1) != 0)
        break;
      ++v10;
      v12 += v13;
      if (v9 == v10)
        goto LABEL_9;
    }
    swift_bridgeObjectRelease(a3);
  }
  else
  {
LABEL_9:
    swift_bridgeObjectRelease(a3);
    return 0;
  }
  return v10;
}

void sub_10076A4C8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int EnumCaseMultiPayload;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v2 = v1;
  v4 = type metadata accessor for MainAction(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations;
  v9 = a1[7] + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations;
  v39 = type metadata accessor for LocationsState(0);
  v10 = *(int *)(v39 + 20);
  v11 = *(_QWORD *)(v9 + v10);
  v12 = a1[8];
  v13 = *(_QWORD *)(v12 + v8 + v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  sub_10009C578(v11, v13, v14, v15, v16, v17, v18, v19, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45);
  v21 = v20;
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v13);
  if ((v21 & 1) == 0)
  {
    v22 = a1[5];
    v23 = *(_QWORD *)(v22 + 16);
    if (!v23)
      goto LABEL_13;
    v36 = v12;
    v37 = v2;
    v24 = v22 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    swift_bridgeObjectRetain(v22);
    LODWORD(v38) = 0;
    v25 = 0;
    v35 = v23 - 1;
    do
    {
      while (1)
      {
        if (v25 >= *(_QWORD *)(v22 + 16))
        {
          __break(1u);
          return;
        }
        sub_100095B78(v24 + *(_QWORD *)(v5 + 72) * v25, (uint64_t)v7, type metadata accessor for MainAction);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7, v4);
        v27 = type metadata accessor for MainAction;
        if (EnumCaseMultiPayload != 3)
          break;
        v28 = type metadata accessor for LocationsAction(0);
        v29 = swift_getEnumCaseMultiPayload(v7, v28);
        v27 = type metadata accessor for LocationsAction;
        if (v29 != 2)
          break;
        v30 = v7[1];
        v38 = *v7;
        swift_bridgeObjectRelease(v30);
        swift_bridgeObjectRelease(v38);
        LODWORD(v38) = 1;
        if (v35 == v25++)
        {
          swift_bridgeObjectRelease(v22);
          return;
        }
      }
      ++v25;
      sub_1000215BC((uint64_t)v7, v27);
    }
    while (v23 != v25);
    swift_bridgeObjectRelease(v22);
    v12 = v36;
    v2 = v37;
    if ((v38 & 1) == 0)
    {
LABEL_13:
      sub_1000DB418((_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 96));
      v32 = *(_QWORD *)(v12 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations + *(int *)(v39 + 20));
      v33 = swift_bridgeObjectRetain(v32);
      dispatch thunk of SavedLocationsManagerType.updatedSavedLocationsLegacy(_:)(v33);
      swift_bridgeObjectRelease(v32);
      sub_1000301C0(a1);
    }
  }
}

uint64_t sub_10076A718(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v7 + 48) = a6;
  *(_QWORD *)(v7 + 56) = a7;
  *(_QWORD *)(v7 + 40) = a5;
  *(_BYTE *)(v7 + 136) = a4;
  v8 = type metadata accessor for Logger(0);
  *(_QWORD *)(v7 + 64) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 72) = v9;
  *(_QWORD *)(v7 + 80) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BC3628);
  *(_QWORD *)(v7 + 88) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocationDisplayContext(0);
  *(_QWORD *)(v7 + 96) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v7 + 104) = v12;
  *(_QWORD *)(v7 + 112) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10076A7CC, 0, 0);
}

uint64_t sub_10076A7CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD **)(v0 + 40);
  LocationDisplayContext.init(canActAsLocationOfInterest:)(*(unsigned __int8 *)(v0 + 136));
  v6 = v5 + 9;
  v7 = v5[12];
  v8 = v5[13];
  sub_1000DB418(v6, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v4, v1, v3);
  _s7Weather24LocationCompositionStateOwst_0(v4, 0, 1, v3);
  v9 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of SavedLocationsManagerType.addLocationWithChecks(_:locationDisplayContext:)[1]);
  *(_QWORD *)(v0 + 120) = v9;
  *v9 = v0;
  v9[1] = sub_10076A898;
  return dispatch thunk of SavedLocationsManagerType.addLocationWithChecks(_:locationDisplayContext:)(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 88), v7, v8);
}

uint64_t sub_10076A898()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc(v2);
  sub_100021A14(v3, &qword_100BC3628);
  if (v0)
    v4 = sub_10076A9BC;
  else
    v4 = sub_10076A910;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10076A910()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = sub_1000DB418((_QWORD *)(*(_QWORD *)(v0 + 40) + 32), *(_QWORD *)(*(_QWORD *)(v0 + 40) + 56));
  v6 = *(_QWORD *)(v4 + 64) + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations;
  v7 = type metadata accessor for LocationsState(0);
  v8 = *v5;
  v9 = sub_100412ED0(*(_QWORD *)(*(_QWORD *)(v6 + *(int *)(v7 + 20)) + 16));
  (*(void (**)(uint64_t, uint64_t, double))(v2 + 8))(v1, v3, v9);
  sub_1000C58A4();
  swift_task_dealloc(v8);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10076A9BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 96));
  static Logger.savedLocations.getter(v2);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v6 = static os_log_type_t.error.getter(v4, v5);
  if (os_log_type_enabled(v4, v6))
  {
    v7 = *(_QWORD *)(v0 + 128);
    v8 = *(_QWORD *)(v0 + 72);
    v18 = *(_QWORD *)(v0 + 80);
    v9 = *(_QWORD *)(v0 + 64);
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(32, -1);
    v19 = v11;
    *(_DWORD *)v10 = 141558275;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    *(_WORD *)(v10 + 12) = 2081;
    *(_QWORD *)(v0 + 24) = v7;
    swift_errorRetain(v7);
    sub_1000BA294(&qword_100BD7910);
    v12 = String.init<A>(describing:)(v0 + 24);
    *(_QWORD *)(v0 + 32) = sub_1000CE1C8(v12, v13, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40);
    swift_bridgeObjectRelease();
    sub_1000DBA9C();
    sub_1000DBA9C();
    _os_log_impl((void *)&_mh_execute_header, v4, v6, "addLocation: Could not add location with error: %{private,mask.hash}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 1);
    sub_1000986F0(v11);
    sub_1000986F0(v10);

    sub_1000DBA9C();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v18, v9);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 128);
    v15 = *(_QWORD *)(v0 + 72);
    v14 = *(_QWORD *)(v0 + 80);
    v16 = *(_QWORD *)(v0 + 64);
    sub_1000B47A4();
    sub_1000B47A4();
    sub_1000B47A4();

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  sub_1000C58A4();
  swift_task_dealloc(v4);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

BOOL sub_10076ABC8(uint64_t a1, uint64_t a2)
{
  uint64_t active;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD);
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  _BYTE v28[16];

  active = type metadata accessor for LocationViewerActiveLocationState(0);
  __chkstk_darwin(active);
  v6 = &v28[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for ViewState.SecondaryViewState(0);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)&v28[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = (int *)type metadata accessor for ViewState(0);
  __chkstk_darwin(v10);
  v12 = &v28[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = *(_QWORD *)(a1 + 56);
  sub_100095B78(v13 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, (uint64_t)v12, v14);
  sub_100095B78((uint64_t)&v12[v10[5]], (uint64_t)v9, type metadata accessor for ViewState.SecondaryViewState);
  if (swift_getEnumCaseMultiPayload(v9, v7) == 1)
  {
    sub_1000215BC((uint64_t)v9, type metadata accessor for ViewState.SecondaryViewState);
LABEL_9:
    sub_1000215BC((uint64_t)v12, type metadata accessor for ViewState);
    return 0;
  }
  v15 = *v9;
  if (*(_QWORD *)&v12[v10[9] + 8] == 1)
  {
    v16 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
    objc_msgSend(v16, "userInterfaceIdiom");

    if ((v12[v10[7]] & 1) == 0)
    {
      swift_release(v15);
      goto LABEL_9;
    }
  }
  sub_1000215BC((uint64_t)v12, type metadata accessor for ViewState);
  sub_100095B78(v15 + OBJC_IVAR____TtCV7Weather23LocationViewerViewState8_Storage_activeLocationState, (uint64_t)v6, type metadata accessor for LocationViewerActiveLocationState);
  swift_release(v15);
  sub_10008B21C();
  v18 = v17;
  v20 = v19;
  sub_1000215BC((uint64_t)v6, type metadata accessor for LocationViewerActiveLocationState);
  v21 = v13 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations;
  v22 = *(_QWORD *)(v21 + *(int *)(type metadata accessor for LocationsState(0) + 20));
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v22);
  v24 = sub_10076A348(v23, v18, v20);
  v26 = v25;
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v22);
  return (v26 & 1) == 0 && v24 == a2;
}

uint64_t sub_10076AE50(uint64_t result, uint64_t a2, void (*a3)(__n128), uint64_t *a4, uint64_t (*a5)(_QWORD), unsigned int *a6)
{
  uint64_t (*v6)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v28;
  _BYTE v29[40];
  uint64_t v30;
  char v31;
  _OWORD v32[2];
  uint64_t v33;

  v6 = *(uint64_t (**)(uint64_t))(result + 16);
  if (v6)
  {
    v28 = *(_QWORD *)(result + 24);
    v10 = sub_1000BA294(&qword_100BD3370);
    v11 = *(_QWORD *)(type metadata accessor for MainAction(0) - 8);
    v12 = *(_QWORD *)(v11 + 72);
    v13 = *(unsigned __int8 *)(v11 + 80);
    v14 = (v13 + 32) & ~v13;
    v15 = swift_allocObject(v10, v14 + 2 * v12, v13 | 7);
    *(_OWORD *)(v15 + 16) = xmmword_10097DA20;
    v16 = v15 + v14;
    v17 = swift_retain();
    a3(v17);
    v18 = type metadata accessor for ListViewAction(0);
    swift_storeEnumTagMultiPayload(v16, v18, 2);
    v19 = type metadata accessor for ViewAction(0);
    sub_1000916FC(v16, v19);
    sub_1000DA1D8(v16);
    v20 = v16 + v12;
    v21 = *(int *)(sub_1000BA294(&qword_100BDDB50) + 48);
    v22 = v20 + *(int *)(sub_1000BA294(a4) + 48);
    sub_100095B78(a2, v20, a5);
    v23 = type metadata accessor for LocationOfInterest(0);
    _s7Weather24LocationCompositionStateOwst_0(v22, 1, 1, v23);
    v24 = *a6;
    v25 = type metadata accessor for LocationModel(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v20, v24, v25);
    *(_BYTE *)(v20 + v21) = 0;
    sub_1000916FC(v20, v18);
    sub_1000916FC(v20, v19);
    sub_1000DA1D8(v20);
    v33 = 0;
    memset(v32, 0, sizeof(v32));
    sub_10003773C((uint64_t)v32, (uint64_t)v29, (uint64_t *)&unk_100BFFA10);
    v30 = v15;
    v31 = 0;
    swift_bridgeObjectRetain(v15);
    sub_10009FF10((uint64_t)v29, v6);
    sub_100021A14((uint64_t)v29, &qword_100BD3378);
    swift_bridgeObjectRelease(v15);
    sub_100021A14((uint64_t)v32, (uint64_t *)&unk_100BFFA10);
    return sub_1000BF8D0((uint64_t)v6, v28);
  }
  return result;
}

uint64_t *sub_10076B064()
{
  uint64_t *v0;

  sub_1000BF8D0(v0[2], v0[3]);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 4);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 9);
  return v0;
}

uint64_t sub_10076B090()
{
  uint64_t v0;

  sub_10076B064();
  return swift_deallocClassInstance(v0, 113, 7);
}

uint64_t sub_10076B0B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __n128 v6;

  v1 = sub_1000992C4();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = swift_release();
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v6);
  if (*(_QWORD *)(v0 + v5 + 24))
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + v5));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return sub_100098B00(v0, v5 + 72, v3 | 7);
}

uint64_t sub_10076B154(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(sub_1000992C4() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = *(_BYTE *)(v1 + 32);
  v9 = *(_QWORD *)(v1 + 40);
  v10 = v1 + v5;
  v11 = v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)swift_task_alloc(dword_100C03F24);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_100445EA4;
  return sub_10076A718(a1, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_10076B20C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10076B230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for SavedLocation(0);
  sub_1000C3014();
  if (sub_10009D410() == 1)
    v4 = type metadata accessor for SavedLocation.Placeholder(0);
  else
    v4 = sub_1000992C4();
  sub_10003BC44(v4);
  return sub_100098B00(v0, v2 + v3, v1 | 7);
}

uint64_t sub_10076B284()
{
  return sub_10076B314((uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation, (void (*)(__n128))&SavedLocation.identifier.getter, &qword_100BC3480, (unsigned int *)&enum case for LocationModel.saved(_:));
}

uint64_t sub_10076B2A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for CurrentLocation(0);
  sub_1000C3014();
  if (sub_10009D410() <= 2)
  {
    v4 = sub_1000992C4();
    sub_10003BC44(v4);
  }
  return sub_100098B00(v0, v2 + v3, v1 | 7);
}

uint64_t sub_10076B2F0()
{
  return sub_10076B314((uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation, (void (*)(__n128))&CurrentLocation.identifier.getter, &qword_100BC3488, (unsigned int *)&enum case for LocationModel.current(_:));
}

uint64_t sub_10076B314(uint64_t (*a1)(_QWORD), void (*a2)(__n128), uint64_t *a3, unsigned int *a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  return sub_10076AE50(*(_QWORD *)(v4 + 16), v4 + ((v9 + 24) & ~v9), a2, a3, a1, a4);
}

uint64_t sub_10076B388()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  type metadata accessor for ViewState.SecondaryViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100079F58();
  v3 = sub_1001103B4();
  sub_100095B78(v1 + *(int *)(v3 + 20), (uint64_t)v0, type metadata accessor for ViewState.SecondaryViewState);
  if (sub_10009F7EC((uint64_t)v0) == 1)
  {
    sub_1000215BC((uint64_t)v0, type metadata accessor for ViewState.SecondaryViewState);
    return 0;
  }
  v4 = *v0;
  if (*(_QWORD *)(v1 + *(int *)(v3 + 36) + 8) == 1)
  {
    sub_10076B570();
    if (!v5)
    {
      sub_10009925C();
      return 0;
    }
  }
  return v4;
}

uint64_t sub_10076B450()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *v0;
  v2 = *(uint64_t *)((char *)v0 + *(int *)(sub_1001103B4() + 36) + 8);
  sub_10009D4E0();
  if (v2 == 1)
  {
    sub_10076B570();
    if (v3)
    {
      sub_10009925C();
      return 0;
    }
  }
  return v1;
}

uint64_t sub_10076B4A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for ViewState.SecondaryViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100099864();
  v5 = sub_1001103B4();
  sub_100095B78(v1 + *(int *)(v5 + 20), v2, type metadata accessor for ViewState.SecondaryViewState);
  if (sub_10009F7EC(v2) == 1)
  {
    sub_10007C77C(v2, a1, type metadata accessor for VFXTestViewState);
    v6 = 0;
  }
  else
  {
    sub_1000215BC(v2, type metadata accessor for ViewState.SecondaryViewState);
    v6 = 1;
  }
  v7 = sub_1000FC700();
  return _s7Weather24LocationCompositionStateOwst_0(a1, v6, 1, v7);
}

void sub_10076B570()
{
  id v0;

  v0 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  objc_msgSend(v0, "userInterfaceIdiom");

  sub_1001103B4();
  sub_100079F70();
}

void sub_10076B5EC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1000986AC();
  sub_1000BA294(&qword_100BC5F68);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100079FBC();
  sub_1000BA294(&qword_100BC5F70);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_10009E540();
  sub_1000BA294(&qword_100BC5F78);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100099234();
  sub_1000BA294(&qword_100BC5F80);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_10007A130();
  v9 = *v0;
  sub_10009D4E0();
  sub_10055E36C(0, 256, 2, 3, 0, 0, 0, 1, 0, 0, 0, 2, 2, v9);
  v10 = type metadata accessor for ViewState.SecondaryViewState(0);
  _s7Weather24LocationCompositionStateOwst_0(v4, 1, 1, v10);
  v11 = sub_1000CE64C();
  _s7Weather24LocationCompositionStateOwst_0(v3, 1, 1, v11);
  v12 = sub_10009E908();
  _s7Weather24LocationCompositionStateOwst_0(v2, 1, 1, v12);
  v13 = sub_10009E654();
  _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, v13);
  sub_100112494();
  sub_10009925C();
  sub_100089020();
  sub_100021A14(v1, &qword_100BC5F68);
  sub_100021A14(v2, &qword_100BC5F70);
  sub_100021A14(v3, &qword_100BC5F78);
  sub_100021A14(v4, &qword_100BC5F80);
  sub_100098640();
}

uint64_t sub_10076B7B4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 0x7972616D697270 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7972616D697270, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7261646E6F636573 && a2 == 0xE900000000000079)
  {
    swift_bridgeObjectRelease(0xE900000000000079);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7261646E6F636573, 0xE900000000000079, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10076B8AC(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7261646E6F636573;
  else
    return 0x7972616D697270;
}

uint64_t sub_10076B8E8()
{
  char *v0;

  return sub_10076B8AC(*v0);
}

uint64_t sub_10076B8F0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10076B7B4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10076B914(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10077127C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10076B93C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10077127C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10076B964(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007712F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10076B98C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007712F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10076B9B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007712B8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10076B9DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007712B8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10076BA04()
{
  type metadata accessor for ListViewState._Storage();
  sub_10010A47C();
  sub_10004A298();
}

void sub_10076BA44()
{
  sub_10076BA04();
}

void sub_10076BA54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  _QWORD *v54;
  char v55;

  sub_100099310();
  a19 = v24;
  a20 = v25;
  v27 = v26;
  v48 = v28;
  v51 = type metadata accessor for WeatherMapPresentationState(0);
  sub_1000B42B0();
  __chkstk_darwin(v29);
  sub_100088FDC();
  v49 = v30;
  v50 = type metadata accessor for DisplayMetrics(0);
  sub_1000B42B0();
  __chkstk_darwin(v31);
  sub_100079FBC();
  sub_1000BA294(&qword_100BC5F78);
  sub_1000B42B0();
  __chkstk_darwin(v32);
  v33 = sub_100099720();
  sub_1000B42B0();
  __chkstk_darwin(v34);
  sub_10009E540();
  v52 = sub_1000BA294(&qword_100C04160);
  v35 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  sub_100094EC4();
  v53 = (int *)type metadata accessor for ViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v36);
  sub_100088FDC();
  v54 = v37;
  v39 = v27[3];
  v38 = v27[4];
  sub_1000DB418(v27, v39);
  v40 = sub_100770D50();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ViewState.CodingKeys, &type metadata for ViewState.CodingKeys, v40, v39, v38);
  if (v20)
  {
    sub_1000C255C();
  }
  else
  {
    v47 = v21;
    v55 = 0;
    sub_100770D8C();
    sub_1000C6570((uint64_t)&unk_100B8F568, (uint64_t)&v55, v52, (uint64_t)&unk_100B8F568);
    *v54 = a10;
    LOBYTE(a10) = 1;
    sub_100086DA4(&qword_100C04178, type metadata accessor for ViewState.SecondaryViewState, (uint64_t)&unk_1009C7540);
    sub_10009BD50();
    sub_1000C6570(v33, v41, v52, v33);
    sub_10007C77C(v23, (uint64_t)v54 + v53[5], type metadata accessor for ViewState.SecondaryViewState);
    v55 = 2;
    sub_100770DC8();
    sub_1000C6570((uint64_t)&unk_100B8F4D8, (uint64_t)&v55, v52, (uint64_t)&unk_100B8F4D8);
    *((_BYTE *)v54 + v53[6]) = a10;
    v55 = 3;
    sub_100770E04();
    sub_1000C6570((uint64_t)&unk_100B8F448, (uint64_t)&v55, v52, (uint64_t)&unk_100B8F448);
    *((_BYTE *)v54 + v53[7]) = a10;
    v42 = type metadata accessor for SearchViewState(0);
    LOBYTE(a10) = 4;
    sub_100086DA4(&qword_100C04190, type metadata accessor for SearchViewState, (uint64_t)&unk_10098CC08);
    sub_10009BD50();
    sub_1000C6570(v42, v43, v52, v42);
    _s7Weather24LocationCompositionStateOwst_0(v22, 0, 1, v42);
    sub_100145174(v22, (uint64_t)v54 + v53[8]);
    LOBYTE(a10) = 5;
    sub_100086DA4(&qword_100C04198, type metadata accessor for DisplayMetrics, (uint64_t)&unk_1009D7268);
    sub_10009BD50();
    sub_1000C6570(v50, v44, v52, v50);
    sub_10007C77C(v47, (uint64_t)v54 + v53[9], type metadata accessor for DisplayMetrics);
    LOBYTE(a10) = 6;
    sub_100086DA4(&qword_100C041A0, type metadata accessor for WeatherMapPresentationState, (uint64_t)&unk_10098EA5C);
    sub_10009BD50();
    sub_1000C6570(v51, v45, v52, v51);
    sub_10007C77C(v49, (uint64_t)v54 + v53[10], type metadata accessor for WeatherMapPresentationState);
    LOBYTE(a10) = 7;
    v46 = KeyedDecodingContainer.decode(_:forKey:)(&a10, v52);
    sub_1000BDB74(v35);
    *((_BYTE *)v54 + v53[11]) = v46 & 1;
    sub_100095B78((uint64_t)v54, v48, type metadata accessor for ViewState);
    sub_1000C255C();
    sub_1000215BC((uint64_t)v54, type metadata accessor for ViewState);
  }
  sub_1000B44B0();
}

void sub_10076BFD0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_1000BE9DC();
  v3 = sub_1000BA294(&qword_100C041A8);
  sub_100099300();
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B44C8();
  v7 = sub_100770D50();
  sub_1000B44E8((uint64_t)&type metadata for ViewState.CodingKeys, v8, v7);
  v20 = *v0;
  HIBYTE(v19) = 0;
  v9 = sub_100770E40();
  sub_1000B4634((uint64_t)&v20, (uint64_t)&v19 + 7, v3, (uint64_t)&unk_100B8F568, v9);
  if (!v1)
  {
    v10 = type metadata accessor for ViewState(0);
    LOBYTE(v20) = 1;
    type metadata accessor for ViewState.SecondaryViewState(0);
    sub_100086DA4(&qword_100C041B8, type metadata accessor for ViewState.SecondaryViewState, (uint64_t)&unk_1009C7518);
    sub_1000C3034(v11);
    LOBYTE(v20) = *((_BYTE *)v0 + *(int *)(v10 + 24));
    HIBYTE(v19) = 2;
    v12 = sub_100770E7C();
    sub_1000B4634((uint64_t)&v20, (uint64_t)&v19 + 7, v3, (uint64_t)&unk_100B8F4D8, v12);
    sub_10076B570();
    LOBYTE(v20) = v13;
    HIBYTE(v19) = 3;
    v14 = sub_100770EB8();
    sub_1000B4634((uint64_t)&v20, (uint64_t)&v19 + 7, v3, (uint64_t)&unk_100B8F448, v14);
    LOBYTE(v20) = 4;
    sub_1000BA294(&qword_100BC5F78);
    v15 = sub_100770EF4();
    sub_1000C3034(v15);
    LOBYTE(v20) = 5;
    type metadata accessor for DisplayMetrics(0);
    sub_100086DA4(&qword_100C041E0, type metadata accessor for DisplayMetrics, (uint64_t)&unk_1009D7240);
    sub_1000C3034(v16);
    LOBYTE(v20) = 6;
    type metadata accessor for WeatherMapPresentationState(0);
    sub_100086DA4(&qword_100C041E8, type metadata accessor for WeatherMapPresentationState, (uint64_t)&unk_10098EA34);
    sub_1000C3034(v17);
    v18 = *((unsigned __int8 *)v0 + *(int *)(v10 + 44));
    LOBYTE(v20) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v18, &v20, v3);
  }
  sub_100098820((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_100089054();
}

unint64_t sub_10076C23C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100B5B460, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 8)
    return 8;
  else
    return v3;
}

uint64_t sub_10076C288(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10076C2BC + 4 * byte_1009C6D00[a1]))(0x7972616D697270, 0xE700000000000000);
}

uint64_t sub_10076C2BC()
{
  return 0x7261646E6F636573;
}

unint64_t sub_10076C2DC()
{
  return 0xD000000000000010;
}

uint64_t sub_10076C378(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10076C3AC + 4 * byte_1009C6D08[a1]))(0x7972616D697270, 0xE700000000000000);
}

uint64_t sub_10076C3AC()
{
  return 0x7261646E6F636573;
}

unint64_t sub_10076C3CC()
{
  return 0xD000000000000010;
}

void sub_10076C468(char *a1)
{
  sub_10068A164(*a1);
}

void sub_10076C474()
{
  unsigned __int8 *v0;

  sub_1004A7794(*v0);
}

void sub_10076C47C(uint64_t a1)
{
  char *v1;

  sub_1001D81E0(a1, *v1);
}

void sub_10076C484(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1001DA30C(a1, *v1);
}

unint64_t sub_10076C48C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10076C23C(*a1);
  *a2 = result;
  return result;
}

void sub_10076C4B8()
{
  uint64_t *v0;
  unsigned __int8 v1;
  uint64_t v2;

  v1 = sub_1000CD7A8();
  *v0 = sub_10076C288(v1);
  v0[1] = v2;
  sub_10004A298();
}

uint64_t sub_10076C4D8()
{
  unsigned __int8 *v0;

  return sub_10076C378(*v0);
}

uint64_t sub_10076C4E0@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10076C284(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10076C504(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100770D50();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10076C52C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100770D50();
  return CodingKey.debugDescription.getter(a1, v2);
}

#error "10076C55C: call analysis failed (funcsize=5)"

void sub_10076C568()
{
  sub_10076BFD0();
}

void sub_10076C57C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  sub_1000BE9DC();
  sub_1000C00FC();
  sub_1000BA294(&qword_100C041F0);
  sub_100099300();
  __chkstk_darwin(v1);
  sub_1000CD594();
  v2 = sub_100770F70();
  sub_1000C2488((uint64_t)&type metadata for ViewState.PrimaryViewState.CodingKeys, v3, v2);
  if (v0)
  {
    sub_1000998EC();
  }
  else
  {
    v5 = 0;
    sub_100770FAC();
    sub_1000B4D84((uint64_t)&type metadata for ViewState.PrimaryViewState.CodingType, (uint64_t)&v5);
    v4 = 1;
    sub_100770FE8();
    sub_1000B4D84((uint64_t)&unk_100B62BC8, (uint64_t)&v4);
    sub_1000BA528();
    sub_1000998EC();
  }
  sub_1000BF0D8();
  sub_100089054();
}

void sub_10076C664()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;

  sub_1000BE9DC();
  v2 = v1;
  v3 = sub_1000BA294(&qword_100C04210);
  sub_100099300();
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B44C8();
  v7 = sub_100770F70();
  sub_1000B44E8((uint64_t)&type metadata for ViewState.PrimaryViewState.CodingKeys, v8, v7);
  v15 = 0;
  v9 = sub_100771024();
  sub_10009D4E0();
  sub_1000DC524(v10, (uint64_t)&v15, v3, (uint64_t)&type metadata for ViewState.PrimaryViewState.CodingType, v9);
  if (!v9)
  {
    v14 = v2;
    v13 = 1;
    v11 = sub_100771060();
    sub_1000DC524((uint64_t)&v14, (uint64_t)&v13, v3, (uint64_t)&unk_100B62BC8, v11);
  }
  (*(void (**)(char *, uint64_t))(v0 + 8))(v6, v3);
  swift_release();
  sub_100089054();
}

void sub_10076C768(Swift::String a1)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_100B5B540;
  sub_10076D308(a1, v1);
}

uint64_t sub_10076C784(char a1)
{
  if ((a1 & 1) != 0)
    return 1953720684;
  else
    return 1701869940;
}

uint64_t sub_10076C7A4()
{
  return 1953720684;
}

uint64_t sub_10076C7B4(char *a1, char *a2)
{
  return sub_10068A554(*a1, *a2);
}

void sub_10076C7C0()
{
  sub_1004A7754();
}

double sub_10076C7C8(uint64_t a1)
{
  char *v1;

  return sub_1001D8404(a1, *v1);
}

void sub_10076C7D0(uint64_t a1)
{
  sub_1001DA164(a1);
}

void sub_10076C7D8(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  char v4;

  v3._rawValue = &off_100B5B540;
  sub_10076D308(*a1, v3);
  *a2 = v4;
}

void sub_10076C80C()
{
  uint64_t *v0;
  char v1;
  uint64_t v2;

  v1 = sub_1000CD7A8();
  *v0 = sub_10076C784(v1);
  v0[1] = v2;
  sub_10004A298();
}

uint64_t sub_10076C82C()
{
  char *v0;

  return sub_10076C784(*v0);
}

void sub_10076C834(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  char v3;

  sub_10076C768(a1);
  *a2 = v3;
}

uint64_t sub_10076C858(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100770F70();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10076C880(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100770F70();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10076C8B4(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  char v4;

  v3._rawValue = &off_100B5B590;
  sub_10076DE10(*a1, v3);
  *a2 = v4 & 1;
}

void sub_10076C8EC(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = sub_10076C7A4();
  a1[1] = v2;
  sub_10004A298();
}

uint64_t sub_10076C90C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100771E84();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10076C968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100771E84();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_10076C9B4(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  sub_10076C57C();
  if (!v1)
    *a1 = v3;
}

void sub_10076C9DC()
{
  sub_10076C664();
}

void sub_10076C9F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  sub_100099310();
  a23 = v27;
  a24 = v28;
  v30 = v29;
  v41 = v31;
  v42 = type metadata accessor for VFXTestViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v32);
  sub_100079F58();
  v43 = sub_1000BA294(&qword_100C04228);
  __chkstk_darwin(v43);
  sub_10009E540();
  v33 = type metadata accessor for ViewState.SecondaryViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v34);
  sub_100079FBC();
  v35 = v30[3];
  v36 = v30[4];
  sub_1000DB418(v30, v35);
  v37 = sub_10077109C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ViewState.SecondaryViewState.CodingKeys, &type metadata for ViewState.SecondaryViewState.CodingKeys, v37, v35, v36);
  if (!v25)
  {
    a13 = 0;
    sub_1007710D8();
    sub_1000C6570((uint64_t)&type metadata for ViewState.SecondaryViewState.CodingType, (uint64_t)&a13, v43, (uint64_t)&type metadata for ViewState.SecondaryViewState.CodingType);
    if ((a14 & 1) != 0)
    {
      a12 = 2;
      sub_100086DA4(&qword_100C04240, type metadata accessor for VFXTestViewState, (uint64_t)&unk_1009A1944);
      sub_1000C6570(v42, (uint64_t)&a12, v43, v42);
      sub_1000D0B70();
      v38 = v41;
      sub_10007C77C(v24, (uint64_t)v26, type metadata accessor for VFXTestViewState);
      v39 = 1;
      v40 = v33;
    }
    else
    {
      a11 = 1;
      sub_100771114();
      sub_1000C6570((uint64_t)&unk_100B63280, (uint64_t)&a11, v43, (uint64_t)&unk_100B63280);
      sub_1000D0B70();
      v39 = 0;
      v40 = v33;
      *v26 = v44;
      v38 = v41;
    }
    swift_storeEnumTagMultiPayload(v26, v40, v39);
    sub_10007C77C((uint64_t)v26, v38, type metadata accessor for ViewState.SecondaryViewState);
  }
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v30);
  sub_1000B44B0();
}

void sub_10076CC1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, __int16 a11, char a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  sub_100099310();
  a24 = v30;
  a25 = v31;
  v32 = v25;
  v34 = v33;
  v50 = type metadata accessor for VFXTestViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v35);
  sub_100099720();
  sub_1000B42B0();
  __chkstk_darwin(v36);
  sub_100099234();
  v37 = sub_1000BA294(&qword_100C04250);
  v51 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  sub_100079FBC();
  v38 = v34[3];
  v39 = v34[4];
  sub_1000DB418(v34, v38);
  v40 = sub_10077109C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ViewState.SecondaryViewState.CodingKeys, &type metadata for ViewState.SecondaryViewState.CodingKeys, v40, v38, v39);
  sub_100095B78(v32, (uint64_t)v29, type metadata accessor for ViewState.SecondaryViewState);
  if (swift_getEnumCaseMultiPayload(v29) == 1)
  {
    sub_10007C77C((uint64_t)v29, v28, type metadata accessor for VFXTestViewState);
    a15 = 1;
    a14 = 0;
    v41 = sub_100771150();
    sub_10009DCC8((uint64_t)&a15, (uint64_t)&a14, v42, (uint64_t)&type metadata for ViewState.SecondaryViewState.CodingType, v41);
    if (v26)
    {
      v43 = type metadata accessor for VFXTestViewState;
      v44 = v28;
    }
    else
    {
      a13 = 2;
      sub_100086DA4(&qword_100C04260, type metadata accessor for VFXTestViewState, (uint64_t)&unk_1009A191C);
      sub_1000DC524(v28, (uint64_t)&a13, v37, v50, v49);
      v44 = sub_100095080();
    }
    sub_1000215BC(v44, v43);
    sub_100098820(v27, *(uint64_t (**)(uint64_t, uint64_t))(v51 + 8));
  }
  else
  {
    v45 = *v29;
    *(__int16 *)((char *)&a11 + 1) = 0;
    v46 = sub_100771150();
    sub_10009DCC8((uint64_t)&a12, (uint64_t)&a11 + 1, v47, (uint64_t)&type metadata for ViewState.SecondaryViewState.CodingType, v46);
    if (!v26)
    {
      v52 = v45;
      LOBYTE(a11) = 1;
      v48 = sub_10077118C();
      sub_1000DC524((uint64_t)&v52, (uint64_t)&a11, v37, (uint64_t)&unk_100B63280, v48);
    }
    sub_100098820(v27, *(uint64_t (**)(uint64_t, uint64_t))(v51 + 8));
    swift_release();
  }
  sub_1000B44B0();
}

void sub_10076CE48(Swift::String a1)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_100B5B5C8;
  sub_10076DE54(a1, v1);
}

uint64_t sub_10076CE64(char a1)
{
  if (!a1)
    return 1701869940;
  if (a1 == 1)
    return 0x6E6F697461636F6CLL;
  return 0x74736554786676;
}

uint64_t sub_10076CEC0(char a1)
{
  if ((a1 & 1) != 0)
    return 0x74736554786676;
  else
    return 0x6E6F697461636F6CLL;
}

void sub_10076CF04(unsigned __int8 *a1, unsigned __int8 *a2)
{
  sub_10068A3E4(*a1, *a2);
}

void sub_10076CF10()
{
  sub_1004A777C();
}

double sub_10076CF18(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_1001D8334(a1, *v1);
}

void sub_10076CF20(uint64_t a1)
{
  sub_1001DA224(a1);
}

void sub_10076CF28(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  char v4;

  v3._rawValue = &off_100B5B5C8;
  sub_10076DE54(*a1, v3);
  *a2 = v4;
}

void sub_10076CF5C()
{
  uint64_t *v0;
  char v1;
  uint64_t v2;

  v1 = sub_1000CD7A8();
  *v0 = sub_10076CE64(v1);
  v0[1] = v2;
  sub_10004A298();
}

uint64_t sub_10076CF7C()
{
  char *v0;

  return sub_10076CE64(*v0);
}

void sub_10076CF84(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  char v3;

  sub_10076CE48(a1);
  *a2 = v3;
}

uint64_t sub_10076CFA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10077109C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10076CFD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10077109C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10076CFF8(char *a1, unsigned __int8 *a2)
{
  sub_10068A358(*a1, *a2);
}

void sub_10076D004()
{
  sub_1004A7788();
}

double sub_10076D00C(uint64_t a1)
{
  char *v1;

  return sub_1001D82D8(a1, *v1);
}

void sub_10076D014(uint64_t a1)
{
  sub_1001DA2A0(a1);
}

void sub_10076D01C(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  char v4;

  v3._rawValue = &off_100B5B630;
  sub_10076D308(*a1, v3);
  *a2 = v4;
}

void sub_10076D050()
{
  uint64_t *v0;
  char v1;
  uint64_t v2;

  v1 = sub_1000CD7A8();
  *v0 = sub_10076CEC0(v1);
  v0[1] = v2;
  sub_10004A298();
}

uint64_t sub_10076D070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100771EC0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10076D0CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100771EC0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

#error "10076D120: call analysis failed (funcsize=5)"

#error "10076D134: call analysis failed (funcsize=5)"

uint64_t sub_10076D140()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v7;

  sub_1000BE9DC();
  sub_1000C00FC();
  sub_1000BA294(&qword_100C04270);
  sub_100099300();
  __chkstk_darwin(v2);
  sub_1000CD594();
  v3 = sub_1007711C8();
  sub_1000C2488((uint64_t)&type metadata for ViewState.SecondaryViewOverlayState.CodingKeys, v4, v3);
  if (v1)
  {
    sub_1000998EC();
  }
  else
  {
    sub_100771204();
    sub_1000B4D84((uint64_t)&type metadata for ViewState.SecondaryViewOverlayState.CodingType, v5);
    sub_1000BA528();
    v0 = v7;
    sub_1000998EC();
  }
  return v0;
}

void sub_10076D208()
{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  char v13;

  sub_1000BE9DC();
  v2 = v1;
  v3 = sub_1000BA294(&qword_100C04288);
  sub_100099300();
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B44C8();
  v7 = sub_1007711C8();
  sub_1000B44E8((uint64_t)&type metadata for ViewState.SecondaryViewOverlayState.CodingKeys, v8, v7);
  if ((v2 & 1) != 0)
  {
    v13 = 1;
    sub_100771240();
    v10 = &v13;
  }
  else
  {
    v12 = 0;
    sub_100771240();
    v10 = &v12;
  }
  KeyedEncodingContainer.encode<A>(_:forKey:)(v10, v9, v3, &type metadata for ViewState.SecondaryViewOverlayState.CodingType);
  sub_100098820((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  sub_100089054();
}

uint64_t sub_10076D2E8(Swift::String a1)
{
  Swift::OpaquePointer v1;
  char v2;

  v1._rawValue = &off_100B5B680;
  sub_10076DE10(a1, v1);
  return v2 & 1;
}

void sub_10076D308(Swift::String a1, Swift::OpaquePointer a2)
{
  sub_1000D9260(a1, a2);
  sub_10009DED8();
  sub_10004A298();
}

uint64_t sub_10076D338(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6552686372616573;
  else
    return 1701736302;
}

void sub_10076D374(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  char v4;

  v3._rawValue = &off_100B5B680;
  sub_10076DE10(*a1, v3);
  *a2 = v4 & 1;
}

uint64_t sub_10076D3AC@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10076D2E8(a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_10076D3D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007711C8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10076D3FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007711C8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10076D424(char *a1, unsigned __int8 *a2)
{
  sub_10068A4D0(*a1, *a2);
}

void sub_10076D430()
{
  sub_1004A7770();
}

double sub_10076D438(uint64_t a1)
{
  char *v1;

  return sub_1001D83A0(a1, *v1);
}

void sub_10076D440(uint64_t a1)
{
  sub_1001DA1C0(a1);
}

void sub_10076D448(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  char v4;

  v3._rawValue = &off_100B5B6B8;
  sub_10076D308(*a1, v3);
  *a2 = v4;
}

void sub_10076D47C()
{
  uint64_t *v0;
  char v1;
  uint64_t v2;

  v1 = sub_1000CD7A8();
  *v0 = sub_10076D338(v1);
  v0[1] = v2;
  sub_10004A298();
}

uint64_t sub_10076D49C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100771EFC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10076D4F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100771EFC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10076D544@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_10076D140();
  if (!v1)
    *a1 = result & 1;
  return result;
}

void sub_10076D570()
{
  sub_10076D208();
}

void UIInterfaceOrientation.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000BE9DC();
  sub_1000C00FC();
  sub_1000BA294(&qword_100C03F38);
  sub_100099300();
  __chkstk_darwin(v1);
  sub_1000CD594();
  v2 = sub_10076D644();
  sub_1000C2488((uint64_t)&_s10CodingKeysON_1, v3, v2);
  if (!v0)
  {
    sub_10076D680();
    sub_1000B4D84((uint64_t)&_s10CodingTypeON_1, v4);
    sub_1000BA528();
  }
  sub_1000998EC();
  sub_1000BF0D8();
  sub_100089054();
}

unint64_t sub_10076D644()
{
  unint64_t result;

  result = qword_100C03F40;
  if (!qword_100C03F40)
  {
    result = swift_getWitnessTable(&unk_1009C77C0, &_s10CodingKeysON_1);
    atomic_store(result, (unint64_t *)&qword_100C03F40);
  }
  return result;
}

unint64_t sub_10076D680()
{
  unint64_t result;

  result = qword_100C03F48;
  if (!qword_100C03F48)
  {
    result = swift_getWitnessTable(&unk_1009C7798, &_s10CodingTypeON_1);
    atomic_store(result, (unint64_t *)&qword_100C03F48);
  }
  return result;
}

void UIInterfaceOrientation.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;

  sub_1000BE9DC();
  v2 = v1;
  v3 = sub_1000BA294(&qword_100C03F50);
  sub_100099300();
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B44C8();
  v7 = sub_10076D644();
  sub_1000B44E8((uint64_t)&_s10CodingKeysON_1, v8, v7);
  switch(v2)
  {
    case 0:
      v13 = 0;
      v10 = sub_10076D830();
      v11 = &v13;
      break;
    case 1:
      v14 = 1;
      v10 = sub_10076D830();
      v11 = &v14;
      break;
    case 2:
      v15 = 2;
      v10 = sub_10076D830();
      v11 = &v15;
      break;
    case 3:
      v17 = 4;
      v10 = sub_10076D830();
      v11 = &v17;
      break;
    case 4:
      v16 = 3;
      v10 = sub_10076D830();
      v11 = &v16;
      break;
    default:
      v18 = 1;
      v10 = sub_10076D830();
      v11 = &v18;
      break;
  }
  sub_1000B4634((uint64_t)v11, v9, v3, (uint64_t)&_s10CodingTypeON_1, v10);
  sub_100098820((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  sub_100089054();
}

unint64_t sub_10076D830()
{
  unint64_t result;

  result = qword_100C03F58;
  if (!qword_100C03F58)
  {
    result = swift_getWitnessTable(&unk_1009C7770, &_s10CodingTypeON_1);
    atomic_store(result, (unint64_t *)&qword_100C03F58);
  }
  return result;
}

uint64_t sub_10076D86C(Swift::String a1)
{
  Swift::OpaquePointer v1;
  char v2;

  v1._rawValue = &off_100B5B708;
  sub_10076DE10(a1, v1);
  return v2 & 1;
}

unint64_t sub_10076D88C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100B5B740, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

uint64_t sub_10076D8D4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10076D908 + 4 * byte_1009C6D15[a1]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_10076D908()
{
  return 0x7469617274726F70;
}

unint64_t sub_10076D920()
{
  return 0xD000000000000012;
}

uint64_t sub_10076D93C()
{
  return 0x70616373646E616CLL;
}

void sub_10076D974(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  char v4;

  v3._rawValue = &off_100B5B708;
  sub_10076DE10(*a1, v3);
  *a2 = v4 & 1;
}

uint64_t sub_10076D9AC@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10076D86C(a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_10076D9D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10076D644();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10076D9FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10076D644();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10076DA24()
{
  sub_10068A02C();
}

void sub_10076DA30()
{
  unsigned __int8 *v0;

  sub_1004A77A0(*v0);
}

void sub_10076DA38()
{
  sub_1001D8144();
}

void sub_10076DA40(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1001DA318(a1, *v1);
}

unint64_t sub_10076DA48@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10076D88C(*a1);
  *a2 = result;
  return result;
}

void sub_10076DA74()
{
  uint64_t *v0;
  unsigned __int8 v1;
  uint64_t v2;

  v1 = sub_1000CD7A8();
  *v0 = sub_10076D8D4(v1);
  v0[1] = v2;
  sub_10004A298();
}

uint64_t sub_10076DA94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100770CD8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10076DAF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100770CD8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_10076DB3C(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  UIInterfaceOrientation.init(from:)();
  if (!v1)
    *a1 = v3;
}

void sub_10076DB64()
{
  UIInterfaceOrientation.encode(to:)();
}

void UIUserInterfaceSizeClass.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000BE9DC();
  sub_1000C00FC();
  sub_1000BA294(&qword_100C03F60);
  sub_100099300();
  __chkstk_darwin(v1);
  sub_1000CD594();
  v2 = sub_10076DC38();
  sub_1000C2488((uint64_t)&_s10CodingKeysON_0, v3, v2);
  if (!v0)
  {
    sub_10076DC74();
    sub_1000B4D84((uint64_t)&_s10CodingTypeON_0, v4);
    sub_1000BA528();
  }
  sub_1000998EC();
  sub_1000BF0D8();
  sub_100089054();
}

unint64_t sub_10076DC38()
{
  unint64_t result;

  result = qword_100C03F68;
  if (!qword_100C03F68)
  {
    result = swift_getWitnessTable(&unk_1009C7720, &_s10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_100C03F68);
  }
  return result;
}

unint64_t sub_10076DC74()
{
  unint64_t result;

  result = qword_100C03F70;
  if (!qword_100C03F70)
  {
    result = swift_getWitnessTable(&unk_1009C76F8, &_s10CodingTypeON_0);
    atomic_store(result, (unint64_t *)&qword_100C03F70);
  }
  return result;
}

void UIUserInterfaceSizeClass.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;

  sub_1000BE9DC();
  v2 = v1;
  v3 = sub_1000BA294(&qword_100C03F78);
  sub_100099300();
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B44C8();
  v7 = sub_10076DC38();
  sub_1000B44E8((uint64_t)&_s10CodingKeysON_0, v8, v7);
  if (v2)
  {
    if (v2 == 2)
    {
      v14 = 1;
      v10 = sub_10076DDD4();
      v11 = &v14;
    }
    else if (v2 == 1)
    {
      v13 = 0;
      v10 = sub_10076DDD4();
      v11 = &v13;
    }
    else
    {
      v16 = 0;
      v10 = sub_10076DDD4();
      v11 = &v16;
    }
  }
  else
  {
    v15 = 2;
    v10 = sub_10076DDD4();
    v11 = &v15;
  }
  sub_1000B4634((uint64_t)v11, v9, v3, (uint64_t)&_s10CodingTypeON_0, v10);
  sub_100098820((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  sub_100089054();
}

unint64_t sub_10076DDD4()
{
  unint64_t result;

  result = qword_100C03F80;
  if (!qword_100C03F80)
  {
    result = swift_getWitnessTable(&unk_1009C76D0, &_s10CodingTypeON_0);
    atomic_store(result, (unint64_t *)&qword_100C03F80);
  }
  return result;
}

void sub_10076DE10(Swift::String a1, Swift::OpaquePointer a2)
{
  sub_1000D9260(a1, a2);
  sub_10009DED8();
  sub_10004A298();
}

uint64_t sub_10076DE34(Swift::String a1)
{
  Swift::OpaquePointer v1;
  char v2;

  v1._rawValue = &off_100B5B7D8;
  sub_10076DE10(a1, v1);
  return v2 & 1;
}

void sub_10076DE54(Swift::String a1, Swift::OpaquePointer a2)
{
  sub_1000D9260(a1, a2);
  sub_10009DED8();
  sub_10004A298();
}

uint64_t sub_10076DE7C(char a1)
{
  if (!a1)
    return 0x746361706D6F63;
  if (a1 == 1)
    return 0x72616C75676572;
  return 0x6669636570736E75;
}

void sub_10076DEDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, __int16 a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  sub_100099310();
  a23 = v27;
  a24 = v28;
  a10 = v29;
  v31 = v30;
  v32 = sub_1000BA294(&qword_100C042C8);
  v33 = sub_1000DAA7C(v32);
  __chkstk_darwin(v33);
  sub_10009E540();
  v40 = sub_1000BA294(&qword_100C042D0);
  v34 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  sub_10007A130();
  v35 = sub_1000BA294(&qword_100C042D8);
  v36 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  sub_100094EC4();
  v37 = v31[3];
  v38 = v31[4];
  sub_1000DB418(v31, v37);
  v39 = sub_10077127C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ViewState.PreferredView.CodingKeys, &type metadata for ViewState.PreferredView.CodingKeys, v39, v37, v38);
  if ((a10 & 1) != 0)
  {
    sub_1000FDC30();
    sub_100098B5C((uint64_t)&type metadata for ViewState.PreferredView.SecondaryCodingKeys, (uint64_t)&a14);
    (*(void (**)(uint64_t))(v41 + 8))(v25);
  }
  else
  {
    a13 = 0;
    sub_1007712F4();
    sub_100098B5C((uint64_t)&type metadata for ViewState.PreferredView.PrimaryCodingKeys, (uint64_t)&a13);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v26, v40);
  }
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v24, v35);
  sub_1000B44B0();
}

uint64_t sub_10076E034()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  void (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;

  sub_100099310();
  v53 = v3;
  v54 = v4;
  v49 = v0;
  v6 = v5;
  v7 = sub_1000BA294(&qword_100C04298);
  v8 = sub_1000DAA7C(v7);
  __chkstk_darwin(v8);
  sub_100088FDC();
  v46 = v9;
  v45 = sub_1000BA294(&qword_100C042A0);
  v10 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  sub_100079FBC();
  v11 = sub_1000BA294(&qword_100C042A8);
  sub_100099300();
  __chkstk_darwin(v12);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v6[3];
  v16 = v6[4];
  sub_1000DB418(v6, v15);
  v17 = sub_10077127C();
  v18 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ViewState.PreferredView.CodingKeys, &type metadata for ViewState.PreferredView.CodingKeys, v17, v15, v16);
  if (v18)
    return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v6);
  v41 = v10;
  v42 = v1;
  v20 = v46;
  v19 = v47;
  v43 = v6;
  v44 = v2;
  v21 = v48;
  v49 = v11;
  v22 = KeyedDecodingContainer.allKeys.getter(v11);
  v23 = *(_QWORD *)(v22 + 16);
  if (!v23
    || (v40 = 0,
        v24 = *(unsigned __int8 *)(v22 + 32),
        sub_10055FF58(1, v23, v22, v22 + 32, 0, (2 * v23) | 1),
        v26 = v25,
        v28 = v27,
        swift_bridgeObjectRelease(),
        v26 != v28 >> 1))
  {
    v29 = type metadata accessor for DecodingError(0);
    swift_allocError(v29, &protocol witness table for DecodingError, 0, 0);
    v31 = v30;
    sub_1000BA294(&qword_100BC6CF8);
    *v31 = &unk_100B8F448;
    v32 = v49;
    v33 = KeyedDecodingContainer.codingPath.getter(v49);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v33, 0xD00000000000002BLL, 0x80000001009F2600, 0);
    v34 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v31, enum case for DecodingError.typeMismatch(_:), v29);
    swift_willThrow(v34, v35);
    sub_100099400();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v14, v32);
    v6 = v43;
    return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v6);
  }
  v50 = v24;
  if ((v24 & 1) != 0)
  {
    sub_1000FDC30();
    sub_1000B46D8((uint64_t)&type metadata for ViewState.PreferredView.SecondaryCodingKeys, (uint64_t)&v52);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v21);
  }
  else
  {
    v51 = 0;
    sub_1007712F4();
    v36 = v42;
    sub_1000B46D8((uint64_t)&type metadata for ViewState.PreferredView.PrimaryCodingKeys, (uint64_t)&v51);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v36, v45);
  }
  sub_100099400();
  v38 = sub_100095080();
  v39(v38);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v43);
  return v50;
}

void sub_10076E334(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  char v4;

  v3._rawValue = &off_100B5B7D8;
  sub_10076DE10(*a1, v3);
  *a2 = v4 & 1;
}

uint64_t sub_10076E36C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10076DE34(a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_10076E394(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10076DC38();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10076E3BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10076DC38();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10076E3E4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  sub_100689ED0(*a1, *a2);
}

void sub_10076E3F0()
{
  sub_1004A7834();
}

double sub_10076E3F8(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_1001D80D8(a1, *v1);
}

void sub_10076E400(uint64_t a1)
{
  sub_1001DA3A0(a1);
}

void sub_10076E408(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  char v4;

  v3._rawValue = &off_100B5B810;
  sub_10076DE54(*a1, v3);
  *a2 = v4;
}

void sub_10076E43C()
{
  uint64_t *v0;
  char v1;
  uint64_t v2;

  v1 = sub_1000CD7A8();
  *v0 = sub_10076DE7C(v1);
  v0[1] = v2;
  sub_10004A298();
}

uint64_t sub_10076E45C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100770D14();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10076E4B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100770D14();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_10076E504(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  UIUserInterfaceSizeClass.init(from:)();
  if (!v1)
    *a1 = v3;
}

void sub_10076E52C()
{
  UIUserInterfaceSizeClass.encode(to:)();
}

uint64_t *sub_10076E544(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v7 = type metadata accessor for WeatherCondition(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = a3;
      v10 = 1;
    }
    else
    {
      v12 = *a2;
      *a1 = *a2;
      swift_retain(v12);
      v8 = a1;
      v9 = a3;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

_QWORD *sub_10076E600(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_1000215BC((uint64_t)a1, type metadata accessor for ViewState.SecondaryViewState);
    if (swift_getEnumCaseMultiPayload(a2) == 1)
    {
      v6 = type metadata accessor for WeatherCondition(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = a1;
      v8 = a3;
      v9 = 1;
    }
    else
    {
      *a1 = *a2;
      swift_retain();
      v7 = a1;
      v8 = a3;
      v9 = 0;
    }
    swift_storeEnumTagMultiPayload(v7, v8, v9);
  }
  return a1;
}

void *sub_10076E6A8(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for WeatherCondition(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_10076E734(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_1000215BC((uint64_t)a1, type metadata accessor for ViewState.SecondaryViewState);
    if (swift_getEnumCaseMultiPayload(a2) == 1)
    {
      v6 = type metadata accessor for WeatherCondition(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

_QWORD *sub_10076E7D8(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  int EnumCaseMultiPayload;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _WORD *v45;
  int *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  char *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v62;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
    return v7;
  }
  v6 = a2;
  v7 = a1;
  v8 = a3[5];
  v9 = (_QWORD *)((char *)a1 + v8);
  v10 = (_QWORD *)((char *)a2 + v8);
  v11 = type metadata accessor for ViewState.SecondaryViewState(0);
  swift_retain();
  if (swift_getEnumCaseMultiPayload(v10) == 1)
  {
    v12 = type metadata accessor for WeatherCondition(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = 1;
  }
  else
  {
    *v9 = *v10;
    swift_retain();
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v13);
  v14 = a3[7];
  *((_BYTE *)v7 + a3[6]) = *((_BYTE *)v6 + a3[6]);
  *((_BYTE *)v7 + v14) = *((_BYTE *)v6 + v14);
  v15 = a3[8];
  v16 = (_QWORD *)((char *)v7 + v15);
  v17 = (_QWORD *)((char *)v6 + v15);
  v18 = (int *)type metadata accessor for SearchViewState(0);
  if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v17, 1, (uint64_t)v18))
  {
    v20 = v6;
    v21 = v17[1];
    *v16 = *v17;
    v16[1] = v21;
    v22 = v18[5];
    v23 = (_QWORD *)((char *)v16 + v22);
    v24 = (_QWORD *)((char *)v17 + v22);
    v25 = type metadata accessor for SearchViewState.ViewState(0);
    swift_bridgeObjectRetain();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v24);
    if (EnumCaseMultiPayload == 1)
    {
      *v23 = *v24;
      swift_bridgeObjectRetain();
      v28 = v23;
      v29 = v25;
      v30 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        goto LABEL_14;
      }
      v27 = type metadata accessor for CodableError(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v23, v24, v27);
      v28 = v23;
      v29 = v25;
      v30 = 0;
    }
    swift_storeEnumTagMultiPayload(v28, v29, v30);
LABEL_14:
    v6 = v20;
    *((_BYTE *)v16 + v18[6]) = *((_BYTE *)v17 + v18[6]);
    v31 = v18[7];
    v32 = (char *)v16 + v31;
    v33 = (char *)v17 + v31;
    v34 = type metadata accessor for Location(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v33, 1, v34))
    {
      v35 = sub_1000BA294(&qword_100BC35F8);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v32, 0, 1, v34);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v16, 0, 1, (uint64_t)v18);
    goto LABEL_18;
  }
  v19 = sub_1000BA294(&qword_100BC5F78);
  memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
LABEL_18:
  v36 = a3[9];
  v37 = (char *)v7 + v36;
  v38 = (char *)v6 + v36;
  *(_OWORD *)v37 = *(_OWORD *)((char *)v6 + v36);
  v37[16] = *((_BYTE *)v6 + v36 + 16);
  v37[17] = *((_BYTE *)v6 + v36 + 17);
  v37[18] = *((_BYTE *)v6 + v36 + 18);
  v39 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
  v40 = &v37[v39];
  v41 = &v38[v39];
  v42 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
  v43 = a3[10];
  v44 = (char *)v7 + v43;
  v62 = v6;
  v45 = (_WORD *)((char *)v6 + v43);
  *(_WORD *)((char *)v7 + v43) = *v45;
  v46 = (int *)type metadata accessor for WeatherMapPresentationState(0);
  v47 = v46[6];
  v48 = &v44[v47];
  v49 = (char *)v45 + v47;
  v50 = type metadata accessor for WeatherMapOverlayKind(0);
  v51 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16);
  v51(v48, v49, v50);
  v52 = v46[7];
  v53 = &v44[v52];
  v54 = (_QWORD *)((char *)v45 + v52);
  v55 = v54[1];
  *(_QWORD *)v53 = *v54;
  *((_QWORD *)v53 + 1) = v55;
  v56 = v46[8];
  v57 = &v44[v56];
  v58 = (char *)v45 + v56;
  swift_bridgeObjectRetain();
  v59 = sub_1000BA294(&qword_100BC5FD0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v58, 3, v59))
  {
    v60 = type metadata accessor for WeatherMapTrackingState(0);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    *v57 = *v58;
    v51(&v57[*(int *)(v59 + 48)], &v58[*(int *)(v59 + 48)], v50);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v57, 0, 3, v59);
  }
  v44[v46[9]] = *((_BYTE *)v45 + v46[9]);
  *((_BYTE *)v7 + a3[11]) = *((_BYTE *)v62 + a3[11]);
  return v7;
}

_QWORD *sub_10076EBE4(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int *v15;
  int v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int EnumCaseMultiPayload;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  const void *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  char *v57;
  int *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  _QWORD *result;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  _QWORD *v83;
  int *v84;
  _QWORD *v85;

  v4 = a2;
  *a1 = *a2;
  swift_retain();
  swift_release();
  if (a1 != v4)
  {
    v6 = a3[5];
    v7 = (_QWORD *)((char *)a1 + v6);
    v8 = (_QWORD *)((char *)v4 + v6);
    sub_1000215BC((uint64_t)a1 + v6, type metadata accessor for ViewState.SecondaryViewState);
    v9 = type metadata accessor for ViewState.SecondaryViewState(0);
    if (swift_getEnumCaseMultiPayload(v8) == 1)
    {
      v10 = type metadata accessor for WeatherCondition(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, v8, v10);
      v11 = 1;
    }
    else
    {
      *v7 = *v8;
      swift_retain();
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v7, v9, v11);
  }
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)v4 + a3[6]);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)v4 + a3[7]);
  v12 = a3[8];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)v4 + v12);
  v15 = (int *)type metadata accessor for SearchViewState(0);
  v16 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, (uint64_t)v15);
  v17 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, (uint64_t)v15);
  if (v16)
  {
    if (!v17)
    {
      v18 = v4;
      *v13 = *v14;
      v13[1] = v14[1];
      v19 = v15[5];
      v20 = (_QWORD *)((char *)v13 + v19);
      v21 = (_QWORD *)((char *)v14 + v19);
      v22 = type metadata accessor for SearchViewState.ViewState(0);
      swift_bridgeObjectRetain();
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v21);
      if (EnumCaseMultiPayload == 1)
      {
        *v20 = *v21;
        swift_bridgeObjectRetain();
        v25 = v20;
        v26 = v22;
        v27 = 1;
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
          goto LABEL_22;
        }
        v24 = type metadata accessor for CodableError(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v20, v21, v24);
        v25 = v20;
        v26 = v22;
        v27 = 0;
      }
      swift_storeEnumTagMultiPayload(v25, v26, v27);
LABEL_22:
      v4 = v18;
      *((_BYTE *)v13 + v15[6]) = *((_BYTE *)v14 + v15[6]);
      v41 = v15[7];
      v42 = (char *)v13 + v41;
      v43 = (char *)v14 + v41;
      v44 = type metadata accessor for Location(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v43, 1, v44))
      {
        v45 = sub_1000BA294(&qword_100BC35F8);
        memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v42, 0, 1, v44);
      }
      v46 = (uint64_t)v13;
      v47 = (uint64_t)v15;
      goto LABEL_26;
    }
    goto LABEL_13;
  }
  if (v17)
  {
    sub_1000215BC((uint64_t)v13, type metadata accessor for SearchViewState);
LABEL_13:
    v28 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC5F78) - 8) + 64);
    v29 = v13;
    v30 = v14;
LABEL_14:
    memcpy(v29, v30, v28);
    goto LABEL_27;
  }
  *v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != v4)
  {
    v31 = v4;
    v32 = v15[5];
    v33 = (_QWORD *)((char *)v13 + v32);
    v34 = (_QWORD *)((char *)v14 + v32);
    sub_1000215BC((uint64_t)v13 + v32, type metadata accessor for SearchViewState.ViewState);
    v35 = type metadata accessor for SearchViewState.ViewState(0);
    v36 = swift_getEnumCaseMultiPayload(v34);
    if (v36 == 1)
    {
      *v33 = *v34;
      swift_bridgeObjectRetain();
      v38 = v33;
      v39 = v35;
      v40 = 1;
    }
    else
    {
      if (v36)
      {
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
        goto LABEL_38;
      }
      v37 = type metadata accessor for CodableError(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v33, v34, v37);
      v38 = v33;
      v39 = v35;
      v40 = 0;
    }
    swift_storeEnumTagMultiPayload(v38, v39, v40);
LABEL_38:
    v4 = v31;
  }
  *((_BYTE *)v13 + v15[6]) = *((_BYTE *)v14 + v15[6]);
  v76 = v15[7];
  v77 = (uint64_t)v13 + v76;
  v78 = (uint64_t)v14 + v76;
  v79 = type metadata accessor for Location(0);
  v80 = _s7Weather24LocationCompositionStateOwet_0(v77, 1, v79);
  v81 = _s7Weather24LocationCompositionStateOwet_0(v78, 1, v79);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v77, v78, v79);
      v46 = v77;
      v47 = v79;
LABEL_26:
      _s7Weather24LocationCompositionStateOwst_0(v46, 0, 1, v47);
      goto LABEL_27;
    }
    goto LABEL_44;
  }
  v82 = *(_QWORD *)(v79 - 8);
  if (v81)
  {
    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v77, v79);
LABEL_44:
    v28 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC35F8) - 8) + 64);
    v29 = (void *)v77;
    v30 = (const void *)v78;
    goto LABEL_14;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 24))(v77, v78, v79);
LABEL_27:
  v48 = a3[9];
  v49 = (char *)a1 + v48;
  v50 = (char *)v4 + v48;
  *(_QWORD *)v49 = *(_QWORD *)((char *)v4 + v48);
  *((_QWORD *)v49 + 1) = *(_QWORD *)((char *)v4 + v48 + 8);
  v49[16] = *((_BYTE *)v4 + v48 + 16);
  v49[17] = *((_BYTE *)v4 + v48 + 17);
  v49[18] = *((_BYTE *)v4 + v48 + 18);
  v51 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
  v52 = &v49[v51];
  v53 = &v50[v51];
  v54 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 24))(v52, v53, v54);
  v84 = a3;
  v85 = a1;
  v55 = a3[10];
  v56 = (char *)a1 + v55;
  v83 = v4;
  v57 = (char *)v4 + v55;
  *v56 = *((_BYTE *)v4 + v55);
  v56[1] = *((_BYTE *)v4 + v55 + 1);
  v58 = (int *)type metadata accessor for WeatherMapPresentationState(0);
  v59 = v58[6];
  v60 = &v56[v59];
  v61 = &v57[v59];
  v62 = type metadata accessor for WeatherMapOverlayKind(0);
  v63 = *(_QWORD *)(v62 - 8);
  v64 = *(void (**)(char *, char *, uint64_t))(v63 + 24);
  v64(v60, v61, v62);
  v65 = v58[7];
  v66 = &v56[v65];
  v67 = &v57[v65];
  *v66 = *(_QWORD *)v67;
  v66[1] = *((_QWORD *)v67 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v68 = v58[8];
  v69 = &v56[v68];
  v70 = &v57[v68];
  v71 = sub_1000BA294(&qword_100BC5FD0);
  v72 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v69, 3, v71);
  v73 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v70, 3, v71);
  if (!v72)
  {
    if (!v73)
    {
      *v69 = *v70;
      v64(&v69[*(int *)(v71 + 48)], &v70[*(int *)(v71 + 48)], v62);
      goto LABEL_33;
    }
    sub_100021A14((uint64_t)v69, &qword_100BC5FD0);
    goto LABEL_32;
  }
  if (v73)
  {
LABEL_32:
    v74 = type metadata accessor for WeatherMapTrackingState(0);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    goto LABEL_33;
  }
  *v69 = *v70;
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(&v69[*(int *)(v71 + 48)], &v70[*(int *)(v71 + 48)], v62);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v69, 0, 3, v71);
LABEL_33:
  v56[v58[9]] = v57[v58[9]];
  result = v85;
  *((_BYTE *)v85 + v84[11]) = *((_BYTE *)v83 + v84[11]);
  return result;
}

_QWORD *sub_10076F240(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  int *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  int *v49;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ViewState.SecondaryViewState(0);
  if (swift_getEnumCaseMultiPayload(v8) == 1)
  {
    v10 = type metadata accessor for WeatherCondition(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  v12 = a3[8];
  v13 = (_OWORD *)((char *)a1 + v12);
  v14 = (_OWORD *)((char *)a2 + v12);
  v15 = (int *)type metadata accessor for SearchViewState(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, (uint64_t)v15))
  {
    v16 = sub_1000BA294(&qword_100BC5F78);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    v17 = v15[5];
    v18 = (char *)v13 + v17;
    v19 = (char *)v14 + v17;
    v20 = type metadata accessor for SearchViewState.ViewState(0);
    if (swift_getEnumCaseMultiPayload(v19))
    {
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v21 = type metadata accessor for CodableError(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v18, v19, v21);
      swift_storeEnumTagMultiPayload(v18, v20, 0);
    }
    *((_BYTE *)v13 + v15[6]) = *((_BYTE *)v14 + v15[6]);
    v22 = v15[7];
    v23 = (char *)v13 + v22;
    v24 = (char *)v14 + v22;
    v25 = type metadata accessor for Location(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v24, 1, v25))
    {
      v26 = sub_1000BA294(&qword_100BC35F8);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v23, 0, 1, v25);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, (uint64_t)v15);
  }
  v27 = a3[9];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  *(_OWORD *)v28 = *(_OWORD *)((char *)a2 + v27);
  v28[16] = *((_BYTE *)a2 + v27 + 16);
  v28[17] = *((_BYTE *)a2 + v27 + 17);
  v28[18] = *((_BYTE *)a2 + v27 + 18);
  v30 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
  v31 = &v28[v30];
  v32 = &v29[v30];
  v33 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
  v49 = a3;
  v34 = a3[10];
  v35 = (char *)a1 + v34;
  v36 = (char *)a2 + v34;
  *(_WORD *)((char *)a1 + v34) = *(_WORD *)((char *)a2 + v34);
  v37 = (int *)type metadata accessor for WeatherMapPresentationState(0);
  v38 = v37[6];
  v39 = &v35[v38];
  v40 = &v36[v38];
  v41 = type metadata accessor for WeatherMapOverlayKind(0);
  v42 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32);
  v42(v39, v40, v41);
  *(_OWORD *)&v35[v37[7]] = *(_OWORD *)&v36[v37[7]];
  v43 = v37[8];
  v44 = &v35[v43];
  v45 = &v36[v43];
  v46 = sub_1000BA294(&qword_100BC5FD0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v45, 3, v46))
  {
    v47 = type metadata accessor for WeatherMapTrackingState(0);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    *v44 = *v45;
    v42(&v44[*(int *)(v46 + 48)], &v45[*(int *)(v46 + 48)], v41);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v44, 0, 3, v46);
  }
  v35[v37[9]] = v36[v37[9]];
  *((_BYTE *)a1 + v49[11]) = *((_BYTE *)a2 + v49[11]);
  return a1;
}

_QWORD *sub_10076F5E0(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  size_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _WORD *v48;
  char *v49;
  int *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  _QWORD *result;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  _QWORD *v78;
  int *v79;
  _QWORD *v80;

  v4 = a2;
  *a1 = *a2;
  swift_release();
  if (a1 != v4)
  {
    v6 = a3[5];
    v7 = (char *)a1 + v6;
    v8 = (char *)v4 + v6;
    sub_1000215BC((uint64_t)a1 + v6, type metadata accessor for ViewState.SecondaryViewState);
    v9 = type metadata accessor for ViewState.SecondaryViewState(0);
    if (swift_getEnumCaseMultiPayload(v8) == 1)
    {
      v10 = type metadata accessor for WeatherCondition(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
      swift_storeEnumTagMultiPayload(v7, v9, 1);
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
  }
  v11 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)v4 + a3[6]);
  *((_BYTE *)a1 + v11) = *((_BYTE *)v4 + v11);
  v12 = a3[8];
  v13 = (uint64_t)a1 + v12;
  v14 = (uint64_t)v4 + v12;
  v15 = (int *)type metadata accessor for SearchViewState(0);
  v16 = _s7Weather24LocationCompositionStateOwet_0(v13, 1, (uint64_t)v15);
  v17 = _s7Weather24LocationCompositionStateOwet_0(v14, 1, (uint64_t)v15);
  if (v16)
  {
    if (!v17)
    {
      v18 = v4;
      *(_OWORD *)v13 = *(_OWORD *)v14;
      v19 = v15[5];
      v20 = (void *)(v13 + v19);
      v21 = (const void *)(v14 + v19);
      v22 = type metadata accessor for SearchViewState.ViewState(0);
      if (swift_getEnumCaseMultiPayload(v21))
      {
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        v32 = type metadata accessor for CodableError(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v20, v21, v32);
        swift_storeEnumTagMultiPayload(v20, v22, 0);
      }
      *(_BYTE *)(v13 + v15[6]) = *(_BYTE *)(v14 + v15[6]);
      v33 = v15[7];
      v34 = (void *)(v13 + v33);
      v35 = (const void *)(v14 + v33);
      v36 = type metadata accessor for Location(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v35, 1, v36))
      {
        v37 = sub_1000BA294(&qword_100BC35F8);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v34, 0, 1, v36);
      }
      v4 = v18;
      v38 = v13;
      v39 = (uint64_t)v15;
      goto LABEL_21;
    }
    goto LABEL_11;
  }
  if (v17)
  {
    sub_1000215BC(v13, type metadata accessor for SearchViewState);
LABEL_11:
    v23 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC5F78) - 8) + 64);
    v24 = (void *)v13;
    v25 = (const void *)v14;
LABEL_12:
    memcpy(v24, v25, v23);
    goto LABEL_22;
  }
  v26 = *(_QWORD *)(v14 + 8);
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_QWORD *)(v13 + 8) = v26;
  swift_bridgeObjectRelease();
  if (a1 != v4)
  {
    v27 = v4;
    v28 = v15[5];
    v29 = (void *)(v13 + v28);
    v30 = (const void *)(v14 + v28);
    sub_1000215BC(v13 + v28, type metadata accessor for SearchViewState.ViewState);
    v31 = type metadata accessor for SearchViewState.ViewState(0);
    if (swift_getEnumCaseMultiPayload(v30))
    {
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      v70 = type metadata accessor for CodableError(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v70 - 8) + 32))(v29, v30, v70);
      swift_storeEnumTagMultiPayload(v29, v31, 0);
    }
    v4 = v27;
  }
  *(_BYTE *)(v13 + v15[6]) = *(_BYTE *)(v14 + v15[6]);
  v71 = v15[7];
  v72 = v13 + v71;
  v73 = v14 + v71;
  v74 = type metadata accessor for Location(0);
  v75 = _s7Weather24LocationCompositionStateOwet_0(v72, 1, v74);
  v76 = _s7Weather24LocationCompositionStateOwet_0(v73, 1, v74);
  if (v75)
  {
    if (!v76)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 32))(v72, v73, v74);
      v38 = v72;
      v39 = v74;
LABEL_21:
      _s7Weather24LocationCompositionStateOwst_0(v38, 0, 1, v39);
      goto LABEL_22;
    }
    goto LABEL_37;
  }
  v77 = *(_QWORD *)(v74 - 8);
  if (v76)
  {
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v72, v74);
LABEL_37:
    v23 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC35F8) - 8) + 64);
    v24 = (void *)v72;
    v25 = (const void *)v73;
    goto LABEL_12;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 40))(v72, v73, v74);
LABEL_22:
  v40 = a3[9];
  v41 = (char *)a1 + v40;
  v42 = (char *)v4 + v40;
  *(_OWORD *)v41 = *(_OWORD *)((char *)v4 + v40);
  v41[16] = *((_BYTE *)v4 + v40 + 16);
  v41[17] = *((_BYTE *)v4 + v40 + 17);
  v41[18] = *((_BYTE *)v4 + v40 + 18);
  v43 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
  v44 = &v41[v43];
  v45 = &v42[v43];
  v46 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 40))(v44, v45, v46);
  v79 = a3;
  v80 = a1;
  v47 = a3[10];
  v48 = (_WORD *)((char *)a1 + v47);
  v78 = v4;
  v49 = (char *)v4 + v47;
  *v48 = *(_WORD *)((char *)v4 + v47);
  v50 = (int *)type metadata accessor for WeatherMapPresentationState(0);
  v51 = v50[6];
  v52 = (char *)v48 + v51;
  v53 = &v49[v51];
  v54 = type metadata accessor for WeatherMapOverlayKind(0);
  v55 = *(_QWORD *)(v54 - 8);
  v56 = *(void (**)(char *, char *, uint64_t))(v55 + 40);
  v56(v52, v53, v54);
  v57 = v50[7];
  v58 = (_QWORD *)((char *)v48 + v57);
  v59 = &v49[v57];
  v61 = *(_QWORD *)v59;
  v60 = *((_QWORD *)v59 + 1);
  *v58 = v61;
  v58[1] = v60;
  swift_bridgeObjectRelease();
  v62 = v50[8];
  v63 = (char *)v48 + v62;
  v64 = &v49[v62];
  v65 = sub_1000BA294(&qword_100BC5FD0);
  v66 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v63, 3, v65);
  v67 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v64, 3, v65);
  if (!v66)
  {
    if (!v67)
    {
      *v63 = *v64;
      v56(&v63[*(int *)(v65 + 48)], &v64[*(int *)(v65 + 48)], v54);
      goto LABEL_28;
    }
    sub_100021A14((uint64_t)v63, &qword_100BC5FD0);
    goto LABEL_27;
  }
  if (v67)
  {
LABEL_27:
    v68 = type metadata accessor for WeatherMapTrackingState(0);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    goto LABEL_28;
  }
  *v63 = *v64;
  (*(void (**)(char *, char *, uint64_t))(v55 + 32))(&v63[*(int *)(v65 + 48)], &v64[*(int *)(v65 + 48)], v54);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v63, 0, 3, v65);
LABEL_28:
  *((_BYTE *)v48 + v50[9]) = v49[v50[9]];
  result = v80;
  *((_BYTE *)v80 + v79[11]) = *((_BYTE *)v78 + v79[11]);
  return result;
}

void sub_10076FBA4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_100079F70();
  }
  else
  {
    type metadata accessor for ViewState.SecondaryViewState(0);
    sub_100088FF0();
    if (v9)
    {
      v7 = v6;
      v8 = a3[5];
    }
    else
    {
      sub_1000BA294(&qword_100BC5F78);
      sub_100088FF0();
      if (v9)
      {
        v7 = v10;
        v8 = a3[8];
      }
      else
      {
        sub_10009E908();
        sub_100088FF0();
        if (v11)
        {
          v7 = v12;
          v8 = a3[9];
        }
        else
        {
          v7 = sub_10009E654();
          v8 = a3[10];
        }
      }
    }
    _s7Weather24LocationCompositionStateOwet_0(a1 + v8, a2, v7);
  }
}

_QWORD *sub_10076FC60(_QWORD *result, uint64_t a2, int a3, int *a4)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *result = (a2 - 1);
  }
  else
  {
    type metadata accessor for ViewState.SecondaryViewState(0);
    sub_10009D2E8();
    if (v10)
    {
      v8 = v7;
      v9 = a4[5];
    }
    else
    {
      sub_1000BA294(&qword_100BC5F78);
      sub_10009D2E8();
      if (v10)
      {
        v8 = v11;
        v9 = a4[8];
      }
      else
      {
        sub_10009E908();
        sub_10009D2E8();
        if (v12)
        {
          v8 = v13;
          v9 = a4[9];
        }
        else
        {
          v8 = sub_10009E654();
          v9 = a4[10];
        }
      }
    }
    return (_QWORD *)_s7Weather24LocationCompositionStateOwst_0((uint64_t)v5 + v9, a2, a2, v8);
  }
  return result;
}

ValueMetadata *_s10CodingTypeOMa_0()
{
  return &_s10CodingTypeON_0;
}

ValueMetadata *_s10CodingKeysOMa_0()
{
  return &_s10CodingKeysON_0;
}

uint64_t _s10CodingTypeOwst_1(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10076FD94 + 4 * byte_1009C6D1F[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10076FDC8 + 4 * byte_1009C6D1A[v4]))();
}

uint64_t sub_10076FDC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10076FDD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10076FDD8);
  return result;
}

uint64_t sub_10076FDE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10076FDECLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10076FDF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10076FDF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s10CodingTypeOMa_1()
{
  return &_s10CodingTypeON_1;
}

ValueMetadata *_s10CodingKeysOMa_1()
{
  return &_s10CodingKeysON_1;
}

unint64_t sub_10076FE28()
{
  unint64_t result;

  result = qword_100C040E0;
  if (!qword_100C040E0)
  {
    result = swift_getWitnessTable(&unk_1009C6F28, &_s10CodingKeysON_1);
    atomic_store(result, (unint64_t *)&qword_100C040E0);
  }
  return result;
}

unint64_t sub_10076FE68()
{
  unint64_t result;

  result = qword_100C040E8;
  if (!qword_100C040E8)
  {
    result = swift_getWitnessTable(&unk_1009C6FC8, &_s10CodingTypeON_1);
    atomic_store(result, (unint64_t *)&qword_100C040E8);
  }
  return result;
}

unint64_t sub_10076FEA8()
{
  unint64_t result;

  result = qword_100C040F0;
  if (!qword_100C040F0)
  {
    result = swift_getWitnessTable(&unk_1009C70B8, &_s10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_100C040F0);
  }
  return result;
}

unint64_t sub_10076FEE8()
{
  unint64_t result;

  result = qword_100C040F8;
  if (!qword_100C040F8)
  {
    result = swift_getWitnessTable(&unk_1009C7158, &_s10CodingTypeON_0);
    atomic_store(result, (unint64_t *)&qword_100C040F8);
  }
  return result;
}

uint64_t sub_10076FF24@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_10076E034();
  if (!v1)
    *a1 = result & 1;
  return result;
}

#error "10076FF5C: call analysis failed (funcsize=6)"

void sub_10076FF68()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  _QWORD v29[3];
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  _QWORD v33[3];
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;

  sub_1000986AC();
  v2 = v0;
  v4 = v3;
  sub_1000BA294(&qword_100BC5F78);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_10009E540();
  v6 = sub_1000BA294(&qword_100BC31F0);
  inited = swift_initStackObject(v6, &v37);
  *(_OWORD *)(inited + 16) = xmmword_10098BCC0;
  *(_QWORD *)(inited + 32) = 0x567972616D697270;
  *(_QWORD *)(inited + 40) = 0xEB00000000776569;
  sub_1007703B0(*v0, (uint64_t)v35);
  v8 = v36;
  sub_1000DB418(v35, v36);
  *(_QWORD *)(inited + 72) = v8;
  sub_10009D808();
  (*(void (**)(void))(*(_QWORD *)(v8 - 8) + 16))();
  strcpy((char *)(inited + 80), "secondaryView");
  *(_WORD *)(inited + 94) = -4864;
  v9 = (int *)sub_1001103B4();
  sub_1007704A0();
  v10 = v34;
  sub_1000DB418(v33, v34);
  *(_QWORD *)(inited + 120) = v10;
  sub_100077A84((_QWORD *)(inited + 96));
  sub_1000CFA28(v11);
  *(_QWORD *)(inited + 128) = 0xD000000000000014;
  *(_QWORD *)(inited + 136) = 0x8000000100A12D20;
  sub_1007706E4(*((_BYTE *)v2 + v9[6]), (uint64_t)v31);
  v12 = v32;
  sub_1000DB418(v31, v32);
  *(_QWORD *)(inited + 168) = v12;
  sub_10009D808();
  (*(void (**)(void))(*(_QWORD *)(v12 - 8) + 16))();
  strcpy((char *)(inited + 176), "preferredView");
  *(_WORD *)(inited + 190) = -4864;
  sub_10076B570();
  sub_100770810(v13, (uint64_t)v29);
  v14 = v30;
  sub_1000DB418(v29, v30);
  *(_QWORD *)(inited + 216) = v14;
  sub_100077A84((_QWORD *)(inited + 192));
  sub_1000CFA28(v15);
  *(_QWORD *)(inited + 224) = 0x6956686372616573;
  *(_QWORD *)(inited + 232) = 0xEA00000000007765;
  sub_10003773C((uint64_t)v2 + v9[8], v1, &qword_100BC5F78);
  v16 = sub_1000CE64C();
  sub_100088FC8(v1, 1, v16);
  if (v17)
  {
    sub_100021A14(v1, &qword_100BC5F78);
    v27 = 0u;
    v28 = 0u;
LABEL_6:
    *(_QWORD *)(inited + 264) = &type metadata for String;
    *(_QWORD *)(inited + 240) = 7104878;
    *(_QWORD *)(inited + 248) = 0xE300000000000000;
    sub_100021A14((uint64_t)&v27, &qword_100C0B800);
    goto LABEL_7;
  }
  sub_100269470();
  sub_1000998DC(v18, type metadata accessor for SearchViewState);
  v19 = v26;
  sub_1000DB418(v25, v26);
  *((_QWORD *)&v28 + 1) = v19;
  sub_100077A84(&v27);
  (*(void (**)(void))(*(_QWORD *)(v19 - 8) + 16))();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v25);
  if (!*((_QWORD *)&v28 + 1))
    goto LABEL_6;
  sub_10011E834(&v27, (_OWORD *)(inited + 240));
LABEL_7:
  strcpy((char *)(inited + 272), "displayMetrics");
  *(_BYTE *)(inited + 287) = -18;
  *(_QWORD *)(inited + 312) = sub_10009E908();
  sub_10009D808();
  sub_1000E7D68(v20);
  *(_QWORD *)(inited + 320) = 0xD000000000000014;
  *(_QWORD *)(inited + 328) = 0x80000001009F0840;
  *(_QWORD *)(inited + 360) = sub_10009E654();
  sub_10009D808();
  sub_1000E7D68(v21);
  *(_QWORD *)(inited + 368) = 0xD000000000000010;
  *(_QWORD *)(inited + 376) = 0x80000001009F0860;
  v22 = *((_BYTE *)v2 + v9[11]);
  *(_QWORD *)(inited + 408) = &type metadata for Bool;
  *(_BYTE *)(inited + 384) = v22;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v29);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v31);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v33);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v35);
  v23 = Dictionary.init(dictionaryLiteral:)(inited);
  v4[3] = sub_1000BA294(&qword_100C042E0);
  sub_10029E5F4(&qword_100C042E8, &qword_100C042E0);
  v4[4] = v24;
  sub_100077A84(v4);
  ShortDescription.init(name:_:)(0x7461745377656956, 0xE900000000000065, v23, v9);
  sub_100098640();
}

uint64_t sub_1007703B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v4 = sub_1000BA294(&qword_100BC31F0);
  inited = swift_initStackObject(v4, &v9);
  *(_OWORD *)(inited + 16) = xmmword_10097CA50;
  *(_QWORD *)(inited + 32) = 1953720684;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  *(_QWORD *)(inited + 72) = &unk_100B62BC8;
  *(_QWORD *)(inited + 48) = a1;
  sub_10009D4E0();
  v6 = Dictionary.init(dictionaryLiteral:)(inited);
  *(_QWORD *)(a2 + 24) = sub_100079FD4();
  sub_1000ED4B0(&qword_100C04328);
  *(_QWORD *)(a2 + 32) = v7;
  sub_10009D808();
  return ShortDescription.init(name:_:)(0xD00000000000001ALL, 0x8000000100A12DB0, v6, &unk_100B8F568);
}

void sub_1007704A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  sub_1000986AC();
  v2 = v0;
  v4 = v3;
  v5 = sub_1000FC700();
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100099720();
  sub_1000B42B0();
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_1000BA294(&qword_100C04310);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_100099864();
  sub_10009F7F4(v2, (uint64_t)v9);
  if (sub_10009F7EC((uint64_t)v9) == 1)
  {
    sub_10007C77C((uint64_t)v9, v1, type metadata accessor for VFXTestViewState);
    v12 = sub_1000BA294(&qword_100BC31F0);
    inited = swift_initStackObject(v12, &v25);
    *(_OWORD *)(inited + 16) = xmmword_10097CA50;
    *(_QWORD *)(inited + 32) = 0x74736554786676;
    *(_QWORD *)(inited + 40) = 0xE700000000000000;
    *(_QWORD *)(inited + 72) = v5;
    sub_100077A84((_QWORD *)(inited + 48));
    sub_100095B78(v1, v14, type metadata accessor for VFXTestViewState);
    v15 = Dictionary.init(dictionaryLiteral:)(inited);
    sub_1000DA7C8(v15, (uint64_t)"ViewState.SecondaryViewState");
    v16 = sub_100095080();
    sub_1000215BC(v16, v17);
  }
  else
  {
    v18 = *v9;
    v19 = sub_1000BA294(&qword_100BC31F0);
    v20 = swift_initStackObject(v19, &v24);
    *(_OWORD *)(v20 + 16) = xmmword_10097CA50;
    strcpy((char *)(v20 + 32), "locationViewer");
    *(_BYTE *)(v20 + 47) = -18;
    *(_QWORD *)(v20 + 72) = &unk_100B63280;
    *(_QWORD *)(v20 + 48) = v18;
    swift_retain();
    v21 = Dictionary.init(dictionaryLiteral:)(v20);
    sub_1000DA7C8(v21, (uint64_t)"ViewState.SecondaryViewState");
    swift_release();
  }
  v4[3] = v10;
  sub_10029E5F4(&qword_100C04318, &qword_100C04310);
  v4[4] = v22;
  sub_100077A84(v4);
  (*(void (**)(void))(v11 + 32))();
  sub_100098640();
}

void sub_1007706E4(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  sub_100079FD4();
  sub_1000B25F0();
  __chkstk_darwin(v5);
  sub_100079FBC();
  v6 = sub_1000BA294(&qword_100BC31F0);
  v7 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v8 = &v16;
  else
    v8 = &v15;
  if ((a1 & 1) != 0)
    v9 = 0x6552686372616573;
  else
    v9 = 1701736302;
  if (v7)
    v10 = 0xE400000000000000;
  else
    v10 = 0xED000073746C7573;
  inited = swift_initStackObject(v6, v8);
  *(_OWORD *)(inited + 16) = xmmword_10097CA50;
  *(_QWORD *)(inited + 32) = 1701869940;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = v10;
  v12 = Dictionary.init(dictionaryLiteral:)(inited);
  ShortDescription.init(name:_:)(0xD000000000000023, 0x8000000100A12D60, v12, &unk_100B8F4D8);
  *(_QWORD *)(a2 + 24) = v2;
  sub_1000ED4B0(&qword_100C04308);
  *(_QWORD *)(a2 + 32) = v13;
  sub_10009D808();
  sub_1000F4548(v14);
  sub_10009D300();
}

void sub_100770810(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  sub_100079FD4();
  sub_1000B25F0();
  __chkstk_darwin(v5);
  sub_100079FBC();
  v6 = sub_1000BA294(&qword_100BC31F0);
  v7 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v8 = &v16;
  else
    v8 = &v15;
  if ((a1 & 1) != 0)
    v9 = 0x7261646E6F636573;
  else
    v9 = 0x7972616D697270;
  if (v7)
    v10 = 0xE700000000000000;
  else
    v10 = 0xE900000000000079;
  inited = swift_initStackObject(v6, v8);
  *(_OWORD *)(inited + 16) = xmmword_10097CA50;
  *(_QWORD *)(inited + 32) = 1701869940;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = v10;
  v12 = Dictionary.init(dictionaryLiteral:)(inited);
  ShortDescription.init(name:_:)(0xD000000000000017, 0x8000000100A12D40, v12, &unk_100B8F448);
  *(_QWORD *)(a2 + 24) = v2;
  sub_1000ED4B0(&qword_100C042F8);
  *(_QWORD *)(a2 + 32) = v13;
  sub_10009D808();
  sub_1000F4548(v14);
  sub_10009D300();
}

uint64_t sub_100770944(uint64_t a1)
{
  uint64_t v2;

  sub_100086DA4(&qword_100C04330, type metadata accessor for ViewState, (uint64_t)&unk_1009C7448);
  return ShortDescribable.description.getter(a1, v2);
}

uint64_t sub_100770984@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1007703B0(*v1, a1);
}

uint64_t sub_10077098C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100771330();
  return ShortDescribable.description.getter(a1, v2);
}

uint64_t sub_1007709B8(uint64_t a1)
{
  uint64_t v2;

  sub_100086DA4(&qword_100C04340, type metadata accessor for ViewState.SecondaryViewState, (uint64_t)&unk_1009C7398);
  return ShortDescribable.description.getter(a1, v2);
}

void sub_1007709F8(uint64_t a1@<X8>)
{
  char *v1;

  sub_1007706E4(*v1, a1);
}

uint64_t sub_100770A00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10077136C();
  return ShortDescribable.description.getter(a1, v2);
}

void sub_100770A28(uint64_t a1@<X8>)
{
  char *v1;

  sub_100770810(*v1, a1);
}

uint64_t sub_100770A30(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007713A8();
  return ShortDescribable.description.getter(a1, v2);
}

void sub_100770A58(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  sub_1006B1F84(a1);
  if (!v2)
    *a2 = v4;
}

void sub_100770A80(uint64_t a1)
{
  sub_1006B1D58(a1);
}

void sub_100770A98()
{
  sub_1006B202C();
}

void sub_100770AAC()
{
  sub_1006B1DCC();
}

unint64_t sub_100770AC4()
{
  unint64_t result;

  result = qword_100C04100;
  if (!qword_100C04100)
  {
    result = swift_getWitnessTable(&unk_1009C72C0, &unk_100B8F448);
    atomic_store(result, (unint64_t *)&qword_100C04100);
  }
  return result;
}

unint64_t sub_100770B04()
{
  unint64_t result;

  result = qword_100C04108;
  if (!qword_100C04108)
  {
    result = swift_getWitnessTable(&unk_1009C7318, &unk_100B8F4D8);
    atomic_store(result, (unint64_t *)&qword_100C04108);
  }
  return result;
}

void sub_100770B40()
{
  sub_100086DA4(&qword_100C04110, type metadata accessor for ViewState.SecondaryViewState, (uint64_t)&unk_1009C7370);
}

unint64_t sub_100770B70()
{
  unint64_t result;

  result = qword_100C04118;
  if (!qword_100C04118)
  {
    result = swift_getWitnessTable(&unk_1009C73C8, &unk_100B8F568);
    atomic_store(result, (unint64_t *)&qword_100C04118);
  }
  return result;
}

void sub_100770BAC()
{
  sub_100086DA4((unint64_t *)&qword_100BE4D68, type metadata accessor for ViewState, (uint64_t)&unk_1009C7420);
}

unint64_t sub_100770BDC()
{
  unint64_t result;

  result = qword_100C04120;
  if (!qword_100C04120)
  {
    result = swift_getWitnessTable(&unk_1009C6FF0, &_s10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_100C04120);
  }
  return result;
}

unint64_t sub_100770C1C()
{
  unint64_t result;

  result = qword_100C04128;
  if (!qword_100C04128)
  {
    result = swift_getWitnessTable(&unk_1009C7018, &_s10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_100C04128);
  }
  return result;
}

unint64_t sub_100770C5C()
{
  unint64_t result;

  result = qword_100C04130;
  if (!qword_100C04130)
  {
    result = swift_getWitnessTable(&unk_1009C6E60, &_s10CodingKeysON_1);
    atomic_store(result, (unint64_t *)&qword_100C04130);
  }
  return result;
}

unint64_t sub_100770C9C()
{
  unint64_t result;

  result = qword_100C04138;
  if (!qword_100C04138)
  {
    result = swift_getWitnessTable(&unk_1009C6E88, &_s10CodingKeysON_1);
    atomic_store(result, (unint64_t *)&qword_100C04138);
  }
  return result;
}

unint64_t sub_100770CD8()
{
  unint64_t result;

  result = qword_100C04140;
  if (!qword_100C04140)
  {
    result = swift_getWitnessTable(&unk_1009C6F50, &_s10CodingTypeON_1);
    atomic_store(result, (unint64_t *)&qword_100C04140);
  }
  return result;
}

unint64_t sub_100770D14()
{
  unint64_t result;

  result = qword_100C04148;
  if (!qword_100C04148)
  {
    result = swift_getWitnessTable(&unk_1009C70E0, &_s10CodingTypeON_0);
    atomic_store(result, (unint64_t *)&qword_100C04148);
  }
  return result;
}

unint64_t sub_100770D50()
{
  unint64_t result;

  result = qword_100C04168;
  if (!qword_100C04168)
  {
    result = swift_getWitnessTable(&unk_1009C82DC, &type metadata for ViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C04168);
  }
  return result;
}

unint64_t sub_100770D8C()
{
  unint64_t result;

  result = qword_100C04170;
  if (!qword_100C04170)
  {
    result = swift_getWitnessTable(&unk_1009C7590, &unk_100B8F568);
    atomic_store(result, (unint64_t *)&qword_100C04170);
  }
  return result;
}

unint64_t sub_100770DC8()
{
  unint64_t result;

  result = qword_100C04180;
  if (!qword_100C04180)
  {
    result = swift_getWitnessTable(&unk_1009C74F0, &unk_100B8F4D8);
    atomic_store(result, (unint64_t *)&qword_100C04180);
  }
  return result;
}

unint64_t sub_100770E04()
{
  unint64_t result;

  result = qword_100C04188;
  if (!qword_100C04188)
  {
    result = swift_getWitnessTable(&unk_1009C74A0, &unk_100B8F448);
    atomic_store(result, (unint64_t *)&qword_100C04188);
  }
  return result;
}

unint64_t sub_100770E40()
{
  unint64_t result;

  result = qword_100C041B0;
  if (!qword_100C041B0)
  {
    result = swift_getWitnessTable(&unk_1009C7568, &unk_100B8F568);
    atomic_store(result, (unint64_t *)&qword_100C041B0);
  }
  return result;
}

unint64_t sub_100770E7C()
{
  unint64_t result;

  result = qword_100C041C0;
  if (!qword_100C041C0)
  {
    result = swift_getWitnessTable(&unk_1009C74C8, &unk_100B8F4D8);
    atomic_store(result, (unint64_t *)&qword_100C041C0);
  }
  return result;
}

unint64_t sub_100770EB8()
{
  unint64_t result;

  result = qword_100C041C8;
  if (!qword_100C041C8)
  {
    result = swift_getWitnessTable(&unk_1009C7478, &unk_100B8F448);
    atomic_store(result, (unint64_t *)&qword_100C041C8);
  }
  return result;
}

unint64_t sub_100770EF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C041D0;
  if (!qword_100C041D0)
  {
    v1 = sub_100075EB0(&qword_100BC5F78);
    sub_100086DA4(&qword_100C041D8, type metadata accessor for SearchViewState, (uint64_t)&unk_10098CBE0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100C041D0);
  }
  return result;
}

unint64_t sub_100770F70()
{
  unint64_t result;

  result = qword_100C041F8;
  if (!qword_100C041F8)
  {
    result = swift_getWitnessTable(&unk_1009C828C, &type metadata for ViewState.PrimaryViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C041F8);
  }
  return result;
}

unint64_t sub_100770FAC()
{
  unint64_t result;

  result = qword_100C04200;
  if (!qword_100C04200)
  {
    result = swift_getWitnessTable(&unk_1009C8264, &type metadata for ViewState.PrimaryViewState.CodingType);
    atomic_store(result, (unint64_t *)&qword_100C04200);
  }
  return result;
}

unint64_t sub_100770FE8()
{
  unint64_t result;

  result = qword_100C04208;
  if (!qword_100C04208)
  {
    result = swift_getWitnessTable(&unk_100986738, &unk_100B62BC8);
    atomic_store(result, (unint64_t *)&qword_100C04208);
  }
  return result;
}

unint64_t sub_100771024()
{
  unint64_t result;

  result = qword_100C04218;
  if (!qword_100C04218)
  {
    result = swift_getWitnessTable(&unk_1009C823C, &type metadata for ViewState.PrimaryViewState.CodingType);
    atomic_store(result, (unint64_t *)&qword_100C04218);
  }
  return result;
}

unint64_t sub_100771060()
{
  unint64_t result;

  result = qword_100C04220;
  if (!qword_100C04220)
  {
    result = swift_getWitnessTable(&unk_100986710, &unk_100B62BC8);
    atomic_store(result, (unint64_t *)&qword_100C04220);
  }
  return result;
}

unint64_t sub_10077109C()
{
  unint64_t result;

  result = qword_100C04230;
  if (!qword_100C04230)
  {
    result = swift_getWitnessTable(&unk_1009C81EC, &type metadata for ViewState.SecondaryViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C04230);
  }
  return result;
}

unint64_t sub_1007710D8()
{
  unint64_t result;

  result = qword_100C04238;
  if (!qword_100C04238)
  {
    result = swift_getWitnessTable(&unk_1009C81C4, &type metadata for ViewState.SecondaryViewState.CodingType);
    atomic_store(result, (unint64_t *)&qword_100C04238);
  }
  return result;
}

unint64_t sub_100771114()
{
  unint64_t result;

  result = qword_100C04248;
  if (!qword_100C04248)
  {
    result = swift_getWitnessTable(&unk_1009866E8, &unk_100B63280);
    atomic_store(result, (unint64_t *)&qword_100C04248);
  }
  return result;
}

unint64_t sub_100771150()
{
  unint64_t result;

  result = qword_100C04258;
  if (!qword_100C04258)
  {
    result = swift_getWitnessTable(&unk_1009C819C, &type metadata for ViewState.SecondaryViewState.CodingType);
    atomic_store(result, (unint64_t *)&qword_100C04258);
  }
  return result;
}

unint64_t sub_10077118C()
{
  unint64_t result;

  result = qword_100C04268;
  if (!qword_100C04268)
  {
    result = swift_getWitnessTable(&unk_1009866C0, &unk_100B63280);
    atomic_store(result, (unint64_t *)&qword_100C04268);
  }
  return result;
}

unint64_t sub_1007711C8()
{
  unint64_t result;

  result = qword_100C04278;
  if (!qword_100C04278)
  {
    result = swift_getWitnessTable(&unk_1009C814C, &type metadata for ViewState.SecondaryViewOverlayState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C04278);
  }
  return result;
}

unint64_t sub_100771204()
{
  unint64_t result;

  result = qword_100C04280;
  if (!qword_100C04280)
  {
    result = swift_getWitnessTable(&unk_1009C8124, &type metadata for ViewState.SecondaryViewOverlayState.CodingType);
    atomic_store(result, (unint64_t *)&qword_100C04280);
  }
  return result;
}

unint64_t sub_100771240()
{
  unint64_t result;

  result = qword_100C04290;
  if (!qword_100C04290)
  {
    result = swift_getWitnessTable(&unk_1009C80FC, &type metadata for ViewState.SecondaryViewOverlayState.CodingType);
    atomic_store(result, (unint64_t *)&qword_100C04290);
  }
  return result;
}

unint64_t sub_10077127C()
{
  unint64_t result;

  result = qword_100C042B0;
  if (!qword_100C042B0)
  {
    result = swift_getWitnessTable(&unk_1009C80AC, &type metadata for ViewState.PreferredView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C042B0);
  }
  return result;
}

unint64_t sub_1007712B8()
{
  unint64_t result;

  result = qword_100C042B8;
  if (!qword_100C042B8)
  {
    result = swift_getWitnessTable(&unk_1009C805C, &type metadata for ViewState.PreferredView.SecondaryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C042B8);
  }
  return result;
}

unint64_t sub_1007712F4()
{
  unint64_t result;

  result = qword_100C042C0;
  if (!qword_100C042C0)
  {
    result = swift_getWitnessTable(&unk_1009C800C, &type metadata for ViewState.PreferredView.PrimaryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C042C0);
  }
  return result;
}

unint64_t sub_100771330()
{
  unint64_t result;

  result = qword_100C04338;
  if (!qword_100C04338)
  {
    result = swift_getWitnessTable(&unk_1009C73F0, &unk_100B8F568);
    atomic_store(result, (unint64_t *)&qword_100C04338);
  }
  return result;
}

unint64_t sub_10077136C()
{
  unint64_t result;

  result = qword_100C04348;
  if (!qword_100C04348)
  {
    result = swift_getWitnessTable(&unk_1009C7340, &unk_100B8F4D8);
    atomic_store(result, (unint64_t *)&qword_100C04348);
  }
  return result;
}

unint64_t sub_1007713A8()
{
  unint64_t result;

  result = qword_100C04350;
  if (!qword_100C04350)
  {
    result = swift_getWitnessTable(&unk_1009C72E8, &unk_100B8F448);
    atomic_store(result, (unint64_t *)&qword_100C04350);
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewState.PreferredView.CodingKeys()
{
  return &type metadata for ViewState.PreferredView.CodingKeys;
}

ValueMetadata *type metadata accessor for ViewState.PreferredView.PrimaryCodingKeys()
{
  return &type metadata for ViewState.PreferredView.PrimaryCodingKeys;
}

ValueMetadata *type metadata accessor for ViewState.PreferredView.SecondaryCodingKeys()
{
  return &type metadata for ViewState.PreferredView.SecondaryCodingKeys;
}

ValueMetadata *type metadata accessor for ViewState.SecondaryViewOverlayState.CodingType()
{
  return &type metadata for ViewState.SecondaryViewOverlayState.CodingType;
}

ValueMetadata *type metadata accessor for ViewState.SecondaryViewOverlayState.CodingKeys()
{
  return &type metadata for ViewState.SecondaryViewOverlayState.CodingKeys;
}

ValueMetadata *type metadata accessor for ViewState.SecondaryViewState.CodingType()
{
  return &type metadata for ViewState.SecondaryViewState.CodingType;
}

uint64_t _s10CodingTypeOwst_0_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100771494 + 4 * byte_1009C6D29[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1007714C8 + 4 * byte_1009C6D24[v4]))();
}

uint64_t sub_1007714C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007714D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1007714D8);
  return result;
}

uint64_t sub_1007714E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1007714ECLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1007714F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007714F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ViewState.SecondaryViewState.CodingKeys()
{
  return &type metadata for ViewState.SecondaryViewState.CodingKeys;
}

uint64_t _s10CodingKeysOwst_0_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100771554 + 4 * byte_1009C6D2E[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100771574 + 4 * byte_1009C6D33[v4]))();
}

_BYTE *sub_100771554(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100771574(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10077157C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100771584(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10077158C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100771594(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ViewState.PrimaryViewState.CodingType()
{
  return &type metadata for ViewState.PrimaryViewState.CodingType;
}

ValueMetadata *type metadata accessor for ViewState.PrimaryViewState.CodingKeys()
{
  return &type metadata for ViewState.PrimaryViewState.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ViewState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_10077160C + 4 * byte_1009C6D3D[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100771640 + 4 * byte_1009C6D38[v4]))();
}

uint64_t sub_100771640(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100771648(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100771650);
  return result;
}

uint64_t sub_10077165C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100771664);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_100771668(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100771670(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ViewState.CodingKeys()
{
  return &type metadata for ViewState.CodingKeys;
}

void type metadata accessor for ViewState.PreferredView()
{
  sub_100098884();
}

uint64_t _s7Weather9ViewStateV13PreferredViewO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1007716E4 + 4 * byte_1009C6D47[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100771718 + 4 * byte_1009C6D42[v4]))();
}

uint64_t sub_100771718(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100771720(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100771728);
  return result;
}

uint64_t sub_100771734(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10077173CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100771740(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100771748(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ViewState.SecondaryViewOverlayState()
{
  sub_100098884();
}

uint64_t *sub_100771760(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *a1 = *a2;
  swift_retain(v3);
  return a1;
}

uint64_t sub_10077178C(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t *sub_100771794(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *a1;
  *a1 = *a2;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t *sub_1007717CC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  swift_release(v3);
  return a1;
}

uint64_t sub_1007717FC(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 8))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10077183C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 8) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ViewState.PrimaryViewState()
{
  sub_100098884();
}

unint64_t sub_100771888()
{
  unint64_t result;

  result = qword_100C04358;
  if (!qword_100C04358)
  {
    result = swift_getWitnessTable(&unk_1009C7630, &unk_100B8F4D8);
    atomic_store(result, (unint64_t *)&qword_100C04358);
  }
  return result;
}

unint64_t sub_1007718C8()
{
  unint64_t result;

  result = qword_100C04360;
  if (!qword_100C04360)
  {
    result = swift_getWitnessTable(&unk_1009C7608, &unk_100B8F448);
    atomic_store(result, (unint64_t *)&qword_100C04360);
  }
  return result;
}

unint64_t sub_100771908()
{
  unint64_t result;

  result = qword_100C04368;
  if (!qword_100C04368)
  {
    result = swift_getWitnessTable(&unk_1009C79DC, &type metadata for ViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C04368);
  }
  return result;
}

unint64_t sub_100771948()
{
  unint64_t result;

  result = qword_100C04370;
  if (!qword_100C04370)
  {
    result = swift_getWitnessTable(&unk_1009C7ACC, &type metadata for ViewState.PrimaryViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C04370);
  }
  return result;
}

unint64_t sub_100771988()
{
  unint64_t result;

  result = qword_100C04378;
  if (!qword_100C04378)
  {
    result = swift_getWitnessTable(&unk_1009C7B6C, &type metadata for ViewState.PrimaryViewState.CodingType);
    atomic_store(result, (unint64_t *)&qword_100C04378);
  }
  return result;
}

unint64_t sub_1007719C8()
{
  unint64_t result;

  result = qword_100C04380;
  if (!qword_100C04380)
  {
    result = swift_getWitnessTable(&unk_1009C7C5C, &type metadata for ViewState.SecondaryViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C04380);
  }
  return result;
}

unint64_t sub_100771A08()
{
  unint64_t result;

  result = qword_100C04388;
  if (!qword_100C04388)
  {
    result = swift_getWitnessTable(&unk_1009C7CFC, &type metadata for ViewState.SecondaryViewState.CodingType);
    atomic_store(result, (unint64_t *)&qword_100C04388);
  }
  return result;
}

unint64_t sub_100771A48()
{
  unint64_t result;

  result = qword_100C04390;
  if (!qword_100C04390)
  {
    result = swift_getWitnessTable(&unk_1009C7DEC, &type metadata for ViewState.SecondaryViewOverlayState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C04390);
  }
  return result;
}

unint64_t sub_100771A88()
{
  unint64_t result;

  result = qword_100C04398;
  if (!qword_100C04398)
  {
    result = swift_getWitnessTable(&unk_1009C7E8C, &type metadata for ViewState.SecondaryViewOverlayState.CodingType);
    atomic_store(result, (unint64_t *)&qword_100C04398);
  }
  return result;
}

unint64_t sub_100771AC8()
{
  unint64_t result;

  result = qword_100C043A0;
  if (!qword_100C043A0)
  {
    result = swift_getWitnessTable(&unk_1009C7FE4, &type metadata for ViewState.PreferredView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C043A0);
  }
  return result;
}

unint64_t sub_100771B08()
{
  unint64_t result;

  result = qword_100C043A8;
  if (!qword_100C043A8)
  {
    result = swift_getWitnessTable(&unk_1009C7F04, &type metadata for ViewState.PreferredView.PrimaryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C043A8);
  }
  return result;
}

unint64_t sub_100771B48()
{
  unint64_t result;

  result = qword_100C043B0;
  if (!qword_100C043B0)
  {
    result = swift_getWitnessTable(&unk_1009C7F2C, &type metadata for ViewState.PreferredView.PrimaryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C043B0);
  }
  return result;
}

unint64_t sub_100771B88()
{
  unint64_t result;

  result = qword_100C043B8;
  if (!qword_100C043B8)
  {
    result = swift_getWitnessTable(&unk_1009C7EB4, &type metadata for ViewState.PreferredView.SecondaryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C043B8);
  }
  return result;
}

unint64_t sub_100771BC8()
{
  unint64_t result;

  result = qword_100C043C0;
  if (!qword_100C043C0)
  {
    result = swift_getWitnessTable(&unk_1009C7EDC, &type metadata for ViewState.PreferredView.SecondaryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C043C0);
  }
  return result;
}

unint64_t sub_100771C08()
{
  unint64_t result;

  result = qword_100C043C8;
  if (!qword_100C043C8)
  {
    result = swift_getWitnessTable(&unk_1009C7F54, &type metadata for ViewState.PreferredView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C043C8);
  }
  return result;
}

unint64_t sub_100771C48()
{
  unint64_t result;

  result = qword_100C043D0;
  if (!qword_100C043D0)
  {
    result = swift_getWitnessTable(&unk_1009C7F7C, &type metadata for ViewState.PreferredView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C043D0);
  }
  return result;
}

unint64_t sub_100771C88()
{
  unint64_t result;

  result = qword_100C043D8;
  if (!qword_100C043D8)
  {
    result = swift_getWitnessTable(&unk_1009C7D24, &type metadata for ViewState.SecondaryViewOverlayState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C043D8);
  }
  return result;
}

unint64_t sub_100771CC8()
{
  unint64_t result;

  result = qword_100C043E0;
  if (!qword_100C043E0)
  {
    result = swift_getWitnessTable(&unk_1009C7D4C, &type metadata for ViewState.SecondaryViewOverlayState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C043E0);
  }
  return result;
}

unint64_t sub_100771D08()
{
  unint64_t result;

  result = qword_100C043E8;
  if (!qword_100C043E8)
  {
    result = swift_getWitnessTable(&unk_1009C7B94, &type metadata for ViewState.SecondaryViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C043E8);
  }
  return result;
}

unint64_t sub_100771D48()
{
  unint64_t result;

  result = qword_100C043F0;
  if (!qword_100C043F0)
  {
    result = swift_getWitnessTable(&unk_1009C7BBC, &type metadata for ViewState.SecondaryViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C043F0);
  }
  return result;
}

unint64_t sub_100771D88()
{
  unint64_t result;

  result = qword_100C043F8;
  if (!qword_100C043F8)
  {
    result = swift_getWitnessTable(&unk_1009C7A04, &type metadata for ViewState.PrimaryViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C043F8);
  }
  return result;
}

unint64_t sub_100771DC8()
{
  unint64_t result;

  result = qword_100C04400;
  if (!qword_100C04400)
  {
    result = swift_getWitnessTable(&unk_1009C7A2C, &type metadata for ViewState.PrimaryViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C04400);
  }
  return result;
}

unint64_t sub_100771E08()
{
  unint64_t result;

  result = qword_100C04408;
  if (!qword_100C04408)
  {
    result = swift_getWitnessTable(&unk_1009C7914, &type metadata for ViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C04408);
  }
  return result;
}

unint64_t sub_100771E48()
{
  unint64_t result;

  result = qword_100C04410;
  if (!qword_100C04410)
  {
    result = swift_getWitnessTable(&unk_1009C793C, &type metadata for ViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C04410);
  }
  return result;
}

unint64_t sub_100771E84()
{
  unint64_t result;

  result = qword_100C04418;
  if (!qword_100C04418)
  {
    result = swift_getWitnessTable(&unk_1009C7AF4, &type metadata for ViewState.PrimaryViewState.CodingType);
    atomic_store(result, (unint64_t *)&qword_100C04418);
  }
  return result;
}

unint64_t sub_100771EC0()
{
  unint64_t result;

  result = qword_100C04420;
  if (!qword_100C04420)
  {
    result = swift_getWitnessTable(&unk_1009C7C84, &type metadata for ViewState.SecondaryViewState.CodingType);
    atomic_store(result, (unint64_t *)&qword_100C04420);
  }
  return result;
}

unint64_t sub_100771EFC()
{
  unint64_t result;

  result = qword_100C04428;
  if (!qword_100C04428)
  {
    result = swift_getWitnessTable(&unk_1009C7E14, &type metadata for ViewState.SecondaryViewOverlayState.CodingType);
    atomic_store(result, (unint64_t *)&qword_100C04428);
  }
  return result;
}

uint64_t *sub_100771F3C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  int *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t, __n128);
  __n128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  __n128 v44;
  uint64_t *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  __n128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  void (*v81)(char *, char *, uint64_t, __n128);
  __n128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v95;
  char *v96;
  void (*v97)(char *, char *, uint64_t);
  uint64_t v98;
  void (*v99)(char *, char *, uint64_t, __n128);
  uint64_t v100;
  uint64_t *v101;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v59 = *a2;
    *a1 = *a2;
    v45 = (uint64_t *)(v59 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    v10 = a3[7];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    a1[4] = a2[4];
    a1[5] = v9;
    v13 = type metadata accessor for Date(0);
    v14 = *(void (**)(_QWORD, _QWORD, _QWORD, __n128))(*(_QWORD *)(v13 - 8) + 16);
    v98 = v13;
    v99 = (void (*)(char *, char *, uint64_t, __n128))v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15 = swift_bridgeObjectRetain();
    v14(v11, v12, v13, v15);
    ((void (*)(char *, char *, uint64_t))v14)((char *)a1 + a3[8], (char *)a2 + a3[8], v13);
    ((void (*)(char *, char *, uint64_t))v14)((char *)a1 + a3[9], (char *)a2 + a3[9], v13);
    v16 = a3[10];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[11];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = type metadata accessor for AttributedString(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[13];
    *(uint64_t *)((char *)a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    v101 = a1;
    v25 = (uint64_t *)((char *)a1 + v24);
    v26 = (char *)a2 + v24;
    *v25 = *(uint64_t *)((char *)a2 + v24);
    v27 = (int *)_s14ChartViewModelVMa(0);
    v28 = v27[5];
    v96 = (char *)v25 + v28;
    v29 = &v26[v28];
    v30 = type metadata accessor for DetailChartDataElement(0);
    v31 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v30 - 8) + 16);
    swift_bridgeObjectRetain();
    v32 = swift_bridgeObjectRetain();
    v31(v96, v29, v30, v32);
    v33 = v27[6];
    v34 = (char *)v25 + v33;
    v35 = &v26[v33];
    v36 = type metadata accessor for Location(0);
    v97 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16);
    v97(v34, v35, v36);
    v37 = v27[7];
    v38 = (_QWORD *)((char *)v25 + v37);
    v39 = &v26[v37];
    v40 = *(_QWORD *)v39;
    v41 = *((_QWORD *)v39 + 1);
    *v38 = v40;
    v38[1] = v41;
    *(_QWORD *)((char *)v25 + v27[8]) = *(_QWORD *)&v26[v27[8]];
    *(_QWORD *)((char *)v25 + v27[9]) = *(_QWORD *)&v26[v27[9]];
    *(_QWORD *)((char *)v25 + v27[10]) = *(_QWORD *)&v26[v27[10]];
    v42 = v27[11];
    v43 = (char *)v25 + v42;
    v95 = &v26[v42];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v44 = swift_bridgeObjectRetain();
    v99(v43, v95, v98, v44);
    *(_QWORD *)((char *)v25 + v27[12]) = *(_QWORD *)&v26[v27[12]];
    v45 = v101;
    v46 = a3[14];
    v47 = (char *)v101 + v46;
    v48 = (char *)a2 + v46;
    v49 = swift_bridgeObjectRetain();
    ((void (*)(char *, char *, uint64_t, __n128))v97)(v47, v48, v36, v49);
    v50 = a3[15];
    v51 = (char *)v101 + v50;
    v52 = (char *)a2 + v50;
    v53 = type metadata accessor for SunEvents(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v51, v52, v53);
    *(uint64_t *)((char *)v101 + a3[16]) = *(uint64_t *)((char *)a2 + a3[16]);
    v54 = a3[18];
    v55 = (uint64_t *)((char *)v101 + v54);
    v56 = (uint64_t *)((char *)a2 + v54);
    v57 = type metadata accessor for DetailComponentContainerViewModel(0);
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v56, 1, v57))
    {
      v58 = sub_1000BA294(&qword_100BC68A0);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      v60 = v56[1];
      if (v60)
      {
        *v55 = *v56;
        v55[1] = v60;
        v61 = v56[3];
        v55[2] = v56[2];
        v55[3] = v61;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v62 = *((_OWORD *)v56 + 1);
        *(_OWORD *)v55 = *(_OWORD *)v56;
        *((_OWORD *)v55 + 1) = v62;
      }
      v63 = *(int *)(v57 + 20);
      v64 = (_QWORD *)((char *)v55 + v63);
      v65 = (_QWORD *)((char *)v56 + v63);
      v66 = type metadata accessor for NewsArticleComponentViewModel(0);
      if (swift_getEnumCaseMultiPayload(v65) == 1)
      {
        v100 = v66;
        v67 = v65[1];
        *v64 = *v65;
        v64[1] = v67;
        v68 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
        v69 = v68[5];
        v70 = (char *)v64 + v69;
        v71 = (char *)v65 + v69;
        v72 = type metadata accessor for URL(0);
        swift_bridgeObjectRetain();
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v71, 1, v72))
        {
          v73 = sub_1000BA294(&qword_100BD4280);
          memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 16))(v70, v71, v72);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v70, 0, 1, v72);
        }
        v74 = v68[6];
        v75 = (_QWORD *)((char *)v64 + v74);
        v76 = (_QWORD *)((char *)v65 + v74);
        v77 = v76[1];
        *v75 = *v76;
        v75[1] = v77;
        v78 = v68[7];
        v79 = (char *)v64 + v78;
        v80 = (char *)v65 + v78;
        v81 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v72 - 8) + 16);
        v82 = swift_bridgeObjectRetain();
        v81(v79, v80, v72, v82);
        v83 = v68[8];
        v84 = (char *)v64 + v83;
        v85 = (char *)v65 + v83;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v65 + v83, 1, v72))
        {
          v86 = sub_1000BA294(&qword_100BD4280);
          memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v81)(v84, v85, v72);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v84, 0, 1, v72);
        }
        v45 = v101;
        *((_BYTE *)v64 + v68[9]) = *((_BYTE *)v65 + v68[9]);
        swift_storeEnumTagMultiPayload(v64, v100, 1);
      }
      else
      {
        memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      }
      v87 = *(int *)(v57 + 24);
      v88 = (char *)v55 + v87;
      v89 = (char *)v56 + v87;
      v90 = type metadata accessor for DetailComponentAction(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v89, 1, v90))
      {
        v91 = sub_1000BA294(&qword_100BD3100);
        memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
      }
      else
      {
        v92 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v88, v89, v92);
        v93 = sub_1000BA294(&qword_100BC5FE8);
        v88[*(int *)(v93 + 48)] = v89[*(int *)(v93 + 48)];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v88, 0, 1, v90);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v55, 0, 1, v57);
    }
  }
  return v45;
}

uint64_t sub_1007724FC(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  __n128 v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  void (*v30)(uint64_t, uint64_t, __n128);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[7];
  v5 = type metadata accessor for Date(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + a2[8], v5);
  v6(a1 + a2[9], v5);
  v7 = a1 + a2[10];
  v8 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[11];
  v10 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  v11 = a1 + a2[13];
  swift_bridgeObjectRelease();
  v12 = (int *)_s14ChartViewModelVMa(0);
  v13 = v11 + v12[5];
  v14 = type metadata accessor for DetailChartDataElement(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = v11 + v12[6];
  v16 = type metadata accessor for Location(0);
  v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
  v17(v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = swift_bridgeObjectRelease();
  ((void (*)(uint64_t, uint64_t, __n128))v6)(v11 + v12[11], v5, v18);
  v19 = swift_bridgeObjectRelease();
  ((void (*)(uint64_t, uint64_t, __n128))v17)(a1 + a2[14], v16, v19);
  v20 = a1 + a2[15];
  v21 = type metadata accessor for SunEvents(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  swift_bridgeObjectRelease();
  v22 = a1 + a2[18];
  v23 = type metadata accessor for DetailComponentContainerViewModel(0);
  result = _s7Weather24LocationCompositionStateOwet_0(v22, 1, v23);
  if (!(_DWORD)result)
  {
    if (*(_QWORD *)(v22 + 8))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v25 = v22 + *(int *)(v23 + 20);
    type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(v25) == 1)
    {
      swift_bridgeObjectRelease();
      v26 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
      v27 = v25 + v26[5];
      v28 = type metadata accessor for URL(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v27, 1, v28))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
      v29 = swift_bridgeObjectRelease();
      v30 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v28 - 8) + 8);
      v30(v25 + v26[7], v28, v29);
      v31 = v25 + v26[8];
      if (!_s7Weather24LocationCompositionStateOwet_0(v31, 1, v28))
        ((void (*)(uint64_t, uint64_t))v30)(v31, v28);
    }
    v32 = v22 + *(int *)(v23 + 24);
    v33 = type metadata accessor for DetailComponentAction(0);
    result = _s7Weather24LocationCompositionStateOwet_0(v32, 1, v33);
    if (!(_DWORD)result)
    {
      v34 = type metadata accessor for URL(0);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v32, v34);
    }
  }
  return result;
}

_QWORD *sub_10077283C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, void *, __n128);
  __n128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t, __n128);
  __n128 v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  __n128 v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  __n128 v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  void (*v78)(char *, char *, uint64_t, __n128);
  __n128 v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v92;
  char *v93;
  char *v94;
  void (*v95)(char *, char *, uint64_t);
  int *v96;
  void *__dsta;
  char *__dst;
  void (*v99)(char *, char *, void *, __n128);
  uint64_t v100;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  v9 = a3[7];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  a1[4] = a2[4];
  a1[5] = v8;
  v12 = type metadata accessor for Date(0);
  v13 = *(void (**)(char *, char *, void *, __n128))(*(_QWORD *)(v12 - 8) + 16);
  __dsta = (void *)v12;
  v99 = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = swift_bridgeObjectRetain();
  v13(v10, v11, (void *)v12, v14);
  ((void (*)(char *, char *, uint64_t))v13)((char *)a1 + a3[8], (char *)a2 + a3[8], v12);
  ((void (*)(char *, char *, uint64_t))v13)((char *)a1 + a3[9], (char *)a2 + a3[9], v12);
  v15 = a3[10];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[11];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v96 = a3;
  v23 = a3[13];
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  *(_QWORD *)((char *)a1 + v23) = *(_QWORD *)((char *)a2 + v23);
  v26 = (int *)_s14ChartViewModelVMa(0);
  v27 = v26[5];
  v94 = &v24[v27];
  v28 = &v25[v27];
  v29 = type metadata accessor for DetailChartDataElement(0);
  v30 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v29 - 8) + 16);
  swift_bridgeObjectRetain();
  v31 = swift_bridgeObjectRetain();
  v30(v94, v28, v29, v31);
  v32 = v26[6];
  v33 = &v24[v32];
  v34 = &v25[v32];
  v35 = type metadata accessor for Location(0);
  v95 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16);
  v95(v33, v34, v35);
  v36 = v26[7];
  v37 = &v24[v36];
  v38 = &v25[v36];
  v39 = *(_QWORD *)v38;
  v40 = *((_QWORD *)v38 + 1);
  *(_QWORD *)v37 = v39;
  *((_QWORD *)v37 + 1) = v40;
  *(_QWORD *)&v24[v26[8]] = *(_QWORD *)&v25[v26[8]];
  *(_QWORD *)&v24[v26[9]] = *(_QWORD *)&v25[v26[9]];
  *(_QWORD *)&v24[v26[10]] = *(_QWORD *)&v25[v26[10]];
  v41 = v26[11];
  v42 = &v24[v41];
  v93 = &v25[v41];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v43 = swift_bridgeObjectRetain();
  v99(v42, v93, __dsta, v43);
  *(_QWORD *)&v24[v26[12]] = *(_QWORD *)&v25[v26[12]];
  v44 = a1;
  v45 = v96[14];
  v46 = (char *)a1 + v45;
  v47 = (char *)a2 + v45;
  v48 = swift_bridgeObjectRetain();
  ((void (*)(char *, char *, uint64_t, __n128))v95)(v46, v47, v35, v48);
  v49 = v96[15];
  v50 = (char *)a1 + v49;
  v51 = (char *)a2 + v49;
  v52 = type metadata accessor for SunEvents(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v50, v51, v52);
  *(_QWORD *)((char *)a1 + v96[16]) = *(_QWORD *)((char *)a2 + v96[16]);
  v53 = v96[18];
  v54 = (_QWORD *)((char *)a1 + v53);
  v55 = (_QWORD *)((char *)a2 + v53);
  v56 = type metadata accessor for DetailComponentContainerViewModel(0);
  swift_bridgeObjectRetain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v55, 1, v56))
  {
    v57 = sub_1000BA294(&qword_100BC68A0);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    v58 = v55[1];
    if (v58)
    {
      *v54 = *v55;
      v54[1] = v58;
      v59 = v55[3];
      v54[2] = v55[2];
      v54[3] = v59;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v60 = *((_OWORD *)v55 + 1);
      *(_OWORD *)v54 = *(_OWORD *)v55;
      *((_OWORD *)v54 + 1) = v60;
    }
    v61 = *(int *)(v56 + 20);
    v62 = (_QWORD *)((char *)v54 + v61);
    v63 = (_QWORD *)((char *)v55 + v61);
    v64 = type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(v63) == 1)
    {
      v100 = v64;
      v65 = v63[1];
      *v62 = *v63;
      v62[1] = v65;
      v66 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
      v67 = v66[5];
      __dst = (char *)v62 + v67;
      v68 = (char *)v63 + v67;
      v69 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain();
      v92 = v44;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v68, 1, v69))
      {
        v70 = sub_1000BA294(&qword_100BD4280);
        memcpy(__dst, v68, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 16))(__dst, v68, v69);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v69);
      }
      v71 = v66[6];
      v72 = (_QWORD *)((char *)v62 + v71);
      v73 = (_QWORD *)((char *)v63 + v71);
      v74 = v73[1];
      *v72 = *v73;
      v72[1] = v74;
      v75 = v66[7];
      v76 = (char *)v62 + v75;
      v77 = (char *)v63 + v75;
      v78 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v69 - 8) + 16);
      v79 = swift_bridgeObjectRetain();
      v78(v76, v77, v69, v79);
      v80 = v66[8];
      v81 = (char *)v62 + v80;
      v82 = (char *)v63 + v80;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v63 + v80, 1, v69))
      {
        v83 = sub_1000BA294(&qword_100BD4280);
        memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
      }
      else
      {
        ((void (*)(char *, char *, uint64_t))v78)(v81, v82, v69);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v81, 0, 1, v69);
      }
      v44 = v92;
      *((_BYTE *)v62 + v66[9]) = *((_BYTE *)v63 + v66[9]);
      swift_storeEnumTagMultiPayload(v62, v100, 1);
    }
    else
    {
      memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    }
    v84 = *(int *)(v56 + 24);
    v85 = (char *)v54 + v84;
    v86 = (char *)v55 + v84;
    v87 = type metadata accessor for DetailComponentAction(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v86, 1, v87))
    {
      v88 = sub_1000BA294(&qword_100BD3100);
      memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
    }
    else
    {
      v89 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 16))(v85, v86, v89);
      v90 = sub_1000BA294(&qword_100BC5FE8);
      v85[*(int *)(v90 + 48)] = v86[*(int *)(v90 + 48)];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v85, 0, 1, v87);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v54, 0, 1, v56);
  }
  return v44;
}

_QWORD *sub_100772DE0(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __n128 v32;
  __n128 v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  size_t v43;
  void *v44;
  const void *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  void (*v63)(char *, char *, uint64_t, __n128);
  __n128 v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  int *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  void (*v96)(char *, char *, uint64_t, __n128);
  __n128 v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  void (*v114)(char *, char *, uint64_t);
  _QWORD *__dstb;
  char *__dst;
  char *__dsta;
  void (*v118)(char *, char *);
  uint64_t v119;
  uint64_t v120;

  v5 = a1;
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5[2] = a2[2];
  v5[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5[4] = a2[4];
  v5[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[7];
  v7 = (char *)v5 + v6;
  v8 = (char *)a2 + v6;
  __dstb = (_QWORD *)type metadata accessor for Date(0);
  v118 = *(void (**)(char *, char *))(*(__dstb - 1) + 24);
  v118(v7, v8);
  ((void (*)(char *, char *, _QWORD *))v118)((char *)v5 + a3[8], (char *)a2 + a3[8], __dstb);
  ((void (*)(char *, char *, _QWORD *))v118)((char *)v5 + a3[9], (char *)a2 + a3[9], __dstb);
  v9 = a3[10];
  v10 = (char *)v5 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  v13 = a3[11];
  v14 = (char *)v5 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  *(_QWORD *)((char *)v5 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = a3[13];
  v18 = (char *)v5 + v17;
  v19 = (char *)a2 + v17;
  *(_QWORD *)((char *)v5 + v17) = *(_QWORD *)((char *)a2 + v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = (int *)_s14ChartViewModelVMa(0);
  v21 = v20[5];
  v22 = &v18[v21];
  v23 = &v19[v21];
  v24 = type metadata accessor for DetailChartDataElement(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 24))(v22, v23, v24);
  v25 = v20[6];
  v26 = &v18[v25];
  v27 = &v19[v25];
  v28 = type metadata accessor for Location(0);
  v114 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 24);
  v114(v26, v27, v28);
  v29 = v20[7];
  v30 = &v18[v29];
  v31 = &v19[v29];
  *(_QWORD *)&v18[v29] = *(_QWORD *)&v19[v29];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v30 + 1) = *((_QWORD *)v31 + 1);
  *(_QWORD *)&v18[v20[8]] = *(_QWORD *)&v19[v20[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v18[v20[9]] = *(_QWORD *)&v19[v20[9]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v18[v20[10]] = *(_QWORD *)&v19[v20[10]];
  swift_bridgeObjectRetain();
  v32 = swift_bridgeObjectRelease();
  ((void (*)(char *, char *, _QWORD *, __n128))v118)(&v18[v20[11]], &v19[v20[11]], __dstb, v32);
  *(_QWORD *)&v18[v20[12]] = *(_QWORD *)&v19[v20[12]];
  swift_bridgeObjectRetain();
  v33 = swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t, __n128))v114)((char *)v5 + a3[14], (char *)a2 + a3[14], v28, v33);
  v34 = a3[15];
  v35 = (char *)v5 + v34;
  v36 = (char *)a2 + v34;
  v37 = type metadata accessor for SunEvents(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 24))(v35, v36, v37);
  *(_QWORD *)((char *)v5 + a3[16]) = *(_QWORD *)((char *)a2 + a3[16]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v38 = a3[18];
  v39 = (_QWORD *)((char *)v5 + v38);
  v40 = (_QWORD *)((char *)a2 + v38);
  v41 = type metadata accessor for DetailComponentContainerViewModel(0);
  LODWORD(v28) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v39, 1, v41);
  v42 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v40, 1, v41);
  if ((_DWORD)v28)
  {
    if (!v42)
    {
      if (v40[1])
      {
        *v39 = *v40;
        v39[1] = v40[1];
        v39[2] = v40[2];
        v39[3] = v40[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v47 = *((_OWORD *)v40 + 1);
        *(_OWORD *)v39 = *(_OWORD *)v40;
        *((_OWORD *)v39 + 1) = v47;
      }
      v48 = *(int *)(v41 + 20);
      v49 = (_QWORD *)((char *)v39 + v48);
      v50 = (_QWORD *)((char *)v40 + v48);
      v51 = type metadata accessor for NewsArticleComponentViewModel(0);
      if (swift_getEnumCaseMultiPayload(v50) == 1)
      {
        v119 = v51;
        *v49 = *v50;
        v49[1] = v50[1];
        v52 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
        v53 = v52[5];
        __dst = (char *)v49 + v53;
        v54 = (char *)v50 + v53;
        v55 = type metadata accessor for URL(0);
        swift_bridgeObjectRetain();
        v112 = v5;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v54, 1, v55))
        {
          v56 = sub_1000BA294(&qword_100BD4280);
          memcpy(__dst, v54, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(__dst, v54, v55);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v55);
        }
        v57 = v52[6];
        v58 = (_QWORD *)((char *)v49 + v57);
        v59 = (_QWORD *)((char *)v50 + v57);
        *v58 = *v59;
        v58[1] = v59[1];
        v60 = v52[7];
        v61 = (char *)v49 + v60;
        v62 = (char *)v50 + v60;
        v63 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v55 - 8) + 16);
        v64 = swift_bridgeObjectRetain();
        v63(v61, v62, v55, v64);
        v65 = v52[8];
        v66 = (char *)v49 + v65;
        v67 = (char *)v50 + v65;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v50 + v65, 1, v55))
        {
          v68 = sub_1000BA294(&qword_100BD4280);
          memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v63)(v66, v67, v55);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v66, 0, 1, v55);
        }
        v5 = v112;
        *((_BYTE *)v49 + v52[9]) = *((_BYTE *)v50 + v52[9]);
        swift_storeEnumTagMultiPayload(v49, v119, 1);
      }
      else
      {
        memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
      }
      v69 = *(int *)(v41 + 24);
      v70 = (char *)v39 + v69;
      v71 = (char *)v40 + v69;
      v72 = type metadata accessor for DetailComponentAction(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v71, 1, v72))
      {
        v73 = sub_1000BA294(&qword_100BD3100);
        memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
      }
      else
      {
        v74 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(v70, v71, v74);
        v75 = sub_1000BA294(&qword_100BC5FE8);
        v70[*(int *)(v75 + 48)] = v71[*(int *)(v75 + 48)];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v70, 0, 1, v72);
      }
      v76 = (uint64_t)v39;
      v77 = v41;
      goto LABEL_28;
    }
    goto LABEL_7;
  }
  if (v42)
  {
    sub_1000215BC((uint64_t)v39, type metadata accessor for DetailComponentContainerViewModel);
LABEL_7:
    v43 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC68A0) - 8) + 64);
    v44 = v39;
    v45 = v40;
    goto LABEL_8;
  }
  v46 = v40[1];
  if (v39[1])
  {
    if (v46)
    {
      *v39 = *v40;
      v39[1] = v40[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v39[2] = v40[2];
      v39[3] = v40[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10035C44C((uint64_t)v39);
      v79 = *((_OWORD *)v40 + 1);
      *(_OWORD *)v39 = *(_OWORD *)v40;
      *((_OWORD *)v39 + 1) = v79;
    }
  }
  else if (v46)
  {
    *v39 = *v40;
    v39[1] = v40[1];
    v39[2] = v40[2];
    v39[3] = v40[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v80 = *((_OWORD *)v40 + 1);
    *(_OWORD *)v39 = *(_OWORD *)v40;
    *((_OWORD *)v39 + 1) = v80;
  }
  if (v5 != a2)
  {
    v81 = *(int *)(v41 + 20);
    v82 = (_QWORD *)((char *)v39 + v81);
    v83 = (_QWORD *)((char *)v40 + v81);
    sub_1000215BC((uint64_t)v39 + v81, type metadata accessor for NewsArticleComponentViewModel);
    v84 = type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(v83) == 1)
    {
      v120 = v84;
      *v82 = *v83;
      v82[1] = v83[1];
      v85 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
      v86 = v85[5];
      __dsta = (char *)v82 + v86;
      v87 = (char *)v83 + v86;
      v88 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain();
      v113 = v5;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v87, 1, v88))
      {
        v89 = sub_1000BA294(&qword_100BD4280);
        memcpy(__dsta, v87, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 16))(__dsta, v87, v88);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dsta, 0, 1, v88);
      }
      v90 = v85[6];
      v91 = (_QWORD *)((char *)v82 + v90);
      v92 = (_QWORD *)((char *)v83 + v90);
      *v91 = *v92;
      v91[1] = v92[1];
      v93 = v85[7];
      v94 = (char *)v82 + v93;
      v95 = (char *)v83 + v93;
      v96 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v88 - 8) + 16);
      v97 = swift_bridgeObjectRetain();
      v96(v94, v95, v88, v97);
      v98 = v85[8];
      v99 = (char *)v82 + v98;
      v100 = (char *)v83 + v98;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v83 + v98, 1, v88))
      {
        v101 = sub_1000BA294(&qword_100BD4280);
        memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
      }
      else
      {
        ((void (*)(char *, char *, uint64_t))v96)(v99, v100, v88);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v99, 0, 1, v88);
      }
      v5 = v113;
      *((_BYTE *)v82 + v85[9]) = *((_BYTE *)v83 + v85[9]);
      swift_storeEnumTagMultiPayload(v82, v120, 1);
    }
    else
    {
      memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    }
  }
  v102 = *(int *)(v41 + 24);
  v103 = (uint64_t)v39 + v102;
  v104 = (uint64_t)v40 + v102;
  v105 = type metadata accessor for DetailComponentAction(0);
  v106 = _s7Weather24LocationCompositionStateOwet_0(v103, 1, v105);
  v107 = _s7Weather24LocationCompositionStateOwet_0(v104, 1, v105);
  if (v106)
  {
    if (!v107)
    {
      v108 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v108 - 8) + 16))(v103, v104, v108);
      v109 = sub_1000BA294(&qword_100BC5FE8);
      *(_BYTE *)(v103 + *(int *)(v109 + 48)) = *(_BYTE *)(v104 + *(int *)(v109 + 48));
      v76 = v103;
      v77 = v105;
LABEL_28:
      _s7Weather24LocationCompositionStateOwst_0(v76, 0, 1, v77);
      return v5;
    }
  }
  else
  {
    if (!v107)
    {
      v110 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v110 - 8) + 24))(v103, v104, v110);
      v111 = sub_1000BA294(&qword_100BC5FE8);
      *(_BYTE *)(v103 + *(int *)(v111 + 48)) = *(_BYTE *)(v104 + *(int *)(v111 + 48));
      return v5;
    }
    sub_1000215BC(v103, type metadata accessor for DetailComponentAction);
  }
  v43 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD3100) - 8) + 64);
  v44 = (void *)v103;
  v45 = (const void *)v104;
LABEL_8:
  memcpy(v44, v45, v43);
  return v5;
}

_OWORD *sub_1007737A4(_OWORD *a1, char *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  _OWORD *v68;
  void (*v69)(char *, char *);
  uint64_t v70;

  v6 = *((_OWORD *)a2 + 1);
  *a1 = *(_OWORD *)a2;
  a1[1] = v6;
  a1[2] = *((_OWORD *)a2 + 2);
  v7 = a3[7];
  v8 = (char *)a1 + v7;
  v9 = &a2[v7];
  v67 = type metadata accessor for Date(0);
  v69 = *(void (**)(char *, char *))(*(_QWORD *)(v67 - 8) + 32);
  v69(v8, v9);
  ((void (*)(char *, char *, uint64_t))v69)((char *)a1 + a3[8], &a2[a3[8]], v67);
  ((void (*)(char *, char *, uint64_t))v69)((char *)a1 + a3[9], &a2[a3[9]], v67);
  v10 = a3[10];
  v11 = (char *)a1 + v10;
  v12 = &a2[v10];
  v13 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = a3[11];
  v15 = (char *)a1 + v14;
  v16 = &a2[v14];
  v17 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  v18 = a3[13];
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)&a2[a3[12]];
  v19 = (char *)a1 + v18;
  v20 = &a2[v18];
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)&a2[v18];
  v21 = (int *)_s14ChartViewModelVMa(0);
  v22 = v21[5];
  v23 = &v19[v22];
  v24 = &v20[v22];
  v25 = type metadata accessor for DetailChartDataElement(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
  v26 = v21[6];
  v27 = &v19[v26];
  v28 = &v20[v26];
  v29 = type metadata accessor for Location(0);
  v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32);
  v30(v27, v28, v29);
  *(_OWORD *)&v19[v21[7]] = *(_OWORD *)&v20[v21[7]];
  *(_QWORD *)&v19[v21[8]] = *(_QWORD *)&v20[v21[8]];
  *(_QWORD *)&v19[v21[9]] = *(_QWORD *)&v20[v21[9]];
  *(_QWORD *)&v19[v21[10]] = *(_QWORD *)&v20[v21[10]];
  ((void (*)(char *, char *, uint64_t))v69)(&v19[v21[11]], &v20[v21[11]], v67);
  v31 = v21[12];
  v32 = *(_QWORD *)&v20[v31];
  v33 = a1;
  *(_QWORD *)&v19[v31] = v32;
  v30((char *)a1 + a3[14], &a2[a3[14]], v29);
  v34 = a3[15];
  v35 = (char *)a1 + v34;
  v36 = &a2[v34];
  v37 = type metadata accessor for SunEvents(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
  *(_QWORD *)((char *)v33 + a3[16]) = *(_QWORD *)&a2[a3[16]];
  v38 = a3[18];
  v39 = (_OWORD *)((char *)v33 + v38);
  v40 = &a2[v38];
  v41 = type metadata accessor for DetailComponentContainerViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v40, 1, v41))
  {
    v42 = sub_1000BA294(&qword_100BC68A0);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    v43 = *((_OWORD *)v40 + 1);
    *v39 = *(_OWORD *)v40;
    v39[1] = v43;
    v44 = *(int *)(v41 + 20);
    v45 = (char *)v39 + v44;
    v46 = &v40[v44];
    v47 = type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(v46) == 1)
    {
      v68 = v33;
      v70 = v47;
      *(_OWORD *)v45 = *(_OWORD *)v46;
      v48 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
      v49 = v48[5];
      v50 = &v45[v49];
      v51 = &v46[v49];
      v52 = type metadata accessor for URL(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v51, 1, v52))
      {
        v53 = sub_1000BA294(&qword_100BD4280);
        memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
        v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32);
      }
      else
      {
        v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32);
        v54(v50, v51, v52);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v50, 0, 1, v52);
      }
      *(_OWORD *)&v45[v48[6]] = *(_OWORD *)&v46[v48[6]];
      v54(&v45[v48[7]], &v46[v48[7]], v52);
      v55 = v48[8];
      v56 = &v45[v55];
      v57 = &v46[v55];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v46[v55], 1, v52))
      {
        v58 = sub_1000BA294(&qword_100BD4280);
        memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
      }
      else
      {
        v54(v56, v57, v52);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v56, 0, 1, v52);
      }
      v33 = v68;
      v45[v48[9]] = v46[v48[9]];
      swift_storeEnumTagMultiPayload(v45, v70, 1);
    }
    else
    {
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    v59 = *(int *)(v41 + 24);
    v60 = (char *)v39 + v59;
    v61 = &v40[v59];
    v62 = type metadata accessor for DetailComponentAction(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v61, 1, v62))
    {
      v63 = sub_1000BA294(&qword_100BD3100);
      memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      v64 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 32))(v60, v61, v64);
      v65 = sub_1000BA294(&qword_100BC5FE8);
      v60[*(int *)(v65 + 48)] = v61[*(int *)(v65 + 48)];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v60, 0, 1, v62);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v39, 0, 1, v41);
  }
  return v33;
}

char *sub_100773C68(char *a1, char *a2, int *a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  char *v34;
  char *v35;
  __n128 v36;
  __n128 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  size_t v59;
  void *v60;
  const void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  int *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t);
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, char *, uint64_t);
  char *v108;
  char *v109;

  v5 = a1;
  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  v7 = *((_QWORD *)a2 + 3);
  *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)v5 + 3) = v7;
  swift_bridgeObjectRelease();
  v8 = *((_QWORD *)a2 + 5);
  *((_QWORD *)v5 + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)v5 + 5) = v8;
  swift_bridgeObjectRelease();
  v9 = a3[7];
  v10 = &v5[v9];
  v11 = &a2[v9];
  v104 = type metadata accessor for Date(0);
  v107 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 40);
  v107(v10, v11, v104);
  v107(&v5[a3[8]], &a2[a3[8]], v104);
  v107(&v5[a3[9]], &a2[a3[9]], v104);
  v12 = a3[10];
  v13 = &v5[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = a3[11];
  v17 = &v5[v16];
  v18 = &a2[v16];
  v19 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  *(_QWORD *)&v5[a3[12]] = *(_QWORD *)&a2[a3[12]];
  swift_bridgeObjectRelease();
  v20 = a3[13];
  v21 = &v5[v20];
  v22 = &a2[v20];
  *(_QWORD *)&v5[v20] = *(_QWORD *)&a2[v20];
  swift_bridgeObjectRelease();
  v23 = (int *)_s14ChartViewModelVMa(0);
  v24 = v23[5];
  v25 = &v21[v24];
  v26 = &v22[v24];
  v27 = type metadata accessor for DetailChartDataElement(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 40))(v25, v26, v27);
  v28 = v23[6];
  v29 = &v21[v28];
  v30 = &v22[v28];
  v31 = type metadata accessor for Location(0);
  v32 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 40);
  v32(v29, v30, v31);
  v33 = v23[7];
  v34 = &v21[v33];
  v35 = &v22[v33];
  *(_QWORD *)&v21[v33] = *(_QWORD *)&v22[v33];
  swift_bridgeObjectRelease();
  *((_QWORD *)v34 + 1) = *((_QWORD *)v35 + 1);
  *(_QWORD *)&v21[v23[8]] = *(_QWORD *)&v22[v23[8]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v21[v23[9]] = *(_QWORD *)&v22[v23[9]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v21[v23[10]] = *(_QWORD *)&v22[v23[10]];
  v36 = swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t, __n128))v107)(&v21[v23[11]], &v22[v23[11]], v104, v36);
  *(_QWORD *)&v21[v23[12]] = *(_QWORD *)&v22[v23[12]];
  v37 = swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t, __n128))v32)(&v5[a3[14]], &a2[a3[14]], v31, v37);
  v38 = a3[15];
  v39 = &v5[v38];
  v40 = &a2[v38];
  v41 = type metadata accessor for SunEvents(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 40))(v39, v40, v41);
  *(_QWORD *)&v5[a3[16]] = *(_QWORD *)&a2[a3[16]];
  swift_bridgeObjectRelease();
  v42 = a3[18];
  v43 = (uint64_t)&v5[v42];
  v44 = (uint64_t)&a2[v42];
  v45 = type metadata accessor for DetailComponentContainerViewModel(0);
  LODWORD(v31) = _s7Weather24LocationCompositionStateOwet_0(v43, 1, v45);
  v46 = _s7Weather24LocationCompositionStateOwet_0(v44, 1, v45);
  if ((_DWORD)v31)
  {
    if (!v46)
    {
      v47 = *(_OWORD *)(v44 + 16);
      *(_OWORD *)v43 = *(_OWORD *)v44;
      *(_OWORD *)(v43 + 16) = v47;
      v48 = *(int *)(v45 + 20);
      v49 = (char *)(v43 + v48);
      v50 = (char *)(v44 + v48);
      v51 = type metadata accessor for NewsArticleComponentViewModel(0);
      if (swift_getEnumCaseMultiPayload(v50) == 1)
      {
        v105 = v51;
        v108 = v5;
        *(_OWORD *)v49 = *(_OWORD *)v50;
        v52 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
        v53 = v52[5];
        v54 = &v49[v53];
        v55 = &v50[v53];
        v56 = type metadata accessor for URL(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v55, 1, v56))
        {
          v57 = sub_1000BA294(&qword_100BD4280);
          memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
          v58 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32);
        }
        else
        {
          v58 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32);
          v58(v54, v55, v56);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v54, 0, 1, v56);
        }
        *(_OWORD *)&v49[v52[6]] = *(_OWORD *)&v50[v52[6]];
        v58(&v49[v52[7]], &v50[v52[7]], v56);
        v64 = v52[8];
        v65 = &v49[v64];
        v66 = &v50[v64];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v50[v64], 1, v56))
        {
          v67 = sub_1000BA294(&qword_100BD4280);
          memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
        }
        else
        {
          v58(v65, v66, v56);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v65, 0, 1, v56);
        }
        v5 = v108;
        v49[v52[9]] = v50[v52[9]];
        swift_storeEnumTagMultiPayload(v49, v105, 1);
      }
      else
      {
        memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
      }
      v68 = *(int *)(v45 + 24);
      v69 = (void *)(v43 + v68);
      v70 = (const void *)(v44 + v68);
      v71 = type metadata accessor for DetailComponentAction(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v70, 1, v71))
      {
        v72 = sub_1000BA294(&qword_100BD3100);
        memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
      }
      else
      {
        v73 = type metadata accessor for URL(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v69, v70, v73);
        v74 = sub_1000BA294(&qword_100BC5FE8);
        *((_BYTE *)v69 + *(int *)(v74 + 48)) = *((_BYTE *)v70 + *(int *)(v74 + 48));
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v69, 0, 1, v71);
      }
      v75 = v43;
      v76 = v45;
      goto LABEL_23;
    }
    goto LABEL_8;
  }
  if (v46)
  {
    sub_1000215BC(v43, type metadata accessor for DetailComponentContainerViewModel);
LABEL_8:
    v59 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC68A0) - 8) + 64);
    v60 = (void *)v43;
    v61 = (const void *)v44;
    goto LABEL_9;
  }
  if (!*(_QWORD *)(v43 + 8))
    goto LABEL_26;
  v62 = *(_QWORD *)(v44 + 8);
  if (!v62)
  {
    sub_10035C44C(v43);
LABEL_26:
    v78 = *(_OWORD *)(v44 + 16);
    *(_OWORD *)v43 = *(_OWORD *)v44;
    *(_OWORD *)(v43 + 16) = v78;
    goto LABEL_27;
  }
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *(_QWORD *)(v43 + 8) = v62;
  swift_bridgeObjectRelease();
  v63 = *(_QWORD *)(v44 + 24);
  *(_QWORD *)(v43 + 16) = *(_QWORD *)(v44 + 16);
  *(_QWORD *)(v43 + 24) = v63;
  swift_bridgeObjectRelease();
LABEL_27:
  if (v5 != a2)
  {
    v79 = *(int *)(v45 + 20);
    v80 = (char *)(v43 + v79);
    v81 = (char *)(v44 + v79);
    sub_1000215BC(v43 + v79, type metadata accessor for NewsArticleComponentViewModel);
    v82 = type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(v81) == 1)
    {
      v106 = v82;
      v109 = v5;
      *(_OWORD *)v80 = *(_OWORD *)v81;
      v83 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
      v84 = v83[5];
      v85 = &v80[v84];
      v86 = &v81[v84];
      v87 = type metadata accessor for URL(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v86, 1, v87))
      {
        v88 = sub_1000BA294(&qword_100BD4280);
        memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
        v89 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 32);
      }
      else
      {
        v89 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 32);
        v89(v85, v86, v87);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v85, 0, 1, v87);
      }
      *(_OWORD *)&v80[v83[6]] = *(_OWORD *)&v81[v83[6]];
      v89(&v80[v83[7]], &v81[v83[7]], v87);
      v90 = v83[8];
      v91 = &v80[v90];
      v92 = &v81[v90];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v81[v90], 1, v87))
      {
        v93 = sub_1000BA294(&qword_100BD4280);
        memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
      }
      else
      {
        v89(v91, v92, v87);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v91, 0, 1, v87);
      }
      v5 = v109;
      v80[v83[9]] = v81[v83[9]];
      swift_storeEnumTagMultiPayload(v80, v106, 1);
    }
    else
    {
      memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    }
  }
  v94 = *(int *)(v45 + 24);
  v95 = v43 + v94;
  v96 = v44 + v94;
  v97 = type metadata accessor for DetailComponentAction(0);
  v98 = _s7Weather24LocationCompositionStateOwet_0(v95, 1, v97);
  v99 = _s7Weather24LocationCompositionStateOwet_0(v96, 1, v97);
  if (v98)
  {
    if (!v99)
    {
      v100 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 32))(v95, v96, v100);
      v101 = sub_1000BA294(&qword_100BC5FE8);
      *(_BYTE *)(v95 + *(int *)(v101 + 48)) = *(_BYTE *)(v96 + *(int *)(v101 + 48));
      v75 = v95;
      v76 = v97;
LABEL_23:
      _s7Weather24LocationCompositionStateOwst_0(v75, 0, 1, v76);
      return v5;
    }
  }
  else
  {
    if (!v99)
    {
      v102 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 40))(v95, v96, v102);
      v103 = sub_1000BA294(&qword_100BC5FE8);
      *(_BYTE *)(v95 + *(int *)(v103 + 48)) = *(_BYTE *)(v96 + *(int *)(v103 + 48));
      return v5;
    }
    sub_1000215BC(v95, type metadata accessor for DetailComponentAction);
  }
  v59 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD3100) - 8) + 64);
  v60 = (void *)v95;
  v61 = (const void *)v96;
LABEL_9:
  memcpy(v60, v61, v59);
  return v5;
}

uint64_t sub_1007744A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1007744B0);
}

uint64_t sub_1007744B0(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_100098778();
    sub_100088FF0();
    if (v11)
    {
      v9 = v8;
      v10 = a3[7];
    }
    else
    {
      type metadata accessor for TimeZone(0);
      sub_100088FF0();
      if (v11)
      {
        v9 = v12;
        v10 = a3[10];
      }
      else
      {
        type metadata accessor for AttributedString(0);
        sub_100088FF0();
        if (v13)
        {
          v9 = v14;
          v10 = a3[11];
        }
        else
        {
          _s14ChartViewModelVMa(0);
          sub_100088FF0();
          if (v15)
          {
            v9 = v16;
            v10 = a3[13];
          }
          else
          {
            type metadata accessor for Location(0);
            sub_100088FF0();
            if (v17)
            {
              v9 = v18;
              v10 = a3[14];
            }
            else
            {
              type metadata accessor for SunEvents(0);
              sub_100088FF0();
              if (v19)
              {
                v9 = v20;
                v10 = a3[15];
              }
              else
              {
                v9 = sub_1000BA294(&qword_100BC68A0);
                v10 = a3[18];
              }
            }
          }
        }
      }
    }
    return _s7Weather24LocationCompositionStateOwet_0(a1 + v10, a2, v9);
  }
}

uint64_t sub_1007745CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1007745D8);
}

uint64_t sub_1007745D8(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_100098778();
    sub_10009D2E8();
    if (v10)
    {
      v8 = v7;
      v9 = a4[7];
    }
    else
    {
      type metadata accessor for TimeZone(0);
      sub_10009D2E8();
      if (v10)
      {
        v8 = v11;
        v9 = a4[10];
      }
      else
      {
        type metadata accessor for AttributedString(0);
        sub_10009D2E8();
        if (v12)
        {
          v8 = v13;
          v9 = a4[11];
        }
        else
        {
          _s14ChartViewModelVMa(0);
          sub_10009D2E8();
          if (v14)
          {
            v8 = v15;
            v9 = a4[13];
          }
          else
          {
            type metadata accessor for Location(0);
            sub_10009D2E8();
            if (v16)
            {
              v8 = v17;
              v9 = a4[14];
            }
            else
            {
              type metadata accessor for SunEvents(0);
              sub_10009D2E8();
              if (v18)
              {
                v8 = v19;
                v9 = a4[15];
              }
              else
              {
                v8 = sub_1000BA294(&qword_100BC68A0);
                v9 = a4[18];
              }
            }
          }
        }
      }
    }
    return _s7Weather24LocationCompositionStateOwst_0(v5 + v9, a2, a2, v8);
  }
  return result;
}

uint64_t _s11NormalModelVMa(uint64_t a1)
{
  uint64_t result;

  result = qword_100C04488;
  if (!qword_100C04488)
    return swift_getSingletonMetadata(a1, &_s11NormalModelVMn);
  return result;
}

void sub_100774728(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v16[0] = &unk_1009C8380;
  v16[1] = &unk_1009C8380;
  v16[2] = &unk_1009C8380;
  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v17 = *(_QWORD *)(v2 - 8) + 64;
    v18 = v17;
    v19 = v17;
    v4 = type metadata accessor for TimeZone(319);
    if (v5 <= 0x3F)
    {
      v20 = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for AttributedString(319);
      if (v7 <= 0x3F)
      {
        v21 = *(_QWORD *)(v6 - 8) + 64;
        v22 = (char *)&value witness table for Builtin.BridgeObject + 64;
        v8 = _s14ChartViewModelVMa(319);
        if (v9 <= 0x3F)
        {
          v23 = *(_QWORD *)(v8 - 8) + 64;
          v10 = type metadata accessor for Location(319);
          if (v11 <= 0x3F)
          {
            v24 = *(_QWORD *)(v10 - 8) + 64;
            v12 = type metadata accessor for SunEvents(319);
            if (v13 <= 0x3F)
            {
              v25 = *(_QWORD *)(v12 - 8) + 64;
              v26 = (char *)&value witness table for Builtin.BridgeObject + 64;
              v27 = (char *)&value witness table for () + 64;
              sub_10047C038(319);
              if (v15 <= 0x3F)
              {
                v28 = *(_QWORD *)(v14 - 8) + 64;
                swift_initStructMetadata(a1, 256, 15, v16, a1 + 16);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_10077486C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);

  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  v21 = (int *)_s11NormalModelVMa(0);
  v22 = (uint64_t)a9 + v21[7];
  sub_100098778();
  sub_100099BD4(v22, a7);
  sub_100099BD4((uint64_t)a9 + v21[8], a8);
  sub_100099BD4((uint64_t)a9 + v21[9], a10);
  v23 = sub_1000E7450();
  v24 = type metadata accessor for TimeZone(v23);
  sub_1000B4328(v24);
  v25 = sub_1000E7450();
  type metadata accessor for AttributedString(v25);
  v26 = sub_1000AE930();
  v27(v26, a12);
  *(_QWORD *)((char *)a9 + v21[12]) = a13;
  v28 = sub_1000E7450();
  type metadata accessor for Location(v28);
  v29 = sub_1000AE930();
  v30(v29, a14);
  sub_1000DB648(a16, (uint64_t)a9 + v21[13], _s14ChartViewModelVMa);
  v31 = sub_1000E7450();
  type metadata accessor for SunEvents(v31);
  v32 = sub_1000AE930();
  v33(v32, a15);
  *(_QWORD *)((char *)a9 + v21[16]) = a17;
  a9[4] = a5;
  a9[5] = a6;
  return sub_10047C954(a18, (uint64_t)a9 + v21[18]);
}

BOOL sub_1007749E8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  char v23;
  _BOOL8 result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  char v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;

  type metadata accessor for DetailComponentContainerViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_1000BA294(&qword_100BCA048);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BA294(&qword_100BC68A0);
  sub_1000B42B0();
  v12 = __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v53 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v53 - v18;
  v20 = a1[1];
  v21 = a2[1];
  v22 = *a1 == *a2 && v20 == v21;
  if (v22 || (v23 = sub_100099264(*a1, v20, *a2, v21), result = 0, (v23 & 1) != 0))
  {
    v25 = a1[2];
    v26 = a1[3];
    v27 = a2[2];
    v28 = a2[3];
    v29 = v25 == v27 && v26 == v28;
    if (v29 || (v30 = sub_100099264(v25, v26, v27, v28), result = 0, (v30 & 1) != 0))
    {
      v31 = a1[4];
      v32 = a1[5];
      v33 = a2[4];
      v34 = a2[5];
      v35 = v31 == v33 && v32 == v34;
      if (v35 || (v36 = sub_100099264(v31, v32, v33, v34), result = 0, (v36 & 1) != 0))
      {
        v37 = (int *)_s11NormalModelVMa(0);
        if ((sub_1000C4448(v37[7]) & 1) != 0 && (sub_1000C4448(v37[8]) & 1) != 0 && (sub_1000C4448(v37[9]) & 1) != 0)
        {
          v38 = sub_1000B4BA4(v37[10]);
          if ((static TimeZone.== infix(_:_:)(v38, v39) & 1) != 0)
          {
            v40 = sub_1000B4BA4(v37[11]);
            if ((static AttributedString.== infix(_:_:)(v40, v41) & 1) != 0)
            {
              sub_10009B4AC(*(_QWORD **)((char *)a1 + v37[12]), *(_QWORD **)((char *)a2 + v37[12]));
              if ((v42 & 1) != 0)
              {
                v43 = sub_1000B4BA4(v37[13]);
                sub_1004B50E0(v43, v44);
                if ((v45 & 1) != 0)
                {
                  v46 = sub_1000B4BA4(v37[14]);
                  if ((static Location.== infix(_:_:)(v46, v47) & 1) != 0)
                  {
                    v48 = sub_1000B4BA4(v37[15]);
                    if ((static SunEvents.== infix(_:_:)(v48) & 1) != 0)
                    {
                      sub_100947318();
                      if ((v49 & 1) != 0)
                      {
                        sub_10047C8B0((uint64_t)a1 + v37[18], (uint64_t)v19);
                        sub_10047C8B0((uint64_t)a2 + v37[18], (uint64_t)v17);
                        v50 = (uint64_t)&v10[*(int *)(v7 + 48)];
                        sub_10047C8B0((uint64_t)v19, (uint64_t)v10);
                        sub_10047C8B0((uint64_t)v17, v50);
                        sub_100098750((uint64_t)v10);
                        if (v22)
                        {
                          sub_10009E47C((uint64_t)v17);
                          sub_10009E47C((uint64_t)v19);
                          sub_100098750(v50);
                          if (v22)
                          {
                            sub_100021A14((uint64_t)v10, &qword_100BC68A0);
                            return 1;
                          }
                        }
                        else
                        {
                          sub_10047C8B0((uint64_t)v10, (uint64_t)v14);
                          sub_100098750(v50);
                          if (!v51)
                          {
                            sub_1000DB648(v50, (uint64_t)v6, type metadata accessor for DetailComponentContainerViewModel);
                            v52 = sub_10035CD60(v14, v6);
                            sub_1000215BC((uint64_t)v6, type metadata accessor for DetailComponentContainerViewModel);
                            sub_10009E47C((uint64_t)v17);
                            sub_10009E47C((uint64_t)v19);
                            sub_1000215BC((uint64_t)v14, type metadata accessor for DetailComponentContainerViewModel);
                            sub_10009E47C((uint64_t)v10);
                            return (v52 & 1) != 0;
                          }
                          sub_100021A14((uint64_t)v17, &qword_100BC68A0);
                          sub_100021A14((uint64_t)v19, &qword_100BC68A0);
                          sub_1000215BC((uint64_t)v14, type metadata accessor for DetailComponentContainerViewModel);
                        }
                        sub_100021A14((uint64_t)v10, &qword_100BCA048);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_100774D60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  __n128 v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v24 = *(_QWORD *)(v6 - 8);
  v25 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v11);
  v12 = sub_10009FFE0();
  v13 = (void *)static OS_dispatch_queue.main.getter(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  v14 = *(unsigned __int8 *)(v9 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = swift_allocObject(&unk_100B8F700, v15 + v10, v14 | 7);
  *(_OWORD *)(v16 + 16) = *(_OWORD *)(a1 + 16);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v16 + v15, (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  aBlock[4] = sub_100775EDC;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100121D84;
  aBlock[3] = &unk_100B8F718;
  v17 = _Block_copy(aBlock);
  v18 = swift_release();
  static DispatchQoS.unspecified.getter(v18);
  aBlock[0] = _swiftEmptyArrayStorage;
  v19 = sub_1001221E0();
  v20 = sub_1000BA294(&qword_100BD4F10);
  v21 = sub_100121014();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v20, v21, v3, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v5, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v8, v25);
}

uint64_t AnimatableValueObserverModifier.animatableData.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t AnimatableValueObserverModifier.animatableData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(v2 + *(int *)(a2 + 40), a1, v5);
  sub_100774D60(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
}

uint64_t *(*AnimatableValueObserverModifier.animatableData.modify(_QWORD *a1, uint64_t a2))(uint64_t *result, char a2)
{
  uint64_t v2;

  *a1 = a2;
  a1[1] = v2;
  return sub_10077502C;
}

uint64_t *sub_10077502C(uint64_t *result, char a2)
{
  if ((a2 & 1) == 0)
    return (uint64_t *)sub_100774D60(*result);
  return result;
}

uint64_t AnimatableValueObserverModifier.init(for:onChange:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v12 = *(_QWORD *)(a4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a6, a1, a4);
  v14 = type metadata accessor for AnimatableValueObserverModifier(0, a4, a5, v13);
  v15 = (_QWORD *)(a6 + *(int *)(v14 + 36));
  *v15 = a2;
  v15[1] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(a6 + *(int *)(v14 + 40), a1, a4);
}

uint64_t type metadata accessor for AnimatableValueObserverModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimatableValueObserverModifier);
}

uint64_t AnimatableValueObserverModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t WitnessTable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for AnimatableValueObserverModifier<A>, a2);
  v7 = type metadata accessor for _ViewModifier_Content(0, a2, WitnessTable);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v13 - v9;
  v11 = sub_10009D4E8((uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  sub_1000B2074(a1, v7, v11);
  sub_1000B1100((uint64_t)v10, v7, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1007751B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t (*v6)(uint64_t);

  result = type metadata accessor for AnimatableValueObserverModifier(0, a2, a3, a4);
  v6 = *(uint64_t (**)(uint64_t))(a1 + *(int *)(result + 36));
  if (v6)
    return v6(a1 + *(int *)(result + 40));
  return result;
}

void (*sub_100775200(_QWORD *a1, uint64_t a2))(_QWORD *a1)
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = AnimatableValueObserverModifier.animatableData.modify(v4, a2);
  return sub_100174830;
}

uint64_t sub_100775250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for AnimatableValueObserverModifier<A>, a5);
  return static AnimatableModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t sub_1007752C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for AnimatableValueObserverModifier<A>, a5);
  return static AnimatableModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t sub_100775338@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return AnimatableValueObserverModifier.body(content:)(a1, a2, a3);
}

uint64_t View.animatableValueObserver<A>(for:onChange:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a6;
  v25 = a8;
  v26 = a4;
  v13 = *(_QWORD *)(a5 - 8);
  __chkstk_darwin(a1);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for AnimatableValueObserverModifier(0, v17, v18, v16);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v25 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v15, a1, a5, v21);
  AnimatableValueObserverModifier.init(for:onChange:)((uint64_t)v15, a2, a3, a5, a7, (uint64_t)v23);
  sub_1000FDC6C(a2, a3);
  View.modifier<A>(_:)(v23, v26, v19, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
}

uint64_t sub_100775470(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for AnimatableValueObserverModifier<A>, a1);
}

uint64_t sub_100775480(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for AnimatableValueObserverModifier<A>, a1);
}

uint64_t sub_100775490(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t sub_100775498(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of AnimatableValueObserverModifier.body(content:)>>, 1);
}

uint64_t sub_1007754CC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1009C84D0;
    v4[2] = v4[0];
    swift_initStructMetadata(a1, 0, 3, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_100775544(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  void (*v12)(unint64_t, unint64_t, uint64_t, __n128);
  unint64_t v13;
  __n128 *v14;
  unint64_t v15;
  __n128 v16;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  if (v8 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v8 + 16 + ((v7 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v8) + v7 > 0x18)
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v11 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
    swift_retain(v11);
  }
  else
  {
    v12 = *(void (**)(unint64_t, unint64_t, uint64_t, __n128))(v6 + 16);
    ((void (*)(uint64_t *, uint64_t *, _QWORD))v12)(a1, a2, *(_QWORD *)(a3 + 16));
    v13 = ((unint64_t)v4 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    v14 = (__n128 *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v14->n128_u64[0] < 0xFFFFFFFF)
    {
      v16 = *v14;
      *(__n128 *)v13 = *v14;
    }
    else
    {
      v15 = v14->n128_u64[1];
      *(_QWORD *)v13 = v14->n128_u64[0];
      *(_QWORD *)(v13 + 8) = v15;
      v16 = swift_retain(v15);
    }
    v12((v13 + v8 + 16) & ~v8, ((unint64_t)v14[1].n128_u64 + v8) & ~v8, v5, v16);
  }
  return v4;
}

uint64_t sub_100775658(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(unint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v7 = *(uint64_t (**)(unint64_t, uint64_t))(v4 + 8);
  v7(a1, v3);
  v5 = (_QWORD *)((a1 + *(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8);
  if (*v5 >= 0xFFFFFFFFuLL)
    swift_release(v5[1]);
  return v7(((unint64_t)v5 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), v3);
}

uint64_t sub_1007756DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  unint64_t v9;
  __n128 *v10;
  unint64_t v11;
  __n128 v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64) + 7;
  v9 = (v8 + a1) & 0xFFFFFFFFFFFFFFF8;
  v10 = (__n128 *)((v8 + a2) & 0xFFFFFFFFFFFFFFF8);
  if (v10->n128_u64[0] < 0xFFFFFFFF)
  {
    v12 = *v10;
    *(__n128 *)v9 = *v10;
  }
  else
  {
    v11 = v10->n128_u64[1];
    *(_QWORD *)v9 = v10->n128_u64[0];
    *(_QWORD *)(v9 + 8) = v11;
    v12 = swift_retain(v11);
  }
  ((void (*)(unint64_t, unint64_t, uint64_t, __n128))v7)((v9 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v10[1].n128_u64 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5, v12);
  return a1;
}

uint64_t sub_100775788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64) + 7;
  v9 = (_QWORD *)((v8 + a1) & 0xFFFFFFFFFFFFFFF8);
  v10 = (unint64_t *)((v8 + a2) & 0xFFFFFFFFFFFFFFF8);
  v11 = *v10;
  if (*v9 < 0xFFFFFFFFuLL)
  {
    if (v11 >= 0xFFFFFFFF)
    {
      v14 = v10[1];
      *v9 = v11;
      v9[1] = v14;
      swift_retain(v14);
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)v9 = *(_OWORD *)v10;
    goto LABEL_8;
  }
  if (v11 < 0xFFFFFFFF)
  {
    swift_release(v9[1]);
    goto LABEL_7;
  }
  v12 = v10[1];
  v13 = v9[1];
  *v9 = v11;
  v9[1] = v12;
  swift_retain(v12);
  swift_release(v13);
LABEL_8:
  v7(((unint64_t)v9 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v10 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

unint64_t sub_10077587C(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64) + 7;
  v9 = (v8 + a1) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v10 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v9 = *(_OWORD *)v10;
  }
  else
  {
    v11 = *(_QWORD *)(v10 + 8);
    *(_QWORD *)v9 = *(_QWORD *)v10;
    *(_QWORD *)(v9 + 8) = v11;
  }
  v7((v9 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (v10 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

uint64_t sub_100775924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64) + 7;
  v9 = (_QWORD *)((v8 + a1) & 0xFFFFFFFFFFFFFFF8);
  v10 = (unint64_t *)((v8 + a2) & 0xFFFFFFFFFFFFFFF8);
  v11 = *v10;
  if (*v9 < 0xFFFFFFFFuLL)
  {
    if (v11 >= 0xFFFFFFFF)
    {
      v14 = v10[1];
      *v9 = v11;
      v9[1] = v14;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)v9 = *(_OWORD *)v10;
    goto LABEL_8;
  }
  if (v11 < 0xFFFFFFFF)
  {
    swift_release(v9[1]);
    goto LABEL_7;
  }
  v12 = v10[1];
  v13 = v9[1];
  *v9 = v11;
  v9[1] = v12;
  swift_release(v13);
LABEL_8:
  v7(((unint64_t)v9 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v10 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

uint64_t sub_100775A04(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  int v12;
  unsigned int v14;
  int v15;
  unint64_t v16;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= 0x7FFFFFFE)
    v7 = 2147483646;
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (!a2)
    return 0;
  v8 = *(_QWORD *)(v5 + 64);
  v9 = a2 - v7;
  if (a2 <= v7)
    goto LABEL_22;
  v10 = ((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
      + v8;
  v11 = 8 * v10;
  if (v10 <= 3)
  {
    v14 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      v12 = *(_DWORD *)(a1 + v10);
      if (!v12)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v14 > 0xFF)
    {
      v12 = *(unsigned __int16 *)(a1 + v10);
      if (!*(_WORD *)(a1 + v10))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v14 < 2)
    {
LABEL_22:
      if (v6 >= 0x7FFFFFFE)
        return _s7Weather24LocationCompositionStateOwet_0(a1, v6, v4);
      v16 = *(_QWORD *)((a1 + v8 + 7) & 0xFFFFFFFFFFFFF8);
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      if ((v16 + 1) >= 2)
        return v16;
      else
        return 0;
    }
  }
  v12 = *(unsigned __int8 *)(a1 + v10);
  if (!*(_BYTE *)(a1 + v10))
    goto LABEL_22;
LABEL_15:
  v15 = (v12 - 1) << v11;
  if (v10 > 3)
    v15 = 0;
  if (!(_DWORD)v10)
    return v7 + v15 + 1;
  if (v10 > 3)
    LODWORD(v10) = 4;
  return ((uint64_t (*)(void))((char *)&loc_100775AE4 + 4 * byte_1009C83C0[(v10 - 1)]))();
}

void sub_100775B5C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  char v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  v8 = 8 * v7;
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << v8)) >> v8) + 1;
      if (HIWORD(v11))
      {
        v9 = &dword_100000004;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v12 = v10 & ~(-1 << v8);
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_100775D6C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for AnimatableValueObserverModifier(255, *a1, a1[1], a4);
  v5 = sub_10009D4E8((uint64_t)&protocol conformance descriptor for AnimatableValueObserverModifier<A>);
  v6 = type metadata accessor for _ViewModifier_Content(255, v4, v5);
  return swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v6);
}

uint64_t sub_100775DBC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v5 = type metadata accessor for AnimatableValueObserverModifier(255, a1[1], a1[3], a4);
  type metadata accessor for ModifiedContent(255, v4, v5);
  swift_getWitnessTable(&protocol conformance descriptor for AnimatableValueObserverModifier<A>, v5);
  return sub_10009D4E8((uint64_t)&protocol conformance descriptor for <> ModifiedContent<A, B>);
}

uint64_t sub_100775E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  __n128 v12;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for AnimatableValueObserverModifier(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4 + v9, v5);
  if (*(_QWORD *)(v4 + v9 + *(int *)(v6 + 36)))
    v12 = swift_release();
  ((void (*)(uint64_t, uint64_t, __n128))v11)(v4 + v9 + *(int *)(v6 + 40), v5, v12);
  return swift_deallocObject(v4, v9 + v10, v8 | 7);
}

uint64_t sub_100775EDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AnimatableValueObserverModifier(0, v5, v6, a4) - 8)
                          + 80);
  return sub_1007751B4(v4 + ((v7 + 32) & ~v7), v5, v6, v8);
}

uint64_t *sub_100775F2C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    if (EnumCaseMultiPayload == 1)
    {
      v14 = type metadata accessor for UnitConfiguration.Temperature(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v14))
      {
        v15 = sub_1000BA294(&qword_100BD7148);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v14);
      }
      v10 = a1;
      v11 = a3;
      v12 = 1;
      goto LABEL_11;
    }
    if (!EnumCaseMultiPayload)
    {
      v9 = type metadata accessor for ConfiguredUnit(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = a1;
      v11 = a3;
      v12 = 0;
LABEL_11:
      swift_storeEnumTagMultiPayload(v10, v11, v12);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t sub_100776064(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload(a1);
  if ((_DWORD)result == 1)
  {
    v3 = type metadata accessor for UnitConfiguration.Temperature(0);
    result = _s7Weather24LocationCompositionStateOwet_0(a1, 1, v3);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  else if (!(_DWORD)result)
  {
    v3 = type metadata accessor for ConfiguredUnit(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

void *sub_1007760DC(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
  if (EnumCaseMultiPayload == 1)
  {
    v11 = type metadata accessor for UnitConfiguration.Temperature(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v11))
    {
      v12 = sub_1000BA294(&qword_100BD7148);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v11);
    }
    v8 = a1;
    v9 = a3;
    v10 = 1;
    goto LABEL_9;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = type metadata accessor for ConfiguredUnit(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = a3;
    v10 = 0;
LABEL_9:
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

void *sub_1007761EC(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_10077630C((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    if (EnumCaseMultiPayload == 1)
    {
      v11 = type metadata accessor for UnitConfiguration.Temperature(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v11))
      {
        v12 = sub_1000BA294(&qword_100BD7148);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v11);
      }
      v8 = a1;
      v9 = a3;
      v10 = 1;
      goto LABEL_10;
    }
    if (!EnumCaseMultiPayload)
    {
      v7 = type metadata accessor for ConfiguredUnit(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = a3;
      v10 = 0;
LABEL_10:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10077630C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ConfiguredUnitsAction(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_100776348(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
  if (EnumCaseMultiPayload == 1)
  {
    v11 = type metadata accessor for UnitConfiguration.Temperature(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v11))
    {
      v12 = sub_1000BA294(&qword_100BD7148);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v11);
    }
    v8 = a1;
    v9 = a3;
    v10 = 1;
    goto LABEL_9;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = type metadata accessor for ConfiguredUnit(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = a1;
    v9 = a3;
    v10 = 0;
LABEL_9:
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

void *sub_100776458(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_10077630C((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    if (EnumCaseMultiPayload == 1)
    {
      v11 = type metadata accessor for UnitConfiguration.Temperature(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v11))
      {
        v12 = sub_1000BA294(&qword_100BD7148);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v11);
      }
      v8 = a1;
      v9 = a3;
      v10 = 1;
      goto LABEL_10;
    }
    if (!EnumCaseMultiPayload)
    {
      v7 = type metadata accessor for ConfiguredUnit(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = a1;
      v9 = a3;
      v10 = 0;
LABEL_10:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

double sub_100776578@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  sub_10005E6A8();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  *a2 = v5;
  a2[1] = v6;
  result = *(double *)&v7;
  a2[2] = v7;
  return result;
}

uint64_t sub_1007765D0(void *a1, void *a2)
{
  id v4;
  id v5;
  char v6;

  if (a1)
  {
    if (a2)
    {
      sub_1000B4D98();
      v4 = a2;
      v5 = a1;
      v6 = static NSObject.== infix(_:_:)(v5, v4);

      if ((v6 & 1) != 0)
        return 1;
    }
  }
  else if (!a2)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_100776644()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  sub_1000986AC();
  v53 = v2;
  v54 = v3;
  v5 = v4;
  v7 = v6;
  v52 = sub_1000D1320();
  v47 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v46 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_1000BA294(&qword_100BE06D8);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_1000D9C54(v10, v45);
  sub_1000BA294(&qword_100BD7148);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  v48 = (uint64_t)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v50 = (uint64_t)&v45 - v14;
  v15 = sub_1000D1448();
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  sub_100079FBC();
  sub_1000C17FC();
  sub_1000B42B0();
  __chkstk_darwin(v17);
  sub_10003BC68();
  __chkstk_darwin(v18);
  v20 = (char *)&v45 - v19;
  sub_1000BA294(&qword_100C04640);
  sub_1000B42B0();
  __chkstk_darwin(v21);
  sub_100098728();
  v24 = v23 - v22;
  v26 = v23 - v22 + *(int *)(v25 + 48);
  sub_1007773A4(v7, v23 - v22);
  sub_1007773A4(v5, v26);
  v27 = sub_1000C5570(v24);
  if (!v27)
  {
    sub_1007773A4(v24, (uint64_t)v20);
    if (!sub_1000C5570(v26))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v0, v26, v15);
      v34 = ((uint64_t (*)(char *, uint64_t))static ConfiguredUnit.== infix(_:_:))(v20, v0);
      v36 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      v36(v0, v15);
      v36((uint64_t)v20, v15);
      sub_1000D201C();
      return v34 & 1;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v15);
    goto LABEL_14;
  }
  if (v27 != 1)
  {
    if (sub_1000C5570(v26) == 2)
      goto LABEL_12;
LABEL_14:
    sub_100021AA4(v24, &qword_100C04640);
LABEL_15:
    v34 = 0;
    return v34 & 1;
  }
  sub_1007773A4(v24, v1);
  if (sub_1000C5570(v26) != 1)
  {
    sub_100021AA4(v1, &qword_100BD7148);
    goto LABEL_14;
  }
  v28 = v50;
  sub_1007773E8(v26, v50);
  v29 = v51;
  v30 = v51 + *(int *)(v49 + 48);
  sub_1007773E8(v1, v51);
  sub_10015A350(v28, v30);
  v31 = v52;
  v32 = sub_100088FC8(v29, 1, v52);
  if (v38)
  {
    sub_1000DA7A4(v32, &qword_100BD7148);
    v33 = sub_100088FC8(v30, 1, v31);
    if (v38)
    {
      sub_1000DB104(v33, &qword_100BD7148);
      goto LABEL_12;
    }
LABEL_21:
    sub_1000DB104(v33, &qword_100BE06D8);
LABEL_23:
    sub_1000D201C();
    goto LABEL_15;
  }
  v37 = v48;
  sub_10015A350(v29, v48);
  v39 = sub_100088FC8(v30, 1, v31);
  if (v38)
  {
    sub_1000DA7A4(v39, &qword_100BD7148);
    v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(v37, v31);
    goto LABEL_21;
  }
  v41 = v46;
  v40 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v46, v30, v31);
  sub_100086DA4(qword_100BE06E0, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Temperature, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Temperature);
  v43 = dispatch thunk of static Equatable.== infix(_:_:)(v37, v41, v31, v42);
  v44 = *(void (**)(char *, uint64_t))(v40 + 8);
  v44(v41, v31);
  sub_100021AA4(v28, &qword_100BD7148);
  v44((char *)v37, v31);
  sub_100021AA4(v29, &qword_100BD7148);
  if ((v43 & 1) == 0)
    goto LABEL_23;
LABEL_12:
  sub_1000D201C();
  v34 = 1;
  return v34 & 1;
}

void sub_100776A2C(uint64_t a1, void *a2)
{
  id v4;

  if (a2)
  {
    sub_1000CFF28();
    v4 = a2;
    NSObject.hash(into:)(a1);

  }
  else
  {
    sub_1000D0340();
  }
}

void sub_100776A8C(void *a1)
{
  id v2;
  _BYTE v3[72];

  sub_1000C4480((uint64_t)a1);
  if (a1)
  {
    sub_1000CFF28();
    v2 = a1;
    NSObject.hash(into:)(v3);

  }
  else
  {
    sub_1000D0340();
  }
  sub_10007A148();
  sub_100098918();
}

void sub_100776AD8()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;

  v1 = *(void **)v0;
  v18 = v1;
  if (v1)
  {
    sub_100075E0C(1u);
    v2 = v1;
    sub_1000C4E5C();
    sub_10009AA4C(&v18);
  }
  else
  {
    sub_100075E0C(0);
  }
  v3 = *(void **)(v0 + 8);
  v17 = v3;
  if (v3)
  {
    sub_100075E0C(1u);
    v4 = v3;
    sub_1000C4E5C();
    sub_10009AA4C(&v17);
  }
  else
  {
    sub_100075E0C(0);
  }
  v5 = *(void **)(v0 + 16);
  v16 = v5;
  if (v5)
  {
    sub_100075E0C(1u);
    v6 = v5;
    sub_1000C4E5C();
    sub_10009AA4C(&v16);
  }
  else
  {
    sub_100075E0C(0);
  }
  v7 = *(void **)(v0 + 24);
  v15 = v7;
  if (v7)
  {
    sub_100075E0C(1u);
    v8 = v7;
    sub_1000C4E5C();
    sub_10009AA4C(&v15);
  }
  else
  {
    sub_100075E0C(0);
  }
  v9 = *(void **)(v0 + 32);
  v14 = v9;
  if (v9)
  {
    sub_100075E0C(1u);
    v10 = v9;
    sub_1000C4E5C();
    sub_10009AA4C(&v14);
  }
  else
  {
    sub_100075E0C(0);
  }
  v11 = *(void **)(v0 + 40);
  v13 = v11;
  if (v11)
  {
    sub_100075E0C(1u);
    v12 = v11;
    sub_1000C4E5C();
    sub_10009AA4C(&v13);
  }
  else
  {
    sub_100075E0C(0);
  }
}

void sub_100776C28(uint64_t a1)
{
  sub_1000C4480(a1);
  sub_100776AD8();
  sub_10007A148();
  sub_100098918();
}

void sub_100776C50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_1000986AC();
  v2 = v0;
  v4 = v3;
  v5 = sub_1000D1320();
  v27 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_1000D9C54(v6, v26);
  sub_1000BA294(&qword_100BD7148);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_10003BC68();
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - v9;
  v11 = sub_1000D1448();
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_100098728();
  v15 = v14 - v13;
  sub_1000C17FC();
  sub_1000B42B0();
  __chkstk_darwin(v16);
  sub_100098728();
  v19 = v18 - v17;
  sub_1007773A4(v2, v18 - v17);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v19);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_1007773E8(v19, (uint64_t)v10);
      Hasher._combine(_:)(2uLL);
      sub_10015A350((uint64_t)v10, v1);
      sub_100088FC8(v1, 1, v5);
      if (v21)
      {
        sub_1000D0340();
      }
      else
      {
        v24 = v26;
        v23 = v27;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v26, v1, v5);
        sub_1000CFF28();
        sub_100086DA4(&qword_100BEA110, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Temperature, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Temperature);
        dispatch thunk of Hashable.hash(into:)(v4, v5, v25);
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v24, v5);
      }
      sub_100021AA4((uint64_t)v10, &qword_100BD7148);
    }
    else
    {
      Hasher._combine(_:)(1uLL);
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v15, v19, v11);
    Hasher._combine(_:)(0);
    sub_100086DA4(&qword_100C04648, (uint64_t (*)(uint64_t))&type metadata accessor for ConfiguredUnit, (uint64_t)&protocol conformance descriptor for ConfiguredUnit);
    dispatch thunk of Hashable.hash(into:)(v4, v11, v22);
    sub_1000BE774(v15, *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
  }
  sub_100098640();
}

void sub_100776E60(uint64_t a1)
{
  sub_1000C4480(a1);
  sub_100776C50();
  sub_10007A148();
  sub_100098918();
}

double sub_100776E88@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  result = sub_100776578(a1, v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_100776EC8(void **a1, void **a2)
{
  return sub_1007765D0(*a1, *a2);
}

void sub_100776EDC()
{
  void **v0;

  sub_100776A8C(*v0);
}

void sub_100776EE4(uint64_t a1)
{
  void **v1;

  sub_100776A2C(a1, *v1);
}

Swift::Int sub_100776EEC()
{
  void **v0;
  void *v1;
  id v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    v2 = v1;
    NSObject.hash(into:)(v4);

  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int sub_100776F58()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_100776AD8();
  return Hasher._finalize()();
}

Swift::Int sub_100776F98()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_100776C50();
  return Hasher._finalize()();
}

void sub_100776FD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t inited;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_1000986AC();
  v2 = v0;
  v4 = v3;
  v5 = sub_1000BA294(&qword_100BD7148);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100099864();
  v7 = sub_1000D1448();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100098728();
  v11 = v10 - v9;
  v12 = sub_1000C17FC();
  sub_1000B42B0();
  __chkstk_darwin(v13);
  sub_100098728();
  v16 = v15 - v14;
  sub_1007773A4(v2, v15 - v14);
  v17 = sub_1000C5570(v16);
  if (v17)
  {
    if (v17 == 1)
    {
      sub_1007773E8(v16, v1);
      v18 = sub_1000BA294(&qword_100BC31F0);
      inited = swift_initStackObject(v18, &v28);
      *(_OWORD *)(inited + 16) = xmmword_10097CA50;
      *(_QWORD *)(inited + 32) = 0xD000000000000015;
      *(_QWORD *)(inited + 40) = 0x8000000100A12DD0;
      *(_QWORD *)(inited + 72) = v5;
      sub_100077A84((_QWORD *)(inited + 48));
      sub_10015A350(v1, v20);
      v21 = Dictionary.init(dictionaryLiteral:)(inited);
      sub_100021AA4(v1, &qword_100BD7148);
    }
    else
    {
      v24 = sub_1000BA294(&qword_100BC31F0);
      v25 = swift_initStackObject(v24, &v26);
      *(_OWORD *)(v25 + 16) = xmmword_10097CA50;
      *(_QWORD *)(v25 + 32) = 0x6C6C417465736572;
      *(_QWORD *)(v25 + 40) = 0xE800000000000000;
      *(_QWORD *)(v25 + 72) = &type metadata for String;
      *(_QWORD *)(v25 + 48) = 1702195828;
      *(_QWORD *)(v25 + 56) = 0xE400000000000000;
      v21 = Dictionary.init(dictionaryLiteral:)(v25);
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11, v16, v7);
    v22 = sub_1000BA294(&qword_100BC31F0);
    v23 = swift_initStackObject(v22, &v27);
    *(_OWORD *)(v23 + 16) = xmmword_10097CA50;
    *(_QWORD *)(v23 + 32) = 1953066613;
    *(_QWORD *)(v23 + 40) = 0xE400000000000000;
    *(_QWORD *)(v23 + 72) = v7;
    sub_100077A84((_QWORD *)(v23 + 48));
    (*(void (**)(void))(v8 + 16))();
    v21 = Dictionary.init(dictionaryLiteral:)(v23);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
  }
  v4[3] = sub_1000BA294(&qword_100C04650);
  v4[4] = sub_100777430();
  sub_100077A84(v4);
  ShortDescription.init(name:_:)(0xD000000000000015, 0x80000001009C84E0, v21, v12);
  sub_100098640();
}

uint64_t sub_10077728C(uint64_t a1)
{
  uint64_t v2;

  sub_100086DA4(qword_100C04660, type metadata accessor for ConfiguredUnitsAction, (uint64_t)&unk_1009C8540);
  return ShortDescribable.description.getter(a1, v2);
}

void sub_1007772CC()
{
  sub_100086DA4(&qword_100C04620, type metadata accessor for ConfiguredUnitsAction, (uint64_t)&unk_1009C8518);
}

void sub_1007772F8()
{
  sub_100086DA4(&qword_100C04628, type metadata accessor for ConfiguredUnitsAction, (uint64_t)&unk_1009C8630);
}

unint64_t sub_100777328()
{
  unint64_t result;

  result = qword_100C04630;
  if (!qword_100C04630)
  {
    result = swift_getWitnessTable(&unk_1009C8658, &type metadata for ConfiguredUnitsState);
    atomic_store(result, (unint64_t *)&qword_100C04630);
  }
  return result;
}

unint64_t sub_100777368()
{
  unint64_t result;

  result = qword_100C04638;
  if (!qword_100C04638)
  {
    result = swift_getWitnessTable(&unk_1009C8680, &type metadata for ConfiguredUnitState);
    atomic_store(result, (unint64_t *)&qword_100C04638);
  }
  return result;
}

uint64_t sub_1007773A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConfiguredUnitsAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1007773E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BD7148);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100777430()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C04658;
  if (!qword_100C04658)
  {
    v1 = sub_100075EB0(&qword_100C04650);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100C04658);
  }
  return result;
}

void **initializeBufferWithCopyOfBuffer for ConfiguredUnitState(void **a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  *a1 = *a2;
  v4 = v3;
  return a1;
}

void **assignWithCopy for ConfiguredUnitState(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  v5 = v4;

  return a1;
}

void **assignWithTake for ConfiguredUnitState(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for ConfiguredUnitState(uint64_t *a1, unsigned int a2)
{
  int v2;
  uint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfiguredUnitState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfiguredUnitState()
{
  return &type metadata for ConfiguredUnitState;
}

void destroy for ConfiguredUnitsState(id *a1)
{

}

_QWORD *initializeWithCopy for ConfiguredUnitsState(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = *(void **)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  a1[2] = v5;
  a1[3] = v6;
  v7 = *(void **)(a2 + 32);
  v8 = *(void **)(a2 + 40);
  a1[4] = v7;
  a1[5] = v8;
  v9 = v3;
  v10 = v4;
  v11 = v5;
  v12 = v6;
  v13 = v7;
  v14 = v8;
  return a1;
}

uint64_t assignWithCopy for ConfiguredUnitsState(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  v10 = *(void **)(a1 + 16);
  v11 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  v12 = v11;

  v13 = *(void **)(a1 + 24);
  v14 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v14;
  v15 = v14;

  v16 = *(void **)(a1 + 32);
  v17 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v17;
  v18 = v17;

  v19 = *(void **)(a1 + 40);
  v20 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v20;
  v21 = v20;

  return a1;
}

uint64_t assignWithTake for ConfiguredUnitsState(uint64_t a1, _OWORD *a2)
{
  void *v4;
  void *v5;
  void *v6;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];

  v6 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = a2[2];

  return a1;
}

uint64_t getEnumTagSinglePayload for ConfiguredUnitsState(uint64_t *a1, unsigned int a2)
{
  int v2;
  uint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 48))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfiguredUnitsState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t type metadata accessor for NoAqiSevereNhpContentView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NoAqiSevereNhpContentView);
}

uint64_t sub_100777834(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100AC042C, 1);
}

uint64_t sub_100777868@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  void *v24;
  uint64_t v25;
  uint64_t (*v26)(_QWORD, _QWORD);
  uint64_t WitnessTable;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t (*v51)(_QWORD, _QWORD);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  _QWORD v63[2];
  _QWORD v64[2];
  _QWORD v65[4];
  _BYTE v66[488];
  _QWORD v67[62];

  v62 = a4;
  v55 = a3;
  v60 = a7;
  v67[0] = a5;
  v67[1] = a5;
  v67[2] = a5;
  v67[3] = a5;
  v10 = a2;
  v11 = a2 & 0x100;
  v67[4] = a5;
  v67[5] = a5;
  v67[6] = a5;
  v67[7] = a5;
  v12 = sub_1000BBB64(255, 8, (uint64_t)v67);
  v53 = sub_1000AE86C(v12);
  v13 = type metadata accessor for Group(0, v53);
  v14 = *(_QWORD *)(v13 - 8);
  v56 = v13;
  v57 = v14;
  __chkstk_darwin(v13);
  sub_1000986FC();
  v59 = v15;
  __chkstk_darwin(v16);
  v58 = (char *)&v48 - v17;
  v67[0] = a5;
  v67[1] = a5;
  v67[2] = type metadata accessor for Optional(255, a5);
  v67[3] = a5;
  v67[4] = a5;
  v67[5] = a5;
  v67[6] = a5;
  v18 = sub_1000BBB64(255, 7, (uint64_t)v67);
  v51 = (uint64_t (*)(_QWORD, _QWORD))sub_1000AE86C(v18);
  v54 = type metadata accessor for Group(0, v51);
  v52 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  sub_1000986FC();
  v20 = v19;
  __chkstk_darwin(v21);
  v61 = (char *)&v48 - v22;
  if (v10)
  {
    if (v10 == 1)
    {
      if (v11)
      {
        v23 = &unk_100C07E70;
        goto LABEL_11;
      }
    }
    else if (v11)
    {
      v23 = &unk_100C08240;
      goto LABEL_11;
    }
    v23 = &unk_100C08058;
    goto LABEL_11;
  }
  if (v11)
    v23 = &unk_100C07AA0;
  else
    v23 = &unk_100C07C88;
LABEL_11:
  memcpy(v67, v23, 0x1E8uLL);
  v24 = memcpy(v66, v67, sizeof(v66));
  v50 = &v48;
  __chkstk_darwin(v24);
  *(&v48 - 8) = a5;
  *(&v48 - 7) = a6;
  v48 = a1;
  *(&v48 - 6) = a1;
  *((_BYTE *)&v48 - 40) = v10;
  HIDWORD(v49) = v11 >> 8;
  *((_BYTE *)&v48 - 39) = BYTE1(v11);
  v25 = v62;
  *(&v48 - 4) = v55;
  *(&v48 - 3) = v25;
  *(&v48 - 2) = (uint64_t)v66;
  v26 = v51;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v51);
  Group<A>.init(content:)(sub_100778D3C, &v48 - 10, v26, WitnessTable);
  v65[3] = WitnessTable;
  v28 = v54;
  v50 = (uint64_t *)swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v54);
  sub_1000B2074(v20, v28, v50);
  v29 = v52;
  v51 = *(uint64_t (**)(_QWORD, _QWORD))(v52 + 8);
  v30 = v51(v20, v28);
  __chkstk_darwin(v30);
  *(&v48 - 8) = a5;
  *(&v48 - 7) = a6;
  *(&v48 - 6) = v48;
  *((_BYTE *)&v48 - 40) = v10;
  *((_BYTE *)&v48 - 39) = BYTE4(v49);
  v31 = v62;
  *(&v48 - 4) = v32;
  *(&v48 - 3) = v31;
  *(&v48 - 2) = (uint64_t)v66;
  v33 = v53;
  v34 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v53);
  v35 = v59;
  Group<A>.init(content:)(sub_100778D48, &v48 - 10, v33, v34);
  v65[2] = v34;
  v36 = v56;
  v37 = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v56);
  v38 = (uint64_t)v58;
  sub_1000B2074(v35, v36, v37);
  v39 = v57;
  sub_1000C3530(v35);
  v40 = *(void (**)(uint64_t, char *, uint64_t))(v29 + 16);
  v41 = v61;
  v40(v20, v61, v28);
  v65[0] = v20;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v35, v38, v36);
  v65[1] = v35;
  v64[0] = v28;
  v64[1] = v36;
  v63[0] = v50;
  v63[1] = v37;
  sub_10052800C((uint64_t)v65, 2, (uint64_t)v64, (uint64_t)v63, v42, v43, v44, v45, v48, v49, (uint64_t)v50, (uint64_t)v51, v52, v53, v54, v55, v56, v57);
  sub_1000C3530(v38);
  v46 = v51;
  v51(v41, v28);
  sub_1000C3530(v35);
  return v46(v20, v28);
}

uint64_t sub_100777C8C@<X0>(uint64_t a1@<X0>, void (*a2)(char *, _QWORD, _QWORD, _QWORD, _QWORD)@<X2>, _QWORD *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  void (*v61)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t);
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  void (*v106)(char *, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v107;
  uint64_t v108;
  _QWORD v109[7];
  _QWORD v110[7];
  _QWORD v111[7];
  _BYTE v112[24];
  _BYTE v113[40];
  _QWORD v114[4];
  char v115;

  v103 = a5;
  v106 = a2;
  v90 = a6;
  v10 = sub_1000BA294(&qword_100BC4A98);
  __chkstk_darwin(v10);
  v85 = (uint64_t)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for Optional(0, a4);
  v95 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v107 = (uint64_t)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v102 = (uint64_t)&v82 - v14;
  v86 = (void (*)(uint64_t, uint64_t))type metadata accessor for LocationComponentContainerViewModel(0);
  __chkstk_darwin(v86);
  v83 = (uint64_t)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v82 - v17;
  v19 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(v20);
  v89 = (char *)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v88 = (char *)&v82 - v23;
  __chkstk_darwin(v24);
  v99 = (char *)&v82 - v25;
  __chkstk_darwin(v26);
  v97 = (char *)&v82 - v27;
  __chkstk_darwin(v28);
  v98 = (char *)&v82 - v29;
  __chkstk_darwin(v30);
  v96 = (char *)&v82 - v31;
  __chkstk_darwin(v32);
  v93 = (char *)&v82 - v33;
  __chkstk_darwin(v34);
  v92 = (char *)&v82 - v35;
  __chkstk_darwin(v36);
  v105 = (char *)&v82 - v37;
  __chkstk_darwin(v38);
  v101 = (char *)&v82 - v39;
  __chkstk_darwin(v40);
  v42 = (char *)&v82 - v41;
  __chkstk_darwin(v43);
  v45 = (char *)&v82 - v44;
  sub_100080E30(a1 + OBJC_IVAR____TtCV7Weather21NoAqiSevereNhpContent8_Storage_severeAlert, (uint64_t)v18);
  a2(v18, a3[41], a3[42], a3[43], a3[44]);
  sub_100080DF4((uint64_t)v18);
  v91 = v45;
  v46 = v103;
  sub_1000B2074(v42, a4, v103);
  v87 = v19;
  v47 = *(void (**)(char *, uint64_t))(v19 + 8);
  v48 = v85;
  v47(v42, a4);
  sub_100080E30(a1 + OBJC_IVAR____TtCV7Weather21NoAqiSevereNhpContent8_Storage_nextHourPrecipitation, (uint64_t)v18);
  v106(v18, a3[29], a3[30], a3[31], a3[32]);
  v84 = v18;
  sub_100080DF4((uint64_t)v18);
  sub_1000B2074(v42, a4, v46);
  v104 = v42;
  v47(v42, a4);
  v94 = a1;
  v49 = a1 + OBJC_IVAR____TtCV7Weather21NoAqiSevereNhpContent8_Storage_map;
  swift_beginAccess(a1 + OBJC_IVAR____TtCV7Weather21NoAqiSevereNhpContent8_Storage_map, v112, 0, 0);
  sub_1001A1D04(v49, v48);
  if (_s7Weather24LocationCompositionStateOwet_0(v48, 1, (uint64_t)v86) == 1)
  {
    sub_1001A1D4C(v48);
    v50 = 1;
    v51 = a3;
  }
  else
  {
    v52 = v83;
    sub_1001A1D8C(v48, v83);
    sub_1001A1DD0((uint64_t)(a3 + 20), (uint64_t)v113);
    sub_1001A1DD0((uint64_t)v113, (uint64_t)v114);
    v51 = a3;
    if (v115 == 1)
    {
      sub_100080DF4(v52);
      v50 = 1;
    }
    else
    {
      v53 = v105;
      v106((char *)v52, v114[0], v114[1], v114[2], v114[3]);
      sub_100080DF4(v52);
      v54 = (uint64_t)v104;
      sub_1000B2074(v53, a4, v103);
      v47(v53, a4);
      sub_1000B1100(v54, a4, v107);
      v47((char *)v54, a4);
      v50 = 0;
    }
  }
  v55 = v107;
  _s7Weather24LocationCompositionStateOwst_0(v107, v50, 1, a4);
  v56 = v103;
  sub_100158984(v55, a4, v102);
  v86 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
  v86(v55, v100);
  v57 = v94;
  v58 = (uint64_t)v84;
  sub_100080E30(*(_QWORD *)(v94 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, (uint64_t)v84);
  v59 = v105;
  v106((char *)v58, v51[12], v51[13], v51[14], v51[15]);
  sub_100080DF4(v58);
  sub_1000B2074(v59, a4, v56);
  v47(v59, a4);
  sub_100080E30(*(_QWORD *)(v57 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v58);
  v60 = v92;
  v61 = (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))v106;
  v106((char *)v58, v51[4], v51[5], v51[6], v51[7]);
  sub_100080DF4(v58);
  v62 = v103;
  sub_1000B2074(v60, a4, v103);
  v47(v60, a4);
  sub_100080E30(*(_QWORD *)(v57 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex, v58);
  v63 = v93;
  v61(v58, v51[49], v51[50], v51[51], v51[52]);
  sub_100080DF4(v58);
  sub_1000B2074(v63, a4, v62);
  v47(v63, a4);
  sub_100080E30(*(_QWORD *)(v94 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, v58);
  v64 = v96;
  v61(v58, v51[45], v51[46], v51[47], v51[48]);
  sub_100080DF4(v58);
  v65 = v62;
  sub_1000B2074(v64, a4, v62);
  v47(v64, a4);
  v66 = *(void (**)(char *, char *, uint64_t))(v87 + 16);
  v66(v64, v91, a4);
  v111[0] = v64;
  v67 = v98;
  v66(v98, v101, a4);
  v111[1] = v67;
  v68 = v107;
  v69 = v100;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 16))(v107, v102, v100);
  v111[2] = v68;
  v70 = v97;
  v66(v97, v104, a4);
  v111[3] = v70;
  v71 = v99;
  v66(v99, v105, a4);
  v111[4] = v71;
  v72 = (uint64_t)v88;
  v73 = v92;
  v66(v88, v92, a4);
  v111[5] = v72;
  v74 = (uint64_t)v89;
  v75 = v93;
  v66(v89, v93, a4);
  v111[6] = v74;
  v110[0] = a4;
  v110[1] = a4;
  v110[2] = v69;
  v110[3] = a4;
  v110[4] = a4;
  v110[5] = a4;
  v110[6] = a4;
  v109[0] = v65;
  v109[1] = v65;
  v108 = v65;
  v109[2] = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v69);
  v109[3] = v65;
  v109[4] = v65;
  v109[5] = v65;
  v109[6] = v65;
  sub_10052800C((uint64_t)v111, 7, (uint64_t)v110, (uint64_t)v109, v76, v77, v78, v79, v82, v83, (uint64_t)v84, v85, (uint64_t)v86, v87, (uint64_t)v88, (uint64_t)v89, v90, (uint64_t)v91);
  v47(v75, a4);
  v47(v73, a4);
  v47(v105, a4);
  v47(v104, a4);
  v80 = v86;
  v86(v102, v69);
  v47(v101, a4);
  v47(v91, a4);
  v47((char *)v74, a4);
  v47((char *)v72, a4);
  v47(v99, a4);
  v47(v97, a4);
  v80(v107, v69);
  v47(v98, a4);
  return ((uint64_t (*)(char *, uint64_t))v47)(v96, a4);
}

uint64_t sub_1007784CC@<X0>(uint64_t a1@<X0>, void (*a2)(char *, _QWORD, _QWORD, _QWORD, _QWORD)@<X2>, _QWORD *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  _QWORD v93[8];
  _QWORD v94[8];
  _QWORD v95[8];

  v78 = a6;
  v11 = type metadata accessor for LocationComponentContainerViewModel(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(v14);
  v77 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v76 = (char *)&v74 - v17;
  __chkstk_darwin(v18);
  v92 = (char *)&v74 - v19;
  __chkstk_darwin(v20);
  v91 = (char *)&v74 - v21;
  __chkstk_darwin(v22);
  v89 = (char *)&v74 - v23;
  __chkstk_darwin(v24);
  v87 = (char *)&v74 - v25;
  __chkstk_darwin(v26);
  v86 = (char *)&v74 - v27;
  __chkstk_darwin(v28);
  v85 = (char *)&v74 - v29;
  __chkstk_darwin(v30);
  v75 = (uint64_t)&v74 - v31;
  __chkstk_darwin(v32);
  v83 = (char *)&v74 - v33;
  __chkstk_darwin(v34);
  v81 = (char *)&v74 - v35;
  __chkstk_darwin(v36);
  v79 = (char *)&v74 - v37;
  __chkstk_darwin(v38);
  v80 = (char *)&v74 - v39;
  __chkstk_darwin(v40);
  v42 = (char *)&v74 - v41;
  __chkstk_darwin(v43);
  v45 = (char *)&v74 - v44;
  __chkstk_darwin(v46);
  v88 = (char *)&v74 - v47;
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind, (uint64_t)v13);
  a2(v13, a3[57], a3[58], a3[59], a3[60]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v45, a4, a5);
  v48 = *(void (**)(char *, uint64_t))(v90 + 8);
  v84 = v45;
  v48(v45, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)v13);
  a2(v13, a3[37], a3[38], a3[39], a3[40]);
  sub_100080DF4((uint64_t)v13);
  v49 = a5;
  sub_1000B2074(v42, a4, a5);
  v82 = v42;
  v48(v42, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike, (uint64_t)v13);
  v50 = (uint64_t)v80;
  a2(v13, a3[8], a3[9], a3[10], a3[11]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v50, a4, v49);
  v48((char *)v50, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)v13);
  v51 = (uint64_t)v79;
  a2(v13, a3[16], a3[17], a3[18], a3[19]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v51, a4, v49);
  v48((char *)v51, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility, (uint64_t)v13);
  v52 = (uint64_t)v81;
  a2(v13, a3[53], a3[54], a3[55], a3[56]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v52, a4, v49);
  v48((char *)v52, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, (uint64_t)v13);
  v53 = (uint64_t)v83;
  a2(v13, a3[33], a3[34], a3[35], a3[36]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v53, a4, v49);
  v48((char *)v53, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, (uint64_t)v13);
  v54 = v75;
  a2(v13, a3[25], a3[26], a3[27], a3[28]);
  sub_100080DF4((uint64_t)v13);
  v55 = v54;
  v74 = v49;
  sub_1000B2074(v54, a4, v49);
  v48((char *)v54, a4);
  sub_100080E30(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, (uint64_t)v13);
  v56 = v85;
  a2(v13, *a3, a3[1], a3[2], a3[3]);
  sub_100080DF4((uint64_t)v13);
  sub_1000B2074(v56, a4, v49);
  v48(v56, a4);
  v57 = *(void (**)(char *, char *, uint64_t))(v90 + 16);
  v57(v56, v88, a4);
  v95[0] = v56;
  v58 = v86;
  v57(v86, v84, a4);
  v95[1] = v58;
  v59 = v87;
  v57(v87, v82, a4);
  v95[2] = v59;
  v60 = v89;
  v61 = (uint64_t)v80;
  v57(v89, v80, a4);
  v95[3] = v60;
  v62 = v91;
  v63 = (uint64_t)v79;
  v57(v91, v79, a4);
  v95[4] = v62;
  v64 = v92;
  v65 = (uint64_t)v81;
  v57(v92, v81, a4);
  v95[5] = v64;
  v66 = (uint64_t)v76;
  v67 = (uint64_t)v83;
  v57(v76, v83, a4);
  v95[6] = v66;
  v68 = (uint64_t)v77;
  v57(v77, (char *)v55, a4);
  v95[7] = v68;
  v94[0] = a4;
  v94[1] = a4;
  v94[2] = a4;
  v94[3] = a4;
  v94[4] = a4;
  v94[5] = a4;
  v94[6] = a4;
  v94[7] = a4;
  v93[0] = v74;
  v93[1] = v74;
  v93[2] = v74;
  v93[3] = v74;
  v93[4] = v74;
  v93[5] = v74;
  v93[6] = v74;
  v93[7] = v74;
  sub_10052800C((uint64_t)v95, 8, (uint64_t)v94, (uint64_t)v93, v69, v70, v71, v72, v74, v75, (uint64_t)v76, (uint64_t)v77, v78, (uint64_t)v79, (uint64_t)v80, (uint64_t)v81, (uint64_t)v82, (uint64_t)v83);
  v48((char *)v55, a4);
  v48((char *)v67, a4);
  v48((char *)v65, a4);
  v48((char *)v63, a4);
  v48((char *)v61, a4);
  v48(v82, a4);
  v48(v84, a4);
  v48(v88, a4);
  v48((char *)v68, a4);
  v48((char *)v66, a4);
  v48(v92, a4);
  v48(v91, a4);
  v48(v89, a4);
  v48(v87, a4);
  v48(v86, a4);
  return ((uint64_t (*)(char *, uint64_t))v48)(v85, a4);
}

uint64_t sub_100778D10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int16 v3;

  if (*(_BYTE *)(v2 + 9))
    v3 = 256;
  else
    v3 = 0;
  return sub_100777868(*(_QWORD *)v2, v3 | *(unsigned __int8 *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t sub_100778D3C()
{
  return sub_1001A1CD4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100777C8C);
}

uint64_t sub_100778D48()
{
  return sub_1001A1CD4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1007784CC);
}

_QWORD *sub_100778D54()
{
  _QWORD *v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 2);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 7);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 12);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 17);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 22);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 27);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 32);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 37);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 42);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 47);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 52);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 57);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 62);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 67);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 72);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 77);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 82);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 87);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 92);
  return v0;
}

uint64_t sub_100778E00()
{
  uint64_t v0;

  sub_100778D54();
  return swift_deallocClassInstance(v0, 776, 7);
}

ValueMetadata *type metadata accessor for Sidebar()
{
  return &type metadata for Sidebar;
}

uint64_t sub_100778E34(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v2 + 66) = a2;
  *(_QWORD *)(v2 + 80) = a1;
  v3 = type metadata accessor for DispatchAction(0);
  *(_QWORD *)(v2 + 88) = v3;
  *(_QWORD *)(v2 + 96) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v2 + 104) = v4;
  *(_QWORD *)(v2 + 112) = static MainActor.shared.getter(v4);
  v5 = sub_100099AB8();
  *(_QWORD *)(v2 + 120) = v5;
  *(_QWORD *)(v2 + 128) = v6;
  return swift_task_switch(sub_100778EC4, v5, v6);
}

uint64_t sub_100778EC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  char v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  if (qword_100BC24D8 != -1)
    swift_once(&qword_100BC24D8, sub_1006F39A0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_1000AECD4(v1, (uint64_t)qword_100CAF270);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_BYTE *)(v0 + 66) & 1;
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v19 = v7;
    *(_DWORD *)v6 = 136315138;
    *(_BYTE *)(v0 + 65) = v5;
    v8 = String.init<A>(describing:)(v0 + 65);
    *(_QWORD *)(v0 + 72) = sub_1000CE1C8(v8, v9, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Adjusting sidebar state: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1);
    sub_1000986F0(v7);
    sub_1000986F0((uint64_t)v6);
  }

  v10 = *(BOOL **)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 88);
  *v10 = (*(_BYTE *)(v0 + 66) & 1) == 0;
  v12 = type metadata accessor for ViewAction(0);
  sub_1000C4054(v12, v12);
  v13 = type metadata accessor for MainAction(0);
  *(_QWORD *)(v0 + 136) = v13;
  v14 = sub_1000C4054(v13, v13);
  v15 = *(int *)(v11 + 20);
  *(_DWORD *)(v0 + 68) = v15;
  v10[v15] = 0;
  *(_QWORD *)(v0 + 144) = static MainActor.shared.getter(v14);
  v16 = sub_100099AB8();
  return swift_task_switch(sub_1007790BC, v16, v17);
}

uint64_t sub_1007790BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(int *)(v0 + 68);
  v2 = *(_QWORD *)(v0 + 96);
  swift_release();
  if (*(_BYTE *)(v2 + v1) == 1)
  {
    v3 = *(_QWORD *)(v0 + 96);
    v4 = *(_QWORD *)(v0 + 80);
    v5 = swift_task_alloc(32);
    *(_QWORD *)(v5 + 16) = v4;
    *(_QWORD *)(v5 + 24) = v3;
    v6 = static Animation.default.getter(v5);
    withAnimation<A>(_:_:)(v6, sub_100779300, v5, &type metadata for () + 1);
    swift_release();
    swift_task_dealloc(v5);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 96);
    v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 80) + 16);
    v10 = sub_1000BA294(&qword_100BD3370);
    v11 = *(_QWORD *)(v7 - 8);
    v12 = *(_QWORD *)(v11 + 72);
    v13 = *(unsigned __int8 *)(v11 + 80);
    v14 = (v13 + 32) & ~v13;
    v15 = swift_allocObject(v10, v14 + v12, v13 | 7);
    *(_OWORD *)(v15 + 16) = xmmword_10097CA50;
    sub_1000A1570(v8, v15 + v14);
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    *(_QWORD *)(v0 + 48) = 0;
    *(_QWORD *)(v0 + 56) = v15;
    *(_BYTE *)(v0 + 64) = 0;
    sub_10009FF10(v0 + 16, v9);
    sub_100779284(v0 + 16);
  }
  return swift_task_switch(sub_1007791F0, *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
}

uint64_t sub_1007791F0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release();
  sub_1007792C4(v1);
  swift_task_dealloc(v1);
  return sub_1000950D8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100779230(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  char v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_100C04844);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100223BE0;
  return sub_100778E34(a1, v4);
}

uint64_t sub_100779284(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BD3378);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1007792C4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DispatchAction(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100779300()
{
  uint64_t v0;

  return sub_10090EB88(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t _s7Weather7SidebarV5StateOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100779364 + 4 * byte_1009C8909[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100779398 + 4 * byte_1009C8904[v4]))();
}

uint64_t sub_100779398(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007793A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1007793A8);
  return result;
}

uint64_t sub_1007793B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1007793BCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1007793C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007793C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Sidebar.State()
{
  return &type metadata for Sidebar.State;
}

unint64_t sub_1007793E8()
{
  unint64_t result;

  result = qword_100C04848;
  if (!qword_100C04848)
  {
    result = swift_getWitnessTable(&unk_1009C8970, &type metadata for Sidebar.State);
    atomic_store(result, (unint64_t *)&qword_100C04848);
  }
  return result;
}

unint64_t sub_100779424(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v19 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_10008D47C(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_BYTE *)(a2 + 24);
    sub_10008D47C(v9, v10);
    *(_QWORD *)(a1 + 16) = v9;
    *(_BYTE *)(a1 + 24) = v10;
    v11 = *(int *)(a3 + 24);
    v12 = (_QWORD *)(a1 + v11);
    v13 = (_QWORD *)(a2 + v11);
    v14 = sub_1000BA294(&qword_100BC68C8);
    if (swift_getEnumCaseMultiPayload(v13) == 1)
    {
      v15 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
      v16 = v12;
      v17 = v14;
      v18 = 1;
    }
    else
    {
      *v12 = *v13;
      swift_retain();
      v16 = v12;
      v17 = v14;
      v18 = 0;
    }
    swift_storeEnumTagMultiPayload(v16, v17, v18);
  }
  return a1;
}

double sub_10077953C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  sub_1000B15F8(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  sub_1000B15F8(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 24);
  sub_1000BA294(&qword_100BC68C8);
  if (swift_getEnumCaseMultiPayload(v4) == 1)
  {
    v5 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

uint64_t sub_1007795C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10008D47C(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 24);
  sub_10008D47C(v8, v9);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  v13 = sub_1000BA294(&qword_100BC68C8);
  if (swift_getEnumCaseMultiPayload(v12) == 1)
  {
    v14 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
    v15 = 1;
  }
  else
  {
    *v11 = *v12;
    swift_retain();
    v15 = 0;
  }
  swift_storeEnumTagMultiPayload(v11, v13, v15);
  return a1;
}

uint64_t sub_1007796A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10008D47C(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1000B15F8(v8, v9);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_BYTE *)(a2 + 24);
  sub_10008D47C(v10, v11);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 24) = v11;
  sub_1000B15F8(v12, v13);
  if (a1 != a2)
  {
    v14 = *(int *)(a3 + 24);
    v15 = (_QWORD *)(a1 + v14);
    v16 = (_QWORD *)(a2 + v14);
    sub_100021AA4(a1 + v14, &qword_100BC68C8);
    v17 = sub_1000BA294(&qword_100BC68C8);
    if (swift_getEnumCaseMultiPayload(v16) == 1)
    {
      v18 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = 1;
    }
    else
    {
      *v15 = *v16;
      swift_retain();
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v17, v19);
  }
  return a1;
}

uint64_t sub_1007797BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(int *)(a3 + 24);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = sub_1000BA294(&qword_100BC68C8);
  if (swift_getEnumCaseMultiPayload(v6) == 1)
  {
    v8 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10077987C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  void *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1000B15F8(v8, v9);
  v10 = *((_BYTE *)a2 + 24);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = v10;
  sub_1000B15F8(v11, v12);
  if ((uint64_t *)a1 != a2)
  {
    v13 = *(int *)(a3 + 24);
    v14 = (void *)(a1 + v13);
    v15 = (char *)a2 + v13;
    sub_100021AA4(a1 + v13, &qword_100BC68C8);
    v16 = sub_1000BA294(&qword_100BC68C8);
    if (swift_getEnumCaseMultiPayload(v15) == 1)
    {
      v17 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
      swift_storeEnumTagMultiPayload(v14, v16, 1);
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100779974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100779980);
}

uint64_t sub_100779980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = sub_1000BA294(&qword_100BCD380);
    return _s7Weather24LocationCompositionStateOwet_0(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_1007799F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1007799FC);
}

uint64_t sub_1007799FC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  else
  {
    v7 = sub_1000BA294(&qword_100BCD380);
    return _s7Weather24LocationCompositionStateOwst_0(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_100779A68(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AC0540, 1);
}

void sub_100779A78(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  __n128 v34;
  int v35;
  uint64_t v36;
  char v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  int v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v3 = v2;
  v56 = a2;
  v5 = type metadata accessor for BlendMode(0);
  v54 = *(_QWORD *)(v5 - 8);
  v55 = v5;
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_100098728();
  v53 = v8 - v7;
  v9 = type metadata accessor for ColorSchemeContrast(0);
  v50 = *(_QWORD *)(v9 - 8);
  sub_10009D98C();
  __chkstk_darwin(v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v49 - v14;
  sub_1000BA294(&qword_100C048E8);
  sub_10009D98C();
  __chkstk_darwin(v16);
  sub_100098728();
  v19 = v18 - v17;
  v51 = sub_1000BA294(&qword_100C048F0);
  sub_10009D98C();
  __chkstk_darwin(v20);
  sub_100098728();
  v23 = v22 - v21;
  v52 = sub_1000BA294(&qword_100C048F8);
  sub_10009D98C();
  __chkstk_darwin(v24);
  sub_100098728();
  v27 = v26 - v25;
  *(_QWORD *)v19 = static VerticalAlignment.center.getter(v28);
  *(_QWORD *)(v19 + 8) = 0;
  *(_BYTE *)(v19 + 16) = 1;
  v29 = sub_1000BA294(&qword_100C04900);
  sub_100779DB0(a1, v3, v19 + *(int *)(v29 + 44));
  v30 = *(_QWORD *)(v3 + 16);
  v31 = *(_BYTE *)(v3 + 24);
  sub_10008D47C(v30, v31);
  sub_100109B54();
  v33 = v32;
  sub_1000B15F8(v30, v31);
  if ((v33 & 1) != 0)
  {
    v35 = static HierarchicalShapeStyle.secondary.getter(v34);
  }
  else
  {
    type metadata accessor for LocationFooterViewRowStyle(0);
    sub_100114A94();
    v36 = v50;
    (*(void (**)(char *, _QWORD, uint64_t))(v50 + 104))(v12, enum case for ColorSchemeContrast.increased(_:), v9);
    v37 = static ColorSchemeContrast.== infix(_:_:)(v15, v12);
    v38 = *(void (**)(char *, uint64_t))(v36 + 8);
    v38(v12, v9);
    v39 = ((uint64_t (*)(char *, uint64_t))v38)(v15, v9);
    if ((v37 & 1) != 0)
      v35 = static HierarchicalShapeStyle.primary.getter(v39);
    else
      v35 = static HierarchicalShapeStyle.tertiary.getter(v39);
  }
  v40 = v35;
  sub_100037768(v19, v23, &qword_100C048E8);
  *(_DWORD *)(v23 + *(int *)(v51 + 36)) = v40;
  sub_100021AA4(v19, &qword_100C048E8);
  v41 = *(_QWORD *)(v3 + 16);
  v42 = *(_BYTE *)(v3 + 24);
  sub_10008D47C(v41, v42);
  sub_100109B54();
  v44 = v43;
  sub_1000B15F8(v41, v42);
  v45 = (unsigned int *)&enum case for BlendMode.normal(_:);
  v47 = v54;
  v46 = v55;
  if ((v44 & 1) == 0)
    v45 = (unsigned int *)&enum case for BlendMode.plusLighter(_:);
  v48 = v53;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v54 + 104))(v53, *v45, v55);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v27 + *(int *)(v52 + 36), v48, v46);
  sub_100037768(v23, v27, &qword_100C048F0);
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v48, v46);
  sub_100021AA4(v23, &qword_100C048F0);
  sub_1000787D4(v27, v56, &qword_100C048F8);
}

void sub_100779DB0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  char *v26;
  uint64_t (*v27)(char *, _QWORD, uint64_t);
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t KeyPath;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;

  v54 = a1;
  v62 = a3;
  v4 = type metadata accessor for LabelStyleConfiguration.Icon(0);
  v60 = *(_QWORD *)(v4 - 8);
  v61 = v4;
  __chkstk_darwin(v4);
  v59 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v58 = (char *)&v52 - v7;
  v8 = sub_1000BA294(&qword_100BCCDA8);
  __chkstk_darwin(v8);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Font.TextStyle(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for LabelStyleConfiguration.Title(0, v13);
  v56 = *(_QWORD *)(v16 - 8);
  v57 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_1000BA294(&qword_100C04908);
  __chkstk_darwin(v53);
  v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_1000BA294(&qword_100C04910);
  __chkstk_darwin(v55);
  v22 = (char *)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v52 - v25;
  LabelStyleConfiguration.title.getter(v24);
  v27 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v12 + 104);
  v28 = v27(v15, enum case for Font.TextStyle.subheadline(_:), v11);
  static Font.Weight.semibold.getter(v28);
  v52 = static Font.system(_:weight:)(v15);
  v29 = *(void (**)(char *, uint64_t))(v12 + 8);
  v29(v15, v11);
  v30 = v27(v15, enum case for Font.TextStyle.footnote(_:), v11);
  static Font.Weight.bold.getter(v30);
  v31 = static Font.system(_:weight:)(v15);
  v29(v15, v11);
  v32 = *(_QWORD *)a2;
  LOBYTE(v11) = *(_BYTE *)(a2 + 8);
  sub_10008D47C(*(_QWORD *)a2, v11);
  sub_100109B54();
  LOBYTE(v29) = v33;
  sub_1000B15F8(v32, v11);
  v34 = enum case for Font.Leading.tight(_:);
  v35 = type metadata accessor for Font.Leading(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v10, v34, v35);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v35);
  v36 = (uint64_t *)&v20[*(int *)(v53 + 36)];
  v37 = type metadata accessor for FontWithSmallVariantModifier(0);
  sub_100037768((uint64_t)v10, (uint64_t)v36 + *(int *)(v37 + 24), &qword_100BCCDA8);
  *v36 = v52;
  v36[1] = v31;
  *((_BYTE *)v36 + *(int *)(v37 + 28)) = v29 & 1;
  v39 = v56;
  v38 = v57;
  (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v20, v18, v57);
  sub_100021AA4((uint64_t)v10, &qword_100BCCDA8);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v18, v38);
  KeyPath = swift_getKeyPath(&unk_1009C8A10);
  sub_100037768((uint64_t)v20, (uint64_t)v22, &qword_100C04908);
  v41 = &v22[*(int *)(v55 + 36)];
  *(_QWORD *)v41 = KeyPath;
  v41[8] = 0;
  sub_100021AA4((uint64_t)v20, &qword_100C04908);
  sub_1000787D4((uint64_t)v22, (uint64_t)v26, &qword_100C04910);
  v42 = v58;
  LabelStyleConfiguration.icon.getter();
  sub_100037768((uint64_t)v26, (uint64_t)v22, &qword_100C04910);
  v63 = 1;
  v43 = v59;
  v44 = v60;
  v45 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
  v46 = v61;
  v45(v59, v42, v61);
  v47 = v62;
  sub_100037768((uint64_t)v22, v62, &qword_100C04910);
  v48 = sub_1000BA294(&qword_100C04918);
  v49 = v47 + *(int *)(v48 + 48);
  v50 = v63;
  *(_QWORD *)v49 = 0;
  *(_BYTE *)(v49 + 8) = v50;
  v45((char *)(v47 + *(int *)(v48 + 64)), v43, v46);
  v51 = *(void (**)(char *, uint64_t))(v44 + 8);
  v51(v42, v46);
  sub_100021AA4((uint64_t)v26, &qword_100C04910);
  v51(v43, v46);
  sub_100021AA4((uint64_t)v22, &qword_100C04910);
}

unint64_t sub_10077A230()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C04920;
  if (!qword_100C04920)
  {
    v1 = sub_100075EB0(&qword_100C048F8);
    sub_10077A29C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C04920);
  }
  return result;
}

unint64_t sub_10077A29C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C04928;
  if (!qword_100C04928)
  {
    v1 = sub_100075EB0(&qword_100C048F0);
    sub_10003D310(&qword_100C04930, &qword_100C048E8, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_10003D310(&qword_100BC3AE0, &qword_100BC3AE8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C04928);
  }
  return result;
}

_QWORD *sub_10077A338(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *__dst;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for LocationModel(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
    v9 = (_QWORD *)((char *)a1 + v8);
    v10 = (char *)a2 + v8;
    v11 = *(_QWORD *)((char *)a2 + v8 + 8);
    *v9 = *(_QWORD *)((char *)a2 + v8);
    v9[1] = v11;
    v12 = type metadata accessor for ConditionPickerMenuViewModel(0);
    v13 = *(int *)(v12 + 20);
    __dst = (char *)v9 + v13;
    v14 = &v10[v13];
    v15 = type metadata accessor for WeatherCondition(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, v15))
    {
      v16 = sub_1000BA294(&qword_100BC3660);
      memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(__dst, v14, v15);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v15);
    }
    *(_QWORD *)((char *)v9 + *(int *)(v12 + 24)) = *(_QWORD *)&v10[*(int *)(v12 + 24)];
    v18 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v18) = *((_BYTE *)a2 + v18);
    v19 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *((_BYTE *)a1 + v19) = *((_BYTE *)a2 + v19);
    v20 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *(_QWORD *)((char *)a1 + v20) = *(_QWORD *)((char *)a2 + v20);
    v21 = a3[14];
    *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
    v22 = (_QWORD *)((char *)a1 + v21);
    v23 = (_QWORD *)((char *)a2 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = v23[3];
    v22[2] = v23[2];
    v22[3] = v25;
    v26 = v23[5];
    v22[4] = v23[4];
    v22[5] = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10077A528(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  const void *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  v6 = type metadata accessor for LocationModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = a3[6];
  v8 = (_QWORD *)(a1 + v7);
  v9 = a2 + v7;
  *v8 = *(_QWORD *)(a2 + v7);
  v8[1] = *(_QWORD *)(a2 + v7 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = type metadata accessor for ConditionPickerMenuViewModel(0);
  v11 = *(int *)(v10 + 20);
  v12 = (char *)v8 + v11;
  v13 = (const void *)(v9 + v11);
  v14 = type metadata accessor for WeatherCondition(0);
  v15 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v14);
  v16 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v14);
  if (!v15)
  {
    v17 = *(_QWORD *)(v14 - 8);
    if (!v16)
    {
      (*(void (**)(char *, const void *, uint64_t))(v17 + 24))(v12, v13, v14);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v18 = sub_1000BA294(&qword_100BC3660);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v14);
LABEL_7:
  *(_QWORD *)((char *)v8 + *(int *)(v10 + 24)) = *(_QWORD *)(v9 + *(int *)(v10 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v19 = a3[14];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  *v20 = *(_QWORD *)(a2 + v19);
  v20[1] = *(_QWORD *)(a2 + v19 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20[2] = v21[2];
  v20[3] = v21[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20[4] = v21[4];
  v20[5] = v21[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10077A794(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;

  v6 = type metadata accessor for LocationModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v10 = type metadata accessor for ConditionPickerMenuViewModel(0);
  v11 = *(int *)(v10 + 20);
  v12 = (void *)(v8 + v11);
  v13 = (const void *)(v9 + v11);
  v14 = type metadata accessor for WeatherCondition(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v14))
  {
    v15 = sub_1000BA294(&qword_100BC3660);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v14);
  }
  *(_QWORD *)(v8 + *(int *)(v10 + 24)) = *(_QWORD *)(v9 + *(int *)(v10 + 24));
  v16 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
  v17 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  v18 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  v19 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v20 = (_OWORD *)(a1 + v19);
  v21 = (__int128 *)(a2 + v19);
  v22 = v21[2];
  v23 = *v21;
  v20[1] = v21[1];
  v20[2] = v22;
  *v20 = v23;
  return a1;
}

uint64_t sub_10077A90C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = sub_1000BC4BC();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = v4;
    return _s7Weather24LocationCompositionStateOwet_0(v8, v3, v7);
  }
  if ((_DWORD)v3 != 0x7FFFFFFF)
  {
    v7 = type metadata accessor for ConditionPickerMenuViewModel(0);
    v8 = v4 + *(int *)(a3 + 24);
    return _s7Weather24LocationCompositionStateOwet_0(v8, v3, v7);
  }
  v9 = *(_QWORD *)(v4 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10077A99C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = sub_1000BC4BC();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
  {
    v9 = result;
    v10 = v5;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(v5 + *(int *)(a4 + 20)) = (v4 - 1);
      return result;
    }
    v9 = type metadata accessor for ConditionPickerMenuViewModel(0);
    v10 = v5 + *(int *)(a4 + 24);
  }
  return _s7Weather24LocationCompositionStateOwst_0(v10, v4, v4, v9);
}

ValueMetadata *type metadata accessor for LocationViewerActiveHeaderViewModel()
{
  return &type metadata for LocationViewerActiveHeaderViewModel;
}

void sub_10077AA40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  type metadata accessor for TemperatureAveragesDetailInput(0);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100098728();
  type metadata accessor for PrecipitationAveragesDetailInput(0);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100098728();
  type metadata accessor for AveragesDetailInput.Content(0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100098728();
  v7 = v6 - v5;
  sub_10077B09C(a1, v6 - v5);
  v8 = (char *)sub_10077AB08 + 4 * byte_1009C8B20[swift_getEnumCaseMultiPayload(v7)];
  __asm { BR              X10 }
}

void sub_10077AB08()
{
  _BYTE *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10077ACF0(*v2, v3 - 160);
  sub_1000BA294(&qword_100BE4A60);
  memcpy(v0, (const void *)(v3 - 160), 0x60uLL);
  v0[96] = *(_BYTE *)(v1 + *(int *)(sub_1000C30B4() + 20));
  v4 = type metadata accessor for Location(0);
  sub_1000BB540(v4);
  sub_1000C4060();
  v5 = sub_1000D1F6C();
  swift_storeEnumTagMultiPayload(v5, v6, 3);
}

uint64_t sub_10077ACF0@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  void *v4;
  id v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t countAndFlagsBits;
  void *object;
  id v11;
  unint64_t v12;
  const char *v13;
  void *v14;
  id v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  id v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  id v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  unint64_t v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;

  if (a1)
  {
    if (a1 != 1)
    {
      v27 = (void *)objc_opt_self(NSBundle);
      v28 = objc_msgSend(v27, "mainBundle");
      v29._countAndFlagsBits = 0xD000000000000018;
      v46._countAndFlagsBits = 0xD000000000000053;
      v46._object = (void *)0x8000000100A13130;
      v29._object = (void *)0x8000000100A13110;
      v30._countAndFlagsBits = 0;
      v30._object = (void *)0xE000000000000000;
      v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v29, (Swift::String_optional)0, (NSBundle)v28, v30, v46);
      countAndFlagsBits = v31._countAndFlagsBits;
      object = v31._object;

      v32 = objc_msgSend(v27, "mainBundle");
      v33._countAndFlagsBits = 0xD00000000000004ALL;
      v47._countAndFlagsBits = 0xD000000000000055;
      v47._object = (void *)0x8000000100A131E0;
      v33._object = (void *)0x8000000100A13190;
      v34._countAndFlagsBits = 0;
      v34._object = (void *)0xE000000000000000;
      v35 = NSLocalizedString(_:tableName:bundle:value:comment:)(v33, (Swift::String_optional)0, (NSBundle)v32, v34, v47);
      v22 = v35._object;

      v23 = static String.localizedStringWithFormat(_:_:)(v35._countAndFlagsBits, v35._object, _swiftEmptyArrayStorage);
      v25 = v36;
      v3 = 0xD00000000000001BLL;
      v26 = 0x8000000100A130F0;
      goto LABEL_7;
    }
    v3 = 0x616C732E69666977;
    v4 = (void *)objc_opt_self(NSBundle);
    v5 = objc_msgSend(v4, "mainBundle");
    v6._countAndFlagsBits = 0xD000000000000016;
    v44._countAndFlagsBits = 0xD00000000000005DLL;
    v44._object = (void *)0x8000000100A13260;
    v6._object = (void *)0x8000000100A13240;
    v7._countAndFlagsBits = 0;
    v7._object = (void *)0xE000000000000000;
    v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v44);
    countAndFlagsBits = v8._countAndFlagsBits;
    object = v8._object;

    v11 = objc_msgSend(v4, "mainBundle");
    v12 = 0xD00000000000005FLL;
    v13 = "Message for error when weather averages are unavailable because there is no internet connection";
  }
  else
  {
    v3 = 0x616C732E69666977;
    v14 = (void *)objc_opt_self(NSBundle);
    v15 = objc_msgSend(v14, "mainBundle");
    v16._countAndFlagsBits = 0xD000000000000014;
    v45._countAndFlagsBits = 0xD000000000000051;
    v45._object = (void *)0x8000000100A13380;
    v16._object = (void *)0x8000000100A13360;
    v17._countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)v15, v17, v45);
    countAndFlagsBits = v18._countAndFlagsBits;
    object = v18._object;

    v11 = objc_msgSend(v14, "mainBundle");
    v12 = 0xD000000000000053;
    v13 = "Message for error when weather averages are unavailable because airplane mode is on";
  }
  v43 = (unint64_t)(v13 - 32) | 0x8000000000000000;
  v19._object = (void *)0x8000000100A132C0;
  v19._countAndFlagsBits = 0xD000000000000037;
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, (Swift::String_optional)0, (NSBundle)v11, v20, *(Swift::String *)&v12);
  v22 = v21._object;

  v23 = static String.localizedStringWithFormat(_:_:)(v21._countAndFlagsBits, v21._object, _swiftEmptyArrayStorage);
  v25 = v24;
  v26 = 0xEA00000000006873;
LABEL_7:
  v37 = swift_bridgeObjectRelease(v22);
  v38 = static Color.blue.getter(v37);
  v39 = Color.hex.getter();
  v41 = v40;
  result = swift_release(v38);
  *(_BYTE *)a2 = 1;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v26;
  *(_QWORD *)(a2 + 24) = countAndFlagsBits;
  *(_QWORD *)(a2 + 32) = object;
  *(_QWORD *)(a2 + 40) = v23;
  *(_QWORD *)(a2 + 48) = v25;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = v39;
  *(_QWORD *)(a2 + 88) = v41;
  return result;
}

uint64_t type metadata accessor for AveragesDetailViewModelFactory()
{
  return objc_opt_self(_TtC7Weather30AveragesDetailViewModelFactory);
}

uint64_t sub_10077B09C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AveragesDetailInput.Content(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10077B0E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(_QWORD);
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void (*v66)(uint64_t);
  uint64_t v68;
  uint64_t v69;
  Swift::String v70;

  v59 = sub_1000BA294(&qword_100BC4E68);
  v56 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  sub_100088FDC();
  v54 = v6;
  v52 = sub_1000BA294(&qword_100BDD4A0);
  v53 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  sub_100088FDC();
  v49 = v7;
  v8 = type metadata accessor for WeatherFormatPlaceholder(0);
  v9 = *(_QWORD *)(v8 - 8);
  v63 = v9;
  __chkstk_darwin(v8);
  sub_1000BCA48();
  v11 = v10;
  v69 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(0);
  v60 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  sub_1000BCA48();
  v13 = v12;
  v14 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v70._countAndFlagsBits = 0x1000000000000181;
  v70._object = (void *)0x8000000100A134B0;
  v15._object = (void *)0x8000000100A13440;
  v15._countAndFlagsBits = 0x100000000000006FLL;
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)v14, v16, v70);

  v18 = sub_1000BA294(&qword_100BCE380);
  v19 = type metadata accessor for WeatherDescription.Argument(0);
  v20 = *(_QWORD *)(v19 - 8);
  v68 = v19;
  v21 = *(unsigned __int8 *)(v20 + 80);
  v22 = (v21 + 32) & ~v21;
  v58 = *(_QWORD *)(v20 + 72);
  v55 = swift_allocObject(v18, v22 + 5 * v58, v21 | 7);
  *(_OWORD *)(v55 + 16) = xmmword_1009891E0;
  v62 = (_QWORD *)(v55 + v22);
  *v62 = a4;
  v62[1] = a5;
  v61 = *(uint64_t (**)(_QWORD))(v20 + 104);
  ((void (*)(uint64_t, _QWORD, uint64_t))v61)(v55 + v22, enum case for WeatherDescription.Argument.string(_:), v19);
  v23 = (uint64_t *)(v55 + v22 + v58);
  swift_bridgeObjectRetain(a5);
  sub_1000C4E68();
  LODWORD(a4) = enum case for WeatherFormatPlaceholder.none(_:);
  v66 = *(void (**)(uint64_t))(v9 + 104);
  v24 = v8;
  v66(v11);
  v64 = type metadata accessor for UnitManager(0);
  v25 = static UnitManager.standard.getter(v64);
  v65 = sub_1000A9A78();
  v26 = Measurement.formatted<A>(_:placeholder:unitManager:)(v13, v11, v25, &protocol witness table for UnitManager, v59, v69, v65);
  v28 = v27;
  v29 = swift_release(v25);
  (*(void (**)(uint64_t, uint64_t, __n128))(v63 + 8))(v11, v8, v29);
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v13, v69);
  *v23 = v26;
  v23[1] = v28;
  LODWORD(v60) = enum case for WeatherDescription.Argument.measurement(_:);
  v30 = v61(v23);
  v31 = (uint64_t *)(v55 + v22 + 2 * v58);
  v32 = v13;
  static WeatherFormatStyle<>.weather.getter(v30);
  ((void (*)(uint64_t, _QWORD, uint64_t))v66)(v11, a4, v24);
  v33 = sub_1000B4DA0();
  v34 = Measurement.formatted<A>(_:placeholder:unitManager:)(v32, v11, v33, &protocol witness table for UnitManager, v59, v69, v65);
  v50 = v35;
  swift_release(v33);
  sub_1000DD388();
  v36 = v32;
  sub_1000CD23C();
  *v31 = v34;
  v31[1] = v50;
  ((void (*)(uint64_t *, _QWORD, uint64_t))v61)(v31, v60, v68);
  v37 = (uint64_t *)(v55 + v22 + 3 * v58);
  v51 = sub_1000BA294(&qword_100BCB238);
  Trend.baseline.getter();
  TrendBaseline.value.getter(v52);
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v49, v52);
  sub_1000C4E68();
  sub_1000C30BC(v11, a4);
  v38 = sub_1000B4DA0();
  v39 = sub_1000C4068(v36, v11, v38, (uint64_t)&protocol witness table for UnitManager, v59, v69);
  v41 = v40;
  swift_release(v38);
  sub_1000DD388();
  sub_1000CD23C();
  v57 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
  v57(v54, v59);
  *v37 = v39;
  v37[1] = v41;
  sub_1000BB558();
  v42 = (uint64_t *)(v55 + v22 + 4 * v58);
  Trend.currentValue.getter(v51);
  sub_1000C4E68();
  sub_1000C30BC(v11, a4);
  v43 = sub_1000B4DA0();
  v44 = sub_1000C4068(v36, v11, v43, (uint64_t)&protocol witness table for UnitManager, v59, v69);
  v46 = v45;
  swift_release(v43);
  sub_1000DD388();
  sub_1000CD23C();
  v57(v54, v59);
  *v42 = v44;
  v42[1] = v46;
  sub_1000BB558();
  return WeatherDescription.init(format:_:)(v17._countAndFlagsBits, v17._object, v55, v47);
}

ValueMetadata *type metadata accessor for TemperatureAveragesSummaryStringBuilder()
{
  return &type metadata for TemperatureAveragesSummaryStringBuilder;
}

void sub_10077B698()
{
  EnvironmentValues.horizontalSizeClass.getter();
  sub_10004A298();
}

uint64_t sub_10077B6B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10077B800(a1, a2, a3, a4, &qword_100BC5A68, (uint64_t (*)(uint64_t))&EnvironmentValues.horizontalSizeClass.setter);
}

void sub_10077B6C8(uint64_t a1)
{
  EnvironmentValues.sizeCategory.getter(a1);
  sub_10004A298();
}

uint64_t sub_10077B6E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for ContentSizeCategory(0);
  __chkstk_darwin(v3);
  sub_100099864();
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v1, a1);
  return EnvironmentValues.sizeCategory.setter(v1);
}

_QWORD *sub_10077B750()
{
  _QWORD *v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 2);
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 8);
  swift_release();
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 15);
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 21);
  return v0;
}

uint64_t sub_10077B7A4()
{
  uint64_t v0;

  sub_10077B750();
  return swift_deallocClassInstance(v0, 208, 7);
}

void sub_10077B7C4(uint64_t a1)
{
  EnvironmentValues.sizeCategory.getter(a1);
  sub_10004A298();
}

void sub_10077B7E4()
{
  EnvironmentValues.legibilityWeight.getter();
  sub_10004A298();
}

uint64_t sub_10077B800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v6;
  uint64_t v10;

  sub_1000BA294(a5);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100098694();
  sub_10007EC08(a1, v6, a5);
  return a6(v6);
}

uint64_t sub_10077B874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10077B800(a1, a2, a3, a4, &qword_100C04B78, (uint64_t (*)(uint64_t))&EnvironmentValues.legibilityWeight.setter);
}

void sub_10077B898()
{
  EnvironmentValues.horizontalSizeClass.getter();
  sub_10004A298();
}

uint64_t sub_10077B8B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10077B800(a1, a2, a3, a4, &qword_100BC5A68, (uint64_t (*)(uint64_t))&EnvironmentValues.horizontalSizeClass.setter);
}

uint64_t *sub_10077B8D8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    v12 = a3[7];
    v13 = a3[8];
    v14 = (uint64_t *)((char *)a1 + v12);
    v15 = (uint64_t *)((char *)a2 + v12);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    v17 = (uint64_t *)((char *)a1 + v13);
    v18 = (uint64_t *)((char *)a2 + v13);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v19);
  }
  return a1;
}

double sub_10077B9A8(uint64_t a1, int *a2)
{
  uint64_t v4;
  double result;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8)).n128_u64[0];
  return result;
}

uint64_t sub_10077BA10(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  v11 = a3[7];
  v12 = a3[8];
  v13 = (_QWORD *)(a1 + v11);
  v14 = (_QWORD *)(a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = (_QWORD *)(a1 + v12);
  v17 = (_QWORD *)(a2 + v12);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t sub_10077BAB4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[7];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[8];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  return a1;
}

uint64_t sub_10077BB94(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t sub_10077BC0C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[7];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  v19 = a3[8];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  v24 = v20[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease(v24);
  return a1;
}

uint64_t sub_10077BCB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10077BCC4);
}

void sub_10077BCC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_1000E7478();
  v4 = type metadata accessor for Date(v3);
  if (*(_DWORD *)(*(_QWORD *)(v4 - 8) + 84) == (_DWORD)v1)
  {
    sub_1000B250C(v0, v1, v4);
  }
  else
  {
    sub_10003BCA4(*(_QWORD *)(v0 + *(int *)(v2 + 24) + 8));
    sub_100079F70();
  }
}

uint64_t sub_10077BD18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10077BD24);
}

void sub_10077BD24()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_1000CCD14();
  if (*(_DWORD *)(*(_QWORD *)(type metadata accessor for Date(v4) - 8) + 84) == v3)
  {
    v5 = sub_1000B4784();
    sub_1000987C4(v5, v6, v7, v8);
  }
  else
  {
    *(_QWORD *)(v1 + *(int *)(v2 + 24) + 8) = (v0 - 1);
    sub_100079F70();
  }
}

uint64_t type metadata accessor for PeakUpperMarkModel(uint64_t a1)
{
  return sub_100098190(a1, qword_100C04BD8, (uint64_t)&nominal type descriptor for PeakUpperMarkModel);
}

uint64_t sub_10077BD84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10077C6C0(a1, a2, a3, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&value witness table for Builtin.Int64 + 64, (uint64_t)&unk_1009C8D28, (uint64_t)&unk_1009C8D40);
}

void sub_10077BDAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;

  if ((static Date.== infix(_:_:)(a1, a2) & 1) != 0)
  {
    v4 = type metadata accessor for PeakUpperMarkModel(0);
    if (*(double *)(a1 + *(int *)(v4 + 20)) == *(double *)(a2 + *(int *)(v4 + 20)))
    {
      v5 = *(int *)(v4 + 24);
      v6 = *(_QWORD *)(a1 + v5);
      v7 = *(_QWORD *)(a1 + v5 + 8);
      v8 = (uint64_t *)(a2 + v5);
      v9 = v8[1];
      v10 = v6 == *v8 && v7 == v9;
      if (v10 || (sub_100099264(v6, v7, *v8, v9) & 1) != 0)
      {
        sub_1000C2898();
        if (v11)
        {
          if (!v12)
            goto LABEL_24;
          v15 = *v13 == *v14 && v11 == v12;
          if (!v15 && (sub_100099264(*v13, v11, *v14, v12) & 1) == 0)
            goto LABEL_24;
        }
        else if (v12)
        {
          goto LABEL_24;
        }
        sub_1000C2898();
        if (v16 && v17 && (*v18 != *v19 || v16 != v17))
          sub_100099264(*v18, v16, *v19, v17);
      }
    }
  }
LABEL_24:
  sub_100079F70();
}

uint64_t *sub_10077BEA0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v31 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v31 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for PeakUpperMarkModel(0);
    *(uint64_t *)((char *)a1 + v8[5]) = *(uint64_t *)((char *)a2 + v8[5]);
    v9 = v8[6];
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v13 = *v11;
    v12 = v11[1];
    *v10 = v13;
    v10[1] = v12;
    v14 = v8[7];
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = v8[8];
    v19 = (uint64_t *)((char *)a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v22 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v22) = *(uint64_t *)((char *)a2 + v22);
    v23 = a3[7];
    v24 = a3[8];
    v25 = (char *)a1 + v23;
    v26 = (char *)a2 + v23;
    v27 = *((_QWORD *)v26 + 1);
    *(_QWORD *)v25 = *(_QWORD *)v26;
    *((_QWORD *)v25 + 1) = v27;
    v25[16] = v26[16];
    *((_QWORD *)v25 + 3) = *((_QWORD *)v26 + 3);
    v28 = (char *)a1 + v24;
    v29 = (char *)a2 + v24;
    v30 = *((_QWORD *)v29 + 1);
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *((_QWORD *)v28 + 1) = v30;
    v28[16] = v29[16];
    *((_QWORD *)v28 + 3) = *((_QWORD *)v29 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

double sub_10077C014(uint64_t a1)
{
  uint64_t v2;
  double result;

  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  type metadata accessor for PeakUpperMarkModel(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_10077C0CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for PeakUpperMarkModel(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  v8 = v7[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  v13 = v7[7];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = v7[8];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);
  v22 = a3[7];
  v23 = a3[8];
  v24 = a1 + v22;
  v25 = a2 + v22;
  v26 = *(_QWORD *)(v25 + 8);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_QWORD *)(v24 + 8) = v26;
  *(_BYTE *)(v24 + 16) = *(_BYTE *)(v25 + 16);
  *(_QWORD *)(v24 + 24) = *(_QWORD *)(v25 + 24);
  v27 = a1 + v23;
  v28 = a2 + v23;
  v29 = *(_QWORD *)(v28 + 8);
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_QWORD *)(v27 + 8) = v29;
  *(_BYTE *)(v27 + 16) = *(_BYTE *)(v28 + 16);
  *(_QWORD *)(v27 + 24) = *(_QWORD *)(v28 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10077C214(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for PeakUpperMarkModel(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  v8 = v7[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = v7[7];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = v7[8];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v17 = a3[7];
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_QWORD *)v18 = *(_QWORD *)(a2 + v17);
  *(_QWORD *)(v18 + 8) = *(_QWORD *)(a2 + v17 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v18 + 16) = *(_BYTE *)(v19 + 16);
  *(_QWORD *)(v18 + 24) = *(_QWORD *)(v19 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = a3[8];
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_QWORD *)v21 = *(_QWORD *)(a2 + v20);
  *(_QWORD *)(v21 + 8) = *(_QWORD *)(a2 + v20 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v21 + 16) = *(_BYTE *)(v22 + 16);
  *(_QWORD *)(v21 + 24) = *(_QWORD *)(v22 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10077C3C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for PeakUpperMarkModel(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  *(_OWORD *)(a1 + v7[6]) = *(_OWORD *)(a2 + v7[6]);
  *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
  *(_OWORD *)(a1 + v7[8]) = *(_OWORD *)(a2 + v7[8]);
  v8 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[7];
  v10 = a3[8];
  v11 = (_OWORD *)(a1 + v9);
  v12 = (_OWORD *)(a2 + v9);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v14 = (_OWORD *)(a1 + v10);
  v15 = (_OWORD *)(a2 + v10);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  return a1;
}

uint64_t sub_10077C488(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for PeakUpperMarkModel(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  v8 = v7[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  v13 = v7[7];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  v18 = v7[8];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_release();
  v23 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = *(_QWORD *)(a2 + v23);
  v27 = *(_QWORD *)(a2 + v23 + 8);
  *(_QWORD *)v24 = v26;
  *(_QWORD *)(v24 + 8) = v27;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v24 + 16) = *(_BYTE *)(v25 + 16);
  *(_QWORD *)(v24 + 24) = *(_QWORD *)(v25 + 24);
  swift_bridgeObjectRelease();
  v28 = a3[8];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = *(_QWORD *)(v30 + 8);
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *(_QWORD *)(v29 + 8) = v31;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v29 + 16) = *(_BYTE *)(v30 + 16);
  *(_QWORD *)(v29 + 24) = *(_QWORD *)(v30 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10077C5D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10077C5DC);
}

void sub_10077C5DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_1000E7478();
  v4 = type metadata accessor for PeakUpperMarkModel(v3);
  if (*(_DWORD *)(*(_QWORD *)(v4 - 8) + 84) == (_DWORD)v1)
  {
    sub_1000B250C(v0, v1, v4);
  }
  else
  {
    sub_10003BCA4(*(_QWORD *)(v0 + *(int *)(v2 + 20)));
    sub_100079F70();
  }
}

uint64_t sub_10077C62C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10077C638);
}

void sub_10077C638()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_1000CCD14();
  if (*(_DWORD *)(*(_QWORD *)(type metadata accessor for PeakUpperMarkModel(v4) - 8) + 84) == v3)
  {
    v5 = sub_1000B4784();
    sub_1000987C4(v5, v6, v7, v8);
  }
  else
  {
    *(_QWORD *)(v1 + *(int *)(v2 + 20)) = (v0 - 1);
    sub_100079F70();
  }
}

uint64_t type metadata accessor for PeakUpperMark(uint64_t a1)
{
  return sub_100098190(a1, qword_100C04C78, (uint64_t)&nominal type descriptor for PeakUpperMark);
}

uint64_t sub_10077C694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10077C6C0(a1, a2, a3, type metadata accessor for PeakUpperMarkModel, (uint64_t)&value witness table for Builtin.NativeObject + 64, (uint64_t)&value witness table for Builtin.Int64 + 64, (uint64_t)" ");
}

uint64_t sub_10077C6C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  unint64_t v12;
  _QWORD v13[5];

  result = a4(319);
  if (v12 <= 0x3F)
  {
    v13[0] = *(_QWORD *)(result - 8) + 64;
    v13[1] = a5;
    v13[2] = a6;
    v13[3] = a7;
    v13[4] = a7;
    swift_initStructMetadata(a1, 256, 5, v13, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10077C744(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AC06F0, 1);
}

uint64_t sub_10077C754@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE v83[16];
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;

  v81 = a1;
  v2 = type metadata accessor for AnnotationOverflowResolution.Boundary(0);
  v75 = *(_QWORD *)(v2 - 8);
  v76 = v2;
  sub_10009D98C();
  __chkstk_darwin(v3);
  sub_100088FDC();
  v73 = v4;
  v5 = sub_10009876C();
  type metadata accessor for AnnotationOverflowResolution.Strategy(v5);
  sub_10009D98C();
  __chkstk_darwin(v6);
  v74 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v70 = (char *)&v65 - v9;
  v10 = sub_10009876C();
  v11 = type metadata accessor for AnnotationOverflowResolution(v10);
  v79 = *(_QWORD *)(v11 - 8);
  v80 = v11;
  sub_10009D98C();
  __chkstk_darwin(v12);
  sub_100088FDC();
  v72 = v13;
  v14 = sub_10009876C();
  v16 = type metadata accessor for AnnotationPosition(v14, v15);
  v77 = *(_QWORD *)(v16 - 8);
  v78 = v16;
  sub_10009D98C();
  __chkstk_darwin(v17);
  sub_100088FDC();
  v68 = v18;
  sub_1000BA294(&qword_100BD78D8);
  sub_10009D98C();
  __chkstk_darwin(v19);
  sub_100098728();
  v22 = v21 - v20;
  v23 = type metadata accessor for PointMark(0);
  v65 = *(_QWORD *)(v23 - 8);
  sub_10009D98C();
  __chkstk_darwin(v24);
  sub_100098728();
  v27 = v26 - v25;
  v66 = sub_1000BA294(&qword_100BF42B8);
  v67 = *(_QWORD *)(v66 - 8);
  sub_10009D98C();
  __chkstk_darwin(v28);
  sub_100098728();
  v31 = v30 - v29;
  v69 = sub_1000BA294(&qword_100BF42B0);
  v71 = *(_QWORD *)(v69 - 8);
  sub_10009D98C();
  __chkstk_darwin(v32);
  sub_100088FDC();
  v82 = v33;
  v34 = sub_10009876C();
  v35 = (uint64_t *)(v1 + *(int *)(type metadata accessor for PeakUpperMark(v34) + 28));
  v37 = *v35;
  v36 = v35[1];
  v38 = *((unsigned __int8 *)v35 + 16);
  v39 = v35[3];
  v40 = type metadata accessor for Date(0);
  static PlottableValue.value(_:_:)(v37, v36, v38, v39, v1, v40, &protocol witness table for Date);
  PointMark.init<A>(x:y:)(v22, 0, 0, v40, &protocol witness table for Date);
  ChartContent.symbolSize(_:)(v23, &protocol witness table for PointMark, 0.0);
  v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 8))(v27, v23);
  v89 = static Color.clear.getter(v41);
  v85 = v23;
  v86 = &protocol witness table for PointMark;
  v42 = sub_10009885C((uint64_t)&v85, (uint64_t)&opaque type descriptor for <<opaque return type of ChartContent.symbolSize(_:)>>);
  v43 = v66;
  ChartContent.foregroundStyle<A>(_:)(&v89, v66, &type metadata for Color, v42, &protocol witness table for Color);
  v44 = swift_release();
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v67 + 8))(v31, v43, v44);
  v46 = v68;
  v47 = static AnnotationPosition.bottomTrailing.getter(v45);
  v48 = v73;
  static AnnotationOverflowResolution.Boundary.plot.getter(v47);
  v49 = v70;
  static AnnotationOverflowResolution.Strategy.fit(to:)(v48);
  v50 = sub_1000C6238();
  static AnnotationOverflowResolution.Boundary.plot.getter(v50);
  v51 = v74;
  static AnnotationOverflowResolution.Strategy.fit(to:)(v48);
  sub_1000C6238();
  v52 = v72;
  v53 = AnnotationOverflowResolution.init(x:y:)(v49, v51);
  v84 = v1;
  v54 = static Alignment.center.getter(v53);
  v56 = v55;
  v57 = sub_1000BA294(&qword_100C04CC0);
  v85 = v43;
  v86 = &type metadata for Color;
  v87 = v42;
  v88 = &protocol witness table for Color;
  v58 = sub_10009885C((uint64_t)&v85, (uint64_t)&opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>);
  v59 = sub_100372A3C(&qword_100C04CC8, &qword_100C04CC0, (void (*)(void))sub_10077D354);
  v64 = v57;
  v60 = v69;
  v61 = v54;
  v62 = v82;
  ChartContent.annotation<A>(position:alignment:spacing:overflowResolution:content:)(v46, v61, v56, 0, 1, v52, sub_10077D34C, v83, v69, v64, v58, v59);
  (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v52, v80);
  (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v46, v78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 8))(v62, v60);
}

double sub_10077CBB8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  _BYTE v8[144];
  _BYTE __src[152];

  v2 = a1;
  v4 = static HorizontalAlignment.leading.getter(a1);
  sub_10077CC78(v2, (uint64_t)v8);
  __src[144] = 0;
  memcpy(&__src[7], v8, 0x89uLL);
  v5 = type metadata accessor for PeakUpperMark(0);
  v6 = *(_QWORD *)(v2 + *(int *)(v5 + 24));
  LOBYTE(v2) = static Edge.Set.all.getter(v5);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  memcpy((void *)(a2 + 17), __src, 0x90uLL);
  *(_BYTE *)(a2 + 168) = v2;
  *(_QWORD *)(a2 + 176) = 0x4020000000000000;
  *(_QWORD *)(a2 + 184) = v6;
  result = 0.0;
  *(_OWORD *)(a2 + 192) = xmmword_1009A1B30;
  *(_BYTE *)(a2 + 208) = 0;
  *(_WORD *)(a2 + 209) = 1;
  return result;
}

double sub_10077CC78@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t KeyPath;
  uint64_t v115;
  uint64_t v116;
  char v117;
  char v118;
  char v119;
  uint64_t v120;
  uint64_t v121;

  v107 = type metadata accessor for Text.Scale(0);
  v4 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v6 = (char *)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for PeakUpperMarkModel(0);
  v8 = a1;
  v9 = (uint64_t *)(a1 + v7[8]);
  v10 = v9[1];
  if (v10)
  {
    v120 = *v9;
    v121 = v10;
    v11 = sub_100114EF8();
    swift_bridgeObjectRetain();
    v12 = Text.init<A>(_:)(&v120, &type metadata for String, v11);
    v111 = v14;
    v112 = v13;
    v115 = v15 & 1;
    v116 = v12;
    KeyPath = swift_getKeyPath(&unk_1009C8E00);
    v16 = static Font.caption.getter(KeyPath);
    static Font.Weight.medium.getter(v16);
    v110 = Font.weight(_:)(v16);
    swift_release();
    v109 = swift_getKeyPath(&unk_1009C8E30);
    v17 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PeakUpperMark(0) + 20));
    v108 = swift_getKeyPath(&unk_1009C8E60);
    v113 = v17;
    swift_retain();
    v104 = 1;
  }
  else
  {
    v115 = 0;
    v116 = 0;
    v111 = 0;
    v112 = 0;
    KeyPath = 0;
    v104 = 0;
    v109 = 0;
    v110 = 0;
    v108 = 0;
    v113 = 0;
  }
  v18 = (uint64_t *)(v8 + v7[7]);
  v19 = v18[1];
  if (v19)
  {
    v20 = *v18;
    v21 = v8;
    v22 = (uint64_t *)(v8 + v7[6]);
    v23 = v22[1];
    v120 = *v22;
    v121 = v23;
    v24 = sub_100114EF8();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v101 = Text.init<A>(_:)(&v120, &type metadata for String, v24);
    v102 = v25;
    v103 = v26;
    LODWORD(v106) = v27 & 1;
    v120 = v20;
    v121 = v19;
    v28 = Text.init<A>(_:)(&v120, &type metadata for String, v24);
    v30 = v29;
    v32 = v31;
    v100 = v4;
    v34 = v33 & 1;
    static Text.Scale.secondary.getter(v28);
    v99 = Text.textScale(_:isEnabled:)(v6, 1, v28, v30, v34, v32);
    v36 = v35;
    v38 = v37;
    v105 = v21;
    v40 = v39 & 1;
    sub_1000D31B4(v28, v30, v34);
    v41 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, __n128))(v100 + 8))(v6, v107, v41);
    v42 = v101;
    v43 = v102;
    v44 = v99;
    LOBYTE(v34) = v40;
    v107 = static Text.+ infix(_:_:)(v101, v102, v106, v103, v99, v36, v40, v38);
    v46 = v45;
    LODWORD(v100) = v47;
    v49 = v48;
    v50 = v36;
    v8 = v105;
    sub_1000D31B4(v44, v50, v34);
    swift_bridgeObjectRelease();
    sub_1000D31B4(v42, v43, v106);
    swift_bridgeObjectRelease();
    v52 = v100;
  }
  else
  {
    v53 = (uint64_t *)(v8 + v7[6]);
    v54 = v53[1];
    v120 = *v53;
    v121 = v54;
    v55 = sub_100114EF8();
    swift_bridgeObjectRetain();
    v51 = Text.init<A>(_:)(&v120, &type metadata for String, v55);
    v107 = v51;
    v46 = v56;
    v49 = v57;
  }
  v58 = v46;
  v101 = v46;
  v102 = v49;
  v59 = v52 & 1;
  LODWORD(v103) = v52 & 1;
  v60 = static Font.title.getter(v51);
  static Font.Weight.semibold.getter(v60);
  v61 = Font.weight(_:)(v60);
  swift_release();
  v62 = Text.font(_:)(v61, v107, v58, v59, v49);
  v64 = v63;
  LOBYTE(v60) = v65;
  v67 = v66;
  swift_release();
  v68 = v60 & 1;
  v69 = type metadata accessor for PeakUpperMark(0);
  v70 = Text.foregroundColor(_:)(*(_QWORD *)(v8 + *(int *)(v69 + 20)), v62, v64, v60 & 1, v67);
  v72 = v71;
  v74 = v73;
  v105 = v73;
  LODWORD(v60) = v75 & 1;
  sub_1000D31B4(v62, v64, v68);
  swift_bridgeObjectRelease();
  v76 = swift_getKeyPath(&unk_1009C8E00);
  v106 = v76;
  v117 = v60;
  v119 = v60;
  v118 = 0;
  *(_DWORD *)(a2 + 105) = v120;
  *(_DWORD *)(a2 + 108) = *(_DWORD *)((char *)&v120 + 3);
  v77 = v116;
  v78 = v112;
  *(_QWORD *)a2 = v116;
  *(_QWORD *)(a2 + 8) = v78;
  v79 = v115;
  *(_QWORD *)(a2 + 16) = v115;
  v80 = v79;
  v115 = v79;
  v82 = v110;
  v81 = v111;
  *(_QWORD *)(a2 + 24) = v111;
  v83 = v81;
  v84 = KeyPath;
  *(_QWORD *)(a2 + 32) = KeyPath;
  KeyPath = v84;
  *(_QWORD *)(a2 + 40) = v104;
  *(_QWORD *)(a2 + 48) = 0;
  v86 = v108;
  v85 = v109;
  *(_QWORD *)(a2 + 56) = v109;
  *(_QWORD *)(a2 + 64) = v82;
  v109 = v85;
  v87 = v113;
  *(_QWORD *)(a2 + 72) = v86;
  *(_QWORD *)(a2 + 80) = v87;
  *(_QWORD *)(a2 + 88) = v70;
  *(_QWORD *)(a2 + 96) = v72;
  v98 = v72;
  *(_BYTE *)(a2 + 104) = v60;
  *(_QWORD *)(a2 + 112) = v74;
  *(_QWORD *)(a2 + 120) = v76;
  *(_QWORD *)(a2 + 128) = 1;
  *(_BYTE *)(a2 + 136) = 0;
  v113 = v87;
  v110 = v82;
  v111 = v83;
  v112 = v78;
  v88 = v83;
  sub_10077D3C4(v77, v78, v80, v83);
  v99 = v70;
  LODWORD(v100) = v60;
  sub_1000D55D4(v70, v72, v60);
  swift_bridgeObjectRetain();
  swift_retain();
  v108 = v86;
  v89 = v116;
  v90 = v78;
  LOBYTE(v78) = v115;
  sub_10077D3C4(v116, v90, v115, v88);
  v91 = v98;
  sub_1000D55D4(v70, v98, v60);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000D31B4(v107, v101, v103);
  swift_bridgeObjectRelease();
  v92 = v89;
  v93 = v112;
  v94 = v78;
  v95 = v111;
  sub_10077D43C(v92, v112, v94, v111);
  v96 = v99;
  sub_1000D31B4(v99, v91, v100);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000D31B4(v96, v91, v117);
  swift_release();
  swift_bridgeObjectRelease();
  return sub_10077D43C(v116, v93, v115, v95);
}

double sub_10077D34C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10077CBB8(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10077D354()
{
  return sub_100372A3C(&qword_100C04CD0, &qword_100C04CD8, (void (*)(void))sub_10077D378);
}

unint64_t sub_10077D378()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C04CE0;
  if (!qword_100C04CE0)
  {
    v1 = sub_100075EB0(qword_100C04CE8);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100C04CE0);
  }
  return result;
}

double sub_10077D3C4(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  double result;

  if (a4)
  {
    sub_1000D55D4(a1, a2, a3 & 1);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    *(_QWORD *)&result = swift_retain().n128_u64[0];
  }
  return result;
}

double sub_10077D43C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  double result;

  if (a4)
  {
    sub_1000D31B4(a1, a2, a3 & 1);
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

uint64_t sub_10077D4C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;

  v0 = sub_100075EB0(&qword_100BF42B0);
  v1 = sub_100075EB0(&qword_100C04CC0);
  v2 = sub_100075EB0(&qword_100BF42B8);
  v7 = type metadata accessor for PointMark(255);
  v8 = &protocol witness table for PointMark;
  v3 = sub_10009885C((uint64_t)&v7, (uint64_t)&opaque type descriptor for <<opaque return type of ChartContent.symbolSize(_:)>>);
  v7 = v2;
  v8 = &type metadata for Color;
  v9 = v3;
  v10 = &protocol witness table for Color;
  v4 = sub_10009885C((uint64_t)&v7, (uint64_t)&opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>);
  v5 = sub_100372A3C(&qword_100C04CC8, &qword_100C04CC0, (void (*)(void))sub_10077D354);
  v7 = v0;
  v8 = (void *)v1;
  v9 = v4;
  v10 = (void *)v5;
  return sub_10009885C((uint64_t)&v7, (uint64_t)&opaque type descriptor for <<opaque return type of ChartContent.annotation<A>(position:alignment:spacing:overflowResolution:content:)>>);
}

uint64_t *sub_10077D5A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 18 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain(v9);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    *v10 = *v11;
    v12 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    v13 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    v14 = *(_OWORD *)v13;
    *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
    *(_OWORD *)v12 = v14;
    *(_BYTE *)(v12 + 17) = *(_BYTE *)(v13 + 17);
  }
  return v4;
}

uint64_t sub_10077D680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = v6 + a1;
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v7 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *v8;
  v9 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_BYTE *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = v11;
  *(_BYTE *)(v9 + 17) = *(_BYTE *)(v10 + 17);
  return a1;
}

uint64_t sub_10077D6FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = v6 + a1;
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v7 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *v8;
  v9 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_BYTE *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = v11;
  *(_BYTE *)(v9 + 17) = *(_BYTE *)(v10 + 17);
  return a1;
}

uint64_t sub_10077D778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = v6 + a1;
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v7 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *v8;
  v9 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_BYTE *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = v11;
  *(_BYTE *)(v9 + 17) = *(_BYTE *)(v10 + 17);
  return a1;
}

uint64_t sub_10077D7F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = v6 + a1;
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v7 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *v8;
  v9 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_BYTE *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = v11;
  *(_BYTE *)(v9 + 17) = *(_BYTE *)(v10 + 17);
  return a1;
}

uint64_t sub_10077D870(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100AC0754, 1);
}

double sub_10077D8A8(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v5;
  double Width;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char v14;
  CGRect v16;
  CGRect v17;

  if ((*(_BYTE *)(v5 + *(int *)(a1 + 40) + 16) & 1) != 0)
  {
    Width = CGRectGetWidth(*(CGRect *)&a2);
LABEL_7:
    v12 = 0.5;
    return Width * v12;
  }
  v11 = static Alignment.bottomLeading.getter();
  if ((static Alignment.== infix(_:_:)(v11) & 1) != 0)
  {
    v16.origin.x = a2;
    v16.origin.y = a3;
    v16.size.width = a4;
    v16.size.height = a5;
    Width = CGRectGetWidth(v16);
    v12 = 0.25;
  }
  else
  {
    v13 = static Alignment.bottomTrailing.getter();
    v14 = static Alignment.== infix(_:_:)(v13);
    v17.origin.x = a2;
    v17.origin.y = a3;
    v17.size.width = a4;
    v17.size.height = a5;
    Width = CGRectGetWidth(v17);
    if ((v14 & 1) == 0)
      goto LABEL_7;
    v12 = 0.75;
  }
  return Width * v12;
}

double sub_10077D978@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  CGFloat MinY;
  double v28;
  CGFloat v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  CGFloat v35;
  double v36;
  double v37;
  double v38;
  CGFloat v39;
  char v40;
  double result;
  __int128 v42;
  double v43;
  double v44;
  _OWORD v45[2];
  char v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;

  v13 = type metadata accessor for RoundedCornerStyle(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10077D8A8(a1, a3, a4, a5, a6);
  v43 = *(double *)(v6 + *(int *)(a1 + 36));
  v44 = v17;
  v18 = sub_10077E6DC(a3, a4, a5, a6, v43 * 3.0 * 0.5, 0.0);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for RoundedCornerStyle.continuous(_:), v13);
  Path.init(roundedRect:cornerRadius:style:)(v45, v16, v18, v20, v22, v24, v43);
  v25 = v44;
  v26 = v44 + *(double *)(v6 + *(int *)(a1 + 36)) * 3.0 * 0.5;
  v47.origin.x = a3;
  v47.origin.y = a4;
  v47.size.width = a5;
  v47.size.height = a6;
  MinY = CGRectGetMinY(v47);
  Path.move(to:)(v26, MinY + *(double *)(v6 + *(int *)(a1 + 36)) * 3.0 * 0.5);
  v48.origin.x = a3;
  v48.origin.y = a4;
  v48.size.width = a5;
  v48.size.height = a6;
  v43 = CGRectGetMinY(v48);
  v28 = v26 - *(double *)(v6 + *(int *)(a1 + 36)) * 3.0 / 6.0;
  v49.origin.x = a3;
  v49.origin.y = a4;
  v49.size.width = a5;
  v49.size.height = a6;
  v29 = CGRectGetMinY(v49);
  v30 = *(double *)(v6 + *(int *)(a1 + 36)) * 3.0;
  v31 = v29 + v30 * 0.5;
  v32 = v25 + v30 / 6.0;
  v50.origin.x = a3;
  v50.origin.y = a4;
  v50.size.width = a5;
  v50.size.height = a6;
  v33 = CGRectGetMinY(v50);
  Path.addCurve(to:control1:control2:)(v25, v43, v28, v31, v32, v33);
  v34 = v25 - *(double *)(v6 + *(int *)(a1 + 36)) * 3.0 * 0.5;
  v51.origin.x = a3;
  v51.origin.y = a4;
  v51.size.width = a5;
  v51.size.height = a6;
  v35 = CGRectGetMinY(v51);
  v36 = *(double *)(v6 + *(int *)(a1 + 36)) * 3.0;
  v43 = v35 + v36 * 0.5;
  v44 = v25 - v36 / 6.0;
  v52.origin.x = a3;
  v52.origin.y = a4;
  v52.size.width = a5;
  v52.size.height = a6;
  v37 = CGRectGetMinY(v52);
  v38 = v34 + *(double *)(v6 + *(int *)(a1 + 36)) * 3.0 / 6.0;
  v53.origin.x = a3;
  v53.origin.y = a4;
  v53.size.width = a5;
  v53.size.height = a6;
  v39 = CGRectGetMinY(v53);
  Path.addCurve(to:control1:control2:)(v34, v43, v44, v37, v38, v39 + *(double *)(v6 + *(int *)(a1 + 36)) * 3.0 * 0.5);
  Path.addLine(to:)(0.0, *(double *)(v6 + *(int *)(a1 + 36)) * 3.0 * 0.5);
  v40 = v46;
  result = *(double *)v45;
  v42 = v45[1];
  *(_OWORD *)a2 = v45[0];
  *(_OWORD *)(a2 + 16) = v42;
  *(_BYTE *)(a2 + 32) = v40;
  return result;
}

uint64_t sub_10077DCA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t WitnessTable;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  char v37;
  __int128 v38;
  __int128 v39;
  char v40;
  char v41;
  _QWORD v42[2];
  char v43;
  __int128 v44;
  __int128 v45;
  char v46;
  char v47;

  v31 = a2;
  v27 = *(_QWORD *)(a1 + 16);
  v4 = sub_100075EB0(&qword_100C04D70);
  v5 = type metadata accessor for ModifiedContent(0, v27, v4);
  v29 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v27 - v6;
  v8 = type metadata accessor for ModifiedContent(0, v5, &type metadata for _PaddingLayout);
  v30 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v28 = (char *)&v27 - v12;
  sub_10077DF58(a1, (uint64_t)v42);
  v36[0] = v42[0];
  v36[1] = v42[1];
  v37 = v43;
  v38 = v44;
  v39 = v45;
  v40 = v46;
  v41 = v47;
  v13 = sub_1000BA294(&qword_100C04D78);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = sub_10077E518();
  v16 = static Alignment.center.getter(v15);
  View.background<A>(_:alignment:)(v36, v16, v17, v27, v13, v14, v15);
  swift_release();
  v19 = static Edge.Set.top.getter(v18);
  v20 = *(double *)(v2 + *(int *)(a1 + 36)) * 3.0 * 0.5;
  sub_10003D310(&qword_100C04DA8, &qword_100C04D70, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v34 = v14;
  v35 = v21;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v5);
  View.padding(_:_:)(v19, *(_QWORD *)&v20, 0, v5, WitnessTable);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v5);
  v32 = WitnessTable;
  v33 = &protocol witness table for _PaddingLayout;
  v23 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
  v24 = (uint64_t)v28;
  sub_1000B2074(v10, v8, v23);
  v25 = *(void (**)(char *, uint64_t))(v30 + 8);
  v25(v10, v8);
  sub_1000B1100(v24, v8, v31);
  return ((uint64_t (*)(uint64_t, uint64_t))v25)(v24, v8);
}

void sub_10077DF58(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = __chkstk_darwin(a1);
  v8 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, v2, a1, v7);
  v9 = *(unsigned __int8 *)(v5 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject(&unk_100B8FD80, v10 + v6, v9 | 7);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)(a1 + 16);
  v12 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v11 + v10, v8, a1);
  LOBYTE(v8) = static Edge.Set.top.getter(v12);
  v13 = EdgeInsets.init(_all:)(*(double *)(v2 + *(int *)(a1 + 36)) * 3.0 * -0.5);
  *(_QWORD *)a2 = sub_10077E674;
  *(_QWORD *)(a2 + 8) = v11;
  *(_BYTE *)(a2 + 16) = (_BYTE)v8;
  *(double *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 32) = v14;
  *(_QWORD *)(a2 + 40) = v15;
  *(_QWORD *)(a2 + 48) = v16;
  *(_WORD *)(a2 + 56) = 0;
}

void sub_10077E054(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  char v70;

  v62 = a1;
  v67 = a5;
  v8 = type metadata accessor for Material(0);
  v59 = *(_QWORD *)(v8 - 8);
  v60 = v8;
  __chkstk_darwin(v8);
  v58 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_1000BA294(&qword_100C04DB0);
  __chkstk_darwin(v66);
  v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v61 = (uint64_t)&v56 - v13;
  v64 = sub_1000BA294(&qword_100C04DB8);
  __chkstk_darwin(v64);
  v65 = (uint64_t)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_1000BA294(&qword_100C04DC0);
  __chkstk_darwin(v56);
  v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for LocalCoordinateSpace(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_1000BA294(&qword_100C04DC8);
  __chkstk_darwin(v63);
  v22 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v57 = (uint64_t)&v56 - v24;
  v26 = type metadata accessor for UpArrowPopoverBackgroundView(0, a3, a4, v25);
  LODWORD(a2) = *(unsigned __int8 *)(a2 + *(int *)(v26 + 44));
  static CoordinateSpaceProtocol<>.local.getter(v26);
  v27 = GeometryProxy.frame<A>(in:)(v20, v17, &protocol witness table for LocalCoordinateSpace);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  v34 = sub_10077D978(v26, (uint64_t)&v68, v27, v29, v31, v33);
  if ((_DWORD)a2 == 1)
  {
    v35 = static Material.thick.getter(v34);
    static Color.black.getter(v35);
    v36 = Color.opacity(_:)(0.25);
    swift_release();
    static ShadowStyle.drop(color:radius:x:y:)(v36, 20.0, 0.0, 0.0);
    swift_release();
    v37 = v63;
    sub_100037768((uint64_t)v16, (uint64_t)&v22[*(int *)(v63 + 52)], &qword_100C04DC0);
    v38 = v69;
    *(_OWORD *)v22 = v68;
    *((_OWORD *)v22 + 1) = v38;
    v22[32] = v70;
    *(_WORD *)&v22[*(int *)(v37 + 56)] = 256;
    sub_100021AA4((uint64_t)v16, &qword_100C04DC0);
    v39 = v57;
    sub_1000787D4((uint64_t)v22, v57, &qword_100C04DC8);
    v40 = v65;
    sub_100037768(v39, v65, &qword_100C04DC8);
    swift_storeEnumTagMultiPayload(v40, v64, 0);
    sub_10003D310(&qword_100C04DD0, &qword_100C04DC8, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    v42 = v41;
    sub_10003D310(&qword_100C04DD8, &qword_100C04DB0, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    _ConditionalContent<>.init(storage:)(v40, v37, v66, v42, v43);
    v44 = v39;
    v45 = &qword_100C04DC8;
  }
  else
  {
    v46 = v58;
    static Material.thick.getter(v34);
    v47 = v66;
    v49 = v59;
    v48 = v60;
    (*(void (**)(char *, char *, uint64_t))(v59 + 16))(&v11[*(int *)(v66 + 52)], v46, v60);
    v50 = v69;
    *(_OWORD *)v11 = v68;
    *((_OWORD *)v11 + 1) = v50;
    v11[32] = v70;
    *(_WORD *)&v11[*(int *)(v47 + 56)] = 256;
    (*(void (**)(char *, uint64_t))(v49 + 8))(v46, v48);
    v51 = v61;
    sub_1000787D4((uint64_t)v11, v61, &qword_100C04DB0);
    v52 = v65;
    sub_100037768(v51, v65, &qword_100C04DB0);
    swift_storeEnumTagMultiPayload(v52, v64, 1);
    sub_10003D310(&qword_100C04DD0, &qword_100C04DC8, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    v54 = v53;
    sub_10003D310(&qword_100C04DD8, &qword_100C04DB0, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    _ConditionalContent<>.init(storage:)(v52, v63, v47, v54, v55);
    v44 = v51;
    v45 = &qword_100C04DB0;
  }
  sub_100021AA4(v44, v45);
}

unint64_t sub_10077E518()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C04D80;
  if (!qword_100C04D80)
  {
    v1 = sub_100075EB0(&qword_100C04D78);
    sub_10077E584();
    sub_10054072C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C04D80);
  }
  return result;
}

unint64_t sub_10077E584()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C04D88;
  if (!qword_100C04D88)
  {
    v1 = sub_100075EB0(&qword_100C04D90);
    sub_10003D310(&qword_100C04D98, &qword_100C04DA0, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C04D88);
  }
  return result;
}

uint64_t sub_10077E608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(type metadata accessor for UpArrowPopoverBackgroundView(0, v5, *(_QWORD *)(v4 + 24), a4) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = v8 + *(_QWORD *)(v6 + 64);
  v10 = v7 | 7;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + v8, v5);
  return swift_deallocObject(v4, v9, v10);
}

void sub_10077E674(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UpArrowPopoverBackgroundView(0, v6, v7, a2) - 8)
                          + 80);
  sub_10077E054(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

double sub_10077E6DC(double a1, double a2, double a3, double a4, double a5, double a6)
{
  return a1 + a6;
}

uint64_t sub_10077E6F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = sub_100075EB0(&qword_100C04D70);
  v2 = sub_1000C30C8(v0, v1, v0);
  v4 = sub_1000C30C8(v2, v3, (uint64_t)&type metadata for _PaddingLayout);
  sub_10003D310(&qword_100C04DA8, &qword_100C04D70, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
}

uint64_t sub_10077E7A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppConfiguration(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_10077E7DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1000BCA60();
  return _s7Weather24LocationCompositionStateOwet_0(v1, v0, v2);
}

uint64_t sub_10077E804()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1000BCA60();
  return _s7Weather24LocationCompositionStateOwst_0(v1, v0, v0, v2);
}

uint64_t sub_10077E834(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000010 && a2 == 0x80000001009F30E0)
  {
    swift_bridgeObjectRelease(0x80000001009F30E0);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001009F30E0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

unint64_t sub_10077E8B8()
{
  return 0xD000000000000010;
}

uint64_t sub_10077E8D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10077E834(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10077E900(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10077EDE8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10077E928(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10077EDE8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10077E950(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = v1;
  v4 = sub_1000BA294(&qword_100C04E90);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100098728();
  v8 = v7 - v6;
  v9 = a1[3];
  v10 = a1[4];
  sub_1000DB418(a1, v9);
  v11 = sub_10077EDE8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AppConfigurationState.CodingKeys, &type metadata for AppConfigurationState.CodingKeys, v11, v9, v10);
  v12 = type metadata accessor for AppConfiguration(0);
  sub_100051B90(&qword_100BEFDB0, (uint64_t (*)(uint64_t))&type metadata accessor for AppConfiguration, (uint64_t)&protocol conformance descriptor for AppConfiguration);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v2, v13, v4, v12);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_10077EA58@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v23 = type metadata accessor for AppConfiguration(0);
  v20 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  sub_100098728();
  v22 = v5 - v4;
  v6 = sub_1000BA294(&qword_100C04E78);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100098728();
  v10 = v9 - v8;
  v11 = type metadata accessor for AppConfigurationState(0);
  __chkstk_darwin(v11);
  sub_100098728();
  v14 = v13 - v12;
  v15 = a1[3];
  v16 = a1[4];
  sub_1000DB418(a1, v15);
  v17 = sub_10077EDE8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AppConfigurationState.CodingKeys, &type metadata for AppConfigurationState.CodingKeys, v17, v15, v16);
  if (!v2)
  {
    sub_100051B90(&qword_100C04E88, (uint64_t (*)(uint64_t))&type metadata accessor for AppConfiguration, (uint64_t)&protocol conformance descriptor for AppConfiguration);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v23, v18, v6);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v14, v22, v23);
    sub_10077EE24(v14, a2);
  }
  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
}

uint64_t sub_10077EC08@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10077EA58(a1, a2);
}

uint64_t sub_10077EC1C(_QWORD *a1)
{
  return sub_10077E950(a1);
}

uint64_t sub_10077EC30@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = sub_1000BA294(&qword_100BC31F0);
  inited = swift_initStackObject(v3, &v10);
  *(_OWORD *)(inited + 16) = xmmword_10097CA50;
  *(_QWORD *)(inited + 32) = 0xD000000000000010;
  *(_QWORD *)(inited + 40) = 0x80000001009F30E0;
  v5 = type metadata accessor for AppConfiguration(0);
  *(_QWORD *)(inited + 72) = v5;
  v6 = sub_10005F164((_QWORD *)(inited + 48));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v6, v1, v5);
  v7 = Dictionary.init(dictionaryLiteral:)(inited);
  a1[3] = sub_1000BA294(&qword_100C04E98);
  a1[4] = sub_10077EE68();
  sub_10005F164(a1);
  v8 = type metadata accessor for AppConfigurationState(0);
  return ShortDescription.init(name:_:)(0xD000000000000015, 0x80000001009C8F40, v7, v8);
}

uint64_t sub_10077ED54(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100051B90(&qword_100C04EA8, type metadata accessor for AppConfigurationState, (uint64_t)&unk_1009C8FF0);
  return ShortDescribable.description.getter(a1, v2);
}

uint64_t sub_10077ED94()
{
  return sub_1006B3E10();
}

uint64_t sub_10077EDA8()
{
  return sub_1006B3DFC();
}

uint64_t sub_10077EDBC()
{
  return sub_100051B90(&qword_100C04E70, type metadata accessor for AppConfigurationState, (uint64_t)&unk_1009C8FC8);
}

unint64_t sub_10077EDE8()
{
  unint64_t result;

  result = qword_100C04E80;
  if (!qword_100C04E80)
  {
    result = swift_getWitnessTable(&unk_1009C915C, &type metadata for AppConfigurationState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C04E80);
  }
  return result;
}

uint64_t sub_10077EE24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppConfigurationState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10077EE68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C04EA0;
  if (!qword_100C04EA0)
  {
    v1 = sub_100075EB0(&qword_100C04E98);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100C04EA0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AppConfigurationState.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10077EEEC + 4 * byte_1009C8F50[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10077EF0C + 4 * byte_1009C8F55[v4]))();
}

_BYTE *sub_10077EEEC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10077EF0C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10077EF14(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10077EF1C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10077EF24(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10077EF2C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AppConfigurationState.CodingKeys()
{
  return &type metadata for AppConfigurationState.CodingKeys;
}

unint64_t sub_10077EF4C()
{
  unint64_t result;

  result = qword_100C04EB0;
  if (!qword_100C04EB0)
  {
    result = swift_getWitnessTable(&unk_1009C9134, &type metadata for AppConfigurationState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C04EB0);
  }
  return result;
}

unint64_t sub_10077EF8C()
{
  unint64_t result;

  result = qword_100C04EB8;
  if (!qword_100C04EB8)
  {
    result = swift_getWitnessTable(&unk_1009C90A4, &type metadata for AppConfigurationState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C04EB8);
  }
  return result;
}

unint64_t sub_10077EFCC()
{
  unint64_t result;

  result = qword_100C04EC0;
  if (!qword_100C04EC0)
  {
    result = swift_getWitnessTable(&unk_1009C90CC, &type metadata for AppConfigurationState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C04EC0);
  }
  return result;
}

ValueMetadata *type metadata accessor for SunriseSunsetDaylightCalculator()
{
  return &type metadata for SunriseSunsetDaylightCalculator;
}

void sub_10077F018(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void);
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  _BOOL8 v43;
  Swift::Int v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  __n128 v53;
  void (*v54)(_BYTE *, uint64_t, __n128);
  _BYTE v55[16];
  uint64_t v56;
  int64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  _QWORD *v70;
  _BYTE *v71;
  _QWORD v72[6];
  _QWORD *v73;

  v5 = type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity(0);
  v61 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = &v55[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v60 = sub_1000BA294(&qword_100BCC820);
  __chkstk_darwin(v60);
  v9 = &v55[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v71 = &v55[-v11];
  __chkstk_darwin(v12);
  v68 = &v55[-v13];
  __chkstk_darwin(v14);
  v59 = &v55[-v15];
  sub_1006C17D4(v72, a1);
  v62 = v72[0];
  v63 = v72[3];
  v16 = v72[4];
  v56 = v72[1];
  v57 = (unint64_t)(v72[2] + 64) >> 6;
  swift_bridgeObjectRetain(a1);
  v69 = v9;
  v70 = a2;
  v58 = v7;
  if (!v16)
    goto LABEL_3;
LABEL_2:
  v67 = (v16 - 1) & v16;
  v17 = __clz(__rbit64(v16)) | (v63 << 6);
  while (1)
  {
    v22 = v62;
    v23 = *(_QWORD *)(v62 + 48);
    v2 = type metadata accessor for Date(0);
    v24 = *(_QWORD *)(v2 - 8);
    v64 = *(_QWORD *)(v24 + 72);
    v66 = v24;
    v25 = *(void (**)(void))(v24 + 16);
    v26 = v59;
    ((void (*)(_BYTE *, unint64_t, uint64_t))v25)(v59, v23 + v64 * v17, v2);
    v27 = *(_QWORD *)(v22 + 56);
    v28 = v60;
    v29 = *(_QWORD *)(v61 + 72);
    sub_100080C0C(v27 + v29 * v17, (uint64_t)&v26[*(int *)(v60 + 48)], type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity);
    v30 = (uint64_t)v26;
    v31 = v68;
    sub_1000787D4(v30, (uint64_t)v68, &qword_100BCC820);
    v32 = *(int *)(v28 + 48);
    v33 = (uint64_t)&v71[v32];
    v34 = (uint64_t)&v31[v32];
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v25)(v71, v31, v2);
    v65 = v33;
    sub_100080C0C(v34, v33, type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity);
    v35 = (uint64_t)&v69[*(int *)(v28 + 48)];
    v25();
    sub_100080C0C(v34, v35, type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity);
    v36 = (uint64_t)v58;
    sub_10007802C(v35, (uint64_t)v58, type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity);
    v37 = v70;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v70);
    v73 = (_QWORD *)*v37;
    v39 = v73;
    *v37 = 0x8000000000000000;
    sub_10016C6BC();
    v42 = v39[2];
    v43 = (v41 & 1) == 0;
    v44 = v42 + v43;
    if (__OFADD__(v42, v43))
      break;
    v45 = v40;
    v46 = v41;
    sub_1000BA294(&qword_100BC36D0);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v44))
    {
      sub_10016C6BC();
      if ((v46 & 1) != (v48 & 1))
        goto LABEL_33;
      v45 = v47;
    }
    v49 = v73;
    if ((v46 & 1) != 0)
    {
      sub_100785EBC(v36, v73[7] + v45 * v29);
    }
    else
    {
      v73[(v45 >> 6) + 8] |= 1 << v45;
      ((void (*)(unint64_t, _BYTE *, uint64_t))v25)(v49[6] + v45 * v64, v71, v2);
      sub_10007802C(v36, v49[7] + v45 * v29, type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity);
      v50 = v49[2];
      v51 = __OFADD__(v50, 1);
      v52 = v50 + 1;
      if (v51)
        goto LABEL_31;
      v49[2] = v52;
      v49 = v73;
    }
    *v70 = v49;
    v53 = swift_bridgeObjectRelease();
    v54 = *(void (**)(_BYTE *, uint64_t, __n128))(v66 + 8);
    v54(v71, v2, v53);
    ((void (*)(_BYTE *, uint64_t))v54)(v69, v2);
    sub_1000215BC(v65, type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity);
    sub_100021A14((uint64_t)v68, &qword_100BCC820);
    v16 = v67;
    if (v67)
      goto LABEL_2;
LABEL_3:
    v18 = v63 + 1;
    if (__OFADD__(v63, 1))
      goto LABEL_32;
    if (v18 >= v57)
      goto LABEL_29;
    v19 = *(_QWORD *)(v56 + 8 * v18);
    v20 = v63 + 1;
    if (!v19)
    {
      v20 = v63 + 2;
      if (v63 + 2 >= v57)
        goto LABEL_29;
      v19 = *(_QWORD *)(v56 + 8 * v20);
      if (!v19)
      {
        v20 = v63 + 3;
        if (v63 + 3 >= v57)
          goto LABEL_29;
        v19 = *(_QWORD *)(v56 + 8 * v20);
        if (!v19)
        {
          v20 = v63 + 4;
          if (v63 + 4 >= v57)
            goto LABEL_29;
          v19 = *(_QWORD *)(v56 + 8 * v20);
          if (!v19)
          {
            v20 = v63 + 5;
            if (v63 + 5 >= v57)
              goto LABEL_29;
            v19 = *(_QWORD *)(v56 + 8 * v20);
            if (!v19)
            {
              v21 = v63 + 6;
              while (v21 < v57)
              {
                v19 = *(_QWORD *)(v56 + 8 * v21++);
                if (v19)
                {
                  v20 = v21 - 1;
                  goto LABEL_18;
                }
              }
LABEL_29:
              swift_release(v62);
              return;
            }
          }
        }
      }
    }
LABEL_18:
    v67 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v20 << 6);
    v63 = v20;
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v2);
  __break(1u);
}

void sub_10077F4F0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  v2 = *(_QWORD *)(sub_1000BA294(&qword_100BCC820) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_10021A560();
    v3 = v4;
  }
  v5 = *(_QWORD *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  sub_100784934(v6);
  *a1 = v3;
}

uint64_t sub_10077F574@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v32;
  uint64_t v34;

  v34 = type metadata accessor for DateComponents(0);
  v6 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v7 = sub_1000BE9F0();
  v8 = type metadata accessor for TimeZone(v7);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = sub_1000C4668();
  v11 = type metadata accessor for Calendar(v10);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_100098728();
  v15 = v14 - v13;
  v32 = a1;
  Location.timeZone.getter(v16);
  static Calendar.currentCalendar(with:)(v4);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v4, v8);
  v17 = sub_1000BA294(&qword_100BC4E50);
  v18 = type metadata accessor for Calendar.Component(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = swift_allocObject(v17, v21 + *(_QWORD *)(v19 + 72), v20 | 7);
  *(_OWORD *)(v22 + 16) = xmmword_10097CA50;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v19 + 104))(v22 + v21, enum case for Calendar.Component.year(_:), v18);
  v23 = sub_1000A8278(v22);
  Calendar.dateComponents(_:from:)(v23, a2);
  v24 = swift_bridgeObjectRelease();
  v25 = DateComponents.year.getter(v24);
  if ((v26 & 1) != 0)
  {
    v27 = sub_100785894();
    v28 = swift_allocError(&type metadata for CalculatorError, v27, 0, 0);
    *v29 = 0;
    swift_willThrow(v28, v29);
  }
  else
  {
    sub_10077F768(v32, v25, a3);
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v34);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v15, v11);
}

void sub_10077F768(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v7 = type metadata accessor for MaxDaylight(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TimeZone(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v22 - v15;
  sub_10077F91C(a1, a2);
  if (!v3)
  {
    v18 = v17;
    Location.timeZone.getter(v17);
    v23 = sub_1007808E0(v18, (uint64_t)v16);
    v19 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
    v20 = v19(v16, v10);
    Location.timeZone.getter(v20);
    sub_1007809A0(v18, (uint64_t)v13, v9);
    v19(v13, v10);
    swift_bridgeObjectRelease();
    v21 = type metadata accessor for DaylightData(0);
    sub_10007802C((uint64_t)v9, (uint64_t)a3 + *(int *)(v21 + 20), type metadata accessor for MaxDaylight);
    *a3 = v23;
  }
}

void sub_10077F91C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t);
  uint64_t v47;
  double v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  _BYTE *v52;
  _QWORD *v53;
  void (*v54)(char *, _QWORD, uint64_t);
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  uint64_t v80;
  os_log_type_t v81;
  _BOOL4 v82;
  uint64_t v83;
  uint8_t *v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  uint64_t v95;
  os_log_type_t v96;
  _BOOL4 v97;
  uint8_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  uint64_t v104;
  os_log_type_t v105;
  _BOOL4 v106;
  uint8_t *v107;
  void (*v108)(char *, uint64_t);
  uint64_t v109;
  uint64_t v110;
  int64_t v111;
  unint64_t v112;
  int64_t v113;
  __n128 v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  int64_t v118;
  unint64_t v119;
  int64_t v120;
  uint64_t v121;
  uint64_t v122;
  int64_t v123;
  __n128 v124;
  char *v125;
  char *v126;
  _QWORD *v127;
  __n128 v128;
  void (*v129)(char *, uint64_t, __n128);
  unint64_t v130;
  _BYTE *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  void (*v147)(char *, uint64_t, uint64_t);
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(char *, uint64_t);
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD v165[5];
  _QWORD *v166;

  v3 = v2;
  v159 = a2;
  v162 = sub_1000BA294(&qword_100C04ED8);
  __chkstk_darwin(v162);
  v161 = (uint64_t)&v133 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v133 - v7;
  v9 = sub_1000BA294(&qword_100BCCC50);
  __chkstk_darwin(v9);
  v154 = (uint64_t)&v133 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000BA294(&qword_100BDCCB0);
  __chkstk_darwin(v11);
  v158 = (uint64_t)&v133 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = type metadata accessor for Calendar.Component(0);
  v140 = *(_QWORD **)(v146 - 8);
  __chkstk_darwin(v146);
  v137 = (char *)&v133 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v136 = (char *)&v133 - v15;
  v16 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v16);
  v143 = (char *)&v133 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v144 = (char *)&v133 - v19;
  __chkstk_darwin(v20);
  v149 = (char *)&v133 - v21;
  __chkstk_darwin(v22);
  v155 = (void (*)(char *, uint64_t))((char *)&v133 - v23);
  v24 = type metadata accessor for Date(0);
  v163 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v138 = (char *)&v133 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v142 = (char *)&v133 - v27;
  __chkstk_darwin(v28);
  v145 = (char *)&v133 - v29;
  __chkstk_darwin(v30);
  v150 = (char *)&v133 - v31;
  __chkstk_darwin(v32);
  v160 = (char *)&v133 - v33;
  v34 = type metadata accessor for DateComponents(0);
  v152 = *(_QWORD *)(v34 - 8);
  v153 = v34;
  __chkstk_darwin(v34);
  v148 = (char *)&v133 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v38 = (char *)&v133 - v37;
  v39 = type metadata accessor for TimeZone(0);
  v40 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v42 = (char *)&v133 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = type metadata accessor for Calendar(0);
  v141 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v44 = (char *)&v133 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  Location.timeZone.getter(v45);
  static Calendar.currentCalendar(with:)(v42);
  v46 = *(uint64_t (**)(char *, uint64_t))(v40 + 8);
  v47 = v46(v42, v39);
  v139 = a1;
  Location.timeZone.getter(v47);
  sub_100955A74((uint64_t)v42, (uint64_t)v44, v159);
  v157 = v39;
  v48 = ((double (*)(char *, uint64_t))v46)(v42, v39);
  v49 = (uint64_t)v155;
  Calendar.date(from:)(v38, v48);
  v50 = _s7Weather24LocationCompositionStateOwet_0(v49, 1, v24);
  v151 = v44;
  if (v50 == 1)
  {
    sub_100021A14(v49, (uint64_t *)&unk_100BD35A0);
    v51 = sub_100785894();
    swift_allocError(&type metadata for CalculatorError, v51, 0, 0);
    *v52 = 0;
    swift_willThrow();
LABEL_56:
    v132 = v156;
    (*(void (**)(char *, uint64_t))(v152 + 8))(v38, v153);
    (*(void (**)(char *, uint64_t))(v141 + 8))(v151, v132);
    return;
  }
  v135 = v38;
  v147 = *(void (**)(char *, uint64_t, uint64_t))(v163 + 32);
  v147(v160, v49, v24);
  v53 = v140;
  v54 = (void (*)(char *, _QWORD, uint64_t))v140[13];
  v55 = v136;
  v56 = v146;
  v54(v136, enum case for Calendar.Component.month(_:), v146);
  v57 = v137;
  v54(v137, enum case for Calendar.Component.year(_:), v56);
  v159 = Calendar.range(of:in:for:)(v55, v57, v160);
  v59 = v58;
  v61 = v60;
  v62 = (void (*)(char *, uint64_t))v53[1];
  v62(v57, v56);
  v62(v55, v56);
  if ((v61 & 1) != 0)
  {
    v130 = sub_100785894();
    swift_allocError(&type metadata for CalculatorError, v130, 0, 0);
    *v131 = 0;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v163 + 8))(v160, v24);
    v38 = v135;
    goto LABEL_56;
  }
  v63 = v59 - v159;
  v64 = v156;
  if (__OFSUB__(v59, v159))
    goto LABEL_61;
  v61 = sub_1000BA294(&qword_100C04EE0);
  sub_1000A84E0((unint64_t *)&qword_100BC3588, (uint64_t)&protocol conformance descriptor for Date);
  v65 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  if (v63 < 0)
    goto LABEL_62;
  v140 = (_QWORD *)v65;
  if (v63)
  {
    v66 = 0;
    v164 = v24;
    v61 = (uint64_t)v160;
    v134 = v8;
    v146 = v63;
    while (v66 != v63)
    {
      v67 = v64;
      v68 = v158;
      _s7Weather24LocationCompositionStateOwst_0(v158, 1, 1, v67);
      v69 = v154;
      _s7Weather24LocationCompositionStateOwst_0(v154, 1, 1, v157);
      v70 = v148;
      v159 = v66 + 1;
      DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v68, v69, 0, 1, 0, 1, v66 + 1, 0);
      v71 = v67;
      v72 = (uint64_t)v149;
      v73 = v61;
      v74 = (uint64_t)v151;
      Calendar.date(byAdding:to:wrappingComponents:)(v70, v73, 0);
      v75 = v153;
      v76 = v164;
      v155 = *(void (**)(char *, uint64_t))(v152 + 8);
      v155(v70, v153);
      if (_s7Weather24LocationCompositionStateOwet_0(v72, 1, v76) == 1)
      {
        sub_100021A14(v72, (uint64_t *)&unk_100BD35A0);
        if (qword_100BC2450 != -1)
          swift_once(&qword_100BC2450, sub_1006F3844);
        v77 = type metadata accessor for Logger(0);
        v78 = sub_1000AECD4(v77, (uint64_t)qword_100CAF0E8);
        v79 = Logger.logObject.getter(v78);
        v81 = static os_log_type_t.error.getter(v79, v80);
        v82 = os_log_type_enabled(v79, v81);
        v24 = v164;
        v64 = v156;
        v63 = v146;
        if (v82)
        {
          v83 = v156;
          v84 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v84 = 0;
          _os_log_impl((void *)&_mh_execute_header, v79, v81, "Failed to create beginningOfTheNextMonth", v84, 2u);
          v85 = v84;
          v64 = v83;
          swift_slowDealloc(v85, -1, -1);
        }

        v59 = v163;
        v86 = v159;
      }
      else
      {
        v147(v150, v72, v76);
        v87 = v158;
        _s7Weather24LocationCompositionStateOwst_0(v158, 1, 1, v71);
        v88 = v154;
        _s7Weather24LocationCompositionStateOwst_0(v154, 1, 1, v157);
        DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v87, v88, 0, 1, 0, 1, v66, 0);
        v89 = (uint64_t)v144;
        Calendar.date(byAdding:to:wrappingComponents:)(v70, v160, 0);
        v155(v70, v75);
        v90 = _s7Weather24LocationCompositionStateOwet_0(v89, 1, v76);
        v91 = v156;
        if (v90 == 1)
        {
          sub_100021A14(v89, (uint64_t *)&unk_100BD35A0);
          if (qword_100BC2450 != -1)
            swift_once(&qword_100BC2450, sub_1006F3844);
          v92 = type metadata accessor for Logger(0);
          v93 = sub_1000AECD4(v92, (uint64_t)qword_100CAF0E8);
          v94 = Logger.logObject.getter(v93);
          v96 = static os_log_type_t.error.getter(v94, v95);
          v97 = os_log_type_enabled(v94, v96);
          v24 = v164;
          v63 = v146;
          if (v97)
          {
            v98 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v98 = 0;
            _os_log_impl((void *)&_mh_execute_header, v94, v96, "Failed to create beginningOfTheMonth", v98, 2u);
            swift_slowDealloc(v98, -1, -1);
          }

          v59 = v163;
          (*(void (**)(char *, uint64_t))(v163 + 8))(v150, v24);
        }
        else
        {
          v24 = v76;
          v147(v145, v89, v76);
          v99 = v158;
          _s7Weather24LocationCompositionStateOwst_0(v158, 1, 1, v91);
          _s7Weather24LocationCompositionStateOwst_0(v88, 1, 1, v157);
          DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v99, v88, 0, 1, 0, 1, 0, 1);
          v100 = (uint64_t)v143;
          Calendar.date(byAdding:to:wrappingComponents:)(v70, v145, 0);
          v155(v70, v153);
          if (_s7Weather24LocationCompositionStateOwet_0(v100, 1, v24) != 1)
          {
            v109 = (uint64_t)v142;
            v147(v142, v100, v24);
            v155 = (void (*)(char *, uint64_t))objc_autoreleasePoolPush();
            v59 = sub_10078335C(v139, v109, (uint64_t)v150, v74);
            v166 = &_swiftEmptyDictionarySingleton;
            sub_1006C17D4(v165, v59);
            v61 = v165[0];
            v110 = v165[1];
            v111 = v165[3];
            v112 = v165[4];
            v113 = (unint64_t)(v165[2] + 64) >> 6;
            v137 = (char *)v59;
            v114 = swift_bridgeObjectRetain(v59);
            v115 = (uint64_t)v134;
            if (v112)
            {
LABEL_28:
              v116 = __clz(__rbit64(v112));
              v112 &= v112 - 1;
              v117 = v116 | (v111 << 6);
              goto LABEL_42;
            }
            while (1)
            {
              v118 = v111 + 1;
              if (__OFADD__(v111, 1))
                break;
              if (v118 >= v113)
                goto LABEL_51;
              v119 = *(_QWORD *)(v110 + 8 * v118);
              if (!v119)
              {
                v120 = v111 + 2;
                if (v111 + 2 >= v113)
                  goto LABEL_51;
                v119 = *(_QWORD *)(v110 + 8 * v120);
                if (v119)
                  goto LABEL_40;
                v120 = v111 + 3;
                if (v111 + 3 >= v113)
                  goto LABEL_51;
                v119 = *(_QWORD *)(v110 + 8 * v120);
                if (v119)
                  goto LABEL_40;
                v120 = v111 + 4;
                if (v111 + 4 >= v113)
                  goto LABEL_51;
                v119 = *(_QWORD *)(v110 + 8 * v120);
                if (v119)
                  goto LABEL_40;
                v120 = v111 + 5;
                if (v111 + 5 >= v113)
                  goto LABEL_51;
                v119 = *(_QWORD *)(v110 + 8 * v120);
                if (v119)
                {
LABEL_40:
                  v118 = v120;
                }
                else
                {
                  v118 = v111 + 6;
                  if (v111 + 6 >= v113)
                    goto LABEL_51;
                  v119 = *(_QWORD *)(v110 + 8 * v118);
                  if (!v119)
                  {
                    v123 = v111 + 7;
                    while (v123 < v113)
                    {
                      v119 = *(_QWORD *)(v110 + 8 * v123++);
                      if (v119)
                      {
                        v118 = v123 - 1;
                        goto LABEL_41;
                      }
                    }
LABEL_51:
                    swift_bridgeObjectRelease();
                    v124 = swift_release(v61);
                    v59 = v163;
                    v125 = v138;
                    v126 = v145;
                    (*(void (**)(char *, char *, uint64_t, __n128))(v163 + 16))(v138, v145, v24, v124);
                    v127 = v140;
                    swift_isUniquelyReferenced_nonNull_native(v140);
                    v166 = v127;
                    sub_10016DCB8();
                    v140 = v166;
                    v128 = swift_bridgeObjectRelease();
                    v129 = *(void (**)(char *, uint64_t, __n128))(v59 + 8);
                    v129(v125, v24, v128);
                    objc_autoreleasePoolPop(v155);
                    ((void (*)(char *, uint64_t))v129)(v142, v24);
                    ((void (*)(char *, uint64_t))v129)(v126, v24);
                    ((void (*)(char *, uint64_t))v129)(v150, v24);
                    v63 = v146;
                    goto LABEL_52;
                  }
                }
              }
LABEL_41:
              v112 = (v119 - 1) & v119;
              v117 = __clz(__rbit64(v119)) + (v118 << 6);
              v111 = v118;
LABEL_42:
              (*(void (**)(uint64_t, unint64_t, uint64_t, __n128))(v163 + 16))(v115, *(_QWORD *)(v61 + 48) + *(_QWORD *)(v163 + 72) * v117, v24, v114);
              v121 = *(_QWORD *)(v61 + 56);
              v122 = type metadata accessor for CLLocationCoordinate2D.SolarEvents(0);
              (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v122 - 8) + 16))(v115 + *(int *)(v162 + 48), v121 + *(_QWORD *)(*(_QWORD *)(v122 - 8) + 72) * v117, v122);
              v59 = v161;
              sub_1000787D4(v115, v161, &qword_100C04ED8);
              sub_100783808((uint64_t)&v166, v59);
              if (v3)
                goto LABEL_63;
              v3 = 0;
              sub_100021A14(v59, &qword_100C04ED8);
              v24 = v164;
              if (v112)
                goto LABEL_28;
            }
            __break(1u);
            break;
          }
          sub_100021A14(v100, (uint64_t *)&unk_100BD35A0);
          if (qword_100BC2450 != -1)
            swift_once(&qword_100BC2450, sub_1006F3844);
          v101 = type metadata accessor for Logger(0);
          v102 = sub_1000AECD4(v101, (uint64_t)qword_100CAF0E8);
          v103 = Logger.logObject.getter(v102);
          v105 = static os_log_type_t.error.getter(v103, v104);
          v106 = os_log_type_enabled(v103, v105);
          v63 = v146;
          if (v106)
          {
            v107 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v107 = 0;
            _os_log_impl((void *)&_mh_execute_header, v103, v105, "Failed to create endingOfThePreviousMonth", v107, 2u);
            swift_slowDealloc(v107, -1, -1);
          }

          v59 = v163;
          v108 = *(void (**)(char *, uint64_t))(v163 + 8);
          v108(v145, v24);
          v108(v150, v24);
        }
LABEL_52:
        v86 = v159;
        v64 = v156;
      }
      v66 = v86;
      v61 = (uint64_t)v160;
      if (v86 == v63)
        goto LABEL_58;
    }
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    sub_100021A14(v59, &qword_100C04ED8);
    swift_release(v61);
    swift_bridgeObjectRelease();
    __break(1u);
    return;
  }
  v59 = v163;
  v61 = (uint64_t)v160;
LABEL_58:
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v61, v24);
  (*(void (**)(char *, uint64_t))(v152 + 8))(v135, v153);
  (*(void (**)(char *, uint64_t))(v141 + 8))(v151, v64);
}

uint64_t sub_1007808E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD v7[4];
  uint64_t v8;

  type metadata accessor for Date(0);
  type metadata accessor for MonthSunAverage(0);
  sub_1000A84E0((unint64_t *)&qword_100BC3588, (uint64_t)&protocol conformance descriptor for Date);
  v8 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  v7[2] = a2;
  v7[3] = &v8;
  sub_100222938((void (*)(char *, __n128))sub_100785F14, (uint64_t)v7, a1);
  v5 = v8;
  if (v2)
    swift_bridgeObjectRelease();
  return v5;
}

void sub_1007809A0(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  __n128 v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  Class isa;
  uint64_t v86;
  uint64_t v87;
  int v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(char *, uint64_t, id);
  uint64_t v99;
  int v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  unint64_t v104;
  _BYTE *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(char *, uint64_t, id);
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  void (*v118)(char *, id);
  char *v119;
  uint64_t v120;
  int *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  void *v132;
  _QWORD *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163[8];
  _QWORD *v164;
  _QWORD v165[5];
  char *v166;

  v4 = v3;
  v157 = a2;
  v146 = a3;
  v126 = type metadata accessor for EdgeSunEvents(0);
  __chkstk_darwin(v126);
  v127 = (char *)&v125 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = type metadata accessor for SunriseSunsetDaylightCalculator.TimeRange(0);
  __chkstk_darwin(v148);
  v136 = (uint64_t)&v125 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = (char *)type metadata accessor for Date(0);
  v162 = *((_QWORD *)v166 - 1);
  __chkstk_darwin(v166);
  v130 = (char *)&v125 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v129 = (char *)&v125 - v10;
  __chkstk_darwin(v11);
  v142 = (char *)&v125 - v12;
  __chkstk_darwin(v13);
  v134 = (char *)&v125 - v14;
  __chkstk_darwin(v15);
  v145 = (char *)&v125 - v16;
  v17 = sub_1000BA294(&qword_100C04ED0);
  __chkstk_darwin(v17);
  v138 = (char *)&v125 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v158 = (uint64_t)&v125 - v20;
  v155 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v155);
  v128 = (uint64_t)&v125 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v131 = (uint64_t)&v125 - v23;
  __chkstk_darwin(v24);
  v135 = (uint64_t)&v125 - v25;
  __chkstk_darwin(v26);
  v144 = (char *)&v125 - v27;
  __chkstk_darwin(v28);
  v143 = (uint64_t)&v125 - v29;
  __chkstk_darwin(v30);
  v153 = (uint64_t)&v125 - v31;
  __chkstk_darwin(v32);
  v154 = (uint64_t)&v125 - v33;
  __chkstk_darwin(v34);
  v159 = (uint64_t)&v125 - v35;
  v141 = type metadata accessor for Calendar(0);
  v140 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v152 = (char *)&v125 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_1000BA294(&qword_100BCC818);
  __chkstk_darwin(v37);
  v39 = (char *)&v125 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v42 = (char *)&v125 - v41;
  v164 = &_swiftEmptyDictionarySingleton;
  sub_1006C17D4(v165, a1);
  v43 = v165[0];
  v44 = v165[3];
  v45 = v165[4];
  v160 = v165[1];
  v161 = (unint64_t)(v165[2] + 64) >> 6;
  v46 = swift_bridgeObjectRetain(a1);
  if (!v45)
    goto LABEL_3;
LABEL_2:
  v47 = __clz(__rbit64(v45));
  v45 &= v45 - 1;
  v48 = v47 | (v44 << 6);
  while (1)
  {
    (*(void (**)(char *, unint64_t, char *, __n128))(v162 + 16))(v42, *(_QWORD *)(v43 + 48) + *(_QWORD *)(v162 + 72) * v48, v166, v46);
    v53 = *(_QWORD *)(*(_QWORD *)(v43 + 56) + 8 * v48);
    *(_QWORD *)&v42[*(int *)(v37 + 48)] = v53;
    sub_1000787D4((uint64_t)v42, (uint64_t)v39, &qword_100BCC818);
    v54 = *(_QWORD *)&v39[*(int *)(v37 + 48)];
    swift_bridgeObjectRetain(v53);
    sub_10077F018(v54, &v164);
    sub_100021A14((uint64_t)v39, &qword_100BCC818);
    if (v45)
      goto LABEL_2;
LABEL_3:
    v49 = v44 + 1;
    if (__OFADD__(v44, 1))
    {
      __break(1u);
LABEL_50:
      swift_release(v164);
      __break(1u);
      return;
    }
    if (v49 >= v161)
    {
      v50 = v159;
      goto LABEL_25;
    }
    v50 = v159;
    v51 = *(_QWORD *)(v160 + 8 * v49);
    if (!v51)
    {
      v52 = v44 + 2;
      if (v44 + 2 >= v161)
        goto LABEL_25;
      v51 = *(_QWORD *)(v160 + 8 * v52);
      if (v51)
        goto LABEL_14;
      v52 = v44 + 3;
      if (v44 + 3 >= v161)
        goto LABEL_25;
      v51 = *(_QWORD *)(v160 + 8 * v52);
      if (v51)
        goto LABEL_14;
      v52 = v44 + 4;
      if (v44 + 4 >= v161)
        goto LABEL_25;
      v51 = *(_QWORD *)(v160 + 8 * v52);
      if (v51)
        goto LABEL_14;
      v52 = v44 + 5;
      if (v44 + 5 >= v161)
        goto LABEL_25;
      v51 = *(_QWORD *)(v160 + 8 * v52);
      if (v51)
      {
LABEL_14:
        v49 = v52;
        goto LABEL_15;
      }
      v49 = v44 + 6;
      if (v44 + 6 >= v161)
        goto LABEL_25;
      v51 = *(_QWORD *)(v160 + 8 * v49);
      if (!v51)
        break;
    }
LABEL_15:
    v45 = (v51 - 1) & v51;
    v48 = __clz(__rbit64(v51)) + (v49 << 6);
    v44 = v49;
  }
  v55 = v44 + 7;
  while (v55 < v161)
  {
    v51 = *(_QWORD *)(v160 + 8 * v55++);
    if (v51)
    {
      v49 = v55 - 1;
      goto LABEL_15;
    }
  }
LABEL_25:
  swift_release(v43);
  swift_bridgeObjectRetain(v164);
  v57 = sub_1006ED028(v56);
  swift_bridgeObjectRelease();
  v164 = v57;
  sub_10077F4F0(&v164);
  v58 = v153;
  v59 = v154;
  v147 = v4;
  if (v4)
    goto LABEL_50;
  swift_bridgeObjectRelease();
  v60 = v164;
  static Calendar.currentCalendar(with:)(v157);
  v61 = v155;
  v156 = swift_allocBox(v155);
  v62 = v166;
  _s7Weather24LocationCompositionStateOwst_0(v63, 1, 1, (uint64_t)v166);
  v149 = swift_allocBox(v61);
  _s7Weather24LocationCompositionStateOwst_0(v64, 1, 1, (uint64_t)v62);
  v65 = swift_allocObject(&unk_100B8FF88, 24, 7);
  *(_QWORD *)(v65 + 16) = 0;
  v151 = swift_allocBox(v61);
  v139 = v66;
  _s7Weather24LocationCompositionStateOwst_0(v66, 1, 1, (uint64_t)v62);
  v150 = swift_allocBox(v61);
  v137 = v67;
  _s7Weather24LocationCompositionStateOwst_0(v67, 1, 1, (uint64_t)v62);
  v68 = swift_allocObject(&unk_100B8FF88, 24, 7);
  *(_QWORD *)(v68 + 16) = 0;
  _s7Weather24LocationCompositionStateOwst_0(v50, 1, 1, (uint64_t)v62);
  v69 = v158;
  _s7Weather24LocationCompositionStateOwst_0(v158, 1, 1, v148);
  _s7Weather24LocationCompositionStateOwst_0(v59, 1, 1, (uint64_t)v62);
  _s7Weather24LocationCompositionStateOwst_0(v58, 1, 1, (uint64_t)v62);
  v70 = objc_autoreleasePoolPush();
  v71 = v60[2];
  v160 = v68;
  v161 = v65;
  if (v71)
  {
    v132 = v70;
    v72 = *(_QWORD *)(sub_1000BA294(&qword_100BCC820) - 8);
    v73 = (uint64_t)v60 + ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80));
    v155 = *(_QWORD *)(v72 + 72);
    v133 = v60;
    swift_retain();
    v74 = v159;
    v75 = v153;
    v76 = v154;
    v77 = (uint64_t)v152;
    v78 = v149;
    v79 = v147;
    v80 = v151;
    v81 = v150;
    do
    {
      sub_100781A94(v73, v156, v157, v78, v161, v160, v80, v81, v76, v77, v75, v158, v74);
      v73 += v155;
      --v71;
    }
    while (v71);
    v147 = v79;
    v60 = v133;
    swift_release(v133);
    v69 = v158;
    v62 = v166;
    v82 = v156;
    v68 = v160;
    v65 = v161;
    v70 = v132;
  }
  else
  {
    v82 = v156;
  }
  objc_autoreleasePoolPop(v70);
  swift_release(v60);
  v83 = v149;
  sub_100781844(v65, v68, v151, v82, v150, v149);
  v84 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  objc_msgSend(v84, "setDateStyle:", 1);
  isa = TimeZone._bridgeToObjectiveC()().super.isa;
  v166 = (char *)v84;
  objc_msgSend(v84, "setTimeZone:", isa);

  v86 = v139;
  swift_beginAccess(v139, &v164, 0, 0);
  v87 = v143;
  sub_100037768(v86, v143, (uint64_t *)&unk_100BD35A0);
  v88 = _s7Weather24LocationCompositionStateOwet_0(v87, 1, (uint64_t)v62);
  v89 = v146;
  v90 = v145;
  v91 = (uint64_t)v144;
  if (v88 == 1)
  {
    v91 = v87;
    v92 = v159;
    v93 = v142;
    v94 = (uint64_t)v138;
    goto LABEL_35;
  }
  v95 = v82;
  v96 = v87;
  v97 = v162;
  v98 = *(void (**)(char *, uint64_t, id))(v162 + 32);
  v98(v145, v96, v62);
  v99 = v137;
  swift_beginAccess(v137, v163, 0, 0);
  sub_100037768(v99, v91, (uint64_t *)&unk_100BD35A0);
  v100 = _s7Weather24LocationCompositionStateOwet_0(v91, 1, (uint64_t)v62);
  v101 = v90;
  v93 = v142;
  if (v100 == 1)
  {
    (*(void (**)(char *, char *))(v97 + 8))(v101, v62);
    v92 = v159;
    v94 = (uint64_t)v138;
    v82 = v95;
    v83 = v149;
LABEL_35:
    sub_100021A14(v91, (uint64_t *)&unk_100BD35A0);
    sub_100037768(v69, v94, &qword_100C04ED0);
    if (_s7Weather24LocationCompositionStateOwet_0(v94, 1, v148) == 1)
    {
      v102 = &qword_100C04ED0;
      goto LABEL_39;
    }
    v103 = v136;
    sub_10007802C(v94, v136, type metadata accessor for SunriseSunsetDaylightCalculator.TimeRange);
    v94 = v135;
    sub_100037768(v92, v135, (uint64_t *)&unk_100BD35A0);
    if (_s7Weather24LocationCompositionStateOwet_0(v94, 1, (uint64_t)v62) == 1)
    {
      sub_1000215BC(v103, type metadata accessor for SunriseSunsetDaylightCalculator.TimeRange);
      v102 = (uint64_t *)&unk_100BD35A0;
LABEL_39:
      sub_100021A14(v94, v102);
LABEL_40:
      v104 = sub_100785894();
      swift_allocError(&type metadata for CalculatorError, v104, 0, 0);
      *v105 = 2;
      swift_willThrow();

      (*(void (**)(char *, uint64_t))(v140 + 8))(v152, v141);
      sub_100021A14(v153, (uint64_t *)&unk_100BD35A0);
      sub_100021A14(v154, (uint64_t *)&unk_100BD35A0);
      sub_100021A14(v69, &qword_100C04ED0);
      sub_100021A14(v92, (uint64_t *)&unk_100BD35A0);
      swift_release(v82);
      swift_release(v83);
      swift_release(v161);
      swift_release(v151);
      swift_release(v150);
      swift_release(v160);
      return;
    }
    v111 = v94;
    v112 = v162;
    v113 = *(void (**)(char *, uint64_t, id))(v162 + 32);
    v113(v93, v111, v62);
    v114 = v131;
    sub_100037768(v154, v131, (uint64_t *)&unk_100BD35A0);
    if (_s7Weather24LocationCompositionStateOwet_0(v114, 1, (uint64_t)v62) == 1)
    {
      (*(void (**)(char *, char *))(v112 + 8))(v93, v62);
      v115 = v103;
LABEL_47:
      sub_1000215BC(v115, type metadata accessor for SunriseSunsetDaylightCalculator.TimeRange);
      sub_100021A14(v114, (uint64_t *)&unk_100BD35A0);
      v92 = v159;
      v82 = v156;
      goto LABEL_40;
    }
    v116 = v129;
    v113(v129, v114, v62);
    v114 = v128;
    sub_100037768(v153, v128, (uint64_t *)&unk_100BD35A0);
    if (_s7Weather24LocationCompositionStateOwet_0(v114, 1, (uint64_t)v62) == 1)
    {
      v117 = v103;
      v118 = *(void (**)(char *, id))(v162 + 8);
      v118(v116, v62);
      v118(v93, v62);
      v115 = v117;
      goto LABEL_47;
    }

    v113(v130, v114, v62);
    v119 = v116;
    v120 = (uint64_t)v127;
    v113(v127, (uint64_t)v119, v62);
    v113((char *)(v120 + *(int *)(v126 + 20)), (uint64_t)v130, v62);
    (*(void (**)(char *, uint64_t))(v140 + 8))(v152, v141);
    v121 = (int *)sub_1000BA294(&qword_100BF58B8);
    v122 = v93;
    v123 = &v89[v121[12]];
    v166 = &v89[v121[16]];
    v124 = (uint64_t)&v89[v121[20]];
    v113(v89, (uint64_t)v122, v62);
    v113(v123, v103, v62);
    v113(v166, v103 + *(int *)(v148 + 20), v62);
    sub_10007802C(v120, v124, type metadata accessor for EdgeSunEvents);
    v108 = 0;
    v109 = v156;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v140 + 8))(v152, v141);
    v106 = v134;
    v98(v134, v91, v62);
    v107 = &v89[*(int *)(sub_1000BA294(&qword_100BF5898) + 48)];
    v98(v89, (uint64_t)v101, v62);
    v98(v107, (uint64_t)v106, v62);
    v108 = 1;
    v109 = v95;
    v83 = v149;
  }
  v110 = type metadata accessor for MaxDaylight(0);
  swift_storeEnumTagMultiPayload(v89, v110, v108);
  sub_100021A14(v153, (uint64_t *)&unk_100BD35A0);
  sub_100021A14(v154, (uint64_t *)&unk_100BD35A0);
  sub_100021A14(v69, &qword_100C04ED0);
  sub_100021A14(v159, (uint64_t *)&unk_100BD35A0);
  swift_release(v109);
  swift_release(v83);
  swift_release(v161);
  swift_release(v151);
  swift_release(v150);
  swift_release(v160);
}

uint64_t sub_100781844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _BYTE v25[24];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[24];
  _BYTE v34[24];
  _BYTE v35[32];

  v12 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v12);
  v14 = &v25[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = (uint64_t *)(a1 + 16);
  v16 = (_QWORD *)(a2 + 16);
  v17 = swift_projectBox(a3);
  v18 = swift_projectBox(a4);
  v19 = swift_projectBox(a5);
  v20 = swift_projectBox(a6);
  swift_beginAccess(a1 + 16, v35, 0, 0);
  v21 = *(_QWORD *)(a1 + 16);
  swift_beginAccess(a2 + 16, v34, 0, 0);
  if (*(_QWORD *)(a2 + 16) < v21)
  {
    swift_beginAccess(v18, &v30, 0, 0);
    sub_100037768(v18, (uint64_t)v14, (uint64_t *)&unk_100BD35A0);
    swift_beginAccess(v17, &v29, 1, 0);
    sub_10015BADC((uint64_t)v14, v17);
    swift_beginAccess(v20, &v28, 0, 0);
    sub_100037768(v20, (uint64_t)v14, (uint64_t *)&unk_100BD35A0);
    swift_beginAccess(v19, &v27, 1, 0);
    sub_10015BADC((uint64_t)v14, v19);
    swift_beginAccess(v15, &v26, 0, 0);
    v22 = *v15;
    swift_beginAccess(v16, v25, 1, 0);
    *v16 = v22;
  }
  v23 = type metadata accessor for Date(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 1, 1, v23);
  swift_beginAccess(v18, v33, 1, 0);
  sub_10015BADC((uint64_t)v14, v18);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 1, 1, v23);
  swift_beginAccess(v20, &v32, 1, 0);
  sub_10015BADC((uint64_t)v14, v20);
  result = swift_beginAccess(v15, &v31, 1, 0);
  *v15 = 0;
  return result;
}

void sub_100781A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  _QWORD v39[13];
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v51 = a8;
  v50 = a7;
  v48 = a6;
  v55 = a5;
  v54 = a4;
  v39[2] = a3;
  v53 = a1;
  v39[4] = a13;
  v44 = a12;
  v43 = a11;
  v39[10] = a10;
  v39[8] = a9;
  v14 = sub_1000BA294(&qword_100C04ED0);
  __chkstk_darwin(v14);
  v39[11] = (char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for SunriseSunsetDaylightCalculator.TimeRange(0);
  __chkstk_darwin(v40);
  v39[3] = (char *)v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v45 = (char *)v39 - v18;
  v19 = sub_1000BA294(&qword_100BCC820);
  __chkstk_darwin(v19);
  v42 = (char *)v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v21);
  v39[7] = (char *)v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v39[6] = (char *)v39 - v24;
  __chkstk_darwin(v25);
  v39[5] = (char *)v39 - v26;
  __chkstk_darwin(v27);
  v52 = type metadata accessor for Date(0);
  v47 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v39[1] = (char *)v39 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  __chkstk_darwin(v30);
  v39[12] = (char *)v39 - v31;
  __chkstk_darwin(v32);
  v46 = (char *)v39 - v33;
  __chkstk_darwin(v34);
  v35 = type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity(0);
  __chkstk_darwin(v35);
  v37 = (char *)v39 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = a2;
  swift_projectBox(a2);
  v39[9] = swift_projectBox(v54);
  v41 = v19;
  sub_100080C0C(v53 + *(int *)(v19 + 48), (uint64_t)v37, type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity);
  v38 = (char *)&loc_100781E18 + *((int *)qword_100782688 + swift_getEnumCaseMultiPayload(v37));
  __asm { BR              X10 }
}

uint64_t sub_100781E28()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 272) + 8))(v0, *(_QWORD *)(v1 - 224));
  return sub_100781844(*(_QWORD *)(v1 - 72), *(_QWORD *)(v1 - 264), *(_QWORD *)(v1 - 248), *(_QWORD *)(v1 - 256), *(_QWORD *)(v1 - 240), *(_QWORD *)(v1 - 208));
}

void sub_1007826A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v6 = sub_1000BA294(&qword_100BCC818);
  __chkstk_darwin(v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(int *)(v9 + 48);
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, a1, v11);
  v12 = *(_QWORD *)(a1 + v10);
  *(_QWORD *)&v8[v10] = v12;
  swift_bridgeObjectRetain(v12);
  v13 = objc_autoreleasePoolPush();
  sub_100782780((uint64_t)v8, a2, a3);
  objc_autoreleasePoolPop(v13);
  sub_100021A14((uint64_t)v8, &qword_100BCC818);
}

void sub_100782780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v28 = a3;
  v29 = a2;
  v5 = sub_1000BA294(&qword_100BC36D8);
  __chkstk_darwin(v5);
  v27 = (uint64_t)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for MonthSunAverage(0);
  __chkstk_darwin(v26);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BCC818);
  __chkstk_darwin(v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = v12;
  v13 = *(int *)(v12 + 48);
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v24(v11, a1, v14);
  v16 = *(_QWORD *)(a1 + v13);
  *(_QWORD *)&v11[v13] = v16;
  swift_bridgeObjectRetain(v16);
  v18 = sub_100785920(v17);
  v19 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, __n128))(v15 + 8))(v11, v14, v19);
  sub_100782988(a1, v18, v29, (uint64_t)v8);
  v20 = swift_release(v18);
  if (!v3)
  {
    v21 = *(int *)(v25 + 48);
    ((void (*)(char *, uint64_t, uint64_t, __n128))v24)(v11, a1, v14, v20);
    *(_QWORD *)&v11[v21] = *(_QWORD *)(a1 + v13);
    v22 = v27;
    sub_100080C0C((uint64_t)v8, v27, type metadata accessor for MonthSunAverage);
    _s7Weather24LocationCompositionStateOwst_0(v22, 0, 1, v26);
    sub_10016B760(v22, (uint64_t)v11);
    sub_1000215BC((uint64_t)v8, type metadata accessor for MonthSunAverage);
  }
}

void sub_100782988(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, _QWORD, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  char *v60;
  unint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[2];
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84[16];
  _QWORD **v85;
  char *v86;
  _QWORD **v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v76 = a1;
  v8 = type metadata accessor for Date(0);
  v73 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v72 = (char *)v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v75 = (char *)v69 - v11;
  v12 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v12);
  v74 = (char *)v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)v69 - v15;
  __chkstk_darwin(v17);
  v80 = (uint64_t)v69 - v18;
  __chkstk_darwin(v19);
  v81 = (uint64_t)v69 - v20;
  v21 = sub_1000BA294(&qword_100BCCC50);
  __chkstk_darwin(v21);
  v23 = (char *)v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for DateComponents(0);
  v78 = *(_QWORD *)(v24 - 8);
  v79 = v24;
  __chkstk_darwin(v24);
  v26 = (char *)v69 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for Calendar(0);
  v82 = *(_QWORD *)(v27 - 8);
  v83 = v27;
  __chkstk_darwin(v27);
  v29 = (char *)v69 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = a3;
  static Calendar.currentCalendar(with:)(a3);
  v95 = 0;
  v93 = 0;
  v94 = 0;
  v91 = _swiftEmptyArrayStorage;
  v92 = _swiftEmptyArrayStorage;
  v85 = &v92;
  v86 = v29;
  v87 = &v91;
  v88 = &v95;
  v89 = &v94;
  v90 = &v93;
  sub_100222B7C((void (*)(char *))sub_100785F2C, (uint64_t)v84, a2);
  v31 = v93;
  v30 = v94;
  if (!v94 && !v93 && !v95)
  {
    v32 = sub_100785894();
    swift_allocError(&type metadata for CalculatorError, v32, 0, 0);
    *v33 = 1;
    swift_willThrow();
LABEL_10:
    (*(void (**)(char *, uint64_t))(v82 + 8))(v29, v83);
    goto LABEL_16;
  }
  if (v95 >= 1)
  {
    v69[1] = v4;
    v70 = a4;
    v34 = sub_1000BA294(&qword_100BC4E50);
    v35 = type metadata accessor for Calendar.Component(0);
    v71 = v8;
    v36 = v35;
    v37 = *(_QWORD *)(v35 - 8);
    v38 = *(_QWORD *)(v37 + 72);
    v39 = *(unsigned __int8 *)(v37 + 80);
    v40 = (v39 + 32) & ~v39;
    v41 = swift_allocObject(v34, v40 + 3 * v38, v39 | 7);
    *(_OWORD *)(v41 + 16) = xmmword_10098B610;
    v42 = v41 + v40;
    v43 = *(void (**)(uint64_t, _QWORD, uint64_t))(v37 + 104);
    v43(v42, enum case for Calendar.Component.year(_:), v36);
    v43(v42 + v38, enum case for Calendar.Component.month(_:), v36);
    v44 = v42 + 2 * v38;
    v45 = v71;
    v43(v44, enum case for Calendar.Component.day(_:), v36);
    v46 = sub_1000A8278(v41);
    Calendar.dateComponents(_:from:)(v46, v76);
    swift_bridgeObjectRelease();
    v47 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v23, v77, v47);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v23, 0, 1, v47);
    DateComponents.timeZone.setter(v23);
    v48 = sub_100783308((uint64_t)v92);
    v50 = v49;
    DateComponents.hour.setter(v48, 0);
    v51 = DateComponents.minute.setter(v50, 0);
    v52 = v81;
    Calendar.date(from:)(v26, v51);
    v53 = sub_100783308((uint64_t)v91);
    v55 = v54;
    DateComponents.hour.setter(v53, 0);
    v56 = DateComponents.minute.setter(v55, 0);
    v57 = v80;
    Calendar.date(from:)(v26, v56);
    sub_100037768(v52, (uint64_t)v16, (uint64_t *)&unk_100BD35A0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v45) != 1)
    {
      v58 = v73;
      v59 = *(void (**)(char *, char *, uint64_t))(v73 + 32);
      v60 = v75;
      v59(v75, v16, v45);
      v16 = v74;
      sub_100037768(v57, (uint64_t)v74, (uint64_t *)&unk_100BD35A0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v45) != 1)
      {
        sub_100021A14(v57, (uint64_t *)&unk_100BD35A0);
        sub_100021A14(v81, (uint64_t *)&unk_100BD35A0);
        (*(void (**)(char *, uint64_t))(v78 + 8))(v26, v79);
        (*(void (**)(char *, uint64_t))(v82 + 8))(v29, v83);
        v65 = v72;
        v59(v72, v16, v45);
        v66 = sub_1000BA294(&qword_100BF58E0);
        v67 = v70;
        v68 = v70 + *(int *)(v66 + 48);
        v59((char *)v70, v60, v45);
        v59((char *)v68, v65, v45);
        _s7Weather24LocationCompositionStateOwst_0(v67, 0, 2, v66);
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v45);
    }
    sub_100021A14((uint64_t)v16, (uint64_t *)&unk_100BD35A0);
    v61 = sub_100785894();
    swift_allocError(&type metadata for CalculatorError, v61, 0, 0);
    *v62 = 1;
    swift_willThrow();
    sub_100021A14(v80, (uint64_t *)&unk_100BD35A0);
    sub_100021A14(v81, (uint64_t *)&unk_100BD35A0);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v26, v79);
    goto LABEL_10;
  }
  (*(void (**)(char *, uint64_t))(v82 + 8))(v29, v83);
  v63 = sub_1000BA294(&qword_100BF58E0);
  if (v31 >= v30)
    v64 = 1;
  else
    v64 = 2;
  _s7Weather24LocationCompositionStateOwst_0(a4, v64, 2, v63);
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void sub_100782FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  _QWORD v15[6];

  v15[1] = a7;
  v15[2] = a6;
  v15[4] = a5;
  v15[5] = a4;
  v15[3] = a3;
  v8 = type metadata accessor for Date(0);
  __chkstk_darwin(v8);
  __chkstk_darwin(v9);
  v10 = type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity(0);
  __chkstk_darwin(v10);
  v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000BA294(&qword_100BCC820);
  sub_100080C0C(a1 + *(int *)(v13 + 48), (uint64_t)v12, type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity);
  v14 = (char *)&loc_1007830F8 + *((int *)qword_1007832F0 + swift_getEnumCaseMultiPayload(v12));
  __asm { BR              X10 }
}

uint64_t sub_100783108()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_100783308(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return v1 / 3600;
  v2 = 0;
  v3 = 0;
  while (1)
  {
    v4 = *(_QWORD *)(result + 32 + 8 * v2);
    v5 = __OFADD__(v3, v4);
    v3 += v4;
    if (v5)
      break;
    if (v1 == ++v2)
    {
      v1 = v3 / v1;
      return v1 / 3600;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10078335C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char *v27;
  void (*v28)(uint64_t, char *, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, char *, uint64_t);
  char *v40;
  uint64_t v41;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v43;
  char v44;
  uint64_t v45;
  _BOOL8 v46;
  Swift::Int v47;
  unint64_t v48;
  char v49;
  Swift::Bool v50;
  unint64_t v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  __n128 v57;
  void (*v58)(char *, uint64_t, __n128);
  uint64_t result;
  _QWORD v60[2];
  char *v61;
  void (*v62)(char *, uint64_t);
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  _QWORD *v74;

  v68 = a2;
  v7 = type metadata accessor for CLLocationCoordinate2D.SolarEvents(0);
  v72 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v70 = (char *)v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)v60 - v10;
  v12 = type metadata accessor for Date(0);
  v71 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v73 = (char *)v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v69 = (char *)v60 - v15;
  v16 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v16);
  v66 = (uint64_t)v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for TimeZone(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A84E0((unint64_t *)&qword_100BC3588, (uint64_t)&protocol conformance descriptor for Date);
  v22 = v12;
  v23 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  v65 = a1;
  Location.timeZone.getter(v23);
  v24 = sub_100784594(v68, a3, a4, (uint64_t)v21);
  v25 = *(void (**)(char *, uint64_t))(v19 + 8);
  v63 = v21;
  v64 = v18;
  v62 = v25;
  v25(v21, v18);
  v26 = v24[2];
  v60[1] = v24;
  if (v26)
  {
    v27 = (char *)v24 + ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80));
    v67 = *(_QWORD *)(v71 + 72);
    v28 = *(void (**)(uint64_t, char *, uint64_t))(v71 + 16);
    v61 = v11;
    while (1)
    {
      v29 = v66;
      v28(v66, v27, v22);
      _s7Weather24LocationCompositionStateOwst_0(v29, 0, 1, v22);
      if (_s7Weather24LocationCompositionStateOwet_0(v29, 1, v22) == 1)
        break;
      v68 = v26;
      v30 = v69;
      v31 = v22;
      v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 32))(v69, v29, v22);
      v33 = Location.coordinate.getter(v32);
      v35 = v34;
      v36 = v63;
      Location.timeZone.getter(v37);
      CLLocationCoordinate2D.solarEvents(referenceDate:timeZone:)(v30, v36, v33, v35);
      v62(v36, v64);
      v22 = v31;
      v38 = v31;
      v39 = v28;
      v28((uint64_t)v73, v30, v38);
      v40 = v11;
      v41 = v7;
      (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v70, v40, v7);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
      v74 = (_QWORD *)v23;
      sub_10016C6BC();
      v45 = *(_QWORD *)(v23 + 16);
      v46 = (v44 & 1) == 0;
      v47 = v45 + v46;
      if (__OFADD__(v45, v46))
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v22);
        __break(1u);
        return result;
      }
      v48 = v43;
      v49 = v44;
      sub_1000BA294(&qword_100C04EE8);
      v50 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v47);
      v28 = v39;
      if (v50)
      {
        sub_10016C6BC();
        if ((v49 & 1) != (v52 & 1))
          goto LABEL_17;
        v48 = v51;
      }
      v53 = v74;
      if ((v49 & 1) != 0)
      {
        v7 = v41;
        (*(void (**)(unint64_t, char *, uint64_t))(v72 + 40))(v74[7] + *(_QWORD *)(v72 + 72) * v48, v70, v41);
      }
      else
      {
        v74[(v48 >> 6) + 8] |= 1 << v48;
        v39(v53[6] + v48 * v67, v73, v22);
        v7 = v41;
        (*(void (**)(unint64_t, char *, uint64_t))(v72 + 32))(v53[7] + *(_QWORD *)(v72 + 72) * v48, v70, v41);
        v54 = v53[2];
        v55 = __OFADD__(v54, 1);
        v56 = v54 + 1;
        if (v55)
          goto LABEL_16;
        v53[2] = v56;
      }
      v23 = (uint64_t)v74;
      v57 = swift_bridgeObjectRelease();
      v58 = *(void (**)(char *, uint64_t, __n128))(v71 + 8);
      v58(v73, v22, v57);
      v11 = v61;
      (*(void (**)(char *, uint64_t))(v72 + 8))(v61, v7);
      ((void (*)(char *, uint64_t))v58)(v69, v22);
      v27 += v67;
      v26 = v68 - 1;
      if (v68 == 1)
        goto LABEL_13;
    }
  }
  else
  {
LABEL_13:
    _s7Weather24LocationCompositionStateOwst_0(v66, 1, 1, v22);
  }
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t sub_100783808(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void (*v55)(void);
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(char *, uint64_t);
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(char *, uint64_t, uint64_t);
  char *v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(char *, uint64_t);
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char v92;
  char *v93;
  uint64_t v94;
  void (*v95)(void);
  uint64_t v96;
  void (*v97)(char *, uint64_t);
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  void (*v105)(char *, uint64_t);
  char *v106;
  uint64_t v107;
  char v108;
  void (*v109)(char *, uint64_t);
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  void (*v118)(char *, uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(uint64_t, uint64_t);
  uint64_t v124;
  char *v125;
  void (*v126)(void);
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char v131;
  uint64_t (*v132)(char *, uint64_t);
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v137;
  uint64_t v138;
  void (*v139)(char *, uint64_t);
  uint64_t v140;
  void (*v141)(void);
  uint64_t v142;
  uint64_t (*v143)(uint64_t, uint64_t);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  void (*v151)(char *, uint64_t);
  uint64_t v152;
  uint64_t v153;
  uint64_t (*v154)(uint64_t, uint64_t);
  uint64_t v155;
  char *v156;
  uint64_t v157;
  void (*v158)(void);
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  void (*v163)(void);
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  void (*v168)(char *, uint64_t);
  uint64_t v169;
  char *v170;
  uint64_t v171;
  char *v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  char *v182;
  char *v183;
  char *v184;
  char *v185;
  _QWORD *v186;
  char *v187;
  char *v188;
  void (*v189)(char *, uint64_t, uint64_t);
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  void (*v194)(uint64_t, uint64_t, uint64_t);
  uint64_t v195;
  uint64_t v196;
  void (*v197)(char *, uint64_t);
  void (*v198)(char *, uint64_t);
  void (*v199)(void);
  uint64_t v200;

  v190 = a1;
  v3 = sub_1000BA294(&qword_100BC36C8);
  __chkstk_darwin(v3);
  v174 = (char *)&v172 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v183 = (char *)&v172 - v6;
  v7 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v7);
  v178 = (char *)&v172 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v182 = (char *)&v172 - v10;
  __chkstk_darwin(v11);
  v181 = (char *)&v172 - v12;
  __chkstk_darwin(v13);
  v189 = (void (*)(char *, uint64_t, uint64_t))((char *)&v172 - v14);
  __chkstk_darwin(v15);
  v188 = (char *)&v172 - v16;
  __chkstk_darwin(v17);
  v19 = (char *)&v172 - v18;
  v20 = sub_1000BA294(&qword_100C04ED8);
  __chkstk_darwin(v20);
  v179 = (uint64_t)&v172 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v177 = (char *)&v172 - v23;
  __chkstk_darwin(v24);
  v193 = (char *)&v172 - v25;
  __chkstk_darwin(v26);
  v180 = (char *)&v172 - v27;
  __chkstk_darwin(v28);
  v184 = (char *)&v172 - v29;
  __chkstk_darwin(v30);
  v191 = (uint64_t)&v172 - v31;
  __chkstk_darwin(v32);
  v187 = (char *)&v172 - v33;
  __chkstk_darwin(v34);
  v36 = (char *)&v172 - v35;
  v37 = type metadata accessor for Date(0);
  v38 = *(_QWORD **)(v37 - 8);
  __chkstk_darwin(v37);
  v173 = (char *)&v172 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v176 = (char *)&v172 - v41;
  __chkstk_darwin(v42);
  v175 = (char *)&v172 - v43;
  __chkstk_darwin(v44);
  v185 = (char *)&v172 - v45;
  __chkstk_darwin(v46);
  v48 = (char *)&v172 - v47;
  v50 = __chkstk_darwin(v49);
  v198 = (void (*)(char *, uint64_t))((char *)&v172 - v51);
  v196 = v20;
  v52 = *(int *)(v20 + 48);
  v53 = &v36[v52];
  v54 = a2 + v52;
  v55 = (void (*)(void))v38[2];
  v192 = a2;
  v199 = v55;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v55)(v36, a2, v37, v50);
  v56 = type metadata accessor for CLLocationCoordinate2D.SolarEvents(0);
  v57 = *(_QWORD *)(v56 - 8);
  v58 = *(uint64_t (**)(char *, uint64_t))(v57 + 16);
  v200 = v56;
  v59 = v58(v53, v54);
  CLLocationCoordinate2D.SolarEvents.sunrise.getter(v59);
  v60 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v19, 1, v37);
  v194 = (void (*)(uint64_t, uint64_t, uint64_t))v58;
  v195 = v54;
  v186 = v38;
  if (v60 == 1)
  {
    sub_100021A14((uint64_t)v19, (uint64_t *)&unk_100BD35A0);
    v197 = *(void (**)(char *, uint64_t))(v57 + 8);
    v197(v53, v200);
    v198 = (void (*)(char *, uint64_t))v38[1];
    v198(v36, v37);
    v61 = v37;
    v62 = v196;
    v63 = (uint64_t (*)(char *, uint64_t, uint64_t))v58;
    v65 = v192;
    v64 = v193;
    v66 = (uint64_t)v189;
LABEL_5:
    v75 = v184;
    goto LABEL_6;
  }
  v172 = v48;
  v67 = (void (*)(char *, char *, uint64_t))v38[4];
  v67((char *)v198, v19, v37);
  v68 = v200;
  v197 = *(void (**)(char *, uint64_t))(v57 + 8);
  v197(v53, v200);
  v69 = (void (*)(char *, uint64_t))v38[1];
  v69(v36, v37);
  v70 = &v187[*(int *)(v196 + 48)];
  v65 = v192;
  v199();
  v71 = ((uint64_t (*)(char *, uint64_t, uint64_t))v58)(v70, v54, v68);
  v72 = (uint64_t)v188;
  CLLocationCoordinate2D.SolarEvents.sunset.getter(v71);
  v73 = v68;
  if (_s7Weather24LocationCompositionStateOwet_0(v72, 1, v37) == 1)
  {
    v74 = v58;
    v69((char *)v198, v37);
    sub_100021A14((uint64_t)v188, (uint64_t *)&unk_100BD35A0);
    v197(v70, v68);
    v198 = v69;
    v69(v187, v37);
    v61 = v37;
    v62 = v196;
    v64 = v193;
    v38 = v186;
    v66 = (uint64_t)v189;
    v63 = (uint64_t (*)(char *, uint64_t, uint64_t))v74;
    goto LABEL_5;
  }
  v91 = v172;
  v67(v172, v188, v37);
  v197(v70, v68);
  v69(v187, v37);
  v92 = static Date.> infix(_:_:)(v91, v198);
  v64 = v193;
  v66 = (uint64_t)v189;
  if ((v92 & 1) != 0)
  {
    v93 = v91;
    v94 = v191 + *(int *)(v196 + 48);
    v95 = v199;
    ((void (*)(uint64_t, uint64_t, uint64_t))v199)(v191, v65, v37);
    v194(v94, v195, v73);
    v96 = sub_1000BA294(&qword_100BF58E0);
    v97 = v69;
    v98 = (uint64_t)v183;
    v99 = &v183[*(int *)(v96 + 48)];
    v100 = (char *)v198;
    ((void (*)(char *, void (*)(char *, uint64_t), uint64_t))v95)(v183, v198, v37);
    ((void (*)(char *, char *, uint64_t))v95)(v99, v93, v37);
    v101 = type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity(0);
    swift_storeEnumTagMultiPayload(v98, v101, 0);
    _s7Weather24LocationCompositionStateOwst_0(v98, 0, 1, v101);
    sub_10016B744(v98, v191);
    v97(v93, v37);
    v97(v100, v37);
    v102 = v94;
    v103 = v73;
    return ((uint64_t (*)(uint64_t, uint64_t))v197)(v102, v103);
  }
  v69(v91, v37);
  v161 = (char *)v198;
  v198 = v69;
  v69(v161, v37);
  v61 = v37;
  v62 = v196;
  v38 = v186;
  v75 = v184;
  v63 = (uint64_t (*)(char *, uint64_t, uint64_t))v194;
LABEL_6:
  v76 = &v75[*(int *)(v62 + 48)];
  ((void (*)(char *, uint64_t, uint64_t))v199)(v75, v65, v61);
  v77 = v65;
  v78 = v195;
  v79 = v63(v76, v195, v200);
  CLLocationCoordinate2D.SolarEvents.sunrise.getter(v79);
  if (_s7Weather24LocationCompositionStateOwet_0(v66, 1, v61) == 1)
  {
    sub_100021A14(v66, (uint64_t *)&unk_100BD35A0);
    v197(v76, v200);
    v80 = v198;
    v81 = v75;
    v82 = v77;
    v83 = v196;
    v84 = v61;
    goto LABEL_15;
  }
  v189 = (void (*)(char *, uint64_t, uint64_t))v38[4];
  v189(v185, v66, v61);
  v85 = v200;
  v197(v76, v200);
  v198(v75, v61);
  v86 = v180;
  v87 = &v180[*(int *)(v196 + 48)];
  ((void (*)(char *, uint64_t, uint64_t))v199)(v180, v77, v61);
  v88 = v63(v87, v78, v85);
  v89 = (uint64_t)v181;
  CLLocationCoordinate2D.SolarEvents.sunset.getter(v88);
  v90 = v85;
  v84 = v61;
  if (_s7Weather24LocationCompositionStateOwet_0(v89, 1, v61) != 1)
  {
    v104 = v175;
    v189(v175, v89, v61);
    v197(v87, v90);
    v105 = v198;
    v198(v86, v61);
    sub_1000A84E0((unint64_t *)&qword_100BCB0E0, (uint64_t)&protocol conformance descriptor for Date);
    v106 = v185;
    v108 = dispatch thunk of static Comparable.< infix(_:_:)(v185, v104, v61, v107);
    v109 = v105;
    v64 = v193;
    if ((v108 & 1) != 0)
    {
      v105(v104, v61);
      v81 = v106;
      v80 = v105;
      v82 = v192;
      goto LABEL_14;
    }
    v162 = v104;
    v163 = v199;
    v164 = v191;
    v165 = v106;
    v196 = v191 + *(int *)(v196 + 48);
    v166 = v196;
    ((void (*)(uint64_t, uint64_t, uint64_t))v199)(v191, v192, v84);
    v194(v166, v195, v90);
    v167 = sub_1000BA294(&qword_100BF58E0);
    v168 = v109;
    v169 = (uint64_t)v183;
    v170 = &v183[*(int *)(v167 + 48)];
    ((void (*)(char *, char *, uint64_t))v163)(v183, v165, v84);
    ((void (*)(char *, char *, uint64_t))v163)(v170, v162, v84);
    v171 = type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity(0);
    swift_storeEnumTagMultiPayload(v169, v171, 1);
    _s7Weather24LocationCompositionStateOwst_0(v169, 0, 1, v171);
    sub_10016B744(v169, v164);
    v168(v162, v84);
    v168(v165, v84);
    v102 = v196;
    v103 = v90;
    return ((uint64_t (*)(uint64_t, uint64_t))v197)(v102, v103);
  }
  v80 = v198;
  v198(v185, v61);
  sub_100021A14(v89, (uint64_t *)&unk_100BD35A0);
  v197(v87, v85);
  v81 = v86;
  v82 = v192;
  v64 = v193;
LABEL_14:
  v83 = v196;
LABEL_15:
  v198 = v80;
  v80(v81, v84);
  v110 = &v64[*(int *)(v83 + 48)];
  ((void (*)(char *, uint64_t, uint64_t))v199)(v64, v82, v84);
  v111 = v195;
  v112 = ((uint64_t (*)(char *, uint64_t, uint64_t))v194)(v110, v195, v200);
  v113 = v64;
  v114 = (uint64_t)v182;
  CLLocationCoordinate2D.SolarEvents.sunrise.getter(v112);
  if (_s7Weather24LocationCompositionStateOwet_0(v114, 1, v84) == 1)
  {
    sub_100021A14(v114, (uint64_t *)&unk_100BD35A0);
    v115 = v200;
    v197(v110, v200);
    v198(v113, v84);
    v116 = v177;
    v117 = &v177[*(int *)(v83 + 48)];
    ((void (*)(char *, uint64_t, uint64_t))v199)(v177, v82, v84);
    v118 = (void (*)(char *, uint64_t, uint64_t))v194;
    v119 = ((uint64_t (*)(char *, uint64_t, uint64_t))v194)(v117, v111, v115);
    v120 = (uint64_t)v178;
    CLLocationCoordinate2D.SolarEvents.sunset.getter(v119);
    v121 = v82;
    if (_s7Weather24LocationCompositionStateOwet_0(v120, 1, v84) == 1)
    {
      sub_100021A14(v120, (uint64_t *)&unk_100BD35A0);
      v122 = v200;
      v197(v117, v200);
      v123 = (void (*)(uint64_t, uint64_t))v198;
      v198(v116, v84);
      v124 = v83;
      v193 = (char *)(v179 + *(int *)(v83 + 48));
      v125 = v193;
      v126 = v199;
      v199();
      v127 = v195;
      v118(v125, v195, v122);
      v128 = v191;
      v129 = (char *)(v191 + *(int *)(v124 + 48));
      ((void (*)(uint64_t, uint64_t, uint64_t))v126)(v191, v121, v84);
      v130 = ((uint64_t (*)(char *, uint64_t, uint64_t))v118)(v129, v127, v122);
      v131 = CLLocationCoordinate2D.SolarEvents.isDaylight.getter(v130);
      v132 = (uint64_t (*)(char *, uint64_t))v197;
      v197(v129, v122);
      v123(v128, v84);
      v133 = type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity(0);
      if ((v131 & 1) != 0)
        v134 = 5;
      else
        v134 = 4;
      v135 = (uint64_t)v174;
      swift_storeEnumTagMultiPayload(v174, v133, v134);
      _s7Weather24LocationCompositionStateOwst_0(v135, 0, 1, v133);
      sub_10016B744(v135, v179);
      return v132(v193, v122);
    }
    else
    {
      v148 = v173;
      ((void (*)(char *, uint64_t, uint64_t))v186[4])(v173, v120, v84);
      v149 = v117;
      v150 = v200;
      v151 = v197;
      v197(v149, v200);
      v198(v116, v84);
      v152 = *(int *)(v83 + 48);
      v153 = v84;
      v154 = (uint64_t (*)(uint64_t, uint64_t))v151;
      v155 = v191;
      v156 = (char *)(v191 + v152);
      v157 = v121;
      v158 = v199;
      ((void (*)(uint64_t, uint64_t, uint64_t))v199)(v191, v157, v153);
      v118(v156, v195, v150);
      v159 = (uint64_t)v183;
      ((void (*)(char *, char *, uint64_t))v158)(v183, v148, v153);
      v160 = type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity(0);
      swift_storeEnumTagMultiPayload(v159, v160, 3);
      _s7Weather24LocationCompositionStateOwst_0(v159, 0, 1, v160);
      sub_10016B744(v159, v155);
      v198(v148, v153);
      return v154((uint64_t)v156, v150);
    }
  }
  else
  {
    v137 = v176;
    ((void (*)(char *, uint64_t, uint64_t))v186[4])(v176, v114, v84);
    v138 = v200;
    v139 = v197;
    v197(v110, v200);
    v198(v113, v84);
    v140 = *(int *)(v83 + 48);
    v141 = v199;
    v142 = v82;
    v143 = (uint64_t (*)(uint64_t, uint64_t))v139;
    v144 = v191;
    v145 = v191 + v140;
    ((void (*)(uint64_t, uint64_t, uint64_t))v199)(v191, v142, v84);
    v194(v145, v111, v138);
    v146 = (uint64_t)v183;
    ((void (*)(char *, char *, uint64_t))v141)(v183, v137, v84);
    v147 = type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity(0);
    swift_storeEnumTagMultiPayload(v146, v147, 2);
    _s7Weather24LocationCompositionStateOwst_0(v146, 0, 1, v147);
    sub_10016B744(v146, v144);
    v198(v137, v84);
    return v143(v145, v138);
  }
}

_QWORD *sub_100784594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v27[16];
  uint64_t v28;
  uint64_t v29;
  _QWORD **v30;
  _QWORD *v31;

  v25 = type metadata accessor for Calendar.SearchDirection(0);
  v7 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v8 = sub_1000BE9F0();
  v9 = type metadata accessor for Calendar.RepeatedTimePolicy(v8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_100098728();
  v13 = v12 - v11;
  v14 = type metadata accessor for Calendar.MatchingPolicy(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = sub_1000C4668();
  v17 = type metadata accessor for DateComponents(v16);
  v23 = *(_QWORD *)(v17 - 8);
  v24 = v17;
  __chkstk_darwin(v17);
  sub_100098728();
  v20 = v19 - v18;
  v31 = _swiftEmptyArrayStorage;
  sub_1009558FC(a4);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 104))(v5, enum case for Calendar.MatchingPolicy.strict(_:), v14);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(v13, enum case for Calendar.RepeatedTimePolicy.first(_:), v9);
  v28 = a1;
  v29 = a2;
  v30 = &v31;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v4, enum case for Calendar.SearchDirection.forward(_:), v25);
  Calendar.enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)(a1, v20, v5, v13, v4, sub_100785F4C, v27);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v25);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v5, v14);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v20, v24);
  return v31;
}

void sub_10078478C(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v11 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v11);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100037768(a1, (uint64_t)v13, (uint64_t *)&unk_100BD35A0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v14) == 1)
  {
    sub_100021A14((uint64_t)v13, (uint64_t *)&unk_100BD35A0);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
  if ((static Date.> infix(_:_:)(v17, a4) & 1) == 0)
    goto LABEL_6;
  if ((static Date.< infix(_:_:)(v17, a5) & 1) != 0)
  {
    sub_10048BDA8();
    v18 = *(_QWORD *)(*a6 + 16);
    sub_1001ADD94(v18);
    v19 = *a6;
    *(_QWORD *)(v19 + 16) = v18 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v15 + 16))(v19+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v18, v17, v14);
LABEL_6:
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    return;
  }
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  *a3 = 1;
}

void sub_100784934(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  char v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  int64_t *v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  unint64_t v122;
  uint64_t v123;
  char *v124;
  Swift::Int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;

  v2 = v1;
  v134 = sub_1000BA294(&qword_100BCC820);
  v4 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v130 = (uint64_t)&v123 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v140 = (uint64_t)&v123 - v7;
  __chkstk_darwin(v8);
  v137 = (uint64_t)&v123 - v9;
  __chkstk_darwin(v10);
  v136 = (uint64_t)&v123 - v11;
  v12 = (int64_t)a1;
  v13 = a1[1];
  v14 = _minimumMergeRunLength(_:)(v13);
  if (v14 >= v13)
  {
    if ((v13 & 0x8000000000000000) == 0)
    {
      if (v13)
        sub_1007852A4(0, v13, 1, (_QWORD *)v12);
      return;
    }
    goto LABEL_141;
  }
  v15 = v14;
  sub_10087B5C0(v13 / 2);
  v126 = v16;
  v127 = v13;
  v132 = v17;
  v133 = v4;
  if (v13 <= 0)
  {
LABEL_105:
    v19 = (char *)_swiftEmptyArrayStorage;
    v67 = _swiftEmptyArrayStorage[2];
    v21 = (uint64_t *)v12;
LABEL_106:
    if (v67 < 2)
    {
LABEL_117:
      swift_bridgeObjectRelease();
      if (v127 >= -1)
        goto LABEL_118;
      goto LABEL_145;
    }
    v117 = *v21;
    while (1)
    {
      v12 = v67 - 2;
      if (v67 < 2)
        break;
      if (!v117)
        goto LABEL_149;
      v118 = v19;
      v119 = *(_QWORD *)&v19[16 * v12 + 32];
      v120 = *(_QWORD *)&v19[16 * v67 + 24];
      sub_1007854CC(v117 + *(_QWORD *)(v133 + 72) * v119, v117 + *(_QWORD *)(v133 + 72) * *(_QWORD *)&v19[16 * v67 + 16], v117 + *(_QWORD *)(v133 + 72) * v120, v132);
      if (v2)
        goto LABEL_103;
      if (v120 < v119)
        goto LABEL_136;
      if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
        v118 = sub_10021A488();
      if ((unint64_t)v12 >= *((_QWORD *)v118 + 2))
        goto LABEL_137;
      v121 = &v118[16 * v12 + 32];
      *(_QWORD *)v121 = v119;
      *((_QWORD *)v121 + 1) = v120;
      v122 = *((_QWORD *)v118 + 2);
      if (v67 > v122)
        goto LABEL_138;
      memmove(&v118[16 * v67 + 16], &v118[16 * v67 + 32], 16 * (v122 - v67));
      *((_QWORD *)v118 + 2) = v122 - 1;
      v67 = v122 - 1;
      v19 = v118;
      if (v122 <= 2)
        goto LABEL_117;
    }
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
    return;
  }
  v125 = v15;
  v18 = 0;
  v19 = (char *)_swiftEmptyArrayStorage;
  v20 = v13;
  v21 = (uint64_t *)v12;
  v139 = (uint64_t *)v12;
  while (1)
  {
    v22 = v18;
    v23 = v18 + 1;
    v131 = v18;
    if (v18 + 1 >= v20)
    {
      v40 = v18 + 1;
    }
    else
    {
      v24 = *v21;
      v25 = *(_QWORD *)(v4 + 72);
      v26 = *v21 + v25 * v23;
      v135 = v20;
      v27 = v136;
      sub_100037768(v26, v136, &qword_100BCC820);
      v28 = v24 + v25 * v22;
      v29 = v137;
      sub_100037768(v28, v137, &qword_100BCC820);
      LODWORD(v138) = static Date.< infix(_:_:)(v27, v29);
      v30 = v29;
      v22 = v131;
      sub_100021A14(v30, &qword_100BCC820);
      v31 = v27;
      v20 = v135;
      sub_100021A14(v31, &qword_100BCC820);
      v32 = v22 + 2;
      v129 = v24;
      v141 = v25;
      if (v22 + 2 >= v20)
      {
        v35 = v22 + 2;
        v21 = v139;
      }
      else
      {
        v128 = v2;
        v33 = v25 * v23;
        v34 = v24;
        v35 = v32;
        v36 = v25 * v32;
        while (1)
        {
          v37 = v136;
          sub_100037768(v34 + v36, v136, &qword_100BCC820);
          v38 = v137;
          sub_100037768(v34 + v33, v137, &qword_100BCC820);
          v39 = static Date.< infix(_:_:)(v37, v38);
          sub_100021A14(v38, &qword_100BCC820);
          sub_100021A14(v37, &qword_100BCC820);
          if (((v138 ^ v39) & 1) != 0)
            break;
          v34 += v141;
          if (++v35 >= v135)
          {
            v20 = v135;
            v35 = v135;
            v21 = v139;
            v4 = v133;
            v2 = v128;
            v22 = v131;
            goto LABEL_13;
          }
        }
        v21 = v139;
        v4 = v133;
        v2 = v128;
        v22 = v131;
        v20 = v135;
      }
LABEL_13:
      if ((v138 & 1) != 0)
      {
        if (v35 < v22)
          goto LABEL_142;
        v40 = v35;
        if (v22 < v35)
        {
          v128 = v2;
          v41 = 0;
          v42 = v141;
          v43 = v141 * (v35 - 1);
          v44 = v35 * v141;
          v45 = v22 * v141;
          do
          {
            if (v22 != v40 + v41 - 1)
            {
              v46 = v129;
              if (!v129)
                goto LABEL_148;
              v47 = v129 + v45;
              v138 = v129 + v43;
              sub_1000787D4(v129 + v45, v130, &qword_100BCC820);
              if (v45 < v43 || v47 >= v46 + v44)
              {
                swift_arrayInitWithTakeFrontToBack(v46 + v45, v138, 1, v134);
                v42 = v141;
              }
              else
              {
                v42 = v141;
                if (v45 != v43)
                  swift_arrayInitWithTakeBackToFront(v47, v138, 1, v134);
              }
              sub_1000787D4(v130, v138, &qword_100BCC820);
              v21 = v139;
              v40 = v35;
            }
            ++v22;
            --v41;
            v43 -= v42;
            v44 -= v42;
            v45 += v42;
          }
          while (v22 < v40 + v41);
          v4 = v133;
          v2 = v128;
          v22 = v131;
          v20 = v135;
        }
      }
      else
      {
        v40 = v35;
      }
    }
    if (v40 < v20)
    {
      if (__OFSUB__(v40, v22))
        goto LABEL_140;
      if (v40 - v22 < v125)
      {
        if (__OFADD__(v22, v125))
          goto LABEL_143;
        if (v22 + v125 >= v20)
          v49 = v20;
        else
          v49 = v22 + v125;
        if (v49 < v22)
          goto LABEL_144;
        if (v40 != v49)
        {
          v124 = v19;
          v128 = v2;
          v129 = v49;
          v50 = *(_QWORD *)(v4 + 72);
          v141 = v50 * (v40 - 1);
          v135 = v50;
          v51 = v40 * v50;
          do
          {
            v52 = 0;
            v138 = v40;
            while (1)
            {
              v53 = *v21;
              v54 = v51;
              v55 = v51 + v52;
              v56 = v21;
              v57 = v136;
              sub_100037768(v55 + *v21, v136, &qword_100BCC820);
              v58 = v137;
              sub_100037768(v141 + v52 + v53, v137, &qword_100BCC820);
              LOBYTE(v53) = static Date.< infix(_:_:)(v57, v58);
              sub_100021A14(v58, &qword_100BCC820);
              sub_100021A14(v57, &qword_100BCC820);
              if ((v53 & 1) == 0)
                break;
              v59 = *v56;
              if (!*v56)
                goto LABEL_146;
              v51 = v54;
              v60 = v59 + v54 + v52;
              v61 = v59 + v141 + v52;
              sub_1000787D4(v60, v140, &qword_100BCC820);
              swift_arrayInitWithTakeFrontToBack(v60, v61, 1, v134);
              sub_1000787D4(v140, v61, &qword_100BCC820);
              v52 -= v135;
              ++v22;
              v62 = v138;
              v21 = v139;
              if (v138 == v22)
                goto LABEL_47;
            }
            v62 = v138;
            v21 = v56;
            v51 = v54;
LABEL_47:
            v40 = v62 + 1;
            v141 += v135;
            v51 += v135;
            v22 = v131;
          }
          while (v40 != v129);
          v40 = v129;
          v2 = v128;
          v19 = v124;
        }
      }
    }
    if (v40 < v22)
      goto LABEL_139;
    v63 = v21;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
    v138 = v40;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v19 = sub_10021A398(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
    v66 = *((_QWORD *)v19 + 2);
    v65 = *((_QWORD *)v19 + 3);
    v67 = v66 + 1;
    if (v66 >= v65 >> 1)
      v19 = sub_10021A398((char *)(v65 > 1), v66 + 1, 1, v19);
    v21 = v63;
    v68 = v2;
    *((_QWORD *)v19 + 2) = v67;
    v69 = v19 + 32;
    v70 = &v19[16 * v66 + 32];
    v71 = v138;
    *(_QWORD *)v70 = v131;
    *((_QWORD *)v70 + 1) = v71;
    if (v66)
      break;
    v67 = 1;
LABEL_97:
    v20 = v21[1];
    v18 = v138;
    v2 = v68;
    v4 = v133;
    if (v138 >= v20)
      goto LABEL_106;
  }
  while (1)
  {
    v72 = v67 - 1;
    if (v67 >= 4)
    {
      v77 = &v69[16 * v67];
      v78 = *((_QWORD *)v77 - 8);
      v79 = *((_QWORD *)v77 - 7);
      v83 = __OFSUB__(v79, v78);
      v80 = v79 - v78;
      if (v83)
        goto LABEL_124;
      v82 = *((_QWORD *)v77 - 6);
      v81 = *((_QWORD *)v77 - 5);
      v83 = __OFSUB__(v81, v82);
      v75 = v81 - v82;
      v76 = v83;
      if (v83)
        goto LABEL_125;
      v84 = v67 - 2;
      v85 = &v69[16 * v67 - 32];
      v87 = *(_QWORD *)v85;
      v86 = *((_QWORD *)v85 + 1);
      v83 = __OFSUB__(v86, v87);
      v88 = v86 - v87;
      if (v83)
        goto LABEL_126;
      v83 = __OFADD__(v75, v88);
      v89 = v75 + v88;
      if (v83)
        goto LABEL_128;
      if (v89 >= v80)
      {
        v107 = &v69[16 * v72];
        v109 = *(_QWORD *)v107;
        v108 = *((_QWORD *)v107 + 1);
        v83 = __OFSUB__(v108, v109);
        v110 = v108 - v109;
        if (v83)
          goto LABEL_134;
        v100 = v75 < v110;
        goto LABEL_86;
      }
    }
    else
    {
      if (v67 != 3)
      {
        v101 = *((_QWORD *)v19 + 4);
        v102 = *((_QWORD *)v19 + 5);
        v83 = __OFSUB__(v102, v101);
        v94 = v102 - v101;
        v95 = v83;
        goto LABEL_80;
      }
      v74 = *((_QWORD *)v19 + 4);
      v73 = *((_QWORD *)v19 + 5);
      v83 = __OFSUB__(v73, v74);
      v75 = v73 - v74;
      v76 = v83;
    }
    if ((v76 & 1) != 0)
      goto LABEL_127;
    v84 = v67 - 2;
    v90 = &v69[16 * v67 - 32];
    v92 = *(_QWORD *)v90;
    v91 = *((_QWORD *)v90 + 1);
    v93 = __OFSUB__(v91, v92);
    v94 = v91 - v92;
    v95 = v93;
    if (v93)
      goto LABEL_129;
    v96 = &v69[16 * v72];
    v98 = *(_QWORD *)v96;
    v97 = *((_QWORD *)v96 + 1);
    v83 = __OFSUB__(v97, v98);
    v99 = v97 - v98;
    if (v83)
      goto LABEL_131;
    if (__OFADD__(v94, v99))
      goto LABEL_133;
    if (v94 + v99 >= v75)
    {
      v100 = v75 < v99;
LABEL_86:
      if (v100)
        v72 = v84;
      goto LABEL_88;
    }
LABEL_80:
    if ((v95 & 1) != 0)
      goto LABEL_130;
    v103 = &v69[16 * v72];
    v105 = *(_QWORD *)v103;
    v104 = *((_QWORD *)v103 + 1);
    v83 = __OFSUB__(v104, v105);
    v106 = v104 - v105;
    if (v83)
      goto LABEL_132;
    if (v106 < v94)
      goto LABEL_97;
LABEL_88:
    v111 = v72 - 1;
    if (v72 - 1 >= v67)
    {
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
      goto LABEL_135;
    }
    if (!*v21)
      goto LABEL_147;
    v112 = v19;
    v113 = (int64_t *)&v69[16 * v111];
    v12 = *v113;
    v114 = &v69[16 * v72];
    v115 = *((_QWORD *)v114 + 1);
    sub_1007854CC(*v21 + *(_QWORD *)(v133 + 72) * *v113, *v21 + *(_QWORD *)(v133 + 72) * *(_QWORD *)v114, *v21 + *(_QWORD *)(v133 + 72) * v115, v132);
    if (v68)
      break;
    if (v115 < v12)
      goto LABEL_121;
    if (v72 > *((_QWORD *)v112 + 2))
      goto LABEL_122;
    *v113 = v12;
    *(_QWORD *)&v69[16 * v111 + 8] = v115;
    v116 = *((_QWORD *)v112 + 2);
    if (v72 >= v116)
      goto LABEL_123;
    v19 = v112;
    v67 = v116 - 1;
    memmove(&v69[16 * v72], v114 + 16, 16 * (v116 - 1 - v72));
    *((_QWORD *)v112 + 2) = v116 - 1;
    v21 = v139;
    if (v116 <= 2)
      goto LABEL_97;
  }
  v2 = v68;
LABEL_103:
  swift_bridgeObjectRelease();
  if (v127 < -1)
  {
    __break(1u);
    goto LABEL_105;
  }
LABEL_118:
  *(_QWORD *)(v126 + 16) = 0;
  swift_bridgeObjectRelease();
}

void sub_1007852A4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v25 = a1;
  v26 = sub_1000BA294(&qword_100BCC820);
  __chkstk_darwin(v26);
  v30 = (uint64_t)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v27 = (uint64_t)&v23 - v9;
  __chkstk_darwin(v10);
  v13 = (char *)&v23 - v12;
  v29 = a3;
  v24 = a2;
  if (a3 != a2)
  {
    v14 = *(_QWORD *)(v11 + 72);
    v32 = v14 * (v29 - 1);
    v28 = v14;
    v31 = v14 * v29;
    while (2)
    {
      v15 = 0;
      v16 = v25;
      do
      {
        v17 = *a4;
        sub_100037768(v31 + v15 + *a4, (uint64_t)v13, &qword_100BCC820);
        v18 = v27;
        sub_100037768(v32 + v15 + v17, v27, &qword_100BCC820);
        LOBYTE(v17) = static Date.< infix(_:_:)(v13, v18);
        sub_100021A14(v18, &qword_100BCC820);
        sub_100021A14((uint64_t)v13, &qword_100BCC820);
        if ((v17 & 1) == 0)
          break;
        v19 = *a4;
        if (!*a4)
        {
          __break(1u);
          return;
        }
        v20 = a4;
        v21 = v19 + v31 + v15;
        v22 = v19 + v32 + v15;
        sub_1000787D4(v21, v30, &qword_100BCC820);
        swift_arrayInitWithTakeFrontToBack(v21, v22, 1, v26);
        sub_1000787D4(v30, v22, &qword_100BCC820);
        v15 -= v28;
        ++v16;
        a4 = v20;
      }
      while (v29 != v16);
      v32 += v28;
      v31 += v28;
      if (++v29 != v24)
        continue;
      break;
    }
  }
}

void sub_1007854CC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int64_t v14;
  int64_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v26;
  BOOL v28;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v41;
  int64_t v43;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v51 = sub_1000BA294(&qword_100BCC820);
  __chkstk_darwin(v51);
  v52 = (uint64_t)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v45 - v11;
  v13 = *(_QWORD *)(v10 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  v14 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v13 == -1)
    goto LABEL_75;
  v16 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_76;
  v18 = v14 / v13;
  v19 = v16 / v13;
  v46 = *(_QWORD *)(v10 + 72);
  if (v14 / v13 >= v16 / v13)
  {
    sub_1006001DC(a2, v16 / v13);
    v20 = a4 + v19 * v13;
    if (v19 * v13 < 1 || a1 >= a2)
      goto LABEL_69;
    v48 = a1;
    v49 = -v13;
    v47 = a4;
    while (1)
    {
      v30 = a3;
      v31 = v49;
      a3 += v49;
      v50 = v20 + v49;
      v32 = v20;
      sub_100037768(v20 + v49, (uint64_t)v12, &qword_100BCC820);
      v33 = a2 + v31;
      v34 = a2 + v31;
      v35 = (uint64_t)v12;
      v36 = v52;
      sub_100037768(v34, v52, &qword_100BCC820);
      v37 = static Date.< infix(_:_:)(v35, v36);
      v38 = v36;
      v12 = (char *)v35;
      sub_100021A14(v38, &qword_100BCC820);
      sub_100021A14(v35, &qword_100BCC820);
      if ((v37 & 1) != 0)
      {
        v20 = v32;
        if (v30 >= a2 && a3 < a2)
        {
          v41 = v48;
          if (v30 != a2)
            swift_arrayInitWithTakeBackToFront(a3, v33, 1, v51);
          a2 = v33;
          a4 = v47;
          goto LABEL_64;
        }
        swift_arrayInitWithTakeFrontToBack(a3, v33, 1, v51);
        a2 = v33;
      }
      else if (v30 < v32 || a3 >= v32)
      {
        v20 = v50;
        swift_arrayInitWithTakeFrontToBack(a3, v50, 1, v51);
      }
      else
      {
        v20 = v50;
        if (v30 != v32)
          swift_arrayInitWithTakeBackToFront(a3, v50, 1, v51);
      }
      a4 = v47;
      v41 = v48;
LABEL_64:
      if (v20 <= a4 || a2 <= v41)
      {
        v13 = v46;
        goto LABEL_69;
      }
    }
  }
  sub_1006001DC(a1, v14 / v13);
  v20 = a4 + v18 * v13;
  v50 = a3;
  if (v18 * v13 >= 1 && a2 < a3)
  {
    v22 = v52;
    do
    {
      sub_100037768(a2, (uint64_t)v12, &qword_100BCC820);
      sub_100037768(a4, v22, &qword_100BCC820);
      v23 = static Date.< infix(_:_:)(v12, v22);
      sub_100021A14(v22, &qword_100BCC820);
      sub_100021A14((uint64_t)v12, &qword_100BCC820);
      if ((v23 & 1) != 0)
      {
        v24 = a2 + v13;
        if (a1 < a2 || a1 >= v24)
        {
          swift_arrayInitWithTakeFrontToBack(a1, a2, 1, v51);
        }
        else if (a1 != a2)
        {
          swift_arrayInitWithTakeBackToFront(a1, a2, 1, v51);
        }
      }
      else
      {
        v26 = a4 + v13;
        if (a1 < a4 || a1 >= v26)
        {
          swift_arrayInitWithTakeFrontToBack(a1, a4, 1, v51);
        }
        else if (a1 != a4)
        {
          swift_arrayInitWithTakeBackToFront(a1, a4, 1, v51);
        }
        v24 = a2;
        a4 = v26;
        v13 = v46;
      }
      a1 += v13;
      v28 = a4 >= v20 || v24 >= v50;
      a2 = v24;
    }
    while (!v28);
  }
LABEL_69:
  v43 = v20 - a4;
  if (v13 != -1 || v43 != 0x8000000000000000)
  {
    sub_1006001DC(a4, v43 / v13);
    return;
  }
LABEL_77:
  __break(1u);
}

unint64_t sub_100785894()
{
  unint64_t result;

  result = qword_100C04EC8;
  if (!qword_100C04EC8)
  {
    result = swift_getWitnessTable(&unk_1009C9308, &type metadata for CalculatorError);
    atomic_store(result, (unint64_t *)&qword_100C04EC8);
  }
  return result;
}

uint64_t type metadata accessor for MaxDaylight(uint64_t a1)
{
  return sub_100098190(a1, qword_100C051A8, (uint64_t)&nominal type descriptor for MaxDaylight);
}

uint64_t type metadata accessor for DaylightData(uint64_t a1)
{
  return sub_100098190(a1, qword_100C05100, (uint64_t)&nominal type descriptor for DaylightData);
}

uint64_t type metadata accessor for EdgeSunEvents(uint64_t a1)
{
  return sub_100098190(a1, qword_100C05238, (uint64_t)&nominal type descriptor for EdgeSunEvents);
}

uint64_t type metadata accessor for SunriseSunsetDaylightCalculator.TimeRange(uint64_t a1)
{
  return sub_100098190(a1, qword_100C04FF0, (uint64_t)&nominal type descriptor for SunriseSunsetDaylightCalculator.TimeRange);
}

uint64_t sub_100785920(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v13;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v8 = (unint64_t *)((char *)&v13 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_100605B40(0, v6, v8);
    sub_100785A7C(v8, v6, v2);
    if (v1)
      swift_willThrow();
    else
      return v9;
  }
  else
  {
    v10 = (unint64_t *)swift_slowAlloc(v7, -1);
    sub_100605B40(0, v6, v10);
    sub_100785A7C(v10, v6, v2);
    v2 = v11;
    swift_slowDealloc(v10, -1, -1);
  }
  return v2;
}

void sub_100785A7C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void (*v21)(char *, unint64_t, uint64_t, __n128);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;

  v28 = a2;
  v29 = a1;
  v37 = sub_1000BA294(&qword_100BCC820);
  __chkstk_darwin(v37);
  v36 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity(0);
  v34 = *(_QWORD *)(v5 - 8);
  v35 = v5;
  __chkstk_darwin(v5);
  v33 = (uint64_t)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v41 = (uint64_t)&v28 - v8;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v40 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = (_QWORD *)a3;
  v13 = *(_QWORD *)(a3 + 64);
  v30 = 0;
  v31 = (_QWORD *)(a3 + 64);
  v14 = 1 << *(_BYTE *)(a3 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v32 = (unint64_t)(v14 + 63) >> 6;
  if ((v15 & v13) != 0)
  {
    v39 = 0;
    v16 = __clz(__rbit64(v15 & v13));
    goto LABEL_18;
  }
  if (v32 > 1)
  {
    v17 = v31[1];
    v18 = 1;
    if (v17)
      goto LABEL_17;
    v18 = 2;
    if (v32 <= 2)
      goto LABEL_19;
    v17 = v31[2];
    if (v17)
      goto LABEL_17;
    v18 = 3;
    if (v32 <= 3)
      goto LABEL_19;
    v17 = v31[3];
    if (v17)
    {
LABEL_17:
      v39 = v18;
      v16 = __clz(__rbit64(v17)) + (v18 << 6);
LABEL_18:
      v20 = v38;
      v21 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v10 + 16);
      v22 = v40;
      v21(v40, v38[6] + *(_QWORD *)(v10 + 72) * v16, v9, v11);
      v23 = v41;
      sub_100080C0C(v20[7] + *(_QWORD *)(v34 + 72) * v16, v41, type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity);
      v24 = (uint64_t)v36;
      ((void (*)(char *, char *, uint64_t))v21)(v36, v22, v9);
      v25 = v24 + *(int *)(v37 + 48);
      sub_100080C0C(v23, v25, type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity);
      v26 = v33;
      sub_100080C0C(v25, v33, type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity);
      sub_100021A14(v24, &qword_100BCC820);
      v27 = (char *)&loc_100785D54 + *((int *)qword_100785E80 + swift_getEnumCaseMultiPayload(v26));
      __asm { BR              X9 }
    }
    v19 = 4;
    if (v32 > 4)
    {
      v17 = v31[4];
      if (v17)
      {
        v18 = 4;
        goto LABEL_17;
      }
      while (1)
      {
        v18 = v19 + 1;
        if (__OFADD__(v19, 1))
        {
          __break(1u);
          JUMPOUT(0x100785E80);
        }
        if (v18 >= v32)
          break;
        v17 = v31[v18];
        ++v19;
        if (v17)
          goto LABEL_17;
      }
    }
  }
LABEL_19:
  sub_1005DBD40(v29, v28, v30, v38);
}

uint64_t sub_100785E98()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity(uint64_t a1)
{
  return sub_100098190(a1, qword_100C04F60, (uint64_t)&nominal type descriptor for SunriseSunsetDaylightCalculator.SunActivity);
}

uint64_t sub_100785EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for MonthSunAverage(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100C05098, (uint64_t)&nominal type descriptor for MonthSunAverage);
}

void sub_100785F14(uint64_t a1)
{
  uint64_t v1;

  sub_1007826A0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_100785F2C(uint64_t a1)
{
  uint64_t *v1;

  sub_100782FF4(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

void sub_100785F4C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  sub_10078478C(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(uint64_t **)(v3 + 32));
}

uint64_t *sub_100785F58(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2))
    {
      case 0u:
        v8 = type metadata accessor for Date(0);
        v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
        v9(a1, a2, v8);
        v10 = sub_1000BA294(&qword_100BF58E0);
        v9((uint64_t *)((char *)a1 + *(int *)(v10 + 48)), (uint64_t *)((char *)a2 + *(int *)(v10 + 48)), v8);
        v11 = a1;
        v12 = a3;
        v13 = 0;
        goto LABEL_9;
      case 1u:
        v15 = type metadata accessor for Date(0);
        v16 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
        v16(a1, a2, v15);
        v17 = sub_1000BA294(&qword_100BF58E0);
        v16((uint64_t *)((char *)a1 + *(int *)(v17 + 48)), (uint64_t *)((char *)a2 + *(int *)(v17 + 48)), v15);
        v11 = a1;
        v12 = a3;
        v13 = 1;
        goto LABEL_9;
      case 2u:
        v18 = type metadata accessor for Date(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(a1, a2, v18);
        v11 = a1;
        v12 = a3;
        v13 = 2;
        goto LABEL_9;
      case 3u:
        v19 = type metadata accessor for Date(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(a1, a2, v19);
        v11 = a1;
        v12 = a3;
        v13 = 3;
LABEL_9:
        swift_storeEnumTagMultiPayload(v11, v12, v13);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_100786108(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  result = swift_getEnumCaseMultiPayload(a1);
  switch((int)result)
  {
    case 0:
    case 1:
      v3 = type metadata accessor for Date(0);
      v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
      v6(a1, v3);
      v4 = a1 + *(int *)(sub_1000BA294(&qword_100BF58E0) + 48);
      result = ((uint64_t (*)(uint64_t, uint64_t))v6)(v4, v3);
      break;
    case 2:
    case 3:
      v5 = type metadata accessor for Date(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      break;
    default:
      return result;
  }
  return result;
}

char *sub_1007861C4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  switch(swift_getEnumCaseMultiPayload(a2))
  {
    case 0u:
      v6 = type metadata accessor for Date(0);
      v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
      v7(a1, a2, v6);
      v8 = sub_1000BA294(&qword_100BF58E0);
      v7(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], v6);
      v9 = a1;
      v10 = a3;
      v11 = 0;
      goto LABEL_7;
    case 1u:
      v12 = type metadata accessor for Date(0);
      v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
      v13(a1, a2, v12);
      v14 = sub_1000BA294(&qword_100BF58E0);
      v13(&a1[*(int *)(v14 + 48)], &a2[*(int *)(v14 + 48)], v12);
      v9 = a1;
      v10 = a3;
      v11 = 1;
      goto LABEL_7;
    case 2u:
      v15 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
      v9 = a1;
      v10 = a3;
      v11 = 2;
      goto LABEL_7;
    case 3u:
      v16 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a1, a2, v16);
      v9 = a1;
      v10 = a3;
      v11 = 3;
LABEL_7:
      swift_storeEnumTagMultiPayload(v9, v10, v11);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *sub_10078634C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 != a2)
  {
    sub_1000215BC((uint64_t)a1, type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity);
    switch(swift_getEnumCaseMultiPayload(a2))
    {
      case 0u:
        v6 = type metadata accessor for Date(0);
        v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
        v7(a1, a2, v6);
        v8 = sub_1000BA294(&qword_100BF58E0);
        v7(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], v6);
        v9 = a1;
        v10 = a3;
        v11 = 0;
        goto LABEL_8;
      case 1u:
        v12 = type metadata accessor for Date(0);
        v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
        v13(a1, a2, v12);
        v14 = sub_1000BA294(&qword_100BF58E0);
        v13(&a1[*(int *)(v14 + 48)], &a2[*(int *)(v14 + 48)], v12);
        v9 = a1;
        v10 = a3;
        v11 = 1;
        goto LABEL_8;
      case 2u:
        v15 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
        v9 = a1;
        v10 = a3;
        v11 = 2;
        goto LABEL_8;
      case 3u:
        v16 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a1, a2, v16);
        v9 = a1;
        v10 = a3;
        v11 = 3;
LABEL_8:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

char *sub_1007864EC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  switch(swift_getEnumCaseMultiPayload(a2))
  {
    case 0u:
      v6 = type metadata accessor for Date(0);
      v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
      v7(a1, a2, v6);
      v8 = sub_1000BA294(&qword_100BF58E0);
      v7(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], v6);
      v9 = a1;
      v10 = a3;
      v11 = 0;
      goto LABEL_7;
    case 1u:
      v12 = type metadata accessor for Date(0);
      v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
      v13(a1, a2, v12);
      v14 = sub_1000BA294(&qword_100BF58E0);
      v13(&a1[*(int *)(v14 + 48)], &a2[*(int *)(v14 + 48)], v12);
      v9 = a1;
      v10 = a3;
      v11 = 1;
      goto LABEL_7;
    case 2u:
      v15 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(a1, a2, v15);
      v9 = a1;
      v10 = a3;
      v11 = 2;
      goto LABEL_7;
    case 3u:
      v16 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a1, a2, v16);
      v9 = a1;
      v10 = a3;
      v11 = 3;
LABEL_7:
      swift_storeEnumTagMultiPayload(v9, v10, v11);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *sub_100786674(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 != a2)
  {
    sub_1000215BC((uint64_t)a1, type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity);
    switch(swift_getEnumCaseMultiPayload(a2))
    {
      case 0u:
        v6 = type metadata accessor for Date(0);
        v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
        v7(a1, a2, v6);
        v8 = sub_1000BA294(&qword_100BF58E0);
        v7(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], v6);
        v9 = a1;
        v10 = a3;
        v11 = 0;
        goto LABEL_8;
      case 1u:
        v12 = type metadata accessor for Date(0);
        v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
        v13(a1, a2, v12);
        v14 = sub_1000BA294(&qword_100BF58E0);
        v13(&a1[*(int *)(v14 + 48)], &a2[*(int *)(v14 + 48)], v12);
        v9 = a1;
        v10 = a3;
        v11 = 1;
        goto LABEL_8;
      case 2u:
        v15 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(a1, a2, v15);
        v9 = a1;
        v10 = a3;
        v11 = 2;
        goto LABEL_8;
      case 3u:
        v16 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a1, a2, v16);
        v9 = a1;
        v10 = a3;
        v11 = 3;
LABEL_8:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_100786814(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  _BYTE v5[32];
  _BYTE v6[32];
  _QWORD v7[4];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout2(v6, v4, v4);
    v7[0] = v6;
    swift_getTupleTypeLayout2(v5, v4, v4);
    v7[1] = v5;
    v7[2] = v4;
    v7[3] = v4;
    swift_initEnumMetadataMultiPayload(a1, 256, 4, v7);
    return 0;
  }
  return result;
}

uint64_t sub_1007868C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1007868D4);
}

uint64_t sub_1007868D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1007868E4);
}

uint64_t storeEnumTagSinglePayload for CalculatorError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100786938 + 4 * byte_1009C91CD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10078696C + 4 * byte_1009C91C8[v4]))();
}

uint64_t sub_10078696C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100786974(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10078697CLL);
  return result;
}

uint64_t sub_100786988(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100786990);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100786994(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10078699C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CalculatorError()
{
  return &type metadata for CalculatorError;
}

uint64_t *sub_1007869B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t *, uint64_t);

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = sub_1000BA294(&qword_100BF58E0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 2, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v9 = type metadata accessor for Date(0);
      v10 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
      v10(a1, a2, v9);
      v10((uint64_t *)((char *)a1 + *(int *)(v7 + 48)), (uint64_t *)((char *)a2 + *(int *)(v7 + 48)), v9);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t sub_100786A9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v2 = sub_1000BA294(&qword_100BF58E0);
  result = _s7Weather24LocationCompositionStateOwet_0(a1, 2, v2);
  if (!(_DWORD)result)
  {
    v4 = type metadata accessor for Date(0);
    v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
    v5(a1, v4);
    return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1 + *(int *)(v2 + 48), v4);
  }
  return result;
}

char *sub_100786B38(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);

  v6 = sub_1000BA294(&qword_100BF58E0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8(&a1[*(int *)(v6 + 48)], &a2[*(int *)(v6 + 48)], v7);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 2, v6);
  }
  return a1;
}

char *sub_100786BF8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);

  v6 = sub_1000BA294(&qword_100BF58E0);
  v7 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 2, v6);
  v8 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 2, v6);
  if (!v7)
  {
    if (!v8)
    {
      v12 = type metadata accessor for Date(0);
      v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24);
      v13(a1, a2, v12);
      v13(&a1[*(int *)(v6 + 48)], &a2[*(int *)(v6 + 48)], v12);
      return a1;
    }
    sub_100021A14((uint64_t)a1, &qword_100BF58E0);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v9 = type metadata accessor for Date(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(a1, a2, v9);
  v10(&a1[*(int *)(v6 + 48)], &a2[*(int *)(v6 + 48)], v9);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 2, v6);
  return a1;
}

char *sub_100786D20(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);

  v6 = sub_1000BA294(&qword_100BF58E0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
    v8(a1, a2, v7);
    v8(&a1[*(int *)(v6 + 48)], &a2[*(int *)(v6 + 48)], v7);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 2, v6);
  }
  return a1;
}

char *sub_100786DE0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);

  v6 = sub_1000BA294(&qword_100BF58E0);
  v7 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 2, v6);
  v8 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 2, v6);
  if (!v7)
  {
    if (!v8)
    {
      v12 = type metadata accessor for Date(0);
      v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40);
      v13(a1, a2, v12);
      v13(&a1[*(int *)(v6 + 48)], &a2[*(int *)(v6 + 48)], v12);
      return a1;
    }
    sub_100021A14((uint64_t)a1, &qword_100BF58E0);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v9 = type metadata accessor for Date(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(a1, a2, v9);
  v10(&a1[*(int *)(v6 + 48)], &a2[*(int *)(v6 + 48)], v9);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 2, v6);
  return a1;
}

uint64_t sub_100786F08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100786F14);
}

uint64_t sub_100786F14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = sub_1000BA294(&qword_100BF58E0);
  v5 = _s7Weather24LocationCompositionStateOwet_0(a1, a2, v4);
  if (v5 >= 3)
    return v5 - 2;
  else
    return 0;
}

uint64_t sub_100786F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100786F68);
}

uint64_t sub_100786F68(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 2);
  else
    v5 = 0;
  v6 = sub_1000BA294(&qword_100BF58E0);
  return sub_1000987C4(a1, v5, a3, v6);
}

uint64_t sub_100786FB0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BF58E0);
  return _s7Weather24LocationCompositionStateOwet_0(a1, 2, v2);
}

uint64_t sub_100786FE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BF58E0);
  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, 2, v4);
}

uint64_t sub_100787020(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _BYTE v4[32];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, *(_QWORD *)(result - 8) + 64, *(_QWORD *)(result - 8) + 64);
    swift_initEnumMetadataSinglePayload(a1, 256, v4, 2);
    return 0;
  }
  return result;
}

uint64_t *sub_10078708C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for MaxDaylight(0);
    swift_bridgeObjectRetain();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8);
    v11 = type metadata accessor for Date(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v12(v7, v8, v11);
    if (EnumCaseMultiPayload == 1)
    {
      v13 = sub_1000BA294(&qword_100BF5898);
      v12(&v7[*(int *)(v13 + 48)], &v8[*(int *)(v13 + 48)], v11);
      v14 = v7;
      v15 = v9;
      v16 = 1;
    }
    else
    {
      v17 = (int *)sub_1000BA294(&qword_100BF58B8);
      v12(&v7[v17[12]], &v8[v17[12]], v11);
      v12(&v7[v17[16]], &v8[v17[16]], v11);
      v18 = v17[20];
      v19 = &v7[v18];
      v20 = &v8[v18];
      v12(&v7[v18], v20, v11);
      v21 = type metadata accessor for EdgeSunEvents(0);
      v12(&v19[*(int *)(v21 + 20)], &v20[*(int *)(v21 + 20)], v11);
      v14 = v7;
      v15 = v9;
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v14, v15, v16);
  }
  return v5;
}

uint64_t sub_100787200(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  int *v7;
  int *v8;
  void (*v10)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  type metadata accessor for MaxDaylight(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4);
  v6 = type metadata accessor for Date(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v10(v4, v6);
  if (EnumCaseMultiPayload == 1)
  {
    v7 = (int *)(sub_1000BA294(&qword_100BF5898) + 48);
  }
  else
  {
    v8 = (int *)sub_1000BA294(&qword_100BF58B8);
    v10(v4 + v8[12], v6);
    v10(v4 + v8[16], v6);
    v4 += v8[20];
    v10(v4, v6);
    v7 = (int *)(type metadata accessor for EdgeSunEvents(0) + 20);
  }
  return ((uint64_t (*)(uint64_t, uint64_t))v10)(v4 + *v7, v6);
}

_QWORD *sub_100787304(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for MaxDaylight(0);
  swift_bridgeObjectRetain();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v5, v6, v9);
  if (EnumCaseMultiPayload == 1)
  {
    v11 = sub_1000BA294(&qword_100BF5898);
    v10(&v5[*(int *)(v11 + 48)], &v6[*(int *)(v11 + 48)], v9);
    v12 = 1;
  }
  else
  {
    v13 = (int *)sub_1000BA294(&qword_100BF58B8);
    v10(&v5[v13[12]], &v6[v13[12]], v9);
    v10(&v5[v13[16]], &v6[v13[16]], v9);
    v14 = v13[20];
    v15 = &v5[v14];
    v16 = &v6[v14];
    v10(&v5[v14], v16, v9);
    v17 = type metadata accessor for EdgeSunEvents(0);
    v10(&v15[*(int *)(v17 + 20)], &v16[*(int *)(v17 + 20)], v9);
    v12 = 0;
  }
  swift_storeEnumTagMultiPayload(v5, v7, v12);
  return a1;
}

_QWORD *sub_100787448(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    sub_1000215BC((uint64_t)a1 + v6, type metadata accessor for MaxDaylight);
    v9 = type metadata accessor for MaxDaylight(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8);
    v11 = type metadata accessor for Date(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v12(v7, v8, v11);
    if (EnumCaseMultiPayload == 1)
    {
      v13 = sub_1000BA294(&qword_100BF5898);
      v12(&v7[*(int *)(v13 + 48)], &v8[*(int *)(v13 + 48)], v11);
      v14 = 1;
    }
    else
    {
      v15 = (int *)sub_1000BA294(&qword_100BF58B8);
      v12(&v7[v15[12]], &v8[v15[12]], v11);
      v12(&v7[v15[16]], &v8[v15[16]], v11);
      v16 = v15[20];
      v17 = &v7[v16];
      v18 = &v8[v16];
      v12(&v7[v16], v18, v11);
      v19 = type metadata accessor for EdgeSunEvents(0);
      v12(&v17[*(int *)(v19 + 20)], &v18[*(int *)(v19 + 20)], v11);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v7, v9, v14);
  }
  return a1;
}

_QWORD *sub_1007875B4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for MaxDaylight(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v5, v6, v9);
  if (EnumCaseMultiPayload == 1)
  {
    v11 = sub_1000BA294(&qword_100BF5898);
    v10(&v5[*(int *)(v11 + 48)], &v6[*(int *)(v11 + 48)], v9);
    v12 = 1;
  }
  else
  {
    v13 = (int *)sub_1000BA294(&qword_100BF58B8);
    v10(&v5[v13[12]], &v6[v13[12]], v9);
    v10(&v5[v13[16]], &v6[v13[16]], v9);
    v14 = v13[20];
    v15 = &v5[v14];
    v16 = &v6[v14];
    v10(&v5[v14], v16, v9);
    v17 = type metadata accessor for EdgeSunEvents(0);
    v10(&v15[*(int *)(v17 + 20)], &v16[*(int *)(v17 + 20)], v9);
    v12 = 0;
  }
  swift_storeEnumTagMultiPayload(v5, v7, v12);
  return a1;
}

_QWORD *sub_1007876F0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    sub_1000215BC((uint64_t)a1 + v6, type metadata accessor for MaxDaylight);
    v9 = type metadata accessor for MaxDaylight(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8);
    v11 = type metadata accessor for Date(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
    v12(v7, v8, v11);
    if (EnumCaseMultiPayload == 1)
    {
      v13 = sub_1000BA294(&qword_100BF5898);
      v12(&v7[*(int *)(v13 + 48)], &v8[*(int *)(v13 + 48)], v11);
      v14 = 1;
    }
    else
    {
      v15 = (int *)sub_1000BA294(&qword_100BF58B8);
      v12(&v7[v15[12]], &v8[v15[12]], v11);
      v12(&v7[v15[16]], &v8[v15[16]], v11);
      v16 = v15[20];
      v17 = &v7[v16];
      v18 = &v8[v16];
      v12(&v7[v16], v18, v11);
      v19 = type metadata accessor for EdgeSunEvents(0);
      v12(&v17[*(int *)(v19 + 20)], &v18[*(int *)(v19 + 20)], v11);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v7, v9, v14);
  }
  return a1;
}

uint64_t sub_100787854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100787860);
}

uint64_t sub_100787860(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for MaxDaylight(0);
    return _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_1007878D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1007878E0);
}

_QWORD *sub_1007878E0(_QWORD *result, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for MaxDaylight(0);
    return (_QWORD *)sub_1000987C4((uint64_t)v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_100787944(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for MaxDaylight(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_1007879BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  void (*v9)(uint64_t *, char *, uint64_t);
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    v8 = type metadata accessor for Date(0);
    v9 = *(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    v9(a1, (char *)a2, v8);
    if (EnumCaseMultiPayload == 1)
    {
      v10 = sub_1000BA294(&qword_100BF5898);
      v9((uint64_t *)((char *)a1 + *(int *)(v10 + 48)), (char *)a2 + *(int *)(v10 + 48), v8);
      v11 = a1;
      v12 = a3;
      v13 = 1;
    }
    else
    {
      v15 = (int *)sub_1000BA294(&qword_100BF58B8);
      v9((uint64_t *)((char *)a1 + v15[12]), (char *)a2 + v15[12], v8);
      v9((uint64_t *)((char *)a1 + v15[16]), (char *)a2 + v15[16], v8);
      v16 = v15[20];
      v17 = (char *)a1 + v16;
      v18 = (char *)a2 + v16;
      v9((uint64_t *)((char *)a1 + v16), v18, v8);
      v19 = type metadata accessor for EdgeSunEvents(0);
      v9((uint64_t *)&v17[*(int *)(v19 + 20)], &v18[*(int *)(v19 + 20)], v8);
      v11 = a1;
      v12 = a3;
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v12, v13);
  }
  return a1;
}

uint64_t sub_100787B0C(uint64_t a1)
{
  uint64_t v1;
  int EnumCaseMultiPayload;
  uint64_t v3;
  int *v4;
  int *v5;
  void (*v7)(uint64_t, uint64_t);

  v1 = a1;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1);
  v3 = type metadata accessor for Date(0);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  v7(v1, v3);
  if (EnumCaseMultiPayload == 1)
  {
    v4 = (int *)(sub_1000BA294(&qword_100BF5898) + 48);
  }
  else
  {
    v5 = (int *)sub_1000BA294(&qword_100BF58B8);
    v7(v1 + v5[12], v3);
    v7(v1 + v5[16], v3);
    v1 += v5[20];
    v7(v1, v3);
    v4 = (int *)(type metadata accessor for EdgeSunEvents(0) + 20);
  }
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(v1 + *v4, v3);
}

uint64_t sub_100787BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
  v7 = type metadata accessor for Date(0);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  v8(a1, a2, v7);
  if (EnumCaseMultiPayload == 1)
  {
    v9 = sub_1000BA294(&qword_100BF5898);
    v8(a1 + *(int *)(v9 + 48), a2 + *(int *)(v9 + 48), v7);
    v10 = 1;
  }
  else
  {
    v11 = (int *)sub_1000BA294(&qword_100BF58B8);
    v8(a1 + v11[12], a2 + v11[12], v7);
    v8(a1 + v11[16], a2 + v11[16], v7);
    v12 = v11[20];
    v13 = a1 + v12;
    v14 = a2 + v12;
    v8(a1 + v12, v14, v7);
    v15 = type metadata accessor for EdgeSunEvents(0);
    v8(v13 + *(int *)(v15 + 20), v14 + *(int *)(v15 + 20), v7);
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, a3, v10);
  return a1;
}

uint64_t sub_100787D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 != a2)
  {
    sub_1000215BC(a1, type metadata accessor for MaxDaylight);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    v7 = type metadata accessor for Date(0);
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    if (EnumCaseMultiPayload == 1)
    {
      v9 = sub_1000BA294(&qword_100BF5898);
      v8(a1 + *(int *)(v9 + 48), a2 + *(int *)(v9 + 48), v7);
      v10 = 1;
    }
    else
    {
      v11 = (int *)sub_1000BA294(&qword_100BF58B8);
      v8(a1 + v11[12], a2 + v11[12], v7);
      v8(a1 + v11[16], a2 + v11[16], v7);
      v12 = v11[20];
      v13 = a1 + v12;
      v14 = a2 + v12;
      v8(a1 + v12, v14, v7);
      v15 = type metadata accessor for EdgeSunEvents(0);
      v8(v13 + *(int *)(v15 + 20), v14 + *(int *)(v15 + 20), v7);
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, a3, v10);
  }
  return a1;
}

uint64_t sub_100787E3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
  v7 = type metadata accessor for Date(0);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
  v8(a1, a2, v7);
  if (EnumCaseMultiPayload == 1)
  {
    v9 = sub_1000BA294(&qword_100BF5898);
    v8(a1 + *(int *)(v9 + 48), a2 + *(int *)(v9 + 48), v7);
    v10 = 1;
  }
  else
  {
    v11 = (int *)sub_1000BA294(&qword_100BF58B8);
    v8(a1 + v11[12], a2 + v11[12], v7);
    v8(a1 + v11[16], a2 + v11[16], v7);
    v12 = v11[20];
    v13 = a1 + v12;
    v14 = a2 + v12;
    v8(a1 + v12, v14, v7);
    v15 = type metadata accessor for EdgeSunEvents(0);
    v8(v13 + *(int *)(v15 + 20), v14 + *(int *)(v15 + 20), v7);
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, a3, v10);
  return a1;
}

uint64_t sub_100787F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 != a2)
  {
    sub_1000215BC(a1, type metadata accessor for MaxDaylight);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    v7 = type metadata accessor for Date(0);
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
    v8(a1, a2, v7);
    if (EnumCaseMultiPayload == 1)
    {
      v9 = sub_1000BA294(&qword_100BF5898);
      v8(a1 + *(int *)(v9 + 48), a2 + *(int *)(v9 + 48), v7);
      v10 = 1;
    }
    else
    {
      v11 = (int *)sub_1000BA294(&qword_100BF58B8);
      v8(a1 + v11[12], a2 + v11[12], v7);
      v8(a1 + v11[16], a2 + v11[16], v7);
      v12 = v11[20];
      v13 = a1 + v12;
      v14 = a2 + v12;
      v8(a1 + v12, v14, v7);
      v15 = type metadata accessor for EdgeSunEvents(0);
      v8(v13 + *(int *)(v15 + 20), v14 + *(int *)(v15 + 20), v7);
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, a3, v10);
  }
  return a1;
}

uint64_t sub_10078808C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE v6[32];
  _QWORD v7[4];
  _BYTE v8[32];
  _QWORD v9[2];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    v7[0] = v4;
    v7[1] = v4;
    v7[2] = v4;
    result = type metadata accessor for EdgeSunEvents(319);
    if (v5 <= 0x3F)
    {
      v7[3] = *(_QWORD *)(result - 8) + 64;
      swift_getTupleTypeLayout(v8, 0, 4, v7);
      v9[0] = v8;
      swift_getTupleTypeLayout2(v6, v4, v4);
      v9[1] = v6;
      swift_initEnumMetadataMultiPayload(a1, 256, 2, v9);
      return 0;
    }
  }
  return result;
}

void sub_100788150(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  if ((*(_DWORD *)(*(_QWORD *)(a3 - 8) + 80) & 0x20000) != 0)
  {
    *a1 = *a2;
    swift_retain();
  }
  else
  {
    sub_100098778();
    sub_1000C4074((uint64_t)a1, (uint64_t)a2);
    sub_1000C4074((uint64_t)a1 + *(int *)(a3 + 20), (uint64_t)a2 + *(int *)(a3 + 20));
  }
  sub_10004A2A0();
}

uint64_t sub_1007881D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);

  v4 = sub_100098778();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v6(a1, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + *(int *)(a2 + 20), v4);
}

void sub_100788240()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000BB56C();
  sub_1000C4074(v1, v0);
  sub_1000BCA70();
  sub_10004A2A0();
}

void sub_100788284()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000BB56C();
  sub_1000C4074(v1, v0);
  sub_1000BCA70();
  sub_10004A2A0();
}

void sub_1007882C4()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000BB56C();
  sub_1000C4074(v1, v0);
  sub_1000BCA70();
  sub_10004A2A0();
}

void sub_100788304()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000BB56C();
  sub_1000C4074(v1, v0);
  sub_1000BCA70();
  sub_10004A2A0();
}

uint64_t sub_100788344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100788350);
}

uint64_t sub_100788354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100788360);
}

uint64_t sub_100788364(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_1007883D0()
{
  unint64_t result;

  result = qword_100C05270;
  if (!qword_100C05270)
  {
    result = swift_getWitnessTable(&unk_1009C92E0, &type metadata for CalculatorError);
    atomic_store(result, (unint64_t *)&qword_100C05270);
  }
  return result;
}

void sub_10078840C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v4;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  __int128 v21[2];

  v19 = a2;
  v20 = a4;
  v7 = type metadata accessor for WeatherMapDisplayMode(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v4[2];
  v12 = v4[3];
  v13 = v4[4];
  v14 = v4[5];
  v15 = v4[6];
  v16 = v4[7];
  v18 = v4[8];
  (*(void (**)(char *, uint64_t, __n128))(v17 + 16))(v10, a1, v8);
  sub_100043CA8((uint64_t)(v4 + 9), (uint64_t)v21);
  swift_unknownObjectRetain(v11);
  swift_retain();
  swift_unknownObjectRetain(v14);
  swift_unknownObjectRetain(v16);
  swift_bridgeObjectRetain(a3);
  sub_100825E7C(v11, v12, v13, v14, v15, v16, v18, (uint64_t)v10, v20, v21, v19, a3);
}

_QWORD *sub_100788528()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release();
  swift_unknownObjectRelease(v0[5]);
  swift_unknownObjectRelease(v0[7]);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 9);
  return v0;
}

uint64_t sub_100788564()
{
  uint64_t v0;

  sub_100788528();
  return swift_deallocClassInstance(v0, 112, 7);
}

uint64_t type metadata accessor for InteractiveMapModule()
{
  return objc_opt_self(_TtC7Weather20InteractiveMapModule);
}

uint64_t sub_1007885A4()
{
  uint64_t v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = type metadata accessor for WeatherMapDisplayMode(0);
  sub_10004037C(v0, qword_100CAF3F0);
  v1 = (_QWORD *)sub_1000AECD4(v0, (uint64_t)qword_100CAF3F0);
  if (qword_100BC1FB8 != -1)
    swift_once(&qword_100BC1FB8, sub_10032E4A0);
  v2 = objc_msgSend(objc_allocWithZone((Class)UISpringTimingParameters), "initWithMass:stiffness:damping:initialVelocity:", xmmword_100CAE6E0, *(double *)&qword_100CAE6F0, unk_100CAE6F8, unk_100CAE6F8);
  objc_msgSend(v2, "ts_settlingDuration");
  v4 = v3;

  *v1 = v4;
  v5 = enum case for WeatherMapDisplayMode.SnapshotTransition.animated(_:);
  v6 = type metadata accessor for WeatherMapDisplayMode.SnapshotTransition(0);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v1, v5, v6);
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, enum case for WeatherMapDisplayMode.interactive(_:), v0);
}

BOOL sub_1007886C8(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  return CGRectEqualToRect(*(CGRect *)&a1, *(CGRect *)&a5);
}

BOOL sub_1007886DC(double *a1, double *a2)
{
  return sub_1007886C8(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t sub_1007886F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  void (*v23)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v24;
  uint64_t v25;

  v4 = type metadata accessor for WindComponentViewModel(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v21 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v6 = v4;
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v9;
    v10 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v10;
    v11 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v11;
    v12 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v12;
    v13 = a2[13];
    *(_QWORD *)(a1 + 96) = a2[12];
    *(_QWORD *)(a1 + 104) = v13;
    v14 = a2[15];
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_QWORD *)(a1 + 120) = v14;
    v15 = a2[17];
    *(_QWORD *)(a1 + 128) = a2[16];
    *(_QWORD *)(a1 + 136) = v15;
    v16 = a2[19];
    *(_QWORD *)(a1 + 144) = a2[18];
    *(_QWORD *)(a1 + 152) = v16;
    v17 = a2[21];
    *(_QWORD *)(a1 + 160) = a2[20];
    *(_QWORD *)(a1 + 168) = v17;
    *(_OWORD *)(a1 + 176) = *((_OWORD *)a2 + 11);
    *(_QWORD *)(a1 + 192) = a2[24];
    v18 = *(int *)(v4 + 68);
    v24 = (uint64_t)a2 + v18;
    v25 = a1 + v18;
    v19 = type metadata accessor for WindComponentCompassViewModel(0);
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v19 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20 = swift_bridgeObjectRetain();
    v23(v25, v24, v19, v20);
    *(_QWORD *)(a1 + *(int *)(v6 + 72)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 72));
    swift_bridgeObjectRetain();
  }
  return a1;
}

double sub_100788898(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = a1 + *(int *)(type metadata accessor for WindComponentViewModel(0) + 68);
  v3 = type metadata accessor for WindComponentCompassViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_100788954(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  void (*v19)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  v10 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v10;
  v11 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v11;
  v12 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v12;
  v13 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v13;
  v14 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v14;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  v22 = type metadata accessor for WindComponentViewModel(0);
  v15 = *(int *)(v22 + 68);
  v20 = a2 + v15;
  v21 = a1 + v15;
  v16 = type metadata accessor for WindComponentCompassViewModel(0);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v16 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = swift_bridgeObjectRetain();
  v19(v21, v20, v16, v17);
  *(_QWORD *)(a1 + *(int *)(v22 + 72)) = *(_QWORD *)(a2 + *(int *)(v22 + 72));
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_100788AD0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[16] = a2[16];
  a1[17] = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[18] = a2[18];
  a1[19] = a2[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[20] = a2[20];
  a1[21] = a2[21];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[22] = a2[22];
  a1[23] = a2[23];
  a1[24] = a2[24];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = type metadata accessor for WindComponentViewModel(0);
  v5 = *(int *)(v4 + 68);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for WindComponentCompassViewModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(v6, v7, v8);
  *(_QWORD *)((char *)a1 + *(int *)(v4 + 72)) = *(_QWORD *)((char *)a2 + *(int *)(v4 + 72));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100788CE0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  v9 = type metadata accessor for WindComponentViewModel(0);
  v10 = *(int *)(v9 + 68);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for WindComponentCompassViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  *(_QWORD *)(a1 + *(int *)(v9 + 72)) = *(_QWORD *)(a2 + *(int *)(v9 + 72));
  return a1;
}

_QWORD *sub_100788D98(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_bridgeObjectRelease();
  v10 = a2[13];
  a1[12] = a2[12];
  a1[13] = v10;
  swift_bridgeObjectRelease();
  v11 = a2[15];
  a1[14] = a2[14];
  a1[15] = v11;
  swift_bridgeObjectRelease();
  v12 = a2[17];
  a1[16] = a2[16];
  a1[17] = v12;
  swift_bridgeObjectRelease();
  v13 = a2[19];
  a1[18] = a2[18];
  a1[19] = v13;
  swift_bridgeObjectRelease();
  v14 = a2[21];
  a1[20] = a2[20];
  a1[21] = v14;
  swift_bridgeObjectRelease();
  a1[22] = a2[22];
  v15 = a2[24];
  a1[23] = a2[23];
  a1[24] = v15;
  swift_bridgeObjectRelease();
  v16 = type metadata accessor for WindComponentViewModel(0);
  v17 = *(int *)(v16 + 68);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for WindComponentCompassViewModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  *(_QWORD *)((char *)a1 + *(int *)(v16 + 72)) = *(_QWORD *)((char *)a2 + *(int *)(v16 + 72));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100788EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100788EEC);
}

uint64_t sub_100788EEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1000C30D4();
  return _s7Weather24LocationCompositionStateOwet_0(v1, v0, v2);
}

uint64_t sub_100788F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100788F20);
}

uint64_t sub_100788F20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1000C30D4();
  return _s7Weather24LocationCompositionStateOwst_0(v1, v0, v0, v2);
}

uint64_t type metadata accessor for WindComponentContentView(uint64_t a1)
{
  return sub_100098190(a1, qword_100C05390, (uint64_t)&nominal type descriptor for WindComponentContentView);
}

uint64_t sub_100788F60(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AC0A18, 1);
}

uint64_t sub_100788F70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v4;

  *(_QWORD *)a2 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0x4008000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  v4 = sub_1000BA294(&qword_100C053C8);
  return sub_100788FB8(v2, a2 + *(int *)(v4 + 44));
}

uint64_t sub_100788FB8@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v29;

  v4 = type metadata accessor for WindComponentCompassViewModel(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for WeatherWindComponentCompassContainerView(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v29 - v12;
  v14 = type metadata accessor for WindComponentViewModel(0);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, &a1[*(int *)(v14 + 68)], v4);
  *(_QWORD *)v10 = swift_getKeyPath(&unk_1009C9490);
  v10[8] = 0;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v10[*(int *)(v8 + 20)], v7, v4);
  sub_100789210((uint64_t)v10, (uint64_t)v13);
  v16 = static Axis.Set.horizontal.getter(v15);
  v17 = v16;
  v18 = static Axis.Set.vertical.getter(v16);
  v19 = Axis.Set.init(rawValue:)(0);
  v20 = Axis.Set.init(rawValue:)(v19);
  if (Axis.Set.init(rawValue:)(v20 & v17) != v17)
    v19 = Axis.Set.init(rawValue:)(v19 | v17);
  v21 = Axis.Set.init(rawValue:)(v19);
  if (Axis.Set.init(rawValue:)(v21 & v18) != v18)
    LOBYTE(v19) = Axis.Set.init(rawValue:)(v19 | v18);
  v23 = *((_QWORD *)a1 + 16);
  v22 = *((_QWORD *)a1 + 17);
  v25 = *((_QWORD *)a1 + 18);
  v24 = *((_QWORD *)a1 + 19);
  KeyPath = swift_getKeyPath(&unk_1009C94B8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100789678((uint64_t)v13, (uint64_t)v10);
  sub_100789678((uint64_t)v10, a2);
  v27 = a2 + *(int *)(sub_1000BA294(&qword_100C053D0) + 48);
  *(_BYTE *)v27 = v19;
  *(_QWORD *)(v27 + 8) = v23;
  *(_QWORD *)(v27 + 16) = v22;
  *(_QWORD *)(v27 + 24) = v25;
  *(_QWORD *)(v27 + 32) = v24;
  *(_QWORD *)(v27 + 40) = KeyPath;
  *(_QWORD *)(v27 + 48) = 0x3FE0000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1007896BC((uint64_t)v13);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_1007896BC((uint64_t)v10);
}

uint64_t type metadata accessor for WeatherWindComponentCompassContainerView(uint64_t a1)
{
  return sub_100098190(a1, qword_100C05430, (uint64_t)&nominal type descriptor for WeatherWindComponentCompassContainerView);
}

uint64_t sub_100789210(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WeatherWindComponentCompassContainerView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_100789254@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD __src[29];
  char v37;
  uint64_t v38;
  uint64_t KeyPath;
  uint64_t v40;
  char v41;
  char v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  _QWORD __dst[28];

  __dst[0] = a1;
  __dst[1] = a2;
  v4 = sub_100114EF8();
  swift_bridgeObjectRetain();
  v5 = Text.init<A>(_:)(__dst, &type metadata for String, v4);
  v7 = v6;
  v9 = v8;
  v11 = v10 & 1;
  v12 = static Font.subheadline.getter(v5);
  v13 = Text.font(_:)(v12, v5, v7, v11, v9);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  swift_release();
  v20 = v17 & 1;
  sub_1000D31B4(v5, v7, v11);
  swift_bridgeObjectRelease();
  LODWORD(__dst[0]) = static HierarchicalShapeStyle.primary.getter(v21);
  v22 = Text.foregroundStyle<A>(_:)(__dst, v13, v15, v20, v19, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v24 = v23;
  v26 = v25;
  v28 = v27 & 1;
  sub_1000D31B4(v13, v15, v20);
  swift_bridgeObjectRelease();
  __src[27] = v22;
  __src[28] = v24;
  v37 = v28;
  v38 = v26;
  KeyPath = swift_getKeyPath(&unk_1009C95F8);
  v40 = 1;
  v41 = 0;
  v42 = static Edge.Set.top.getter(KeyPath);
  v43 = EdgeInsets.init(_all:)(2.0);
  v44 = v29;
  v45 = v30;
  v46 = v31;
  v47 = 0;
  v33 = static Alignment.leading.getter(v32);
  sub_1009460B4(__src, 0, 1, 0, 1, 0x7FF0000000000000, 0, 0, 1, 0, 1, 0, 1, v33, v34);
  sub_1000D31B4(v22, v24, v28);
  swift_release();
  swift_bridgeObjectRelease();
  memcpy(__dst, __src, 0xD8uLL);
  return memcpy(a3, __dst, 0xD8uLL);
}

void *sub_100789448@<X0>(void *a1@<X8>)
{
  uint64_t *v1;

  return sub_100789254(*v1, v1[1], a1);
}

uint64_t sub_100789450()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v32;
  uint64_t v33;

  v1 = sub_1000BA294(&qword_100BCCDA8);
  __chkstk_darwin(v1);
  sub_100098728();
  v4 = v3 - v2;
  v5 = type metadata accessor for Font.TextStyle(0);
  __chkstk_darwin(v5);
  sub_100098728();
  v8 = v7 - v6;
  v9 = sub_10009E584();
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_100098728();
  v13 = v12 - v11;
  v33 = v12 - v11;
  v14 = type metadata accessor for WeatherWindComponentCompassContainerView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v13, v0 + *(int *)(v14 + 20), v9);
  v15 = *(_QWORD *)v0;
  v16 = *(_BYTE *)(v0 + 8);
  sub_10008D47C(*(_QWORD *)v0, v16);
  sub_100109B54();
  v32 = v17;
  v18 = sub_1000B15F8(v15, v16);
  v19 = sub_1000CD244(v18, enum case for Font.TextStyle.title3(_:));
  static Font.Weight.bold.getter(v19);
  v20 = static Font.system(_:weight:)(v8);
  v21 = sub_1000C409C();
  v22 = sub_1000CD244(v21, enum case for Font.TextStyle.title2(_:));
  static Font.Weight.bold.getter(v22);
  v23 = static Font.system(_:weight:)(v8);
  sub_1000C409C();
  sub_1000C407C();
  v25 = v24;
  sub_1000B4DA8();
  type metadata accessor for Font.Leading(0);
  sub_1000BCA84();
  sub_1000BB580();
  v26 = sub_10040BDEC(v20, v23, v25 & 1, v4);
  v27 = static Font.subheadline.getter(v26);
  v28 = static Font.footnote.getter(v27);
  sub_1000C407C();
  LOBYTE(v9) = v29;
  sub_1000B4DA8();
  sub_1000BCA84();
  sub_1000BB580();
  v30 = sub_10040BDEC(v27, v28, v9 & 1, v4);
  return WindComponentCompassContainerView.init(model:showCircleOutline:primaryLabelFont:secondaryLabelFont:)(v33, (v32 & 1) == 0, v26, v30);
}

uint64_t sub_100789678(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WeatherWindComponentCompassContainerView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1007896BC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WeatherWindComponentCompassContainerView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for WindComponentSubheadlineView()
{
  return &type metadata for WindComponentSubheadlineView;
}

unint64_t sub_100789708(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_10008D47C(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = *(int *)(a3 + 20);
    v10 = a1 + v9;
    v11 = a2 + v9;
    v12 = type metadata accessor for WindComponentCompassViewModel(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_1007897B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_1000B15F8(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for WindComponentCompassViewModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_100789800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10008D47C(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for WindComponentCompassViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t sub_100789880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10008D47C(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1000B15F8(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for WindComponentCompassViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t sub_10078990C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for WindComponentCompassViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_100789970(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1000B15F8(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = a1 + v10;
  v12 = (uint64_t)a2 + v10;
  v13 = type metadata accessor for WindComponentCompassViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_1007899E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1007899F4);
}

uint64_t sub_1007899F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = sub_10009E584();
    return _s7Weather24LocationCompositionStateOwet_0(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_100789A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100789A68);
}

uint64_t sub_100789A68(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  else
  {
    v7 = sub_10009E584();
    return _s7Weather24LocationCompositionStateOwst_0(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_100789ACC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "\t";
  result = type metadata accessor for WindComponentCompassViewModel(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100789B40()
{
  return sub_10005F124(&qword_100C05468, &qword_100C05470, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

uint64_t sub_100789B6C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AC0A68, 1);
}

uint64_t sub_100789B7C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AC0A40, 1);
}

uint64_t sub_100789B94()
{
  return sub_100372A3C(&qword_100BDCC98, &qword_100BDCC90, sub_10039715C);
}

unint64_t sub_100789BCC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C05478;
  if (!qword_100C05478)
  {
    v1 = type metadata accessor for WindComponentCompassContainerView(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for WindComponentCompassContainerView, v1);
    atomic_store(result, (unint64_t *)&qword_100C05478);
  }
  return result;
}

uint64_t sub_100789C0C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char *v7;

  v4 = *a1;
  v5 = a1[1];
  v6 = v4 == *a2 && v5 == a2[1];
  if (!v6 && (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2) & 1) == 0)
    return 0;
  v7 = (char *)a1 + *(int *)(sub_1000C30E4() + 20);
  return static DetailCondition.== infix(_:_:)(v7);
}

void sub_100789C70(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v1;
  v4 = v1[1];
  swift_bridgeObjectRetain();
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease();
  sub_1000C30E4();
  v5 = sub_1000BB594();
  v6 = sub_100051B90(&qword_100C05518, (uint64_t (*)(uint64_t))&type metadata accessor for DetailCondition, (uint64_t)&protocol conformance descriptor for DetailCondition);
  dispatch thunk of Hashable.hash(into:)(a1, v5, v6);
  sub_100079F70();
}

Swift::Int sub_100789CE8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  v1 = *v0;
  v2 = v0[1];
  swift_bridgeObjectRetain();
  String.hash(into:)(v6, v1, v2);
  swift_bridgeObjectRelease();
  sub_1000C30E4();
  v3 = sub_1000BB594();
  v4 = sub_100051B90(&qword_100C05518, (uint64_t (*)(uint64_t))&type metadata accessor for DetailCondition, (uint64_t)&protocol conformance descriptor for DetailCondition);
  dispatch thunk of Hashable.hash(into:)(v6, v3, v4);
  return Hasher._finalize()();
}

uint64_t type metadata accessor for DetailChartConditionInfo(uint64_t a1)
{
  uint64_t result;

  result = qword_100C054D8;
  if (!qword_100C054D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DetailChartConditionInfo);
  return result;
}

uint64_t *sub_100789DBC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for DetailCondition(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_100789E58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for DetailCondition(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_100789EA0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for DetailCondition(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

_QWORD *sub_100789F10(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for DetailCondition(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_OWORD *sub_100789F8C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for DetailCondition(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_100789FE8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for DetailCondition(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_10078A054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10078A060);
}

uint64_t sub_10078A060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for DetailCondition(0);
    return _s7Weather24LocationCompositionStateOwet_0(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_10078A0D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10078A0E0);
}

void sub_10078A0E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
    sub_100079F70();
  }
  else
  {
    v7 = type metadata accessor for DetailCondition(0);
    _s7Weather24LocationCompositionStateOwst_0(a1 + *(int *)(a4 + 20), a2, a2, v7);
  }
}

uint64_t sub_10078A144(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1009C9650;
  result = type metadata accessor for DetailCondition(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10078A1B8()
{
  return sub_100051B90(&qword_100C05510, type metadata accessor for DetailChartConditionInfo, (uint64_t)&unk_1009C96A8);
}

Swift::Int sub_10078A1EC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  v1 = *v0;
  v2 = v0[1];
  swift_bridgeObjectRetain();
  String.hash(into:)(v6, v1, v2);
  swift_bridgeObjectRelease();
  v3 = type metadata accessor for DetailCondition(0);
  v4 = sub_100051B90(&qword_100C05518, (uint64_t (*)(uint64_t))&type metadata accessor for DetailCondition, (uint64_t)&protocol conformance descriptor for DetailCondition);
  dispatch thunk of Hashable.hash(into:)(v6, v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_10078A28C()
{
  uint64_t v0;

  v0 = sub_1000BA294(&qword_100BE0098);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  return URLHandlerManager.init()();
}

uint64_t sub_10078A2C4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v35[5];
  _QWORD v36[3];
  uint64_t v37;
  __int128 v38;
  uint64_t v39;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = type metadata accessor for NanoWeatherUserActivityHandler();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  v8 = result;
  v9 = a1[3];
  v10 = a1[4];
  sub_1000DB418(a1, v9);
  v11 = sub_1000BA294(&qword_100C055B8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v11, v11, v9, v10);
  if (!v39)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v12 = a1[3];
  v13 = a1[4];
  sub_1000DB418(a1, v12);
  v14 = type metadata accessor for WeatherUserActivityHandler();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v14, v14, v12, v13);
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v15 = result;
  v16 = a1[3];
  v17 = a1[4];
  sub_1000DB418(a1, v16);
  v18 = sub_1000BA294(&qword_100C055D8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v18, v18, v16, v17);
  if (v37)
  {
    v19 = sub_100068EB4((uint64_t)v36, v37);
    v20 = __chkstk_darwin(v19);
    v22 = (_QWORD *)((char *)&v35[-1] - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v23 + 16))(v22, v20);
    v24 = *v22;
    v25 = type metadata accessor for WeatherStaticConfigurationActivityHandler();
    v35[3] = v25;
    v35[4] = &off_100B881B0;
    v35[0] = v24;
    v26 = type metadata accessor for ContinueUserActivityHandlerManager();
    v27 = (_QWORD *)swift_allocObject(v26, 112, 7);
    v28 = sub_100068EB4((uint64_t)v35, v25);
    v29 = __chkstk_darwin(v28);
    v31 = (_QWORD *)((char *)&v35[-1] - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v32 + 16))(v31, v29);
    v33 = *v31;
    v27[12] = v25;
    v27[13] = &off_100B881B0;
    v27[9] = v33;
    v27[2] = v8;
    sub_10003C800(&v38, (uint64_t)(v27 + 3));
    v27[8] = v15;
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v35);
    result = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v36);
    a2[3] = v26;
    a2[4] = &off_100B77970;
    *a2 = v27;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10078A51C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = sub_1000BA294(&qword_100BC43F0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (v11)
  {
    v7 = type metadata accessor for AppContinuationBridge(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = v8 + OBJC_IVAR____TtC7Weather21AppContinuationBridge_pendingOpenL2Descriptor;
    v10 = type metadata accessor for OpenL2Descriptor(0);
    result = _s7Weather24LocationCompositionStateOwst_0(v9, 1, 1, v10);
    *(_QWORD *)(v8 + 16) = v11;
    *(_QWORD *)(v8 + 24) = v12;
    a2[3] = v7;
    a2[4] = (uint64_t)&off_100B67678;
    *a2 = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10078A5E8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  _QWORD v33[5];
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BF75F8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v37)
  {
    __break(1u);
    goto LABEL_6;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = type metadata accessor for CoordinateActivityHandler();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v11 = result;
  v12 = a1[3];
  v13 = a1[4];
  sub_1000DB418(a1, v12);
  v14 = sub_1000BA294(&qword_100BC43F0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v14, v14, v12, v13);
  v15 = v34;
  if (v34)
  {
    v16 = v35;
    v17 = sub_100068EB4((uint64_t)v36, v37);
    v32[1] = v32;
    v18 = __chkstk_darwin(v17);
    v20 = (_QWORD *)((char *)v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v21 + 16))(v20, v18);
    v22 = *v20;
    v23 = type metadata accessor for AppContinuationBridge(0);
    v33[3] = v23;
    v33[4] = &off_100B67678;
    v33[0] = v22;
    v24 = type metadata accessor for WeatherIntentUserActivityHandler();
    v25 = (_QWORD *)swift_allocObject(v24, 80, 7);
    v26 = sub_100068EB4((uint64_t)v33, v23);
    v27 = __chkstk_darwin(v26);
    v29 = (_QWORD *)((char *)v32 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v30 + 16))(v29, v27);
    v31 = *v29;
    v25[5] = v23;
    v25[6] = &off_100B67678;
    v25[2] = v31;
    v25[7] = v11;
    v25[8] = v15;
    v25[9] = v16;
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v33);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v36);
    a2[3] = v24;
    result = sub_100051B90(&qword_100C05608, (uint64_t (*)(uint64_t))type metadata accessor for WeatherIntentUserActivityHandler, (uint64_t)&unk_1009A2A34);
    a2[4] = result;
    *a2 = v25;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_10078A824@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[5];
  _BYTE v17[24];
  uint64_t v18;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100C055F8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v18)
  {
    __break(1u);
    goto LABEL_6;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1000BA294(&qword_100BE00E8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!v16[3])
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v11 = a1[3];
  v12 = a1[4];
  sub_1000DB418(a1, v11);
  v13 = sub_10078C668();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
  if (result)
  {
    v14 = result;
    v15 = type metadata accessor for LocationEntityManager(0);
    swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
    result = LocationEntityManager.init(savedLocationsReader:savedLocationsManager:defaultCityManager:)(v17, v16, v14);
    a2[3] = v15;
    a2[4] = (uint64_t)&protocol witness table for LocationEntityManager;
    *a2 = result;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

double sub_10078A950()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char v4;
  uint64_t v5;
  void (*v6)(_QWORD *);
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  __n128 v11;
  void (*v12)(char *, uint64_t, __n128);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double result;
  _QWORD v29[5];

  v0 = type metadata accessor for Scope(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v29[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29[3] = &type metadata for WeatherFeatureFlags;
  v29[4] = sub_1005A0E2C();
  LOBYTE(v29[0]) = 1;
  v4 = isFeatureEnabled(_:)(v29);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v29);
  if ((v4 & 1) != 0)
  {
    v5 = type metadata accessor for LocationURLHandlerLink();
    v6 = sub_10078ABA8;
  }
  else
  {
    v5 = type metadata accessor for LocationURLHandler();
    v6 = sub_10078ABCC;
  }
  v7 = RegistrationContainer.register<A>(_:name:factory:)(v5, 0, 0, v6, 0, v5);
  v8 = enum case for Scope.singleton(_:);
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  v9(v3, enum case for Scope.singleton(_:), v0);
  v10 = Definition.inScope(_:)(v3);
  swift_release(v10);
  v11 = swift_release(v7);
  v12 = *(void (**)(char *, uint64_t, __n128))(v1 + 8);
  v12(v3, v0, v11);
  v13 = type metadata accessor for NanoWeatherUserActivityHandler();
  v14 = RegistrationContainer.register<A>(_:name:factory:)(v13, 0, 0, sub_10078AD64, 0, v13);
  swift_release(v14);
  v15 = type metadata accessor for WeatherUserActivityHandler();
  v16 = RegistrationContainer.register<A>(_:name:factory:)(v15, 0, 0, sub_10078AD70, 0, v15);
  swift_release(v16);
  v17 = sub_1000BA294(&qword_100C055D8);
  v18 = RegistrationContainer.register<A>(_:name:factory:)(v17, 0, 0, sub_10078AEE8, 0, v17);
  swift_release(v18);
  v19 = type metadata accessor for CoordinateActivityHandler();
  v20 = RegistrationContainer.register<A>(_:name:factory:)(v19, 0, 0, sub_10078B070, 0, v19);
  v9(v3, v8, v0);
  v21 = Definition.inScope(_:)(v3);
  swift_release(v21);
  v22 = swift_release(v20);
  v12(v3, v0, v22);
  v23 = type metadata accessor for ShortcutItemHandler();
  v24 = RegistrationContainer.register<A>(_:name:factory:)(v23, 0, 0, sub_10078B3A8, 0, v23);
  swift_release(v24);
  v25 = sub_1000BA294(&qword_100BDBAA0);
  v26 = RegistrationContainer.register<A>(_:name:factory:)(v25, 0, 0, sub_10078B4C0, 0, v25);
  *(_QWORD *)&result = swift_release(v26).n128_u64[0];
  return result;
}

void sub_10078ABA8(_QWORD *a1)
{
  sub_10078ABF0(a1, (uint64_t)sub_100081FB4, (uint64_t)sub_100147DB0, (uint64_t (*)(_QWORD))type metadata accessor for LocationURLHandlerLink, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))sub_10078B868);
}

void sub_10078ABCC(_QWORD *a1)
{
  sub_10078ABF0(a1, (uint64_t)sub_10078C6A4, (uint64_t)sub_10078C6A8, (uint64_t (*)(_QWORD))type metadata accessor for LocationURLHandler, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))sub_10078BEC8);
}

void sub_10078ABF0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  _BYTE v28[24];
  uint64_t v29;

  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1000BA294(&qword_100BE1380);
  v13 = dispatch thunk of ResolverType.resolve<A>(_:)(v12, v12, v10, v11);
  if (!v13)
  {
    __break(1u);
    goto LABEL_6;
  }
  v14 = v13;
  v15 = a1[3];
  v16 = a1[4];
  sub_1000DB418(a1, v15);
  v17 = sub_1000BA294(&qword_100BF75F8);
  swift_retain();
  dispatch thunk of ResolverType.resolve<A>(_:)(v17, v17, v15, v16);
  if (!v29)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v18 = a1[3];
  v19 = a1[4];
  sub_1000DB418(a1, v18);
  v20 = sub_1000E748C();
  v21 = dispatch thunk of ResolverType.resolve<A>(_:)(v20, v20, v18, v19);
  if (v21)
  {
    v22 = v21;
    sub_100068EB4((uint64_t)v28, v29);
    sub_1000D98DC();
    __chkstk_darwin(v23);
    sub_100098728();
    v26 = (uint64_t *)(v25 - v24);
    (*(void (**)(uint64_t))(v27 + 16))(v25 - v24);
    sub_10078C2B8(a2, v14, a3, v14, *v26, v22, a4, a5);
    sub_1000DB80C();
    sub_100098640();
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t sub_10078AD64(_QWORD *a1)
{
  return sub_10078AD7C(a1, (uint64_t (*)(_QWORD))type metadata accessor for NanoWeatherUserActivityHandler);
}

uint64_t sub_10078AD70(_QWORD *a1)
{
  return sub_10078AD7C(a1, (uint64_t (*)(_QWORD))type metadata accessor for WeatherUserActivityHandler);
}

uint64_t sub_10078AD7C(_QWORD *a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[5];
  _QWORD v24[3];
  uint64_t v25;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BF75F8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (v25)
  {
    v8 = (uint64_t **)a1[3];
    v9 = a1[4];
    sub_1000DB418(a1, (uint64_t)v8);
    v10 = sub_1000E748C();
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
    if (result)
    {
      v11 = result;
      sub_100068EB4((uint64_t)v24, v25);
      sub_1000D98DC();
      __chkstk_darwin(v12);
      sub_1000C30EC(v13, v14, v23[0]);
      v15 = *v8;
      v16 = type metadata accessor for AppContinuationBridge(0);
      v23[3] = v16;
      v23[4] = (uint64_t)&off_100B67678;
      v23[0] = (uint64_t)v15;
      v17 = a2(0);
      v18 = (_QWORD *)swift_allocObject(v17, 64, 7);
      sub_100068EB4((uint64_t)v23, v16);
      sub_1000D98DC();
      __chkstk_darwin(v19);
      sub_1000C30EC(v20, v21, v23[0]);
      v22 = *v15;
      v18[5] = v16;
      v18[6] = &off_100B67678;
      v18[2] = v22;
      v18[7] = v11;
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v23);
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v24);
      return (uint64_t)v18;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10078AEE8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[5];
  _QWORD v23[3];
  uint64_t v24;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = sub_1000BA294(&qword_100BF75F8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (v24)
  {
    v7 = sub_100068EB4((uint64_t)v23, v24);
    v8 = __chkstk_darwin(v7);
    v10 = (_QWORD *)((char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v11 + 16))(v10, v8);
    v12 = *v10;
    v13 = type metadata accessor for AppContinuationBridge(0);
    v22[3] = v13;
    v22[4] = &off_100B67678;
    v22[0] = v12;
    v14 = type metadata accessor for WeatherStaticConfigurationActivityHandler();
    v15 = (_QWORD *)swift_allocObject(v14, 56, 7);
    v16 = sub_100068EB4((uint64_t)v22, v13);
    v17 = __chkstk_darwin(v16);
    v19 = (_QWORD *)((char *)v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v20 + 16))(v19, v17);
    v21 = *v19;
    v15[5] = v13;
    v15[6] = &off_100B67678;
    v15[2] = v21;
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v22);
    result = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v23);
    a2[3] = v14;
    a2[4] = &off_100B881B0;
    *a2 = v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10078B070(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD v44[3];
  uint64_t v45;
  _QWORD v46[5];
  __int128 v47;
  uint64_t v48;
  _QWORD v49[3];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BC43F0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  v6 = v51;
  if (!v51)
  {
    __break(1u);
    goto LABEL_9;
  }
  v7 = v52;
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1000BA294(&qword_100BDBAB8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!v50)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v11 = a1[3];
  v12 = a1[4];
  sub_1000DB418(a1, v11);
  v13 = sub_1000BA294(&qword_100BDC588);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
  if (!v48)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v14 = a1[3];
  v15 = a1[4];
  sub_1000DB418(a1, v14);
  v16 = type metadata accessor for WeatherDataUpdater();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v16, v16, v14, v15);
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v46[3] = v16;
  v46[4] = &off_100B94A68;
  v46[0] = result;
  v17 = a1[3];
  v18 = a1[4];
  sub_1000DB418(a1, v17);
  v19 = sub_1000BA294(&qword_100BF75F8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v19, v19, v17, v18);
  if (!v45)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v20 = a1[3];
  v21 = a1[4];
  sub_1000DB418(a1, v20);
  v22 = sub_1000BA294(&qword_100BE1380);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v22, v22, v20, v21);
  if (result)
  {
    v23 = result;
    v24 = sub_100068EB4((uint64_t)v49, v50);
    v25 = __chkstk_darwin(v24);
    v27 = (_QWORD *)((char *)&v44[-1] - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v28 + 16))(v27, v25);
    v29 = sub_100068EB4((uint64_t)v46, v16);
    v30 = __chkstk_darwin(v29);
    v32 = (_QWORD *)((char *)&v44[-1] - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v33 + 16))(v32, v30);
    v34 = sub_100068EB4((uint64_t)v44, v45);
    v35 = __chkstk_darwin(v34);
    v37 = (_QWORD *)((char *)&v44[-1] - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v38 + 16))(v37, v35);
    v39 = *v27;
    v40 = *v32;
    v41 = *v37;
    swift_retain();
    v42 = sub_10078C3A4(v6, v7, v39, &v47, v40, v41, (uint64_t)sub_10078C6A4, v23, (uint64_t)sub_10078C6A8, v23);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v44);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v46);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v49);
    return (uint64_t)v42;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_10078B3A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[3];
  uint64_t v18;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = type metadata accessor for CoordinateActivityHandler();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (result)
  {
    v6 = result;
    v7 = a1[3];
    v8 = a1[4];
    sub_1000DB418(a1, v7);
    v9 = sub_1000BA294(&qword_100BF75F8);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v9, v9, v7, v8);
    if (v18)
    {
      v10 = sub_100068EB4((uint64_t)v17, v18);
      v11 = __chkstk_darwin(v10);
      v13 = (uint64_t **)((char *)&v17[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t **, __n128))(v14 + 16))(v13, v11);
      v15 = sub_10078C5A4(v6, *v13);
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v17);
      return v15;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10078B4C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for RootViewControllerResolver();
  result = swift_allocObject(v2, 16, 7);
  a1[3] = v2;
  a1[4] = (uint64_t)&off_100B67668;
  *a1 = result;
  return result;
}

void sub_10078B504(uint64_t a1, _QWORD *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t (*v10)();
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[3] = &type metadata for WeatherFeatureFlags;
  v14[4] = sub_1005A0E2C();
  LOBYTE(v14[0]) = 1;
  v3 = isFeatureEnabled(_:)(v14);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v14);
  v4 = a2[3];
  v5 = a2[4];
  sub_1000DB418(a2, v4);
  if ((v3 & 1) != 0)
  {
    v6 = type metadata accessor for LocationURLHandlerLink();
    v7 = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
    if (v7)
    {
      v8 = v7;
      v14[0] = v7;
      v9 = &qword_100BDE618;
      v10 = type metadata accessor for LocationURLHandlerLink;
      v11 = &unk_10099BC58;
LABEL_6:
      v13 = sub_100051B90((unint64_t *)v9, (uint64_t (*)(uint64_t))v10, (uint64_t)v11);
      URLHandlerManager.add<A>(handler:)(v14, v6, v13);
      swift_release(v8);
      return;
    }
    __break(1u);
  }
  else
  {
    v6 = type metadata accessor for LocationURLHandler();
    v12 = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
    if (v12)
    {
      v8 = v12;
      v14[0] = v12;
      v9 = &qword_100C055D0;
      v10 = type metadata accessor for LocationURLHandler;
      v11 = &unk_1009D1BB4;
      goto LABEL_6;
    }
  }
  __break(1u);
}

uint64_t sub_10078B62C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];

  v2 = a2[3];
  v3 = a2[4];
  sub_1000DB418(a2, v2);
  v4 = type metadata accessor for ShortcutItemHandler();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (result)
  {
    v6 = result;
    v7[3] = v4;
    v7[4] = sub_100051B90(&qword_100C055C8, (uint64_t (*)(uint64_t))type metadata accessor for ShortcutItemHandler, (uint64_t)&unk_100980B64);
    v7[0] = v6;
    ShortcutItemHandlerManager.add(_:)(v7);
    return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_10078B6D8(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  a11[7] = type metadata accessor for LocationFinder();
  a11[8] = &off_100B788B0;
  a11[4] = a3;
  a11[17] = type metadata accessor for WeatherDataUpdater();
  a11[18] = &off_100B94A68;
  a11[14] = a5;
  a11[22] = type metadata accessor for AppContinuationBridge(0);
  a11[23] = &off_100B67678;
  a11[19] = a6;
  a11[2] = a1;
  a11[3] = a2;
  sub_10003C800(a4, (uint64_t)(a11 + 9));
  a11[24] = a7;
  a11[25] = a8;
  a11[26] = a9;
  a11[27] = a10;
  return a11;
}

uint64_t sub_10078B7A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  _UNKNOWN **v12;

  v11 = type metadata accessor for AppContinuationBridge(0);
  v12 = &off_100B67678;
  *(_QWORD *)&v10 = a2;
  v6 = sub_1000BA294(&qword_100C055F0);
  v7 = type metadata accessor for ShortcutItemHandlerPattern(0);
  v8 = swift_allocObject(v6, ((*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80) | 7);
  *(_OWORD *)(v8 + 16) = xmmword_10097CA50;
  ShortcutItemHandlerPattern.init(predicate:)(sub_1001C8418, 0);
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = a1;
  sub_10003C800(&v10, a3 + 32);
  return a3;
}

_QWORD *sub_10078B868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t ParameterKey;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t inited;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t (*v36)(char *, _QWORD, uint64_t);
  uint64_t v37;
  uint64_t Parameter;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  void (*v43)(uint64_t *, uint64_t, uint64_t);
  void (*v44)(uint64_t *, uint64_t, uint64_t);
  uint64_t *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  uint64_t (*v55)(char *, _QWORD, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  void (*v61)(char *, uint64_t);
  uint64_t *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t *, uint64_t, uint64_t);
  uint64_t *v73;
  uint64_t v74;
  char *v75;
  uint64_t (*v76)(char *, _QWORD, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t);
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t *, uint64_t, uint64_t);
  uint64_t *v98;
  char *v99;
  uint64_t v100;
  uint64_t (*v101)(char *, _QWORD, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t (*v138)(char *, _QWORD, uint64_t);
  void (*v139)(uint64_t *, uint64_t, uint64_t);
  uint64_t *v140;
  unsigned int v141;
  uint64_t v142;
  void (*v143)(char *, uint64_t);
  uint64_t v144;
  char v145[64];
  __int128 v146;
  uint64_t v147;
  _UNKNOWN **v148;

  v132 = a7;
  v137 = a6;
  v136 = a4;
  v135 = a3;
  v134 = a2;
  v133 = a1;
  v131 = *a7;
  ParameterKey = type metadata accessor for WeatherQueryParameterKey(0);
  v9 = *(_QWORD *)(ParameterKey - 8);
  v10 = ParameterKey;
  __chkstk_darwin(ParameterKey);
  v130 = (char *)&v121 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v128 = (char *)&v121 - v13;
  __chkstk_darwin(v14);
  v126 = (char *)&v121 - v15;
  __chkstk_darwin(v16);
  v124 = (char *)&v121 - v17;
  __chkstk_darwin(v18);
  v123 = (char *)&v121 - v19;
  __chkstk_darwin(v20);
  v122 = (char *)&v121 - v21;
  __chkstk_darwin(v22);
  v121 = (char *)&v121 - v23;
  __chkstk_darwin(v24);
  v26 = (char *)&v121 - v25;
  v147 = type metadata accessor for AppContinuationBridge(0);
  v148 = &off_100B67678;
  *(_QWORD *)&v146 = a5;
  v27 = sub_1000BA294(&qword_100BC39A8);
  inited = swift_initStackObject(v27, v145);
  v129 = inited;
  *(_OWORD *)(inited + 16) = xmmword_10097DA20;
  *(_OWORD *)(inited + 32) = xmmword_1009C96D0;
  *(_QWORD *)(inited + 48) = 0;
  *(_QWORD *)(inited + 56) = 0;
  v29 = sub_1000BA294(&qword_100C055E0);
  v30 = type metadata accessor for URLHandlerPattern.Param(0);
  v31 = *(_QWORD *)(v30 - 8);
  v142 = *(_QWORD *)(v31 + 72);
  v32 = *(unsigned __int8 *)(v31 + 80);
  v33 = (v32 + 32) & ~v32;
  v125 = 8 * v142;
  v34 = swift_allocObject(v29, v33 + 8 * v142, v32 | 7);
  v127 = v34;
  *(_OWORD *)(v34 + 16) = xmmword_10098BCC0;
  v35 = (uint64_t *)(v34 + v33);
  v36 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v9 + 104);
  v37 = v36(v26, enum case for WeatherQueryParameterKey.lat(_:), v10);
  v138 = v36;
  Parameter = WeatherQueryParameterKey.rawValue.getter(v37);
  v40 = v39;
  v41 = *(void (**)(char *, uint64_t))(v9 + 8);
  v41(v26, v10);
  v143 = v41;
  *v35 = Parameter;
  v35[1] = v40;
  v42 = enum case for URLHandlerPattern.Param.optionalExists(_:);
  v43 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v31 + 104);
  v144 = v30;
  v43(v35, enum case for URLHandlerPattern.Param.optionalExists(_:), v30);
  v44 = v43;
  v45 = (uint64_t *)((char *)v35 + v142);
  v46 = v121;
  v47 = v36(v121, enum case for WeatherQueryParameterKey.long(_:), v10);
  v48 = v46;
  v49 = WeatherQueryParameterKey.rawValue.getter(v47);
  v51 = v50;
  v41(v48, v10);
  *v45 = v49;
  v45[1] = v51;
  v44(v45, v42, v30);
  v139 = v44;
  v52 = v142;
  v53 = (uint64_t *)((char *)v35 + 2 * v142);
  v54 = v122;
  v55 = v138;
  v56 = v138(v122, enum case for WeatherQueryParameterKey.lng(_:), v10);
  v57 = WeatherQueryParameterKey.rawValue.getter(v56);
  v59 = v58;
  v60 = v54;
  v61 = v143;
  v143(v60, v10);
  *v53 = v57;
  v53[1] = v59;
  v44((uint64_t *)((char *)v35 + 2 * v52), v42, v144);
  v62 = (uint64_t *)((char *)v35 + 3 * v52);
  v140 = v35;
  v63 = v123;
  v64 = v55(v123, enum case for WeatherQueryParameterKey.city(_:), v10);
  v65 = v63;
  v66 = WeatherQueryParameterKey.rawValue.getter(v64);
  v68 = v67;
  v61(v65, v10);
  *v62 = v66;
  v62[1] = v68;
  v69 = v42;
  v70 = v42;
  v141 = v42;
  v71 = v144;
  v72 = v139;
  v139(v62, v69, v144);
  v73 = (uint64_t *)((char *)v35 + 4 * v52);
  v74 = v52;
  v75 = v124;
  v76 = v138;
  v77 = v138(v124, enum case for WeatherQueryParameterKey.isLocal(_:), v10);
  v78 = WeatherQueryParameterKey.rawValue.getter(v77);
  v80 = v79;
  v81 = v75;
  v82 = v10;
  v143(v81, v10);
  *v73 = v78;
  v73[1] = v80;
  v72(v73, v70, v71);
  v83 = v140;
  v84 = (uint64_t *)((char *)v140 + 5 * v74);
  v85 = v126;
  v86 = v82;
  v87 = v76(v126, enum case for WeatherQueryParameterKey.date(_:), v82);
  v88 = v85;
  v89 = WeatherQueryParameterKey.rawValue.getter(v87);
  v91 = v90;
  v92 = v88;
  v93 = v86;
  v94 = v143;
  v143(v92, v86);
  *v84 = v89;
  v84[1] = v91;
  v95 = v141;
  v96 = v71;
  v97 = v139;
  v139((uint64_t *)((char *)v83 + 5 * v74), v141, v96);
  v98 = (uint64_t *)((char *)v83 + 6 * v74);
  v99 = v128;
  v100 = v76(v128, enum case for WeatherQueryParameterKey.position(_:), v93);
  v101 = v76;
  v102 = WeatherQueryParameterKey.rawValue.getter(v100);
  v104 = v103;
  v94(v99, v93);
  *v98 = v102;
  v98[1] = v104;
  v105 = v95;
  v106 = v144;
  v97(v98, v105, v144);
  v107 = (uint64_t *)((char *)v140 + v125 - v74);
  v108 = v130;
  v109 = v101(v130, enum case for WeatherQueryParameterKey.temperature(_:), v93);
  v110 = WeatherQueryParameterKey.rawValue.getter(v109);
  v112 = v111;
  v94(v108, v93);
  *v107 = v110;
  v107[1] = v112;
  v97(v107, v141, v106);
  sub_1000BA294(&qword_100C055E8);
  v113 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  v114 = v129;
  v115 = v127;
  v116 = sub_1003C29BC(v129, 0, 0);
  swift_bridgeObjectRelease(v115);
  swift_bridgeObjectRelease(v113);
  swift_setDeallocating(v114);
  sub_10011EA28();
  v117 = v132;
  v132[12] = v116;
  v118 = v134;
  v117[2] = v133;
  v117[3] = v118;
  v119 = v136;
  v117[4] = v135;
  v117[5] = v119;
  sub_10003C800(&v146, (uint64_t)(v117 + 6));
  v117[11] = v137;
  return v117;
}

_QWORD *sub_10078BEC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t ParameterKey;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t (*v29)(char *, _QWORD, uint64_t);
  uint64_t v30;
  uint64_t Parameter;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  uint64_t (*v40)(char *, _QWORD, uint64_t);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  void (*v57)(uint64_t *, uint64_t, uint64_t);
  uint64_t *v58;
  char *v59;
  uint64_t (*v60)(char *, _QWORD, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  void (*v80)(uint64_t *, uint64_t, uint64_t);
  unsigned int v81;
  uint64_t (*v82)(char *, _QWORD, uint64_t);
  void (*v83)(char *, uint64_t);
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  _UNKNOWN **v98;

  v90 = a7;
  v91 = a3;
  v92 = a4;
  v93 = a6;
  v88 = a1;
  v89 = a2;
  ParameterKey = type metadata accessor for WeatherQueryParameterKey(0);
  v9 = *(_QWORD *)(ParameterKey - 8);
  __chkstk_darwin(ParameterKey);
  v87 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v85 = (char *)&v80 - v12;
  __chkstk_darwin(v13);
  v84 = (char *)&v80 - v14;
  __chkstk_darwin(v15);
  v17 = (char *)&v80 - v16;
  __chkstk_darwin(v18);
  v20 = (char *)&v80 - v19;
  v97 = type metadata accessor for AppContinuationBridge(0);
  v98 = &off_100B67678;
  *(_QWORD *)&v96 = a5;
  v21 = sub_1000BA294(&qword_100C055E0);
  v22 = type metadata accessor for URLHandlerPattern.Param(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(_QWORD *)(v23 + 72);
  v94 = v22;
  v95 = v24;
  v25 = *(unsigned __int8 *)(v23 + 80);
  v26 = (v25 + 32) & ~v25;
  v27 = swift_allocObject(v21, v26 + 5 * v24, v25 | 7);
  v86 = v27;
  *(_OWORD *)(v27 + 16) = xmmword_1009891E0;
  v28 = (uint64_t *)(v27 + v26);
  v29 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v9 + 104);
  v30 = v29(v20, enum case for WeatherQueryParameterKey.lat(_:), ParameterKey);
  Parameter = WeatherQueryParameterKey.rawValue.getter(v30);
  v33 = v32;
  v83 = *(void (**)(char *, uint64_t))(v9 + 8);
  v83(v20, ParameterKey);
  *v28 = Parameter;
  v28[1] = v33;
  v34 = enum case for URLHandlerPattern.Param.optionalExists(_:);
  v35 = *(void (**)(uint64_t *, _QWORD, uint64_t))(v23 + 104);
  v35(v28, enum case for URLHandlerPattern.Param.optionalExists(_:), v22);
  v80 = v35;
  v36 = v95;
  v37 = (uint64_t *)((char *)v28 + v95);
  v38 = v17;
  v39 = v17;
  v40 = v29;
  v82 = v29;
  v41 = v29(v39, enum case for WeatherQueryParameterKey.long(_:), ParameterKey);
  v42 = v38;
  v43 = WeatherQueryParameterKey.rawValue.getter(v41);
  v45 = v44;
  v46 = v42;
  v47 = v83;
  v83(v46, ParameterKey);
  *v37 = v43;
  v37[1] = v45;
  v81 = v34;
  v48 = v94;
  v35((uint64_t *)((char *)v28 + v36), v34, v94);
  v49 = (uint64_t *)((char *)v28 + 2 * v36);
  v50 = v84;
  v51 = v40(v84, enum case for WeatherQueryParameterKey.lng(_:), ParameterKey);
  v52 = WeatherQueryParameterKey.rawValue.getter(v51);
  v54 = v53;
  v47(v50, ParameterKey);
  v55 = v47;
  *v49 = v52;
  v49[1] = v54;
  v56 = v34;
  v57 = v80;
  v80(v49, v56, v48);
  v58 = (uint64_t *)((char *)v28 + 3 * v95);
  v59 = v85;
  v60 = v82;
  v61 = v82(v85, enum case for WeatherQueryParameterKey.city(_:), ParameterKey);
  v62 = WeatherQueryParameterKey.rawValue.getter(v61);
  v64 = v63;
  v55(v59, ParameterKey);
  *v58 = v62;
  v58[1] = v64;
  v65 = v81;
  v66 = v94;
  v57(v58, v81, v94);
  v67 = (uint64_t *)((char *)v28 + 4 * v95);
  v68 = v87;
  v69 = v60(v87, enum case for WeatherQueryParameterKey.isLocal(_:), ParameterKey);
  v70 = WeatherQueryParameterKey.rawValue.getter(v69);
  v72 = v71;
  v55(v68, ParameterKey);
  *v67 = v70;
  v67[1] = v72;
  v57(v67, v65, v66);
  sub_1000BA294(&qword_100C055E8);
  v73 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  v74 = v86;
  v75 = sub_100385AC0(0, 0, 0, 0);
  swift_bridgeObjectRelease(v74);
  swift_bridgeObjectRelease(v73);
  v76 = v90;
  v90[12] = v75;
  v77 = v89;
  v76[2] = v88;
  v76[3] = v77;
  v78 = v92;
  v76[4] = v91;
  v76[5] = v78;
  sub_10003C800(&v96, (uint64_t)(v76 + 6));
  v76[11] = v93;
  return v76;
}

void sub_10078C2B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_QWORD), void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  _UNKNOWN **v25;

  v24 = type metadata accessor for AppContinuationBridge(0);
  v25 = &off_100B67678;
  v23[0] = a5;
  v16 = a7(0);
  v17 = swift_allocObject(v16, 104, 7);
  sub_100068EB4((uint64_t)v23, v24);
  sub_1000D98DC();
  __chkstk_darwin(v18);
  sub_100098728();
  v21 = (_QWORD *)(v20 - v19);
  (*(void (**)(uint64_t))(v22 + 16))(v20 - v19);
  a8(a1, a2, a3, a4, *v21, a6, v17);
  sub_1000DB80C();
  sub_100098640();
}

_QWORD *sub_10078C3A4(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[3];
  uint64_t v39;
  _UNKNOWN **v40;
  _QWORD v41[3];
  uint64_t v42;
  _UNKNOWN **v43;
  _QWORD v44[3];
  uint64_t v45;
  _UNKNOWN **v46;

  v36 = a7;
  v37 = a8;
  v45 = type metadata accessor for LocationFinder();
  v46 = &off_100B788B0;
  v44[0] = a3;
  v42 = type metadata accessor for WeatherDataUpdater();
  v43 = &off_100B94A68;
  v41[0] = a5;
  v39 = type metadata accessor for AppContinuationBridge(0);
  v40 = &off_100B67678;
  v38[0] = a6;
  v16 = type metadata accessor for CoordinateActivityHandler();
  v17 = (_QWORD *)swift_allocObject(v16, 224, 7);
  v18 = sub_100068EB4((uint64_t)v44, v45);
  v19 = __chkstk_darwin(v18);
  v21 = (uint64_t *)((char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v22 + 16))(v21, v19);
  v23 = sub_100068EB4((uint64_t)v41, v42);
  v24 = __chkstk_darwin(v23);
  v26 = (uint64_t *)((char *)&v35 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v27 + 16))(v26, v24);
  v28 = sub_100068EB4((uint64_t)v38, v39);
  v29 = __chkstk_darwin(v28);
  v31 = (uint64_t *)((char *)&v35 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v32 + 16))(v31, v29);
  v33 = sub_10078B6D8(a1, a2, *v21, a4, *v26, *v31, v36, v37, a9, a10, v17);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v38);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v41);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v44);
  return v33;
}

uint64_t sub_10078C5A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v13[3];
  uint64_t v14;
  _UNKNOWN **v15;

  v14 = *a2;
  v15 = &off_100B67678;
  v13[0] = a2;
  v3 = type metadata accessor for ShortcutItemHandler();
  v4 = swift_allocObject(v3, 72, 7);
  v5 = sub_100068EB4((uint64_t)v13, v14);
  v6 = __chkstk_darwin(v5);
  v8 = (_QWORD *)((char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v9 + 16))(v8, v6);
  v10 = sub_10078B7A8(a1, *v8, v4);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v13);
  return v10;
}

unint64_t sub_10078C668()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C05600;
  if (!qword_100C05600)
  {
    v1 = objc_opt_self(WCDefaultCityManager);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100C05600);
  }
  return result;
}

_QWORD *sub_10078C6AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10009AAB0();
    v3 = type metadata accessor for Location.Identifier(0);
    v4 = *(_QWORD *)(v3 - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      v3 = Location.Identifier.id.getter(v3);
      v7 = v3;
      v9 = v8;
      v10 = _swiftEmptyArrayStorage[2];
      if (v10 >= _swiftEmptyArrayStorage[3] >> 1)
        sub_10009AAB0();
      _swiftEmptyArrayStorage[2] = v10 + 1;
      v11 = &_swiftEmptyArrayStorage[2 * v10];
      v11[4] = v7;
      v11[5] = v9;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10078C7A8@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, char a10, char a11, uint64_t a12, char a13, __int128 a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _OWORD *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  int *v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 v30;
  uint64_t result;
  uint64_t v32;

  *(_BYTE *)a9 = a1;
  *(_BYTE *)(a9 + 1) = a2;
  *(_QWORD *)(a9 + 8) = a3;
  v26 = (int *)sub_1000D98E8();
  v27 = a9 + v26[7];
  sub_100098778();
  sub_1000C2440(v27, a4);
  *(_BYTE *)(a9 + v26[8]) = a5;
  *(_BYTE *)(a9 + v26[9]) = a6;
  *(_BYTE *)(a9 + v26[10]) = a7;
  *(_BYTE *)(a9 + v26[11]) = a8;
  *(_BYTE *)(a9 + v26[12]) = a10;
  *(_BYTE *)(a9 + v26[13]) = a11;
  sub_1000C2440(a9 + v26[14], a12);
  *(_BYTE *)(a9 + v26[15]) = a13;
  v28 = a9 + v26[16];
  *(_OWORD *)v28 = a14;
  *(_QWORD *)(v28 + 16) = a15;
  *(_QWORD *)(v28 + 24) = a16;
  sub_10009AD3C(a17, a9 + v26[17]);
  *(_QWORD *)(a9 + v26[18]) = a18;
  v29 = (_OWORD *)(a9 + v26[19]);
  v30 = a19[1];
  *v29 = *a19;
  v29[1] = v30;
  v29[2] = a19[2];
  *(_QWORD *)(a9 + v26[20]) = a20;
  result = sub_1000C2440(a9 + v26[21], a21);
  v32 = a9 + v26[22];
  *(_BYTE *)v32 = a22;
  *(_QWORD *)(v32 + 8) = a23;
  *(_BYTE *)(a9 + v26[23]) = a24;
  return result;
}

_QWORD *sub_10078C980(_QWORD *a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int EnumCaseMultiPayload;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v57;
  void (*v58)(char *, uint64_t, uint64_t, __n128);
  uint64_t v59;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    a1[1] = a2[1];
    v7 = a3[7];
    v8 = (char *)a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = type metadata accessor for Date(0);
    v11 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v10 - 8) + 16);
    v12 = swift_bridgeObjectRetain();
    v11(v8, v9, v10, v12);
    v13 = a3[9];
    *((_BYTE *)v4 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    *((_BYTE *)v4 + v13) = *((_BYTE *)a2 + v13);
    v14 = a3[11];
    *((_BYTE *)v4 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    *((_BYTE *)v4 + v14) = *((_BYTE *)a2 + v14);
    v15 = a3[13];
    *((_BYTE *)v4 + a3[12]) = *((_BYTE *)a2 + a3[12]);
    *((_BYTE *)v4 + v15) = *((_BYTE *)a2 + v15);
    v58 = v11;
    v59 = v10;
    ((void (*)(char *, char *, uint64_t))v11)((char *)v4 + a3[14], (char *)a2 + a3[14], v10);
    v16 = a3[16];
    *((_BYTE *)v4 + a3[15]) = *((_BYTE *)a2 + a3[15]);
    v17 = (_QWORD *)((char *)v4 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    v20 = v18[3];
    v17[2] = v18[2];
    v17[3] = v20;
    v21 = a3[17];
    v22 = (char *)v4 + v21;
    v23 = (char *)a2 + v21;
    v24 = type metadata accessor for CurrentLocation(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v23, 1, v24))
    {
      v25 = sub_1000BA294((uint64_t *)&unk_100C0D170);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
LABEL_14:
      v34 = a3[19];
      *(_QWORD *)((char *)v4 + a3[18]) = *(uint64_t *)((char *)a2 + a3[18]);
      v35 = (_QWORD *)((char *)v4 + v34);
      v36 = (uint64_t)a2 + v34;
      v37 = *(void **)v36;
      v38 = *(void **)(v36 + 8);
      *v35 = *(_QWORD *)v36;
      v35[1] = v38;
      v39 = *(void **)(v36 + 16);
      v40 = *(void **)(v36 + 24);
      v35[2] = v39;
      v35[3] = v40;
      v41 = *(void **)(v36 + 32);
      v42 = *(void **)(v36 + 40);
      v35[4] = v41;
      v35[5] = v42;
      v43 = a3[21];
      *(_QWORD *)((char *)v4 + a3[20]) = *(uint64_t *)((char *)a2 + a3[20]);
      v57 = (char *)v4 + v43;
      v44 = (uint64_t)a2 + v43;
      v45 = v37;
      v46 = v38;
      v47 = v39;
      v48 = v40;
      v49 = v41;
      v50 = v42;
      v51 = swift_bridgeObjectRetain();
      v58(v57, v44, v59, v51);
      v52 = a3[22];
      v53 = a3[23];
      v54 = (char *)v4 + v52;
      v55 = (char *)a2 + v52;
      *v54 = *v55;
      *((_QWORD *)v54 + 1) = *((_QWORD *)v55 + 1);
      *((_BYTE *)v4 + v53) = *((_BYTE *)a2 + v53);
      swift_bridgeObjectRetain();
      return v4;
    }
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v23);
    if (EnumCaseMultiPayload == 2)
    {
      v32 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v22, v23, v32);
      v29 = v22;
      v30 = v24;
      v31 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v33 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v22, v23, v33);
      v29 = v22;
      v30 = v24;
      v31 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        goto LABEL_13;
      }
      v28 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v22, v23, v28);
      v29 = v22;
      v30 = v24;
      v31 = 0;
    }
    swift_storeEnumTagMultiPayload(v29, v30, v31);
LABEL_13:
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v22, 0, 1, v24);
    goto LABEL_14;
  }
  v26 = *a2;
  *v4 = *a2;
  v4 = (_QWORD *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return v4;
}

uint64_t sub_10078CC9C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  int v18;
  int v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  void *v48;
  id v49;
  void *v50;
  void *v51;
  id v52;
  void *v53;
  void *v54;
  id v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Date(0);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v10(a1 + a3[14], a2 + a3[14], v9);
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  v11 = a3[16];
  v12 = (_QWORD *)(a1 + v11);
  v13 = a2 + v11;
  *v12 = *(_QWORD *)(a2 + v11);
  v12[1] = *(_QWORD *)(a2 + v11 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12[2] = *(_QWORD *)(v13 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12[3] = *(_QWORD *)(v13 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = a3[17];
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  v17 = type metadata accessor for CurrentLocation(0);
  v18 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v17);
  v19 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v17);
  if (v18)
  {
    if (!v19)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16);
      if (EnumCaseMultiPayload == 2)
      {
        v31 = type metadata accessor for Location(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v15, v16, v31);
        v22 = v15;
        v23 = v17;
        v24 = 2;
      }
      else if (EnumCaseMultiPayload == 1)
      {
        v32 = type metadata accessor for Location(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v15, v16, v32);
        v22 = v15;
        v23 = v17;
        v24 = 1;
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
          goto LABEL_20;
        }
        v21 = type metadata accessor for Location(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v15, v16, v21);
        v22 = v15;
        v23 = v17;
        v24 = 0;
      }
      swift_storeEnumTagMultiPayload(v22, v23, v24);
LABEL_20:
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 0, 1, v17);
      goto LABEL_24;
    }
  }
  else
  {
    if (!v19)
    {
      if (a1 == a2)
        goto LABEL_24;
      sub_1000215BC((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
      v26 = swift_getEnumCaseMultiPayload(v16);
      if (v26 == 2)
      {
        v33 = type metadata accessor for Location(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v15, v16, v33);
        v28 = v15;
        v29 = v17;
        v30 = 2;
      }
      else if (v26 == 1)
      {
        v34 = type metadata accessor for Location(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v15, v16, v34);
        v28 = v15;
        v29 = v17;
        v30 = 1;
      }
      else
      {
        if (v26)
        {
          v25 = *(_QWORD *)(v17 - 8);
          goto LABEL_10;
        }
        v27 = type metadata accessor for Location(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v15, v16, v27);
        v28 = v15;
        v29 = v17;
        v30 = 0;
      }
      swift_storeEnumTagMultiPayload(v28, v29, v30);
      goto LABEL_24;
    }
    sub_1000215BC((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
  }
  v25 = *(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100C0D170) - 8);
LABEL_10:
  memcpy(v15, v16, *(_QWORD *)(v25 + 64));
LABEL_24:
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  v35 = a3[19];
  v36 = (_QWORD *)(a1 + v35);
  v37 = (_QWORD *)(a2 + v35);
  v38 = *(void **)(a1 + v35);
  v39 = *(void **)(a2 + v35);
  *v36 = v39;
  v40 = v39;

  v41 = (void *)v36[1];
  v42 = (void *)v37[1];
  v36[1] = v42;
  v43 = v42;

  v44 = (void *)v36[2];
  v45 = (void *)v37[2];
  v36[2] = v45;
  v46 = v45;

  v47 = (void *)v36[3];
  v48 = (void *)v37[3];
  v36[3] = v48;
  v49 = v48;

  v50 = (void *)v36[4];
  v51 = (void *)v37[4];
  v36[4] = v51;
  v52 = v51;

  v53 = (void *)v36[5];
  v54 = (void *)v37[5];
  v36[5] = v54;
  v55 = v54;

  *(_QWORD *)(a1 + a3[20]) = *(_QWORD *)(a2 + a3[20]);
  swift_bridgeObjectRetain();
  v56 = swift_bridgeObjectRelease();
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v10)(a1 + a3[21], a2 + a3[21], v9, v56);
  v57 = a3[22];
  v58 = a1 + v57;
  v59 = a2 + v57;
  *(_BYTE *)v58 = *(_BYTE *)v59;
  *(_QWORD *)(v58 + 8) = *(_QWORD *)(v59 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[23]) = *(_BYTE *)(a2 + a3[23]);
  return a1;
}

uint64_t sub_10078D124(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  int EnumCaseMultiPayload;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Date(0);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v12 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  v13 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v10(a1 + a3[14], a2 + a3[14], v9);
  v14 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  v15 = (_OWORD *)(a1 + v14);
  v16 = (_OWORD *)(a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = a3[17];
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  v21 = type metadata accessor for CurrentLocation(0);
  if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v20, 1, v21))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v20);
    if (EnumCaseMultiPayload == 2)
    {
      v28 = type metadata accessor for Location(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v19, v20, v28);
      v25 = v19;
      v26 = v21;
      v27 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v29 = type metadata accessor for Location(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v19, v20, v29);
      v25 = v19;
      v26 = v21;
      v27 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
        goto LABEL_11;
      }
      v24 = type metadata accessor for Location(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v19, v20, v24);
      v25 = v19;
      v26 = v21;
      v27 = 0;
    }
    swift_storeEnumTagMultiPayload(v25, v26, v27);
LABEL_11:
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v19, 0, 1, v21);
    goto LABEL_12;
  }
  v22 = sub_1000BA294((uint64_t *)&unk_100C0D170);
  memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
LABEL_12:
  v30 = a3[19];
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  v31 = (_OWORD *)(a1 + v30);
  v32 = (_OWORD *)(a2 + v30);
  v33 = v32[1];
  *v31 = *v32;
  v31[1] = v33;
  v31[2] = v32[2];
  v34 = a3[21];
  *(_QWORD *)(a1 + a3[20]) = *(_QWORD *)(a2 + a3[20]);
  v10(a1 + v34, a2 + v34, v9);
  v35 = a3[23];
  *(_OWORD *)(a1 + a3[22]) = *(_OWORD *)(a2 + a3[22]);
  *(_BYTE *)(a1 + v35) = *(_BYTE *)(a2 + v35);
  return a1;
}

uint64_t sub_10078D390(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  int v23;
  int v24;
  int EnumCaseMultiPayload;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Date(0);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  v11 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v12 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  v13 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v10(a1 + a3[14], a2 + a3[14], v9);
  v14 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  v15 = (_QWORD *)(a1 + v14);
  v16 = a2 + v14;
  v17 = *(_QWORD *)(a2 + v14);
  v18 = *(_QWORD *)(a2 + v14 + 8);
  *v15 = v17;
  v15[1] = v18;
  swift_bridgeObjectRelease();
  v15[2] = *(_QWORD *)(v16 + 16);
  swift_bridgeObjectRelease();
  v15[3] = *(_QWORD *)(v16 + 24);
  swift_bridgeObjectRelease();
  v19 = a3[17];
  v20 = (void *)(a1 + v19);
  v21 = (const void *)(a2 + v19);
  v22 = type metadata accessor for CurrentLocation(0);
  v23 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v20, 1, v22);
  v24 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v21, 1, v22);
  if (v23)
  {
    if (!v24)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v21);
      if (EnumCaseMultiPayload == 2)
      {
        v36 = type metadata accessor for Location(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v20, v21, v36);
        v27 = v20;
        v28 = v22;
        v29 = 2;
      }
      else if (EnumCaseMultiPayload == 1)
      {
        v37 = type metadata accessor for Location(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v20, v21, v37);
        v27 = v20;
        v28 = v22;
        v29 = 1;
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
          goto LABEL_20;
        }
        v26 = type metadata accessor for Location(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v20, v21, v26);
        v27 = v20;
        v28 = v22;
        v29 = 0;
      }
      swift_storeEnumTagMultiPayload(v27, v28, v29);
LABEL_20:
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v20, 0, 1, v22);
      goto LABEL_24;
    }
  }
  else
  {
    if (!v24)
    {
      if (a1 == a2)
        goto LABEL_24;
      sub_1000215BC((uint64_t)v20, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
      v31 = swift_getEnumCaseMultiPayload(v21);
      if (v31 == 2)
      {
        v38 = type metadata accessor for Location(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v20, v21, v38);
        v33 = v20;
        v34 = v22;
        v35 = 2;
      }
      else if (v31 == 1)
      {
        v39 = type metadata accessor for Location(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v20, v21, v39);
        v33 = v20;
        v34 = v22;
        v35 = 1;
      }
      else
      {
        if (v31)
        {
          v30 = *(_QWORD *)(v22 - 8);
          goto LABEL_10;
        }
        v32 = type metadata accessor for Location(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v20, v21, v32);
        v33 = v20;
        v34 = v22;
        v35 = 0;
      }
      swift_storeEnumTagMultiPayload(v33, v34, v35);
      goto LABEL_24;
    }
    sub_1000215BC((uint64_t)v20, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
  }
  v30 = *(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100C0D170) - 8);
LABEL_10:
  memcpy(v20, v21, *(_QWORD *)(v30 + 64));
LABEL_24:
  v40 = a3[19];
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  v41 = (_QWORD *)(a1 + v40);
  v42 = (_QWORD *)(a2 + v40);
  v43 = *(void **)(a1 + v40);
  *(_QWORD *)(a1 + v40) = *(_QWORD *)(a2 + v40);

  v44 = (void *)v41[1];
  v41[1] = v42[1];

  v45 = (void *)v41[2];
  v41[2] = v42[2];

  v46 = (void *)v41[3];
  v41[3] = v42[3];

  v47 = (void *)v41[4];
  v41[4] = v42[4];

  v48 = (void *)v41[5];
  v41[5] = v42[5];

  *(_QWORD *)(a1 + a3[20]) = *(_QWORD *)(a2 + a3[20]);
  v49 = swift_bridgeObjectRelease();
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v10)(a1 + a3[21], a2 + a3[21], v9, v49);
  v50 = a3[22];
  v51 = a1 + v50;
  v52 = a2 + v50;
  *(_BYTE *)v51 = *(_BYTE *)v52;
  *(_QWORD *)(v51 + 8) = *(_QWORD *)(v52 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[23]) = *(_BYTE *)(a2 + a3[23]);
  return a1;
}

uint64_t sub_10078D7B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100098778();
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == (_DWORD)a2)
    {
      v9 = v8;
      v10 = *(int *)(a3 + 28);
    }
    else
    {
      v9 = sub_1000BA294((uint64_t *)&unk_100C0D170);
      v10 = *(int *)(a3 + 68);
    }
    return _s7Weather24LocationCompositionStateOwet_0(a1 + v10, a2, v9);
  }
}

uint64_t sub_10078D84C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_100098778();
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
    {
      v9 = v8;
      v10 = *(int *)(a4 + 28);
    }
    else
    {
      v9 = sub_1000BA294((uint64_t *)&unk_100C0D170);
      v10 = *(int *)(a4 + 68);
    }
    return _s7Weather24LocationCompositionStateOwst_0(v5 + v10, a2, a2, v9);
  }
  return result;
}

unint64_t sub_10078D8E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C05780;
  if (!qword_100C05780)
  {
    v1 = type metadata accessor for LocationInputFactory();
    result = swift_getWitnessTable(&unk_1009C9848, v1);
    atomic_store(result, (unint64_t *)&qword_100C05780);
  }
  return result;
}

uint64_t sub_10078D91C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    v8 = a2[1];
    v9 = *((_BYTE *)a2 + 16);
    swift_bridgeObjectRetain();
    sub_10008D47C(v8, v9);
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    v10 = *(int *)(a3 + 24);
    v11 = a1 + v10;
    v12 = (uint64_t)a2 + v10;
    v13 = type metadata accessor for Text.Measurements(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    v14 = *(int *)(a3 + 28);
    v15 = (_QWORD *)(a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = sub_1000BA294(&qword_100BC68C8);
    if (swift_getEnumCaseMultiPayload(v16) == 1)
    {
      v18 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      *v15 = *v16;
      swift_retain();
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
  }
  return a1;
}

uint64_t sub_10078DA48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 28);
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = sub_1000BA294(&qword_100BC68C8);
  if (swift_getEnumCaseMultiPayload(v13) == 1)
  {
    v15 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v12, v13, v15);
    swift_storeEnumTagMultiPayload(v12, v14, 1);
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10078DB34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = v6;
  sub_1000B15F8(v7, v8);
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  if (a1 != a2)
  {
    v13 = *(int *)(a3 + 28);
    v14 = (void *)(a1 + v13);
    v15 = (const void *)(a2 + v13);
    sub_100021A14(a1 + v13, &qword_100BC68C8);
    v16 = sub_1000BA294(&qword_100BC68C8);
    if (swift_getEnumCaseMultiPayload(v15) == 1)
    {
      v17 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
      swift_storeEnumTagMultiPayload(v14, v16, 1);
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10078DC54(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000BCF7C();
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == (_DWORD)a2)
    {
      v9 = v8;
      v10 = *(int *)(a3 + 24);
    }
    else
    {
      v9 = sub_1000BA294(&qword_100BCD380);
      v10 = *(int *)(a3 + 28);
    }
    return _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1 + v10, a2, v9);
  }
}

uint64_t sub_10078DCEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10078DCF8);
}

_QWORD *sub_10078DCF8(_QWORD *result, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *result = (a2 - 1);
  }
  else
  {
    v8 = sub_1000BCF7C();
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
    {
      v9 = v8;
      v10 = *(int *)(a4 + 24);
    }
    else
    {
      v9 = sub_1000BA294(&qword_100BCD380);
      v10 = *(int *)(a4 + 28);
    }
    return (_QWORD *)_s7Weather24LocationCompositionStateOwst_0((uint64_t)v5 + v10, a2, a2, v9);
  }
  return result;
}

void sub_10078DD8C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t OpaqueTypeConformance2;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  Swift::String v49;
  void *object;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;

  v64 = (uint64_t *)a2;
  v67 = a1;
  v58 = a3;
  v57 = type metadata accessor for AutomationInfo(0);
  __chkstk_darwin(v57);
  v56 = (uint64_t *)((char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for AccessibilityTraits(0);
  v65 = *(_QWORD *)(v7 - 8);
  v66 = v7;
  __chkstk_darwin(v7);
  v60 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AccessibilityChildBehavior(0);
  v62 = *(_QWORD *)(v9 - 8);
  v63 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000BA294(&qword_100C05898);
  __chkstk_darwin(v12);
  v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000BA294(&qword_100C058B8);
  v61 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_1000BA294(&qword_100BD9AB8);
  v18 = __chkstk_darwin(v59);
  v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v55 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v55 - v24;
  v26 = sub_1000BA294(&qword_100BD9AC0);
  v27 = __chkstk_darwin(v26);
  v55 = (char *)&v55 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v14 = static HorizontalAlignment.center.getter(v27);
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 0;
  v29 = sub_1000BA294(&qword_100C058C0);
  sub_10078E24C(a2, v67, (uint64_t)&v14[*(int *)(v29 + 44)], a4);
  static AccessibilityChildBehavior.combine.getter();
  sub_10003D2DC(&qword_100C058A0, &qword_100C05898);
  v31 = v30;
  View.accessibilityElement(children:)(v11, v12, v30);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v11, v63);
  sub_100021A14((uint64_t)v14, &qword_100C05898);
  v69 = v12;
  v70 = v31;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v69, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibilityRespondsToUserInteraction(_:)(1, v15, OpaqueTypeConformance2);
  v33 = v15;
  v34 = (uint64_t)v25;
  v35 = (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v17, v33);
  v36 = v60;
  static AccessibilityTraits.isButton.getter(v35);
  v37 = v59;
  ModifiedContent<>.accessibilityAddTraits(_:)(v36, v59);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v36, v66);
  sub_100021A14((uint64_t)v20, &qword_100BD9AB8);
  v38 = sub_1000BA294(&qword_100BC6A10);
  v39 = swift_allocObject(v38, 48, 7);
  *(_OWORD *)(v39 + 16) = xmmword_10097CA50;
  v40 = v67;
  *(_QWORD *)(v39 + 32) = sub_100114F34(v39);
  *(_QWORD *)(v39 + 40) = v41;
  v42 = sub_100114EF8();
  ModifiedContent<>.accessibilityInputLabels<A>(_:)(v39, v37, &type metadata for String, v42);
  swift_bridgeObjectRelease(v39);
  sub_100021A14((uint64_t)v23, &qword_100BD9AB8);
  v69 = 0x5F72756F68;
  v70 = 0xE500000000000000;
  v43 = *v64;
  swift_bridgeObjectRetain(*v64);
  v44 = sub_100113DA0(v40, v43);
  LOBYTE(v40) = v45;
  swift_bridgeObjectRelease(v43);
  if ((v40 & 1) != 0)
    v46 = -1;
  else
    v46 = v44;
  v47 = __OFADD__(v46, 1);
  v48 = v46 + 1;
  if (v47)
  {
    __break(1u);
  }
  else
  {
    v68 = v48;
    v49._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int);
    object = v49._object;
    String.append(_:)(v49);
    swift_bridgeObjectRelease(object);
    v51 = v70;
    v52 = (uint64_t)v56;
    *v56 = v69;
    *(_QWORD *)(v52 + 8) = v51;
    v53 = type metadata accessor for AutomationCellInfo(0);
    swift_storeEnumTagMultiPayload(v52, v53, 4);
    swift_storeEnumTagMultiPayload(v52, v57, 1);
    v54 = (uint64_t)v55;
    sub_10033559C();
    sub_1000215BC(v52, type metadata accessor for AutomationInfo);
    sub_100021A14(v34, &qword_100BD9AB8);
    sub_1000F111C(v54, v58, &qword_100BD9AC0);
  }
}

void sub_10078E24C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t (*v40)(char *, _QWORD, uint64_t);
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[2];
  __int128 v83;
  __int128 v84;
  __int128 v85;

  v81 = a3;
  v7 = sub_1000BA294(&qword_100BCCDA8);
  v8 = __chkstk_darwin(v7);
  v80 = (uint64_t)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v78 = (char *)&v72 - v10;
  v11 = type metadata accessor for Font.TextStyle(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000BA294(&qword_100C058C8);
  __chkstk_darwin(v15);
  v17 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000BA294(&qword_100C058D0);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v72 - v22;
  v75 = (uint64_t)&v72 - v22;
  v24 = sub_1000BA294(&qword_100C058D8);
  v25 = __chkstk_darwin(v24);
  v79 = (uint64_t)&v72 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v77 = (uint64_t)&v72 - v27;
  sub_100114C30(a2, (uint64_t)&v72 - v27);
  *(_QWORD *)v17 = static HorizontalAlignment.center.getter();
  *((_QWORD *)v17 + 1) = 0;
  v17[16] = 1;
  v28 = sub_1000BA294(&qword_100C058E0);
  sub_10078E7C8(a2, a1, &v17[*(int *)(v28 + 44)]);
  static Alignment.center.getter(v29);
  _FrameLayout.init(width:height:alignment:)(0, 1, *(_QWORD *)&a4, 0);
  sub_100037794((uint64_t)v17, (uint64_t)v21, &qword_100C058C8);
  v30 = &v21[*(int *)(v18 + 36)];
  v76 = v21;
  v31 = v84;
  *(_OWORD *)v30 = v83;
  *((_OWORD *)v30 + 1) = v31;
  *((_OWORD *)v30 + 2) = v85;
  sub_100021A14((uint64_t)v17, &qword_100C058C8);
  sub_1000F111C((uint64_t)v21, (uint64_t)v23, &qword_100C058D0);
  sub_100114808();
  v82[0] = v32;
  v82[1] = v33;
  v34 = sub_100114EF8();
  v35 = Text.init<A>(_:)(v82, &type metadata for String, v34);
  v73 = v36;
  v74 = v37;
  v39 = v38 & 1;
  v40 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v12 + 104);
  v41 = v40(v14, enum case for Font.TextStyle.title3(_:), v11);
  static Font.Weight.medium.getter(v41);
  v42 = static Font.system(_:weight:)(v14);
  v43 = *(void (**)(char *, uint64_t))(v12 + 8);
  v43(v14, v11);
  v44 = v40(v14, enum case for Font.TextStyle.body(_:), v11);
  static Font.Weight.bold.getter(v44);
  v45 = static Font.system(_:weight:)(v14);
  v43(v14, v11);
  v46 = *(_QWORD *)(a1 + 8);
  LOBYTE(a1) = *(_BYTE *)(a1 + 16);
  sub_10008D47C(v46, a1);
  sub_100109B54();
  LOBYTE(v14) = v47;
  sub_1000B15F8(v46, a1);
  v48 = enum case for Font.Leading.tight(_:);
  v49 = type metadata accessor for Font.Leading(0);
  v50 = (uint64_t)v78;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 104))(v78, v48, v49);
  _s7Weather24LocationCompositionStateOwst_0(v50, 0, 1, v49);
  v51 = v80;
  sub_100037794(v50, v80, &qword_100BCCDA8);
  swift_retain();
  swift_retain();
  v52 = sub_10040BDEC(v42, v45, v14 & 1, v51);
  v53 = v35;
  v54 = v35;
  v55 = v73;
  v56 = v74;
  v72 = Text.font(_:)(v52, v54, v73, v39, v74);
  v58 = v57;
  LOBYTE(v43) = v59;
  v80 = v60;
  swift_release(v42);
  swift_release(v45);
  swift_release(v52);
  sub_1000D31B4(v53, v55, v39);
  swift_bridgeObjectRelease(v56);
  sub_100021A14(v50, &qword_100BCCDA8);
  v61 = v77;
  v62 = v79;
  sub_100037794(v77, v79, &qword_100C058D8);
  v63 = v75;
  v64 = (uint64_t)v76;
  sub_100037794(v75, (uint64_t)v76, &qword_100C058D0);
  v65 = v81;
  sub_100037794(v62, v81, &qword_100C058D8);
  v66 = (int *)sub_1000BA294(&qword_100C058E8);
  v67 = v65 + v66[12];
  *(_QWORD *)v67 = 0;
  *(_BYTE *)(v67 + 8) = 0;
  sub_100037794(v64, v65 + v66[16], &qword_100C058D0);
  v68 = v65 + v66[20];
  *(_QWORD *)v68 = 0;
  *(_BYTE *)(v68 + 8) = 0;
  v69 = v65 + v66[24];
  v70 = v72;
  *(_QWORD *)v69 = v72;
  *(_QWORD *)(v69 + 8) = v58;
  *(_BYTE *)(v69 + 16) = v43 & 1;
  v71 = v80;
  *(_QWORD *)(v69 + 24) = v80;
  *(_WORD *)(v69 + 32) = 257;
  sub_1000D55D4(v70, v58, v43 & 1);
  swift_bridgeObjectRetain(v71);
  sub_100021A14(v63, &qword_100C058D0);
  sub_100021A14(v61, &qword_100C058D8);
  sub_1000D31B4(v70, v58, v43 & 1);
  swift_bridgeObjectRelease(v71);
  sub_100021A14(v64, &qword_100C058D0);
  sub_100021A14(v62, &qword_100C058D8);
}

void sub_10078E7C8(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  char *v67;
  __n128 v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char v88;
  Swift::String v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char v97;
  void (*v98)(char *, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  int *v132;
  char *v133;
  _QWORD v134[2];
  char *v135;
  uint64_t v136;
  uint64_t *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD v165[4];
  char v166;
  uint64_t v167;
  __int16 v168;

  v162 = a3;
  v163 = a2;
  v4 = sub_1000BA294(&qword_100C058F0);
  __chkstk_darwin(v4);
  v151 = (char *)v134 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_1000BA294(&qword_100C058F8);
  v6 = __chkstk_darwin(v164);
  v150 = (uint64_t)v134 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v149 = (uint64_t)v134 - v8;
  v9 = sub_1000BA294(&qword_100C05900);
  v10 = __chkstk_darwin(v9);
  v161 = (uint64_t)v134 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v160 = (uint64_t)v134 - v12;
  v153 = sub_1000BA294(&qword_100C05908);
  __chkstk_darwin(v153);
  v154 = (uint64_t)v134 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = type metadata accessor for TypesettingLanguageAwareLineHeightRatio(0);
  v146 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147);
  v145 = (char *)v134 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = type metadata accessor for FontWithSmallVariantModifier(0);
  __chkstk_darwin(v143);
  v144 = (_QWORD *)((char *)v134 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_1000BA294(&qword_100BCCDA8);
  __chkstk_darwin(v16);
  v142 = (char *)v134 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ColorSchemeContrast(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)v134 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)v134 - v23;
  v25 = sub_1000BA294(&qword_100BDD818);
  __chkstk_darwin(v25);
  v27 = (char *)v134 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = sub_1000BA294(&qword_100BDD820);
  __chkstk_darwin(v136);
  v137 = (_QWORD *)((char *)v134 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  v140 = sub_1000BA294(&qword_100C05910);
  v139 = *(_QWORD *)(v140 - 8);
  __chkstk_darwin(v140);
  v138 = (char *)v134 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = sub_1000BA294(&qword_100C05918);
  v30 = __chkstk_darwin(v152);
  v135 = (char *)v134 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v141 = (uint64_t)v134 - v32;
  v33 = sub_1000BA294(&qword_100C05920);
  v34 = __chkstk_darwin(v33);
  v159 = (uint64_t)v134 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v37 = (char *)v134 - v36;
  v38 = a1;
  sub_100114974();
  v40 = v39;
  v42 = v41;
  swift_bridgeObjectRelease(v41);
  v43 = HIBYTE(v42) & 0xF;
  if ((v42 & 0x2000000000000000) == 0)
    v43 = v40 & 0xFFFFFFFFFFFFLL;
  v157 = v18;
  v158 = v37;
  v155 = v22;
  v156 = v19;
  v148 = v24;
  if (v43)
  {
    v134[1] = v38;
    sub_100114974();
    v46 = Image.init(systemName:)(v44, v45);
    type metadata accessor for HourlyForecastComponentView(0);
    v47 = v163;
    sub_100114A94();
    (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v22, enum case for ColorSchemeContrast.increased(_:), v18);
    v48 = static ColorSchemeContrast.== infix(_:_:)(v24, v22);
    v49 = *(void (**)(char *, uint64_t))(v19 + 8);
    v49(v22, v18);
    v49(v24, v18);
    v50 = type metadata accessor for Image.TemplateRenderingMode(0);
    v51 = (unsigned int *)&enum case for Image.TemplateRenderingMode.template(_:);
    if ((v48 & 1) == 0)
      v51 = (unsigned int *)&enum case for Image.TemplateRenderingMode.original(_:);
    (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v50 - 8) + 104))(v27, *v51, v50);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v27, 0, 1, v50);
    v52 = Image.renderingMode(_:)(v27, v46);
    swift_release(v46);
    sub_100021A14((uint64_t)v27, &qword_100BDD818);
    v54 = static Font.title3.getter(v53);
    v55 = static Font.body.getter(v54);
    v56 = *(_QWORD *)(v47 + 8);
    v57 = *(_BYTE *)(v47 + 16);
    sub_10008D47C(v56, v57);
    sub_100109B54();
    v59 = v58;
    sub_1000B15F8(v56, v57);
    v60 = enum case for Font.Leading.tight(_:);
    v61 = type metadata accessor for Font.Leading(0);
    v62 = (uint64_t)v142;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 104))(v142, v60, v61);
    _s7Weather24LocationCompositionStateOwst_0(v62, 0, 1, v61);
    v63 = v143;
    v64 = v144;
    sub_100037794(v62, (uint64_t)v144 + *(int *)(v143 + 24), &qword_100BCCDA8);
    *v64 = v54;
    v64[1] = v55;
    *((_BYTE *)v64 + *(int *)(v63 + 28)) = v59 & 1;
    v65 = v136;
    v66 = v137;
    sub_10000AB54((uint64_t)v64, (uint64_t)v137 + *(int *)(v136 + 36), type metadata accessor for FontWithSmallVariantModifier);
    *v66 = v52;
    swift_retain();
    sub_1000215BC((uint64_t)v64, type metadata accessor for FontWithSmallVariantModifier);
    sub_100021A14(v62, &qword_100BCCDA8);
    swift_release(v52);
    v67 = v145;
    static TypesettingLanguageAwareLineHeightRatio.disable.getter(v68);
    v69 = sub_10011548C();
    v70 = v138;
    View.typesettingLanguageAwareLineHeightRatio(_:isEnabled:)(v67, 1, v65, v69);
    (*(void (**)(char *, uint64_t))(v146 + 8))(v67, v147);
    sub_100021A14((uint64_t)v66, &qword_100BDD820);
    sub_100114ABC();
    v72 = v71;
    v74 = v73;
    v75 = v139;
    v76 = (uint64_t)v135;
    v77 = v140;
    (*(void (**)(char *, char *, uint64_t))(v139 + 16))(v135, v70, v140);
    v78 = v152;
    v79 = (_QWORD *)(v76 + *(int *)(v152 + 36));
    *v79 = v72;
    v79[1] = v74;
    (*(void (**)(char *, uint64_t))(v75 + 8))(v70, v77);
    v80 = v141;
    sub_1000F111C(v76, v141, &qword_100C05918);
    v81 = v154;
    sub_100037794(v80, v154, &qword_100C05918);
    swift_storeEnumTagMultiPayload(v81, v153, 0);
    v82 = sub_100115510();
    _ConditionalContent<>.init(storage:)(v81, v78, &type metadata for EmptyView, v82, &protocol witness table for EmptyView);
    sub_100021A14(v80, &qword_100C05918);
  }
  else
  {
    v83 = v154;
    swift_storeEnumTagMultiPayload(v154, v153, 1);
    v84 = sub_100115510();
    _ConditionalContent<>.init(storage:)(v83, v152, &type metadata for EmptyView, v84, &protocol witness table for EmptyView);
  }
  sub_100114B78();
  v86 = v156;
  v85 = v157;
  v87 = v155;
  if ((v88 & 1) != 0)
    goto LABEL_12;
  if (qword_100BC25C8 != -1)
    swift_once(&qword_100BC25C8, sub_10012DC98);
  if (byte_100C05788 == 1)
  {
LABEL_12:
    sub_10054687C();
    v89 = Double.formattedPercent(roundToNearestPercent:)(1);
    v90 = sub_100017E70(v89._countAndFlagsBits, (uint64_t)v89._object);
    v92 = v91;
    LODWORD(v154) = v93;
    v95 = v94;
    swift_bridgeObjectRelease(v89._object);
    type metadata accessor for HourlyForecastComponentView(0);
    v96 = v148;
    sub_100114A94();
    (*(void (**)(char *, _QWORD, uint64_t))(v86 + 104))(v87, enum case for ColorSchemeContrast.increased(_:), v85);
    v97 = static ColorSchemeContrast.== infix(_:_:)(v96, v87);
    v98 = *(void (**)(char *, uint64_t))(v86 + 8);
    v98(v87, v85);
    v99 = ((uint64_t (*)(char *, uint64_t))v98)(v96, v85);
    if ((v97 & 1) != 0)
      v100 = static Color.white.getter(v99);
    else
      v100 = static Color.cyan.getter(v99);
    v101 = v100;
    v102 = v154 & 1;
    v103 = Text.foregroundColor(_:)(v100, v90, v92, v154 & 1, v95);
    v105 = v104;
    v107 = v106;
    v109 = v108;
    v163 = v108;
    swift_release(v101);
    v107 &= 1u;
    sub_1000D31B4(v90, v92, v102);
    swift_bridgeObjectRelease(v95);
    v165[2] = v103;
    v165[3] = v105;
    v166 = v107;
    v167 = v109;
    v168 = 257;
    sub_100546978();
    v165[0] = v110;
    v165[1] = v111;
    v112 = sub_100114EF8();
    v113 = Text.init<A>(_:)(v165, &type metadata for String, v112);
    v115 = v114;
    v117 = v116;
    v119 = v118 & 1;
    v120 = sub_1000BA294(&qword_100BD99D8);
    v121 = sub_100463C04();
    v122 = (uint64_t)v151;
    View.accessibilityLabel(_:)(v113, v115, v119, v117, v120, v121);
    sub_1000D31B4(v113, v115, v119);
    swift_bridgeObjectRelease(v117);
    sub_1000D31B4(v103, v105, v107);
    swift_bridgeObjectRelease(v163);
    v123 = v150;
    sub_100037794(v122, v150, &qword_100C058F0);
    *(_BYTE *)(v123 + *(int *)(v164 + 36)) = 1;
    sub_100021A14(v122, &qword_100C058F0);
    v124 = v123;
    v125 = v149;
    sub_1000F111C(v124, v149, &qword_100C058F8);
    v126 = v160;
    sub_1000F111C(v125, v160, &qword_100C058F8);
    v127 = 0;
  }
  else
  {
    v127 = 1;
    v126 = v160;
  }
  _s7Weather24LocationCompositionStateOwst_0(v126, v127, 1, v164);
  v129 = (uint64_t)v158;
  v128 = v159;
  sub_100037794((uint64_t)v158, v159, &qword_100C05920);
  v130 = v161;
  sub_100037794(v126, v161, &qword_100C05900);
  v131 = v162;
  *v162 = 0;
  *((_BYTE *)v131 + 8) = 1;
  v132 = (int *)sub_1000BA294(&qword_100C05940);
  sub_100037794(v128, (uint64_t)v131 + v132[12], &qword_100C05920);
  sub_100037794(v130, (uint64_t)v131 + v132[16], &qword_100C05900);
  v133 = (char *)v131 + v132[20];
  *(_QWORD *)v133 = 0;
  v133[8] = 1;
  sub_100021A14(v126, &qword_100C05900);
  sub_100021A14(v129, &qword_100C05920);
  sub_100021A14(v130, &qword_100C05900);
  sub_100021A14(v128, &qword_100C05920);
}

unint64_t sub_10078F344()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C05858;
  if (!qword_100C05858)
  {
    v1 = sub_100075EB0(&qword_100C05850);
    sub_10003D2DC(&qword_100C05860, &qword_100C05868);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C05858);
  }
  return result;
}

unint64_t sub_10078F3C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C05880;
  if (!qword_100C05880)
  {
    v1 = sub_100075EB0(&qword_100C05878);
    sub_10078F42C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100C05880);
  }
  return result;
}

unint64_t sub_10078F42C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C05888;
  if (!qword_100C05888)
  {
    v1 = sub_100075EB0(&qword_100BD9AC0);
    sub_10078F4B0();
    sub_10000F1C8((unint64_t *)&qword_100BC6768, type metadata accessor for AutomationInfoViewModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C05888);
  }
  return result;
}

unint64_t sub_10078F4B0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_100C05890;
  if (!qword_100C05890)
  {
    v1 = sub_100075EB0(&qword_100BD9AB8);
    v2 = sub_100075EB0(&qword_100C05898);
    sub_10003D2DC(&qword_100C058A0, &qword_100C05898);
    v4[0] = v2;
    v4[1] = v3;
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10000F1C8((unint64_t *)&qword_100BC4E48, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C05890);
  }
  return result;
}

uint64_t sub_10078F57C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = sub_1000CD250();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease();
  sub_1000B15F8(*(_QWORD *)(v0 + v4 + 8), *(_BYTE *)(v0 + v4 + 16));
  v6 = v0 + v4 + *(int *)(v1 + 24);
  v7 = sub_1000BCF7C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = v0 + v4 + *(int *)(v1 + 28);
  sub_1000BA294(&qword_100BC68C8);
  if (swift_getEnumCaseMultiPayload(v8) == 1)
  {
    v9 = type metadata accessor for ColorSchemeContrast(0);
    sub_10003BC44(v9);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_10078F658(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HourlyForecastComponentView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10078F69C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(sub_1000CD250() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_10078DD8C(a1, v2 + v6, a2, *(double *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

unint64_t sub_10078F704()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  uint64_t v7;

  result = qword_100C05970;
  if (!qword_100C05970)
  {
    v1 = sub_100075EB0(&qword_100C05848);
    v2 = sub_100075EB0(&qword_100C05838);
    v3 = sub_100075EB0(&qword_100C05830);
    sub_10003D2DC(&qword_100C05870, &qword_100C05830);
    v6 = v3;
    v7 = v4;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.scrollIndicators(_:axes:)>>, 1);
    v6 = v2;
    v7 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10000F1C8((unint64_t *)&qword_100BC4E48, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C05970);
  }
  return result;
}

uint64_t sub_10078F7F8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[5];
  _QWORD v26[3];
  uint64_t v27;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100C05A20);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (v27)
  {
    v8 = a1[3];
    v9 = a1[4];
    sub_1000DB418(a1, v8);
    v10 = sub_1000BA294(&qword_100BC4810);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
    if (result)
    {
      v11 = result;
      v12 = sub_100068EB4((uint64_t)v26, v27);
      __chkstk_darwin(v12);
      v14 = (_QWORD *)((char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *))(v15 + 16))(v14);
      v16 = *v14;
      v17 = type metadata accessor for SunriseSunsetDetailInteractor();
      v25[3] = v17;
      v25[4] = &off_100B65170;
      v25[0] = v16;
      v18 = type metadata accessor for SunriseSunsetDetailModule();
      v19 = (_QWORD *)swift_allocObject(v18, 64, 7);
      v20 = sub_100068EB4((uint64_t)v25, v17);
      __chkstk_darwin(v20);
      v22 = (_QWORD *)((char *)v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *))(v23 + 16))(v22);
      v24 = *v22;
      v19[5] = v17;
      v19[6] = &off_100B65170;
      v19[2] = v24;
      v19[7] = v11;
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v25);
      result = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v26);
      a2[3] = v18;
      a2[4] = &off_100B76A68;
      *a2 = v19;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10078F9D0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100790848(a1, (uint64_t)&off_100B5FFC8, a2);
}

uint64_t sub_10078F9DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  __n128 v23;
  void (*v24)(char *, uint64_t, __n128);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v46;

  v0 = type metadata accessor for Scope(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000BA294(&qword_100C05A18);
  v5 = RegistrationContainer.register<A>(_:name:factory:)(v4, 0, 0, sub_10078FDC0, 0, v4);
  swift_release(v5);
  v6 = sub_1000BA294(&qword_100C05A20);
  v7 = RegistrationContainer.register<A>(_:name:factory:)(v6, 0, 0, sub_10078FEF8, 0, v6);
  swift_release(v7);
  v8 = sub_1000BA294(&qword_100C05A28);
  v9 = RegistrationContainer.register<A>(_:name:factory:)(v8, 0, 0, sub_100790228, 0, v8);
  swift_release(v9);
  v10 = sub_1000BA294(&qword_100C05A30);
  v11 = RegistrationContainer.register<A>(_:name:factory:)(v10, 0, 0, sub_10079023C, 0, v10);
  swift_release(v11);
  v12 = sub_1000BA294(&qword_100C05A38);
  v13 = RegistrationContainer.register<A>(_:name:factory:)(v12, 0, 0, sub_100790254, 0, v12);
  swift_release(v13);
  v14 = sub_1000BA294(&qword_100C05A40);
  v15 = RegistrationContainer.register<A>(_:name:factory:)(v14, 0, 0, sub_10079080C, 0, v14);
  swift_release(v15);
  v16 = sub_1000BA294(&qword_100C05A48);
  v17 = RegistrationContainer.register<A>(_:name:factory:)(v16, 0, 0, sub_10079083C, 0, v16);
  swift_release(v17);
  v18 = type metadata accessor for SunriseSunsetDetailDataProcessor();
  v19 = RegistrationContainer.register<A>(_:name:factory:)(v18, 0, 0, sub_1007908B4, 0, v18);
  v20 = enum case for Scope.singleton(_:);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  v21(v3, enum case for Scope.singleton(_:), v0);
  v22 = Definition.inScope(_:)(v3);
  swift_release(v22);
  v23 = swift_release(v19);
  v24 = *(void (**)(char *, uint64_t, __n128))(v1 + 8);
  v24(v3, v0, v23);
  v25 = sub_1000BA294(&qword_100C05A50);
  v26 = RegistrationContainer.register<A>(_:name:factory:)(v25, 0, 0, sub_100790AE4, 0, v25);
  swift_release(v26);
  v27 = sub_1000BA294(&qword_100C05A58);
  v28 = RegistrationContainer.register<A>(_:name:factory:)(v27, 0, 0, sub_100790CA0, 0, v27);
  swift_release(v28);
  v29 = sub_1000BA294(&qword_100C05A60);
  v30 = RegistrationContainer.register<A>(_:name:factory:)(v29, 0, 0, sub_100790D54, 0, v29);
  v21(v3, v20, v0);
  v31 = Definition.inScope(_:)(v3);
  swift_release(v31);
  v32 = swift_release(v30);
  v24(v3, v0, v32);
  v33 = sub_1000BA294(&qword_100BC4810);
  v34 = RegistrationContainer.register<A>(_:name:factory:)(v33, 0, 0, sub_100790DA8, 0, v33);
  swift_release(v34);
  v35 = sub_1000BA294(&qword_100C05A68);
  v36 = RegistrationContainer.register<A>(_:name:factory:)(v35, 0, 0, sub_100791090, 0, v35);
  v21(v3, v20, v0);
  v37 = Definition.inScope(_:)(v3);
  swift_release(v37);
  v38 = swift_release(v36);
  v24(v3, v0, v38);
  v39 = sub_1000BA294(&qword_100C05A70);
  v40 = RegistrationContainer.register<A>(_:name:factory:)(v39, 0, 0, sub_100791218, 0, v39);
  swift_release(v40);
  v41 = sub_1000BA294(&qword_100C05A78);
  v42 = RegistrationContainer.register<A>(_:name:factory:)(v41, 0, 0, sub_1007912F8, 0, v41);
  v21(v3, v20, v0);
  v43 = Definition.inScope(_:)(v3);
  swift_release(v43);
  v44 = swift_release(v42);
  return ((uint64_t (*)(char *, uint64_t, __n128))v24)(v3, v0, v44);
}

uint64_t sub_10078FDC0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = type metadata accessor for Tracker(0);
  result = dispatch thunk of ResolverType.resolve<A>(_:name:)(v6, 0x6E6F697461636F4CLL, 0xEE00656C75646F4DLL, v6, v4, v5);
  if (result)
  {
    v8 = result;
    v9 = Tracker.chain(name:identifier:)(0xD000000000000013, 0x80000001009F01B0, 0, 0);
    swift_release(v8);
    v10 = a1[3];
    v11 = a1[4];
    sub_1000DB418(a1, v10);
    v12 = sub_1000BA294(&qword_100BC43F8);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v12, v12, v10, v11);
    if (v15)
    {
      a2[3] = (uint64_t)&type metadata for SunriseSunsetDetailTracker;
      a2[4] = (uint64_t)&off_100B95E20;
      v13 = swift_allocObject(&unk_100B903D0, 64, 7);
      *a2 = v13;
      *(_QWORD *)(v13 + 16) = v9;
      return sub_10003C800(&v14, v13 + 24);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10078FEF8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[3];
  uint64_t v47;
  _QWORD v48[3];
  uint64_t v49;
  _QWORD v50[3];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BC43F0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v52)
  {
    __break(1u);
    goto LABEL_8;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1000BA294(&qword_100C05A18);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!v51)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v11 = a1[3];
  v12 = a1[4];
  sub_1000DB418(a1, v11);
  v13 = sub_1000BA294(&qword_100C05A10);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
  if (!v49)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v14 = a1[3];
  v15 = a1[4];
  sub_1000DB418(a1, v14);
  v16 = sub_1000BA294(&qword_100C05A48);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v16, v16, v14, v15);
  if (!v47)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v39 = v53;
  v40 = v52;
  v41 = a2;
  v17 = a1[3];
  v18 = a1[4];
  sub_1000DB418(a1, v17);
  v19 = sub_1000BA294(&qword_100BC43B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v19, v19, v17, v18);
  v20 = v42;
  if (v42)
  {
    v22 = v44;
    v21 = v45;
    v23 = v43;
    v24 = sub_100068EB4((uint64_t)v50, v51);
    v38 = (uint64_t)&v38;
    __chkstk_darwin(v24);
    v26 = (_OWORD *)((char *)&v38 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(_OWORD *))(v27 + 16))(v26);
    v28 = sub_100068EB4((uint64_t)v48, v49);
    __chkstk_darwin(v28);
    v30 = (uint64_t *)((char *)&v38 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v31 + 16))(v30);
    v32 = sub_100068EB4((uint64_t)v46, v47);
    __chkstk_darwin(v32);
    v34 = (uint64_t *)((char *)&v38 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v35 + 16))(v34);
    v36 = sub_1007916B0(v40, v39, v26, *v30, *v34, v20, v23, v22, v21);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v46);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v48);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v50);
    result = type metadata accessor for SunriseSunsetDetailInteractor();
    v37 = v41;
    v41[3] = result;
    v37[4] = &off_100B65170;
    *v37 = v36;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100790228@<X0>(uint64_t *a1@<X8>)
{
  return sub_10012A894((uint64_t (*)(_QWORD))type metadata accessor for SunriseSunsetDetailInputFactory, (uint64_t)&off_100B71B78, a1);
}

void sub_10079023C(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for SunEventViewModelFactory;
  *(_QWORD *)(a1 + 32) = &off_100B675B0;
}

_QWORD *sub_100790254@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  _QWORD v60[5];
  int v61;
  _QWORD *v62;
  char *v63;
  uint64_t *v64;
  _QWORD v65[3];
  uint64_t v66;
  _QWORD v67[3];
  uint64_t v68;
  _QWORD v69[3];
  uint64_t v70;
  _QWORD v71[3];
  uint64_t v72;
  _QWORD v73[3];
  uint64_t v74;
  _QWORD v75[3];
  uint64_t v76;
  _QWORD v77[3];
  uint64_t v78;

  v4 = type metadata accessor for SunriseSunsetEventCalculator(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  SunriseSunsetEventCalculator.init()(v5);
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1000BA294(&qword_100C05A50);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!v78)
  {
    __break(1u);
    goto LABEL_11;
  }
  v12 = a1[3];
  v13 = a1[4];
  sub_1000DB418(a1, v12);
  v14 = sub_1000BA294(&qword_100C05A60);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v14, v14, v12, v13);
  if (!v76)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v15 = a1[3];
  v16 = a1[4];
  sub_1000DB418(a1, v15);
  v17 = sub_1000BA294(&qword_100C05A48);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v17, v17, v15, v16);
  if (!v74)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v18 = a1[3];
  v19 = a1[4];
  sub_1000DB418(a1, v18);
  v20 = sub_1000BA294(&qword_100C05A40);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v20, v20, v18, v19);
  if (!v72)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v21 = a1[3];
  v22 = a1[4];
  sub_1000DB418(a1, v21);
  v23 = sub_1000BA294(&qword_100C05A68);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v23, v23, v21, v22);
  if (!v70)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v24 = a1[3];
  v25 = a1[4];
  sub_1000DB418(a1, v24);
  v26 = sub_1000BA294(&qword_100C05A70);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v26, v26, v24, v25);
  if (!v68)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v27 = a1[3];
  v28 = a1[4];
  sub_1000DB418(a1, v27);
  v29 = sub_1000BA294(&qword_100BC43E8);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v29, v29, v27, v28);
  if (!v66)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v63 = v7;
  v64 = a2;
  v30 = a1[3];
  v31 = a1[4];
  sub_1000DB418(a1, v30);
  result = dispatch thunk of ResolverType.resolve<A>(_:name:)(v65, &type metadata for Bool, 0xD000000000000012, 0x80000001009F5CF0, &type metadata for Bool, v30, v31);
  if (LOBYTE(v65[0]) != 2)
  {
    v61 = v65[0] & 1;
    v32 = sub_100068EB4((uint64_t)v77, v78);
    v62 = v60;
    __chkstk_darwin(v32);
    v34 = (_QWORD *)((char *)v60 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v35 + 16))(v34);
    v36 = sub_100068EB4((uint64_t)v75, v76);
    v60[4] = v60;
    __chkstk_darwin(v36);
    v38 = (_QWORD *)((char *)v60 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v39 + 16))(v38);
    v40 = sub_100068EB4((uint64_t)v73, v74);
    v60[3] = v60;
    __chkstk_darwin(v40);
    v42 = (_QWORD *)((char *)v60 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v43 + 16))(v42);
    v44 = sub_100068EB4((uint64_t)v71, v72);
    v60[2] = v60;
    __chkstk_darwin(v44);
    (*(void (**)(void))(v45 + 16))();
    v46 = sub_100068EB4((uint64_t)v69, v70);
    v60[1] = v60;
    __chkstk_darwin(v46);
    v48 = (_QWORD *)((char *)v60 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v49 + 16))(v48);
    v50 = sub_100068EB4((uint64_t)v67, v68);
    __chkstk_darwin(v50);
    v52 = (char *)v60 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v53 + 16))(v52);
    v54 = sub_100068EB4((uint64_t)v65 + 1, v66);
    __chkstk_darwin(v54);
    v56 = (_QWORD *)((char *)v60 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v57 + 16))(v56);
    v58 = sub_100791A68((uint64_t)v63, *v34, *v38, *v42, *v48, (uint64_t)v52, *v56, v61);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)((char *)v65 + 1));
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v67);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v69);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v71);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v73);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v75);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v77);
    result = (_QWORD *)type metadata accessor for SunriseSunsetDetailViewModelFactory(0);
    v59 = v64;
    v64[3] = (uint64_t)result;
    v59[4] = (uint64_t)&off_100B91488;
    *v59 = v58;
    return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

unint64_t sub_10079080C@<X0>(uint64_t a1@<X8>)
{
  unint64_t result;

  *(_QWORD *)(a1 + 24) = &type metadata for DaylightStringBuilder;
  result = sub_100792050();
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

uint64_t sub_10079083C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100790848(a1, (uint64_t)&off_100B5FFB0, a2);
}

uint64_t sub_100790848@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = a1[3];
  v6 = a1[4];
  sub_1000DB418(a1, v5);
  v7 = type metadata accessor for SunriseSunsetDetailDataProcessor();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v7, v7, v5, v6);
  if (result)
  {
    a3[3] = v7;
    a3[4] = a2;
    *a3 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1007908B4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[3];
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100C05A58);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (!v31)
  {
    __break(1u);
    goto LABEL_6;
  }
  v6 = a1[3];
  v7 = a1[4];
  sub_1000DB418(a1, v6);
  v8 = sub_1000BA294(&qword_100C05A68);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v8, v8, v6, v7);
  if (!v29)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v9 = a1[3];
  v10 = a1[4];
  sub_1000DB418(a1, v9);
  v11 = sub_1000BA294(&qword_100C05A60);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v11, v11, v9, v10);
  if (v27)
  {
    v12 = sub_100068EB4((uint64_t)v30, v31);
    __chkstk_darwin(v12);
    v14 = (char *)&v26[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v15 + 16))(v14);
    v16 = sub_100068EB4((uint64_t)v28, v29);
    __chkstk_darwin(v16);
    v18 = (_QWORD *)((char *)&v26[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v19 + 16))(v18);
    v20 = sub_100068EB4((uint64_t)v26, v27);
    __chkstk_darwin(v20);
    v22 = (uint64_t **)((char *)&v26[-1] - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t **))(v23 + 16))(v22);
    v24 = sub_100791E30(v14, *v18, *v22);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v26);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v28);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v30);
    return v24;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_100790AE4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[5];
  _QWORD v24[3];
  uint64_t v25;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = sub_1000BA294(&qword_100C05A68);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (v25)
  {
    v7 = sub_100068EB4((uint64_t)v24, v25);
    __chkstk_darwin(v7);
    v9 = (_QWORD *)((char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v10 + 16))(v9);
    v11 = *v9;
    v12 = type metadata accessor for SunElevationCalculator();
    v23[3] = v12;
    v23[4] = &off_100B978C8;
    v23[0] = v11;
    v13 = type metadata accessor for SunriseSunsetDetailChartViewModelFactory(0);
    v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    v15 = sub_100068EB4((uint64_t)v23, v12);
    __chkstk_darwin(v15);
    v17 = (_QWORD *)((char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v18 + 16))(v17);
    v19 = *v17;
    v20 = (_QWORD *)(v14 + OBJC_IVAR____TtC7Weather40SunriseSunsetDetailChartViewModelFactory_sunElevationCalculator);
    v20[3] = v12;
    v20[4] = &off_100B978C8;
    *v20 = v19;
    v21 = v14 + OBJC_IVAR____TtC7Weather40SunriseSunsetDetailChartViewModelFactory____lazy_storage___listAnimationKind;
    v22 = type metadata accessor for Settings.VFX.AnimatedBackgrounds.AnimationKind(0);
    _s7Weather24LocationCompositionStateOwst_0(v21, 1, 1, v22);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v23);
    result = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v24);
    a2[3] = v13;
    a2[4] = (uint64_t)&off_100B6BDC0;
    *a2 = v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100790CA0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = sub_1000BA294(&qword_100C05A68);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (v9)
  {
    a2[3] = (uint64_t)&type metadata for SunriseSunsetMonthlyViewModelFactory;
    a2[4] = (uint64_t)&off_100B83640;
    v7 = swift_allocObject(&unk_100B903A8, 96, 7);
    *a2 = v7;
    *(_QWORD *)(v7 + 80) = &type metadata for SunriseSunsetDaylightCalculator;
    *(_QWORD *)(v7 + 88) = &off_100B8FF68;
    return sub_10003C800(&v8, v7 + 16);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100790D54(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for SunriseSunsetDetailViewDataCache();
  swift_allocObject(v2, 32, 7);
  sub_1004D0260();
  a1[3] = v2;
  a1[4] = &off_100B77F60;
  *a1 = v3;
}

uint64_t sub_100790DA8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22[2];
  _QWORD v23[3];
  uint64_t v24;
  _UNKNOWN **v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BC43B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  v6 = v28;
  if (!v28)
  {
    __break(1u);
    goto LABEL_6;
  }
  v8 = v30;
  v7 = v31;
  v9 = v29;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1000BA294(&qword_100C05A28);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v12, v12, v10, v11);
  if (!v27)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v13 = *sub_1000DB418(v26, v27);
  v24 = type metadata accessor for SunriseSunsetDetailInputFactory();
  v25 = &off_100B71B78;
  v23[0] = v13;
  sub_100043CA8((uint64_t)v23, (uint64_t)v22);
  v14 = swift_allocObject(&unk_100B90330, 56, 7);
  sub_10003C800(v22, v14 + 16);
  swift_retain();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v23);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v26);
  v15 = swift_allocObject(&unk_100B90358, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_100791390;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = a1[3];
  v17 = a1[4];
  sub_1000DB418(a1, v16);
  v18 = sub_1000BA294(&qword_100C05A38);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v18, v18, v16, v17);
  if (v27)
  {
    v19 = *sub_1000DB418(v26, v27);
    v24 = type metadata accessor for SunriseSunsetDetailViewModelFactory(0);
    v25 = &off_100B91488;
    v23[0] = v19;
    sub_100043CA8((uint64_t)v23, (uint64_t)v22);
    v20 = swift_allocObject(&unk_100B90380, 56, 7);
    sub_10003C800(v22, v20 + 16);
    swift_retain();
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v23);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v26);
    v21 = sub_1000BA294(&qword_100BC4810);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    return sub_100184360(v6, v9, v8, v7, sub_100182F48, 0, sub_1000A22C0, v15, sub_1007913BC, v20);
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_100791000(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  sub_1000DB418(a2, a2[3]);
  sub_1003CDC30(a1, a3);
}

void sub_100791048(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  sub_1000DB418(a2, a2[3]);
  sub_1007B69DC(a1, a3);
}

uint64_t sub_100791090@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];
  _QWORD v21[3];
  uint64_t v22;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = sub_1000BA294(&qword_100C05A78);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (v22)
  {
    v7 = sub_100068EB4((uint64_t)v21, v22);
    __chkstk_darwin(v7);
    v9 = (_QWORD *)((char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v10 + 16))(v9);
    v11 = *v9;
    v12 = type metadata accessor for LocationPeakTimeCalculator();
    v20[3] = v12;
    v20[4] = &off_100B89E40;
    v20[0] = v11;
    v13 = type metadata accessor for SunElevationCalculator();
    v14 = (_QWORD *)swift_allocObject(v13, 56, 7);
    v15 = sub_100068EB4((uint64_t)v20, v12);
    __chkstk_darwin(v15);
    v17 = (_QWORD *)((char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v18 + 16))(v17);
    v19 = *v17;
    v14[5] = v12;
    v14[6] = &off_100B89E40;
    v14[2] = v19;
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v20);
    result = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v21);
    a2[3] = v13;
    a2[4] = &off_100B978C8;
    *a2 = v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100791218@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v4 = type metadata accessor for SunriseSunsetEventCalculator(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_1000DB418(a1, v7);
  v9 = sub_1000BA294(&qword_100C05A30);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v9, v9, v7, v8);
  if (v14)
  {
    SunriseSunsetEventCalculator.init()(result);
    a2[3] = type metadata accessor for SunriseSunsetTableViewModelFactory(0);
    a2[4] = &off_100B78138;
    v11 = sub_10005F164(a2);
    return sub_1004D1828(&v13, (uint64_t)v6, (uint64_t)v11);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1007912F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = type metadata accessor for LocationPeakTimeCalculator();
  v3 = swift_allocObject(v2, 24, 7);
  v4 = sub_1000BA294(&qword_100C05A80);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = Cache.init()();
  *(_QWORD *)(v3 + 16) = result;
  a1[3] = v2;
  a1[4] = (uint64_t)&off_100B89E40;
  *a1 = v3;
  return result;
}

uint64_t sub_10079136C()
{
  uint64_t v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

void sub_100791390(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_100791000(a1, (_QWORD *)(v2 + 16), a2);
}

uint64_t sub_100791398()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1007913BC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_100791048(a1, (_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1007913C4()
{
  uint64_t v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1007913F0(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  _UNKNOWN **v13;
  __int128 v14;
  uint64_t v15;
  _UNKNOWN **v16;
  __int128 v17;
  ValueMetadata *v18;
  _UNKNOWN **v19;

  v18 = &type metadata for SunriseSunsetMonthlyViewModelFactory;
  v19 = &off_100B83640;
  *(_QWORD *)&v17 = swift_allocObject(&unk_100B903A8, 96, 7);
  memcpy((void *)(v17 + 16), a1, 0x50uLL);
  v15 = type metadata accessor for SunElevationCalculator();
  v16 = &off_100B978C8;
  *(_QWORD *)&v14 = a2;
  v12 = type metadata accessor for SunriseSunsetDetailViewDataCache();
  v13 = &off_100B77F60;
  *(_QWORD *)&v11 = a3;
  sub_100120350();
  *(_QWORD *)(a4 + 136) = OS_os_log.init(subsystem:category:)(0xD000000000000011, 0x80000001009F0D20, 0xD000000000000020, 0x8000000100A13820);
  type metadata accessor for SunriseSunsetDetailDataProcessor.ProcessingKey(0);
  type metadata accessor for SunriseSunsetDetailPreprocessedDataModel(0);
  sub_100792010();
  v8 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  v9 = sub_1000BA294(&qword_100C05A90);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  *(_QWORD *)(a4 + 144) = Cache.init(_:)(v8);
  sub_10003C800(&v11, a4 + 96);
  sub_10003C800(&v14, a4 + 56);
  sub_10003C800(&v17, a4 + 16);
  return a4;
}

_QWORD *sub_10079156C(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  _OWORD *v18;
  __int128 v19;
  __int128 v21;
  uint64_t v22;
  _UNKNOWN **v23;
  __int128 v24;
  uint64_t v25;
  _UNKNOWN **v26;
  __int128 v27;
  ValueMetadata *v28;
  _UNKNOWN **v29;

  v28 = &type metadata for SunriseSunsetDetailTracker;
  v29 = &off_100B95E20;
  v18 = (_OWORD *)swift_allocObject(&unk_100B903D0, 64, 7);
  *(_QWORD *)&v27 = v18;
  v19 = a3[1];
  v18[1] = *a3;
  v18[2] = v19;
  v18[3] = a3[2];
  v25 = type metadata accessor for SunriseSunsetDetailDataProcessor();
  v26 = &off_100B5FFC8;
  *(_QWORD *)&v24 = a4;
  v22 = v25;
  v23 = &off_100B5FFB0;
  *(_QWORD *)&v21 = a5;
  sub_100120350();
  a10[23] = OS_os_log.init(subsystem:category:)(0xD000000000000011, 0x80000001009F0D20, 0xD00000000000001DLL, 0x8000000100A13850);
  a10[2] = a1;
  a10[3] = a2;
  sub_10003C800(&v27, (uint64_t)(a10 + 4));
  sub_10003C800(&v24, (uint64_t)(a10 + 9));
  sub_10003C800(&v21, (uint64_t)(a10 + 14));
  a10[19] = a6;
  a10[20] = a7;
  a10[21] = a8;
  a10[22] = a9;
  return a10;
}

_QWORD *sub_1007916B0(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _OWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  ValueWitnessTable *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  _BYTE v36[48];
  uint64_t v37;
  _QWORD v38[3];
  uint64_t v39;
  _UNKNOWN **v40;
  _QWORD v41[5];
  _QWORD v42[5];

  v37 = a8;
  v42[3] = &type metadata for SunriseSunsetDetailTracker;
  v42[4] = &off_100B95E20;
  v16 = (_OWORD *)swift_allocObject(&unk_100B903D0, 64, 7);
  v42[0] = v16;
  v17 = a3[1];
  v16[1] = *a3;
  v16[2] = v17;
  v16[3] = a3[2];
  v18 = type metadata accessor for SunriseSunsetDetailDataProcessor();
  v41[3] = v18;
  v41[4] = &off_100B5FFC8;
  v41[0] = a4;
  v39 = v18;
  v40 = &off_100B5FFB0;
  v38[0] = a5;
  v19 = type metadata accessor for SunriseSunsetDetailInteractor();
  v20 = (_QWORD *)swift_allocObject(v19, 192, 7);
  v21 = sub_100068EB4((uint64_t)v42, (uint64_t)&type metadata for SunriseSunsetDetailTracker);
  __chkstk_darwin(v21);
  v23 = (_OWORD *)((char *)&v38[-1] - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  ((void (*)(uint64_t, uint64_t *))v24->initializeWithCopy)((uint64_t)v23, v25);
  v26 = sub_100068EB4((uint64_t)v41, v18);
  __chkstk_darwin(v26);
  v28 = (uint64_t *)&v36[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t *))(v29 + 16))(v28);
  v30 = sub_100068EB4((uint64_t)v38, v39);
  __chkstk_darwin(v30);
  v32 = (uint64_t *)&v36[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t *))(v33 + 16))(v32);
  v34 = sub_10079156C(a1, a2, v23, *v28, *v32, a6, a7, v37, a9, v20);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v38);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v41);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v42);
  return v34;
}

uint64_t sub_1007918C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v17 = (_QWORD *)(a9 + OBJC_IVAR____TtC7Weather35SunriseSunsetDetailViewModelFactory_chartViewModelFactory);
  v17[3] = type metadata accessor for SunriseSunsetDetailChartViewModelFactory(0);
  v17[4] = &off_100B6BDC0;
  *v17 = a2;
  v18 = (_QWORD *)(a9 + OBJC_IVAR____TtC7Weather35SunriseSunsetDetailViewModelFactory_viewDataCache);
  v18[3] = type metadata accessor for SunriseSunsetDetailViewDataCache();
  v18[4] = &off_100B77F60;
  *v18 = a3;
  v19 = (_QWORD *)(a9 + OBJC_IVAR____TtC7Weather35SunriseSunsetDetailViewModelFactory_preprocessedDataProvider);
  v19[3] = type metadata accessor for SunriseSunsetDetailDataProcessor();
  v19[4] = &off_100B5FFB0;
  *v19 = a4;
  v20 = a9 + OBJC_IVAR____TtC7Weather35SunriseSunsetDetailViewModelFactory_daylightStringBuilder;
  *(_QWORD *)(v20 + 24) = &type metadata for DaylightStringBuilder;
  *(_QWORD *)(v20 + 32) = sub_100792050();
  v21 = (_QWORD *)(a9 + OBJC_IVAR____TtC7Weather35SunriseSunsetDetailViewModelFactory_sunElevationCalculator);
  v21[3] = type metadata accessor for SunElevationCalculator();
  v21[4] = &off_100B978C8;
  *v21 = a5;
  v22 = (_QWORD *)(a9 + OBJC_IVAR____TtC7Weather35SunriseSunsetDetailViewModelFactory_sunriseSunsetTableViewModelFactory);
  v22[3] = type metadata accessor for SunriseSunsetTableViewModelFactory(0);
  v22[4] = &off_100B78138;
  v23 = sub_10005F164(v22);
  sub_10079208C(a6, (uint64_t)v23);
  v24 = (_QWORD *)(a9
                 + OBJC_IVAR____TtC7Weather35SunriseSunsetDetailViewModelFactory_newsArticleComponentViewModelFactory);
  v24[3] = type metadata accessor for NewsArticleComponentViewModelFactory();
  v24[4] = &off_100B7D058;
  *v24 = a7;
  v25 = a9 + OBJC_IVAR____TtC7Weather35SunriseSunsetDetailViewModelFactory_sunriseSunsetEventCalculator;
  v26 = type metadata accessor for SunriseSunsetEventCalculator(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v25, a1, v26);
  *(_BYTE *)(a9 + OBJC_IVAR____TtC7Weather35SunriseSunsetDetailViewModelFactory_isDemoPresetActive) = a8;
  return a9;
}

uint64_t sub_100791A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v47[12];
  int v48;
  _QWORD v49[3];
  uint64_t v50;
  _UNKNOWN **v51;
  _QWORD v52[3];
  uint64_t v53;
  _UNKNOWN **v54;
  _QWORD v55[3];
  uint64_t v56;
  _UNKNOWN **v57;
  _QWORD v58[3];
  ValueMetadata *v59;
  unint64_t v60;
  _QWORD v61[3];
  uint64_t v62;
  _UNKNOWN **v63;
  _QWORD v64[3];
  uint64_t v65;
  _UNKNOWN **v66;
  _QWORD v67[6];

  v48 = a8;
  v15 = type metadata accessor for SunriseSunsetDetailChartViewModelFactory(0);
  v67[3] = v15;
  v67[4] = &off_100B6BDC0;
  v67[0] = a2;
  v65 = type metadata accessor for SunriseSunsetDetailViewDataCache();
  v66 = &off_100B77F60;
  v64[0] = a3;
  v62 = type metadata accessor for SunriseSunsetDetailDataProcessor();
  v63 = &off_100B5FFB0;
  v61[0] = a4;
  v59 = &type metadata for DaylightStringBuilder;
  v60 = sub_100792050();
  v56 = type metadata accessor for SunElevationCalculator();
  v57 = &off_100B978C8;
  v55[0] = a5;
  v53 = type metadata accessor for SunriseSunsetTableViewModelFactory(0);
  v54 = &off_100B78138;
  v16 = sub_10005F164(v52);
  sub_10079208C(a6, (uint64_t)v16);
  v50 = type metadata accessor for NewsArticleComponentViewModelFactory();
  v51 = &off_100B7D058;
  v49[0] = a7;
  v17 = type metadata accessor for SunriseSunsetDetailViewModelFactory(0);
  v18 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v19 = sub_100068EB4((uint64_t)v67, v15);
  __chkstk_darwin(v19);
  v21 = (uint64_t *)&v47[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  v23 = sub_100068EB4((uint64_t)v64, v65);
  __chkstk_darwin(v23);
  v25 = (uint64_t *)&v47[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  v27 = sub_100068EB4((uint64_t)v61, v62);
  __chkstk_darwin(v27);
  v29 = (uint64_t *)&v47[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t *))(v30 + 16))(v29);
  v31 = sub_100068EB4((uint64_t)v58, (uint64_t)v59);
  __chkstk_darwin(v31);
  (*(void (**)(void))(v32 + 16))();
  v33 = sub_100068EB4((uint64_t)v55, v56);
  __chkstk_darwin(v33);
  v35 = (uint64_t *)&v47[-((v34 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t *))(v36 + 16))(v35);
  v37 = sub_100068EB4((uint64_t)v52, v53);
  __chkstk_darwin(v37);
  v39 = &v47[-((v38 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *))(v40 + 16))(v39);
  v41 = sub_100068EB4((uint64_t)v49, v50);
  __chkstk_darwin(v41);
  v43 = (uint64_t *)&v47[-((v42 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t *))(v44 + 16))(v43);
  v45 = sub_1007918C8(a1, *v21, *v25, *v29, *v35, (uint64_t)v39, *v43, v48, v18);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v49);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v52);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v55);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v58);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v61);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v64);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v67);
  return v45;
}

uint64_t sub_100791E30(const void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  ValueWitnessTable *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[80];
  _QWORD v27[3];
  uint64_t v28;
  _UNKNOWN **v29;
  _QWORD v30[5];
  _QWORD v31[5];

  v6 = *a3;
  v31[3] = &type metadata for SunriseSunsetMonthlyViewModelFactory;
  v31[4] = &off_100B83640;
  v31[0] = swift_allocObject(&unk_100B903A8, 96, 7);
  memcpy((void *)(v31[0] + 16), a1, 0x50uLL);
  v7 = type metadata accessor for SunElevationCalculator();
  v30[3] = v7;
  v30[4] = &off_100B978C8;
  v30[0] = a2;
  v28 = v6;
  v29 = &off_100B77F60;
  v27[0] = a3;
  v8 = type metadata accessor for SunriseSunsetDetailDataProcessor();
  v9 = swift_allocObject(v8, 152, 7);
  v10 = sub_100068EB4((uint64_t)v31, (uint64_t)&type metadata for SunriseSunsetMonthlyViewModelFactory);
  __chkstk_darwin(v10);
  v12 = (char *)&v27[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v13->initializeWithCopy)((uint64_t)v12, v14);
  v15 = sub_100068EB4((uint64_t)v30, v7);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)&v25[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  v19 = sub_100068EB4((uint64_t)v27, v28);
  __chkstk_darwin(v19);
  v21 = (uint64_t *)&v25[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  v23 = sub_1007913F0(v12, *v17, *v21, v9);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v27);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v30);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v31);
  return v23;
}

unint64_t sub_100792010()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C05A88;
  if (!qword_100C05A88)
  {
    v1 = type metadata accessor for SunriseSunsetDetailDataProcessor.ProcessingKey(255);
    result = swift_getWitnessTable(&unk_10097F470, v1);
    atomic_store(result, (unint64_t *)&qword_100C05A88);
  }
  return result;
}

unint64_t sub_100792050()
{
  unint64_t result;

  result = qword_100C05A98;
  if (!qword_100C05A98)
  {
    result = swift_getWitnessTable(&unk_1009C5360, &type metadata for DaylightStringBuilder);
    atomic_store(result, (unint64_t *)&qword_100C05A98);
  }
  return result;
}

uint64_t sub_10079208C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SunriseSunsetTableViewModelFactory(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1007920D0()
{
  uint64_t v0;

  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100792100@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = *(_QWORD *)(v1 + 56);
  sub_100043CA8(v1 + 16, (uint64_t)(a1 + 2));
  v4 = *(_QWORD *)(v1 + 64);
  swift_retain();
  swift_retain();
  v5 = sub_1000BA294(&qword_100BC4480);
  v6 = sub_100792194();
  result = ObservedObject.init(wrappedValue:)(v3, v5, v6);
  *a1 = result;
  a1[1] = v8;
  a1[7] = v4;
  return result;
}

uint64_t type metadata accessor for ConditionDetailModule()
{
  return objc_opt_self(_TtC7Weather21ConditionDetailModule);
}

unint64_t sub_100792194()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC4488;
  if (!qword_100BC4488)
  {
    v1 = sub_100075EB0(&qword_100BC4480);
    result = swift_getWitnessTable(&unk_1009D9950, v1);
    atomic_store(result, (unint64_t *)&qword_100BC4488);
  }
  return result;
}

double sub_1007921D8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>)
{
  id v8;
  double result;
  __int128 v10;
  _OWORD v11[2];
  char v12;

  v8 = objc_msgSend((id)objc_opt_self(UIBezierPath), "bezierPathWithRoundedRect:byRoundingCorners:cornerRadii:", a1, a3, a4, a5, a6, a7, a7);
  Path.init(_:)(v11, objc_msgSend(v8, "CGPath"));

  result = *(double *)v11;
  v10 = v11[1];
  *(_OWORD *)a2 = v11[0];
  *(_OWORD *)(a2 + 16) = v10;
  *(_BYTE *)(a2 + 32) = v12;
  return result;
}

double sub_1007922A0@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t v5;
  double result;
  __int128 v8;
  _OWORD v9[2];
  char v10;

  sub_1007921D8(*(_QWORD *)(v5 + 8), (uint64_t)v9, a2, a3, a4, a5, *(double *)v5);
  result = *(double *)v9;
  v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 32) = v10;
  return result;
}

void sub_1007922F0()
{
  LocationSearchEntityFromStringResolver.init()();
}

uint64_t sub_1007922FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100793278();
  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10079234C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100793278();
  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10079239C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100793278();
  return Shape.body.getter(a1, v2);
}

uint64_t sub_1007923D4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t WitnessTable;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = v3;
  v40 = a1;
  v41 = a3;
  v36 = a2[2];
  v6 = v36;
  __chkstk_darwin(a1);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for EnvironmentValues(0);
  v33 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a2[3];
  v34 = a2[4];
  v35 = v11;
  v12 = type metadata accessor for OverlayValueViewModifier(0, v6, v11, v34);
  v39 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v30 - v13;
  WitnessTable = swift_getWitnessTable(&unk_1009C9C58, a2);
  v16 = type metadata accessor for _ViewModifier_Content(255, a2, WitnessTable);
  v17 = type metadata accessor for ModifiedContent(0, v16, v12);
  v38 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v20);
  v32 = (char *)&v30 - v22;
  v23 = v4[1];
  v31 = *v4;
  sub_1007A635C(v21);
  swift_getAtKeyPath(v10, v4[2]);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v37);
  sub_100792680(v31, v23, (uint64_t)v8, v4[3], v4[4], v36, v35, v34, v14);
  swift_retain();
  v24 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v16);
  View.modifier<A>(_:)(v14, v16, v12, v24);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v14, v12);
  v25 = swift_getWitnessTable(&unk_1009C9AB8, v12);
  v42 = v24;
  v43 = v25;
  v26 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v17);
  v27 = (uint64_t)v32;
  sub_1000B2074(v19, v17, v26);
  v28 = *(void (**)(char *, uint64_t))(v38 + 8);
  v28(v19, v17);
  sub_1000B1100(v27, v17, v41);
  return ((uint64_t (*)(uint64_t, uint64_t))v28)(v27, v17);
}

uint64_t sub_100792680@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  uint64_t v14;
  uint64_t result;
  char *v16;

  *(_QWORD *)a9 = a1;
  *((_QWORD *)a9 + 1) = a2;
  v14 = type metadata accessor for OverlayValueViewModifier(0, a6, a7, a8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(&a9[*(int *)(v14 + 44)], a3, a6);
  v16 = &a9[*(int *)(v14 + 48)];
  *(_QWORD *)v16 = a4;
  *((_QWORD *)v16 + 1) = a5;
  return result;
}

uint64_t sub_100792704@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t WitnessTable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  v24 = a1;
  v25 = a3;
  WitnessTable = swift_getWitnessTable(&unk_1009C9AB8, a2);
  v6 = type metadata accessor for _ViewModifier_Content(255, a2, WitnessTable);
  v7 = a2[3];
  v8 = a2[4];
  v22 = type metadata accessor for _OverlayModifier(255, v7, v8);
  v9 = type metadata accessor for ModifiedContent(0, v6, v22);
  v23 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v22 - v13;
  v15 = *v3;
  v16 = v3[1];
  v27 = a2[2];
  v28 = v7;
  v29 = v8;
  v30 = v3;
  v17 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v6);
  View.overlay<A>(alignment:content:)(v15, v16, sub_10079316C, v26, v6, v7, v17, v8);
  v18 = swift_getWitnessTable(&protocol conformance descriptor for _OverlayModifier<A>, v22);
  v31 = v17;
  v32 = v18;
  v19 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v9);
  sub_1000B2074(v11, v9, v19);
  v20 = *(void (**)(char *, uint64_t))(v23 + 8);
  v20(v11, v9);
  sub_1000B1100((uint64_t)v14, v9, v25);
  return ((uint64_t (*)(char *, uint64_t))v20)(v14, v9);
}

uint64_t sub_1007928AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v8 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v20 - v12;
  v17 = type metadata accessor for OverlayValueViewModifier(0, v14, v15, v16);
  (*(void (**)(uint64_t))(a1 + *(int *)(v17 + 48)))(a1 + *(int *)(v17 + 44));
  sub_1000B2074(v10, a2, a3);
  v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v10, a2);
  sub_1000B1100((uint64_t)v13, a2, a4);
  return ((uint64_t (*)(char *, uint64_t))v18)(v13, a2);
}

uint64_t sub_1007929A0(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  void (*v18)(char *, _QWORD *, uint64_t);
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v10 = type metadata accessor for OverlayValueViewModifier(0, a3, a4, a6);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v22 - v15;
  v17 = static Alignment.== infix(_:_:)(*a1);
  v18 = *(void (**)(char *, _QWORD *, uint64_t))(v11 + 16);
  v18(v16, a1, v10);
  v18(v13, a2, v10);
  if ((v17 & 1) != 0)
    v19 = dispatch thunk of static Equatable.== infix(_:_:)(&v16[*(int *)(v10 + 44)], &v13[*(int *)(v10 + 44)], a3, a5);
  else
    v19 = 0;
  v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v13, v10);
  v20(v16, v10);
  return v19 & 1;
}

uint64_t sub_100792AC8(_QWORD *a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  return sub_1007929A0(a1, a2, a3[2], a3[3], *(_QWORD *)(a4 - 8), a3[4]);
}

uint64_t type metadata accessor for OverlayValueViewModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OverlayValueViewModifier);
}

uint64_t sub_100792AE8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1009C9A90;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 0, 3, v4, a1 + 40);
    return 0;
  }
  return result;
}

uint64_t *sub_100792B6C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64) + 7;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v6 + ((v5 + 16) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v9 = ((unint64_t)a1 + v5 + 16) & ~v5;
    v10 = ((unint64_t)a2 + v5 + 16) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v9, v10);
    v11 = (_QWORD *)((v6 + v10) & 0xFFFFFFFFFFFFFFF8);
    v12 = v11[1];
    v13 = (_QWORD *)((v6 + v9) & 0xFFFFFFFFFFFFFFF8);
    *v13 = *v11;
    v13[1] = v12;
  }
  swift_retain(v12);
  return v3;
}

uint64_t sub_100792C40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = (a1 + *(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  (*(void (**)(unint64_t))(v2 + 8))(v3);
  return swift_release(*(_QWORD *)(((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8) + 8));
}

_OWORD *sub_100792C90(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 16) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 16) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (_QWORD *)((v8 + v6) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)((v8 + v7) & 0xFFFFFFFFFFFFFFF8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  swift_retain(v11);
  return a1;
}

_QWORD *sub_100792D14(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 16) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 16) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (_QWORD *)((v8 + v6) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)((v8 + v7) & 0xFFFFFFFFFFFFFFF8);
  v11 = v10[1];
  v12 = v9[1];
  *v9 = *v10;
  v9[1] = v11;
  swift_retain(v11);
  swift_release(v12);
  return a1;
}

_OWORD *sub_100792DAC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 16) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 16) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  *(_OWORD *)((*(_QWORD *)(v4 + 64) + 7 + v6) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v4 + 64) + 7 + v7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_OWORD *sub_100792E2C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 16) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 16) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (v8 + v6) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)(v9 + 8);
  *(_OWORD *)v9 = *(_OWORD *)((v8 + v7) & 0xFFFFFFFFFFFFF8);
  swift_release(v10);
  return a1;
}

uint64_t sub_100792EB4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = *(_QWORD *)(v5 + 64) + 7;
  if (v7 >= a2)
  {
    v14 = (a1 + v8 + 16) & ~v8;
    if (v6 < 0x7FFFFFFF)
    {
      v15 = *(_QWORD *)((v9 + v14) & 0xFFFFFFFFFFFFF8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
    else
    {
      return _s7Weather24LocationCompositionStateOwet_0(v14, v6, v4);
    }
  }
  else
  {
    if (((((v9 + ((v8 + 16) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v10 = 2;
    else
      v10 = a2 - v7 + 1;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_100792F40 + 4 * byte_1009C9A20[v12]))();
  }
}

void sub_100792FCC(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 16) & ~(_DWORD)v7)) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
  }
  if (a2 > v6)
  {
    if (((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 16) & ~(_DWORD)v7)) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      v11 = ~v6 + a2;
      bzero(a1, ((*(_QWORD *)(v5 + 64) + 7 + ((v7 + 16) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 16);
      *a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

void sub_1007930CC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  *(_BYTE *)(v6 + v7) = 0;
  if ((_DWORD)a1)
  {
    v8 = (v6 + v5 + 16) & a4;
    if (a2 < 0x7FFFFFFF)
    {
      v9 = (_QWORD *)((v4 + v8) & 0xFFFFFFFFFFFFFFF8);
      if ((a1 & 0x80000000) != 0)
      {
        v10 = a1 ^ 0x80000000;
        v9[1] = 0;
      }
      else
      {
        v10 = (a1 - 1);
      }
      *v9 = v10;
    }
    else
    {
      _s7Weather24LocationCompositionStateOwst_0(v8, a1, a2, a3);
    }
  }
}

uint64_t sub_100793160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1007939A0(a1, a2, a3, (uint64_t)&unk_100AC0CDC);
}

uint64_t sub_10079316C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1007928AC(v1[5], v1[3], v1[4], a1);
}

void sub_100793178(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t WitnessTable;
  uint64_t v5;
  uint64_t v6;

  v1 = a1[1];
  v2 = a1[2];
  v3 = type metadata accessor for OverlayValueViewModifier(255, *a1, v1, v2);
  WitnessTable = swift_getWitnessTable(&unk_1009C9AB8, v3);
  v5 = type metadata accessor for _ViewModifier_Content(255, v3, WitnessTable);
  v6 = type metadata accessor for _OverlayModifier(255, v1, v2);
  type metadata accessor for ModifiedContent(255, v5, v6);
  swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v5);
  swift_getWitnessTable(&protocol conformance descriptor for _OverlayModifier<A>, v6);
  sub_1000BCA94((uint64_t)&protocol conformance descriptor for <> ModifiedContent<A, B>);
  sub_100099960();
}

unint64_t sub_100793234()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C05BD0;
  if (!qword_100C05BD0)
  {
    v1 = sub_100075EB0(&qword_100C05BD8);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ShapeView<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C05BD0);
  }
  return result;
}

unint64_t sub_100793278()
{
  unint64_t result;

  result = qword_100C05BF0;
  if (!qword_100C05BF0)
  {
    result = swift_getWitnessTable(&unk_1009C9BC4, &type metadata for RoundedRectangle);
    atomic_store(result, (unint64_t *)&qword_100C05BF0);
  }
  return result;
}

void sub_1007932B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1009C9A90;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for () + 64;
  sub_100793940(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 0, 4, v4, a1 + 40);
  }
}

_QWORD *sub_100793344(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v15 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[4];
    v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 32) = v5;
    v7 = *(int *)(a3 + 52);
    v8 = (_QWORD *)(a1 + v7);
    v9 = (uint64_t *)((char *)a2 + v7);
    swift_retain();
    swift_retain();
    v10 = sub_1000BA294(&qword_100C0A4B0);
    if (swift_getEnumCaseMultiPayload(v9) == 1)
    {
      v11 = type metadata accessor for EnvironmentValues(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
      v12 = v8;
      v13 = v10;
      v14 = 1;
    }
    else
    {
      *v8 = *v9;
      swift_retain();
      v12 = v8;
      v13 = v10;
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v13, v14);
  }
  return v3;
}

double sub_100793434(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  swift_release();
  swift_release();
  v4 = a1 + *(int *)(a2 + 52);
  sub_1000BA294(&qword_100C0A4B0);
  if (swift_getEnumCaseMultiPayload(v4) == 1)
  {
    v5 = type metadata accessor for EnvironmentValues(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

uint64_t sub_1007934B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = v4;
  v6 = *(int *)(a3 + 52);
  v7 = (_QWORD *)(a1 + v6);
  v8 = (_QWORD *)(a2 + v6);
  swift_retain();
  swift_retain();
  v9 = sub_1000BA294(&qword_100C0A4B0);
  if (swift_getEnumCaseMultiPayload(v8) == 1)
  {
    v10 = type metadata accessor for EnvironmentValues(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, v8, v10);
    v11 = 1;
  }
  else
  {
    *v7 = *v8;
    swift_retain();
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v9, v11);
  return a1;
}

_QWORD *sub_100793570(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  v6 = a2[4];
  a1[3] = a2[3];
  a1[4] = v6;
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 52);
    v8 = (_QWORD *)((char *)a1 + v7);
    v9 = (_QWORD *)((char *)a2 + v7);
    sub_100793664((uint64_t)a1 + v7);
    v10 = sub_1000BA294(&qword_100C0A4B0);
    if (swift_getEnumCaseMultiPayload(v9) == 1)
    {
      v11 = type metadata accessor for EnvironmentValues(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
      v12 = 1;
    }
    else
    {
      *v8 = *v9;
      swift_retain();
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v10, v12);
  }
  return a1;
}

uint64_t sub_100793664(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100C0A4B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1007936A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = v4;
  v6 = *(int *)(a3 + 52);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_1000BA294(&qword_100C0A4B0);
  if (swift_getEnumCaseMultiPayload(v8) == 1)
  {
    v10 = type metadata accessor for EnvironmentValues(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100793754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 52);
    v7 = (void *)(a1 + v6);
    v8 = (const void *)(a2 + v6);
    sub_100793664(a1 + v6);
    v9 = sub_1000BA294(&qword_100C0A4B0);
    if (swift_getEnumCaseMultiPayload(v8) == 1)
    {
      v10 = type metadata accessor for EnvironmentValues(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
      swift_storeEnumTagMultiPayload(v7, v9, 1);
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100793834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100793840);
}

uint64_t sub_100793840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000BA294(qword_100C05BF8);
    return _s7Weather24LocationCompositionStateOwet_0(a1 + *(int *)(a3 + 52), a2, v8);
  }
}

uint64_t sub_1007938B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1007938C4);
}

uint64_t sub_1007938C4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_1000BA294(qword_100C05BF8);
    return _s7Weather24LocationCompositionStateOwst_0(v5 + *(int *)(a4 + 52), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for OverlayEnvironmentValueViewModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OverlayEnvironmentValueViewModifier);
}

void sub_100793940(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100C05C80)
  {
    v2 = type metadata accessor for EnvironmentValues(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100C05C80);
  }
}

uint64_t sub_100793994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1007939A0(a1, a2, a3, (uint64_t)&unk_100AC0DB0);
}

uint64_t sub_1007939A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 16);
  v7 = v4;
  return swift_getOpaqueTypeConformance2(&v6, a4, 1);
}

void sub_1007939D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t WitnessTable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v0 = sub_1000C3110();
  v4 = type metadata accessor for OverlayEnvironmentValueViewModifier(v0, v1, v2, v3);
  WitnessTable = swift_getWitnessTable(&unk_1009C9C58, v4);
  v6 = type metadata accessor for _ViewModifier_Content(255, v4, WitnessTable);
  v7 = sub_1000C3110();
  v11 = type metadata accessor for OverlayValueViewModifier(v7, v8, v9, v10);
  type metadata accessor for ModifiedContent(255, v6, v11);
  swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v6);
  swift_getWitnessTable(&unk_1009C9AB8, v11);
  sub_1000BCA94((uint64_t)&protocol conformance descriptor for <> ModifiedContent<A, B>);
  sub_100099960();
}

uint64_t sub_100793A80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  sub_1000BA294(&qword_100BC5F60);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100098728();
  v5 = v4 - v3;
  sub_1000BA294(&qword_100BC5F88);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100098728();
  v9 = v8 - v7;
  sub_1000BA294(&qword_100BC5F90);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = v12 - v11;
  sub_1000BA294(&qword_100BC5F98);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  sub_100098728();
  v17 = v16 - v15;
  sub_1000BA294(&qword_100BC5FA0);
  sub_1000B42B0();
  __chkstk_darwin(v18);
  sub_100098728();
  v21 = v20 - v19;
  sub_1000BA294(&qword_100BC5FA8);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  sub_100098728();
  v25 = v24 - v23;
  sub_1000BA294(&qword_100BC5FB0);
  sub_1000B42B0();
  __chkstk_darwin(v26);
  sub_100098728();
  v29 = v28 - v27;
  v30 = type metadata accessor for AppConfigurationState(0);
  v33 = sub_1000BA2E8(v29, v31, v32, v30);
  v34 = type metadata accessor for EnvironmentState(v33);
  v37 = sub_1000BA2E8(v25, v35, v36, v34);
  v38 = type metadata accessor for LocationsState(v37);
  v41 = sub_1000BA2E8(v21, v39, v40, v38);
  v42 = type metadata accessor for NotificationsOptInState(v41);
  v45 = sub_10009D34C(v17, v43, v44, v42);
  Date.init()(v45);
  v46 = type metadata accessor for TimeState(0);
  _s7Weather24LocationCompositionStateOwst_0(v13, 0, 1, v46);
  v47 = type metadata accessor for ViewState(0);
  v50 = sub_1000BA2E8(v9, v48, v49, v47);
  v51 = type metadata accessor for ModalViewState(v50);
  sub_10009D34C(v5, v52, v53, v51);
  v54 = sub_1000DEBAC(0, 3, v29, v25, v21, 0, 0, 0, v17, v13, v9, v5, 0, 0, 0, 0, 0, 0, 0, a1);
  sub_100021A68(v5, &qword_100BC5F60);
  sub_100021A68(v9, &qword_100BC5F88);
  sub_100021A68(v13, &qword_100BC5F90);
  sub_100021A68(v17, &qword_100BC5F98);
  sub_100021A68(v21, &qword_100BC5FA0);
  sub_100021A68(v25, &qword_100BC5FA8);
  sub_100021A68(v29, &qword_100BC5FB0);
  return v54;
}

uint64_t sub_100793D20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[5];
  _QWORD v43[3];
  uint64_t v44;
  uint64_t v45;

  v40 = a4;
  v41 = a5;
  v37 = a2;
  v38 = a3;
  v39 = type metadata accessor for ConditionDetailChartHeaderStringModel(0);
  v32 = *(_QWORD *)(v39 - 8);
  v6 = v32;
  v7 = __chkstk_darwin(v39);
  v36 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v34 = (char *)&v31 - v9;
  v10 = type metadata accessor for DetailChartCondition(0);
  v33 = *(_QWORD *)(v10 - 8);
  v11 = v33;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v31 - v15;
  sub_1000BCAA0();
  sub_100793F7C((uint64_t)v16, (uint64_t)v43);
  v17 = *(void (**)(char *, uint64_t))(v11 + 8);
  sub_1000BB5B4();
  sub_1000BCAA0();
  v18 = sub_10079411C((uint64_t)v16);
  LOBYTE(v11) = v18;
  v35 = v18;
  sub_1000BB5B4();
  v19 = v44;
  v20 = v45;
  sub_1000DB418(v43, v44);
  sub_100882E78(v11);
  v21 = v34;
  dispatch thunk of ConditionDetailChartHeaderStringBuilderType.makeModel(from:units:extrema:secondaryValueExtrema:style:)(a1, v37, v38, v40, v42, v19, v20);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v42);
  v22 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v23 = v36;
  v24 = v39;
  v22(v36, v21, v39);
  sub_1000BCAA0();
  (*(void (**)(char *, _QWORD, uint64_t))(v33 + 104))(v14, enum case for DetailChartCondition.chanceOfRain(_:), v10);
  v25 = sub_1007942D0();
  LOBYTE(v19) = dispatch thunk of static Equatable.== infix(_:_:)(v16, v14, v10, v25);
  v17(v14, v10);
  sub_1000BB5B4();
  v26 = v32;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v21, v24);
  v27 = *(void (**)(uint64_t, char *, uint64_t))(v26 + 32);
  v28 = v41;
  v27(v41, v23, v24);
  v29 = type metadata accessor for ConditionDetailChartHeaderViewModel(0);
  *(_BYTE *)(v28 + *(int *)(v29 + 20)) = v35;
  *(_BYTE *)(v28 + *(int *)(v29 + 24)) = (v19 & 1) == 0;
  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v43);
}

uint64_t sub_100793F7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v5 = type metadata accessor for DetailChartCondition(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  v9 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v8, v5);
  if (v9 == enum case for DetailChartCondition.humidity(_:))
  {
    v10 = v2 + 16;
    return sub_100043CA8(v10, a2);
  }
  if (v9 == enum case for DetailChartCondition.pressure(_:))
  {
    v10 = v2 + 96;
    return sub_100043CA8(v10, a2);
  }
  if (v9 == enum case for DetailChartCondition.precipitationTotal(_:))
  {
    v10 = v2 + 56;
    return sub_100043CA8(v10, a2);
  }
  if (v9 == enum case for DetailChartCondition.temperature(_:))
  {
    v10 = v2 + 136;
    return sub_100043CA8(v10, a2);
  }
  if (v9 == enum case for DetailChartCondition.temperatureFeelsLike(_:))
  {
    v10 = v2 + 176;
    return sub_100043CA8(v10, a2);
  }
  if (v9 == enum case for DetailChartCondition.uvIndex(_:))
  {
    v10 = v2 + 216;
    return sub_100043CA8(v10, a2);
  }
  if (v9 == enum case for DetailChartCondition.visibility(_:))
  {
    v10 = v2 + 256;
    return sub_100043CA8(v10, a2);
  }
  if (v9 == enum case for DetailChartCondition.wind(_:))
  {
    v10 = v2 + 296;
    return sub_100043CA8(v10, a2);
  }
  if (v9 == enum case for DetailChartCondition.chanceOfRain(_:))
  {
    v10 = v2 + 336;
    return sub_100043CA8(v10, a2);
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v5, v5);
  __break(1u);
  return result;
}

uint64_t sub_10079411C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v9;

  v2 = type metadata accessor for DetailChartCondition(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for DetailChartCondition.temperature(_:)
    || v6 == enum case for DetailChartCondition.temperatureFeelsLike(_:))
  {
    return 2;
  }
  if (v6 == enum case for DetailChartCondition.uvIndex(_:))
    return 4;
  if (v6 == enum case for DetailChartCondition.visibility(_:))
    return 3;
  if (v6 == enum case for DetailChartCondition.chanceOfRain(_:))
    return 1;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return 0;
}

_QWORD *sub_100794234()
{
  _QWORD *v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 2);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 7);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 12);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 17);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 22);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 27);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 32);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 37);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 42);
  return v0;
}

uint64_t sub_100794290()
{
  uint64_t v0;

  sub_100794234();
  return swift_deallocClassInstance(v0, 376, 7);
}

uint64_t type metadata accessor for ConditionDetailChartHeaderViewModelFactory()
{
  return objc_opt_self(_TtC7Weather42ConditionDetailChartHeaderViewModelFactory);
}

unint64_t sub_1007942D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC35A0;
  if (!qword_100BC35A0)
  {
    v1 = type metadata accessor for DetailChartCondition(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DetailChartCondition, v1);
    atomic_store(result, (unint64_t *)&qword_100BC35A0);
  }
  return result;
}

uint64_t sub_100794310(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t);
  uint64_t (*v83)(uint64_t);
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int EnumCaseMultiPayload;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;

  v173 = a2;
  sub_1000BA294(&qword_100BC5F50);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100088FDC();
  v169 = v4;
  sub_1000BA294(&qword_100BC5F48);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100088FDC();
  v168 = v6;
  v172 = type metadata accessor for LocationPreviewModalViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_1000986FC();
  v165 = v8;
  sub_10009D2A4();
  __chkstk_darwin(v9);
  v170 = (uint64_t)&v164 - v10;
  v180 = type metadata accessor for LocationPreviewViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_1000986FC();
  v166 = v12;
  sub_10009D2A4();
  __chkstk_darwin(v13);
  v171 = (char *)&v164 - v14;
  sub_1000BA294(&qword_100BC5F60);
  sub_1000B42B0();
  __chkstk_darwin(v15);
  sub_100088FDC();
  v176 = v16;
  sub_1000BA294(&qword_100BC5F88);
  sub_1000B42B0();
  __chkstk_darwin(v17);
  sub_100088FDC();
  v175 = v18;
  sub_1000BA294(&qword_100BC5F90);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  sub_100088FDC();
  v174 = v20;
  sub_1000BA294(&qword_100BC5F98);
  sub_1000B42B0();
  __chkstk_darwin(v21);
  sub_100088FDC();
  v177 = v22;
  sub_1000BA294(&qword_100BC5FA0);
  sub_1000B42B0();
  __chkstk_darwin(v23);
  sub_100088FDC();
  v179 = v24;
  sub_1000BA294(&qword_100BC5FA8);
  sub_1000B42B0();
  __chkstk_darwin(v25);
  sub_100088FDC();
  v178 = v26;
  sub_1000BA294(&qword_100BC5FB0);
  sub_1000B42B0();
  __chkstk_darwin(v27);
  sub_100088FDC();
  v181 = v28;
  type metadata accessor for AveragesDetailViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v29);
  sub_1000986FC();
  v167 = v30;
  sub_10009D2A4();
  __chkstk_darwin(v31);
  v164 = (uint64_t)&v164 - v32;
  sub_10009D2A4();
  __chkstk_darwin(v33);
  v35 = (char *)&v164 - v34;
  v36 = type metadata accessor for ModalViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v37);
  v39 = (char *)&v164 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v42 = (char *)&v164 - v41;
  __chkstk_darwin(v43);
  v45 = (char *)&v164 - v44;
  v46 = type metadata accessor for ModalViewState.LocationDetailModal(0);
  sub_1000B42B0();
  __chkstk_darwin(v47);
  v49 = (char *)&v164 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50);
  v52 = (char *)&v164 - v51;
  v182 = a1;
  v53 = a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_modalView;
  sub_100080C0C(v53, (uint64_t)v45, type metadata accessor for ModalViewState);
  if (sub_10009D644((uint64_t)v45) != 5)
  {
    v83 = type metadata accessor for ModalViewState;
    v84 = (uint64_t)v45;
    goto LABEL_6;
  }
  sub_10007802C((uint64_t)v45, (uint64_t)v52, type metadata accessor for ModalViewState.LocationDetailModal);
  sub_100080C0C((uint64_t)v52, (uint64_t)v49, type metadata accessor for ModalViewState.LocationDetailModal);
  if (swift_getEnumCaseMultiPayload(v49) != 5)
  {
    sub_1000215BC((uint64_t)v52, type metadata accessor for ModalViewState.LocationDetailModal);
    v84 = (uint64_t)v49;
    v83 = type metadata accessor for ModalViewState.LocationDetailModal;
LABEL_6:
    sub_1000215BC(v84, v83);
    sub_100080C0C(v53, (uint64_t)v42, type metadata accessor for ModalViewState);
    v85 = sub_10009D644((uint64_t)v42);
    v86 = v180;
    if (v85)
    {
      v87 = type metadata accessor for ModalViewState;
      v88 = (uint64_t)v42;
    }
    else
    {
      v52 = v171;
      sub_10007802C((uint64_t)v42, (uint64_t)v171, type metadata accessor for LocationPreviewViewState);
      v89 = v170;
      sub_100080C0C((uint64_t)&v52[*(int *)(v86 + 20)], v170, type metadata accessor for LocationPreviewModalViewState);
      v90 = v172;
      if (swift_getEnumCaseMultiPayload(v89) == 7)
      {
        v91 = v164;
        sub_10007802C(v89, v164, type metadata accessor for AveragesDetailViewState);
        v92 = sub_1000C08E4();
        v93 = sub_1000C2DE8(v92);
        v96 = sub_1000B4474(v178, v94, v95, v93);
        v99 = sub_1000B49D8(v179, v97, v98, v96);
        v100 = v177;
        v103 = sub_1000B4458(v177, v101, v102, v99);
        v104 = v174;
        v107 = sub_1000CC9E4(v174, v105, v106, v103);
        sub_1000C61B0(v107);
        v108 = type metadata accessor for PreviewLocation(0);
        v109 = v168;
        sub_10009D34C(v168, v110, v111, v108);
        v112 = v169;
        sub_100794D64(v173, v169);
        swift_storeEnumTagMultiPayload(v112, v90, 7);
        _s7Weather24LocationCompositionStateOwst_0(v112, 0, 1, v90);
        v113 = v176;
        sub_1003804CC(v109, v112, v176);
        sub_100021A14(v112, &qword_100BC5F50);
        sub_100098898(v114, &qword_100BC5F48);
        swift_storeEnumTagMultiPayload(v113, v36, 0);
        _s7Weather24LocationCompositionStateOwst_0(v113, 0, 1, v36);
        sub_1000DBC6C();
        v115 = v181;
        v76 = sub_10009D358(0, 3, v181, v178, v179, v116, v117, v118, v100, v104, v89, v113, v168, v169, v170, (uint64_t)v171, v172, v173, v174,
                v175);
        sub_1000B3B00(v76, &qword_100BC5F60);
        sub_1000988A0(v119, &qword_100BC5F88);
        sub_1000988B0(v120, &qword_100BC5F90);
        sub_100094EEC(v121, &qword_100BC5F98);
        sub_10004A2CC(v122, &qword_100BC5FA0);
        sub_100098898(v123, &qword_100BC5FA8);
        sub_100021A14(v115, &qword_100BC5FB0);
        sub_1000215BC(v91, type metadata accessor for AveragesDetailViewState);
        v82 = type metadata accessor for LocationPreviewViewState;
        goto LABEL_10;
      }
      sub_1000215BC((uint64_t)v52, type metadata accessor for LocationPreviewViewState);
      v87 = type metadata accessor for LocationPreviewModalViewState;
      v88 = v89;
    }
    sub_1000215BC(v88, v87);
    sub_100080C0C(v53, (uint64_t)v39, type metadata accessor for ModalViewState);
    if (sub_10009D644((uint64_t)v39) == 4)
    {
      v125 = type metadata accessor for ModalViewState.MapViewModal(0);
      v126 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v39, 1, v125);
      if ((_DWORD)v126 != 1)
      {
        v128 = v166;
        sub_10007802C((uint64_t)v39, v166, type metadata accessor for LocationPreviewViewState);
        v129 = v165;
        sub_100080C0C(v128 + *(int *)(v86 + 20), v165, type metadata accessor for LocationPreviewModalViewState);
        v130 = v172;
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v129);
        v76 = v182;
        if (EnumCaseMultiPayload == 7)
        {
          sub_10007802C(v129, v167, type metadata accessor for AveragesDetailViewState);
          v132 = sub_1000C08E4();
          v133 = sub_1000C2DE8(v132);
          v136 = sub_1000B4474(v178, v134, v135, v133);
          v139 = sub_1000B49D8(v179, v137, v138, v136);
          v142 = sub_1000B4458(v177, v140, v141, v139);
          v143 = v174;
          v146 = sub_1000CC9E4(v174, v144, v145, v142);
          v147 = v175;
          _s7Weather24LocationCompositionStateOwst_0(v175, 1, 1, v146);
          v148 = type metadata accessor for PreviewLocation(0);
          v149 = v168;
          sub_10009D34C(v168, v150, v151, v148);
          v152 = v169;
          sub_100794D64(v173, v169);
          swift_storeEnumTagMultiPayload(v152, v130, 7);
          _s7Weather24LocationCompositionStateOwst_0(v152, 0, 1, v130);
          v153 = v176;
          sub_1003804CC(v149, v152, v176);
          sub_1000B3B00(v154, &qword_100BC5F50);
          sub_100021A14(v149, &qword_100BC5F48);
          _s7Weather24LocationCompositionStateOwst_0(v153, 0, 1, v125);
          swift_storeEnumTagMultiPayload(v153, v36, 4);
          _s7Weather24LocationCompositionStateOwst_0(v153, 0, 1, v36);
          v155 = v178;
          v76 = sub_10009D358(0, 3, v181, v178, v179, v156, v157, v158, v177, v143, v147, v153, 0, 0, 0, 0, 0, 0, 0,
                  v76);
          sub_100098898(v76, &qword_100BC5F60);
          sub_1000988B0(v159, &qword_100BC5F88);
          sub_100094EEC(v160, &qword_100BC5F90);
          sub_1000988A0(v161, &qword_100BC5F98);
          sub_10004A2CC(v162, &qword_100BC5FA0);
          sub_100021A14(v155, &qword_100BC5FA8);
          sub_1000B3B00(v163, &qword_100BC5FB0);
          sub_1000215BC(v167, type metadata accessor for AveragesDetailViewState);
          v82 = type metadata accessor for LocationPreviewViewState;
          v124 = v128;
          goto LABEL_11;
        }
        sub_1000215BC(v128, type metadata accessor for LocationPreviewViewState);
        sub_1000215BC(v129, type metadata accessor for LocationPreviewModalViewState);
LABEL_18:
        swift_retain();
        return v76;
      }
      sub_100094EEC(v126, &qword_100BC5F58);
    }
    else
    {
      sub_1000215BC((uint64_t)v39, type metadata accessor for ModalViewState);
    }
    v76 = v182;
    goto LABEL_18;
  }
  sub_10007802C((uint64_t)v49, (uint64_t)v35, type metadata accessor for AveragesDetailViewState);
  v54 = sub_1000C08E4();
  v55 = sub_1000C2DE8(v54);
  v56 = v178;
  v59 = sub_1000B4474(v178, v57, v58, v55);
  v60 = v179;
  v63 = sub_1000B49D8(v179, v61, v62, v59);
  v64 = v177;
  v67 = sub_1000B4458(v177, v65, v66, v63);
  v68 = v174;
  v71 = sub_1000CC9E4(v174, v69, v70, v67);
  sub_1000C61B0(v71);
  v72 = v176;
  sub_100794D64(v173, v176);
  swift_storeEnumTagMultiPayload(v72, v46, 5);
  swift_storeEnumTagMultiPayload(v72, v36, 5);
  _s7Weather24LocationCompositionStateOwst_0(v72, 0, 1, v36);
  sub_1000DBC6C();
  v76 = sub_10009D358(0, 3, v181, v56, v60, v73, v74, v75, v64, v68, (uint64_t)v45, v72, v168, v169, v170, (uint64_t)v171, v172, v173, v174,
          v175);
  sub_100098898(v76, &qword_100BC5F60);
  sub_1000988A0(v77, &qword_100BC5F88);
  sub_1000988B0(v78, &qword_100BC5F90);
  sub_100094EEC(v79, &qword_100BC5F98);
  sub_100021A14(v60, &qword_100BC5FA0);
  sub_1000B3B00(v80, &qword_100BC5FA8);
  sub_10004A2CC(v81, &qword_100BC5FB0);
  sub_1000215BC((uint64_t)v35, type metadata accessor for AveragesDetailViewState);
  v82 = type metadata accessor for ModalViewState.LocationDetailModal;
LABEL_10:
  v124 = (uint64_t)v52;
LABEL_11:
  sub_1000215BC(v124, v82);
  return v76;
}

uint64_t sub_100794D64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  int EnumCaseMultiPayload;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  uint64_t *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int *v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;

  v5 = type metadata accessor for AveragesDetailViewAction(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100080C0C(a1, (uint64_t)v7, v8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7);
  if (!EnumCaseMultiPayload)
  {
    v22 = *v7;
    v23 = type metadata accessor for Location(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(a2, v2, v23);
    v24 = (int *)type metadata accessor for AveragesDetailViewState(0);
    result = sub_100203470(v2 + v24[6], a2 + v24[6]);
    v25 = (uint64_t *)(v2 + v24[7]);
    v17 = *v25;
    v18 = *(_OWORD *)(v25 + 1);
    v19 = v25[3];
    v20 = *((_BYTE *)v25 + 32);
    *(_BYTE *)(a2 + v24[5]) = v22;
LABEL_6:
    v21 = v24[7];
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v26 = type metadata accessor for Location(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(a2, v2, v26);
    v24 = (int *)type metadata accessor for AveragesDetailViewState(0);
    v27 = *(_BYTE *)(v2 + v24[5]);
    v28 = a2 + v24[6];
    v29 = type metadata accessor for DetailHeroChartLollipopPosition(0);
    result = _s7Weather24LocationCompositionStateOwst_0(v28, 1, 1, v29);
    v30 = (uint64_t *)(v2 + v24[7]);
    v17 = *v30;
    v18 = *(_OWORD *)(v30 + 1);
    v19 = v30[3];
    v20 = *((_BYTE *)v30 + 32);
    *(_BYTE *)(a2 + v24[5]) = v27;
    goto LABEL_6;
  }
  v10 = (int *)type metadata accessor for AveragesDetailViewState(0);
  v11 = a2 + v10[6];
  sub_10007802C((uint64_t)v7, v11, type metadata accessor for DetailHeroChartLollipopPosition);
  v12 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a2, v2, v12);
  v13 = *(_BYTE *)(v2 + v10[5]);
  v14 = type metadata accessor for DetailHeroChartLollipopPosition(0);
  result = _s7Weather24LocationCompositionStateOwst_0(v11, 0, 1, v14);
  v16 = (uint64_t *)(v2 + v10[7]);
  v17 = *v16;
  v18 = *(_OWORD *)(v16 + 1);
  v19 = v16[3];
  v20 = *((_BYTE *)v16 + 32);
  *(_BYTE *)(a2 + v10[5]) = v13;
  v21 = v10[7];
LABEL_7:
  v31 = a2 + v21;
  *(_QWORD *)v31 = v17;
  *(_OWORD *)(v31 + 8) = v18;
  *(_QWORD *)(v31 + 24) = v19;
  *(_BYTE *)(v31 + 32) = v20;
  return result;
}

uint64_t sub_100794F80@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];
  _QWORD v28[3];
  uint64_t v29;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100C05E98);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (v29)
  {
    v8 = a1[3];
    v9 = a1[4];
    sub_1000DB418(a1, v8);
    v10 = sub_1000BA294(&qword_100BC4820);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
    if (result)
    {
      v11 = result;
      v12 = sub_100068EB4((uint64_t)v28, v29);
      v13 = __chkstk_darwin(v12);
      v15 = (_QWORD *)((char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *, __n128))(v16 + 16))(v15, v13);
      v17 = *v15;
      v18 = type metadata accessor for ListMenuInteractor();
      v27[3] = v18;
      v27[4] = &off_100B72868;
      v27[0] = v17;
      v19 = type metadata accessor for ListMenuModule();
      v20 = (_QWORD *)swift_allocObject(v19, 64, 7);
      v21 = sub_100068EB4((uint64_t)v27, v18);
      v22 = __chkstk_darwin(v21);
      v24 = (_QWORD *)((char *)v27 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *, __n128))(v25 + 16))(v24, v22);
      v26 = *v24;
      v20[5] = v18;
      v20[6] = &off_100B72868;
      v20[2] = v26;
      v20[7] = v11;
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v27);
      result = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v28);
      a2[3] = v19;
      a2[4] = &off_100B64510;
      *a2 = v20;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

double sub_100795158()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v0 = sub_1000BA294(&qword_100C05E98);
  v1 = RegistrationContainer.register<A>(_:name:factory:)(v0, 0, 0, sub_100795220, 0, v0);
  swift_release(v1);
  v2 = sub_1000BA294(&qword_100C05EA0);
  v3 = RegistrationContainer.register<A>(_:name:factory:)(v2, 0, 0, sub_1007952B8, 0, v2);
  swift_release(v3);
  v4 = sub_1000BA294(&qword_100C05EA8);
  v5 = RegistrationContainer.register<A>(_:name:factory:)(v4, 0, 0, sub_1007952CC, 0, v4);
  swift_release(v5);
  v6 = sub_1000BA294(&qword_100BC4820);
  v7 = RegistrationContainer.register<A>(_:name:factory:)(v6, 0, 0, sub_1007952E0, 0, v6);
  *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  return result;
}

uint64_t sub_100795220@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = sub_1000BA294(&qword_100BC43F0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (v8)
  {
    v7 = type metadata accessor for ListMenuInteractor();
    result = swift_allocObject(v7, 32, 7);
    *(_QWORD *)(result + 16) = v8;
    *(_QWORD *)(result + 24) = v9;
    a2[3] = v7;
    a2[4] = (uint64_t)&off_100B72868;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1007952B8@<X0>(uint64_t *a1@<X8>)
{
  return sub_10012A894((uint64_t (*)(_QWORD))type metadata accessor for ListMenuInputFactory, (uint64_t)&off_100B962F8, a1);
}

uint64_t sub_1007952CC@<X0>(uint64_t *a1@<X8>)
{
  return sub_10012A894((uint64_t (*)(_QWORD))type metadata accessor for ListMenuViewModelFactory, (uint64_t)&off_100B8BD18, a1);
}

uint64_t sub_1007952E0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23[2];
  _QWORD v24[3];
  uint64_t v25;
  _UNKNOWN **v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BC43B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  v6 = v29;
  if (!v29)
  {
    __break(1u);
    goto LABEL_6;
  }
  v8 = v31;
  v7 = v32;
  v9 = v30;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1000BA294(&qword_100C05EA0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v12, v12, v10, v11);
  if (!v28)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v13 = *sub_1000DB418(v27, v28);
  v25 = type metadata accessor for ListMenuInputFactory();
  v26 = &off_100B962F8;
  v24[0] = v13;
  sub_100043CA8((uint64_t)v24, (uint64_t)v23);
  v14 = swift_allocObject(&unk_100B90658, 56, 7);
  sub_10003C800(v23, v14 + 16);
  swift_retain();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v24);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v27);
  v15 = swift_allocObject(&unk_100B90680, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_100795634;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = a1[3];
  v17 = a1[4];
  sub_1000DB418(a1, v16);
  v18 = sub_1000BA294(&qword_100C05EA8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v18, v18, v16, v17);
  if (v28)
  {
    v19 = *sub_1000DB418(v27, v28);
    v25 = type metadata accessor for ListMenuViewModelFactory();
    v26 = &off_100B8BD18;
    v24[0] = v19;
    sub_100043CA8((uint64_t)v24, (uint64_t)v23);
    v20 = swift_allocObject(&unk_100B906A8, 56, 7);
    sub_10003C800(v23, v20 + 16);
    swift_retain();
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v24);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v27);
    v21 = swift_allocObject(&unk_100B906D0, 32, 7);
    *(_QWORD *)(v21 + 16) = sub_100795690;
    *(_QWORD *)(v21 + 24) = v20;
    v22 = sub_1000BA294(&qword_100BC4820);
    swift_allocObject(v22, 58, 7);
    return sub_100184478(v6, v9, v8, v7, sub_100182F48, 0, sub_100795660, v15, sub_10079569C, v21);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_100795560(uint64_t a1, _QWORD *a2)
{
  sub_1000DB418(a2, a2[3]);
  return sub_10083CAAC(a1);
}

void *sub_100795598(void *a1)
{
  id v2;

  v2 = a1;
  return a1;
}

uint64_t sub_1007955D4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char v6;

  result = a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = v6;
  return result;
}

uint64_t sub_100795610()
{
  uint64_t v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100795634(uint64_t a1)
{
  uint64_t v1;

  return sub_100795560(a1, (_QWORD *)(v1 + 16));
}

uint64_t sub_10079563C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100795660@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = (*(uint64_t (**)(_QWORD))(v2 + 16))(*a1);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = v6;
  return result;
}

void *sub_100795690(void *a1)
{
  return sub_100795598(a1);
}

uint64_t sub_10079569C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1007955D4(a1, *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v2 + 16), a2);
}

uint64_t sub_1007956AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + 9) & (unint64_t)~v7) + *(_QWORD *)(v6 + 64) > 0x18)
  {
    v10 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    v11 = *(_QWORD *)a2;
    v12 = *(_BYTE *)(a2 + 8);
    sub_10008D47C(*(_QWORD *)a2, v12);
    *(_QWORD *)a1 = v11;
    *(_BYTE *)(a1 + 8) = v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))((a1 + v7 + 9) & ~v7, (a2 + v7 + 9) & ~v7, v5);
  }
  return a1;
}

uint64_t sub_100795784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10008D47C(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1000B15F8(v8, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 24))((*(unsigned __int8 *)(v10 + 80) + 9 + a1) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(unsigned __int8 *)(v10 + 80) + 9 + a2) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t sub_10079580C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((*(unsigned __int8 *)(v4 + 80) + 9 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 9 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t sub_100795864(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1000B15F8(v8, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 40))((*(unsigned __int8 *)(v10 + 80) + 9 + a1) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v10 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t sub_1007958D8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  int v12;
  unsigned int v14;
  int v15;
  unsigned int v16;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= 0xFE)
    v7 = 254;
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = a2 - v7;
  if (a2 <= v7)
    goto LABEL_22;
  v10 = ((v8 + 9) & ~v8) + *(_QWORD *)(v5 + 64);
  v11 = 8 * v10;
  if (v10 <= 3)
  {
    v14 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      v12 = *(_DWORD *)(a1 + v10);
      if (!v12)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v14 > 0xFF)
    {
      v12 = *(unsigned __int16 *)(a1 + v10);
      if (!*(_WORD *)(a1 + v10))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v14 < 2)
    {
LABEL_22:
      if (v6 > 0xFE)
        return _s7Weather24LocationCompositionStateOwet_0((a1 + v8 + 9) & ~v8, v6, v4);
      v16 = *(unsigned __int8 *)(a1 + 8);
      if (v16 > 1)
        return (v16 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v12 = *(unsigned __int8 *)(a1 + v10);
  if (!*(_BYTE *)(a1 + v10))
    goto LABEL_22;
LABEL_15:
  v15 = (v12 - 1) << v11;
  if (v10 > 3)
    v15 = 0;
  if (!(_DWORD)v10)
    return v7 + v15 + 1;
  if (v10 > 3)
    LODWORD(v10) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1007959AC + 4 * byte_1009C9E30[(v10 - 1)]))();
}

void sub_100795A18(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  char v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  v8 = 8 * v7;
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << v8)) >> v8) + 1;
      if (HIWORD(v11))
      {
        v9 = &dword_100000004;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v12 = v10 & ~(-1 << v8);
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t sub_100795C14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t KeyPath;
  uint64_t v42;
  char v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t WitnessTable;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  __int16 v125;
  __int128 v126;

  v107 = a4;
  v88 = a2;
  v106 = a5;
  v95 = type metadata accessor for LocationViewGeometry(0);
  v104 = *(_QWORD *)(v95 - 8);
  v105 = *(_QWORD *)(v104 + 64);
  __chkstk_darwin(v95);
  v103 = (uint64_t)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for GridGeometryRoot(0, a3, a4, v10);
  v101 = *(_QWORD *)(v11 - 8);
  v12 = v11;
  v89 = v11;
  v102 = *(_QWORD *)(v101 + 64);
  __chkstk_darwin(v11);
  v100 = (char *)&v84 - v13;
  v14 = sub_1000BA294(&qword_100C0A0A0);
  v15 = __chkstk_darwin(v14);
  v92 = (char *)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a3;
  v108 = a3;
  v18 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(v15);
  v20 = (char *)&v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100075EB0(&qword_100C05F50);
  v22 = type metadata accessor for ModifiedContent(0, v17, v21);
  v87 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v24 = (char *)&v84 - v23;
  v25 = sub_100075EB0(&qword_100BD0668);
  v26 = type metadata accessor for ModifiedContent(0, v22, v25);
  v90 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v28 = (char *)&v84 - v27;
  v29 = sub_100075EB0(&qword_100BD0658);
  v30 = type metadata accessor for ModifiedContent(0, v26, v29);
  v31 = *(_QWORD *)(v30 - 8);
  v85 = v30;
  v91 = v31;
  __chkstk_darwin(v30);
  v86 = (char *)&v84 - v32;
  v33 = sub_100075EB0(&qword_100C05F58);
  v34 = type metadata accessor for ModifiedContent(0, v30, v33);
  v98 = *(_QWORD *)(v34 - 8);
  v94 = v34;
  __chkstk_darwin(v34);
  v109 = (char *)&v84 - v35;
  v36 = sub_100075EB0(&qword_100BEE748);
  v97 = type metadata accessor for ModifiedContent(0, v34, v36);
  v99 = *(_QWORD *)(v97 - 8);
  v37 = __chkstk_darwin(v97);
  v93 = (char *)&v84 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v96 = (char *)&v84 - v39;
  v40 = v108;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a2 + *(int *)(v12 + 36), v108);
  KeyPath = swift_getKeyPath(&unk_1009C9FD0);
  v42 = *(_QWORD *)(a1 + 24);
  v43 = *(_BYTE *)(a1 + 32);
  v44 = *(_QWORD *)(a1 + 40);
  v45 = *(_WORD *)(a1 + 48);
  v120 = *(_QWORD *)a1;
  v121 = *(_OWORD *)(a1 + 8);
  v122 = v42;
  v123 = v43;
  v124 = v44;
  v125 = v45;
  v126 = *(_OWORD *)(a1 + 56);
  v46 = v107;
  View.environment<A>(_:_:)(KeyPath, &v120, v40, v107);
  swift_release(KeyPath);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v40);
  v47 = swift_getKeyPath(&unk_1009C9F50);
  LOBYTE(v120) = *(_BYTE *)(a1 + 72);
  sub_10003D2DC(&qword_100C05F68, &qword_100C05F50);
  v118 = v46;
  v119 = v48;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v22);
  View.environment<A>(_:_:)(v47, &v120, v22, WitnessTable);
  swift_release(v47);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v24, v22);
  v50 = swift_getKeyPath(&unk_1009C9FF8);
  LOBYTE(v120) = (*(_BYTE *)(a1 + 72) & 0xC1) == 0;
  sub_10003D2DC(&qword_100BD0660, &qword_100BD0668);
  v116 = WitnessTable;
  v117 = v51;
  v52 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v26);
  v53 = v86;
  View.environment<A>(_:_:)(v50, &v120, v26, v52);
  swift_release(v50);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v28, v26);
  v54 = swift_getKeyPath(&unk_1009CA020);
  v55 = a1 + *(int *)(v95 + 24);
  v56 = type metadata accessor for TargetWindowSizeClass(0);
  v57 = (uint64_t)v92;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v92, v55, v56);
  _s7Weather24LocationCompositionStateOwst_0(v57, 0, 1, v56);
  sub_10003D2DC((unint64_t *)&unk_100C0A590, &qword_100BD0658);
  v114 = v52;
  v115 = v58;
  v59 = v85;
  v60 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v85);
  View.environment<A>(_:_:)(v54, v57, v59, v60);
  swift_release(v54);
  sub_100021A14(v57, &qword_100C0A0A0);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v53, v59);
  v61 = swift_getKeyPath(&unk_1009CA048);
  v62 = v101;
  v63 = v100;
  v64 = v89;
  (*(void (**)(char *, uint64_t, uint64_t))(v101 + 16))(v100, v88, v89);
  v65 = v103;
  sub_100095B78(a1, v103, type metadata accessor for LocationViewGeometry);
  v66 = *(unsigned __int8 *)(v62 + 80);
  v67 = v62;
  v68 = (v66 + 32) & ~v66;
  v69 = *(unsigned __int8 *)(v104 + 80);
  v70 = (v102 + v69 + v68) & ~v69;
  v71 = swift_allocObject(&unk_100B90788, v70 + v105, v66 | v69 | 7);
  v72 = v107;
  *(_QWORD *)(v71 + 16) = v108;
  *(_QWORD *)(v71 + 24) = v72;
  (*(void (**)(uint64_t, char *, uint64_t))(v67 + 32))(v71 + v68, v63, v64);
  sub_10007C77C(v65, v71 + v70, type metadata accessor for LocationViewGeometry);
  sub_10003D2DC((unint64_t *)&unk_100C0A090, &qword_100C05F58);
  v112 = v60;
  v113 = v73;
  v74 = v94;
  v75 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v94);
  v76 = v93;
  v77 = v109;
  View.transformEnvironment<A>(_:transform:)(v61, sub_100796AB4, v71, v74, v75);
  swift_release(v61);
  swift_release(v71);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v77, v74);
  sub_10003D2DC(&qword_100BEE740, &qword_100BEE748);
  v110 = v75;
  v111 = v78;
  v79 = v97;
  v80 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v97);
  v81 = (uint64_t)v96;
  sub_1000B2074(v76, v79, v80);
  v82 = *(void (**)(char *, uint64_t))(v99 + 8);
  v82(v76, v79);
  sub_1000B1100(v81, v79, v106);
  return ((uint64_t (*)(uint64_t, uint64_t))v82)(v81, v79);
}

__n128 sub_10079643C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  __int128 *v9;
  __n128 result;
  uint64_t v11;

  v5 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a2 + 8);
  sub_10008D47C(*(_QWORD *)a2, v6);
  sub_100109B54();
  v8 = v7;
  sub_1000B15F8(v5, v6);
  if ((v8 & 1) != 0)
  {
    if (qword_100BC23B8 != -1)
      swift_once(&qword_100BC23B8, sub_1001593B8);
    v9 = &xmmword_100CAEF78;
  }
  else
  {
    v9 = (__int128 *)(a3 + *(int *)(type metadata accessor for LocationViewGeometry(0) + 28));
  }
  result = *(__n128 *)((char *)v9 + 8);
  v11 = *((_QWORD *)v9 + 3);
  *(_QWORD *)a1 = *(_QWORD *)v9;
  *(__n128 *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 24) = v11;
  return result;
}

uint64_t type metadata accessor for GridGeometryComputerModifier(uint64_t a1)
{
  return sub_100098190(a1, qword_100C06070, (uint64_t)&nominal type descriptor for GridGeometryComputerModifier);
}

unint64_t sub_100796510()
{
  unint64_t result;

  result = qword_100C05F60;
  if (!qword_100C05F60)
  {
    result = swift_getWitnessTable(&unk_1009CA1CC, &type metadata for ComputedGridGeometryPreferenceKey);
    atomic_store(result, (unint64_t *)&qword_100C05F60);
  }
  return result;
}

uint64_t sub_10079657C(const void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  char v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[72];
  _BYTE __dst[72];

  v4 = sub_10009D810();
  sub_1000B42B0();
  __chkstk_darwin(v5);
  v35 = (uint64_t)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v33 - v8;
  __chkstk_darwin(v10);
  v12 = (char *)&v33 - v11;
  __chkstk_darwin(v13);
  v15 = (char *)&v33 - v14;
  __chkstk_darwin(v16);
  v18 = (char *)&v33 - v17;
  __chkstk_darwin(v19);
  v21 = (char *)&v33 - v20;
  memcpy(__dst, a1, sizeof(__dst));
  memcpy(v36, a2, sizeof(v36));
  sub_1007F96D0((uint64_t)v36);
  v23 = v22;
  sub_1000C3608((uint64_t)a1, (uint64_t)v21);
  sub_1000C3608((uint64_t)a2, (uint64_t)v18);
  if ((v23 & 1) == 0)
  {
    sub_10009EFA8((uint64_t)v18);
    sub_10009EFA8((uint64_t)v21);
    sub_1000C6244((uint64_t)a1, (uint64_t)v15);
    sub_1000C6244((uint64_t)a2, (uint64_t)v12);
    goto LABEL_6;
  }
  v34 = v4;
  v24 = v21[72];
  sub_1000215BC((uint64_t)v21, type metadata accessor for LocationViewGeometry);
  v25 = v18[72];
  sub_1000215BC((uint64_t)v18, type metadata accessor for LocationViewGeometry);
  v26 = sub_10011CD38(v24, v25);
  sub_100095B78((uint64_t)a1, (uint64_t)v15, type metadata accessor for LocationViewGeometry);
  sub_100095B78((uint64_t)a2, (uint64_t)v12, type metadata accessor for LocationViewGeometry);
  if ((v26 & 1) == 0)
  {
LABEL_6:
    sub_10009EFA8((uint64_t)v12);
    sub_10009EFA8((uint64_t)v15);
    sub_1000C6244((uint64_t)a1, (uint64_t)v9);
    v29 = v35;
    sub_1000C6244((uint64_t)a2, v35);
    goto LABEL_7;
  }
  v27 = v34;
  v28 = sub_10068AD18((uint64_t)&v15[*(int *)(v34 + 24)], (uint64_t)&v12[*(int *)(v34 + 24)]);
  sub_1000215BC((uint64_t)v12, type metadata accessor for LocationViewGeometry);
  sub_1000215BC((uint64_t)v15, type metadata accessor for LocationViewGeometry);
  sub_100095B78((uint64_t)a1, (uint64_t)v9, type metadata accessor for LocationViewGeometry);
  v29 = v35;
  sub_100095B78((uint64_t)a2, v35, type metadata accessor for LocationViewGeometry);
  if ((v28 & 1) == 0)
  {
LABEL_7:
    v31 = 0;
    goto LABEL_8;
  }
  v30 = *(int *)(v27 + 28);
  v31 = static EdgeInsets.== infix(_:_:)(*(double *)&v9[v30], *(double *)&v9[v30 + 8], *(double *)&v9[v30 + 16], *(double *)&v9[v30 + 24], *(double *)(v29 + v30), *(double *)(v29 + v30 + 8), *(double *)(v29 + v30 + 16), *(double *)(v29 + v30 + 24));
LABEL_8:
  sub_1000215BC(v29, type metadata accessor for LocationViewGeometry);
  sub_1000215BC((uint64_t)v9, type metadata accessor for LocationViewGeometry);
  return v31 & 1;
}

double sub_10079684C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = type metadata accessor for GridGeometryValidator();
  v1 = swift_allocObject(v0, 88, 7);
  result = 0.0;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_QWORD *)(v1 + 48) = 255;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  return result;
}

uint64_t sub_100796888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_1000C6850(a1, a2, a3, a4);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = v8 + *(_QWORD *)(v6 + 64);
  v10 = v7 | 7;
  v11 = v4 + v8;
  sub_1000B15F8(*(_QWORD *)(v4 + v8), *(_BYTE *)(v4 + v8 + 8));
  sub_1000E7498(v11 + *(int *)(v5 + 36));
  return swift_deallocObject(v4, v9, v10);
}

uint64_t sub_1007968F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  type metadata accessor for GridGeometryRoot(0, v5, v6, a4);
  v7 = sub_1000CD9D0();
  return sub_100795C14(v7, v8, v5, v6, v9);
}

unint64_t sub_100796950()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C05F70;
  if (!qword_100C05F70)
  {
    v1 = sub_100075EB0(&qword_100C05F48);
    sub_10000F1C8(&qword_100C05F78, type metadata accessor for GridGeometryComputerModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C05F70);
  }
  return result;
}

uint64_t type metadata accessor for LocationViewGeometry(uint64_t a1)
{
  return sub_100098190(a1, qword_100C05FD8, (uint64_t)&nominal type descriptor for LocationViewGeometry);
}

uint64_t sub_100796A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_1000C6850(a1, a2, a3, a4);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = *(_QWORD *)(sub_10009D810() - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = ((v8 + v9 + v11) & ~v11) + *(_QWORD *)(v10 + 64);
  v13 = v7 | v11 | 7;
  v14 = v4 + v8;
  sub_1000B15F8(*(_QWORD *)v14, *(_BYTE *)(v14 + 8));
  sub_1000E7498(v14 + *(int *)(v5 + 36));
  v15 = sub_1000DA7E4();
  sub_10003BC44(v15);
  return swift_deallocObject(v4, v12, v13);
}

double sub_100796AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  v6 = *(_QWORD *)(type metadata accessor for GridGeometryRoot(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(sub_10009D810() - 8) + 80);
  *(_QWORD *)&result = sub_10079643C(a1, v4 + v7, v4 + ((v7 + v8 + v9) & ~v9)).n128_u64[0];
  return result;
}

uint64_t sub_100796B34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double (*v11)();
  double (*v12)();
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  double (**v18)();
  uint64_t v19;

  v3 = v2;
  v6 = type metadata accessor for GridGeometryComputerModifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v10 = static Alignment.center.getter(v9);
  v12 = v11;
  sub_100095B78(v3, (uint64_t)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for GridGeometryComputerModifier);
  v13 = *(unsigned __int8 *)(v7 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = swift_allocObject(&unk_100B907D0, v14 + v8, v13 | 7);
  sub_10007C77C((uint64_t)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, type metadata accessor for GridGeometryComputerModifier);
  v16 = sub_1000BA294(&qword_100C060E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a2, a1, v16);
  result = sub_1000BA294(&qword_100C060E8);
  v18 = (double (**)())(a2 + *(int *)(result + 36));
  *v18 = sub_100799994;
  v18[1] = (double (*)())v15;
  v18[2] = (double (*)())v10;
  v18[3] = v12;
  return result;
}

double sub_100796C50@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  double result;
  uint64_t v19;

  v2 = sub_1000BA294(&qword_100C060F0);
  __chkstk_darwin(v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LocationViewGeometry(0);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = static Color.clear.getter(v8);
  v10 = GeometryProxy.size.getter(v9);
  v12 = v11;
  v13 = GeometryProxy.safeAreaInsets.getter();
  sub_100796D9C(v10, v12, 0, v7, v13, v14, v15, v16);
  sub_100095B78((uint64_t)v7, (uint64_t)v4, type metadata accessor for LocationViewGeometry);
  v17 = sub_1000BA294(&qword_100C060F8);
  sub_10003773C((uint64_t)v4, (uint64_t)a1 + *(int *)(v17 + 36), &qword_100C060F0);
  *a1 = v9;
  swift_retain();
  sub_100021A14((uint64_t)v4, &qword_100C060F0);
  sub_1000215BC((uint64_t)v7, type metadata accessor for LocationViewGeometry);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void *sub_100796D9C@<X0>(uint64_t a1@<X0>, double a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  double v8;
  double v9;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void *result;
  uint64_t v52;
  double *v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(_BYTE *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  unsigned __int8 v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  _BYTE v74[12];
  int v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  _BYTE *v79;
  _BYTE *v80;
  double v81;
  _BYTE *v82;
  _BYTE v83[72];
  _BYTE __src[80];

  v9 = v8;
  v81 = a2;
  v80 = (_BYTE *)a1;
  v16 = type metadata accessor for DisplayMetrics(0);
  __chkstk_darwin(v16);
  v82 = &v74[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = type metadata accessor for UserInterfaceSizeClass(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v78 = &v74[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = sub_1000BA294(&qword_100BC5E60);
  __chkstk_darwin(v21);
  v23 = &v74[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24 = sub_1000BA294(&qword_100BC5A68);
  __chkstk_darwin(v24);
  v79 = &v74[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v26);
  v28 = &v74[-v27];
  __chkstk_darwin(v29);
  v31 = &v74[-v30];
  v32 = type metadata accessor for ContentSizeCategory(0);
  __chkstk_darwin(v32);
  v36 = &v74[-((v35 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((a3 & 1) == 0)
  {
    v76 = v34;
    v77 = v33;
    v37 = *(double *)&v80;
    v38 = v81;
    v39 = type metadata accessor for GridGeometryComputerModifier(0);
    v80 = v36;
    v40 = v39;
    sub_100109D64();
    v81 = v9;
    sub_10011AA68(v41);
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v19 + 104))(v28, enum case for UserInterfaceSizeClass.compact(_:), v18);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v28, 0, 1, v18);
    v42 = (uint64_t)&v23[*(int *)(v21 + 48)];
    sub_10003773C((uint64_t)v31, (uint64_t)v23, &qword_100BC5A68);
    sub_10003773C((uint64_t)v28, v42, &qword_100BC5A68);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v23, 1, v18) == 1)
    {
      sub_100021A14((uint64_t)v28, &qword_100BC5A68);
      sub_100021A14((uint64_t)v31, &qword_100BC5A68);
      if (_s7Weather24LocationCompositionStateOwet_0(v42, 1, v18) == 1)
      {
        sub_100021A14((uint64_t)v23, &qword_100BC5A68);
        v44 = 1;
        v45 = v81;
LABEL_16:
        v59 = (uint64_t)v82;
        sub_100117228(v43);
        v60 = *(_QWORD *)&v45 + *(int *)(v40 + 28);
        v61 = *(_QWORD *)v60;
        v62 = *(_BYTE *)(v60 + 8);
        sub_10008D47C(*(_QWORD *)v60, v62);
        sub_10011567C();
        sub_1000B15F8(v61, v62);
        v63 = (uint64_t)v80;
        v64 = sub_10013B4E0((uint64_t)v80, v44, v59, v37);
        sub_10013B744(v64, v44, v83, v37);
        sub_1000215BC(v59, type metadata accessor for DisplayMetrics);
        (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v63, v77);
        v65 = (uint64_t *)(*(_QWORD *)&v45 + *(int *)(v40 + 40));
        v66 = *v65;
        v67 = v65[1];
        v68 = *((unsigned __int8 *)v65 + 16);
        v69 = type metadata accessor for GridGeometryValidator();
        sub_10000F1C8(&qword_100C06100, (uint64_t (*)(uint64_t))type metadata accessor for GridGeometryValidator);
        StateObject.wrappedValue.getter(v66, v67, v68, v69, v70);
        sub_10013730C((uint64_t)v83, (uint64_t)__src);
        swift_release();
        v71 = *(_QWORD *)v60;
        LOBYTE(v67) = *(_BYTE *)(v60 + 8);
        sub_10008D47C(*(_QWORD *)v60, v67);
        sub_10011567C();
        LOBYTE(v68) = v72;
        sub_1000B15F8(v71, v67);
        v73 = type metadata accessor for LocationViewGeometry(0);
        sub_100797484((uint64_t)a4 + *(int *)(v73 + 24), v37, v38, a5, a6, a7, a8);
        result = memcpy(a4, __src, 0x48uLL);
        *((_BYTE *)a4 + 72) = v68;
        v53 = (double *)((char *)a4 + *(int *)(v73 + 28));
        *v53 = a5;
        goto LABEL_17;
      }
    }
    else
    {
      v54 = v79;
      sub_10003773C((uint64_t)v23, (uint64_t)v79, &qword_100BC5A68);
      if (_s7Weather24LocationCompositionStateOwet_0(v42, 1, v18) != 1)
      {
        v55 = v78;
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v19 + 32))(v78, v42, v18);
        sub_10000F1C8(&qword_100BC5AB8, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
        v75 = dispatch thunk of static Equatable.== infix(_:_:)(v54, v55, v18, v56);
        v57 = v40;
        v58 = *(void (**)(_BYTE *, uint64_t))(v19 + 8);
        v58(v55, v18);
        sub_100021A14((uint64_t)v28, &qword_100BC5A68);
        sub_100021A14((uint64_t)v31, &qword_100BC5A68);
        v58(v54, v18);
        v40 = v57;
        sub_100021A14((uint64_t)v23, &qword_100BC5A68);
        v45 = v81;
        if ((v75 & 1) != 0)
        {
          v44 = 1;
          goto LABEL_16;
        }
LABEL_15:
        v44 = 2;
        goto LABEL_16;
      }
      sub_100021A14((uint64_t)v28, &qword_100BC5A68);
      sub_100021A14((uint64_t)v31, &qword_100BC5A68);
      (*(void (**)(_BYTE *, uint64_t))(v19 + 8))(v54, v18);
    }
    sub_100021A14((uint64_t)v23, &qword_100BC5E60);
    v45 = v81;
    goto LABEL_15;
  }
  if (qword_100BC2608 != -1)
    swift_once(&qword_100BC2608, sub_10014B028);
  v46 = qword_100CAF438;
  v47 = type metadata accessor for LocationViewGeometry(0);
  v48 = (char *)a4 + *(int *)(v47 + 24);
  v49 = enum case for TargetWindowSizeClass.compact(_:);
  v50 = type metadata accessor for TargetWindowSizeClass(0);
  result = (void *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 104))(v48, v49, v50);
  if (qword_100BC23B8 != -1)
    result = (void *)swift_once(&qword_100BC23B8, sub_1001593B8);
  a6 = *((double *)&xmmword_100CAEF78 + 1);
  v52 = xmmword_100CAEF78;
  a7 = *(double *)&qword_100CAEF88;
  a8 = *(double *)&qword_100CAEF90;
  *a4 = 0;
  a4[1] = 0x4062000000000000;
  a4[2] = 0;
  a4[3] = 0;
  *((_BYTE *)a4 + 32) = 0;
  a4[5] = 0x4030000000000000;
  *((_WORD *)a4 + 24) = 768;
  a4[7] = 0x4034000000000000;
  a4[8] = v46;
  *((_BYTE *)a4 + 72) = 0x80;
  v53 = (double *)((char *)a4 + *(int *)(v47 + 28));
  *(_QWORD *)v53 = v52;
LABEL_17:
  v53[1] = a6;
  v53[2] = a7;
  v53[3] = a8;
  return result;
}

uint64_t sub_100797484@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v42;
  uint64_t v43;
  char v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = a1;
  v50 = type metadata accessor for UserInterfaceSizeClass(0);
  v14 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v48 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000BA294(&qword_100BC5E60);
  __chkstk_darwin(v16);
  v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000BA294(&qword_100BC5A68);
  __chkstk_darwin(v19);
  v49 = (uint64_t)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)&v48 - v22;
  __chkstk_darwin(v24);
  v26 = (char *)&v48 - v25;
  v27 = v7 + *(int *)(type metadata accessor for GridGeometryComputerModifier(0) + 24);
  v28 = *(_QWORD *)v27;
  v29 = *(_BYTE *)(v27 + 8);
  sub_10008D47C(*(_QWORD *)v27, v29);
  sub_100109B54();
  v31 = v30;
  v32 = sub_1000B15F8(v28, v29);
  if ((v31 & 1) == 0)
  {
    sub_10011AA68(v32);
    v37 = v50;
    (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v23, enum case for UserInterfaceSizeClass.compact(_:), v50);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v23, 0, 1, v37);
    v38 = (uint64_t)&v18[*(int *)(v16 + 48)];
    sub_10003773C((uint64_t)v26, (uint64_t)v18, &qword_100BC5A68);
    sub_10003773C((uint64_t)v23, v38, &qword_100BC5A68);
    v39 = (uint64_t)v18;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v18, 1, v37) == 1)
    {
      sub_100021A14((uint64_t)v23, &qword_100BC5A68);
      sub_100021A14((uint64_t)v26, &qword_100BC5A68);
      if (_s7Weather24LocationCompositionStateOwet_0(v38, 1, v37) == 1)
      {
        sub_100021A14((uint64_t)v18, &qword_100BC5A68);
LABEL_13:
        v46 = enum case for TargetWindowSizeClass.compact(_:);
        v47 = type metadata accessor for TargetWindowSizeClass(0);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 104))(v51, v46, v47);
      }
    }
    else
    {
      v40 = v49;
      sub_10003773C((uint64_t)v18, v49, &qword_100BC5A68);
      if (_s7Weather24LocationCompositionStateOwet_0(v38, 1, v37) != 1)
      {
        v42 = v48;
        (*(void (**)(char *, uint64_t, uint64_t))(v14 + 32))(v48, v38, v37);
        sub_10000F1C8(&qword_100BC5AB8, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
        v44 = dispatch thunk of static Equatable.== infix(_:_:)(v40, v42, v37, v43);
        v45 = *(void (**)(char *, uint64_t))(v14 + 8);
        v45(v42, v37);
        sub_100021A14((uint64_t)v23, &qword_100BC5A68);
        sub_100021A14((uint64_t)v26, &qword_100BC5A68);
        v45((char *)v40, v37);
        sub_100021A14(v39, &qword_100BC5A68);
        if ((v44 & 1) != 0)
          goto LABEL_13;
        return sub_1005352E0(v51, a2, a3, a4, a5, a6, a7);
      }
      sub_100021A14((uint64_t)v23, &qword_100BC5A68);
      sub_100021A14((uint64_t)v26, &qword_100BC5A68);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v40, v37);
    }
    sub_100021A14((uint64_t)v18, &qword_100BC5E60);
    return sub_1005352E0(v51, a2, a3, a4, a5, a6, a7);
  }
  v33 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v34 = objc_msgSend(v33, "userInterfaceIdiom");

  v35 = type metadata accessor for TargetWindowSizeClass(0);
  if (v34)
    v36 = (unsigned int *)&enum case for TargetWindowSizeClass.portraitRegular(_:);
  else
    v36 = (unsigned int *)&enum case for TargetWindowSizeClass.compact(_:);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v51, *v36, v35);
}

__n128 sub_1007978F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  uint64_t v8;

  v0 = type metadata accessor for LocationViewGeometry(0);
  sub_10004037C(v0, qword_100C05EB0);
  v1 = sub_1000AECD4(v0, (uint64_t)qword_100C05EB0);
  if (qword_100BC2608 != -1)
    swift_once(&qword_100BC2608, sub_10014B028);
  v2 = qword_100CAF438;
  v3 = v1 + *(int *)(v0 + 24);
  v4 = enum case for TargetWindowSizeClass.compact(_:);
  v5 = type metadata accessor for TargetWindowSizeClass(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v3, v4, v5);
  if (qword_100BC23B8 != -1)
    swift_once(&qword_100BC23B8, sub_1001593B8);
  *(_QWORD *)(v1 + 64) = v2;
  v7 = xmmword_100CAEF78;
  result = *(__n128 *)&qword_100CAEF88;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_BYTE *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0x4030000000000000;
  *(_WORD *)(v1 + 48) = 768;
  *(_QWORD *)(v1 + 56) = 0x4034000000000000;
  *(_BYTE *)(v1 + 72) = 0x80;
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 8) = 0x4062000000000000;
  v8 = v1 + *(int *)(v0 + 28);
  *(_OWORD *)v8 = v7;
  *(__n128 *)(v8 + 16) = result;
  return result;
}

uint64_t sub_100797A20()
{
  uint64_t v0;

  if (qword_100BC25D8 != -1)
    swift_once(&qword_100BC25D8, sub_1007978F4);
  v0 = type metadata accessor for LocationViewGeometry(0);
  return sub_1000AECD4(v0, (uint64_t)qword_100C05EB0);
}

void sub_100797A68(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = sub_100797A20();
  sub_100095B78(v2, a1, type metadata accessor for LocationViewGeometry);
}

char *sub_100797A9C(char *__dst, char *__src, uint64_t a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;

  v4 = __dst;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)__src;
    *(_QWORD *)v4 = *(_QWORD *)__src;
    v4 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    memcpy(__dst, __src, 0x48uLL);
    v4[72] = __src[72];
    v7 = *(int *)(a3 + 24);
    v8 = &v4[v7];
    v9 = &__src[v7];
    v10 = type metadata accessor for TargetWindowSizeClass(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = *(int *)(a3 + 28);
    v12 = &v4[v11];
    v13 = &__src[v11];
    v14 = *((_OWORD *)v13 + 1);
    *(_OWORD *)v12 = *(_OWORD *)v13;
    *((_OWORD *)v12 + 1) = v14;
  }
  return v4;
}

uint64_t sub_100797B58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 24);
  v3 = type metadata accessor for TargetWindowSizeClass(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_BYTE *sub_100797B90(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;

  memcpy(a1, a2, 0x48uLL);
  a1[72] = a2[72];
  v6 = *(int *)(a3 + 24);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for TargetWindowSizeClass(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = *(int *)(a3 + 28);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  return a1;
}

uint64_t sub_100797C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  *(_OWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for TargetWindowSizeClass(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 28);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  v12[2] = v13[2];
  v12[3] = v13[3];
  return a1;
}

_BYTE *sub_100797CF0(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;

  memcpy(a1, a2, 0x48uLL);
  a1[72] = a2[72];
  v6 = *(int *)(a3 + 24);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for TargetWindowSizeClass(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 28);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  return a1;
}

uint64_t sub_100797D78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  v6 = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(a1 + 56) = v6;
  v10 = type metadata accessor for TargetWindowSizeClass(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 28);
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  return a1;
}

uint64_t sub_100797E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100797E34);
}

void sub_100797E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 254)
  {
    sub_100079F70();
  }
  else
  {
    v6 = sub_1000DA7E4();
    sub_1000B250C(a1 + *(int *)(a3 + 24), a2, v6);
  }
}

uint64_t sub_100797E8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100797E98);
}

void sub_100797E98(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 254)
  {
    *(_BYTE *)(a1 + 32) = -(char)a2;
    sub_100079F70();
  }
  else
  {
    v7 = sub_1000DA7E4();
    sub_1000987C4(a1 + *(int *)(a4 + 24), a2, a2, v7);
  }
}

uint64_t sub_100797EEC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = "H";
  v4[1] = &unk_1009CA0A0;
  result = type metadata accessor for TargetWindowSizeClass(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_1009CA0B8;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ComputedGridGeometryPreferenceKey()
{
  return &type metadata for ComputedGridGeometryPreferenceKey;
}

uint64_t sub_100797F80(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(a2) == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
      *(_BYTE *)(a1 + 18) = *((_BYTE *)a2 + 18);
      v8 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v9 = a1 + v8;
      v10 = (uint64_t)a2 + v8;
      v11 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      v12 = 1;
    }
    else
    {
      *(_QWORD *)a1 = *a2;
      swift_retain();
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v7, v12);
    v14 = a3[5];
    v15 = (_QWORD *)(a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
    if (swift_getEnumCaseMultiPayload(v16) == 1)
    {
      v18 = type metadata accessor for UserInterfaceSizeClass(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v18))
      {
        v19 = sub_1000BA294(&qword_100BC5A68);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 0, 1, v18);
      }
      v20 = v15;
      v21 = v17;
      v22 = 1;
    }
    else
    {
      *v15 = *v16;
      swift_retain();
      v20 = v15;
      v21 = v17;
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v21, v22);
    v23 = a3[6];
    v24 = a1 + v23;
    v25 = (uint64_t)a2 + v23;
    v26 = *(_QWORD *)v25;
    v27 = *(_BYTE *)(v25 + 8);
    sub_10008D47C(*(_QWORD *)v25, v27);
    *(_QWORD *)v24 = v26;
    *(_BYTE *)(v24 + 8) = v27;
    v28 = a3[7];
    v29 = a1 + v28;
    v30 = (uint64_t)a2 + v28;
    v31 = *(_QWORD *)v30;
    v32 = *(_BYTE *)(v30 + 8);
    sub_10008D47C(*(_QWORD *)v30, v32);
    *(_QWORD *)v29 = v31;
    *(_BYTE *)(v29 + 8) = v32;
    v33 = a3[8];
    v34 = (_QWORD *)(a1 + v33);
    v35 = (uint64_t *)((char *)a2 + v33);
    v36 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v35) == 1)
    {
      v37 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v34, v35, v37);
      v38 = 1;
    }
    else
    {
      *v34 = *v35;
      swift_retain();
      v38 = 0;
    }
    swift_storeEnumTagMultiPayload(v34, v36, v38);
    v39 = a3[9];
    v40 = (_QWORD *)(a1 + v39);
    v41 = (uint64_t *)((char *)a2 + v39);
    if (swift_getEnumCaseMultiPayload((char *)a2 + v39) == 1)
    {
      v42 = type metadata accessor for UserInterfaceSizeClass(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v41, 1, v42))
      {
        v43 = sub_1000BA294(&qword_100BC5A68);
        memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v40, 0, 1, v42);
      }
      v44 = v40;
      v45 = v17;
      v46 = 1;
    }
    else
    {
      *v40 = *v41;
      swift_retain();
      v44 = v40;
      v45 = v17;
      v46 = 0;
    }
    swift_storeEnumTagMultiPayload(v44, v45, v46);
    v47 = a3[10];
    v48 = a1 + v47;
    v49 = (uint64_t)a2 + v47;
    v50 = *(_QWORD *)v49;
    v51 = *(_QWORD *)(v49 + 8);
    v52 = *(_BYTE *)(v49 + 16);
    sub_100037094(*(_QWORD *)v49, v51);
    *(_QWORD *)v48 = v50;
    *(_QWORD *)(v48 + 8) = v51;
    *(_BYTE *)(v48 + 16) = v52;
  }
  return a1;
}

uint64_t sub_100798300(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(a1) == 1)
  {
    v4 = a1 + *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v5 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  v6 = a1 + a2[5];
  sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (swift_getEnumCaseMultiPayload(v6) == 1)
  {
    v7 = type metadata accessor for UserInterfaceSizeClass(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v6, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  sub_1000B15F8(*(_QWORD *)(a1 + a2[6]), *(_BYTE *)(a1 + a2[6] + 8));
  sub_1000B15F8(*(_QWORD *)(a1 + a2[7]), *(_BYTE *)(a1 + a2[7] + 8));
  v8 = a1 + a2[8];
  sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v8) == 1)
  {
    v9 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  v10 = a1 + a2[9];
  if (swift_getEnumCaseMultiPayload(v10) == 1)
  {
    v11 = type metadata accessor for UserInterfaceSizeClass(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v10, 1, v11))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  }
  else
  {
    swift_release();
  }
  return sub_1000BF398(*(_QWORD *)(a1 + a2[10]), *(_QWORD *)(a1 + a2[10] + 8));
}

uint64_t sub_1007984D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;

  v6 = sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(a2) == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
    *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
    v7 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v8 = a1 + v7;
    v9 = a2 + v7;
    v10 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = 1;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    swift_retain();
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, v6, v11);
  v12 = a3[5];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  v15 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (swift_getEnumCaseMultiPayload(v14) == 1)
  {
    v16 = type metadata accessor for UserInterfaceSizeClass(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, v16))
    {
      v17 = sub_1000BA294(&qword_100BC5A68);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, v16);
    }
    v18 = v13;
    v19 = v15;
    v20 = 1;
  }
  else
  {
    *v13 = *v14;
    swift_retain();
    v18 = v13;
    v19 = v15;
    v20 = 0;
  }
  swift_storeEnumTagMultiPayload(v18, v19, v20);
  v21 = a3[6];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = *(_QWORD *)v23;
  v25 = *(_BYTE *)(v23 + 8);
  sub_10008D47C(*(_QWORD *)v23, v25);
  *(_QWORD *)v22 = v24;
  *(_BYTE *)(v22 + 8) = v25;
  v26 = a3[7];
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = *(_QWORD *)v28;
  v30 = *(_BYTE *)(v28 + 8);
  sub_10008D47C(*(_QWORD *)v28, v30);
  *(_QWORD *)v27 = v29;
  *(_BYTE *)(v27 + 8) = v30;
  v31 = a3[8];
  v32 = (_QWORD *)(a1 + v31);
  v33 = (_QWORD *)(a2 + v31);
  v34 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v33) == 1)
  {
    v35 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v32, v33, v35);
    v36 = 1;
  }
  else
  {
    *v32 = *v33;
    swift_retain();
    v36 = 0;
  }
  swift_storeEnumTagMultiPayload(v32, v34, v36);
  v37 = a3[9];
  v38 = (_QWORD *)(a1 + v37);
  v39 = (_QWORD *)(a2 + v37);
  if (swift_getEnumCaseMultiPayload(a2 + v37) == 1)
  {
    v40 = type metadata accessor for UserInterfaceSizeClass(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v39, 1, v40))
    {
      v41 = sub_1000BA294(&qword_100BC5A68);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v38, 0, 1, v40);
    }
    v42 = v38;
    v43 = v15;
    v44 = 1;
  }
  else
  {
    *v38 = *v39;
    swift_retain();
    v42 = v38;
    v43 = v15;
    v44 = 0;
  }
  swift_storeEnumTagMultiPayload(v42, v43, v44);
  v45 = a3[10];
  v46 = a1 + v45;
  v47 = a2 + v45;
  v48 = *(_QWORD *)v47;
  v49 = *(_QWORD *)(v47 + 8);
  v50 = *(_BYTE *)(v47 + 16);
  sub_100037094(*(_QWORD *)v47, v49);
  *(_QWORD *)v46 = v48;
  *(_QWORD *)(v46 + 8) = v49;
  *(_BYTE *)(v46 + 16) = v50;
  return a1;
}

uint64_t sub_10079882C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;

  if (a1 != a2)
  {
    sub_100021A14(a1, &qword_100BC37E0);
    v6 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(a2) == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
      *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
      v7 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v8 = a1 + v7;
      v9 = a2 + v7;
      v10 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
      v11 = 1;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_retain();
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v6, v11);
    v12 = a3[5];
    v13 = (_QWORD *)(a1 + v12);
    v14 = (_QWORD *)(a2 + v12);
    sub_100021A14(a1 + v12, (uint64_t *)&unk_100C09CD0);
    v15 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
    if (swift_getEnumCaseMultiPayload(v14) == 1)
    {
      v16 = type metadata accessor for UserInterfaceSizeClass(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, v16))
      {
        v17 = sub_1000BA294(&qword_100BC5A68);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, v16);
      }
      v18 = v13;
      v19 = v15;
      v20 = 1;
    }
    else
    {
      *v13 = *v14;
      swift_retain();
      v18 = v13;
      v19 = v15;
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v18, v19, v20);
  }
  v21 = a3[6];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = *(_QWORD *)v23;
  v25 = *(_BYTE *)(v23 + 8);
  sub_10008D47C(*(_QWORD *)v23, v25);
  v26 = *(_QWORD *)v22;
  v27 = *(_BYTE *)(v22 + 8);
  *(_QWORD *)v22 = v24;
  *(_BYTE *)(v22 + 8) = v25;
  sub_1000B15F8(v26, v27);
  v28 = a3[7];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = *(_QWORD *)v30;
  v32 = *(_BYTE *)(v30 + 8);
  sub_10008D47C(*(_QWORD *)v30, v32);
  v33 = *(_QWORD *)v29;
  v34 = *(_BYTE *)(v29 + 8);
  *(_QWORD *)v29 = v31;
  *(_BYTE *)(v29 + 8) = v32;
  sub_1000B15F8(v33, v34);
  if (a1 != a2)
  {
    v35 = a3[8];
    v36 = (_QWORD *)(a1 + v35);
    v37 = (_QWORD *)(a2 + v35);
    sub_100021A14(a1 + v35, &qword_100BC37D8);
    v38 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v37) == 1)
    {
      v39 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v36, v37, v39);
      v40 = 1;
    }
    else
    {
      *v36 = *v37;
      swift_retain();
      v40 = 0;
    }
    swift_storeEnumTagMultiPayload(v36, v38, v40);
    v41 = a3[9];
    v42 = (_QWORD *)(a1 + v41);
    v43 = (_QWORD *)(a2 + v41);
    sub_100021A14(a1 + v41, (uint64_t *)&unk_100C09CD0);
    v44 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
    if (swift_getEnumCaseMultiPayload(v43) == 1)
    {
      v45 = type metadata accessor for UserInterfaceSizeClass(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v43, 1, v45))
      {
        v46 = sub_1000BA294(&qword_100BC5A68);
        memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v42, v43, v45);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v42, 0, 1, v45);
      }
      v47 = v42;
      v48 = v44;
      v49 = 1;
    }
    else
    {
      *v42 = *v43;
      swift_retain();
      v47 = v42;
      v48 = v44;
      v49 = 0;
    }
    swift_storeEnumTagMultiPayload(v47, v48, v49);
  }
  v50 = a3[10];
  v51 = a1 + v50;
  v52 = a2 + v50;
  v53 = *(_QWORD *)v52;
  v54 = *(_QWORD *)(v52 + 8);
  v55 = *(_BYTE *)(v52 + 16);
  sub_100037094(*(_QWORD *)v52, v54);
  v56 = *(_QWORD *)v51;
  v57 = *(_QWORD *)(v51 + 8);
  *(_QWORD *)v51 = v53;
  *(_QWORD *)(v51 + 8) = v54;
  *(_BYTE *)(v51 + 16) = v55;
  sub_1000BF398(v56, v57);
  return a1;
}

char *sub_100798C0C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;

  v6 = sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(a2) == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[16] = a2[16];
    a1[17] = a2[17];
    a1[18] = a2[18];
    v7 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v11 = a3[5];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (swift_getEnumCaseMultiPayload(v13) == 1)
  {
    v15 = type metadata accessor for UserInterfaceSizeClass(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v15))
    {
      v16 = sub_1000BA294(&qword_100BC5A68);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v12, v13, v15);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v15);
    }
    swift_storeEnumTagMultiPayload(v12, v14, 1);
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  v17 = a3[6];
  v18 = a3[7];
  v19 = &a1[v17];
  v20 = &a2[v17];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  v21 = &a1[v18];
  v22 = &a2[v18];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v23 = a3[8];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v25) == 1)
  {
    v27 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v24, v25, v27);
    swift_storeEnumTagMultiPayload(v24, v26, 1);
  }
  else
  {
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  v28 = a3[9];
  v29 = &a1[v28];
  v30 = &a2[v28];
  if (swift_getEnumCaseMultiPayload(&a2[v28]) == 1)
  {
    v31 = type metadata accessor for UserInterfaceSizeClass(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v30, 1, v31))
    {
      v32 = sub_1000BA294(&qword_100BC5A68);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v29, 0, 1, v31);
    }
    swift_storeEnumTagMultiPayload(v29, v14, 1);
  }
  else
  {
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  v33 = a3[10];
  v34 = &a1[v33];
  v35 = &a2[v33];
  *(_OWORD *)v34 = *(_OWORD *)v35;
  v34[16] = v35[16];
  return a1;
}

char *sub_100798F34(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;

  if (a1 != a2)
  {
    sub_100021A14((uint64_t)a1, &qword_100BC37E0);
    v6 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(a2) == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[16] = a2[16];
      a1[17] = a2[17];
      a1[18] = a2[18];
      v7 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v8 = &a1[v7];
      v9 = &a2[v7];
      v10 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v11 = a3[5];
    v12 = &a1[v11];
    v13 = &a2[v11];
    sub_100021A14((uint64_t)&a1[v11], (uint64_t *)&unk_100C09CD0);
    v14 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
    if (swift_getEnumCaseMultiPayload(v13) == 1)
    {
      v15 = type metadata accessor for UserInterfaceSizeClass(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v15))
      {
        v16 = sub_1000BA294(&qword_100BC5A68);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v12, v13, v15);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v15);
      }
      swift_storeEnumTagMultiPayload(v12, v14, 1);
    }
    else
    {
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
  }
  v17 = a3[6];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = *(_QWORD *)v19;
  LOBYTE(v19) = v19[8];
  v21 = *(_QWORD *)v18;
  v22 = v18[8];
  *(_QWORD *)v18 = v20;
  v18[8] = (char)v19;
  sub_1000B15F8(v21, v22);
  v23 = a3[7];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = *(_QWORD *)v25;
  LOBYTE(v25) = v25[8];
  v27 = *(_QWORD *)v24;
  v28 = v24[8];
  *(_QWORD *)v24 = v26;
  v24[8] = (char)v25;
  sub_1000B15F8(v27, v28);
  if (a1 != a2)
  {
    v29 = a3[8];
    v30 = &a1[v29];
    v31 = &a2[v29];
    sub_100021A14((uint64_t)&a1[v29], &qword_100BC37D8);
    v32 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v31) == 1)
    {
      v33 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v30, v31, v33);
      swift_storeEnumTagMultiPayload(v30, v32, 1);
    }
    else
    {
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    v34 = a3[9];
    v35 = &a1[v34];
    v36 = &a2[v34];
    sub_100021A14((uint64_t)&a1[v34], (uint64_t *)&unk_100C09CD0);
    v37 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
    if (swift_getEnumCaseMultiPayload(v36) == 1)
    {
      v38 = type metadata accessor for UserInterfaceSizeClass(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v36, 1, v38))
      {
        v39 = sub_1000BA294(&qword_100BC5A68);
        memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v35, v36, v38);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v35, 0, 1, v38);
      }
      swift_storeEnumTagMultiPayload(v35, v37, 1);
    }
    else
    {
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
  }
  v40 = a3[10];
  v41 = &a1[v40];
  v42 = &a2[v40];
  v43 = v42[16];
  v44 = *(_QWORD *)v41;
  v45 = *((_QWORD *)v41 + 1);
  *(_OWORD *)v41 = *(_OWORD *)v42;
  v41[16] = v43;
  sub_1000BF398(v44, v45);
  return a1;
}

uint64_t sub_1007992E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1007992F0);
}

void sub_1007992F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1000BA294(&qword_100BC3808);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    v9 = sub_1000BA294((uint64_t *)&unk_100C09CB0);
    if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)a2)
    {
      v7 = v9;
      v10 = *(int *)(a3 + 20);
    }
    else
    {
      if ((_DWORD)a2 == 254)
      {
        sub_100079F70();
        return;
      }
      v7 = sub_1000BA294((uint64_t *)&unk_100C09CA0);
      v10 = *(int *)(a3 + 32);
    }
    v8 = a1 + v10;
  }
  sub_1000B250C(v8, a2, v7);
}

uint64_t sub_1007993A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1007993B4);
}

void sub_1007993B4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = sub_1000BA294(&qword_100BC3808);
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    v11 = sub_1000BA294((uint64_t *)&unk_100C09CB0);
    if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == a3)
    {
      v9 = v11;
      v12 = a4[5];
    }
    else
    {
      if (a3 == 254)
      {
        *(_BYTE *)(a1 + a4[6] + 8) = -(char)a2;
        sub_100079F70();
        return;
      }
      v9 = sub_1000BA294((uint64_t *)&unk_100C09CA0);
      v12 = a4[8];
    }
    v10 = a1 + v12;
  }
  sub_1000987C4(v10, a2, a2, v9);
}

void sub_10079946C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v9[7];

  sub_100158B48(319, (unint64_t *)&qword_100BC3890, type metadata accessor for DisplayMetrics);
  if (v3 <= 0x3F)
  {
    v9[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100158AF0(319);
    if (v5 <= 0x3F)
    {
      v6 = *(_QWORD *)(v4 - 8) + 64;
      v9[1] = v6;
      v9[2] = "\t";
      v9[3] = "\t";
      sub_100158B48(319, (unint64_t *)&qword_100BC3888, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
      if (v8 <= 0x3F)
      {
        v9[4] = *(_QWORD *)(v7 - 8) + 64;
        v9[5] = v6;
        v9[6] = &unk_1009CA120;
        swift_initStructMetadata(a1, 256, 7, v9, a1 + 16);
      }
    }
  }
}

uint64_t sub_100799544(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD v27[14];

  v1 = *a1;
  v2 = a1[1];
  v26 = sub_100075EB0(&qword_100C05F48);
  sub_100075EB0(&qword_100C05F50);
  v3 = sub_100098C88();
  v5 = type metadata accessor for ModifiedContent(v3, v1, v4);
  v6 = sub_100075EB0(&qword_100BD0668);
  sub_1000CD258(v6);
  v7 = sub_100075EB0(&qword_100BD0658);
  v8 = sub_1000DD3B8(v7);
  v9 = sub_100075EB0(&qword_100C05F58);
  v10 = sub_1000DDF38(v9);
  sub_100075EB0(&qword_100BEE748);
  v11 = sub_100098C88();
  v13 = type metadata accessor for ModifiedContent(v11, v10, v12);
  v14 = sub_100796510();
  sub_1000DA1FC(&qword_100C05F68, &qword_100C05F50);
  v27[12] = v2;
  v27[13] = v15;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v5);
  sub_1000DA1FC(&qword_100BD0660, &qword_100BD0668);
  v27[10] = WitnessTable;
  v27[11] = v17;
  v18 = sub_1000D0348((uint64_t)&protocol conformance descriptor for <> ModifiedContent<A, B>);
  sub_1000DA1FC((unint64_t *)&unk_100C0A590, &qword_100BD0658);
  v27[8] = v18;
  v27[9] = v19;
  v20 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
  sub_1000DA1FC((unint64_t *)&unk_100C0A090, &qword_100C05F58);
  v27[6] = v20;
  v27[7] = v21;
  v22 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v10);
  sub_10003D2DC(&qword_100BEE740, &qword_100BEE748);
  v27[4] = v22;
  v27[5] = v23;
  v27[0] = &type metadata for ComputedGridGeometryPreferenceKey;
  v27[1] = v13;
  v27[2] = v14;
  v27[3] = sub_1000D1450();
  v24 = type metadata accessor for _OverlayPreferenceModifier(255, v27);
  type metadata accessor for ModifiedContent(255, v26, v24);
  sub_100796950();
  swift_getWitnessTable(&protocol conformance descriptor for _OverlayPreferenceModifier<A, B>, v24);
  return sub_1000D1450();
}

void sub_100799750()
{
  sub_10000F1C8(&qword_100C060C0, type metadata accessor for LocationViewGeometry);
}

unint64_t sub_10079977C(uint64_t a1)
{
  unint64_t result;

  result = sub_100796510();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1007997A0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AC0FE8, 1);
}

uint64_t sub_1007997B0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = (int *)sub_1000CFF30();
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(v0 + v4) == 1)
  {
    v7 = v6 + *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v8 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  v9 = v6 + v1[5];
  sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (sub_1000C14DC() == 1)
  {
    v10 = type metadata accessor for UserInterfaceSizeClass(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v9, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  }
  else
  {
    sub_1000DAF0C();
  }
  sub_1000C58C0(v1[6]);
  sub_1000C58C0(v1[7]);
  v11 = v6 + v1[8];
  sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v11) == 1)
  {
    v12 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    sub_1000DAF0C();
  }
  v13 = v6 + v1[9];
  if (sub_1000C14DC() == 1)
  {
    v14 = type metadata accessor for UserInterfaceSizeClass(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v13, 1, v14))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    sub_1000DAF0C();
  }
  sub_1000BF398(*(_QWORD *)(v6 + v1[10]), *(_QWORD *)(v6 + v1[10] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

double sub_100799994()
{
  uint64_t *v0;

  sub_1000CFF30();
  sub_1000CD9D0();
  return sub_100796C50(v0);
}

unint64_t sub_1007999D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C06108;
  if (!qword_100C06108)
  {
    v1 = sub_100075EB0(&qword_100C060E8);
    sub_10003D2DC(&qword_100C06110, &qword_100C060E0);
    sub_10003D2DC(&qword_100C06118, &qword_100C06120);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C06108);
  }
  return result;
}

id sub_100799A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(void);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, char *, uint64_t);
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  _QWORD *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  id v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  objc_class *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  objc_super v93;

  v88 = a4;
  v81 = a3;
  v92 = a1;
  v89 = (objc_class *)sub_10009D408();
  v7 = sub_1000B2F08();
  v79 = *(_QWORD *)(v7 - 8);
  v80 = v7;
  __chkstk_darwin(v7);
  sub_1000986FC();
  v78 = v8;
  sub_10009D2A4();
  __chkstk_darwin(v9);
  sub_100079F7C();
  v77 = v10;
  v11 = sub_1000BE878();
  v90 = *(_QWORD *)(v11 - 8);
  v91 = v11;
  __chkstk_darwin(v11);
  sub_100098728();
  v85 = v13 - v12;
  v14 = (int *)sub_10009DF90();
  sub_1000B42B0();
  __chkstk_darwin(v15);
  sub_100098728();
  v18 = (_QWORD *)(v17 - v16);
  sub_10003BDE0();
  sub_1000B42B0();
  __chkstk_darwin(v19);
  sub_1000986FC();
  v84 = v20;
  sub_10009D2A4();
  __chkstk_darwin(v21);
  v23 = (char *)&v72 - v22;
  sub_1000AE9DC();
  sub_1000B42B0();
  __chkstk_darwin(v24);
  sub_1000986FC();
  v83 = v25;
  sub_10009D2A4();
  __chkstk_darwin(v26);
  sub_100079F7C();
  v86 = v27;
  sub_1000BE800();
  sub_1000B42B0();
  __chkstk_darwin(v28);
  sub_1000986FC();
  v82 = v29;
  sub_10009D2A4();
  __chkstk_darwin(v30);
  sub_100079F7C();
  v32 = v31;
  v33 = sub_1000C2148();
  sub_1000B42B0();
  __chkstk_darwin(v34);
  v36 = (char *)&v72 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  sub_100079F7C();
  v39 = v38;
  v40 = a2;
  sub_100080C0C(a2, (uint64_t)v23, type metadata accessor for LocationWeatherDataState);
  if (swift_getEnumCaseMultiPayload(v23) == 1)
  {
    v41 = sub_1000BA294(&qword_100BC3358);
    v42 = (uint64_t)&v23[*(int *)(v41 + 48)];
    v43 = (uint64_t)&v23[*(int *)(v41 + 64)];
    v44 = (uint64_t)v23;
    v45 = v39;
    v76 = v39;
    sub_10007802C(v44, v39, type metadata accessor for WeatherData);
    v74 = v32;
    sub_10007802C(v42, v32, type metadata accessor for PreprocessedWeatherData);
    v46 = v86;
    sub_10007802C(v43, v86, type metadata accessor for NewsDataModel);
    v47 = *(void (**)(void))(v90 + 16);
    v73 = v33;
    v48 = v85;
    v49 = v91;
    v47();
    v75 = v40;
    v50 = v40;
    v51 = v84;
    sub_100080C0C(v50, v84, type metadata accessor for LocationWeatherDataState);
    sub_100080C0C(v45, (uint64_t)v36, type metadata accessor for WeatherData);
    sub_100080C0C(v46, v83, type metadata accessor for NewsDataModel);
    sub_100080C0C(v32, v82, type metadata accessor for PreprocessedWeatherData);
    *v18 = swift_getKeyPath(&unk_1009CA2A8);
    v52 = sub_1000BA294(&qword_100BC4F28);
    v53 = swift_storeEnumTagMultiPayload(v18, v52, 0);
    ((void (*)(char *, uint64_t, uint64_t, __n128))v47)((char *)v18 + v14[5], v48, v49, v53);
    *(double *)((char *)v18 + v14[6]) = a5;
    sub_100080C0C(v51, (uint64_t)v18 + v14[7], type metadata accessor for LocationWeatherDataState);
    sub_100080C0C((uint64_t)v36, (uint64_t)v18 + v14[8], type metadata accessor for WeatherData);
    v54 = v79;
    v55 = v80;
    v56 = *(void (**)(uint64_t, char *, uint64_t))(v79 + 16);
    v57 = v77;
    v56((uint64_t)v77, &v36[*(int *)(v73 + 24)], v80);
    v58 = v78;
    v56(v78, v57, v55);
    v59 = (char *)v87;
    v60 = v88;
    swift_retain();
    State.init(wrappedValue:)(v58, v55);
    sub_10009BDCC(*(uint64_t (**)(uint64_t, uint64_t))(v54 + 8));
    sub_1000215BC((uint64_t)v36, type metadata accessor for WeatherData);
    sub_1000215BC(v84, type metadata accessor for LocationWeatherDataState);
    v61 = v91;
    v62 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
    v62(v85, v91);
    sub_10007802C(v82, (uint64_t)v18 + v14[9], type metadata accessor for PreprocessedWeatherData);
    sub_10007802C(v83, (uint64_t)v18 + v14[10], type metadata accessor for NewsDataModel);
    v63 = (_QWORD *)((char *)v18 + v14[11]);
    *v63 = v81;
    v63[1] = v60;
    v64 = objc_allocWithZone((Class)sub_1000BA294(&qword_100C062B8));
    v65 = UIHostingController.init(rootView:)(v18);
    *(_QWORD *)&v59[OBJC_IVAR____TtC7Weather31WeatherDataEditorViewController_hostingController] = v65;
    v66 = v92;
    v67 = LocationModel.name.getter(v65);
    v68 = (uint64_t *)&v59[OBJC_IVAR____TtC7Weather31WeatherDataEditorViewController_locationName];
    *v68 = v67;
    v68[1] = v69;

    v93.receiver = v59;
    v93.super_class = v89;
    v70 = objc_msgSendSuper2(&v93, "initWithNibName:bundle:", 0, 0);
    swift_release(v60);
    sub_1000215BC(v75, type metadata accessor for LocationWeatherDataState);
    v62(v66, v61);
    sub_1000215BC(v86, type metadata accessor for NewsDataModel);
    sub_1000215BC(v74, type metadata accessor for PreprocessedWeatherData);
    sub_1000215BC(v76, type metadata accessor for WeatherData);
  }
  else
  {
    swift_release(v88);
    sub_1000215BC(a2, type metadata accessor for LocationWeatherDataState);
    (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v92, v91);
    sub_1000215BC((uint64_t)v23, type metadata accessor for LocationWeatherDataState);
    swift_deallocPartialClassInstance(v87, v89, 32, 7);
    return 0;
  }
  return v70;
}

void sub_100799FF4()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001009F8EA0, "Weather/WeatherDataEditorViewController.swift", 45, 2);
  __break(1u);
}

id sub_10079A058()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id result;
  void *v9;
  uint64_t v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  objc_super v16;

  v16.receiver = v0;
  v16.super_class = (Class)sub_10009D408();
  v7 = sub_10009C9AC((uint64_t)v16.super_class, "viewWillLayoutSubviews", v1, v2, v3, v4, v5, v6, v16);
  result = sub_1000C45D0((uint64_t)v7, "view");
  if (result)
  {
    v9 = result;
    objc_msgSend(result, "sizeToFit");

    result = sub_1000C45D0(v10, "view");
    if (result)
    {
      v11 = result;
      objc_msgSend(result, "frame");
      v13 = v12;
      v15 = v14;

      return objc_msgSend(v0, "setPreferredContentSize:", v13, v15);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_10079A14C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  objc_super v26;

  v26.receiver = v0;
  v26.super_class = (Class)sub_10009D408();
  sub_10009C9AC((uint64_t)v26.super_class, "viewDidLoad", v1, v2, v3, v4, v5, v6, v26);
  v7 = *(void **)&v0[OBJC_IVAR____TtC7Weather31WeatherDataEditorViewController_hostingController];
  v8 = sub_1000C45D0((uint64_t)objc_msgSend(v0, "addChildViewController:", v7), "view");
  if (!v8)
  {
    __break(1u);
    goto LABEL_7;
  }
  v9 = v8;
  v10 = sub_1000C40A8();
  if (!v10)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v11 = v10;
  objc_msgSend(v9, "addSubview:", v10);

  v12 = sub_1000C40A8();
  if (!v12)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v13 = v12;
  v14 = sub_1000C45D0((uint64_t)v12, "view");
  if (v14)
  {
    v15 = v14;
    objc_msgSend(v14, "bounds");
    v17 = v16;
    v19 = v18;
    v21 = v20;
    v23 = v22;

    objc_msgSend(v13, "setFrame:", v17, v19, v21, v23);
    objc_msgSend(v7, "didMoveToParentViewController:", v0);
    v24 = *(_QWORD *)&v0[OBJC_IVAR____TtC7Weather31WeatherDataEditorViewController_locationName];
    v25 = *(_QWORD *)&v0[OBJC_IVAR____TtC7Weather31WeatherDataEditorViewController_locationName + 8];
    swift_bridgeObjectRetain();
    sub_1007A6780(v24, v25, v0);
    swift_bridgeObjectRelease();
    return;
  }
LABEL_9:
  __break(1u);
}

void sub_10079A304()
{
  _swift_stdlib_reportUnimplementedInitializer("Weather.WeatherDataEditorViewController", 39, "init(nibName:bundle:)", 21, 0);
  __break(1u);
}

uint64_t type metadata accessor for WeatherDataEditorViewController()
{
  return objc_opt_self(_TtC7Weather31WeatherDataEditorViewController);
}

_QWORD *sub_10079A3B0(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v3;
  int v5;
  int *v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  void (*v92)(char *, char *, uint64_t, __n128);
  __n128 v93;
  int *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  void (*v123)(char *, char *, uint64_t, __n128);
  __n128 v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  void (*v149)(char *, char *, uint64_t, __n128);
  __n128 v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  void (*v165)(char *, char *, uint64_t, __n128);
  __n128 v166;
  int *v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  __n128 v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  char *v226;
  uint64_t v227;
  int *v228;
  uint64_t v229;
  char *v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  char *v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  void (*v287)(char *, char *, uint64_t, __n128);
  __n128 v288;
  int *v289;
  uint64_t v290;
  char *v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  char *v300;
  char *v301;
  uint64_t v302;
  char *v303;
  char *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  char *v308;
  char *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  char *v316;
  uint64_t v317;
  void (*v318)(char *, char *, uint64_t, __n128);
  __n128 v319;
  uint64_t v320;
  uint64_t v321;
  char *v322;
  char *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  char *v327;
  char *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  char *v342;
  char *v343;
  void (*v344)(char *, char *, uint64_t, __n128);
  __n128 v345;
  uint64_t v346;
  char *v347;
  char *v348;
  uint64_t v349;
  uint64_t v350;
  char *v351;
  char *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  char *v357;
  char *v358;
  uint64_t v359;
  void (*v360)(char *, char *, uint64_t, __n128);
  __n128 v361;
  int *v362;
  uint64_t v363;
  char *v364;
  char *v365;
  uint64_t v366;
  uint64_t v367;
  char *v368;
  char *v369;
  uint64_t v370;
  char *v371;
  char *v372;
  uint64_t v373;
  char *v374;
  char *v375;
  uint64_t v376;
  char *v377;
  char *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  char *v393;
  char *v394;
  __n128 v395;
  uint64_t v396;
  char *v397;
  char *v398;
  uint64_t v399;
  uint64_t v400;
  char *v401;
  char *v402;
  uint64_t v403;
  uint64_t v404;
  char *v405;
  char *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  _QWORD *v415;
  _QWORD *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  _QWORD *v422;
  _QWORD *v423;
  uint64_t v424;
  char *v425;
  char *v426;
  __n128 v427;
  uint64_t v428;
  char *v430;
  void (*v431)(char *, char *, uint64_t);
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  void (*v439)(char *, char *, uint64_t, __n128);
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  void (*v446)(char *, char *, uint64_t, __n128);
  _QWORD *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  _QWORD *v451;
  uint64_t v452;
  int *v453;
  _QWORD *v454;
  _QWORD *v455;
  int *v456;
  int *v457;
  char *v458;
  char *v459;
  char *v460;
  char *v461;

  v3 = a2;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    v15 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    goto LABEL_102;
  }
  v6 = a3;
  v7 = sub_1000BA294(&qword_100BC4F28);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v3);
  *a1 = *v3;
  if (EnumCaseMultiPayload == 1)
  {
    a1[1] = v3[1];
    swift_retain();
    swift_retain();
    v9 = *(int *)(sub_1000BA294(&qword_100BC6510) + 32);
    v10 = (char *)a1 + v9;
    v11 = (char *)v3 + v9;
    v12 = type metadata accessor for PresentationMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = 1;
  }
  else
  {
    swift_retain();
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, v7, v13);
  v16 = v6[5];
  v17 = (char *)a1 + v16;
  v18 = (char *)v3 + v16;
  v19 = type metadata accessor for LocationModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  v20 = v6[7];
  *(_QWORD *)((char *)a1 + v6[6]) = *(_QWORD *)((char *)v3 + v6[6]);
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)v3 + v20);
  v23 = type metadata accessor for LocationWeatherDataState(0);
  v24 = swift_getEnumCaseMultiPayload(v22);
  v454 = v3;
  v455 = a1;
  v453 = v6;
  if (v24 == 2)
  {
    v27 = v22[1];
    *v21 = *v22;
    v21[1] = v27;
    swift_bridgeObjectRetain();
    v28 = v21;
    v29 = v23;
    v30 = 2;
    goto LABEL_58;
  }
  if (v24 == 1)
  {
    v449 = v23;
    v31 = v22[1];
    *v21 = *v22;
    v21[1] = v31;
    v32 = (int *)type metadata accessor for WeatherData(0);
    v33 = v32[5];
    v34 = (char *)v21 + v33;
    v35 = (char *)v22 + v33;
    v36 = type metadata accessor for Locale(0);
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v35, 1, v36))
    {
      v37 = sub_1000BA294(&qword_100BC3340);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v34, 0, 1, v36);
    }
    v39 = v32[6];
    v40 = (char *)v21 + v39;
    v41 = (char *)v22 + v39;
    v42 = type metadata accessor for WeatherDataModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
    v43 = v32[7];
    v44 = (char *)v21 + v43;
    v45 = (char *)v22 + v43;
    v46 = sub_1000BA294(&qword_100BC3348);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v45, 1, v46))
    {
      v47 = type metadata accessor for WeatherData.CachingState(0);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      v48 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v44, v45, v48);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v44, 0, 1, v46);
    }
    v49 = v32[8];
    v50 = (_QWORD *)((char *)v21 + v49);
    v51 = (_QWORD *)((char *)v22 + v49);
    v52 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
    v53 = swift_getEnumCaseMultiPayload(v51);
    if (v53 == 1)
    {
      v58 = type metadata accessor for WeatherStatisticsModel(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v50, v51, v58);
      v55 = v50;
      v56 = v52;
      v57 = 1;
    }
    else
    {
      if (v53)
      {
        memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
        goto LABEL_27;
      }
      v54 = v51[1];
      *v50 = *v51;
      v50[1] = v54;
      swift_bridgeObjectRetain();
      v55 = v50;
      v56 = v52;
      v57 = 0;
    }
    swift_storeEnumTagMultiPayload(v55, v56, v57);
LABEL_27:
    v59 = v32[9];
    v60 = (char *)v21 + v59;
    v61 = (char *)v22 + v59;
    v62 = type metadata accessor for WeatherDataOverrides(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v61, 1, v62))
    {
      v63 = sub_1000BA294(&qword_100BC3350);
      memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      v64 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v61, 1, v64))
      {
        v65 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v60, v61, v64);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v60, 0, 1, v64);
      }
      v66 = *(int *)(v62 + 20);
      v67 = &v60[v66];
      v68 = &v61[v66];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v68, 1, v64))
      {
        v69 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v67, v68, v64);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v67, 0, 1, v64);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v60, 0, 1, v62);
    }
    v445 = sub_1000BA294(&qword_100BC3358);
    v447 = v22;
    v70 = *(int *)(v445 + 48);
    v451 = v21;
    v71 = (char *)v21 + v70;
    v72 = (char *)v22 + v70;
    v73 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v71, v72, v73);
    v74 = type metadata accessor for PreprocessedWeatherData(0);
    *(_QWORD *)&v71[*(int *)(v74 + 20)] = *(_QWORD *)&v72[*(int *)(v74 + 20)];
    v456 = (int *)v74;
    v458 = v71;
    v75 = *(int *)(v74 + 24);
    v76 = &v71[v75];
    v460 = v72;
    v77 = &v72[v75];
    v78 = *(_QWORD *)&v72[v75 + 8];
    *(_QWORD *)v76 = *(_QWORD *)&v72[v75];
    *((_QWORD *)v76 + 1) = v78;
    v79 = *(_QWORD *)&v72[v75 + 24];
    *((_QWORD *)v76 + 2) = *(_QWORD *)&v72[v75 + 16];
    *((_QWORD *)v76 + 3) = v79;
    v80 = *(_QWORD *)&v72[v75 + 40];
    *((_QWORD *)v76 + 4) = *(_QWORD *)&v72[v75 + 32];
    *((_QWORD *)v76 + 5) = v80;
    v81 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
    v82 = *(int *)(v81 + 28);
    v83 = &v76[v82];
    v84 = &v77[v82];
    v85 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v84, 1, v85))
    {
      v86 = sub_1000BA294(&qword_100BC3360);
      memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    }
    else
    {
      v87 = *((_QWORD *)v84 + 1);
      *(_QWORD *)v83 = *(_QWORD *)v84;
      *((_QWORD *)v83 + 1) = v87;
      v88 = *(int *)(v85 + 20);
      v89 = &v83[v88];
      v90 = &v84[v88];
      v91 = type metadata accessor for TemperatureScaleConfiguration(0);
      v92 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v91 - 8) + 16);
      v93 = swift_bridgeObjectRetain();
      v92(v89, v90, v91, v93);
      v94 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
      *(_QWORD *)&v89[v94[5]] = *(_QWORD *)&v90[v94[5]];
      *(_QWORD *)&v89[v94[6]] = *(_QWORD *)&v90[v94[6]];
      *(_QWORD *)&v89[v94[7]] = *(_QWORD *)&v90[v94[7]];
      v95 = v94[8];
      v96 = &v89[v95];
      v97 = &v90[v95];
      v99 = *(_QWORD *)v97;
      v98 = *((_QWORD *)v97 + 1);
      *(_QWORD *)v96 = v99;
      *((_QWORD *)v96 + 1) = v98;
      v89[v94[9]] = v90[v94[9]];
      swift_bridgeObjectRetain();
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v83, 0, 1, v85);
    }
    v100 = *(int *)(v81 + 32);
    v101 = &v76[v100];
    v102 = &v77[v100];
    v103 = *((_QWORD *)v102 + 1);
    *(_QWORD *)v101 = *(_QWORD *)v102;
    *((_QWORD *)v101 + 1) = v103;
    v104 = v456[7];
    v105 = &v458[v104];
    v106 = &v460[v104];
    *(_QWORD *)&v458[v104] = *(_QWORD *)&v460[v104];
    v107 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
    v108 = &v105[v107];
    v109 = &v106[v107];
    v110 = type metadata accessor for WeatherDescription(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v109, 1, v110))
    {
      v111 = sub_1000BA294(&qword_100BC3368);
      memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v110 - 8) + 16))(v108, v109, v110);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v108, 0, 1, v110);
    }
    v112 = v456[8];
    v113 = &v458[v112];
    v114 = &v460[v112];
    v115 = *(_QWORD *)&v460[v112 + 8];
    *(_QWORD *)v113 = *(_QWORD *)&v460[v112];
    *((_QWORD *)v113 + 1) = v115;
    v116 = *(_QWORD *)&v460[v112 + 24];
    *((_QWORD *)v113 + 2) = *(_QWORD *)&v460[v112 + 16];
    *((_QWORD *)v113 + 3) = v116;
    v117 = *(_QWORD *)&v460[v112 + 40];
    *((_QWORD *)v113 + 4) = *(_QWORD *)&v460[v112 + 32];
    *((_QWORD *)v113 + 5) = v117;
    v118 = *(_QWORD *)&v460[v112 + 56];
    *((_QWORD *)v113 + 6) = *(_QWORD *)&v460[v112 + 48];
    *((_QWORD *)v113 + 7) = v118;
    v119 = *(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32);
    v120 = &v113[v119];
    v121 = &v114[v119];
    v122 = type metadata accessor for Date(0);
    v123 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v122 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v124 = swift_bridgeObjectRetain();
    v439 = v123;
    v441 = v122;
    v123(v120, v121, v122, v124);
    v125 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
    v126 = *(int *)(v125 + 20);
    v127 = &v120[v126];
    v128 = &v121[v126];
    v129 = type metadata accessor for Elevation(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v128, 1, v129))
    {
      v130 = sub_1000BA294(&qword_100BC3370);
      memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v129 - 8) + 16))(v127, v128, v129);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v127, 0, 1, v129);
    }
    v131 = *(int *)(v125 + 24);
    v132 = &v120[v131];
    v133 = &v121[v131];
    v134 = type metadata accessor for BackgroundMoonData(0);
    v443 = v125;
    v435 = v134;
    v437 = v129;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v133, 1, v134))
    {
      v135 = sub_1000BA294(&qword_100BC3378);
      memcpy(v132, v133, *(_QWORD *)(*(_QWORD *)(v135 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v134 - 8) + 16))(v132, v133, v134);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v132, 0, 1, v134);
    }
    v136 = v456[9];
    v137 = &v458[v136];
    v138 = &v460[v136];
    v139 = *((_QWORD *)v138 + 1);
    *(_QWORD *)v137 = *(_QWORD *)v138;
    *((_QWORD *)v137 + 1) = v139;
    v140 = *((_QWORD *)v138 + 3);
    *((_QWORD *)v137 + 2) = *((_QWORD *)v138 + 2);
    *((_QWORD *)v137 + 3) = v140;
    v141 = *((_QWORD *)v138 + 5);
    *((_QWORD *)v137 + 4) = *((_QWORD *)v138 + 4);
    *((_QWORD *)v137 + 5) = v141;
    v142 = *((_QWORD *)v138 + 7);
    *((_QWORD *)v137 + 6) = *((_QWORD *)v138 + 6);
    *((_QWORD *)v137 + 7) = v142;
    v143 = *((_QWORD *)v138 + 9);
    *((_QWORD *)v137 + 8) = *((_QWORD *)v138 + 8);
    *((_QWORD *)v137 + 9) = v143;
    v144 = *((_QWORD *)v138 + 11);
    *((_QWORD *)v137 + 10) = *((_QWORD *)v138 + 10);
    *((_QWORD *)v137 + 11) = v144;
    v145 = *((_QWORD *)v138 + 13);
    *((_QWORD *)v137 + 12) = *((_QWORD *)v138 + 12);
    *((_QWORD *)v137 + 13) = v145;
    v146 = v456[10];
    v147 = &v458[v146];
    v148 = &v460[v146];
    v149 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v110 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v150 = swift_bridgeObjectRetain();
    v149(v147, v148, v110, v150);
    v151 = *(int *)(type metadata accessor for UVIndexComponentPreprocessedDataModel(0) + 20);
    v152 = &v147[v151];
    v153 = &v148[v151];
    v154 = *((_QWORD *)v153 + 1);
    *(_QWORD *)v152 = *(_QWORD *)v153;
    *((_QWORD *)v152 + 1) = v154;
    v155 = v456[11];
    v156 = &v458[v155];
    v157 = &v460[v155];
    v158 = *((_QWORD *)v157 + 1);
    *(_QWORD *)v156 = *(_QWORD *)v157;
    *((_QWORD *)v156 + 1) = v158;
    v159 = *((_QWORD *)v157 + 3);
    *((_QWORD *)v156 + 2) = *((_QWORD *)v157 + 2);
    *((_QWORD *)v156 + 3) = v159;
    v160 = *((_QWORD *)v157 + 5);
    *((_QWORD *)v156 + 4) = *((_QWORD *)v157 + 4);
    *((_QWORD *)v156 + 5) = v160;
    v161 = v456[12];
    v162 = &v458[v161];
    v163 = &v460[v161];
    v164 = type metadata accessor for PressureTrend(0);
    v165 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v164 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v166 = swift_bridgeObjectRetain();
    v165(v162, v163, v164, v166);
    v167 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
    v168 = v167[5];
    v169 = &v162[v168];
    v170 = &v163[v168];
    v171 = *((_QWORD *)v170 + 1);
    *(_QWORD *)v169 = *(_QWORD *)v170;
    *((_QWORD *)v169 + 1) = v171;
    v172 = v167[6];
    v173 = &v162[v172];
    v174 = &v163[v172];
    v434 = *((_QWORD *)v174 + 1);
    *(_QWORD *)v173 = *(_QWORD *)v174;
    *((_QWORD *)v173 + 1) = v434;
    v175 = v167[7];
    v176 = &v162[v175];
    v177 = &v163[v175];
    v433 = *((_QWORD *)v177 + 1);
    *(_QWORD *)v176 = *(_QWORD *)v177;
    *((_QWORD *)v176 + 1) = v433;
    *(_QWORD *)&v162[v167[8]] = *(_QWORD *)&v163[v167[8]];
    v178 = v167[9];
    v179 = &v162[v178];
    v180 = &v163[v178];
    v432 = *((_QWORD *)v180 + 1);
    *(_QWORD *)v179 = *(_QWORD *)v180;
    *((_QWORD *)v179 + 1) = v432;
    v181 = v456[13];
    v182 = &v458[v181];
    v183 = &v460[v181];
    v184 = *((_QWORD *)v183 + 1);
    *(_QWORD *)v182 = *(_QWORD *)v183;
    *((_QWORD *)v182 + 1) = v184;
    v185 = *((_QWORD *)v183 + 3);
    *((_QWORD *)v182 + 2) = *((_QWORD *)v183 + 2);
    *((_QWORD *)v182 + 3) = v185;
    v186 = *((_QWORD *)v183 + 5);
    *((_QWORD *)v182 + 4) = *((_QWORD *)v183 + 4);
    *((_QWORD *)v182 + 5) = v186;
    v187 = *((_QWORD *)v183 + 7);
    *((_QWORD *)v182 + 6) = *((_QWORD *)v183 + 6);
    *((_QWORD *)v182 + 7) = v187;
    v188 = *((_QWORD *)v183 + 9);
    *((_QWORD *)v182 + 8) = *((_QWORD *)v183 + 8);
    *((_QWORD *)v182 + 9) = v188;
    v189 = *((_QWORD *)v183 + 11);
    *((_QWORD *)v182 + 10) = *((_QWORD *)v183 + 10);
    *((_QWORD *)v182 + 11) = v189;
    v190 = *((_QWORD *)v183 + 13);
    *((_QWORD *)v182 + 12) = *((_QWORD *)v183 + 12);
    *((_QWORD *)v182 + 13) = v190;
    v191 = *((_QWORD *)v183 + 15);
    *((_QWORD *)v182 + 14) = *((_QWORD *)v183 + 14);
    *((_QWORD *)v182 + 15) = v191;
    v192 = *((_QWORD *)v183 + 17);
    *((_QWORD *)v182 + 16) = *((_QWORD *)v183 + 16);
    *((_QWORD *)v182 + 17) = v192;
    v193 = *((_QWORD *)v183 + 19);
    *((_QWORD *)v182 + 18) = *((_QWORD *)v183 + 18);
    *((_QWORD *)v182 + 19) = v193;
    v194 = *((_QWORD *)v183 + 21);
    *((_QWORD *)v182 + 20) = *((_QWORD *)v183 + 20);
    *((_QWORD *)v182 + 21) = v194;
    v195 = *((_QWORD *)v183 + 23);
    *((_QWORD *)v182 + 22) = *((_QWORD *)v183 + 22);
    *((_QWORD *)v182 + 23) = v195;
    v196 = *((_QWORD *)v183 + 25);
    *((_QWORD *)v182 + 24) = *((_QWORD *)v183 + 24);
    *((_QWORD *)v182 + 25) = v196;
    *((_OWORD *)v182 + 13) = *((_OWORD *)v183 + 13);
    *((_QWORD *)v182 + 28) = *((_QWORD *)v183 + 28);
    v197 = v456[14];
    v198 = &v458[v197];
    v430 = &v460[v197];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v199 = swift_bridgeObjectRetain();
    v439(v198, v430, v441, v199);
    v200 = *(int *)(v443 + 20);
    v201 = &v198[v200];
    v202 = &v430[v200];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v430[v200], 1, v437))
    {
      v203 = sub_1000BA294(&qword_100BC3370);
      memcpy(v201, v202, *(_QWORD *)(*(_QWORD *)(v203 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v437 - 8) + 16))(v201, v202, v437);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v201, 0, 1, v437);
    }
    v204 = *(int *)(v443 + 24);
    v205 = &v198[v204];
    v206 = &v430[v204];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v430[v204], 1, v435))
    {
      v207 = sub_1000BA294(&qword_100BC3378);
      memcpy(v205, v206, *(_QWORD *)(*(_QWORD *)(v207 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v435 - 8) + 16))(v205, v206, v435);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v205, 0, 1, v435);
    }
    v208 = v456[15];
    v209 = &v458[v208];
    v210 = &v460[v208];
    v211 = *((_QWORD *)v210 + 1);
    *(_QWORD *)v209 = *(_QWORD *)v210;
    *((_QWORD *)v209 + 1) = v211;
    v212 = *((_QWORD *)v210 + 3);
    *((_QWORD *)v209 + 2) = *((_QWORD *)v210 + 2);
    *((_QWORD *)v209 + 3) = v212;
    v213 = *((_QWORD *)v210 + 5);
    *((_QWORD *)v209 + 4) = *((_QWORD *)v210 + 4);
    *((_QWORD *)v209 + 5) = v213;
    v214 = *((_QWORD *)v210 + 7);
    *((_QWORD *)v209 + 6) = *((_QWORD *)v210 + 6);
    *((_QWORD *)v209 + 7) = v214;
    v215 = *((_QWORD *)v210 + 9);
    *((_QWORD *)v209 + 8) = *((_QWORD *)v210 + 8);
    *((_QWORD *)v209 + 9) = v215;
    v216 = *((_QWORD *)v210 + 11);
    *((_QWORD *)v209 + 10) = *((_QWORD *)v210 + 10);
    *((_QWORD *)v209 + 11) = v216;
    v217 = *((_QWORD *)v210 + 13);
    *((_QWORD *)v209 + 12) = *((_QWORD *)v210 + 12);
    *((_QWORD *)v209 + 13) = v217;
    v218 = *(int *)(v445 + 64);
    v219 = (_QWORD *)((char *)v451 + v218);
    v220 = (_QWORD *)((char *)v447 + v218);
    v221 = type metadata accessor for NewsDataModel(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload(v220) == 1)
    {
      *v219 = *v220;
      swift_bridgeObjectRetain();
      v222 = 1;
    }
    else
    {
      v223 = type metadata accessor for News(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v223 - 8) + 16))(v219, v220, v223);
      v222 = 0;
    }
    v3 = v454;
    a1 = v455;
    v6 = v453;
    swift_storeEnumTagMultiPayload(v219, v221, v222);
    v29 = v449;
    v28 = v451;
    v30 = 1;
    goto LABEL_58;
  }
  if (v24)
  {
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_59;
  }
  v25 = type metadata accessor for NewsDataModel(0);
  if (swift_getEnumCaseMultiPayload(v22) == 1)
  {
    *v21 = *v22;
    swift_bridgeObjectRetain();
    v26 = 1;
  }
  else
  {
    v38 = type metadata accessor for News(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v21, v22, v38);
    v26 = 0;
  }
  swift_storeEnumTagMultiPayload(v21, v25, v26);
  v28 = v21;
  v29 = v23;
  v30 = 0;
LABEL_58:
  swift_storeEnumTagMultiPayload(v28, v29, v30);
LABEL_59:
  v224 = v6[8];
  v225 = (_QWORD *)((char *)a1 + v224);
  v226 = (char *)v3 + v224;
  v227 = *(_QWORD *)((char *)v3 + v224 + 8);
  *v225 = *(_QWORD *)((char *)v3 + v224);
  v225[1] = v227;
  v228 = (int *)type metadata accessor for WeatherData(0);
  v229 = v228[5];
  v230 = (char *)v225 + v229;
  v231 = &v226[v229];
  v232 = type metadata accessor for Locale(0);
  swift_bridgeObjectRetain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v231, 1, v232))
  {
    v233 = sub_1000BA294(&qword_100BC3340);
    memcpy(v230, v231, *(_QWORD *)(*(_QWORD *)(v233 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v232 - 8) + 16))(v230, v231, v232);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v230, 0, 1, v232);
  }
  v234 = v228[6];
  v235 = (char *)v225 + v234;
  v236 = &v226[v234];
  v237 = type metadata accessor for WeatherDataModel(0);
  v431 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v237 - 8) + 16);
  v431(v235, v236, v237);
  v238 = v228[7];
  v239 = (char *)v225 + v238;
  v240 = &v226[v238];
  v241 = sub_1000BA294(&qword_100BC3348);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v240, 1, v241))
  {
    v242 = type metadata accessor for WeatherData.CachingState(0);
    memcpy(v239, v240, *(_QWORD *)(*(_QWORD *)(v242 - 8) + 64));
  }
  else
  {
    v243 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v243 - 8) + 16))(v239, v240, v243);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v239, 0, 1, v241);
  }
  v244 = v228[8];
  v245 = (_QWORD *)((char *)v225 + v244);
  v246 = &v226[v244];
  v247 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
  v248 = swift_getEnumCaseMultiPayload(v246);
  if (v248 == 1)
  {
    v253 = type metadata accessor for WeatherStatisticsModel(0);
    (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v253 - 8) + 16))(v245, v246, v253);
    v250 = v245;
    v251 = v247;
    v252 = 1;
  }
  else
  {
    if (v248)
    {
      memcpy(v245, v246, *(_QWORD *)(*(_QWORD *)(v247 - 8) + 64));
      goto LABEL_71;
    }
    v249 = *((_QWORD *)v246 + 1);
    *v245 = *(_QWORD *)v246;
    v245[1] = v249;
    swift_bridgeObjectRetain();
    v250 = v245;
    v251 = v247;
    v252 = 0;
  }
  swift_storeEnumTagMultiPayload(v250, v251, v252);
LABEL_71:
  v254 = v228[9];
  v255 = (char *)v225 + v254;
  v256 = &v226[v254];
  v257 = type metadata accessor for WeatherDataOverrides(0);
  v452 = v237;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v256, 1, v257))
  {
    v258 = sub_1000BA294(&qword_100BC3350);
    memcpy(v255, v256, *(_QWORD *)(*(_QWORD *)(v258 - 8) + 64));
  }
  else
  {
    v259 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v256, 1, v259))
    {
      v260 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v255, v256, *(_QWORD *)(*(_QWORD *)(v260 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v259 - 8) + 16))(v255, v256, v259);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v255, 0, 1, v259);
    }
    v261 = *(int *)(v257 + 20);
    v262 = &v255[v261];
    v263 = &v256[v261];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v263, 1, v259))
    {
      v264 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v262, v263, *(_QWORD *)(*(_QWORD *)(v264 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v259 - 8) + 16))(v262, v263, v259);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v262, 0, 1, v259);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v255, 0, 1, v257);
  }
  v265 = v6[9];
  v266 = (char *)a1 + v265;
  v267 = (char *)v3 + v265;
  v268 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v268 - 8) + 16))(v266, v267, v268);
  v269 = type metadata accessor for PreprocessedWeatherData(0);
  *(_QWORD *)&v266[*(int *)(v269 + 20)] = *(_QWORD *)&v267[*(int *)(v269 + 20)];
  v457 = (int *)v269;
  v459 = v266;
  v270 = *(int *)(v269 + 24);
  v271 = &v266[v270];
  v461 = v267;
  v272 = &v267[v270];
  v273 = *(_QWORD *)&v267[v270 + 8];
  *(_QWORD *)v271 = *(_QWORD *)&v267[v270];
  *((_QWORD *)v271 + 1) = v273;
  v274 = *(_QWORD *)&v267[v270 + 24];
  *((_QWORD *)v271 + 2) = *(_QWORD *)&v267[v270 + 16];
  *((_QWORD *)v271 + 3) = v274;
  v275 = *(_QWORD *)&v267[v270 + 40];
  *((_QWORD *)v271 + 4) = *(_QWORD *)&v267[v270 + 32];
  *((_QWORD *)v271 + 5) = v275;
  v276 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
  v277 = *(int *)(v276 + 28);
  v278 = &v271[v277];
  v279 = &v272[v277];
  v280 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v279, 1, v280))
  {
    v281 = sub_1000BA294(&qword_100BC3360);
    memcpy(v278, v279, *(_QWORD *)(*(_QWORD *)(v281 - 8) + 64));
  }
  else
  {
    v282 = *((_QWORD *)v279 + 1);
    *(_QWORD *)v278 = *(_QWORD *)v279;
    *((_QWORD *)v278 + 1) = v282;
    v283 = *(int *)(v280 + 20);
    v284 = &v278[v283];
    v285 = &v279[v283];
    v286 = type metadata accessor for TemperatureScaleConfiguration(0);
    v287 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v286 - 8) + 16);
    v288 = swift_bridgeObjectRetain();
    v287(v284, v285, v286, v288);
    v289 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
    *(_QWORD *)&v284[v289[5]] = *(_QWORD *)&v285[v289[5]];
    *(_QWORD *)&v284[v289[6]] = *(_QWORD *)&v285[v289[6]];
    *(_QWORD *)&v284[v289[7]] = *(_QWORD *)&v285[v289[7]];
    v290 = v289[8];
    v291 = &v284[v290];
    v292 = &v285[v290];
    v294 = *(_QWORD *)v292;
    v293 = *((_QWORD *)v292 + 1);
    *(_QWORD *)v291 = v294;
    *((_QWORD *)v291 + 1) = v293;
    v284[v289[9]] = v285[v289[9]];
    swift_bridgeObjectRetain();
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v278, 0, 1, v280);
  }
  v295 = *(int *)(v276 + 32);
  v296 = &v271[v295];
  v297 = &v272[v295];
  v298 = *((_QWORD *)v297 + 1);
  *(_QWORD *)v296 = *(_QWORD *)v297;
  *((_QWORD *)v296 + 1) = v298;
  v299 = v457[7];
  v300 = &v459[v299];
  v301 = &v461[v299];
  *(_QWORD *)&v459[v299] = *(_QWORD *)&v461[v299];
  v302 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
  v303 = &v300[v302];
  v304 = &v301[v302];
  v305 = type metadata accessor for WeatherDescription(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v304, 1, v305))
  {
    v306 = sub_1000BA294(&qword_100BC3368);
    memcpy(v303, v304, *(_QWORD *)(*(_QWORD *)(v306 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v305 - 8) + 16))(v303, v304, v305);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v303, 0, 1, v305);
  }
  v307 = v457[8];
  v308 = &v459[v307];
  v309 = &v461[v307];
  v310 = *(_QWORD *)&v461[v307 + 8];
  *(_QWORD *)v308 = *(_QWORD *)&v461[v307];
  *((_QWORD *)v308 + 1) = v310;
  v311 = *(_QWORD *)&v461[v307 + 24];
  *((_QWORD *)v308 + 2) = *(_QWORD *)&v461[v307 + 16];
  *((_QWORD *)v308 + 3) = v311;
  v312 = *(_QWORD *)&v461[v307 + 40];
  *((_QWORD *)v308 + 4) = *(_QWORD *)&v461[v307 + 32];
  *((_QWORD *)v308 + 5) = v312;
  v313 = *(_QWORD *)&v461[v307 + 56];
  *((_QWORD *)v308 + 6) = *(_QWORD *)&v461[v307 + 48];
  *((_QWORD *)v308 + 7) = v313;
  v314 = *(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32);
  v315 = &v308[v314];
  v316 = &v309[v314];
  v317 = type metadata accessor for Date(0);
  v318 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v317 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v319 = swift_bridgeObjectRetain();
  v446 = v318;
  v448 = v317;
  v318(v315, v316, v317, v319);
  v320 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
  v321 = *(int *)(v320 + 20);
  v322 = &v315[v321];
  v323 = &v316[v321];
  v324 = type metadata accessor for Elevation(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v323, 1, v324))
  {
    v325 = sub_1000BA294(&qword_100BC3370);
    memcpy(v322, v323, *(_QWORD *)(*(_QWORD *)(v325 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v324 - 8) + 16))(v322, v323, v324);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v322, 0, 1, v324);
  }
  v326 = *(int *)(v320 + 24);
  v327 = &v315[v326];
  v328 = &v316[v326];
  v329 = type metadata accessor for BackgroundMoonData(0);
  v450 = v320;
  v442 = v329;
  v444 = v324;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v328, 1, v329))
  {
    v330 = sub_1000BA294(&qword_100BC3378);
    memcpy(v327, v328, *(_QWORD *)(*(_QWORD *)(v330 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v329 - 8) + 16))(v327, v328, v329);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v327, 0, 1, v329);
  }
  v331 = v457[9];
  v332 = &v459[v331];
  v333 = &v461[v331];
  v334 = *((_QWORD *)v333 + 1);
  *(_QWORD *)v332 = *(_QWORD *)v333;
  *((_QWORD *)v332 + 1) = v334;
  v335 = *((_QWORD *)v333 + 3);
  *((_QWORD *)v332 + 2) = *((_QWORD *)v333 + 2);
  *((_QWORD *)v332 + 3) = v335;
  v336 = *((_QWORD *)v333 + 5);
  *((_QWORD *)v332 + 4) = *((_QWORD *)v333 + 4);
  *((_QWORD *)v332 + 5) = v336;
  v337 = *((_QWORD *)v333 + 7);
  *((_QWORD *)v332 + 6) = *((_QWORD *)v333 + 6);
  *((_QWORD *)v332 + 7) = v337;
  v338 = *((_QWORD *)v333 + 9);
  *((_QWORD *)v332 + 8) = *((_QWORD *)v333 + 8);
  *((_QWORD *)v332 + 9) = v338;
  v339 = *((_QWORD *)v333 + 11);
  *((_QWORD *)v332 + 10) = *((_QWORD *)v333 + 10);
  *((_QWORD *)v332 + 11) = v339;
  v340 = *((_QWORD *)v333 + 13);
  *((_QWORD *)v332 + 12) = *((_QWORD *)v333 + 12);
  *((_QWORD *)v332 + 13) = v340;
  v341 = v457[10];
  v342 = &v459[v341];
  v343 = &v461[v341];
  v344 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v305 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v345 = swift_bridgeObjectRetain();
  v344(v342, v343, v305, v345);
  v346 = *(int *)(type metadata accessor for UVIndexComponentPreprocessedDataModel(0) + 20);
  v347 = &v342[v346];
  v348 = &v343[v346];
  v349 = *((_QWORD *)v348 + 1);
  *(_QWORD *)v347 = *(_QWORD *)v348;
  *((_QWORD *)v347 + 1) = v349;
  v350 = v457[11];
  v351 = &v459[v350];
  v352 = &v461[v350];
  v353 = *((_QWORD *)v352 + 1);
  *(_QWORD *)v351 = *(_QWORD *)v352;
  *((_QWORD *)v351 + 1) = v353;
  v354 = *((_QWORD *)v352 + 3);
  *((_QWORD *)v351 + 2) = *((_QWORD *)v352 + 2);
  *((_QWORD *)v351 + 3) = v354;
  v355 = *((_QWORD *)v352 + 5);
  *((_QWORD *)v351 + 4) = *((_QWORD *)v352 + 4);
  *((_QWORD *)v351 + 5) = v355;
  v356 = v457[12];
  v357 = &v459[v356];
  v358 = &v461[v356];
  v359 = type metadata accessor for PressureTrend(0);
  v360 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v359 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v361 = swift_bridgeObjectRetain();
  v360(v357, v358, v359, v361);
  v362 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
  v363 = v362[5];
  v364 = &v357[v363];
  v365 = &v358[v363];
  v366 = *((_QWORD *)v365 + 1);
  *(_QWORD *)v364 = *(_QWORD *)v365;
  *((_QWORD *)v364 + 1) = v366;
  v367 = v362[6];
  v368 = &v357[v367];
  v369 = &v358[v367];
  v440 = *((_QWORD *)v369 + 1);
  *(_QWORD *)v368 = *(_QWORD *)v369;
  *((_QWORD *)v368 + 1) = v440;
  v370 = v362[7];
  v371 = &v357[v370];
  v372 = &v358[v370];
  v438 = *((_QWORD *)v372 + 1);
  *(_QWORD *)v371 = *(_QWORD *)v372;
  *((_QWORD *)v371 + 1) = v438;
  *(_QWORD *)&v357[v362[8]] = *(_QWORD *)&v358[v362[8]];
  v373 = v362[9];
  v374 = &v357[v373];
  v375 = &v358[v373];
  v436 = *((_QWORD *)v375 + 1);
  *(_QWORD *)v374 = *(_QWORD *)v375;
  *((_QWORD *)v374 + 1) = v436;
  v376 = v457[13];
  v377 = &v459[v376];
  v378 = &v461[v376];
  v379 = *((_QWORD *)v378 + 1);
  *(_QWORD *)v377 = *(_QWORD *)v378;
  *((_QWORD *)v377 + 1) = v379;
  v380 = *((_QWORD *)v378 + 3);
  *((_QWORD *)v377 + 2) = *((_QWORD *)v378 + 2);
  *((_QWORD *)v377 + 3) = v380;
  v381 = *((_QWORD *)v378 + 5);
  *((_QWORD *)v377 + 4) = *((_QWORD *)v378 + 4);
  *((_QWORD *)v377 + 5) = v381;
  v382 = *((_QWORD *)v378 + 7);
  *((_QWORD *)v377 + 6) = *((_QWORD *)v378 + 6);
  *((_QWORD *)v377 + 7) = v382;
  v383 = *((_QWORD *)v378 + 9);
  *((_QWORD *)v377 + 8) = *((_QWORD *)v378 + 8);
  *((_QWORD *)v377 + 9) = v383;
  v384 = *((_QWORD *)v378 + 11);
  *((_QWORD *)v377 + 10) = *((_QWORD *)v378 + 10);
  *((_QWORD *)v377 + 11) = v384;
  v385 = *((_QWORD *)v378 + 13);
  *((_QWORD *)v377 + 12) = *((_QWORD *)v378 + 12);
  *((_QWORD *)v377 + 13) = v385;
  v386 = *((_QWORD *)v378 + 15);
  *((_QWORD *)v377 + 14) = *((_QWORD *)v378 + 14);
  *((_QWORD *)v377 + 15) = v386;
  v387 = *((_QWORD *)v378 + 17);
  *((_QWORD *)v377 + 16) = *((_QWORD *)v378 + 16);
  *((_QWORD *)v377 + 17) = v387;
  v388 = *((_QWORD *)v378 + 19);
  *((_QWORD *)v377 + 18) = *((_QWORD *)v378 + 18);
  *((_QWORD *)v377 + 19) = v388;
  v389 = *((_QWORD *)v378 + 21);
  *((_QWORD *)v377 + 20) = *((_QWORD *)v378 + 20);
  *((_QWORD *)v377 + 21) = v389;
  v390 = *((_QWORD *)v378 + 23);
  *((_QWORD *)v377 + 22) = *((_QWORD *)v378 + 22);
  *((_QWORD *)v377 + 23) = v390;
  v391 = *((_QWORD *)v378 + 25);
  *((_QWORD *)v377 + 24) = *((_QWORD *)v378 + 24);
  *((_QWORD *)v377 + 25) = v391;
  *((_OWORD *)v377 + 13) = *((_OWORD *)v378 + 13);
  *((_QWORD *)v377 + 28) = *((_QWORD *)v378 + 28);
  v392 = v457[14];
  v393 = &v459[v392];
  v394 = &v461[v392];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v395 = swift_bridgeObjectRetain();
  v446(v393, v394, v448, v395);
  v396 = *(int *)(v450 + 20);
  v397 = &v393[v396];
  v398 = &v394[v396];
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v394[v396], 1, v444))
  {
    v399 = sub_1000BA294(&qword_100BC3370);
    memcpy(v397, v398, *(_QWORD *)(*(_QWORD *)(v399 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v444 - 8) + 16))(v397, v398, v444);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v397, 0, 1, v444);
  }
  v400 = *(int *)(v450 + 24);
  v401 = &v393[v400];
  v402 = &v394[v400];
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v394[v400], 1, v442))
  {
    v403 = sub_1000BA294(&qword_100BC3378);
    memcpy(v401, v402, *(_QWORD *)(*(_QWORD *)(v403 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v442 - 8) + 16))(v401, v402, v442);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v401, 0, 1, v442);
  }
  v404 = v457[15];
  v405 = &v459[v404];
  v406 = &v461[v404];
  v407 = *((_QWORD *)v406 + 1);
  *(_QWORD *)v405 = *(_QWORD *)v406;
  *((_QWORD *)v405 + 1) = v407;
  v408 = *((_QWORD *)v406 + 3);
  *((_QWORD *)v405 + 2) = *((_QWORD *)v406 + 2);
  *((_QWORD *)v405 + 3) = v408;
  v409 = *((_QWORD *)v406 + 5);
  *((_QWORD *)v405 + 4) = *((_QWORD *)v406 + 4);
  *((_QWORD *)v405 + 5) = v409;
  v410 = *((_QWORD *)v406 + 7);
  *((_QWORD *)v405 + 6) = *((_QWORD *)v406 + 6);
  *((_QWORD *)v405 + 7) = v410;
  v411 = *((_QWORD *)v406 + 9);
  *((_QWORD *)v405 + 8) = *((_QWORD *)v406 + 8);
  *((_QWORD *)v405 + 9) = v411;
  v412 = *((_QWORD *)v406 + 11);
  *((_QWORD *)v405 + 10) = *((_QWORD *)v406 + 10);
  *((_QWORD *)v405 + 11) = v412;
  v413 = *((_QWORD *)v406 + 13);
  *((_QWORD *)v405 + 12) = *((_QWORD *)v406 + 12);
  *((_QWORD *)v405 + 13) = v413;
  v414 = v453[10];
  v415 = (_QWORD *)((char *)v455 + v414);
  v416 = (_QWORD *)((char *)v454 + v414);
  v417 = type metadata accessor for NewsDataModel(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload(v416) == 1)
  {
    *v415 = *v416;
    swift_bridgeObjectRetain();
    v418 = 1;
  }
  else
  {
    v419 = type metadata accessor for News(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v419 - 8) + 16))(v415, v416, v419);
    v418 = 0;
  }
  v15 = v455;
  swift_storeEnumTagMultiPayload(v415, v417, v418);
  v420 = v453[11];
  v421 = v453[12];
  v422 = (_QWORD *)((char *)v455 + v420);
  v423 = (_QWORD *)((char *)v454 + v420);
  v424 = v423[1];
  *v422 = *v423;
  v422[1] = v424;
  v425 = (char *)v455 + v421;
  v426 = (char *)v454 + v421;
  v427 = swift_retain();
  ((void (*)(char *, char *, uint64_t, __n128))v431)(v425, v426, v452, v427);
  v428 = sub_1000BA294(&qword_100C06160);
  *(_QWORD *)&v425[*(int *)(v428 + 28)] = *(_QWORD *)&v426[*(int *)(v428 + 28)];
LABEL_102:
  swift_retain();
  return v15;
}

double sub_10079BE98(uint64_t a1, int *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __n128 v89;
  uint64_t v90;
  uint64_t v91;
  __n128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __n128 v98;
  double result;
  void (*v100)(uint64_t);
  uint64_t v101;
  void (*v102)(uint64_t);
  uint64_t v103;
  uint64_t v104;
  int *v105;

  sub_1000BA294(&qword_100BC4F28);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1);
  swift_release();
  if (EnumCaseMultiPayload == 1)
  {
    swift_release();
    v5 = a1 + *(int *)(sub_1000BA294(&qword_100BC6510) + 32);
    v6 = type metadata accessor for PresentationMode(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  v7 = a1 + a2[5];
  v8 = type metadata accessor for LocationModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  type metadata accessor for LocationWeatherDataState(0);
  v10 = swift_getEnumCaseMultiPayload(v9);
  v105 = a2;
  if (v10 == 2)
    goto LABEL_7;
  if (v10 == 1)
  {
    swift_bridgeObjectRelease();
    v11 = (int *)type metadata accessor for WeatherData(0);
    v12 = v9 + v11[5];
    v13 = type metadata accessor for Locale(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v12, 1, v13))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
    v14 = v9 + v11[6];
    v15 = type metadata accessor for WeatherDataModel(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
    v16 = v9 + v11[7];
    v17 = sub_1000BA294(&qword_100BC3348);
    if (!_s7Weather24LocationCompositionStateOwet_0(v16, 1, v17))
    {
      v18 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v16, v18);
    }
    v19 = v9 + v11[8];
    type metadata accessor for WeatherData.WeatherStatisticsState(0);
    v20 = swift_getEnumCaseMultiPayload(v19);
    if (v20 == 1)
    {
      v21 = type metadata accessor for WeatherStatisticsModel(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v19, v21);
    }
    else if (!v20)
    {
      swift_bridgeObjectRelease();
    }
    v22 = v9 + v11[9];
    v23 = type metadata accessor for WeatherDataOverrides(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v22, 1, v23))
    {
      v24 = type metadata accessor for Date(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v22, 1, v24))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v22, v24);
      v25 = v22 + *(int *)(v23 + 20);
      if (!_s7Weather24LocationCompositionStateOwet_0(v25, 1, v24))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v25, v24);
    }
    v103 = sub_1000BA294(&qword_100BC3358);
    v26 = v9 + *(int *)(v103 + 48);
    v27 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
    v28 = (int *)type metadata accessor for PreprocessedWeatherData(0);
    swift_bridgeObjectRelease();
    v29 = v26 + v28[6];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v30 = v29 + *(int *)(type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0) + 28);
    v31 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v30, 1, v31))
    {
      swift_bridgeObjectRelease();
      v32 = v30 + *(int *)(v31 + 20);
      v33 = type metadata accessor for TemperatureScaleConfiguration(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
      type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v34 = v26 + v28[7];
    swift_bridgeObjectRelease();
    v35 = v34 + *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
    v36 = type metadata accessor for WeatherDescription(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v35, 1, v36))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v35, v36);
    v37 = v26 + v28[8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v38 = v37 + *(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32);
    v39 = type metadata accessor for Date(0);
    v100 = *(void (**)(uint64_t))(*(_QWORD *)(v39 - 8) + 8);
    v101 = v39;
    v100(v38);
    v40 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
    v41 = v38 + *(int *)(v40 + 20);
    v42 = type metadata accessor for Elevation(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v41, 1, v42))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v41, v42);
    v43 = v38 + *(int *)(v40 + 24);
    v44 = type metadata accessor for BackgroundMoonData(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v43, 1, v44))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v43, v44);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v45 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v36 - 8) + 8))(v26 + v28[10], v36, v45);
    type metadata accessor for UVIndexComponentPreprocessedDataModel(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v46 = v26 + v28[12];
    v47 = type metadata accessor for PressureTrend(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v46, v47);
    type metadata accessor for PressureComponentPreprocessedDataModel(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v48 = swift_bridgeObjectRelease();
    v49 = v26 + v28[14];
    ((void (*)(uint64_t, uint64_t, __n128))v100)(v49, v101, v48);
    v50 = v49 + *(int *)(v40 + 20);
    if (!_s7Weather24LocationCompositionStateOwet_0(v50, 1, v42))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v50, v42);
    v51 = v49 + *(int *)(v40 + 24);
    if (!_s7Weather24LocationCompositionStateOwet_0(v51, 1, v44))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v51, v44);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 += *(int *)(v103 + 64);
    type metadata accessor for NewsDataModel(0);
    a2 = v105;
    if (swift_getEnumCaseMultiPayload(v9) != 1)
      goto LABEL_34;
LABEL_7:
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  if (v10)
    goto LABEL_35;
  type metadata accessor for NewsDataModel(0);
  if (swift_getEnumCaseMultiPayload(v9) == 1)
    goto LABEL_7;
LABEL_34:
  v52 = type metadata accessor for News(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v9, v52);
LABEL_35:
  v53 = a1 + a2[8];
  swift_bridgeObjectRelease();
  v54 = (int *)type metadata accessor for WeatherData(0);
  v55 = v53 + v54[5];
  v56 = type metadata accessor for Locale(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v55, 1, v56))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 8))(v55, v56);
  v57 = v53 + v54[6];
  v58 = type metadata accessor for WeatherDataModel(0);
  v102 = *(void (**)(uint64_t))(*(_QWORD *)(v58 - 8) + 8);
  v104 = v58;
  v102(v57);
  v59 = v53 + v54[7];
  v60 = sub_1000BA294(&qword_100BC3348);
  if (!_s7Weather24LocationCompositionStateOwet_0(v59, 1, v60))
  {
    v61 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 8))(v59, v61);
  }
  v62 = v53 + v54[8];
  type metadata accessor for WeatherData.WeatherStatisticsState(0);
  v63 = swift_getEnumCaseMultiPayload(v62);
  if (v63 == 1)
  {
    v64 = type metadata accessor for WeatherStatisticsModel(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 8))(v62, v64);
  }
  else if (!v63)
  {
    swift_bridgeObjectRelease();
  }
  v65 = v53 + v54[9];
  v66 = type metadata accessor for WeatherDataOverrides(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v65, 1, v66))
  {
    v67 = type metadata accessor for Date(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v65, 1, v67))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 8))(v65, v67);
    v68 = v65 + *(int *)(v66 + 20);
    if (!_s7Weather24LocationCompositionStateOwet_0(v68, 1, v67))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 8))(v68, v67);
  }
  v69 = a1 + a2[9];
  v70 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 8))(v69, v70);
  v71 = (int *)type metadata accessor for PreprocessedWeatherData(0);
  swift_bridgeObjectRelease();
  v72 = v69 + v71[6];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v73 = v72 + *(int *)(type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0) + 28);
  v74 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v73, 1, v74))
  {
    swift_bridgeObjectRelease();
    v75 = v73 + *(int *)(v74 + 20);
    v76 = type metadata accessor for TemperatureScaleConfiguration(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 8))(v75, v76);
    type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v77 = v69 + v71[7];
  swift_bridgeObjectRelease();
  v78 = v77 + *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
  v79 = type metadata accessor for WeatherDescription(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v78, 1, v79))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 8))(v78, v79);
  v80 = v69 + v71[8];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v81 = v80 + *(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32);
  v82 = type metadata accessor for Date(0);
  v83 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 8);
  v83(v81, v82);
  v84 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
  v85 = v81 + *(int *)(v84 + 20);
  v86 = type metadata accessor for Elevation(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v85, 1, v86))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 8))(v85, v86);
  v87 = v81 + *(int *)(v84 + 24);
  v88 = type metadata accessor for BackgroundMoonData(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v87, 1, v88))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 8))(v87, v88);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v89 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v79 - 8) + 8))(v69 + v71[10], v79, v89);
  type metadata accessor for UVIndexComponentPreprocessedDataModel(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v90 = v69 + v71[12];
  v91 = type metadata accessor for PressureTrend(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 8))(v90, v91);
  type metadata accessor for PressureComponentPreprocessedDataModel(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v92 = swift_bridgeObjectRelease();
  v93 = v69 + v71[14];
  ((void (*)(uint64_t, uint64_t, __n128))v83)(v93, v82, v92);
  v94 = v93 + *(int *)(v84 + 20);
  if (!_s7Weather24LocationCompositionStateOwet_0(v94, 1, v86))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 8))(v94, v86);
  v95 = v93 + *(int *)(v84 + 24);
  if (!_s7Weather24LocationCompositionStateOwet_0(v95, 1, v88))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 8))(v95, v88);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v96 = a1 + v105[10];
  type metadata accessor for NewsDataModel(0);
  if (swift_getEnumCaseMultiPayload(v96) == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v97 = type metadata accessor for News(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 8))(v96, v97);
  }
  v98 = swift_release();
  ((void (*)(uint64_t, uint64_t, __n128))v102)(a1 + v105[12], v104, v98);
  sub_1000BA294(&qword_100C06160);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

_QWORD *sub_10079CC6C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t, __n128);
  __n128 v90;
  int *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  void (*v120)(char *, char *, uint64_t, __n128);
  __n128 v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  void (*v146)(char *, char *, uint64_t, __n128);
  __n128 v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  void (*v162)(char *, char *, uint64_t, __n128);
  __n128 v163;
  int *v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  __n128 v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  char *v223;
  uint64_t v224;
  int *v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  char *v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  _QWORD *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char *v268;
  char *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  char *v282;
  uint64_t v283;
  void (*v284)(char *, char *, uint64_t, __n128);
  __n128 v285;
  int *v286;
  uint64_t v287;
  char *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  char *v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  char *v298;
  uint64_t v299;
  char *v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  char *v305;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  char *v312;
  char *v313;
  uint64_t v314;
  void (*v315)(char *, char *, uint64_t, __n128);
  __n128 v316;
  uint64_t v317;
  uint64_t v318;
  char *v319;
  char *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  char *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  char *v329;
  char *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  char *v339;
  char *v340;
  void (*v341)(char *, char *, uint64_t, __n128);
  __n128 v342;
  uint64_t v343;
  char *v344;
  char *v345;
  uint64_t v346;
  uint64_t v347;
  char *v348;
  char *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  char *v354;
  char *v355;
  uint64_t v356;
  void (*v357)(char *, char *, uint64_t, __n128);
  __n128 v358;
  int *v359;
  uint64_t v360;
  char *v361;
  char *v362;
  uint64_t v363;
  uint64_t v364;
  char *v365;
  char *v366;
  uint64_t v367;
  char *v368;
  char *v369;
  uint64_t v370;
  char *v371;
  char *v372;
  uint64_t v373;
  char *v374;
  char *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  char *v390;
  char *v391;
  __n128 v392;
  uint64_t v393;
  char *v394;
  char *v395;
  uint64_t v396;
  uint64_t v397;
  char *v398;
  char *v399;
  uint64_t v400;
  uint64_t v401;
  char *v402;
  char *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  _QWORD *v412;
  _QWORD *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  _QWORD *v419;
  _QWORD *v420;
  uint64_t v421;
  char *v422;
  char *v423;
  __n128 v424;
  uint64_t v425;
  char *v427;
  void (*v428)(char *, char *, uint64_t);
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  void (*v436)(char *, char *, uint64_t, __n128);
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  void (*v443)(char *, char *, uint64_t, __n128);
  _QWORD *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  _QWORD *v448;
  uint64_t v449;
  int *v450;
  _QWORD *v451;
  _QWORD *v452;
  int *v453;
  int *v454;
  char *v455;
  char *v456;
  char *v457;
  char *v458;

  v6 = sub_1000BA294(&qword_100BC4F28);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
  *a1 = *a2;
  if (EnumCaseMultiPayload == 1)
  {
    a1[1] = a2[1];
    swift_retain();
    swift_retain();
    v8 = *(int *)(sub_1000BA294(&qword_100BC6510) + 32);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for PresentationMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = 1;
  }
  else
  {
    swift_retain();
    v12 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, v6, v12);
  v13 = a3[5];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for LocationModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  v17 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  v20 = type metadata accessor for LocationWeatherDataState(0);
  v21 = swift_getEnumCaseMultiPayload(v19);
  v451 = a2;
  v452 = a1;
  v450 = a3;
  if (v21 == 2)
  {
    v24 = v19[1];
    *v18 = *v19;
    v18[1] = v24;
    swift_bridgeObjectRetain();
    v25 = v18;
    v26 = v20;
    v27 = 2;
    goto LABEL_56;
  }
  if (v21 == 1)
  {
    v446 = v20;
    v28 = v19[1];
    *v18 = *v19;
    v18[1] = v28;
    v29 = (int *)type metadata accessor for WeatherData(0);
    v30 = v29[5];
    v31 = (char *)v18 + v30;
    v32 = (char *)v19 + v30;
    v33 = type metadata accessor for Locale(0);
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v32, 1, v33))
    {
      v34 = sub_1000BA294(&qword_100BC3340);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v31, 0, 1, v33);
    }
    v36 = v29[6];
    v37 = (char *)v18 + v36;
    v38 = (char *)v19 + v36;
    v39 = type metadata accessor for WeatherDataModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
    v40 = v29[7];
    v41 = (char *)v18 + v40;
    v42 = (char *)v19 + v40;
    v43 = sub_1000BA294(&qword_100BC3348);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v42, 1, v43))
    {
      v44 = type metadata accessor for WeatherData.CachingState(0);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      v45 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v41, v42, v45);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v41, 0, 1, v43);
    }
    v46 = v29[8];
    v47 = (_QWORD *)((char *)v18 + v46);
    v48 = (_QWORD *)((char *)v19 + v46);
    v49 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
    v50 = swift_getEnumCaseMultiPayload(v48);
    if (v50 == 1)
    {
      v55 = type metadata accessor for WeatherStatisticsModel(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v47, v48, v55);
      v52 = v47;
      v53 = v49;
      v54 = 1;
    }
    else
    {
      if (v50)
      {
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
        goto LABEL_25;
      }
      v51 = v48[1];
      *v47 = *v48;
      v47[1] = v51;
      swift_bridgeObjectRetain();
      v52 = v47;
      v53 = v49;
      v54 = 0;
    }
    swift_storeEnumTagMultiPayload(v52, v53, v54);
LABEL_25:
    v56 = v29[9];
    v57 = (char *)v18 + v56;
    v58 = (char *)v19 + v56;
    v59 = type metadata accessor for WeatherDataOverrides(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v58, 1, v59))
    {
      v60 = sub_1000BA294(&qword_100BC3350);
      memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
    else
    {
      v61 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v58, 1, v61))
      {
        v62 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v57, v58, v61);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v57, 0, 1, v61);
      }
      v63 = *(int *)(v59 + 20);
      v64 = &v57[v63];
      v65 = &v58[v63];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v65, 1, v61))
      {
        v66 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v64, v65, v61);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v64, 0, 1, v61);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v57, 0, 1, v59);
    }
    v442 = sub_1000BA294(&qword_100BC3358);
    v444 = v19;
    v67 = *(int *)(v442 + 48);
    v448 = v18;
    v68 = (char *)v18 + v67;
    v69 = (char *)v19 + v67;
    v70 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v68, v69, v70);
    v71 = type metadata accessor for PreprocessedWeatherData(0);
    *(_QWORD *)&v68[*(int *)(v71 + 20)] = *(_QWORD *)&v69[*(int *)(v71 + 20)];
    v453 = (int *)v71;
    v455 = v68;
    v72 = *(int *)(v71 + 24);
    v73 = &v68[v72];
    v457 = v69;
    v74 = &v69[v72];
    v75 = *(_QWORD *)&v69[v72 + 8];
    *(_QWORD *)v73 = *(_QWORD *)&v69[v72];
    *((_QWORD *)v73 + 1) = v75;
    v76 = *(_QWORD *)&v69[v72 + 24];
    *((_QWORD *)v73 + 2) = *(_QWORD *)&v69[v72 + 16];
    *((_QWORD *)v73 + 3) = v76;
    v77 = *(_QWORD *)&v69[v72 + 40];
    *((_QWORD *)v73 + 4) = *(_QWORD *)&v69[v72 + 32];
    *((_QWORD *)v73 + 5) = v77;
    v78 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
    v79 = *(int *)(v78 + 28);
    v80 = &v73[v79];
    v81 = &v74[v79];
    v82 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v81, 1, v82))
    {
      v83 = sub_1000BA294(&qword_100BC3360);
      memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
    }
    else
    {
      v84 = *((_QWORD *)v81 + 1);
      *(_QWORD *)v80 = *(_QWORD *)v81;
      *((_QWORD *)v80 + 1) = v84;
      v85 = *(int *)(v82 + 20);
      v86 = &v80[v85];
      v87 = &v81[v85];
      v88 = type metadata accessor for TemperatureScaleConfiguration(0);
      v89 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v88 - 8) + 16);
      v90 = swift_bridgeObjectRetain();
      v89(v86, v87, v88, v90);
      v91 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
      *(_QWORD *)&v86[v91[5]] = *(_QWORD *)&v87[v91[5]];
      *(_QWORD *)&v86[v91[6]] = *(_QWORD *)&v87[v91[6]];
      *(_QWORD *)&v86[v91[7]] = *(_QWORD *)&v87[v91[7]];
      v92 = v91[8];
      v93 = &v86[v92];
      v94 = &v87[v92];
      v96 = *(_QWORD *)v94;
      v95 = *((_QWORD *)v94 + 1);
      *(_QWORD *)v93 = v96;
      *((_QWORD *)v93 + 1) = v95;
      v86[v91[9]] = v87[v91[9]];
      swift_bridgeObjectRetain();
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v80, 0, 1, v82);
    }
    v97 = *(int *)(v78 + 32);
    v98 = &v73[v97];
    v99 = &v74[v97];
    v100 = *((_QWORD *)v99 + 1);
    *(_QWORD *)v98 = *(_QWORD *)v99;
    *((_QWORD *)v98 + 1) = v100;
    v101 = v453[7];
    v102 = &v455[v101];
    v103 = &v457[v101];
    *(_QWORD *)&v455[v101] = *(_QWORD *)&v457[v101];
    v104 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
    v105 = &v102[v104];
    v106 = &v103[v104];
    v107 = type metadata accessor for WeatherDescription(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v106, 1, v107))
    {
      v108 = sub_1000BA294(&qword_100BC3368);
      memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 16))(v105, v106, v107);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v105, 0, 1, v107);
    }
    v109 = v453[8];
    v110 = &v455[v109];
    v111 = &v457[v109];
    v112 = *(_QWORD *)&v457[v109 + 8];
    *(_QWORD *)v110 = *(_QWORD *)&v457[v109];
    *((_QWORD *)v110 + 1) = v112;
    v113 = *(_QWORD *)&v457[v109 + 24];
    *((_QWORD *)v110 + 2) = *(_QWORD *)&v457[v109 + 16];
    *((_QWORD *)v110 + 3) = v113;
    v114 = *(_QWORD *)&v457[v109 + 40];
    *((_QWORD *)v110 + 4) = *(_QWORD *)&v457[v109 + 32];
    *((_QWORD *)v110 + 5) = v114;
    v115 = *(_QWORD *)&v457[v109 + 56];
    *((_QWORD *)v110 + 6) = *(_QWORD *)&v457[v109 + 48];
    *((_QWORD *)v110 + 7) = v115;
    v116 = *(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32);
    v117 = &v110[v116];
    v118 = &v111[v116];
    v119 = type metadata accessor for Date(0);
    v120 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v119 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v121 = swift_bridgeObjectRetain();
    v436 = v120;
    v438 = v119;
    v120(v117, v118, v119, v121);
    v122 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
    v123 = *(int *)(v122 + 20);
    v124 = &v117[v123];
    v125 = &v118[v123];
    v126 = type metadata accessor for Elevation(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v125, 1, v126))
    {
      v127 = sub_1000BA294(&qword_100BC3370);
      memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v126 - 8) + 16))(v124, v125, v126);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v124, 0, 1, v126);
    }
    v128 = *(int *)(v122 + 24);
    v129 = &v117[v128];
    v130 = &v118[v128];
    v131 = type metadata accessor for BackgroundMoonData(0);
    v440 = v122;
    v432 = v131;
    v434 = v126;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v130, 1, v131))
    {
      v132 = sub_1000BA294(&qword_100BC3378);
      memcpy(v129, v130, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v131 - 8) + 16))(v129, v130, v131);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v129, 0, 1, v131);
    }
    v133 = v453[9];
    v134 = &v455[v133];
    v135 = &v457[v133];
    v136 = *((_QWORD *)v135 + 1);
    *(_QWORD *)v134 = *(_QWORD *)v135;
    *((_QWORD *)v134 + 1) = v136;
    v137 = *((_QWORD *)v135 + 3);
    *((_QWORD *)v134 + 2) = *((_QWORD *)v135 + 2);
    *((_QWORD *)v134 + 3) = v137;
    v138 = *((_QWORD *)v135 + 5);
    *((_QWORD *)v134 + 4) = *((_QWORD *)v135 + 4);
    *((_QWORD *)v134 + 5) = v138;
    v139 = *((_QWORD *)v135 + 7);
    *((_QWORD *)v134 + 6) = *((_QWORD *)v135 + 6);
    *((_QWORD *)v134 + 7) = v139;
    v140 = *((_QWORD *)v135 + 9);
    *((_QWORD *)v134 + 8) = *((_QWORD *)v135 + 8);
    *((_QWORD *)v134 + 9) = v140;
    v141 = *((_QWORD *)v135 + 11);
    *((_QWORD *)v134 + 10) = *((_QWORD *)v135 + 10);
    *((_QWORD *)v134 + 11) = v141;
    v142 = *((_QWORD *)v135 + 13);
    *((_QWORD *)v134 + 12) = *((_QWORD *)v135 + 12);
    *((_QWORD *)v134 + 13) = v142;
    v143 = v453[10];
    v144 = &v455[v143];
    v145 = &v457[v143];
    v146 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v107 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v147 = swift_bridgeObjectRetain();
    v146(v144, v145, v107, v147);
    v148 = *(int *)(type metadata accessor for UVIndexComponentPreprocessedDataModel(0) + 20);
    v149 = &v144[v148];
    v150 = &v145[v148];
    v151 = *((_QWORD *)v150 + 1);
    *(_QWORD *)v149 = *(_QWORD *)v150;
    *((_QWORD *)v149 + 1) = v151;
    v152 = v453[11];
    v153 = &v455[v152];
    v154 = &v457[v152];
    v155 = *((_QWORD *)v154 + 1);
    *(_QWORD *)v153 = *(_QWORD *)v154;
    *((_QWORD *)v153 + 1) = v155;
    v156 = *((_QWORD *)v154 + 3);
    *((_QWORD *)v153 + 2) = *((_QWORD *)v154 + 2);
    *((_QWORD *)v153 + 3) = v156;
    v157 = *((_QWORD *)v154 + 5);
    *((_QWORD *)v153 + 4) = *((_QWORD *)v154 + 4);
    *((_QWORD *)v153 + 5) = v157;
    v158 = v453[12];
    v159 = &v455[v158];
    v160 = &v457[v158];
    v161 = type metadata accessor for PressureTrend(0);
    v162 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v161 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v163 = swift_bridgeObjectRetain();
    v162(v159, v160, v161, v163);
    v164 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
    v165 = v164[5];
    v166 = &v159[v165];
    v167 = &v160[v165];
    v168 = *((_QWORD *)v167 + 1);
    *(_QWORD *)v166 = *(_QWORD *)v167;
    *((_QWORD *)v166 + 1) = v168;
    v169 = v164[6];
    v170 = &v159[v169];
    v171 = &v160[v169];
    v431 = *((_QWORD *)v171 + 1);
    *(_QWORD *)v170 = *(_QWORD *)v171;
    *((_QWORD *)v170 + 1) = v431;
    v172 = v164[7];
    v173 = &v159[v172];
    v174 = &v160[v172];
    v430 = *((_QWORD *)v174 + 1);
    *(_QWORD *)v173 = *(_QWORD *)v174;
    *((_QWORD *)v173 + 1) = v430;
    *(_QWORD *)&v159[v164[8]] = *(_QWORD *)&v160[v164[8]];
    v175 = v164[9];
    v176 = &v159[v175];
    v177 = &v160[v175];
    v429 = *((_QWORD *)v177 + 1);
    *(_QWORD *)v176 = *(_QWORD *)v177;
    *((_QWORD *)v176 + 1) = v429;
    v178 = v453[13];
    v179 = &v455[v178];
    v180 = &v457[v178];
    v181 = *((_QWORD *)v180 + 1);
    *(_QWORD *)v179 = *(_QWORD *)v180;
    *((_QWORD *)v179 + 1) = v181;
    v182 = *((_QWORD *)v180 + 3);
    *((_QWORD *)v179 + 2) = *((_QWORD *)v180 + 2);
    *((_QWORD *)v179 + 3) = v182;
    v183 = *((_QWORD *)v180 + 5);
    *((_QWORD *)v179 + 4) = *((_QWORD *)v180 + 4);
    *((_QWORD *)v179 + 5) = v183;
    v184 = *((_QWORD *)v180 + 7);
    *((_QWORD *)v179 + 6) = *((_QWORD *)v180 + 6);
    *((_QWORD *)v179 + 7) = v184;
    v185 = *((_QWORD *)v180 + 9);
    *((_QWORD *)v179 + 8) = *((_QWORD *)v180 + 8);
    *((_QWORD *)v179 + 9) = v185;
    v186 = *((_QWORD *)v180 + 11);
    *((_QWORD *)v179 + 10) = *((_QWORD *)v180 + 10);
    *((_QWORD *)v179 + 11) = v186;
    v187 = *((_QWORD *)v180 + 13);
    *((_QWORD *)v179 + 12) = *((_QWORD *)v180 + 12);
    *((_QWORD *)v179 + 13) = v187;
    v188 = *((_QWORD *)v180 + 15);
    *((_QWORD *)v179 + 14) = *((_QWORD *)v180 + 14);
    *((_QWORD *)v179 + 15) = v188;
    v189 = *((_QWORD *)v180 + 17);
    *((_QWORD *)v179 + 16) = *((_QWORD *)v180 + 16);
    *((_QWORD *)v179 + 17) = v189;
    v190 = *((_QWORD *)v180 + 19);
    *((_QWORD *)v179 + 18) = *((_QWORD *)v180 + 18);
    *((_QWORD *)v179 + 19) = v190;
    v191 = *((_QWORD *)v180 + 21);
    *((_QWORD *)v179 + 20) = *((_QWORD *)v180 + 20);
    *((_QWORD *)v179 + 21) = v191;
    v192 = *((_QWORD *)v180 + 23);
    *((_QWORD *)v179 + 22) = *((_QWORD *)v180 + 22);
    *((_QWORD *)v179 + 23) = v192;
    v193 = *((_QWORD *)v180 + 25);
    *((_QWORD *)v179 + 24) = *((_QWORD *)v180 + 24);
    *((_QWORD *)v179 + 25) = v193;
    *((_OWORD *)v179 + 13) = *((_OWORD *)v180 + 13);
    *((_QWORD *)v179 + 28) = *((_QWORD *)v180 + 28);
    v194 = v453[14];
    v195 = &v455[v194];
    v427 = &v457[v194];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v196 = swift_bridgeObjectRetain();
    v436(v195, v427, v438, v196);
    v197 = *(int *)(v440 + 20);
    v198 = &v195[v197];
    v199 = &v427[v197];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v427[v197], 1, v434))
    {
      v200 = sub_1000BA294(&qword_100BC3370);
      memcpy(v198, v199, *(_QWORD *)(*(_QWORD *)(v200 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v434 - 8) + 16))(v198, v199, v434);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v198, 0, 1, v434);
    }
    v201 = *(int *)(v440 + 24);
    v202 = &v195[v201];
    v203 = &v427[v201];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v427[v201], 1, v432))
    {
      v204 = sub_1000BA294(&qword_100BC3378);
      memcpy(v202, v203, *(_QWORD *)(*(_QWORD *)(v204 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v432 - 8) + 16))(v202, v203, v432);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v202, 0, 1, v432);
    }
    v205 = v453[15];
    v206 = &v455[v205];
    v207 = &v457[v205];
    v208 = *((_QWORD *)v207 + 1);
    *(_QWORD *)v206 = *(_QWORD *)v207;
    *((_QWORD *)v206 + 1) = v208;
    v209 = *((_QWORD *)v207 + 3);
    *((_QWORD *)v206 + 2) = *((_QWORD *)v207 + 2);
    *((_QWORD *)v206 + 3) = v209;
    v210 = *((_QWORD *)v207 + 5);
    *((_QWORD *)v206 + 4) = *((_QWORD *)v207 + 4);
    *((_QWORD *)v206 + 5) = v210;
    v211 = *((_QWORD *)v207 + 7);
    *((_QWORD *)v206 + 6) = *((_QWORD *)v207 + 6);
    *((_QWORD *)v206 + 7) = v211;
    v212 = *((_QWORD *)v207 + 9);
    *((_QWORD *)v206 + 8) = *((_QWORD *)v207 + 8);
    *((_QWORD *)v206 + 9) = v212;
    v213 = *((_QWORD *)v207 + 11);
    *((_QWORD *)v206 + 10) = *((_QWORD *)v207 + 10);
    *((_QWORD *)v206 + 11) = v213;
    v214 = *((_QWORD *)v207 + 13);
    *((_QWORD *)v206 + 12) = *((_QWORD *)v207 + 12);
    *((_QWORD *)v206 + 13) = v214;
    v215 = *(int *)(v442 + 64);
    v216 = (_QWORD *)((char *)v448 + v215);
    v217 = (_QWORD *)((char *)v444 + v215);
    v218 = type metadata accessor for NewsDataModel(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload(v217) == 1)
    {
      *v216 = *v217;
      swift_bridgeObjectRetain();
      v219 = 1;
    }
    else
    {
      v220 = type metadata accessor for News(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v220 - 8) + 16))(v216, v217, v220);
      v219 = 0;
    }
    a2 = v451;
    a1 = v452;
    a3 = v450;
    swift_storeEnumTagMultiPayload(v216, v218, v219);
    v26 = v446;
    v25 = v448;
    v27 = 1;
    goto LABEL_56;
  }
  if (v21)
  {
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_57;
  }
  v22 = type metadata accessor for NewsDataModel(0);
  if (swift_getEnumCaseMultiPayload(v19) == 1)
  {
    *v18 = *v19;
    swift_bridgeObjectRetain();
    v23 = 1;
  }
  else
  {
    v35 = type metadata accessor for News(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v18, v19, v35);
    v23 = 0;
  }
  swift_storeEnumTagMultiPayload(v18, v22, v23);
  v25 = v18;
  v26 = v20;
  v27 = 0;
LABEL_56:
  swift_storeEnumTagMultiPayload(v25, v26, v27);
LABEL_57:
  v221 = a3[8];
  v222 = (_QWORD *)((char *)a1 + v221);
  v223 = (char *)a2 + v221;
  v224 = *(_QWORD *)((char *)a2 + v221 + 8);
  *v222 = *(_QWORD *)((char *)a2 + v221);
  v222[1] = v224;
  v225 = (int *)type metadata accessor for WeatherData(0);
  v226 = v225[5];
  v227 = (char *)v222 + v226;
  v228 = &v223[v226];
  v229 = type metadata accessor for Locale(0);
  swift_bridgeObjectRetain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v228, 1, v229))
  {
    v230 = sub_1000BA294(&qword_100BC3340);
    memcpy(v227, v228, *(_QWORD *)(*(_QWORD *)(v230 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v229 - 8) + 16))(v227, v228, v229);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v227, 0, 1, v229);
  }
  v231 = v225[6];
  v232 = (char *)v222 + v231;
  v233 = &v223[v231];
  v234 = type metadata accessor for WeatherDataModel(0);
  v428 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v234 - 8) + 16);
  v428(v232, v233, v234);
  v235 = v225[7];
  v236 = (char *)v222 + v235;
  v237 = &v223[v235];
  v238 = sub_1000BA294(&qword_100BC3348);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v237, 1, v238))
  {
    v239 = type metadata accessor for WeatherData.CachingState(0);
    memcpy(v236, v237, *(_QWORD *)(*(_QWORD *)(v239 - 8) + 64));
  }
  else
  {
    v240 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v240 - 8) + 16))(v236, v237, v240);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v236, 0, 1, v238);
  }
  v241 = v225[8];
  v242 = (_QWORD *)((char *)v222 + v241);
  v243 = &v223[v241];
  v244 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
  v245 = swift_getEnumCaseMultiPayload(v243);
  if (v245 == 1)
  {
    v250 = type metadata accessor for WeatherStatisticsModel(0);
    (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v250 - 8) + 16))(v242, v243, v250);
    v247 = v242;
    v248 = v244;
    v249 = 1;
    goto LABEL_67;
  }
  if (!v245)
  {
    v246 = *((_QWORD *)v243 + 1);
    *v242 = *(_QWORD *)v243;
    v242[1] = v246;
    swift_bridgeObjectRetain();
    v247 = v242;
    v248 = v244;
    v249 = 0;
LABEL_67:
    swift_storeEnumTagMultiPayload(v247, v248, v249);
    goto LABEL_69;
  }
  memcpy(v242, v243, *(_QWORD *)(*(_QWORD *)(v244 - 8) + 64));
LABEL_69:
  v251 = v225[9];
  v252 = (char *)v222 + v251;
  v253 = &v223[v251];
  v254 = type metadata accessor for WeatherDataOverrides(0);
  v449 = v234;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v253, 1, v254))
  {
    v255 = sub_1000BA294(&qword_100BC3350);
    memcpy(v252, v253, *(_QWORD *)(*(_QWORD *)(v255 - 8) + 64));
  }
  else
  {
    v256 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v253, 1, v256))
    {
      v257 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v252, v253, *(_QWORD *)(*(_QWORD *)(v257 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v256 - 8) + 16))(v252, v253, v256);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v252, 0, 1, v256);
    }
    v258 = *(int *)(v254 + 20);
    v259 = &v252[v258];
    v260 = &v253[v258];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v260, 1, v256))
    {
      v261 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v259, v260, *(_QWORD *)(*(_QWORD *)(v261 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v256 - 8) + 16))(v259, v260, v256);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v259, 0, 1, v256);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v252, 0, 1, v254);
  }
  v262 = a3[9];
  v263 = (char *)a1 + v262;
  v264 = (char *)a2 + v262;
  v265 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v265 - 8) + 16))(v263, v264, v265);
  v266 = type metadata accessor for PreprocessedWeatherData(0);
  *(_QWORD *)&v263[*(int *)(v266 + 20)] = *(_QWORD *)&v264[*(int *)(v266 + 20)];
  v454 = (int *)v266;
  v456 = v263;
  v267 = *(int *)(v266 + 24);
  v268 = &v263[v267];
  v458 = v264;
  v269 = &v264[v267];
  v270 = *(_QWORD *)&v264[v267 + 8];
  *(_QWORD *)v268 = *(_QWORD *)&v264[v267];
  *((_QWORD *)v268 + 1) = v270;
  v271 = *(_QWORD *)&v264[v267 + 24];
  *((_QWORD *)v268 + 2) = *(_QWORD *)&v264[v267 + 16];
  *((_QWORD *)v268 + 3) = v271;
  v272 = *(_QWORD *)&v264[v267 + 40];
  *((_QWORD *)v268 + 4) = *(_QWORD *)&v264[v267 + 32];
  *((_QWORD *)v268 + 5) = v272;
  v273 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
  v274 = *(int *)(v273 + 28);
  v275 = &v268[v274];
  v276 = &v269[v274];
  v277 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v276, 1, v277))
  {
    v278 = sub_1000BA294(&qword_100BC3360);
    memcpy(v275, v276, *(_QWORD *)(*(_QWORD *)(v278 - 8) + 64));
  }
  else
  {
    v279 = *((_QWORD *)v276 + 1);
    *(_QWORD *)v275 = *(_QWORD *)v276;
    *((_QWORD *)v275 + 1) = v279;
    v280 = *(int *)(v277 + 20);
    v281 = &v275[v280];
    v282 = &v276[v280];
    v283 = type metadata accessor for TemperatureScaleConfiguration(0);
    v284 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v283 - 8) + 16);
    v285 = swift_bridgeObjectRetain();
    v284(v281, v282, v283, v285);
    v286 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
    *(_QWORD *)&v281[v286[5]] = *(_QWORD *)&v282[v286[5]];
    *(_QWORD *)&v281[v286[6]] = *(_QWORD *)&v282[v286[6]];
    *(_QWORD *)&v281[v286[7]] = *(_QWORD *)&v282[v286[7]];
    v287 = v286[8];
    v288 = &v281[v287];
    v289 = &v282[v287];
    v291 = *(_QWORD *)v289;
    v290 = *((_QWORD *)v289 + 1);
    *(_QWORD *)v288 = v291;
    *((_QWORD *)v288 + 1) = v290;
    v281[v286[9]] = v282[v286[9]];
    swift_bridgeObjectRetain();
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v275, 0, 1, v277);
  }
  v292 = *(int *)(v273 + 32);
  v293 = &v268[v292];
  v294 = &v269[v292];
  v295 = *((_QWORD *)v294 + 1);
  *(_QWORD *)v293 = *(_QWORD *)v294;
  *((_QWORD *)v293 + 1) = v295;
  v296 = v454[7];
  v297 = &v456[v296];
  v298 = &v458[v296];
  *(_QWORD *)&v456[v296] = *(_QWORD *)&v458[v296];
  v299 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
  v300 = &v297[v299];
  v301 = &v298[v299];
  v302 = type metadata accessor for WeatherDescription(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v301, 1, v302))
  {
    v303 = sub_1000BA294(&qword_100BC3368);
    memcpy(v300, v301, *(_QWORD *)(*(_QWORD *)(v303 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v302 - 8) + 16))(v300, v301, v302);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v300, 0, 1, v302);
  }
  v304 = v454[8];
  v305 = &v456[v304];
  v306 = &v458[v304];
  v307 = *(_QWORD *)&v458[v304 + 8];
  *(_QWORD *)v305 = *(_QWORD *)&v458[v304];
  *((_QWORD *)v305 + 1) = v307;
  v308 = *(_QWORD *)&v458[v304 + 24];
  *((_QWORD *)v305 + 2) = *(_QWORD *)&v458[v304 + 16];
  *((_QWORD *)v305 + 3) = v308;
  v309 = *(_QWORD *)&v458[v304 + 40];
  *((_QWORD *)v305 + 4) = *(_QWORD *)&v458[v304 + 32];
  *((_QWORD *)v305 + 5) = v309;
  v310 = *(_QWORD *)&v458[v304 + 56];
  *((_QWORD *)v305 + 6) = *(_QWORD *)&v458[v304 + 48];
  *((_QWORD *)v305 + 7) = v310;
  v311 = *(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32);
  v312 = &v305[v311];
  v313 = &v306[v311];
  v314 = type metadata accessor for Date(0);
  v315 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v314 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v316 = swift_bridgeObjectRetain();
  v443 = v315;
  v445 = v314;
  v315(v312, v313, v314, v316);
  v317 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
  v318 = *(int *)(v317 + 20);
  v319 = &v312[v318];
  v320 = &v313[v318];
  v321 = type metadata accessor for Elevation(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v320, 1, v321))
  {
    v322 = sub_1000BA294(&qword_100BC3370);
    memcpy(v319, v320, *(_QWORD *)(*(_QWORD *)(v322 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v321 - 8) + 16))(v319, v320, v321);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v319, 0, 1, v321);
  }
  v323 = *(int *)(v317 + 24);
  v324 = &v312[v323];
  v325 = &v313[v323];
  v326 = type metadata accessor for BackgroundMoonData(0);
  v447 = v317;
  v439 = v326;
  v441 = v321;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v325, 1, v326))
  {
    v327 = sub_1000BA294(&qword_100BC3378);
    memcpy(v324, v325, *(_QWORD *)(*(_QWORD *)(v327 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v326 - 8) + 16))(v324, v325, v326);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v324, 0, 1, v326);
  }
  v328 = v454[9];
  v329 = &v456[v328];
  v330 = &v458[v328];
  v331 = *((_QWORD *)v330 + 1);
  *(_QWORD *)v329 = *(_QWORD *)v330;
  *((_QWORD *)v329 + 1) = v331;
  v332 = *((_QWORD *)v330 + 3);
  *((_QWORD *)v329 + 2) = *((_QWORD *)v330 + 2);
  *((_QWORD *)v329 + 3) = v332;
  v333 = *((_QWORD *)v330 + 5);
  *((_QWORD *)v329 + 4) = *((_QWORD *)v330 + 4);
  *((_QWORD *)v329 + 5) = v333;
  v334 = *((_QWORD *)v330 + 7);
  *((_QWORD *)v329 + 6) = *((_QWORD *)v330 + 6);
  *((_QWORD *)v329 + 7) = v334;
  v335 = *((_QWORD *)v330 + 9);
  *((_QWORD *)v329 + 8) = *((_QWORD *)v330 + 8);
  *((_QWORD *)v329 + 9) = v335;
  v336 = *((_QWORD *)v330 + 11);
  *((_QWORD *)v329 + 10) = *((_QWORD *)v330 + 10);
  *((_QWORD *)v329 + 11) = v336;
  v337 = *((_QWORD *)v330 + 13);
  *((_QWORD *)v329 + 12) = *((_QWORD *)v330 + 12);
  *((_QWORD *)v329 + 13) = v337;
  v338 = v454[10];
  v339 = &v456[v338];
  v340 = &v458[v338];
  v341 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v302 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v342 = swift_bridgeObjectRetain();
  v341(v339, v340, v302, v342);
  v343 = *(int *)(type metadata accessor for UVIndexComponentPreprocessedDataModel(0) + 20);
  v344 = &v339[v343];
  v345 = &v340[v343];
  v346 = *((_QWORD *)v345 + 1);
  *(_QWORD *)v344 = *(_QWORD *)v345;
  *((_QWORD *)v344 + 1) = v346;
  v347 = v454[11];
  v348 = &v456[v347];
  v349 = &v458[v347];
  v350 = *((_QWORD *)v349 + 1);
  *(_QWORD *)v348 = *(_QWORD *)v349;
  *((_QWORD *)v348 + 1) = v350;
  v351 = *((_QWORD *)v349 + 3);
  *((_QWORD *)v348 + 2) = *((_QWORD *)v349 + 2);
  *((_QWORD *)v348 + 3) = v351;
  v352 = *((_QWORD *)v349 + 5);
  *((_QWORD *)v348 + 4) = *((_QWORD *)v349 + 4);
  *((_QWORD *)v348 + 5) = v352;
  v353 = v454[12];
  v354 = &v456[v353];
  v355 = &v458[v353];
  v356 = type metadata accessor for PressureTrend(0);
  v357 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v356 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v358 = swift_bridgeObjectRetain();
  v357(v354, v355, v356, v358);
  v359 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
  v360 = v359[5];
  v361 = &v354[v360];
  v362 = &v355[v360];
  v363 = *((_QWORD *)v362 + 1);
  *(_QWORD *)v361 = *(_QWORD *)v362;
  *((_QWORD *)v361 + 1) = v363;
  v364 = v359[6];
  v365 = &v354[v364];
  v366 = &v355[v364];
  v437 = *((_QWORD *)v366 + 1);
  *(_QWORD *)v365 = *(_QWORD *)v366;
  *((_QWORD *)v365 + 1) = v437;
  v367 = v359[7];
  v368 = &v354[v367];
  v369 = &v355[v367];
  v435 = *((_QWORD *)v369 + 1);
  *(_QWORD *)v368 = *(_QWORD *)v369;
  *((_QWORD *)v368 + 1) = v435;
  *(_QWORD *)&v354[v359[8]] = *(_QWORD *)&v355[v359[8]];
  v370 = v359[9];
  v371 = &v354[v370];
  v372 = &v355[v370];
  v433 = *((_QWORD *)v372 + 1);
  *(_QWORD *)v371 = *(_QWORD *)v372;
  *((_QWORD *)v371 + 1) = v433;
  v373 = v454[13];
  v374 = &v456[v373];
  v375 = &v458[v373];
  v376 = *((_QWORD *)v375 + 1);
  *(_QWORD *)v374 = *(_QWORD *)v375;
  *((_QWORD *)v374 + 1) = v376;
  v377 = *((_QWORD *)v375 + 3);
  *((_QWORD *)v374 + 2) = *((_QWORD *)v375 + 2);
  *((_QWORD *)v374 + 3) = v377;
  v378 = *((_QWORD *)v375 + 5);
  *((_QWORD *)v374 + 4) = *((_QWORD *)v375 + 4);
  *((_QWORD *)v374 + 5) = v378;
  v379 = *((_QWORD *)v375 + 7);
  *((_QWORD *)v374 + 6) = *((_QWORD *)v375 + 6);
  *((_QWORD *)v374 + 7) = v379;
  v380 = *((_QWORD *)v375 + 9);
  *((_QWORD *)v374 + 8) = *((_QWORD *)v375 + 8);
  *((_QWORD *)v374 + 9) = v380;
  v381 = *((_QWORD *)v375 + 11);
  *((_QWORD *)v374 + 10) = *((_QWORD *)v375 + 10);
  *((_QWORD *)v374 + 11) = v381;
  v382 = *((_QWORD *)v375 + 13);
  *((_QWORD *)v374 + 12) = *((_QWORD *)v375 + 12);
  *((_QWORD *)v374 + 13) = v382;
  v383 = *((_QWORD *)v375 + 15);
  *((_QWORD *)v374 + 14) = *((_QWORD *)v375 + 14);
  *((_QWORD *)v374 + 15) = v383;
  v384 = *((_QWORD *)v375 + 17);
  *((_QWORD *)v374 + 16) = *((_QWORD *)v375 + 16);
  *((_QWORD *)v374 + 17) = v384;
  v385 = *((_QWORD *)v375 + 19);
  *((_QWORD *)v374 + 18) = *((_QWORD *)v375 + 18);
  *((_QWORD *)v374 + 19) = v385;
  v386 = *((_QWORD *)v375 + 21);
  *((_QWORD *)v374 + 20) = *((_QWORD *)v375 + 20);
  *((_QWORD *)v374 + 21) = v386;
  v387 = *((_QWORD *)v375 + 23);
  *((_QWORD *)v374 + 22) = *((_QWORD *)v375 + 22);
  *((_QWORD *)v374 + 23) = v387;
  v388 = *((_QWORD *)v375 + 25);
  *((_QWORD *)v374 + 24) = *((_QWORD *)v375 + 24);
  *((_QWORD *)v374 + 25) = v388;
  *((_OWORD *)v374 + 13) = *((_OWORD *)v375 + 13);
  *((_QWORD *)v374 + 28) = *((_QWORD *)v375 + 28);
  v389 = v454[14];
  v390 = &v456[v389];
  v391 = &v458[v389];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v392 = swift_bridgeObjectRetain();
  v443(v390, v391, v445, v392);
  v393 = *(int *)(v447 + 20);
  v394 = &v390[v393];
  v395 = &v391[v393];
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v391[v393], 1, v441))
  {
    v396 = sub_1000BA294(&qword_100BC3370);
    memcpy(v394, v395, *(_QWORD *)(*(_QWORD *)(v396 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v441 - 8) + 16))(v394, v395, v441);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v394, 0, 1, v441);
  }
  v397 = *(int *)(v447 + 24);
  v398 = &v390[v397];
  v399 = &v391[v397];
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v391[v397], 1, v439))
  {
    v400 = sub_1000BA294(&qword_100BC3378);
    memcpy(v398, v399, *(_QWORD *)(*(_QWORD *)(v400 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v439 - 8) + 16))(v398, v399, v439);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v398, 0, 1, v439);
  }
  v401 = v454[15];
  v402 = &v456[v401];
  v403 = &v458[v401];
  v404 = *((_QWORD *)v403 + 1);
  *(_QWORD *)v402 = *(_QWORD *)v403;
  *((_QWORD *)v402 + 1) = v404;
  v405 = *((_QWORD *)v403 + 3);
  *((_QWORD *)v402 + 2) = *((_QWORD *)v403 + 2);
  *((_QWORD *)v402 + 3) = v405;
  v406 = *((_QWORD *)v403 + 5);
  *((_QWORD *)v402 + 4) = *((_QWORD *)v403 + 4);
  *((_QWORD *)v402 + 5) = v406;
  v407 = *((_QWORD *)v403 + 7);
  *((_QWORD *)v402 + 6) = *((_QWORD *)v403 + 6);
  *((_QWORD *)v402 + 7) = v407;
  v408 = *((_QWORD *)v403 + 9);
  *((_QWORD *)v402 + 8) = *((_QWORD *)v403 + 8);
  *((_QWORD *)v402 + 9) = v408;
  v409 = *((_QWORD *)v403 + 11);
  *((_QWORD *)v402 + 10) = *((_QWORD *)v403 + 10);
  *((_QWORD *)v402 + 11) = v409;
  v410 = *((_QWORD *)v403 + 13);
  *((_QWORD *)v402 + 12) = *((_QWORD *)v403 + 12);
  *((_QWORD *)v402 + 13) = v410;
  v411 = v450[10];
  v412 = (_QWORD *)((char *)v452 + v411);
  v413 = (_QWORD *)((char *)v451 + v411);
  v414 = type metadata accessor for NewsDataModel(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload(v413) == 1)
  {
    *v412 = *v413;
    swift_bridgeObjectRetain();
    v415 = 1;
  }
  else
  {
    v416 = type metadata accessor for News(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v416 - 8) + 16))(v412, v413, v416);
    v415 = 0;
  }
  swift_storeEnumTagMultiPayload(v412, v414, v415);
  v417 = v450[11];
  v418 = v450[12];
  v419 = (_QWORD *)((char *)v452 + v417);
  v420 = (_QWORD *)((char *)v451 + v417);
  v421 = v420[1];
  *v419 = *v420;
  v419[1] = v421;
  v422 = (char *)v452 + v418;
  v423 = (char *)v451 + v418;
  v424 = swift_retain();
  ((void (*)(char *, char *, uint64_t, __n128))v428)(v422, v423, v449, v424);
  v425 = sub_1000BA294(&qword_100C06160);
  *(_QWORD *)&v422[*(int *)(v425 + 28)] = *(_QWORD *)&v423[*(int *)(v425 + 28)];
  swift_retain();
  return v452;
}

_QWORD *sub_10079E72C(uint64_t a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t, __n128);
  __n128 v84;
  int *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  _QWORD *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  const void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t, uint64_t, __n128);
  __n128 v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  const void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  const void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  _QWORD *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  void (*v126)(char *, uint64_t, uint64_t, __n128);
  __n128 v127;
  uint64_t v128;
  char *v129;
  _QWORD *v130;
  uint64_t v131;
  char *v132;
  _QWORD *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(char *, uint64_t, uint64_t, __n128);
  __n128 v139;
  int *v140;
  uint64_t v141;
  char *v142;
  _QWORD *v143;
  uint64_t v144;
  char *v145;
  _QWORD *v146;
  uint64_t v147;
  char *v148;
  _QWORD *v149;
  uint64_t v150;
  char *v151;
  _QWORD *v152;
  uint64_t v153;
  char *v154;
  _QWORD *v155;
  uint64_t v156;
  char *v157;
  __n128 v158;
  uint64_t v159;
  char *v160;
  const void *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  const void *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  _QWORD *v169;
  uint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  char *v178;
  int *v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  int v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  int v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  char *v202;
  uint64_t v203;
  int v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  int v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  size_t v217;
  char *v218;
  const void *v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  int v223;
  uint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  int v243;
  int v244;
  uint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  char *v249;
  void (*v250)(char *, char *, uint64_t, __n128);
  __n128 v251;
  int *v252;
  uint64_t v253;
  char *v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  char *v259;
  uint64_t v260;
  char *v261;
  char *v262;
  uint64_t v263;
  char *v264;
  char *v265;
  uint64_t v266;
  int v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  char *v273;
  uint64_t v274;
  char *v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  char *v280;
  uint64_t v281;
  int v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  char *v288;
  uint64_t v289;
  int v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  char *v295;
  char *v296;
  __n128 v297;
  uint64_t v298;
  char *v299;
  char *v300;
  uint64_t v301;
  char *v302;
  char *v303;
  uint64_t v304;
  char *v305;
  char *v306;
  uint64_t v307;
  char *v308;
  char *v309;
  uint64_t v310;
  int *v311;
  uint64_t v312;
  char *v313;
  char *v314;
  uint64_t v315;
  char *v316;
  char *v317;
  uint64_t v318;
  char *v319;
  char *v320;
  uint64_t v321;
  char *v322;
  char *v323;
  uint64_t v324;
  char *v325;
  char *v326;
  __n128 v327;
  uint64_t v328;
  char *v329;
  char *v330;
  uint64_t v331;
  char *v332;
  char *v333;
  int v334;
  int v335;
  char *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  char *v341;
  int v342;
  int v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  char *v347;
  char *v348;
  uint64_t v349;
  _QWORD *v350;
  _QWORD *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  _QWORD *v356;
  _QWORD *v357;
  uint64_t v358;
  __n128 v359;
  uint64_t v360;
  char *v361;
  char *v362;
  uint64_t v363;
  uint64_t v365;
  char *v366;
  char *v367;
  uint64_t v368;
  int *v369;
  uint64_t v370;
  char *v371;
  char *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  char *v376;
  uint64_t v377;
  int v378;
  int v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  void (*v385)(char *, uint64_t, uint64_t, __n128);
  uint64_t v386;
  void (*v387)(char *, char *);
  uint64_t v388;
  _QWORD *v389;
  void (*v390)(char *, char *);
  _QWORD *v391;
  uint64_t v392;
  int *v393;
  _QWORD *v394;
  _QWORD *v395;
  char *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  int *v400;
  int *v401;
  char *v402;

  v4 = a2;
  v5 = (_QWORD *)a1;
  if ((_QWORD *)a1 != a2)
  {
    sub_100021A14(a1, &qword_100BC4F28);
    v6 = sub_1000BA294(&qword_100BC4F28);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4);
    *v5 = *v4;
    if (EnumCaseMultiPayload == 1)
    {
      v5[1] = v4[1];
      swift_retain();
      swift_retain();
      v8 = *(int *)(sub_1000BA294(&qword_100BC6510) + 32);
      v9 = (char *)v5 + v8;
      v10 = (char *)v4 + v8;
      v11 = type metadata accessor for PresentationMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      v12 = 1;
    }
    else
    {
      swift_retain();
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v5, v6, v12);
  }
  v13 = a3[5];
  v14 = (char *)v5 + v13;
  v15 = (char *)v4 + v13;
  v16 = type metadata accessor for LocationModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  *(_QWORD *)((char *)v5 + a3[6]) = *(_QWORD *)((char *)v4 + a3[6]);
  v393 = a3;
  v394 = v4;
  v395 = v5;
  if (v5 != v4)
  {
    v17 = a3[7];
    v18 = (_QWORD *)((char *)v5 + v17);
    v19 = (_QWORD *)((char *)v4 + v17);
    sub_1000215BC((uint64_t)v5 + v17, type metadata accessor for LocationWeatherDataState);
    v20 = type metadata accessor for LocationWeatherDataState(0);
    v21 = swift_getEnumCaseMultiPayload(v19);
    if (v21 == 2)
    {
      *v18 = *v19;
      v18[1] = v19[1];
      swift_bridgeObjectRetain();
      v24 = v18;
      v25 = v20;
      v26 = 2;
LABEL_59:
      swift_storeEnumTagMultiPayload(v24, v25, v26);
      goto LABEL_60;
    }
    if (v21 != 1)
    {
      if (v21)
      {
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
        goto LABEL_60;
      }
      v22 = type metadata accessor for NewsDataModel(0);
      if (swift_getEnumCaseMultiPayload(v19) == 1)
      {
        *v18 = *v19;
        swift_bridgeObjectRetain();
        v23 = 1;
      }
      else
      {
        v33 = type metadata accessor for News(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v18, v19, v33);
        v23 = 0;
      }
      swift_storeEnumTagMultiPayload(v18, v22, v23);
      v24 = v18;
      v25 = v20;
      v26 = 0;
      goto LABEL_59;
    }
    *v18 = *v19;
    v18[1] = v19[1];
    v27 = (int *)type metadata accessor for WeatherData(0);
    v28 = v27[5];
    v29 = (char *)v18 + v28;
    v391 = v19;
    v30 = (char *)v19 + v28;
    v31 = type metadata accessor for Locale(0);
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v30, 1, v31))
    {
      v32 = sub_1000BA294(&qword_100BC3340);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v29, 0, 1, v31);
    }
    v34 = v27[6];
    v35 = (char *)v18 + v34;
    v36 = (char *)v391 + v34;
    v37 = type metadata accessor for WeatherDataModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
    v38 = v27[7];
    v39 = (char *)v18 + v38;
    v40 = (char *)v391 + v38;
    v41 = sub_1000BA294(&qword_100BC3348);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v40, 1, v41))
    {
      v42 = type metadata accessor for WeatherData.CachingState(0);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      v43 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v39, v40, v43);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v39, 0, 1, v41);
    }
    v44 = v27[8];
    v45 = (_QWORD *)((char *)v18 + v44);
    v46 = (_QWORD *)((char *)v391 + v44);
    v47 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
    v48 = swift_getEnumCaseMultiPayload(v46);
    if (v48 == 1)
    {
      v52 = type metadata accessor for WeatherStatisticsModel(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v45, v46, v52);
      v49 = v45;
      v50 = v47;
      v51 = 1;
    }
    else
    {
      if (v48)
      {
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
        goto LABEL_28;
      }
      *v45 = *v46;
      v45[1] = v46[1];
      swift_bridgeObjectRetain();
      v49 = v45;
      v50 = v47;
      v51 = 0;
    }
    swift_storeEnumTagMultiPayload(v49, v50, v51);
LABEL_28:
    v53 = v27[9];
    v54 = (char *)v18 + v53;
    v55 = (char *)v391 + v53;
    v56 = type metadata accessor for WeatherDataOverrides(0);
    v382 = v20;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v55, 1, v56))
    {
      v57 = sub_1000BA294(&qword_100BC3350);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
      v58 = v391;
    }
    else
    {
      v59 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v55, 1, v59))
      {
        v60 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v54, v55, v59);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v54, 0, 1, v59);
      }
      v61 = *(int *)(v56 + 20);
      v62 = &v54[v61];
      v63 = &v55[v61];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v63, 1, v59))
      {
        v64 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v62, v63, v59);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v62, 0, 1, v59);
      }
      v58 = v391;
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v54, 0, 1, v56);
    }
    v381 = sub_1000BA294(&qword_100BC3358);
    v65 = *(int *)(v381 + 48);
    v389 = v18;
    v66 = (char *)v18 + v65;
    v67 = (uint64_t)v58 + v65;
    v68 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v66, v67, v68);
    v69 = type metadata accessor for PreprocessedWeatherData(0);
    *(_QWORD *)&v66[*(int *)(v69 + 20)] = *(_QWORD *)(v67 + *(int *)(v69 + 20));
    v399 = v67;
    v401 = (int *)v69;
    v70 = *(int *)(v69 + 24);
    v396 = v66;
    v71 = &v66[v70];
    v72 = v67 + v70;
    *(_QWORD *)v71 = *(_QWORD *)(v67 + v70);
    *((_QWORD *)v71 + 1) = *(_QWORD *)(v67 + v70 + 8);
    *((_QWORD *)v71 + 2) = *(_QWORD *)(v67 + v70 + 16);
    *((_QWORD *)v71 + 3) = *(_QWORD *)(v67 + v70 + 24);
    *((_QWORD *)v71 + 4) = *(_QWORD *)(v67 + v70 + 32);
    *((_QWORD *)v71 + 5) = *(_QWORD *)(v67 + v70 + 40);
    v73 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
    v74 = *(int *)(v73 + 28);
    v75 = &v71[v74];
    v76 = (_QWORD *)(v72 + v74);
    v77 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v76, 1, v77))
    {
      v78 = sub_1000BA294(&qword_100BC3360);
      memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v75 = *v76;
      *((_QWORD *)v75 + 1) = v76[1];
      v79 = *(int *)(v77 + 20);
      v80 = &v75[v79];
      v81 = (char *)v76 + v79;
      v82 = type metadata accessor for TemperatureScaleConfiguration(0);
      v83 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v82 - 8) + 16);
      v84 = swift_bridgeObjectRetain();
      v83(v80, v81, v82, v84);
      v85 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
      *(_QWORD *)&v80[v85[5]] = *(_QWORD *)&v81[v85[5]];
      *(_QWORD *)&v80[v85[6]] = *(_QWORD *)&v81[v85[6]];
      *(_QWORD *)&v80[v85[7]] = *(_QWORD *)&v81[v85[7]];
      v86 = v85[8];
      v87 = &v80[v86];
      v88 = &v81[v86];
      *(_QWORD *)v87 = *(_QWORD *)v88;
      *((_QWORD *)v87 + 1) = *((_QWORD *)v88 + 1);
      v80[v85[9]] = v81[v85[9]];
      swift_bridgeObjectRetain();
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v75, 0, 1, v77);
    }
    v89 = *(int *)(v73 + 32);
    v90 = &v71[v89];
    v91 = (_QWORD *)(v72 + v89);
    *(_QWORD *)v90 = *v91;
    *((_QWORD *)v90 + 1) = v91[1];
    v92 = v401[7];
    v93 = &v396[v92];
    v94 = v399 + v92;
    *(_QWORD *)&v396[v92] = *(_QWORD *)(v399 + v92);
    v95 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
    v96 = &v93[v95];
    v97 = (const void *)(v94 + v95);
    v98 = type metadata accessor for WeatherDescription(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v384 = v98;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v97, 1, v98))
    {
      v99 = sub_1000BA294(&qword_100BC3368);
      memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v98 - 8) + 16))(v96, v97, v98);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v96, 0, 1, v98);
    }
    v100 = v401[8];
    v101 = &v396[v100];
    v102 = v399 + v100;
    *(_QWORD *)v101 = *(_QWORD *)(v399 + v100);
    *((_QWORD *)v101 + 1) = *(_QWORD *)(v399 + v100 + 8);
    *((_QWORD *)v101 + 2) = *(_QWORD *)(v399 + v100 + 16);
    *((_QWORD *)v101 + 3) = *(_QWORD *)(v399 + v100 + 24);
    *((_QWORD *)v101 + 4) = *(_QWORD *)(v399 + v100 + 32);
    *((_QWORD *)v101 + 5) = *(_QWORD *)(v399 + v100 + 40);
    *((_QWORD *)v101 + 6) = *(_QWORD *)(v399 + v100 + 48);
    *((_QWORD *)v101 + 7) = *(_QWORD *)(v399 + v100 + 56);
    v103 = *(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32);
    v104 = &v101[v103];
    v105 = v102 + v103;
    v106 = type metadata accessor for Date(0);
    v107 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v106 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v108 = swift_bridgeObjectRetain();
    v385 = v107;
    v107(v104, v105, v106, v108);
    v109 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
    v110 = *(int *)(v109 + 20);
    v111 = &v104[v110];
    v112 = (const void *)(v105 + v110);
    v113 = type metadata accessor for Elevation(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v112, 1, v113))
    {
      v114 = sub_1000BA294(&qword_100BC3370);
      memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v113 - 8) + 16))(v111, v112, v113);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v111, 0, 1, v113);
    }
    v115 = *(int *)(v109 + 24);
    v116 = &v104[v115];
    v117 = (const void *)(v105 + v115);
    v118 = type metadata accessor for BackgroundMoonData(0);
    v386 = v106;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v117, 1, v118))
    {
      v119 = sub_1000BA294(&qword_100BC3378);
      memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v118 - 8) + 16))(v116, v117, v118);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v116, 0, 1, v118);
    }
    v120 = v401[9];
    v121 = &v396[v120];
    v122 = (_QWORD *)(v399 + v120);
    *(_QWORD *)v121 = *v122;
    *((_QWORD *)v121 + 1) = v122[1];
    *((_QWORD *)v121 + 2) = v122[2];
    *((_QWORD *)v121 + 3) = v122[3];
    *((_QWORD *)v121 + 4) = v122[4];
    *((_QWORD *)v121 + 5) = v122[5];
    *((_QWORD *)v121 + 6) = v122[6];
    *((_QWORD *)v121 + 7) = v122[7];
    *((_QWORD *)v121 + 8) = v122[8];
    *((_QWORD *)v121 + 9) = v122[9];
    *((_QWORD *)v121 + 10) = v122[10];
    *((_QWORD *)v121 + 11) = v122[11];
    *((_QWORD *)v121 + 12) = v122[12];
    *((_QWORD *)v121 + 13) = v122[13];
    v123 = v401[10];
    v124 = &v396[v123];
    v125 = v399 + v123;
    v126 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v384 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v127 = swift_bridgeObjectRetain();
    v126(v124, v125, v384, v127);
    v128 = *(int *)(type metadata accessor for UVIndexComponentPreprocessedDataModel(0) + 20);
    v129 = &v124[v128];
    v130 = (_QWORD *)(v125 + v128);
    *(_QWORD *)v129 = *v130;
    *((_QWORD *)v129 + 1) = v130[1];
    v131 = v401[11];
    v132 = &v396[v131];
    v133 = (_QWORD *)(v399 + v131);
    *(_QWORD *)v132 = *v133;
    *((_QWORD *)v132 + 1) = v133[1];
    *((_QWORD *)v132 + 2) = v133[2];
    *((_QWORD *)v132 + 3) = v133[3];
    *((_QWORD *)v132 + 4) = v133[4];
    *((_QWORD *)v132 + 5) = v133[5];
    v134 = v401[12];
    v135 = &v396[v134];
    v136 = v399 + v134;
    v137 = type metadata accessor for PressureTrend(0);
    v138 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v137 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v139 = swift_bridgeObjectRetain();
    v138(v135, v136, v137, v139);
    v140 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
    v141 = v140[5];
    v142 = &v135[v141];
    v143 = (_QWORD *)(v136 + v141);
    *(_QWORD *)v142 = *v143;
    *((_QWORD *)v142 + 1) = v143[1];
    v144 = v140[6];
    v145 = &v135[v144];
    v146 = (_QWORD *)(v136 + v144);
    *(_QWORD *)v145 = *v146;
    *((_QWORD *)v145 + 1) = v146[1];
    v147 = v140[7];
    v148 = &v135[v147];
    v149 = (_QWORD *)(v136 + v147);
    *(_QWORD *)v148 = *v149;
    *((_QWORD *)v148 + 1) = v149[1];
    *(_QWORD *)&v135[v140[8]] = *(_QWORD *)(v136 + v140[8]);
    v150 = v140[9];
    v151 = &v135[v150];
    v152 = (_QWORD *)(v136 + v150);
    *(_QWORD *)v151 = *v152;
    *((_QWORD *)v151 + 1) = v152[1];
    v153 = v401[13];
    v154 = &v396[v153];
    v155 = (_QWORD *)(v399 + v153);
    *(_QWORD *)v154 = *v155;
    *((_QWORD *)v154 + 1) = v155[1];
    *((_QWORD *)v154 + 2) = v155[2];
    *((_QWORD *)v154 + 3) = v155[3];
    *((_QWORD *)v154 + 4) = v155[4];
    *((_QWORD *)v154 + 5) = v155[5];
    *((_QWORD *)v154 + 6) = v155[6];
    *((_QWORD *)v154 + 7) = v155[7];
    *((_QWORD *)v154 + 8) = v155[8];
    *((_QWORD *)v154 + 9) = v155[9];
    *((_QWORD *)v154 + 10) = v155[10];
    *((_QWORD *)v154 + 11) = v155[11];
    *((_QWORD *)v154 + 12) = v155[12];
    *((_QWORD *)v154 + 13) = v155[13];
    *((_QWORD *)v154 + 14) = v155[14];
    *((_QWORD *)v154 + 15) = v155[15];
    *((_QWORD *)v154 + 16) = v155[16];
    *((_QWORD *)v154 + 17) = v155[17];
    *((_QWORD *)v154 + 18) = v155[18];
    *((_QWORD *)v154 + 19) = v155[19];
    *((_QWORD *)v154 + 20) = v155[20];
    *((_QWORD *)v154 + 21) = v155[21];
    *((_QWORD *)v154 + 22) = v155[22];
    *((_QWORD *)v154 + 23) = v155[23];
    *((_QWORD *)v154 + 24) = v155[24];
    *((_QWORD *)v154 + 25) = v155[25];
    *((_QWORD *)v154 + 26) = v155[26];
    *((_QWORD *)v154 + 27) = v155[27];
    *((_QWORD *)v154 + 28) = v155[28];
    v156 = v401[14];
    v157 = &v396[v156];
    v383 = v399 + v156;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v158 = swift_bridgeObjectRetain();
    v385(v157, v383, v386, v158);
    v159 = *(int *)(v109 + 20);
    v160 = &v157[v159];
    v161 = (const void *)(v383 + v159);
    if (_s7Weather24LocationCompositionStateOwet_0(v383 + v159, 1, v113))
    {
      v162 = sub_1000BA294(&qword_100BC3370);
      memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v113 - 8) + 16))(v160, v161, v113);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v160, 0, 1, v113);
    }
    v163 = *(int *)(v109 + 24);
    v164 = &v157[v163];
    v165 = (const void *)(v383 + v163);
    if (_s7Weather24LocationCompositionStateOwet_0(v383 + v163, 1, v118))
    {
      v166 = sub_1000BA294(&qword_100BC3378);
      memcpy(v164, v165, *(_QWORD *)(*(_QWORD *)(v166 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v118 - 8) + 16))(v164, v165, v118);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v164, 0, 1, v118);
    }
    v167 = v401[15];
    v168 = &v396[v167];
    v169 = (_QWORD *)(v399 + v167);
    *(_QWORD *)v168 = *v169;
    *((_QWORD *)v168 + 1) = v169[1];
    *((_QWORD *)v168 + 2) = v169[2];
    *((_QWORD *)v168 + 3) = v169[3];
    *((_QWORD *)v168 + 4) = v169[4];
    *((_QWORD *)v168 + 5) = v169[5];
    *((_QWORD *)v168 + 6) = v169[6];
    *((_QWORD *)v168 + 7) = v169[7];
    *((_QWORD *)v168 + 8) = v169[8];
    *((_QWORD *)v168 + 9) = v169[9];
    *((_QWORD *)v168 + 10) = v169[10];
    *((_QWORD *)v168 + 11) = v169[11];
    *((_QWORD *)v168 + 12) = v169[12];
    *((_QWORD *)v168 + 13) = v169[13];
    v170 = *(int *)(v381 + 64);
    v171 = (_QWORD *)((char *)v389 + v170);
    v172 = (_QWORD *)((char *)v391 + v170);
    v173 = type metadata accessor for NewsDataModel(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload(v172) == 1)
    {
      *v171 = *v172;
      swift_bridgeObjectRetain();
      v174 = 1;
    }
    else
    {
      v175 = type metadata accessor for News(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v175 - 8) + 16))(v171, v172, v175);
      v174 = 0;
    }
    v4 = v394;
    v5 = v395;
    a3 = v393;
    swift_storeEnumTagMultiPayload(v171, v173, v174);
    v24 = v389;
    v25 = v382;
    v26 = 1;
    goto LABEL_59;
  }
LABEL_60:
  v176 = a3[8];
  v177 = (_QWORD *)((char *)v5 + v176);
  v178 = (char *)v4 + v176;
  *v177 = *(_QWORD *)((char *)v4 + v176);
  v177[1] = *(_QWORD *)((char *)v4 + v176 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v179 = (int *)type metadata accessor for WeatherData(0);
  v180 = v179[5];
  v181 = (char *)v177 + v180;
  v182 = &v178[v180];
  v183 = type metadata accessor for Locale(0);
  v184 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v181, 1, v183);
  v185 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v182, 1, v183);
  if (v184)
  {
    if (!v185)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v183 - 8) + 16))(v181, v182, v183);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v181, 0, 1, v183);
      goto LABEL_66;
    }
    goto LABEL_65;
  }
  v186 = *(_QWORD *)(v183 - 8);
  if (v185)
  {
    (*(void (**)(char *, uint64_t))(v186 + 8))(v181, v183);
LABEL_65:
    v187 = sub_1000BA294(&qword_100BC3340);
    memcpy(v181, v182, *(_QWORD *)(*(_QWORD *)(v187 - 8) + 64));
    goto LABEL_66;
  }
  (*(void (**)(char *, char *, uint64_t))(v186 + 24))(v181, v182, v183);
LABEL_66:
  v188 = v179[6];
  v189 = (char *)v177 + v188;
  v190 = &v178[v188];
  v191 = type metadata accessor for WeatherDataModel(0);
  v387 = *(void (**)(char *, char *))(*(_QWORD *)(v191 - 8) + 24);
  v388 = v191;
  v387(v189, v190);
  v192 = v179[7];
  v193 = (char *)v177 + v192;
  v194 = &v178[v192];
  v195 = sub_1000BA294(&qword_100BC3348);
  v196 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v193, 1, v195);
  v197 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v194, 1, v195);
  if (v196)
  {
    if (!v197)
    {
      v198 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v198 - 8) + 16))(v193, v194, v198);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v193, 0, 1, v195);
      goto LABEL_72;
    }
    goto LABEL_71;
  }
  if (v197)
  {
    sub_100021A14((uint64_t)v193, &qword_100BC3348);
LABEL_71:
    v199 = type metadata accessor for WeatherData.CachingState(0);
    memcpy(v193, v194, *(_QWORD *)(*(_QWORD *)(v199 - 8) + 64));
    goto LABEL_72;
  }
  v220 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v220 - 8) + 24))(v193, v194, v220);
LABEL_72:
  if (v5 == v4)
    goto LABEL_79;
  v200 = v179[8];
  v201 = (_QWORD *)((char *)v177 + v200);
  v202 = &v178[v200];
  sub_1000215BC((uint64_t)v177 + v200, type metadata accessor for WeatherData.WeatherStatisticsState);
  v203 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
  v204 = swift_getEnumCaseMultiPayload(v202);
  if (v204 == 1)
  {
    v208 = type metadata accessor for WeatherStatisticsModel(0);
    (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v208 - 8) + 16))(v201, v202, v208);
    v205 = v201;
    v206 = v203;
    v207 = 1;
    goto LABEL_77;
  }
  if (!v204)
  {
    *v201 = *(_QWORD *)v202;
    v201[1] = *((_QWORD *)v202 + 1);
    swift_bridgeObjectRetain();
    v205 = v201;
    v206 = v203;
    v207 = 0;
LABEL_77:
    swift_storeEnumTagMultiPayload(v205, v206, v207);
    goto LABEL_79;
  }
  memcpy(v201, v202, *(_QWORD *)(*(_QWORD *)(v203 - 8) + 64));
LABEL_79:
  v209 = v179[9];
  v210 = (char *)v177 + v209;
  v211 = &v178[v209];
  v212 = type metadata accessor for WeatherDataOverrides(0);
  v213 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v210, 1, v212);
  v214 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v211, 1, v212);
  if (v213)
  {
    if (!v214)
    {
      v215 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v211, 1, v215))
      {
        v216 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v210, v211, *(_QWORD *)(*(_QWORD *)(v216 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v215 - 8) + 16))(v210, v211, v215);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v210, 0, 1, v215);
      }
      v224 = *(int *)(v212 + 20);
      v225 = &v210[v224];
      v226 = &v211[v224];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v226, 1, v215))
      {
        v227 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v225, v226, *(_QWORD *)(*(_QWORD *)(v227 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v215 - 8) + 16))(v225, v226, v215);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v225, 0, 1, v215);
      }
      v228 = (uint64_t)v210;
      v229 = v212;
      goto LABEL_97;
    }
    goto LABEL_85;
  }
  if (v214)
  {
    sub_1000215BC((uint64_t)v210, type metadata accessor for WeatherDataOverrides);
LABEL_85:
    v217 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC3350) - 8) + 64);
    v218 = v210;
    v219 = v211;
LABEL_86:
    memcpy(v218, v219, v217);
    goto LABEL_98;
  }
  v221 = type metadata accessor for Date(0);
  v222 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v210, 1, v221);
  v223 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v211, 1, v221);
  if (v222)
  {
    if (!v223)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v221 - 8) + 16))(v210, v211, v221);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v210, 0, 1, v221);
      goto LABEL_149;
    }
    goto LABEL_148;
  }
  v373 = *(_QWORD *)(v221 - 8);
  if (v223)
  {
    (*(void (**)(char *, uint64_t))(v373 + 8))(v210, v221);
LABEL_148:
    v374 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v210, v211, *(_QWORD *)(*(_QWORD *)(v374 - 8) + 64));
    goto LABEL_149;
  }
  (*(void (**)(char *, char *, uint64_t))(v373 + 24))(v210, v211, v221);
LABEL_149:
  v375 = *(int *)(v212 + 20);
  v376 = &v210[v375];
  v377 = (uint64_t)&v211[v375];
  v378 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)&v210[v375], 1, v221);
  v379 = _s7Weather24LocationCompositionStateOwet_0(v377, 1, v221);
  if (v378)
  {
    if (!v379)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v221 - 8) + 16))(v376, v377, v221);
      v228 = (uint64_t)v376;
      v229 = v221;
LABEL_97:
      _s7Weather24LocationCompositionStateOwst_0(v228, 0, 1, v229);
      goto LABEL_98;
    }
    goto LABEL_154;
  }
  v380 = *(_QWORD *)(v221 - 8);
  if (v379)
  {
    (*(void (**)(char *, uint64_t))(v380 + 8))(v376, v221);
LABEL_154:
    v217 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
    v218 = v376;
    v219 = (const void *)v377;
    goto LABEL_86;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v380 + 24))(v376, v377, v221);
LABEL_98:
  v230 = a3[9];
  v231 = (char *)v5 + v230;
  v232 = (char *)v4 + v230;
  v233 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v233 - 8) + 24))(v231, v232, v233);
  v234 = type metadata accessor for PreprocessedWeatherData(0);
  *(_QWORD *)&v231[*(int *)(v234 + 20)] = *(_QWORD *)&v232[*(int *)(v234 + 20)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v400 = (int *)v234;
  v402 = v232;
  v235 = *(int *)(v234 + 24);
  v236 = &v231[v235];
  v237 = &v232[v235];
  *(_QWORD *)v236 = *(_QWORD *)&v232[v235];
  *((_QWORD *)v236 + 1) = *(_QWORD *)&v232[v235 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v236 + 2) = *((_QWORD *)v237 + 2);
  *((_QWORD *)v236 + 3) = *((_QWORD *)v237 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v236 + 4) = *((_QWORD *)v237 + 4);
  *((_QWORD *)v236 + 5) = *((_QWORD *)v237 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v238 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
  v239 = *(int *)(v238 + 28);
  v240 = &v236[v239];
  v241 = &v237[v239];
  v242 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
  v243 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v240, 1, v242);
  v244 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v241, 1, v242);
  if (v243)
  {
    if (!v244)
    {
      *(_QWORD *)v240 = *(_QWORD *)v241;
      *((_QWORD *)v240 + 1) = *((_QWORD *)v241 + 1);
      v245 = *(int *)(v242 + 20);
      v246 = &v240[v245];
      v247 = &v241[v245];
      v248 = type metadata accessor for TemperatureScaleConfiguration(0);
      v397 = v238;
      v249 = v231;
      v250 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v248 - 8) + 16);
      v251 = swift_bridgeObjectRetain();
      v250(v246, v247, v248, v251);
      v231 = v249;
      v238 = v397;
      v252 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
      *(_QWORD *)&v246[v252[5]] = *(_QWORD *)&v247[v252[5]];
      *(_QWORD *)&v246[v252[6]] = *(_QWORD *)&v247[v252[6]];
      *(_QWORD *)&v246[v252[7]] = *(_QWORD *)&v247[v252[7]];
      v253 = v252[8];
      v254 = &v246[v253];
      v255 = &v247[v253];
      *(_QWORD *)v254 = *(_QWORD *)v255;
      *((_QWORD *)v254 + 1) = *((_QWORD *)v255 + 1);
      v246[v252[9]] = v247[v252[9]];
      swift_bridgeObjectRetain();
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v240, 0, 1, v242);
      goto LABEL_104;
    }
    goto LABEL_103;
  }
  if (v244)
  {
    sub_1000215BC((uint64_t)v240, type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference);
LABEL_103:
    v256 = sub_1000BA294(&qword_100BC3360);
    memcpy(v240, v241, *(_QWORD *)(*(_QWORD *)(v256 - 8) + 64));
    goto LABEL_104;
  }
  *(_QWORD *)v240 = *(_QWORD *)v241;
  *((_QWORD *)v240 + 1) = *((_QWORD *)v241 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v365 = *(int *)(v242 + 20);
  v366 = &v240[v365];
  v367 = &v241[v365];
  v368 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v368 - 8) + 24))(v366, v367, v368);
  v369 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
  *(_QWORD *)&v366[v369[5]] = *(_QWORD *)&v367[v369[5]];
  *(_QWORD *)&v366[v369[6]] = *(_QWORD *)&v367[v369[6]];
  *(_QWORD *)&v366[v369[7]] = *(_QWORD *)&v367[v369[7]];
  v370 = v369[8];
  v371 = &v366[v370];
  v372 = &v367[v370];
  *(_QWORD *)v371 = *(_QWORD *)v372;
  *((_QWORD *)v371 + 1) = *((_QWORD *)v372 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v366[v369[9]] = v367[v369[9]];
LABEL_104:
  v257 = *(int *)(v238 + 32);
  v258 = &v236[v257];
  v259 = &v237[v257];
  *(_QWORD *)v258 = *(_QWORD *)v259;
  *((_QWORD *)v258 + 1) = *((_QWORD *)v259 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v260 = v400[7];
  v261 = &v231[v260];
  v262 = &v402[v260];
  *(_QWORD *)&v231[v260] = *(_QWORD *)&v402[v260];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v263 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
  v264 = &v261[v263];
  v265 = &v262[v263];
  v266 = type metadata accessor for WeatherDescription(0);
  v267 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v264, 1, v266);
  v268 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v265, 1, v266);
  if (v267)
  {
    if (!v268)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v266 - 8) + 16))(v264, v265, v266);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v264, 0, 1, v266);
      goto LABEL_110;
    }
    goto LABEL_109;
  }
  v269 = *(_QWORD *)(v266 - 8);
  if (v268)
  {
    (*(void (**)(char *, uint64_t))(v269 + 8))(v264, v266);
LABEL_109:
    v270 = sub_1000BA294(&qword_100BC3368);
    memcpy(v264, v265, *(_QWORD *)(*(_QWORD *)(v270 - 8) + 64));
    goto LABEL_110;
  }
  (*(void (**)(char *, char *, uint64_t))(v269 + 24))(v264, v265, v266);
LABEL_110:
  v271 = v400[8];
  v272 = &v231[v271];
  v273 = &v402[v271];
  *(_QWORD *)v272 = *(_QWORD *)&v402[v271];
  *((_QWORD *)v272 + 1) = *(_QWORD *)&v402[v271 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v272 + 2) = *((_QWORD *)v273 + 2);
  *((_QWORD *)v272 + 3) = *((_QWORD *)v273 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v272 + 4) = *((_QWORD *)v273 + 4);
  *((_QWORD *)v272 + 5) = *((_QWORD *)v273 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v272 + 6) = *((_QWORD *)v273 + 6);
  *((_QWORD *)v272 + 7) = *((_QWORD *)v273 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v274 = *(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32);
  v275 = &v272[v274];
  v276 = &v273[v274];
  v277 = type metadata accessor for Date(0);
  v390 = *(void (**)(char *, char *))(*(_QWORD *)(v277 - 8) + 24);
  v392 = v277;
  v390(v275, v276);
  v398 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
  v278 = *(int *)(v398 + 20);
  v279 = &v275[v278];
  v280 = &v276[v278];
  v281 = type metadata accessor for Elevation(0);
  v282 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v279, 1, v281);
  v283 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v280, 1, v281);
  if (v282)
  {
    if (!v283)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v281 - 8) + 16))(v279, v280, v281);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v279, 0, 1, v281);
      goto LABEL_116;
    }
    goto LABEL_115;
  }
  v284 = *(_QWORD *)(v281 - 8);
  if (v283)
  {
    (*(void (**)(char *, uint64_t))(v284 + 8))(v279, v281);
LABEL_115:
    v285 = sub_1000BA294(&qword_100BC3370);
    memcpy(v279, v280, *(_QWORD *)(*(_QWORD *)(v285 - 8) + 64));
    goto LABEL_116;
  }
  (*(void (**)(char *, char *, uint64_t))(v284 + 24))(v279, v280, v281);
LABEL_116:
  v286 = *(int *)(v398 + 24);
  v287 = &v275[v286];
  v288 = &v276[v286];
  v289 = type metadata accessor for BackgroundMoonData(0);
  v290 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v287, 1, v289);
  v291 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v288, 1, v289);
  if (v290)
  {
    if (!v291)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v289 - 8) + 16))(v287, v288, v289);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v287, 0, 1, v289);
      goto LABEL_122;
    }
    goto LABEL_121;
  }
  v292 = *(_QWORD *)(v289 - 8);
  if (v291)
  {
    (*(void (**)(char *, uint64_t))(v292 + 8))(v287, v289);
LABEL_121:
    v293 = sub_1000BA294(&qword_100BC3378);
    memcpy(v287, v288, *(_QWORD *)(*(_QWORD *)(v293 - 8) + 64));
    goto LABEL_122;
  }
  (*(void (**)(char *, char *, uint64_t))(v292 + 24))(v287, v288, v289);
LABEL_122:
  v294 = v400[9];
  v295 = &v231[v294];
  v296 = &v402[v294];
  *(_QWORD *)v295 = *(_QWORD *)&v402[v294];
  *((_QWORD *)v295 + 1) = *(_QWORD *)&v402[v294 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v295 + 2) = *((_QWORD *)v296 + 2);
  *((_QWORD *)v295 + 3) = *((_QWORD *)v296 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v295 + 4) = *((_QWORD *)v296 + 4);
  *((_QWORD *)v295 + 5) = *((_QWORD *)v296 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v295 + 6) = *((_QWORD *)v296 + 6);
  *((_QWORD *)v295 + 7) = *((_QWORD *)v296 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v295 + 8) = *((_QWORD *)v296 + 8);
  *((_QWORD *)v295 + 9) = *((_QWORD *)v296 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v295 + 10) = *((_QWORD *)v296 + 10);
  *((_QWORD *)v295 + 11) = *((_QWORD *)v296 + 11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v295 + 12) = *((_QWORD *)v296 + 12);
  *((_QWORD *)v295 + 13) = *((_QWORD *)v296 + 13);
  swift_bridgeObjectRetain();
  v297 = swift_bridgeObjectRelease();
  v298 = v400[10];
  v299 = &v231[v298];
  v300 = &v402[v298];
  (*(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v266 - 8) + 24))(&v231[v298], &v402[v298], v266, v297);
  v301 = *(int *)(type metadata accessor for UVIndexComponentPreprocessedDataModel(0) + 20);
  v302 = &v299[v301];
  v303 = &v300[v301];
  *(_QWORD *)v302 = *(_QWORD *)v303;
  *((_QWORD *)v302 + 1) = *((_QWORD *)v303 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v304 = v400[11];
  v305 = &v231[v304];
  v306 = &v402[v304];
  *(_QWORD *)v305 = *(_QWORD *)&v402[v304];
  *((_QWORD *)v305 + 1) = *(_QWORD *)&v402[v304 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v305 + 2) = *((_QWORD *)v306 + 2);
  *((_QWORD *)v305 + 3) = *((_QWORD *)v306 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v305 + 4) = *((_QWORD *)v306 + 4);
  *((_QWORD *)v305 + 5) = *((_QWORD *)v306 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v307 = v400[12];
  v308 = &v231[v307];
  v309 = &v402[v307];
  v310 = type metadata accessor for PressureTrend(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v310 - 8) + 24))(v308, v309, v310);
  v311 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
  v312 = v311[5];
  v313 = &v308[v312];
  v314 = &v309[v312];
  *(_QWORD *)v313 = *(_QWORD *)v314;
  *((_QWORD *)v313 + 1) = *((_QWORD *)v314 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v315 = v311[6];
  v316 = &v308[v315];
  v317 = &v309[v315];
  *(_QWORD *)v316 = *(_QWORD *)v317;
  *((_QWORD *)v316 + 1) = *((_QWORD *)v317 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v318 = v311[7];
  v319 = &v308[v318];
  v320 = &v309[v318];
  *(_QWORD *)v319 = *(_QWORD *)v320;
  *((_QWORD *)v319 + 1) = *((_QWORD *)v320 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v308[v311[8]] = *(_QWORD *)&v309[v311[8]];
  v321 = v311[9];
  v322 = &v308[v321];
  v323 = &v309[v321];
  *(_QWORD *)v322 = *(_QWORD *)v323;
  *((_QWORD *)v322 + 1) = *((_QWORD *)v323 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v324 = v400[13];
  v325 = &v231[v324];
  v326 = &v402[v324];
  *(_QWORD *)v325 = *(_QWORD *)&v402[v324];
  *((_QWORD *)v325 + 1) = *(_QWORD *)&v402[v324 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v325 + 2) = *((_QWORD *)v326 + 2);
  *((_QWORD *)v325 + 3) = *((_QWORD *)v326 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v325 + 4) = *((_QWORD *)v326 + 4);
  *((_QWORD *)v325 + 5) = *((_QWORD *)v326 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v325 + 6) = *((_QWORD *)v326 + 6);
  *((_QWORD *)v325 + 7) = *((_QWORD *)v326 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v325 + 8) = *((_QWORD *)v326 + 8);
  *((_QWORD *)v325 + 9) = *((_QWORD *)v326 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v325 + 10) = *((_QWORD *)v326 + 10);
  *((_QWORD *)v325 + 11) = *((_QWORD *)v326 + 11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v325 + 12) = *((_QWORD *)v326 + 12);
  *((_QWORD *)v325 + 13) = *((_QWORD *)v326 + 13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v325 + 14) = *((_QWORD *)v326 + 14);
  *((_QWORD *)v325 + 15) = *((_QWORD *)v326 + 15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v325 + 16) = *((_QWORD *)v326 + 16);
  *((_QWORD *)v325 + 17) = *((_QWORD *)v326 + 17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v325 + 18) = *((_QWORD *)v326 + 18);
  *((_QWORD *)v325 + 19) = *((_QWORD *)v326 + 19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v325 + 20) = *((_QWORD *)v326 + 20);
  *((_QWORD *)v325 + 21) = *((_QWORD *)v326 + 21);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v325 + 22) = *((_QWORD *)v326 + 22);
  *((_QWORD *)v325 + 23) = *((_QWORD *)v326 + 23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v325 + 24) = *((_QWORD *)v326 + 24);
  *((_QWORD *)v325 + 25) = *((_QWORD *)v326 + 25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v325 + 26) = *((_QWORD *)v326 + 26);
  *((_QWORD *)v325 + 27) = *((_QWORD *)v326 + 27);
  *((_QWORD *)v325 + 28) = *((_QWORD *)v326 + 28);
  swift_bridgeObjectRetain();
  v327 = swift_bridgeObjectRelease();
  v328 = v400[14];
  v329 = &v231[v328];
  v330 = &v402[v328];
  ((void (*)(char *, char *, uint64_t, __n128))v390)(&v231[v328], &v402[v328], v392, v327);
  v331 = *(int *)(v398 + 20);
  v332 = &v329[v331];
  v333 = &v330[v331];
  v334 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)&v329[v331], 1, v281);
  v335 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v333, 1, v281);
  if (v334)
  {
    v336 = v231;
    if (!v335)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v281 - 8) + 16))(v332, v333, v281);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v332, 0, 1, v281);
      goto LABEL_128;
    }
    goto LABEL_127;
  }
  v337 = *(_QWORD *)(v281 - 8);
  v336 = v231;
  if (v335)
  {
    (*(void (**)(char *, uint64_t))(v337 + 8))(v332, v281);
LABEL_127:
    v338 = sub_1000BA294(&qword_100BC3370);
    memcpy(v332, v333, *(_QWORD *)(*(_QWORD *)(v338 - 8) + 64));
    goto LABEL_128;
  }
  (*(void (**)(char *, char *, uint64_t))(v337 + 24))(v332, v333, v281);
LABEL_128:
  v339 = *(int *)(v398 + 24);
  v340 = &v329[v339];
  v341 = &v330[v339];
  v342 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)&v329[v339], 1, v289);
  v343 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v341, 1, v289);
  if (v342)
  {
    if (!v343)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v289 - 8) + 16))(v340, v341, v289);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v340, 0, 1, v289);
      goto LABEL_134;
    }
    goto LABEL_133;
  }
  v344 = *(_QWORD *)(v289 - 8);
  if (v343)
  {
    (*(void (**)(char *, uint64_t))(v344 + 8))(v340, v289);
LABEL_133:
    v345 = sub_1000BA294(&qword_100BC3378);
    memcpy(v340, v341, *(_QWORD *)(*(_QWORD *)(v345 - 8) + 64));
    goto LABEL_134;
  }
  (*(void (**)(char *, char *, uint64_t))(v344 + 24))(v340, v341, v289);
LABEL_134:
  v346 = v400[15];
  v347 = &v336[v346];
  v348 = &v402[v346];
  *(_QWORD *)v347 = *(_QWORD *)&v402[v346];
  *((_QWORD *)v347 + 1) = *(_QWORD *)&v402[v346 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v347 + 2) = *((_QWORD *)v348 + 2);
  *((_QWORD *)v347 + 3) = *((_QWORD *)v348 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v347 + 4) = *((_QWORD *)v348 + 4);
  *((_QWORD *)v347 + 5) = *((_QWORD *)v348 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v347 + 6) = *((_QWORD *)v348 + 6);
  *((_QWORD *)v347 + 7) = *((_QWORD *)v348 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v347 + 8) = *((_QWORD *)v348 + 8);
  *((_QWORD *)v347 + 9) = *((_QWORD *)v348 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v347 + 10) = *((_QWORD *)v348 + 10);
  *((_QWORD *)v347 + 11) = *((_QWORD *)v348 + 11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v347 + 12) = *((_QWORD *)v348 + 12);
  *((_QWORD *)v347 + 13) = *((_QWORD *)v348 + 13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v395 != v394)
  {
    v349 = v393[10];
    v350 = (_QWORD *)((char *)v395 + v349);
    v351 = (_QWORD *)((char *)v394 + v349);
    sub_1000215BC((uint64_t)v395 + v349, type metadata accessor for NewsDataModel);
    v352 = type metadata accessor for NewsDataModel(0);
    if (swift_getEnumCaseMultiPayload(v351) == 1)
    {
      *v350 = *v351;
      swift_bridgeObjectRetain();
      v353 = 1;
    }
    else
    {
      v354 = type metadata accessor for News(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v354 - 8) + 16))(v350, v351, v354);
      v353 = 0;
    }
    swift_storeEnumTagMultiPayload(v350, v352, v353);
  }
  v355 = v393[11];
  v356 = (_QWORD *)((char *)v395 + v355);
  v357 = (_QWORD *)((char *)v394 + v355);
  v358 = v357[1];
  *v356 = *v357;
  v356[1] = v358;
  swift_retain();
  v359 = swift_release();
  v360 = v393[12];
  v361 = (char *)v395 + v360;
  v362 = (char *)v394 + v360;
  ((void (*)(char *, char *, uint64_t, __n128))v387)((char *)v395 + v360, (char *)v394 + v360, v388, v359);
  v363 = sub_1000BA294(&qword_100C06160);
  *(_QWORD *)&v361[*(int *)(v363 + 28)] = *(_QWORD *)&v362[*(int *)(v363 + 28)];
  swift_retain();
  swift_release();
  return v395;
}

_QWORD *sub_1007A0B18(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  __int128 v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  int *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  int *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  int *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  int *v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  char *v224;
  __int128 v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  int *v230;
  uint64_t v231;
  char *v232;
  char *v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  char *v249;
  uint64_t v250;
  void (*v252)(char *, char *);
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  _OWORD *v257;
  void (*v258)(char *, char *, uint64_t);
  uint64_t v259;
  uint64_t v260;
  _OWORD *v261;
  void (*v262)(char *, char *);
  int *v263;
  _QWORD *v264;
  _QWORD *v265;

  v6 = sub_1000BA294(&qword_100BC4F28);
  if (swift_getEnumCaseMultiPayload(a2) == 1)
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(sub_1000BA294(&qword_100BC6510) + 32);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for PresentationMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for LocationModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v16 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v17 = (_OWORD *)((char *)a1 + v16);
  v18 = (_OWORD *)((char *)a2 + v16);
  v19 = type metadata accessor for LocationWeatherDataState(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18);
  v264 = a2;
  v265 = a1;
  v263 = a3;
  if (EnumCaseMultiPayload == 1)
  {
    v259 = v19;
    *v17 = *v18;
    v22 = (int *)type metadata accessor for WeatherData(0);
    v23 = v22[5];
    v24 = (char *)v17 + v23;
    v25 = (char *)v18 + v23;
    v26 = type metadata accessor for Locale(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v25, 1, v26))
    {
      v27 = sub_1000BA294(&qword_100BC3340);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v24, 0, 1, v26);
    }
    v32 = v22[6];
    v33 = (char *)v17 + v32;
    v34 = (char *)v18 + v32;
    v35 = type metadata accessor for WeatherDataModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
    v36 = v22[7];
    v37 = (char *)v17 + v36;
    v38 = (char *)v18 + v36;
    v39 = sub_1000BA294(&qword_100BC3348);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v38, 1, v39))
    {
      v40 = type metadata accessor for WeatherData.CachingState(0);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      v41 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v37, v38, v41);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v37, 0, 1, v39);
    }
    v42 = v22[8];
    v43 = (char *)v17 + v42;
    v44 = (char *)v18 + v42;
    v45 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
    if (swift_getEnumCaseMultiPayload(v44) == 1)
    {
      v46 = type metadata accessor for WeatherStatisticsModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v43, v44, v46);
      swift_storeEnumTagMultiPayload(v43, v45, 1);
    }
    else
    {
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    v47 = v22[9];
    v48 = (char *)v17 + v47;
    v49 = (char *)v18 + v47;
    v50 = type metadata accessor for WeatherDataOverrides(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v49, 1, v50))
    {
      v51 = sub_1000BA294(&qword_100BC3350);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      v52 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v49, 1, v52))
      {
        v53 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v48, v49, v52);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v48, 0, 1, v52);
      }
      v54 = *(int *)(v50 + 20);
      v55 = &v48[v54];
      v56 = &v49[v54];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v56, 1, v52))
      {
        v57 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v55, v56, v52);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v55, 0, 1, v52);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v48, 0, 1, v50);
    }
    v255 = sub_1000BA294(&qword_100BC3358);
    v257 = v18;
    v58 = *(int *)(v255 + 48);
    v261 = v17;
    v59 = (char *)v17 + v58;
    v60 = (char *)v18 + v58;
    v61 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(v59, v60, v61);
    v62 = (int *)type metadata accessor for PreprocessedWeatherData(0);
    *(_QWORD *)&v59[v62[5]] = *(_QWORD *)&v60[v62[5]];
    v63 = v62[6];
    v64 = &v59[v63];
    v65 = &v60[v63];
    v66 = *(_OWORD *)&v60[v63 + 16];
    *(_OWORD *)v64 = *(_OWORD *)&v60[v63];
    *((_OWORD *)v64 + 1) = v66;
    *((_OWORD *)v64 + 2) = *(_OWORD *)&v60[v63 + 32];
    v67 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
    v68 = *(int *)(v67 + 28);
    v69 = &v64[v68];
    v70 = &v65[v68];
    v71 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v70, 1, v71))
    {
      v72 = sub_1000BA294(&qword_100BC3360);
      memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v69 = *(_OWORD *)v70;
      v73 = *(int *)(v71 + 20);
      v74 = &v69[v73];
      v75 = &v70[v73];
      v76 = type metadata accessor for TemperatureScaleConfiguration(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 32))(v74, v75, v76);
      v77 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
      *(_QWORD *)&v74[v77[5]] = *(_QWORD *)&v75[v77[5]];
      *(_QWORD *)&v74[v77[6]] = *(_QWORD *)&v75[v77[6]];
      *(_QWORD *)&v74[v77[7]] = *(_QWORD *)&v75[v77[7]];
      *(_OWORD *)&v74[v77[8]] = *(_OWORD *)&v75[v77[8]];
      v74[v77[9]] = v75[v77[9]];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v69, 0, 1, v71);
    }
    *(_OWORD *)&v64[*(int *)(v67 + 32)] = *(_OWORD *)&v65[*(int *)(v67 + 32)];
    v78 = v62[7];
    v79 = &v59[v78];
    v80 = &v60[v78];
    *(_QWORD *)&v59[v78] = *(_QWORD *)&v60[v78];
    v81 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
    v82 = &v79[v81];
    v83 = &v80[v81];
    v84 = type metadata accessor for WeatherDescription(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v83, 1, v84))
    {
      v85 = sub_1000BA294(&qword_100BC3368);
      memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 32))(v82, v83, v84);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v82, 0, 1, v84);
    }
    v86 = v62[8];
    v87 = &v59[v86];
    v88 = &v60[v86];
    v89 = *(_OWORD *)&v60[v86 + 16];
    *(_OWORD *)v87 = *(_OWORD *)&v60[v86];
    *((_OWORD *)v87 + 1) = v89;
    v90 = *(_OWORD *)&v60[v86 + 48];
    *((_OWORD *)v87 + 2) = *(_OWORD *)&v60[v86 + 32];
    *((_OWORD *)v87 + 3) = v90;
    v91 = *(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32);
    v92 = &v87[v91];
    v93 = &v88[v91];
    v94 = type metadata accessor for Date(0);
    v252 = *(void (**)(char *, char *))(*(_QWORD *)(v94 - 8) + 32);
    v253 = v94;
    v252(v92, v93);
    v95 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
    v96 = *(int *)(v95 + 20);
    v97 = &v92[v96];
    v98 = &v93[v96];
    v99 = type metadata accessor for Elevation(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v98, 1, v99))
    {
      v100 = sub_1000BA294(&qword_100BC3370);
      memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v99 - 8) + 32))(v97, v98, v99);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v97, 0, 1, v99);
    }
    v101 = *(int *)(v95 + 24);
    v102 = &v92[v101];
    v103 = &v93[v101];
    v104 = type metadata accessor for BackgroundMoonData(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v103, 1, v104))
    {
      v105 = sub_1000BA294(&qword_100BC3378);
      memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 32))(v102, v103, v104);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v102, 0, 1, v104);
    }
    memcpy(&v59[v62[9]], &v60[v62[9]], 0x70uLL);
    v106 = v62[10];
    v107 = &v59[v106];
    v108 = &v60[v106];
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 32))(&v59[v106], &v60[v106], v84);
    v109 = type metadata accessor for UVIndexComponentPreprocessedDataModel(0);
    *(_OWORD *)&v107[*(int *)(v109 + 20)] = *(_OWORD *)&v108[*(int *)(v109 + 20)];
    v110 = v62[11];
    v111 = &v59[v110];
    v112 = &v60[v110];
    v113 = *((_OWORD *)v112 + 1);
    *(_OWORD *)v111 = *(_OWORD *)v112;
    *((_OWORD *)v111 + 1) = v113;
    *((_OWORD *)v111 + 2) = *((_OWORD *)v112 + 2);
    v114 = v62[12];
    v115 = &v59[v114];
    v116 = &v60[v114];
    v117 = type metadata accessor for PressureTrend(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v117 - 8) + 32))(v115, v116, v117);
    v118 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
    *(_OWORD *)&v115[v118[5]] = *(_OWORD *)&v116[v118[5]];
    *(_OWORD *)&v115[v118[6]] = *(_OWORD *)&v116[v118[6]];
    *(_OWORD *)&v115[v118[7]] = *(_OWORD *)&v116[v118[7]];
    *(_QWORD *)&v115[v118[8]] = *(_QWORD *)&v116[v118[8]];
    *(_OWORD *)&v115[v118[9]] = *(_OWORD *)&v116[v118[9]];
    memcpy(&v59[v62[13]], &v60[v62[13]], 0xE8uLL);
    v119 = v62[14];
    v120 = &v59[v119];
    v121 = &v60[v119];
    ((void (*)(char *, char *, uint64_t))v252)(&v59[v119], &v60[v119], v253);
    v122 = *(int *)(v95 + 20);
    v123 = &v120[v122];
    v124 = &v121[v122];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v121[v122], 1, v99))
    {
      v125 = sub_1000BA294(&qword_100BC3370);
      memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v99 - 8) + 32))(v123, v124, v99);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v123, 0, 1, v99);
    }
    v126 = *(int *)(v95 + 24);
    v127 = &v120[v126];
    v128 = &v121[v126];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v128, 1, v104))
    {
      v129 = sub_1000BA294(&qword_100BC3378);
      memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 32))(v127, v128, v104);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v127, 0, 1, v104);
    }
    memcpy(&v59[v62[15]], &v60[v62[15]], 0x70uLL);
    v130 = *(int *)(v255 + 64);
    v131 = (char *)v261 + v130;
    v132 = (char *)v257 + v130;
    v133 = type metadata accessor for NewsDataModel(0);
    if (swift_getEnumCaseMultiPayload(v132))
    {
      memcpy(v131, v132, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
    }
    else
    {
      v134 = type metadata accessor for News(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v134 - 8) + 32))(v131, v132, v134);
      swift_storeEnumTagMultiPayload(v131, v133, 0);
    }
    a2 = v264;
    a1 = v265;
    a3 = v263;
    v29 = v261;
    v30 = v259;
    v31 = 1;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      goto LABEL_52;
    }
    v21 = type metadata accessor for NewsDataModel(0);
    if (swift_getEnumCaseMultiPayload(v18))
    {
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v28 = type metadata accessor for News(0);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v17, v18, v28);
      swift_storeEnumTagMultiPayload(v17, v21, 0);
    }
    v29 = v17;
    v30 = v19;
    v31 = 0;
  }
  swift_storeEnumTagMultiPayload(v29, v30, v31);
LABEL_52:
  v135 = a3[8];
  v136 = (char *)a1 + v135;
  v137 = (char *)a2 + v135;
  *(_OWORD *)((char *)a1 + v135) = *(_OWORD *)((char *)a2 + v135);
  v138 = (int *)type metadata accessor for WeatherData(0);
  v139 = v138[5];
  v140 = &v136[v139];
  v141 = &v137[v139];
  v142 = type metadata accessor for Locale(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v141, 1, v142))
  {
    v143 = sub_1000BA294(&qword_100BC3340);
    memcpy(v140, v141, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v142 - 8) + 32))(v140, v141, v142);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v140, 0, 1, v142);
  }
  v144 = v138[6];
  v145 = &v136[v144];
  v146 = &v137[v144];
  v147 = type metadata accessor for WeatherDataModel(0);
  v258 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v147 - 8) + 32);
  v258(v145, v146, v147);
  v148 = v138[7];
  v149 = &v136[v148];
  v150 = &v137[v148];
  v151 = sub_1000BA294(&qword_100BC3348);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v150, 1, v151))
  {
    v152 = type metadata accessor for WeatherData.CachingState(0);
    memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64));
  }
  else
  {
    v153 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v153 - 8) + 32))(v149, v150, v153);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v149, 0, 1, v151);
  }
  v154 = v138[8];
  v155 = &v136[v154];
  v156 = &v137[v154];
  v157 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
  if (swift_getEnumCaseMultiPayload(v156) == 1)
  {
    v158 = type metadata accessor for WeatherStatisticsModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v158 - 8) + 32))(v155, v156, v158);
    swift_storeEnumTagMultiPayload(v155, v157, 1);
  }
  else
  {
    memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v157 - 8) + 64));
  }
  v159 = v138[9];
  v160 = &v136[v159];
  v161 = &v137[v159];
  v162 = type metadata accessor for WeatherDataOverrides(0);
  v260 = v147;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v161, 1, v162))
  {
    v163 = sub_1000BA294(&qword_100BC3350);
    memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
  }
  else
  {
    v164 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v161, 1, v164))
    {
      v165 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v164 - 8) + 32))(v160, v161, v164);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v160, 0, 1, v164);
    }
    v166 = *(int *)(v162 + 20);
    v167 = &v160[v166];
    v168 = &v161[v166];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v168, 1, v164))
    {
      v169 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v167, v168, *(_QWORD *)(*(_QWORD *)(v169 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v164 - 8) + 32))(v167, v168, v164);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v167, 0, 1, v164);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v160, 0, 1, v162);
  }
  v170 = a3[9];
  v171 = (char *)a1 + v170;
  v172 = (char *)a2 + v170;
  v173 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v173 - 8) + 32))(v171, v172, v173);
  v174 = (int *)type metadata accessor for PreprocessedWeatherData(0);
  *(_QWORD *)&v171[v174[5]] = *(_QWORD *)&v172[v174[5]];
  v175 = v174[6];
  v176 = &v171[v175];
  v177 = &v172[v175];
  v178 = *(_OWORD *)&v172[v175 + 16];
  *(_OWORD *)v176 = *(_OWORD *)&v172[v175];
  *((_OWORD *)v176 + 1) = v178;
  *((_OWORD *)v176 + 2) = *(_OWORD *)&v172[v175 + 32];
  v179 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
  v180 = *(int *)(v179 + 28);
  v181 = &v176[v180];
  v182 = &v177[v180];
  v183 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v182, 1, v183))
  {
    v184 = sub_1000BA294(&qword_100BC3360);
    memcpy(v181, v182, *(_QWORD *)(*(_QWORD *)(v184 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v181 = *(_OWORD *)v182;
    v185 = *(int *)(v183 + 20);
    v186 = &v181[v185];
    v187 = &v182[v185];
    v188 = type metadata accessor for TemperatureScaleConfiguration(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v188 - 8) + 32))(v186, v187, v188);
    v189 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
    *(_QWORD *)&v186[v189[5]] = *(_QWORD *)&v187[v189[5]];
    *(_QWORD *)&v186[v189[6]] = *(_QWORD *)&v187[v189[6]];
    *(_QWORD *)&v186[v189[7]] = *(_QWORD *)&v187[v189[7]];
    *(_OWORD *)&v186[v189[8]] = *(_OWORD *)&v187[v189[8]];
    v186[v189[9]] = v187[v189[9]];
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v181, 0, 1, v183);
  }
  *(_OWORD *)&v176[*(int *)(v179 + 32)] = *(_OWORD *)&v177[*(int *)(v179 + 32)];
  v190 = v174[7];
  v191 = &v171[v190];
  v192 = &v172[v190];
  *(_QWORD *)&v171[v190] = *(_QWORD *)&v172[v190];
  v193 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
  v194 = &v191[v193];
  v195 = &v192[v193];
  v196 = type metadata accessor for WeatherDescription(0);
  v254 = v196;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v195, 1, v196))
  {
    v197 = sub_1000BA294(&qword_100BC3368);
    memcpy(v194, v195, *(_QWORD *)(*(_QWORD *)(v197 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v196 - 8) + 32))(v194, v195, v196);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v194, 0, 1, v196);
  }
  v198 = v174[8];
  v199 = &v171[v198];
  v200 = &v172[v198];
  v201 = *(_OWORD *)&v172[v198 + 16];
  *(_OWORD *)v199 = *(_OWORD *)&v172[v198];
  *((_OWORD *)v199 + 1) = v201;
  v202 = *(_OWORD *)&v172[v198 + 48];
  *((_OWORD *)v199 + 2) = *(_OWORD *)&v172[v198 + 32];
  *((_OWORD *)v199 + 3) = v202;
  v203 = *(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32);
  v204 = &v199[v203];
  v205 = &v200[v203];
  v206 = type metadata accessor for Date(0);
  v262 = *(void (**)(char *, char *))(*(_QWORD *)(v206 - 8) + 32);
  v262(v204, v205);
  v207 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
  v208 = *(int *)(v207 + 20);
  v209 = &v204[v208];
  v210 = &v205[v208];
  v211 = type metadata accessor for Elevation(0);
  v256 = v211;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v210, 1, v211))
  {
    v212 = sub_1000BA294(&qword_100BC3370);
    memcpy(v209, v210, *(_QWORD *)(*(_QWORD *)(v212 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v211 - 8) + 32))(v209, v210, v211);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v209, 0, 1, v211);
  }
  v213 = *(int *)(v207 + 24);
  v214 = &v204[v213];
  v215 = &v205[v213];
  v216 = type metadata accessor for BackgroundMoonData(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v215, 1, v216))
  {
    v217 = sub_1000BA294(&qword_100BC3378);
    memcpy(v214, v215, *(_QWORD *)(*(_QWORD *)(v217 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v216 - 8) + 32))(v214, v215, v216);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v214, 0, 1, v216);
  }
  memcpy(&v171[v174[9]], &v172[v174[9]], 0x70uLL);
  v218 = v174[10];
  v219 = &v171[v218];
  v220 = &v172[v218];
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v254 - 8) + 32))(&v171[v218], &v172[v218], v254);
  v221 = type metadata accessor for UVIndexComponentPreprocessedDataModel(0);
  *(_OWORD *)&v219[*(int *)(v221 + 20)] = *(_OWORD *)&v220[*(int *)(v221 + 20)];
  v222 = v174[11];
  v223 = &v171[v222];
  v224 = &v172[v222];
  v225 = *((_OWORD *)v224 + 1);
  *(_OWORD *)v223 = *(_OWORD *)v224;
  *((_OWORD *)v223 + 1) = v225;
  *((_OWORD *)v223 + 2) = *((_OWORD *)v224 + 2);
  v226 = v174[12];
  v227 = &v171[v226];
  v228 = &v172[v226];
  v229 = type metadata accessor for PressureTrend(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v229 - 8) + 32))(v227, v228, v229);
  v230 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
  *(_OWORD *)&v227[v230[5]] = *(_OWORD *)&v228[v230[5]];
  *(_OWORD *)&v227[v230[6]] = *(_OWORD *)&v228[v230[6]];
  *(_OWORD *)&v227[v230[7]] = *(_OWORD *)&v228[v230[7]];
  *(_QWORD *)&v227[v230[8]] = *(_QWORD *)&v228[v230[8]];
  *(_OWORD *)&v227[v230[9]] = *(_OWORD *)&v228[v230[9]];
  memcpy(&v171[v174[13]], &v172[v174[13]], 0xE8uLL);
  v231 = v174[14];
  v232 = &v171[v231];
  v233 = &v172[v231];
  ((void (*)(char *, char *, uint64_t))v262)(&v171[v231], &v172[v231], v206);
  v234 = *(int *)(v207 + 20);
  v235 = &v232[v234];
  v236 = &v233[v234];
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v233[v234], 1, v256))
  {
    v237 = sub_1000BA294(&qword_100BC3370);
    memcpy(v235, v236, *(_QWORD *)(*(_QWORD *)(v237 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v256 - 8) + 32))(v235, v236, v256);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v235, 0, 1, v256);
  }
  v238 = *(int *)(v207 + 24);
  v239 = &v232[v238];
  v240 = &v233[v238];
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v240, 1, v216))
  {
    v241 = sub_1000BA294(&qword_100BC3378);
    memcpy(v239, v240, *(_QWORD *)(*(_QWORD *)(v241 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v216 - 8) + 32))(v239, v240, v216);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v239, 0, 1, v216);
  }
  memcpy(&v171[v174[15]], &v172[v174[15]], 0x70uLL);
  v242 = v263[10];
  v243 = (char *)v265 + v242;
  v244 = (char *)v264 + v242;
  v245 = type metadata accessor for NewsDataModel(0);
  if (swift_getEnumCaseMultiPayload(v244))
  {
    memcpy(v243, v244, *(_QWORD *)(*(_QWORD *)(v245 - 8) + 64));
  }
  else
  {
    v246 = type metadata accessor for News(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v246 - 8) + 32))(v243, v244, v246);
    swift_storeEnumTagMultiPayload(v243, v245, 0);
  }
  v247 = v263[12];
  *(_OWORD *)((char *)v265 + v263[11]) = *(_OWORD *)((char *)v264 + v263[11]);
  v248 = (char *)v265 + v247;
  v249 = (char *)v264 + v247;
  v258((char *)v265 + v247, (char *)v264 + v247, v260);
  v250 = sub_1000BA294(&qword_100C06160);
  *(_QWORD *)&v248[*(int *)(v250 + 28)] = *(_QWORD *)&v249[*(int *)(v250 + 28)];
  return v265;
}

_QWORD *sub_1007A1EF4(uint64_t a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  _OWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  const void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, uint64_t);
  uint64_t v97;
  uint64_t v98;
  char *v99;
  const void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  const void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  _OWORD *v114;
  __int128 v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  int *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  const void *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  const void *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  char *v139;
  uint64_t v140;
  int *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  int v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  int v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  size_t v174;
  char *v175;
  const void *v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  int *v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  int v203;
  int v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  int *v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  char *v220;
  char *v221;
  uint64_t v222;
  int v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  char *v238;
  char *v239;
  uint64_t v240;
  int v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  int v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  __n128 v263;
  uint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  char *v268;
  char *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  char *v280;
  uint64_t v281;
  int *v282;
  uint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char *v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  char *v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  __n128 v320;
  uint64_t v321;
  char *v322;
  char *v323;
  uint64_t v324;
  char *v325;
  char *v326;
  int v327;
  int v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  char *v333;
  int v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  char *v339;
  char *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  char *v349;
  char *v350;
  uint64_t v351;
  uint64_t v352;
  __n128 v353;
  uint64_t v354;
  char *v355;
  char *v356;
  uint64_t v357;
  uint64_t v359;
  uint64_t v360;
  char *v361;
  char *v362;
  uint64_t v363;
  int *v364;
  uint64_t v365;
  char *v366;
  char *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  char *v373;
  uint64_t v374;
  int v375;
  int v376;
  uint64_t v377;
  int *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  _OWORD *v384;
  void (*v385)(char *, char *);
  uint64_t v386;
  void (*v387)(char *, char *);
  int *v388;
  _QWORD *v389;
  _QWORD *v390;
  _OWORD *v391;
  uint64_t v392;

  v4 = a2;
  v5 = (_QWORD *)a1;
  if ((_QWORD *)a1 != a2)
  {
    sub_100021A14(a1, &qword_100BC4F28);
    v6 = sub_1000BA294(&qword_100BC4F28);
    if (swift_getEnumCaseMultiPayload(v4) == 1)
    {
      v7 = v4[1];
      *v5 = *v4;
      v5[1] = v7;
      v8 = *(int *)(sub_1000BA294(&qword_100BC6510) + 32);
      v9 = (char *)v5 + v8;
      v10 = (char *)v4 + v8;
      v11 = type metadata accessor for PresentationMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      swift_storeEnumTagMultiPayload(v5, v6, 1);
    }
    else
    {
      memcpy(v5, v4, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v12 = a3[5];
  v13 = (char *)v5 + v12;
  v14 = (char *)v4 + v12;
  v15 = type metadata accessor for LocationModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  *(_QWORD *)((char *)v5 + a3[6]) = *(_QWORD *)((char *)v4 + a3[6]);
  v389 = v4;
  v390 = v5;
  v388 = a3;
  if (v5 != v4)
  {
    v16 = a3[7];
    v17 = (_OWORD *)((char *)v5 + v16);
    v18 = (_OWORD *)((char *)v4 + v16);
    sub_1000215BC((uint64_t)v5 + v16, type metadata accessor for LocationWeatherDataState);
    v19 = type metadata accessor for LocationWeatherDataState(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18);
    if (EnumCaseMultiPayload == 1)
    {
      *v17 = *v18;
      v22 = (int *)type metadata accessor for WeatherData(0);
      v23 = v22[5];
      v24 = (char *)v17 + v23;
      v25 = (char *)v18 + v23;
      v26 = type metadata accessor for Locale(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v25, 1, v26))
      {
        v27 = sub_1000BA294(&qword_100BC3340);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v24, 0, 1, v26);
      }
      v32 = v22[6];
      v33 = (char *)v17 + v32;
      v34 = (char *)v18 + v32;
      v35 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
      v36 = v22[7];
      v37 = (char *)v17 + v36;
      v38 = (char *)v18 + v36;
      v39 = sub_1000BA294(&qword_100BC3348);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v38, 1, v39))
      {
        v40 = type metadata accessor for WeatherData.CachingState(0);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        v41 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v37, v38, v41);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v37, 0, 1, v39);
      }
      v42 = v22[8];
      v43 = (char *)v17 + v42;
      v44 = (char *)v18 + v42;
      v45 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
      if (swift_getEnumCaseMultiPayload(v44) == 1)
      {
        v46 = type metadata accessor for WeatherStatisticsModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v43, v44, v46);
        swift_storeEnumTagMultiPayload(v43, v45, 1);
      }
      else
      {
        memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      v47 = v22[9];
      v48 = (char *)v17 + v47;
      v391 = v18;
      v49 = (char *)v18 + v47;
      v50 = type metadata accessor for WeatherDataOverrides(0);
      v382 = v19;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v49, 1, v50))
      {
        v51 = sub_1000BA294(&qword_100BC3350);
        memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
        v52 = v391;
      }
      else
      {
        v53 = type metadata accessor for Date(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v49, 1, v53))
        {
          v54 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v48, v49, v53);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v48, 0, 1, v53);
        }
        v55 = *(int *)(v50 + 20);
        v56 = &v48[v55];
        v57 = &v49[v55];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v49[v55], 1, v53))
        {
          v58 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v56, v57, v53);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v56, 0, 1, v53);
        }
        v52 = v391;
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v48, 0, 1, v50);
      }
      v380 = sub_1000BA294(&qword_100BC3358);
      v59 = *(int *)(v380 + 48);
      v384 = v17;
      v60 = (char *)v17 + v59;
      v61 = (uint64_t)v52 + v59;
      v62 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 32))(v60, v61, v62);
      v63 = (int *)type metadata accessor for PreprocessedWeatherData(0);
      *(_QWORD *)&v60[v63[5]] = *(_QWORD *)(v61 + v63[5]);
      v64 = v63[6];
      v65 = &v60[v64];
      v66 = v61 + v64;
      v67 = *(_OWORD *)(v61 + v64 + 16);
      *(_OWORD *)v65 = *(_OWORD *)(v61 + v64);
      *((_OWORD *)v65 + 1) = v67;
      *((_OWORD *)v65 + 2) = *(_OWORD *)(v61 + v64 + 32);
      v68 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
      v69 = *(int *)(v68 + 28);
      v70 = &v65[v69];
      v71 = (_OWORD *)(v66 + v69);
      v72 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v71, 1, v72))
      {
        v73 = sub_1000BA294(&qword_100BC3360);
        memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v70 = *v71;
        v74 = *(int *)(v72 + 20);
        v75 = &v70[v74];
        v76 = (char *)v71 + v74;
        v77 = type metadata accessor for TemperatureScaleConfiguration(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 32))(v75, v76, v77);
        v78 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
        *(_QWORD *)&v75[v78[5]] = *(_QWORD *)&v76[v78[5]];
        *(_QWORD *)&v75[v78[6]] = *(_QWORD *)&v76[v78[6]];
        *(_QWORD *)&v75[v78[7]] = *(_QWORD *)&v76[v78[7]];
        *(_OWORD *)&v75[v78[8]] = *(_OWORD *)&v76[v78[8]];
        v75[v78[9]] = v76[v78[9]];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v70, 0, 1, v72);
      }
      *(_OWORD *)&v65[*(int *)(v68 + 32)] = *(_OWORD *)(v66 + *(int *)(v68 + 32));
      v79 = v63[7];
      v80 = &v60[v79];
      v81 = v61 + v79;
      *(_QWORD *)&v60[v79] = *(_QWORD *)(v61 + v79);
      v82 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
      v83 = &v80[v82];
      v84 = (const void *)(v81 + v82);
      v85 = type metadata accessor for WeatherDescription(0);
      v386 = v85;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v84, 1, v85))
      {
        v86 = sub_1000BA294(&qword_100BC3368);
        memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v85 - 8) + 32))(v83, v84, v85);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v83, 0, 1, v85);
      }
      v378 = v63;
      v87 = v63[8];
      v88 = &v60[v87];
      v89 = v61 + v87;
      v90 = *(_OWORD *)(v61 + v87 + 16);
      *(_OWORD *)v88 = *(_OWORD *)(v61 + v87);
      *((_OWORD *)v88 + 1) = v90;
      v91 = *(_OWORD *)(v61 + v87 + 48);
      *((_OWORD *)v88 + 2) = *(_OWORD *)(v61 + v87 + 32);
      *((_OWORD *)v88 + 3) = v91;
      v92 = *(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32);
      v93 = &v88[v92];
      v94 = v89 + v92;
      v95 = type metadata accessor for Date(0);
      v96 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v95 - 8) + 32);
      v96(v93, v94);
      v97 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
      v98 = *(int *)(v97 + 20);
      v99 = &v93[v98];
      v100 = (const void *)(v94 + v98);
      v101 = type metadata accessor for Elevation(0);
      v379 = v101;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v100, 1, v101))
      {
        v102 = sub_1000BA294(&qword_100BC3370);
        memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v101 - 8) + 32))(v99, v100, v101);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v99, 0, 1, v101);
      }
      v103 = *(int *)(v97 + 24);
      v104 = &v93[v103];
      v105 = (const void *)(v94 + v103);
      v106 = type metadata accessor for BackgroundMoonData(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v105, 1, v106))
      {
        v107 = sub_1000BA294(&qword_100BC3378);
        memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v106 - 8) + 32))(v104, v105, v106);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v104, 0, 1, v106);
      }
      memcpy(&v60[v378[9]], (const void *)(v61 + v378[9]), 0x70uLL);
      v108 = v378[10];
      v109 = &v60[v108];
      v110 = v61 + v108;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v386 - 8) + 32))(&v60[v108], v61 + v108);
      v111 = type metadata accessor for UVIndexComponentPreprocessedDataModel(0);
      *(_OWORD *)&v109[*(int *)(v111 + 20)] = *(_OWORD *)(v110 + *(int *)(v111 + 20));
      v112 = v378[11];
      v113 = &v60[v112];
      v114 = (_OWORD *)(v61 + v112);
      v115 = v114[1];
      *(_OWORD *)v113 = *v114;
      *((_OWORD *)v113 + 1) = v115;
      *((_OWORD *)v113 + 2) = v114[2];
      v116 = v378[12];
      v117 = &v60[v116];
      v118 = v61 + v116;
      v119 = type metadata accessor for PressureTrend(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v119 - 8) + 32))(v117, v118, v119);
      v120 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
      *(_OWORD *)&v117[v120[5]] = *(_OWORD *)(v118 + v120[5]);
      *(_OWORD *)&v117[v120[6]] = *(_OWORD *)(v118 + v120[6]);
      *(_OWORD *)&v117[v120[7]] = *(_OWORD *)(v118 + v120[7]);
      *(_QWORD *)&v117[v120[8]] = *(_QWORD *)(v118 + v120[8]);
      *(_OWORD *)&v117[v120[9]] = *(_OWORD *)(v118 + v120[9]);
      memcpy(&v60[v378[13]], (const void *)(v61 + v378[13]), 0xE8uLL);
      v121 = v378[14];
      v122 = &v60[v121];
      v123 = v61 + v121;
      ((void (*)(char *, uint64_t, uint64_t))v96)(&v60[v121], v61 + v121, v95);
      v124 = *(int *)(v97 + 20);
      v125 = &v122[v124];
      v126 = (const void *)(v123 + v124);
      if (_s7Weather24LocationCompositionStateOwet_0(v123 + v124, 1, v379))
      {
        v127 = sub_1000BA294(&qword_100BC3370);
        memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v379 - 8) + 32))(v125, v126, v379);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v125, 0, 1, v379);
      }
      v128 = *(int *)(v97 + 24);
      v129 = &v122[v128];
      v130 = (const void *)(v123 + v128);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v130, 1, v106))
      {
        v131 = sub_1000BA294(&qword_100BC3378);
        memcpy(v129, v130, *(_QWORD *)(*(_QWORD *)(v131 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v106 - 8) + 32))(v129, v130, v106);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v129, 0, 1, v106);
      }
      memcpy(&v60[v378[15]], (const void *)(v61 + v378[15]), 0x70uLL);
      v132 = *(int *)(v380 + 64);
      v133 = (char *)v384 + v132;
      v134 = (char *)v391 + v132;
      v135 = type metadata accessor for NewsDataModel(0);
      if (swift_getEnumCaseMultiPayload(v134))
      {
        memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v135 - 8) + 64));
      }
      else
      {
        v136 = type metadata accessor for News(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v136 - 8) + 32))(v133, v134, v136);
        swift_storeEnumTagMultiPayload(v133, v135, 0);
      }
      v4 = v389;
      v5 = v390;
      a3 = v388;
      v29 = v384;
      v30 = v382;
      v31 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
        goto LABEL_54;
      }
      v21 = type metadata accessor for NewsDataModel(0);
      if (swift_getEnumCaseMultiPayload(v18))
      {
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        v28 = type metadata accessor for News(0);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v17, v18, v28);
        swift_storeEnumTagMultiPayload(v17, v21, 0);
      }
      v29 = v17;
      v30 = v19;
      v31 = 0;
    }
    swift_storeEnumTagMultiPayload(v29, v30, v31);
  }
LABEL_54:
  v137 = a3[8];
  v138 = (_QWORD *)((char *)v5 + v137);
  v139 = (char *)v4 + v137;
  v140 = *(_QWORD *)((char *)v4 + v137 + 8);
  *v138 = *(_QWORD *)((char *)v4 + v137);
  v138[1] = v140;
  swift_bridgeObjectRelease();
  v141 = (int *)type metadata accessor for WeatherData(0);
  v142 = v141[5];
  v143 = (char *)v138 + v142;
  v144 = &v139[v142];
  v145 = type metadata accessor for Locale(0);
  v146 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v143, 1, v145);
  v147 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v144, 1, v145);
  if (v146)
  {
    if (!v147)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v145 - 8) + 32))(v143, v144, v145);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v143, 0, 1, v145);
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  v148 = *(_QWORD *)(v145 - 8);
  if (v147)
  {
    (*(void (**)(char *, uint64_t))(v148 + 8))(v143, v145);
LABEL_59:
    v149 = sub_1000BA294(&qword_100BC3340);
    memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
    goto LABEL_60;
  }
  (*(void (**)(char *, char *, uint64_t))(v148 + 40))(v143, v144, v145);
LABEL_60:
  v150 = v141[6];
  v151 = (char *)v138 + v150;
  v152 = &v139[v150];
  v383 = type metadata accessor for WeatherDataModel(0);
  v387 = *(void (**)(char *, char *))(*(_QWORD *)(v383 - 8) + 40);
  v387(v151, v152);
  v153 = v141[7];
  v154 = (char *)v138 + v153;
  v155 = &v139[v153];
  v156 = sub_1000BA294(&qword_100BC3348);
  v157 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v154, 1, v156);
  v158 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v155, 1, v156);
  if (v157)
  {
    if (!v158)
    {
      v159 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v159 - 8) + 32))(v154, v155, v159);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v154, 0, 1, v156);
      goto LABEL_66;
    }
    goto LABEL_65;
  }
  if (v158)
  {
    sub_100021A14((uint64_t)v154, &qword_100BC3348);
LABEL_65:
    v160 = type metadata accessor for WeatherData.CachingState(0);
    memcpy(v154, v155, *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64));
    goto LABEL_66;
  }
  v177 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v177 - 8) + 40))(v154, v155, v177);
LABEL_66:
  if (v5 != v4)
  {
    v161 = v141[8];
    v162 = (char *)v138 + v161;
    v163 = &v139[v161];
    sub_1000215BC((uint64_t)v138 + v161, type metadata accessor for WeatherData.WeatherStatisticsState);
    v164 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
    if (swift_getEnumCaseMultiPayload(v163) == 1)
    {
      v165 = type metadata accessor for WeatherStatisticsModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v165 - 8) + 32))(v162, v163, v165);
      swift_storeEnumTagMultiPayload(v162, v164, 1);
    }
    else
    {
      memcpy(v162, v163, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
    }
  }
  v166 = v141[9];
  v167 = (char *)v138 + v166;
  v168 = &v139[v166];
  v169 = type metadata accessor for WeatherDataOverrides(0);
  v170 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v167, 1, v169);
  v171 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v168, 1, v169);
  if (v170)
  {
    if (!v171)
    {
      v172 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v168, 1, v172))
      {
        v173 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v167, v168, *(_QWORD *)(*(_QWORD *)(v173 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v172 - 8) + 32))(v167, v168, v172);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v167, 0, 1, v172);
      }
      v181 = *(int *)(v169 + 20);
      v182 = &v167[v181];
      v183 = &v168[v181];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v183, 1, v172))
      {
        v184 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v182, v183, *(_QWORD *)(*(_QWORD *)(v184 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v172 - 8) + 32))(v182, v183, v172);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v182, 0, 1, v172);
      }
      v185 = (uint64_t)v167;
      v186 = v169;
      goto LABEL_88;
    }
    goto LABEL_76;
  }
  if (v171)
  {
    sub_1000215BC((uint64_t)v167, type metadata accessor for WeatherDataOverrides);
LABEL_76:
    v174 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC3350) - 8) + 64);
    v175 = v167;
    v176 = v168;
LABEL_77:
    memcpy(v175, v176, v174);
    goto LABEL_89;
  }
  v178 = type metadata accessor for Date(0);
  v179 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v167, 1, v178);
  v180 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v168, 1, v178);
  if (v179)
  {
    if (!v180)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v178 - 8) + 32))(v167, v168, v178);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v167, 0, 1, v178);
      goto LABEL_139;
    }
    goto LABEL_138;
  }
  v370 = *(_QWORD *)(v178 - 8);
  if (v180)
  {
    (*(void (**)(char *, uint64_t))(v370 + 8))(v167, v178);
LABEL_138:
    v371 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v167, v168, *(_QWORD *)(*(_QWORD *)(v371 - 8) + 64));
    goto LABEL_139;
  }
  (*(void (**)(char *, char *, uint64_t))(v370 + 40))(v167, v168, v178);
LABEL_139:
  v372 = *(int *)(v169 + 20);
  v373 = &v167[v372];
  v374 = (uint64_t)&v168[v372];
  v375 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)&v167[v372], 1, v178);
  v376 = _s7Weather24LocationCompositionStateOwet_0(v374, 1, v178);
  if (v375)
  {
    if (!v376)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v178 - 8) + 32))(v373, v374, v178);
      v185 = (uint64_t)v373;
      v186 = v178;
LABEL_88:
      _s7Weather24LocationCompositionStateOwst_0(v185, 0, 1, v186);
      goto LABEL_89;
    }
    goto LABEL_144;
  }
  v377 = *(_QWORD *)(v178 - 8);
  if (v376)
  {
    (*(void (**)(char *, uint64_t))(v377 + 8))(v373, v178);
LABEL_144:
    v174 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
    v175 = v373;
    v176 = (const void *)v374;
    goto LABEL_77;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v377 + 40))(v373, v374, v178);
LABEL_89:
  v187 = a3[9];
  v188 = (char *)v5 + v187;
  v189 = (char *)v4 + v187;
  v190 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v190 - 8) + 40))(v188, v189, v190);
  v191 = (int *)type metadata accessor for PreprocessedWeatherData(0);
  *(_QWORD *)&v188[v191[5]] = *(_QWORD *)&v189[v191[5]];
  swift_bridgeObjectRelease();
  v192 = v191[6];
  v193 = &v188[v192];
  v194 = &v189[v192];
  v195 = *(_QWORD *)&v189[v192 + 8];
  *(_QWORD *)v193 = *(_QWORD *)&v189[v192];
  *((_QWORD *)v193 + 1) = v195;
  swift_bridgeObjectRelease();
  v196 = *((_QWORD *)v194 + 3);
  *((_QWORD *)v193 + 2) = *((_QWORD *)v194 + 2);
  *((_QWORD *)v193 + 3) = v196;
  swift_bridgeObjectRelease();
  v197 = *((_QWORD *)v194 + 5);
  *((_QWORD *)v193 + 4) = *((_QWORD *)v194 + 4);
  *((_QWORD *)v193 + 5) = v197;
  swift_bridgeObjectRelease();
  v198 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
  v199 = *(int *)(v198 + 28);
  v200 = &v193[v199];
  v201 = &v194[v199];
  v202 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
  v203 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v200, 1, v202);
  v204 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v201, 1, v202);
  if (v203)
  {
    if (!v204)
    {
      *(_OWORD *)v200 = *(_OWORD *)v201;
      v205 = *(int *)(v202 + 20);
      v206 = &v200[v205];
      v207 = &v201[v205];
      v208 = type metadata accessor for TemperatureScaleConfiguration(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v208 - 8) + 32))(v206, v207, v208);
      v209 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
      *(_QWORD *)&v206[v209[5]] = *(_QWORD *)&v207[v209[5]];
      *(_QWORD *)&v206[v209[6]] = *(_QWORD *)&v207[v209[6]];
      *(_QWORD *)&v206[v209[7]] = *(_QWORD *)&v207[v209[7]];
      *(_OWORD *)&v206[v209[8]] = *(_OWORD *)&v207[v209[8]];
      v206[v209[9]] = v207[v209[9]];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v200, 0, 1, v202);
      goto LABEL_95;
    }
    goto LABEL_94;
  }
  if (v204)
  {
    sub_1000215BC((uint64_t)v200, type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference);
LABEL_94:
    v210 = sub_1000BA294(&qword_100BC3360);
    memcpy(v200, v201, *(_QWORD *)(*(_QWORD *)(v210 - 8) + 64));
    goto LABEL_95;
  }
  v359 = *((_QWORD *)v201 + 1);
  *(_QWORD *)v200 = *(_QWORD *)v201;
  *((_QWORD *)v200 + 1) = v359;
  swift_bridgeObjectRelease();
  v360 = *(int *)(v202 + 20);
  v361 = &v200[v360];
  v362 = &v201[v360];
  v363 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v363 - 8) + 40))(v361, v362, v363);
  v364 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
  *(_QWORD *)&v361[v364[5]] = *(_QWORD *)&v362[v364[5]];
  *(_QWORD *)&v361[v364[6]] = *(_QWORD *)&v362[v364[6]];
  *(_QWORD *)&v361[v364[7]] = *(_QWORD *)&v362[v364[7]];
  v365 = v364[8];
  v366 = &v361[v365];
  v367 = &v362[v365];
  v369 = *(_QWORD *)v367;
  v368 = *((_QWORD *)v367 + 1);
  *(_QWORD *)v366 = v369;
  *((_QWORD *)v366 + 1) = v368;
  swift_bridgeObjectRelease();
  v361[v364[9]] = v362[v364[9]];
LABEL_95:
  v211 = *(int *)(v198 + 32);
  v212 = &v193[v211];
  v213 = &v194[v211];
  v215 = *(_QWORD *)v213;
  v214 = *((_QWORD *)v213 + 1);
  *(_QWORD *)v212 = v215;
  *((_QWORD *)v212 + 1) = v214;
  swift_bridgeObjectRelease();
  v216 = v191[7];
  v217 = &v188[v216];
  v218 = &v189[v216];
  *(_QWORD *)&v188[v216] = *(_QWORD *)&v189[v216];
  swift_bridgeObjectRelease();
  v219 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
  v220 = &v217[v219];
  v221 = &v218[v219];
  v222 = type metadata accessor for WeatherDescription(0);
  v223 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v220, 1, v222);
  v224 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v221, 1, v222);
  if (v223)
  {
    if (!v224)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v222 - 8) + 32))(v220, v221, v222);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v220, 0, 1, v222);
      goto LABEL_101;
    }
    goto LABEL_100;
  }
  v225 = *(_QWORD *)(v222 - 8);
  if (v224)
  {
    (*(void (**)(char *, uint64_t))(v225 + 8))(v220, v222);
LABEL_100:
    v226 = sub_1000BA294(&qword_100BC3368);
    memcpy(v220, v221, *(_QWORD *)(*(_QWORD *)(v226 - 8) + 64));
    goto LABEL_101;
  }
  (*(void (**)(char *, char *, uint64_t))(v225 + 40))(v220, v221, v222);
LABEL_101:
  v227 = v191[8];
  v228 = &v188[v227];
  v229 = &v189[v227];
  v230 = *(_QWORD *)&v189[v227 + 8];
  *(_QWORD *)v228 = *(_QWORD *)&v189[v227];
  *((_QWORD *)v228 + 1) = v230;
  swift_bridgeObjectRelease();
  v231 = *((_QWORD *)v229 + 3);
  *((_QWORD *)v228 + 2) = *((_QWORD *)v229 + 2);
  *((_QWORD *)v228 + 3) = v231;
  swift_bridgeObjectRelease();
  v232 = *((_QWORD *)v229 + 5);
  *((_QWORD *)v228 + 4) = *((_QWORD *)v229 + 4);
  *((_QWORD *)v228 + 5) = v232;
  swift_bridgeObjectRelease();
  v233 = *((_QWORD *)v229 + 7);
  *((_QWORD *)v228 + 6) = *((_QWORD *)v229 + 6);
  *((_QWORD *)v228 + 7) = v233;
  swift_bridgeObjectRelease();
  v234 = *(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32);
  v235 = &v228[v234];
  v236 = &v229[v234];
  v381 = type metadata accessor for Date(0);
  v385 = *(void (**)(char *, char *))(*(_QWORD *)(v381 - 8) + 40);
  v385(v235, v236);
  v392 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
  v237 = *(int *)(v392 + 20);
  v238 = &v235[v237];
  v239 = &v236[v237];
  v240 = type metadata accessor for Elevation(0);
  v241 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v238, 1, v240);
  v242 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v239, 1, v240);
  if (v241)
  {
    if (!v242)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v240 - 8) + 32))(v238, v239, v240);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v238, 0, 1, v240);
      goto LABEL_107;
    }
    goto LABEL_106;
  }
  v243 = *(_QWORD *)(v240 - 8);
  if (v242)
  {
    (*(void (**)(char *, uint64_t))(v243 + 8))(v238, v240);
LABEL_106:
    v244 = sub_1000BA294(&qword_100BC3370);
    memcpy(v238, v239, *(_QWORD *)(*(_QWORD *)(v244 - 8) + 64));
    goto LABEL_107;
  }
  (*(void (**)(char *, char *, uint64_t))(v243 + 40))(v238, v239, v240);
LABEL_107:
  v245 = *(int *)(v392 + 24);
  v246 = &v235[v245];
  v247 = &v236[v245];
  v248 = type metadata accessor for BackgroundMoonData(0);
  v249 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v246, 1, v248);
  v250 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v247, 1, v248);
  if (v249)
  {
    if (!v250)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v248 - 8) + 32))(v246, v247, v248);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v246, 0, 1, v248);
      goto LABEL_113;
    }
    goto LABEL_112;
  }
  v251 = *(_QWORD *)(v248 - 8);
  if (v250)
  {
    (*(void (**)(char *, uint64_t))(v251 + 8))(v246, v248);
LABEL_112:
    v252 = sub_1000BA294(&qword_100BC3378);
    memcpy(v246, v247, *(_QWORD *)(*(_QWORD *)(v252 - 8) + 64));
    goto LABEL_113;
  }
  (*(void (**)(char *, char *, uint64_t))(v251 + 40))(v246, v247, v248);
LABEL_113:
  v253 = v191[9];
  v254 = &v188[v253];
  v255 = &v189[v253];
  v256 = *(_QWORD *)&v189[v253 + 8];
  *(_QWORD *)v254 = *(_QWORD *)&v189[v253];
  *((_QWORD *)v254 + 1) = v256;
  swift_bridgeObjectRelease();
  v257 = *((_QWORD *)v255 + 3);
  *((_QWORD *)v254 + 2) = *((_QWORD *)v255 + 2);
  *((_QWORD *)v254 + 3) = v257;
  swift_bridgeObjectRelease();
  v258 = *((_QWORD *)v255 + 5);
  *((_QWORD *)v254 + 4) = *((_QWORD *)v255 + 4);
  *((_QWORD *)v254 + 5) = v258;
  swift_bridgeObjectRelease();
  v259 = *((_QWORD *)v255 + 7);
  *((_QWORD *)v254 + 6) = *((_QWORD *)v255 + 6);
  *((_QWORD *)v254 + 7) = v259;
  swift_bridgeObjectRelease();
  v260 = *((_QWORD *)v255 + 9);
  *((_QWORD *)v254 + 8) = *((_QWORD *)v255 + 8);
  *((_QWORD *)v254 + 9) = v260;
  swift_bridgeObjectRelease();
  v261 = *((_QWORD *)v255 + 11);
  *((_QWORD *)v254 + 10) = *((_QWORD *)v255 + 10);
  *((_QWORD *)v254 + 11) = v261;
  swift_bridgeObjectRelease();
  v262 = *((_QWORD *)v255 + 13);
  *((_QWORD *)v254 + 12) = *((_QWORD *)v255 + 12);
  *((_QWORD *)v254 + 13) = v262;
  v263 = swift_bridgeObjectRelease();
  v264 = v191[10];
  v265 = &v188[v264];
  v266 = &v189[v264];
  (*(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v222 - 8) + 40))(&v188[v264], &v189[v264], v222, v263);
  v267 = *(int *)(type metadata accessor for UVIndexComponentPreprocessedDataModel(0) + 20);
  v268 = &v265[v267];
  v269 = &v266[v267];
  v271 = *(_QWORD *)v269;
  v270 = *((_QWORD *)v269 + 1);
  *(_QWORD *)v268 = v271;
  *((_QWORD *)v268 + 1) = v270;
  swift_bridgeObjectRelease();
  v272 = v191[11];
  v273 = &v188[v272];
  v274 = &v189[v272];
  v275 = *(_QWORD *)&v189[v272 + 8];
  *(_QWORD *)v273 = *(_QWORD *)&v189[v272];
  *((_QWORD *)v273 + 1) = v275;
  swift_bridgeObjectRelease();
  v276 = *((_QWORD *)v274 + 3);
  *((_QWORD *)v273 + 2) = *((_QWORD *)v274 + 2);
  *((_QWORD *)v273 + 3) = v276;
  swift_bridgeObjectRelease();
  v277 = *((_QWORD *)v274 + 5);
  *((_QWORD *)v273 + 4) = *((_QWORD *)v274 + 4);
  *((_QWORD *)v273 + 5) = v277;
  swift_bridgeObjectRelease();
  v278 = v191[12];
  v279 = &v188[v278];
  v280 = &v189[v278];
  v281 = type metadata accessor for PressureTrend(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v281 - 8) + 40))(v279, v280, v281);
  v282 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
  v283 = v282[5];
  v284 = &v279[v283];
  v285 = &v280[v283];
  v287 = *(_QWORD *)v285;
  v286 = *((_QWORD *)v285 + 1);
  *(_QWORD *)v284 = v287;
  *((_QWORD *)v284 + 1) = v286;
  swift_bridgeObjectRelease();
  v288 = v282[6];
  v289 = &v279[v288];
  v290 = &v280[v288];
  v292 = *(_QWORD *)v290;
  v291 = *((_QWORD *)v290 + 1);
  *(_QWORD *)v289 = v292;
  *((_QWORD *)v289 + 1) = v291;
  swift_bridgeObjectRelease();
  v293 = v282[7];
  v294 = &v279[v293];
  v295 = &v280[v293];
  v297 = *(_QWORD *)v295;
  v296 = *((_QWORD *)v295 + 1);
  *(_QWORD *)v294 = v297;
  *((_QWORD *)v294 + 1) = v296;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v279[v282[8]] = *(_QWORD *)&v280[v282[8]];
  v298 = v282[9];
  v299 = &v279[v298];
  v300 = &v280[v298];
  v302 = *(_QWORD *)v300;
  v301 = *((_QWORD *)v300 + 1);
  *(_QWORD *)v299 = v302;
  *((_QWORD *)v299 + 1) = v301;
  swift_bridgeObjectRelease();
  v303 = v191[13];
  v304 = &v188[v303];
  v305 = &v189[v303];
  v306 = *(_QWORD *)&v189[v303 + 8];
  *(_QWORD *)v304 = *(_QWORD *)&v189[v303];
  *((_QWORD *)v304 + 1) = v306;
  swift_bridgeObjectRelease();
  v307 = *((_QWORD *)v305 + 3);
  *((_QWORD *)v304 + 2) = *((_QWORD *)v305 + 2);
  *((_QWORD *)v304 + 3) = v307;
  swift_bridgeObjectRelease();
  v308 = *((_QWORD *)v305 + 5);
  *((_QWORD *)v304 + 4) = *((_QWORD *)v305 + 4);
  *((_QWORD *)v304 + 5) = v308;
  swift_bridgeObjectRelease();
  v309 = *((_QWORD *)v305 + 7);
  *((_QWORD *)v304 + 6) = *((_QWORD *)v305 + 6);
  *((_QWORD *)v304 + 7) = v309;
  swift_bridgeObjectRelease();
  v310 = *((_QWORD *)v305 + 9);
  *((_QWORD *)v304 + 8) = *((_QWORD *)v305 + 8);
  *((_QWORD *)v304 + 9) = v310;
  swift_bridgeObjectRelease();
  v311 = *((_QWORD *)v305 + 11);
  *((_QWORD *)v304 + 10) = *((_QWORD *)v305 + 10);
  *((_QWORD *)v304 + 11) = v311;
  swift_bridgeObjectRelease();
  v312 = *((_QWORD *)v305 + 13);
  *((_QWORD *)v304 + 12) = *((_QWORD *)v305 + 12);
  *((_QWORD *)v304 + 13) = v312;
  swift_bridgeObjectRelease();
  v313 = *((_QWORD *)v305 + 15);
  *((_QWORD *)v304 + 14) = *((_QWORD *)v305 + 14);
  *((_QWORD *)v304 + 15) = v313;
  swift_bridgeObjectRelease();
  v314 = *((_QWORD *)v305 + 17);
  *((_QWORD *)v304 + 16) = *((_QWORD *)v305 + 16);
  *((_QWORD *)v304 + 17) = v314;
  swift_bridgeObjectRelease();
  v315 = *((_QWORD *)v305 + 19);
  *((_QWORD *)v304 + 18) = *((_QWORD *)v305 + 18);
  *((_QWORD *)v304 + 19) = v315;
  swift_bridgeObjectRelease();
  v316 = *((_QWORD *)v305 + 21);
  *((_QWORD *)v304 + 20) = *((_QWORD *)v305 + 20);
  *((_QWORD *)v304 + 21) = v316;
  swift_bridgeObjectRelease();
  v317 = *((_QWORD *)v305 + 23);
  *((_QWORD *)v304 + 22) = *((_QWORD *)v305 + 22);
  *((_QWORD *)v304 + 23) = v317;
  swift_bridgeObjectRelease();
  v318 = *((_QWORD *)v305 + 25);
  *((_QWORD *)v304 + 24) = *((_QWORD *)v305 + 24);
  *((_QWORD *)v304 + 25) = v318;
  swift_bridgeObjectRelease();
  *((_QWORD *)v304 + 26) = *((_QWORD *)v305 + 26);
  v319 = *((_QWORD *)v305 + 28);
  *((_QWORD *)v304 + 27) = *((_QWORD *)v305 + 27);
  *((_QWORD *)v304 + 28) = v319;
  v320 = swift_bridgeObjectRelease();
  v321 = v191[14];
  v322 = &v188[v321];
  v323 = &v189[v321];
  ((void (*)(char *, char *, uint64_t, __n128))v385)(&v188[v321], &v189[v321], v381, v320);
  v324 = *(int *)(v392 + 20);
  v325 = &v322[v324];
  v326 = &v323[v324];
  v327 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)&v322[v324], 1, v240);
  v328 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v326, 1, v240);
  if (v327)
  {
    if (!v328)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v240 - 8) + 32))(v325, v326, v240);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v325, 0, 1, v240);
      goto LABEL_119;
    }
    goto LABEL_118;
  }
  v329 = *(_QWORD *)(v240 - 8);
  if (v328)
  {
    (*(void (**)(char *, uint64_t))(v329 + 8))(v325, v240);
LABEL_118:
    v330 = sub_1000BA294(&qword_100BC3370);
    memcpy(v325, v326, *(_QWORD *)(*(_QWORD *)(v330 - 8) + 64));
    goto LABEL_119;
  }
  (*(void (**)(char *, char *, uint64_t))(v329 + 40))(v325, v326, v240);
LABEL_119:
  v331 = *(int *)(v392 + 24);
  v332 = &v322[v331];
  v333 = &v323[v331];
  v334 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)&v322[v331], 1, v248);
  v335 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v333, 1, v248);
  if (v334)
  {
    if (!v335)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v248 - 8) + 32))(v332, v333, v248);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v332, 0, 1, v248);
      goto LABEL_125;
    }
    goto LABEL_124;
  }
  v336 = *(_QWORD *)(v248 - 8);
  if (v335)
  {
    (*(void (**)(char *, uint64_t))(v336 + 8))(v332, v248);
LABEL_124:
    v337 = sub_1000BA294(&qword_100BC3378);
    memcpy(v332, v333, *(_QWORD *)(*(_QWORD *)(v337 - 8) + 64));
    goto LABEL_125;
  }
  (*(void (**)(char *, char *, uint64_t))(v336 + 40))(v332, v333, v248);
LABEL_125:
  v338 = v191[15];
  v339 = &v188[v338];
  v340 = &v189[v338];
  v341 = *(_QWORD *)&v189[v338 + 8];
  *(_QWORD *)v339 = *(_QWORD *)&v189[v338];
  *((_QWORD *)v339 + 1) = v341;
  swift_bridgeObjectRelease();
  v342 = *((_QWORD *)v340 + 3);
  *((_QWORD *)v339 + 2) = *((_QWORD *)v340 + 2);
  *((_QWORD *)v339 + 3) = v342;
  swift_bridgeObjectRelease();
  v343 = *((_QWORD *)v340 + 5);
  *((_QWORD *)v339 + 4) = *((_QWORD *)v340 + 4);
  *((_QWORD *)v339 + 5) = v343;
  swift_bridgeObjectRelease();
  v344 = *((_QWORD *)v340 + 7);
  *((_QWORD *)v339 + 6) = *((_QWORD *)v340 + 6);
  *((_QWORD *)v339 + 7) = v344;
  swift_bridgeObjectRelease();
  v345 = *((_QWORD *)v340 + 9);
  *((_QWORD *)v339 + 8) = *((_QWORD *)v340 + 8);
  *((_QWORD *)v339 + 9) = v345;
  swift_bridgeObjectRelease();
  v346 = *((_QWORD *)v340 + 11);
  *((_QWORD *)v339 + 10) = *((_QWORD *)v340 + 10);
  *((_QWORD *)v339 + 11) = v346;
  swift_bridgeObjectRelease();
  v347 = *((_QWORD *)v340 + 13);
  *((_QWORD *)v339 + 12) = *((_QWORD *)v340 + 12);
  *((_QWORD *)v339 + 13) = v347;
  swift_bridgeObjectRelease();
  if (v390 != v389)
  {
    v348 = v388[10];
    v349 = (char *)v390 + v348;
    v350 = (char *)v389 + v348;
    sub_1000215BC((uint64_t)v390 + v348, type metadata accessor for NewsDataModel);
    v351 = type metadata accessor for NewsDataModel(0);
    if (swift_getEnumCaseMultiPayload(v350))
    {
      memcpy(v349, v350, *(_QWORD *)(*(_QWORD *)(v351 - 8) + 64));
    }
    else
    {
      v352 = type metadata accessor for News(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v352 - 8) + 32))(v349, v350, v352);
      swift_storeEnumTagMultiPayload(v349, v351, 0);
    }
  }
  *(_OWORD *)((char *)v390 + v388[11]) = *(_OWORD *)((char *)v389 + v388[11]);
  v353 = swift_release();
  v354 = v388[12];
  v355 = (char *)v390 + v354;
  v356 = (char *)v389 + v354;
  ((void (*)(char *, char *, uint64_t, __n128))v387)((char *)v390 + v354, (char *)v389 + v354, v383, v353);
  v357 = sub_1000BA294(&qword_100C06160);
  *(_QWORD *)&v355[*(int *)(v357 + 28)] = *(_QWORD *)&v356[*(int *)(v357 + 28)];
  swift_release();
  return v390;
}

uint64_t sub_1007A3A68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1007A3A74);
}

uint64_t sub_1007A3A74(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;

  sub_1000BA294(&qword_100BC6518);
  sub_100088FF0();
  if (v9)
  {
    v7 = v6;
    v8 = a1;
    return _s7Weather24LocationCompositionStateOwet_0(v8, a2, v7);
  }
  sub_1000BE878();
  sub_100088FF0();
  if (v9)
  {
    v7 = v10;
    v11 = a3[5];
LABEL_24:
    v8 = a1 + v11;
    return _s7Weather24LocationCompositionStateOwet_0(v8, a2, v7);
  }
  sub_10003BDE0();
  sub_100088FF0();
  if (v12)
  {
    v7 = v13;
    v11 = a3[7];
    goto LABEL_24;
  }
  sub_1000C2148();
  sub_100088FF0();
  if (v14)
  {
    v7 = v15;
    v11 = a3[8];
    goto LABEL_24;
  }
  sub_1000BE800();
  sub_100088FF0();
  if (v16)
  {
    v7 = v17;
    v11 = a3[9];
    goto LABEL_24;
  }
  sub_1000AE9DC();
  sub_100088FF0();
  if (v18)
  {
    v7 = v19;
    v11 = a3[10];
    goto LABEL_24;
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v7 = sub_1000BA294(&qword_100C06160);
    v11 = a3[12];
    goto LABEL_24;
  }
  v20 = *(_QWORD *)(a1 + a3[11]);
  if (v20 >= 0xFFFFFFFF)
    LODWORD(v20) = -1;
  return (v20 + 1);
}

uint64_t sub_1007A3B88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1007A3B94);
}

void sub_1007A3B94(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  sub_1000BA294(&qword_100BC6518);
  sub_10009D2E8();
  if (v11)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    sub_1000BE878();
    sub_10009D2E8();
    if (v11)
    {
      v9 = v12;
      v13 = a4[5];
    }
    else
    {
      sub_10003BDE0();
      sub_10009D2E8();
      if (v14)
      {
        v9 = v15;
        v13 = a4[7];
      }
      else
      {
        sub_1000C2148();
        sub_10009D2E8();
        if (v16)
        {
          v9 = v17;
          v13 = a4[8];
        }
        else
        {
          sub_1000BE800();
          sub_10009D2E8();
          if (v18)
          {
            v9 = v19;
            v13 = a4[9];
          }
          else
          {
            sub_1000AE9DC();
            sub_10009D2E8();
            if (v20)
            {
              v9 = v21;
              v13 = a4[10];
            }
            else
            {
              if (a3 == 0x7FFFFFFF)
              {
                *(_QWORD *)(a1 + a4[11]) = (a2 - 1);
                return;
              }
              v9 = sub_1000BA294(&qword_100C06160);
              v13 = a4[12];
            }
          }
        }
      }
    }
    v10 = a1 + v13;
  }
  _s7Weather24LocationCompositionStateOwst_0(v10, a2, a2, v9);
}

uint64_t type metadata accessor for WeatherEditorView(uint64_t a1)
{
  uint64_t result;

  result = qword_100C061C0;
  if (!qword_100C061C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WeatherEditorView);
  return result;
}

void sub_1007A3CDC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[9];

  sub_100158A50(319);
  if (v3 <= 0x3F)
  {
    v16[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for LocationModel(319);
    if (v5 <= 0x3F)
    {
      v16[1] = *(_QWORD *)(v4 - 8) + 64;
      v16[2] = (char *)&value witness table for Builtin.Int64 + 64;
      v6 = type metadata accessor for LocationWeatherDataState(319);
      if (v7 <= 0x3F)
      {
        v16[3] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for WeatherData(319);
        if (v9 <= 0x3F)
        {
          v16[4] = *(_QWORD *)(v8 - 8) + 64;
          v10 = type metadata accessor for PreprocessedWeatherData(319);
          if (v11 <= 0x3F)
          {
            v16[5] = *(_QWORD *)(v10 - 8) + 64;
            v12 = type metadata accessor for NewsDataModel(319);
            if (v13 <= 0x3F)
            {
              v16[6] = *(_QWORD *)(v12 - 8) + 64;
              v16[7] = (char *)&value witness table for () + 64;
              sub_1007A3E04(319);
              if (v15 <= 0x3F)
              {
                v16[8] = *(_QWORD *)(v14 - 8) + 64;
                swift_initStructMetadata(a1, 256, 9, v16, a1 + 16);
              }
            }
          }
        }
      }
    }
  }
}

void sub_1007A3E04(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100C061D0)
  {
    v2 = type metadata accessor for WeatherDataModel(255);
    v3 = type metadata accessor for State(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100C061D0);
  }
}

uint64_t sub_1007A3E58(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AC1074, 1);
}

void sub_1007A3E68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1000986AC();
  v4 = type metadata accessor for InsetGroupedListStyle(0);
  sub_100099300();
  __chkstk_darwin(v5);
  sub_100099864();
  v6 = sub_1000BA294(&qword_100C06220);
  sub_100098B6C();
  __chkstk_darwin(v7);
  sub_100098694();
  v13 = v0;
  v8 = sub_1000BA294(&qword_100C06228);
  sub_10003D2DC(&qword_100C06230, &qword_100C06228);
  v10 = List<>.init(content:)(sub_1007A5874, &v12, v8, v9);
  InsetGroupedListStyle.init()(v10);
  sub_10003D2DC(&qword_100C06238, &qword_100C06220);
  View.listStyle<A>(_:)(v1, v6, v4, v11, &protocol witness table for InsetGroupedListStyle);
  sub_1000BD208(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1000CCCD8(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_100098640();
}

uint64_t sub_1007A3F78@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  _BYTE v47[16];
  uint64_t v48;
  _BYTE v49[16];
  uint64_t v50;
  _BYTE v51[16];
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  _QWORD *v56;

  v46 = a2;
  v45 = sub_1000BA294(&qword_100C06240);
  v42 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v44 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v43 = (char *)&v35 - v5;
  __chkstk_darwin(v6);
  v41 = (char *)&v35 - v7;
  __chkstk_darwin(v8);
  v10 = (char *)&v35 - v9;
  v40 = sub_1000BA294(&qword_100C06248);
  v38 = *(_QWORD *)(v40 - 8);
  v11 = v38;
  __chkstk_darwin(v40);
  v39 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v35 - v14;
  v52 = a1;
  v53 = 0xD00000000000003ELL;
  v54 = 0x8000000100A13B20;
  v55 = 0;
  v56 = _swiftEmptyArrayStorage;
  v16 = sub_1000BA294(&qword_100C06250);
  sub_10003D2DC(&qword_100C06258, &qword_100C06250);
  v37 = v15;
  Section<>.init(footer:content:)(&v53, sub_1007A587C, v51, v16, &type metadata for Text, v17, &protocol witness table for Text);
  v50 = a1;
  v53 = 0xD000000000000039;
  v54 = 0x8000000100A13B60;
  v55 = 0;
  v56 = _swiftEmptyArrayStorage;
  v18 = sub_1000BA294(&qword_100C06260);
  v19 = sub_1007A588C();
  v36 = v10;
  Section<>.init(footer:content:)(&v53, sub_1007A5884, v49, v18, &type metadata for Text, v19, &protocol witness table for Text);
  v48 = a1;
  v53 = 0xD000000000000037;
  v54 = 0x8000000100A13BA0;
  v55 = 0;
  v56 = _swiftEmptyArrayStorage;
  v20 = v41;
  Section<>.init(footer:content:)(&v53, sub_1007A5928, v47, v18, &type metadata for Text, v19, &protocol witness table for Text);
  v21 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v22 = v39;
  v23 = v40;
  v21(v39, v15, v40);
  v24 = v42;
  v25 = v43;
  v26 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
  v27 = v10;
  v28 = v45;
  v26(v43, v27, v45);
  v29 = v44;
  v26(v44, v20, v28);
  v30 = v46;
  v21(v46, v22, v23);
  v31 = sub_1000BA294(&qword_100C06270);
  v26(&v30[*(int *)(v31 + 48)], v25, v28);
  v26(&v30[*(int *)(v31 + 64)], v29, v28);
  v32 = *(void (**)(char *, uint64_t))(v24 + 8);
  v32(v20, v28);
  v32(v36, v28);
  v33 = *(void (**)(char *, uint64_t))(v38 + 8);
  v33(v37, v23);
  v32(v29, v28);
  v32(v25, v28);
  return ((uint64_t (*)(char *, uint64_t))v33)(v22, v23);
}

uint64_t sub_1007A4330@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  void (*v16)(char *, char *, uint64_t);
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  void (*v20)(char *, uint64_t);
  uint64_t v22;
  char *v23;

  v23 = a1;
  v1 = sub_1000BA294(&qword_100C06278);
  v22 = *(_QWORD *)(v1 - 8);
  v2 = v22;
  __chkstk_darwin(v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v22 - v6;
  v8 = sub_1000BA294(&qword_100C06280);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v22 - v13;
  sub_1007A44D8((uint64_t)&v22 - v13);
  sub_1007A47E8((uint64_t)v7);
  v15 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v15(v11, v14, v8);
  v16 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  v16(v4, v7, v1);
  v17 = v23;
  v15(v23, v11, v8);
  v18 = sub_1000BA294(&qword_100C06288);
  v16(&v17[*(int *)(v18 + 48)], v4, v1);
  v19 = *(void (**)(char *, uint64_t))(v22 + 8);
  v19(v7, v1);
  v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v20(v14, v8);
  v19(v4, v1);
  return ((uint64_t (*)(char *, uint64_t))v20)(v11, v8);
}

uint64_t sub_1007A44D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t, __n128);
  char *v28;
  char *v29;
  void (*v30)(char *, uint64_t);
  uint64_t (**v31)(uint64_t);
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char v42[16];
  uint64_t v43;

  v41 = a1;
  v2 = type metadata accessor for WeatherEditorView(0);
  v37 = *(_QWORD *)(v2 - 8);
  v3 = *(_QWORD *)(v37 + 64);
  __chkstk_darwin(v2);
  v36 = (uint64_t)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CurrentWeather(0);
  v39 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v40 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v38 = (char *)&v34 - v7;
  __chkstk_darwin(v8);
  v10 = (char *)&v34 - v9;
  v11 = type metadata accessor for WeatherDataModel(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for CurrentWeatherEditorView(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = v1;
  v18 = sub_1000BA294(&qword_100C06160);
  v19 = State.wrappedValue.getter(v14, v18);
  WeatherDataModel.currentWeather.getter(v19);
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  v20 = v36;
  sub_100080C0C(v1, v36, type metadata accessor for WeatherEditorView);
  v21 = *(unsigned __int8 *)(v37 + 80);
  v22 = (v21 + 16) & ~v21;
  v23 = swift_allocObject(&unk_100B90938, v22 + v3, v21 | 7);
  sub_10007802C(v20, v23 + v22, type metadata accessor for WeatherEditorView);
  *(_QWORD *)v17 = swift_getKeyPath(&unk_1009CA2A8);
  v24 = sub_1000BA294(&qword_100BC4F28);
  v25 = swift_storeEnumTagMultiPayload(v17, v24, 0);
  v26 = v39;
  v27 = *(void (**)(char *, char *, uint64_t, __n128))(v39 + 16);
  v27(&v17[*(int *)(v15 + 20)], v10, v4, v25);
  v28 = v38;
  ((void (*)(char *, char *, uint64_t))v27)(v38, v10, v4);
  v29 = v40;
  ((void (*)(char *, char *, uint64_t))v27)(v40, v28, v4);
  State.init(wrappedValue:)(v29, v4);
  v30 = *(void (**)(char *, uint64_t))(v26 + 8);
  v30(v28, v4);
  v30(v10, v4);
  v31 = (uint64_t (**)(uint64_t))&v17[*(int *)(v15 + 24)];
  *v31 = sub_1007A66F4;
  v31[1] = (uint64_t (*)(uint64_t))v23;
  v43 = v35;
  sub_10000F1C8(&qword_100C062A8, type metadata accessor for CurrentWeatherEditorView);
  return NavigationLink.init(destination:label:)(v17, sub_1007A673C, v42, &type metadata for Text, v15, &protocol witness table for Text, v32);
}

uint64_t sub_1007A47E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  double (*v21)(_QWORD *, uint64_t);
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (**v43)(uint64_t);
  uint64_t v44;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _QWORD v57[3];

  v53 = a1;
  v2 = type metadata accessor for WeatherEditorView(0);
  v48 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v49 = v3;
  v50 = (uint64_t)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000BA294(&qword_100BCCC50);
  __chkstk_darwin(v4);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TimeZone(0);
  v54 = *(_QWORD *)(v7 - 8);
  v55 = v7;
  __chkstk_darwin(v7);
  v56 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BCB130);
  v51 = *(_QWORD *)(v9 - 8);
  v52 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for WeatherDataModel(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = (int *)type metadata accessor for DailyForecastEditorView(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000BA294(&qword_100C06160);
  v20 = State.wrappedValue.getter(v15, v19);
  v47 = v11;
  WeatherDataModel.dailyForecast.getter(v20);
  v21 = *(double (**)(_QWORD *, uint64_t))(v13 + 8);
  v22 = v55;
  v23 = v15;
  v24 = v1;
  v25.n128_f64[0] = v21(v23, v12);
  v26 = *(_QWORD *)(v1 + *(int *)(v2 + 24));
  LocationModel.timeZone.getter(v25);
  v27 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v6, 1, v22);
  if ((_DWORD)v27 == 1)
  {
    static TimeZone.current.getter(v27);
    sub_100021A14((uint64_t)v6, &qword_100BCCC50);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v56, v6, v22);
  }
  v28 = v50;
  sub_100080C0C(v1, v50, type metadata accessor for WeatherEditorView);
  v29 = *(unsigned __int8 *)(v48 + 80);
  v30 = (v29 + 16) & ~v29;
  v31 = swift_allocObject(&unk_100B90910, v30 + v49, v29 | 7);
  sub_10007802C(v28, v31 + v30, type metadata accessor for WeatherEditorView);
  *(_QWORD *)v18 = swift_getKeyPath(&unk_1009CA2A8);
  v32 = sub_1000BA294(&qword_100BC4F28);
  v33 = swift_storeEnumTagMultiPayload(v18, v32, 0);
  v35 = v51;
  v34 = v52;
  v36 = v47;
  (*(void (**)(char *, char *, uint64_t, __n128))(v51 + 16))(&v18[v16[5]], v47, v52, v33);
  v37 = Forecast.forecast.getter(v34);
  v38 = &v18[v16[9]];
  v57[0] = v37;
  v39 = sub_1000BA294(&qword_100C06290);
  State.init(wrappedValue:)(v57, v39);
  v40 = v57[1];
  v41 = v57[2];
  (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v34);
  *(_QWORD *)v38 = v40;
  *((_QWORD *)v38 + 1) = v41;
  *(_QWORD *)&v18[v16[6]] = v26;
  v42 = (*(uint64_t (**)(char *, char *, uint64_t))(v54 + 32))(&v18[v16[7]], v56, v55);
  v43 = (uint64_t (**)(uint64_t))&v18[v16[8]];
  *v43 = sub_1007A6680;
  v43[1] = (uint64_t (*)(uint64_t))v31;
  __chkstk_darwin(v42);
  *(&v46 - 2) = v24;
  sub_10000F1C8(&qword_100C06298, type metadata accessor for DailyForecastEditorView);
  return NavigationLink.init(destination:label:)(v18, sub_1007A66AC, &v46 - 4, &type metadata for Text, v16, &protocol witness table for Text, v44);
}

uint64_t sub_1007A4BD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = a1;
  v25 = a2;
  v2 = type metadata accessor for WeatherEditorView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = sub_1000BA294(&qword_100BC4FA0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = LocalizedStringKey.init(stringLiteral:)(0x7465736552, 0xE500000000000000);
  v11 = v10;
  v13 = v12;
  v23 = v14;
  sub_100080C0C(v24, (uint64_t)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for WeatherEditorView);
  v15 = *(unsigned __int8 *)(v3 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(&unk_100B908E8, v16 + v4, v15 | 7);
  sub_10007802C((uint64_t)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16, type metadata accessor for WeatherEditorView);
  v18 = Button<>.init(_:action:)(v9, v11, v13 & 1, v23, sub_1007A6644, v17);
  v19 = static Color.red.getter(v18);
  v20 = v25;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v25, v8, v5);
  *(_QWORD *)(v20 + *(int *)(sub_1000BA294(&qword_100C06260) + 36)) = v19;
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1007A4D64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = a1;
  v25 = a2;
  v2 = type metadata accessor for WeatherEditorView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = sub_1000BA294(&qword_100BC4FA0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = LocalizedStringKey.init(stringLiteral:)(1701736260, 0xE400000000000000);
  v11 = v10;
  v13 = v12;
  v23 = v14;
  sub_100080C0C(v24, (uint64_t)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for WeatherEditorView);
  v15 = *(unsigned __int8 *)(v3 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(&unk_100B908C0, v16 + v4, v15 | 7);
  sub_10007802C((uint64_t)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16, type metadata accessor for WeatherEditorView);
  v18 = Button<>.init(_:action:)(v9, v11, v13 & 1, v23, sub_1007A5934, v17);
  v19 = static Color.green.getter(v18);
  v20 = v25;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v25, v8, v5);
  *(_QWORD *)(v20 + *(int *)(sub_1000BA294(&qword_100C06260) + 36)) = v19;
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1007A4EF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v0 = type metadata accessor for CurrentWeather(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - v5;
  v7 = type metadata accessor for WeatherDataModel(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for WeatherEditorView(0);
  v11 = sub_1000BA294(&qword_100C06160);
  v12 = State.wrappedValue.getter(v10, v11);
  WeatherDataModel.currentWeather.getter(v12);
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  v13 = type metadata accessor for WeatherData(0);
  WeatherDataModel.currentWeather.getter(v13);
  sub_10000F1C8(&qword_100C062B0, (uint64_t (*)(uint64_t))&type metadata accessor for CurrentWeather);
  v15 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v3, v0, v14);
  v16 = *(void (**)(char *, uint64_t))(v1 + 8);
  v16(v3, v0);
  v16(v6, v0);
  if ((v15 & 1) != 0)
    return 0;
  else
    return 42;
}

uint64_t sub_1007A508C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = type metadata accessor for WeatherDataModel(0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for CurrentWeather(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v9 + 16))(v8, a1, v6);
  type metadata accessor for WeatherEditorView(0);
  v10 = sub_1000BA294(&qword_100C06160);
  State.wrappedValue.getter(v4, v10);
  WeatherDataModel.currentWeather.setter(v8);
  return State.wrappedValue.setter(v4, v10);
}

uint64_t sub_1007A5184()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v0 = sub_1000BA294(&qword_100BCB130);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - v5;
  v7 = type metadata accessor for WeatherDataModel(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for WeatherEditorView(0);
  v11 = sub_1000BA294(&qword_100C06160);
  v12 = State.wrappedValue.getter(v10, v11);
  WeatherDataModel.dailyForecast.getter(v12);
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  v13 = type metadata accessor for WeatherData(0);
  WeatherDataModel.dailyForecast.getter(v13);
  sub_10003D2DC(&qword_100C062A0, &qword_100BCB130);
  v15 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v3, v0, v14);
  v16 = *(void (**)(char *, uint64_t))(v1 + 8);
  v16(v3, v0);
  v16(v6, v0);
  if ((v15 & 1) != 0)
    return 0;
  else
    return 42;
}

uint64_t sub_1007A5324(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = type metadata accessor for WeatherDataModel(0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_1000BA294(&qword_100BCB130);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v9 + 16))(v8, a1, v6);
  type metadata accessor for WeatherEditorView(0);
  v10 = sub_1000BA294(&qword_100C06160);
  State.wrappedValue.getter(v4, v10);
  WeatherDataModel.dailyForecast.setter(v8);
  return State.wrappedValue.setter(v4, v10);
}

void sub_1007A5420(Swift::Int a1@<X1>, uint64_t (*a2)(uint64_t)@<X2>, uint64_t a3@<X3>, void *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;

  _StringGuts.grow(_:)(a1);
  v10 = a2(v9);
  v12 = v11;
  swift_bridgeObjectRelease(0xE000000000000000);
  v13._countAndFlagsBits = a3;
  v13._object = a4;
  String.append(_:)(v13);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v12;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 24) = _swiftEmptyArrayStorage;
}

uint64_t sub_1007A54C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v14;

  v2 = type metadata accessor for WeatherDataModel(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v14 - v7;
  v9 = a1 + *(int *)(type metadata accessor for WeatherEditorView(0) + 32);
  v10 = v9 + *(int *)(type metadata accessor for WeatherData(0) + 24);
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v11(v8, v10, v2);
  v11(v5, (uint64_t)v8, v2);
  v12 = sub_1000BA294(&qword_100C06160);
  State.wrappedValue.setter(v5, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

void sub_1007A55C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  __n128 v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;

  v2 = type metadata accessor for PresentationMode(0);
  __chkstk_darwin(v2);
  v27 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_1000BA294(&qword_100BC6510);
  __chkstk_darwin(v26);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for LocationWeatherDataState(0);
  __chkstk_darwin(v25);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for WeatherDataModel(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for WeatherData(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)type metadata accessor for WeatherEditorView(0);
  sub_100080C0C(a1 + v15[8], (uint64_t)v14, type metadata accessor for WeatherData);
  v16 = sub_1000BA294(&qword_100C06160);
  State.wrappedValue.getter(v11, v16);
  (*(void (**)(char *, _QWORD *, uint64_t))(v9 + 40))(&v14[*(int *)(v12 + 24)], v11, v8);
  v17 = sub_1000BA294(&qword_100BC3358);
  v18 = (uint64_t)&v7[*(int *)(v17 + 48)];
  v19 = (uint64_t)&v7[*(int *)(v17 + 64)];
  sub_100080C0C((uint64_t)v14, (uint64_t)v7, type metadata accessor for WeatherData);
  sub_100080C0C(a1 + v15[9], v18, type metadata accessor for PreprocessedWeatherData);
  sub_100080C0C(a1 + v15[10], v19, type metadata accessor for NewsDataModel);
  v20 = swift_storeEnumTagMultiPayload(v7, v25, 1);
  v21.n128_f64[0] = (*(double (**)(char *, __n128))(a1 + v15[11]))(v7, v20);
  sub_1007A5A6C(v21);
  v23 = v26;
  v22 = v27;
  Binding.wrappedValue.getter(v26);
  PresentationMode.dismiss()();
  Binding.wrappedValue.setter(v22, v23);
  sub_100021A14((uint64_t)v5, &qword_100BC6510);
  sub_1000215BC((uint64_t)v7, type metadata accessor for LocationWeatherDataState);
  sub_1000215BC((uint64_t)v14, type metadata accessor for WeatherData);
}

uint64_t sub_1007A5874@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_1007A3F78(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1007A587C@<X0>(char *a1@<X8>)
{
  return sub_1007A4330(a1);
}

uint64_t sub_1007A5884@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1007A4BD4(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1007A588C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C06268;
  if (!qword_100C06268)
  {
    v1 = sub_100075EB0(&qword_100C06260);
    sub_10003D2DC(&qword_100BC4FC0, &qword_100BC4FA0);
    sub_10003D2DC(&qword_100BD63E8, &qword_100BD63F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C06268);
  }
  return result;
}

uint64_t sub_1007A5928@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1007A4D64(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1007A5934()
{
  return sub_1007A6650((uint64_t (*)(uint64_t))sub_1007A55C8);
}

void sub_1007A5940()
{
  sub_10009D818();
}

#error "1007A59C8: call analysis failed (funcsize=64)"

#error "1007A5ADC: call analysis failed (funcsize=64)"

void sub_1007A5B80()
{
  os_log_type_t v0;
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  sub_1000986AC();
  v3 = v2;
  sub_1000D9280();
  sub_100098B6C();
  __chkstk_darwin(v4);
  sub_100099864();
  if ((v3 & 1) == 0)
  {
    sub_10009D4E0();
    static os_log_type_t.fault.getter(v5, v6, v7, v8, v9, v10, v11, v12);
    v13 = sub_1000F4190();
    if (sub_1000D0EB0(v13))
    {
      v14 = (uint8_t *)sub_100098710(12);
      v15 = sub_100098710(32);
      sub_1000ED358(v15);
      sub_1000BF2A0(4.8149e-34);
      v17 = sub_1000CE1C8(0x6F436E6D756C6F43, 0xEB00000000746E75, v16);
      sub_1000C58D0(v17);
      sub_10009D7A0((void *)&_mh_execute_header, v3, v0, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v14);
      sub_1000988D8(v1);
      sub_1000986F0(v1);
      sub_1000986F0((uint64_t)v14);
    }

    sub_1000C10E0();
    sub_1000DB10C();
    sub_1000DF95C();
  }
  sub_100098640();
}

void sub_1007A5C88()
{
  sub_1000CFF38();
}

void sub_1007A5CB0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];

  sub_1000986AC();
  v4 = v3;
  v6 = v5;
  sub_1000D9280();
  sub_100098B6C();
  __chkstk_darwin(v7);
  sub_100079FBC();
  if ((v4 & 0x100) == 0)
  {
    sub_10009D4E0();
    static os_log_type_t.fault.getter(v8, v9, v10, v11, v12, v13, v14, v15);
    v16 = sub_1000C6CA4();
    if (sub_1000C624C(v16))
    {
      v17 = sub_100098710(12);
      v18 = sub_100098710(32);
      v22[0] = v18;
      sub_10009EF48(4.8149e-34);
      v21 = sub_100109AA4(16, 0x8000000100A13D20, v22);
      sub_1000C0B94((uint64_t)&v21, (uint64_t)v22);
      sub_1000DDF48((void *)&_mh_execute_header, v19, v20, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.");
      sub_1000B4DBC();
      sub_1000986F0(v18);
      sub_1000986F0(v17);
    }

    sub_100110580();
    swift_getAtKeyPath(v0, v6);
    sub_100082C5C(v6, v4, 0);
    sub_1000BEA30(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  }
  sub_100098640();
}

void sub_1007A5DE0()
{
  sub_100158EB0();
}

void sub_1007A5E04()
{
  uint64_t v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[3];

  sub_1000986AC();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  sub_1000D9280();
  sub_100099300();
  __chkstk_darwin(v9);
  sub_100098694();
  if ((v4 & 0x100) == 0)
  {
    swift_retain();
    static os_log_type_t.fault.getter(v10, v11, v12, v13, v14, v15, v16, v17);
    v18 = sub_10009F814();
    if (sub_1000BD064(v18))
    {
      v19 = (uint8_t *)sub_100098710(12);
      v20 = sub_100098710(32);
      v22[0] = v20;
      sub_10009C068(4.8149e-34);
      v21 = sub_100109AA4(16, 0x8000000100A13EF0, v22);
      sub_10011AC64((uint64_t)&v21, (uint64_t)v22);
      sub_10009D7A0((void *)&_mh_execute_header, v18, v1, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v19);
      sub_1000DA204();
      sub_1000986F0(v20);
      sub_1000986F0((uint64_t)v19);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v0, v8);
    sub_10040CFD8(v8, v6, v4, 0);
    sub_1000CCCD8(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  }
  sub_100098640();
}

void sub_1007A5F70()
{
  sub_1000BFEE4();
}

#error "1007A6004: call analysis failed (funcsize=64)"

void sub_1007A60A8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[2];

  sub_1000986AC();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  sub_1000D9280();
  sub_100098B6C();
  __chkstk_darwin(v8);
  sub_100079FBC();
  if ((v3 & 1) == 0)
  {
    swift_retain();
    static os_log_type_t.fault.getter(v9, v10, v11, v12, v13, v14, v15, v16);
    v17 = sub_1000C6CA4();
    if (sub_1000C624C(v17))
    {
      v18 = sub_100098710(12);
      v19 = sub_100098710(32);
      v23[0] = v19;
      sub_10009EF48(4.8149e-34);
      v22 = sub_1000CE1C8(0x6E656D6E67696C41, 0xE900000000000074, v23);
      sub_1000C0B94((uint64_t)&v22, (uint64_t)v23);
      sub_1000DDF48((void *)&_mh_execute_header, v20, v21, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.");
      sub_1000B4DBC();
      sub_1000986F0(v19);
      sub_1000986F0(v18);
    }

    sub_100110580();
    swift_getAtKeyPath(v0, v7);
    sub_100082C5C(v7, v5, 0);
    sub_1000BEA30(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  }
  sub_100098640();
}

void sub_1007A61E8()
{
  sub_10009D818();
}

#error "1007A6270: call analysis failed (funcsize=64)"

void sub_1007A6314()
{
  sub_10009D818();
}

void sub_1007A632C()
{
  sub_10009D818();
}

void sub_1007A6344()
{
  sub_10009D818();
}

#error "1007A63D4: call analysis failed (funcsize=67)"

void sub_1007A6478()
{
  sub_10009D818();
}

void sub_1007A6490()
{
  os_log_type_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_1000986AC();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = sub_1000D9280();
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_100099864();
  sub_10009D4E0();
  if ((v6 & 1) == 0)
  {
    static os_log_type_t.fault.getter(v11, v12, v13, v14, v15, v16, v17, v18);
    v19 = sub_10009F814();
    if (sub_1000BD064(v19))
    {
      v20 = (uint8_t *)sub_100098710(12);
      v21 = sub_100098710(32);
      v22 = v4;
      v23 = v21;
      v27 = v21;
      *(_DWORD *)v20 = 136315138;
      v24 = sub_1000CE1C8(v22, v2, &v27);
      v25 = sub_100099A3C(v24);
      sub_10011AC64(v25, v26);
      sub_10009D7A0((void *)&_mh_execute_header, v19, v0, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v20);
      sub_1000988D8(v23);
      sub_1000986F0(v23);
      sub_1000986F0((uint64_t)v20);
    }

    sub_1000C10E0();
    sub_1000DB10C();
    swift_release(v8);
    sub_1000E78F0(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
  }
  sub_100098640();
}

void sub_1007A65D0()
{
  sub_1000CFF38();
}

void sub_1007A65F8()
{
  sub_1000CFF38();
}

uint64_t sub_1007A6620()
{
  return EnvironmentValues.presentationMode.getter();
}

uint64_t sub_1007A6644()
{
  return sub_1007A6650(sub_1007A54C8);
}

uint64_t sub_1007A6650(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  sub_10009DF90();
  sub_1000BA550();
  return a1(v1 + v2);
}

uint64_t sub_1007A6680(uint64_t a1)
{
  return sub_1007A6700(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1007A5324);
}

uint64_t sub_1007A668C()
{
  return EnvironmentValues.presentationMode.getter();
}

void sub_1007A66AC(uint64_t a1@<X8>)
{
  sub_1007A5420(16, (uint64_t (*)(uint64_t))sub_1007A5184, 0x6F4620796C696144, (void *)0xEE00747361636572, a1);
}

uint64_t sub_1007A66F4(uint64_t a1)
{
  return sub_1007A6700(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1007A508C);
}

uint64_t sub_1007A6700(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  sub_10009DF90();
  sub_1000BA550();
  return a2(a1, v2 + v4);
}

void sub_1007A673C(uint64_t a1@<X8>)
{
  sub_1007A5420(17, (uint64_t (*)(uint64_t))sub_1007A4EF0, 0x20746E6572727543, (void *)0xEF72656874616557, a1);
}

void sub_1007A6780(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4;

  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(a3, "setTitle:", v4);

}

uint64_t sub_1007A67C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[4];

  v0 = sub_100075EB0(&qword_100C06220);
  v1 = type metadata accessor for InsetGroupedListStyle(255);
  sub_10003D2DC(&qword_100C06238, &qword_100C06220);
  v4[0] = v0;
  v4[1] = v1;
  v4[2] = v2;
  v4[3] = &protocol witness table for InsetGroupedListStyle;
  return swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
}

uint64_t sub_1007A6848(uint64_t a1)
{
  sub_1000D31D0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
  return a1;
}

uint64_t sub_1007A6880(uint64_t a1)
{
  sub_1000D31C4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

void sub_1007A68B4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  id v168;
  Swift::String v169;
  Swift::String v170;
  Swift::String v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t (*v178)(uint64_t, uint64_t, uint64_t);
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t (*v183)(uint64_t, uint64_t);
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  NSNumber v187;
  Class *p_isa;
  void *v189;
  Swift::String v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  uint64_t v197;
  Class *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t (*v208)(uint64_t, _QWORD);
  void (*v209)(_QWORD, _QWORD);
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  _QWORD *v217;
  uint64_t (*v218)(uint64_t, _QWORD);
  uint64_t (*v219)(uint64_t, _QWORD);
  void (*v220)(_QWORD, _QWORD);
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t (**v230)(uint64_t, uint64_t, uint64_t);
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t (*v235)(uint64_t, uint64_t);
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  Class *v240;
  uint64_t v241;
  uint64_t (*v242)(uint64_t, _QWORD);
  uint64_t (*v243)(uint64_t, _QWORD);
  uint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  id v249;
  Swift::String v250;
  Swift::String v251;
  Swift::String v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  id v257;
  Swift::String v258;
  Swift::String v259;
  Swift::String_optional v260;
  Swift::String v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  void (*v266)(_QWORD);
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void (*v272)(uint64_t, uint64_t);
  uint64_t (*v273)(uint64_t, uint64_t);
  uint64_t (*v274)(uint64_t, uint64_t);
  uint64_t v275;
  _QWORD *v276;
  __n128 v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  double v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t (*v293)(uint64_t, _QWORD);
  uint64_t (*v294)(uint64_t, _QWORD);
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  _QWORD *v300;
  _QWORD *v301;
  uint64_t v302;
  uint64_t (*v303)(uint64_t, _QWORD);
  uint64_t (*v304)(uint64_t, _QWORD);
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t (*v311)(uint64_t, uint64_t);
  uint64_t v312;
  char v313;
  uint64_t v314;
  uint64_t (*v315)(uint64_t, _QWORD);
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  void (*v320)(_QWORD);
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  void (*v329)(uint64_t, uint64_t);
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  double v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  _QWORD *v344;
  _QWORD *v345;
  uint64_t v346;
  double v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t (*v352)(uint64_t, _QWORD);
  uint64_t (*v353)(uint64_t, _QWORD);
  uint64_t (*v354)(uint64_t, _QWORD);
  uint64_t v355;
  uint64_t (*v356)(uint64_t, _QWORD);
  uint64_t v357;
  uint64_t v358;
  _QWORD *v359;
  uint64_t v360;
  void *v361;
  id v362;
  id v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  void (*v368)(uint64_t, uint64_t);
  uint64_t v369;
  int v370;
  uint64_t v371;
  __n128 v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  _QWORD *v380;
  _QWORD *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t (*v384)(uint64_t, _QWORD);
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  _QWORD *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  char *v405;
  uint64_t v406;
  Class *v407;
  void (*v408)(uint64_t, uint64_t);
  uint64_t v409;
  uint64_t (*v410)(uint64_t, uint64_t);
  uint64_t (*v411)(uint64_t, _QWORD);
  uint64_t (*v412)(char *, uint64_t, uint64_t);
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t (*v418)(uint64_t, uint64_t, uint64_t);
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t (*v426)(uint64_t, uint64_t, uint64_t);
  uint64_t v427;
  uint64_t v428;
  void (*v429)(uint64_t, uint64_t);
  uint64_t (*v430)(uint64_t, uint64_t);
  id v431;
  Swift::String v432;
  Swift::String v433;
  Swift::String_optional v434;
  Swift::String v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t (*v452)(uint64_t, uint64_t, uint64_t);
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t (*v457)(uint64_t, uint64_t);
  uint64_t v458;
  void (*v459)(uint64_t, uint64_t);
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  _QWORD *v465;
  Class *v466;
  __n128 v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t (*v470)(uint64_t, _QWORD);
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  char *v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  char v481;
  uint64_t v482;
  _QWORD *v483;
  void *v484;
  Swift::String v485;
  void *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  void *v495;
  uint64_t v496;
  uint64_t (*v497)(uint64_t, _QWORD);
  uint64_t (*v498)(uint64_t, _QWORD);
  char *v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  _QWORD v530[2];
  char v531[8];
  uint64_t v532;
  char v533[8];
  uint64_t v534;
  char v535[8];
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  char v541[8];
  uint64_t v542;
  uint64_t (*v543)(uint64_t, uint64_t);
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  void (*v547)(_QWORD);
  uint64_t v548;
  void (*v549)(_QWORD);
  objc_class *v550;
  _QWORD *v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t (**v554)(uint64_t, uint64_t, uint64_t);
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  _QWORD *v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t *v563;
  uint64_t v564;
  _QWORD v565[2];
  void (*v566)(_QWORD, _QWORD);
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  char *v570;
  uint64_t v571;
  uint64_t v572;
  char v573[8];
  char v574[8];
  char v575[8];
  char v576[8];
  Class isa;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  Swift::String v586;
  Swift::String v587;
  Swift::String v588;
  Swift::String v589;

  v568 = a3;
  v508 = a2;
  v563 = a4;
  v5 = type metadata accessor for DetailCondition(0);
  sub_1000B43A4(v5, (uint64_t)v531);
  sub_1000BBFEC(v6);
  __chkstk_darwin(v7);
  sub_100088FDC();
  v9 = sub_1000987B4(v8);
  v10 = type metadata accessor for WeatherFormatScaling(v9);
  sub_1000B43A4(v10, (uint64_t)&v537);
  sub_1000BBFEC(v11);
  __chkstk_darwin(v12);
  sub_100088FDC();
  v14 = sub_1000987B4(v13);
  v15 = type metadata accessor for NSUnitLength.WeatherFormatUsage(v14);
  sub_1000B43A4(v15, (uint64_t)v535);
  sub_1000BBFEC(v16);
  __chkstk_darwin(v17);
  sub_100088FDC();
  v19 = sub_1000987B4(v18);
  v20 = type metadata accessor for NSUnitLength.BaseWeatherFormatStyle(v19);
  sub_1000B43A4(v20, (uint64_t)v541);
  sub_1000BBFEC(v21);
  __chkstk_darwin(v22);
  sub_100088FDC();
  sub_10009511C(v23);
  v24 = sub_1000BA294(&qword_100BCB0A8);
  sub_1000B43A4(v24, (uint64_t)&v539);
  sub_1000BBFEC(v25);
  __chkstk_darwin(v26);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v27);
  sub_100079F7C();
  v29 = sub_1000987B4(v28);
  v30 = type metadata accessor for UVIndex(v29);
  sub_1000B43A4(v30, (uint64_t)&v547);
  sub_1000BBFEC(v31);
  __chkstk_darwin(v32);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v33);
  sub_100079F7C();
  v35 = sub_1000987B4(v34);
  v36 = type metadata accessor for WeatherCondition(v35);
  sub_1000B43A4(v36, (uint64_t)&v561);
  sub_1000BBFEC(v37);
  __chkstk_darwin(v38);
  sub_100088FDC();
  v40 = sub_1000987B4(v39);
  v41 = type metadata accessor for WeatherConditionIcon(v40);
  sub_1000B43A4(v41, (uint64_t)&v563);
  sub_1000BBFEC(v42);
  __chkstk_darwin(v43);
  sub_100088FDC();
  v45 = sub_1000987B4(v44);
  v46 = type metadata accessor for Locale.Language(v45);
  sub_1000B43A4(v46, (uint64_t)&v559);
  sub_1000BBFEC(v47);
  __chkstk_darwin(v48);
  sub_100088FDC();
  v50 = sub_1000987B4(v49);
  v51 = type metadata accessor for Locale(v50);
  sub_1000B43A4(v51, (uint64_t)&v584);
  sub_1000BBFEC(v52);
  __chkstk_darwin(v53);
  sub_100088FDC();
  sub_10009511C(v54);
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_10009D98C();
  __chkstk_darwin(v55);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v56);
  sub_100079F7C();
  v58 = sub_1000987B4(v57);
  v59 = type metadata accessor for Date(v58);
  sub_1000B43A4(v59, (uint64_t)&v567);
  sub_1000BBFEC(v60);
  __chkstk_darwin(v61);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v62);
  sub_100079F7C();
  v64 = sub_1000987B4(v63);
  v65 = type metadata accessor for Precipitation(v64);
  sub_1000B43A4(v65, (uint64_t)&v554);
  sub_1000BBFEC(v66);
  __chkstk_darwin(v67);
  sub_100088FDC();
  v69 = sub_1000987B4(v68);
  v70 = type metadata accessor for ApparentPrecipitationIntensity(v69);
  sub_1000B43A4(v70, (uint64_t)v565);
  sub_1000BBFEC(v71);
  __chkstk_darwin(v72);
  sub_100088FDC();
  v74 = sub_1000987B4(v73);
  v75 = type metadata accessor for NSUnitPressure.BaseWeatherFormatStyle(v74);
  sub_1000B43A4(v75, (uint64_t)v574);
  sub_1000BBFEC(v76);
  __chkstk_darwin(v77);
  sub_100088FDC();
  sub_10009511C(v78);
  v79 = sub_1000BA294(&qword_100BCB948);
  sub_1000B43A4(v79, (uint64_t)v573);
  sub_1000BBFEC(v80);
  __chkstk_darwin(v81);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v82);
  sub_100079F7C();
  v84 = sub_1000987B4(v83);
  v85 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(v84);
  sub_1000B43A4(v85, (uint64_t)&v580);
  sub_1000BBFEC(v86);
  __chkstk_darwin(v87);
  sub_100088FDC();
  sub_10009511C(v88);
  v89 = sub_1000BA294(&qword_100BC4E68);
  sub_1000B43A4(v89, (uint64_t)&v582);
  sub_1000BBFEC(v90);
  __chkstk_darwin(v91);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v92);
  sub_1000BA30C();
  __chkstk_darwin(v93);
  sub_100079F7C();
  sub_10009511C(v94);
  v95 = sub_1000BA294(&qword_100BCB938);
  sub_1000B43A4(v95, (uint64_t)v530);
  sub_1000BBFEC(v96);
  __chkstk_darwin(v97);
  sub_100088FDC();
  v99 = sub_1000987B4(v98);
  v565[0] = type metadata accessor for WeatherFormatPlaceholder(v99);
  sub_1000BBFEC(*(_QWORD *)(v565[0] - 8));
  __chkstk_darwin(v100);
  sub_100088FDC();
  sub_10009511C(v101);
  sub_1000BA294(&qword_100BC3340);
  sub_10009D98C();
  __chkstk_darwin(v102);
  sub_100088FDC();
  v104 = sub_1000987B4(v103);
  v105 = type metadata accessor for NSUnitSpeed.WeatherFormatUsage(v104);
  sub_1000B43A4(v105, (uint64_t)v533);
  sub_1000BBFEC(v106);
  __chkstk_darwin(v107);
  sub_100088FDC();
  v109 = sub_1000987B4(v108);
  v110 = type metadata accessor for NSUnitSpeed.BaseWeatherFormatStyle(v109);
  sub_1000B43A4(v110, (uint64_t)&v534);
  sub_1000BBFEC(v111);
  __chkstk_darwin(v112);
  sub_100088FDC();
  v114 = sub_1000987B4(v113);
  v115 = type metadata accessor for Wind(v114);
  sub_1000B43A4(v115, (uint64_t)&v543);
  sub_1000BBFEC(v116);
  __chkstk_darwin(v117);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v118);
  sub_100079F7C();
  sub_10009511C(v119);
  sub_1000BA294(&qword_100BCE728);
  sub_10009D98C();
  __chkstk_darwin(v120);
  sub_100088FDC();
  sub_10009511C(v121);
  sub_1000BA294(&qword_100C062D8);
  sub_10009D98C();
  __chkstk_darwin(v122);
  sub_1000986FC();
  sub_1000BA30C();
  v124 = __chkstk_darwin(v123);
  v126 = (char *)&v589._object - v125;
  __chkstk_darwin(v124);
  v128 = (char *)&v589._object - v127;
  v129 = type metadata accessor for TimeZone(0);
  sub_1000B43A4(v129, (uint64_t)&v585);
  sub_1000BBFEC(v130);
  __chkstk_darwin(v131);
  sub_100098728();
  v134 = v133 - v132;
  v561 = type metadata accessor for ConditionUnits(0);
  sub_1000BBFEC(*(_QWORD *)(v561 - 8));
  __chkstk_darwin(v135);
  sub_100098728();
  v138 = v137 - v136;
  v571 = type metadata accessor for DetailChartCondition(0);
  v569 = *(_QWORD *)(v571 - 8);
  sub_10009D98C();
  v140 = __chkstk_darwin(v139);
  v142 = (char *)&v589._object - ((v141 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v140);
  v144 = (char *)&v589._object - v143;
  v562 = type metadata accessor for HourWeather(0);
  v564 = *(_QWORD *)(v562 - 8);
  sub_10009D98C();
  __chkstk_darwin(v145);
  sub_1000986FC();
  sub_1000BA30C();
  v147 = __chkstk_darwin(v146);
  v149 = (char *)&v589._object - v148;
  v150 = __chkstk_darwin(v147);
  v152 = (char *)&v589._object - v151;
  __chkstk_darwin(v150);
  sub_100079F7C();
  v572 = v153;
  v154 = WeatherValueCalculationContext.hourWeather.getter();
  v570 = v144;
  v155 = WeatherValueCalculationContext.chartCondition.getter(v154);
  v565[1] = v138;
  v156 = WeatherValueCalculationContext.units.getter(v155);
  v567 = v134;
  WeatherValueCalculationContext.timeZone.getter(v156);
  v157 = swift_allocObject(&unk_100B909A0, 32, 7);
  *(_QWORD *)(v157 + 16) = 0;
  *(_QWORD *)(v157 + 24) = 0;
  v566 = (void (*)(_QWORD, _QWORD))v157;
  sub_1007A8E5C(v568, (uint64_t)v128);
  v158 = type metadata accessor for DetailChartDataPoint(0);
  v159 = sub_1000C1818((uint64_t)v128);
  if (v160)
  {
    sub_100021A68((uint64_t)v128, &qword_100C062D8);
    v161 = 0;
    v163 = 1;
  }
  else
  {
    v161 = DetailChartDataPoint.value.getter(v159);
    v163 = v162 & 1;
    sub_1000CDE04(*(_QWORD *)(v158 - 8));
  }
  v164 = v569;
  v165 = v571;
  (*(void (**)(char *, char *, uint64_t))(v569 + 16))(v142, v570, v571);
  v166 = (*(uint64_t (**)(char *, uint64_t))(v164 + 88))(v142, v165);
  if (v166 == enum case for DetailChartCondition.humidity(_:))
  {
    if ((v163 & 1) != 0)
      HourWeather.humidity.getter();
    v168 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    sub_1000989C4();
    v169._object = (void *)0x8000000100A141A0;
    v169._countAndFlagsBits = 0xD000000000000022;
    v170._countAndFlagsBits = 0x6E696F7020776544;
    v170._object = (void *)0xED00004025203A74;
    v171 = NSLocalizedString(_:tableName:bundle:value:comment:)(v169, (Swift::String_optional)0, (NSBundle)v168, v170, v586);
    sub_1000CE034(v171._countAndFlagsBits, (uint64_t)v171._object);

    v172 = sub_1000BA294(&qword_100BC3C38);
    v173 = sub_1000D0970(v172);
    *(_OWORD *)(v173 + 16) = xmmword_10097CA50;
    sub_1000CE578();
    HourWeather.dewPoint.getter();
    sub_1000BD070();
    static WeatherFormatStyle<>.weather.getter(v174);
    sub_10009D820();
    v176 = *(_QWORD *)(v175 - 256);
    sub_1000BE9D4(v176, v177, v178);
    sub_1000BCF94();
    v179 = sub_1000B314C();
    v180 = sub_100051B90((unint64_t *)&qword_100BCB9D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle, (uint64_t)&protocol conformance descriptor for NSUnitTemperature.BaseWeatherFormatStyle);
    Measurement.formatted<A>(_:placeholder:unitManager:)(v163, v176, v179, &protocol witness table for UnitManager, v555, v553, v180);
    v548 = v181;
    sub_10009925C();
    sub_10007A170(v176, *(uint64_t (**)(uint64_t, uint64_t))(a1 + 8));
    v182 = sub_1000DB3AC();
    sub_100098748(v182, v183);
    sub_1000CDE04((uint64_t)v554);
    *(_QWORD *)(v173 + 56) = &type metadata for String;
    *(_QWORD *)(v173 + 64) = sub_1000B2E24();
    v554 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))sub_1000DA210((uint64_t)&isa);
    v551 = v184;
    sub_1000986C4();
    swift_bridgeObjectRelease(v173);
    sub_100079FE8(v185, (unint64_t *)&qword_100BC6A08, NSNumberFormatter_ptr);
    v186 = sub_1000BDB8C();
    v187.super.super.isa = sub_1000AE9E4().super.super.isa;
    p_isa = (Class *)sub_10009C07C((uint64_t)v187.super.super.isa, "stringFromNumber:");

    if (!p_isa)
    {
      sub_1000B2704();
      goto LABEL_20;
    }
    v187.super.super.isa = (Class)sub_1000DA14C();
    sub_1000FDC3C();
    sub_100095508();
    v189 = (void *)sub_1000CE654();
    v190._countAndFlagsBits = sub_1007A9950(v189);
    if (v190._object)
    {
      sub_1000C6F94(v190);
      sub_1000DC2BC();
      sub_1000986C4();
      if ((v186 & 1) == 0)
      {
        sub_1000BEFE4();
        goto LABEL_20;
      }
      isa = v187.super.super.isa;
      v578 = a1;
      sub_100095508();
      v191 = (void *)sub_1000CE654();
      v192 = sub_1007A9950(v191);
      if (v193)
      {
        p_isa = &isa;
        sub_1000C0B9C(v192, v193);
        v187.super.super.isa = (Class)StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v575, v573, 0, 0, 0, 1, &type metadata for String, &type metadata for String);
        v195 = v194;
        sub_1000CF770();
        swift_bridgeObjectRelease(v186);
        v196 = (void *)sub_1000CE654();
        v197 = sub_1007A9950(v196);
        sub_10009974C(v197);
        a1 = v195;
LABEL_20:
        v209 = v566;
        v210 = v567;
        sub_10009DCE4();
        v211 = v572;
        v215 = sub_1007A8EA4(v212, v213, v214, v572, v210);
        v217 = v216;
        sub_1000C58EC();
        sub_100094F10(v210, v218);
        sub_1000C3148();
        sub_1000DD3C8();
        sub_1000BDDC8();
        sub_1000E78FC(v211, v219);
        v220 = v209;
LABEL_21:
        swift_release(v220);
        sub_10011DBF0();
LABEL_22:
        v221 = (uint64_t)v554;
        v222 = v551;
LABEL_26:
        v245 = v563;
        *v563 = v215;
        v245[1] = (uint64_t)v217;
        v245[2] = (uint64_t)v187.super.super.isa;
        v245[3] = a1;
        v245[4] = (uint64_t)v209;
        v245[5] = v210;
        *((_OWORD *)v245 + 3) = 0u;
        *((_OWORD *)v245 + 4) = 0u;
        v245[10] = v558;
        v245[11] = (uint64_t)p_isa;
        v245[12] = 0;
        v245[13] = 0;
        v245[14] = v221;
        v245[15] = (uint64_t)v222;
        v245[16] = 0;
        v245[17] = 0;
        sub_10009990C();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_90;
  }
  if (v166 == enum case for DetailChartCondition.pressure(_:))
  {
    if ((v163 & 1) != 0)
    {
      sub_1000BD070();
      v167 = v572;
      ((void (*)(void))HourWeather.pressure.getter)();
    }
    else
    {
      sub_10011DD80();
      v223 = ConditionUnits.pressure.getter();
      v224 = sub_100079FE8(v223, &qword_100BCB9A8, NSUnitPressure_ptr);
      v163 = (uint64_t)v549;
      sub_1000D145C(v224, v224);
      v167 = v572;
    }
    v568 = sub_1007A8EA4((uint64_t)v566, (uint64_t)v559, v568, v167, v567);
    v559 = v225;
    v226 = v542;
    v227 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v548 + 16))(v542, v163, v544);
    v228 = static Set<>.value.getter(v227);
    v229 = (uint64_t)v547;
    sub_1000DF980((uint64_t)v547);
    sub_1000F4510();
    static WeatherFormatStyle<>.weather(_:locale:)(v228, v229);
    sub_1000986E8();
    sub_100021A68(v229, &qword_100BC3340);
    sub_1000C10E8(enum case for WeatherFormatPlaceholder.none(_:), (uint64_t)&v582);
    v554 = v230;
    v210 = v557;
    ((void (*)(uint64_t))v230)(v557);
    v553 = sub_1000BCF94();
    v231 = sub_1000B314C();
    v552 = sub_100051B90((unint64_t *)&qword_100BCB9D0, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitPressure.BaseWeatherFormatStyle, (uint64_t)&protocol conformance descriptor for NSUnitPressure.BaseWeatherFormatStyle);
    v232 = v545;
    v233 = sub_1000C1BEC();
    sub_1000DB11C(v233, v234);
    swift_release(v231);
    sub_1000DAD9C();
    sub_100099254(v210, v235);
    sub_1000988C4();
    v551 = v236;
    ((void (*)(uint64_t, uint64_t))v236)(v158, v232);
    v237 = sub_10009BD10(v226);
    v238 = HourWeather.pressure.getter(v237);
    v239 = static Set<>.unit.getter(v238);
    sub_1000DF980(v229);
    static WeatherFormatStyle<>.weather(_:locale:)(v239, v229);
    sub_1000986C4();
    sub_100021A68(v229, &qword_100BC3340);
    sub_100095288((uint64_t)&v581);
    v209 = (void (*)(_QWORD, _QWORD))sub_1000ED364();
    v558 = sub_1000C1BEC();
    p_isa = v240;
    sub_10009925C();
    v187.super.super.isa = v550;
    sub_100095288((uint64_t)&v583);
    sub_100095288((uint64_t)&v579);
    v217 = v559;
    sub_10009BD10(v226);
    sub_10009BD10((uint64_t)v549);
    v215 = v568;
    sub_1000C58EC();
    sub_100094F10(v241, v242);
    sub_1000C3148();
    sub_1000DD3C8();
    v243 = *(uint64_t (**)(uint64_t, _QWORD))(v564 + 8);
    v244 = v572;
    a1 = v546;
LABEL_25:
    sub_1000E78FC(v244, v243);
    sub_1000BCFBC();
    sub_1000D0EC0();
    goto LABEL_26;
  }
  if (v166 == enum case for DetailChartCondition.precipitationTotal(_:))
  {
    v198 = (Class *)v559;
    v199 = v559[3];
    v200 = v559[4];
    sub_1000DB418(v559, v199);
    v201 = dispatch thunk of PrecipitationCalculatorType.apparentPrecipitationIntensityForDisplay(from:)(a1, v199, v200);
    v550 = (objc_class *)ApparentPrecipitationIntensity.standaloneDescription.getter(v201);
    a1 = v202;
    if (ApparentPrecipitationIntensity.value.getter() <= 0.0)
    {
      v249 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      sub_1000989C4();
      v250._object = (void *)0x8000000100A140F0;
      v251._object = (void *)0x8000000100A14130;
      v252 = NSLocalizedString(_:tableName:bundle:value:comment:)(v250, (Swift::String_optional)0, (NSBundle)v249, v251, v587);
      sub_1000DAB38(v252._countAndFlagsBits, (uint64_t)v252._object);

    }
    else
    {
      v204 = v530[1];
      v205 = HourWeather.precipitation.getter(v203);
      v206 = Precipitation.standaloneDescription.getter(v205);
      sub_1000DAB38(v206, v207);
      sub_1000988C4();
      sub_100094F10(v204, v208);
    }
    v253 = v562;
    v254 = v567;
    sub_1007A8E5C(v568, (uint64_t)v126);
    v255 = sub_1000C1818((uint64_t)v126);
    if (v160)
    {
      sub_100021A68((uint64_t)v126, &qword_100C062D8);
      v296 = 1;
      v210 = v540;
      v295 = v536;
    }
    else
    {
      v295 = v536;
      DetailChartDataPoint.date.getter(v255);
      sub_1000D0858();
      v296 = 0;
      v210 = v540;
    }
    v297 = v538;
    _s7Weather24LocationCompositionStateOwst_0(v295, v296, 1, v538);
    v209 = (void (*)(_QWORD, _QWORD))v564;
    (*(void (**)(char *, uint64_t, uint64_t))(v564 + 16))(v152, v572, v253);
    v298 = sub_1000C1818(v295);
    if (v160)
    {
      HourWeather.date.getter(v298);
      v210 = v540;
      sub_1000DC52C();
      sub_100021A68(v295, (uint64_t *)&unk_100BD35A0);
      v299 = v537;
    }
    else
    {
      sub_1000DC52C();
      v299 = v537;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v537 + 32))(v210, v295, v297);
    }
    p_isa = v198;
    v215 = sub_1007A9210(v210, v254);
    v301 = v300;
    v302 = v297;
    v217 = v301;
    (*(void (**)(uint64_t, uint64_t))(v299 + 8))(v210, v302);
    sub_1000988C4();
    sub_100094F10(v546, v303);
    sub_1000C58EC();
    sub_100094F10(v254, v304);
    sub_1000C3148();
    sub_1000DD3C8();
    v209(v572, v253);
    sub_1000BCFBC();
    sub_10011DBF0();
    sub_1000BEFE4();
    v187.super.super.isa = v550;
    goto LABEL_22;
  }
  if (v166 == enum case for DetailChartCondition.temperature(_:))
  {
    v246 = v558;
    if ((v163 & 1) != 0)
    {
      sub_1000BD070();
      v247 = v572;
      HourWeather.temperature.getter(v248);
    }
    else
    {
      sub_10011DD80();
      v305 = ConditionUnits.temperature.getter();
      v306 = sub_100079FE8(v305, (unint64_t *)&qword_100BC5658, NSUnitTemperature_ptr);
      v163 = v530[0];
      sub_1000D145C(v306, v306);
      v247 = v572;
    }
    v307 = v555;
    v308 = v554[4](v539, v163, v555);
    v309 = v532;
    static Locale.current.getter(v308);
    sub_1000BD070();
    Locale.language.getter(v310);
    sub_1000988C4();
    v312 = sub_100098748(v309, v311);
    v313 = Locale.Language.prefersFullTemperatureScale.getter(v312);
    v314 = sub_1000DB3AC();
    v316 = sub_100094F10(v314, v315);
    if ((v313 & 1) != 0)
    {
      v317 = static Set<>.value.getter(v316);
      v318 = (uint64_t)v547;
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v547, 1, 1, v246);
      v319 = v552;
      static WeatherFormatStyle<>.weather(_:locale:)(v317, v318);
      sub_1000986E8();
      sub_100021A68(v318, &qword_100BC3340);
      sub_1000C10E8(enum case for WeatherFormatPlaceholder.none(_:), (uint64_t)&isa);
      v549 = v320;
      v321 = v557;
      v322 = v565[0];
      v320(v557);
      v545 = sub_1000BCF94();
      v323 = v307;
      v324 = sub_1000B314C();
      v544 = sub_100051B90((unint64_t *)&qword_100BCB9D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle, (uint64_t)&protocol conformance descriptor for NSUnitTemperature.BaseWeatherFormatStyle);
      v325 = v319;
      v326 = v553;
      v327 = sub_1000C1BEC();
      sub_1000DB11C(v327, v328);
      swift_release(v324);
      sub_1000DAD9C();
      v329(v321, v322);
      v330 = v551[1];
      v331 = v325;
      v332 = ((uint64_t (*)(uint64_t, uint64_t))v330)(v325, v326);
      v333 = static Set<>.unit.getter(v332);
      sub_1000DF980(v318);
      static WeatherFormatStyle<>.weather(_:locale:)(v333, v318);
      sub_1000986C4();
      sub_100021A68(v318, &qword_100BC3340);
      sub_100095288((uint64_t)&v578);
      v334 = sub_1000ED364();
      v209 = (void (*)(_QWORD, _QWORD))Measurement.formatted<A>(_:placeholder:unitManager:)(v325, v321, v334, &protocol witness table for UnitManager, v323, v326, v544);
      v210 = v335;
      swift_release(v334);
      v187.super.super.isa = v550;
      sub_100095288((uint64_t)&v583);
      ((void (*)(uint64_t, uint64_t))v330)(v331, v326);
      v247 = v572;
    }
    else
    {
      v340 = v552;
      static WeatherFormatStyle<>.weather.getter(v316);
      v330 = v556;
      v210 = v557;
      sub_100089084(v557, enum case for WeatherFormatPlaceholder.none(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v556 + 104));
      sub_1000BCF94();
      v209 = (void (*)(_QWORD, _QWORD))sub_1000B314C();
      sub_100051B90((unint64_t *)&qword_100BCB9D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle, (uint64_t)&protocol conformance descriptor for NSUnitTemperature.BaseWeatherFormatStyle);
      v321 = v553;
      v187.super.super.isa = (Class)sub_1000C1BEC();
      v546 = v341;
      sub_10009925C();
      sub_100099254(v210, *(uint64_t (**)(uint64_t, uint64_t))(v330 + 8));
      sub_1000BE774(v340, (uint64_t (*)(uint64_t, uint64_t))v551[1]);
      sub_10011DBF0();
    }
    v343 = (uint64_t)v566;
    v342 = v567;
    v568 = sub_1007A8EA4((uint64_t)v566, (uint64_t)v559, v568, v247, v567);
    v345 = v344;
    sub_1000CE578();
    v347 = HourWeather.condition.getter(v346);
    HourWeather.isDaylight.getter(v347);
    sub_1000F4510();
    sub_1000BF2B4(v348);
    v349 = sub_100094F10(v321, *(uint64_t (**)(uint64_t, _QWORD))(v534 + 8));
    p_isa = (Class *)v330;
    v350 = WeatherConditionIcon.name.getter(v349);
    sub_1000C2334(v350);
    v351 = v330;
    v217 = v345;
    sub_100094F10(v351, v352);
    sub_1000988C4();
    sub_100094F10(v539, v353);
    sub_1000C58EC();
    sub_100094F10(v342, v354);
    sub_1000C3148();
    sub_1000DD3C8();
    sub_1000BDDC8();
    v355 = v247;
    v215 = v568;
    sub_1000E78FC(v355, v356);
    swift_release(v343);
    v221 = 0;
    v222 = 0;
    a1 = v546;
    goto LABEL_26;
  }
  v256 = v558;
  if (v166 == enum case for DetailChartCondition.temperatureFeelsLike(_:))
  {
    v257 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    sub_1000989C4();
    sub_1000D9458();
    v258._countAndFlagsBits = 0x203A6C6175746341;
    v258._object = (void *)0xEA00000000004025;
    v261 = NSLocalizedString(_:tableName:bundle:value:comment:)(v259, v260, (NSBundle)v257, v258, v588);
    sub_1000CE034(v261._countAndFlagsBits, (uint64_t)v261._object);

    v262 = sub_1000BA294(&qword_100BC3C38);
    v263 = sub_1000D0970(v262);
    *(_OWORD *)(v263 + 16) = xmmword_10097CA50;
    v264 = (uint64_t)v550;
    HourWeather.temperature.getter(v263);
    sub_1000CE578();
    static WeatherFormatStyle<>.weather.getter(v265);
    sub_1000C10E8(enum case for WeatherFormatPlaceholder.none(_:), (uint64_t)&isa);
    v547 = v266;
    v267 = v557;
    v268 = v565[0];
    v266(v557);
    v546 = sub_1000BCF94();
    v269 = sub_1000B314C();
    v545 = sub_100051B90((unint64_t *)&qword_100BCB9D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle, (uint64_t)&protocol conformance descriptor for NSUnitTemperature.BaseWeatherFormatStyle);
    v270 = v555;
    v210 = v553;
    Measurement.formatted<A>(_:placeholder:unitManager:)(v164, v267, v269, &protocol witness table for UnitManager, v555, v553, v545);
    v542 = v271;
    swift_release(v269);
    sub_1000DAD9C();
    v272(v267, v268);
    sub_1000988C4();
    v544 = (uint64_t)v273;
    sub_100098748(v164, v273);
    sub_1000988C4();
    v543 = v274;
    v275 = v270;
    sub_10007A170(v264, v274);
    *(_QWORD *)(v263 + 56) = &type metadata for String;
    *(_QWORD *)(v263 + 64) = sub_1000B2E24();
    v554 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))sub_1000DA210((uint64_t)&v571);
    v551 = v276;
    sub_1000986C4();
    v277 = swift_bridgeObjectRelease(v263);
    v278 = v572;
    v279 = HourWeather.apparentTemperature.getter(v277);
    static WeatherFormatStyle<>.weather.getter(v279);
    sub_100095288((uint64_t)v576);
    v280 = sub_1000ED364();
    v187.super.super.isa = (Class)Measurement.formatted<A>(_:placeholder:unitManager:)(v164, v267, v280, &protocol witness table for UnitManager, v275, v210, v545);
    v282 = v281;
    sub_10009925C();
    sub_100095288((uint64_t)&v583);
    sub_100095288((uint64_t)v573);
    sub_100095288((uint64_t)&v572);
    a1 = v282;
    v209 = v566;
    v283 = v567;
    sub_10009DCE4();
    v215 = sub_1000BE808(v284, v285, v286, v278);
    v217 = v287;
    sub_1000CE578();
    v289 = HourWeather.condition.getter(v288);
    HourWeather.isDaylight.getter(v289);
    sub_1000BEC54();
    sub_1000BF2B4(v290);
    v291 = sub_100094F10(v164, *(uint64_t (**)(uint64_t, _QWORD))(v534 + 8));
    p_isa = (Class *)v210;
    v292 = WeatherConditionIcon.name.getter(v291);
    sub_1000C2334(v292);
    sub_100094F10(v210, v293);
    sub_100094F10(v283, *(uint64_t (**)(uint64_t, _QWORD))(v560 + 8));
    sub_1000C3148();
    sub_1000DD3C8();
    sub_1000BDDC8();
    sub_1000E78FC(v278, v294);
    sub_10009925C();
    sub_10011DBF0();
    goto LABEL_26;
  }
  if (v166 == enum case for DetailChartCondition.uvIndex(_:))
  {
    sub_1000F4510();
    if ((v163 & 1) != 0)
    {
      v338 = v572;
      v339 = HourWeather.uvIndex.getter(v336);
    }
    else
    {
      v339 = sub_10056C038(v337);
      v338 = v572;
    }
    v359 = v559;
    v210 = v526;
    v360 = v524;
    sub_100079FE8(v339, (unint64_t *)&qword_100BC6A08, NSNumberFormatter_ptr);
    v361 = (void *)static NSNumberFormatter.digits.getter();
    v362 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", UVIndex.value.getter(v361));
    v363 = objc_msgSend(v361, "stringFromNumber:", v362);

    if (v363)
    {
      v550 = (objc_class *)static String._unconditionallyBridgeFromObjectiveC(_:)(v363);
      v365 = v364;

    }
    else
    {
      v550 = 0;
      v365 = 0;
    }
    v373 = v525;
    v374 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v525 + 16))(v360, v158, v210);
    v375 = v365;
    if (!v365)
    {
      isa = (Class)UVIndex.value.getter(v374);
      v550 = (objc_class *)dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int);
      v375 = v376;
    }
    v209 = *(void (**)(_QWORD, _QWORD))(v373 + 8);
    sub_10009554C(v360);
    v378 = (uint64_t)v566;
    v377 = v567;
    v379 = v338;
    v215 = sub_1000BE808((uint64_t)v566, (uint64_t)v359, v568, v338);
    v381 = v380;
    p_isa = (Class *)v158;
    v382 = UVIndex.category.getter(v215);
    v383 = UVIndex.ExposureCategory.localizedString.getter(v382);
    sub_10009974C(v383);
    sub_10009554C(v158);
    sub_100094F10(v377, *(uint64_t (**)(uint64_t, _QWORD))(v560 + 8));
    sub_1000C3148();
    sub_1000DD3C8();
    sub_1000BDDC8();
    sub_1000E78FC(v379, v384);
    swift_release(v378);
    sub_1000D0EC0();
    a1 = v375;
    v187.super.super.isa = v550;
    v217 = v381;
    goto LABEL_26;
  }
  LODWORD(v555) = v163;
  v357 = v567;
  if (v166 == enum case for DetailChartCondition.visibility(_:))
  {
    if ((v555 & 1) != 0)
    {
      sub_1000BEC54();
      v358 = v572;
      ((void (*)(void))HourWeather.visibility.getter)();
    }
    else
    {
      sub_10011DD80();
      v385 = ConditionUnits.visibility.getter();
      sub_100079FE8(v385, (unint64_t *)&qword_100BCB0D8, NSUnitLength_ptr);
      sub_1000BEC54();
      sub_1000D145C(v386, v387);
      v358 = v572;
    }
    v568 = sub_1007A8EA4((uint64_t)v566, (uint64_t)v559, v568, v358, v357);
    v559 = v388;
    v389 = Measurement<>.formattedAndClampedVisibility.getter();
    v391 = sub_1000DB11C(v389, v390);
    v392 = v358;
    v393 = HourWeather.visibility.getter(v391);
    v394 = static Set<>.unit.getter(v393);
    v395 = v517;
    v396 = v515;
    sub_1000BE9D4(v515, enum case for NSUnitLength.WeatherFormatUsage.visibility(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v517 + 104));
    sub_1000DBD78();
    v397 = v518;
    v398 = v516;
    sub_100089084(v516, enum case for WeatherFormatScaling.automatic(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v518 + 104));
    sub_1000BEC54();
    static WeatherFormatStyle<>.weather(_:usage:scaling:trimLeadingZeroes:locale:)(v394, v396, v398, 2, v392);
    sub_1000986E8();
    v399 = sub_100099254(v398, *(uint64_t (**)(uint64_t, uint64_t))(v397 + 8));
    sub_1000B31F8(v399, &qword_100BC3340);
    sub_10007A170(v396, *(uint64_t (**)(uint64_t, uint64_t))(v395 + 8));
    v400 = v556;
    v401 = v557;
    v402 = v565[0];
    sub_1000BE9D4(v557, enum case for WeatherFormatPlaceholder.none(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v556 + 104));
    sub_1000BCF94();
    v403 = sub_1000B314C();
    v404 = sub_100051B90((unint64_t *)&qword_100BCB0B8, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitLength.BaseWeatherFormatStyle, (uint64_t)&protocol conformance descriptor for NSUnitLength.BaseWeatherFormatStyle);
    v405 = v126;
    v210 = v520;
    v406 = v528;
    v558 = Measurement.formatted<A>(_:placeholder:unitManager:)(v405, v401, v403, &protocol witness table for UnitManager, v520, v521, v404);
    p_isa = v407;
    sub_10009925C();
    v408 = *(void (**)(uint64_t, uint64_t))(v400 + 8);
    v409 = v401;
    a1 = v546;
    v217 = v559;
    v187.super.super.isa = v550;
    v215 = v568;
    v408(v409, v402);
    sub_1000988C4();
    sub_1000BE774(v529, v410);
    v209 = *(void (**)(_QWORD, _QWORD))(v519 + 8);
    sub_10009554C(v406);
    sub_10009554C(v527);
    sub_1000C58EC();
    sub_100094F10(v567, v411);
    sub_1000C3148();
    sub_1000DD3C8();
    v243 = *(uint64_t (**)(uint64_t, _QWORD))(v564 + 8);
    v244 = v572;
    goto LABEL_25;
  }
  if (v166 == enum case for DetailChartCondition.wind(_:))
  {
    sub_1000BD070();
    v366 = ((uint64_t (*)(void))HourWeather.wind.getter)();
    v367 = v502;
    Wind.gust.getter(v366);
    v368 = *(void (**)(uint64_t, uint64_t))(v501 + 8);
    v368(v163, v523);
    v369 = v504;
    v370 = _s7Weather24LocationCompositionStateOwet_0(v367, 1, v504);
    v553 = (uint64_t)v368;
    if (v370 == 1)
    {
      v371 = sub_100021A68(v367, &qword_100BCE728);
      v554 = 0;
      v551 = 0;
    }
    else
    {
      v417 = v510;
      v418 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v510 + 104);
      v552 = v161;
      v419 = v509;
      sub_100089084(v509, enum case for NSUnitSpeed.WeatherFormatUsage.windGust(_:), v418);
      v420 = sub_1000DBD78();
      static Set<>.full.getter(v420);
      sub_1000F4510();
      static WeatherFormatStyle<>.weather(_:usage:locale:)(v421, v419, v368);
      sub_1000986E8();
      sub_1000B31F8(v422, &qword_100BC3340);
      sub_100099254(v419, *(uint64_t (**)(uint64_t, uint64_t))(v417 + 8));
      sub_10009D820();
      v424 = *(_QWORD *)(v423 - 256);
      sub_10008908C(v424, v425, v426);
      sub_1000BCF94();
      v427 = sub_1000B314C();
      sub_100051B90(&qword_100BCE748, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitSpeed.BaseWeatherFormatStyle, (uint64_t)&protocol conformance descriptor for NSUnitSpeed.BaseWeatherFormatStyle);
      v428 = sub_1000C1BEC();
      v368 = v429;
      swift_release(v427);
      v430 = *(uint64_t (**)(uint64_t, uint64_t))(v256 + 8);
      v256 = v558;
      sub_100098748(v424, v430);
      sub_1000BE774(v158, *(uint64_t (**)(uint64_t, uint64_t))(v511 + 8));
      (*(void (**)(uint64_t, uint64_t))(v513 + 8))(v367, v369);
      v431 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      sub_1000989C4();
      sub_1000D9458();
      v432._countAndFlagsBits = 0x25203A7374737547;
      v432._object = (void *)0xE900000000000040;
      v589._countAndFlagsBits = 0xD000000000000022;
      v435 = NSLocalizedString(_:tableName:bundle:value:comment:)(v433, v434, (NSBundle)v431, v432, v589);

      v436 = sub_1000BA294(&qword_100BC3C38);
      v437 = sub_1000D0970(v436);
      *(_OWORD *)(v437 + 16) = xmmword_10097CA50;
      *(_QWORD *)(v437 + 56) = &type metadata for String;
      *(_QWORD *)(v437 + 64) = sub_1000B2E24();
      *(_QWORD *)(v437 + 32) = v428;
      *(_QWORD *)(v437 + 40) = v368;
      v438 = static String.localizedStringWithFormat(_:_:)(v435._countAndFlagsBits, v435._object, v437);
      sub_1000DAB38(v438, v439);
      swift_bridgeObjectRelease(v435._object);
      v372 = swift_bridgeObjectRelease(v437);
    }
    v440 = v514;
    if ((v555 & 1) != 0)
    {
      v441 = HourWeather.wind.getter(v371, v372);
      v368 = (void (*)(uint64_t, uint64_t))v440;
      Wind.speed.getter(v441);
      v442 = sub_100095288((uint64_t)&v580);
    }
    else
    {
      sub_10011DD80();
      v443 = ConditionUnits.windSpeed.getter();
      v444 = sub_100079FE8(v443, (unint64_t *)&qword_100BCB990, NSUnitSpeed_ptr);
      v442 = sub_1000D145C(v444, v444);
    }
    v445 = static Set<>.value.getter(v442);
    v446 = v510;
    v447 = v509;
    sub_10008908C(v509, enum case for NSUnitSpeed.WeatherFormatUsage.windSpeed(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v510 + 104));
    sub_1000DBD78();
    sub_1000CE578();
    static WeatherFormatStyle<>.weather(_:usage:locale:)(v445, v447, v368);
    sub_1000986E8();
    sub_1000B31F8(v448, &qword_100BC3340);
    sub_100098748(v447, *(uint64_t (**)(uint64_t, uint64_t))(v446 + 8));
    sub_10009D820();
    v450 = *(_QWORD *)(v449 - 256);
    sub_10008908C(v450, v451, v452);
    sub_1000BCF94();
    v453 = sub_1000B314C();
    v454 = sub_100051B90(&qword_100BCE748, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitSpeed.BaseWeatherFormatStyle, (uint64_t)&protocol conformance descriptor for NSUnitSpeed.BaseWeatherFormatStyle);
    v187.super.super.isa = (Class)Measurement.formatted<A>(_:placeholder:unitManager:)(v440, v450, v453, &protocol witness table for UnitManager, v369, v512, v454);
    v456 = v455;
    sub_10009925C();
    v457 = *(uint64_t (**)(uint64_t, uint64_t))(v256 + 8);
    a1 = v456;
    sub_100098748(v450, v457);
    sub_10007A170(v440, *(uint64_t (**)(uint64_t, uint64_t))(v511 + 8));
    v458 = sub_1000DB3AC();
    v459(v458, v369);
    v210 = (uint64_t)v566;
    v460 = v567;
    sub_10009DCE4();
    v461 = v572;
    v215 = sub_1000BE808(v462, v463, v464, v572);
    v217 = v465;
    v466 = (Class *)v514;
    v468 = HourWeather.wind.getter(v215, v467);
    p_isa = v466;
    v209 = (void (*)(_QWORD, _QWORD))Wind.compassDirection.getter(v468);
    sub_100095288((uint64_t)&v580);
    v469 = Wind.CompassDirection.abbreviation.getter(v209);
    sub_10009974C(v469);
    sub_100094F10(v460, *(uint64_t (**)(uint64_t, _QWORD))(v560 + 8));
    sub_1000C3148();
    sub_1000DD3C8();
    sub_1000BDDC8();
    sub_1000E78FC(v461, v470);
    v220 = (void (*)(_QWORD, _QWORD))v210;
    goto LABEL_21;
  }
  if (v166 == enum case for DetailChartCondition.chanceOfRain(_:))
  {
    v412 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v564 + 16);
    v413 = v562;
    v414 = v412(v149, v572, v562);
    v415 = v503;
    v416 = v500;
    if ((v555 & 1) != 0)
      HourWeather.chanceOfRain.getter(v414);
    v471 = *(_QWORD *)(v564 + 8);
    sub_1000C6CAC();
    sub_1007A8E5C(v568, v416);
    v472 = sub_1000C1818(v416);
    if (v160)
    {
      sub_100021A68(v416, &qword_100C062D8);
      v473 = 1;
    }
    else
    {
      DetailChartDataPoint.date.getter(v472);
      sub_1000D0858();
      v473 = 0;
    }
    v474 = v572;
    v475 = v522;
    v476 = v499;
    v477 = v538;
    _s7Weather24LocationCompositionStateOwst_0(v415, v473, 1, v538);
    v412(v476, v474, v413);
    v478 = _s7Weather24LocationCompositionStateOwet_0(v415, 1, v477);
    v565[0] = v471;
    if ((_DWORD)v478 == 1)
    {
      HourWeather.date.getter(v478);
      sub_1000C6CAC();
      sub_100021A68(v415, (uint64_t *)&unk_100BD35A0);
    }
    else
    {
      sub_1000C6CAC();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v537 + 32))(v475, v415, v477);
    }
    v479 = v506;
    a1 = v505;
    v480 = v507;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v506 + 104))(v505, enum case for DetailCondition.precipitationTotal(_:), v507);
    v481 = static DetailCondition.== infix(_:_:)(v508);
    (*(void (**)(uint64_t, uint64_t))(v479 + 8))(a1, v480);
    if ((v481 & 1) != 0)
      v482 = sub_1007A9210(v475, v357);
    else
      v482 = sub_1007A914C();
    v559 = v483;
    v568 = v482;
    v209 = (void (*)(_QWORD, _QWORD))sub_100079FE8(v482, (unint64_t *)&qword_100BC6A08, NSNumberFormatter_ptr);
    v210 = sub_1000BDB8C();
    v187.super.super.isa = sub_1000AE9E4().super.super.isa;
    p_isa = (Class *)sub_10009C07C((uint64_t)v187.super.super.isa, "stringFromNumber:");

    if (p_isa)
    {
      v187.super.super.isa = (Class)sub_1000DA14C();
      sub_1000FDC3C();
      sub_100095508();
      v484 = (void *)sub_1000EFAAC();
      v485._countAndFlagsBits = sub_1007A9950(v484);
      if (!v485._object)
      {
LABEL_90:
        __break(1u);
        goto LABEL_91;
      }
      sub_1000C6F94(v485);
      sub_1000DC2BC();
      sub_1000986C4();
      if ((v210 & 1) != 0)
      {
        isa = v187.super.super.isa;
        v578 = a1;
        sub_100095508();
        v486 = (void *)sub_1000EFAAC();
        v487 = sub_1007A9950(v486);
        if (!v488)
        {
LABEL_91:
          __break(1u);
          goto LABEL_92;
        }
        sub_1000C0B9C(v487, v488);
        p_isa = &isa;
        v187.super.super.isa = (Class)sub_1001103CC((uint64_t)v575, (uint64_t)v573, v489, v490, v491, v492, (uint64_t)&type metadata for String);
        v494 = v493;
        sub_1000CF770();
        swift_bridgeObjectRelease(v210);
        v495 = (void *)sub_1000EFAAC();
        v496 = sub_1007A9950(v495);
        sub_10009974C(v496);
        a1 = v494;
      }
      else
      {
        sub_1000BEFE4();
      }
    }
    else
    {
      sub_1000B2704();
    }
    sub_1000988C4();
    sub_100094F10(v522, v497);
    sub_1000C58EC();
    sub_100094F10(v357, v498);
    sub_1000C3148();
    sub_1000DD3C8();
    ((void (*)(uint64_t, uint64_t))v565[0])(v572, v413);
    sub_1000BCFBC();
    sub_1000D0EC0();
    v215 = v568;
    v217 = v559;
    goto LABEL_26;
  }
LABEL_92:
  _diagnoseUnexpectedEnumCase<A>(type:)(v571, v571);
  __break(1u);
}

uint64_t sub_1007A8E38()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1007A8E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100C062D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1007A8EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[24];

  v32 = a4;
  v33 = a5;
  v31 = a3;
  v7 = type metadata accessor for HourWeather(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000BA294(&qword_100C062D8);
  __chkstk_darwin(v11);
  v13 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v14);
  v16 = (char *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(a1 + 24);
  if (v21)
  {
    v22 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v30[0] = a1 + 16;
    v30[1] = a2;
    sub_1007A8E5C(v31, (uint64_t)v13);
    v23 = type metadata accessor for DetailChartDataPoint(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v23) == 1)
    {
      sub_100021A68((uint64_t)v13, &qword_100C062D8);
      v24 = 1;
    }
    else
    {
      DetailChartDataPoint.date.getter();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v13, v23);
      v24 = 0;
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v16, v24, 1, v17);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v32, v7);
    v25 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v17);
    if ((_DWORD)v25 == 1)
    {
      HourWeather.date.getter(v25);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      sub_100021A68((uint64_t)v16, (uint64_t *)&unk_100BD35A0);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v16, v17);
    }
    v22 = sub_1007A914C();
    v27 = v26;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    swift_beginAccess(v30[0], v34, 1, 0);
    v28 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v22;
    *(_QWORD *)(a1 + 24) = v27;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRelease(v28);
    v21 = 0;
  }
  swift_bridgeObjectRetain(v21);
  return v22;
}

uint64_t sub_1007A914C()
{
  void *v0;
  Class isa;
  Class v2;
  id v3;
  uint64_t v4;

  if (qword_100BC1E80 != -1)
    swift_once(&qword_100BC1E80, sub_10020CE30);
  v0 = (void *)qword_100CAE4D8;
  isa = TimeZone._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v0, "setTimeZone:", isa);

  v2 = Date._bridgeToObjectiveC()().super.isa;
  v3 = objc_msgSend(v0, "stringFromDate:", v2);

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  return v4;
}

uint64_t sub_1007A9210(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  __n128 v31;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;

  v3 = type metadata accessor for Date.FormatStyle(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&object - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Calendar(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&object - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v35 = *(_QWORD *)(v11 - 8);
  v36 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&object - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.currentCalendar(with:)(a2);
  Date.wc_addHours(_:calendar:)(1, v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v14 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v37._countAndFlagsBits = 0xD000000000000034;
  v37._object = (void *)0x8000000100A14280;
  v15._object = (void *)0x8000000100A14250;
  v15._countAndFlagsBits = 0xD000000000000028;
  v16._countAndFlagsBits = 0x25209380E2204025;
  v16._object = (void *)0xA900000000000040;
  v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)v14, v16, v37);
  object = v17._object;
  countAndFlagsBits = v17._countAndFlagsBits;

  v18 = sub_1000BA294(&qword_100BC3C38);
  v19 = swift_allocObject(v18, 192, 7);
  *(_OWORD *)(v19 + 16) = xmmword_1009891D0;
  sub_1007A9760();
  v20 = Date.hour(timeZone:formatStyle:)(a2, v6);
  v21 = *(void (**)(char *, uint64_t))(v4 + 8);
  v21(v6, v3);
  *(_QWORD *)(v19 + 56) = &type metadata for Int;
  *(_QWORD *)(v19 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v19 + 32) = v20;
  sub_1007A9760();
  v22 = Date.hour(timeZone:formatStyle:)(a2, v6);
  v21(v6, v3);
  *(_QWORD *)(v19 + 96) = &type metadata for Int;
  *(_QWORD *)(v19 + 104) = &protocol witness table for Int;
  *(_QWORD *)(v19 + 72) = v22;
  v23 = Date.formattedHoursForText(timeZone:)(a2);
  v25 = v24;
  *(_QWORD *)(v19 + 136) = &type metadata for String;
  v26 = sub_1000B2E24();
  *(_QWORD *)(v19 + 144) = v26;
  *(_QWORD *)(v19 + 112) = v23;
  *(_QWORD *)(v19 + 120) = v25;
  v27 = Date.formattedHoursForText(timeZone:)(a2);
  *(_QWORD *)(v19 + 176) = &type metadata for String;
  *(_QWORD *)(v19 + 184) = v26;
  *(_QWORD *)(v19 + 152) = v27;
  *(_QWORD *)(v19 + 160) = v28;
  v29 = object;
  v30 = static String.localizedStringWithFormat(_:_:)(countAndFlagsBits, object, v19);
  swift_bridgeObjectRelease(v29);
  v31 = swift_bridgeObjectRelease(v19);
  (*(void (**)(char *, uint64_t, __n128))(v35 + 8))(v13, v36, v31);
  return v30;
}

void sub_1007A94E0(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  Class isa;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Bool v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  _QWORD v44[4];

  v6 = type metadata accessor for DetailCondition(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100098728();
  v10 = v9 - v8;
  v42 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  sub_100098728();
  v14 = v13 - v12;
  InterpolationElement.value.getter();
  InterpolationElement.date.getter();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DetailCondition.precipitationTotal(_:), v6);
  v15 = static DetailCondition.== infix(_:_:)(a1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  if ((v15 & 1) != 0)
    v16 = sub_1007A9210(v14, a2);
  else
    v16 = sub_1007A914C();
  v18 = v16;
  v19 = v17;
  sub_100079FE8(v16, (unint64_t *)&qword_100BC6A08, NSNumberFormatter_ptr);
  v20 = (void *)sub_1000BDB8C();
  isa = sub_1000AE9E4().super.super.isa;
  v22 = objc_msgSend(v20, "stringFromNumber:", isa);

  if (!v22)
  {
    v40 = 0;
    v23 = 0;
    v20 = 0;
    goto LABEL_11;
  }
  v23 = sub_1000DA14C();
  sub_1000FDC3C();
  sub_100095508();
  v24 = (void *)sub_1000FC584();
  v25 = sub_1007A9950(v24);
  if (v26)
  {
    v27 = String.hasSuffix(_:)(*(Swift::String *)&v25);
    swift_bridgeObjectRelease(v20);
    sub_1000986C4();
    if (!v27)
    {
      v22 = 0;
      v40 = 0;
      goto LABEL_11;
    }
    v41 = v18;
    v44[2] = v23;
    v44[3] = v20;
    sub_100095508();
    v28 = (void *)sub_1000FC584();
    v29 = sub_1007A9950(v28);
    if (v30)
    {
      v31 = v30;
      v44[0] = v29;
      v44[1] = v30;
      v43[0] = 0;
      v43[1] = 0xE000000000000000;
      sub_100114EF8();
      v23 = sub_1001103CC((uint64_t)v44, (uint64_t)v43, v32, v33, v34, v35, (uint64_t)&type metadata for String);
      v37 = v36;
      sub_1000CF770();
      swift_bridgeObjectRelease(v31);
      v38 = (void *)sub_1000FC584();
      v22 = (id)sub_1007A9950(v38);
      v40 = v39;
      v20 = v37;
      v18 = v41;
LABEL_11:
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v14, v42);
      *(_QWORD *)a3 = v18;
      *(_QWORD *)(a3 + 8) = v19;
      *(_QWORD *)(a3 + 16) = v23;
      *(_QWORD *)(a3 + 24) = v20;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_QWORD *)(a3 + 80) = v22;
      *(_QWORD *)(a3 + 88) = v40;
      *(_OWORD *)(a3 + 96) = 0u;
      *(_OWORD *)(a3 + 112) = 0u;
      *(_OWORD *)(a3 + 128) = 0u;
      sub_10009990C();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1007A9760()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v0 = type metadata accessor for FormatStyleCapitalizationContext(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v25 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for TimeZone(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Calendar(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000BA294(&qword_100BDF358);
  __chkstk_darwin(v12);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000BA294(&qword_100BDF360);
  __chkstk_darwin(v15);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Date.FormatStyle.DateStyle(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v17, 1, 1, v18);
  v19 = type metadata accessor for Date.FormatStyle.TimeStyle(0);
  v20 = _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 1, 1, v19);
  v21 = static Locale.autoupdatingCurrent.getter(v20);
  v22 = static Calendar.autoupdatingCurrent.getter(v21);
  v23 = static TimeZone.autoupdatingCurrent.getter(v22);
  static FormatStyleCapitalizationContext.unknown.getter(v23);
  return Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)(v17, v14, v11, v8, v5, v2);
}

uint64_t sub_1007A9950(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, "percentSymbol");

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

ValueMetadata *type metadata accessor for LollipopDataFactory()
{
  return &type metadata for LollipopDataFactory;
}

uint64_t sub_1007A99CC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v67 = a3;
  type metadata accessor for LocationComponentHeaderViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100088FDC();
  v66 = v6;
  v64 = type metadata accessor for SevereAlertComponentViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000BA294(&qword_100C06398);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100088FDC();
  v57 = v11;
  v12 = type metadata accessor for WeatherAlert.Prominence(0);
  v13 = *(_QWORD *)(v12 - 8);
  v69 = v12;
  v70 = v13;
  v14 = __chkstk_darwin(v12);
  v55 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v68 = (char *)&v55 - v16;
  v17 = type metadata accessor for SevereAlertComponentStringsBuilder.SevereAlertSummary(0);
  v61 = *(_QWORD *)(v17 - 8);
  v62 = v17;
  __chkstk_darwin(v17);
  v19 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BA294(&qword_100BDA950);
  sub_1000B42B0();
  __chkstk_darwin(v20);
  sub_100088FDC();
  v63 = v21;
  sub_1007A9E2C(a2, v21);
  v22 = *a2;
  v23 = SevereAlertComponentStringsBuilder.title(for:characterLimit:)(*(Swift::OpaquePointer *)a2, 25);
  object = v23._object;
  countAndFlagsBits = v23._countAndFlagsBits;
  v71 = v22;
  swift_bridgeObjectRetain(v22);
  v24 = sub_1000BA294(&qword_100BD4FC0);
  v25 = sub_1007AA838();
  v26 = Sequence.unique<A>(by:)(sub_1007AA048, 0, v24, &type metadata for String, v25, &protocol witness table for String);
  swift_bridgeObjectRelease(v22);
  v27 = *(int *)(type metadata accessor for SevereAlertComponent(0) + 24);
  v65 = a2;
  v28 = (char *)a2 + v27;
  v29 = SevereAlertComponentStringsBuilder.descriptions(for:location:currentDate:bulletString:)(v26, a1, (char *)a2 + v27, 0);
  v56 = SevereAlertComponentStringsBuilder.descriptions(for:location:currentDate:bulletString:)(v26, a1, v28, 1);
  v58 = v19;
  SevereAlertComponentStringsBuilder.summary(alertDescriptions:events:location:currentDate:)(v29, v26, a1, v28);
  v30 = v57;
  swift_bridgeObjectRelease(v29);
  sub_1002F70F0(v22, v30);
  v31 = type metadata accessor for WeatherAlert(0);
  if (_s7Weather24LocationCompositionStateOwet_0(v30, 1, v31) == 1)
  {
    sub_100021A3C(v30, &qword_100C06398);
    (*(void (**)(char *, _QWORD, uint64_t))(v70 + 104))(v68, enum case for WeatherAlert.Prominence.high(_:), v69);
  }
  else
  {
    v32 = v55;
    WeatherAlert.prominence.getter();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v30, v31);
    (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v68, v32, v69);
  }
  v57 = SevereAlertComponentStringsBuilder.longAlertDescription(for:location:)(v26, a1);
  v55 = v33;
  v34 = v58;
  v35 = SevereAlertComponentStringsBuilder.SevereAlertSummary.description.getter();
  v37 = v36;
  v38 = SevereAlertComponentStringsBuilder.SevereAlertSummary.footer.getter();
  v40 = v39;
  v41 = v64;
  v42 = v69;
  v43 = (uint64_t)v68;
  (*(void (**)(char *, char *, uint64_t))(v70 + 16))((char *)v9 + *(int *)(v64 + 36), v68, v69);
  v44 = (uint64_t)v65;
  v45 = v65[1];
  *v9 = v35;
  v9[1] = v37;
  v46 = v55;
  v9[2] = v57;
  v9[3] = (uint64_t)v46;
  v47 = countAndFlagsBits;
  v9[4] = v56;
  v9[5] = v47;
  v9[6] = (uint64_t)object;
  v9[7] = v38;
  v9[8] = v40;
  *(uint64_t *)((char *)v9 + *(int *)(v41 + 40)) = v45;
  v48 = v66;
  sub_1007AA080(v43, v44, (uint64_t)v9, v66);
  v49 = swift_bridgeObjectRelease(v26);
  (*(void (**)(uint64_t, uint64_t, __n128))(v70 + 8))(v43, v42, v49);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v34, v62);
  v50 = (int *)type metadata accessor for LocationComponentContainerViewModel(0);
  v51 = v67;
  v52 = v67 + v50[5];
  sub_100080BA8((uint64_t)v9, v52, type metadata accessor for SevereAlertComponentViewModel);
  v53 = type metadata accessor for LocationComponentViewModel(0);
  swift_storeEnumTagMultiPayload(v52, v53, 13);
  sub_100080BA8(v48, v51, type metadata accessor for LocationComponentHeaderViewModel);
  *(_WORD *)(v51 + v50[6]) = 256;
  return sub_1005004E0(v63, v51 + v50[7]);
}

uint64_t sub_1007A9E2C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v4 = sub_1000BA294(&qword_100C06398);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BD4280);
  __chkstk_darwin(v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002F70F0(*a1, (uint64_t)v6);
  v14 = type metadata accessor for WeatherAlert(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v6, 1, v14) == 1)
  {
    sub_100021A3C((uint64_t)v6, &qword_100C06398);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 1, 1, v10);
  }
  else
  {
    WeatherAlert.detailsURL.getter();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v6, v14);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v10);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10) != 1)
    {
      v18 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
      v18(v13, v9, v10);
      v19 = *(int *)(sub_1000BA294(&qword_100BC5FE8) + 48);
      v18((char *)a2, v13, v10);
      *(_BYTE *)(a2 + v19) = 1;
      v20 = type metadata accessor for LocationComponentAction(0);
      swift_storeEnumTagMultiPayload(a2, v20, 0);
      v16 = a2;
      v17 = 0;
      v15 = v20;
      return _s7Weather24LocationCompositionStateOwst_0(v16, v17, 1, v15);
    }
  }
  sub_100021A3C((uint64_t)v9, &qword_100BD4280);
  v15 = type metadata accessor for LocationComponentAction(0);
  v16 = a2;
  v17 = 1;
  return _s7Weather24LocationCompositionStateOwst_0(v16, v17, 1, v15);
}

uint64_t sub_1007AA048@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = WeatherAlert.summary.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_1007AA080(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;

  v8 = type metadata accessor for WeatherAlert.Prominence(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1007AA230(a1, a2);
  v14 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v15 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v11, v8);
  if (v15 == enum case for WeatherAlert.Prominence.high(_:))
  {
    sub_1007AA508(v12, v14, a3, 0xD00000000000001DLL, 0x80000001009F19A0, a4);
    swift_bridgeObjectRelease(v14);
  }
  else if (v15 == enum case for WeatherAlert.Prominence.low(_:))
  {
    *(_QWORD *)a4 = v12;
    *(_QWORD *)(a4 + 8) = v14;
    *(_QWORD *)(a4 + 16) = 0xD00000000000001DLL;
    *(_QWORD *)(a4 + 24) = 0x80000001009F19A0;
    *(_BYTE *)(a4 + 32) = 0;
    v16 = type metadata accessor for LocationComponentHeaderViewModel(0);
    *(_QWORD *)(a4 + 40) = 0;
    *(_QWORD *)(a4 + 48) = 0;
    swift_storeEnumTagMultiPayload(a4, v16, 0);
  }
  else
  {
    sub_1007AA508(v12, v14, a3, 0xD00000000000001DLL, 0x80000001009F19A0, a4);
    v17 = swift_bridgeObjectRelease(v14);
    (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v11, v8, v17);
  }
}

uint64_t sub_1007AA230(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  id v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t countAndFlagsBits;
  int v13;
  int v14;
  id v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;

  v4 = type metadata accessor for WeatherAlert.Prominence(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == enum case for WeatherAlert.Prominence.high(_:))
  {
    v9 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v26._object = (void *)0x8000000100A14330;
    v10._countAndFlagsBits = 0x5720657265766553;
    v10._object = (void *)0xEE00726568746165;
    v11._countAndFlagsBits = 0;
    v11._object = (void *)0xE000000000000000;
    v26._countAndFlagsBits = 0xD000000000000028;
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, (NSBundle)v9, v11, v26)._countAndFlagsBits;

  }
  else
  {
    v13 = v8;
    v14 = enum case for WeatherAlert.Prominence.low(_:);
    v15 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    if (v13 == v14)
    {
      v16._countAndFlagsBits = 0xD000000000000016;
      v27._countAndFlagsBits = 0xD00000000000005ELL;
      v27._object = (void *)0x8000000100A14380;
      v16._object = (void *)0x8000000100A14360;
      v17._countAndFlagsBits = 0x2072656874616557;
      v17._object = (void *)0xEE00737472656C41;
      v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)v15, v17, v27);

      v19 = sub_1000BA294(&qword_100BC3C38);
      v20 = swift_allocObject(v19, 72, 7);
      *(_OWORD *)(v20 + 16) = xmmword_10097CA50;
      v21 = *(_QWORD *)(*(_QWORD *)a2 + 16);
      *(_QWORD *)(v20 + 56) = &type metadata for Int;
      *(_QWORD *)(v20 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v20 + 32) = v21;
      countAndFlagsBits = static String.localizedStringWithFormat(_:_:)(v18._countAndFlagsBits, v18._object, v20);
      swift_bridgeObjectRelease(v18._object);
      swift_bridgeObjectRelease(v20);
    }
    else
    {
      v28._object = (void *)0x8000000100A14330;
      v22._countAndFlagsBits = 0x5720657265766553;
      v22._object = (void *)0xEE00726568746165;
      v23._countAndFlagsBits = 0;
      v23._object = (void *)0xE000000000000000;
      v28._countAndFlagsBits = 0xD000000000000028;
      countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, (Swift::String_optional)0, (NSBundle)v15, v23, v28)._countAndFlagsBits;

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
  }
  return countAndFlagsBits;
}

uint64_t sub_1007AA508@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t, __n128);
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v12 = type metadata accessor for SevereAlertComponentViewModel(0);
  __chkstk_darwin(v12);
  v50 = (uint64_t)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for WeatherAlert(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v21 = *(_QWORD *)(a3 + 48);
  v22 = *(_QWORD *)(v20 + 16);
  v52 = *(_QWORD *)(a3 + 40);
  v53 = a3;
  v51 = v21;
  if (v22)
  {
    v44 = (char *)&v44 - v19;
    v46 = a1;
    v47 = a4;
    v48 = a5;
    v49 = a2;
    v23 = v20 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    v24 = *(_QWORD *)(v15 + 72);
    v25 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
    v26 = v20;
    swift_bridgeObjectRetain(v21);
    v45 = v26;
    v27 = swift_bridgeObjectRetain(v26);
    while (1)
    {
      v28 = v25(v18, v23, v14, v27);
      v29 = WeatherAlert.source.getter(v28);
      v31 = v30;
      v32 = swift_bridgeObjectRelease(v30);
      v33 = HIBYTE(v31) & 0xF;
      if ((v31 & 0x2000000000000000) == 0)
        v33 = v29 & 0xFFFFFFFFFFFFLL;
      if (v33)
        break;
      (*(void (**)(char *, uint64_t, __n128))(v15 + 8))(v18, v14, v32);
      v23 += v24;
      if (!--v22)
      {
        swift_bridgeObjectRelease(v45);
        v34 = 0;
        v35 = 0;
        goto LABEL_10;
      }
    }
    v36 = swift_bridgeObjectRelease(v45);
    v37 = v44;
    v38 = (*(uint64_t (**)(char *, char *, uint64_t, __n128))(v15 + 32))(v44, v18, v14, v36);
    v34 = WeatherAlert.source.getter(v38);
    v35 = v39;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v37, v14);
LABEL_10:
    a5 = v48;
    a2 = v49;
    a1 = v46;
    a4 = v47;
  }
  else
  {
    swift_bridgeObjectRetain(v21);
    v34 = 0;
    v35 = 0;
  }
  v40 = v50;
  sub_1007AA87C(v53, v50);
  if (!v35)
  {
    v34 = *(_QWORD *)(v40 + 40);
    v35 = *(_QWORD *)(v40 + 48);
    swift_bridgeObjectRetain(v35);
  }
  sub_1007AA8C0(v40);
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  v41 = v51;
  *(_QWORD *)(a6 + 16) = v52;
  *(_QWORD *)(a6 + 24) = v41;
  *(_QWORD *)(a6 + 32) = v34;
  *(_QWORD *)(a6 + 40) = v35;
  *(_QWORD *)(a6 + 48) = a4;
  *(_QWORD *)(a6 + 56) = a5;
  *(_QWORD *)(a6 + 64) = a1;
  *(_QWORD *)(a6 + 72) = a2;
  *(_QWORD *)(a6 + 80) = a4;
  *(_QWORD *)(a6 + 88) = a5;
  *(_BYTE *)(a6 + 96) = 0;
  v42 = type metadata accessor for LocationComponentHeaderViewModel(0);
  *(_QWORD *)(a6 + 104) = 0;
  *(_QWORD *)(a6 + 112) = 0;
  *(_BYTE *)(a6 + 120) = 0;
  swift_storeEnumTagMultiPayload(a6, v42, 2);
  swift_bridgeObjectRetain_n(a5, 2);
  return swift_bridgeObjectRetain_n(a2, 2);
}

uint64_t sub_1007AA784()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for SevereAlertComponentStringsBuilder(0);
  sub_10003BC44(v1);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1007AA7C4()
{
  return type metadata accessor for SevereAlertComponentViewModelFactory(0);
}

uint64_t sub_1007AA7CC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for SevereAlertComponentStringsBuilder(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

unint64_t sub_1007AA838()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C063A0;
  if (!qword_100C063A0)
  {
    v1 = sub_100075EB0(&qword_100BD4FC0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100C063A0);
  }
  return result;
}

uint64_t sub_1007AA87C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SevereAlertComponentViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1007AA8C0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SevereAlertComponentViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1007AA8FC(char a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94[32];

  v93 = a3;
  v5 = type metadata accessor for TipPriorityQueue.GridEntry(0);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_1000986FC();
  v92 = v7;
  __chkstk_darwin(v8);
  v91 = (uint64_t)&v68 - v9;
  __chkstk_darwin(v10);
  v90 = (uint64_t)&v68 - v11;
  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100098728();
  v15 = v14 - v13;
  type metadata accessor for LocationComponentViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v68 - v20;
  sub_1000BA294(&qword_100BCC760);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  sub_1000986FC();
  v89 = v23;
  __chkstk_darwin(v24);
  v26 = (char *)&v68 - v25;
  __chkstk_darwin(v27);
  v29 = (char *)&v68 - v28;
  __chkstk_darwin(v30);
  v32 = (char *)&v68 - v31;
  if (a1)
  {
    if (a1 == 1)
    {
      if ((a2 & 1) != 0)
      {
        v33 = &qword_100C06778;
        goto LABEL_11;
      }
    }
    else if ((a2 & 1) != 0)
    {
      v33 = &qword_100C06B48;
      goto LABEL_11;
    }
    v33 = &qword_100C06960;
  }
  else if ((a2 & 1) != 0)
  {
    v33 = &qword_100C063A8;
  }
  else
  {
    v33 = &qword_100C06590;
  }
LABEL_11:
  v34 = *((_BYTE *)v33 + 224);
  v76 = *v33;
  v75 = v33[1];
  v74 = v33[2];
  v73 = v33[3];
  v35 = v33[8];
  v79 = v33[9];
  v80 = v35;
  v36 = v33[10];
  v77 = v33[11];
  v78 = v36;
  v37 = v33[24];
  v72 = v33[25];
  v71 = v33[26];
  v70 = v33[27];
  v38 = v33[49];
  v83 = v33[50];
  v84 = v38;
  v39 = v33[51];
  v81 = v33[52];
  v82 = v39;
  v40 = v33[57];
  v87 = v33[58];
  v88 = v40;
  v41 = v93 + OBJC_IVAR____TtCV7Weather23DefaultTrendNewsContent8_Storage_map;
  v43 = v33[59];
  v42 = v33[60];
  v85 = v43;
  v86 = v42;
  sub_1000992EC(v93 + OBJC_IVAR____TtCV7Weather23DefaultTrendNewsContent8_Storage_map, (uint64_t)v94);
  sub_10003773C(v41, v15, &qword_100BC4A98);
  v44 = sub_1000878BC();
  if (_s7Weather24LocationCompositionStateOwet_0(v15, 1, v44) == 1)
  {
    sub_100021A14(v15, &qword_100BC4A98);
LABEL_16:
    v45 = 1;
    goto LABEL_17;
  }
  v69 = v37;
  sub_10009D3BC(v15 + *(int *)(v44 + 20), (uint64_t)v18);
  sub_1000215BC(v15, type metadata accessor for LocationComponentContainerViewModel);
  sub_10007C77C((uint64_t)v18, (uint64_t)v21, type metadata accessor for LocationComponentViewModel);
  if ((v34 & 1) != 0)
  {
    sub_1000215BC((uint64_t)v21, type metadata accessor for LocationComponentViewModel);
    goto LABEL_16;
  }
  sub_10007C77C((uint64_t)v21, (uint64_t)v29, type metadata accessor for LocationComponentViewModel);
  v45 = 0;
  v46 = &v29[*(int *)(v5 + 20)];
  v47 = v72;
  *(_QWORD *)v46 = v69;
  *((_QWORD *)v46 + 1) = v47;
  v48 = v70;
  *((_QWORD *)v46 + 2) = v71;
  *((_QWORD *)v46 + 3) = v48;
LABEL_17:
  sub_1000988B8((uint64_t)v29, v45);
  sub_1002228F0((uint64_t)v29, (uint64_t)v32);
  sub_10009D3BC(v93 + *(int *)(v44 + 20) + OBJC_IVAR____TtCV7Weather23DefaultTrendNewsContent8_Storage_airQuality, (uint64_t)v26);
  v49 = &v26[*(int *)(v5 + 20)];
  v50 = v75;
  *(_QWORD *)v49 = v76;
  *((_QWORD *)v49 + 1) = v50;
  v51 = v73;
  *((_QWORD *)v49 + 2) = v74;
  *((_QWORD *)v49 + 3) = v51;
  sub_1000988B8((uint64_t)v26, 0);
  v52 = sub_10009D3C4(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast);
  v53 = v90;
  sub_10009D3BC(v52, v90);
  v54 = (uint64_t *)(v53 + *(int *)(v5 + 20));
  v55 = v79;
  *v54 = v80;
  v54[1] = v55;
  v56 = v77;
  v54[2] = v78;
  v54[3] = v56;
  v57 = v89;
  sub_10003773C((uint64_t)v32, v89, &qword_100BCC760);
  v58 = sub_10009D3C4(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex);
  v59 = v91;
  sub_10009D3BC(v58, v91);
  v60 = (uint64_t *)(v59 + *(int *)(v5 + 20));
  v61 = v83;
  *v60 = v84;
  v60[1] = v61;
  v62 = v81;
  v60[2] = v82;
  v60[3] = v62;
  v63 = sub_10009D3C4(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind);
  v64 = v92;
  sub_10009D3BC(v63, v92);
  v65 = (uint64_t *)(v64 + *(int *)(v5 + 20));
  v66 = v87;
  *v65 = v88;
  v65[1] = v66;
  v67 = v86;
  v65[2] = v85;
  v65[3] = v67;
  sub_10087CED0((uint64_t)v26, v53, v57, v59, v64);
  sub_100021A14((uint64_t)v32, &qword_100BCC760);
  sub_100098640();
}

void sub_1007AADF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;
  __n128 *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 *v38;
  uint64_t v39;
  uint64_t v40;
  __n128 *v41;
  uint64_t v42;
  uint64_t v43;
  __n128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __n128 *v59;
  __n128 *v60;
  uint64_t v61;
  uint64_t v62;
  __n128 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __n128 *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __n128 *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __n128 *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __n128 *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __n128 *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __n128 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  _BYTE v106[24];

  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100098728();
  v6 = v5 - v4;
  v7 = sub_1000878BC();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10009E540();
  v9 = a1;
  v10 = a1 + OBJC_IVAR____TtCV7Weather23DefaultTrendNewsContent8_Storage_map;
  sub_1000992EC(a1 + OBJC_IVAR____TtCV7Weather23DefaultTrendNewsContent8_Storage_map, (uint64_t)v106);
  sub_10003773C(v10, v6, &qword_100BC4A98);
  if (_s7Weather24LocationCompositionStateOwet_0(v6, 1, v7) == 1)
  {
    sub_100021A14(v6, &qword_100BC4A98);
    v11 = sub_1000BA294(&qword_100BCC750);
    v12 = swift_allocObject(v11, 248, 7);
    *(_OWORD *)(v12 + 16) = xmmword_10098E040;
    v13 = sub_1000BA294(&qword_100BCC758);
    v14 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v15 = *(_QWORD *)(v8 + 72);
    v16 = v13;
    v17 = (__n128 *)sub_1000BA6B8(v13);
    v18 = sub_100099954(v17, (__n128)xmmword_10097CA50);
    sub_10009F7F4(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, (uint64_t)v18 + v14);
    *(_QWORD *)(v12 + 32) = sub_1000B4580();
    *(_QWORD *)(v12 + 40) = v19;
    *(_QWORD *)(v12 + 48) = v20;
    v21 = (__n128 *)sub_1000BA6B8(v16);
    sub_1000D1ED8(v21);
    sub_10009F7F4(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v22);
    *(_QWORD *)(v12 + 56) = sub_1000B4580();
    *(_QWORD *)(v12 + 64) = v23;
    *(_QWORD *)(v12 + 72) = v24;
    v25 = (__n128 *)sub_1000BA6B8(v16);
    sub_1000D1ED8(v25);
    sub_10009F7F4(a1 + OBJC_IVAR____TtCV7Weather23DefaultTrendNewsContent8_Storage_newsArticle, v26);
    *(_QWORD *)(v12 + 80) = sub_1000B4580();
    *(_QWORD *)(v12 + 88) = v27;
    *(_QWORD *)(v12 + 96) = v28;
    v29 = (__n128 *)sub_1000BA6B8(v16);
    sub_1000D1ED8(v29);
    sub_10009F7F4(a1 + OBJC_IVAR____TtCV7Weather23DefaultTrendNewsContent8_Storage_airQuality, v30);
    *(_QWORD *)(v12 + 104) = sub_100080C44((uint64_t)v29);
    *(_QWORD *)(v12 + 112) = v31;
    *(_QWORD *)(v12 + 120) = v32;
    v33 = (__n128 *)sub_1000C2514(v16, v14 + 2 * v15);
    v34 = (char *)sub_100099954(v33, (__n128)xmmword_10097DA20) + v14;
    v35 = *(_QWORD *)(a1 + 16);
    sub_10009F7F4(v35 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex, (uint64_t)v34);
    sub_10009F7F4(v35 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, (uint64_t)&v34[v15]);
    *(_QWORD *)(v12 + 128) = sub_1000B4580();
    *(_QWORD *)(v12 + 136) = v36;
    *(_QWORD *)(v12 + 144) = v37;
    v38 = (__n128 *)sub_1000BA6B8(v16);
    sub_1000B46B8(v38);
    sub_100095B78(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind, (uint64_t)v34, type metadata accessor for LocationComponentContainerViewModel);
    sub_100098B48(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)&v34[v15]);
    *(_QWORD *)(v12 + 152) = sub_1000B4580();
    *(_QWORD *)(v12 + 160) = v39;
    *(_QWORD *)(v12 + 168) = v40;
    v41 = (__n128 *)sub_1000BA6B8(v16);
    sub_1000B46B8(v41);
    sub_100098A1C(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike, (uint64_t)v34);
    sub_100098A1C(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)&v34[v15]);
    *(_QWORD *)(v12 + 176) = sub_1000B4580();
    *(_QWORD *)(v12 + 184) = v42;
    *(_QWORD *)(v12 + 192) = v43;
    v44 = (__n128 *)sub_1000BA6B8(v16);
    sub_1000B46B8(v44);
    sub_100098B48(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility, (uint64_t)v34);
    sub_100098B48(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, (uint64_t)&v34[v15]);
    *(_QWORD *)(v12 + 200) = sub_1000B4580();
    *(_QWORD *)(v12 + 208) = v45;
    *(_QWORD *)(v12 + 216) = v46;
    v47 = sub_1000BA6B8(v16);
    *(_OWORD *)(v47 + 16) = v105;
    v48 = *(_QWORD *)(a1 + 16);
    sub_10009D3BC(v48 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, v47 + v14);
    sub_10009D3BC(v48 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, v47 + v14 + v15);
    *(_QWORD *)(v12 + 224) = sub_100080C44(v47);
    *(_QWORD *)(v12 + 232) = v49;
    *(_QWORD *)(v12 + 240) = v50;
  }
  else
  {
    sub_10007C77C(v6, v1, type metadata accessor for LocationComponentContainerViewModel);
    v51 = sub_1000BA294(&qword_100BCC750);
    v52 = swift_allocObject(v51, 272, 7);
    *(_OWORD *)(v52 + 16) = xmmword_10097FA60;
    v53 = sub_1000BA294(&qword_100BCC758);
    v54 = *(_QWORD *)(v8 + 72);
    v55 = *(unsigned __int8 *)(v8 + 80);
    v56 = (v55 + 32) & ~v55;
    v104 = v1;
    v57 = v55 | 7;
    v58 = v53;
    v59 = (__n128 *)swift_allocObject(v53, v56 + v54, v55 | 7);
    v60 = sub_100099954(v59, (__n128)xmmword_10097CA50);
    sub_1000B4590(*(_QWORD *)(v9 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, (uint64_t)v60 + v56);
    *(_QWORD *)(v52 + 32) = sub_1000B4588();
    *(_QWORD *)(v52 + 40) = v61;
    *(_QWORD *)(v52 + 48) = v62;
    v63 = (__n128 *)sub_1000BA5D8();
    sub_100098A38(v63);
    sub_1000B4590(*(_QWORD *)(v9 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v64);
    *(_QWORD *)(v52 + 56) = sub_1000B4588();
    *(_QWORD *)(v52 + 64) = v65;
    *(_QWORD *)(v52 + 72) = v66;
    v67 = (__n128 *)sub_1000BA5D8();
    sub_100098A38(v67);
    sub_1000B4590(v9 + OBJC_IVAR____TtCV7Weather23DefaultTrendNewsContent8_Storage_newsArticle, v68);
    *(_QWORD *)(v52 + 80) = sub_1000B4588();
    *(_QWORD *)(v52 + 88) = v69;
    *(_QWORD *)(v52 + 96) = v70;
    v71 = (__n128 *)sub_1000BA5D8();
    sub_100098A38(v71);
    sub_1000B4590(v9 + OBJC_IVAR____TtCV7Weather23DefaultTrendNewsContent8_Storage_airQuality, v72);
    *(_QWORD *)(v52 + 104) = sub_1000B4588();
    *(_QWORD *)(v52 + 112) = v73;
    *(_QWORD *)(v52 + 120) = v74;
    v75 = (__n128 *)sub_1000BA5D8();
    sub_100098A38(v75);
    sub_1000B4590(v1, v76);
    *(_QWORD *)(v52 + 128) = sub_1000B4580();
    *(_QWORD *)(v52 + 136) = v77;
    *(_QWORD *)(v52 + 144) = v78;
    v79 = v9;
    v80 = (__n128 *)swift_allocObject(v58, v56 + 2 * v54, v57);
    v81 = (char *)sub_100099954(v80, (__n128)xmmword_10097DA20) + v56;
    v82 = *(_QWORD *)(v79 + 16);
    v102 = v79;
    sub_1000B4590(v82 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex, (uint64_t)v81);
    v103 = v54;
    sub_1000B4590(v82 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, (uint64_t)&v81[v54]);
    *(_QWORD *)(v52 + 152) = sub_1000B4588();
    *(_QWORD *)(v52 + 160) = v83;
    *(_QWORD *)(v52 + 168) = v84;
    v85 = (__n128 *)sub_1000C2514(v58, v56 + 2 * v54);
    sub_1000C52D8(v85);
    v86 = *(_QWORD *)(v79 + 16);
    sub_1000B4590(v86 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind, (uint64_t)v81);
    sub_1000B4590(v86 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)&v81[v54]);
    *(_QWORD *)(v52 + 176) = sub_1000B4588();
    *(_QWORD *)(v52 + 184) = v87;
    *(_QWORD *)(v52 + 192) = v88;
    v89 = v56 + 2 * v54;
    v90 = (__n128 *)sub_1000C2514(v58, v89);
    sub_1000C52D8(v90);
    v91 = *(_QWORD *)(v102 + 16);
    sub_1000B4590(v91 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike, (uint64_t)v81);
    sub_100098A1C(v91 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)&v81[v54]);
    *(_QWORD *)(v52 + 200) = sub_1000B4588();
    *(_QWORD *)(v52 + 208) = v92;
    *(_QWORD *)(v52 + 216) = v93;
    v94 = (__n128 *)sub_1000C2514(v58, v89);
    sub_1000C52D8(v94);
    v95 = *(_QWORD *)(v102 + 16);
    sub_100095B78(v95 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility, (uint64_t)v81, type metadata accessor for LocationComponentContainerViewModel);
    sub_100095B78(v95 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, (uint64_t)&v81[v54], type metadata accessor for LocationComponentContainerViewModel);
    *(_QWORD *)(v52 + 224) = sub_1000B4588();
    *(_QWORD *)(v52 + 232) = v96;
    *(_QWORD *)(v52 + 240) = v97;
    v98 = swift_allocObject(v58, v89, v57);
    *(_OWORD *)(v98 + 16) = v105;
    v99 = *(_QWORD *)(v102 + 16);
    sub_100098B48(v99 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, v98 + v56);
    sub_100098B48(v99 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, v98 + v56 + v103);
    *(_QWORD *)(v52 + 248) = sub_100080C44(v98);
    *(_QWORD *)(v52 + 256) = v100;
    *(_QWORD *)(v52 + 264) = v101;
    sub_1000215BC(v104, type metadata accessor for LocationComponentContainerViewModel);
  }
  sub_100098640();
}

void sub_1007AB53C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = sub_1000878BC();
  sub_1000B42B0();
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v16 - v7;
  type metadata accessor for LocationViewComponent(0);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_10009E540();
  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = v12 - v11;
  v14 = *(_QWORD *)(a1 + 16);
  swift_retain();
  sub_100520630();
  v17 = v15;
  swift_release(v14);
  sub_1000C5D34(OBJC_IVAR____TtCV7Weather37LocationDefaultTrendNewsConfiguration8_Storage_map);
  sub_1000C661C();
  sub_100098B50();
  _s7Weather24LocationCompositionStateOwst_0(v13, 0, 1, v2);
  sub_1000C5D34(OBJC_IVAR____TtCV7Weather37LocationDefaultTrendNewsConfiguration8_Storage_airQuality);
  sub_1000C661C();
  sub_100098B50();
  sub_1000C5D34(OBJC_IVAR____TtCV7Weather37LocationDefaultTrendNewsConfiguration8_Storage_newsArticle);
  sub_1000C661C();
  sub_100098B50();
  sub_1001DA8D8(v17, v13, (uint64_t)v8, (uint64_t)v6);
  sub_100098640();
}

uint64_t *sub_1007AB6A8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __n128 v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_1000BA294(&qword_100BC4F28);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      a1[1] = a2[1];
      swift_retain();
      swift_retain();
      v9 = *(int *)(sub_1000BA294(&qword_100BC6510) + 32);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for PresentationMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
      v13 = 1;
    }
    else
    {
      swift_retain();
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v7, v13);
    v15 = a3[5];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for CurrentWeather(0);
    v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
    v19(v16, v17, v18);
    v20 = a3[6];
    v21 = a3[7];
    v22 = (uint64_t *)((char *)a1 + v20);
    v23 = (uint64_t *)((char *)a2 + v20);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = (char *)a1 + v21;
    v26 = (char *)a2 + v21;
    v27 = swift_retain();
    ((void (*)(char *, char *, uint64_t, __n128))v19)(v25, v26, v18, v27);
    v28 = sub_1000BA294(&qword_100C06D30);
    *(_QWORD *)&v25[*(int *)(v28 + 28)] = *(_QWORD *)&v26[*(int *)(v28 + 28)];
  }
  swift_retain();
  return a1;
}

double sub_1007AB824(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  __n128 v10;
  double result;

  sub_1000BA294(&qword_100BC4F28);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1);
  swift_release();
  if (EnumCaseMultiPayload == 1)
  {
    swift_release();
    v5 = a1 + *(int *)(sub_1000BA294(&qword_100BC6510) + 32);
    v6 = type metadata accessor for PresentationMode(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  v7 = a1 + *(int *)(a2 + 20);
  v8 = type metadata accessor for CurrentWeather(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v10 = swift_release();
  ((void (*)(uint64_t, uint64_t, __n128))v9)(a1 + *(int *)(a2 + 28), v8, v10);
  sub_1000BA294(&qword_100C06D30);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

_QWORD *sub_1007AB918(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __n128 v25;
  uint64_t v26;

  v6 = sub_1000BA294(&qword_100BC4F28);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
  *a1 = *a2;
  if (EnumCaseMultiPayload == 1)
  {
    a1[1] = a2[1];
    swift_retain();
    swift_retain();
    v8 = *(int *)(sub_1000BA294(&qword_100BC6510) + 32);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for PresentationMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = 1;
  }
  else
  {
    swift_retain();
    v12 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, v6, v12);
  v13 = a3[5];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for CurrentWeather(0);
  v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
  v17(v14, v15, v16);
  v18 = a3[6];
  v19 = a3[7];
  v20 = (_QWORD *)((char *)a1 + v18);
  v21 = (_QWORD *)((char *)a2 + v18);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = (char *)a1 + v19;
  v24 = (char *)a2 + v19;
  v25 = swift_retain();
  ((void (*)(char *, char *, uint64_t, __n128))v17)(v23, v24, v16, v25);
  v26 = sub_1000BA294(&qword_100C06D30);
  *(_QWORD *)&v23[*(int *)(v26 + 28)] = *(_QWORD *)&v24[*(int *)(v26 + 28)];
  swift_retain();
  return a1;
}

_QWORD *sub_1007ABA6C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  if (a1 != a2)
  {
    sub_100021AA4((uint64_t)a1, &qword_100BC4F28);
    v6 = sub_1000BA294(&qword_100BC4F28);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      a1[1] = a2[1];
      swift_retain();
      swift_retain();
      v8 = *(int *)(sub_1000BA294(&qword_100BC6510) + 32);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for PresentationMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      v12 = 1;
    }
    else
    {
      swift_retain();
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v6, v12);
  }
  v13 = a3[5];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for CurrentWeather(0);
  v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 24);
  v17(v14, v15, v16);
  v18 = a3[6];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  swift_retain();
  v22 = swift_release();
  v23 = a3[7];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  ((void (*)(char *, char *, uint64_t, __n128))v17)((char *)a1 + v23, v25, v16, v22);
  v26 = sub_1000BA294(&qword_100C06D30);
  *(_QWORD *)&v24[*(int *)(v26 + 28)] = *(_QWORD *)&v25[*(int *)(v26 + 28)];
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *sub_1007ABBF4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = sub_1000BA294(&qword_100BC4F28);
  if (swift_getEnumCaseMultiPayload(a2) == 1)
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(sub_1000BA294(&qword_100BC6510) + 32);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for PresentationMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for CurrentWeather(0);
  v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
  v16(v13, v14, v15);
  v17 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v16((char *)a1 + v17, v19, v15);
  v20 = sub_1000BA294(&qword_100C06D30);
  *(_QWORD *)&v18[*(int *)(v20 + 28)] = *(_QWORD *)&v19[*(int *)(v20 + 28)];
  return a1;
}

_QWORD *sub_1007ABD2C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  __n128 v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  if (a1 != a2)
  {
    sub_100021AA4((uint64_t)a1, &qword_100BC4F28);
    v6 = sub_1000BA294(&qword_100BC4F28);
    if (swift_getEnumCaseMultiPayload(a2) == 1)
    {
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      v8 = *(int *)(sub_1000BA294(&qword_100BC6510) + 32);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for PresentationMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for CurrentWeather(0);
  v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40);
  v16(v13, v14, v15);
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  v17 = swift_release();
  v18 = a3[7];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  ((void (*)(char *, char *, uint64_t, __n128))v16)((char *)a1 + v18, v20, v15, v17);
  v21 = sub_1000BA294(&qword_100C06D30);
  *(_QWORD *)&v19[*(int *)(v21 + 28)] = *(_QWORD *)&v20[*(int *)(v21 + 28)];
  swift_release();
  return a1;
}

uint64_t sub_1007ABE94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1007ABEA0);
}

uint64_t sub_1007ABEA0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v6 = sub_1000BA294(&qword_100BC6518);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
    return _s7Weather24LocationCompositionStateOwet_0(v8, a2, v7);
  }
  v9 = sub_1000BF2C4();
  if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v9;
    v10 = a3[5];
LABEL_10:
    v8 = a1 + v10;
    return _s7Weather24LocationCompositionStateOwet_0(v8, a2, v7);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v7 = sub_1000BA294(&qword_100C06D30);
    v10 = a3[7];
    goto LABEL_10;
  }
  v11 = *(_QWORD *)(a1 + a3[6]);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_1007ABF64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1007ABF70);
}

void sub_1007ABF70(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = sub_1000BA294(&qword_100BC6518);
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    v11 = sub_1000BF2C4();
    if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == a3)
    {
      v9 = v11;
      v12 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[6]) = (a2 - 1);
        sub_100079F70();
        return;
      }
      v9 = sub_1000BA294(&qword_100C06D30);
      v12 = a4[7];
    }
    v10 = a1 + v12;
  }
  _s7Weather24LocationCompositionStateOwst_0(v10, a2, a2, v9);
}

uint64_t type metadata accessor for CurrentWeatherEditorView(uint64_t a1)
{
  uint64_t result;

  result = qword_100C06D90;
  if (!qword_100C06D90)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CurrentWeatherEditorView);
  return result;
}

void sub_1007AC060(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];

  sub_100158A50(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for CurrentWeather(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = (char *)&value witness table for () + 64;
      sub_1007AC10C(319);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 4, v8, a1 + 16);
      }
    }
  }
}

void sub_1007AC10C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100C06DA0)
  {
    v2 = type metadata accessor for CurrentWeather(255);
    v3 = type metadata accessor for State(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100C06DA0);
  }
}

uint64_t sub_1007AC160(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AC1170, 1);
}

void sub_1007AC170()
{
  char v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 *inited;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[80];

  sub_1000C3160();
  v6 = sub_1000BA294(&qword_100BDD650);
  v7 = sub_1000BA294(&qword_100BCB0A8);
  v8 = sub_1000BB5C0(v7);
  sub_10009D834(v8, v9);
  sub_1000D9910();
  sub_1000DDF5C(v10, v11, v12, v13, v14, v15, v16, v17, v24, v25);
  if (v1 != 3)
  {
    v19 = sub_1007CE2F4(v0);
    sub_1007ADF90(v19, (void (*)(uint64_t))sub_100606034, (uint64_t)&unk_100BCF300, (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_1007AE240);
    sub_1000BD6E0();
    if (v4)
      goto LABEL_4;
  }
  sub_1000C6880(v18, (unint64_t *)&qword_100BCB0D8);
  v20 = sub_1000BA294(&qword_100C06E40);
  inited = (__n128 *)swift_initStackObject(v20, v26);
  v4 = (void *)sub_1000D1468(inited, (__n128)xmmword_10097DA20);
  inited[2].n128_u64[0] = (unint64_t)objc_msgSend(v4, "inches");
  inited[2].n128_u64[1] = 0x736568636E69;
  inited[3].n128_u64[0] = 0xE600000000000000;
  inited[3].n128_u64[1] = (unint64_t)objc_msgSend(v4, "millimeters");
  inited[4].n128_u64[0] = 0x74656D696C6C696DLL;
  inited[4].n128_u64[1] = 0xEB00000000737265;
  sub_1007ADF90((uint64_t)inited, (void (*)(uint64_t))sub_100606034, (uint64_t)&unk_100BCF300, (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_1007AE240);
  sub_1000D2030();
  sub_100500528();
  if (v4)
  {
LABEL_4:
    sub_1007AE0D4((uint64_t)v4, (uint64_t)sub_100606008, (uint64_t)&unk_100BCF300, &qword_100BCF2F8);
    v23 = v22;
    sub_1000C5AE8();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000C5AE8();
    v23 = _swiftEmptyArrayStorage;
  }
  sub_1000D1B0C(v2);
  sub_1000D1B0C(v5);
  *(_QWORD *)(v3 + *(int *)(v6 + 36)) = v23;
  sub_1000C2404();
}

void sub_1007AC340()
{
  char v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 *inited;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[80];

  sub_1000C3160();
  v6 = sub_1000BA294(&qword_100BE5850);
  v7 = sub_1000BA294(&qword_100BC4E68);
  v8 = sub_1000BB5C0(v7);
  sub_10009D834(v8, v9);
  sub_1000D9910();
  sub_1000DDF5C(v10, v11, v12, v13, v14, v15, v16, v17, v24, v25);
  if (v1 != 3)
  {
    v19 = sub_1007CE2F4(v0);
    sub_1007ADF90(v19, (void (*)(uint64_t))sub_1006060F4, (uint64_t)&unk_100BCF310, (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_1007AE4E4);
    sub_1000BD6E0();
    if (v4)
      goto LABEL_4;
  }
  sub_1000C6880(v18, (unint64_t *)&qword_100BC5658);
  v20 = sub_1000BA294(&qword_100C06E40);
  inited = (__n128 *)swift_initStackObject(v20, v26);
  v4 = (void *)sub_1000D1468(inited, (__n128)xmmword_10097DA20);
  inited[2].n128_u64[0] = (unint64_t)objc_msgSend(v4, "celsius");
  inited[2].n128_u64[1] = 0x737569736C6563;
  inited[3].n128_u64[0] = 0xE700000000000000;
  inited[3].n128_u64[1] = (unint64_t)objc_msgSend(v4, "fahrenheit");
  inited[4].n128_u64[0] = 0x65686E6572686166;
  inited[4].n128_u64[1] = 0xEA00000000007469;
  sub_1007ADF90((uint64_t)inited, (void (*)(uint64_t))sub_1006060F4, (uint64_t)&unk_100BCF310, (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_1007AE4E4);
  sub_1000D2030();
  sub_100500528();
  if (v4)
  {
LABEL_4:
    sub_1007AE0D4((uint64_t)v4, (uint64_t)sub_1006060C8, (uint64_t)&unk_100BCF310, &qword_100BCF308);
    v23 = v22;
    sub_1000C5AE8();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000C5AE8();
    v23 = _swiftEmptyArrayStorage;
  }
  sub_1000D1B0C(v2);
  sub_1000D1B0C(v5);
  *(_QWORD *)(v3 + *(int *)(v6 + 36)) = v23;
  sub_1000C2404();
}

void sub_1007AC510(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70[16];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;

  v69 = a1;
  v2 = sub_1000C4E8C();
  v3 = *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64);
  v65 = *(_QWORD *)(v2 - 8);
  v66 = v3;
  __chkstk_darwin(v2);
  v63 = (uint64_t)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000BA294(&qword_100BC4FA0);
  v6 = *(_QWORD *)(v5 - 8);
  v67 = v5;
  v68 = v6;
  sub_10009D98C();
  __chkstk_darwin(v7);
  sub_100088FDC();
  v64 = v8;
  v9 = type metadata accessor for InsetGroupedListStyle(0);
  v58 = *(_QWORD *)(v9 - 8);
  sub_10009D98C();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = v12 - v11;
  v14 = sub_1000BA294(&qword_100C06DD8);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  sub_100079FBC();
  v16 = sub_1000BA294(&qword_100C06DE0);
  v60 = *(_QWORD *)(v16 - 8);
  sub_10009D98C();
  __chkstk_darwin(v17);
  sub_100098728();
  v20 = v19 - v18;
  v21 = sub_1000BA294(&qword_100C06DE8);
  v22 = *(_QWORD *)(v21 - 8);
  v61 = v21;
  v62 = v22;
  sub_10009D98C();
  __chkstk_darwin(v23);
  sub_100088FDC();
  v57 = v24;
  v71 = v1;
  v25 = sub_1000BA294(&qword_100C06DF0);
  sub_10003D310(&qword_100C06DF8, &qword_100C06DF0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v27 = List<>.init(content:)(sub_1007ADF18, v70, v25, v26);
  InsetGroupedListStyle.init()(v27);
  sub_10003D310(&qword_100C06E00, &qword_100C06DD8, (uint64_t)&protocol conformance descriptor for List<A, B>);
  v29 = v28;
  View.listStyle<A>(_:)(v13, v14, v9, v28, &protocol witness table for InsetGroupedListStyle);
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v13, v9);
  sub_1000BEA30(*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
  v30 = LocalizedStringKey.init(stringLiteral:)(0x20746E6572727543, 0xEF72656874616557);
  v32 = v31;
  v34 = v33;
  v36 = v35;
  v72 = v14;
  v73 = v9;
  v74 = v29;
  v75 = &protocol witness table for InsetGroupedListStyle;
  v37 = sub_10009885C((uint64_t)&v72, (uint64_t)&opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>);
  v38 = v57;
  View.navigationTitle(_:)(v30, v32, v34 & 1, v36, v16, v37);
  swift_bridgeObjectRelease();
  v39 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, __n128))(v60 + 8))(v20, v16, v39);
  v40 = LocalizedStringKey.init(stringLiteral:)(1701736260, 0xE400000000000000);
  v42 = v41;
  v44 = v43;
  v46 = v45;
  v47 = v63;
  sub_10000AB54(v59, v63, type metadata accessor for CurrentWeatherEditorView);
  v48 = *(unsigned __int8 *)(v65 + 80);
  v49 = (v48 + 16) & ~v48;
  v50 = swift_allocObject(&unk_100B90A70, v49 + v66, v48 | 7);
  sub_1007ADF24(v47, v50 + v49);
  v51 = v44 & 1;
  v52 = v64;
  Button<>.init(_:action:)(v40, v42, v51, v46, sub_1007ADF68, v50);
  v72 = v16;
  v73 = v37;
  v53 = sub_10009885C((uint64_t)&v72, (uint64_t)&opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>);
  sub_10003D310(&qword_100BC4FC0, &qword_100BC4FA0, (uint64_t)&protocol conformance descriptor for Button<A>);
  v54 = v61;
  View.navigationBarItems<A>(trailing:)(v52, v61, v67, v53, v55);
  sub_1000BEA30(*(uint64_t (**)(uint64_t, uint64_t))(v68 + 8));
  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v38, v54);
  sub_100098640();
}

uint64_t sub_1007AC8D4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  void (*v47)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char v62[16];
  uint64_t v63;
  char v64[16];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;

  v61 = a2;
  v3 = sub_1000BA294(&qword_100BDD650);
  __chkstk_darwin(v3);
  v60 = (uint64_t)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v57 = (uint64_t)&v50 - v6;
  v7 = sub_1000BA294(&qword_100C06E08);
  v58 = *(_QWORD *)(v7 - 8);
  v59 = v7;
  __chkstk_darwin(v7);
  v56 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v50 - v10;
  v12 = sub_1000BA294(&qword_100C06E10);
  v54 = *(_QWORD *)(v12 - 8);
  v13 = v54;
  v55 = v12;
  __chkstk_darwin(v12);
  v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v50 - v17;
  v19 = LocalizedStringKey.init(stringLiteral:)(0x74617265706D6554, 0xEB00000000657275);
  v66 = Text.init(_:tableName:bundle:comment:)(v19, v21, v20 & 1, v22, 0, 0, 0, 0, 0, 256);
  v67 = v23;
  v68 = v24 & 1;
  v69 = v25;
  v65 = a1;
  v26 = sub_1000BA294(&qword_100C06E18);
  sub_10003D310(&qword_100C06E20, &qword_100C06E18, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v53 = v18;
  Section<>.init(header:content:)(&v66, sub_1007AE210, v64, &type metadata for Text, v26, &protocol witness table for Text);
  v27 = LocalizedStringKey.init(stringLiteral:)(0x7469706963657250, 0xED00006E6F697461);
  LOWORD(v49) = 256;
  v66 = Text.init(_:tableName:bundle:comment:)(v27, v29, v28 & 1, v30, 0, 0, 0, 0, 0, v49);
  v67 = v31;
  v68 = v32 & 1;
  v69 = v33;
  v63 = a1;
  v34 = sub_1000BA294(&qword_100C06E28);
  sub_10003D310(&qword_100C06E30, &qword_100C06E28, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v51 = v11;
  Section<>.init(header:content:)(&v66, sub_1007AE218, v62, &type metadata for Text, v34, &protocol witness table for Text);
  v35 = v57;
  sub_1007AD92C(v57);
  v36 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v52 = v15;
  v37 = v55;
  v36(v15, v18, v55);
  v38 = v58;
  v39 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
  v40 = v56;
  v41 = v11;
  v42 = v59;
  v39(v56, v41, v59);
  v43 = v60;
  sub_100037794(v35, v60, &qword_100BDD650);
  v44 = v61;
  v36(v61, v15, v37);
  v45 = sub_1000BA294(&qword_100C06E38);
  v39(&v44[*(int *)(v45 + 48)], v40, v42);
  sub_100037794(v43, (uint64_t)&v44[*(int *)(v45 + 64)], &qword_100BDD650);
  sub_100021AA4(v35, &qword_100BDD650);
  v46 = *(void (**)(char *, uint64_t))(v38 + 8);
  v46(v51, v42);
  v47 = *(void (**)(char *, uint64_t))(v54 + 8);
  v47(v53, v37);
  sub_100021AA4(v43, &qword_100BDD650);
  v46(v40, v42);
  return ((uint64_t (*)(char *, uint64_t))v47)(v52, v37);
}

void sub_1007ACCE0(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v2 = sub_1000BA294(&qword_100BE5850);
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v21 - v6;
  __chkstk_darwin(v8);
  v10 = (char *)&v21 - v9;
  __chkstk_darwin(v11);
  v13 = (char *)&v21 - v12;
  __chkstk_darwin(v14);
  v16 = (char *)&v21 - v15;
  __chkstk_darwin(v17);
  v19 = (char *)&v21 - v18;
  sub_1007ACEC4((uint64_t)&v21 - v18);
  sub_1007AD0E0((uint64_t)v16);
  sub_1007AD2F8((uint64_t)v13);
  sub_100037794((uint64_t)v19, (uint64_t)v10, &qword_100BE5850);
  sub_100037794((uint64_t)v16, (uint64_t)v7, &qword_100BE5850);
  sub_100037794((uint64_t)v13, (uint64_t)v4, &qword_100BE5850);
  sub_100037794((uint64_t)v10, a1, &qword_100BE5850);
  v20 = sub_1000BA294(&qword_100C06E50);
  sub_100037794((uint64_t)v7, a1 + *(int *)(v20 + 48), &qword_100BE5850);
  sub_100037794((uint64_t)v4, a1 + *(int *)(v20 + 64), &qword_100BE5850);
  sub_100021AA4((uint64_t)v13, &qword_100BE5850);
  sub_100021AA4((uint64_t)v16, &qword_100BE5850);
  sub_100021AA4((uint64_t)v19, &qword_100BE5850);
  sub_100021AA4((uint64_t)v4, &qword_100BE5850);
  sub_100021AA4((uint64_t)v7, &qword_100BE5850);
  sub_100021AA4((uint64_t)v10, &qword_100BE5850);
}

void sub_1007ACEC4(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a1;
  v2 = type metadata accessor for CurrentWeatherEditorView(0);
  v24 = *(_QWORD *)(v2 - 8);
  v3 = *(_QWORD *)(v24 + 64);
  __chkstk_darwin(v2);
  v23 = (uint64_t)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CurrentWeather(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_1000BA294(qword_100BC4E80);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v22 - v12;
  CurrentWeather.temperature.getter(v14);
  v15 = sub_1000BA294(&qword_100BC4E68);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, v15);
  v16 = sub_1000BA294(&qword_100C06D30);
  v17 = State.wrappedValue.getter(v7, v16);
  CurrentWeather.temperature.getter(v17);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v15);
  v18 = v23;
  sub_10000AB54(v1, v23, type metadata accessor for CurrentWeatherEditorView);
  v19 = *(unsigned __int8 *)(v24 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = swift_allocObject(&unk_100B90B60, v20 + v3, v19 | 7);
  sub_1007ADF24(v18, v21 + v20);
  sub_1007AC340();
}

void sub_1007AD0E0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a1;
  v2 = type metadata accessor for CurrentWeatherEditorView(0);
  v24 = *(_QWORD *)(v2 - 8);
  v3 = *(_QWORD *)(v24 + 64);
  __chkstk_darwin(v2);
  v23 = (uint64_t)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CurrentWeather(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_1000BA294(qword_100BC4E80);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v22 - v12;
  CurrentWeather.apparentTemperature.getter(v14);
  v15 = sub_1000BA294(&qword_100BC4E68);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, v15);
  v16 = sub_1000BA294(&qword_100C06D30);
  v17 = State.wrappedValue.getter(v7, v16);
  CurrentWeather.apparentTemperature.getter(v17);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v15);
  v18 = v23;
  sub_10000AB54(v1, v23, type metadata accessor for CurrentWeatherEditorView);
  v19 = *(unsigned __int8 *)(v24 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = swift_allocObject(&unk_100B90B38, v20 + v3, v19 | 7);
  sub_1007ADF24(v18, v21 + v20);
  sub_1007AC340();
}

void sub_1007AD2F8(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a1;
  v2 = type metadata accessor for CurrentWeatherEditorView(0);
  v24 = *(_QWORD *)(v2 - 8);
  v3 = *(_QWORD *)(v24 + 64);
  __chkstk_darwin(v2);
  v23 = (uint64_t)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CurrentWeather(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_1000BA294(qword_100BC4E80);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v22 - v12;
  CurrentWeather.dewPoint.getter(v14);
  v15 = sub_1000BA294(&qword_100BC4E68);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, v15);
  v16 = sub_1000BA294(&qword_100C06D30);
  v17 = State.wrappedValue.getter(v7, v16);
  CurrentWeather.dewPoint.getter(v17);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v15);
  v18 = v23;
  sub_10000AB54(v1, v23, type metadata accessor for CurrentWeatherEditorView);
  v19 = *(unsigned __int8 *)(v24 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = swift_allocObject(&unk_100B90B10, v20 + v3, v19 | 7);
  sub_1007ADF24(v18, v21 + v20);
  sub_1007AC340();
}

uint64_t sub_1007AD510@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (**v34)(uint64_t);
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  void (**v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  char *v45;
  void (*v46)(_QWORD *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v57 = a2;
  v3 = type metadata accessor for CurrentWeatherEditorView(0);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64);
  v52 = *(_QWORD *)(v3 - 8);
  v53 = v4;
  __chkstk_darwin(v3);
  v58 = (uint64_t)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for CurrentWeather(0);
  v6 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v8 = (uint64_t *)((char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v54 = type metadata accessor for PrecipitationAmount(0);
  v51 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v45 = (char *)&v44 - v12;
  v13 = (int *)type metadata accessor for PrecipitationAmountsEditorRowView(0);
  __chkstk_darwin(v13);
  v56 = (uint64_t)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v55 = (uint64_t)&v44 - v16;
  __chkstk_darwin(v17);
  v19 = (char *)&v44 - v18;
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v44 - v22;
  v50 = a1 + *(int *)(v3 + 20);
  CurrentWeather.precipitationAmount.getter(v21);
  v49 = a1 + *(int *)(v3 + 28);
  v47 = a1;
  v48 = sub_1000BA294(&qword_100C06D30);
  State.wrappedValue.getter(v8, v48);
  v24 = v10;
  CurrentWeather.precipitationAmount.getter(v25);
  v46 = *(void (**)(_QWORD *, uint64_t))(v6 + 8);
  v46(v8, v59);
  v26 = v58;
  sub_10000AB54(a1, v58, type metadata accessor for CurrentWeatherEditorView);
  v27 = *(unsigned __int8 *)(v52 + 80);
  v28 = (v27 + 16) & ~v27;
  v52 = v27 | 7;
  v53 += v28;
  v29 = swift_allocObject(&unk_100B90AC0, v53, v27 | 7);
  sub_1007ADF24(v26, v29 + v28);
  *(_QWORD *)v23 = 0xD000000000000014;
  *((_QWORD *)v23 + 1) = 0x8000000100A067C0;
  v30 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
  v31 = v45;
  v32 = v54;
  v30(&v23[v13[5]], v45, v54);
  v33 = ((uint64_t (*)(char *, char *, uint64_t))v30)(&v23[v13[6]], v24, v32);
  v34 = (void (**)(uint64_t))&v23[v13[7]];
  *v34 = sub_1007AE270;
  v34[1] = (void (*)(uint64_t))v29;
  CurrentWeather.snowfallAmount.getter(v33);
  v35 = State.wrappedValue.getter(v8, v48);
  CurrentWeather.snowfallAmount.getter(v35);
  v46(v8, v59);
  v36 = v58;
  sub_10000AB54(v47, v58, type metadata accessor for CurrentWeatherEditorView);
  v37 = swift_allocObject(&unk_100B90AE8, v53, v52);
  sub_1007ADF24(v36, v37 + v28);
  *(_QWORD *)v19 = 0x6C6C6166776F6E73;
  *((_QWORD *)v19 + 1) = 0xEF746E756F6D6120;
  v30(&v19[v13[5]], v31, v32);
  v30(&v19[v13[6]], v24, v32);
  v38 = (void (**)(uint64_t))&v19[v13[7]];
  *v38 = sub_1007AE2B4;
  v38[1] = (void (*)(uint64_t))v37;
  v39 = v55;
  sub_10000AB54((uint64_t)v23, v55, type metadata accessor for PrecipitationAmountsEditorRowView);
  v40 = v56;
  sub_10000AB54((uint64_t)v19, v56, type metadata accessor for PrecipitationAmountsEditorRowView);
  v41 = v57;
  sub_10000AB54(v39, v57, type metadata accessor for PrecipitationAmountsEditorRowView);
  v42 = sub_1000BA294(&qword_100C06E48);
  sub_10000AB54(v40, v41 + *(int *)(v42 + 48), type metadata accessor for PrecipitationAmountsEditorRowView);
  sub_1007AE2C0((uint64_t)v19);
  sub_1007AE2C0((uint64_t)v23);
  sub_1007AE2C0(v40);
  return sub_1007AE2C0(v39);
}

void sub_1007AD92C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a1;
  v2 = type metadata accessor for CurrentWeatherEditorView(0);
  v24 = *(_QWORD *)(v2 - 8);
  v3 = *(_QWORD *)(v24 + 64);
  __chkstk_darwin(v2);
  v23 = (uint64_t)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CurrentWeather(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_1000BA294(&qword_100BDD660);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v22 - v13;
  CurrentWeather.visibility.getter(v12);
  v15 = sub_1000BA294(&qword_100BCB0A8);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 0, 1, v15);
  v16 = sub_1000BA294(&qword_100C06D30);
  State.wrappedValue.getter(v7, v16);
  CurrentWeather.visibility.getter(v17);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v15);
  v18 = v23;
  sub_10000AB54(v1, v23, type metadata accessor for CurrentWeatherEditorView);
  v19 = *(unsigned __int8 *)(v24 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = swift_allocObject(&unk_100B90A98, v20 + v3, v19 | 7);
  sub_1007ADF24(v18, v21 + v20);
  sub_1007AC170();
}

void sub_1007ADB44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void (*v12)(_QWORD *);
  uint64_t v13;
  __n128 v14;
  uint64_t v15;

  v2 = type metadata accessor for PresentationMode(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000BA294(&qword_100BC6510);
  __chkstk_darwin(v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CurrentWeather(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(void (**)(_QWORD *))(a1 + *(int *)(type metadata accessor for CurrentWeatherEditorView(0) + 24));
  v13 = sub_1000BA294(&qword_100C06D30);
  State.wrappedValue.getter(v11, v13);
  v12(v11);
  v14.n128_f64[0] = (*(double (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  sub_1007A5A6C(v14);
  Binding.wrappedValue.getter(v5);
  PresentationMode.dismiss()();
  Binding.wrappedValue.setter(v4, v5);
  sub_100021AA4((uint64_t)v7, &qword_100BC6510);
}

void sub_1007ADCB8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void (*a5)(char *))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  sub_1000BF2C4();
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_100098728();
  v12 = (_QWORD *)(v11 - v10);
  sub_1000BA294(a3);
  sub_10009D98C();
  __chkstk_darwin(v13);
  sub_100098728();
  v16 = v15 - v14;
  v17 = sub_1000BA294(a4);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)&v25 - v22;
  sub_100037794(a1, v16, a3);
  if (_s7Weather24LocationCompositionStateOwet_0(v16, 1, v17) == 1)
  {
    sub_100021AA4(v16, a3);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v23, v16, v17);
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v20, v23, v17);
    sub_1000C4E8C();
    v24 = sub_1000BA294(&qword_100C06D30);
    State.wrappedValue.getter(v12, v24);
    a5(v20);
    State.wrappedValue.setter(v12, v24);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
  }
  sub_100098640();
}

void sub_1007ADE48(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_1000BF2C4();
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_100079FBC();
  v7 = type metadata accessor for PrecipitationAmount(0);
  __chkstk_darwin(v7);
  sub_100098728();
  v10 = v9 - v8;
  (*(void (**)(uint64_t, uint64_t))(v11 + 16))(v9 - v8, a1);
  sub_1000C4E8C();
  v12 = sub_1000BA294(&qword_100C06D30);
  State.wrappedValue.getter(v3, v12);
  a3(v10);
  State.wrappedValue.setter(v3, v12);
  sub_10004A2A0();
}

uint64_t sub_1007ADF18@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_1007AC8D4(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1007ADF24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CurrentWeatherEditorView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1007ADF68()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000C4E8C() - 8) + 80);
  sub_1007ADB44(v0 + ((v1 + 16) & ~v1));
}

void sub_1007ADF90(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, __n128))
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void **v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  __n128 v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27[3];
  _QWORD *v28;

  v7 = *(_QWORD *)(a1 + 16);
  v28 = _swiftEmptyArrayStorage;
  v8 = sub_1000DB130();
  a2(v8);
  v9 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v23 = a4;
    v10 = (void **)(a1 + 48);
    while (1)
    {
      v11 = *(v10 - 1);
      v12 = *v10;
      v27[0] = *(v10 - 2);
      v27[1] = v11;
      v27[2] = v12;
      v13 = v27[0];
      swift_bridgeObjectRetain(v12);
      sub_1000BA294(&qword_100BEB890);
      v14 = sub_1000D0350();
      if (!swift_dynamicCast(&v24, v27, v12, v14, 6))
        break;
      v16 = v24;
      v15 = v25;
      v17 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
      {
        v18 = sub_1000DA234();
        a2(v18);
        v9 = v28;
      }
      v20 = v9[2];
      v19 = v9[3];
      if (v20 >= v19 >> 1)
      {
        ((void (*)(BOOL, unint64_t, uint64_t))a2)(v19 > 1, v20 + 1, 1);
        v9 = v28;
      }
      v10 += 3;
      v9[2] = v20 + 1;
      v21 = &v9[3 * v20];
      v21[4] = v16;
      v21[5] = v15;
      v21[6] = v17;
      if (!--v7)
        goto LABEL_11;
    }
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v22 = swift_release(v9);
    v23(v24, v25, v26, v22);
  }
LABEL_11:
  sub_1000D978C();
}

void sub_1007AE0D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v7;
  void (*v8)(uint64_t);
  _QWORD *v9;
  void **v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  void (*v24)(uint64_t);
  id v25[3];
  _QWORD v26[3];
  _QWORD *v27;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v27 = _swiftEmptyArrayStorage;
    v7 = sub_1000DB130();
    v24 = v8;
    v8(v7);
    v9 = _swiftEmptyArrayStorage;
    v10 = (void **)(a1 + 48);
    do
    {
      v11 = *(v10 - 1);
      v12 = *v10;
      v25[0] = *(v10 - 2);
      v25[1] = v11;
      v25[2] = v12;
      v13 = v25[0];
      swift_bridgeObjectRetain_n(v12, 2);
      v14 = v13;
      v15 = sub_1000D0350();
      v16 = sub_1000BA294(a4);
      swift_dynamicCast(v26, v25, v15, v16, 7);
      v18 = v26[0];
      v17 = v26[1];
      v19 = v26[2];
      swift_bridgeObjectRelease();

      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
      {
        v20 = sub_1000DA234();
        v24(v20);
        v9 = v27;
      }
      v22 = v9[2];
      v21 = v9[3];
      if (v22 >= v21 >> 1)
      {
        ((void (*)(BOOL, unint64_t, uint64_t))v24)(v21 > 1, v22 + 1, 1);
        v9 = v27;
      }
      v10 += 3;
      v9[2] = v22 + 1;
      v23 = &v9[3 * v22];
      v23[4] = v18;
      v23[5] = v17;
      v23[6] = v19;
      --v4;
    }
    while (v4);
  }
  sub_1000D978C();
}

void sub_1007AE210(uint64_t a1@<X8>)
{
  sub_1007ACCE0(a1);
}

uint64_t sub_1007AE218@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1007AD510(*(_QWORD *)(v1 + 16), a1);
}

void sub_1007AE224(uint64_t a1)
{
  sub_1007AE390(a1, &qword_100BDD660, &qword_100BCB0A8, (void (*)(char *))&CurrentWeather.visibility.setter);
}

double sub_1007AE240(void *a1, uint64_t a2, uint64_t a3)
{
  double result;

  if (a1)
  {

    *(_QWORD *)&result = swift_bridgeObjectRelease(a3).n128_u64[0];
  }
  return result;
}

void sub_1007AE270(uint64_t a1)
{
  sub_1007AE27C(a1, (void (*)(uint64_t))&CurrentWeather.rainfallAmount.setter);
}

void sub_1007AE27C(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4;

  sub_1000C4E8C();
  sub_1000987F4();
  sub_1007ADE48(a1, v4, a2);
  sub_100079F70();
}

void sub_1007AE2B4(uint64_t a1)
{
  sub_1007AE27C(a1, (void (*)(uint64_t))&CurrentWeather.snowfallAmount.setter);
}

uint64_t sub_1007AE2C0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PrecipitationAmountsEditorRowView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1007AE300(uint64_t a1)
{
  sub_1007AE390(a1, qword_100BC4E80, &qword_100BC4E68, (void (*)(char *))&CurrentWeather.dewPoint.setter);
}

void sub_1007AE31C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = sub_100075DC0(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(v3, v4, v5);
  sub_10004A298();
}

void sub_1007AE354(uint64_t a1)
{
  sub_1007AE390(a1, qword_100BC4E80, &qword_100BC4E68, (void (*)(char *))&CurrentWeather.apparentTemperature.setter);
}

void sub_1007AE374(uint64_t a1)
{
  sub_1007AE390(a1, qword_100BC4E80, &qword_100BC4E68, (void (*)(char *))&CurrentWeather.temperature.setter);
}

void sub_1007AE390(uint64_t a1, uint64_t *a2, uint64_t *a3, void (*a4)(char *))
{
  uint64_t v8;

  sub_1000C4E8C();
  sub_1000987F4();
  sub_1007ADCB8(a1, v8, a2, a3, a4);
  sub_10004A2A0();
}

uint64_t sub_1007AE3D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v0 = sub_100075EB0(&qword_100C06DE8);
  v1 = sub_100075EB0(&qword_100BC4FA0);
  v2 = sub_100075EB0(&qword_100C06DE0);
  v3 = sub_100075EB0(&qword_100C06DD8);
  v4 = type metadata accessor for InsetGroupedListStyle(255);
  sub_10003D310(&qword_100C06E00, &qword_100C06DD8, (uint64_t)&protocol conformance descriptor for List<A, B>);
  v10 = v3;
  v11 = v4;
  v12 = v5;
  v13 = &protocol witness table for InsetGroupedListStyle;
  v6 = sub_10009885C((uint64_t)&v10, (uint64_t)&opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>);
  v10 = v2;
  v11 = v6;
  v7 = sub_10009885C((uint64_t)&v10, (uint64_t)&opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>);
  sub_10003D310(&qword_100BC4FC0, &qword_100BC4FA0, (uint64_t)&protocol conformance descriptor for Button<A>);
  v10 = v0;
  v11 = v1;
  v12 = v7;
  v13 = v8;
  return sub_10009885C((uint64_t)&v10, (uint64_t)&opaque type descriptor for <<opaque return type of View.navigationBarItems<A>(trailing:)>>);
}

uint64_t sub_1007AE4E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_BYTE *, _QWORD);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[32];

  v0 = WeatherDataRequest.rawValue.getter(10);
  v2 = v1;
  v3 = (uint64_t (*)(_BYTE *, _QWORD))WeatherServiceFetchOptions.requestDenyList.modify(v10);
  v5 = v4;
  sub_10048BD9C();
  v6 = *(_QWORD *)(*v5 + 16);
  sub_1001ADD88(v6);
  v7 = *v5;
  *(_QWORD *)(v7 + 16) = v6 + 1;
  v8 = v7 + 16 * v6;
  *(_QWORD *)(v8 + 32) = v0;
  *(_QWORD *)(v8 + 40) = v2;
  return v3(v10, 0);
}

uint64_t sub_1007AE588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  double v23;
  uint64_t v24;
  double (*v25)(uint64_t *, uint64_t, uint64_t);
  double v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  __n128 v46;
  unint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t);
  unsigned int v51;
  uint64_t *v52;
  uint64_t v53;
  void (*v54)(uint64_t);
  unsigned int v55;
  uint64_t v56;
  void (*v58)(uint64_t);
  void (*v60)(uint64_t, uint64_t);
  void (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t, __n128);
  uint64_t v68;
  double (*v69)(uint64_t *, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  Swift::String v79;

  v78 = type metadata accessor for WeatherFormatPlaceholder(0);
  v66 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  sub_100088FDC();
  v77 = v4;
  v5 = sub_1000BA294(&qword_100BC3340);
  __chkstk_darwin(v5);
  sub_100088FDC();
  v74 = v6;
  v73 = type metadata accessor for WeatherFormatScaling(0);
  v7 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  sub_100088FDC();
  v72 = v8;
  v71 = type metadata accessor for NSUnitLength.WeatherFormatUsage(0);
  v9 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  sub_100088FDC();
  v70 = v10;
  v76 = type metadata accessor for NSUnitLength.BaseWeatherFormatStyle(0);
  v64 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  sub_100088FDC();
  v56 = v11;
  v12 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v79._countAndFlagsBits = 0xD000000000000120;
  v79._object = (void *)0x8000000100A14460;
  v13._object = (void *)0x8000000100A14430;
  v13._countAndFlagsBits = 0xD000000000000024;
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, (NSBundle)v12, v14, v79);

  v16 = sub_1000BA294(&qword_100BCE380);
  v17 = type metadata accessor for WeatherDescription.Argument(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 72);
  v20 = *(unsigned __int8 *)(v18 + 80);
  v21 = (v20 + 32) & ~v20;
  v68 = swift_allocObject(v16, v21 - v19 + 8 * v19, v20 | 7);
  *(_OWORD *)(v68 + 16) = xmmword_10098C750;
  v22 = (_QWORD *)(v68 + v21);
  v75 = sub_1000BA294(&qword_100BCB0A8);
  v23 = Measurement.value.getter(v75);
  *v22 = Double.pluralRuleInteger.getter(v23);
  v24 = enum case for WeatherDescription.Argument.pluralRule(_:);
  v25 = *(double (**)(uint64_t *, uint64_t, uint64_t))(v18 + 104);
  sub_1000BCAAC(v68 + v21);
  v26 = Measurement.value.getter(v75);
  *(_QWORD *)(v68 + v21 + v19) = Double.pluralRuleInteger.getter(v26);
  v69 = v25;
  v25((uint64_t *)(v68 + v21 + v19), v24, v17);
  v27 = (_QWORD *)(v68 + v21 + 2 * v19);
  *v27 = a1;
  v27[1] = a2;
  sub_1000BCAAC((uint64_t)v27);
  v28 = (_QWORD *)(v68 + v21 + 3 * v19);
  *v28 = a3;
  v28[1] = a4;
  sub_1000BCAAC((uint64_t)v28);
  v52 = (uint64_t *)(v68 + v21 + 4 * v19);
  LODWORD(a3) = enum case for NSUnitLength.WeatherFormatUsage.rainfall(_:);
  v58 = *(void (**)(uint64_t))(v9 + 104);
  v58(v70);
  v55 = enum case for WeatherFormatScaling.asProvidedButRounded(_:);
  v54 = *(void (**)(uint64_t))(v7 + 104);
  v54(v72);
  v53 = type metadata accessor for Locale(0);
  _s7Weather24LocationCompositionStateOwst_0(v74, 1, 1, v53);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  v30 = static Set<>.full.getter(v29);
  static WeatherFormatStyle<>.weather(_:usage:scaling:trimLeadingZeroes:locale:)(v30, v70, v72, 2, v74);
  swift_bridgeObjectRelease(v30);
  sub_1000AA25C(v74);
  v63 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v63(v72, v73);
  v60 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v60(v70, v71);
  v51 = enum case for WeatherFormatPlaceholder.none(_:);
  v50 = *(void (**)(uint64_t))(v66 + 104);
  v50(v77);
  v49 = type metadata accessor for UnitManager(0);
  v31 = static UnitManager.standard.getter(v49);
  v48 = sub_1000A9328();
  v32 = Measurement.formatted<A>(_:placeholder:unitManager:)(v56, v77, v31, &protocol witness table for UnitManager, v75, v76, v48);
  v34 = v33;
  v35 = swift_release(v31);
  v67 = *(void (**)(uint64_t, uint64_t, __n128))(v66 + 8);
  v67(v77, v78, v35);
  v65 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
  v65(v56, v76);
  *v52 = v32;
  v52[1] = v34;
  v36 = enum case for WeatherDescription.Argument.measurement(_:);
  ((void (*)(void))v25)();
  *(_QWORD *)((char *)v22 + 5 * v19) = 30;
  ((void (*)(void))v25)();
  v37 = (_QWORD *)((char *)v22 + 6 * v19);
  ((void (*)(uint64_t, _QWORD, uint64_t))v58)(v70, a3, v71);
  ((void (*)(uint64_t, _QWORD, uint64_t))v54)(v72, v55, v73);
  v38 = _s7Weather24LocationCompositionStateOwst_0(v74, 1, 1, v53);
  v39 = static Set<>.full.getter(v38);
  static WeatherFormatStyle<>.weather(_:usage:scaling:trimLeadingZeroes:locale:)(v39, v70, v72, 2, v74);
  swift_bridgeObjectRelease(v39);
  sub_1000AA25C(v74);
  v63(v72, v73);
  v60(v70, v71);
  v40 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t))v50)(v77, v51, v78);
  v41 = static UnitManager.standard.getter(v40);
  v42 = Measurement.formatted<A>(_:placeholder:unitManager:)(v56, v77, v41, &protocol witness table for UnitManager, v75, v76, v48);
  v44 = v43;
  v45 = swift_release(v41);
  v67(v77, v78, v45);
  v65(v56, v76);
  *v37 = v42;
  v37[1] = v44;
  v46.n128_f64[0] = v69(v37, v36, v17);
  return WeatherDescription.init(format:_:)(v15._countAndFlagsBits, v15._object, v68, v46);
}

ValueMetadata *type metadata accessor for PrecipitationAveragesSummaryStringBuilder()
{
  return &type metadata for PrecipitationAveragesSummaryStringBuilder;
}

uint64_t sub_1007AEC04(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 0x73656C6369747261 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73656C6369747261, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1007AECF8(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E6F697461636F6CLL;
  else
    return 0x73656C6369747261;
}

uint64_t sub_1007AED28(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  char v20;
  uint64_t v21;

  v3 = v1;
  v5 = sub_1000BA294(&qword_100C06F20);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100098728();
  v9 = v8 - v7;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1007AF228();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NewsArticlePlacement.CodingKeys, &type metadata for NewsArticlePlacement.CodingKeys, v12, v10, v11);
  v21 = *v3;
  v20 = 0;
  v13 = sub_1000BA294(&qword_100C06F08);
  v14 = sub_1007AF2E4(&qword_100C06F28, &qword_100BDBCF0, (uint64_t)&unk_1009D11E8, (uint64_t)&protocol conformance descriptor for <A> [A]);
  sub_1000C26D4((uint64_t)&v21, (uint64_t)&v20, v5, v13, v14);
  if (!v2)
  {
    v15 = (uint64_t)v3 + *(int *)(type metadata accessor for NewsArticlePlacement(0) + 20);
    v19 = 1;
    v16 = type metadata accessor for ArticlePlacementLocation(0);
    v17 = sub_100051B90(&qword_100C06F30, (uint64_t (*)(uint64_t))&type metadata accessor for ArticlePlacementLocation, (uint64_t)&protocol conformance descriptor for ArticlePlacementLocation);
    sub_1000C26D4(v15, (uint64_t)&v19, v5, v16, v17);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

void sub_1007AEEA8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;

  v16 = type metadata accessor for ArticlePlacementLocation(0);
  v14 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  sub_100098728();
  v5 = v4 - v3;
  v17 = sub_1000BA294(&qword_100C06EF8);
  __chkstk_darwin(v17);
  sub_100098728();
  v6 = type metadata accessor for NewsArticlePlacement(0);
  __chkstk_darwin(v6);
  sub_100098728();
  v9 = (char *)(v8 - v7);
  v11 = a1[3];
  v10 = a1[4];
  sub_1000DB418(a1, v11);
  v12 = sub_1007AF228();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NewsArticlePlacement.CodingKeys, &type metadata for NewsArticlePlacement.CodingKeys, v12, v11, v10);
  if (v18)
  {
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  }
  else
  {
    v13 = sub_1000BA294(&qword_100C06F08);
    v20 = 0;
    sub_1007AF2E4(&qword_100C06F10, &qword_100BDBC98, (uint64_t)&unk_1009D1210, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v13, &v20, v17);
    *(_QWORD *)v9 = v21;
    v19 = 1;
    sub_100051B90(&qword_100C06F18, (uint64_t (*)(uint64_t))&type metadata accessor for ArticlePlacementLocation, (uint64_t)&protocol conformance descriptor for ArticlePlacementLocation);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, &v19, v17);
    sub_1000BCAB8();
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 32))(&v9[*(int *)(v6 + 20)], v5, v16);
    sub_1007AF264((uint64_t)v9, a2);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
    sub_1007AF2A8((uint64_t)v9);
  }
}

#error "1007AF120: call analysis failed (funcsize=21)"

uint64_t sub_1007AF158()
{
  char *v0;

  return sub_1007AECF8(*v0);
}

uint64_t sub_1007AF160@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1007AEC04(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1007AF184(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007AF228();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1007AF1AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007AF228();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1007AF1D4()
{
  sub_1006B6404();
}

void sub_1007AF1E8()
{
  sub_1006B6364();
}

void sub_1007AF1FC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1007AEEA8(a1, a2);
}

uint64_t sub_1007AF210(_QWORD *a1)
{
  return sub_1007AED28(a1);
}

unint64_t sub_1007AF228()
{
  unint64_t result;

  result = qword_100C06F00;
  if (!qword_100C06F00)
  {
    result = swift_getWitnessTable(&unk_1009CA670, &type metadata for NewsArticlePlacement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C06F00);
  }
  return result;
}

uint64_t sub_1007AF264(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NewsArticlePlacement(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1007AF2A8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NewsArticlePlacement(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1007AF2E4(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_100075EB0(&qword_100C06F08);
    sub_100051B90(a2, type metadata accessor for NewsArticle, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NewsArticlePlacement.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1007AF3B4 + 4 * byte_1009CA4C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1007AF3E8 + 4 * byte_1009CA4C0[v4]))();
}

uint64_t sub_1007AF3E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007AF3F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1007AF3F8);
  return result;
}

uint64_t sub_1007AF404(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1007AF40CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1007AF410(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007AF418(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NewsArticlePlacement.CodingKeys()
{
  return &type metadata for NewsArticlePlacement.CodingKeys;
}

uint64_t *sub_1007AF434(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for ArticlePlacementLocation(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_1007AF4CC(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for ArticlePlacementLocation(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *sub_1007AF514(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = *a2;
  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for ArticlePlacementLocation(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t *sub_1007AF584(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for ArticlePlacementLocation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_QWORD *sub_1007AF5F8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for ArticlePlacementLocation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *sub_1007AF654(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for ArticlePlacementLocation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_1007AF6C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1007AF6CC);
}

uint64_t sub_1007AF6CC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for ArticlePlacementLocation(0);
    return _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_1007AF740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1007AF74C);
}

_QWORD *sub_1007AF74C(_QWORD *result, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for ArticlePlacementLocation(0);
    return (_QWORD *)_s7Weather24LocationCompositionStateOwst_0((uint64_t)v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

unint64_t sub_1007AF7BC()
{
  unint64_t result;

  result = qword_100C06FC8;
  if (!qword_100C06FC8)
  {
    result = swift_getWitnessTable(&unk_1009CA648, &type metadata for NewsArticlePlacement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C06FC8);
  }
  return result;
}

unint64_t sub_1007AF7FC()
{
  unint64_t result;

  result = qword_100C06FD0;
  if (!qword_100C06FD0)
  {
    result = swift_getWitnessTable(&unk_1009CA5B8, &type metadata for NewsArticlePlacement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C06FD0);
  }
  return result;
}

unint64_t sub_1007AF83C()
{
  unint64_t result;

  result = qword_100C06FD8;
  if (!qword_100C06FD8)
  {
    result = swift_getWitnessTable(&unk_1009CA5E0, &type metadata for NewsArticlePlacement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C06FD8);
  }
  return result;
}

uint64_t *sub_1007AF878(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  int EnumCaseMultiPayload;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return a1;
  }
  v7 = type metadata accessor for WeatherMapOverlayKind(0);
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  v8 = *(int *)(a3 + 20);
  v9 = (uint64_t *)((char *)a1 + v8);
  v10 = (char *)a2 + v8;
  v11 = *(uint64_t *)((char *)a2 + v8 + 8);
  *v9 = *(uint64_t *)((char *)a2 + v8);
  v9[1] = v11;
  v12 = (int *)type metadata accessor for WeatherData(0);
  v13 = v12[5];
  v14 = (char *)v9 + v13;
  v15 = &v10[v13];
  v16 = type metadata accessor for Locale(0);
  swift_bridgeObjectRetain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v16))
  {
    v17 = sub_1000BA294(&qword_100BC3340);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 0, 1, v16);
  }
  v19 = v12[6];
  v20 = (char *)v9 + v19;
  v21 = &v10[v19];
  v22 = type metadata accessor for WeatherDataModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = v12[7];
  v24 = (char *)v9 + v23;
  v25 = &v10[v23];
  v26 = sub_1000BA294(&qword_100BC3348);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v25, 1, v26))
  {
    v27 = type metadata accessor for WeatherData.CachingState(0);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v28 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v24, v25, v28);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v24, 0, 1, v26);
  }
  v29 = v12[8];
  v30 = (_QWORD *)((char *)v9 + v29);
  v31 = &v10[v29];
  v32 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v31);
  if (EnumCaseMultiPayload == 1)
  {
    v38 = type metadata accessor for WeatherStatisticsModel(0);
    (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v30, v31, v38);
    v35 = v30;
    v36 = v32;
    v37 = 1;
    goto LABEL_13;
  }
  if (!EnumCaseMultiPayload)
  {
    v34 = *((_QWORD *)v31 + 1);
    *v30 = *(_QWORD *)v31;
    v30[1] = v34;
    swift_bridgeObjectRetain();
    v35 = v30;
    v36 = v32;
    v37 = 0;
LABEL_13:
    swift_storeEnumTagMultiPayload(v35, v36, v37);
    goto LABEL_15;
  }
  memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
LABEL_15:
  v39 = v12[9];
  v40 = (char *)v9 + v39;
  v41 = &v10[v39];
  v42 = type metadata accessor for WeatherDataOverrides(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v41, 1, v42))
  {
    v43 = sub_1000BA294(&qword_100BC3350);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    v44 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v41, 1, v44))
    {
      v45 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v40, v41, v44);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v40, 0, 1, v44);
    }
    v46 = *(int *)(v42 + 20);
    v47 = &v40[v46];
    v48 = &v41[v46];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v48, 1, v44))
    {
      v49 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v47, v48, v44);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v47, 0, 1, v44);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v40, 0, 1, v42);
  }
  return a1;
}

uint64_t sub_1007AFC30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  int EnumCaseMultiPayload;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;

  v6 = type metadata accessor for WeatherMapOverlayKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a2 + v7 + 8);
  *v8 = *(_QWORD *)(a2 + v7);
  v8[1] = v10;
  v11 = (int *)type metadata accessor for WeatherData(0);
  v12 = v11[5];
  v13 = (char *)v8 + v12;
  v14 = (const void *)(v9 + v12);
  v15 = type metadata accessor for Locale(0);
  swift_bridgeObjectRetain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, v15))
  {
    v16 = sub_1000BA294(&qword_100BC3340);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, v15);
  }
  v17 = v11[6];
  v18 = (char *)v8 + v17;
  v19 = v9 + v17;
  v20 = type metadata accessor for WeatherDataModel(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  v21 = v11[7];
  v22 = (char *)v8 + v21;
  v23 = (const void *)(v9 + v21);
  v24 = sub_1000BA294(&qword_100BC3348);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v23, 1, v24))
  {
    v25 = type metadata accessor for WeatherData.CachingState(0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v26 = type metadata accessor for Date(0);
    (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v22, v23, v26);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v22, 0, 1, v24);
  }
  v27 = v11[8];
  v28 = (_QWORD *)((char *)v8 + v27);
  v29 = (_QWORD *)(v9 + v27);
  v30 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v29);
  if (EnumCaseMultiPayload == 1)
  {
    v36 = type metadata accessor for WeatherStatisticsModel(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v28, v29, v36);
    v33 = v28;
    v34 = v30;
    v35 = 1;
    goto LABEL_11;
  }
  if (!EnumCaseMultiPayload)
  {
    v32 = v29[1];
    *v28 = *v29;
    v28[1] = v32;
    swift_bridgeObjectRetain();
    v33 = v28;
    v34 = v30;
    v35 = 0;
LABEL_11:
    swift_storeEnumTagMultiPayload(v33, v34, v35);
    goto LABEL_13;
  }
  memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
LABEL_13:
  v37 = v11[9];
  v38 = (char *)v8 + v37;
  v39 = (char *)(v9 + v37);
  v40 = type metadata accessor for WeatherDataOverrides(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v39, 1, v40))
  {
    v41 = sub_1000BA294(&qword_100BC3350);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    v42 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v39, 1, v42))
    {
      v43 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v38, v39, v42);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v38, 0, 1, v42);
    }
    v44 = *(int *)(v40 + 20);
    v45 = &v38[v44];
    v46 = &v39[v44];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v46, 1, v42))
    {
      v47 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v45, v46, v42);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v45, 0, 1, v42);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v38, 0, 1, v40);
  }
  return a1;
}

uint64_t sub_1007AFFBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  const void *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  const void *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  int EnumCaseMultiPayload;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  size_t v48;
  void *v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;

  v6 = type metadata accessor for WeatherMapOverlayKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = a2 + v7;
  *v8 = *(_QWORD *)(a2 + v7);
  v8[1] = *(_QWORD *)(a2 + v7 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = (int *)type metadata accessor for WeatherData(0);
  v11 = v10[5];
  v12 = (char *)v8 + v11;
  v13 = (const void *)(v9 + v11);
  v14 = type metadata accessor for Locale(0);
  v15 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v14);
  v16 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v14);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v17 = *(_QWORD *)(v14 - 8);
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v12, v14);
LABEL_6:
    v18 = sub_1000BA294(&qword_100BC3340);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, const void *, uint64_t))(v17 + 24))(v12, v13, v14);
LABEL_7:
  v19 = v10[6];
  v20 = (char *)v8 + v19;
  v21 = v9 + v19;
  v22 = type metadata accessor for WeatherDataModel(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = v10[7];
  v24 = (char *)v8 + v23;
  v25 = (const void *)(v9 + v23);
  v26 = sub_1000BA294(&qword_100BC3348);
  v27 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v24, 1, v26);
  v28 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v25, 1, v26);
  if (v27)
  {
    if (!v28)
    {
      v29 = type metadata accessor for Date(0);
      (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v24, v25, v29);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v24, 0, 1, v26);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    sub_10025C6F0((uint64_t)v24);
LABEL_12:
    v30 = type metadata accessor for WeatherData.CachingState(0);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  v51 = type metadata accessor for Date(0);
  (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v51 - 8) + 24))(v24, v25, v51);
LABEL_13:
  if (a1 == a2)
    goto LABEL_20;
  v31 = v10[8];
  v32 = (_QWORD *)((char *)v8 + v31);
  v33 = (_QWORD *)(v9 + v31);
  sub_10006BD20((uint64_t)v8 + v31, type metadata accessor for WeatherData.WeatherStatisticsState);
  v34 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v33);
  if (EnumCaseMultiPayload == 1)
  {
    v39 = type metadata accessor for WeatherStatisticsModel(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v32, v33, v39);
    v36 = v32;
    v37 = v34;
    v38 = 1;
    goto LABEL_18;
  }
  if (!EnumCaseMultiPayload)
  {
    *v32 = *v33;
    v32[1] = v33[1];
    swift_bridgeObjectRetain();
    v36 = v32;
    v37 = v34;
    v38 = 0;
LABEL_18:
    swift_storeEnumTagMultiPayload(v36, v37, v38);
    goto LABEL_20;
  }
  memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
LABEL_20:
  v40 = v10[9];
  v41 = (char *)v8 + v40;
  v42 = (char *)(v9 + v40);
  v43 = type metadata accessor for WeatherDataOverrides(0);
  v44 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v41, 1, v43);
  v45 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v42, 1, v43);
  if (v44)
  {
    if (!v45)
    {
      v46 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v42, 1, v46))
      {
        v47 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v41, v42, v46);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v41, 0, 1, v46);
      }
      v55 = *(int *)(v43 + 20);
      v56 = &v41[v55];
      v57 = &v42[v55];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v57, 1, v46))
      {
        v58 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v56, v57, v46);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v56, 0, 1, v46);
      }
      v59 = (uint64_t)v41;
      v60 = v43;
      goto LABEL_38;
    }
    goto LABEL_26;
  }
  if (v45)
  {
    sub_10006BD20((uint64_t)v41, type metadata accessor for WeatherDataOverrides);
LABEL_26:
    v48 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC3350) - 8) + 64);
    v49 = v41;
    v50 = v42;
    goto LABEL_27;
  }
  v52 = type metadata accessor for Date(0);
  v53 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v41, 1, v52);
  v54 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v42, 1, v52);
  if (!v53)
  {
    v62 = *(_QWORD *)(v52 - 8);
    if (!v54)
    {
      (*(void (**)(char *, char *, uint64_t))(v62 + 24))(v41, v42, v52);
      goto LABEL_43;
    }
    (*(void (**)(char *, uint64_t))(v62 + 8))(v41, v52);
    goto LABEL_42;
  }
  if (v54)
  {
LABEL_42:
    v63 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v41, v42, v52);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v41, 0, 1, v52);
LABEL_43:
  v64 = *(int *)(v43 + 20);
  v65 = (uint64_t)&v41[v64];
  v66 = (uint64_t)&v42[v64];
  v67 = _s7Weather24LocationCompositionStateOwet_0(v65, 1, v52);
  v68 = _s7Weather24LocationCompositionStateOwet_0(v66, 1, v52);
  if (v67)
  {
    if (!v68)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v65, v66, v52);
      v59 = v65;
      v60 = v52;
LABEL_38:
      _s7Weather24LocationCompositionStateOwst_0(v59, 0, 1, v60);
      return a1;
    }
  }
  else
  {
    v69 = *(_QWORD *)(v52 - 8);
    if (!v68)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 24))(v65, v66, v52);
      return a1;
    }
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v65, v52);
  }
  v48 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
  v49 = (void *)v65;
  v50 = (const void *)v66;
LABEL_27:
  memcpy(v49, v50, v48);
  return a1;
}

uint64_t sub_1007B05A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;

  v6 = type metadata accessor for WeatherMapOverlayKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v10 = (int *)type metadata accessor for WeatherData(0);
  v11 = v10[5];
  v12 = (void *)(v8 + v11);
  v13 = (const void *)(v9 + v11);
  v14 = type metadata accessor for Locale(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v14))
  {
    v15 = sub_1000BA294(&qword_100BC3340);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v14);
  }
  v16 = v10[6];
  v17 = v8 + v16;
  v18 = v9 + v16;
  v19 = type metadata accessor for WeatherDataModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  v20 = v10[7];
  v21 = (void *)(v8 + v20);
  v22 = (const void *)(v9 + v20);
  v23 = sub_1000BA294(&qword_100BC3348);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v22, 1, v23))
  {
    v24 = type metadata accessor for WeatherData.CachingState(0);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v25 = type metadata accessor for Date(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v21, v22, v25);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v21, 0, 1, v23);
  }
  v26 = v10[8];
  v27 = (void *)(v8 + v26);
  v28 = (const void *)(v9 + v26);
  v29 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
  if (swift_getEnumCaseMultiPayload(v28) == 1)
  {
    v30 = type metadata accessor for WeatherStatisticsModel(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v27, v28, v30);
    swift_storeEnumTagMultiPayload(v27, v29, 1);
  }
  else
  {
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  v31 = v10[9];
  v32 = (char *)(v8 + v31);
  v33 = (char *)(v9 + v31);
  v34 = type metadata accessor for WeatherDataOverrides(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v33, 1, v34))
  {
    v35 = sub_1000BA294(&qword_100BC3350);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    v36 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v33, 1, v36))
    {
      v37 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v32, v33, v36);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v32, 0, 1, v36);
    }
    v38 = *(int *)(v34 + 20);
    v39 = &v32[v38];
    v40 = &v33[v38];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v40, 1, v36))
    {
      v41 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v39, v40, v36);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v39, 0, 1, v36);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v32, 0, 1, v34);
  }
  return a1;
}

uint64_t sub_1007B090C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  const void *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  const void *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  void *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;

  v6 = type metadata accessor for WeatherMapOverlayKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a2 + v7 + 8);
  *v8 = *(_QWORD *)(a2 + v7);
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v11 = (int *)type metadata accessor for WeatherData(0);
  v12 = v11[5];
  v13 = (char *)v8 + v12;
  v14 = (const void *)(v9 + v12);
  v15 = type metadata accessor for Locale(0);
  v16 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v15);
  v17 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, v15);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v18 = *(_QWORD *)(v15 - 8);
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v13, v15);
LABEL_6:
    v19 = sub_1000BA294(&qword_100BC3340);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, const void *, uint64_t))(v18 + 40))(v13, v14, v15);
LABEL_7:
  v20 = v11[6];
  v21 = (char *)v8 + v20;
  v22 = v9 + v20;
  v23 = type metadata accessor for WeatherDataModel(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 40))(v21, v22, v23);
  v24 = v11[7];
  v25 = (char *)v8 + v24;
  v26 = (const void *)(v9 + v24);
  v27 = sub_1000BA294(&qword_100BC3348);
  v28 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v25, 1, v27);
  v29 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v26, 1, v27);
  if (v28)
  {
    if (!v29)
    {
      v30 = type metadata accessor for Date(0);
      (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v25, v26, v30);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v25, 0, 1, v27);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v29)
  {
    sub_10025C6F0((uint64_t)v25);
LABEL_12:
    v31 = type metadata accessor for WeatherData.CachingState(0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  v48 = type metadata accessor for Date(0);
  (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v48 - 8) + 40))(v25, v26, v48);
LABEL_13:
  if (a1 != a2)
  {
    v32 = v11[8];
    v33 = (char *)v8 + v32;
    v34 = (const void *)(v9 + v32);
    sub_10006BD20((uint64_t)v8 + v32, type metadata accessor for WeatherData.WeatherStatisticsState);
    v35 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
    if (swift_getEnumCaseMultiPayload(v34) == 1)
    {
      v36 = type metadata accessor for WeatherStatisticsModel(0);
      (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v33, v34, v36);
      swift_storeEnumTagMultiPayload(v33, v35, 1);
    }
    else
    {
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
  }
  v37 = v11[9];
  v38 = (char *)v8 + v37;
  v39 = (char *)(v9 + v37);
  v40 = type metadata accessor for WeatherDataOverrides(0);
  v41 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v38, 1, v40);
  v42 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v39, 1, v40);
  if (v41)
  {
    if (!v42)
    {
      v43 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v39, 1, v43))
      {
        v44 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v38, v39, v43);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v38, 0, 1, v43);
      }
      v52 = *(int *)(v40 + 20);
      v53 = &v38[v52];
      v54 = &v39[v52];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v54, 1, v43))
      {
        v55 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v53, v54, v43);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v53, 0, 1, v43);
      }
      v56 = (uint64_t)v38;
      v57 = v40;
      goto LABEL_35;
    }
    goto LABEL_23;
  }
  if (v42)
  {
    sub_10006BD20((uint64_t)v38, type metadata accessor for WeatherDataOverrides);
LABEL_23:
    v45 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC3350) - 8) + 64);
    v46 = v38;
    v47 = v39;
    goto LABEL_24;
  }
  v49 = type metadata accessor for Date(0);
  v50 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v38, 1, v49);
  v51 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v39, 1, v49);
  if (!v50)
  {
    v59 = *(_QWORD *)(v49 - 8);
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v59 + 40))(v38, v39, v49);
      goto LABEL_40;
    }
    (*(void (**)(char *, uint64_t))(v59 + 8))(v38, v49);
    goto LABEL_39;
  }
  if (v51)
  {
LABEL_39:
    v60 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_40;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v38, v39, v49);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v38, 0, 1, v49);
LABEL_40:
  v61 = *(int *)(v40 + 20);
  v62 = (uint64_t)&v38[v61];
  v63 = (uint64_t)&v39[v61];
  v64 = _s7Weather24LocationCompositionStateOwet_0(v62, 1, v49);
  v65 = _s7Weather24LocationCompositionStateOwet_0(v63, 1, v49);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v62, v63, v49);
      v56 = v62;
      v57 = v49;
LABEL_35:
      _s7Weather24LocationCompositionStateOwst_0(v56, 0, 1, v57);
      return a1;
    }
  }
  else
  {
    v66 = *(_QWORD *)(v49 - 8);
    if (!v65)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 40))(v62, v63, v49);
      return a1;
    }
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v62, v49);
  }
  v45 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
  v46 = (void *)v62;
  v47 = (const void *)v63;
LABEL_24:
  memcpy(v46, v47, v45);
  return a1;
}

uint64_t sub_1007B0EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1007B0ECC);
}

uint64_t sub_1007B0ECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1000C2698();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = v4;
  }
  else
  {
    v7 = type metadata accessor for WeatherData(0);
    v8 = v4 + *(int *)(a3 + 20);
  }
  return _s7Weather24LocationCompositionStateOwet_0(v8, v3, v7);
}

uint64_t sub_1007B0F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1007B0F34);
}

uint64_t sub_1007B0F34(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = sub_1000C2698();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = v5;
  }
  else
  {
    v9 = type metadata accessor for WeatherData(0);
    v10 = v5 + *(int *)(a4 + 20);
  }
  return _s7Weather24LocationCompositionStateOwst_0(v10, v4, v4, v9);
}

void sub_1007B0F98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((static WeatherMapOverlayKind.== infix(_:_:)(a1, a2) & 1) != 0)
  {
    v4 = *(int *)(type metadata accessor for MapComponent(0) + 20);
    sub_1000FAF2C((uint64_t *)(a1 + v4), (uint64_t *)(a2 + v4));
  }
}

uint64_t sub_1007B0FE4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;

  v15 = type metadata accessor for WeatherData(0);
  __chkstk_darwin(v15);
  sub_100088FDC();
  v17 = v4;
  v19 = type metadata accessor for WeatherMapOverlayKind(0);
  v16 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  sub_100088FDC();
  v18 = v5;
  v20 = sub_1000BA294(&qword_100C07070);
  __chkstk_darwin(v20);
  sub_100098728();
  v6 = type metadata accessor for MapComponent(0);
  __chkstk_darwin(v6);
  sub_100098728();
  v9 = v8 - v7;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1007B15D4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MapComponent.CodingKeys, &type metadata for MapComponent.CodingKeys, v12, v10, v11);
  if (v2)
    return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  v22 = 0;
  sub_100051B90(&qword_100BD2568, (uint64_t (*)(uint64_t))&type metadata accessor for WeatherMapOverlayKind, (uint64_t)&protocol conformance descriptor for WeatherMapOverlayKind);
  sub_1000DD130(v19, (uint64_t)&v22, v20, v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v9, v18, v19);
  v21 = 1;
  sub_100051B90(&qword_100BCF1E0, type metadata accessor for WeatherData, (uint64_t)&unk_1009CD624);
  sub_1000DD130(v15, (uint64_t)&v21, v20, v15);
  sub_1000BB1F8();
  sub_10014DEC0(v17, v9 + *(int *)(v6 + 20));
  sub_1007B1610(v9, a2);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  return sub_10006BD20(v9, type metadata accessor for MapComponent);
}

uint64_t sub_1007B125C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 0x4B79616C7265766FLL && a2 == 0xEB00000000646E69)
  {
    v5 = 0xEB00000000646E69;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4B79616C7265766FLL, 0xEB00000000646E69, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x4472656874616577 && a2 == 0xEB00000000617461)
  {
    swift_bridgeObjectRelease(0xEB00000000617461);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4472656874616577, 0xEB00000000617461, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1007B1378(char a1)
{
  if ((a1 & 1) != 0)
    return 0x4472656874616577;
  else
    return 0x4B79616C7265766FLL;
}

uint64_t sub_1007B13C0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  char v20;

  v3 = v1;
  v5 = sub_1000BA294(&qword_100C07080);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100098728();
  v9 = v8 - v7;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1007B15D4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MapComponent.CodingKeys, &type metadata for MapComponent.CodingKeys, v12, v10, v11);
  v20 = 0;
  v13 = type metadata accessor for WeatherMapOverlayKind(0);
  v14 = sub_100051B90(&qword_100BD2590, (uint64_t (*)(uint64_t))&type metadata accessor for WeatherMapOverlayKind, (uint64_t)&protocol conformance descriptor for WeatherMapOverlayKind);
  sub_1000C26D4(v3, (uint64_t)&v20, v5, v13, v14);
  if (!v2)
  {
    v15 = v3 + *(int *)(type metadata accessor for MapComponent(0) + 20);
    v19 = 1;
    v16 = type metadata accessor for WeatherData(0);
    v17 = sub_100051B90(&qword_100BCF1F0, type metadata accessor for WeatherData, (uint64_t)&unk_1009CD5FC);
    sub_1000C26D4(v15, (uint64_t)&v19, v5, v16, v17);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1007B152C()
{
  char *v0;

  return sub_1007B1378(*v0);
}

uint64_t sub_1007B1534@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1007B125C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1007B1558(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007B15D4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1007B1580(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007B15D4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1007B15A8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1007B0FE4(a1, a2);
}

uint64_t sub_1007B15BC(_QWORD *a1)
{
  return sub_1007B13C0(a1);
}

unint64_t sub_1007B15D4()
{
  unint64_t result;

  result = qword_100C07078;
  if (!qword_100C07078)
  {
    result = swift_getWitnessTable(&unk_1009CA814, &type metadata for MapComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C07078);
  }
  return result;
}

uint64_t sub_1007B1610(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MapComponent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for MapComponent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1007B16A0 + 4 * byte_1009CA6C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1007B16D4 + 4 * byte_1009CA6C0[v4]))();
}

uint64_t sub_1007B16D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007B16DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1007B16E4);
  return result;
}

uint64_t sub_1007B16F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1007B16F8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1007B16FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007B1704(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MapComponent.CodingKeys()
{
  return &type metadata for MapComponent.CodingKeys;
}

unint64_t sub_1007B1724()
{
  unint64_t result;

  result = qword_100C07088;
  if (!qword_100C07088)
  {
    result = swift_getWitnessTable(&unk_1009CA7EC, &type metadata for MapComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C07088);
  }
  return result;
}

unint64_t sub_1007B1764()
{
  unint64_t result;

  result = qword_100C07090;
  if (!qword_100C07090)
  {
    result = swift_getWitnessTable(&unk_1009CA75C, &type metadata for MapComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C07090);
  }
  return result;
}

unint64_t sub_1007B17A4()
{
  unint64_t result;

  result = qword_100C07098;
  if (!qword_100C07098)
  {
    result = swift_getWitnessTable(&unk_1009CA784, &type metadata for MapComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100C07098);
  }
  return result;
}

uint64_t sub_1007B17E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_1000BA294(&qword_100BC42C8);
  v1 = swift_allocObject(v0, 72, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1009891E0;
  *(_QWORD *)(v1 + 32) = static Color.green.getter();
  *(_QWORD *)(v1 + 40) = static Color.yellow.getter();
  *(_QWORD *)(v1 + 48) = static Color.orange.getter();
  v2 = static Color.pink.getter();
  *(_QWORD *)(v1 + 56) = v2;
  v3 = static Color.purple.getter(v2);
  *(_QWORD *)(v1 + 64) = v3;
  specialized Array._endMutation()(v3);
  return Gradient.init(colors:)(v1);
}

uint64_t sub_1007B1860()
{
  uint64_t result;

  result = sub_1007B17E0();
  qword_100CAF408 = result;
  return result;
}

uint64_t sub_1007B187C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 352);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 352);
  }
  else
  {
    v2 = static Color.black.getter();
    *(_QWORD *)(v0 + 352) = v2;
    swift_retain(v2);
    v1 = 0;
  }
  swift_retain(v1);
  return v2;
}

double sub_1007B18C0()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 24) & 1) == 0)
    return *(double *)(v0 + 16);
  *(_QWORD *)(v0 + 16) = 0x4034000000000000;
  *(_BYTE *)(v0 + 24) = 0;
  return 20.0;
}

uint64_t sub_1007B18E4()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 528) != 1)
    return *(_QWORD *)(v0 + 520);
  result = 2;
  *(_QWORD *)(v0 + 520) = 2;
  *(_BYTE *)(v0 + 528) = 0;
  return result;
}

double sub_1007B190C()
{
  uint64_t v0;
  double result;

  if ((*(_BYTE *)(v0 + 152) & 1) == 0)
    return *(double *)(v0 + 144);
  result = 40.0 - sub_1007B19F4();
  *(double *)(v0 + 144) = result;
  *(_BYTE *)(v0 + 152) = 0;
  return result;
}

double sub_1007B1944()
{
  uint64_t v0;
  double result;

  if ((*(_BYTE *)(v0 + 168) & 1) == 0)
    return *(double *)(v0 + 160);
  result = 32.0 - sub_1007B19F4();
  *(double *)(v0 + 160) = result;
  *(_BYTE *)(v0 + 168) = 0;
  return result;
}

double sub_1007B197C()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 328) & 1) == 0)
    return *(double *)(v0 + 320);
  *(_QWORD *)(v0 + 320) = 0x4061800000000000;
  *(_BYTE *)(v0 + 328) = 0;
  return 140.0;
}

double sub_1007B19AC()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 200) & 1) == 0)
    return *(double *)(v0 + 192);
  *(_QWORD *)(v0 + 192) = 0x4030000000000000;
  *(_BYTE *)(v0 + 200) = 0;
  return sub_1000BCAC8();
}

void sub_1007B19CC()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 121) & 1) != 0)
  {
    *(_QWORD *)(v0 + 112) = 0x4024000000000000;
    *(_WORD *)(v0 + 120) = 0;
  }
  else
  {
    sub_1000C3188();
  }
}

double sub_1007B19F4()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 104) & 1) == 0)
    return *(double *)(v0 + 96);
  *(_QWORD *)(v0 + 96) = 0x4020000000000000;
  *(_BYTE *)(v0 + 104) = 0;
  return 8.0;
}

double sub_1007B1A18()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 280) & 1) == 0)
    return *(double *)(v0 + 272);
  *(_QWORD *)(v0 + 272) = 0x4024000000000000;
  return sub_1000C40B4((_BYTE *)(v0 + 280));
}

double sub_1007B1A38()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 232) & 1) == 0)
    return *(double *)(v0 + 224);
  *(_QWORD *)(v0 + 224) = 0x4024000000000000;
  *(_BYTE *)(v0 + 232) = 0;
  return 10.0;
}

double sub_1007B1A5C()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 248) & 1) == 0)
    return *(double *)(v0 + 240);
  *(_QWORD *)(v0 + 240) = 0x4030000000000000;
  *(_BYTE *)(v0 + 248) = 0;
  return sub_1000BCAC8();
}

double sub_1007B1A7C()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 56) & 1) == 0)
    return *(double *)(v0 + 48);
  *(_QWORD *)(v0 + 48) = 0x4030000000000000;
  *(_BYTE *)(v0 + 56) = 0;
  return sub_1000BCAC8();
}

double sub_1007B1A9C()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 184) & 1) == 0)
    return *(double *)(v0 + 176);
  *(_QWORD *)(v0 + 176) = 0x4040000000000000;
  *(_BYTE *)(v0 + 184) = 0;
  return 32.0;
}

void sub_1007B1AC0()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 137) & 1) != 0)
  {
    *(_QWORD *)(v0 + 128) = 0x403C000000000000;
    *(_WORD *)(v0 + 136) = 0;
  }
  else
  {
    sub_1000C3188();
  }
}

void sub_1007B1AE8()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 345) & 1) != 0)
  {
    *(_QWORD *)(v0 + 336) = 0;
    *(_BYTE *)(v0 + 344) = 1;
    *(_BYTE *)(v0 + 345) = 0;
  }
  else
  {
    sub_1000C3188();
  }
}

double sub_1007B1B18()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 40) & 1) == 0)
    return *(double *)(v0 + 32);
  *(_QWORD *)(v0 + 32) = 0x4020000000000000;
  *(_BYTE *)(v0 + 40) = 0;
  return 8.0;
}

double sub_1007B1B3C()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 88) & 1) == 0)
    return *(double *)(v0 + 80);
  *(_QWORD *)(v0 + 80) = 0x4030000000000000;
  *(_BYTE *)(v0 + 88) = 0;
  return sub_1000BCAC8();
}

double sub_1007B1B5C()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 264) & 1) == 0)
    return *(double *)(v0 + 256);
  *(_QWORD *)(v0 + 256) = 0x4034000000000000;
  *(_BYTE *)(v0 + 264) = 0;
  return 20.0;
}

double sub_1007B1B84()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 312) & 1) == 0)
    return *(double *)(v0 + 304);
  *(_QWORD *)(v0 + 304) = 0x406D000000000000;
  *(_BYTE *)(v0 + 312) = 0;
  return 232.0;
}

double sub_1007B1BAC()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 296) & 1) == 0)
    return *(double *)(v0 + 288);
  *(_QWORD *)(v0 + 288) = 0x406DC00000000000;
  *(_BYTE *)(v0 + 296) = 0;
  return 238.0;
}

double sub_1007B1BDC()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 216) & 1) == 0)
    return *(double *)(v0 + 208);
  *(_QWORD *)(v0 + 208) = 0x4028000000000000;
  *(_BYTE *)(v0 + 216) = 0;
  return 12.0;
}

double sub_1007B1C00()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 416) & 1) == 0)
    return *(double *)(v0 + 408);
  *(_QWORD *)(v0 + 408) = 0x4010000000000000;
  return sub_1000BB5FC((_BYTE *)(v0 + 416));
}

double sub_1007B1C20()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 432) & 1) == 0)
    return *(double *)(v0 + 424);
  *(_QWORD *)(v0 + 424) = 0x4024000000000000;
  return sub_1000C40B4((_BYTE *)(v0 + 432));
}

double sub_1007B1C40()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 448) & 1) == 0)
    return *(double *)(v0 + 440);
  *(_QWORD *)(v0 + 440) = 0x4010000000000000;
  return sub_1000BB5FC((_BYTE *)(v0 + 448));
}

double sub_1007B1C60()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 464) & 1) == 0)
    return *(double *)(v0 + 456);
  *(_QWORD *)(v0 + 456) = 0x3FF999999999999ALL;
  *(_BYTE *)(v0 + 464) = 0;
  return 1.6;
}

double sub_1007B1C94()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 496) & 1) == 0)
    return *(double *)(v0 + 488);
  *(_QWORD *)(v0 + 488) = 0x4010000000000000;
  return sub_1000BB5FC((_BYTE *)(v0 + 496));
}

void sub_1007B1CB4(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1007B1CC0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007B5D08();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1007B1CE8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007B5D08();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1007B1D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 *inited;
  __n128 *v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;

  sub_100099310();
  a19 = v21;
  a20 = v22;
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v29 = sub_1000BA294(&qword_100C075E0);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  sub_100079FBC();
  v31 = v28[3];
  v32 = v28[4];
  sub_1000DB418(v28, v31);
  v33 = sub_1007B5D08();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_100B91380, &unk_100B91380, v33, v31, v32);
  LOBYTE(a10) = 0;
  v34 = sub_100099418();
  sub_1000D1B14(v34, v35, v36, v29);
  if (!v20)
  {
    v37 = sub_1000BA294(&qword_100C07318);
    inited = (__n128 *)swift_initStackObject(v37, &v43);
    v39 = sub_1000D086C(inited, (__n128)xmmword_10097CA50);
    v39[3].n128_u64[0] = v26;
    v39[3].n128_u64[1] = v24;
    swift_bridgeObjectRetain();
    a10 = sub_1000C10FC((uint64_t)inited);
    v42 = 1;
    v40 = sub_1000BA294(&qword_100C07320);
    v41 = sub_1007B3C10();
    sub_1000B4634((uint64_t)&a10, (uint64_t)&v42, v29, v40, v41);
    sub_1000CE04C();
  }
  sub_1000C1D6C(*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8));
  sub_1000DB350();
  sub_1000B44B0();
}

void sub_1007B1E54(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v5;
  BOOL v6;

  v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2
    || (sub_1000D8DF8(1701869940, 0xE400000000000000) & 1) != 0
    || (a1 == 1635017060 ? (v5 = a2 == 0xE400000000000000) : (v5 = 0),
        v5
     || (sub_1000D8DF8(1635017060, 0xE400000000000000) & 1) != 0
     || (a1 == 0x696669746E656469 ? (v6 = a2 == 0xEA00000000007265) : (v6 = 0), v6)))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000D8DF8(0x696669746E656469, 0xEA00000000007265);
    sub_1000986E8();
  }
  sub_100079F70();
}

void sub_1007B1F64(uint64_t a1)
{
  unsigned __int8 v1;

  sub_1000B26C8(a1);
  Hasher._combine(_:)(v1);
  sub_10007A148();
  sub_100098918();
}

uint64_t sub_1007B1F90(char a1)
{
  if (!a1)
    return 1701869940;
  if (a1 == 1)
    return 1635017060;
  return 0x696669746E656469;
}

#error "1007B1FE8: call analysis failed (funcsize=6)"

void sub_1007B1FF4()
{
  unsigned __int8 *v0;

  sub_1007B1F64(*v0);
}

uint64_t sub_1007B1FFC()
{
  char *v0;

  return sub_1007B1F90(*v0);
}

void sub_1007B2004(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v4;

  sub_1007B1E54(a1, a2);
  *a3 = v4;
}

void sub_1007B2028(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1007B2034(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007B3A9C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1007B205C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007B3A9C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1007B2084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int EnumCaseMultiPayload;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[2];
  char v65;

  sub_100099310();
  a22 = v26;
  a23 = v27;
  v28 = v23;
  v30 = v29;
  v60 = type metadata accessor for AutomationCellInfo(0);
  sub_10009D98C();
  __chkstk_darwin(v31);
  sub_100088FDC();
  v62 = v32;
  v33 = sub_1000BF2CC();
  sub_10009D98C();
  __chkstk_darwin(v34);
  sub_100088FDC();
  v61 = v35;
  type metadata accessor for AutomationInfo(0);
  sub_10009D98C();
  __chkstk_darwin(v36);
  sub_100098728();
  v39 = v38 - v37;
  v40 = sub_1000BA294(&qword_100C072B8);
  v63 = *(_QWORD *)(v40 - 8);
  sub_10009D98C();
  __chkstk_darwin(v41);
  sub_100079FBC();
  v43 = v30[3];
  v42 = v30[4];
  sub_1000DB418(v30, v43);
  v44 = sub_1007B3A9C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_100B91260, &unk_100B91260, v44, v43, v42);
  sub_100080C0C(v28, v39, type metadata accessor for AutomationInfo);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v39);
  if (!EnumCaseMultiPayload)
  {
    v46 = v61;
    sub_10007802C(v39, v61, type metadata accessor for AutomationViewInfo);
    LOBYTE(v64[0]) = 0;
    sub_1000C1834(2003134838, 0xE400000000000000, (uint64_t)v64);
    if (!v24)
    {
      LOBYTE(v64[0]) = 1;
      sub_100086DA4(&qword_100C072D8, type metadata accessor for AutomationViewInfo, (uint64_t)&unk_1009CA9AC);
      v52 = sub_1000BEFF4();
      sub_1000B4634(v52, v53, v54, v33, v55);
      sub_1000BCAD0();
    }
    v51 = type metadata accessor for AutomationViewInfo;
    goto LABEL_11;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v46 = v62;
    sub_10007802C(v39, v62, type metadata accessor for AutomationCellInfo);
    LOBYTE(v64[0]) = 0;
    sub_1000C1834(1819043171, 0xE400000000000000, (uint64_t)v64);
    if (!v24)
    {
      LOBYTE(v64[0]) = 1;
      sub_100086DA4(&qword_100C072D0, type metadata accessor for AutomationCellInfo, (uint64_t)&unk_1009CA95C);
      v47 = sub_1000BEFF4();
      sub_1000B4634(v47, v48, v49, v60, v50);
      sub_1000BCAD0();
    }
    v51 = type metadata accessor for AutomationCellInfo;
LABEL_11:
    sub_1000979AC(v46, v51);
    goto LABEL_12;
  }
  v57 = *(_QWORD *)v39;
  v56 = *(_QWORD *)(v39 + 8);
  v58 = *(_BYTE *)(v39 + 16);
  LOBYTE(v64[0]) = 0;
  sub_1000C1834(0x6E656E6F706D6F63, 0xE900000000000074, (uint64_t)v64);
  if (v24)
  {
    sub_10009BCF8(v25, *(uint64_t (**)(uint64_t, uint64_t))(v63 + 8));
    sub_100109AAC();
    goto LABEL_16;
  }
  v64[0] = v57;
  v64[1] = v56;
  v65 = v58;
  sub_1000DA24C();
  v59 = sub_1007B3AD8();
  sub_1000B4634((uint64_t)v64, (uint64_t)&a13, v40, (uint64_t)&unk_100B912F0, v59);
  sub_100109AAC();
  sub_1000BCAD0();
LABEL_12:
  sub_10009BCF8(v25, *(uint64_t (**)(uint64_t, uint64_t))(v63 + 8));
LABEL_16:
  sub_1000DB350();
  sub_1000B44B0();
}

#error "1007B2374: call analysis failed (funcsize=5)"

uint64_t sub_1007B2380(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007B3B14();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1007B23A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007B3B14();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1007B23D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;

  sub_100099310();
  sub_1000CDE14();
  sub_10009D98C();
  __chkstk_darwin(v2);
  sub_100088FDC();
  sub_1000BF2CC();
  sub_10009D98C();
  __chkstk_darwin(v3);
  sub_100099234();
  sub_1000BA294(&qword_100C072E0);
  sub_10009D98C();
  __chkstk_darwin(v4);
  sub_100098728();
  v6 = v0[3];
  v5 = v0[4];
  sub_1000DB418(v0, v6);
  v7 = sub_1007B3B14();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_100B911D0, &unk_100B911D0, v7, v6, v5);
  sub_100080C0C((uint64_t)v0, v1, type metadata accessor for AutomationViewInfo);
  v8 = (char *)sub_1007B24E0 + 4 * byte_1009CA87A[swift_getEnumCaseMultiPayload(v1)];
  __asm { BR              X10 }
}

void sub_1007B24E0()
{
  uint64_t v0;
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  void (*v11)(void);
  uint64_t v12;
  __n128 *inited;
  __n128 *v14;
  uint64_t v15;
  unint64_t v16;

  v4 = *v1;
  v3 = v1[1];
  sub_1000D9288();
  v5 = sub_100099418();
  v6 = *(_QWORD *)(v2 - 168);
  sub_1000DF994(v5, v7, v8, v6);
  if (v0)
  {
    v9 = sub_1000CD7B4();
    v10(v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = sub_1000BA294(&qword_100C07318);
    inited = (__n128 *)swift_initStackObject(v12, v2 - 160);
    v14 = sub_1000D086C(inited, (__n128)xmmword_10097CA50);
    v14[3].n128_u64[0] = v4;
    v14[3].n128_u64[1] = v3;
    *(_QWORD *)(v2 - 96) = sub_1000C10FC((uint64_t)v14);
    sub_1000DA24C();
    v15 = sub_1000BA294(&qword_100C07320);
    v16 = sub_1007B3C10();
    sub_1000AE908(v2 - 96, v2 - 65, v6, v15, v16);
    sub_1000DADAC();
    sub_1000CD7B4();
    v11();
  }
  sub_1000DB350();
  sub_1000B44B0();
}

unint64_t sub_1007B2848(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100B5B878, v2);
  sub_1000986E8();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_1007B288C(char a1)
{
  if (!a1)
    return sub_10009D78C();
  if (a1 == 1)
    return 0x697472417377656ELL;
  return 0xD000000000000016;
}

void sub_1007B28EC()
{
  sub_1007B23D0();
}

uint64_t sub_1007B2900(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007B3C6C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1007B2928(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007B3C6C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1007B2950()
{
  sub_10068A8F8();
}

void sub_1007B295C()
{
  sub_1004A76DC();
}

double sub_1007B2964(uint64_t a1)
{
  char *v1;

  return sub_1001D85B8(a1, *v1);
}

void sub_1007B296C(uint64_t a1)
{
  sub_1001DA080(a1);
}

unint64_t sub_1007B2974@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1007B2848(*a1);
  *a2 = result;
  return result;
}

void sub_1007B29A0(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t v3;

  *a1 = sub_1007B288C(*v1);
  a1[1] = v3;
  sub_10004A298();
}

uint64_t sub_1007B29C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1007B5D44();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_1007B2A10()
{
  char v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t inited;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  sub_100099310();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = sub_1000BA294(&qword_100C07330);
  v30 = *(_QWORD *)(v8 - 8);
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_100079FBC();
  v10 = v7[3];
  v11 = v7[4];
  sub_1000DB418(v7, v10);
  v12 = sub_1007B3C6C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_100B910B0, &unk_100B910B0, v12, v10, v11);
  if (!v1)
  {
    LOBYTE(v31) = 0;
    sub_1000D1B14(v5, v3, (uint64_t)&v31, v8);
LABEL_8:
    sub_1000C1D6C(*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8));
    goto LABEL_9;
  }
  if (v1 != 1)
  {
    LOBYTE(v31) = (v5 | v3) != 0;
    sub_1007B3CA8();
    v25 = sub_1000C1BF4();
    sub_1000B4634(v25, v26, v27, v28, v29);
    goto LABEL_8;
  }
  LOBYTE(v31) = 2;
  v13 = sub_1007B3CA8();
  swift_bridgeObjectRetain();
  v14 = sub_1000C1BF4();
  sub_1000B4634(v14, v15, v16, v17, v13);
  if (!v13)
  {
    v18 = sub_1000BA294(&qword_100C07318);
    inited = swift_initStackObject(v18, &v32);
    *(_OWORD *)(inited + 16) = xmmword_10097CA50;
    *(_QWORD *)(inited + 32) = 0x656C746974;
    *(_QWORD *)(inited + 40) = 0xE500000000000000;
    *(_QWORD *)(inited + 48) = v5;
    *(_QWORD *)(inited + 56) = v3;
    v31 = sub_1000C10FC(inited);
    sub_1000DA24C();
    v20 = sub_1000BA294(&qword_100C07320);
    sub_1007B3C10();
    v21 = sub_1000C1BF4();
    sub_1000B4634(v21, v22, v23, v20, v24);
    sub_1000CE04C();
    goto LABEL_8;
  }
  sub_1000C1D6C(*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8));
  sub_10006BD8C(v5, v3, 1u);
LABEL_9:
  sub_1000DB350();
  sub_1000B44B0();
}

